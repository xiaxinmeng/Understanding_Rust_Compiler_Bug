{"sha": "30d287947efab771a850c16a1fb60fc65b2ae148", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBkMjg3OTQ3ZWZhYjc3MWE4NTBjMTZhMWZiNjBmYzY1YjJhZTE0OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2002-02-08T20:00:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2002-02-08T20:00:40Z"}, "message": "interpret.cc (convert): New function.\n\n\t* interpret.cc (convert): New function.\n\t(continue1) [insn_d2i, insn_d2l, insn_f2i, insn_f2l]: Use\n\tconvert.\n\tInclude Long.h.\n\nFrom-SVN: r49621", "tree": {"sha": "68980faa9a6e4cf34d64664961a7a86bd989bd2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68980faa9a6e4cf34d64664961a7a86bd989bd2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30d287947efab771a850c16a1fb60fc65b2ae148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d287947efab771a850c16a1fb60fc65b2ae148", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d287947efab771a850c16a1fb60fc65b2ae148", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d287947efab771a850c16a1fb60fc65b2ae148/comments", "author": null, "committer": null, "parents": [{"sha": "c50503ac9bab0bf918937a386b4201f4f76076d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c50503ac9bab0bf918937a386b4201f4f76076d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c50503ac9bab0bf918937a386b4201f4f76076d8"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "8cc752616e5365b56fecad13f373d96ebe729e8b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d287947efab771a850c16a1fb60fc65b2ae148/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d287947efab771a850c16a1fb60fc65b2ae148/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=30d287947efab771a850c16a1fb60fc65b2ae148", "patch": "@@ -1,3 +1,10 @@\n+2002-02-08  Tom Tromey  <tromey@redhat.com>\n+\n+\t* interpret.cc (convert): New function.\n+\t(continue1) [insn_d2i, insn_d2l, insn_f2i, insn_f2l]: Use\n+\tconvert.\n+\tInclude Long.h.\n+\n 2002-02-08  Anthony Green  <green@redhat.com>\n \n \t* configure.host: Add support for xscale-elf embedded target."}, {"sha": "6f93bc699942139c768ebfcb4e5377c93b97b325", "filename": "libjava/interpret.cc", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30d287947efab771a850c16a1fb60fc65b2ae148/libjava%2Finterpret.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30d287947efab771a850c16a1fb60fc65b2ae148/libjava%2Finterpret.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finterpret.cc?ref=30d287947efab771a850c16a1fb60fc65b2ae148", "patch": "@@ -21,6 +21,7 @@ details.  */\n #include <java/lang/System.h>\n #include <java/lang/String.h>\n #include <java/lang/Integer.h>\n+#include <java/lang/Long.h>\n #include <java/lang/StringBuffer.h>\n #include <java/lang/Class.h>\n #include <java/lang/reflect/Modifier.h>\n@@ -67,6 +68,22 @@ static inline void dupx (_Jv_word *sp, int n, int x)\n   \n };\n \n+// Used to convert from floating types to integral types.\n+template<typename TO, typename FROM>\n+static inline TO\n+convert (FROM val, TO min, TO max)\n+{\n+  TO ret;\n+  if (val >= (FROM) max)\n+    ret = max;\n+  else if (val <= (FROM) min)\n+    ret = min;\n+  else if (val != val)\n+    ret = 0;\n+  else\n+    ret = (TO) val;\n+  return ret;\n+}\n \n #define PUSHA(V)  (sp++)->o = (V)\n #define PUSHI(V)  (sp++)->i = (V)\n@@ -1534,23 +1551,39 @@ void _Jv_InterpMethod::continue1 (_Jv_InterpMethodInvocation *inv)\n       NEXT_INSN;\n \n      insn_f2i:\n-      { jint value = (jint)POPF (); PUSHI(value); }\n+      {\n+\tusing namespace java::lang;\n+\tjint value = convert (POPF (), Integer::MIN_VALUE, Integer::MAX_VALUE);\n+\tPUSHI(value);\n+      }\n       NEXT_INSN;\n \n      insn_f2l:\n-      { jlong value = (jlong)POPF (); PUSHL(value); }\n+      {\n+\tusing namespace java::lang;\n+\tjlong value = convert (POPF (), Long::MIN_VALUE, Long::MAX_VALUE);\n+\tPUSHI(value);\n+      }\n       NEXT_INSN;\n \n      insn_f2d:\n       { jdouble value = POPF (); PUSHD(value); }\n       NEXT_INSN;\n \n      insn_d2i:\n-      { jint value = (jint)POPD (); PUSHI(value); }\n+      {\n+\tusing namespace java::lang;\n+\tjint value = convert (POPD (), Integer::MIN_VALUE, Integer::MAX_VALUE);\n+\tPUSHI(value);\n+      }\n       NEXT_INSN;\n \n      insn_d2l:\n-      { jlong value = (jlong)POPD (); PUSHL(value); }\n+      {\n+\tusing namespace java::lang;\n+\tjlong value = convert (POPD (), Long::MIN_VALUE, Long::MAX_VALUE);\n+\tPUSHL(value);\n+      }\n       NEXT_INSN;\n \n      insn_d2f:"}]}