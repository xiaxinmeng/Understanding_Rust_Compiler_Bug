{"sha": "61bee0e370337644a75c98c550b2508a59fde890", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiZWUwZTM3MDMzNzY0NGE3NWM5OGM1NTBiMjUwOGE1OWZkZTg5MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T09:57:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T09:57:47Z"}, "message": "[multiple changes]\n\n2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb: improve error message on exponentiation.\n\n2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* a-calend.adb: Move constant Epoch_Offset from package\n\tConversion_Operations to top level.\n\t(Delay_Operations.To_Duration): Define a constant which represents\n\t\"end of time\" and use it as a guard against very distant delay dates.\n\tProtect the code against overflow when performing the origin shift to\n\tUnix time.\n\nFrom-SVN: r146095", "tree": {"sha": "71361ae103915a536a466c140fbb0b0baa9c0e6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71361ae103915a536a466c140fbb0b0baa9c0e6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61bee0e370337644a75c98c550b2508a59fde890", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bee0e370337644a75c98c550b2508a59fde890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61bee0e370337644a75c98c550b2508a59fde890", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61bee0e370337644a75c98c550b2508a59fde890/comments", "author": null, "committer": null, "parents": [{"sha": "361effb15bd3544f2994a22d2d544aae0dceb678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361effb15bd3544f2994a22d2d544aae0dceb678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361effb15bd3544f2994a22d2d544aae0dceb678"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "b56f38f0a522b716d92f203384eb4c16b822011a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=61bee0e370337644a75c98c550b2508a59fde890", "patch": "@@ -1,3 +1,16 @@\n+2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb: improve error message on exponentiation.\n+\n+2009-04-15  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* a-calend.adb: Move constant Epoch_Offset from package\n+\tConversion_Operations to top level.\n+\t(Delay_Operations.To_Duration): Define a constant which represents\n+\t\"end of time\" and use it as a guard against very distant delay dates.\n+\tProtect the code against overflow when performing the origin shift to\n+\tUnix time.\n+\n 2009-04-15  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_prag.adb: Minor reformatting."}, {"sha": "a2759b53a897c8a7542bbd39dd38e3e3a273454b", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=61bee0e370337644a75c98c550b2508a59fde890", "patch": "@@ -177,6 +177,10 @@ package body Ada.Calendar is\n    Unix_Min : constant Time_Rep :=\n                 Ada_Low + Time_Rep (17 * 366 + 52 * 365) * Nanos_In_Day;\n \n+   Epoch_Offset : constant Time_Rep := (136 * 365 + 44 * 366) * Nanos_In_Day;\n+   --  The difference between 2150-1-1 UTC and 1970-1-1 UTC expressed in\n+   --  nanoseconds. Note that year 2100 is non-leap.\n+\n    Cumulative_Days_Before_Month :\n      constant array (Month_Number) of Natural :=\n        (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334);\n@@ -765,11 +769,6 @@ package body Ada.Calendar is\n \n    package body Conversion_Operations is\n \n-      Epoch_Offset : constant Time_Rep :=\n-                       (136 * 365 + 44 * 366) * Nanos_In_Day;\n-      --  The difference between 2150-1-1 UTC and 1970-1-1 UTC expressed in\n-      --  nanoseconds. Note that year 2100 is non-leap.\n-\n       -----------------\n       -- To_Ada_Time --\n       -----------------\n@@ -972,15 +971,24 @@ package body Ada.Calendar is\n       -----------------\n \n       function To_Duration (Date : Time) return Duration is\n+         pragma Unsuppress (Overflow_Check);\n+\n+         Safe_Ada_High : constant Time_Rep := Ada_High - Epoch_Offset;\n+         --  This value represents a \"safe\" end of time. In order to perform a\n+         --  proper conversion to Unix duration, we will have to shift origins\n+         --  at one point. For very distant dates, this means an overflow check\n+         --  failure. To prevent this, the function returns the \"safe\" end of\n+         --  time (roughly 2219) which is still distant enough.\n+\n          Elapsed_Leaps : Natural;\n          Next_Leap_N   : Time_Rep;\n          Res_N         : Time_Rep;\n \n       begin\n          Res_N := Time_Rep (Date);\n \n-         --  If the target supports leap seconds, remove any leap seconds\n-         --  elapsed up to the input date.\n+         --  Step 1: If the target supports leap seconds, remove any leap\n+         --  seconds elapsed up to the input date.\n \n          if Leap_Support then\n             Cumulative_Leap_Seconds\n@@ -1000,10 +1008,17 @@ package body Ada.Calendar is\n \n          Res_N := Res_N - Time_Rep (Elapsed_Leaps) * Nano;\n \n-         --  Perform a shift in origins, note that enforcing type Time on\n-         --  both operands will invoke Ada.Calendar.\"-\".\n+         --  Step 2: Perform a shift in origins to obtain a Unix equivalent of\n+         --  the input. Guard against very large delay values such as the end\n+         --  of time since the computation will overflow.\n+\n+         if Res_N > Safe_Ada_High then\n+            Res_N := Safe_Ada_High;\n+         else\n+            Res_N := Res_N + Epoch_Offset;\n+         end if;\n \n-         return Time (Res_N) - Time (Unix_Min);\n+         return Time_Rep_To_Duration (Res_N);\n       end To_Duration;\n \n    end Delay_Operations;"}, {"sha": "e9a20c5a70d4bb931290f052d395b26578822da8", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61bee0e370337644a75c98c550b2508a59fde890/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=61bee0e370337644a75c98c550b2508a59fde890", "patch": "@@ -5213,6 +5213,20 @@ package body Sem_Ch4 is\n                Error_Msg_N (\"access parameter is not allowed to be null\", L);\n                Error_Msg_N (\"\\(call would raise Constraint_Error)\", L);\n                return;\n+\n+            --  Another special case for exponentiation, where the right\n+            --  operand must be Natural, independently of the base.\n+\n+            elsif Nkind (N) = N_Op_Expon\n+              and then Is_Numeric_Type (Etype (L))\n+              and then not Is_Overloaded (R)\n+              and then\n+                First_Subtype (Base_Type (Etype (R))) /= Standard_Integer\n+              and then Base_Type (Etype (R)) /= Universal_Integer\n+            then\n+               Error_Msg_NE\n+                 (\"exponent must be of type Natural, found}\", R, Etype (R));\n+               return;\n             end if;\n \n             --  If we fall through then just give general message. Note that in"}]}