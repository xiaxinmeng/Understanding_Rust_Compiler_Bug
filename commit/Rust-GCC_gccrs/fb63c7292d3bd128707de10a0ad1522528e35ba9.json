{"sha": "fb63c7292d3bd128707de10a0ad1522528e35ba9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI2M2M3MjkyZDNiZDEyODcwN2RlMTBhMGFkMTUyMjUyOGUzNWJhOQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2005-03-30T07:06:05Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2005-03-30T07:06:05Z"}, "message": "* config/rs6000/rs6000.c (rs6000_arg_partial_bytes): Update comments.\n\nFrom-SVN: r97242", "tree": {"sha": "b6e12562b5b7ddea8c248092aff572e71519504c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6e12562b5b7ddea8c248092aff572e71519504c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb63c7292d3bd128707de10a0ad1522528e35ba9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb63c7292d3bd128707de10a0ad1522528e35ba9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb63c7292d3bd128707de10a0ad1522528e35ba9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb63c7292d3bd128707de10a0ad1522528e35ba9/comments", "author": null, "committer": null, "parents": [{"sha": "f0078f86897b4756478cd95ea9b963ddfa4390bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0078f86897b4756478cd95ea9b963ddfa4390bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0078f86897b4756478cd95ea9b963ddfa4390bc"}], "stats": {"total": 17, "additions": 10, "deletions": 7}, "files": [{"sha": "0a63204cbeec718f43d1b7c0d0df8ee3edc4e40f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb63c7292d3bd128707de10a0ad1522528e35ba9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb63c7292d3bd128707de10a0ad1522528e35ba9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb63c7292d3bd128707de10a0ad1522528e35ba9", "patch": "@@ -1,5 +1,7 @@\n 2005-03-30  Alan Modra  <amodra@bigpond.net.au>\n \n+\t* config/rs6000/rs6000.c (rs6000_arg_partial_bytes): Update comments.\n+\n \t* calls.c (struct arg_data): Update \"partial\" comment.\n \t(load_register_parameters): Update \"nregs\" comment.\n "}, {"sha": "831b8c259f4347942c8a7d673803d6caa418bc32", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb63c7292d3bd128707de10a0ad1522528e35ba9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb63c7292d3bd128707de10a0ad1522528e35ba9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fb63c7292d3bd128707de10a0ad1522528e35ba9", "patch": "@@ -4957,10 +4957,10 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n }\n \f\n /* For an arg passed partly in registers and partly in memory, this is\n-   the number of registers used.  For args passed entirely in registers\n-   or entirely in memory, zero.  When an arg is described by a PARALLEL,\n-   perhaps using more than one register type, this function returns the\n-   number of bytes of registers used by the PARALLEL.  */\n+   the number of bytes passed in registers.  For args passed entirely in\n+   registers or entirely in memory, zero.  When an arg is described by a\n+   PARALLEL, perhaps using more than one register type, this function\n+   returns the number of bytes used by the first element of the PARALLEL.  */\n \n static int\n rs6000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n@@ -4985,9 +4985,10 @@ rs6000_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   align_words = rs6000_parm_start (mode, type, cum->words);\n \n   if (USE_FP_FOR_ARG_P (cum, mode, type)\n-      /* If we are passing this arg in gprs as well, then this function\n-\t should return the number of gprs (or memory) partially passed,\n-\t *not* the number of fprs.  */\n+      /* If we are passing this arg in the fixed parameter save area\n+\t (gprs or memory) as well as fprs, then this function should\n+\t return the number of bytes passed in the parameter save area\n+\t rather than bytes passed in fprs.  */ \n       && !(type\n \t   && (cum->nargs_prototype <= 0\n \t       || (DEFAULT_ABI == ABI_AIX"}]}