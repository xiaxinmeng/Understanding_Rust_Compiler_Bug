{"sha": "4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU2NmRlMTA0ZGQ2N2M4ZWUzZDE0YTE0YmM1MDE5ZjZjMzJiNWM5Mg==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-02-07T19:15:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-02-07T19:15:10Z"}, "message": "re PR middle-end/24306 (va_arg gets confused when skipping over certain zero-sized types with -msse)\n\ngcc/\n\tPR middle-end/24306\n\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): New function.\n\t(mips_gimplify_va_arg_expr): Call it instead of\n\tstd_gimplify_va_arg_expr.\n\ngcc/testsuite/\n\tPR middle-end/24306\n\tPR target/52154\n\t* lib/target-supports.exp (check_effective_target_mips_eabi): New.\n\t* gcc.target/mips/va-arg-1.c: New test.\n\nFrom-SVN: r183977", "tree": {"sha": "7ba9ccd153582b4f310e1a46c83d99819f72d9b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ba9ccd153582b4f310e1a46c83d99819f72d9b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cb5ce1a2d4e2452ecdbe3306a8d3f74c6c4790b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb5ce1a2d4e2452ecdbe3306a8d3f74c6c4790b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb5ce1a2d4e2452ecdbe3306a8d3f74c6c4790b"}], "stats": {"total": 166, "additions": 165, "deletions": 1}, "files": [{"sha": "8ea5882f934116c3df0d15411cd35256642f49e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "patch": "@@ -1,3 +1,10 @@\n+2012-02-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/24306\n+\t* config/mips/mips.c (mips_std_gimplify_va_arg_expr): New function.\n+\t(mips_gimplify_va_arg_expr): Call it instead of\n+\tstd_gimplify_va_arg_expr.\n+\n 2012-02-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000.c (rs6000_trampoline_init): Fix error"}, {"sha": "56863fa88eaf180de8b9dc78c059697f75bdf08a", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "patch": "@@ -5576,6 +5576,95 @@ mips_va_start (tree valist, rtx nextarg)\n     }\n }\n \n+/* Like std_gimplify_va_arg_expr, but apply alignment to zero-sized\n+   types as well.  */\n+\n+static tree\n+mips_std_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n+\t\t\t       gimple_seq *post_p)\n+{\n+  tree addr, t, type_size, rounded_size, valist_tmp;\n+  unsigned HOST_WIDE_INT align, boundary;\n+  bool indirect;\n+\n+  indirect = pass_by_reference (NULL, TYPE_MODE (type), type, false);\n+  if (indirect)\n+    type = build_pointer_type (type);\n+\n+  align = PARM_BOUNDARY / BITS_PER_UNIT;\n+  boundary = targetm.calls.function_arg_boundary (TYPE_MODE (type), type);\n+\n+  /* When we align parameter on stack for caller, if the parameter\n+     alignment is beyond MAX_SUPPORTED_STACK_ALIGNMENT, it will be\n+     aligned at MAX_SUPPORTED_STACK_ALIGNMENT.  We will match callee\n+     here with caller.  */\n+  if (boundary > MAX_SUPPORTED_STACK_ALIGNMENT)\n+    boundary = MAX_SUPPORTED_STACK_ALIGNMENT;\n+\n+  boundary /= BITS_PER_UNIT;\n+\n+  /* Hoist the valist value into a temporary for the moment.  */\n+  valist_tmp = get_initialized_tmp_var (valist, pre_p, NULL);\n+\n+  /* va_list pointer is aligned to PARM_BOUNDARY.  If argument actually\n+     requires greater alignment, we must perform dynamic alignment.  */\n+  if (boundary > align)\n+    {\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t  fold_build_pointer_plus_hwi (valist_tmp, boundary - 1));\n+      gimplify_and_add (t, pre_p);\n+\n+      t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist_tmp,\n+\t\t  fold_build2 (BIT_AND_EXPR, TREE_TYPE (valist),\n+\t\t\t       valist_tmp,\n+\t\t\t       build_int_cst (TREE_TYPE (valist), -boundary)));\n+      gimplify_and_add (t, pre_p);\n+    }\n+  else\n+    boundary = align;\n+\n+  /* If the actual alignment is less than the alignment of the type,\n+     adjust the type accordingly so that we don't assume strict alignment\n+     when dereferencing the pointer.  */\n+  boundary *= BITS_PER_UNIT;\n+  if (boundary < TYPE_ALIGN (type))\n+    {\n+      type = build_variant_type_copy (type);\n+      TYPE_ALIGN (type) = boundary;\n+    }\n+\n+  /* Compute the rounded size of the type.  */\n+  type_size = size_in_bytes (type);\n+  rounded_size = round_up (type_size, align);\n+\n+  /* Reduce rounded_size so it's sharable with the postqueue.  */\n+  gimplify_expr (&rounded_size, pre_p, post_p, is_gimple_val, fb_rvalue);\n+\n+  /* Get AP.  */\n+  addr = valist_tmp;\n+  if (PAD_VARARGS_DOWN && !integer_zerop (rounded_size))\n+    {\n+      /* Small args are padded downward.  */\n+      t = fold_build2_loc (input_location, GT_EXPR, sizetype,\n+\t\t       rounded_size, size_int (align));\n+      t = fold_build3 (COND_EXPR, sizetype, t, size_zero_node,\n+\t\t       size_binop (MINUS_EXPR, rounded_size, type_size));\n+      addr = fold_build_pointer_plus (addr, t);\n+    }\n+\n+  /* Compute new value for AP.  */\n+  t = fold_build_pointer_plus (valist_tmp, rounded_size);\n+  t = build2 (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n+  gimplify_and_add (t, pre_p);\n+\n+  addr = fold_convert (build_pointer_type (type), addr);\n+\n+  if (indirect)\n+    addr = build_va_arg_indirect_ref (addr);\n+\n+  return build_va_arg_indirect_ref (addr);\n+}\n+\n /* Implement TARGET_GIMPLIFY_VA_ARG_EXPR.  */\n \n static tree\n@@ -5590,7 +5679,7 @@ mips_gimplify_va_arg_expr (tree valist, tree type, gimple_seq *pre_p,\n     type = build_pointer_type (type);\n \n   if (!EABI_FLOAT_VARARGS_P)\n-    addr = std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n+    addr = mips_std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n   else\n     {\n       tree f_ovfl, f_gtop, f_ftop, f_goff, f_foff;"}, {"sha": "76daf3d308d72897457bde6fce717a56153202b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "patch": "@@ -1,3 +1,10 @@\n+2012-02-07  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/24306\n+\tPR target/52154\n+\t* lib/target-supports.exp (check_effective_target_mips_eabi): New.\n+\t* gcc.target/mips/va-arg-1.c: New test.\n+\n 2012-02-07  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/no-r11-3.c (outer_func): Fix error message"}, {"sha": "87c95f525fb83086debab003c764962d48a9dfe9", "filename": "gcc/testsuite/gcc.target/mips/va-arg-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fva-arg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fva-arg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fva-arg-1.c?ref=4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "patch": "@@ -0,0 +1,48 @@\n+/* See PR 52154 for the xfail.  */\n+/* { dg-do run { xfail { mips_eabi && { hard_float && ilp32 } } } } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct __attribute__((aligned(16))) empty {};\n+\n+static void __attribute__((noinline))\n+check_args (int count, ...)\n+{\n+  va_list va;\n+  int i;\n+\n+  va_start (va, count);\n+  for (i = 0; i < count; i++)\n+    if (va_arg (va, int) != 1000 + i)\n+      abort ();\n+\n+  va_arg (va, struct empty);\n+  if (va_arg (va, int) != 2000 + count)\n+    abort ();\n+\n+  va_end (va);\n+}\n+\n+int\n+main (void)\n+{\n+  struct empty e;\n+\n+  check_args (1, 1000, e, 2001);\n+  check_args (2, 1000, 1001, e, 2002);\n+  check_args (3, 1000, 1001, 1002, e, 2003);\n+  check_args (4, 1000, 1001, 1002, 1003, e, 2004);\n+  check_args (5, 1000, 1001, 1002, 1003, 1004, e, 2005);\n+  check_args (6, 1000, 1001, 1002, 1003, 1004, 1005, e, 2006);\n+  check_args (7, 1000, 1001, 1002, 1003, 1004, 1005, 1006, e, 2007);\n+  check_args (8, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, e, 2008);\n+  check_args (9, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,\n+\t      1008, e, 2009);\n+  check_args (10, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,\n+\t      1008, 1009, e, 2010);\n+  check_args (11, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,\n+\t      1008, 1009, 1010, e, 2011);\n+  return 0;\n+}"}, {"sha": "02490d9b92a7acaf50d4ed6f0a2ac3ebab3c5109", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4566de104dd67c8ee3d14a14bc5019f6c32b5c92/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=4566de104dd67c8ee3d14a14bc5019f6c32b5c92", "patch": "@@ -924,6 +924,19 @@ proc check_effective_target_mips_rel { } {\n     }]\n }\n \n+# Return true if the target is a MIPS target that uses the EABI.\n+\n+proc check_effective_target_mips_eabi { } {\n+    if { ![istarget mips*-*-*] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages mips_eabi object {\n+\t#ifndef __mips_eabi\n+\t#error FOO\n+\t#endif\n+    }]\n+}\n+\n # Return 1 if the current multilib does not generate PIC by default.\n \n proc check_effective_target_nonpic { } {"}]}