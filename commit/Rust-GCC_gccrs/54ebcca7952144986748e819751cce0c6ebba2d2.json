{"sha": "54ebcca7952144986748e819751cce0c6ebba2d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlYmNjYTc5NTIxNDQ5ODY3NDhlODE5NzUxY2NlMGM2ZWJiYTJkMg==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2018-04-06T07:46:30Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2018-04-06T07:46:30Z"}, "message": "IBM Z: Fix vcond-shift testcase.\n\ngcc/testsuite/ChangeLog:\n\n2018-04-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/vector/vcond-shift.c: Use the proper conditions\n\tto trigger the optimization. Do some cleanup and function\n\trenaming.  Add more test functions.\n\nFrom-SVN: r259165", "tree": {"sha": "fe17615a2edd71ac06398ddd6c9d21181f3a5d14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe17615a2edd71ac06398ddd6c9d21181f3a5d14"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54ebcca7952144986748e819751cce0c6ebba2d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebcca7952144986748e819751cce0c6ebba2d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ebcca7952144986748e819751cce0c6ebba2d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ebcca7952144986748e819751cce0c6ebba2d2/comments", "author": null, "committer": null, "parents": [{"sha": "aad98a61044276f322dbdb9876e83ead7d8a9e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aad98a61044276f322dbdb9876e83ead7d8a9e60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aad98a61044276f322dbdb9876e83ead7d8a9e60"}], "stats": {"total": 169, "additions": 139, "deletions": 30}, "files": [{"sha": "cafaae9940868d5ee58c73245f4976c6002f28ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ebcca7952144986748e819751cce0c6ebba2d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ebcca7952144986748e819751cce0c6ebba2d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54ebcca7952144986748e819751cce0c6ebba2d2", "patch": "@@ -1,3 +1,9 @@\n+2018-04-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/vector/vcond-shift.c: Use the proper conditions\n+\tto trigger the optimization. Do some cleanup and function\n+\trenaming.  Add more test functions.\n+\n 2018-04-06  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/s390.exp: Remove -O0 from list of torture"}, {"sha": "a6b4e97aa5022eedc13a6d07c97a741ea6fb802d", "filename": "gcc/testsuite/gcc.target/s390/vector/vcond-shift.c", "status": "modified", "additions": 133, "deletions": 30, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54ebcca7952144986748e819751cce0c6ebba2d2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvcond-shift.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54ebcca7952144986748e819751cce0c6ebba2d2/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvcond-shift.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fvcond-shift.c?ref=54ebcca7952144986748e819751cce0c6ebba2d2", "patch": "@@ -3,71 +3,174 @@\n /* { dg-do compile { target { s390*-*-* } } } */\n /* { dg-options \"-O3 -march=z13 -mzarch\" } */\n \n-/* { dg-final { scan-assembler \"vesraf\\t%v.?,%v.?,31\" } } */\n-/* { dg-final { scan-assembler \"vesrah\\t%v.?,%v.?,15\" } } */\n-/* { dg-final { scan-assembler \"vesrab\\t%v.?,%v.?,7\" } } */\n+/* { dg-final { scan-assembler-times \"vesraf\\t%v.?,%v.?,31\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vesrah\\t%v.?,%v.?,15\" 6 } } */\n+/* { dg-final { scan-assembler-times \"vesrab\\t%v.?,%v.?,7\" 6 } } */\n /* { dg-final { scan-assembler-not \"vzero\\t*\" } } */\n-/* { dg-final { scan-assembler \"vesrlf\\t%v.?,%v.?,31\" } } */\n-/* { dg-final { scan-assembler \"vesrlh\\t%v.?,%v.?,15\" } } */\n-/* { dg-final { scan-assembler \"vesrlb\\t%v.?,%v.?,7\" } } */\n+/* { dg-final { scan-assembler-times \"vesrlf\\t%v.?,%v.?,31\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vesrlh\\t%v.?,%v.?,15\" 4 } } */\n+/* { dg-final { scan-assembler-times \"vesrlb\\t%v.?,%v.?,7\" 4 } } */\n \n-#define SZ 8\n-#define SZ2 16\n-#define SZ3 32\n+/* Make it expand to two vector operations.  */\n+#define ITER(X) (2 * (16 / sizeof (X[1])))\n \n-void foo(int *w)\n+void\n+vesraf_div (int *x)\n {\n   int i;\n-  int *ww = __builtin_assume_aligned (w, 8);\n+  int *xx = __builtin_assume_aligned (x, 8);\n \n-  /* Should expand to (ww + (ww < 0 ? 1 : 0)) >> 1\n-     which in turn should get simplified to (ww + (ww >> 31)) >> 1.  */\n-  for (i = 0; i < SZ; i++)\n-    ww[i] = ww[i] / 2;\n+  /* Should expand to (xx + (xx < 0 ? 1 : 0)) >> 1\n+     which in turn should get simplified to (xx + (xx >> 31)) >> 1.  */\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] / 2;\n }\n \n-void foo2(short *w)\n+void\n+vesrah_div (short *x)\n {\n   int i;\n-  short *ww = __builtin_assume_aligned (w, 8);\n+  short *xx = __builtin_assume_aligned (x, 8);\n \n-  for (i = 0; i < SZ2; i++)\n-    ww[i] = ww[i] / 2;\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] / 2;\n }\n \n \n-void foo3(signed char *w)\n+void\n+vesrab_div (signed char *x)\n {\n   int i;\n-  signed char *ww = __builtin_assume_aligned (w, 8);\n+  signed char *xx = __builtin_assume_aligned (x, 8);\n \n-  for (i = 0; i < SZ3; i++)\n-    ww[i] = ww[i] / 2;\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] / 2;\n }\n \n-int baz(int *x)\n+\n+\n+int\n+vesraf_lt (int *x)\n {\n   int i;\n   int *xx = __builtin_assume_aligned (x, 8);\n \n-  for (i = 0; i < SZ; i++)\n+  for (i = 0; i < ITER (xx); i++)\n     xx[i] = xx[i] < 0 ? -1 : 0;\n }\n \n-int baf(short *x)\n+int\n+vesrah_lt (short *x)\n {\n   int i;\n   short *xx = __builtin_assume_aligned (x, 8);\n \n-  for (i = 0; i < SZ2; i++)\n-    xx[i] = xx[i] >= 0 ? 0 : 1;\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] < 0 ? -1 : 0;\n }\n \n-int bal(signed char *x)\n+int\n+vesrab_lt (signed char *x)\n {\n   int i;\n   signed char *xx = __builtin_assume_aligned (x, 8);\n \n-  for (i = 0; i < SZ3; i++)\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] < 0 ? -1 : 0;\n+}\n+\n+\n+\n+int\n+vesraf_ge (int *x)\n+{\n+  int i;\n+  int *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n     xx[i] = xx[i] >= 0 ? 0 : -1;\n }\n+\n+int\n+vesrah_ge (short *x)\n+{\n+  int i;\n+  short *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] >= 0 ? 0 : -1;\n+}\n+\n+int\n+vesrab_ge (signed char *x)\n+{\n+  int i;\n+  signed char *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] >= 0 ? 0 : -1;\n+}\n+\n+\n+\n+int\n+vesrlf_lt (int *x)\n+{\n+  int i;\n+  int *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] < 0 ? 1 : 0;\n+}\n+\n+int\n+vesrlh_lt (short *x)\n+{\n+  int i;\n+  short *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] < 0 ? 1 : 0;\n+}\n+\n+int\n+vesrlb_lt (signed char *x)\n+{\n+  int i;\n+  signed char *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] < 0 ? 1 : 0;\n+}\n+\n+\n+\n+int\n+vesrlf_ge (int *x)\n+{\n+  int i;\n+  int *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] >= 0 ? 0 : 1;\n+}\n+\n+int\n+vesrlh_ge (short *x)\n+{\n+  int i;\n+  short *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] >= 0 ? 0 : 1;\n+}\n+\n+int\n+vesrlb_ge (signed char *x)\n+{\n+  int i;\n+  signed char *xx = __builtin_assume_aligned (x, 8);\n+\n+  for (i = 0; i < ITER (xx); i++)\n+    xx[i] = xx[i] >= 0 ? 0 : 1;\n+}"}]}