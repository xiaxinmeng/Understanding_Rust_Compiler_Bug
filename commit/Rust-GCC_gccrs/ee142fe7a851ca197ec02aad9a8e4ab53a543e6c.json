{"sha": "ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxNDJmZTdhODUxY2ExOTdlYzAyYWFkOWE4ZTRhYjUzYTU0M2U2Yw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-21T02:19:44Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-21T02:19:44Z"}, "message": "ChangeLog: Follow spelling conventions.\n\n\t* ChangeLog: Follow spelling conventions.\n\t* class.c: Likewise.\n\t* decl.c: Likewise.\n\t* expr.c: Likewise.\n\t* gjavah.c: Likewise.\n\t* java-tree.h: Likewise.\n\t* jcf-dump.c: Likewise.\n\t* jcf-parse.c: Likewise.\n\t* jvspec.c: Likewise.\n\t* lang.c: Likewise.\n\t* mangle.c: Likewise.\n\t* parse.y: Likewise.\n\nFrom-SVN: r57378", "tree": {"sha": "160aaaaeb0c2822ce3be579946a81e16f1aafb30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/160aaaaeb0c2822ce3be579946a81e16f1aafb30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/comments", "author": null, "committer": null, "parents": [{"sha": "42a6388c3ff9645a7b95fbc1075dbcf20b2a18e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a6388c3ff9645a7b95fbc1075dbcf20b2a18e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a6388c3ff9645a7b95fbc1075dbcf20b2a18e0"}], "stats": {"total": 125, "additions": 70, "deletions": 55}, "files": [{"sha": "46c11b445182fd1fe8b6d9e54d8ff4d080610837", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -1,3 +1,18 @@\n+2002-09-20  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* ChangeLog: Follow spelling conventions.\n+\t* class.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* gjavah.c: Likewise.\n+\t* java-tree.h: Likewise.\n+\t* jcf-dump.c: Likewise.\n+\t* jcf-parse.c: Likewise.\n+\t* jvspec.c: Likewise.\n+\t* lang.c: Likewise.\n+\t* mangle.c: Likewise.\n+\t* parse.y: Likewise.\n+\n 2002-09-17  Tom Tromey  <tromey@redhat.com>\n \n \t* lex.c (java_read_unicode_collapsing_terminators): Handle case\n@@ -2830,7 +2845,7 @@ Tue Oct 23 14:02:17 2001  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \t(generate_classfile): Compute the attribute count, invoke\n \t`append_gcj_attribute'.\n \t* jcf.h (typedef struct JCF): `seen_in_zip' and `java_source'\n-\tturned into bit fields. New bit field `right_zip.'\n+\tturned into bit-fields. New bit-field `right_zip.'\n \t(JCF_ZERO): Set `right_zip' to zero.\n \t* lang-options.h (-fforce-classes-archive-check): Added flag.\n \t* lang.c (flag_force_classes_archive_check): New flag.\n@@ -6912,8 +6927,8 @@ Fri Dec 24 00:25:29 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \t* jcf.h (typedef struct JCF): Field `outofsynch' deleted.\n \t(jcf_out_of_synch): Prototype deleted.\n \t* parse.h (struct parser_ctxt): `minus_seen', `java_error_flag',\n-\t`deprecated' and `class_err': integer turned into bit fields.\n-\tNew bit fields `saved_data_ctx' and `saved_data'. Fixed comments.\n+\t`deprecated' and `class_err': integer turned into bit-fields.\n+\tNew bit-fields `saved_data_ctx' and `saved_data'. Fixed comments.\n \t* parse.y (package_list): New global.\n \t(package_declaration:): Record newly parsed package name.\n \t(extra_ctxp_pushed_p): Static global deleted.\n@@ -12888,7 +12903,7 @@ Mon Apr 27 10:50:05 1998  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n \tthis_wfl. Call to parse_error_context uses this_wfl instead of\n \trelying on lookup_cl.\n \t(parser_check_super): Comment reflects function's new returned\n-\ttype (int). Function returns non zero value on error.\n+\ttype (int). Function returns nonzero value on error.\n \t(create_jdep_list, reverse_jdep_list, obtain_incomplete_type,\n \tregister_incomplete_type, jdep_resolve_class): New functions to\n \thandle incomplete types in declarations."}, {"sha": "ca7acf0f8b492e073831bd0acecb0379f38b69ad", "filename": "gcc/java/class.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -75,7 +75,7 @@ typedef struct assume_compiled_node_struct\n   /* The class or package name.  */\n   const char *ident;\n \n-  /* Non-zero if this represents an exclusion.  */\n+  /* Nonzero if this represents an exclusion.  */\n   int excludep;\n \n   /* Pointers to other nodes in the tree.  */\n@@ -141,7 +141,7 @@ find_assume_compiled_node (node, ident)\n }\n \n /* Add a new IDENT to the include/exclude tree.  It's an exclusion\n-   if EXCLUDEP is non-zero.  */\n+   if EXCLUDEP is nonzero.  */\n \n void\n add_assume_compiled (ident, excludep)\n@@ -192,7 +192,7 @@ add_assume_compiled (ident, excludep)\n   parent->child = node;\n }\n \n-/* Returns non-zero if IDENT is the name of a class that the compiler\n+/* Returns nonzero if IDENT is the name of a class that the compiler\n    should assume has been compiled to FIXME  */\n \n static int"}, {"sha": "4b06aaf7d65fb183802e5745a95c3bc1e7c249a2", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -57,7 +57,7 @@ static tree check_local_named_variable PARAMS ((tree, tree, int, int *));\n static tree check_local_unnamed_variable PARAMS ((tree, tree, tree));\n static void dump_function PARAMS ((enum tree_dump_index, tree));\n \n-/* Set to non-zero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initilization code\n    before static field references.  */\n extern int always_initialize_class_p;\n "}, {"sha": "c192d46f41d5b80c37f22ae26cd4f604322b711f", "filename": "gcc/java/expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -91,7 +91,7 @@ static GTY(()) tree methods_ident;\n static GTY(()) tree ncode_ident;\n tree dtable_ident = NULL_TREE;\n \n-/* Set to non-zero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initilization code\n    before static field references.  */\n int always_initialize_class_p;\n \n@@ -176,7 +176,7 @@ java_truthvalue_conversion (expr)\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n     case FFS_EXPR:\n-      /* These don't change whether an object is non-zero or zero.  */\n+      /* These don't change whether an object is nonzero or zero.  */\n       return java_truthvalue_conversion (TREE_OPERAND (expr, 0));\n \n     case COND_EXPR:"}, {"sha": "d1688400aee9a2e63a4e0680f4ddd9f793d810b4", "filename": "gcc/java/gjavah.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fgjavah.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fgjavah.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgjavah.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -48,7 +48,7 @@ static int found_error = 0;\n /* Nonzero if we're generating JNI output.  */\n static int flag_jni = 0;\n \n-/* When non zero, warn when source file is newer than matching class\n+/* When nonzero, warn when source file is newer than matching class\n    file.  */\n int flag_newer = 1;\n "}, {"sha": "5d76d3cbb5cd05e0c1cf68464b09e1377bf4830f", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -160,20 +160,20 @@ extern int flag_emit_class_files;\n \n extern int flag_filelist_file;\n \n-/* When non zero, assume all native functions are implemented with\n+/* When nonzero, assume all native functions are implemented with\n    JNI, not CNI.  */\n \n extern int flag_jni;\n \n-/* When non zero, report the now deprecated empty statements.  */\n+/* When nonzero, report the now deprecated empty statements.  */\n \n extern int flag_extraneous_semicolon;\n \n-/* When non zero, always check for a non gcj generated classes archive.  */\n+/* When nonzero, always check for a non gcj generated classes archive.  */\n \n extern int flag_force_classes_archive_check;\n \n-/* When non zero, we emit xref strings. Values of the flag for xref\n+/* When nonzero, we emit xref strings. Values of the flag for xref\n    backends are defined in xref.h.  */\n \n extern int flag_emit_xref;\n@@ -190,28 +190,28 @@ extern int flag_redundant;\n extern int flag_not_overriding;\n extern int flag_static_local_jdk1_1;\n \n-/* When non zero, warn when source file is newer than matching class\n+/* When nonzero, warn when source file is newer than matching class\n    file.  */\n extern int flag_newer;\n \n-/* When non zero, call a library routine to do integer divisions. */\n+/* When nonzero, call a library routine to do integer divisions. */\n extern int flag_use_divide_subroutine;\n \n-/* When non zero, generate code for the Boehm GC.  */\n+/* When nonzero, generate code for the Boehm GC.  */\n extern int flag_use_boehm_gc;\n \n-/* When non zero, assume the runtime uses a hash table to map an\n+/* When nonzero, assume the runtime uses a hash table to map an\n    object to its synchronization structure.  */\n extern int flag_hash_synchronization;\n \n-/* When non zero, generate checks for references to NULL.  */\n+/* When nonzero, generate checks for references to NULL.  */\n extern int flag_check_references;\n \n /* Used through STATIC_CLASS_INIT_OPT_P to check whether static\n    initialization optimization should be performed.  */\n extern int flag_optimize_sci;\n \n-/* When non zero, use offset tables for virtual method calls\n+/* When nonzero, use offset tables for virtual method calls\n    in order to improve binary compatibility. */\n extern int flag_indirect_dispatch;\n \n@@ -1699,7 +1699,7 @@ extern tree *type_map;\n     TREE_SIDE_EFFECTS (WHERE) = 1;\t\t\t\t\\\n   }\n \n-/* Non zero if TYPE is an unchecked exception */\n+/* Nonzero if TYPE is an unchecked exception */\n #define IS_UNCHECKED_EXCEPTION_P(TYPE)\t\t\t\t\\\n   (inherits_from_p ((TYPE), runtime_exception_type_node)\t\\\n    || inherits_from_p ((TYPE), error_exception_type_node))"}, {"sha": "13a177df066da69a43c891dd7c63f8ec0a0ab368", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -71,7 +71,7 @@ int flag_print_fields = 1;\n int flag_print_methods = 1;\n int flag_print_attributes = 1;\n \n-/* When non zero, warn when source file is newer than matching class\n+/* When nonzero, warn when source file is newer than matching class\n    file.  */\n int flag_newer = 1;\n "}, {"sha": "5e7957f07d655f6dc14e6af6abb79bc7a0d432f5", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -68,7 +68,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n extern struct obstack temporary_obstack;\n \n-/* Set to non-zero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initilization code\n    before static field references.  */\n extern int always_initialize_class_p;\n \n@@ -378,7 +378,7 @@ get_name_constant (jcf, index)\n   return name;\n }\n \n-/* Handle reading innerclass attributes. If a non zero entry (denoting\n+/* Handle reading innerclass attributes. If a nonzero entry (denoting\n    a non anonymous entry) is found, We augment the inner class list of\n    the outer context with the newly resolved innerclass.  */\n "}, {"sha": "84b34559462d4bbce4a07a933fae861088627aea", "filename": "gcc/java/jvspec.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjvspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fjvspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjvspec.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -148,7 +148,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n {\n   int i, j;\n \n-  /* If non-zero, the user gave us the `-v' flag.  */ \n+  /* If nonzero, the user gave us the `-v' flag.  */\n   int saw_verbose_flag = 0;\n \n   int saw_save_temps = 0;\n@@ -188,7 +188,7 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   /* The new argument list will be contained in this.  */\n   const char **arglist;\n \n-  /* Non-zero if we saw a `-xfoo' language specification on the\n+  /* Nonzero if we saw a `-xfoo' language specification on the\n      command line.  Used to avoid adding our own -xc++ if the user\n      already gave a language for the file.  */\n   int saw_speclang = 0;\n@@ -238,10 +238,10 @@ lang_specific_driver (in_argc, in_argv, in_added_libraries)\n   /* The total number of arguments with the new stuff.  */\n   int num_args = 1;\n \n-  /* Non-zero if linking is supposed to happen.  */\n+  /* Nonzero if linking is supposed to happen.  */\n   int will_link = 1;\n \n-  /* Non-zero if we want to find the spec file.  */\n+  /* Nonzero if we want to find the spec file.  */\n   int want_spec_file = 1;\n \n   /* The argument we use to specify the spec file.  */"}, {"sha": "d08aca8a9daee0468f1d961a5807573bac14eadb", "filename": "gcc/java/lang.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -126,62 +126,62 @@ int flag_emit_class_files = 0;\n \n int flag_filelist_file = 0;\n \n-/* When non zero, we emit xref strings. Values of the flag for xref\n+/* When nonzero, we emit xref strings. Values of the flag for xref\n    backends are defined in xref_flag_table, xref.c.  */\n \n int flag_emit_xref = 0;\n \n-/* When non zero, -Wall was turned on.  */\n+/* When nonzero, -Wall was turned on.  */\n int flag_wall = 0;\n \n-/* When non zero, check for redundant modifier uses.  */\n+/* When nonzero, check for redundant modifier uses.  */\n int flag_redundant = 0;\n \n-/* When non zero, call a library routine to do integer divisions. */\n+/* When nonzero, call a library routine to do integer divisions. */\n int flag_use_divide_subroutine = 1;\n \n-/* When non zero, generate code for the Boehm GC.  */\n+/* When nonzero, generate code for the Boehm GC.  */\n int flag_use_boehm_gc = 0;\n \n-/* When non zero, assume the runtime uses a hash table to map an\n+/* When nonzero, assume the runtime uses a hash table to map an\n    object to its synchronization structure.  */\n int flag_hash_synchronization;\n \n-/* When non zero, assume all native functions are implemented with\n+/* When nonzero, assume all native functions are implemented with\n    JNI, not CNI.  */\n int flag_jni = 0;\n \n-/* When non zero, warn when source file is newer than matching class\n+/* When nonzero, warn when source file is newer than matching class\n    file.  */\n int flag_newer = 1;\n \n-/* When non zero, generate checks for references to NULL.  */\n+/* When nonzero, generate checks for references to NULL.  */\n int flag_check_references = 0;\n \n /* The encoding of the source file.  */\n const char *current_encoding = NULL;\n \n-/* When non zero, report the now deprecated empty statements.  */\n+/* When nonzero, report the now deprecated empty statements.  */\n int flag_extraneous_semicolon;\n \n-/* When non zero, always check for a non gcj generated classes archive.  */\n+/* When nonzero, always check for a non gcj generated classes archive.  */\n int flag_force_classes_archive_check;\n \n /* When zero, don't optimize static class initialization. This flag shouldn't\n    be tested alone, use STATIC_CLASS_INITIALIZATION_OPTIMIZATION_P instead.  */\n int flag_optimize_sci = 1;\n \n-/* When non zero, use offset tables for virtual method calls\n+/* When nonzero, use offset tables for virtual method calls\n    in order to improve binary compatibility. */\n int flag_indirect_dispatch = 0;\n \n /* When zero, don't generate runtime array store checks. */\n int flag_store_check = 1;\n \n-/* When non zero, print extra version information.  */\n+/* When nonzero, print extra version information.  */\n static int version_flag = 0;\n \n-/* Set non-zero if the user specified -finline-functions on the command \n+/* Set nonzero if the user specified -finline-functions on the command\n    line.  */\n int flag_really_inline = 0;\n "}, {"sha": "88aec17dda2ff346d93223677e50ce6415d0c230", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -170,7 +170,7 @@ mangle_method_decl (mdecl)\n }\n \n /* This mangles a member name, like a function name or a field\n-   name. Handle cases were `name' is a C++ keyword.  Return a non zero\n+   name. Handle cases were `name' is a C++ keyword.  Return a nonzero\n    value if unicode encoding was required.  */\n \n static void\n@@ -340,7 +340,7 @@ find_compression_record_match (type, next_current)\n   return match;\n }\n \n-/* Mangle a record type. If a non zero value is returned, it means\n+/* Mangle a record type. If a nonzero value is returned, it means\n    that a 'N' was emitted (so that a matching 'E' can be emitted if\n    necessary.)  FOR_POINTER indicates that this element is for a pointer\n    symbol, meaning it was preceded by a 'P'. */"}, {"sha": "217f74cda92e7f562ee05c8e5c0a60f3e6a98779", "filename": "gcc/java/parse.y", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee142fe7a851ca197ec02aad9a8e4ab53a543e6c/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ee142fe7a851ca197ec02aad9a8e4ab53a543e6c", "patch": "@@ -2678,7 +2678,7 @@ pop_current_osb (ctxp)\n    Add mode documentation here. FIXME */\n \n /* Helper function. Create a new parser context. With\n-   COPY_FROM_PREVIOUS set to a non zero value, content of the previous\n+   COPY_FROM_PREVIOUS set to a nonzero value, content of the previous\n    context is copied, otherwise, the new context is zeroed. The newly\n    created context becomes the current one.  */\n \n@@ -6499,7 +6499,7 @@ java_check_regular_methods (class_decl)\n     abort ();\n }\n \n-/* Return a non zero value if the `throws' clause of METHOD (if any)\n+/* Return a nonzero value if the `throws' clause of METHOD (if any)\n    is incompatible with the `throws' clause of FOUND (if any).  */\n \n static void\n@@ -8238,7 +8238,7 @@ build_outer_field_access (id, decl)\n   return resolve_expression_name (access, NULL);\n }\n \n-/* Return a non zero value if NODE describes an outer field inner\n+/* Return a nonzero value if NODE describes an outer field inner\n    access.  */\n \n static int\n@@ -8274,7 +8274,7 @@ outer_field_access_p (type, decl)\n   return 0;\n }\n \n-/* Return a non zero value if NODE represents an outer field inner\n+/* Return a nonzero value if NODE represents an outer field inner\n    access that was been already expanded. As a side effect, it returns\n    the name of the field being accessed and the argument passed to the\n    access function, suitable for a regeneration of the access method\n@@ -10402,7 +10402,7 @@ patch_method_invocation (patch, primary, where, from_super,\n \t     this$0 (the immediate outer context) to\n \t     access$0(access$0(...(this$0))).\n \n-\t     maybe_use_access_method returns a non zero value if the\n+\t     maybe_use_access_method returns a nonzero value if the\n \t     this_arg has to be moved into the (then generated) stub\n \t     argument list. In the meantime, the selected function\n \t     might have be replaced by a generated stub. */\n@@ -10643,7 +10643,7 @@ maybe_use_access_method (is_super_init, mdecl, this_arg)\n   *mdecl = md;\n   *this_arg = ta;\n \n-  /* Returnin a non zero value indicates we were doing a non static\n+  /* Returnin a nonzero value indicates we were doing a non static\n      method invokation that is now a static invocation. It will have\n      callee displace `this' to insert it in the regular argument\n      list. */\n@@ -12294,7 +12294,7 @@ java_complete_lhs (node)\n   return node;\n }\n \n-/* Complete function call's argument. Return a non zero value is an\n+/* Complete function call's argument. Return a nonzero value is an\n    error was found.  */\n \n static int\n@@ -13136,7 +13136,7 @@ do_unary_numeric_promotion (arg)\n   return arg;\n }\n \n-/* Return a non zero value if SOURCE can be converted into DEST using\n+/* Return a nonzero value if SOURCE can be converted into DEST using\n    the method invocation conversion rule (5.3).  */\n static int\n valid_method_invocation_conversion_p (dest, source)\n@@ -13235,7 +13235,7 @@ java_decl_equiv (var_acc1, var_acc2)\n \t  && TREE_OPERAND (var_acc1, 1) == TREE_OPERAND (var_acc2, 1));\n }\n \n-/* Return a non zero value if CODE is one of the operators that can be\n+/* Return a nonzero value if CODE is one of the operators that can be\n    used in conjunction with the `=' operator in a compound assignment.  */\n \n static int\n@@ -14936,7 +14936,7 @@ build_new_loop (loop_body)\n            BODY\t\t\t end of this labeled block)\n        INCREMENT\t\t(if any)\n \n-  REVERSED, if non zero, tells that the loop condition expr comes\n+  REVERSED, if nonzero, tells that the loop condition expr comes\n   after the body, like in the do-while loop.\n \n   To obtain a loop, the loop body structure described above is"}]}