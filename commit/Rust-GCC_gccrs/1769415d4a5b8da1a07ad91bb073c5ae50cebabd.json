{"sha": "1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc2OTQxNWQ0YTViOGRhMWEwN2FkOTFiYjA3M2M1YWU1MGNlYmFiZA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-12-05T18:03:44Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-12-05T18:03:44Z"}, "message": "re PR sanitizer/59333 (ICE with long long and -m32 -fsanitize=undefined)\n\n\tPR sanitizer/59333\n\tPR sanitizer/59397\n\t* ubsan.c: Include rtl.h and expr.h.\n\t(ubsan_encode_value): Add new parameter.  If expanding, assign\n\ta stack slot for DECL_RTL of the temporary and call expand_assignment.\n\tHandle BOOLEAN_TYPE and ENUMERAL_TYPE.\n\t(ubsan_build_overflow_builtin): Adjust ubsan_encode_value call.\n\t* ubsan.h (ubsan_encode_value): Adjust declaration.\n\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): Move\n\tubsan_build_overflow_builtin above expand_normal call.  Surround this call\n\twith push_temp_slots and pop_temp_slots.\n\t(ubsan_expand_si_overflow_neg_check): Likewise.\n\t(ubsan_expand_si_overflow_mul_check): Likewise.\ntestsuite/\n\t* c-c++-common/ubsan/pr59333.c: New test.\n\t* c-c++-common/ubsan/pr59397.c: New test.\n\nFrom-SVN: r205714", "tree": {"sha": "d6c513523dadd6906703a923781d3f66bc4ebeee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6c513523dadd6906703a923781d3f66bc4ebeee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fde427f4fa132c7d86197c6273c1ef4729f3ae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fde427f4fa132c7d86197c6273c1ef4729f3ae5"}], "stats": {"total": 164, "additions": 117, "deletions": 47}, "files": [{"sha": "55757a06caf59eb532af51d62dcd8829e41f963c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -1,3 +1,19 @@\n+2013-12-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/59333\n+\tPR sanitizer/59397\n+\t* ubsan.c: Include rtl.h and expr.h.\n+\t(ubsan_encode_value): Add new parameter.  If expanding, assign\n+\ta stack slot for DECL_RTL of the temporary and call expand_assignment.\n+\tHandle BOOLEAN_TYPE and ENUMERAL_TYPE.\n+\t(ubsan_build_overflow_builtin): Adjust ubsan_encode_value call.\n+\t* ubsan.h (ubsan_encode_value): Adjust declaration.\n+\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): Move\n+\tubsan_build_overflow_builtin above expand_normal call.  Surround this call\n+\twith push_temp_slots and pop_temp_slots.\n+\t(ubsan_expand_si_overflow_neg_check): Likewise.\n+\t(ubsan_expand_si_overflow_mul_check): Likewise.\n+\n 2013-12-05  Yufeng Zhang  <yufeng.zhang@arm.com>\n \n \t* gimple-ssa-strength-reduction.c (find_basis_for_candidate): Guard"}, {"sha": "fb1e5784b15bb472b71bc948cd6ad83d0f379440", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -171,8 +171,6 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n   arg1 = gimple_call_arg (stmt, 1);\n   done_label = gen_label_rtx ();\n   do_error = gen_label_rtx ();\n-  fn = ubsan_build_overflow_builtin (code, gimple_location (stmt),\n-\t\t\t\t     TREE_TYPE (arg0), arg0, arg1);\n   do_pending_stack_adjust ();\n   op0 = expand_normal (arg0);\n   op1 = expand_normal (arg1);\n@@ -237,13 +235,17 @@ ubsan_expand_si_overflow_addsub_check (tree_code code, gimple stmt)\n \t\t\t       PROB_VERY_LIKELY);\n     }\n \n-   emit_label (do_error);\n-   /* Expand the ubsan builtin call.  */\n-   expand_normal (fn);\n-   do_pending_stack_adjust ();\n+  emit_label (do_error);\n+  /* Expand the ubsan builtin call.  */\n+  push_temp_slots ();\n+  fn = ubsan_build_overflow_builtin (code, gimple_location (stmt),\n+\t\t\t\t     TREE_TYPE (arg0), arg0, arg1);\n+  expand_normal (fn);\n+  pop_temp_slots ();\n+  do_pending_stack_adjust ();\n \n-   /* We're done.  */\n-   emit_label (done_label);\n+  /* We're done.  */\n+  emit_label (done_label);\n \n   if (lhs)\n     emit_move_insn (target, res);\n@@ -262,8 +264,6 @@ ubsan_expand_si_overflow_neg_check (gimple stmt)\n   arg1 = gimple_call_arg (stmt, 1);\n   done_label = gen_label_rtx ();\n   do_error = gen_label_rtx ();\n-  fn = ubsan_build_overflow_builtin (NEGATE_EXPR, gimple_location (stmt),\n-\t\t\t\t     TREE_TYPE (arg1), arg1, NULL_TREE);\n \n   do_pending_stack_adjust ();\n   op1 = expand_normal (arg1);\n@@ -313,7 +313,11 @@ ubsan_expand_si_overflow_neg_check (gimple stmt)\n \n   emit_label (do_error);\n   /* Expand the ubsan builtin call.  */\n+  push_temp_slots ();\n+  fn = ubsan_build_overflow_builtin (NEGATE_EXPR, gimple_location (stmt),\n+\t\t\t\t     TREE_TYPE (arg1), arg1, NULL_TREE);\n   expand_normal (fn);\n+  pop_temp_slots ();\n   do_pending_stack_adjust ();\n \n   /* We're done.  */\n@@ -337,8 +341,6 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n   arg1 = gimple_call_arg (stmt, 1);\n   done_label = gen_label_rtx ();\n   do_error = gen_label_rtx ();\n-  fn = ubsan_build_overflow_builtin (MULT_EXPR, gimple_location (stmt),\n-\t\t\t\t     TREE_TYPE (arg0), arg0, arg1);\n \n   do_pending_stack_adjust ();\n   op0 = expand_normal (arg0);\n@@ -418,7 +420,11 @@ ubsan_expand_si_overflow_mul_check (gimple stmt)\n \n   emit_label (do_error);\n   /* Expand the ubsan builtin call.  */\n+  push_temp_slots ();\n+  fn = ubsan_build_overflow_builtin (MULT_EXPR, gimple_location (stmt),\n+\t\t\t\t     TREE_TYPE (arg0), arg0, arg1);\n   expand_normal (fn);\n+  pop_temp_slots ();\n   do_pending_stack_adjust ();\n \n   /* We're done.  */"}, {"sha": "62010b269a420c49b9f8212e35598c5179a46fd7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -1,3 +1,10 @@\n+2013-12-05  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/59333\n+\tPR sanitizer/59397\n+\t* c-c++-common/ubsan/pr59333.c: New test.\n+\t* c-c++-common/ubsan/pr59397.c: New test.\n+\n 2013-12-05  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* gcc.dg/vect/vect-nop-move.c: New test."}, {"sha": "af5392049601011b97eb328bee48b8342203c7ec", "filename": "gcc/testsuite/c-c++-common/ubsan/pr59333.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59333.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59333.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59333.c?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } } */\n+\n+long long int __attribute__ ((noinline, noclone))\n+foo (long long int i, long long int j)\n+{\n+  asm (\"\");\n+  return i + j;\n+}\n+\n+int\n+main (void)\n+{\n+  foo (2LL, __LONG_LONG_MAX__);\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: 2 \\\\+ 9223372036854775807 cannot be represented in type 'long long int'(\\n|\\r\\n|\\r)\" } */"}, {"sha": "0de025835192457bb66d7e36b31336aae1302537", "filename": "gcc/testsuite/c-c++-common/ubsan/pr59397.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59397.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59397.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59397.c?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n+\n+typedef enum E { A = -1 } e;\n+int\n+foo (void)\n+{\n+  e e = A;\n+  return e + 1;\n+}"}, {"sha": "846e884de52f440006665638726fbd54f71b3f6f", "filename": "gcc/ubsan.c", "status": "modified", "additions": 46, "deletions": 34, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -27,6 +27,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cgraph.h\"\n #include \"tree-pass.h\"\n #include \"tree-ssa-alias.h\"\n+#include \"tree-pretty-print.h\"\n #include \"internal-fn.h\"\n #include \"gimple-expr.h\"\n #include \"gimple.h\"\n@@ -40,6 +41,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfgloop.h\"\n #include \"ubsan.h\"\n #include \"c-family/c-common.h\"\n+#include \"rtl.h\"\n+#include \"expr.h\"\n \n /* Map from a tree to a VAR_DECL tree.  */\n \n@@ -102,45 +105,53 @@ decl_for_type_insert (tree type, tree decl)\n \n /* Helper routine, which encodes a value in the pointer_sized_int_node.\n    Arguments with precision <= POINTER_SIZE are passed directly,\n-   the rest is passed by reference.  T is a value we are to encode.  */\n+   the rest is passed by reference.  T is a value we are to encode.\n+   IN_EXPAND_P is true if this function is called during expansion.  */\n \n tree\n-ubsan_encode_value (tree t)\n+ubsan_encode_value (tree t, bool in_expand_p)\n {\n   tree type = TREE_TYPE (t);\n-  switch (TREE_CODE (type))\n-    {\n-    case INTEGER_TYPE:\n-      if (TYPE_PRECISION (type) <= POINTER_SIZE)\n+  const unsigned int bitsize = GET_MODE_BITSIZE (TYPE_MODE (type));\n+  if (bitsize <= POINTER_SIZE)\n+    switch (TREE_CODE (type))\n+      {\n+      case BOOLEAN_TYPE:\n+      case ENUMERAL_TYPE:\n+      case INTEGER_TYPE:\n \treturn fold_build1 (NOP_EXPR, pointer_sized_int_node, t);\n+      case REAL_TYPE:\n+\t{\n+\t  tree itype = build_nonstandard_integer_type (bitsize, true);\n+\t  t = fold_build1 (VIEW_CONVERT_EXPR, itype, t);\n+\t  return fold_convert (pointer_sized_int_node, t);\n+\t}\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  else\n+    {\n+      if (!DECL_P (t) || !TREE_ADDRESSABLE (t))\n+\t{\n+\t  /* The reason for this is that we don't want to pessimize\n+\t     code by making vars unnecessarily addressable.  */\n+\t  tree var = create_tmp_var (type, NULL);\n+\t  tree tem = build2 (MODIFY_EXPR, void_type_node, var, t);\n+\t  if (in_expand_p)\n+\t    {\n+\t      rtx mem\n+\t\t= assign_stack_temp_for_type (TYPE_MODE (type),\n+\t\t\t\t\t      GET_MODE_SIZE (TYPE_MODE (type)),\n+\t\t\t\t\t      type);\n+\t      SET_DECL_RTL (var, mem);\n+\t      expand_assignment (var, t, false);\n+\t      return build_fold_addr_expr (var);\n+\t    }\n+\t  t = build_fold_addr_expr (var);\n+\t  return build2 (COMPOUND_EXPR, TREE_TYPE (t), tem, t);\n+\t}\n       else\n \treturn build_fold_addr_expr (t);\n-    case REAL_TYPE:\n-      {\n-\tunsigned int bitsize = GET_MODE_BITSIZE (TYPE_MODE (type));\n-\tif (bitsize <= POINTER_SIZE)\n-\t  {\n-\t    tree itype = build_nonstandard_integer_type (bitsize, true);\n-\t    t = fold_build1 (VIEW_CONVERT_EXPR, itype, t);\n-\t    return fold_convert (pointer_sized_int_node, t);\n-\t  }\n-\telse\n-\t  {\n-\t    if (!TREE_ADDRESSABLE (t))\n-\t      {\n-\t\t/* The reason for this is that we don't want to pessimize\n-\t\t   code by making vars unnecessarily addressable.  */\n-\t\ttree var = create_tmp_var (TREE_TYPE (t), NULL);\n-\t\ttree tem = build2 (MODIFY_EXPR, void_type_node, var, t);\n-\t\tt = build_fold_addr_expr (var);\n-\t\treturn build2 (COMPOUND_EXPR, TREE_TYPE (t), tem, t);\n-\t      }\n-\t    else\n-\t      return build_fold_addr_expr (t);\n-\t  }\n-      }\n-    default:\n-      gcc_unreachable ();\n     }\n }\n \n@@ -663,8 +674,9 @@ ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n   tree fn = builtin_decl_explicit (fn_code);\n   return build_call_expr_loc (loc, fn, 2 + (code != NEGATE_EXPR),\n \t\t\t      build_fold_addr_expr_loc (loc, data),\n-\t\t\t      ubsan_encode_value (op0),\n-\t\t\t      op1 ? ubsan_encode_value (op1) : NULL_TREE);\n+\t\t\t      ubsan_encode_value (op0, true),\n+\t\t\t      op1 ? ubsan_encode_value (op1, true)\n+\t\t\t\t  : NULL_TREE);\n }\n \n /* Perform the signed integer instrumentation.  GSI is the iterator"}, {"sha": "fa7698509c4beaab8998389d1800d54b4dc6a2dc", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1769415d4a5b8da1a07ad91bb073c5ae50cebabd/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=1769415d4a5b8da1a07ad91bb073c5ae50cebabd", "patch": "@@ -41,7 +41,7 @@ extern tree ubsan_instrument_unreachable (location_t);\n extern tree ubsan_create_data (const char *, location_t,\n \t\t\t       const struct ubsan_mismatch_data *, ...);\n extern tree ubsan_type_descriptor (tree, bool);\n-extern tree ubsan_encode_value (tree);\n+extern tree ubsan_encode_value (tree, bool = false);\n extern bool is_ubsan_builtin_p (tree);\n extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree, tree);\n "}]}