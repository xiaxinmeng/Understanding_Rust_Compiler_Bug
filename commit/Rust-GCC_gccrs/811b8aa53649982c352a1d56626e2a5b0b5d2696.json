{"sha": "811b8aa53649982c352a1d56626e2a5b0b5d2696", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODExYjhhYTUzNjQ5OTgyYzM1MmExZDU2NjI2ZTJhNWIwYjVkMjY5Ng==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-02-11T22:57:53Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-15T10:19:35Z"}, "message": "[Ada] No_Task_Parts aspect\n\ngcc/ada/\n\n\t* aspects.ads (No_Task_Parts): New aspect.\n\t* snames.ads-tmpl: Add the aspect name.\n\t* exp_ch6.adb (Might_Have_Tasks): Return False if this is a\n\tclass-wide type whose specific type has No_Task_Parts.\n\t* freeze.adb (Check_No_Parts_Violations): This is an adaptation\n\tof the procedure formerly known as\n\tCheck_No_Controlled_Parts_Violations, which now supports both\n\tNo_Controlled_Parts and No_Task_Parts.  It takes a parameter\n\tindicating which aspect is being checked.\n\t(Freeze_Entity): Call Check_No_Parts_Violations for both\n\taspects.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): The code for\n\tAspect_No_Controlled_Parts already works as is with\n\tAspect_No_Task_Parts.\n\t* libgnat/a-iteint.ads: Add No_Task_Parts aspect to the two\n\titerator iterfaces.\n\t* doc/gnat_rm/implementation_defined_aspects.rst: Add\n\tdocumentation for the No_Task_Parts aspect.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "6db7811d68dae30e8e953ec0ea9302c2266b8726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6db7811d68dae30e8e953ec0ea9302c2266b8726"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/811b8aa53649982c352a1d56626e2a5b0b5d2696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811b8aa53649982c352a1d56626e2a5b0b5d2696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/811b8aa53649982c352a1d56626e2a5b0b5d2696", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/811b8aa53649982c352a1d56626e2a5b0b5d2696/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cee20bb1ebbe66d4065c33da9f8743683228ede", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cee20bb1ebbe66d4065c33da9f8743683228ede", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cee20bb1ebbe66d4065c33da9f8743683228ede"}], "stats": {"total": 1289, "additions": 677, "deletions": 612}, "files": [{"sha": "c5373e714d38dcaeb24d9e8089c7565011ca9179", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -117,6 +117,7 @@ package Aspects is\n       Aspect_Max_Queue_Length,              -- GNAT\n       Aspect_No_Caching,                    -- GNAT\n       Aspect_No_Controlled_Parts,\n+      Aspect_No_Task_Parts,                 -- GNAT\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Obsolescent,                   -- GNAT\n       Aspect_Output,\n@@ -405,6 +406,7 @@ package Aspects is\n       Aspect_Max_Queue_Length           => Expression,\n       Aspect_No_Caching                 => Optional_Expression,\n       Aspect_No_Controlled_Parts        => Optional_Expression,\n+      Aspect_No_Task_Parts              => Optional_Expression,\n       Aspect_Object_Size                => Expression,\n       Aspect_Obsolescent                => Optional_Expression,\n       Aspect_Output                     => Name,\n@@ -508,6 +510,7 @@ package Aspects is\n       Aspect_Max_Queue_Length             => False,\n       Aspect_No_Caching                   => False,\n       Aspect_No_Controlled_Parts          => False,\n+      Aspect_No_Task_Parts                => False,\n       Aspect_Object_Size                  => True,\n       Aspect_Obsolescent                  => False,\n       Aspect_Output                       => False,\n@@ -670,6 +673,7 @@ package Aspects is\n       Aspect_Max_Queue_Length             => Name_Max_Queue_Length,\n       Aspect_No_Caching                   => Name_No_Caching,\n       Aspect_No_Controlled_Parts          => Name_No_Controlled_Parts,\n+      Aspect_No_Task_Parts                => Name_No_Task_Parts,\n       Aspect_No_Elaboration_Code_All      => Name_No_Elaboration_Code_All,\n       Aspect_No_Inline                    => Name_No_Inline,\n       Aspect_No_Return                    => Name_No_Return,\n@@ -965,6 +969,7 @@ package Aspects is\n       Aspect_Max_Queue_Length             => Never_Delay,\n       Aspect_No_Caching                   => Never_Delay,\n       Aspect_No_Controlled_Parts          => Never_Delay,\n+      Aspect_No_Task_Parts                => Never_Delay,\n       Aspect_No_Elaboration_Code_All      => Never_Delay,\n       Aspect_No_Tagged_Streams            => Never_Delay,\n       Aspect_Obsolescent                  => Never_Delay,"}, {"sha": "fb92e4790bb6606c238cca864f8ee90011399aab", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_aspects.rst", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_aspects.rst?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -397,6 +397,19 @@ This aspect is equivalent to :ref:`pragma No_Tagged_Streams<Pragma-No_Tagged_Str\n argument specifying a root tagged type (thus this aspect can only be\n applied to such a type).\n \n+Aspect No_Task_Parts\n+========================\n+.. index:: No_Task_Parts\n+\n+Applies to a type. If True, requires that the type and any descendants\n+do not have any task parts. The rules for this aspect are the same as\n+for the language-defined No_Controlled_Parts aspect (see RM-H.4.1),\n+replacing \"controlled\" with \"task\".\n+\n+If No_Task_Parts is True for a type T, then the compiler can optimize\n+away certain tasking-related code that would otherwise be needed\n+for T'Class, because descendants of T might contain tasks.\n+\n Aspect Object_Size\n ==================\n .. index:: Object_Size"}, {"sha": "919e174aec87a0c06c40c82d09afd0259e1ed458", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -9613,7 +9613,9 @@ package body Exp_Ch6 is\n         and then not No_Run_Time_Mode\n         and then (Has_Task (Typ)\n                     or else (Is_Class_Wide_Type (Typ)\n-                               and then Is_Limited_Record (Typ)));\n+                               and then Is_Limited_Record (Typ)\n+                               and then not Has_Aspect\n+                                 (Etype (Typ), Aspect_No_Task_Parts)));\n    end Might_Have_Tasks;\n \n    ----------------------------"}, {"sha": "91f17244dae2c29a1f168483073356ff3f2b6d28", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 85, "deletions": 61, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -2196,10 +2196,13 @@ package body Freeze is\n       --  which is the current instance type can only be applied when the type\n       --  is limited.\n \n-      procedure Check_No_Controlled_Parts_Violations (Typ : Entity_Id);\n-      --  Check that Typ does not violate the semantics of aspect\n-      --  No_Controlled_Parts when it is specified on Typ or one of its\n-      --  ancestors.\n+      procedure Check_No_Parts_Violations\n+        (Typ : Entity_Id; Aspect_No_Parts : Aspect_Id) with\n+         Pre => Aspect_No_Parts in\n+                  Aspect_No_Controlled_Parts | Aspect_No_Task_Parts;\n+      --  Check that Typ does not violate the semantics of the specified\n+      --  Aspect_No_Parts (No_Controlled_Parts or No_Task_Parts) when it is\n+      --  specified on Typ or one of its ancestors.\n \n       procedure Check_Suspicious_Convention (Rec_Type : Entity_Id);\n       --  Give a warning for pragma Convention with language C or C++ applied\n@@ -2421,40 +2424,42 @@ package body Freeze is\n          end if;\n       end Check_Current_Instance;\n \n-      ------------------------------------------\n-      -- Check_No_Controlled_Parts_Violations --\n-      ------------------------------------------\n+      -------------------------------\n+      -- Check_No_Parts_Violations --\n+      -------------------------------\n \n-      procedure Check_No_Controlled_Parts_Violations (Typ : Entity_Id) is\n+      procedure Check_No_Parts_Violations\n+        (Typ : Entity_Id; Aspect_No_Parts : Aspect_Id)\n+      is\n \n-         function Find_Aspect_No_Controlled_Parts\n+         function Find_Aspect_No_Parts\n            (Typ : Entity_Id) return Node_Id;\n-         --  Search for aspect No_Controlled_Parts on a given type. When\n+         --  Search for Aspect_No_Parts on a given type. When\n          --  the aspect is not explicity specified Empty is returned.\n \n-         function Get_Aspect_No_Controlled_Parts_Value\n+         function Get_Aspect_No_Parts_Value\n            (Typ : Entity_Id) return Entity_Id;\n-         --  Obtain the value for the No_Controlled_Parts aspect on a given\n+         --  Obtain the value for the Aspect_No_Parts on a given\n          --  type. When the aspect is not explicitly specified Empty is\n          --  returned.\n \n-         function Has_Aspect_No_Controlled_Parts\n+         function Has_Aspect_No_Parts\n            (Typ : Entity_Id) return Boolean;\n-         --  Predicate function which identifies whether No_Controlled_Parts\n+         --  Predicate function which identifies whether No_Parts\n          --  is explicitly specified on a given type.\n \n          -------------------------------------\n-         -- Find_Aspect_No_Controlled_Parts --\n+         -- Find_Aspect_No_Parts --\n          -------------------------------------\n \n-         function Find_Aspect_No_Controlled_Parts\n+         function Find_Aspect_No_Parts\n            (Typ : Entity_Id) return Node_Id\n          is\n             Partial_View : constant Entity_Id :=\n               Incomplete_Or_Partial_View (Typ);\n \n             Aspect_Spec : Entity_Id :=\n-              Find_Aspect (Typ, Aspect_No_Controlled_Parts);\n+              Find_Aspect (Typ, Aspect_No_Parts);\n             Curr_Aspect_Spec : Entity_Id;\n          begin\n \n@@ -2472,7 +2477,7 @@ package body Freeze is\n                  Find_Aspect\n                    (Id => Defining_Identifier\n                             (Associated_Node_For_Itype (Typ)),\n-                    A  => Aspect_No_Controlled_Parts);\n+                    A  => Aspect_No_Parts);\n             end if;\n \n             --  Examine aspects specifications on private type declarations\n@@ -2496,7 +2501,7 @@ package body Freeze is\n \n                while Present (Curr_Aspect_Spec) loop\n                   if Get_Aspect_Id (Curr_Aspect_Spec)\n-                       = Aspect_No_Controlled_Parts\n+                       = Aspect_No_Parts\n                   then\n                      Aspect_Spec := Curr_Aspect_Spec;\n                      exit;\n@@ -2514,17 +2519,17 @@ package body Freeze is\n             end if;\n \n             return Aspect_Spec;\n-         end Find_Aspect_No_Controlled_Parts;\n+         end Find_Aspect_No_Parts;\n \n          ------------------------------------------\n-         -- Get_Aspect_No_Controlled_Parts_Value --\n+         -- Get_Aspect_No_Parts_Value --\n          ------------------------------------------\n \n-         function Get_Aspect_No_Controlled_Parts_Value\n+         function Get_Aspect_No_Parts_Value\n            (Typ : Entity_Id) return Entity_Id\n          is\n             Aspect_Spec : constant Entity_Id :=\n-              Find_Aspect_No_Controlled_Parts (Typ);\n+              Find_Aspect_No_Parts (Typ);\n          begin\n \n             --  Return the value of the aspect when present\n@@ -2546,15 +2551,15 @@ package body Freeze is\n             --  Otherwise, the aspect is not specified - so return Empty\n \n             return Empty;\n-         end Get_Aspect_No_Controlled_Parts_Value;\n+         end Get_Aspect_No_Parts_Value;\n \n          ------------------------------------\n-         -- Has_Aspect_No_Controlled_Parts --\n+         -- Has_Aspect_No_Parts --\n          ------------------------------------\n \n-         function Has_Aspect_No_Controlled_Parts\n+         function Has_Aspect_No_Parts\n            (Typ : Entity_Id) return Boolean\n-         is (Present (Find_Aspect_No_Controlled_Parts (Typ)));\n+         is (Present (Find_Aspect_No_Parts (Typ)));\n \n          --  Generic instances\n \n@@ -2573,9 +2578,9 @@ package body Freeze is\n \n          function Get_Types_With_Aspect_In_Hierarchy\n            is new Collect_Types_In_Hierarchy\n-                    (Predicate => Has_Aspect_No_Controlled_Parts);\n+                    (Predicate => Has_Aspect_No_Parts);\n          --  Returns a list of all types within a given type's hierarchy which\n-         --  have the aspect No_Controlled_Parts specified.\n+         --  have the Aspect_No_Parts specified.\n \n          --  Local declarations\n \n@@ -2591,10 +2596,10 @@ package body Freeze is\n          Gen_Formals      : Elist_Id;\n          Scop             : Entity_Id;\n \n-      --  Start of processing for Check_No_Controlled_Parts_Violations\n+      --  Start of processing for Check_No_Parts_Violations\n \n       begin\n-         --  There are no types with No_Controlled_Parts specified, so there\n+         --  There are no types with No_Parts specified, so there\n          --  is nothing to check.\n \n          if Is_Empty_Elmt_List (Types_With_Aspect)\n@@ -2603,37 +2608,52 @@ package body Freeze is\n             return;\n          end if;\n \n-         --  Obtain the aspect value for No_Controlled_Parts for comparison\n+         --  Set name for all errors below\n+\n+         Error_Msg_Name_1 := Aspect_Names (Aspect_No_Parts);\n+\n+         --  Obtain the aspect value for No_Parts for comparison\n \n          Aspect_Value :=\n-           Get_Aspect_No_Controlled_Parts_Value\n+           Get_Aspect_No_Parts_Value\n              (Node (First_Elmt (Types_With_Aspect)));\n \n-         --  When the value is True and there are controlled parts or the type\n-         --  itself is controlled, trigger the appropriate error.\n+         --  When the value is True and there are controlled/task parts or the\n+         --  type itself is controlled/task, trigger the appropriate error.\n \n-         if Aspect_Value = Standard_True\n-           and then (Is_Controlled (Typ)\n-                      or else Has_Controlled_Component (Typ))\n-         then\n-            Error_Msg_N\n-              (\"aspect No_Controlled_Parts applied to controlled type &\", Typ);\n+         if Aspect_Value = Standard_True then\n+            if Aspect_No_Parts = Aspect_No_Controlled_Parts then\n+               if Is_Controlled (Typ) or else Has_Controlled_Component (Typ)\n+               then\n+                  Error_Msg_N\n+                    (\"aspect % applied to controlled type &\", Typ);\n+               end if;\n+\n+            elsif Aspect_No_Parts = Aspect_No_Task_Parts then\n+               if Has_Task (Typ) then\n+                  Error_Msg_N\n+                    (\"aspect % applied to task type &\", Typ);\n+               end if;\n+\n+            else\n+               raise Program_Error;\n+            end if;\n          end if;\n \n          --  Move through Types_With_Aspect - checking that the value specified\n-         --  for their corresponding No_Controlled_Parts aspects do not\n-         --  override each other.\n+         --  for their corresponding Aspect_No_Parts do not override each\n+         --  other.\n \n          Curr_Typ_Elmt := First_Elmt (Types_With_Aspect);\n          while Present (Curr_Typ_Elmt) loop\n             Curr_Value :=\n-              Get_Aspect_No_Controlled_Parts_Value (Node (Curr_Typ_Elmt));\n+              Get_Aspect_No_Parts_Value (Node (Curr_Typ_Elmt));\n \n             --  Compare the aspect value against the current type\n \n             if Curr_Value /= Aspect_Value then\n                Error_Msg_NE\n-                 (\"cannot override aspect No_Controlled_Parts of \"\n+                 (\"cannot override aspect % of \"\n                    & \"ancestor type &\", Typ, Node (Curr_Typ_Elmt));\n                return;\n             end if;\n@@ -2642,10 +2662,12 @@ package body Freeze is\n          end loop;\n \n          --  Issue an error if the aspect applies to a type declared inside a\n-         --  generic body and if said type derives from or has a component of\n-         --  a generic formal type - since those are considered to be both\n-         --  controlled and have aspect No_Controlled_Parts specified as False\n-         --  by default (RM H.4.1(4/5)).\n+         --  generic body and if said type derives from or has a component\n+         --  of ageneric formal type - since those are considered to have\n+         --  controlled/task parts and have Aspect_No_Parts specified as\n+         --  False by default (RM H.4.1(4/5) is about the language-defined\n+         --  No_Controlled_Parts aspect, and we are using the same rules for\n+         --  No_Task_Parts).\n \n          --  We do not check tagged types since deriving from a formal type\n          --  within an enclosing generic unit is already illegal\n@@ -2682,15 +2704,15 @@ package body Freeze is\n                Scop := Scope (Scop);\n             end loop;\n \n-            --  Warn about the improper use of No_Controlled_Parts on a type\n+            --  Warn about the improper use of Aspect_No_Parts on a type\n             --  declaration deriving from or that has a component of a generic\n             --  formal type within the formal type's corresponding generic\n             --  body by moving through all formal types in Typ's hierarchy and\n             --  checking if they are formals in any of the enclosing generic\n             --  bodies.\n \n             --  However, a special exception gets made for formal types which\n-            --  derive from a type which has No_Controlled_Parts True.\n+            --  derive from a type which has Aspect_No_Parts True.\n \n             --  For example:\n \n@@ -2744,25 +2766,25 @@ package body Freeze is\n                       (Node (Curr_Formal_Elmt));\n \n                   --  We found a type declaration in a generic body where both\n-                  --  No_Controlled_Parts is true and one of its ancestors is a\n+                  --  Aspect_No_Parts is true and one of its ancestors is a\n                   --  generic formal type.\n \n                   if Scope (Node (Curr_Formal_Elmt)) =\n                        Node (Curr_Body_Elmt)\n \n                     --  Check that no ancestors of the formal type have\n-                    --  No_Controlled_Parts True before issuing the error.\n+                    --  Aspect_No_Parts True before issuing the error.\n \n                     and then (Is_Empty_Elmt_List (Types_With_Aspect)\n                                or else\n-                                 Get_Aspect_No_Controlled_Parts_Value\n+                                 Get_Aspect_No_Parts_Value\n                                    (Node (First_Elmt (Types_With_Aspect)))\n                                   = Standard_False)\n                   then\n                      Error_Msg_Node_1 := Typ;\n                      Error_Msg_Node_2 := Node (Curr_Formal_Elmt);\n                      Error_Msg\n-                       (\"aspect No_Controlled_Parts cannot be applied to \"\n+                       (\"aspect % cannot be applied to \"\n                          & \"type & which has an ancestor or component of \"\n                          & \"formal type & within the formal type's \"\n                          & \"corresponding generic body\", Sloc (Typ));\n@@ -2774,7 +2796,7 @@ package body Freeze is\n                Next_Elmt (Curr_Formal_Elmt);\n             end loop;\n          end if;\n-      end Check_No_Controlled_Parts_Violations;\n+      end Check_No_Parts_Violations;\n \n       ---------------------------------\n       -- Check_Suspicious_Convention --\n@@ -7165,15 +7187,17 @@ package body Freeze is\n             end;\n          end if;\n \n-         --  Verify at this point that No_Controlled_Parts, when specified on\n-         --  the current type or one of its ancestors, has not been overridden\n-         --  and that no violation of the aspect has occurred.\n+         --  Verify at this point that No_Controlled_Parts and No_Task_Parts,\n+         --  when specified on the current type or one of its ancestors, has\n+         --  not been overridden and that no violation of the aspect has\n+         --  occurred.\n \n          --  It is important that we perform the checks here after the type has\n          --  been processed because if said type depended on a private type it\n-         --  will not have been marked controlled.\n+         --  will not have been marked controlled or having tasks.\n \n-         Check_No_Controlled_Parts_Violations (E);\n+         Check_No_Parts_Violations (E, Aspect_No_Controlled_Parts);\n+         Check_No_Parts_Violations (E, Aspect_No_Task_Parts);\n \n          --  End of freeze processing for type entities\n       end if;"}, {"sha": "cda0b480aaa8147851e7cc3b47ed683b250f8ebb", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 564, "deletions": 546, "changes": 1110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696"}, {"sha": "953853fea2079d18371b80698b28c2e56a399ada", "filename": "gcc/ada/libgnat/a-iteint.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Flibgnat%2Fa-iteint.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Flibgnat%2Fa-iteint.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-iteint.ads?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -21,15 +21,16 @@ generic\n package Ada.Iterator_Interfaces is\n    pragma Pure;\n \n-   type Forward_Iterator is limited interface;\n+   type Forward_Iterator is limited interface with No_Task_Parts;\n \n    function First\n      (Object : Forward_Iterator) return Cursor is abstract;\n    function Next\n      (Object   : Forward_Iterator;\n       Position : Cursor) return Cursor is abstract;\n \n-   type Reversible_Iterator is limited interface and Forward_Iterator;\n+   type Reversible_Iterator is limited interface and Forward_Iterator with\n+     No_Task_Parts;\n \n    function Last\n      (Object : Reversible_Iterator) return Cursor is abstract;"}, {"sha": "a9770db6b61fc3e3e3833675843c627fe358445e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -3944,9 +3944,9 @@ package body Sem_Ch13 is\n                   Insert_Pragma (Aitem);\n                   goto Continue;\n \n-               --  No_Controlled_Parts\n+               --  No_Controlled_Parts, No_Task_Parts\n \n-               when Aspect_No_Controlled_Parts =>\n+               when Aspect_No_Controlled_Parts | Aspect_No_Task_Parts =>\n \n                   --  Check appropriate type argument\n \n@@ -11086,6 +11086,7 @@ package body Sem_Ch13 is\n             | Aspect_Max_Queue_Length\n             | Aspect_No_Caching\n             | Aspect_No_Controlled_Parts\n+            | Aspect_No_Task_Parts\n             | Aspect_Obsolescent\n             | Aspect_Part_Of\n             | Aspect_Post"}, {"sha": "3d5e0de06a6fe1d8bde5bb08b71638512a8d089d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/811b8aa53649982c352a1d56626e2a5b0b5d2696/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=811b8aa53649982c352a1d56626e2a5b0b5d2696", "patch": "@@ -146,6 +146,7 @@ package Snames is\n    Name_Full_Access_Only               : constant Name_Id := N + $;\n    Name_Integer_Literal                : constant Name_Id := N + $;\n    Name_No_Controlled_Parts            : constant Name_Id := N + $;\n+   Name_No_Task_Parts                  : constant Name_Id := N + $;\n    Name_Real_Literal                   : constant Name_Id := N + $;\n    Name_Relaxed_Initialization         : constant Name_Id := N + $;\n    Name_Stable_Properties              : constant Name_Id := N + $;"}]}