{"sha": "213bc11225fcbb57e2fa6d949917bd2cf44e2477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzYmMxMTIyNWZjYmI1N2UyZmE2ZDk0OTkxN2JkMmNmNDRlMjQ3Nw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-08T14:44:59Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-10T20:32:44Z"}, "message": "canonical path enhancements\n\nThis refactors the canonical path to enforce the segment ids.", "tree": {"sha": "8c28309b0963c5dc9f1a5c8738f3bf4c16de7f31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c28309b0963c5dc9f1a5c8738f3bf4c16de7f31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/213bc11225fcbb57e2fa6d949917bd2cf44e2477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213bc11225fcbb57e2fa6d949917bd2cf44e2477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/213bc11225fcbb57e2fa6d949917bd2cf44e2477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/213bc11225fcbb57e2fa6d949917bd2cf44e2477/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfeef998ff340fef37f07e1a7a0366e73296380", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bfeef998ff340fef37f07e1a7a0366e73296380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bfeef998ff340fef37f07e1a7a0366e73296380"}], "stats": {"total": 244, "additions": 142, "deletions": 102}, "files": [{"sha": "ec89f6ccb25145ac77f6d72a450e60a16432c308", "filename": "gcc/rust/resolve/rust-ast-resolve-expr.h", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-expr.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -118,15 +118,17 @@ class ResolveExpr : public ResolverBase\n   void visit (AST::IdentifierExpr &expr) override\n   {\n     if (resolver->get_name_scope ().lookup (\n-\t  CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n+\t  CanonicalPath::new_seg (expr.get_node_id (), expr.as_string ()),\n+\t  &resolved_node))\n       {\n \tresolver->insert_resolved_name (expr.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (expr.get_node_id (),\n \t\t\t\t\t Definition{expr.get_node_id (),\n \t\t\t\t\t\t    parent});\n       }\n     else if (resolver->get_type_scope ().lookup (\n-\t       CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n+\t       CanonicalPath::new_seg (expr.get_node_id (), expr.as_string ()),\n+\t       &resolved_node))\n       {\n \tresolver->insert_resolved_type (expr.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (expr.get_node_id (),\n@@ -272,8 +274,8 @@ class ResolveExpr : public ResolverBase\n \tauto label_name = label.get_lifetime ().get_lifetime_name ();\n \tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n \tresolver->get_label_scope ().insert (\n-\t  CanonicalPath::new_seg (label_name), label_lifetime_node_id,\n-\t  label.get_locus (), false,\n+\t  CanonicalPath::new_seg (expr.get_node_id (), label_name),\n+\t  label_lifetime_node_id, label.get_locus (), false,\n \t  [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t    rust_error_at (label.get_locus (),\n \t\t\t   \"label redefined multiple times\");\n@@ -299,9 +301,10 @@ class ResolveExpr : public ResolverBase\n \t  }\n \n \tNodeId resolved_node = UNKNOWN_NODEID;\n-\tif (!resolver->get_label_scope ().lookup (CanonicalPath::new_seg (\n-\t\t\t\t\t\t    label.get_lifetime_name ()),\n-\t\t\t\t\t\t  &resolved_node))\n+\tif (!resolver->get_label_scope ().lookup (\n+\t      CanonicalPath::new_seg (label.get_node_id (),\n+\t\t\t\t      label.get_lifetime_name ()),\n+\t      &resolved_node))\n \t  {\n \t    rust_error_at (expr.get_label ().get_locus (),\n \t\t\t   \"failed to resolve label\");\n@@ -330,8 +333,8 @@ class ResolveExpr : public ResolverBase\n \tauto label_name = label.get_lifetime ().get_lifetime_name ();\n \tauto label_lifetime_node_id = label.get_lifetime ().get_node_id ();\n \tresolver->get_label_scope ().insert (\n-\t  CanonicalPath::new_seg (label_name), label_lifetime_node_id,\n-\t  label.get_locus (), false,\n+\t  CanonicalPath::new_seg (label.get_node_id (), label_name),\n+\t  label_lifetime_node_id, label.get_locus (), false,\n \t  [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \t    rust_error_at (label.get_locus (),\n \t\t\t   \"label redefined multiple times\");\n@@ -358,9 +361,10 @@ class ResolveExpr : public ResolverBase\n \t  }\n \n \tNodeId resolved_node = UNKNOWN_NODEID;\n-\tif (!resolver->get_label_scope ().lookup (CanonicalPath::new_seg (\n-\t\t\t\t\t\t    label.get_lifetime_name ()),\n-\t\t\t\t\t\t  &resolved_node))\n+\tif (!resolver->get_label_scope ().lookup (\n+\t      CanonicalPath::new_seg (label.get_node_id (),\n+\t\t\t\t      label.get_lifetime_name ()),\n+\t      &resolved_node))\n \t  {\n \t    rust_error_at (expr.get_label ().get_locus (),\n \t\t\t   \"failed to resolve label\");"}, {"sha": "2b3a09a6fa4573ed52b43fb20bf88a0f1f8f77b6", "filename": "gcc/rust/resolve/rust-ast-resolve-implitem.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-implitem.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -45,8 +45,8 @@ class ResolveToplevelImplItem : public ResolverBase\n \n   void visit (AST::TypeAlias &type) override\n   {\n-    auto path\n-      = prefix.append (CanonicalPath::new_seg (type.get_new_type_name ()));\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (type.get_node_id (), type.get_new_type_name ()));\n     resolver->get_type_scope ().insert (\n       path, type.get_node_id (), type.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "ad817dc21230972206f624792dbb4319dcd40cac", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -184,17 +184,23 @@ class ResolveItem : public ResolverBase\n \t\t\t\t\t    impl_block.get_node_id (),\n \t\t\t\t\t    canonicalize_type_with_generics);\n     if (resolved_node == UNKNOWN_NODEID)\n-      return;\n+      {\n+\tresolver->get_type_scope ().pop ();\n+\treturn;\n+      }\n+\n+    auto Self\n+      = CanonicalPath::get_big_self (impl_block.get_type ()->get_node_id ());\n \n     resolver->get_type_scope ().insert (\n-      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id (),\n+      Self, impl_block.get_type ()->get_node_id (),\n       impl_block.get_type ()->get_locus_slow ());\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       impl_item->accept_vis (*this);\n \n     resolver->get_type_scope ().peek ()->clear_name (\n-      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id ());\n+      Self, impl_block.get_type ()->get_node_id ());\n     resolver->get_type_scope ().pop ();\n   }\n \n@@ -293,15 +299,18 @@ class ResolveItem : public ResolverBase\n \treturn;\n       }\n \n+    auto Self\n+      = CanonicalPath::get_big_self (impl_block.get_type ()->get_node_id ());\n+\n     resolver->get_type_scope ().insert (\n-      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id (),\n+      Self, impl_block.get_type ()->get_node_id (),\n       impl_block.get_type ()->get_locus_slow ());\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n       impl_item->accept_vis (*this);\n \n     resolver->get_type_scope ().peek ()->clear_name (\n-      CanonicalPath::get_big_self (), impl_block.get_type ()->get_node_id ());\n+      Self, impl_block.get_type ()->get_node_id ());\n     resolver->get_type_scope ().pop ();\n   }\n "}, {"sha": "a41764a46c233c491072e1eef19dc779fd065fc8", "filename": "gcc/rust/resolve/rust-ast-resolve-pattern.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-pattern.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -44,7 +44,8 @@ class ResolvePattern : public ResolverBase\n   void visit (AST::IdentifierPattern &pattern) override\n   {\n     if (resolver->get_name_scope ().lookup (\n-\t  CanonicalPath::new_seg (pattern.get_ident ()), &resolved_node))\n+\t  CanonicalPath::new_seg (pattern.get_node_id (), pattern.get_ident ()),\n+\t  &resolved_node))\n       {\n \tresolver->insert_resolved_name (pattern.get_node_id (), resolved_node);\n \tresolver->insert_new_definition (pattern.get_node_id (),\n@@ -72,10 +73,9 @@ class PatternDeclaration : public ResolverBase\n   {\n     // if we have a duplicate id this then allows for shadowing correctly\n     // as new refs to this decl will match back here so it is ok to overwrite\n-    resolver->get_name_scope ().insert (CanonicalPath::new_seg (\n-\t\t\t\t\t  pattern.get_ident ()),\n-\t\t\t\t\tpattern.get_node_id (),\n-\t\t\t\t\tpattern.get_locus ());\n+    resolver->get_name_scope ().insert (\n+      CanonicalPath::new_seg (pattern.get_node_id (), pattern.get_ident ()),\n+      pattern.get_node_id (), pattern.get_locus ());\n     resolver->insert_new_definition (pattern.get_node_id (),\n \t\t\t\t     Definition{pattern.get_node_id (),\n \t\t\t\t\t\tparent});"}, {"sha": "210a9fc047d420429f4f769abd06f8c7851e1f63", "filename": "gcc/rust/resolve/rust-ast-resolve-stmt.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-stmt.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -67,7 +67,8 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::TupleStruct &struct_decl) override\n   {\n-    auto path = CanonicalPath::new_seg (struct_decl.get_identifier ());\n+    auto path = CanonicalPath::new_seg (struct_decl.get_node_id (),\n+\t\t\t\t\tstruct_decl.get_identifier ());\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -99,7 +100,8 @@ class ResolveStmt : public ResolverBase\n \n   void visit (AST::StructStruct &struct_decl) override\n   {\n-    auto path = CanonicalPath::new_seg (struct_decl.get_identifier ());\n+    auto path = CanonicalPath::new_seg (struct_decl.get_node_id (),\n+\t\t\t\t\tstruct_decl.get_identifier ());\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "9abbb18e080fd143f6417570c78530dfc263cd04", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -42,7 +42,8 @@ class ResolveTopLevel : public ResolverBase\n   void visit (AST::TypeAlias &alias) override\n   {\n     auto path\n-      = prefix.append (CanonicalPath::new_seg (alias.get_new_type_name ()));\n+      = prefix.append (CanonicalPath::new_seg (alias.get_node_id (),\n+\t\t\t\t\t       alias.get_new_type_name ()));\n     resolver->get_type_scope ().insert (\n       path, alias.get_node_id (), alias.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -55,7 +56,8 @@ class ResolveTopLevel : public ResolverBase\n   void visit (AST::TupleStruct &struct_decl) override\n   {\n     auto path\n-      = prefix.append (CanonicalPath::new_seg (struct_decl.get_identifier ()));\n+      = prefix.append (CanonicalPath::new_seg (struct_decl.get_node_id (),\n+\t\t\t\t\t       struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -68,7 +70,8 @@ class ResolveTopLevel : public ResolverBase\n   void visit (AST::StructStruct &struct_decl) override\n   {\n     auto path\n-      = prefix.append (CanonicalPath::new_seg (struct_decl.get_identifier ()));\n+      = prefix.append (CanonicalPath::new_seg (struct_decl.get_node_id (),\n+\t\t\t\t\t       struct_decl.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, struct_decl.get_node_id (), struct_decl.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -80,7 +83,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::StaticItem &var) override\n   {\n-    auto path = prefix.append (CanonicalPath::new_seg (var.get_identifier ()));\n+    auto path = prefix.append (\n+      CanonicalPath::new_seg (var.get_node_id (), var.get_identifier ()));\n     resolver->get_name_scope ().insert (\n       path, var.get_node_id (), var.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n@@ -163,7 +167,8 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t     type_resolve_generic_args);\n \n     CanonicalPath projection\n-      = TraitImplProjection::resolve (trait_type_seg, impl_type_seg);\n+      = TraitImplProjection::resolve (impl_block.get_node_id (), trait_type_seg,\n+\t\t\t\t      impl_type_seg);\n     CanonicalPath impl_prefix = prefix.append (projection);\n \n     for (auto &impl_item : impl_block.get_impl_items ())\n@@ -172,8 +177,8 @@ class ResolveTopLevel : public ResolverBase\n \n   void visit (AST::Trait &trait) override\n   {\n-    CanonicalPath path\n-      = prefix.append (CanonicalPath::new_seg (trait.get_identifier ()));\n+    CanonicalPath path = prefix.append (\n+      CanonicalPath::new_seg (trait.get_node_id (), trait.get_identifier ()));\n     resolver->get_type_scope ().insert (\n       path, trait.get_node_id (), trait.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {"}, {"sha": "23419b024029104afe21758fca911358232dd2cd", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 37, "deletions": 31, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -30,7 +30,8 @@ class ResolveConstantItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::ConstantItem &constant)\n   {\n-    return CanonicalPath::new_seg (constant.get_identifier ());\n+    return CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t   constant.get_identifier ());\n   }\n };\n \n@@ -39,7 +40,8 @@ class ResolveFunctionItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::Function &function)\n   {\n-    return CanonicalPath::new_seg (function.get_function_name ());\n+    return CanonicalPath::new_seg (function.get_node_id (),\n+\t\t\t\t   function.get_function_name ());\n   }\n };\n \n@@ -48,7 +50,8 @@ class ResolveMethodItemToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::Method &method)\n   {\n-    return CanonicalPath::new_seg (method.get_method_name ());\n+    return CanonicalPath::new_seg (method.get_node_id (),\n+\t\t\t\t   method.get_method_name ());\n   }\n };\n \n@@ -58,6 +61,7 @@ class ResolveTraitItemFunctionToCanonicalPath\n   static CanonicalPath resolve (AST::TraitItemFunc &function)\n   {\n     return CanonicalPath::new_seg (\n+      function.get_node_id (),\n       function.get_trait_function_decl ().get_identifier ());\n   }\n };\n@@ -68,7 +72,7 @@ class ResolveTraitItemMethodToCanonicalPath\n   static CanonicalPath resolve (AST::TraitItemMethod &method)\n   {\n     return CanonicalPath::new_seg (\n-      method.get_trait_method_decl ().get_identifier ());\n+      method.get_node_id (), method.get_trait_method_decl ().get_identifier ());\n   }\n };\n \n@@ -77,7 +81,8 @@ class ResolveTraitItemConstToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemConst &constant)\n   {\n-    return CanonicalPath::new_seg (constant.get_identifier ());\n+    return CanonicalPath::new_seg (constant.get_node_id (),\n+\t\t\t\t   constant.get_identifier ());\n   }\n };\n \n@@ -86,7 +91,7 @@ class ResolveTraitItemTypeToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::TraitItemType &type)\n   {\n-    return CanonicalPath::new_seg (type.get_identifier ());\n+    return CanonicalPath::new_seg (type.get_node_id (), type.get_identifier ());\n   }\n };\n \n@@ -119,7 +124,7 @@ class ResolveTypeToCanonicalPath : public ResolverBase\n \n   void visit (AST::TypePathSegment &seg) override;\n \n-  static CanonicalPath canonicalize_generic_args (AST::GenericArgs &args);\n+  static std::string canonicalize_generic_args (AST::GenericArgs &args);\n \n   static bool type_resolve_generic_args (AST::GenericArgs &args);\n \n@@ -143,41 +148,40 @@ class ResolvePathSegmentToCanonicalPath\n public:\n   static CanonicalPath resolve (AST::PathExprSegment &seg)\n   {\n-    CanonicalPath path\n-      = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n-    if (seg.has_generic_args ())\n+    if (!seg.has_generic_args ())\n+      return CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t     seg.get_ident_segment ().as_string ());\n+\n+    bool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n+      seg.get_generic_args ());\n+    if (!ok)\n       {\n-\tbool ok = ResolveTypeToCanonicalPath::type_resolve_generic_args (\n-\t  seg.get_generic_args ());\n-\tif (!ok)\n-\t  {\n-\t    rust_error_at (seg.get_locus (),\n-\t\t\t   \"failed to resolve all generic arguments\");\n-\t    return CanonicalPath::create_empty ();\n-\t  }\n-\n-\tpath\n-\t  = path.append (ResolveTypeToCanonicalPath::canonicalize_generic_args (\n-\t    seg.get_generic_args ()));\n+\trust_error_at (seg.get_locus (),\n+\t\t       \"failed to resolve all generic arguments\");\n+\treturn CanonicalPath::create_empty ();\n       }\n-    return path;\n+\n+    std::string generics\n+      = ResolveTypeToCanonicalPath::canonicalize_generic_args (\n+\tseg.get_generic_args ());\n+\n+    return CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t   seg.get_ident_segment ().as_string ()\n+\t\t\t\t     + \"::\" + generics);\n   }\n };\n \n class TraitImplProjection\n {\n public:\n-  static CanonicalPath resolve (const CanonicalPath &trait_seg,\n+  static CanonicalPath resolve (NodeId id, const CanonicalPath &trait_seg,\n \t\t\t\tconst CanonicalPath &impl_type_seg)\n   {\n-    return CanonicalPath::new_seg (\"<\" + impl_type_seg.get () + \" as \"\n-\t\t\t\t   + trait_seg.get () + \">\");\n+    return CanonicalPath::new_seg (id, \"<\" + impl_type_seg.get () + \" as \"\n+\t\t\t\t\t + trait_seg.get () + \">\");\n   }\n };\n \n-// FIXME: as part of imports and visibility we need to be able to keep a context\n-// for handling PathInExpressions segments as they can be local to a particular\n-// lexical scope requiring a context to be maintained for resolution\n class ResolveRelativeTypePath\n {\n public:\n@@ -191,7 +195,8 @@ class ResolveRelativeTypePath\n \t\t\t\t\t     true);\n     if (canonical_path.is_error ())\n       {\n-\trust_error_at (path.get_locus (), \"Failed to resolve canonical path\");\n+\trust_error_at (path.get_locus (),\n+\t\t       \"Failed to resolve canonical path for TypePath\");\n \treturn UNKNOWN_NODEID;\n       }\n \n@@ -318,7 +323,8 @@ class ResolveGenericParam : public ResolverBase\n \n     // for now lets focus on handling the basics: like struct<T> { a:T, ....}\n     resolver->get_type_scope ().insert (\n-      CanonicalPath::new_seg (param.get_type_representation ()),\n+      CanonicalPath::new_seg (param.get_node_id (),\n+\t\t\t      param.get_type_representation ()),\n       param.get_node_id (), param.get_locus (), false,\n       [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n \trust_error_at (param.get_locus (),"}, {"sha": "b568e1c9a17df899115178556548512c4fb141e7", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 29, "deletions": 19, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -122,7 +122,8 @@ Resolver::insert_builtin_types (Rib *r)\n   for (auto &builtin : builtins)\n     {\n       CanonicalPath builtin_path\n-\t= CanonicalPath::new_seg (builtin->as_string ());\n+\t= CanonicalPath::new_seg (builtin->get_node_id (),\n+\t\t\t\t  builtin->as_string ());\n       r->insert_name (builtin_path, builtin->get_node_id (),\n \t\t      Linemap::predeclared_location (), false,\n \t\t      [] (const CanonicalPath &, NodeId, Location) -> void {});\n@@ -385,7 +386,7 @@ ResolveStructExprField::visit (AST::StructExprFieldIdentifier &field)\n \n // rust-ast-resolve-type.h\n \n-CanonicalPath\n+std::string\n ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n {\n   std::string buf;\n@@ -402,7 +403,7 @@ ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n       i++;\n     }\n \n-  return CanonicalPath::new_seg (\"<\" + buf + \">\");\n+  return \"<\" + buf + \">\";\n }\n \n bool\n@@ -429,24 +430,31 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n       return;\n     }\n \n-  // ident seg\n-  CanonicalPath ident_seg\n-    = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n-  result = result.append (ident_seg);\n+  if (!seg.has_generic_args ())\n+    {\n+      result = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t       seg.get_ident_segment ().as_string ());\n+      return;\n+    }\n \n-  // generic args\n-  if (seg.has_generic_args ())\n+  if (type_resolve_generic_args_flag)\n     {\n-      if (include_generic_args_flag)\n-\tresult\n-\t  = result.append (canonicalize_generic_args (seg.get_generic_args ()));\n+      bool ok = type_resolve_generic_args (seg.get_generic_args ());\n+      failure_flag = !ok;\n+    }\n \n-      if (type_resolve_generic_args_flag)\n-\t{\n-\t  bool ok = type_resolve_generic_args (seg.get_generic_args ());\n-\t  failure_flag = !ok;\n-\t}\n+  if (include_generic_args_flag)\n+    {\n+      std::string generics\n+\t= canonicalize_generic_args (seg.get_generic_args ());\n+      result = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t       seg.get_ident_segment ().as_string ()\n+\t\t\t\t\t + \"::\" + generics);\n+      return;\n     }\n+\n+  result = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t\t   seg.get_ident_segment ().as_string ());\n }\n \n void\n@@ -461,7 +469,8 @@ ResolveTypeToCanonicalPath::visit (AST::TypePathSegment &seg)\n     }\n \n   CanonicalPath ident_seg\n-    = CanonicalPath::new_seg (seg.get_ident_segment ().as_string ());\n+    = CanonicalPath::new_seg (seg.get_node_id (),\n+\t\t\t      seg.get_ident_segment ().as_string ());\n   result = result.append (ident_seg);\n }\n \n@@ -476,7 +485,8 @@ ResolvePath::resolve_path (AST::PathInExpression *expr)\n \n   bool segment_is_type = false;\n   CanonicalPath root_seg_path\n-    = CanonicalPath::new_seg (root_ident_seg.as_string ());\n+    = CanonicalPath::new_seg (expr->get_node_id (),\n+\t\t\t      root_ident_seg.as_string ());\n \n   // name scope first\n   if (resolver->get_name_scope ().lookup (root_seg_path, &resolved_node))"}, {"sha": "aed01196f810d5cd4d5760bbbefe82fdd3c7ebd5", "filename": "gcc/rust/resolve/rust-ast-verify-assignee.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-verify-assignee.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -58,7 +58,8 @@ class VerifyAsignee : public ResolverBase\n   void visit (AST::IdentifierExpr &expr) override\n   {\n     if (!resolver->get_name_scope ().lookup (\n-\t  CanonicalPath::new_seg (expr.as_string ()), &resolved_node))\n+\t  CanonicalPath::new_seg (expr.get_node_id (), expr.as_string ()),\n+\t  &resolved_node))\n       return;\n \n     ok = true;"}, {"sha": "033b891ce677b6df57fe49c8a9dd62508be52bfd", "filename": "gcc/rust/resolve/rust-name-resolver.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/213bc11225fcbb57e2fa6d949917bd2cf44e2477/gcc%2Frust%2Fresolve%2Frust-name-resolver.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-name-resolver.h?ref=213bc11225fcbb57e2fa6d949917bd2cf44e2477", "patch": "@@ -55,10 +55,10 @@ class CanonicalPath\n     return *this;\n   }\n \n-  static CanonicalPath new_seg (const std::string &path)\n+  static CanonicalPath new_seg (NodeId id, const std::string &path)\n   {\n     rust_assert (!path.empty ());\n-    return CanonicalPath ({path});\n+    return CanonicalPath ({std::pair<NodeId, std::string> (id, path)});\n   }\n \n   std::string get () const\n@@ -67,20 +67,15 @@ class CanonicalPath\n     for (size_t i = 0; i < segs.size (); i++)\n       {\n \tbool have_more = (i + 1) < segs.size ();\n-\tconst std::string &seg = segs.at (i);\n+\tconst std::string &seg = segs.at (i).second;\n \tbuf += seg + (have_more ? \"::\" : \"\");\n       }\n     return buf;\n   }\n \n-  static CanonicalPath get_big_self ()\n+  static CanonicalPath get_big_self (NodeId id)\n   {\n-    return CanonicalPath::new_seg (\"Self\");\n-  }\n-\n-  static CanonicalPath get_wee_self ()\n-  {\n-    return CanonicalPath::new_seg (\"self\");\n+    return CanonicalPath::new_seg (id, \"Self\");\n   }\n \n   static CanonicalPath create_empty () { return CanonicalPath ({}); }\n@@ -93,7 +88,7 @@ class CanonicalPath\n     if (is_error ())\n       return CanonicalPath (other.segs);\n \n-    std::vector<std::string> copy (segs);\n+    std::vector<std::pair<NodeId, std::string>> copy (segs);\n     for (auto &s : other.segs)\n       copy.push_back (s);\n \n@@ -105,9 +100,9 @@ class CanonicalPath\n   //   A\n   //   A::B\n   //   A::B::C\n-  void iterate_path (std::function<bool (const CanonicalPath &)> cb) const\n+  void iterate (std::function<bool (const CanonicalPath &)> cb) const\n   {\n-    std::vector<std::string> buf;\n+    std::vector<std::pair<NodeId, std::string>> buf;\n     for (auto &seg : segs)\n       {\n \tbuf.push_back (seg);\n@@ -116,6 +111,12 @@ class CanonicalPath\n       }\n   }\n \n+  NodeId get_id () const\n+  {\n+    rust_assert (!segs.empty ());\n+    return segs.back ().first;\n+  }\n+\n   bool operator== (const CanonicalPath &b) const\n   {\n     return get ().compare (b.get ()) == 0;\n@@ -124,9 +125,11 @@ class CanonicalPath\n   bool operator< (const CanonicalPath &b) const { return get () < b.get (); }\n \n private:\n-  explicit CanonicalPath (std::vector<std::string> path) : segs (path) {}\n+  explicit CanonicalPath (std::vector<std::pair<NodeId, std::string>> path)\n+    : segs (path)\n+  {}\n \n-  std::vector<std::string> segs;\n+  std::vector<std::pair<NodeId, std::string>> segs;\n };\n \n class Rib\n@@ -255,8 +258,8 @@ class Rib\n   NodeId node_id;\n   std::map<CanonicalPath, NodeId> mappings;\n   std::map<NodeId, CanonicalPath> reverse_mappings;\n-  std::set<std::pair<NodeId, Location> > decls_within_rib;\n-  std::map<NodeId, std::set<NodeId> > references;\n+  std::set<std::pair<NodeId, Location>> decls_within_rib;\n+  std::map<NodeId, std::set<NodeId>> references;\n };\n \n class Scope\n@@ -494,7 +497,7 @@ class Resolver\n   // map of resolved names mutability flag\n   std::map<NodeId, bool> decl_mutability;\n   // map of resolved names and set of assignments to the decl\n-  std::map<NodeId, std::set<NodeId> > assignment_to_decl;\n+  std::map<NodeId, std::set<NodeId>> assignment_to_decl;\n };\n \n } // namespace Resolver"}]}