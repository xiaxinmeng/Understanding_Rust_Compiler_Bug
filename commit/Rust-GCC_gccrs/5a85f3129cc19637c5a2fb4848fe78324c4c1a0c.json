{"sha": "5a85f3129cc19637c5a2fb4848fe78324c4c1a0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE4NWYzMTI5Y2MxOTYzN2M1YTJmYjQ4NDhmZTc4MzI0YzRjMWEwYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-12T14:56:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-30T14:16:19Z"}, "message": "[Ada] Reimplement Ada.Numerics.Big_Numbers.Big_Reals.Fixed_Conversions\n\ngcc/ada/\n\n\t* libgnat/a-nbnbre.adb (Float_Conversions): Instantiate Conv\n\tpackage only once in the body.\n\t(Fixed_Conversions.Float_Aux): New instance.\n\t(Fixed_Conversions.Conv_I): Likewise.\n\t(Fixed_Conversions.Conv_U): Likewise.\n\t(Fixed_Conversions.LLLI): New subtype.\n\t(Fixed_Conversions.LLLU): Likewise.\n\t(Fixed_Conversions.Too_Large): New constant.\n\t(Fixed_Conversions.To_Big_Real): Reimplement.\n\t(Fixed_Conversions.From_Big_Real): Likewise.", "tree": {"sha": "b899a1a9161185890ce792c56cf4c55277a1d27b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b899a1a9161185890ce792c56cf4c55277a1d27b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e783561e9c10f84a9a1a23d81bb9510f961c4c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e783561e9c10f84a9a1a23d81bb9510f961c4c61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e783561e9c10f84a9a1a23d81bb9510f961c4c61"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "4ff5b352851dc887245b996f67c31b4b4187f341", "filename": "gcc/ada/libgnat/a-nbnbre.adb", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a85f3129cc19637c5a2fb4848fe78324c4c1a0c/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-nbnbre.adb?ref=5a85f3129cc19637c5a2fb4848fe78324c4c1a0c", "patch": "@@ -118,6 +118,9 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n \n    package body Float_Conversions is\n \n+      package Conv is new\n+        Big_Integers.Unsigned_Conversions (Long_Long_Unsigned);\n+\n       -----------------\n       -- To_Big_Real --\n       -----------------\n@@ -130,9 +133,6 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n \n       function To_Big_Real (Arg : Num) return Valid_Big_Real is\n \n-         package Conv is new\n-           Big_Integers.Unsigned_Conversions (Long_Long_Unsigned);\n-\n          A : constant Num'Base := abs (Arg);\n          E : constant Integer  := Num'Exponent (A);\n          F : constant Num'Base := Num'Fraction (A);\n@@ -182,9 +182,6 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n \n       function From_Big_Real (Arg : Big_Real) return Num is\n \n-         package Conv is new\n-           Big_Integers.Unsigned_Conversions (Long_Long_Unsigned);\n-\n          M    : constant Natural     := Num'Machine_Mantissa;\n          One  : constant Big_Real    := To_Real (1);\n          Two  : constant Big_Real    := To_Real (2);\n@@ -310,22 +307,78 @@ package body Ada.Numerics.Big_Numbers.Big_Reals is\n \n    package body Fixed_Conversions is\n \n+      package Float_Aux is new Float_Conversions (Long_Long_Float);\n+\n+      subtype LLLI is Long_Long_Long_Integer;\n+      subtype LLLU is Long_Long_Long_Unsigned;\n+\n+      Too_Large : constant Boolean :=\n+                    Num'Small_Numerator > LLLU'Last\n+                      or else Num'Small_Denominator > LLLU'Last;\n+      --  True if the Small is too large for Long_Long_Long_Unsigned, in which\n+      --  case we convert to/from Long_Long_Float as an intermediate step.\n+\n+      package Conv_I is new Big_Integers.Signed_Conversions (LLLI);\n+      package Conv_U is new Big_Integers.Unsigned_Conversions (LLLU);\n+\n       -----------------\n       -- To_Big_Real --\n       -----------------\n \n+      --  We just compute V * N / D where V is the mantissa value of the fixed\n+      --  point number, and N resp. D is the numerator resp. the denominator of\n+      --  the Small of the fixed-point type.\n+\n       function To_Big_Real (Arg : Num) return Valid_Big_Real is\n+         N, D, V : Big_Integer;\n+\n       begin\n-         return From_String (Arg'Image);\n+         if Too_Large then\n+            return Float_Aux.To_Big_Real (Long_Long_Float (Arg));\n+         end if;\n+\n+         N := Conv_U.To_Big_Integer (Num'Small_Numerator);\n+         D := Conv_U.To_Big_Integer (Num'Small_Denominator);\n+         V := Conv_I.To_Big_Integer (LLLI'Integer_Value (Arg));\n+\n+         return V * N / D;\n       end To_Big_Real;\n \n       -------------------\n       -- From_Big_Real --\n       -------------------\n \n+      --  We first compute A / B = Arg * D / N where N resp. D is the numerator\n+      --  resp. the denominator of the Small of the fixed-point type. Then we\n+      --  divide A by B and convert the result to the mantissa value.\n+\n       function From_Big_Real (Arg : Big_Real) return Num is\n+         N, D, A, B, Q, X : Big_Integer;\n+\n       begin\n-         return Num'Value (To_String (Arg));\n+         if Too_Large then\n+            return Num (Float_Aux.From_Big_Real (Arg));\n+         end if;\n+\n+         N := Conv_U.To_Big_Integer (Num'Small_Numerator);\n+         D := Conv_U.To_Big_Integer (Num'Small_Denominator);\n+         A := Numerator (Arg) * D;\n+         B := Denominator (Arg) * N;\n+\n+         Q := A / B;\n+\n+         --  Round to nearest, ties to away, by comparing twice the remainder\n+\n+         X := (A - Q * B) * To_Big_Integer (2);\n+\n+         if X >= B then\n+            Q := Q + To_Big_Integer (1);\n+\n+         elsif X <= -B then\n+            Q := Q - To_Big_Integer (1);\n+         end if;\n+\n+         return Num'Fixed_Value (Conv_I.From_Big_Integer (Q));\n       end From_Big_Real;\n \n    end Fixed_Conversions;"}]}