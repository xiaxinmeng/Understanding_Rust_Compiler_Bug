{"sha": "b757d36fac6dc69b32d6de321eab51f6b3d254d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1N2QzNmZhYzZkYzY5YjMyZDZkZTMyMWVhYjUxZjZiM2QyNTRkOA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-04-21T22:18:34Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2009-04-21T22:18:34Z"}, "message": "sh.c (prepare_cbranch_operands): Use LAST_AND_UNUSED_RTX_CODE instead of CODE_FOR_nothing.\n\n\t* config/sh/sh.c (prepare_cbranch_operands): Use\n\tLAST_AND_UNUSED_RTX_CODE instead of CODE_FOR_nothing.\n\t(expand_cbranchdi4): Likewise.\n\t(from_compare): Add cast to enum type.\n\t(expand_cbranchsi4): Use add_reg_note.\n\t(output_stack_adjust, push, pop, sh_expand_prologue): Likewise.\n\t(sh_insn_length_adjustment): Use sh_cpu_attr instead of sh_cpu.\n\t(sh_initialize_trampoline): Change 0 to LCT_NORMAL in function call.\n\t(sh_expand_builtin): Change 0 to EXPAND_NORMAL in function call.\n\t* config/sh/sh.md (cbranchsi4): Use LAST_AND_UNUSED_RTX_CODE\n\tinstead of CODE_FOR_nothing.\n\t(cbranchdi4): Likewise.  Fix the order of arguments for\n\tgen_rtx_fmt_ee.\n\t(push_fpscr): Use add_reg_note.\n\t(pop_fpscr, movdf_i4+1, reload_outdf__RnFRm+3, reload_outdf__RnFRm+4,\n\treload_outdf__RnFRm+5, fpu_switch+1, fpu_switch+2): Likewise.\n\nFrom-SVN: r146539", "tree": {"sha": "8e502cfbce30fa6715f4742f417b8abe52cea619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e502cfbce30fa6715f4742f417b8abe52cea619"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b757d36fac6dc69b32d6de321eab51f6b3d254d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b757d36fac6dc69b32d6de321eab51f6b3d254d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b757d36fac6dc69b32d6de321eab51f6b3d254d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b757d36fac6dc69b32d6de321eab51f6b3d254d8/comments", "author": null, "committer": null, "parents": [{"sha": "36ef72625cd8bc38933adf8c06a7de4f093e98c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36ef72625cd8bc38933adf8c06a7de4f093e98c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36ef72625cd8bc38933adf8c06a7de4f093e98c6"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "e93551b0f117aebb5a88297540c19d53d2c5b1fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b757d36fac6dc69b32d6de321eab51f6b3d254d8", "patch": "@@ -1,3 +1,22 @@\n+2009-04-21  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (prepare_cbranch_operands): Use\n+\tLAST_AND_UNUSED_RTX_CODE instead of CODE_FOR_nothing.\n+\t(expand_cbranchdi4): Likewise.\n+\t(from_compare): Add cast to enum type.\n+\t(expand_cbranchsi4): Use add_reg_note.\n+\t(output_stack_adjust, push, pop, sh_expand_prologue): Likewise.\n+\t(sh_insn_length_adjustment): Use sh_cpu_attr instead of sh_cpu.\n+\t(sh_initialize_trampoline): Change 0 to LCT_NORMAL in function call.\n+\t(sh_expand_builtin): Change 0 to EXPAND_NORMAL in function call.\n+\t* config/sh/sh.md (cbranchsi4): Use LAST_AND_UNUSED_RTX_CODE\n+\tinstead of CODE_FOR_nothing.\n+\t(cbranchdi4): Likewise.  Fix the order of arguments for\n+\tgen_rtx_fmt_ee.\n+\t(push_fpscr): Use add_reg_note.\n+\t(pop_fpscr, movdf_i4+1, reload_outdf__RnFRm+3, reload_outdf__RnFRm+4,\n+\treload_outdf__RnFRm+5, fpu_switch+1, fpu_switch+2): Likewise.\n+\t\n 2009-04-21  Joseph Myers  <joseph@codesourcery.com>\n \n \t* ABOUT-GCC-NLS, ChangeLog, ChangeLog-1997, ChangeLog-1998,"}, {"sha": "cf6e1a76b4d492e021c6377ff64ee7d253533fdc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 27, "deletions": 38, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b757d36fac6dc69b32d6de321eab51f6b3d254d8", "patch": "@@ -1378,7 +1378,7 @@ prepare_cbranch_operands (rtx *operands, enum machine_mode mode,\n   rtx op1;\n   rtx scratch = NULL_RTX;\n \n-  if (comparison == CODE_FOR_nothing)\n+  if (comparison == LAST_AND_UNUSED_RTX_CODE)\n     comparison = GET_CODE (operands[0]);\n   else\n     scratch = operands[4];\n@@ -1478,9 +1478,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n                                           operands[1], operands[2])));\n   jump = emit_jump_insn (branch_expander (operands[3]));\n   if (probability >= 0)\n-    REG_NOTES (jump)\n-      = gen_rtx_EXPR_LIST (REG_BR_PROB, GEN_INT (probability),\n-                           REG_NOTES (jump));\n+    add_reg_note (jump, REG_BR_PROB, GEN_INT (probability));\n \n }\n \n@@ -1518,7 +1516,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n   op2h = gen_highpart_mode (SImode, DImode, operands[2]);\n   op1l = gen_lowpart (SImode, operands[1]);\n   op2l = gen_lowpart (SImode, operands[2]);\n-  msw_taken = msw_skip = lsw_taken = CODE_FOR_nothing;\n+  msw_taken = msw_skip = lsw_taken = LAST_AND_UNUSED_RTX_CODE;\n   prob = split_branch_probability;\n   rev_prob = REG_BR_PROB_BASE - prob;\n   switch (comparison)\n@@ -1609,9 +1607,9 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n       break;\n     default: return false;\n     }\n-  num_branches = ((msw_taken != CODE_FOR_nothing)\n-\t\t  + (msw_skip != CODE_FOR_nothing)\n-\t\t  + (lsw_taken != CODE_FOR_nothing));\n+  num_branches = ((msw_taken != LAST_AND_UNUSED_RTX_CODE)\n+\t\t  + (msw_skip != LAST_AND_UNUSED_RTX_CODE)\n+\t\t  + (lsw_taken != LAST_AND_UNUSED_RTX_CODE));\n   if (comparison != EQ && comparison != NE && num_branches > 1)\n     {\n       if (!CONSTANT_P (operands[2])\n@@ -1637,20 +1635,21 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n   operands[4] = NULL_RTX;\n   if (reload_completed\n       && ! arith_reg_or_0_operand (op2h, SImode) && true_regnum (op1h)\n-      && (msw_taken != CODE_FOR_nothing || msw_skip != CODE_FOR_nothing))\n+      && (msw_taken != LAST_AND_UNUSED_RTX_CODE\n+\t  || msw_skip != LAST_AND_UNUSED_RTX_CODE))\n     {\n       emit_move_insn (scratch, operands[2]);\n       operands[2] = scratch;\n     }\n-  if (msw_taken != CODE_FOR_nothing)\n+  if (msw_taken != LAST_AND_UNUSED_RTX_CODE)\n     expand_cbranchsi4 (operands, msw_taken, msw_taken_prob);\n-  if (msw_skip != CODE_FOR_nothing)\n+  if (msw_skip != LAST_AND_UNUSED_RTX_CODE)\n     {\n       rtx taken_label = operands[3];\n \n       /* Operands were possibly modified, but msw_skip doesn't expect this.\n \t Always use the original ones.  */\n-      if (msw_taken != CODE_FOR_nothing)\n+      if (msw_taken != LAST_AND_UNUSED_RTX_CODE)\n \t{\n \t  operands[1] = op1h;\n \t  operands[2] = op2h;\n@@ -1662,14 +1661,14 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n     }\n   operands[1] = op1l;\n   operands[2] = op2l;\n-  if (lsw_taken != CODE_FOR_nothing)\n+  if (lsw_taken != LAST_AND_UNUSED_RTX_CODE)\n     {\n       if (reload_completed\n \t  && ! arith_reg_or_0_operand (op2l, SImode) && true_regnum (op1l))\n \toperands[4] = scratch;\n       expand_cbranchsi4 (operands, lsw_taken, lsw_taken_prob);\n     }\n-  if (msw_skip != CODE_FOR_nothing)\n+  if (msw_skip != LAST_AND_UNUSED_RTX_CODE)\n     emit_label (skip_label);\n   return true;\n }\n@@ -1766,7 +1765,7 @@ from_compare (rtx *operands, int code)\n   else\n     insn = gen_rtx_SET (VOIDmode,\n \t\t\tgen_rtx_REG (SImode, T_REG),\n-\t\t\tgen_rtx_fmt_ee (code, SImode,\n+\t\t\tgen_rtx_fmt_ee ((enum rtx_code) code, SImode,\n \t\t\t\t\tsh_compare_op0, sh_compare_op1));\n   if ((TARGET_SH4 || TARGET_SH2A) && GET_MODE_CLASS (mode) == MODE_FLOAT)\n     {\n@@ -5704,12 +5703,10 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      insn = emit_fn (GEN_ADD3 (reg, reg, const_reg));\n \t    }\n \t  if (! epilogue_p)\n-\t    REG_NOTES (insn)\n-\t      = (gen_rtx_EXPR_LIST\n-\t\t (REG_FRAME_RELATED_EXPR,\n-\t\t  gen_rtx_SET (VOIDmode, reg,\n-\t\t\t       gen_rtx_PLUS (SImode, reg, GEN_INT (size))),\n-\t\t  REG_NOTES (insn)));\n+\t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n+\t\t\t  gen_rtx_SET (VOIDmode, reg,\n+\t\t\t\t       gen_rtx_PLUS (SImode, reg,\n+\t\t\t\t\t\t     GEN_INT (size))));\n \t}\n     }\n }\n@@ -5745,9 +5742,7 @@ push (int rn)\n     x = gen_push (gen_rtx_REG (SImode, rn));\n \n   x = frame_insn (x);\n-  REG_NOTES (x)\n-    = gen_rtx_EXPR_LIST (REG_INC,\n-\t\t\t gen_rtx_REG (SImode, STACK_POINTER_REGNUM), 0);\n+  add_reg_note (x, REG_INC, gen_rtx_REG (SImode, STACK_POINTER_REGNUM));\n   return x;\n }\n \n@@ -5774,9 +5769,7 @@ pop (int rn)\n     x = gen_pop (gen_rtx_REG (SImode, rn));\n \n   x = emit_insn (x);\n-  REG_NOTES (x)\n-    = gen_rtx_EXPR_LIST (REG_INC,\n-\t\t\t gen_rtx_REG (SImode, STACK_POINTER_REGNUM), 0);\n+  add_reg_note (x, REG_INC, gen_rtx_REG (SImode, STACK_POINTER_REGNUM));\n }\n \n /* Generate code to push the regs specified in the mask.  */\n@@ -6481,27 +6474,23 @@ sh_expand_prologue (void)\n \t       a direct save from the to-be-saved register.  */\n \t    if (REGNO (reg_rtx) != reg)\n \t      {\n-\t\trtx set, note_rtx;\n+\t\trtx set;\n \n \t\tset = gen_rtx_SET (VOIDmode, mem_rtx, orig_reg_rtx);\n-\t\tnote_rtx = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, set,\n-\t\t\t\t\t      REG_NOTES (insn));\n-\t\tREG_NOTES (insn) = note_rtx;\n+\t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, set);\n \t      }\n \n \t    if (TARGET_SHCOMPACT && (offset_in_r0 != -1))\n \t      {\n \t\trtx reg_rtx = gen_rtx_REG (mode, reg);\n-\t\trtx set, note_rtx;\n+\t\trtx set;\n \t\trtx mem_rtx = gen_frame_mem (mode,\n \t\t\t\t\t     gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t\t\t\t   GEN_INT (offset)));\n \n \t\tset = gen_rtx_SET (VOIDmode, mem_rtx, reg_rtx);\n-\t\tnote_rtx = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, set,\n-\t\t\t\t\t      REG_NOTES (insn));\n-\t\tREG_NOTES (insn) = note_rtx;\n+\t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, set);\n \t      }\n \t  }\n \t}\n@@ -8751,7 +8740,7 @@ sh_insn_length_adjustment (rtx insn)\n \n   /* SH2e has a bug that prevents the use of annulled branches, so if\n      the delay slot is not filled, we'll have to put a NOP in it.  */\n-  if (sh_cpu == CPU_SH2E\n+  if (sh_cpu_attr == CPU_SH2E\n       && GET_CODE (insn) == JUMP_INSN\n       && GET_CODE (PATTERN (insn)) != ADDR_DIFF_VEC\n       && GET_CODE (PATTERN (insn)) != ADDR_VEC\n@@ -9836,7 +9825,7 @@ sh_initialize_trampoline (rtx tramp, rtx fnaddr, rtx cxt)\n \t  || (!(TARGET_SH4A_ARCH || TARGET_SH4_300) && TARGET_USERMODE))\n \temit_library_call (function_symbol (NULL, \"__ic_invalidate\",\n \t\t\t\t\t    FUNCTION_ORDINARY),\n-\t\t\t   0, VOIDmode, 1, tramp, SImode);\n+\t\t\t   LCT_NORMAL, VOIDmode, 1, tramp, SImode);\n       else\n \temit_insn (gen_ic_invalidate_line (tramp));\n     }\n@@ -10173,7 +10162,7 @@ sh_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n       argmode = TYPE_MODE (TREE_TYPE (arg));\n       if (argmode != opmode)\n \targ = build1 (NOP_EXPR, optype, arg);\n-      op[nop] = expand_expr (arg, NULL_RTX, opmode, 0);\n+      op[nop] = expand_expr (arg, NULL_RTX, opmode, EXPAND_NORMAL);\n       if (! (*insn_data[icode].operand[nop].predicate) (op[nop], opmode))\n \top[nop] = copy_to_mode_reg (opmode, op[nop]);\n     }"}, {"sha": "dc6a7ab6b8293f52441481373a90aba29648a21c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b757d36fac6dc69b32d6de321eab51f6b3d254d8/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b757d36fac6dc69b32d6de321eab51f6b3d254d8", "patch": "@@ -647,7 +647,7 @@\n \t\t      (pc)))\n    (clobber (reg:SI T_REG))]\n   \"TARGET_CBRANCHDI4\"\n-  \"expand_cbranchsi4 (operands, CODE_FOR_nothing, -1); DONE;\")\n+  \"expand_cbranchsi4 (operands, LAST_AND_UNUSED_RTX_CODE, -1); DONE;\")\n \n ;; -------------------------------------------------------------------------\n ;; SImode unsigned integer comparisons\n@@ -720,13 +720,14 @@\n \n   if (TARGET_EXPAND_CBRANCHDI4)\n     {\n-      if (expand_cbranchdi4 (operands, CODE_FOR_nothing))\n+      if (expand_cbranchdi4 (operands, LAST_AND_UNUSED_RTX_CODE))\n \tDONE;\n     }\n-  comparison = prepare_cbranch_operands (operands, DImode, CODE_FOR_nothing);\n+  comparison = prepare_cbranch_operands (operands, DImode,\n+\t\t\t\t\t LAST_AND_UNUSED_RTX_CODE);\n   if (comparison != GET_CODE (operands[0]))\n     operands[0]\n-      = gen_rtx_fmt_ee (VOIDmode, comparison, operands[1], operands[2]);\n+      = gen_rtx_fmt_ee (comparison, VOIDmode, operands[1], operands[2]);\n    operands[4] = gen_rtx_SCRATCH (SImode);\n }\")\n \n@@ -4915,7 +4916,7 @@ label:\n \t\t\t\t\t\t gen_rtx_PRE_DEC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx)),\n \t\t\t\t\tget_fpscr_rtx ()));\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n+  add_reg_note (insn, REG_INC, stack_pointer_rtx);\n   DONE;\n }\")\n \n@@ -4928,7 +4929,7 @@ label:\n \t\t\t\t\tgen_frame_mem (PSImode,\n \t\t\t\t\t\t gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx))));\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n+  add_reg_note (insn, REG_INC, stack_pointer_rtx);\n   DONE;\n }\")\n \n@@ -5959,7 +5960,7 @@ label:\n \t\t\t     gen_rtx_PRE_DEC (Pmode, stack_pointer_rtx));\n   insn = emit_insn (gen_movdf_i4 (tos, operands[1], operands[2]));\n   if (! (TARGET_SH5 && true_regnum (operands[1]) < 16))\n-    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n+    add_reg_note (insn, REG_INC, stack_pointer_rtx);\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     tos = gen_tmp_stack_mem (DFmode, stack_pointer_rtx);\n   else\n@@ -5969,7 +5970,7 @@ label:\n   if (TARGET_SH5 && true_regnum (operands[0]) < 16)\n     emit_move_insn (stack_pointer_rtx, plus_constant (stack_pointer_rtx, 8));\n   else\n-    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, stack_pointer_rtx, NULL_RTX);\n+    add_reg_note (insn, REG_INC, stack_pointer_rtx);\n   DONE;\n }\")\n \n@@ -6126,7 +6127,7 @@ label:\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  mem2, operands[2]));\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, operands[1], NULL_RTX);\n+  add_reg_note (insn, REG_INC, operands[1]);\n   insn = emit_insn (gen_movsf_ie (gen_rtx_REG (SFmode,\n \t\t\t\t\t       regno + ! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  change_address (mem, SFmode, NULL_RTX),\n@@ -6165,12 +6166,12 @@ label:\n     }\n   addr = XEXP (addr, 0);\n   insn = emit_insn (gen_movsf_ie (reg0, mem2, operands[2]));\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n+  add_reg_note (insn, REG_INC, addr);\n   insn = emit_insn (gen_movsf_ie (reg1, operands[1], operands[2]));\n   if (adjust)\n     emit_insn (adjust);\n   else\n-    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n+    add_reg_note (insn, REG_INC, addr);\n   DONE;\n }\")\n \n@@ -6203,12 +6204,12 @@ label:\n     }\n   addr = XEXP (addr, 0);\n   if (! adjust)\n-    REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n+    add_reg_note (insn, REG_INC, addr);\n   insn = emit_insn (gen_movsf_ie (operands[0],\n \t\t\t\t  gen_rtx_REG (SFmode,\n \t\t\t\t\t   regno + !! TARGET_LITTLE_ENDIAN),\n \t\t\t\t  operands[2]));\n-  REG_NOTES (insn) = gen_rtx_EXPR_LIST (REG_INC, addr, NULL_RTX);\n+  add_reg_note (insn, REG_INC, addr);\n   DONE;\n }\")\n \n@@ -10486,7 +10487,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   mem = replace_equiv_address (mem, gen_rtx_POST_INC (Pmode, operands[0]));\n \n   new_insn = emit_insn (gen_fpu_switch (fpscr, mem));\n-  REG_NOTES (new_insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n+  add_reg_note (new_insn, REG_INC, operands[0]);\n   DONE;\n })\n \n@@ -10504,7 +10505,7 @@ mov.l\\\\t1f,r0\\\\n\\\\\n   mem = replace_equiv_address (mem, gen_rtx_POST_INC (Pmode, operands[0]));\n \n   new_insn = emit_insn (gen_fpu_switch (fpscr, mem));\n-  REG_NOTES (new_insn) = gen_rtx_EXPR_LIST (REG_INC, operands[0], NULL_RTX);\n+  add_reg_note (new_insn, REG_INC, operands[0]);\n \n   if (!find_regno_note (curr_insn, REG_DEAD, true_regnum (operands[0])))\n     emit_insn (gen_addsi3 (operands[0], operands[0], GEN_INT (-4)));"}]}