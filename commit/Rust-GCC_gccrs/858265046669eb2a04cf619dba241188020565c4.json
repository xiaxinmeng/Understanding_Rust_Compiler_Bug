{"sha": "858265046669eb2a04cf619dba241188020565c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4MjY1MDQ2NjY5ZWIyYTA0Y2Y2MTlkYmEyNDExODgwMjA1NjVjNA==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2013-12-05T11:35:09Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2013-12-05T11:35:09Z"}, "message": "atomic_stack.c: New test.\n\n2013-12-05  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\t* c-c++-common/tsan/atomic_stack.c: New test.\n\t* c-c++-common/tsan/fd_pipe_race.c: New test.\n\t* c-c++-common/tsan/free_race.c: New test.\n\t* c-c++-common/tsan/mutexset1.c: New test.\n\t* c-c++-common/tsan/race_on_barrier.c: New test.\n\t* c-c++-common/tsan/sleep_sync.c: New test.\n\t* c-c++-common/tsan/thread_leak.c: New test.\n\t* c-c++-common/tsan/thread_leak1.c: New test.\n\t* c-c++-common/tsan/thread_leak2.c: New test.\n\t* c-c++-common/tsan/tiny_race.c: New test.\n\t* c-c++-common/tsan/tls_race.c: New test.\n\t* c-c++-common/tsan/write_in_reader_lock.c: New test.\t\n\t* lib/tsan-dg.exp: New file.\n\t* gcc.dg/tsan/tsan.exp: New file.\n\t* g++.dg/tsan/tsan.exp: New file.\n\t* g++.dg/dg.exp: Prune tsan subdirectory.\n\nFrom-SVN: r205704", "tree": {"sha": "94d19ce76a3b21701f25ce8e146f5bb0bf836381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94d19ce76a3b21701f25ce8e146f5bb0bf836381"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858265046669eb2a04cf619dba241188020565c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858265046669eb2a04cf619dba241188020565c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858265046669eb2a04cf619dba241188020565c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858265046669eb2a04cf619dba241188020565c4/comments", "author": null, "committer": null, "parents": [{"sha": "9bbd48d120d203e8eade09e0bb830370b6d69801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bbd48d120d203e8eade09e0bb830370b6d69801", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bbd48d120d203e8eade09e0bb830370b6d69801"}], "stats": {"total": 557, "additions": 557, "deletions": 0}, "files": [{"sha": "2ede52805ddba23a455e267c765f48d885f1996e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -1,3 +1,22 @@\n+2013-12-05  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\t* c-c++-common/tsan/atomic_stack.c: New test.\n+\t* c-c++-common/tsan/fd_pipe_race.c: New test.\n+\t* c-c++-common/tsan/free_race.c: New test.\n+\t* c-c++-common/tsan/mutexset1.c: New test.\n+\t* c-c++-common/tsan/race_on_barrier.c: New test.\n+\t* c-c++-common/tsan/sleep_sync.c: New test.\n+\t* c-c++-common/tsan/thread_leak.c: New test.\n+\t* c-c++-common/tsan/thread_leak1.c: New test.\n+\t* c-c++-common/tsan/thread_leak2.c: New test.\n+\t* c-c++-common/tsan/tiny_race.c: New test.\n+\t* c-c++-common/tsan/tls_race.c: New test.\n+\t* c-c++-common/tsan/write_in_reader_lock.c: New test.\t\n+\t* lib/tsan-dg.exp: New file.\n+\t* gcc.dg/tsan/tsan.exp: New file.\n+\t* g++.dg/tsan/tsan.exp: New file.\n+\t* g++.dg/dg.exp: Prune tsan subdirectory.\n+\n 2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n         * gcc.target/i386/readeflags-1.c: New."}, {"sha": "eac71b8793d7bf4428eab99321d230e77c25499a", "filename": "gcc/testsuite/c-c++-common/tsan/atomic_stack.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fatomic_stack.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+int Global;\n+\n+void *Thread1(void *x) {\n+  sleep(1);\n+  __atomic_fetch_add(&Global, 1, __ATOMIC_RELAXED);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  Global++;\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Atomic write of size 4.*\" } */\n+/* { dg-output \"    #0 __tsan_atomic32_fetch_add.*\" } */\n+/* { dg-output \"    #1 Thread1.*\" } */"}, {"sha": "fc76cbf5ffd1cbc31ef9ea0151015c50e8d88a70", "filename": "gcc/testsuite/c-c++-common/tsan/fd_pipe_race.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffd_pipe_race.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int fds[2];\n+\n+void *Thread1(void *x) {\n+  write(fds[1], \"a\", 1);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  sleep(1);\n+  close(fds[0]);\n+  close(fds[1]);\n+  return NULL;\n+}\n+\n+int main() {\n+  pipe(fds);\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*\\n\" } */\n+/* { dg-output \"  Write of size 8.*\\n\" } */\n+/* { dg-output \"    #0 close.*\\n\" } */\n+/* { dg-output \"    #1 Thread2.*\\n\" } */\n+/* { dg-output \"  Previous read of size 8.*\\n\" } */\n+/* { dg-output \"    #0 write.*\\n\" } */\n+/* { dg-output \"    #1 Thread1.*\\n\" } */"}, {"sha": "362c92bfbeb967342d1afbfb8dbbe90b6e94095b", "filename": "gcc/testsuite/c-c++-common/tsan/free_race.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ffree_race.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <stdlib.h>\n+\n+void __attribute__((noinline)) foo(int *mem) {\n+  free(mem);\n+}\n+\n+void __attribute__((noinline)) bar(int *mem) {\n+  mem[0] = 42;\n+}\n+\n+int main() {\n+  int *mem =(int*)malloc (100);\n+  foo(mem);\n+  bar(mem);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: heap-use-after-free.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Write of size 4 at.* by main thread:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 bar.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #1 main.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Previous write of size 8 at.* by main thread:(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #0 free.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #\\(1|2\\) foo.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"    #\\(2|3\\) main.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "783f262d5ed993857fb8f9a11eceb301d58cac4b", "filename": "gcc/testsuite/c-c++-common/tsan/mutexset1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fmutexset1.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int Global;\n+pthread_mutex_t mtx;\n+\n+void *Thread1(void *x) {\n+  sleep(1);\n+  pthread_mutex_lock(&mtx);\n+  Global++;\n+  pthread_mutex_unlock(&mtx);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  Global--;\n+  return NULL;/* { dg-output \".*\" } */\n+\n+}\n+\n+int main() {\n+  pthread_mutex_init(&mtx, 0);\n+  pthread_t t[2];\n+  pthread_create(&t[0], NULL, Thread1, NULL);\n+  pthread_create(&t[1], NULL, Thread2, NULL);\n+  pthread_join(t[0], NULL);\n+  pthread_join(t[1], NULL);\n+  pthread_mutex_destroy(&mtx);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Read of size 4 at 0x\\[0-9a-f\\]+ by thread T1 \\\\(mutexes: write M\\[0-9\\]\\\\):.*\" } */\n+/* { dg-output \"  Previous write of size 4 at 0x\\[0-9a-f\\]+ by thread T2:.*\" } */\n+/* { dg-output \"  Mutex M\\[0-9\\] created at:.*\" } */\n+/* { dg-output \"    #0 pthread_mutex_init.*\" } */\n+/* { dg-output \"    #1 main (.*mutexset1.c|\\\\?{2}):\\[0-9]+.*\" } */"}, {"sha": "407c7129272e2f0496b772da1fbe9da195cbea7b", "filename": "gcc/testsuite/c-c++-common/tsan/race_on_barrier.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Frace_on_barrier.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+#include <stddef.h>\n+#include <unistd.h>\n+\n+pthread_barrier_t B;\n+int Global;\n+\n+void *Thread1(void *x) {\n+  pthread_barrier_init(&B, 0, 2);\n+  pthread_barrier_wait(&B);\n+  return NULL;\n+}\n+\n+void *Thread2(void *x) {\n+  sleep(1);\n+  pthread_barrier_wait(&B);\n+  return NULL;\n+}\n+\n+int main() {\n+  pthread_t t;\n+  pthread_create(&t, NULL, Thread1, NULL);\n+  Thread2(0);\n+  pthread_join(t, NULL);\n+  pthread_barrier_destroy(&B);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "8203d54247ed86570c6fbc8973169e5a0893b300", "filename": "gcc/testsuite/c-c++-common/tsan/sleep_sync.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fsleep_sync.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+int X = 0;\n+\n+void MySleep() {\n+  sleep(1);\n+}\n+\n+void *Thread(void *p) {\n+  MySleep();  // Assume the main thread has done the write.\n+  X = 42;\n+  return 0;\n+}\n+\n+int main() {\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  X = 43;\n+  pthread_join(t, 0);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r).*} */\n+/* { dg-output \"  As if synchronized via sleep:(\\n|\\r\\n|\\r)} */\n+/* { dg-output \"         #0 sleep.*\"*} */\n+/* { dg-output \"         #1 MySleep.*\"*} */\n+/* { dg-output \"         #2 Thread.*\"*} */"}, {"sha": "416ef77600650a02d63c53a9915c84bfebfd8092", "filename": "gcc/testsuite/c-c++-common/tsan/thread_leak.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do run } */\n+\n+#include <pthread.h>\n+#include <stdio.h>\n+\n+void *Thread(void *x) {\n+  return 0;\n+}\n+\n+int main() {\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  pthread_join(t, 0);\n+  printf(\"PASS\\n\");\n+  return 0;\n+}\n+\n+/* { dg-prune-output \"WARNING: ThreadSanitizer: thread leak.*\" } */"}, {"sha": "18bcf2aa68f82430ea3e0234221bbec4d10f6650", "filename": "gcc/testsuite/c-c++-common/tsan/thread_leak1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak1.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+void *Thread(void *x) {\n+  return 0;\n+}\n+\n+int main() {\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, 0);\n+  sleep(1);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: thread leak.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"SUMMARY: ThreadSanitizer: thread leak.*main.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "12ac7347ff4a16d3f767432130248ada5609a655", "filename": "gcc/testsuite/c-c++-common/tsan/thread_leak2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fthread_leak2.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+/* { dg-skip-if \"\" { *-*-* }  { \"-O3 -funroll-loops\" \"-O3 -funroll-all-loops\" } { \"\" } } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+void *Thread(void *x) {\n+  return 0;\n+}\n+\n+int main() {\n+  int i;\n+  for (i = 0; i < 5; i++) {\n+    pthread_t t;\n+    pthread_create(&t, 0, Thread, 0);\n+  }\n+  sleep(1);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: thread leak.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  And 4 more similar thread leaks.*\" } */"}, {"sha": "03561832d056bb85c20d8162480d243cd470fcda", "filename": "gcc/testsuite/c-c++-common/tsan/tiny_race.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftiny_race.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+int Global;\n+\n+void *Thread1(void *x) {\n+  sleep(1);\n+  Global = 42;\n+  return x;\n+}\n+\n+int main() {\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread1, 0);\n+  Global = 43;\n+  pthread_join(t, 0);\n+  return Global;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "041e9af988497b2c241a514056fa3d424835a649", "filename": "gcc/testsuite/c-c++-common/tsan/tls_race.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Ftls_race.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <stddef.h>\n+\n+void *Thread(void *a) {\n+  *(int*)a = 43;\n+  return 0;\n+}\n+\n+int main() {\n+  static __thread int Var = 42;\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread, &Var);\n+  Var = 43;\n+  pthread_join(t, 0);\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"  Location is TLS of main thread.(\\n|\\r\\n|\\r).*\" } */"}, {"sha": "c6a0beee23f7b9676cdb98b1134c490473881a71", "filename": "gcc/testsuite/c-c++-common/tsan/write_in_reader_lock.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftsan%2Fwrite_in_reader_lock.c?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-shouldfail \"tsan\" } */\n+\n+#include <pthread.h>\n+#include <unistd.h>\n+\n+pthread_rwlock_t rwlock;\n+int GLOB;\n+\n+void *Thread1(void *p) {\n+ (void)p;\n+  pthread_rwlock_rdlock(&rwlock);\n+  // Write under reader lock.\n+  sleep(1);\n+  GLOB++;\n+  pthread_rwlock_unlock(&rwlock);\n+  return 0;\n+}\n+\n+int main(int argc, char *argv[]) {\n+  pthread_rwlock_init(&rwlock, NULL);\n+  pthread_rwlock_rdlock(&rwlock);\n+  pthread_t t;\n+  pthread_create(&t, 0, Thread1, 0);\n+  volatile int x = GLOB;\n+ (void)x;\n+  pthread_rwlock_unlock(&rwlock);\n+  pthread_join(t, 0);\n+  pthread_rwlock_destroy(&rwlock);\n+  return 0;\n+}\n+\n+/* { dg-output \"WARNING: ThreadSanitizer: data race.*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"  Write of size 4 at 0x\\[0-9a-f\\]+ by thread T1.*:(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"    #0 Thread1.*\\(write_in_reader_lock.c|\\\\?{2}\\):\\[0-9\\]+ .*\" } */\n+/* { dg-output \"  Previous read of size 4 at.* by main thread.*:(\\n|\\r\\n|\\r).*\" } */\n+/* { dg-output \"    #0 main.*\\(write_in_reader_lock.c|\\\\?{2}\\):\\[0-9\\]+.*\" } */"}, {"sha": "c90a7e6d1a552740f56722d16571a2a8ecce493e", "filename": "gcc/testsuite/g++.dg/dg.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdg.exp?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -54,6 +54,7 @@ set tests [prune $tests $srcdir/$subdir/guality/*]\n set tests [prune $tests $srcdir/$subdir/simulate-thread/*]\n set tests [prune $tests $srcdir/$subdir/asan/*]\n set tests [prune $tests $srcdir/$subdir/ubsan/*]\n+set tests [prune $tests $srcdir/$subdir/tsan/*]\n \n # Main loop.\n g++-dg-runtest $tests $DEFAULT_CXXFLAGS"}, {"sha": "164a92eb85c2492702fc5da6846ec18201462b3b", "filename": "gcc/testsuite/g++.dg/tsan/tsan.exp", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftsan%2Ftsan.exp?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,40 @@\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib tsan-dg.exp\n+\n+if ![check_effective_target_fthread_sanitizer] {\n+  return\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+if [tsan_init] {\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/tsan/*.c]] \"\"\n+\n+}\n+\n+# All done.\n+tsan_finish\n+dg-finish"}, {"sha": "248cfb18f809c586c0ce8e1b7877544c77bdcf29", "filename": "gcc/testsuite/gcc.dg/tsan/tsan.exp", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftsan%2Ftsan.exp?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,40 @@\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+load_lib tsan-dg.exp\n+\n+if ![check_effective_target_fthread_sanitizer] {\n+  return\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+if [tsan_init] {\n+\n+# Main loop.\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.c $srcdir/c-c++-common/tsan/*.c]] \"\"\n+\n+}\n+\n+# All done.\n+tsan_finish\n+dg-finish"}, {"sha": "f39d8b5329f94844790d5ad5f6f311593bd285b0", "filename": "gcc/testsuite/lib/tsan-dg.exp", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858265046669eb2a04cf619dba241188020565c4/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftsan-dg.exp?ref=858265046669eb2a04cf619dba241188020565c4", "patch": "@@ -0,0 +1,114 @@\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# Return 1 if compilation with -fsanitize=thread is error-free for trivial\n+# code, 0 otherwise.\n+\n+proc check_effective_target_fthread_sanitizer {} {\n+    return [check_no_compiler_messages faddress_sanitizer object {\n+\tvoid foo (void) { }\n+    } \"-fPIE -pie -fsanitize=thread\"]\n+}\n+\n+#\n+# tsan_link_flags -- compute library path and flags to find libtsan.\n+# (originally from g++.exp)\n+#\n+\n+proc tsan_link_flags { paths } {\n+    global srcdir\n+    global ld_library_path\n+    global shlib_ext\n+\n+    set gccpath ${paths}\n+    set flags \"\"\n+\n+    set shlib_ext [get_shlib_extension]\n+\n+    if { $gccpath != \"\" } {\n+      if { [file exists \"${gccpath}/libsanitizer/tsan/.libs/libtsan.a\"]\n+\t   || [file exists \"${gccpath}/libsanitizer/tsan/.libs/libtsan.${shlib_ext}\"] } {\n+\t  append flags \" -B${gccpath}/libsanitizer/tsan/ \"\n+\t  append flags \" -L${gccpath}/libsanitizer/tsan/.libs \"\n+\t  append ld_library_path \":${gccpath}/libsanitizer/tsan/.libs\"\n+      }\n+    } else {\n+      global tool_root_dir\n+\n+      set libtsan [lookfor_file ${tool_root_dir} libtsan]\n+      if { $libtsan != \"\" } {\n+\t  append flags \"-L${libtsan} \"\n+\t  append ld_library_path \":${libtsan}\"\n+      }\n+    }\n+\n+    set_ld_library_path_env_vars\n+\n+    return \"$flags\"\n+}\n+\n+#\n+# tsan_init -- called at the start of each subdir of tests\n+#\n+\n+proc tsan_init { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global ALWAYS_CXXFLAGS\n+    global TOOL_OPTIONS\n+    global tsan_saved_TEST_ALWAYS_FLAGS\n+\n+    set link_flags \"\"\n+    if ![is_remote host] {\n+\tif [info exists TOOL_OPTIONS] {\n+\t    set link_flags \"[tsan_link_flags [get_multilibs ${TOOL_OPTIONS}]]\"\n+\t} else {\n+\t    set link_flags \"[tsan_link_flags [get_multilibs]]\"\n+\t}\n+    }\n+\n+    if [info exists TEST_ALWAYS_FLAGS] {\n+\tset tsan_saved_TEST_ALWAYS_FLAGS $TEST_ALWAYS_FLAGS\n+    }\n+    if [info exists ALWAYS_CXXFLAGS] {\n+\tset ALWAYS_CXXFLAGS [concat \"{ldflags=$link_flags}\" $ALWAYS_CXXFLAGS]\n+\tset ALWAYS_CXXFLAGS [concat \"{additional_flags=-fPIE -pie -fsanitize=thread -g}\" $ALWAYS_CXXFLAGS]\n+    } else {\n+\tif [info exists TEST_ALWAYS_FLAGS] {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -fPIE -pie -fsanitize=thread -g $TEST_ALWAYS_FLAGS\"\n+\t} else {\n+\t    set TEST_ALWAYS_FLAGS \"$link_flags -fPIE -pie -fsanitize=thread -g\"\n+\t}\n+    }\n+    if { $link_flags != \"\" } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+\n+#\n+# tsan_finish -- called at the start of each subdir of tests\n+#\n+\n+proc tsan_finish { args } {\n+    global TEST_ALWAYS_FLAGS\n+    global tsan_saved_TEST_ALWAYS_FLAGS\n+\n+    if [info exists tsan_saved_TEST_ALWAYS_FLAGS] {\n+\tset TEST_ALWAYS_FLAGS $tsan_saved_TEST_ALWAYS_FLAGS\n+    } else {\n+\tunset TEST_ALWAYS_FLAGS\n+    }\n+}"}]}