{"sha": "005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA1ZTcyYjlkZGI2YjJkOWQ5NTRiN2E0OGMzZDNjMjg5NzJmZmY0ZA==", "commit": {"author": {"name": "Luis Machado", "email": "luis.machado@linaro.org", "date": "2018-05-07T14:12:54Z"}, "committer": {"name": "Luis Machado", "email": "luisgpm@gcc.gnu.org", "date": "2018-05-07T14:12:54Z"}, "message": "Introduce prefetch-dynamic-strides option.\n\nThe following patch adds an option to control software prefetching of memory\nreferences with non-constant/unknown strides.\n\nCurrently we prefetch these references if the pass thinks there is benefit to\ndoing so. But, since this is all based on heuristics, it's not always the case\nthat we end up with better performance.\n\nFor Falkor there is also the problem of conflicts with the hardware prefetcher,\nso we need to be more conservative in terms of what we issue software prefetch\nhints for.\n\nThis also aligns GCC with what LLVM does for Falkor.\n\nSimilarly to the previous patch, the defaults guarantee no change in behavior\nfor other targets and architectures.\n\n2018-05-07  Luis Machado  <luis.machado@linaro.org>\n\n\tgcc/\n\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n\t<prefetch_dynamic_strides>: New const bool field.\n\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n\tprefetch_dynamic_strides.\n\t(exynosm1_prefetch_tune): Likewise.\n\t(thunderxt88_prefetch_tune): Likewise.\n\t(thunderx_prefetch_tune): Likewise.\n\t(thunderx2t99_prefetch_tune): Likewise.\n\t(qdf24xx_prefetch_tune): Likewise. Set prefetch_dynamic_strides to false.\n\t(aarch64_override_options_internal): Update to set\n\tPARAM_PREFETCH_DYNAMIC_STRIDES.\n\t* doc/invoke.texi (prefetch-dynamic-strides): Document new option.\n\t* params.def (PARAM_PREFETCH_DYNAMIC_STRIDES): New.\n\t* params.h (PARAM_PREFETCH_DYNAMIC_STRIDES): Define.\n\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Account for\n\tprefetch-dynamic-strides setting.\n\nFrom-SVN: r259996", "tree": {"sha": "aab4e836bba4385064c122da97ae201b12f14fcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab4e836bba4385064c122da97ae201b12f14fcf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/comments", "author": {"login": "luislinaro", "id": 53092780, "node_id": "MDQ6VXNlcjUzMDkyNzgw", "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luislinaro", "html_url": "https://github.com/luislinaro", "followers_url": "https://api.github.com/users/luislinaro/followers", "following_url": "https://api.github.com/users/luislinaro/following{/other_user}", "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}", "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions", "organizations_url": "https://api.github.com/users/luislinaro/orgs", "repos_url": "https://api.github.com/users/luislinaro/repos", "events_url": "https://api.github.com/users/luislinaro/events{/privacy}", "received_events_url": "https://api.github.com/users/luislinaro/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "57e2d1175cf972b0a352be46903d87633304ce4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57e2d1175cf972b0a352be46903d87633304ce4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57e2d1175cf972b0a352be46903d87633304ce4e"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "64a385e851a3b026ea2dde65c168a6bff2199f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -1,3 +1,23 @@\n+2018-05-07  Luis Machado  <luis.machado@linaro.org>\n+\n+\tgcc/\n+\t* config/aarch64/aarch64-protos.h (cpu_prefetch_tune)\n+\t<prefetch_dynamic_strides>: New const bool field.\n+\t* config/aarch64/aarch64.c (generic_prefetch_tune): Update to include\n+\tprefetch_dynamic_strides.\n+\t(exynosm1_prefetch_tune): Likewise.\n+\t(thunderxt88_prefetch_tune): Likewise.\n+\t(thunderx_prefetch_tune): Likewise.\n+\t(thunderx2t99_prefetch_tune): Likewise.\n+\t(qdf24xx_prefetch_tune): Likewise. Set prefetch_dynamic_strides to false.\n+\t(aarch64_override_options_internal): Update to set\n+\tPARAM_PREFETCH_DYNAMIC_STRIDES.\n+\t* doc/invoke.texi (prefetch-dynamic-strides): Document new option.\n+\t* params.def (PARAM_PREFETCH_DYNAMIC_STRIDES): New.\n+\t* params.h (PARAM_PREFETCH_DYNAMIC_STRIDES): Define.\n+\t* tree-ssa-loop-prefetch.c (should_issue_prefetch_p): Account for\n+\tprefetch-dynamic-strides setting.\n+\n 2018-05-07  Luis Machado  <luis.machado@linaro.org>\n \n \tgcc/"}, {"sha": "157308ddb79373e2cb18baaff0acc261e13211a2", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -230,6 +230,9 @@ struct cpu_prefetch_tune\n   const int l1_cache_size;\n   const int l1_cache_line_size;\n   const int l2_cache_size;\n+  /* Whether software prefetch hints should be issued for non-constant\n+     strides.  */\n+  const bool prefetch_dynamic_strides;\n   /* The minimum constant stride beyond which we should use prefetch\n      hints for.  */\n   const int minimum_stride;"}, {"sha": "3d3a9763824d11d96938c29acfd03de2523da77f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -547,6 +547,7 @@ static const cpu_prefetch_tune generic_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   -1,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n   -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n@@ -557,6 +558,7 @@ static const cpu_prefetch_tune exynosm1_prefetch_tune =\n   -1,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n   -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n@@ -567,6 +569,7 @@ static const cpu_prefetch_tune qdf24xx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   1024,\t\t\t/* l2_cache_size  */\n+  false,\t\t/* prefetch_dynamic_strides */\n   2048,\t\t\t/* minimum_stride */\n   3\t\t\t/* default_opt_level  */\n };\n@@ -577,6 +580,7 @@ static const cpu_prefetch_tune thunderxt88_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   16*1024,\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n   -1,\t\t\t/* minimum_stride */\n   3\t\t\t/* default_opt_level  */\n };\n@@ -587,6 +591,7 @@ static const cpu_prefetch_tune thunderx_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   128,\t\t\t/* l1_cache_line_size  */\n   -1,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n   -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n@@ -597,6 +602,7 @@ static const cpu_prefetch_tune thunderx2t99_prefetch_tune =\n   32,\t\t\t/* l1_cache_size  */\n   64,\t\t\t/* l1_cache_line_size  */\n   256,\t\t\t/* l2_cache_size  */\n+  true,\t\t\t/* prefetch_dynamic_strides */\n   -1,\t\t\t/* minimum_stride */\n   -1\t\t\t/* default_opt_level  */\n };\n@@ -10602,6 +10608,11 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t   aarch64_tune_params.prefetch->l2_cache_size,\n \t\t\t   opts->x_param_values,\n \t\t\t   global_options_set.x_param_values);\n+  if (!aarch64_tune_params.prefetch->prefetch_dynamic_strides)\n+    maybe_set_param_value (PARAM_PREFETCH_DYNAMIC_STRIDES,\n+\t\t\t   0,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n   if (aarch64_tune_params.prefetch->minimum_stride >= 0)\n     maybe_set_param_value (PARAM_PREFETCH_MINIMUM_STRIDE,\n \t\t\t   aarch64_tune_params.prefetch->minimum_stride,"}, {"sha": "7e57e9650f65b38b4dc78f78cc9732c2f4cf7d0e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -10733,6 +10733,16 @@ The size of L1 cache, in kilobytes.\n @item l2-cache-size\n The size of L2 cache, in kilobytes.\n \n+@item prefetch-dynamic-strides\n+Whether the loop array prefetch pass should issue software prefetch hints\n+for strides that are non-constant.  In some cases this may be\n+beneficial, though the fact the stride is non-constant may make it\n+hard to predict when there is clear benefit to issuing these hints.\n+\n+Set to 1, the default, if the prefetch hints should be issued for non-constant\n+strides.  Set to 0 if prefetch hints should be issued only for strides that\n+are known to be constant and below @option{prefetch-minimum-stride}.\n+\n @item prefetch-minimum-stride\n Minimum constant stride, in bytes, to start using prefetch hints for.  If\n the stride is less than this threshold, prefetch hints will not be issued."}, {"sha": "7408843c8cc28c2e8341684d615ddab1e190f3d0", "filename": "gcc/params.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -790,6 +790,15 @@ DEFPARAM (PARAM_L2_CACHE_SIZE,\n \t  \"The size of L2 cache.\",\n \t  512, 0, 0)\n \n+/* Whether software prefetch hints should be issued for non-constant\n+   strides.  */\n+\n+DEFPARAM (PARAM_PREFETCH_DYNAMIC_STRIDES,\n+\t  \"prefetch-dynamic-strides\",\n+\t  \"Whether software prefetch hints should be issued for non-constant \"\n+\t  \"strides.\",\n+\t  1, 0, 1)\n+\n /* The minimum constant stride beyond which we should use prefetch hints\n    for.  */\n "}, {"sha": "8aa960a904ee7f7ce239aa1323ab25e6043ae7ba", "filename": "gcc/params.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -196,6 +196,8 @@ extern void init_param_values (int *params);\n   PARAM_VALUE (PARAM_L1_CACHE_LINE_SIZE)\n #define L2_CACHE_SIZE \\\n   PARAM_VALUE (PARAM_L2_CACHE_SIZE)\n+#define PREFETCH_DYNAMIC_STRIDES \\\n+  PARAM_VALUE (PARAM_PREFETCH_DYNAMIC_STRIDES)\n #define PREFETCH_MINIMUM_STRIDE \\\n   PARAM_VALUE (PARAM_PREFETCH_MINIMUM_STRIDE)\n #define USE_CANONICAL_TYPES \\"}, {"sha": "af89d7070e3d1044e72361679692961e353e551e", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=005e72b9ddb6b2d9d954b7a48c3d3c28972fff4d", "patch": "@@ -992,6 +992,16 @@ prune_by_reuse (struct mem_ref_group *groups)\n static bool\n should_issue_prefetch_p (struct mem_ref *ref)\n {\n+  /* Do we want to issue prefetches for non-constant strides?  */\n+  if (!cst_and_fits_in_hwi (ref->group->step) && PREFETCH_DYNAMIC_STRIDES == 0)\n+    {\n+      if (dump_file && (dump_flags & TDF_DETAILS))\n+\tfprintf (dump_file,\n+\t\t \"Skipping non-constant step for reference %u:%u\\n\",\n+\t\t ref->group->uid, ref->uid);\n+      return false;\n+    }\n+\n   /* Some processors may have a hardware prefetcher that may conflict with\n      prefetch hints for a range of strides.  Make sure we don't issue\n      prefetches for such cases if the stride is within this particular"}]}