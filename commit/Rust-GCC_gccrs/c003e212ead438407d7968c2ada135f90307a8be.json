{"sha": "c003e212ead438407d7968c2ada135f90307a8be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzAwM2UyMTJlYWQ0Mzg0MDdkNzk2OGMyYWRhMTM1ZjkwMzA3YThiZQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-09-27T16:44:05Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-09-27T16:44:05Z"}, "message": "name-lookup.h (get_global_value_if_present): New function.\n\n\t* name-lookup.h (get_global_value_if_present): New function.\n\t(is_typename_at_global_scope): Likewise.\n\t* except.c (do_begin_catch): Use get_global_value_if_present.\n\t(do_end_catch): Likewise.\n\t(do_allocate_exception): Likewise.\n\t(do_free_exception): Likewise.\n\t(build_throw): Likewise.\n\t* parser.c (cp_parser_member_declaration): Likewise.\n\t* rtti.c (throw_bad_cast): Likewise.\n\t(throw_bad_typeid): Likewise.\n\t* decl.c (check_tag_decl): Use is_typename_at_global_scope.\n\t(grokdeclarator): Likewise.\n\t* cp-tree.h (global_namespace): Move to name-lookup.h\n\t* call.c (call_builtin_trap): Tidy.\n\nFrom-SVN: r71858", "tree": {"sha": "d165f5d3ea36c74d1560aeb2b2e40406468c4db1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d165f5d3ea36c74d1560aeb2b2e40406468c4db1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c003e212ead438407d7968c2ada135f90307a8be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c003e212ead438407d7968c2ada135f90307a8be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c003e212ead438407d7968c2ada135f90307a8be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c003e212ead438407d7968c2ada135f90307a8be/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6398fbfddca9e92f601fa68764b2efccd3a30124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6398fbfddca9e92f601fa68764b2efccd3a30124", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6398fbfddca9e92f601fa68764b2efccd3a30124"}], "stats": {"total": 108, "additions": 61, "deletions": 47}, "files": [{"sha": "54f84bed9134064c7cef12247dcaebd470ffbc3f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -1,3 +1,20 @@\n+2003-09-27  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* name-lookup.h (get_global_value_if_present): New function.\n+\t(is_typename_at_global_scope): Likewise.\n+\t* except.c (do_begin_catch): Use get_global_value_if_present.\n+\t(do_end_catch): Likewise.\n+\t(do_allocate_exception): Likewise.\n+\t(do_free_exception): Likewise.\n+\t(build_throw): Likewise.\n+\t* parser.c (cp_parser_member_declaration): Likewise.\n+\t* rtti.c (throw_bad_cast): Likewise.\n+\t(throw_bad_typeid): Likewise.\n+\t* decl.c (check_tag_decl): Use is_typename_at_global_scope.\n+\t(grokdeclarator): Likewise.\n+\t* cp-tree.h (global_namespace): Move to name-lookup.h\n+\t* call.c (call_builtin_trap): Tidy.\n+\n 2003-09-27  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/11415"}, {"sha": "989a84af5a6dec89b488ee65cdebb36890562f9c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -4192,12 +4192,9 @@ convert_like_real (tree convs, tree expr, tree fn, int argnum, int inner,\n static tree\n call_builtin_trap (void)\n {\n-  tree fn = get_identifier (\"__builtin_trap\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n-    abort ();\n+  tree fn = IDENTIFIER_GLOBAL_VALUE (get_identifier (\"__builtin_trap\"));\n \n+  my_friendly_assert (fn != NULL, 20030927);\n   fn = build_call (fn, NULL_TREE);\n   fn = build (COMPOUND_EXPR, integer_type_node, fn, integer_zero_node);\n   return fn;"}, {"sha": "0786bc558fb1aedfba6f2777979edcce562821dc", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -870,8 +870,6 @@ struct language_function GTY(())\n #define current_function_return_value \\\n   (cp_function_chain->x_return_value)\n \n-extern GTY(()) tree global_namespace;\n-\n #define ansi_opname(CODE) \\\n   (operator_name_info[(int) (CODE)].identifier)\n #define ansi_assopname(CODE) \\"}, {"sha": "5eab2102575ae5d03ac3cbe04e30d7f4002fd0a1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -6589,11 +6589,9 @@ check_tag_decl (tree declspecs)\n     {\n       tree value = TREE_VALUE (link);\n \n-      if (TYPE_P (value)\n-\t  || TREE_CODE (value) == TYPE_DECL\n+      if (TYPE_P (value) || TREE_CODE (value) == TYPE_DECL\n \t  || (TREE_CODE (value) == IDENTIFIER_NODE\n-\t      && IDENTIFIER_GLOBAL_VALUE (value)\n-\t      && TREE_CODE (IDENTIFIER_GLOBAL_VALUE (value)) == TYPE_DECL))\n+\t      && is_typename_at_global_scope (value)))\n \t{\n \t  ++found_type;\n \n@@ -9674,9 +9672,7 @@ grokdeclarator (tree declarator,\n \t\tflags = TYPENAME_FLAG;\n \t\tctor_return_type = TREE_TYPE (dname);\n \t\tsfk = sfk_conversion;\n-\t\tif (IDENTIFIER_GLOBAL_VALUE (dname)\n-\t\t    && (TREE_CODE (IDENTIFIER_GLOBAL_VALUE (dname))\n-\t\t\t== TYPE_DECL))\n+\t\tif (is_typename_at_global_scope (dname))\n \t\t  name = IDENTIFIER_POINTER (dname);\n \t\telse\n \t\t  name = \"<invalid operator>\";\n@@ -10309,9 +10305,7 @@ grokdeclarator (tree declarator,\n \t\t  op = IDENTIFIER_OPNAME_P (tmp);\n \t\t  if (IDENTIFIER_TYPENAME_P (tmp))\n \t\t    {\n-\t\t      if (IDENTIFIER_GLOBAL_VALUE (tmp)\n-\t\t\t  && (TREE_CODE (IDENTIFIER_GLOBAL_VALUE (tmp))\n-\t\t\t      == TYPE_DECL))\n+\t\t      if (is_typename_at_global_scope (tmp))\n \t\t\tname = IDENTIFIER_POINTER (tmp);\n \t\t      else\n \t\t\tname = \"<invalid operator>\";"}, {"sha": "962da966b493ef456bbad70c87c2ca22884e1677", "filename": "gcc/cp/except.c", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -161,9 +161,7 @@ do_begin_catch (void)\n   tree fn;\n \n   fn = get_identifier (\"__cxa_begin_catch\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     {\n       /* Declare void* __cxa_begin_catch (void *).  */\n       tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n@@ -198,9 +196,7 @@ do_end_catch (tree type)\n   tree fn, cleanup;\n \n   fn = get_identifier (\"__cxa_end_catch\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     {\n       /* Declare void __cxa_end_catch ().  */\n       fn = push_void_library_fn (fn, void_list_node);\n@@ -498,9 +494,7 @@ do_allocate_exception (tree type)\n   tree fn;\n \n   fn = get_identifier (\"__cxa_allocate_exception\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     {\n       /* Declare void *__cxa_allocate_exception(size_t).  */\n       tree tmp = tree_cons (NULL_TREE, size_type_node, void_list_node);\n@@ -521,9 +515,7 @@ do_free_exception (tree ptr)\n   tree fn;\n \n   fn = get_identifier (\"__cxa_free_exception\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     {\n       /* Declare void __cxa_free_exception (void *).  */\n       fn = push_void_library_fn (fn, tree_cons (NULL_TREE, ptr_type_node,\n@@ -644,9 +636,7 @@ build_throw (tree exp)\n   if (exp && decl_is_java_type (TREE_TYPE (exp), 1))\n     {\n       tree fn = get_identifier (\"_Jv_Throw\");\n-      if (IDENTIFIER_GLOBAL_VALUE (fn))\n-\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n-      else\n+      if (!get_global_value_if_present (fn, &fn))\n \t{\n \t  /* Declare void _Jv_Throw (void *).  */\n \t  tree tmp = tree_cons (NULL_TREE, ptr_type_node, void_list_node);\n@@ -665,9 +655,7 @@ build_throw (tree exp)\n       tree temp_expr, allocate_expr;\n \n       fn = get_identifier (\"__cxa_throw\");\n-      if (IDENTIFIER_GLOBAL_VALUE (fn))\n-\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n-      else\n+      if (!get_global_value_if_present (fn, &fn))\n \t{\n \t  /* The CLEANUP_TYPE is the internal type of a destructor.  */\n \t  if (cleanup_type == NULL_TREE)\n@@ -772,9 +760,7 @@ build_throw (tree exp)\n       /* Rethrow current exception.  */\n \n       tree fn = get_identifier (\"__cxa_rethrow\");\n-      if (IDENTIFIER_GLOBAL_VALUE (fn))\n-\tfn = IDENTIFIER_GLOBAL_VALUE (fn);\n-      else\n+      if (!get_global_value_if_present (fn, &fn))\n \t{\n \t  /* Declare void __cxa_rethrow (void).  */\n \t  fn = push_throw_library_fn"}, {"sha": "04c6161dbc44b365f95be88cfb8ec9138a5e42b1", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -97,6 +97,9 @@ extern cxx_binding *cxx_binding_make (tree, tree);\n extern void cxx_binding_free (cxx_binding *);\n extern bool supplement_binding (cxx_binding *, tree);\n \f\n+/* The tree node representing the global scope.  */\n+extern GTY(()) tree global_namespace;\n+\n /* True if SCOPE designates the global scope binding contour.  */\n #define global_scope_p(SCOPE) \\\n   ((SCOPE) == NAMESPACE_LEVEL (global_namespace))\n@@ -107,4 +110,28 @@ extern cxx_binding *binding_for_name (cxx_scope *, tree);\n extern tree namespace_binding (tree, tree);\n extern void set_namespace_binding (tree, tree, tree);\n \n+\n+/* Set *DECL to the (non-hidden) declaration for ID at global scope,\n+   if present and return true; otherwise return false.  */\n+\n+static inline bool\n+get_global_value_if_present (tree id, tree *decl)\n+{\n+  tree global_value = namespace_binding (id, global_namespace);\n+\n+  if (global_value)\n+    *decl = global_value;\n+  return global_value != NULL;\n+}\n+\n+/* True is the binding of IDENTIFIER at global scope names a type.  */\n+\n+static inline bool\n+is_typename_at_global_scope (tree id)\n+{\n+  tree global_value = namespace_binding (id, global_namespace);\n+\n+  return global_value && TREE_CODE (global_value) == TYPE_DECL;\n+}\n+\n #endif /* GCC_CP_NAME_LOOKUP_H */"}, {"sha": "ec5912f88d8460a21a4e9eba28a8cc506c4d9ade", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -11840,9 +11840,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t     {\n \t\t       tree s = TREE_VALUE (specifier);\n \n-\t\t       if (TREE_CODE (s) == IDENTIFIER_NODE\n-\t\t\t   && IDENTIFIER_GLOBAL_VALUE (s))\n-\t\t\t type = IDENTIFIER_GLOBAL_VALUE (s);\n+\t\t       if (TREE_CODE (s) == IDENTIFIER_NODE)\n+                         get_global_value_if_present (s, &type);\n \t\t       if (TREE_CODE (s) == TYPE_DECL)\n \t\t\t s = TREE_TYPE (s);\n \t\t       if (TYPE_P (s))"}, {"sha": "391a581ad98e9c2357f3aaaa08bd2c59dce1a9e2", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c003e212ead438407d7968c2ada135f90307a8be/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=c003e212ead438407d7968c2ada135f90307a8be", "patch": "@@ -172,9 +172,7 @@ static tree\n throw_bad_cast (void)\n {\n   tree fn = get_identifier (\"__cxa_bad_cast\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     fn = push_throw_library_fn (fn, build_function_type (ptr_type_node,\n \t\t\t\t\t\t\t void_list_node));\n   \n@@ -188,9 +186,7 @@ static tree\n throw_bad_typeid (void)\n {\n   tree fn = get_identifier (\"__cxa_bad_typeid\");\n-  if (IDENTIFIER_GLOBAL_VALUE (fn))\n-    fn = IDENTIFIER_GLOBAL_VALUE (fn);\n-  else\n+  if (!get_global_value_if_present (fn, &fn))\n     {\n       tree t = build_qualified_type (type_info_type_node, TYPE_QUAL_CONST);\n       t = build_function_type (build_reference_type (t), void_list_node);"}]}