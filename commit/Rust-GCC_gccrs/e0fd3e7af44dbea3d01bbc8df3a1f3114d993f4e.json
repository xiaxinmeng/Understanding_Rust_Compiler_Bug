{"sha": "e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmZDNlN2FmNDRkYmVhM2QwMWJiYzhkZjNhMWYzMTE0ZDk5M2Y0ZQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2003-03-10T12:59:12Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2003-03-10T12:59:12Z"}, "message": "cfg.c (unchecked_make_edge): New.\n\n        * cfg.c (unchecked_make_edge): New.\n        (cached_make_edge): Use it.\n        * basic-block.h (unchecked_make_edge): Declare.\n        * cfglayout.c (cfg_layout_duplicate_bb): Use it.\n\nFrom-SVN: r64077", "tree": {"sha": "910ae1be1ed0cfb58f838d49e41f168f4467b5cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910ae1be1ed0cfb58f838d49e41f168f4467b5cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac228d4e574c53a6c8c91e8f368d0c14199ba523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac228d4e574c53a6c8c91e8f368d0c14199ba523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac228d4e574c53a6c8c91e8f368d0c14199ba523"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "2125c09c5d096dbf45e3645fb18611281b526981", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "patch": "@@ -1,3 +1,10 @@\n+2003-03-10  Michael Matz  <matz@suse.de>\n+\n+\t* cfg.c (unchecked_make_edge): New.\n+\t(cached_make_edge): Use it.\n+\t* basic-block.h (unchecked_make_edge): Declare.\n+\t* cfglayout.c (cfg_layout_duplicate_bb): Use it.\n+\n 2003-03-10  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* fpa.md: New file.  Move all patterns relating to FPA co-processor"}, {"sha": "fce7de55c8d1b4d9797e58c3f752db1e2b5f7218", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "patch": "@@ -345,6 +345,8 @@ extern void remove_fake_edges\t\tPARAMS ((void));\n extern void add_noreturn_fake_exit_edges\tPARAMS ((void));\n extern void connect_infinite_loops_to_exit\tPARAMS ((void));\n extern int flow_call_edges_add\t\tPARAMS ((sbitmap));\n+extern edge unchecked_make_edge\t\tPARAMS ((basic_block,\n+\t\t\t\t\t\t basic_block, int));\n extern edge cached_make_edge\t\tPARAMS ((sbitmap *, basic_block,\n \t\t\t\t\t\t basic_block, int));\n extern edge make_edge\t\t\tPARAMS ((basic_block,"}, {"sha": "fe40007af4116037e5bd4d560eb3ffda15112432", "filename": "gcc/cfg.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "patch": "@@ -280,6 +280,32 @@ expunge_block (b)\n   pool_free (bb_pool, b);\n }\n \f\n+/* Create an edge connecting SRC and DEST with flags FLAGS.  Return newly\n+   created edge.  Use this only if you are sure that this edge can't\n+   possibly already exist.  */\n+\n+edge\n+unchecked_make_edge (src, dst, flags)\n+     basic_block src, dst;\n+     int flags;\n+{\n+  edge e;\n+  e = pool_alloc (edge_pool);\n+  memset (e, 0, sizeof (*e));\n+  n_edges++;\n+\n+  e->succ_next = src->succ;\n+  e->pred_next = dst->pred;\n+  e->src = src;\n+  e->dest = dst;\n+  e->flags = flags;\n+\n+  src->succ = e;\n+  dst->pred = e;\n+\n+  return e;\n+}\n+\n /* Create an edge connecting SRC and DST with FLAGS optionally using\n    edge cache CACHE.  Return the new edge, NULL if already exist.  */\n \n@@ -320,19 +346,7 @@ cached_make_edge (edge_cache, src, dst, flags)\n       break;\n     }\n   \n-  \n-  e = pool_alloc (edge_pool);\n-  memset (e, 0, sizeof (*e));\n-  n_edges++;\n-\n-  e->succ_next = src->succ;\n-  e->pred_next = dst->pred;\n-  e->src = src;\n-  e->dest = dst;\n-  e->flags = flags;\n-\n-  src->succ = e;\n-  dst->pred = e;\n+  e = unchecked_make_edge (src, dst, flags);\n \n   if (use_edge_cache)\n     SET_BIT (edge_cache[src->index], dst->index);"}, {"sha": "1f4f8fc5b9f2cb0eaa10644f2f2975cef1fbf047", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=e0fd3e7af44dbea3d01bbc8df3a1f3114d993f4e", "patch": "@@ -980,7 +980,10 @@ cfg_layout_duplicate_bb (bb, e)\n   new_bb->flags = bb->flags;\n   for (s = bb->succ; s; s = s->succ_next)\n     {\n-      n = make_edge (new_bb, s->dest, s->flags);\n+      /* Since we are creating edges from a new block to successors\n+\t of another block (which therefore are known to be disjoint), there\n+\t is no need to actually check for duplicated edges.  */\n+      n = unchecked_make_edge (new_bb, s->dest, s->flags);\n       n->probability = s->probability;\n       if (new_count)\n \t/* Take care for overflows!  */"}]}