{"sha": "fd22cd216b0bb01b882467b4682c7b0f6eee7026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyMmNkMjE2YjBiYjAxYjg4MjQ2N2I0NjgyYzdiMGY2ZWVlNzAyNg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2009-11-30T14:09:30Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T14:09:30Z"}, "message": "scans.ads (Wide_Wide_Character_Found): New flag\n\n2009-11-30  Robert Dewar  <dewar@adacore.com>\n\n\t* scans.ads (Wide_Wide_Character_Found): New flag\n\t* scn.adb (Post_Scan): Set new flag Has_Wide_Wide_Character\n\t* scng.adb (Set_String): Set new flag Wide_Wide_Character_Found\n\t(Set_String): Fix failure to reset Wide_Character_Found\n\t* sinfo.adb (Has_Wide_Wide_Character): New flag in N_String_Literal\n\t* sinfo.ads (Has_Wide_Wide_Character): New flag in N_String_Literal\n\t* a-ngelfu.adb: Minor reformatting & code reorganization.\n\t* usage.adb: Fix typo in -gnatw.W line\n\nFrom-SVN: r154804", "tree": {"sha": "8ed797e2e1caafc148b02dcb9b3b2abceaaa79bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ed797e2e1caafc148b02dcb9b3b2abceaaa79bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd22cd216b0bb01b882467b4682c7b0f6eee7026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22cd216b0bb01b882467b4682c7b0f6eee7026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd22cd216b0bb01b882467b4682c7b0f6eee7026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd22cd216b0bb01b882467b4682c7b0f6eee7026/comments", "author": null, "committer": null, "parents": [{"sha": "d0995fa28092684f4d3a9123682d293f2517d457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0995fa28092684f4d3a9123682d293f2517d457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0995fa28092684f4d3a9123682d293f2517d457"}], "stats": {"total": 212, "additions": 115, "deletions": 97}, "files": [{"sha": "e5cd72b4de9656fb63be4f4f75ed80dac5e82543", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -1,3 +1,14 @@\n+2009-11-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* scans.ads (Wide_Wide_Character_Found): New flag\n+\t* scn.adb (Post_Scan): Set new flag Has_Wide_Wide_Character\n+\t* scng.adb (Set_String): Set new flag Wide_Wide_Character_Found\n+\t(Set_String): Fix failure to reset Wide_Character_Found\n+\t* sinfo.adb (Has_Wide_Wide_Character): New flag in N_String_Literal\n+\t* sinfo.ads (Has_Wide_Wide_Character): New flag in N_String_Literal\n+\t* a-ngelfu.adb: Minor reformatting & code reorganization.\n+\t* usage.adb: Fix typo in -gnatw.W line\n+\n 2009-11-30  Robert Dewar  <dewar@adacore.com>\n \n \t* osint.adb, prj-nmsc.adb, sem_prag.adb, sem_util.adb: Minor"}, {"sha": "fcc08d479c051045b9df729b62dd88df109af9ed", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 44, "deletions": 84, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -35,8 +35,8 @@\n --  advantage of the C functions, e.g. in providing interface to hardware\n --  provided versions of the elementary functions.\n \n---  Uses functions sqrt, exp, log, pow, sin, asin, cos, acos, tan, atan,\n---  sinh, cosh, tanh from C library via math.h\n+--  Uses functions sqrt, exp, log, pow, sin, asin, cos, acos, tan, atan, sinh,\n+--  cosh, tanh from C library via math.h\n \n with Ada.Numerics.Aux;\n \n@@ -46,6 +46,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    Sqrt_Two : constant := 1.41421_35623_73095_04880_16887_24209_69807_85696;\n    Log_Two  : constant := 0.69314_71805_59945_30941_72321_21458_17656_80755;\n+\n    Half_Log_Two : constant := Log_Two / 2;\n \n    subtype T is Float_Type'Base;\n@@ -63,9 +64,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n    -----------------------\n \n    function Exp_Strict (X : Float_Type'Base) return Float_Type'Base;\n-   --  Cody/Waite routine, supposedly more precise than the library\n-   --  version. Currently only needed for Sinh/Cosh on X86 with the largest\n-   --  FP type.\n+   --  Cody/Waite routine, supposedly more precise than the library version.\n+   --  Currently only needed for Sinh/Cosh on X86 with the largest FP type.\n \n    function Local_Atan\n      (Y : Float_Type'Base;\n@@ -120,9 +120,9 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n                A_Right := abs (Right);\n \n                --  If exponent is larger than one, compute integer exponen-\n-               --  tiation if possible, and evaluate fractional part with\n-               --  more precision. The relative error is now proportional\n-               --  to the fractional part of the exponent only.\n+               --  tiation if possible, and evaluate fractional part with more\n+               --  precision. The relative error is now proportional to the\n+               --  fractional part of the exponent only.\n \n                if A_Right > 1.0\n                  and then A_Right < Float_Type'Base (Integer'Last)\n@@ -240,8 +240,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    function Arccosh (X : Float_Type'Base) return Float_Type'Base is\n    begin\n-      --  Return positive branch of Log (X - Sqrt (X * X - 1.0)), or\n-      --  the proper approximation for X close to 1 or >> 1.\n+      --  Return positive branch of Log (X - Sqrt (X * X - 1.0)), or the proper\n+      --  approximation for X close to 1 or >> 1.\n \n       if X < 1.0 then\n          raise Argument_Error;\n@@ -304,8 +304,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n          raise Argument_Error;\n \n       else\n-         --  1.0 < abs X <= 2.0.  One of X + 1.0 and X - 1.0 is exact, the\n-         --  other has error 0 or Epsilon.\n+         --  1.0 < abs X <= 2.0. One of X + 1.0 and X - 1.0 is exact, the other\n+         --  has error 0 or Epsilon.\n \n          return 0.5 * (Log (abs (X + 1.0)) - Log (abs (X - 1.0)));\n       end if;\n@@ -393,9 +393,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       return Float_Type'Base\n    is\n    begin\n-      if X = 0.0\n-        and then Y = 0.0\n-      then\n+      if X = 0.0 and then Y = 0.0 then\n          raise Argument_Error;\n \n       elsif Y = 0.0 then\n@@ -406,11 +404,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n          end if;\n \n       elsif X = 0.0 then\n-         if Y > 0.0 then\n-            return Half_Pi;\n-         else -- Y < 0.0\n-            return -Half_Pi;\n-         end if;\n+         return Float_Type'Copy_Sign (Half_Pi, Y);\n \n       else\n          return Local_Atan (Y, X);\n@@ -429,9 +423,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       if Cycle <= 0.0 then\n          raise Argument_Error;\n \n-      elsif X = 0.0\n-        and then Y = 0.0\n-      then\n+      elsif X = 0.0 and then Y = 0.0 then\n          raise Argument_Error;\n \n       elsif Y = 0.0 then\n@@ -442,11 +434,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n          end if;\n \n       elsif X = 0.0 then\n-         if Y > 0.0 then\n-            return Cycle / 4.0;\n-         else -- Y < 0.0\n-            return -(Cycle / 4.0);\n-         end if;\n+         return Float_Type'Copy_Sign (Cycle / 4.0, Y);\n \n       else\n          return Local_Atan (Y, X) *  Cycle / Two_Pi;\n@@ -459,6 +447,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    function Arctanh (X : Float_Type'Base) return Float_Type'Base is\n       A, B, D, A_Plus_1, A_From_1 : Float_Type'Base;\n+\n       Mantissa : constant Integer := Float_Type'Base'Machine_Mantissa;\n \n    begin\n@@ -490,9 +479,9 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       --  why is above line commented out ???\n \n       else\n-         --  Use several piecewise linear approximations.\n-         --  A is close to X, chosen so 1.0 + A, 1.0 - A, and X - A are exact.\n-         --  The two scalings remove the low-order bits of X.\n+         --  Use several piecewise linear approximations. A is close to X,\n+         --  chosen so 1.0 + A, 1.0 - A, and X - A are exact. The two scalings\n+         --  remove the low-order bits of X.\n \n          A := Float_Type'Base'Scaling (\n              Float_Type'Base (Long_Long_Integer\n@@ -504,16 +493,13 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n          D := A_Plus_1 * A_From_1;  --  1 - A*A.\n \n          --  use one term of the series expansion:\n-         --  f (x + e) = f(x) + e * f'(x) + ..\n+\n+         --    f (x + e) = f(x) + e * f'(x) + ..\n \n          --  The derivative of Arctanh at A is 1/(1-A*A). Next term is\n          --  A*(B/D)**2 (if a quadratic approximation is ever needed).\n \n          return 0.5 * (Log (A_Plus_1) - Log (A_From_1)) + B / D;\n-\n-         --  else\n-         --  return 0.5 * Log ((X + 1.0) / (1.0 - X));\n-         --  why are above lines commented out ???\n       end if;\n    end Arctanh;\n \n@@ -540,8 +526,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n    function Cos (X, Cycle : Float_Type'Base) return Float_Type'Base is\n    begin\n-      --  Just reuse the code for Sin. The potential small\n-      --  loss of speed is negligible with proper (front-end) inlining.\n+      --  Just reuse the code for Sin. The potential small loss of speed is\n+      --  negligible with proper (front-end) inlining.\n \n       return -Sin (abs X - Cycle * 0.25, Cycle);\n    end Cos;\n@@ -704,8 +690,8 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n       --  Deal with case of Exp returning IEEE infinity. If Machine_Overflows\n       --  is False, then we can just leave it as an infinity (and indeed we\n-      --  prefer to do so). But if Machine_Overflows is True, then we have\n-      --  to raise a Constraint_Error exception as required by the RM.\n+      --  prefer to do so). But if Machine_Overflows is True, then we have to\n+      --  raise a Constraint_Error exception as required by the RM.\n \n       if Float_Type'Machine_Overflows and then not R'Valid then\n          raise Constraint_Error;\n@@ -727,46 +713,21 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       Raw_Atan : Float_Type'Base;\n \n    begin\n-      --  Z := (if abs Y > abs X then abs (X / Y) else abs (Y / X));\n-\n-      --  Raw_Atan :=\n-      --    (if Z < Sqrt_Epsilon then Z\n-      --     elsif Z = 1.0 then Pi / 4.0\n-      --     else Float_Type'Base (Aux.Atan (Double (Z))));\n-\n-      --  Replace above with IF statements for now (ASIS gnatelim problem???)\n+      Z := (if abs Y > abs X then abs (X / Y) else abs (Y / X));\n \n-      if abs Y > abs X then\n-         Z := abs (X / Y);\n-      else\n-         Z := abs (Y / X);\n-      end if;\n-\n-      if Z < Sqrt_Epsilon then\n-         Raw_Atan := Z;\n-      elsif Z = 1.0 then\n-         Raw_Atan := Pi / 4.0;\n-      else\n-         Raw_Atan := Float_Type'Base (Aux.Atan (Double (Z)));\n-      end if;\n+      Raw_Atan :=\n+        (if Z < Sqrt_Epsilon then Z\n+         elsif Z = 1.0 then Pi / 4.0\n+         else Float_Type'Base (Aux.Atan (Double (Z))));\n \n       if abs Y > abs X then\n          Raw_Atan := Half_Pi - Raw_Atan;\n       end if;\n \n       if X > 0.0 then\n-         if Y > 0.0 then\n-            return Raw_Atan;\n-         else                 --  Y < 0.0\n-            return -Raw_Atan;\n-         end if;\n-\n-      else                    --  X < 0.0\n-         if Y > 0.0 then\n-            return Pi - Raw_Atan;\n-         else                  --  Y < 0.0\n-            return -(Pi - Raw_Atan);\n-         end if;\n+         return Float_Type'Copy_Sign (Raw_Atan, Y);\n+      else\n+         return Float_Type'Copy_Sign (Pi - Raw_Atan, Y);\n       end if;\n    end Local_Atan;\n \n@@ -835,27 +796,27 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n       if Cycle <= 0.0 then\n          raise Argument_Error;\n \n+      --  If X is zero, return it as the result, preserving the argument sign.\n+      --  Is this test really needed on any machine ???\n+\n       elsif X = 0.0 then\n-         --  Is this test really needed on any machine ???\n          return X;\n       end if;\n \n       T := Float_Type'Base'Remainder (X, Cycle);\n \n-      --  The following two reductions reduce the argument\n-      --  to the interval [-0.25 * Cycle, 0.25 * Cycle].\n-      --  This reduction is exact and is needed to prevent\n-      --  inaccuracy that may result if the sinus function\n-      --  a different (more accurate) value of Pi in its\n-      --  reduction than is used in the multiplication with Two_Pi.\n+      --  The following two reductions reduce the argument to the interval\n+      --  [-0.25 * Cycle, 0.25 * Cycle]. This reduction is exact and is needed\n+      --  to prevent inaccuracy that may result if the sinus function uses a\n+      --  different (more accurate) value of Pi in its reduction than is used\n+      --  in the multiplication with Two_Pi.\n \n       if abs T > 0.25 * Cycle then\n          T := 0.5 * Float_Type'Copy_Sign (Cycle, T) - T;\n       end if;\n \n-      --  Could test for 12.0 * abs T = Cycle, and return\n-      --  an exact value in those cases. It is not clear that\n-      --  this is worth the extra test though.\n+      --  Could test for 12.0 * abs T = Cycle, and return an exact value in\n+      --  those cases. It is not clear this is worth the extra test though.\n \n       return Float_Type'Base (Aux.Sin (Double (T / Cycle * Two_Pi)));\n    end Sin;\n@@ -938,7 +899,6 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n \n       elsif X = 0.0 then\n          return X;\n-\n       end if;\n \n       return Float_Type'Base (Aux.Sqrt (Double (X)));"}, {"sha": "770d53bb59baf710222ab53534ca1d2dc7673e0e", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -428,7 +428,13 @@ package Scans is\n    --  Valid only when Token = Tok_String_Literal or Tok_Operator_Symbol.\n \n    Wide_Character_Found : Boolean := False;\n-   --  Set True if wide character found.\n+   --  Set True if wide character found (i.e. a character that does not fit\n+   --  in Character, but fits in Wide_Wide_Character).\n+   --  Valid only when Token = Tok_String_Literal.\n+\n+   Wide_Wide_Character_Found : Boolean := False;\n+   --  Set True if wide wide character found (i.e. a character that does\n+   --  not fit in Character or Wide_Character).\n    --  Valid only when Token = Tok_String_Literal.\n \n    Special_Character : Character;"}, {"sha": "98485506cba9d260cf2754e0b217aff1d80f8cf8", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -383,7 +383,10 @@ package body Scn is\n \n          when Tok_String_Literal =>\n             Token_Node := New_Node (N_String_Literal, Token_Ptr);\n-            Set_Has_Wide_Character (Token_Node, Wide_Character_Found);\n+            Set_Has_Wide_Character\n+              (Token_Node, Wide_Character_Found);\n+            Set_Has_Wide_Wide_Character\n+              (Token_Node, Wide_Wide_Character_Found);\n             Set_Strval (Token_Node, String_Literal_Id);\n \n          when Tok_Operator_Symbol =>"}, {"sha": "af1f3bbc3a08c79232f13fefa5b88b51326727c5", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -785,12 +785,12 @@ package body Scng is\n \n          procedure Set_String;\n          --  Procedure used to distinguish between string and operator symbol.\n-         --  On entry the string has been scanned out, and its characters\n-         --  start at Token_Ptr and end one character before Scan_Ptr. On exit\n-         --  Token is set to Tok_String_Literal or Tok_Operator_Symbol as\n-         --  appropriate, and Token_Node is appropriately initialized. In\n-         --  addition, in the operator symbol case, Token_Name is\n-         --  appropriately set.\n+         --  On entry the string has been scanned out, and its characters start\n+         --  at Token_Ptr and end one character before Scan_Ptr. On exit Token\n+         --  is set to Tok_String_Literal/Tok_Operator_Symbol as appropriate,\n+         --  and Token_Node is appropriately initialized. In addition, in the\n+         --  operator symbol case, Token_Name is appropriately set, and the\n+         --  flags [Wide_]Wide_Character_Found are set appropriately.\n \n          ---------------------------\n          -- Error_Bad_String_Char --\n@@ -1016,7 +1016,10 @@ package body Scng is\n \n          Delimiter := Source (Scan_Ptr);\n          Accumulate_Checksum (Delimiter);\n+\n          Start_String;\n+         Wide_Character_Found      := False;\n+         Wide_Wide_Character_Found := False;\n          Scan_Ptr := Scan_Ptr + 1;\n \n          --  Loop to scan out characters of string literal\n@@ -1096,7 +1099,11 @@ package body Scng is\n             Store_String_Char (Code);\n \n             if not In_Character_Range (Code) then\n-               Wide_Character_Found := True;\n+               if In_Wide_Character_Range (Code) then\n+                  Wide_Character_Found := True;\n+               else\n+                  Wide_Wide_Character_Found := True;\n+               end if;\n             end if;\n          end loop;\n "}, {"sha": "f4c171cebf79ed4800e617b8f48e44fdd14b12ec", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -1481,6 +1481,14 @@ package body Sinfo is\n       return Flag11 (N);\n    end Has_Wide_Character;\n \n+   function Has_Wide_Wide_Character\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_String_Literal);\n+      return Flag13 (N);\n+   end Has_Wide_Wide_Character;\n+\n    function Hidden_By_Use_Clause\n      (N : Node_Id) return Elist_Id is\n    begin\n@@ -4351,6 +4359,14 @@ package body Sinfo is\n       Set_Flag11 (N, Val);\n    end Set_Has_Wide_Character;\n \n+   procedure Set_Has_Wide_Wide_Character\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_String_Literal);\n+      Set_Flag13 (N, Val);\n+   end Set_Has_Wide_Wide_Character;\n+\n    procedure Set_Hidden_By_Use_Clause\n      (N : Node_Id; Val : Elist_Id) is\n    begin"}, {"sha": "cbafd19dd94e1ac1c1f1977628c1fb7988dff679", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -1149,7 +1149,13 @@ package Sinfo is\n \n    --  Has_Wide_Character (Flag11-Sem)\n    --    Present in string literals, set if any wide character (i.e. character\n-   --    code outside the Character range) appears in the string.\n+   --    code outside the Character range but within Wide_Character range)\n+   --    appears in the string. Used to implement pragma preference rules.\n+\n+   --  Has_Wide_Wide_Character (Flag13-Sem)\n+   --    Present in string literals, set if any wide character (i.e. character\n+   --    code outside the Wide_Character range) appears in the string. Used to\n+   --    implement pragma preference rules.\n \n    --  Hidden_By_Use_Clause (Elist4-Sem)\n    --     An entity list present in use clauses that appear within\n@@ -1179,7 +1185,7 @@ package Sinfo is\n    --    to the node for the spec of the instance, inserted as part of the\n    --    semantic processing for instantiations in Sem_Ch12.\n \n-   --  Is_Accessibility_Actual (Flag13-Sem)\n+   --  Is_Accessibility_Actual (Flag12-Sem)\n    --    Present in N_Parameter_Association nodes. True if the parameter is\n    --    an extra actual that carries the accessibility level of the actual\n    --    for an access parameter, in a function that dispatches on result and\n@@ -1937,6 +1943,7 @@ package Sinfo is\n       --  Sloc points to literal\n       --  Strval (Str3) contains Id of string value\n       --  Has_Wide_Character (Flag11-Sem)\n+      --  Has_Wide_Wide_Character (Flag13-Sem)\n       --  Is_Folded_In_Parser (Flag4)\n       --  plus fields for expression\n \n@@ -8059,6 +8066,9 @@ package Sinfo is\n    function Has_Wide_Character\n      (N : Node_Id) return Boolean;    -- Flag11\n \n+   function Has_Wide_Wide_Character\n+     (N : Node_Id) return Boolean;    -- Flag13\n+\n    function Hidden_By_Use_Clause\n      (N : Node_Id) return Elist_Id;   -- Elist4\n \n@@ -8974,6 +8984,9 @@ package Sinfo is\n    procedure Set_Has_Wide_Character\n      (N : Node_Id; Val : Boolean := True);    -- Flag11\n \n+   procedure Set_Has_Wide_Wide_Character\n+     (N : Node_Id; Val : Boolean := True);    -- Flag13\n+\n    procedure Set_Hidden_By_Use_Clause\n      (N : Node_Id; Val : Elist_Id);           -- Elist4\n \n@@ -11274,6 +11287,7 @@ package Sinfo is\n    pragma Inline (Has_Task_Info_Pragma);\n    pragma Inline (Has_Task_Name_Pragma);\n    pragma Inline (Has_Wide_Character);\n+   pragma Inline (Has_Wide_Wide_Character);\n    pragma Inline (Hidden_By_Use_Clause);\n    pragma Inline (High_Bound);\n    pragma Inline (Identifier);\n@@ -11575,6 +11589,7 @@ package Sinfo is\n    pragma Inline (Set_Has_Task_Info_Pragma);\n    pragma Inline (Set_Has_Task_Name_Pragma);\n    pragma Inline (Set_Has_Wide_Character);\n+   pragma Inline (Set_Has_Wide_Wide_Character);\n    pragma Inline (Set_Hidden_By_Use_Clause);\n    pragma Inline (Set_High_Bound);\n    pragma Inline (Set_Identifier);"}, {"sha": "9df7c47f1acf1237e3dc4a83348dd50ff682afdb", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd22cd216b0bb01b882467b4682c7b0f6eee7026/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=fd22cd216b0bb01b882467b4682c7b0f6eee7026", "patch": "@@ -476,7 +476,7 @@ begin\n    Write_Line (\"        W    turn off warnings for wrong low bound \" &\n                                                   \"assumption\");\n    Write_Line (\"        .w   turn on warnings on pragma Warnings Off\");\n-   Write_Line (\"        .w*  turn off warnings on pragma Warnings Off\");\n+   Write_Line (\"        .W*  turn off warnings on pragma Warnings Off\");\n    Write_Line (\"        x*   turn on warnings for export/import\");\n    Write_Line (\"        X    turn off warnings for export/import\");\n    Write_Line (\"        .x   turn on warnings for non-local exception\");"}]}