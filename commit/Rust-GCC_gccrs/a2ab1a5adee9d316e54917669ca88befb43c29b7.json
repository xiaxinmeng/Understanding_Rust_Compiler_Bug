{"sha": "a2ab1a5adee9d316e54917669ca88befb43c29b7", "node_id": "C_kwDOANBUbNoAKGEyYWIxYTVhZGVlOWQzMTZlNTQ5MTc2NjljYTg4YmVmYjQzYzI5Yjc", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-09T16:55:52Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-11-10T06:46:59Z"}, "message": "Include PHI threading restrictions in backthreader diagnostics.\n\nI forgot to include the path dump when failing a path in resolve_phi.\nTo do so I abstracted dump_path into its own function, which made me\nrealize we had another copy with slightly different output.\n\nI've merged everything and cleaned it up.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c\n\t(back_threader::maybe_register_path_dump): Abstract path dumping...\n\t(dump_path): ...here.\n\t(back_threader::resolve_phi): Call dump_path.\n\t(debug): Same.", "tree": {"sha": "8310d8aaf28f45f02c183deaa10b748a09fe49ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8310d8aaf28f45f02c183deaa10b748a09fe49ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2ab1a5adee9d316e54917669ca88befb43c29b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ab1a5adee9d316e54917669ca88befb43c29b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2ab1a5adee9d316e54917669ca88befb43c29b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2ab1a5adee9d316e54917669ca88befb43c29b7/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e3179b7a33a62f36a143f9168ba2f777e37864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60e3179b7a33a62f36a143f9168ba2f777e37864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60e3179b7a33a62f36a143f9168ba2f777e37864"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "0f7b4a732ebdb12925bcb7447f14dd8dcc3edcb4", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 22, "deletions": 25, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2ab1a5adee9d316e54917669ca88befb43c29b7/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2ab1a5adee9d316e54917669ca88befb43c29b7/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=a2ab1a5adee9d316e54917669ca88befb43c29b7", "patch": "@@ -187,6 +187,18 @@ back_threader::debug_counter ()\n   return true;\n }\n \n+static void\n+dump_path (FILE *dump_file, const vec<basic_block> &path)\n+{\n+  for (unsigned i = path.length (); i > 0; --i)\n+    {\n+      basic_block bb = path[i - 1];\n+      fprintf (dump_file, \"%d\", bb->index);\n+      if (i > 1)\n+\tfprintf (dump_file, \"->\");\n+    }\n+}\n+\n // Dump details of an attempt to register a path.\n \n void\n@@ -196,14 +208,7 @@ back_threader::maybe_register_path_dump (edge taken)\n     return;\n \n   fprintf (dump_file, \"path: \");\n-\n-  for (unsigned i = m_path.length (); i > 0; --i)\n-    {\n-      basic_block bb = m_path[i - 1];\n-      fprintf (dump_file, \"%d\", bb->index);\n-      if (i > 1)\n-\tfprintf (dump_file, \"->\");\n-    }\n+  dump_path (dump_file, m_path);\n   fprintf (dump_file, \"->\");\n \n   if (taken == UNREACHABLE_EDGE)\n@@ -368,9 +373,14 @@ back_threader::resolve_phi (gphi *phi, bitmap interesting)\n       if (!profitable_p)\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n-\t    fprintf (dump_file,\n-\t\t     \"  FAIL: path through PHI in bb%d (incoming bb:%d) crosses loop\\n\",\n-\t\t     e->dest->index, e->src->index);\n+\t    {\n+\t      fprintf (dump_file,\n+\t\t       \"  FAIL: path through PHI in bb%d (incoming bb:%d) crosses loop\\n\",\n+\t\t       e->dest->index, e->src->index);\n+\t      fprintf (dump_file, \"path: %d->\", e->src->index);\n+\t      dump_path (dump_file, m_path);\n+\t      fprintf (dump_file, \"->xx REJECTED\\n\");\n+\t    }\n \t  continue;\n \t}\n \n@@ -558,24 +568,11 @@ back_threader::maybe_thread_block (basic_block bb)\n   find_paths (bb, name);\n }\n \n-// Dump a sequence of BBs through the CFG.\n-\n-DEBUG_FUNCTION void\n-dump_path (FILE *dump_file, const vec<basic_block> &path)\n-{\n-  for (size_t i = 0; i < path.length (); ++i)\n-    {\n-      fprintf (dump_file, \"BB%d\", path[i]->index);\n-      if (i + 1 < path.length ())\n-\tfprintf (dump_file, \" <- \");\n-    }\n-  fprintf (dump_file, \"\\n\");\n-}\n-\n DEBUG_FUNCTION void\n debug (const vec <basic_block> &path)\n {\n   dump_path (stderr, path);\n+  fputc ('\\n', stderr);\n }\n \n void"}]}