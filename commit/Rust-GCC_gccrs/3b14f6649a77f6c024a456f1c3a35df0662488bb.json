{"sha": "3b14f6649a77f6c024a456f1c3a35df0662488bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxNGY2NjQ5YTc3ZjZjMDI0YTQ1NmYxYzNhMzVkZjA2NjI0ODhiYg==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-28T20:13:20Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2005-10-28T20:13:20Z"}, "message": "acinclude.m4 (LIBGFOR_CHECK_FPSETMASK): New check.\n\n\t* acinclude.m4 (LIBGFOR_CHECK_FPSETMASK): New check.\n\t* configure.ac: Check for floatingpoint.h, fptrap.h and float.h\n\theaders. Use LIBGFOR_CHECK_FPSETMASK. Check for fp_trap and\n\tfp_enable functions.\n\t* configure.host: Add case for systems with fpsetmask and systems\n\twith fp_trap/fp_enable.\n\t* config/fpu-sysv.h: New file, FPU code using fpsetmask.\n\t* config/fpu-aix.h: New file, FPU code for AIX using fp_trap and\n\tfp_enable.\n\t* aclocal.m4: Regenerate.\n\t* configure: Regenerate.\n\t* config.h.in: Regenerate.\n\nFrom-SVN: r105956", "tree": {"sha": "63c0066d3282fbbc40206a8f80b8a22b789be2f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63c0066d3282fbbc40206a8f80b8a22b789be2f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b14f6649a77f6c024a456f1c3a35df0662488bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14f6649a77f6c024a456f1c3a35df0662488bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b14f6649a77f6c024a456f1c3a35df0662488bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b14f6649a77f6c024a456f1c3a35df0662488bb/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b46f94ffa7a8c7e3ddc95980359c75858d09f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b46f94ffa7a8c7e3ddc95980359c75858d09f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b46f94ffa7a8c7e3ddc95980359c75858d09f9c"}], "stats": {"total": 725, "additions": 706, "deletions": 19}, "files": [{"sha": "6d47929b4603b2fc02476403f8e0823c283d960b", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -1,21 +1,36 @@\n+2005-10-20  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n+\n+\t* acinclude.m4 (LIBGFOR_CHECK_FPSETMASK): New check.\n+\t* configure.ac: Check for floatingpoint.h, fptrap.h and float.h\n+\theaders. Use LIBGFOR_CHECK_FPSETMASK. Check for fp_trap and\n+\tfp_enable functions.\n+\t* configure.host: Add case for systems with fpsetmask and systems\n+\twith fp_trap/fp_enable.\n+\t* config/fpu-sysv.h: New file, FPU code using fpsetmask.\n+\t* config/fpu-aix.h: New file, FPU code for AIX using fp_trap and\n+\tfp_enable.\n+\t* aclocal.m4: Regenerate.\n+\t* configure: Regenerate.\n+\t* config.h.in: Regenerate.\n+\n 2005-10-24  Jerry DeLisle  <jvdelisle@verizon.net>\n \n-        PR libgfortran/24224\n-        * libgfortran.h: Remove array stride error code.\n-        * runtime/error.c: Remove array stride error.\n-        * io/io.h: Change name of 'nml_loop_spec' to 'array_loop_spec' to be\n-        generic.  Add pointer to array_loop_spec and rank to gfc_unit\n-        structure.\n-        * io/list_read.c: Revise nml_loop_spec references to array_loop_spec.\n-        * io/transfer.c (init_loop_spec): New function to initialize\n-        an array_loop_spec.\n-        (next_array_record): New function to return the index to the next array\n-        record by incrementing through the array_loop_spec. \n-        (next_record_r): Use new function.\n-        (next_record_w): Use new function.\n-        (finalize_transfer): Free memory allocated for array_loop_spec.\n-        * io/unit.c (get_array_unit_len): Delete this function. Use new\n-        function init_loop_spec to initialize the array_loop_spec.  \n+\tPR libgfortran/24224\n+\t* libgfortran.h: Remove array stride error code.\n+\t* runtime/error.c: Remove array stride error.\n+\t* io/io.h: Change name of 'nml_loop_spec' to 'array_loop_spec' to be\n+\tgeneric.  Add pointer to array_loop_spec and rank to gfc_unit\n+\tstructure.\n+\t* io/list_read.c: Revise nml_loop_spec references to array_loop_spec.\n+\t* io/transfer.c (init_loop_spec): New function to initialize\n+\tan array_loop_spec.\n+\t(next_array_record): New function to return the index to the next array\n+\trecord by incrementing through the array_loop_spec. \n+\t(next_record_r): Use new function.\n+\t(next_record_w): Use new function.\n+\t(finalize_transfer): Free memory allocated for array_loop_spec.\n+\t* io/unit.c (get_array_unit_len): Delete this function. Use new\n+\tfunction init_loop_spec to initialize the array_loop_spec.  \n \n 2005-10-24  Paul Thomas  <pault@gcc.gnu.org>\n "}, {"sha": "857733a2e356aa4979bdd12519042d8a20f420f6", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -384,3 +384,20 @@ esac])])\n if test x\"$have_working_stat\" = xyes; then\n   AC_DEFINE(HAVE_WORKING_STAT, 1, [Define if target has a reliable stat.])\n fi])\n+\n+dnl Checks for fpsetmask function.\n+AC_DEFUN([LIBGFOR_CHECK_FPSETMASK], [\n+  AC_CACHE_CHECK([whether fpsetmask is present], have_fpsetmask, [\n+    AC_TRY_LINK([\n+#if HAVE_FLOATINGPOINT_H\n+# include <floatingpoint.h>\n+#endif /* HAVE_FLOATINGPOINT_H */\n+#if HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif /* HAVE_IEEEFP_H */],[fpsetmask(0);],\n+    eval \"have_fpsetmask=yes\", eval \"have_fpsetmask=no\")\n+  ])\n+  if test x\"$have_fpsetmask\" = xyes; then\n+    AC_DEFINE(HAVE_FPSETMASK, 1, [Define if you have fpsetmask.])\n+  fi\n+])"}, {"sha": "13fc81fdb32139471f2191e0d637a403f6ddf217", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -294,6 +294,12 @@\n /* libm includes finite */\n #undef HAVE_FINITE\n \n+/* Define to 1 if you have the <floatingpoint.h> header file. */\n+#undef HAVE_FLOATINGPOINT_H\n+\n+/* Define to 1 if you have the <float.h> header file. */\n+#undef HAVE_FLOAT_H\n+\n /* libm includes floor */\n #undef HAVE_FLOOR\n \n@@ -303,6 +309,18 @@\n /* libm includes floorl */\n #undef HAVE_FLOORL\n \n+/* Define if you have fpsetmask. */\n+#undef HAVE_FPSETMASK\n+\n+/* Define to 1 if you have the <fptrap.h> header file. */\n+#undef HAVE_FPTRAP_H\n+\n+/* fp_enable is present */\n+#undef HAVE_FP_ENABLE\n+\n+/* fp_trap is present */\n+#undef HAVE_FP_TRAP\n+\n /* libm includes frexp */\n #undef HAVE_FREXP\n "}, {"sha": "f2fa0a587b78fbfe8bbeb4b570b351cbf7b9d64d", "filename": "libgfortran/config/fpu-aix.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig%2Ffpu-aix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig%2Ffpu-aix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-aix.h?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -0,0 +1,92 @@\n+/* AIX FPU-related code.\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+/* FPU-related code for AIX.  */\n+#ifdef HAVE_FPTRAP_H\n+#include <fptrap.h>\n+#endif\n+\n+#ifdef HAVE_FLOAT_H\n+#include <float.h>\n+#endif\n+\n+void\n+set_fpu (void)\n+{\n+  fptrap_t mode = 0;\n+\n+  if (options.fpe & GFC_FPE_INVALID)\n+#ifdef TRP_INVALID\n+    mode |= TRP_INVALID;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_DENORMAL)\n+    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t       \"exception not supported.\\n\");\n+\n+  if (options.fpe & GFC_FPE_ZERO)\n+#ifdef TRP_DIV_BY_ZERO\n+    mode |= TRP_DIV_BY_ZERO;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_OVERFLOW)\n+#ifdef TRP_OVERFLOW\n+    mode |= TRP_OVERFLOW;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_UNDERFLOW)\n+#ifdef TRP_UNDERFLOW\n+    mode |= TRP_UNDERFLOW;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_PRECISION)\n+#ifdef TRP_UNDERFLOW\n+    mode |= TRP_UNDERFLOW;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  fp_trap(FP_TRAP_SYNC);\n+  fp_enable(mode);\n+}"}, {"sha": "c2f28c4d17ba956002d60a1bdfa0b2dbbf9eee08", "filename": "libgfortran/config/fpu-sysv.h", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig%2Ffpu-sysv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfig%2Ffpu-sysv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig%2Ffpu-sysv.h?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -0,0 +1,91 @@\n+/* SysV FPU-related code (for systems not otherwise supported).\n+   Copyright 2005 Free Software Foundation, Inc.\n+   Contributed by Francois-Xavier Coudert <coudert@clipper.ens.fr>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+\n+/* FPU-related code for SysV platforms with fpsetmask().  */\n+#ifdef HAVE_IEEEFP_H\n+#include <ieeefp.h>\n+#endif\n+\n+void\n+set_fpu (void)\n+{\n+  int cw = 0;\n+\n+  if (options.fpe & GFC_FPE_INVALID)\n+#ifdef FP_X_INV\n+    cw |= FP_X_INV;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'invalid operation' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_DENORMAL)\n+#ifdef FP_X_DNML\n+    cw |= FP_X_DNML;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'denormal number' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_ZERO)\n+#ifdef FP_X_DZ\n+    cw |= FP_X_DZ;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'division by zero' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_OVERFLOW)\n+#ifdef FP_X_OFL\n+    cw |= FP_X_OFL;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'overflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_UNDERFLOW)\n+#ifdef FP_X_UFL\n+    cw |= FP_X_UFL;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'underflow' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  if (options.fpe & GFC_FPE_PRECISION)\n+#ifdef FP_X_IMP\n+    cw |= FP_X_IMP;\n+#else\n+    st_printf (\"Fortran runtime warning: IEEE 'loss of precision' \"\n+\t       \"exception not supported.\\n\");\n+#endif\n+\n+  fpsetmask(cw);\n+}"}, {"sha": "fd7ee1ffa75ab8e2fb269660fc0ea4cf68789584", "filename": "libgfortran/configure", "status": "modified", "additions": 439, "deletions": 1, "changes": 440, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -6508,7 +6508,159 @@ done\n \n \n \n-for ac_header in sys/mman.h sys/types.h sys/stat.h ieeefp.h fenv.h\n+for ac_header in sys/mman.h sys/types.h sys/stat.h floatingpoint.h ieeefp.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_c_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_c_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_c_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ------------------------------------------------------ ##\n+## Report this to the GNU Fortran Runtime Library lists.  ##\n+## ------------------------------------------------------ ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+\n+fi\n+\n+done\n+\n+\n+\n+\n+for ac_header in fenv.h fptrap.h float.h\n do\n as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n@@ -19587,6 +19739,292 @@ _ACEOF\n fi\n \n \n+# Check for SysV fpsetmask\n+\n+  echo \"$as_me:$LINENO: checking whether fpsetmask is present\" >&5\n+echo $ECHO_N \"checking whether fpsetmask is present... $ECHO_C\" >&6\n+if test \"${have_fpsetmask+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+#if HAVE_FLOATINGPOINT_H\n+# include <floatingpoint.h>\n+#endif /* HAVE_FLOATINGPOINT_H */\n+#if HAVE_IEEEFP_H\n+# include <ieeefp.h>\n+#endif /* HAVE_IEEEFP_H */\n+int\n+main ()\n+{\n+fpsetmask(0);\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  eval \"have_fpsetmask=yes\"\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+eval \"have_fpsetmask=no\"\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+\n+fi\n+echo \"$as_me:$LINENO: result: $have_fpsetmask\" >&5\n+echo \"${ECHO_T}$have_fpsetmask\" >&6\n+  if test x\"$have_fpsetmask\" = xyes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FPSETMASK 1\n+_ACEOF\n+\n+  fi\n+\n+\n+# Check for AIX fp_trap and fp_enable\n+echo \"$as_me:$LINENO: checking for fp_trap\" >&5\n+echo $ECHO_N \"checking for fp_trap... $ECHO_C\" >&6\n+if test \"${ac_cv_func_fp_trap+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define fp_trap to an innocuous variant, in case <limits.h> declares fp_trap.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define fp_trap innocuous_fp_trap\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char fp_trap (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef fp_trap\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fp_trap ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_fp_trap) || defined (__stub___fp_trap)\n+choke me\n+#else\n+char (*f) () = fp_trap;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != fp_trap;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_func_fp_trap=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_func_fp_trap=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_func_fp_trap\" >&5\n+echo \"${ECHO_T}$ac_cv_func_fp_trap\" >&6\n+if test $ac_cv_func_fp_trap = yes; then\n+  have_fp_trap=yes\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FP_TRAP 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for fp_enable\" >&5\n+echo $ECHO_N \"checking for fp_enable... $ECHO_C\" >&6\n+if test \"${ac_cv_func_fp_enable+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+/* Define fp_enable to an innocuous variant, in case <limits.h> declares fp_enable.\n+   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n+#define fp_enable innocuous_fp_enable\n+\n+/* System header to define __stub macros and hopefully few prototypes,\n+    which can conflict with char fp_enable (); below.\n+    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n+    <limits.h> exists even on freestanding compilers.  */\n+\n+#ifdef __STDC__\n+# include <limits.h>\n+#else\n+# include <assert.h>\n+#endif\n+\n+#undef fp_enable\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char fp_enable ();\n+/* The GNU C library defines this for functions which it implements\n+    to always fail with ENOSYS.  Some functions are actually named\n+    something starting with __ and the normal name is an alias.  */\n+#if defined (__stub_fp_enable) || defined (__stub___fp_enable)\n+choke me\n+#else\n+char (*f) () = fp_enable;\n+#endif\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+int\n+main ()\n+{\n+return f != fp_enable;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_func_fp_enable=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_func_fp_enable=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_func_fp_enable\" >&5\n+echo \"${ECHO_T}$ac_cv_func_fp_enable\" >&6\n+if test $ac_cv_func_fp_enable = yes; then\n+  have_fp_enable=yes\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_FP_ENABLE 1\n+_ACEOF\n+\n+fi\n+\n+\n # Runs configure.host to set up necessary host-dependent shell variables.\n # We then display a message about it, and propagate them through the\n # build chain."}, {"sha": "73b34c0d2d2cf9ad80d5a5b1f101e742f3719047", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -158,7 +158,8 @@ AC_TYPE_OFF_T\n AC_STDC_HEADERS\n AC_HAVE_HEADERS(stdlib.h stdio.h string.h stddef.h math.h unistd.h signal.h)\n AC_CHECK_HEADERS(time.h sys/params.h sys/time.h sys/times.h sys/resource.h)\n-AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h ieeefp.h fenv.h)\n+AC_CHECK_HEADERS(sys/mman.h sys/types.h sys/stat.h floatingpoint.h ieeefp.h)\n+AC_CHECK_HEADERS(fenv.h fptrap.h float.h)\n AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists])])\n \n AC_CHECK_MEMBERS([struct stat.st_blksize])\n@@ -346,6 +347,13 @@ AC_CHECK_LIB([m],[finite],[AC_DEFINE([HAVE_FINITE],[1],[libm includes finite])])\n # Check for GNU libc feenableexcept\n AC_CHECK_LIB([m],[feenableexcept],[have_feenableexcept=yes AC_DEFINE([HAVE_FEENABLEEXCEPT],[1],[libm includes feenableexcept])])\n \n+# Check for SysV fpsetmask\n+LIBGFOR_CHECK_FPSETMASK\n+\n+# Check for AIX fp_trap and fp_enable\n+AC_CHECK_FUNC([fp_trap],[have_fp_trap=yes AC_DEFINE([HAVE_FP_TRAP],[1],[fp_trap is present])])\n+AC_CHECK_FUNC([fp_enable],[have_fp_enable=yes AC_DEFINE([HAVE_FP_ENABLE],[1],[fp_enable is present])])\n+\n # Runs configure.host to set up necessary host-dependent shell variables.\n # We then display a message about it, and propagate them through the\n # build chain."}, {"sha": "73da57172d617d89f5dedb5487f6a38e85bfaaa8", "filename": "libgfortran/configure.host", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b14f6649a77f6c024a456f1c3a35df0662488bb/libgfortran%2Fconfigure.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.host?ref=3b14f6649a77f6c024a456f1c3a35df0662488bb", "patch": "@@ -18,7 +18,7 @@\n \n \n # DEFAULTS\n-fpu_host=fpu-generic\n+fpu_host='fpu-generic'\n \n # HOST-SPECIFIC OVERRIDES\n case \"${host_cpu}\" in\n@@ -30,3 +30,11 @@ esac\n if test \"x${have_feenableexcept}\" = \"xyes\"; then\n   fpu_host='fpu-glibc'\n fi\n+\n+if test \"x${have_fpsetmask}\" = \"xyes\"; then\n+  fpu_host='fpu-sysv'\n+fi\n+\n+if test \"x${have_fp_enable}\" = \"xyes\" && test \"x${have_fp_trap}\" = \"xyes\"; then\n+  fpu_host='fpu-aix'\n+fi"}]}