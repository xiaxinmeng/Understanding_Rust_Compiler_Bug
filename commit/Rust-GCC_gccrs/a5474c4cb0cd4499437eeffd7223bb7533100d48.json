{"sha": "a5474c4cb0cd4499437eeffd7223bb7533100d48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU0NzRjNGNiMGNkNDQ5OTQzN2VlZmZkNzIyM2JiNzUzMzEwMGQ0OA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-11-01T10:38:42Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-11-01T10:38:42Z"}, "message": "[Patch 7/7] Remove *_BY_PIECES_P\n\ngcc/\n\n\t* doc/tm.texi.in (MOVE_BY_PIECES_P): Remove.\n\t(CLEAR_BY_PIECES_P): Likewise.\n\t(SET_BY_PIECES_P): Likewise.\n\t(STORE_BY_PIECES_P): Likewise.\n\t* doc/tm.texi: Regenerate.\n\t* system.h: Poison MOVE_BY_PIECES_P, CLEAR_BY_PIECES_P,\n\tSET_BY_PIECES_P, STORE_BY_PIECES_P.\n\t* expr.c (MOVE_BY_PIECES_P): Remove.\n\t(CLEAR_BY_PIECES_P): Likewise.\n\t(SET_BY_PIECES_P): Likewise.\n\t(STORE_BY_PIECES_P): Likewise.\n\t(can_move_by_pieces): Rewrite in terms of\n\ttargetm.use_by_pieces_infrastructure_p.\n\t(emit_block_move_hints): Likewise.\n\t(can_store_by_pieces): Likewise.\n\t(store_by_pieces): Likewise.\n\t(clear_storage_hints): Likewise.\n\t(emit_push_insn): Likewise.\n\t(expand_constructor): Likewise.\n\nFrom-SVN: r217004", "tree": {"sha": "0edf81860981caef03874539ae606f3bd23b2997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0edf81860981caef03874539ae606f3bd23b2997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5474c4cb0cd4499437eeffd7223bb7533100d48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5474c4cb0cd4499437eeffd7223bb7533100d48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5474c4cb0cd4499437eeffd7223bb7533100d48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5474c4cb0cd4499437eeffd7223bb7533100d48/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3006da6f1f3b24d4274597c30f460e2241fb9e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3006da6f1f3b24d4274597c30f460e2241fb9e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3006da6f1f3b24d4274597c30f460e2241fb9e4"}], "stats": {"total": 180, "additions": 47, "deletions": 133}, "files": [{"sha": "f1641af3ff8a166bb517519f2541220c615606db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5474c4cb0cd4499437eeffd7223bb7533100d48", "patch": "@@ -1,3 +1,25 @@\n+2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* doc/tm.texi.in (MOVE_BY_PIECES_P): Remove.\n+\t(CLEAR_BY_PIECES_P): Likewise.\n+\t(SET_BY_PIECES_P): Likewise.\n+\t(STORE_BY_PIECES_P): Likewise.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h: Poison MOVE_BY_PIECES_P, CLEAR_BY_PIECES_P,\n+\tSET_BY_PIECES_P, STORE_BY_PIECES_P.\n+\t* expr.c (MOVE_BY_PIECES_P): Remove.\n+\t(CLEAR_BY_PIECES_P): Likewise.\n+\t(SET_BY_PIECES_P): Likewise.\n+\t(STORE_BY_PIECES_P): Likewise.\n+\t(can_move_by_pieces): Rewrite in terms of\n+\ttargetm.use_by_pieces_infrastructure_p.\n+\t(emit_block_move_hints): Likewise.\n+\t(can_store_by_pieces): Likewise.\n+\t(store_by_pieces): Likewise.\n+\t(clear_storage_hints): Likewise.\n+\t(emit_push_insn): Likewise.\n+\t(expand_constructor): Likewise.\n+\n 2014-11-01  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.c"}, {"sha": "0d1f1499968efb2de0de367d09c3feff0c65774f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=a5474c4cb0cd4499437eeffd7223bb7533100d48", "patch": "@@ -6123,16 +6123,6 @@ optimized for speed rather than size.\n If you don't define this, a reasonable default is used.\n @end defmac\n \n-@defmac MOVE_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{move_by_pieces} will be used to\n-copy a chunk of memory, or whether some other block move mechanism\n-will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{MOVE_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @deftypefn {Target Hook} bool TARGET_USE_BY_PIECES_INFRASTRUCTURE_P (unsigned int @var{size}, unsigned int @var{alignment}, enum by_pieces_operation @var{op}, bool @var{speed_p})\n GCC will attempt several strategies when asked to copy between\n two areas of memory, or to set, clear or store to memory, for example\n@@ -6184,16 +6174,6 @@ optimized for speed rather than size.\n If you don't define this, a reasonable default is used.\n @end defmac\n \n-@defmac CLEAR_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{clear_by_pieces} will be used\n-to clear a chunk of memory, or whether some other block clear mechanism\n-will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{CLEAR_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @defmac SET_RATIO (@var{speed})\n The threshold of number of scalar move insns, @emph{below} which a sequence\n of insns should be generated to set memory to a constant value, instead of\n@@ -6207,30 +6187,6 @@ optimized for speed rather than size.\n If you don't define this, it defaults to the value of @code{MOVE_RATIO}.\n @end defmac\n \n-@defmac SET_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant value, or whether some\n-other mechanism will be used.  Used by @code{__builtin_memset} when\n-storing values other than constant zero.\n-Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{SET_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n-@defmac STORE_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant string value, or whether some\n-other mechanism will be used.  Used by @code{__builtin_strcpy} when\n-called with a constant source string.\n-Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{MOVE_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @defmac USE_LOAD_POST_INCREMENT (@var{mode})\n A C expression used to determine whether a load postincrement is a good\n thing to use for a given mode.  Defaults to the value of"}, {"sha": "679b3d113b039f05518bf17ae6766e84dd30f548", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=a5474c4cb0cd4499437eeffd7223bb7533100d48", "patch": "@@ -4600,16 +4600,6 @@ optimized for speed rather than size.\n If you don't define this, a reasonable default is used.\n @end defmac\n \n-@defmac MOVE_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{move_by_pieces} will be used to\n-copy a chunk of memory, or whether some other block move mechanism\n-will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{MOVE_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @hook TARGET_USE_BY_PIECES_INFRASTRUCTURE_P\n \n @defmac MOVE_MAX_PIECES\n@@ -4629,16 +4619,6 @@ optimized for speed rather than size.\n If you don't define this, a reasonable default is used.\n @end defmac\n \n-@defmac CLEAR_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{clear_by_pieces} will be used\n-to clear a chunk of memory, or whether some other block clear mechanism\n-will be used.  Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{CLEAR_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @defmac SET_RATIO (@var{speed})\n The threshold of number of scalar move insns, @emph{below} which a sequence\n of insns should be generated to set memory to a constant value, instead of\n@@ -4652,30 +4632,6 @@ optimized for speed rather than size.\n If you don't define this, it defaults to the value of @code{MOVE_RATIO}.\n @end defmac\n \n-@defmac SET_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant value, or whether some\n-other mechanism will be used.  Used by @code{__builtin_memset} when\n-storing values other than constant zero.\n-Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{SET_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n-@defmac STORE_BY_PIECES_P (@var{size}, @var{alignment})\n-A C expression used to determine whether @code{store_by_pieces} will be\n-used to set a chunk of memory to a constant string value, or whether some\n-other mechanism will be used.  Used by @code{__builtin_strcpy} when\n-called with a constant source string.\n-Defaults to 1 if @code{move_by_pieces_ninsns} returns less\n-than @code{MOVE_RATIO}.\n-\n-This macro is deprecated.  New ports should implement\n-@code{TARGET_USE_BY_PIECES_INFRASTRUCTURE_P} instead.\n-@end defmac\n-\n @defmac USE_LOAD_POST_INCREMENT (@var{mode})\n A C expression used to determine whether a load postincrement is a good\n thing to use for a given mode.  Defaults to the value of"}, {"sha": "af42b6168812d7d6af3efbb2167c81a99d24b5cd", "filename": "gcc/expr.c", "status": "modified", "additions": 22, "deletions": 44, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a5474c4cb0cd4499437eeffd7223bb7533100d48", "patch": "@@ -167,37 +167,6 @@ static void do_tablejump (rtx, machine_mode, rtx, rtx, rtx, int);\n static rtx const_vector_from_tree (tree);\n static void write_complex_part (rtx, rtx, bool);\n \n-/* This macro is used to determine whether move_by_pieces should be called\n-   to perform a structure copy.  */\n-#ifndef MOVE_BY_PIECES_P\n-#define MOVE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, MOVE_BY_PIECES, \\\n-\t\t\t\t\t   optimize_insn_for_speed_p ()))\n-#endif\n-\n-/* This macro is used to determine whether clear_by_pieces should be\n-   called to clear storage.  */\n-#ifndef CLEAR_BY_PIECES_P\n-#define CLEAR_BY_PIECES_P(SIZE, ALIGN) \\\n-  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, CLEAR_BY_PIECES, \\\n-\t\t\t\t\t   optimize_insn_for_speed_p ()))\n-#endif\n-\n-/* This macro is used to determine whether store_by_pieces should be\n-   called to \"memset\" storage with byte values other than zero.  */\n-#ifndef SET_BY_PIECES_P\n-#define SET_BY_PIECES_P(SIZE, ALIGN) \\\n-  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, SET_BY_PIECES, \\\n-\t\t\t\t\t   optimize_insn_for_speed_p ()))\n-#endif\n-\n-/* This macro is used to determine whether store_by_pieces should be\n-   called to \"memcpy\" storage when the source is a constant string.  */\n-#ifndef STORE_BY_PIECES_P\n-#define STORE_BY_PIECES_P(SIZE, ALIGN) \\\n-  (targetm.use_by_pieces_infrastructure_p (SIZE, ALIGN, STORE_BY_PIECES, \\\n-\t\t\t\t\t   optimize_insn_for_speed_p ()))\n-#endif\n \f\n /* This is run to set up which modes can be used\n    directly in memory and to initialize the block move optab.  It is run\n@@ -832,10 +801,11 @@ widest_int_mode_for_size (unsigned int size)\n    succeed.  */\n \n int\n-can_move_by_pieces (unsigned HOST_WIDE_INT len ATTRIBUTE_UNUSED,\n-\t\t    unsigned int align ATTRIBUTE_UNUSED)\n+can_move_by_pieces (unsigned HOST_WIDE_INT len,\n+\t\t    unsigned int align)\n {\n-  return MOVE_BY_PIECES_P (len, align);\n+  return targetm.use_by_pieces_infrastructure_p (len, align, MOVE_BY_PIECES,\n+\t\t\t\t\t\t optimize_insn_for_speed_p ());\n }\n \n /* Generate several move instructions to copy LEN bytes from block FROM to\n@@ -1172,7 +1142,7 @@ emit_block_move_hints (rtx x, rtx y, rtx size, enum block_op_methods method,\n       set_mem_size (y, INTVAL (size));\n     }\n \n-  if (CONST_INT_P (size) && MOVE_BY_PIECES_P (INTVAL (size), align))\n+  if (CONST_INT_P (size) && can_move_by_pieces (INTVAL (size), align))\n     move_by_pieces (x, y, INTVAL (size), align, 0);\n   else if (emit_block_move_via_movmem (x, y, size, align,\n \t\t\t\t       expected_align, expected_size,\n@@ -2489,9 +2459,11 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n   if (len == 0)\n     return 1;\n \n-  if (! (memsetp\n-\t ? SET_BY_PIECES_P (len, align)\n-\t : STORE_BY_PIECES_P (len, align)))\n+  if (!targetm.use_by_pieces_infrastructure_p (len, align,\n+\t\t\t\t\t       memsetp\n+\t\t\t\t\t\t ? SET_BY_PIECES\n+\t\t\t\t\t\t : STORE_BY_PIECES,\n+\t\t\t\t\t       optimize_insn_for_speed_p ()))\n     return 0;\n \n   align = alignment_for_piecewise_move (STORE_MAX_PIECES, align);\n@@ -2567,9 +2539,13 @@ store_by_pieces (rtx to, unsigned HOST_WIDE_INT len,\n       return to;\n     }\n \n-  gcc_assert (memsetp\n-\t      ? SET_BY_PIECES_P (len, align)\n-\t      : STORE_BY_PIECES_P (len, align));\n+  gcc_assert (targetm.use_by_pieces_infrastructure_p\n+\t\t(len, align,\n+\t\t memsetp\n+\t\t   ? SET_BY_PIECES\n+\t\t   : STORE_BY_PIECES,\n+\t\t optimize_insn_for_speed_p ()));\n+\n   data.constfun = constfun;\n   data.constfundata = constfundata;\n   data.len = len;\n@@ -2806,7 +2782,9 @@ clear_storage_hints (rtx object, rtx size, enum block_op_methods method,\n   align = MEM_ALIGN (object);\n \n   if (CONST_INT_P (size)\n-      && CLEAR_BY_PIECES_P (INTVAL (size), align))\n+      && targetm.use_by_pieces_infrastructure_p (INTVAL (size), align,\n+\t\t\t\t\t\t CLEAR_BY_PIECES,\n+\t\t\t\t\t\t optimize_insn_for_speed_p ()))\n     clear_by_pieces (object, INTVAL (size), align);\n   else if (set_storage_via_setmem (object, size, const0_rtx, align,\n \t\t\t\t   expected_align, expected_size,\n@@ -4215,7 +4193,7 @@ emit_push_insn (rtx x, machine_mode mode, tree type, rtx size,\n \t  && CONST_INT_P (size)\n \t  && skip == 0\n \t  && MEM_ALIGN (xinner) >= align\n-\t  && (MOVE_BY_PIECES_P ((unsigned) INTVAL (size) - used, align))\n+\t  && can_move_by_pieces ((unsigned) INTVAL (size) - used, align)\n \t  /* Here we avoid the case of a structure whose weak alignment\n \t     forces many pushes of a small amount of data,\n \t     and such small pushes do rounding that causes trouble.  */\n@@ -7836,7 +7814,7 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n \t    && ! (target != 0 && safe_from_p (target, exp, 1)))\n \t\t  || TREE_ADDRESSABLE (exp)\n \t\t  || (tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n-\t\t      && (! MOVE_BY_PIECES_P\n+\t\t      && (! can_move_by_pieces\n \t\t\t\t     (tree_to_uhwi (TYPE_SIZE_UNIT (type)),\n \t\t\t\t      TYPE_ALIGN (type)))\n \t\t      && ! mostly_zeros_p (exp))))"}, {"sha": "74ddfe94a59f7c4180f3815dc27843c08a5e1e9b", "filename": "gcc/system.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5474c4cb0cd4499437eeffd7223bb7533100d48/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=a5474c4cb0cd4499437eeffd7223bb7533100d48", "patch": "@@ -847,7 +847,9 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tHOT_TEXT_SECTION_NAME LEGITIMATE_CONSTANT_P ALWAYS_STRIP_DOTDOT\t\\\n \tOUTPUT_ADDR_CONST_EXTRA SMALL_REGISTER_CLASSES ASM_OUTPUT_IDENT\t\\\n \tASM_BYTE_OP MEMBER_TYPE_FORCES_BLK LIBGCC2_HAS_SF_MODE\t\t\\\n-\tLIBGCC2_HAS_DF_MODE LIBGCC2_HAS_XF_MODE LIBGCC2_HAS_TF_MODE\n+\tLIBGCC2_HAS_DF_MODE LIBGCC2_HAS_XF_MODE LIBGCC2_HAS_TF_MODE\t\\\n+\tCLEAR_BY_PIECES_P MOVE_BY_PIECES_P SET_BY_PIECES_P\t\t\\\n+\tSTORE_BY_PIECES_P\n \n /* Target macros only used for code built for the target, that have\n    moved to libgcc-tm.h or have never been present elsewhere.  */"}]}