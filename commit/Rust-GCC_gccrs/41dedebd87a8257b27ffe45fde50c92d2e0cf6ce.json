{"sha": "41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFkZWRlYmQ4N2E4MjU3YjI3ZmZlNDVmZGU1MGM5MmQyZTBjZjZjZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-31T13:23:36Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-08-31T13:23:36Z"}, "message": "alpha.c (alpha_emit_conditional_move): Update \"cmp\" RTX before signed_comparison_operator check to account for \"code\"...\n\n\t* config/alpha/alpha.c (alpha_emit_conditional_move): Update\n\t\"cmp\" RTX before signed_comparison_operator check to account\n\tfor \"code\" changes.\n\nFrom-SVN: r202127", "tree": {"sha": "523364cee32007d8ef0a4990098f1f5003095f61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/523364cee32007d8ef0a4990098f1f5003095f61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce/comments", "author": null, "committer": null, "parents": [{"sha": "06d65050301eddeb22be71443899ef3cf1b3ed61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d65050301eddeb22be71443899ef3cf1b3ed61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d65050301eddeb22be71443899ef3cf1b3ed61"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "73cf7790ca77325079c01169e303c436b49b0a05", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "patch": "@@ -1,11 +1,16 @@\n+2013-08-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/alpha/alpha.c (alpha_emit_conditional_move): Update\n+\t\"cmp\" RTX before signed_comparison_operator check to account\n+\tfor \"code\" changes.\n+\n 2013-08-30  Jan Hubicka  <jh@suse.cz>\n \n-\t* ipa-prop.c (ipa_set_jf_known_type): Check that we add\n-\tonly records.\n+\t* ipa-prop.c (ipa_set_jf_known_type): Check that we add only records.\n \t(detect_type_change_1): Rename to ...\n \t(detect_type_change): ... this one; early return on non-polymorphic\n \ttypes.\n-\t(detect_type_change_ssa): Add comp_type parameter; update\t\n+\t(detect_type_change_ssa): Add comp_type parameter; update\n \tuse of detect_type_change.\n \t(compute_complex_assign_jump_func): Add param_type parameter;\n \tupdate use of detect_type_change_ssa.\n@@ -111,8 +116,7 @@\n \tinstead of flag_asan.\n \t* tree.h (enum tree_index): Add TI_POINTER_SIZED_TYPE.\n \t(pointer_sized_int_node): Define.\n-\t* tree.c (build_common_tree_nodes): Initialize\n-\tpointer_sized_int_node.\n+\t* tree.c (build_common_tree_nodes): Initialize pointer_sized_int_node.\n \n 2013-08-30  Mike Stump  <mikestump@comcast.net>\n \n@@ -137,9 +141,9 @@\n \n 2013-08-30  Tejas Belagod  <tejas.belagod@arm.com>\n \n-\t* config/aarch64/arm_neon.h (__AARCH64_UINT64_C, __AARCH64_INT64_C): New\n-\tarm_neon.h's internal macros to specify 64-bit constants. Avoid using\n-\tstdint.h's macros.\n+\t* config/aarch64/arm_neon.h (__AARCH64_UINT64_C, __AARCH64_INT64_C):\n+\tNew arm_neon.h's internal macros to specify 64-bit constants.\n+\tAvoid using stdint.h's macros.\n \n 2013-08-30  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n@@ -201,13 +205,11 @@\n \n 2013-08-29  Xinliang David Li  <davidxl@google.com>\n \n-\t* loop-unroll.c (report_unroll_peel): Minor message\n-\tchange.\n+\t* loop-unroll.c (report_unroll_peel): Minor message change.\n \t* tree-vect-loop-manip.c (vect_do_peeling_for_alignment):\n \tEmit alignment peeling message with default -fopt-info.\n \t(vect_loop_versioning): Emit loop version info message.\n-\t* tree-vectorizer.c (vectorize_loops): Minor message\n-\tchange.\n+\t* tree-vectorizer.c (vectorize_loops): Minor message change.\n \t(execute_vect_slp): Ditto.\n \n 2013-08-29  Eric Botcazou  <ebotcazou@adacore.com>\n@@ -222,14 +224,13 @@\n \n 2013-08-29  Jan Hubicka  <jh@suse.cz>\n \n-\t* lto-streamer-out.c (hash_tree): Stream DECL_FINAL_P.\n-\tDECL_CXX_CONSTRUCTOR_P. DECL_CXX_DESTRUCTOR_P.\n-\tTYPE_FINAL_P.\n-\t* lto-streamer-in.c (unpack_ts_decl_with_vis_value_fields):\n-\tDECL_FINAL_P. DECL_CXX_CONSTRUCTOR_P and DECL_CXX_DESTRUCTOR_P.\n+\t* lto-streamer-out.c (hash_tree): Stream DECL_FINAL_P,\n+\tDECL_CXX_CONSTRUCTOR_P, DECL_CXX_DESTRUCTOR_P and TYPE_FINAL_P.\n+\t* lto-streamer-in.c (unpack_ts_decl_with_vis_value_fields): Stream\n+\tDECL_FINAL_P, DECL_CXX_CONSTRUCTOR_P and DECL_CXX_DESTRUCTOR_P.\n \t(unpack_ts_type_common_value_fields): Stream TYPE_FINAL_P.\n \t* tree-streamer-out.c (pack_ts_decl_with_vis_value_fields):\n-\tAdd DECL_FINAL_P, DECL_CXX_CONSTRUCTOR_P, DECL_CXX_DESTRUCTOR_P\n+\tAdd DECL_FINAL_P, DECL_CXX_CONSTRUCTOR_P and DECL_CXX_DESTRUCTOR_P.\n \t(pack_ts_type_common_value_fields): Add TYPE_FINAL_P.\n \n 2013-08-29  Teresa Johnson  <tejohnson@google.com>"}, {"sha": "a8fb92964eb1299ae374c6236c3b8e26c632a665", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41dedebd87a8257b27ffe45fde50c92d2e0cf6ce/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=41dedebd87a8257b27ffe45fde50c92d2e0cf6ce", "patch": "@@ -2659,6 +2659,7 @@ alpha_emit_conditional_move (rtx cmp, enum machine_mode mode)\n       cmp_mode = cmp_mode == DImode ? DFmode : DImode;\n       op0 = gen_lowpart (cmp_mode, tem);\n       op1 = CONST0_RTX (cmp_mode);\n+      cmp = gen_rtx_fmt_ee (code, VOIDmode, op0, op1);\n       local_fast_math = 1;\n     }\n "}]}