{"sha": "79a1fe43fb4ed62b9e66c16efe173180423730ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhMWZlNDNmYjRlZDYyYjllNjZjMTZlZmUxNzMxODA0MjM3MzBlZQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-07-31T16:27:56Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-07-31T16:27:56Z"}, "message": "re PR target/61844 (ICE when building libgcc for sh64 cross-compiler)\n\ngcc/\n\tPR target/61844\n\t* config/sh/sh.c (sh_legitimate_address_p,\n\tsh_legitimize_reload_address): Handle reg+reg address modes when\n\tALLOW_INDEXED_ADDRESS is false.\n\t* config/sh/predicates.md (general_movsrc_operand,\n\tgeneral_movdst_operand): Likewise.\n\nFrom-SVN: r213381", "tree": {"sha": "c91e55166821bbace3d3b2043e0dcae344ccee28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c91e55166821bbace3d3b2043e0dcae344ccee28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79a1fe43fb4ed62b9e66c16efe173180423730ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a1fe43fb4ed62b9e66c16efe173180423730ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a1fe43fb4ed62b9e66c16efe173180423730ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a1fe43fb4ed62b9e66c16efe173180423730ee/comments", "author": null, "committer": null, "parents": [{"sha": "6adaaa1d3f343dcf74de60a98cdb931b97659d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6adaaa1d3f343dcf74de60a98cdb931b97659d69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6adaaa1d3f343dcf74de60a98cdb931b97659d69"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "27ec98ed1634453ba195e073a62d62673f846c96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79a1fe43fb4ed62b9e66c16efe173180423730ee", "patch": "@@ -1,3 +1,12 @@\n+2014-07-31  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/61844\n+\t* config/sh/sh.c (sh_legitimate_address_p,\n+\tsh_legitimize_reload_address): Handle reg+reg address modes when\n+\tALLOW_INDEXED_ADDRESS is false.\n+\t* config/sh/predicates.md (general_movsrc_operand,\n+\tgeneral_movdst_operand): Likewise.\n+\n 2014-07-31  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "9eb0f1a7eaa0e7166ca4c6022e8e06ab3c7ca4da", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=79a1fe43fb4ed62b9e66c16efe173180423730ee", "patch": "@@ -489,6 +489,10 @@\n       rtx mem_rtx = MEM_P (op) ? op : SUBREG_REG (op);\n       rtx x = XEXP (mem_rtx, 0);\n \n+      if (! ALLOW_INDEXED_ADDRESS\n+\t  && GET_CODE (x) == PLUS && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n+\treturn false;\n+\n       if ((mode == QImode || mode == HImode)\n \t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))\n@@ -567,6 +571,10 @@\n       rtx mem_rtx = MEM_P (op) ? op : SUBREG_REG (op);\n       rtx x = XEXP (mem_rtx, 0);\n \n+      if (! ALLOW_INDEXED_ADDRESS\n+\t  && GET_CODE (x) == PLUS && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n+\treturn false;\n+\n       if ((mode == QImode || mode == HImode)\n \t  && GET_CODE (x) == PLUS\n \t  && REG_P (XEXP (x, 0))"}, {"sha": "a19235d241174481f98811a07eaad1fb2a4eacfe", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79a1fe43fb4ed62b9e66c16efe173180423730ee/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=79a1fe43fb4ed62b9e66c16efe173180423730ee", "patch": "@@ -10287,6 +10287,10 @@ sh_legitimate_index_p (enum machine_mode mode, rtx op, bool consider_sh2a,\n static bool\n sh_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n {\n+  if (! ALLOW_INDEXED_ADDRESS\n+      && GET_CODE (x) == PLUS && REG_P (XEXP (x, 0)) && REG_P (XEXP (x, 1)))\n+    return false;\n+\n   if (REG_P (x) && REGNO (x) == GBR_REG)\n     return true;\n \n@@ -10516,6 +10520,28 @@ sh_legitimize_reload_address (rtx *p, enum machine_mode mode, int opnum,\n   enum reload_type type = (enum reload_type) itype;\n   const int mode_sz = GET_MODE_SIZE (mode);\n \n+  if (! ALLOW_INDEXED_ADDRESS\n+      && GET_CODE (*p) == PLUS\n+      && REG_P (XEXP (*p, 0)) && REG_P (XEXP (*p, 1)))\n+    {\n+      *p = copy_rtx (*p);\n+      push_reload (*p, NULL_RTX, p, NULL,\n+\t\t   BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, opnum, type);\n+      return true;\n+    }\n+\n+  if (! ALLOW_INDEXED_ADDRESS\n+      && GET_CODE (*p) == PLUS\n+      && GET_CODE (XEXP (*p, 0)) == PLUS)\n+    {\n+      rtx sum = gen_rtx_PLUS (Pmode, XEXP (XEXP (*p, 0), 0),\n+\t\t\t\t     XEXP (XEXP (*p, 0), 1));\n+      *p = gen_rtx_PLUS (Pmode, sum, XEXP (*p, 1));\n+      push_reload (sum, NULL_RTX, &XEXP (*p, 0), NULL,\n+\t\t   BASE_REG_CLASS, Pmode, VOIDmode, 0, 0, opnum, type);\n+      return true;\n+    }\n+\n   if (TARGET_SHMEDIA)\n     return false;\n "}]}