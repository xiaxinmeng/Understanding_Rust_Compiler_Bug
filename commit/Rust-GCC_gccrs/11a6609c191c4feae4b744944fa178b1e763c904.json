{"sha": "11a6609c191c4feae4b744944fa178b1e763c904", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTFhNjYwOWMxOTFjNGZlYWU0Yjc0NDk0NGZhMTc4YjFlNzYzYzkwNA==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2016-03-15T15:36:44Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2016-03-15T15:36:44Z"}, "message": "re PR target/66660 ([ia64] Speculative load not checked before use, leading to a NaT Consumption Vector interruption)\n\n        PR target/66660\n        * sel-sched-ir.c (merge_expr): Avoid changing the speculative pattern\n        to non-speculative when propagating trap bits.\n\nFrom-SVN: r234218", "tree": {"sha": "95dd1572eea3cd8d92b358b3d6cc0289d71fb12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95dd1572eea3cd8d92b358b3d6cc0289d71fb12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11a6609c191c4feae4b744944fa178b1e763c904", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a6609c191c4feae4b744944fa178b1e763c904", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11a6609c191c4feae4b744944fa178b1e763c904", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11a6609c191c4feae4b744944fa178b1e763c904/comments", "author": null, "committer": null, "parents": [{"sha": "81fa2944ecfd7f4e8855fa51e7017a40c5f27721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81fa2944ecfd7f4e8855fa51e7017a40c5f27721", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81fa2944ecfd7f4e8855fa51e7017a40c5f27721"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "9507853ba42c1bea0e79b7182848ee1ca2df5a12", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11a6609c191c4feae4b744944fa178b1e763c904/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11a6609c191c4feae4b744944fa178b1e763c904/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=11a6609c191c4feae4b744944fa178b1e763c904", "patch": "@@ -1871,12 +1871,16 @@ merge_expr (expr_t to, expr_t from, insn_t split_point)\n   /* Make sure that speculative pattern is propagated into exprs that\n      have non-speculative one.  This will provide us with consistent\n      speculative bits and speculative patterns inside expr.  */\n-  if ((EXPR_SPEC_DONE_DS (from) != 0\n-       && EXPR_SPEC_DONE_DS (to) == 0)\n-      /* Do likewise for volatile insns, so that we always retain\n-\t the may_trap_p bit on the resulting expression.  */\n-      || (VINSN_MAY_TRAP_P (EXPR_VINSN (from))\n-\t  && !VINSN_MAY_TRAP_P (EXPR_VINSN (to))))\n+  if (EXPR_SPEC_DONE_DS (to) == 0\n+      && (EXPR_SPEC_DONE_DS (from) != 0\n+\t  /* Do likewise for volatile insns, so that we always retain\n+\t     the may_trap_p bit on the resulting expression.  However,\n+\t     avoid propagating the trapping bit into the instructions\n+\t     already speculated.  This would result in replacing the\n+\t     speculative pattern with the non-speculative one and breaking\n+\t     the speculation support.  */\n+\t  || (!VINSN_MAY_TRAP_P (EXPR_VINSN (to))\n+\t      && VINSN_MAY_TRAP_P (EXPR_VINSN (from)))))\n     change_vinsn_in_expr (to, EXPR_VINSN (from));\n \n   merge_expr_data (to, from, split_point);"}]}