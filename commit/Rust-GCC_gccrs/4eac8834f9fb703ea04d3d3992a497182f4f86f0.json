{"sha": "4eac8834f9fb703ea04d3d3992a497182f4f86f0", "node_id": "C_kwDOANBUbNoAKDRlYWM4ODM0ZjlmYjcwM2VhMDRkM2QzOTkyYTQ5NzE4MmY0Zjg2ZjA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-10-12T10:41:49Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-04T13:47:31Z"}, "message": "ada: Fix couple of issues with arrays indexed by enumeration type\n\nThe first one is that Remove_Warning_Messages reinstates the Original_Node\nof an N_Raise_Constraint_Error node in the tree for no clear reasons, and\nthe Original_Node may contain constructs whose expansion has been stopped\nwhen the Constraint_Error was asserted, eventually causing gigi to stop.\n\nThe second one is that a path in Build_Array_Aggr_Code.Gen_Loop does not\ncopy the loop bounds, unlike other paths, thus triggering a sharing issue.\n\ngcc/ada/\n\n\t* errout.adb (Remove_Warning_Messages.Check_For_Warning): Do not\n\treinstate the Original_Node in the tree.\n\t* exp_aggr.adb (Build_Array_Aggr_Code.Gen_Loop): Copy the bounds\n\ton all paths.", "tree": {"sha": "4fd65dd0c81f748d4bf6f1f9bfac4c71c81f6fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fd65dd0c81f748d4bf6f1f9bfac4c71c81f6fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4eac8834f9fb703ea04d3d3992a497182f4f86f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eac8834f9fb703ea04d3d3992a497182f4f86f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eac8834f9fb703ea04d3d3992a497182f4f86f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eac8834f9fb703ea04d3d3992a497182f4f86f0/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a27e6a9f9e29adb968e4dfcd1328347b4da1df9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a27e6a9f9e29adb968e4dfcd1328347b4da1df9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a27e6a9f9e29adb968e4dfcd1328347b4da1df9"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "5730a543ee1994198cb2adebd8dfdbe49eb0c80a", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eac8834f9fb703ea04d3d3992a497182f4f86f0/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eac8834f9fb703ea04d3d3992a497182f4f86f0/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=4eac8834f9fb703ea04d3d3992a497182f4f86f0", "patch": "@@ -3383,23 +3383,13 @@ package body Errout is\n             E := Errors.Table (E).Next;\n          end loop;\n \n+         --  Warnings may have been posted on subexpressions of original tree\n+\n          if Nkind (N) = N_Raise_Constraint_Error\n            and then Is_Rewrite_Substitution (N)\n            and then No (Condition (N))\n          then\n-            --  Warnings may have been posted on subexpressions of the original\n-            --  tree. We place the original node back on the tree to remove\n-            --  those warnings, whose sloc do not match those of any node in\n-            --  the current tree. Given that we are in unreachable code, this\n-            --  modification to the tree is harmless.\n-\n-            if Is_List_Member (N) then\n-               Set_Condition (N, Original_Node (N));\n-               Check_All_Warnings (Condition (N));\n-            else\n-               Rewrite (N, Original_Node (N));\n-               Check_All_Warnings (N);\n-            end if;\n+            Check_All_Warnings (Original_Node (N));\n          end if;\n \n          return OK;"}, {"sha": "dde49d1e289aa1f68948e95e3727e8b9f0ea2052", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4eac8834f9fb703ea04d3d3992a497182f4f86f0/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4eac8834f9fb703ea04d3d3992a497182f4f86f0/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=4eac8834f9fb703ea04d3d3992a497182f4f86f0", "patch": "@@ -2058,7 +2058,7 @@ package body Exp_Aggr is\n          --  to do that if we already have the base type at hand.\n \n          if Etype (L) = Index_Base then\n-            L_L := L;\n+            L_L := New_Copy_Tree (L);\n          else\n             L_L :=\n               Make_Qualified_Expression (Loc,\n@@ -2067,7 +2067,7 @@ package body Exp_Aggr is\n          end if;\n \n          if Etype (H) = Index_Base then\n-            L_H := H;\n+            L_H := New_Copy_Tree (H);\n          else\n             L_H :=\n               Make_Qualified_Expression (Loc,"}]}