{"sha": "234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "node_id": "C_kwDOANBUbNoAKDIzNDgxNmFjOWQ5MTk1MDVmMmRkZjJjZGY5ZTgzYTEwZGU3ZTNjZWQ", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-25T12:19:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-25T12:19:15Z"}, "message": "Remove bad assertion when resolving segments\n\nWhen resolving segments in a path generics ones can match types in othe\nimpl blocks which will not be compiled yet so this assertion is bad.\n\nFixes #862", "tree": {"sha": "843628e33934fb547a4be550a8c37a98ea88e6c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/843628e33934fb547a4be550a8c37a98ea88e6c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "html_url": "https://github.com/Rust-GCC/gccrs/commit/234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/234816ac9d919505f2ddf2cdf9e83a10de7e3ced/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de87e620f8714278c273ec91dc6ec22347c188c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3de87e620f8714278c273ec91dc6ec22347c188c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3de87e620f8714278c273ec91dc6ec22347c188c"}], "stats": {"total": 78, "additions": 76, "deletions": 2}, "files": [{"sha": "50d660c7c9ea6077c4843615728f9edd246abf10", "filename": "gcc/rust/typecheck/rust-hir-path-probe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234816ac9d919505f2ddf2cdf9e83a10de7e3ced/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234816ac9d919505f2ddf2cdf9e83a10de7e3ced/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-path-probe.h?ref=234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "patch": "@@ -280,8 +280,8 @@ class PathProbeType : public TypeCheckBase\n     current_impl = impl;\n     HirId impl_ty_id = impl->get_type ()->get_mappings ().get_hirid ();\n     TyTy::BaseType *impl_block_ty = nullptr;\n-    bool ok = context->lookup_type (impl_ty_id, &impl_block_ty);\n-    rust_assert (ok);\n+    if (!context->lookup_type (impl_ty_id, &impl_block_ty))\n+      return;\n \n     if (!receiver->can_eq (impl_block_ty, false))\n       return;"}, {"sha": "c1a4609ba86666b63674734455d0736804567fa9", "filename": "gcc/testsuite/rust/compile/torture/issue-862.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/234816ac9d919505f2ddf2cdf9e83a10de7e3ced/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/234816ac9d919505f2ddf2cdf9e83a10de7e3ced/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-862.rs?ref=234816ac9d919505f2ddf2cdf9e83a10de7e3ced", "patch": "@@ -0,0 +1,74 @@\n+// { dg-additional-options \"-w\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+#[lang = \"deref\"]\n+pub trait Deref {\n+    type Target;\n+\n+    fn deref(&self) -> &Self::Target;\n+}\n+\n+impl<T> Deref for &T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"imm_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+impl<T> Deref for &mut T {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        unsafe {\n+            let a = \"mut_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        *self\n+    }\n+}\n+\n+struct Foo<T>(T);\n+impl<T> Deref for Foo<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        unsafe {\n+            let a = \"foo_deref\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        }\n+\n+        &self.0\n+    }\n+}\n+\n+struct Bar(i32);\n+impl Bar {\n+    fn cake(self) -> i32 {\n+        self.0 + 1\n+    }\n+}\n+\n+pub fn main() {\n+    let foo: Foo<Bar> = Foo(Bar(123));\n+    let bar: Bar = *foo;\n+\n+    let cake_result: i32 = foo.cake();\n+}"}]}