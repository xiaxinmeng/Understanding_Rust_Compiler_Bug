{"sha": "45f388bb44a9025c0b8284b84f1524474cff14b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVmMzg4YmI0NGE5MDI1YzBiODI4NGI4NGYxNTI0NDc0Y2ZmMTRiNQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2006-02-22T00:57:24Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2006-02-22T00:57:24Z"}, "message": "c++config: Simplify debug namespaces.\n\n2006-02-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/c++config: Simplify debug namespaces.\n\t* include/ext/hash_set: Specialize insert_iterator after norm,\n\tdebug containers have been (optionally) declared. Use nested\n\tnamespaces.\t\n\t* include/ext/hash_map: Same.\n\t* include/debug/hash_map.h (insert): Add specialization for value\n\tpointer types.\n\t* include/debug/hash_set.h (insert): Same.\n\t* include/debug/hash_multimap.h: Change __gnu_debug_def to __debug.\n\t* include/debug/set.h: Same.\n\t* include/debug/bitset: Same.\n\t* include/debug/multiset.h: Same.\n\t* include/debug/hash_multiset.h: Same.\n\t* include/debug/vector: Same.\n\t* include/debug/map.h: Same.\n\t* include/debug/deque: Same.\n\t* include/debug/list: Same.\n\t* include/debug/multimap.h. Same.\n\t* include/debug/macros.h: Use __gnu_debug.\n\t* include/debug/debug.h: Same.\n\t* include/debug/formatter.h: Same.\n\t* include/debug/safe_sequence.h: Same.\n\t* include/debug/functions.h: Same.\n\t* include/debug/safe_base.h: Same.\n\t* include/debug/safe_iterator.h: Same.\n\t* include/debug/safe_iterator.tcc: Same.\n\t(_M_invalidate): Adjust compare order.\n\t* include/debug/string: Change std::__gnu_debug to __gnu_debug.\n\t* include/ext/hashtable.h: Formatting fixes.\n\t* include/bits/stl_map.h: Formatting fixes.\t\t\n\t* src/compatibility.cc: Adjust compatibility symbols for old debug\n\tmode model.\t\n\t* src/debug_list.cc: Tweak.\n\t* src/debug.cc: Adjust namespaces.\n\t* docs/html/debug_mode.html: Adjust namespace names.\n\t* testsuite/25_algorithms/heap/heap.cc: Restore _GLIBCXX_DEBUG\n\tmacro guards, as count values differ when in debug mode.\t\n\t* testsuite/23_containers/vector/26412.cc: Move to...\n\t* testsuite/23_containers/vector/26412-1.cc: ... here.\n\t* testsuite/23_containers/vector/26412-2.cc: Add.\n\n\t* include/ext/pb_assoc/detail/standard_policies.hpp\n\t(PB_ASSOC_HASH_NAMESPACE): Remove, use __gnu_cxx::hash_map and\n\tstd::equal_to.\n\n\t* configure.ac (libtool_VERSION): To 6:8:0.\n\t* configure: Regenerate.\n\t* config/abi/pre/gnu.ver: Revert to exporting __gnu_debug symbols.\n\t(GLIBCXX_3.4.8): New.\n\t* testsuite/testsuite_abi.cc: Add GLIBCXX_3.4.8 to known versions.\n\nFrom-SVN: r111356", "tree": {"sha": "321a690d72d32f40ec58913a736d1c827632438b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/321a690d72d32f40ec58913a736d1c827632438b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45f388bb44a9025c0b8284b84f1524474cff14b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f388bb44a9025c0b8284b84f1524474cff14b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45f388bb44a9025c0b8284b84f1524474cff14b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45f388bb44a9025c0b8284b84f1524474cff14b5/comments", "author": null, "committer": null, "parents": [{"sha": "03ba64bb82a8dec984d3ef1f8fedaac55ed20130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03ba64bb82a8dec984d3ef1f8fedaac55ed20130", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03ba64bb82a8dec984d3ef1f8fedaac55ed20130"}], "stats": {"total": 1047, "additions": 523, "deletions": 524}, "files": [{"sha": "c02ac6ff9b637cf897bdb739695d8b514aeb8b83", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,3 +1,56 @@\n+2006-02-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/c++config: Simplify debug namespaces.\n+\t* include/ext/hash_set: Specialize insert_iterator after norm,\n+\tdebug containers have been (optionally) declared. Use nested\n+\tnamespaces.\t\n+\t* include/ext/hash_map: Same.\n+\t* include/debug/hash_map.h (insert): Add specialization for value\n+\tpointer types.\n+\t* include/debug/hash_set.h (insert): Same.\n+\t* include/debug/hash_multimap.h: Change __gnu_debug_def to __debug.\n+\t* include/debug/set.h: Same.\n+\t* include/debug/bitset: Same.\n+\t* include/debug/multiset.h: Same.\n+\t* include/debug/hash_multiset.h: Same.\n+\t* include/debug/vector: Same.\n+\t* include/debug/map.h: Same.\n+\t* include/debug/deque: Same.\n+\t* include/debug/list: Same.\n+\t* include/debug/multimap.h. Same.\n+\t* include/debug/macros.h: Use __gnu_debug.\n+\t* include/debug/debug.h: Same.\n+\t* include/debug/formatter.h: Same.\n+\t* include/debug/safe_sequence.h: Same.\n+\t* include/debug/functions.h: Same.\n+\t* include/debug/safe_base.h: Same.\n+\t* include/debug/safe_iterator.h: Same.\n+\t* include/debug/safe_iterator.tcc: Same.\n+\t(_M_invalidate): Adjust compare order.\n+\t* include/debug/string: Change std::__gnu_debug to __gnu_debug.\n+\t* include/ext/hashtable.h: Formatting fixes.\n+\t* include/bits/stl_map.h: Formatting fixes.\t\t\n+\t* src/compatibility.cc: Adjust compatibility symbols for old debug\n+\tmode model.\t\n+\t* src/debug_list.cc: Tweak.\n+\t* src/debug.cc: Adjust namespaces.\n+\t* docs/html/debug_mode.html: Adjust namespace names.\n+\t* testsuite/25_algorithms/heap/heap.cc: Restore _GLIBCXX_DEBUG\n+\tmacro guards, as count values differ when in debug mode.\t\n+\t* testsuite/23_containers/vector/26412.cc: Move to...\n+\t* testsuite/23_containers/vector/26412-1.cc: ... here.\n+\t* testsuite/23_containers/vector/26412-2.cc: Add.\n+\n+\t* include/ext/pb_assoc/detail/standard_policies.hpp\n+\t(PB_ASSOC_HASH_NAMESPACE): Remove, use __gnu_cxx::hash_map and\n+\tstd::equal_to.\n+\n+\t* configure.ac (libtool_VERSION): To 6:8:0.\n+\t* configure: Regenerate.\n+\t* config/abi/pre/gnu.ver: Revert to exporting __gnu_debug symbols.\n+\t(GLIBCXX_3.4.8): New.\n+\t* testsuite/testsuite_abi.cc: Add GLIBCXX_3.4.8 to known versions.\n+\t\n 2006-02-21  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/hashtable: Trivial formatting fixes."}, {"sha": "76ddf1c960d6ce601e76f3609a3692a13431494f", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 18, "deletions": 39, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -119,7 +119,10 @@ GLIBCXX_3.4 {\n       std::__num_base::_S_atoms_out;\n       std::__moneypunct_cache*;\n       std::__numpunct_cache*;\n-      std::__timepunct_cache*\n+      std::__timepunct_cache*;\n+      __gnu_debug::_Safe_iterator_base*;\n+      __gnu_debug::_Safe_sequence_base*;\n+      __gnu_debug::_Error_formatter*\n     };\n \n     # Names not in an 'extern' block are mangled names.\n@@ -378,26 +381,12 @@ GLIBCXX_3.4 {\n     _ZN9__gnu_cxx12__atomic_add*;\n     _ZN9__gnu_cxx18__exchange_and_add*;\n \n-    # __gnu_debug\n-    _ZN10__gnu_norm15_List_node_base4hookEPS0_;\n-    _ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n+    # debug mode\n+    _ZN10__gnu_norm15_List_node_base4hook*;\n+    _ZN10__gnu_norm15_List_node_base4swap*;\n     _ZN10__gnu_norm15_List_node_base6unhookEv;\n     _ZN10__gnu_norm15_List_node_base7reverseEv;\n-    _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n-    _ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-    _ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-    _ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-    _ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-    _ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-    _ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n-    _ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n-    _ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n-    _ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n-    _ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n-    _ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n-    _ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n+    _ZN10__gnu_norm15_List_node_base8transfer*;\n \n     # operator new(size_t)\n     _Znw[jm];\n@@ -648,34 +637,24 @@ GLIBCXX_3.4.7 {\n \n     _ZNSt6locale5_Impl16_M_install_cacheEPKNS_5facetE[jm];\n \n-    _ZNSt10__gnu_norm15_List_node_base4hookEPS0_;\n-    _ZNSt10__gnu_norm15_List_node_base4swapERS0_S1_;\n-    _ZNSt10__gnu_norm15_List_node_base6unhookEv;\n-    _ZNSt10__gnu_norm15_List_node_base7reverseEv;\n-    _ZNSt10__gnu_norm15_List_node_base8transferEPS0_S1_;\n-    _ZNKSt11__gnu_debug16_Error_formatter8_M_errorEv;\n-    _ZNKSt11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n-    _ZNKSt11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n-    _ZNKSt11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n-    _ZNKSt11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n-    _ZNKSt11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n-    _ZNKSt11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-    _ZNKSt11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-    _ZNSt11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-    _ZNSt11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-    _ZNSt11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-    _ZNSt11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-    _ZNSt11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-    _ZNSt11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n+} GLIBCXX_3.4.6;\n+\n+GLIBCXX_3.4.8 {\n+\n+    _ZNSt6__norm15_List_node_base4hook*;\n+    _ZNSt6__norm15_List_node_base4swap*;\n+    _ZNSt6__norm15_List_node_base6unhookEv;\n+    _ZNSt6__norm15_List_node_base7reverseEv;\n+    _ZNSt6__norm15_List_node_base8transfer*;\n \n     _ZNSo9_M_insertI[^g]*;\n     _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertI[^g]*;\n     _ZNSi10_M_extractI[^g]*;\n     _ZNSt13basic_istreamIwSt11char_traitsIwEE10_M_extractI[^g]*;\n \n     _ZSt21__copy_streambufs_eofI[cw]St11char_traitsI[cw]EEiPSt15basic_streambuf*;\n+} GLIBCXX_3.4.7;\n \n-} GLIBCXX_3.4.6;\n \n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {"}, {"sha": "e02b4ad52624382a353397ae7f2e324994235079", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1378,7 +1378,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:7:0\n+libtool_VERSION=6:8:0\n \n \n # Find the rest of the source tree framework."}, {"sha": "4782887cf68f3d74e1e997b63bebee3b45a1f278", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -12,7 +12,7 @@ AC_CONFIG_HEADER(config.h)\n ### am handles this now?  ORIGINAL_LD_FOR_MULTILIBS=$LD\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=6:7:0\n+libtool_VERSION=6:8:0\n AC_SUBST(libtool_VERSION)\n \n # Find the rest of the source tree framework."}, {"sha": "44d471ff8c3b5f6122bb3e0c4ecf68e862069097", "filename": "libstdc++-v3/docs/html/debug_mode.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fdebug_mode.html?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -348,19 +348,19 @@ <h4><a name=\"compile_coexistence\">Compile-time coexistence of release- and\n </pre>\n   \n <p>In debug mode we include the release-mode container (which is now\n-defined in in the namespace <code>__gnu_norm</code>) and also the\n+defined in in the namespace <code>__norm</code>) and also the\n debug-mode container. The debug-mode container is defined within the\n-namespace <code>__gnu_debug</code>, which is associated with namespace\n-<code>std</code> via a \"strong using\" directive.  This method allows\n-the debug- and release-mode versions of the same component to coexist\n-at compile-time and link-time without causing an unreasonable\n+namespace <code>__debug</code>, which is associated with namespace\n+<code>std</code> via the GNU namespace association extension.  This\n+method allows the debug and release versions of the same component to\n+coexist at compile-time and link-time without causing an unreasonable\n maintenance burden, while minimizing confusion. Again, this boils down\n to C++ code as follows:</p>\n \n <pre>\n namespace std\n {\n-  namespace __gnu_norm\n+  namespace __norm\n   {\n     template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n       class list\n@@ -369,18 +369,18 @@ <h4><a name=\"compile_coexistence\">Compile-time coexistence of release- and\n       };\n   } // namespace __gnu_norm\n \n-  namespace __gnu_debug\n+  namespace __debug\n   {\n     template&lt;typename _Tp, typename _Alloc = allocator&lt;_Tp&gt; &gt;\n       class list\n-      : public __gnu_norm::list&lt;_Tp, _Alloc&gt;,\n+      : public __norm::list&lt;_Tp, _Alloc&gt;,\n         public __gnu_debug::_Safe_sequence&lt;list&lt;_Tp, _Alloc&gt; &gt;\n       {\n         // ...\n       };\n-  } // namespace __gnu_norm\n+  } // namespace __norm\n \n-  using namespace __gnu_debug __attribute__ ((strong));\n+  using namespace __debug __attribute__ ((strong));\n }\n </pre>\n "}, {"sha": "822eb04da24640f724a4055f779e098f60c033ec", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -40,14 +40,14 @@\n // The current version of the C++ library in compressed ISO date format.\n #define __GLIBCXX__ \n \n-// Macros for various namespace association schemes and modes.\n+// Macros for controlling various namespace association schemes and modes.\n #ifdef _GLIBCXX_DEBUG\n # define _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG 1\n #endif\n \n #define _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION \n \n-// Macros for namespaces.\n+// Macros for namespace scope.\n // _GLIBCXX_BEGIN_NAMESPACE\n // _GLIBCXX_END_NAMESPACE\n // _GLIBCXX_BEGIN_NESTED_NAMESPACE\n@@ -84,12 +84,6 @@ namespace __gnu_cxx\n   using namespace _6 __attribute__ ((strong));\n }\n \n-namespace __gnu_ext\n-{ \n-  namespace _6 { }\n-  using namespace _6 __attribute__ ((strong));\n-}\n-\n namespace std\n {\n   namespace tr1 \n@@ -104,28 +98,31 @@ namespace std\n #if _GLIBCXX_NAMESPACE_ASSOCIATION_DEBUG\n namespace std\n { \n-  namespace __gnu_norm { }\n+  namespace __norm { }\n+  namespace __debug { }\n+  using namespace __debug __attribute__ ((strong)); \n+}\n \n-#if 1\n-  namespace __gnu_debug_def { }\n-  namespace __gnu_debug { using namespace __gnu_debug_def; } \n-  using namespace __gnu_debug_def __attribute__ ((strong));\n-#else\n-  namespace __gnu_debug { namespace detail { } }\n-  using namespace __gnu_debug __attribute__ ((strong));\n-#endif\n+namespace __gnu_cxx\n+{\n+  namespace __norm { }\n+  namespace __debug { }\n+  using namespace __debug __attribute__ ((strong)); \n }\n \n-# define _GLIBCXX_STD __gnu_norm\n+# define _GLIBCXX_STD __norm\n+# define _GLIBCXX_EXT __norm\n # define _GLIBCXX_EXTERN_TEMPLATE 0\n # if __NO_INLINE__ && !__GXX_WEAK__\n #  warning debug mode without inlining may fail due to lack of weak symbols\n # endif\n #else\n #if _GLIBCXX_NAMESPACE_ASSOCIATION_VERSION\n # define _GLIBCXX_STD _6\n+# define _GLIBCXX_EXT _6\n #else\n # define _GLIBCXX_STD std\n+# define _GLIBCXX_EXT __gnu_cxx\n #endif\n #endif\n \n@@ -148,6 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n #endif\n _GLIBCXX_END_NAMESPACE\n \n+\n // Allow use of \"export template.\" This is currently not a feature\n // that g++ supports.\n // #define _GLIBCXX_EXPORT_TEMPLATE 1"}, {"sha": "6dc53e94bf250bff890bc16f4a290971adb940f0", "filename": "libstdc++-v3/include/bits/stl_map.h", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_map.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -205,9 +205,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t: _M_t(__comp, __a)\n         { _M_t._M_insert_unique(__first, __last); }\n \n-      // FIXME There is no dtor declared, but we should have something generated\n-      // by Doxygen.  I don't know what tags to add to this paragraph to make\n-      // that happen:\n+      // FIXME There is no dtor declared, but we should have something\n+      // generated by Doxygen.  I don't know what tags to add to this\n+      // paragraph to make that happen:\n       /**\n        *  The dtor only erases the elements, and note that if the elements\n        *  themselves are pointers, the pointed-to memory is not touched in any\n@@ -253,8 +253,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       { return _M_t.begin(); }\n \n       /**\n-       *  Returns a read/write iterator that points one past the last pair in\n-       *  the %map.  Iteration is done in ascending order according to the keys.\n+       *  Returns a read/write iterator that points one past the last\n+       *  pair in the %map.  Iteration is done in ascending order\n+       *  according to the keys.\n        */\n       iterator\n       end()\n@@ -329,10 +330,10 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  @param  k  The key for which data should be retrieved.\n        *  @return  A reference to the data of the (key,data) %pair.\n        *\n-       *  Allows for easy lookup with the subscript ( @c [] ) operator.  Returns\n-       *  data associated with the key specified in subscript.  If the key does\n-       *  not exist, a pair with that key is created using default values, which\n-       *  is then returned.\n+       *  Allows for easy lookup with the subscript ( @c [] )\n+       *  operator.  Returns data associated with the key specified in\n+       *  subscript.  If the key does not exist, a pair with that key\n+       *  is created using default values, which is then returned.\n        *\n        *  Lookup requires logarithmic time.\n        */\n@@ -379,11 +380,13 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       // modifiers\n       /**\n        *  @brief Attempts to insert a std::pair into the %map.\n-       *  @param  x  Pair to be inserted (see std::make_pair for easy creation of\n-       *             pairs).\n-       *  @return  A pair, of which the first element is an iterator that points\n-       *           to the possibly inserted pair, and the second is a bool that\n-       *           is true if the pair was actually inserted.\n+\n+       *  @param  x  Pair to be inserted (see std::make_pair for easy creation \n+       *\t     of pairs).\n+\n+       *  @return  A pair, of which the first element is an iterator that \n+       *           points to the possibly inserted pair, and the second is \n+       *           a bool that is true if the pair was actually inserted.\n        *\n        *  This function attempts to insert a (key, value) %pair into the %map.\n        *  A %map relies on unique keys and thus a %pair is only inserted if its\n@@ -399,18 +402,21 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  @brief Attempts to insert a std::pair into the %map.\n        *  @param  position  An iterator that serves as a hint as to where the\n        *                    pair should be inserted.\n-       *  @param  x  Pair to be inserted (see std::make_pair for easy creation of\n-       *             pairs).\n+       *  @param  x  Pair to be inserted (see std::make_pair for easy creation\n+       *             of pairs).\n        *  @return  An iterator that points to the element with key of @a x (may\n        *           or may not be the %pair passed in).\n        *\n-       *  This function is not concerned about whether the insertion took place,\n-       *  and thus does not return a boolean like the single-argument\n-       *  insert() does.  Note that the first parameter is only a hint and can\n-       *  potentially improve the performance of the insertion process.  A bad\n-       *  hint would cause no gains in efficiency.\n+\n+       *  This function is not concerned about whether the insertion\n+       *  took place, and thus does not return a boolean like the\n+       *  single-argument insert() does.  Note that the first\n+       *  parameter is only a hint and can potentially improve the\n+       *  performance of the insertion process.  A bad hint would\n+       *  cause no gains in efficiency.\n        *\n-       *  See http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n+       *  See\n+       *  http://gcc.gnu.org/onlinedocs/libstdc++/23_containers/howto.html#4\n        *  for more on \"hinting\".\n        *\n        *  Insertion requires logarithmic time (if the hint is not taken).\n@@ -420,7 +426,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n       { return _M_t._M_insert_unique(position, __x); }\n \n       /**\n-       *  @brief A template function that attemps to insert a range of elements.\n+       *  @brief Template function that attemps to insert a range of elements.\n        *  @param  first  Iterator pointing to the start of the range to be\n        *                 inserted.\n        *  @param  last  Iterator pointing to the end of the range.\n@@ -436,10 +442,11 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  @brief Erases an element from a %map.\n        *  @param  position  An iterator pointing to the element to be erased.\n        *\n-       *  This function erases an element, pointed to by the given iterator,\n-       *  from a %map.  Note that this function only erases the element, and\n-       *  that if the element is itself a pointer, the pointed-to memory is not\n-       *  touched in any way.  Managing the pointer is the user's responsibilty.\n+       *  This function erases an element, pointed to by the given\n+       *  iterator, from a %map.  Note that this function only erases\n+       *  the element, and that if the element is itself a pointer,\n+       *  the pointed-to memory is not touched in any way.  Managing\n+       *  the pointer is the user's responsibilty.\n        */\n       void\n       erase(iterator __position)\n@@ -479,22 +486,22 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n        *  @brief  Swaps data with another %map.\n        *  @param  x  A %map of the same element and allocator types.\n        *\n-       *  This exchanges the elements between two maps in constant time.\n-       *  (It is only swapping a pointer, an integer, and an instance of\n-       *  the @c Compare type (which itself is often stateless and empty), so it\n-       *  should be quite fast.)\n-       *  Note that the global std::swap() function is specialized such that\n-       *  std::swap(m1,m2) will feed to this function.\n+       *  This exchanges the elements between two maps in constant\n+       *  time.  (It is only swapping a pointer, an integer, and an\n+       *  instance of the @c Compare type (which itself is often\n+       *  stateless and empty), so it should be quite fast.)  Note\n+       *  that the global std::swap() function is specialized such\n+       *  that std::swap(m1,m2) will feed to this function.\n        */\n       void\n       swap(map& __x)\n       { _M_t.swap(__x._M_t); }\n \n       /**\n-       *  Erases all elements in a %map.  Note that this function only erases\n-       *  the elements, and that if the elements themselves are pointers, the\n-       *  pointed-to memory is not touched in any way.  Managing the pointer is\n-       *  the user's responsibilty.\n+       *  Erases all elements in a %map.  Note that this function only\n+       *  erases the elements, and that if the elements themselves are\n+       *  pointers, the pointed-to memory is not touched in any way.\n+       *  Managing the pointer is the user's responsibilty.\n        */\n       void\n       clear()"}, {"sha": "598345b6f90a951f0a11d47f88c57f22d887e268", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<size_t _Nb>\n     class bitset\n@@ -318,7 +318,7 @@ namespace __gnu_debug_def\n     operator<<(std::basic_ostream<_CharT, _Traits>& __os,\n \t       const bitset<_Nb>& __x)\n     { return __os << __x._M_base(); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "81f586cf1aeb9067ff87e3d66d978755b05f5452", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 72, "deletions": 71, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -28,111 +28,112 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#ifndef _GLIBCXX_DEBUG_DEBUG_H\n-#define _GLIBCXX_DEBUG_DEBUG_H 1\n-\n-/** Macros used by the implementation outside of debug wrappers to\n- *  verify certain properties. The __glibcxx_requires_xxx macros are\n- *  merely wrappers around the __glibcxx_check_xxx wrappers when we\n- *  are compiling with debug mode, but disappear when we are in\n- *  release mode so that there is no checking performed in, e.g., the\n- *  standard library algorithms.\n+#ifndef _GLIBCXX_DEBUG_MACRO_SWITCH_H\n+#define _GLIBCXX_DEBUG_MACRO_SWITCH_H 1\n+\n+/** Macros and namespaces used by the implementation outside of debug\n+ *  wrappers to verify certain properties. The __glibcxx_requires_xxx\n+ *  macros are merely wrappers around the __glibcxx_check_xxx wrappers\n+ *  when we are compiling with debug mode, but disappear when we are\n+ *  in release mode so that there is no checking performed in, e.g.,\n+ *  the standard library algorithms.\n */\n \n+// Debug mode namespaces.\n namespace std \n { \n-  namespace __gnu_debug_def { } \n-  namespace __gnu_debug { using namespace __gnu_debug_def; } \n-  namespace debug = __gnu_debug;\n+  namespace __debug { } \n }\n \n namespace __gnu_cxx\n { \n-  namespace __gnu_debug { };\n-  namespace debug = __gnu_debug;\n+  namespace __debug { };\n }\n \n namespace __gnu_debug\n {\n-  using namespace std::debug;\n-  using namespace __gnu_cxx::debug;\n+  using namespace std::__debug;\n+  using namespace __gnu_cxx::__debug;\n }\n \n-#ifdef _GLIBCXX_DEBUG\n+#ifndef _GLIBCXX_DEBUG\n+\n+# define _GLIBCXX_DEBUG_ASSERT(_Condition)\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+# define __glibcxx_requires_cond(_Cond,_Msg)\n+# define __glibcxx_requires_valid_range(_First,_Last)\n+# define __glibcxx_requires_sorted(_First,_Last)\n+# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_partitioned(_First,_Last,_Value)\n+# define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred)\n+# define __glibcxx_requires_heap(_First,_Last)\n+# define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\n+# define __glibcxx_requires_nonempty()\n+# define __glibcxx_requires_string(_String)\n+# define __glibcxx_requires_string_len(_String,_Len)\n+# define __glibcxx_requires_subscript(_N)\n+\n+#else\n \n # include <cstdlib>\n # include <cstdio>\n # include <debug/macros.h>\n \n namespace std\n {\n-namespace __gnu_debug\n-{ \n-  // Avoid the use of assert, because we're trying to keep the <cassert>\n-  // include out of the mix.\n-  inline void\n-  __replacement_assert(const char* __file, int __line, const char* __function,\n-\t\t       const char* __condition)\n-  {\n-    std::printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n-\t\t__function, __condition);\n-    std::abort();\n-  }\n-} // namespace __gnu_debug\n+  namespace __debug\n+  { \n+    // Avoid the use of assert, because we're trying to keep the <cassert>\n+    // include out of the mix.\n+    inline void\n+    __replacement_assert(const char* __file, int __line, \n+\t\t\t const char* __function, const char* __condition)\n+    {\n+      printf(\"%s:%d: %s: Assertion '%s' failed.\\n\", __file, __line,\n+\t     __function, __condition);\n+      abort();\n+    }\n+  } // namespace __debug\n } // namespace std\n \n-#define _GLIBCXX_DEBUG_ASSERT(_Condition)                               \\\n-  do {                                                                  \\\n-    if (! (_Condition))                                                 \\\n-      std::__gnu_debug::__replacement_assert(__FILE__, __LINE__,           \\\n-\t\t\t\t   __PRETTY_FUNCTION__,                 \\\n-\t\t\t\t   #_Condition);                        \\\n+#define _GLIBCXX_DEBUG_ASSERT(_Condition)                                   \\\n+  do \t\t\t\t\t\t\t\t\t    \\\n+  {\t\t\t\t\t\t\t\t\t    \\\n+    if (! (_Condition))                                                     \\\n+      std::__debug::__replacement_assert(__FILE__, __LINE__,\t\t    \\\n+\t\t\t\t\t __PRETTY_FUNCTION__, #_Condition); \\\n   } while (false)\n \n-#  ifdef _GLIBCXX_DEBUG_PEDANTIC\n-#    define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n-#  else\n-#    define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-#  endif\n+#ifdef _GLIBCXX_DEBUG_PEDANTIC\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition) _GLIBCXX_DEBUG_ASSERT(_Condition)\n+#else\n+# define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n+#endif\n \n-#  define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n-#  define __glibcxx_requires_valid_range(_First,_Last) \\\n+# define __glibcxx_requires_cond(_Cond,_Msg) _GLIBCXX_DEBUG_VERIFY(_Cond,_Msg)\n+# define __glibcxx_requires_valid_range(_First,_Last) \\\n      __glibcxx_check_valid_range(_First,_Last)\n-#  define __glibcxx_requires_sorted(_First,_Last) \\\n+# define __glibcxx_requires_sorted(_First,_Last) \\\n      __glibcxx_check_sorted(_First,_Last)\n-#  define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n+# define __glibcxx_requires_sorted_pred(_First,_Last,_Pred) \\\n      __glibcxx_check_sorted_pred(_First,_Last,_Pred)\n-#  define __glibcxx_requires_partitioned(_First,_Last,_Value)\t\\\n+# define __glibcxx_requires_partitioned(_First,_Last,_Value)\t\\\n      __glibcxx_check_partitioned(_First,_Last,_Value)\n-#  define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred) \\\n+# define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred) \\\n      __glibcxx_check_partitioned_pred(_First,_Last,_Value,_Pred)\n-#  define __glibcxx_requires_heap(_First,_Last) \\\n+# define __glibcxx_requires_heap(_First,_Last) \\\n      __glibcxx_check_heap(_First,_Last)\n-#  define __glibcxx_requires_heap_pred(_First,_Last,_Pred) \\\n+# define __glibcxx_requires_heap_pred(_First,_Last,_Pred) \\\n      __glibcxx_check_heap_pred(_First,_Last,_Pred)\n-#  define __glibcxx_requires_nonempty() __glibcxx_check_nonempty()\n-#  define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n-#  define __glibcxx_requires_string_len(_String,_Len)\t\\\n+# define __glibcxx_requires_nonempty() __glibcxx_check_nonempty()\n+# define __glibcxx_requires_string(_String) __glibcxx_check_string(_String)\n+# define __glibcxx_requires_string_len(_String,_Len)\t\\\n      __glibcxx_check_string_len(_String,_Len)\n-#  define __glibcxx_requires_subscript(_N) __glibcxx_check_subscript(_N)\n+# define __glibcxx_requires_subscript(_N) __glibcxx_check_subscript(_N)\n \n-#  include <debug/functions.h>\n-#  include <debug/formatter.h>\n-#else\n-#  define _GLIBCXX_DEBUG_ASSERT(_Condition)\n-#  define _GLIBCXX_DEBUG_PEDASSERT(_Condition)\n-#  define __glibcxx_requires_cond(_Cond,_Msg)\n-#  define __glibcxx_requires_valid_range(_First,_Last)\n-#  define __glibcxx_requires_sorted(_First,_Last)\n-#  define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\n-#  define __glibcxx_requires_partitioned(_First,_Last,_Value)\n-#  define __glibcxx_requires_partitioned_pred(_First,_Last,_Value,_Pred)\n-#  define __glibcxx_requires_heap(_First,_Last)\n-#  define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\n-#  define __glibcxx_requires_nonempty()\n-#  define __glibcxx_requires_string(_String)\n-#  define __glibcxx_requires_string_len(_String,_Len)\n-#  define __glibcxx_requires_subscript(_N)\n-#endif\n+# include <debug/functions.h>\n+# include <debug/formatter.h>\n \n #endif\n+\n+#endif // _GLIBCXX_DEBUG_MACRO_SWITCH_H"}, {"sha": "3cc8a86f793170426ceb11e589b7a9034fbcabcd", "filename": "libstdc++-v3/include/debug/deque", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdeque?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class deque\n@@ -383,7 +383,7 @@ namespace __gnu_debug_def\n     inline void\n     swap(deque<_Tp, _Alloc>& __lhs, deque<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "1551bfbd73ea7e58fdf547d201fd749786a01ab5", "filename": "libstdc++-v3/include/debug/formatter.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fformatter.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debug-mode error formatting implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,10 +33,10 @@\n #include <typeinfo>\n #include <debug/debug.h>\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n+  using std::type_info;\n+\n   /** Determine if the two types are the same. */\n   template<typename _Type1, typename _Type2>\n     struct __is_same\n@@ -386,6 +386,5 @@ namespace __gnu_debug\n     { return _Error_formatter(__file, __line); }\n   };\n } // namespace __gnu_debug\n-} // namespace std\n \n #endif"}, {"sha": "d6735108d5dded77aee7a332deac728f1f097fbf", "filename": "libstdc++-v3/include/debug/functions.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Ffunctions.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005\n+// Copyright (C) 2003, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,8 +36,6 @@\n #include <bits/stl_iterator_base_types.h> // for iterator_traits, categories\n #include <bits/cpp_type_traits.h>         // for __is_integer\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -287,6 +285,5 @@ namespace __gnu_debug\n       return __first == __last;\n     }\n } // namespace __gnu_debug\n-} // namespace std\n \n #endif"}, {"sha": "f9d9fe6d3b716782cd4af33217a223498e7ffcde", "filename": "libstdc++-v3/include/debug/hash_map.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_map.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -36,18 +36,18 @@\n \n namespace __gnu_cxx\n {\n-namespace __gnu_debug\n+namespace __debug\n {\n   template<typename _Value, typename _Tp,\n \t   typename _HashFcn  = __gnu_cxx::hash<_Value>,\n \t   typename _EqualKey = std::equal_to<_Value>,\n \t   typename _Alloc = std::allocator<_Value> >\n     class hash_map\n-    : public __gnu_cxx::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>,\n+    : public _GLIBCXX_EXT::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>,\n       public __gnu_debug::_Safe_sequence<hash_map<_Value, _Tp, _HashFcn,\n \t\t\t\t\t\t _EqualKey, _Alloc> >\n     {\n-      typedef __gnu_cxx::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>\n+      typedef _GLIBCXX_EXT::hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>\n       \t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_map> \t_Safe_base;\n \n@@ -141,7 +141,14 @@ namespace __gnu_debug\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n \n-      template <typename _InputIterator>\n+      void\n+      insert(const value_type* __first, const value_type* __last)\n+      {\n+\t__glibcxx_check_valid_range(__first, __last);\n+\t_Base::insert(__first, __last);\n+      }\n+\n+     template<typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         {\n@@ -267,7 +274,7 @@ namespace __gnu_debug\n     swap(hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,\n \t hash_map<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_debug\n+} // namespace __debug\n } // namespace __gnu_cxx\n \n #endif"}, {"sha": "7bdb9d5d150da4939e825c78896d498ebfb80b5b", "filename": "libstdc++-v3/include/debug/hash_multimap.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multimap.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -36,18 +36,18 @@\n \n namespace __gnu_cxx\n {\n-namespace __gnu_debug\n+namespace __debug\n {\n   template<typename _Value, typename _Tp,\n \t   typename _HashFcn  = __gnu_cxx::hash<_Value>,\n \t   typename _EqualKey = std::equal_to<_Value>,\n \t   typename _Alloc =  std::allocator<_Value> >\n     class hash_multimap\n-    : public __gnu_cxx::hash_multimap<_Value,_Tp,_HashFcn, _EqualKey,_Alloc>,\n+    : public _GLIBCXX_EXT::hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>,\n       public __gnu_debug::_Safe_sequence<hash_multimap<_Value, _Tp, _HashFcn,\n \t\t\t\t\t\t       _EqualKey, _Alloc> >\n     {\n-      typedef __gnu_cxx::hash_multimap<_Value,_Tp,_HashFcn, _EqualKey,_Alloc>\n+      typedef _GLIBCXX_EXT::hash_multimap<_Value,_Tp,_HashFcn,_EqualKey,_Alloc>\n \t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_multimap> _Safe_base;\n \n@@ -258,7 +258,7 @@ namespace __gnu_debug\n     swap(hash_multimap<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __x,\n \t hash_multimap<_Value, _Tp, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_debug\n+} // namespace __debug\n } // namespace __gnu_cxx\n \n #endif"}, {"sha": "63309ea50ef6e86257199b6e69aaca8c7b7040ca", "filename": "libstdc++-v3/include/debug/hash_multiset.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_multiset.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -36,18 +36,18 @@\n \n namespace __gnu_cxx\n {\n-namespace __gnu_debug\n+namespace __debug\n {\n   template<typename _Value,\n \t   typename _HashFcn  = __gnu_cxx::hash<_Value>,\n \t   typename _EqualKey = std::equal_to<_Value>,\n \t   typename _Alloc =  std::allocator<_Value> >\n     class hash_multiset\n-    : public __gnu_cxx::hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc>,\n+    : public _GLIBCXX_EXT::hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc>,\n       public __gnu_debug::_Safe_sequence<hash_multiset<_Value, _HashFcn,\n \t\t\t\t\t\t       _EqualKey, _Alloc> >\n     {\n-      typedef __gnu_cxx:: hash_multiset<_Value,_HashFcn, _EqualKey,_Alloc>\n+      typedef _GLIBCXX_EXT:: hash_multiset<_Value,_HashFcn, _EqualKey,_Alloc>\n \t\t\t\t\t\t\t_Base;\n       typedef __gnu_debug::_Safe_sequence<hash_multiset> _Safe_base;\n \n@@ -233,7 +233,7 @@ template<typename _Value, typename _HashFcn, typename _EqualKey, typename _Alloc\n   swap(hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc>& __x,\n        hash_multiset<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n   { __x.swap(__y); }\n-} // namespace __gnu_debug\n+} // namespace __debug\n } // namespace __gnu_cxx\n \n #endif"}, {"sha": "76949d35ac553073b60ebe56391b2b46cba0d4f0", "filename": "libstdc++-v3/include/debug/hash_set.h", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fhash_set.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -36,18 +36,18 @@\n \n namespace __gnu_cxx\n {\n-namespace __gnu_debug\n+namespace __debug\n {\n   template<typename _Value,\n \t   typename _HashFcn  = __gnu_cxx::hash<_Value>,\n \t   typename _EqualKey = std::equal_to<_Value>,\n \t   typename _Alloc =  std::allocator<_Value> >\n     class hash_set\n-    : public __gnu_cxx::hash_set<_Value, _HashFcn, _EqualKey, _Alloc>,\n+    : public _GLIBCXX_EXT::hash_set<_Value, _HashFcn, _EqualKey,_Alloc>,\n       public __gnu_debug::_Safe_sequence<hash_set<_Value, _HashFcn, _EqualKey,\n \t\t\t\t\t\t  _Alloc> >\n     {\n-      typedef __gnu_cxx::hash_set<_Value, _HashFcn, _EqualKey, _Alloc> _Base;\n+      typedef _GLIBCXX_EXT::hash_set<_Value, _HashFcn, _EqualKey,_Alloc> _Base;\n       typedef __gnu_debug::_Safe_sequence<hash_set> _Safe_base;\n \n     public:\n@@ -131,7 +131,14 @@ namespace __gnu_debug\n \treturn std::make_pair(iterator(__res.first, this), __res.second);\n       }\n \n-      template <typename _InputIterator>\n+      void\n+      insert(const value_type* __first, const value_type* __last)\n+      {\n+\t__glibcxx_check_valid_range(__first, __last);\n+\t_Base::insert(__first, __last);\n+      }\n+\n+      template<typename _InputIterator>\n         void\n         insert(_InputIterator __first, _InputIterator __last)\n         {\n@@ -242,7 +249,7 @@ namespace __gnu_debug\n     swap(hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __x,\n \t hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __y)\n     { __x.swap(__y); }\n-} // namespace __gnu_debug\n+} // namespace __debug\n } // namespace __gnu_cxx\n \n #endif"}, {"sha": "989376677f4d6eaf3afaaa3ae2a0ce848d380e4c", "filename": "libstdc++-v3/include/debug/list", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Flist?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -38,7 +38,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Tp, typename _Allocator = std::allocator<_Tp> >\n     class list\n@@ -502,7 +502,7 @@ namespace __gnu_debug_def\n     inline void\n     swap(list<_Tp, _Alloc>& __lhs, list<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "aa11ba2e71a68f09d2f41ea08b8a59e3d525a250", "filename": "libstdc++-v3/include/debug/macros.h", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmacros.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debugging support implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005\n+// Copyright (C) 2003, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -41,16 +41,17 @@\n  *\n  */\n #define _GLIBCXX_DEBUG_VERIFY(_Condition,_ErrorMessage)\t\t        \\\n-  do {\t\t\t\t\t\t\t\t\t\\\n+  do \t\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n     if (! (_Condition))\t\t\t\t\t\t\t\\\n-      std::__gnu_debug::_Error_formatter::_M_at(__FILE__, __LINE__)\t\\\n+      __gnu_debug::_Error_formatter::_M_at(__FILE__, __LINE__)\t        \\\n \t  ._ErrorMessage._M_error();\t\t\t\t\t\\\n   } while (false)\n \n // Verify that [_First, _Last) forms a valid iterator range.\n #define __glibcxx_check_valid_range(_First,_Last)\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__valid_range(_First, _Last),\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_valid_range)\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__valid_range(_First, _Last),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_valid_range)\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -63,11 +64,11 @@ _GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__valid_range(_First, _Last),\t\\\n */\n #define __glibcxx_check_insert(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(!_Position._M_singular(),\t\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_insert_singular) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_singular) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_insert_different) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_different) \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -87,11 +88,11 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n #define __glibcxx_check_insert_range(_Position,_First,_Last)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(!_Position._M_singular(),\t\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_insert_singular) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_singular)    \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_insert_different) \\\n+\t\t      _M_message(__gnu_debug::__msg_insert_different)   \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -101,11 +102,11 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n */\n #define __glibcxx_check_erase(_Position)\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_dereferenceable(),\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_erase_bad)\t\\\n+\t\t      _M_message(__gnu_debug::__msg_erase_bad)\t        \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position));\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_erase_different) \\\n+\t\t      _M_message(__gnu_debug::__msg_erase_different)    \\\n \t\t      ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_Position, #_Position))\n \n@@ -116,23 +117,23 @@ _GLIBCXX_DEBUG_VERIFY(_Position._M_attached_to(this),\t\t\t\\\n #define __glibcxx_check_erase_range(_First,_Last)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_First._M_attached_to(this),\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_erase_different) \\\n+\t\t      _M_message(__gnu_debug::__msg_erase_different)    \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n // Verify that the subscript _N is less than the container's size.\n #define __glibcxx_check_subscript(_N)\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(_N < this->size(),\t\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_subscript_oob) \\\n+\t\t      _M_message(__gnu_debug::__msg_subscript_oob)      \\\n                       ._M_sequence(*this, \"this\")\t\t\t\\\n \t\t      ._M_integer(_N, #_N)\t\t\t\t\\\n \t\t      ._M_integer(this->size(), \"size\"))\n \n // Verify that the container is nonempty\n #define __glibcxx_check_nonempty()\t\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(! this->empty(),\t\t\t\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_empty)\t\\\n+\t\t      _M_message(__gnu_debug::__msg_empty)\t        \\\n                       ._M_sequence(*this, \"this\"))\n \n // Verify that the < operator for elements in the sequence is a\n@@ -150,8 +151,8 @@ _GLIBCXX_DEBUG_ASSERT(_First == _Last || !_Pred(*_First, *_First))\n #define __glibcxx_check_sorted(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n __glibcxx_check_strict_weak_ordering(_First,_Last);\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last),\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_unsorted)\t\\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last),\t\\\n+\t\t      _M_message(__gnu_debug::__msg_unsorted)\t        \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -160,8 +161,8 @@ _GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last),\t\\\n #define __glibcxx_check_sorted_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n __glibcxx_check_strict_weak_ordering_pred(_First,_Last,_Pred);\t        \\\n-_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n-\t\t      _M_message(std::__gnu_debug::__msg_unsorted_pred) \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n+\t\t      _M_message(__gnu_debug::__msg_unsorted_pred)      \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))\n@@ -170,9 +171,9 @@ _GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_sorted(_First, _Last, _Pred), \\\n     w.r.t. the value _Value. */\n #define __glibcxx_check_partitioned(_First,_Last,_Value)\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned(_First, _Last,   \\\n \t\t\t\t\t\t\t    _Value),\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_unpartitioned) \\\n+\t\t      _M_message(__gnu_debug::__msg_unpartitioned)      \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Value))\n@@ -181,9 +182,9 @@ _GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n     w.r.t. the value _Value and predicate _Pred. */\n #define __glibcxx_check_partitioned_pred(_First,_Last,_Value,_Pred)\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n+_GLIBCXX_DEBUG_VERIFY(__gnu_debug::__check_partitioned(_First, _Last,   \\\n \t\t\t\t\t\t\t _Value, _Pred), \\\n-\t\t      _M_message(std::__gnu_debug::__msg_unpartitioned_pred) \\\n+\t\t      _M_message(__gnu_debug::__msg_unpartitioned_pred) \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred)\t\t\t\t\\\n@@ -192,8 +193,8 @@ _GLIBCXX_DEBUG_VERIFY(std::__gnu_debug::__check_partitioned(_First, _Last, \\\n // Verify that the iterator range [_First, _Last) is a heap\n #define __glibcxx_check_heap(_First,_Last)\t\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n-_GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last),\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_not_heap)\t\\\n+_GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last),\t\t        \\\n+\t\t      _M_message(__gnu_debug::__msg_not_heap)\t        \\\n \t\t      ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last))\n \n@@ -202,7 +203,7 @@ _GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last),\t\t\\\n #define __glibcxx_check_heap_pred(_First,_Last,_Pred)\t\t\t\\\n __glibcxx_check_valid_range(_First,_Last);\t\t\t\t\\\n _GLIBCXX_DEBUG_VERIFY(std::__is_heap(_First, _Last, _Pred),\t\t\\\n-\t\t      _M_message(std::__gnu_debug::__msg_not_heap_pred) \\\n+\t\t      _M_message(__gnu_debug::__msg_not_heap_pred)      \\\n                       ._M_iterator(_First, #_First)\t\t\t\\\n \t\t      ._M_iterator(_Last, #_Last)\t\t\t\\\n \t\t      ._M_string(#_Pred))"}, {"sha": "09962a3903a73ba36056b385ccc88b7d13c3dd0f", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n@@ -324,7 +324,7 @@ namespace __gnu_debug_def\n     swap(map<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t map<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "78d163ef30113a103ef685169bdffba16c944f9b", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Key, typename _Tp, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<std::pair<const _Key, _Tp> > >\n@@ -311,7 +311,7 @@ namespace __gnu_debug_def\n     swap(multimap<_Key,_Tp,_Compare,_Allocator>& __lhs,\n \t multimap<_Key,_Tp,_Compare,_Allocator>& __rhs)\n     { __lhs.swap(__rhs); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "50d9a16e1cf43d37a958d4cee0a53796ed0f90d8", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n@@ -317,7 +317,7 @@ namespace __gnu_debug_def\n     swap(multiset<_Key,_Compare,_Allocator>& __x,\n \t multiset<_Key,_Compare,_Allocator>& __y)\n     { return __x.swap(__y); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "8640497d42480a62a2341ce13be6c97afaafbde6", "filename": "libstdc++-v3/include/debug/safe_base.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_base.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence/iterator base implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -31,8 +31,6 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_BASE_H\n #define _GLIBCXX_DEBUG_SAFE_BASE_H 1\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   class _Safe_sequence_base;\n@@ -205,6 +203,5 @@ namespace __gnu_debug\n     { if (++_M_version == 0) _M_version = 1; }\n   };\n } // namespace __gnu_debug\n-} // namespace std\n \n #endif"}, {"sha": "e49ae09f40b78ecd0dd6fa6463a086c2dfdd9787", "filename": "libstdc++-v3/include/debug/safe_iterator.h", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Safe iterator implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -39,8 +39,6 @@\n #include <bits/stl_pair.h>\n #include <bits/cpp_type_traits.h>\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   /** Iterators that derive from _Safe_iterator_base but that aren't\n@@ -88,7 +86,7 @@ namespace __gnu_debug\n \treturn __is_same<const_iterator, _Safe_iterator>::value;\n       }\n \n-      typedef iterator_traits<_Iterator> _Traits;\n+      typedef std::iterator_traits<_Iterator> _Traits;\n \n     public:\n       typedef _Iterator                           _Base_iterator;\n@@ -360,24 +358,24 @@ namespace __gnu_debug\n      *\tprecision.\n     */\n     template<typename _Iterator1, typename _Iterator2>\n-      static pair<difference_type, _Distance_precision>\n+      static std::pair<difference_type, _Distance_precision>\n       _M_get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs)\n       {\n-        typedef typename iterator_traits<_Iterator1>::iterator_category\n+        typedef typename std::iterator_traits<_Iterator1>::iterator_category\n \t  _Category;\n         return _M_get_distance(__lhs, __rhs, _Category());\n       }\n \n     template<typename _Iterator1, typename _Iterator2>\n-      static pair<difference_type, _Distance_precision>\n+      static std::pair<difference_type, _Distance_precision>\n       _M_get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs,\n \t\t      std::random_access_iterator_tag)\n       {\n         return std::make_pair(__rhs.base() - __lhs.base(), __dp_exact);\n       }\n \n     template<typename _Iterator1, typename _Iterator2>\n-      static pair<difference_type, _Distance_precision>\n+      static std::pair<difference_type, _Distance_precision>\n       _M_get_distance(const _Iterator1& __lhs, const _Iterator2& __rhs,\n \t\t    std::forward_iterator_tag)\n       {\n@@ -628,7 +626,6 @@ namespace __gnu_debug\n \t      const _Safe_iterator<_Iterator, _Sequence>& __i)\n     { return __i + __n; }\n } // namespace __gnu_debug\n-} // namespace std\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE\n #  include <debug/safe_iterator.tcc>"}, {"sha": "ac9a09a2e830d91f10169f9251bf16bfff3eb0c6", "filename": "libstdc++-v3/include/debug/safe_iterator.tcc", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_iterator.tcc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debugging iterator implementation (out of line) -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,8 +36,6 @@\n #ifndef _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC\n #define _GLIBCXX_DEBUG_SAFE_ITERATOR_TCC 1\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -55,7 +53,7 @@ namespace __gnu_debug\n \t{\n \t  const_iterator __begin =\n \t    static_cast<const _Sequence*>(_M_sequence)->begin();\n-\t  pair<difference_type, _Distance_precision> __dist =\n+\t  std::pair<difference_type, _Distance_precision> __dist =\n \t    this->_M_get_distance(__begin, *this);\n \t  bool __ok =  (__dist.second == __dp_exact && __dist.first >= -__n\n \t\t\t|| __dist.second != __dp_exact && __dist.first > 0);\n@@ -65,7 +63,7 @@ namespace __gnu_debug\n \t{\n \t  const_iterator __end =\n \t    static_cast<const _Sequence*>(_M_sequence)->end();\n-\t  pair<difference_type, _Distance_precision> __dist =\n+\t  std::pair<difference_type, _Distance_precision> __dist =\n \t    this->_M_get_distance(*this, __end);\n \t  bool __ok = (__dist.second == __dp_exact && __dist.first >= __n\n \t\t       || __dist.second != __dp_exact && __dist.first > 0);\n@@ -84,7 +82,7 @@ namespace __gnu_debug\n \n \t/* Determine if we can order the iterators without the help of\n \t   the container */\n-\tpair<difference_type, _Distance_precision> __dist =\n+\tstd::pair<difference_type, _Distance_precision> __dist =\n \t  this->_M_get_distance(*this, __rhs);\n \tswitch (__dist.second) {\n \tcase __dp_equality:\n@@ -118,26 +116,25 @@ namespace __gnu_debug\n \n       if (!this->_M_singular())\n \t{\n-\t  for (_Safe_iterator_base* iter = _M_sequence->_M_iterators; iter; )\n+\t  for (_Safe_iterator_base* iter = _M_sequence->_M_iterators; iter;)\n \t    {\n \t      iterator* __victim = static_cast<iterator*>(iter);\n \t      iter = iter->_M_next;\n \t      if (this->base() == __victim->base())\n \t\t__victim->_M_version = 0;\n \t    }\n-\t  for (_Safe_iterator_base* iter2 = _M_sequence->_M_const_iterators;\n-\t       iter2; /* increment in loop */)\n+\t  for (_Safe_iterator_base* iter = _M_sequence->_M_const_iterators;\n+\t       iter;)\n \t    {\n-\t      const_iterator* __victim = static_cast<const_iterator*>(iter2);\n-\t      iter2 = iter2->_M_next;\n-\t      if (this->base() == __victim->base())\n+\t      const_iterator* __victim = static_cast<const_iterator*>(iter);\n+\t      iter = iter->_M_next;\n+\t      if (__victim->base() == this->base())\n \t\t__victim->_M_version = 0;\n \t    }\n \t  _M_version = 0;\n \t}\n     }\n } // namespace __gnu_debug\n-} // namespace std\n \n #endif\n "}, {"sha": "36c7e42cd5618737241a3a0c95d78f3048e682c8", "filename": "libstdc++-v3/include/debug/safe_sequence.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_sequence.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Safe sequence implementation  -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,8 +36,6 @@\n #include <debug/functions.h>\n #include <debug/safe_base.h>\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   template<typename _Iterator, typename _Sequence>\n@@ -180,6 +178,5 @@ namespace __gnu_debug\n         }\n       }\n } // namespace __gnu_debug\n-} // namespace std\n \n #endif"}, {"sha": "1d7a4be2a48ed17bf636df6fb8010c4184dc0d4d", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -37,7 +37,7 @@\n \n namespace std \n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Key, typename _Compare = std::less<_Key>,\n \t   typename _Allocator = std::allocator<_Key> >\n@@ -322,7 +322,7 @@ namespace __gnu_debug_def\n     swap(set<_Key,_Compare,_Allocator>& __x,\n \t set<_Key,_Compare,_Allocator>& __y)\n     { return __x.swap(__y); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "4b929576ced675e6169ec1dcb465645b86094937", "filename": "libstdc++-v3/include/debug/string", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fstring?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debugging string implementation -*- C++ -*-\n \n-// Copyright (C) 2003, 2005\n+// Copyright (C) 2003, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -35,8 +35,6 @@\n #include <debug/safe_sequence.h>\n #include <debug/safe_iterator.h>\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   template<typename _CharT, typename _Traits = std::char_traits<_CharT>,\n@@ -664,7 +662,8 @@ namespace __gnu_debug\n     { return _Base::find_first_of(__c, __pos); }\n \n     size_type\n-    find_last_of(const basic_string& __str, size_type __pos = _Base::npos) const\n+    find_last_of(const basic_string& __str, \n+\t\t size_type __pos = _Base::npos) const\n     { return _Base::find_last_of(__str, __pos); }\n \n     size_type\n@@ -1016,6 +1015,5 @@ namespace __gnu_debug\n #endif\n \n } // namespace __gnu_debug\n-} // namespace std\n \n #endif"}, {"sha": "395267e5d27a68e5fe44f2b6a9875e4b6c419173", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -38,7 +38,7 @@\n \n namespace std\n {\n-namespace __gnu_debug_def\n+namespace __debug\n {\n   template<typename _Tp,\n \t   typename _Allocator = std::allocator<_Tp> >\n@@ -413,7 +413,7 @@ namespace __gnu_debug_def\n     inline void\n     swap(vector<_Tp, _Alloc>& __lhs, vector<_Tp, _Alloc>& __rhs)\n     { __lhs.swap(__rhs); }\n-} // namespace __gnu_debug_def\n+} // namespace __debug\n } // namespace std\n \n #endif"}, {"sha": "2367c77415ec0752ecaa1401212f27fbd1c68732", "filename": "libstdc++-v3/include/ext/hash_map", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_map?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Hashing map implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,10 +61,11 @@\n #ifndef _HASH_MAP\n #define _HASH_MAP 1\n \n+#include <bits/c++config.h>\n #include <ext/hashtable.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n \n   using std::equal_to;\n   using std::allocator;\n@@ -73,7 +74,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // Forward declaration of equality operator; needed for friend\n   // declaration.\n-  template<class _Key, class _Tp, class _HashFcn = hash<_Key>,\n+  template<class _Key, class _Tp, class _HashFn = hash<_Key>,\n \t   class _EqualKey = equal_to<_Key>, class _Alloc = allocator<_Tp> >\n     class hash_map;\n \n@@ -87,12 +88,11 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template <class _Key, class _Tp, class _HashFcn, class _EqualKey,\n-\t    class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn, class _EqualKey, class _Alloc>\n     class hash_map\n     {\n     private:\n-      typedef hashtable<pair<const _Key, _Tp>,_Key, _HashFcn,\n+      typedef hashtable<pair<const _Key, _Tp>,_Key, _HashFn,\n \t\t\t_Select1st<pair<const _Key, _Tp> >,\n \t\t\t_EqualKey, _Alloc> _Ht;\n \n@@ -145,23 +145,23 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t       const allocator_type& __a = allocator_type())\n       : _M_ht(__n, __hf, __eql, __a) {}\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_map(_InputIterator __f, _InputIterator __l)\n \t: _M_ht(100, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_map(_InputIterator __f, _InputIterator __l, size_type __n)\n \t: _M_ht(__n, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_map(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t const hasher& __hf)\n \t: _M_ht(__n, __hf, key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_map(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t const hasher& __hf, const key_equal& __eql,\n \t\t const allocator_type& __a = allocator_type())\n@@ -185,7 +185,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       swap(hash_map& __hs)\n       { _M_ht.swap(__hs._M_ht); }\n \n-      template <class _K1, class _T1, class _HF, class _EqK, class _Al>\n+      template<class _K1, class _T1, class _HF, class _EqK, class _Al>\n         friend bool\n         operator== (const hash_map<_K1, _T1, _HF, _EqK, _Al>&,\n \t\t    const hash_map<_K1, _T1, _HF, _EqK, _Al>&);\n@@ -211,7 +211,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       insert(const value_type& __obj)\n       { return _M_ht.insert_unique(__obj); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert(_InputIterator __f, _InputIterator __l)\n         { _M_ht.insert_unique(__f, __l); }\n@@ -277,33 +277,32 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return _M_ht.elems_in_bucket(__n); }\n     };\n \n-  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn, class _EqlKey, class _Alloc>\n     inline bool\n-    operator==(const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,\n-\t       const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)\n+    operator==(const hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm1,\n+\t       const hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { return __hm1._M_ht == __hm2._M_ht; }\n \n-  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn, class _EqlKey, class _Alloc>\n     inline bool\n-    operator!=(const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,\n-\t       const hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)\n+    operator!=(const hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm1,\n+\t       const hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { return !(__hm1 == __hm2); }\n \n-  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn, class _EqlKey, class _Alloc>\n     inline void\n-    swap(hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,\n-\t hash_map<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)\n+    swap(hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm1,\n+\t hash_map<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { __hm1.swap(__hm2); }\n \n   // Forward declaration of equality operator; needed for friend declaration.\n-\n-  template <class _Key, class _Tp,\n-\t    class _HashFcn  = hash<_Key>,\n+  template<class _Key, class _Tp,\n+\t    class _HashFn  = hash<_Key>,\n \t    class _EqualKey = equal_to<_Key>,\n \t    class _Alloc =  allocator<_Tp> >\n     class hash_multimap;\n \n-  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n     inline bool\n     operator==(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,\n \t       const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2);\n@@ -313,18 +312,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template <class _Key, class _Tp, class _HashFcn, class _EqualKey,\n+  template<class _Key, class _Tp, class _HashFn, class _EqualKey,\n \t    class _Alloc>\n     class hash_multimap\n     {\n       // concept requirements\n       __glibcxx_class_requires(_Key, _SGIAssignableConcept)\n       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)\n-      __glibcxx_class_requires3(_HashFcn, size_t, _Key, _UnaryFunctionConcept)\n+      __glibcxx_class_requires3(_HashFn, size_t, _Key, _UnaryFunctionConcept)\n       __glibcxx_class_requires3(_EqualKey, _Key, _Key, _BinaryPredicateConcept)\n \t\n     private:\n-      typedef hashtable<pair<const _Key, _Tp>, _Key, _HashFcn,\n+      typedef hashtable<pair<const _Key, _Tp>, _Key, _HashFn,\n \t\t\t_Select1st<pair<const _Key, _Tp> >, _EqualKey, _Alloc>\n           _Ht;\n \n@@ -377,23 +376,23 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t    const allocator_type& __a = allocator_type())\n       : _M_ht(__n, __hf, __eql, __a) {}\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multimap(_InputIterator __f, _InputIterator __l)\n \t: _M_ht(100, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n)\n \t: _M_ht(__n, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t      const hasher& __hf)\n \t: _M_ht(__n, __hf, key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multimap(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t      const hasher& __hf, const key_equal& __eql,\n \t\t      const allocator_type& __a = allocator_type())\n@@ -417,7 +416,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       swap(hash_multimap& __hs)\n       { _M_ht.swap(__hs._M_ht); }\n \n-      template <class _K1, class _T1, class _HF, class _EqK, class _Al>\n+      template<class _K1, class _T1, class _HF, class _EqK, class _Al>\n         friend bool\n         operator==(const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&,\n \t\t   const hash_multimap<_K1, _T1, _HF, _EqK, _Al>&);\n@@ -443,7 +442,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       insert(const value_type& __obj)\n       { return _M_ht.insert_equal(__obj); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert(_InputIterator __f, _InputIterator __l)\n         { _M_ht.insert_equal(__f,__l); }\n@@ -506,32 +505,36 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return _M_ht.elems_in_bucket(__n); }\n     };\n \n-  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n     inline bool\n     operator==(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,\n \t       const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2)\n     { return __hm1._M_ht == __hm2._M_ht; }\n \n-  template <class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HF, class _EqKey, class _Alloc>\n     inline bool\n     operator!=(const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm1,\n \t       const hash_multimap<_Key, _Tp, _HF, _EqKey, _Alloc>& __hm2)\n     { return !(__hm1 == __hm2); }\n \n-  template <class _Key, class _Tp, class _HashFcn, class _EqlKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn, class _EqlKey, class _Alloc>\n     inline void\n-    swap(hash_multimap<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm1,\n-\t hash_multimap<_Key, _Tp, _HashFcn, _EqlKey, _Alloc>& __hm2)\n+    swap(hash_multimap<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm1,\n+\t hash_multimap<_Key, _Tp, _HashFn, _EqlKey, _Alloc>& __hm2)\n     { __hm1.swap(__hm2); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NESTED_NAMESPACE\n+\n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/hash_map>\n+#endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Specialization of insert_iterator so that it will work for hash_map\n   // and hash_multimap.\n-  template <class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n-    class insert_iterator<__gnu_cxx::hash_map<_Key, _Tp, _HashFn,\n+  template<class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n+    class insert_iterator<__gnu_cxx::hash_map<_Key, _Tp, _HashFn, \n \t\t\t\t\t      _EqKey, _Alloc> >\n     {\n     protected:\n@@ -572,7 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return *this; }\n     };\n \n-  template <class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n+  template<class _Key, class _Tp, class _HashFn,  class _EqKey, class _Alloc>\n     class insert_iterator<__gnu_cxx::hash_multimap<_Key, _Tp, _HashFn,\n \t\t\t\t\t\t   _EqKey, _Alloc> >\n     {\n@@ -618,8 +621,4 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n-#ifdef _GLIBCXX_DEBUG\n-# include <debug/hash_map>\n-#endif\n-\n #endif"}, {"sha": "02cc99fb96efff34f65c23333c3e2e09f9e48ecd", "filename": "libstdc++-v3/include/ext/hash_set", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhash_set?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Hashing set implementation -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -61,10 +61,11 @@\n #ifndef _HASH_SET\n #define _HASH_SET 1\n \n+#include <bits/c++config.h>\n #include <ext/hashtable.h>\n #include <bits/concept_check.h>\n \n-_GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n+_GLIBCXX_BEGIN_NESTED_NAMESPACE(__gnu_cxx, _GLIBCXX_EXT)\n \n   using std::equal_to;\n   using std::allocator;\n@@ -73,12 +74,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n   // Forward declaration of equality operator; needed for friend\n   // declaration.\n-  template <class _Value, class _HashFcn  = hash<_Value>,\n+  template<class _Value, class _HashFcn  = hash<_Value>,\n \t    class _EqualKey = equal_to<_Value>,\n \t    class _Alloc = allocator<_Value> >\n     class hash_set;\n \n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator==(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs2);\n@@ -88,7 +89,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     class hash_set\n     {\n       // concept requirements\n@@ -146,23 +147,23 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t       const allocator_type& __a = allocator_type())\n       : _M_ht(__n, __hf, __eql, __a) {}\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_set(_InputIterator __f, _InputIterator __l)\n \t: _M_ht(100, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_set(_InputIterator __f, _InputIterator __l, size_type __n)\n \t: _M_ht(__n, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_set(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t const hasher& __hf)\n \t: _M_ht(__n, __hf, key_equal(), allocator_type())\n         { _M_ht.insert_unique(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_set(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t const hasher& __hf, const key_equal& __eql,\n \t\t const allocator_type& __a = allocator_type())\n@@ -186,7 +187,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       swap(hash_set& __hs)\n       { _M_ht.swap(__hs._M_ht); }\n \n-      template <class _Val, class _HF, class _EqK, class _Al>\n+      template<class _Val, class _HF, class _EqK, class _Al>\n         friend bool\n         operator==(const hash_set<_Val, _HF, _EqK, _Al>&,\n \t\t   const hash_set<_Val, _HF, _EqK, _Al>&);\n@@ -207,7 +208,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \treturn pair<iterator,bool>(__p.first, __p.second);\n       }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert(_InputIterator __f, _InputIterator __l)\n         { _M_ht.insert_unique(__f, __l); }\n@@ -248,7 +249,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       clear()\n       { _M_ht.clear(); }\n \n-public:\n+    public:\n       void\n       resize(size_type __hint)\n       { _M_ht.resize(__hint); }\n@@ -266,31 +267,31 @@ public:\n       { return _M_ht.elems_in_bucket(__n); }\n     };\n \n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator==(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { return __hs1._M_ht == __hs2._M_ht; }\n \n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator!=(const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_set<_Value, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { return !(__hs1 == __hs2); }\n \n-  template <class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n     inline void\n     swap(hash_set<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t hash_set<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { __hs1.swap(__hs2); }\n \n-  template <class _Value,\n+  template<class _Value,\n \t    class _HashFcn = hash<_Value>,\n \t    class _EqualKey = equal_to<_Value>,\n \t    class _Alloc = allocator<_Value> >\n     class hash_multiset;\n \n-  template <class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator==(const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2);\n@@ -301,7 +302,7 @@ public:\n    *  @ingroup SGIextensions\n    *  @doctodo\n    */\n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     class hash_multiset\n     {\n       // concept requirements\n@@ -359,23 +360,23 @@ public:\n \t\t    const allocator_type& __a = allocator_type())\n       : _M_ht(__n, __hf, __eql, __a) {}\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multiset(_InputIterator __f, _InputIterator __l)\n \t: _M_ht(100, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n)\n \t: _M_ht(__n, hasher(), key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t      const hasher& __hf)\n \t: _M_ht(__n, __hf, key_equal(), allocator_type())\n         { _M_ht.insert_equal(__f, __l); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         hash_multiset(_InputIterator __f, _InputIterator __l, size_type __n,\n \t\t      const hasher& __hf, const key_equal& __eql,\n \t\t      const allocator_type& __a = allocator_type())\n@@ -399,7 +400,7 @@ public:\n       swap(hash_multiset& hs)\n       { _M_ht.swap(hs._M_ht); }\n \n-      template <class _Val, class _HF, class _EqK, class _Al>\n+      template<class _Val, class _HF, class _EqK, class _Al>\n         friend bool\n         operator==(const hash_multiset<_Val, _HF, _EqK, _Al>&,\n \t\t   const hash_multiset<_Val, _HF, _EqK, _Al>&);\n@@ -412,12 +413,12 @@ public:\n       end() const\n       { return _M_ht.end(); }\n \n-public:\n+    public:\n       iterator\n       insert(const value_type& __obj)\n       { return _M_ht.insert_equal(__obj); }\n   \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert(_InputIterator __f, _InputIterator __l)\n         { _M_ht.insert_equal(__f,__l); }\n@@ -472,32 +473,35 @@ public:\n       { return _M_ht.elems_in_bucket(__n); }\n     };\n \n-  template <class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator==(const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { return __hs1._M_ht == __hs2._M_ht; }\n \n-  template <class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n     inline bool\n     operator!=(const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t       const hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { return !(__hs1 == __hs2); }\n \n-  template <class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Val, class _HashFcn, class _EqualKey, class _Alloc>\n     inline void\n     swap(hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs1,\n \t hash_multiset<_Val, _HashFcn, _EqualKey, _Alloc>& __hs2)\n     { __hs1.swap(__hs2); }\n \n-_GLIBCXX_END_NAMESPACE\n+_GLIBCXX_END_NESTED_NAMESPACE\n+\n+#ifdef _GLIBCXX_DEBUG\n+# include <debug/hash_set>\n+#endif\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // Specialization of insert_iterator so that it will work for hash_set\n   // and hash_multiset.\n-\n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     class insert_iterator<__gnu_cxx::hash_set<_Value, _HashFcn,\n \t\t\t\t\t      _EqualKey, _Alloc> >\n     {\n@@ -540,7 +544,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       { return *this; }\n     };\n \n-  template <class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n+  template<class _Value, class _HashFcn, class _EqualKey, class _Alloc>\n     class insert_iterator<__gnu_cxx::hash_multiset<_Value, _HashFcn,\n \t\t\t\t\t\t   _EqualKey, _Alloc> >\n     {\n@@ -585,8 +589,4 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n _GLIBCXX_END_NAMESPACE\n \n-#ifdef _GLIBCXX_DEBUG\n-# include <debug/hash_set>\n-#endif\n-\n #endif"}, {"sha": "9c274bf829a53dd5749fa594c93f3fae0aee5993", "filename": "libstdc++-v3/include/ext/hashtable.h", "status": "modified", "additions": 59, "deletions": 60, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fhashtable.h?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,7 @@\n // Hashtable implementation used by containers -*- C++ -*-\n \n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -83,27 +84,27 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   using std::pair;\n   using std::__iterator_category;\n \n-  template <class _Val>\n+  template<class _Val>\n     struct _Hashtable_node\n     {\n       _Hashtable_node* _M_next;\n       _Val _M_val;\n     };\n \n-  template <class _Val, class _Key, class _HashFcn, class _ExtractKey, \n-\t    class _EqualKey, class _Alloc = std::allocator<_Val> >\n+  template<class _Val, class _Key, class _HashFcn, class _ExtractKey, \n+\t   class _EqualKey, class _Alloc = std::allocator<_Val> >\n     class hashtable;\n \n-  template <class _Val, class _Key, class _HashFcn,\n-\t    class _ExtractKey, class _EqualKey, class _Alloc>\n+  template<class _Val, class _Key, class _HashFcn,\n+\t   class _ExtractKey, class _EqualKey, class _Alloc>\n     struct _Hashtable_iterator;\n \n-  template <class _Val, class _Key, class _HashFcn,\n-\t    class _ExtractKey, class _EqualKey, class _Alloc>\n+  template<class _Val, class _Key, class _HashFcn,\n+\t   class _ExtractKey, class _EqualKey, class _Alloc>\n     struct _Hashtable_const_iterator;\n \n-  template <class _Val, class _Key, class _HashFcn,\n-\t    class _ExtractKey, class _EqualKey, class _Alloc>\n+  template<class _Val, class _Key, class _HashFcn,\n+\t   class _ExtractKey, class _EqualKey, class _Alloc>\n     struct _Hashtable_iterator\n     {\n       typedef hashtable<_Val, _Key, _HashFcn, _ExtractKey, _EqualKey, _Alloc>\n@@ -126,9 +127,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _Hashtable* _M_ht;\n \n       _Hashtable_iterator(_Node* __n, _Hashtable* __tab)\n-      : _M_cur(__n), _M_ht(__tab) {}\n+      : _M_cur(__n), _M_ht(__tab) { }\n \n-      _Hashtable_iterator() {}\n+      _Hashtable_iterator() { }\n \n       reference\n       operator*() const\n@@ -153,8 +154,8 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       { return _M_cur != __it._M_cur; }\n     };\n \n-  template <class _Val, class _Key, class _HashFcn,\n-\t    class _ExtractKey, class _EqualKey, class _Alloc>\n+  template<class _Val, class _Key, class _HashFcn,\n+\t   class _ExtractKey, class _EqualKey, class _Alloc>\n     struct _Hashtable_const_iterator\n     {\n       typedef hashtable<_Val, _Key, _HashFcn, _ExtractKey, _EqualKey, _Alloc>\n@@ -178,12 +179,12 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       const _Hashtable* _M_ht;\n \n       _Hashtable_const_iterator(const _Node* __n, const _Hashtable* __tab)\n-      : _M_cur(__n), _M_ht(__tab) {}\n+      : _M_cur(__n), _M_ht(__tab) { }\n \n-      _Hashtable_const_iterator() {}\n+      _Hashtable_const_iterator() { }\n \n       _Hashtable_const_iterator(const iterator& __it)\n-      : _M_cur(__it._M_cur), _M_ht(__it._M_ht) {}\n+      : _M_cur(__it._M_cur), _M_ht(__it._M_ht) { }\n \n       reference\n       operator*() const\n@@ -230,14 +231,13 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n     return pos == __last ? *(__last - 1) : *pos;\n   }\n \n-  // Forward declaration of operator==.\n-  \n-  template <class _Val, class _Key, class _HF, class _Ex,\n-\t    class _Eq, class _All>\n+  // Forward declaration of operator==.  \n+  template<class _Val, class _Key, class _HF, class _Ex,\n+\t   class _Eq, class _All>\n     class hashtable;\n \n-  template <class _Val, class _Key, class _HF, class _Ex,\n-\t    class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex,\n+\t   class _Eq, class _All>\n     bool\n     operator==(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,\n \t       const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2);\n@@ -249,10 +249,9 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   // allocator type are identical.  This is because, for hashtables,\n   // this extra storage is negligible.  Additionally, a base class\n   // wouldn't serve any other purposes; it wouldn't, for example,\n-  // simplify the exception-handling code.\n-  \n-  template <class _Val, class _Key, class _HashFcn,\n-\t    class _ExtractKey, class _EqualKey, class _Alloc>\n+  // simplify the exception-handling code.  \n+  template<class _Val, class _Key, class _HashFcn,\n+\t   class _ExtractKey, class _EqualKey, class _Alloc>\n     class hashtable\n     {\n     public:\n@@ -408,7 +407,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       end() const\n       { return const_iterator(0, this); }\n \n-      template <class _Vl, class _Ky, class _HF, class _Ex, class _Eq,\n+      template<class _Vl, class _Ky, class _HF, class _Ex, class _Eq,\n \t\tclass _Al>\n         friend bool\n         operator==(const hashtable<_Vl, _Ky, _HF, _Ex, _Eq, _Al>&,\n@@ -427,7 +426,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       elems_in_bucket(size_type __bucket) const\n       {\n \tsize_type __result = 0;\n-\tfor (_Node* __cur = _M_buckets[__bucket]; __cur; __cur = __cur->_M_next)\n+\tfor (_Node* __n = _M_buckets[__bucket]; __n; __n = __n->_M_next)\n \t  __result += 1;\n \treturn __result;\n       }\n@@ -452,17 +451,17 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       iterator\n       insert_equal_noresize(const value_type& __obj);\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert_unique(_InputIterator __f, _InputIterator __l)\n         { insert_unique(__f, __l, __iterator_category(__f)); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert_equal(_InputIterator __f, _InputIterator __l)\n         { insert_equal(__f, __l, __iterator_category(__f)); }\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert_unique(_InputIterator __f, _InputIterator __l,\n \t\t      input_iterator_tag)\n@@ -471,7 +470,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    insert_unique(*__f);\n \t}\n \n-      template <class _InputIterator>\n+      template<class _InputIterator>\n         void\n         insert_equal(_InputIterator __f, _InputIterator __l,\n \t\t     input_iterator_tag)\n@@ -480,7 +479,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    insert_equal(*__f);\n \t}\n \n-      template <class _ForwardIterator>\n+      template<class _ForwardIterator>\n         void\n         insert_unique(_ForwardIterator __f, _ForwardIterator __l,\n \t\t      forward_iterator_tag)\n@@ -491,7 +490,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t    insert_unique_noresize(*__f);\n \t}\n \n-      template <class _ForwardIterator>\n+      template<class _ForwardIterator>\n         void\n         insert_equal(_ForwardIterator __f, _ForwardIterator __l,\n \t\t     forward_iterator_tag)\n@@ -513,7 +512,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tfor (__first = _M_buckets[__n];\n \t     __first && !_M_equals(_M_get_key(__first->_M_val), __key);\n \t     __first = __first->_M_next)\n-\t  {}\n+\t  { }\n \treturn iterator(__first, this);\n       }\n \n@@ -525,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \tfor (__first = _M_buckets[__n];\n \t     __first && !_M_equals(_M_get_key(__first->_M_val), __key);\n \t     __first = __first->_M_next)\n-\t  {}\n+\t  { }\n \treturn const_iterator(__first, this);\n       }\n \n@@ -633,7 +632,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_copy_from(const hashtable& __ht);\n     };\n \n-  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,\n+  template<class _Val, class _Key, class _HF, class _ExK, class _EqK,\n \t    class _All>\n     _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>&\n     _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::\n@@ -650,7 +649,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return *this;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,\n+  template<class _Val, class _Key, class _HF, class _ExK, class _EqK,\n \t    class _All>\n     inline _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>\n     _Hashtable_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::\n@@ -661,7 +660,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __tmp;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,\n+  template<class _Val, class _Key, class _HF, class _ExK, class _EqK,\n \t    class _All>\n     _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>&\n     _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::\n@@ -678,7 +677,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return *this;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _ExK, class _EqK,\n+  template<class _Val, class _Key, class _HF, class _ExK, class _EqK,\n \t    class _All>\n     inline _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>\n     _Hashtable_const_iterator<_Val, _Key, _HF, _ExK, _EqK, _All>::\n@@ -689,7 +688,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __tmp;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     bool\n     operator==(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,\n \t       const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2)\n@@ -706,7 +705,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  // Check same length of lists\n \t  for (; __cur1 && __cur2;\n \t       __cur1 = __cur1->_M_next, __cur2 = __cur2->_M_next)\n-\t    {}\n+\t    { } \n \t  if (__cur1 || __cur2)\n \t    return false;\n \t  // Now check one's elements are in the other\n@@ -730,20 +729,20 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return true;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     inline bool\n     operator!=(const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht1,\n \t       const hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>& __ht2)\n     { return !(__ht1 == __ht2); }\n \n-  template <class _Val, class _Key, class _HF, class _Extract, class _EqKey,\n+  template<class _Val, class _Key, class _HF, class _Extract, class _EqKey,\n \t    class _All>\n     inline void\n     swap(hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht1,\n \t hashtable<_Val, _Key, _HF, _Extract, _EqKey, _All>& __ht2)\n     { __ht1.swap(__ht2); }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator, bool>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     insert_unique_noresize(const value_type& __obj)\n@@ -762,7 +761,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return pair<iterator, bool>(iterator(__tmp, this), true);\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     insert_equal_noresize(const value_type& __obj)\n@@ -787,7 +786,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return iterator(__tmp, this);\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::reference\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     find_or_insert(const value_type& __obj)\n@@ -808,7 +807,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __tmp->_M_val;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator,\n \t typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::iterator>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n@@ -834,7 +833,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return _Pii(end(), end());\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     pair<typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator,\n \t typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::const_iterator>\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n@@ -863,7 +862,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return _Pii(end(), end());\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     typename hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::size_type\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     erase(const key_type& __key)\n@@ -903,7 +902,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       return __erased;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     erase(const iterator& __it)\n     {\n@@ -941,7 +940,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     erase(iterator __first, iterator __last)\n@@ -966,7 +965,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     inline void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     erase(const_iterator __first, const_iterator __last)\n@@ -977,14 +976,14 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t     const_cast<hashtable*>(__last._M_ht)));\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     inline void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     erase(const const_iterator& __it)\n     { erase(iterator(const_cast<_Node*>(__it._M_cur),\n \t\t     const_cast<hashtable*>(__it._M_ht))); }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     resize(size_type __num_elements_hint)\n@@ -1031,7 +1030,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     _M_erase_bucket(const size_type __n, _Node* __first, _Node* __last)\n@@ -1056,7 +1055,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     _M_erase_bucket(const size_type __n, _Node* __last)\n@@ -1072,7 +1071,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t}\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     clear()\n@@ -1091,7 +1090,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n       _M_num_elements = 0;\n     }\n \n-  template <class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n+  template<class _Val, class _Key, class _HF, class _Ex, class _Eq, class _All>\n     void\n     hashtable<_Val, _Key, _HF, _Ex, _Eq, _All>::\n     _M_copy_from(const hashtable& __ht)"}, {"sha": "7597b52a3ce10ca1fc8194ff7bdb995e946da1bb", "filename": "libstdc++-v3/include/ext/pb_assoc/detail/standard_policies.hpp", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fstandard_policies.hpp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fstandard_policies.hpp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fpb_assoc%2Fdetail%2Fstandard_policies.hpp?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*-\n \n-// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -66,19 +66,16 @@ namespace pb_assoc\n \n #ifdef __GNUC__\n \n-#define PB_ASSOC_HASH_NAMESPACE \\\n-\t__gnu_cxx\n-\n     template<typename Key>\n     struct def_hash_fn\n     {\n-      typedef PB_ASSOC_HASH_NAMESPACE::hash<Key> type;\n+      typedef __gnu_cxx::hash<Key> type;\n     };\n \n     template<typename Key>\n     struct def_eq_fn\n     {\n-      typedef PB_ASSOC_HASH_NAMESPACE::equal_to<Key> type;\n+      typedef std::equal_to<Key> type;\n     };\n \n #elif defined(_MSC_VER)\n@@ -155,10 +152,6 @@ namespace pb_assoc\n       typedef pb_assoc::move_to_front_lu_policy<> type;\n     };\n \n-#ifdef __GNUC__\n-#undef PB_ASSOC_HASH_NAMESPACE\n-#endif // #ifdef __GNUC__\n-\n     template<class Comb_Probe_Fn>\n     struct def_probe_fn\n     {"}, {"sha": "f88fbc740d80ec5b0e0625786ba2d57734a47bfe", "filename": "libstdc++-v3/src/compatibility.cc", "status": "modified", "additions": 3, "deletions": 74, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcompatibility.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -44,7 +44,6 @@\n #define ignore ignoreXX\n #define eq eqXX\n #define _List_node_base _List_node_baseXX\n-#define __gnu_debug __gnu_debugXX\n #endif\n \n #include <string>\n@@ -368,30 +367,15 @@ _GLIBCXX_END_NAMESPACE\n #include <bits/compatibility.h>\n #undef _GLIBCXX_APPLY_SYMVER\n \n+\n /* gcc-3.4.0\n _ZN10__gnu_norm15_List_node_base4hookEPS0_;\n _ZN10__gnu_norm15_List_node_base4swapERS0_S1_;\n _ZN10__gnu_norm15_List_node_base6unhookEv;\n _ZN10__gnu_norm15_List_node_base7reverseEv;\n _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_;\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv;\n-_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv;\n-_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_;\n-_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv;\n-_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv;\n-_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv;\n-_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_;\n-_ZNK11__gnu_debug16_Error_formatter8_M_errorEv;\n-_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE;\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc;\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_;\n-_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc;\n-_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc;\n */\n-#include \"debug_list.cc\"\n-#include \"debug.cc\"\n-\n+#include \"list.cc\"\n _GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX4hookEPS_, \\\n _ZN10__gnu_norm15_List_node_base4hookEPS0_, \\\n GLIBCXX_3.4)\n@@ -411,62 +395,7 @@ GLIBCXX_3.4)\n _GLIBCXX_ASM_SYMVER(_ZNSt17_List_node_baseXX8transferEPS_S0_, \\\n _ZN10__gnu_norm15_List_node_base8transferEPS0_S1_, \\\n GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb, \\\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb, \\\n-\t\t    GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_iterator_base9_M_detachEv, \\\n-_ZN11__gnu_debug19_Safe_iterator_base9_M_detachEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX19_Safe_iterator_base11_M_singularEv,\\\n-_ZNK11__gnu_debug19_Safe_iterator_base11_M_singularEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX19_Safe_iterator_base14_M_can_compareERKS0_, \\\n-_ZNK11__gnu_debug19_Safe_iterator_base14_M_can_compareERKS0_, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base13_M_detach_allEv, \\\n-_ZN11__gnu_debug19_Safe_sequence_base13_M_detach_allEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base18_M_detach_singularEv, \\\n-_ZN11__gnu_debug19_Safe_sequence_base18_M_detach_singularEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base22_M_revalidate_singularEv, \\\n-_ZN11__gnu_debug19_Safe_sequence_base22_M_revalidate_singularEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNSt13__gnu_debugXX19_Safe_sequence_base7_M_swapERS0_, \\\n-_ZN11__gnu_debug19_Safe_sequence_base7_M_swapERS0_, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter8_M_errorEv, \\\n-_ZNK11__gnu_debug16_Error_formatter8_M_errorEv, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_M_messageENS_13_Debug_msg_idE, \\\n-_ZNK11__gnu_debug16_Error_formatter10_M_messageENS_13_Debug_msg_idE, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc, \\\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter14_M_print_fieldEPKS0_PKc, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_, \\\n-_ZNK11__gnu_debug16_Error_formatter10_Parameter20_M_print_descriptionEPKS0_, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter13_M_print_wordEPKc, \\\n-_ZNK11__gnu_debug16_Error_formatter13_M_print_wordEPKc, \\\n-GLIBCXX_3.4)\n-\n-_GLIBCXX_ASM_SYMVER(_ZNKSt13__gnu_debugXX16_Error_formatter15_M_print_stringEPKc, \\\n-_ZNK11__gnu_debug16_Error_formatter15_M_print_stringEPKc, \\\n-GLIBCXX_3.4)\n+#undef _List_node_base\n \n // gcc-4.1.0\n #ifdef _GLIBCXX_LONG_DOUBLE_COMPAT"}, {"sha": "8505f1e9bdc9d4524925e74d26be3fc82123885e", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,6 +1,6 @@\n // Debugging mode support code -*- C++ -*-\n \n-// Copyright (C) 2003, 2004, 2005\n+// Copyright (C) 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -44,8 +44,6 @@ namespace __gnu_internal\n   static __glibcxx_mutex_define_initialized(iterator_base_mutex);\n } // namespace __gnu_internal\n \n-namespace std\n-{\n namespace __gnu_debug\n {\n   const char* _S_debug_messages[] = \n@@ -670,4 +668,3 @@ namespace __gnu_debug\n     _Error_formatter::_M_format_word(char*, int, const char*, \n \t\t\t\t     const char*) const;\n } // namespace __gnu_debug\n-} // namespace std"}, {"sha": "cec2c3885b6cd4e4c0380374557ea12644291c3e", "filename": "libstdc++-v3/src/debug_list.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug_list.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -29,6 +29,5 @@\n \n #define _GLIBCXX_DEBUG\n \n-#include <bits/c++config.h>\n-\n #include \"list.cc\"\n+"}, {"sha": "652b1c31712db9defc940540113646b6f2d8a9f4", "filename": "libstdc++-v3/testsuite/23_containers/vector/26412-1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-1.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "previous_filename": "libstdc++-v3/testsuite/23_containers/vector/26412.cc"}, {"sha": "d0caf1ec94f24b3caaf132e232bdd6cbc49e5035", "filename": "libstdc++-v3/testsuite/23_containers/vector/26412-2.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2F26412-2.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -0,0 +1,35 @@\n+// { dg-do compile }\n+// -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#define debug 0\n+\n+#include <debug/vector>\n+\n+// libstdc++26412"}, {"sha": "571a2936ed2cdd2871b16e3d52d386b0239573ba", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/heap.cc", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -1,4 +1,5 @@\n-// Copyright (C) 2001, 2002, 2003, 2004, 2005 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,8 +22,6 @@\n #include <algorithm>\n #include <testsuite_hooks.h>\n \n-bool test __attribute__((unused)) = true;\n-\n const int A[] = {1, 11, 12, 3, 10, 6, 17, 4, 8, 2, 5, 13, 9, 15, 14, 16, 7};\n const int B[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};\n const int C[] = {17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n@@ -34,28 +33,30 @@ const int N = sizeof(A) / sizeof(int);\n class Gt\n {\n public:\n-  static int count() { return itsCount; }\n-  static void reset() { itsCount = 0; }\n+  static int count() { return _M_count; }\n+  static void reset() { _M_count = 0; }\n   \n   bool\n   operator()(const int& x, const int& y)\n   {\n-    ++itsCount;\n+    ++_M_count;\n     return x > y; \n   }\n \n private:\n-  static int itsCount;\n+  static int _M_count;\n };\n \n-int Gt::itsCount = 0;\n+int Gt::_M_count = 0;\n \n-// Exercise all of the heap functions for operator<.  The\n-// intermediate results between push_heap and pop_heap and\n-// make_heap and sort_heap are not checked (they could be).\n+// Exercise all of the heap functions for operator<.  The intermediate\n+// results between push_heap and pop_heap and make_heap and sort_heap\n+// are not checked (they could be).\n void\n test01()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   // sort array s1 using push_heap/pop_heap\n   int s1[N];\n   std::copy(A, A + N, s1);\n@@ -84,8 +85,11 @@ test01()\n void\n test02()\n {\n+  bool test __attribute__((unused)) = true;\n+\n   Gt gt;\n-//    const int logN = static_cast<int>(std::log(static_cast<double>(N)) + 0.5);\n+\n+  //const int logN = static_cast<int>(std::log(static_cast<double>(N)) + 0.5);\n   const int logN = 3;\n   \n   int s1[N];\n@@ -95,14 +99,18 @@ test02()\n   for (int i = 2; i <= N; ++i)\n     {\n       std::push_heap(s1, s1 + i, gt);\n+#ifndef _GLIBCXX_DEBUG\n       VERIFY(gt.count() <= logN);\n+#endif\n       gt.reset();\n     }\n \n   for (int i = N; i >= 2; --i)\n     {\n       std::pop_heap(s1, s1 + i, gt);\n+#ifndef _GLIBCXX_DEBUG\n       VERIFY(gt.count() <= 2 * logN);\n+#endif\n       gt.reset();\n     }\n \n@@ -114,11 +122,15 @@ test02()\n   VERIFY(std::equal(s2, s2 + N, A));\n   \n   std::make_heap(s2, s2 + N, gt);\n+#ifndef _GLIBCXX_DEBUG\n   VERIFY(gt.count() <= 3 * N);\n+#endif\n   gt.reset();\n \n   std::sort_heap(s2, s2 + N, gt);\n+#ifndef _GLIBCXX_DEBUG\n   VERIFY(gt.count() <= N * logN);\n+#endif\n   \n   VERIFY(std::equal(s2, s2 + N, C));\n }"}, {"sha": "b43c188b8df87dc3cd2fe548c5a1844e053f12a7", "filename": "libstdc++-v3/testsuite/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45f388bb44a9025c0b8284b84f1524474cff14b5/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftestsuite_abi.cc?ref=45f388bb44a9025c0b8284b84f1524474cff14b5", "patch": "@@ -186,6 +186,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.5\");\n       known_versions.push_back(\"GLIBCXX_3.4.6\");\n       known_versions.push_back(\"GLIBCXX_3.4.7\");\n+      known_versions.push_back(\"GLIBCXX_3.4.8\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"CXXABI_1.3\");"}]}