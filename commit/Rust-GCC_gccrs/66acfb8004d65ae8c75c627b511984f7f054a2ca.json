{"sha": "66acfb8004d65ae8c75c627b511984f7f054a2ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhY2ZiODAwNGQ2NWFlOGM3NWM2MjdiNTExOTg0ZjdmMDU0YTJjYQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2019-11-22T23:48:25Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2019-11-22T23:48:25Z"}, "message": "PR c++/88337 - P1327R1: Allow polymorphic typeid in constexpr.\n\nPart of P1327R1 is to allow typeid with an operand of polymorphic type in\nconstexpr.  I found that we pretty much support it already, the only tweak\nwas to allow TYPEID_EXPR (only created in a template) in constexpr in C++20.\n\n\t* constexpr.c (potential_constant_expression_1): Allow a typeid\n\texpression whose operand is of polymorphic type in constexpr in\n\tC++20.\n\t* rtti.c (build_typeid): Remove obsolete FIXME comment.\n\n\t* g++.dg/cpp2a/constexpr-typeid1.C: New test.\n\t* g++.dg/cpp2a/constexpr-typeid2.C: New test.\n\t* g++.dg/cpp2a/constexpr-typeid3.C: New test.\n\t* g++.dg/cpp2a/constexpr-typeid4.C: New test.\n\nFrom-SVN: r278635", "tree": {"sha": "fbb1081d2d91c1f058d8bd2e05325b0119def46d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbb1081d2d91c1f058d8bd2e05325b0119def46d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66acfb8004d65ae8c75c627b511984f7f054a2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66acfb8004d65ae8c75c627b511984f7f054a2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66acfb8004d65ae8c75c627b511984f7f054a2ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66acfb8004d65ae8c75c627b511984f7f054a2ca/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdaf8be1b2e3514b8bbcdd1042136e7d91b3c3f3"}], "stats": {"total": 186, "additions": 181, "deletions": 5}, "files": [{"sha": "444b339fe57618acd5d94127a329b7dfce496a8c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -1,3 +1,11 @@\n+2019-11-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88337 - P1327R1: Allow polymorphic typeid in constexpr.\n+\t* constexpr.c (potential_constant_expression_1): Allow a typeid\n+\texpression whose operand is of polymorphic type in constexpr in\n+\tC++20.\n+\t* rtti.c (build_typeid): Remove obsolete FIXME comment.\n+\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/90677"}, {"sha": "658455cce963fcb8ee1cd36eb0cb6c9276e07969", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -7021,11 +7021,14 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return false;\n \n     case TYPEID_EXPR:\n-      /* -- a typeid expression whose operand is of polymorphic\n-            class type;  */\n+      /* In C++20, a typeid expression whose operand is of polymorphic\n+\t class type can be constexpr.  */\n       {\n         tree e = TREE_OPERAND (t, 0);\n-        if (!TYPE_P (e) && !type_dependent_expression_p (e)\n+\tif (cxx_dialect < cxx2a\n+\t    && strict\n+\t    && !TYPE_P (e)\n+\t    && !type_dependent_expression_p (e)\n \t    && TYPE_POLYMORPHIC_P (TREE_TYPE (e)))\n           {\n             if (flags & tf_error)"}, {"sha": "da685961c704233ffcef33312ae7549c6427f071", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -353,8 +353,6 @@ build_typeid (tree exp, tsubst_flags_t complain)\n   if (processing_template_decl)\n     return build_min (TYPEID_EXPR, const_type_info_type_node, exp);\n \n-  /* FIXME when integrating with c_fully_fold, mark\n-     resolves_to_fixed_type_p case as a non-constant expression.  */\n   if (TYPE_POLYMORPHIC_P (TREE_TYPE (exp))\n       && ! resolves_to_fixed_type_p (exp, &nonnull)\n       && ! nonnull)"}, {"sha": "1109cd65d05c436ae6366eceb31e442d3ff11afe", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -1,3 +1,11 @@\n+2019-11-22  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/88337 - P1327R1: Allow polymorphic typeid in constexpr.\n+\t* g++.dg/cpp2a/constexpr-typeid1.C: New test.\n+\t* g++.dg/cpp2a/constexpr-typeid2.C: New test.\n+\t* g++.dg/cpp2a/constexpr-typeid3.C: New test.\n+\t* g++.dg/cpp2a/constexpr-typeid4.C: New test.\n+\n 2019-11-22  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/90677"}, {"sha": "a81f649b44b8438d230945251de7d41db77823b4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid1.C", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid1.C?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -0,0 +1,47 @@\n+// PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n+// { dg-do compile { target c++2a } }\n+// Test non-polymorphic type.\n+\n+#include <typeinfo>\n+\n+struct B {\n+  const std::type_info &ti = typeid (*this);\n+};\n+\n+struct D : B { };\n+\n+constexpr B b;\n+constexpr D d;\n+\n+static_assert (&b.ti == &typeid (B));\n+static_assert (&B{}.ti == &typeid (B));\n+static_assert (&B().ti == &typeid (B));\n+static_assert (&typeid ((B())) == &typeid (B));\n+static_assert (&typeid ((B{})) == &typeid (B));\n+\n+static_assert (&d.ti == &typeid (B));\n+static_assert (&D{}.ti == &typeid (B));\n+static_assert (&D().ti == &typeid (B));\n+static_assert (&typeid ((D())) == &typeid (D));\n+static_assert (&typeid ((D{})) == &typeid (D));\n+\n+extern D ed;\n+static_assert (&typeid (ed) == &typeid (D));\n+\n+constexpr const B &r = d;\n+static_assert (&typeid (r) == &typeid (B));\n+\n+constexpr bool\n+test ()\n+{\n+  // If expression is not a glvalue expression of polymorphic type,\n+  // typeid does not evaluate the expression\n+  bool ok = true;\n+  (void) typeid (ok = false, D());\n+  (void) typeid (ok = false, B());\n+  (void) typeid (ok = false, b);\n+  (void) typeid (ok = false, d);\n+  return ok;\n+}\n+\n+static_assert (test ());"}, {"sha": "51c8fb451b8e6a6594e7b0cf880233ce777b7e5c", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid2.C", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid2.C?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -0,0 +1,60 @@\n+// PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n+// { dg-do compile { target c++2a } }\n+// Test polymorphic type.\n+\n+#include <typeinfo>\n+\n+struct B {\n+  virtual void foo ();\n+  const std::type_info &ti_base = typeid (*this);\n+};\n+\n+struct D : B {\n+  const std::type_info &ti = typeid (*this);\n+};\n+\n+constexpr B b;\n+constexpr D d;\n+\n+static_assert (&b.ti_base == &typeid (B));\n+static_assert (&B{}.ti_base == &typeid (B));\n+static_assert (&B().ti_base == &typeid (B));\n+static_assert (&typeid ((B())) == &typeid (B));\n+static_assert (&typeid ((B{})) == &typeid (B));\n+\n+static_assert (&d.ti == &typeid (D));\n+static_assert (&D{}.ti == &typeid (D));\n+static_assert (&D().ti == &typeid (D));\n+static_assert (&typeid ((D())) == &typeid (D));\n+static_assert (&typeid ((D{})) == &typeid (D));\n+\n+extern D ed;\n+// ??? Should this succeed?\n+static_assert (&typeid (ed) == &typeid (D));\n+\n+constexpr const B &r = d;\n+static_assert (&typeid (r) == &typeid (D));\n+\n+constexpr bool\n+test ()\n+{\n+  // If expression is a glvalue expression that identifies an object\n+  // of a polymorphic type, the typeid expression evaluates the expression.\n+  bool ok = true;\n+  // Not a glvalue.\n+  (void) typeid (ok = false, D());\n+  (void) typeid (ok = false, B());\n+  if (!ok)\n+    return false;\n+\n+  // Polymorphic glvalue -- this needs to be evaluated.\n+  ok = false;\n+  (void) typeid (ok = true, b);\n+  if (!ok)\n+    return false;\n+  ok = false;\n+  (void) typeid (ok = true, d);\n+  return ok;\n+}\n+\n+static_assert (test ());"}, {"sha": "38b9e609a9f7a6279d7d908f7e195880212e1ce4", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid3.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid3.C?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n+// { dg-do compile { target c++2a } }\n+// Test typeid in a template.\n+\n+#include <typeinfo>\n+\n+struct B { virtual void fn (); };\n+struct D : B { };\n+\n+void abort ();\n+\n+template<typename>\n+constexpr void\n+fn ()\n+{\n+  D d;\n+  if (&typeid (d) != &typeid (D))\n+   abort ();\n+}\n+constexpr bool b1 = (fn<int>(), true);\n+\n+// Type-dependent.\n+template<typename T>\n+constexpr void\n+fn2 ()\n+{\n+  T t{};\n+  if (&typeid (t) != &typeid (T))\n+   abort ();\n+}\n+constexpr bool b2 = (fn2<int>(), true);\n+constexpr bool b3 = (fn2<B>(), true);\n+constexpr bool b4 = (fn2<D>(), true);"}, {"sha": "0a99aae9bf9e27587f6f11bacd0ed219809bbb21", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-typeid4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66acfb8004d65ae8c75c627b511984f7f054a2ca/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-typeid4.C?ref=66acfb8004d65ae8c75c627b511984f7f054a2ca", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/88337 - Implement P1327R1: Allow dynamic_cast/typeid in constexpr.\n+// { dg-do compile { target c++17 } }\n+// Test typeid in a template.\n+\n+#include <typeinfo>\n+\n+struct B { virtual void f(); };\n+struct B2 : B { };\n+\n+template<typename T>\n+constexpr bool\n+fn ()\n+{\n+  constexpr B2 b2;\n+  static_assert(&typeid(b2) == &typeid(B2)); // { dg-error \".typeid. is not a constant expression because .b2. is of polymorphic type|non-constant condition\" \"\" { target c++17_down } }\n+  return true;\n+}\n+\n+static_assert (fn<int>());"}]}