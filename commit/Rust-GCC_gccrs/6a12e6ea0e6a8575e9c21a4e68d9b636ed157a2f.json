{"sha": "6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "node_id": "C_kwDOANBUbNoAKDZhMTJlNmVhMGU2YTg1NzVlOWMyMWE0ZTY4ZDliNjM2ZWQxNTdhMmY", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-02-16T12:25:45Z"}, "committer": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-03-30T11:52:30Z"}, "message": "libproc_macro: Make internal Punct type ffi safe\n\nThe internal Punct rust type was not entirely ffi safe, thus these\nchanges in order for it to be used by both parts of the libproc_macro.\nChangeLog:\n\n\t* librust/proc_macro/rust/bridge/punct.rs: Change internal Punct\n\trepresentation.\n\t* librust/proc_macro/rust/punct.rs: Change Punct interface\n\tinteraction.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "c7de7be5d2ffd0d916e7a0d27fadedbc015bbd0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7de7be5d2ffd0d916e7a0d27fadedbc015bbd0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e41c961955d9faf8de28aa5096a592573d01ca3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e41c961955d9faf8de28aa5096a592573d01ca3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e41c961955d9faf8de28aa5096a592573d01ca3b"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "f1bb9141ed0ea153209d2185382256d82bdc8795", "filename": "librust/proc_macro/rust/bridge/punct.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fbridge%2Fpunct.rs?ref=6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "patch": "@@ -1,16 +1,23 @@\n use bridge::span::Span;\n+use std::convert::TryInto;\n+use std::ffi::c_uchar;\n use Spacing;\n \n #[repr(C)]\n #[derive(Clone, Debug)]\n pub struct Punct {\n-    pub(crate) ch: char,\n+    pub(crate) ch: c_uchar,\n     pub(crate) spacing: Spacing,\n }\n \n impl Punct {\n     pub fn new(ch: char, spacing: Spacing) -> Self {\n-        Punct { ch, spacing }\n+        Punct {\n+            ch: ch\n+                .try_into()\n+                .expect(\"Failed to convert rust char to c char\"),\n+            spacing,\n+        }\n     }\n \n     pub fn span(&self) -> Span {"}, {"sha": "7320a1e6514e0ac246a124e6b9084c394048d731", "filename": "librust/proc_macro/rust/punct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f/librust%2Fproc_macro%2Frust%2Fpunct.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f/librust%2Fproc_macro%2Frust%2Fpunct.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/librust%2Fproc_macro%2Frust%2Fpunct.rs?ref=6a12e6ea0e6a8575e9c21a4e68d9b636ed157a2f", "patch": "@@ -38,7 +38,7 @@ impl Punct {\n \n     /// Get the value for this punctuation character as `char`.\n     pub fn as_char(&self) -> char {\n-        self.0.ch\n+        self.0.ch.into()\n     }\n \n     /// Get the [`Spacing`] of this punctuation character, indicating whether\n@@ -77,12 +77,12 @@ impl fmt::Debug for Punct {\n \n impl PartialEq<char> for Punct {\n     fn eq(&self, rhs: &char) -> bool {\n-        self.0.ch == *rhs\n+        self.as_char() == *rhs\n     }\n }\n \n impl PartialEq<Punct> for char {\n     fn eq(&self, rhs: &Punct) -> bool {\n-        *self == rhs.0.ch\n+        *self == rhs.as_char()\n     }\n }"}]}