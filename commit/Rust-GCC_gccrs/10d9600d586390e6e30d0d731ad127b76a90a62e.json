{"sha": "10d9600d586390e6e30d0d731ad127b76a90a62e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkOTYwMGQ1ODYzOTBlNmUzMGQwZDczMWFkMTI3Yjc2YTkwYTYyZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-02-17T10:46:57Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-02-17T10:46:57Z"}, "message": "re PR libstdc++/26250 (stringbuf::overflow() fails to set egptr() same as epptr())\n\n2006-02-17  Paolo Carlini  <pcarlini@suse.de>\n\t    Howard Hinnant  <hhinnant@apple.com>\n\n\tPR libstdc++/26250\n\t* include/bits/sstream.tcc (basic_stringbuf<>::overflow): Tweak\n\tto leave epgtr() just past the new write position, as per the\n\trelevant bits of 27.7.1.3/8 (not changed by DR 432).\n\t* testsuite/27_io/basic_stringbuf/overflow/char/26250.cc: New.\n\t* testsuite/27_io/basic_stringbuf/overflow/wchar_t/26250.cc: Same.\n\n\t* docs/html/ext/howto.html: Add entries for DR 169 and DR 432.\n\n\t* include/std/std_sstream.h (basic_stringbuf<>::_M_sync): Move out\n\tof line...\n\t* include/bits/sstream.tcc: ... here.\n\nCo-Authored-By: Howard Hinnant <hhinnant@apple.com>\n\nFrom-SVN: r111177", "tree": {"sha": "7d5556d4cc5632af4f60606bdc602c9e59bb2854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d5556d4cc5632af4f60606bdc602c9e59bb2854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d9600d586390e6e30d0d731ad127b76a90a62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d9600d586390e6e30d0d731ad127b76a90a62e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d9600d586390e6e30d0d731ad127b76a90a62e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d9600d586390e6e30d0d731ad127b76a90a62e/comments", "author": null, "committer": null, "parents": [{"sha": "b16caf72c73fd21bc729b9f039869800194bb1a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b16caf72c73fd21bc729b9f039869800194bb1a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b16caf72c73fd21bc729b9f039869800194bb1a0"}], "stats": {"total": 234, "additions": 196, "deletions": 38}, "files": [{"sha": "99af0811454f84ad4e7fb0ca81ce3851c12c266a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -1,3 +1,19 @@\n+2006-02-17  Paolo Carlini  <pcarlini@suse.de>\n+\t    Howard Hinnant  <hhinnant@apple.com>\n+\n+\tPR libstdc++/26250\n+\t* include/bits/sstream.tcc (basic_stringbuf<>::overflow): Tweak\n+\tto leave epgtr() just past the new write position, as per the\n+\trelevant bits of 27.7.1.3/8 (not changed by DR 432).\n+\t* testsuite/27_io/basic_stringbuf/overflow/char/26250.cc: New.\n+\t* testsuite/27_io/basic_stringbuf/overflow/wchar_t/26250.cc: Same.\n+\n+\t* docs/html/ext/howto.html: Add entries for DR 169 and DR 432.\n+\n+\t* include/std/std_sstream.h (basic_stringbuf<>::_M_sync): Move out\n+\tof line...\n+\t* include/bits/sstream.tcc: ... here.\n+\n 2006-02-16  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR libstdc++/14939"}, {"sha": "cf87f6c55fa15a9eae265c419c1d0bf1f49b36bc", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -358,6 +358,12 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         calculating an incorrect number of characters to write.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#169\">169</a>:\n+        <em>Bad efficiency of overflow() mandated</em>\n+    </dt>\n+    <dd>Grow efficiently the internal array object.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#171\">171</a>:\n         <em>Strange seekpos() semantics due to joint position</em>\n     </dt>\n@@ -536,6 +542,13 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n     <dd>Implement Option 3, as per N1599.\n     </dd>\n \n+    <dt><a href=\"lwg-defects.html#432\">432</a>:\n+        <em>432. stringbuf::overflow() makes only one write position\n+\t    available</em>\n+    </dt>\n+    <dd>Implement the resolution, beyond DR 169.\n+    </dd>\n+\n     <dt><a href=\"lwg-defects.html#434\">434</a>:\n         <em>bitset::to_string() hard to use</em>\n     </dt>"}, {"sha": "95d3d4699beed4d4892c8b1d32fd43ed9c662056", "filename": "libstdc++-v3/include/bits/sstream.tcc", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fsstream.tcc?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -1,6 +1,6 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -101,26 +101,34 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       // Try to append __c into output sequence in one of two ways.\n       // Order these tests done in is unspecified by the standard.\n+      const char_type __conv = traits_type::to_char_type(__c);\n       if (!__testput)\n \t{\n-\t  // NB: Start ostringstream buffers at 512 chars. This is an\n+\t  // NB: Start ostringstream buffers at 512 chars.  This is an\n \t  // experimental value (pronounced \"arbitrary\" in some of the\n \t  // hipper english-speaking countries), and can be changed to\n \t  // suit particular needs.\n-\t  // Then, in virtue of DR 169 (TC) we are allowed to grow more\n-\t  // than one char.\n+\t  //\n+\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t  // 169. Bad efficiency of overflow() mandated\n+\t  // 432. stringbuf::overflow() makes only one write position\n+\t  //      available\n \t  const __size_type __opt_len = std::max(__size_type(2 * __capacity),\n \t\t\t\t\t\t __size_type(512));\n \t  const __size_type __len = std::min(__opt_len, __max_size);\n \t  __string_type __tmp;\n \t  __tmp.reserve(__len);\n \t  if (this->pbase())\n \t    __tmp.assign(this->pbase(), this->epptr() - this->pbase());\n+\t  __tmp.push_back(__conv);\n \t  _M_string.swap(__tmp);\n \t  _M_sync(const_cast<char_type*>(_M_string.data()),\n \t\t  this->gptr() - this->eback(), this->pptr() - this->pbase());\n \t}\n-      return this->sputc(traits_type::to_char_type(__c));\n+      else\n+\t*this->pptr() = __conv;\n+      this->pbump(1);\n+      return __c;\n     }\n \n   template <class _CharT, class _Traits, class _Alloc>\n@@ -203,8 +211,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  _M_update_egptr();\n \n \t  const off_type __pos(__sp);\n-\t  const bool __testpos = 0 <= __pos\n-\t                         && __pos <=  this->egptr() - __beg;\n+\t  const bool __testpos = (0 <= __pos\n+\t\t\t\t  && __pos <= this->egptr() - __beg);\n \t  if (__testpos)\n \t    {\n \t      if (__testin)\n@@ -217,6 +225,38 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __ret;\n     }\n \n+  // Assumes: contents of _M_string and internal buffer match exactly.\n+  // __i == _M_in_cur - _M_in_beg\n+  // __o == _M_out_cur - _M_out_beg\n+  template <class _CharT, class _Traits, class _Alloc>\n+    void\n+    basic_stringbuf<_CharT, _Traits, _Alloc>::\n+    _M_sync(char_type* __base, __size_type __i, __size_type __o)\n+    {\n+      const bool __testin = _M_mode & ios_base::in;\n+      const bool __testout = _M_mode & ios_base::out;\n+      char_type* __end = __base + _M_string.size();\n+      \n+      if (__testin)\n+\tthis->setg(__base, __base + __i, __end);\n+      if (__testout)\n+\t{\n+\t  // If __base comes from setbuf we cannot trust capacity()\n+\t  // to match the size of the buffer area:  in general, after\n+\t  // Step 1 in setbuf, _M_string.capacity() >= __n.\n+\t  if (__base == _M_string.data())\n+\t    this->setp(__base, __base + _M_string.capacity());\n+\t  else\n+\t    this->setp(__base, __end);\n+\t  this->pbump(__o);\n+\t  // egptr() always tracks the string end.  When !__testin,\n+\t  // for the correct functioning of the streambuf inlines\n+\t  // the other get area pointers are identical.\n+\t  if (!__testin)\n+\t    this->setg(__end, __end, __end);\n+\t}\n+    }\n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB:  This syntax is a GNU extension."}, {"sha": "712bf7ba3c705061095929f571b9def41aca9844", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -1,6 +1,6 @@\n // String based streams -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2002, 2003, 2004, 2005\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -228,37 +228,10 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       // Internal function for correctly updating the internal buffer\n-      // for a particular _M_string, due to initialization or\n-      // re-sizing of an existing _M_string.\n-      // Assumes: contents of _M_string and internal buffer match exactly.\n-      // __i == _M_in_cur - _M_in_beg\n-      // __o == _M_out_cur - _M_out_beg\n+      // for a particular _M_string, due to initialization or re-sizing\n+      // of an existing _M_string.\n       void\n-      _M_sync(char_type* __base, __size_type __i, __size_type __o)\n-      {\n-\tconst bool __testin = _M_mode & ios_base::in;\n-\tconst bool __testout = _M_mode & ios_base::out;\n-\tchar_type* __end = __base + _M_string.size();\n-\n-\tif (__testin)\n-\t  this->setg(__base, __base + __i, __end);\n-\tif (__testout)\n-\t  {\n-\t    // If __base comes from setbuf we cannot trust capacity()\n-\t    // to match the size of the buffer area: in general, after\n-\t    // Step 1 above, _M_string.capacity() >= __n.\n-\t    if (__base == _M_string.data())\n-\t      this->setp(__base, __base + _M_string.capacity());\n-\t    else\n-\t      this->setp(__base, __end);\n-\t    this->pbump(__o);\n-\t    // egptr() always tracks the string end. When !__testin,\n-\t    // for the correct functioning of the streambuf inlines\n-\t    // the other get area pointers are identical.\n-\t    if (!__testin)\n-\t      this->setg(__end, __end, __end);\n-\t  }\n-      }\n+      _M_sync(char_type* __base, __size_type __i, __size_type __o);\n \n       // Internal function for correctly updating egptr() to the actual\n       // string end."}, {"sha": "bf7dcde7d03ca7c692782fd358321a7822eca3cd", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/char/26250.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F26250.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F26250.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fchar%2F26250.cc?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct pubbuf\n+: std::stringbuf\n+{\n+  using std::stringbuf::eback;\n+  using std::stringbuf::egptr;\n+  using std::stringbuf::pbase;\n+  using std::stringbuf::pptr;\n+  using std::stringbuf::epptr;\n+  using std::stringbuf::overflow;\n+};\n+\n+// libstdc++/26250\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  pubbuf buf;\n+\n+  VERIFY( buf.overflow('x') == 'x' );\n+  VERIFY( buf.pptr() - buf.pbase() == 1 );\n+ \n+  // not required but good for efficiency\n+  // NB: we are implementing DR 169 and DR 432\n+  const int write_positions = buf.epptr() - buf.pbase();\n+  VERIFY( write_positions > 1 );\n+\n+  // 27.7.1.3, p8:\n+  VERIFY( buf.egptr() - buf.eback() == 1 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c835ea9514575ddcbd302c7dc980abb5edacb8d7", "filename": "libstdc++-v3/testsuite/27_io/basic_stringbuf/overflow/wchar_t/26250.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F26250.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d9600d586390e6e30d0d731ad127b76a90a62e/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F26250.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_stringbuf%2Foverflow%2Fwchar_t%2F26250.cc?ref=10d9600d586390e6e30d0d731ad127b76a90a62e", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct pubbuf\n+: std::wstringbuf\n+{\n+  using std::wstringbuf::eback;\n+  using std::wstringbuf::egptr;\n+  using std::wstringbuf::pbase;\n+  using std::wstringbuf::pptr;\n+  using std::wstringbuf::epptr;\n+  using std::wstringbuf::overflow;\n+};\n+\n+// libstdc++/26250\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  \n+  pubbuf buf;\n+\n+  VERIFY( buf.overflow(L'x') == L'x' );\n+  VERIFY( buf.pptr() - buf.pbase() == 1 );\n+ \n+  // not required but good for efficiency\n+  // NB: we are implementing DR 169 and DR 432\n+  const int write_positions = buf.epptr() - buf.pbase();\n+  VERIFY( write_positions > 1 );\n+\n+  // 27.7.1.3, p8:\n+  VERIFY( buf.egptr() - buf.eback() == 1 );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}]}