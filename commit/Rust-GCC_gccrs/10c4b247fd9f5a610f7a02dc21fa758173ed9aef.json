{"sha": "10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBjNGIyNDdmZDlmNWE2MTBmN2EwMmRjMjFmYTc1ODE3M2VkOWFlZg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-06-28T22:11:19Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2001-06-28T22:11:19Z"}, "message": "Makefile.in (OBJS): Add df.o\n\n        * Makefile.in (OBJS): Add df.o\n        (df.o): Add dependencies.\n        * basic-block.h (flow_depth_first_order_compute): Declare.\n        * flow.c (flow_depth_first_order_compute): No longer declare.\n        Make external.\n        * df.c, df.h: New files.\n\t* po/POTFILES.in: Update for new files.\n\nFrom-SVN: r43647", "tree": {"sha": "f878eace31893b70b0dfb05d8672c204fb07c75f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f878eace31893b70b0dfb05d8672c204fb07c75f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/comments", "author": null, "committer": null, "parents": [{"sha": "0f40f9f7c68aadde4d52b4fc04d016b72451d238", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f40f9f7c68aadde4d52b4fc04d016b72451d238", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f40f9f7c68aadde4d52b4fc04d016b72451d238"}], "stats": {"total": 4091, "additions": 4077, "deletions": 14}, "files": [{"sha": "fd30ddb31af12a935ea6348980ad3243e8e973e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -1,3 +1,13 @@\n+2001-06-28  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\t    Jeff Law <law@redhat.com>\n+\n+\t* Makefile.in (OBJS): Add df.o\n+\t(df.o): Add dependencies.\n+\t* basic-block.h (flow_depth_first_order_compute): Declare.\n+\t* flow.c (flow_depth_first_order_compute): No longer declare.\n+\tMake external.\n+\t* df.c, df.h: New files.\n+\n 2001-06-28  Zack Weinberg  <zackw@stanford.edu>\n \n \t* config/i386/i386.md: Global update to use new string syntax"}, {"sha": "58ac2c18f0329b9713ad2e54314ca246157c337d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -735,18 +735,19 @@ C_OBJS = c-parse.o c-lang.o $(C_AND_OBJC_OBJS)\n OBJS =\t\t\t\t\t\t\t\t\t\\\n  alias.o bb-reorder.o bitmap.o builtins.o caller-save.o calls.o\t\t\\\n  combine.o conflict.o convert.o cse.o cselib.o dbxout.o ssa-dce.o\t\\\n- dependence.o diagnostic.o doloop.o dominance.o dwarf2asm.o dwarf2out.o\t\\\n- dwarfout.o emit-rtl.o except.o explow.o expmed.o expr.o final.o flow.o\t\\\n- fold-const.o function.o gcse.o genrtl.o ggc-common.o global.o graph.o\t\\\n- haifa-sched.o hash.o hashtable.o ifcvt.o insn-attrtab.o insn-emit.o\t\\\n- insn-extract.o insn-opinit.o insn-output.o insn-peep.o insn-recog.o\t\\\n- integrate.o intl.o jump.o lcm.o lists.o local-alloc.o loop.o mbchar.o\t\\\n- optabs.o params.o predict.o print-rtl.o print-tree.o profile.o real.o\t\\\n- recog.o reg-stack.o regclass.o regmove.o regrename.o reload.o\t\t\\\n- reload1.o reorg.o resource.o rtl.o rtlanal.o sbitmap.o sched-deps.o\t\\\n- sched-ebb.o sched-rgn.o sched-vis.o sdbout.o sibcall.o simplify-rtx.o\t\\\n- splay-tree.o ssa.o stmt.o stor-layout.o stringpool.o timevar.o\t\t\\\n- toplev.o tree.o unroll.o varasm.o varray.o version.o xcoffout.o\t\\\n+ dependence.o df.o diagnostic.o doloop.o dominance.o dwarf2asm.o\t\\\n+ dwarf2out.o dwarfout.o emit-rtl.o except.o explow.o expmed.o expr.o\t\\\n+ final.o flow.o fold-const.o function.o gcse.o genrtl.o ggc-common.o\t\\\n+ global.o graph.o haifa-sched.o hash.o hashtable.o ifcvt.o\t\t\\\n+ insn-attrtab.o insn-emit.o insn-extract.o insn-opinit.o insn-output.o\t\\\n+ insn-peep.o insn-recog.o integrate.o intl.o jump.o lcm.o lists.o\t\\\n+ local-alloc.o loop.o mbchar.o optabs.o params.o predict.o print-rtl.o\t\\\n+ print-tree.o profile.o real.o recog.o reg-stack.o regclass.o regmove.o\t\\\n+ regrename.o reload.o reload1.o reorg.o resource.o rtl.o rtlanal.o\t\\\n+ sbitmap.o sched-deps.o\tsched-ebb.o sched-rgn.o sched-vis.o sdbout.o\t\\\n+ sibcall.o simplify-rtx.o splay-tree.o ssa.o stmt.o stor-layout.o\t\\\n+ stringpool.o timevar.o\ttoplev.o tree.o unroll.o varasm.o varray.o\t\\\n+ version.o xcoffout.o\t\\\n  $(GGC) $(out_object_file) $(EXTRA_OBJS)\n \n BACKEND = main.o libbackend.a\n@@ -1442,6 +1443,8 @@ ssa.o : ssa.c $(CONFIG_H) $(SYSTEM_H) $(REGS_H) varray.h $(EXPR_H) \\\n    $(BASIC_BLOCK_H) output.h ssa.h\n ssa-dce.o : ssa-dce.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    ssa.h insn-config.h $(RECOG_H) output.h\n+df.o : df.c $(CONFIG_H) system.h $(RTL_H) insn-config.h $(RECOG_H) \\\n+   function.h $(REGS_H) $(OBSTACK_H) hard-reg-set.h $(BASIC_BLOCK_H) df.h\n conflict.o : conflict.c $(CONFIG_H) $(SYSTEM_H) $(OBSTACK_H) $(HASHTAB_H) \\\n    $(RTL_H) hard-reg-set.h $(BASIC_BLOCK_H)\n profile.o : profile.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\"}, {"sha": "23e1e16511b9d12827ae27383c22fefd83ea1e83", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -290,10 +290,12 @@ extern int flow_delete_block\t\tPARAMS ((basic_block));\n extern void merge_blocks_nomove\t\tPARAMS ((basic_block, basic_block));\n extern void tidy_fallthru_edge\t\tPARAMS ((edge, basic_block,\n \t\t\t\t\t\t basic_block));\n+extern int flow_depth_first_order_compute\tPARAMS ((int *, int *));\n extern void dump_edge_info\t\tPARAMS ((FILE *, edge, int));\n extern void clear_edges\t\t\tPARAMS ((void));\n extern void mark_critical_edges\t\tPARAMS ((void));\n \n+\n /* Structure to hold information for each natural loop.  */\n struct loop\n {"}, {"sha": "4b049f550875c67ef64e656da89ff521261db05f", "filename": "gcc/df.c", "status": "added", "additions": 3746, "deletions": 0, "changes": 3746, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef"}, {"sha": "c581c88d4b97eb8a64410c9291729db722f83c7b", "filename": "gcc/df.h", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -0,0 +1,297 @@\n+/* Form lists of pseudo register references for autoinc optimization\n+   for GNU compiler.  This is part of flow optimization.  \n+   Copyright (C) 1999, 2000, 2001 Free Software Foundation, Inc.\n+   Contributed by Michael P. Hayes (m.hayes@elec.canterbury.ac.nz)\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+\n+#define DF_RD\t\t 1\t/* Reaching definitions.  */\n+#define DF_RU\t\t 2\t/* Reaching uses.  */\n+#define DF_LR\t\t 4\t/* Live registers.  */\n+#define DF_DU_CHAIN\t 8\t/* Def-use chain.  */\n+#define DF_UD_CHAIN     16\t/* Use-def chain.  */\n+#define DF_REG_INFO\t32\t/* Register info.  */\n+#define DF_RD_CHAIN\t64\t/* Reg-def chain.  */\n+#define DF_RU_CHAIN    128\t/* Reg-use chain.  */\n+#define DF_ALL\t       255\n+#define DF_HARD_REGS  1024\n+\n+enum df_ref_type {DF_REF_REG_DEF, DF_REF_REG_USE, DF_REF_REG_MEM_LOAD,\n+\t\t  DF_REF_REG_MEM_STORE};\n+\n+#define DF_REF_TYPE_NAMES {\"def\", \"use\", \"mem load\", \"mem store\"}\n+\n+/* ???> Perhaps all these data structures should be made private\n+   to enforce the interface.  */\n+\n+\n+/* Link on a def-use or use-def chain.  */\n+struct df_link\n+{\n+  struct df_link *next;\n+  struct ref *ref;\n+};\n+\n+\n+/* Define a register reference structure.  */\n+struct ref\n+{\n+  rtx reg;\t\t\t/* The register referenced.  */\n+  basic_block bb;\t\t/* BB containing ref.  */\n+  rtx insn;\t\t\t/* Insn containing ref.  */\n+  rtx *loc;\t\t\t/* Loc is the location of the reg.  */\n+  struct df_link *chain;\t/* Head of def-use or use-def chain.  */\n+  enum df_ref_type type;\t/* Type of ref.  */\n+  int id;\t\t\t/* Ref index.  */\n+};\n+\n+\n+/* One of these structures is allocated for every insn.  */\n+struct insn_info\n+{\n+  struct df_link *defs;\t\t/* Head of insn-def chain.  */\n+  struct df_link *uses;\t\t/* Head of insn-use chain.  */\n+  /* ???? The following luid field should be considerd private so that\n+     we can change it on the fly to accomodate new insns?  */\n+  int luid;\t\t\t/* Logical UID.  */\n+#if 0\n+  rtx insn;\t\t\t/* Backpointer to the insn.  */\n+#endif\n+};\n+\n+\n+/* One of these structures is allocated for every reg.  */\n+struct reg_info\n+{\n+  struct df_link *defs;\t\t/* Head of reg-def chain.  */\n+  struct df_link *uses;\t\t/* Head of reg-use chain.  */\n+  int lifetime;\n+  int n_defs;\n+  int n_uses;\n+};\n+\n+\n+/* One of these structures is allocated for every basic block.  */\n+struct bb_info\n+{\n+  /* Reaching def bitmaps have def_id elements.  */\n+  bitmap rd_kill;\n+  bitmap rd_gen;\n+  bitmap rd_in;\n+  bitmap rd_out;\n+  /* Reaching use bitmaps have use_id elements.  */\n+  bitmap ru_kill;\n+  bitmap ru_gen;\n+  bitmap ru_in;\n+  bitmap ru_out;\n+  /* Live variable bitmaps have n_regs elements.  */\n+  bitmap lr_def;\n+  bitmap lr_use;\n+  bitmap lr_in;\n+  bitmap lr_out;\n+  int rd_valid;\n+  int ru_valid;\n+  int lr_valid;\n+};\n+\n+\n+struct df\n+{\n+  int flags;\t\t\t/* Indicates what's recorded.  */\n+  struct bb_info *bbs;\t\t/* Basic block table.  */\n+  struct ref **defs;\t\t/* Def table, indexed by def_id.  */\n+  struct ref **uses;\t\t/* Use table, indexed by use_id.  */\n+  struct ref **reg_def_last;\t/* Indexed by regno.  */\n+  struct reg_info *regs;\t/* Regs table, index by regno.  */\n+  unsigned int reg_size;\t/* Size of regs table.  */\n+  struct insn_info *insns;\t/* Insn table, indexed by insn UID.  */\n+  unsigned int insn_size;\t/* Size of insn table.  */\n+  unsigned int def_id;\t\t/* Next def ID.  */\n+  unsigned int def_size;\t/* Size of def table.  */\n+  unsigned int n_defs;\t\t/* Size of def bitmaps.  */\n+  unsigned int use_id;\t\t/* Next use ID.  */\n+  unsigned int use_size;\t/* Size of use table.  */\n+  unsigned int n_uses;\t\t/* Size of use bitmaps.  */\n+  unsigned int n_bbs;\t\t/* Number of basic blocks.  */\n+  unsigned int n_regs;\t\t/* Number of regs.  */\n+  unsigned int def_id_save;\t/* Saved next def ID.  */\n+  unsigned int use_id_save;\t/* Saved next use ID.  */\n+  bitmap insns_modified;\t/* Insns that (may) have changed.  */\n+  bitmap bbs_modified;\t\t/* Blocks that (may) have changed.  */\n+  bitmap all_blocks;\t\t/* All blocks in CFG.  */\n+  /* The bitmap vector of dominators or NULL if not computed. \n+     Ideally, this should be a pointer to a CFG object.  */\n+  bitmap *dom;\n+  int * dfs_order;\n+  int * rc_order;\n+};\n+\n+\n+struct df_map\n+{\n+  rtx old;\n+  rtx new;\n+};\n+\n+\n+#define DF_BB_INFO(REFS, BB) (&REFS->bbs[(BB)->index])\n+\n+\n+/* Macros to access the elements within the ref structure.  */\n+#define DF_REF_REAL_REG(REF) (GET_CODE ((REF)->reg) == SUBREG \\\n+\t\t\t\t? SUBREG_REG ((REF)->reg) : ((REF)->reg))\n+#define DF_REF_REGNO(REF) REGNO (DF_REF_REAL_REG (REF))\n+#define DF_REF_REAL_LOC(REF) (GET_CODE ((REF)->reg) == SUBREG \\\n+\t\t\t        ? &SUBREG_REG ((REF)->reg) : ((REF)->loc))\n+#ifdef OLD_DF_INTERFACE\n+#define DF_REF_REG(REF) DF_REF_REAL_REG(REF)\n+#define DF_REF_LOC(REF) DF_REF_REAL_LOC(REF)\n+#else\n+#define DF_REF_REG(REF) ((REF)->reg)\n+#define DF_REF_LOC(REF) ((REF)->loc)\n+#endif\n+#define DF_REF_BB(REF) ((REF)->bb)\n+#define DF_REF_BBNO(REF) ((REF)->bb->index)\n+#define DF_REF_INSN(REF) ((REF)->insn)\n+#define DF_REF_INSN_UID(REF) (INSN_UID ((REF)->insn))\n+#define DF_REF_TYPE(REF) ((REF)->type)\n+#define DF_REF_CHAIN(REF) ((REF)->chain)\n+#define DF_REF_ID(REF) ((REF)->id)\n+\n+/* Macros to determine the reference type.  */\n+\n+#define DF_REF_REG_DEF_P(REF) (DF_REF_TYPE (REF) == DF_REF_REG_DEF)\n+#define DF_REF_REG_USE_P(REF) ((REF) && ! DF_REF_REG_DEF_P (REF))\n+#define DF_REF_REG_MEM_STORE_P(REF) (DF_REF_TYPE (REF) == DF_REF_REG_MEM_STORE)\n+#define DF_REF_REG_MEM_LOAD_P(REF) (DF_REF_TYPE (REF) == DF_REF_REG_MEM_LOAD)\n+#define DF_REF_REG_MEM_P(REF) (DF_REF_REG_MEM_STORE_P (REF) \\\n+                            || DF_REF_REG_MEM_LOAD_P (REF))\n+\n+\n+/* Macros to access the elements within the reg_info structure table.  */\n+\n+#define DF_REGNO_FIRST_DEF(DF, REGNUM) \\\n+((DF)->regs[REGNUM].defs ? (DF)->regs[REGNUM].defs->ref : 0)\n+#define DF_REGNO_LAST_USE(DF, REGNUM) \\\n+((DF)->regs[REGNUM].uses ? (DF)->regs[REGNUM].uses->ref : 0)\n+\n+#define DF_REGNO_FIRST_BB(DF, REGNUM) \\\n+(DF_REGNO_FIRST_DEF (DF, REGNUM) \\\n+? DF_REF_BB (DF_REGNO_FIRST_DEF (DF, REGNUM)) : 0)\n+#define DF_REGNO_LAST_BB(DF, REGNUM) \\\n+(DF_REGNO_LAST_USE (DF, REGNUM) \\\n+? DF_REF_BB (DF_REGNO_LAST_USE (DF, REGNUM)) : 0)\n+\n+\n+/* Macros to access the elements within the insn_info structure table.  */\n+\n+#define DF_INSN_LUID(DF, INSN) ((DF)->insns[INSN_UID (INSN)].luid)\n+#define DF_INSN_DEFS(DF, INSN) ((DF)->insns[INSN_UID (INSN)].defs)\n+#define DF_INSN_USES(DF, INSN) ((DF)->insns[INSN_UID (INSN)].uses)\n+\n+\n+/* Functions to build and analyse dataflow information.  */\n+\n+extern struct df *df_init PARAMS ((void));\n+\n+extern int df_analyse PARAMS ((struct df *, bitmap, int));\n+\n+extern void df_finish PARAMS ((struct df *));\n+\n+extern void df_dump PARAMS ((struct df *, int, FILE *));\n+\n+/* Functions to modify insns.  */\n+\n+extern void df_insn_modify PARAMS ((struct df *, basic_block, rtx));\n+\n+extern rtx df_insn_delete PARAMS ((struct df *, basic_block, rtx));\n+\n+extern rtx df_pattern_emit_before PARAMS ((struct df *, rtx, \n+\t\t\t\t\t   basic_block, rtx));\n+\n+extern rtx df_jump_pattern_emit_after PARAMS ((struct df *, rtx, \n+\t\t\t\t\t       basic_block, rtx));\n+\n+extern rtx df_pattern_emit_after PARAMS ((struct df *, rtx, \n+\t\t\t\t\t   basic_block, rtx));\n+\n+extern rtx df_insn_move_before PARAMS ((struct df *, basic_block, rtx,\n+\t\t\t\t\tbasic_block, rtx));\n+\n+extern int df_reg_replace PARAMS ((struct df *, bitmap, rtx, rtx));\n+\n+extern int df_ref_reg_replace PARAMS ((struct df *, struct ref *, rtx, rtx));\n+\n+extern int df_ref_remove PARAMS ((struct df *, struct ref *));\n+\n+extern int df_insn_reg_replace PARAMS ((struct df *, basic_block,\n+\t\t\t\t\trtx, rtx, rtx));\n+\n+extern int df_insn_mem_replace PARAMS ((struct df *, basic_block,\n+\t\t\t\t\trtx, rtx, rtx));\n+\n+extern struct ref *df_bb_def_use_swap PARAMS ((struct df *, basic_block, \n+\t\t\t\t\t       rtx, rtx, unsigned int));\n+\n+\n+/* Functions to query dataflow information.  */\n+\n+extern basic_block df_regno_bb PARAMS((struct df *, unsigned int));\n+\n+extern int df_reg_lifetime PARAMS ((struct df *, rtx));\n+\n+extern int df_reg_global_p PARAMS ((struct df *, rtx));\n+\n+extern int df_insn_regno_def_p PARAMS ((struct df *, \n+\t\t\t\t\tbasic_block, rtx, unsigned int));\n+\n+extern int df_insn_dominates_all_uses_p PARAMS ((struct df *, \n+\t\t\t\t\t\t basic_block, rtx));\n+\n+extern int df_insn_dominates_uses_p PARAMS ((struct df *, basic_block,\n+\t\t\t\t\t     rtx, bitmap));\n+\n+extern int df_bb_reg_live_start_p PARAMS ((struct df *, basic_block, rtx));\n+\n+extern int df_bb_reg_live_end_p PARAMS ((struct df *, basic_block, rtx));\n+\n+extern int df_bb_regs_lives_compare PARAMS ((struct df *, basic_block,\n+\t\t\t\t\t     rtx, rtx));\n+\n+extern rtx df_bb_single_def_use_insn_find PARAMS((struct df *, basic_block,\n+\t\t\t\t\t\t  rtx, rtx));\n+\n+\n+/* Functions for debugging from GDB.  */\n+\n+extern void debug_df_insn PARAMS ((rtx));\n+\n+extern void debug_df_regno PARAMS ((unsigned int));\n+\n+extern void debug_df_reg PARAMS ((rtx));\n+\n+extern void debug_df_defno PARAMS ((unsigned int));\n+\n+extern void debug_df_useno PARAMS ((unsigned int));\n+\n+extern void debug_df_ref PARAMS ((struct ref *));\n+\n+extern void debug_df_chain PARAMS ((struct df_link *));\n+extern void df_insn_debug PARAMS ((struct df *, rtx, FILE *));\n+extern void df_insn_debug_regno PARAMS ((struct df *, rtx, FILE *));"}, {"sha": "ae0c58af8724689e9c2452a9f153335eba867bda", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -458,7 +458,6 @@ static int flow_loop_entry_edges_find\tPARAMS ((basic_block, const sbitmap,\n \t\t\t\t\t\t edge **));\n static int flow_loop_exit_edges_find\tPARAMS ((const sbitmap, edge **));\n static int flow_loop_nodes_find\tPARAMS ((basic_block, basic_block, sbitmap));\n-static int flow_depth_first_order_compute PARAMS ((int *, int *));\n static void flow_dfs_compute_reverse_init\n   PARAMS ((depth_first_search_ds));\n static void flow_dfs_compute_reverse_add_bb\n@@ -8223,7 +8222,7 @@ flow_loop_nodes_find (header, latch, nodes)\n   tries to get as far away from the starting point as quickly as\n   possible.  */\n \n-static int\n+int\n flow_depth_first_order_compute (dfs_order, rc_order)\n      int *dfs_order;\n      int *rc_order;"}, {"sha": "bd6e8c4ceabe3e4517a362c19bd61dc20fc57fd8", "filename": "gcc/po/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fpo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fpo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FChangeLog?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -1,3 +1,7 @@\n+Thu Jun 28 16:11:30 2001  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* POTFILES.in: Add df.c and df.h\n+\n Tue Jun 19 08:03:43 2001  Jeffrey A Law  (law@cygnus.com)\n \n \t* POTFILES.in: Replace dce.c with ssa-dce.c."}, {"sha": "12d1dd7ce2bff9c4cbe0a3b73ad6f51168601dfc", "filename": "gcc/po/POTFILES.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fpo%2FPOTFILES.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10c4b247fd9f5a610f7a02dc21fa758173ed9aef/gcc%2Fpo%2FPOTFILES.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpo%2FPOTFILES.in?ref=10c4b247fd9f5a610f7a02dc21fa758173ed9aef", "patch": "@@ -716,6 +716,8 @@ dbxout.h\n dbxstclass.h\n defaults.h\n dependence.c\n+df.c\n+df.h\n diagnostic.c\n diagnostic.h\n doloop.c"}]}