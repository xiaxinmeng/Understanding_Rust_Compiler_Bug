{"sha": "b60761baa6fd6acf3200e732283d133f4ce0f0e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjYwNzYxYmFhNmZkNmFjZjMyMDBlNzMyMjgzZDEzM2Y0Y2UwZjBlOQ==", "commit": {"author": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T15:07:37Z"}, "committer": {"name": "Jeff Law", "email": "jeffreyalaw@gmail.com", "date": "2021-07-02T15:18:49Z"}, "message": "Preparing to use shifts to eliminate redundant test/compare insns on H8\n\n\t* config/h8300/h8300-protos.h (output_a_shift): Make first argument\n\tan array of rtx rather than a pointer to rtx.  Add code argument.\n\t(compute_a_shift_length): Similarly.\n\t* config/h8300/h8300.c (h8300_shift_costs): Adjust now that the\n\tshift itself isn't an operand.  Create dummy operand[0] to carry\n\ta mode and pass a suitable rtx code to compute_a_shift_length.\n\t(get_shift_alg): Adjust operand number of clobber in output templates.\n\t(output_a_shift): Make first argument an array of rtx rather than\n\ta pointer to rtx.  Add code argument for the type of shift.\n\tAdjust now that the shift itself is no longer an operand.\n\t(compute_a_shift_length): Similarly.\n\t* config/h8300/shiftrotate.md (shiftqi, shifthi, shiftsi): Use an\n\titerator rather than nshift_operator.\n\t(shiftqi_noscratch, shifthi_noscratch, shiftsi_noscratch): Likewise.\n\t(shiftqi_clobber_flags): Adjust to API changes in output_a_shift\n\tand compute_a_shift_length.\n\t(shiftqi_noscratch_clobber_flags): Likewise.\n\t(shifthi_noscratch_clobber_flags): Likewise.\n\t(shiftsi_noscratch_clobber_flags): Likewise.", "tree": {"sha": "df4d7f46725f915e454731dd268ce05d4b3cb0cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df4d7f46725f915e454731dd268ce05d4b3cb0cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b60761baa6fd6acf3200e732283d133f4ce0f0e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60761baa6fd6acf3200e732283d133f4ce0f0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b60761baa6fd6acf3200e732283d133f4ce0f0e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b60761baa6fd6acf3200e732283d133f4ce0f0e9/comments", "author": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JeffreyALaw", "id": 14062506, "node_id": "MDQ6VXNlcjE0MDYyNTA2", "avatar_url": "https://avatars.githubusercontent.com/u/14062506?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JeffreyALaw", "html_url": "https://github.com/JeffreyALaw", "followers_url": "https://api.github.com/users/JeffreyALaw/followers", "following_url": "https://api.github.com/users/JeffreyALaw/following{/other_user}", "gists_url": "https://api.github.com/users/JeffreyALaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/JeffreyALaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JeffreyALaw/subscriptions", "organizations_url": "https://api.github.com/users/JeffreyALaw/orgs", "repos_url": "https://api.github.com/users/JeffreyALaw/repos", "events_url": "https://api.github.com/users/JeffreyALaw/events{/privacy}", "received_events_url": "https://api.github.com/users/JeffreyALaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85017431068251628478f38346c273418c71209b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85017431068251628478f38346c273418c71209b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85017431068251628478f38346c273418c71209b"}], "stats": {"total": 180, "additions": 85, "deletions": 95}, "files": [{"sha": "86bcc3fd3248b7e2bd66cc82ab9bcb8c86c8c3fe", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=b60761baa6fd6acf3200e732283d133f4ce0f0e9", "patch": "@@ -28,8 +28,8 @@ along with GCC; see the file COPYING3.  If not see\n extern unsigned int compute_mov_length (rtx *);\n extern const char *output_plussi (rtx *, bool);\n extern unsigned int compute_plussi_length (rtx *, bool);\n-extern const char *output_a_shift (rtx *);\n-extern unsigned int compute_a_shift_length (rtx *);\n+extern const char *output_a_shift (rtx[4], rtx_code);\n+extern unsigned int compute_a_shift_length (rtx[4], rtx_code);\n extern const char *output_a_rotate (enum rtx_code, rtx *);\n extern unsigned int compute_a_rotate_length (rtx *);\n extern const char *output_simode_bld (int, rtx[]);"}, {"sha": "0fdc68bf65bea17a963d2825666513fedc72eff2", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=b60761baa6fd6acf3200e732283d133f4ce0f0e9", "patch": "@@ -1108,18 +1108,17 @@ h8300_and_costs (rtx x)\n static int\n h8300_shift_costs (rtx x)\n {\n-  rtx operands[4];\n+  rtx operands[3];\n \n   if (GET_MODE (x) != QImode\n       && GET_MODE (x) != HImode\n       && GET_MODE (x) != SImode)\n     return 100;\n \n-  operands[0] = NULL;\n+  operands[0] = gen_rtx_REG (GET_MODE (x), 0);\n   operands[1] = NULL;\n   operands[2] = XEXP (x, 1);\n-  operands[3] = x;\n-  return compute_a_shift_length (operands) / 2;\n+  return compute_a_shift_length (operands, GET_CODE (x)) / 2;\n }\n \n /* Worker function for TARGET_RTX_COSTS.  */\n@@ -3759,13 +3758,13 @@ get_shift_alg (enum shift_type shift_type, enum shift_mode shift_mode,\n \t  switch (shift_type)\n \t    {\n \t    case SHIFT_ASHIFT:\n-\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%s4,%t4\\n\\tmov.b\\t%t0,%s4\\n\\tmov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->special = \"mov.w\\t%e0,%f3\\n\\tmov.b\\t%s3,%t3\\n\\tmov.b\\t%t0,%s3\\n\\tmov.b\\t%s0,%t0\\n\\tsub.b\\t%s0,%s0\\n\\tmov.w\\t%f3,%e0\";\n \t      goto end;\n \t    case SHIFT_LSHIFTRT:\n-\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\textu.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->special = \"mov.w\\t%e0,%f3\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s3,%t0\\n\\tmov.b\\t%t3,%s3\\n\\textu.w\\t%f3\\n\\tmov.w\\t%f3,%e0\";\n \t      goto end;\n \t    case SHIFT_ASHIFTRT:\n-\t      info->special = \"mov.w\\t%e0,%f4\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s4,%t0\\n\\tmov.b\\t%t4,%s4\\n\\texts.w\\t%f4\\n\\tmov.w\\t%f4,%e0\";\n+\t      info->special = \"mov.w\\t%e0,%f3\\n\\tmov.b\\t%t0,%s0\\n\\tmov.b\\t%s3,%t0\\n\\tmov.b\\t%t3,%s3\\n\\texts.w\\t%f3\\n\\tmov.w\\t%f3,%e0\";\n \t      goto end;\n \t    }\n \t}\n@@ -3985,12 +3984,10 @@ h8300_shift_needs_scratch_p (int count, machine_mode mode, enum rtx_code type)\n /* Output the assembler code for doing shifts.  */\n \n const char *\n-output_a_shift (rtx *operands)\n+output_a_shift (rtx operands[4], rtx_code code)\n {\n   static int loopend_lab;\n-  rtx shift = operands[3];\n-  machine_mode mode = GET_MODE (shift);\n-  enum rtx_code code = GET_CODE (shift);\n+  machine_mode mode = GET_MODE (operands[0]);\n   enum shift_type shift_type;\n   enum shift_mode shift_mode;\n   struct shift_info info;\n@@ -4114,21 +4111,21 @@ output_a_shift (rtx *operands)\n       if (info.shift2 != NULL)\n \t{\n \t  fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n / 2,\n-\t\t   names_big[REGNO (operands[4])]);\n+\t\t   names_big[REGNO (operands[3])]);\n \t  fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n \t  output_asm_insn (info.shift2, operands);\n-\t  output_asm_insn (\"add\t#0xff,%X4\", operands);\n+\t  output_asm_insn (\"add\t#0xff,%X3\", operands);\n \t  fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n \t  if (n % 2)\n \t    output_asm_insn (info.shift1, operands);\n \t}\n       else\n \t{\n \t  fprintf (asm_out_file, \"\\tmov.b\t#%d,%sl\\n\", n,\n-\t\t   names_big[REGNO (operands[4])]);\n+\t\t   names_big[REGNO (operands[3])]);\n \t  fprintf (asm_out_file, \".Llt%d:\\n\", loopend_lab);\n \t  output_asm_insn (info.shift1, operands);\n-\t  output_asm_insn (\"add\t#0xff,%X4\", operands);\n+\t  output_asm_insn (\"add\t#0xff,%X3\", operands);\n \t  fprintf (asm_out_file, \"\\tbne\t.Llt%d\\n\", loopend_lab);\n \t}\n       return \"\";\n@@ -4155,11 +4152,9 @@ h8300_asm_insn_count (const char *templ)\n /* Compute the length of a shift insn.  */\n \n unsigned int\n-compute_a_shift_length (rtx *operands)\n+compute_a_shift_length (rtx operands[3], rtx_code code)\n {\n-  rtx shift = operands[3];\n-  machine_mode mode = GET_MODE (shift);\n-  enum rtx_code code = GET_CODE (shift);\n+  enum machine_mode mode = GET_MODE (operands[0]);\n   enum shift_type shift_type;\n   enum shift_mode shift_mode;\n   struct shift_info info;"}, {"sha": "c5d32cd6271ddae86003154a07ef7e417c61361c", "filename": "gcc/config/h8300/shiftrotate.md", "status": "modified", "additions": 69, "deletions": 74, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b60761baa6fd6acf3200e732283d133f4ce0f0e9/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fshiftrotate.md?ref=b60761baa6fd6acf3200e732283d133f4ce0f0e9", "patch": "@@ -152,168 +152,163 @@\n \n (define_insn_and_split \"*shiftqi\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:QI 3 \"nshift_operator\"\n-\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))]\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n-\t      (clobber (match_dup 4))\n+  [(parallel [(set (match_dup 0) (shifts:QI (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shiftqi_clobber_flags\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:QI 3 \"nshift_operator\"\n-\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n (define_insn_and_split \"*shiftqi_noscratch\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:QI 3 \"nshift_operator\"\n-\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))]\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n     && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+\t\t\t\t     <CODE>))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+  [(parallel [(set (match_dup 0) (shifts:QI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shiftqi_noscratch_clobber_flags\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:QI 3 \"nshift_operator\"\n-\t [(match_operand:QI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")]))\n+\t(shifts:QI\n+\t  (match_operand:QI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"R,rn\")))\n    (clobber (reg:CC CC_REG))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n-    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), QImode, <CODE>))\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n (define_insn_and_split \"*shifthi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:HI 3 \"nshift_operator\"\n-\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))]\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n-\t      (clobber (match_dup 4))\n+  [(parallel [(set (match_dup 0) (shifts:HI (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shifthi_clobber_flags\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:HI 3 \"nshift_operator\"\n-\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"S,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n (define_insn_and_split \"*shifthi_noscratch\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:HI 3 \"nshift_operator\"\n-\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")]))]\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n-    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode, <CODE>))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+  [(parallel [(set (match_dup 0) (shifts:HI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shifthi_noscratch_clobber_flags\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:HI 3 \"nshift_operator\"\n-\t [(match_operand:HI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")]))\n+\t(shifts:HI\n+\t  (match_operand:HI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:HI 2 \"nonmemory_operand\" \"S,rn\")))\n    (clobber (reg:CC CC_REG))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n-    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), HImode, <CODE>))\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n (define_insn_and_split \"*shiftsi\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:SI 3 \"nshift_operator\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))]\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))]\n   \"\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n-\t      (clobber (match_dup 4))\n+  [(parallel [(set (match_dup 0) (shifts:SI (match_dup 1) (match_dup 2)))\n+\t      (clobber (match_dup 3))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shiftsi_clobber_flags\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:SI 3 \"nshift_operator\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))\n-   (clobber (match_scratch:QI 4 \"=X,&r\"))\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))\n+   (clobber (match_scratch:QI 3 \"=X,&r\"))\n    (clobber (reg:CC CC_REG))]\n   \"\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n (define_insn_and_split \"*shiftsi_noscratch\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:SI 3 \"nshift_operator\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")]))]\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:QI 2 \"nonmemory_operand\" \"T,rn\")))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n-    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode, <CODE>))\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(parallel [(set (match_dup 0) (match_op_dup 3 [(match_dup 1) (match_dup 2)]))\n+  [(parallel [(set (match_dup 0) (shifts:SI (match_dup 1) (match_dup 2)))\n \t      (clobber (reg:CC CC_REG))])])\n \n (define_insn \"*shiftsi_noscratch_clobber_flags\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(match_operator:SI 3 \"nshift_operator\"\n-\t [(match_operand:SI 1 \"register_operand\" \"0,0\")\n-\t  (match_operand:SI 2 \"nonmemory_operand\" \"T,rn\")]))\n+\t(shifts:SI\n+\t  (match_operand:SI 1 \"register_operand\" \"0,0\")\n+\t  (match_operand:SI 2 \"nonmemory_operand\" \"T,rn\")))\n    (clobber (reg:CC CC_REG))]\n   \"(GET_CODE (operands[2]) == CONST_INT\n-    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode,\n-\t\t\t\t     GET_CODE (operands[3])))\"\n+    && !h8300_shift_needs_scratch_p (INTVAL (operands[2]), SImode, <CODE>))\"\n {\n-  return output_a_shift (operands);\n+  return output_a_shift (operands, <CODE>);\n }\n   [(set (attr \"length\")\n-\t(symbol_ref \"compute_a_shift_length (operands)\"))])\n+\t(symbol_ref \"compute_a_shift_length (operands, <CODE>)\"))])\n \n ;; Split a variable shift into a loop.  If the register containing\n ;; the shift count dies, then we just use that register."}]}