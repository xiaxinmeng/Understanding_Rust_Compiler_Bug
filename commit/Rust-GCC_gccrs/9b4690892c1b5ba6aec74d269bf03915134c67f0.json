{"sha": "9b4690892c1b5ba6aec74d269bf03915134c67f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI0NjkwODkyYzFiNWJhNmFlYzc0ZDI2OWJmMDM5MTUxMzRjNjdmMA==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-25T21:07:40Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2010-05-25T21:07:40Z"}, "message": "utils.c: Do not include function.h, pointer-set.h, and gimple.h.\n\n\t* gcc-interface/utils.c: Do not include function.h, pointer-set.h,\n\tand gimple.h.  Explain why rtl.h has to be included.\n\t(handle_vector_size_attribute): Call reconstruct_complex_type directly.\n\t* gcc-interface/targtyps.c: Do not include tm_p.h\n\t* gcc-interface/utils2.c: Do not include flags.h.\n\t* gcc-interface/trans.c: Do not include expr.h.  Include rtl.h instead,\n\tand explain why it has to be included.\n\t* gcc-interface/misc.c: Do not include expr.h, libfuncs.h, cgraph.h,\n\tand optabs.h.\n\tInclude function.h and explain why.  Explain why except.h is included.\n\t(enumerate_modes): Remove unused function. \n\t* gcc-interface/gigi.h (enumerate_modes): Remove prototype.\n\t* gcc-interface/Make-lang.in: Update dependencies.\n\nFrom-SVN: r159844", "tree": {"sha": "d951c6e1fbed1de2e618e68b5f954a91e8a9ea2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d951c6e1fbed1de2e618e68b5f954a91e8a9ea2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b4690892c1b5ba6aec74d269bf03915134c67f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4690892c1b5ba6aec74d269bf03915134c67f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b4690892c1b5ba6aec74d269bf03915134c67f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b4690892c1b5ba6aec74d269bf03915134c67f0/comments", "author": null, "committer": null, "parents": [{"sha": "e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e233a3b258440a4bbfc0756f1a6cc6e68d59132b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e233a3b258440a4bbfc0756f1a6cc6e68d59132b"}], "stats": {"total": 144, "additions": 30, "deletions": 114}, "files": [{"sha": "ae8e4e60276d4dbd2c0c968f62194b7f23a123f8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -1,3 +1,19 @@\n+2010-05-25  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* gcc-interface/utils.c: Do not include function.h, pointer-set.h,\n+\tand gimple.h.  Explain why rtl.h has to be included.\n+\t(handle_vector_size_attribute): Call reconstruct_complex_type directly.\n+\t* gcc-interface/targtyps.c: Do not include tm_p.h\n+\t* gcc-interface/utils2.c: Do not include flags.h.\n+\t* gcc-interface/trans.c: Do not include expr.h.  Include rtl.h instead,\n+\tand explain why it has to be included.\n+\t* gcc-interface/misc.c: Do not include expr.h, libfuncs.h, cgraph.h,\n+\tand optabs.h.\n+\tInclude function.h and explain why.  Explain why except.h is included.\n+\t(enumerate_modes): Remove unused function. \n+\t* gcc-interface/gigi.h (enumerate_modes): Remove prototype.\n+\t* gcc-interface/Make-lang.in: Update dependencies.\n+\n 2010-05-25  Joseph Myers  <joseph@codesourcery.com>\n \n \t* gcc-interface/misc.c (internal_error_function): Add context"}, {"sha": "b81952377a3cca3dd181c8910e5459db9667d8f1", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -1233,8 +1233,8 @@ ada/decl.o : ada/gcc-interface/decl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(EXPR_H) libfuncs.h \\\n-   $(FLAGS_H) debug.h $(CGRAPH_H) $(OPTABS_H) toplev.h except.h langhooks.h \\\n+   $(TM_H) $(TREE_H) $(DIAGNOSTIC_H) $(TARGET_H) $(FUNCTION_H) \\\n+   $(FLAGS_H) debug.h toplev.h $(EXCEPT_H) langhooks.h \\\n    $(LANGHOOKS_DEF_H) opts.h options.h $(TREE_INLINE_H) $(PLUGIN_H) \\\n    ada/gcc-interface/ada.h ada/adadecode.h ada/types.h ada/atree.h \\\n    ada/elists.h ada/namet.h ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h \\\n@@ -1243,14 +1243,14 @@ ada/misc.o : ada/gcc-interface/misc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/targtyps.o : ada/gcc-interface/targtyps.c $(CONFIG_H) $(SYSTEM_H) \\\n-   coretypes.h $(TM_H) $(TM_P_H) $(TREE_H) ada/gcc-interface/ada.h \\\n+   coretypes.h $(TM_H) $(TREE_H) ada/gcc-interface/ada.h \\\n    ada/types.h ada/atree.h ada/elists.h ada/namet.h ada/nlists.h \\\n    ada/snames.h ada/stringt.h ada/uintp.h ada/urealp.h ada/fe.h ada/sinfo.h \\\n    ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(FLAGS_H) $(EXPR_H) output.h tree-iterator.h \\\n+   $(TM_H) $(TREE_H) $(FLAGS_H) output.h tree-iterator.h \\\n    $(GIMPLE_H) ada/gcc-interface/ada.h ada/adadecode.h ada/types.h \\\n    ada/atree.h ada/elists.h ada/namet.h ada/nlists.h ada/snames.h \\\n    ada/stringt.h ada/uintp.h ada/urealp.h ada/fe.h ada/sinfo.h ada/einfo.h \\\n@@ -1260,15 +1260,15 @@ ada/trans.o : ada/gcc-interface/trans.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n \n ada/utils.o : ada/gcc-interface/utils.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TREE_H) $(FLAGS_H) toplev.h $(RTL_H) output.h debug.h convert.h \\\n-   $(TARGET_H) function.h langhooks.h pointer-set.h $(CGRAPH_H) \\\n-   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h $(GIMPLE_H) \\\n+   $(TARGET_H) function.h langhooks.h $(CGRAPH_H) \\\n+   $(TREE_DUMP_H) $(TREE_INLINE_H) tree-iterator.h \\\n    ada/gcc-interface/ada.h ada/types.h ada/atree.h ada/elists.h ada/namet.h \\\n    ada/nlists.h ada/stringt.h ada/uintp.h ada/fe.h ada/sinfo.h ada/einfo.h \\\n    $(ADA_TREE_H) ada/gcc-interface/gigi.h gt-ada-utils.h gtype-ada.h\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) -I.. $(ALL_CPPFLAGS) $< -o $@\n \n ada/utils2.o : ada/gcc-interface/utils2.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n-   $(TM_H) $(TREE_H) $(FLAGS_H) output.h $(TREE_INLINE_H) \\\n+   $(TM_H) $(TREE_H) output.h $(TREE_INLINE_H) \\\n    ada/gcc-interface/ada.h ada/types.h ada/atree.h ada/elists.h ada/namet.h \\\n    ada/nlists.h ada/snames.h ada/stringt.h ada/uintp.h ada/fe.h ada/sinfo.h \\\n    ada/einfo.h $(ADA_TREE_H) ada/gcc-interface/gigi.h"}, {"sha": "74a94d732610669af28be99ab82c6c263df9498f", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -863,20 +863,6 @@ extern bool default_pass_by_ref (tree gnu_type);\n    if it should be passed by reference.  */\n extern bool must_pass_by_ref (tree gnu_type);\n \n-/* This function is called by the front end to enumerate all the supported\n-   modes for the machine.  We pass a function which is called back with\n-   the following integer parameters:\n-\n-   FLOAT_P\tnonzero if this represents a floating-point mode\n-   COMPLEX_P\tnonzero is this represents a complex mode\n-   COUNT\tcount of number of items, nonzero for vector mode\n-   PRECISION\tnumber of bits in data representation\n-   MANTISSA\tnumber of bits in mantissa, if FP and known, else zero.\n-   SIZE\t\tnumber of bits used to store data\n-   ALIGN\tnumber of bits to which mode is aligned.  */\n-extern void enumerate_modes (void (*f) (int, int, int, int, int, int,\n-\t\t\t\t\tunsigned int));\n-\n /* Return the size of the FP mode with precision PREC.  */\n extern int fp_prec_to_size (int prec);\n "}, {"sha": "c824fefc7348e68973a3c6ecf15dbb3c5c74ae07", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 85, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -34,21 +34,17 @@\n #include \"tree.h\"\n #include \"diagnostic.h\"\n #include \"target.h\"\n-#include \"expr.h\"\n-#include \"libfuncs.h\"\n #include \"ggc.h\"\n #include \"flags.h\"\n #include \"debug.h\"\n-#include \"cgraph.h\"\n-#include \"optabs.h\"\n #include \"toplev.h\"\n-#include \"except.h\"\n #include \"langhooks.h\"\n #include \"langhooks-def.h\"\n #include \"opts.h\"\n #include \"options.h\"\n-#include \"tree-inline.h\"\n #include \"plugin.h\"\n+#include \"function.h\"\t/* For pass_by_reference.  */\n+#include \"except.h\"\t/* For USING_SJLJ_EXCEPTIONS.  */\n \n #include \"ada.h\"\n #include \"adadecode.h\"\n@@ -719,85 +715,6 @@ must_pass_by_ref (tree gnu_type)\n \t      && TREE_CODE (TYPE_SIZE (gnu_type)) != INTEGER_CST));\n }\n \n-/* This function is called by the front end to enumerate all the supported\n-   modes for the machine.  We pass a function which is called back with\n-   the following integer parameters:\n-\n-   FLOAT_P\tnonzero if this represents a floating-point mode\n-   COMPLEX_P\tnonzero is this represents a complex mode\n-   COUNT\tcount of number of items, nonzero for vector mode\n-   PRECISION\tnumber of bits in data representation\n-   MANTISSA\tnumber of bits in mantissa, if FP and known, else zero.\n-   SIZE\t\tnumber of bits used to store data\n-   ALIGN\tnumber of bits to which mode is aligned.  */\n-\n-void\n-enumerate_modes (void (*f) (int, int, int, int, int, int, unsigned int))\n-{\n-  int iloop;\n-\n-  for (iloop = 0; iloop < NUM_MACHINE_MODES; iloop++)\n-    {\n-      enum machine_mode i = (enum machine_mode) iloop;\n-      enum machine_mode j;\n-      bool float_p = 0;\n-      bool complex_p = 0;\n-      bool vector_p = 0;\n-      bool skip_p = 0;\n-      int mantissa = 0;\n-      enum machine_mode inner_mode = i;\n-\n-      switch (GET_MODE_CLASS (i))\n-\t{\n-\tcase MODE_INT:\n-\t  break;\n-\tcase MODE_FLOAT:\n-\t  float_p = 1;\n-\t  break;\n-\tcase MODE_COMPLEX_INT:\n-\t  complex_p = 1;\n-\t  inner_mode = GET_MODE_INNER (i);\n-\t  break;\n-\tcase MODE_COMPLEX_FLOAT:\n-\t  float_p = 1;\n-\t  complex_p = 1;\n-\t  inner_mode = GET_MODE_INNER (i);\n-\t  break;\n-\tcase MODE_VECTOR_INT:\n-\t  vector_p = 1;\n-\t  inner_mode = GET_MODE_INNER (i);\n-\t  break;\n-\tcase MODE_VECTOR_FLOAT:\n-\t  float_p = 1;\n-\t  vector_p = 1;\n-\t  inner_mode = GET_MODE_INNER (i);\n-\t  break;\n-\tdefault:\n-\t  skip_p = 1;\n-\t}\n-\n-      /* Skip this mode if it's one the front end doesn't need to know about\n-\t (e.g., the CC modes) or if there is no add insn for that mode (or\n-\t any wider mode), meaning it is not supported by the hardware.  If\n-\t this a complex or vector mode, we care about the inner mode.  */\n-      for (j = inner_mode; j != VOIDmode; j = GET_MODE_WIDER_MODE (j))\n-\tif (optab_handler (add_optab, j)->insn_code != CODE_FOR_nothing)\n-\t  break;\n-\n-      if (float_p)\n-\t{\n-\t  const struct real_format *fmt = REAL_MODE_FORMAT (inner_mode);\n-\n-\t  mantissa = fmt->p;\n-\t}\n-\n-      if (!skip_p && j != VOIDmode)\n-\t(*f) (float_p, complex_p, vector_p ? GET_MODE_NUNITS (i) : 0,\n-\t      GET_MODE_BITSIZE (i), mantissa,\n-\t      GET_MODE_SIZE (i) * BITS_PER_UNIT, GET_MODE_ALIGNMENT (i));\n-    }\n-}\n-\n /* Return the size of the FP mode with precision PREC.  */\n \n int"}, {"sha": "2a5afc33549e3aa29d567b7363f1867ba992415f", "filename": "gcc/ada/gcc-interface/targtyps.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftargtyps.c?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -30,7 +30,6 @@\n #include \"coretypes.h\"\n #include \"tree.h\"\n #include \"tm.h\"\n-#include \"tm_p.h\"\n \n #include \"ada.h\"\n #include \"types.h\""}, {"sha": "de60679fb70a014063a7db753f4bcd4e94e8581c", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -29,7 +29,9 @@\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"flags.h\"\n-#include \"expr.h\"\n+#include \"rtl.h\"\t/* FIXME: For set_stack_check_libfunc and\n+\t\t\t   gen_rtx_SYMBOL_REF -- here is a front end\n+\t\t\t   still trying to generate RTL!  */\n #include \"ggc.h\"\n #include \"output.h\"\n #include \"tree-iterator.h\""}, {"sha": "647bb67c29fb7a85883574b6176a4bb15a32a15c", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -30,20 +30,17 @@\n #include \"tree.h\"\n #include \"flags.h\"\n #include \"toplev.h\"\n-#include \"rtl.h\"\n #include \"output.h\"\n #include \"ggc.h\"\n #include \"debug.h\"\n #include \"convert.h\"\n #include \"target.h\"\n-#include \"function.h\"\n #include \"langhooks.h\"\n-#include \"pointer-set.h\"\n #include \"cgraph.h\"\n #include \"tree-dump.h\"\n #include \"tree-inline.h\"\n #include \"tree-iterator.h\"\n-#include \"gimple.h\"\n+#include \"rtl.h\"\t\t/* For decl_default_tls_model.  */\n \n #include \"ada.h\"\n #include \"types.h\"\n@@ -5314,7 +5311,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n   new_type = build_vector_type (type, nunits);\n \n   /* Build back pointers if needed.  */\n-  *node = lang_hooks.types.reconstruct_complex_type (*node, new_type);\n+  *node = reconstruct_complex_type (*node, new_type);\n \n   return NULL_TREE;\n }"}, {"sha": "1c224a3ef073407e80310237b43b1b23612f2100", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b4690892c1b5ba6aec74d269bf03915134c67f0/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=9b4690892c1b5ba6aec74d269bf03915134c67f0", "patch": "@@ -29,7 +29,6 @@\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"ggc.h\"\n-#include \"flags.h\"\n #include \"output.h\"\n #include \"tree-inline.h\"\n "}]}