{"sha": "2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYxZThlN2M0NzMwYmJjNGJmMTVlODVlY2Y0Zjk1NGQxNzExZGIxMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-09-09T17:12:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-09-09T17:12:47Z"}, "message": "Enable lightweight checks with _GLIBCXX_ASSERTIONS.\n\n\t* doc/xml/manual/using.xml (_GLIBCXX_ASSERTIONS): Document.\n\t* doc/html/manual/using_macros.html: Regenerate.\n\t* include/bits/c++config: Define _GLIBCXX_ASSERTIONS when\n\t_GLIBCXX_DEBUG is defined. Disable std::string extern templates when\n\t(_GLIBCXX_EXTERN_TEMPLATE, __glibcxx_assert): Depend on\n\t_GLIBCXX_ASSERTIONS instead of _GLIBCXX_DEBUG.\n\t* include/debug/debug.h [!_GLIBCXX_DEBUG]: Define\n\t__glibcxx_requires_non_empty_range and __glibcxx_requires_nonempty.\n\t* include/backward/auto_ptr.h (auto_ptr::operator*,\n\tauto_ptr::operator->): Replace _GLIBCXX_DEBUG_ASSERT with\n\t__glibcxx_assert.\n\t* include/bits/basic_string.h (basic_string::operator[],\n\tbasic_string::front, basic_string::back, basic_string::pop_back):\n\tLikewise.\n\t* include/bits/random.h\n\t(uniform_int_distribution::param_type::param_type,\n\tuniform_real_distribution::param_type::param_type,\n\tnormal_distribution::param_type::param_type,\n\tgamma_distribution::param_type::param_type,\n\tbernoulli_distribution::param_type::param_type,\n\tbinomial_distribution::param_type::param_type,\n\tgeometric_distribution::param_type::param_type,\n\tnegative_binomial_distribution::param_type::param_type,\n\tpoisson_distribution::param_type::param_type,\n\texponential_distribution::param_type::param_type): Likewise.\n\t* include/bits/regex.h (match_results::operator[],\n\tmatch_results::prefix, match_results::suffix): Likewise.\n\t* include/bits/regex.tcc (format, regex_iterator::operator++):\n\tLikewise.\n\t* include/bits/regex_automaton.tcc (_StateSeq::_M_clone): Likewise.\n\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler,\n\t_Compiler::_M_insert_character_class_matcher): Likewise.\n\t* include/bits/regex_executor.tcc (_Executor::_M_dfs): Likewise.\n\t* include/bits/regex_scanner.tcc (_Scanner::_M_advance,\n\t_Scanner::_M_scan_normal): Likewise.\n\t* include/bits/shared_ptr_base.h (__shared_ptr::_M_reset,\n\t__shared_ptr::operator*): Likewise.\n\t* include/bits/stl_iterator_base_funcs.h (__advance): Likewise.\n\t* include/bits/unique_ptr.h (unique_ptr::operator*,\n\tunique_ptr::operator[]): Likewise.\n\t* include/experimental/fs_path.h (path::path(string_type, _Type),\n\tpath::iterator::operator++, path::iterator::operator--,\n\tpath::iterator::operator*): Likewise.\n\t* include/experimental/string_view (basic_string_view::operator[],\n\tbasic_string_view::front, basic_string_view::back,\n\tbasic_string_view::remove_prefix): Likewise.\n\t* include/ext/random (beta_distribution::param_type::param_type,\n\tnormal_mv_distribution::param_type::param_type,\n\trice_distribution::param_type::param_type,\n\tpareto_distribution::param_type::param_type,\n\tk_distribution::param_type::param_type,\n\tarcsine_distribution::param_type::param_type,\n\thoyt_distribution::param_type::param_type,\n\ttriangular_distribution::param_type::param_type,\n\tvon_mises_distribution::param_type::param_type,\n\thypergeometric_distribution::param_type::param_type,\n\tlogistic_distribution::param_type::param_type): Likewise.\n\t* include/ext/vstring.h (__versa_string::operator[]): Likewise.\n\t* include/std/complex (polar): Likewise.\n\t* include/std/mutex [!_GTHREAD_USE_MUTEX_TIMEDLOCK]\n\t(timed_mutex::~timed_mutex, timed_mutex::unlock,\n\t(recursive_timed_mutex::~timed_mutex, recursive_timed_mutex::unlock):\n\tLikewise.\n\t* include/std/shared_mutex [!PTHREAD_RWLOCK_INITIALIZER]\n\t(__shared_mutex_pthread::__shared_mutex_pthread,\n\t__shared_mutex_pthread::~__shared_mutex_pthread): Likewise.\n\t(__shared_mutex_pthread::lock, __shared_mutex_pthread::try_lock,\n\t__shared_mutex_pthread::unlock, __shared_mutex_pthread::lock_shared,\n\t__shared_mutex_pthread::try_lock_shared): Likewise.\n\t(__shared_mutex_cv::~__shared_mutex_cv, __shared_mutex_cv::unlock,\n\t__shared_mutex_cv::unlock_shared): Likewise.\n\t(shared_timed_mutex::try_lock_until,\n\tshared_timed_mutex::try_lock_shared_until): Likewise.\n\t* include/std/valarray (valarray::valarray(const _Tp*, size_t),\n\tvalarray::operator=, valarray::sum, valarray::min, valarray::max,\n\t_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT, _DEFINE_BINARY_OPERATOR):\n\tLikewise.\n\nFrom-SVN: r227595", "tree": {"sha": "9feeec2e2786095ed9ce8df4005ffb2e6e9c1e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9feeec2e2786095ed9ce8df4005ffb2e6e9c1e36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c27348aaa59599eefacd930aba1a56978ca95281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c27348aaa59599eefacd930aba1a56978ca95281", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c27348aaa59599eefacd930aba1a56978ca95281"}], "stats": {"total": 369, "additions": 246, "deletions": 123}, "files": [{"sha": "e4fa6e3407dc86344d288f947bcbb4f4706687c1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -1,3 +1,83 @@\n+2015-09-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/using.xml (_GLIBCXX_ASSERTIONS): Document.\n+\t* doc/html/manual/using_macros.html: Regenerate.\n+\t* include/bits/c++config: Define _GLIBCXX_ASSERTIONS when\n+\t_GLIBCXX_DEBUG is defined. Disable std::string extern templates when\n+\t(_GLIBCXX_EXTERN_TEMPLATE, __glibcxx_assert): Depend on\n+\t_GLIBCXX_ASSERTIONS instead of _GLIBCXX_DEBUG.\n+\t* include/debug/debug.h [!_GLIBCXX_DEBUG]: Define\n+\t__glibcxx_requires_non_empty_range and __glibcxx_requires_nonempty.\n+\t* include/backward/auto_ptr.h (auto_ptr::operator*,\n+\tauto_ptr::operator->): Replace _GLIBCXX_DEBUG_ASSERT with\n+\t__glibcxx_assert.\n+\t* include/bits/basic_string.h (basic_string::operator[],\n+\tbasic_string::front, basic_string::back, basic_string::pop_back):\n+\tLikewise.\n+\t* include/bits/random.h\n+\t(uniform_int_distribution::param_type::param_type,\n+\tuniform_real_distribution::param_type::param_type,\n+\tnormal_distribution::param_type::param_type,\n+\tgamma_distribution::param_type::param_type,\n+\tbernoulli_distribution::param_type::param_type,\n+\tbinomial_distribution::param_type::param_type,\n+\tgeometric_distribution::param_type::param_type,\n+\tnegative_binomial_distribution::param_type::param_type,\n+\tpoisson_distribution::param_type::param_type,\n+\texponential_distribution::param_type::param_type): Likewise.\n+\t* include/bits/regex.h (match_results::operator[],\n+\tmatch_results::prefix, match_results::suffix): Likewise.\n+\t* include/bits/regex.tcc (format, regex_iterator::operator++):\n+\tLikewise.\n+\t* include/bits/regex_automaton.tcc (_StateSeq::_M_clone): Likewise.\n+\t* include/bits/regex_compiler.tcc (_Compiler::_Compiler,\n+\t_Compiler::_M_insert_character_class_matcher): Likewise.\n+\t* include/bits/regex_executor.tcc (_Executor::_M_dfs): Likewise.\n+\t* include/bits/regex_scanner.tcc (_Scanner::_M_advance,\n+\t_Scanner::_M_scan_normal): Likewise.\n+\t* include/bits/shared_ptr_base.h (__shared_ptr::_M_reset,\n+\t__shared_ptr::operator*): Likewise.\n+\t* include/bits/stl_iterator_base_funcs.h (__advance): Likewise.\n+\t* include/bits/unique_ptr.h (unique_ptr::operator*,\n+\tunique_ptr::operator[]): Likewise.\n+\t* include/experimental/fs_path.h (path::path(string_type, _Type),\n+\tpath::iterator::operator++, path::iterator::operator--,\n+\tpath::iterator::operator*): Likewise.\n+\t* include/experimental/string_view (basic_string_view::operator[],\n+\tbasic_string_view::front, basic_string_view::back,\n+\tbasic_string_view::remove_prefix): Likewise.\n+\t* include/ext/random (beta_distribution::param_type::param_type,\n+\tnormal_mv_distribution::param_type::param_type,\n+\trice_distribution::param_type::param_type,\n+\tpareto_distribution::param_type::param_type,\n+\tk_distribution::param_type::param_type,\n+\tarcsine_distribution::param_type::param_type,\n+\thoyt_distribution::param_type::param_type,\n+\ttriangular_distribution::param_type::param_type,\n+\tvon_mises_distribution::param_type::param_type,\n+\thypergeometric_distribution::param_type::param_type,\n+\tlogistic_distribution::param_type::param_type): Likewise.\n+\t* include/ext/vstring.h (__versa_string::operator[]): Likewise.\n+\t* include/std/complex (polar): Likewise.\n+\t* include/std/mutex [!_GTHREAD_USE_MUTEX_TIMEDLOCK]\n+\t(timed_mutex::~timed_mutex, timed_mutex::unlock,\n+\t(recursive_timed_mutex::~timed_mutex, recursive_timed_mutex::unlock):\n+\tLikewise.\n+\t* include/std/shared_mutex [!PTHREAD_RWLOCK_INITIALIZER]\n+\t(__shared_mutex_pthread::__shared_mutex_pthread,\n+\t__shared_mutex_pthread::~__shared_mutex_pthread): Likewise.\n+\t(__shared_mutex_pthread::lock, __shared_mutex_pthread::try_lock,\n+\t__shared_mutex_pthread::unlock, __shared_mutex_pthread::lock_shared,\n+\t__shared_mutex_pthread::try_lock_shared): Likewise.\n+\t(__shared_mutex_cv::~__shared_mutex_cv, __shared_mutex_cv::unlock,\n+\t__shared_mutex_cv::unlock_shared): Likewise.\n+\t(shared_timed_mutex::try_lock_until,\n+\tshared_timed_mutex::try_lock_shared_until): Likewise.\n+\t* include/std/valarray (valarray::valarray(const _Tp*, size_t),\n+\tvalarray::operator=, valarray::sum, valarray::min, valarray::max,\n+\t_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT, _DEFINE_BINARY_OPERATOR):\n+\tLikewise.\n+\n 2015-09-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/shared_ptr_base.h (__shared_ptr::operator->): Change"}, {"sha": "6b1fc1e656553d22dca42caa7fffc449809234f8", "filename": "libstdc++-v3/doc/html/manual/using_macros.html", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_macros.html?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -68,9 +68,16 @@\n \tdetect violations of the requirements of the standard.  This\n \tis described in more detail in\n \t<a class=\"link\" href=\"ext_compile_checks.html\" title=\"Chapter\u00a016.\u00a0Compile Time Checks\">Compile Time Checks</a>.\n+      </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_ASSERTIONS</code></span></dt><dd><p>\n+\tUndefined by default. When defined, enables extra error checking in\n+        the form of precondition assertions, such as bounds checking in\n+        strings and null pointer checks when dereferencing smart pointers.\n       </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_DEBUG</code></span></dt><dd><p>\n \tUndefined by default. When defined, compiles user code using\n \tthe <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a017.\u00a0Debug Mode\">debug mode</a>.\n+        When defined, <code class=\"code\">_GLIBCXX_ASSERTIONS</code> is defined\n+        automatically, so all the assertions enabled by that macro are also\n+        enabled in debug mode.\n       </p></dd><dt><span class=\"term\"><code class=\"code\">_GLIBCXX_DEBUG_PEDANTIC</code></span></dt><dd><p>\n \tUndefined by default. When defined while compiling with\n \tthe <a class=\"link\" href=\"debug_mode.html\" title=\"Chapter\u00a017.\u00a0Debug Mode\">debug mode</a>, makes"}, {"sha": "bad49f20c61e62ab105cf2fc3e7c12a67e9e7658", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -903,11 +903,22 @@ g++ -Winvalid-pch -I. -include stdc++.h -H -g -O2 hello.cc -o test.exe\n       </para>\n     </listitem></varlistentry>\n \n+    <varlistentry><term><code>_GLIBCXX_ASSERTIONS</code></term>\n+    <listitem>\n+      <para>\n+\tUndefined by default. When defined, enables extra error checking in\n+        the form of precondition assertions, such as bounds checking in\n+        strings and null pointer checks when dereferencing smart pointers.\n+      </para>\n+    </listitem></varlistentry>\n     <varlistentry><term><code>_GLIBCXX_DEBUG</code></term>\n     <listitem>\n       <para>\n \tUndefined by default. When defined, compiles user code using\n \tthe <link linkend=\"manual.ext.debug_mode\">debug mode</link>.\n+        When defined, <code>_GLIBCXX_ASSERTIONS</code> is defined\n+        automatically, so all the assertions enabled by that macro are also\n+        enabled in debug mode.\n       </para>\n     </listitem></varlistentry>\n     <varlistentry><term><code>_GLIBCXX_DEBUG_PEDANTIC</code></term>"}, {"sha": "c2bd1aa37ba9531a176e71c86abaa993172e0327", "filename": "libstdc++-v3/include/backward/auto_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fauto_ptr.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -180,7 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       element_type&\n       operator*() const throw() \n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n+\t__glibcxx_assert(_M_ptr != 0);\n \treturn *_M_ptr; \n       }\n       \n@@ -193,7 +193,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       element_type*\n       operator->() const throw() \n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n+\t__glibcxx_assert(_M_ptr != 0);\n \treturn _M_ptr; \n       }\n       "}, {"sha": "3226617fec8063ebc4891816a398f73f6b1da6af", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -830,7 +830,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+\t__glibcxx_assert(__pos <= size());\n \treturn _M_data()[__pos];\n       }\n \n@@ -849,7 +849,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       {\n         // Allow pos == size() both in C++98 mode, as v3 extension,\n \t// and in C++11 mode.\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+\t__glibcxx_assert(__pos <= size());\n         // In pedantic mode be strict in C++98 mode.\n \t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());\n \treturn _M_data()[__pos];\n@@ -905,7 +905,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       reference\n       front() noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](0);\n       }\n \n@@ -916,7 +916,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       front() const noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](0);\n       }\n \n@@ -927,7 +927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       reference\n       back() noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](this->size() - 1);\n       }\n \n@@ -938,7 +938,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       back() const noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](this->size() - 1);\n       }\n #endif\n@@ -1520,7 +1520,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       void\n       pop_back() noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \t_M_erase(size() - 1, 1);\n       }\n #endif // C++11\n@@ -3276,7 +3276,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       const_reference\n       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+\t__glibcxx_assert(__pos <= size());\n \treturn _M_data()[__pos];\n       }\n \n@@ -3295,7 +3295,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       {\n         // Allow pos == size() both in C++98 mode, as v3 extension,\n \t// and in C++11 mode.\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= size());\n+\t__glibcxx_assert(__pos <= size());\n         // In pedantic mode be strict in C++98 mode.\n \t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());\n \t_M_leak();\n@@ -3354,7 +3354,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       reference\n       front()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](0);\n       }\n \n@@ -3365,7 +3365,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       const_reference\n       front() const _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](0);\n       }\n \n@@ -3376,7 +3376,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       reference\n       back()\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](this->size() - 1);\n       }\n \n@@ -3387,7 +3387,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       const_reference\n       back() const _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \treturn operator[](this->size() - 1);\n       }\n #endif\n@@ -3877,7 +3877,7 @@ _GLIBCXX_END_NAMESPACE_CXX11\n       void\n       pop_back() // FIXME C++11: should be noexcept.\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!empty());\n+\t__glibcxx_assert(!empty());\n \terase(size() - 1, 1);\n       }\n #endif // C++11"}, {"sha": "924f13e384c81ccb59555214f5c725e9d6a89f58", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -138,7 +138,7 @@\n # endif\n #endif\n \n-// Macro for extern template, ie controling template linkage via use\n+// Macro for extern template, ie controlling template linkage via use\n // of extern keyword on template declaration. As documented in the g++\n // manual, it inhibits all implicit instantiations and is used\n // throughout the library to avoid multiple weak definitions for\n@@ -350,8 +350,6 @@ namespace std\n \t namespace _GLIBCXX_STD_C { _GLIBCXX_BEGIN_NAMESPACE_VERSION\n # define _GLIBCXX_END_NAMESPACE_CONTAINER \\\n \t _GLIBCXX_END_NAMESPACE_VERSION }\n-# undef _GLIBCXX_EXTERN_TEMPLATE\n-# define _GLIBCXX_EXTERN_TEMPLATE -1\n #endif\n \n #ifdef _GLIBCXX_PARALLEL\n@@ -414,8 +412,19 @@ namespace std\n # define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 _GLIBCXX_END_NAMESPACE_LDBL\n #endif\n \n+// Debug Mode implies checking assertions.\n+#ifdef _GLIBCXX_DEBUG\n+# define _GLIBCXX_ASSERTIONS\n+#endif\n+\n+// Disable std::string explicit instantiation declarations in order to assert.\n+#ifdef _GLIBCXX_ASSERTIONS\n+# undef _GLIBCXX_EXTERN_TEMPLATE\n+# define _GLIBCXX_EXTERN_TEMPLATE -1\n+#endif\n+\n // Assert.\n-#if !defined(_GLIBCXX_DEBUG) && !defined(_GLIBCXX_PARALLEL)\n+#if !defined(_GLIBCXX_ASSERTIONS) && !defined(_GLIBCXX_PARALLEL)\n # define __glibcxx_assert(_Condition)\n #else\n namespace std"}, {"sha": "b29df30bebba3df4aa521109afaab58cc975e79c", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -1680,7 +1680,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _IntType __b = std::numeric_limits<_IntType>::max())\n \t: _M_a(__a), _M_b(__b)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n+\t  __glibcxx_assert(_M_a <= _M_b);\n \t}\n \n \tresult_type\n@@ -1881,7 +1881,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _RealType __b = _RealType(1))\n \t: _M_a(__a), _M_b(__b)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n+\t  __glibcxx_assert(_M_a <= _M_b);\n \t}\n \n \tresult_type\n@@ -2099,7 +2099,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _RealType __stddev = _RealType(1))\n \t: _M_mean(__mean), _M_stddev(__stddev)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_stddev > _RealType(0));\n+\t  __glibcxx_assert(_M_stddev > _RealType(0));\n \t}\n \n \t_RealType\n@@ -2517,7 +2517,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _RealType __beta_val = _RealType(1))\n \t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n+\t  __glibcxx_assert(_M_alpha > _RealType(0));\n \t  _M_initialize();\n \t}\n \n@@ -3582,7 +3582,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       param_type(double __p = 0.5)\n       : _M_p(__p)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT((_M_p >= 0.0) && (_M_p <= 1.0));\n+\t__glibcxx_assert((_M_p >= 0.0) && (_M_p <= 1.0));\n       }\n \n       double\n@@ -3791,7 +3791,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(_IntType __t = _IntType(1), double __p = 0.5)\n \t: _M_t(__t), _M_p(__p)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT((_M_t >= _IntType(0))\n+\t  __glibcxx_assert((_M_t >= _IntType(0))\n \t\t\t\t&& (_M_p >= 0.0)\n \t\t\t\t&& (_M_p <= 1.0));\n \t  _M_initialize();\n@@ -4022,7 +4022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(double __p = 0.5)\n \t: _M_p(__p)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n+\t  __glibcxx_assert((_M_p > 0.0) && (_M_p < 1.0));\n \t  _M_initialize();\n \t}\n \n@@ -4221,7 +4221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(_IntType __k = 1, double __p = 0.5)\n \t: _M_k(__k), _M_p(__p)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT((_M_k > 0) && (_M_p > 0.0) && (_M_p <= 1.0));\n+\t  __glibcxx_assert((_M_k > 0) && (_M_p > 0.0) && (_M_p <= 1.0));\n \t}\n \n \t_IntType\n@@ -4444,7 +4444,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(double __mean = 1.0)\n \t: _M_mean(__mean)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_mean > 0.0);\n+\t  __glibcxx_assert(_M_mean > 0.0);\n \t  _M_initialize();\n \t}\n \n@@ -4659,7 +4659,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(_RealType __lambda = _RealType(1))\n \t: _M_lambda(__lambda)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_lambda > _RealType(0));\n+\t  __glibcxx_assert(_M_lambda > _RealType(0));\n \t}\n \n \t_RealType"}, {"sha": "07fed5644c911d4849542d1959def80892760577", "filename": "libstdc++-v3/include/bits/regex.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -1693,7 +1693,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       operator[](size_type __sub) const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\t__glibcxx_assert( ready() );\n \treturn __sub < size()\n \t       ? _Base_type::operator[](__sub)\n \t       : _M_unmatched_sub();\n@@ -1710,7 +1710,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       prefix() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\t__glibcxx_assert( ready() );\n \treturn !empty() ? _M_prefix() : _M_unmatched_sub();\n       }\n \n@@ -1725,7 +1725,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       const_reference\n       suffix() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT( ready() );\n+\t__glibcxx_assert( ready() );\n \treturn !empty() ? _M_suffix() : _M_unmatched_sub();\n       }\n "}, {"sha": "ec220fd960ba6a01ed2e372718ef06f6794838d9", "filename": "libstdc++-v3/include/bits/regex.tcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex.tcc?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -362,7 +362,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   const match_results<_Bi_iter, _Alloc>::char_type* __fmt_last,\n \t   match_flag_type __flags) const\n     {\n-      _GLIBCXX_DEBUG_ASSERT( ready() );\n+      __glibcxx_assert( ready() );\n       regex_traits<char_type> __traits;\n       typedef std::ctype<char_type> __ctype_type;\n       const __ctype_type&\n@@ -535,7 +535,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t   | regex_constants::match_not_null\n \t\t\t\t   | regex_constants::match_continuous))\n \t\t    {\n-\t\t      _GLIBCXX_DEBUG_ASSERT(_M_match[0].matched);\n+\t\t      __glibcxx_assert(_M_match[0].matched);\n \t\t      auto& __prefix = _M_match._M_prefix();\n \t\t      __prefix.first = __prefix_first;\n \t\t      __prefix.matched = __prefix.first != __prefix.second;\n@@ -550,7 +550,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  _M_flags |= regex_constants::match_prev_avail;\n \t  if (regex_search(__start, _M_end, _M_match, *_M_pregex, _M_flags))\n \t    {\n-\t      _GLIBCXX_DEBUG_ASSERT(_M_match[0].matched);\n+\t      __glibcxx_assert(_M_match[0].matched);\n \t      auto& __prefix = _M_match._M_prefix();\n \t      __prefix.first = __prefix_first;\n \t      __prefix.matched = __prefix.first != __prefix.second;"}, {"sha": "f6f63a10d45bb03c726ada885f165d0084071dbb", "filename": "libstdc++-v3/include/bits/regex_automaton.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_automaton.tcc?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -216,13 +216,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  auto& __ref = _M_nfa[__v];\n \t  if (__ref._M_next != _S_invalid_state_id)\n \t    {\n-\t      _GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_next) > 0);\n+\t      __glibcxx_assert(__m.count(__ref._M_next) > 0);\n \t      __ref._M_next = __m[__ref._M_next];\n \t    }\n \t  if (__ref._M_has_alt())\n \t    if (__ref._M_alt != _S_invalid_state_id)\n \t      {\n-\t\t_GLIBCXX_DEBUG_ASSERT(__m.count(__ref._M_alt) > 0);\n+\t\t__glibcxx_assert(__m.count(__ref._M_alt) > 0);\n \t\t__ref._M_alt = __m[__ref._M_alt];\n \t      }\n \t}"}, {"sha": "336a2e8133b629d99337245efb965bec2b0fa146", "filename": "libstdc++-v3/include/bits/regex_compiler.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_compiler.tcc?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -83,7 +83,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (!_M_match_token(_ScannerT::_S_token_eof))\n \t__throw_regex_error(regex_constants::error_paren);\n       __r._M_append(_M_pop());\n-      _GLIBCXX_DEBUG_ASSERT(_M_stack.empty());\n+      __glibcxx_assert(_M_stack.empty());\n       __r._M_append(_M_nfa->_M_insert_subexpr_end());\n       __r._M_append(_M_nfa->_M_insert_accept());\n       _M_nfa->_M_eliminate_dummy();\n@@ -399,7 +399,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _Compiler<_TraitsT>::\n     _M_insert_character_class_matcher()\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_value.size() == 1);\n+      __glibcxx_assert(_M_value.size() == 1);\n       _BracketMatcher<_TraitsT, __icase, __collate> __matcher\n \t(_M_ctype.is(_CtypeT::upper, _M_value[0]), _M_traits);\n       __matcher._M_add_character_class(_M_value, false);"}, {"sha": "a13f0d542498c7e9f7ef94d39ea8b5ae2024a024", "filename": "libstdc++-v3/include/bits/regex_executor.tcc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_executor.tcc?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -305,7 +305,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// If matched, keep going; else just return and try another state.\n \tcase _S_opcode_backref:\n \t  {\n-\t    _GLIBCXX_DEBUG_ASSERT(__dfs_mode);\n+\t    __glibcxx_assert(__dfs_mode);\n \t    auto& __submatch = _M_cur_results[__state._M_backref_index];\n \t    if (!__submatch.matched)\n \t      break;\n@@ -333,7 +333,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tcase _S_opcode_accept:\n \t  if (__dfs_mode)\n \t    {\n-\t      _GLIBCXX_DEBUG_ASSERT(!_M_has_sol);\n+\t      __glibcxx_assert(!_M_has_sol);\n \t      if (__match_mode == _Match_mode::_Exact)\n \t\t_M_has_sol = _M_current == _M_end;\n \t      else\n@@ -347,7 +347,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t    _M_results = _M_cur_results;\n \t\t  else // POSIX\n \t\t    {\n-\t\t      _GLIBCXX_DEBUG_ASSERT(_M_states._M_get_sol_pos());\n+\t\t      __glibcxx_assert(_M_states._M_get_sol_pos());\n \t\t      // Here's POSIX's logic: match the longest one. However\n \t\t      // we never know which one (lhs or rhs of \"|\") is longer\n \t\t      // unless we try both of them and compare the results.\n@@ -400,7 +400,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t  break;\n \tdefault:\n-\t  _GLIBCXX_DEBUG_ASSERT(false);\n+\t  __glibcxx_assert(false);\n \t}\n     }\n "}, {"sha": "c158c65924a147741d415c12536c4a0067b45f6f", "filename": "libstdc++-v3/include/bits/regex_scanner.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fregex_scanner.tcc?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -84,7 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_M_scan_in_brace();\n       else\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(false);\n+\t  __glibcxx_assert(false);\n \t}\n     }\n \n@@ -186,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t_M_token = __it->second;\n \t\treturn;\n \t      }\n-\t  _GLIBCXX_DEBUG_ASSERT(false);\n+\t  __glibcxx_assert(false);\n \t}\n       else\n \t{"}, {"sha": "1a96b4cd36daa2a6e6f78bfb45bc966d049d47cf", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -1029,7 +1029,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treset(_Tp1* __p) // _Tp1 must be complete.\n \t{\n \t  // Catch self-reset errors.\n-\t  _GLIBCXX_DEBUG_ASSERT(__p == 0 || __p != _M_ptr);\n+\t  __glibcxx_assert(__p == 0 || __p != _M_ptr);\n \t  __shared_ptr(__p).swap(*this);\n \t}\n \n@@ -1047,7 +1047,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typename std::add_lvalue_reference<_Tp>::type\n       operator*() const noexcept\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_ptr != 0);\n+\t__glibcxx_assert(_M_ptr != 0);\n \treturn *_M_ptr;\n       }\n "}, {"sha": "5d6d0284d7686b26b0c147cd387eee4d3c88735e", "filename": "libstdc++-v3/include/bits/stl_iterator_base_funcs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator_base_funcs.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -145,7 +145,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // concept requirements\n       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)\n-      _GLIBCXX_DEBUG_ASSERT(__n >= 0);\n+      __glibcxx_assert(__n >= 0);\n       while (__n--)\n \t++__i;\n     }"}, {"sha": "6344923036a108904aeb3b5e56903a654b16741c", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -287,7 +287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typename add_lvalue_reference<element_type>::type\n       operator*() const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(get() != pointer());\n+\t__glibcxx_assert(get() != pointer());\n \treturn *get();\n       }\n \n@@ -555,7 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typename std::add_lvalue_reference<element_type>::type\n       operator[](size_t __i) const\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(get() != pointer());\n+\t__glibcxx_assert(get() != pointer());\n \treturn get()[__i];\n       }\n "}, {"sha": "b5935fed36f956f3b960093886b57fa2090a83cd", "filename": "libstdc++-v3/include/debug/debug.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fdebug.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -62,7 +62,6 @@ namespace __gnu_debug\n \n # define __glibcxx_requires_cond(_Cond,_Msg)\n # define __glibcxx_requires_valid_range(_First,_Last)\n-# define __glibcxx_requires_non_empty_range(_First,_Last)\n # define __glibcxx_requires_sorted(_First,_Last)\n # define __glibcxx_requires_sorted_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_sorted_set(_First1,_Last1,_First2)\n@@ -73,7 +72,6 @@ namespace __gnu_debug\n # define __glibcxx_requires_partitioned_upper_pred(_First,_Last,_Value,_Pred)\n # define __glibcxx_requires_heap(_First,_Last)\n # define __glibcxx_requires_heap_pred(_First,_Last,_Pred)\n-# define __glibcxx_requires_nonempty()\n # define __glibcxx_requires_string(_String)\n # define __glibcxx_requires_string_len(_String,_Len)\n # define __glibcxx_requires_subscript(_N)\n@@ -82,6 +80,18 @@ namespace __gnu_debug\n # define __glibcxx_requires_irreflexive_pred(_First,_Last,_Pred)\n # define __glibcxx_requires_irreflexive_pred2(_First,_Last,_Pred)\n \n+#ifdef _GLIBCXX_ASSERTIONS\n+// Verify that [_First, _Last) forms a non-empty iterator range.\n+# define __glibcxx_requires_non_empty_range(_First,_Last) \\\n+  __glibcxx_assert(_First != _Last)\n+// Verify that the container is nonempty\n+# define __glibcxx_requires_nonempty() \\\n+  __glibcxx_assert(! this->empty())\n+#else\n+# define __glibcxx_requires_non_empty_range(_First,_Last)\n+# define __glibcxx_requires_nonempty()\n+#endif\n+\n #else\n \n # include <debug/macros.h>"}, {"sha": "5daef12191dea0e92736d3203453b9549558587a", "filename": "libstdc++-v3/include/experimental/fs_path.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Ffs_path.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -341,8 +341,8 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     path(string_type __str, _Type __type) : _M_pathname(__str), _M_type(__type)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(!empty());\n-      _GLIBCXX_DEBUG_ASSERT(_M_type != _Type::_Multi);\n+      __glibcxx_assert(!empty());\n+      __glibcxx_assert(_M_type != _Type::_Multi);\n     }\n \n     enum class _Split { _Stem, _Extension };\n@@ -948,15 +948,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline path::iterator&\n   path::iterator::operator++()\n   {\n-    _GLIBCXX_DEBUG_ASSERT(_M_path != nullptr);\n+    __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_cur != _M_path->_M_cmpts.end());\n+\t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());\n \t++_M_cur;\n       }\n     else\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(!_M_at_end);\n+\t__glibcxx_assert(!_M_at_end);\n \t_M_at_end = true;\n       }\n     return *this;\n@@ -965,15 +965,15 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline path::iterator&\n   path::iterator::operator--()\n   {\n-    _GLIBCXX_DEBUG_ASSERT(_M_path != nullptr);\n+    __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_cur != _M_path->_M_cmpts.begin());\n+\t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.begin());\n \t--_M_cur;\n       }\n     else\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_at_end);\n+\t__glibcxx_assert(_M_at_end);\n \t_M_at_end = false;\n       }\n     return *this;\n@@ -982,10 +982,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   inline path::iterator::reference\n   path::iterator::operator*() const\n   {\n-    _GLIBCXX_DEBUG_ASSERT(_M_path != nullptr);\n+    __glibcxx_assert(_M_path != nullptr);\n     if (_M_path->_M_type == _Type::_Multi)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(_M_cur != _M_path->_M_cmpts.end());\n+\t__glibcxx_assert(_M_cur != _M_path->_M_cmpts.end());\n \treturn *_M_cur;\n       }\n     return *_M_path;"}, {"sha": "9dca400d75e2d5e284c0246f88e1e1a60ff050a2", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -180,7 +180,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       operator[](size_type __pos) const\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// _GLIBCXX_DEBUG_ASSERT(__pos < this->_M_len);\n+\t// __glibcxx_assert(__pos < this->_M_len);\n \treturn *(this->_M_str + __pos);\n       }\n \n@@ -200,15 +200,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       front() const\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// _GLIBCXX_DEBUG_ASSERT(this->_M_len > 0);\n+\t// __glibcxx_assert(this->_M_len > 0);\n \treturn *this->_M_str;\n       }\n \n       constexpr const _CharT&\n       back() const\n       {\n \t// TODO: Assert to restore in a way compatible with the constexpr.\n-\t// _GLIBCXX_DEBUG_ASSERT(this->_M_len > 0);\n+\t// __glibcxx_assert(this->_M_len > 0);\n \treturn *(this->_M_str + this->_M_len - 1);\n       }\n \n@@ -221,7 +221,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       remove_prefix(size_type __n)\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(this->_M_len >= __n);\n+\t__glibcxx_assert(this->_M_len >= __n);\n \tthis->_M_str += __n;\n \tthis->_M_len -= __n;\n       }"}, {"sha": "be6db5d4f65b43480342dc2eaaa000d394a9ed4e", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -415,8 +415,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _RealType __beta_val = _RealType(1))\n \t: _M_alpha(__alpha_val), _M_beta(__beta_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > _RealType(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_beta > _RealType(0));\n+\t  __glibcxx_assert(_M_alpha > _RealType(0));\n+\t  __glibcxx_assert(_M_beta > _RealType(0));\n \t}\n \n \t_RealType\n@@ -669,8 +669,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  else if (__dist == _Dimen * (_Dimen + 1) / 2)\n \t    _M_init_lower(__meanbegin, __meanend, __varcovbegin, __varcovend);\n \t  else\n-\t    _M_init_diagonal(__meanbegin, __meanend,\n-\t\t\t     __varcovbegin, __varcovend);\n+\t    {\n+\t      __glibcxx_assert(__dist == _Dimen);\n+\t      _M_init_diagonal(__meanbegin, __meanend,\n+\t\t\t       __varcovbegin, __varcovend);\n+\t    }\n \t}\n \n \tparam_type(std::initializer_list<_RealType> __mean,\n@@ -688,8 +691,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    _M_init_lower(__mean.begin(), __mean.end(),\n \t\t\t  __varcov.begin(), __varcov.end());\n \t  else\n-\t    _M_init_diagonal(__mean.begin(), __mean.end(),\n-\t\t\t     __varcov.begin(), __varcov.end());\n+\t    {\n+\t      __glibcxx_assert(__varcov.size() == _Dimen);\n+\t      _M_init_diagonal(__mean.begin(), __mean.end(),\n+\t\t\t       __varcov.begin(), __varcov.end());\n+\t    }\n \t}\n \n \tstd::array<_RealType, _Dimen>\n@@ -945,8 +951,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __sigma_val = result_type(1))\n \t: _M_nu(__nu_val), _M_sigma(__sigma_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_nu >= result_type(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_sigma > result_type(0));\n+\t  __glibcxx_assert(_M_nu >= result_type(0));\n+\t  __glibcxx_assert(_M_sigma > result_type(0));\n \t}\n \n \tresult_type\n@@ -1187,8 +1193,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __omega_val = result_type(1))\n \t: _M_mu(__mu_val), _M_omega(__omega_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_mu >= result_type(0.5L));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_omega > result_type(0));\n+\t  __glibcxx_assert(_M_mu >= result_type(0.5L));\n+\t  __glibcxx_assert(_M_omega > result_type(0));\n \t}\n \n \tresult_type\n@@ -1420,8 +1426,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __mu_val = result_type(1))\n \t: _M_alpha(__alpha_val), _M_mu(__mu_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_alpha > result_type(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_mu > result_type(0));\n+\t  __glibcxx_assert(_M_alpha > result_type(0));\n+\t  __glibcxx_assert(_M_mu > result_type(0));\n \t}\n \n \tresult_type\n@@ -1655,9 +1661,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __nu_val = result_type(1))\n \t: _M_lambda(__lambda_val), _M_mu(__mu_val), _M_nu(__nu_val)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_lambda > result_type(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_mu > result_type(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_nu > result_type(0));\n+\t  __glibcxx_assert(_M_lambda > result_type(0));\n+\t  __glibcxx_assert(_M_mu > result_type(0));\n+\t  __glibcxx_assert(_M_nu > result_type(0));\n \t}\n \n \tresult_type\n@@ -1893,7 +1899,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __b = result_type(1))\n \t: _M_a(__a), _M_b(__b)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n+\t  __glibcxx_assert(_M_a <= _M_b);\n \t}\n \n \tresult_type\n@@ -2129,8 +2135,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __omega = result_type(1))\n \t: _M_q(__q), _M_omega(__omega)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_q > result_type(0));\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_q < result_type(1));\n+\t  __glibcxx_assert(_M_q > result_type(0));\n+\t  __glibcxx_assert(_M_q < result_type(1));\n \t}\n \n \tresult_type\n@@ -2364,9 +2370,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   _RealType __c = _RealType(1))\n \t: _M_a(__a), _M_b(__b), _M_c(__c)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_a <= _M_b);\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_b <= _M_c);\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_a < _M_c);\n+\t  __glibcxx_assert(_M_a <= _M_b);\n+\t  __glibcxx_assert(_M_b <= _M_c);\n+\t  __glibcxx_assert(_M_a < _M_c);\n \n \t  _M_r_ab = (_M_b - _M_a) / (_M_c - _M_a);\n \t  _M_f_ab_ac = (_M_b - _M_a) * (_M_c - _M_a);\n@@ -2620,8 +2626,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t: _M_mu(__mu), _M_kappa(__kappa)\n \t{\n \t  const _RealType __pi = __gnu_cxx::__math_constants<_RealType>::__pi;\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_mu >= -__pi && _M_mu <= __pi);\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_kappa >= _RealType(0));\n+\t  __glibcxx_assert(_M_mu >= -__pi && _M_mu <= __pi);\n+\t  __glibcxx_assert(_M_kappa >= _RealType(0));\n \n \t  auto __tau = std::sqrt(_RealType(4) * _M_kappa * _M_kappa\n \t\t\t\t + _RealType(1)) + _RealType(1);\n@@ -2857,8 +2863,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __n = 1)\n \t: _M_N{__N}, _M_K{__K}, _M_n{__n}\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_N >= _M_K);\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_N >= _M_n);\n+\t  __glibcxx_assert(_M_N >= _M_K);\n+\t  __glibcxx_assert(_M_N >= _M_n);\n \t}\n \n \tresult_type\n@@ -3114,7 +3120,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t   result_type __b = result_type(1))\n \t: _M_a(__a), _M_b(__b)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT(_M_b > result_type(0));\n+\t  __glibcxx_assert(_M_b > result_type(0));\n \t}\n \n \tresult_type"}, {"sha": "94af25eb597b4375bd4294b6a6aca217b169caa4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -536,7 +536,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       const_reference\n       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT\n       {\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= this->size());\n+\t__glibcxx_assert(__pos <= this->size());\n \treturn this->_M_data()[__pos];\n       }\n \n@@ -555,7 +555,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       {\n         // Allow pos == size() both in C++98 mode, as v3 extension,\n \t// and in C++11 mode.\n-\t_GLIBCXX_DEBUG_ASSERT(__pos <= this->size());\n+\t__glibcxx_assert(__pos <= this->size());\n         // In pedantic mode be strict in C++98 mode.\n \t_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L\n \t\t\t\t || __pos < this->size());"}, {"sha": "5ed4fd571f13e3906a6e0bed295a690a4cecac0c", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -668,7 +668,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline complex<_Tp>\n     polar(const _Tp& __rho, const _Tp& __theta)\n     {\n-      _GLIBCXX_DEBUG_ASSERT( __rho >= 0 );\n+      __glibcxx_assert( __rho >= 0 );\n       return complex<_Tp>(__rho * cos(__theta), __rho * sin(__theta));\n     }\n "}, {"sha": "5e5ced11efec3b3924389faf2c282045fccc3c17", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -302,7 +302,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n \n     timed_mutex() = default;\n-    ~timed_mutex() { _GLIBCXX_DEBUG_ASSERT( !_M_locked ); }\n+    ~timed_mutex() { __glibcxx_assert( !_M_locked ); }\n \n     timed_mutex(const timed_mutex&) = delete;\n     timed_mutex& operator=(const timed_mutex&) = delete;\n@@ -351,7 +351,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     unlock()\n     {\n       lock_guard<mutex> __lk(_M_mut);\n-      _GLIBCXX_DEBUG_ASSERT( _M_locked );\n+      __glibcxx_assert( _M_locked );\n       _M_locked = false;\n       _M_cv.notify_one();\n     }\n@@ -380,7 +380,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   public:\n \n     recursive_timed_mutex() = default;\n-    ~recursive_timed_mutex() { _GLIBCXX_DEBUG_ASSERT( _M_count == 0 ); }\n+    ~recursive_timed_mutex() { __glibcxx_assert( _M_count == 0 ); }\n \n     recursive_timed_mutex(const recursive_timed_mutex&) = delete;\n     recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;\n@@ -449,8 +449,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     unlock()\n     {\n       lock_guard<mutex> __lk(_M_mut);\n-      _GLIBCXX_DEBUG_ASSERT( _M_owner == this_thread::get_id() );\n-      _GLIBCXX_DEBUG_ASSERT( _M_count > 0 );\n+      __glibcxx_assert( _M_owner == this_thread::get_id() );\n+      __glibcxx_assert( _M_count > 0 );\n       if (--_M_count == 0)\n \t{\n \t  _M_owner = {};"}, {"sha": "5ae492d42c7ef88adfb4584af760f640975ecee6", "filename": "libstdc++-v3/include/std/shared_mutex", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fshared_mutex?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -85,14 +85,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       else if (__ret == EPERM)\n \t__throw_system_error(int(errc::operation_not_permitted));\n       // Errors not handled: EBUSY, EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n     }\n \n     ~__shared_mutex_pthread()\n     {\n       int __ret __attribute((__unused__)) = pthread_rwlock_destroy(&_M_rwlock);\n       // Errors not handled: EBUSY, EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n     }\n #endif\n \n@@ -106,7 +106,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__ret == EDEADLK)\n \t__throw_system_error(int(errc::resource_deadlock_would_occur));\n       // Errors not handled: EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n     }\n \n     bool\n@@ -115,7 +115,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       int __ret = pthread_rwlock_trywrlock(&_M_rwlock);\n       if (__ret == EBUSY) return false;\n       // Errors not handled: EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n       return true;\n     }\n \n@@ -124,7 +124,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       int __ret __attribute((__unused__)) = pthread_rwlock_unlock(&_M_rwlock);\n       // Errors not handled: EPERM, EBUSY, EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n     }\n \n     // Shared ownership\n@@ -143,7 +143,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (__ret == EDEADLK)\n \t__throw_system_error(int(errc::resource_deadlock_would_occur));\n       // Errors not handled: EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n     }\n \n     bool\n@@ -155,7 +155,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // an exception.\n       if (__ret == EBUSY || __ret == EAGAIN) return false;\n       // Errors not handled: EINVAL\n-      _GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+      __glibcxx_assert(__ret == 0);\n       return true;\n     }\n \n@@ -224,7 +224,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     ~__shared_mutex_cv()\n     {\n-      _GLIBCXX_DEBUG_ASSERT( _M_state == 0 );\n+      __glibcxx_assert( _M_state == 0 );\n     }\n \n     __shared_mutex_cv(const __shared_mutex_cv&) = delete;\n@@ -259,7 +259,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     unlock()\n     {\n       lock_guard<mutex> __lk(_M_mut);\n-      _GLIBCXX_DEBUG_ASSERT( _M_write_entered() );\n+      __glibcxx_assert( _M_write_entered() );\n       _M_state = 0;\n       // call notify_all() while mutex is held so that another thread can't\n       // lock and unlock the mutex then destroy *this before we make the call.\n@@ -294,7 +294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     unlock_shared()\n     {\n       lock_guard<mutex> __lk(_M_mut);\n-      _GLIBCXX_DEBUG_ASSERT( _M_readers() > 0 );\n+      __glibcxx_assert( _M_readers() > 0 );\n       auto __prev = _M_state--;\n       if (_M_write_entered())\n \t{\n@@ -422,7 +422,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__ret == ETIMEDOUT || __ret == EDEADLK)\n \t  return false;\n \t// Errors not handled: EINVAL\n-\t_GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+\t__glibcxx_assert(__ret == 0);\n \treturn true;\n       }\n \n@@ -474,7 +474,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tif (__ret == ETIMEDOUT)\n \t  return false;\n \t// Errors not handled: EINVAL\n-\t_GLIBCXX_DEBUG_ASSERT(__ret == 0);\n+\t__glibcxx_assert(__ret == 0);\n \treturn true;\n       }\n "}, {"sha": "c3d00475cef5d0b09f380c8cfc7b23c1e50863ef", "filename": "libstdc++-v3/include/std/valarray", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvalarray?ref=2f1e8e7c4730bbc4bf15e85ecf4f954d1711db10", "patch": "@@ -621,7 +621,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     valarray<_Tp>::valarray(const _Tp* __restrict__ __p, size_t __n)\n     : _M_size(__n), _M_data(__valarray_get_storage<_Tp>(__n))\n     { \n-      _GLIBCXX_DEBUG_ASSERT(__p != 0 || __n == 0);\n+      __glibcxx_assert(__p != 0 || __n == 0);\n       std::__valarray_copy_construct(__p, __p + __n, _M_data); \n     }\n \n@@ -779,7 +779,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const slice_array<_Tp>& __sa)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __sa._M_sz);\n+      __glibcxx_assert(_M_size == __sa._M_sz);\n       std::__valarray_copy(__sa._M_array, __sa._M_sz,\n \t\t\t   __sa._M_stride, _Array<_Tp>(_M_data));\n       return *this;\n@@ -789,7 +789,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const gslice_array<_Tp>& __ga)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __ga._M_index.size());\n+      __glibcxx_assert(_M_size == __ga._M_index.size());\n       std::__valarray_copy(__ga._M_array, _Array<size_t>(__ga._M_index),\n \t\t\t   _Array<_Tp>(_M_data), _M_size);\n       return *this;\n@@ -799,7 +799,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const mask_array<_Tp>& __ma)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __ma._M_sz);\n+      __glibcxx_assert(_M_size == __ma._M_sz);\n       std::__valarray_copy(__ma._M_array, __ma._M_mask,\n \t\t\t   _Array<_Tp>(_M_data), _M_size);\n       return *this;\n@@ -809,7 +809,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline valarray<_Tp>&\n     valarray<_Tp>::operator=(const indirect_array<_Tp>& __ia)\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __ia._M_sz);\n+      __glibcxx_assert(_M_size == __ia._M_sz);\n       std::__valarray_copy(__ia._M_array, __ia._M_index,\n \t\t\t   _Array<_Tp>(_M_data), _M_size);\n       return *this;\n@@ -925,7 +925,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Tp\n     valarray<_Tp>::sum() const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size > 0);\n+      __glibcxx_assert(_M_size > 0);\n       return std::__valarray_sum(_M_data, _M_data + _M_size);\n     }\n \n@@ -1032,15 +1032,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline _Tp\n     valarray<_Tp>::min() const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size > 0);\n+      __glibcxx_assert(_M_size > 0);\n       return *std::min_element(_M_data, _M_data + _M_size);\n     }\n \n   template<typename _Tp>\n     inline _Tp\n     valarray<_Tp>::max() const\n     {\n-      _GLIBCXX_DEBUG_ASSERT(_M_size > 0);\n+      __glibcxx_assert(_M_size > 0);\n       return *std::max_element(_M_data, _M_data + _M_size);\n     }\n   \n@@ -1090,7 +1090,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline valarray<_Tp>&\t\t\t\t\t\t\\\n     valarray<_Tp>::operator _Op##=(const valarray<_Tp> &__v)\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _GLIBCXX_DEBUG_ASSERT(_M_size == __v._M_size);                    \\\n+      __glibcxx_assert(_M_size == __v._M_size);\t\t\t\t\\\n       _Array_augmented_##_Name(_Array<_Tp>(_M_data), _M_size, \t\t\\\n \t\t\t       _Array<_Tp>(__v._M_data));\t\t\\\n       return *this;\t\t\t\t\t\t\t\\\n@@ -1138,7 +1138,7 @@ _DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT(>>, __shift_right)\n                  typename __fun<_Name, _Tp>::result_type>               \\\n     operator _Op(const valarray<_Tp>& __v, const valarray<_Tp>& __w)\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      _GLIBCXX_DEBUG_ASSERT(__v.size() == __w.size());                  \\\n+      __glibcxx_assert(__v.size() == __w.size());                       \\\n       typedef _BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp> _Closure; \\\n       typedef typename __fun<_Name, _Tp>::result_type _Rt;              \\\n       return _Expr<_Closure, _Rt>(_Closure(__v, __w));                  \\"}]}