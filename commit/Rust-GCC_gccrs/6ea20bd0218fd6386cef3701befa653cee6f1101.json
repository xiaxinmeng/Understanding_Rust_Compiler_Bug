{"sha": "6ea20bd0218fd6386cef3701befa653cee6f1101", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhMjBiZDAyMThmZDYzODZjZWYzNzAxYmVmYTY1M2NlZTZmMTEwMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-10-10T04:10:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-10-10T04:10:17Z"}, "message": "* cp-tree.h (template_info_decl_check): Check ENABLE_TREE_CHECKING.\n\nFrom-SVN: r276787", "tree": {"sha": "bc43bdd32241c555b2f66419130b996ad9db98bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc43bdd32241c555b2f66419130b996ad9db98bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ea20bd0218fd6386cef3701befa653cee6f1101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea20bd0218fd6386cef3701befa653cee6f1101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea20bd0218fd6386cef3701befa653cee6f1101", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea20bd0218fd6386cef3701befa653cee6f1101/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66ef6ac5806f82fdaa35c01f89b6c8cd4b47b4b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ef6ac5806f82fdaa35c01f89b6c8cd4b47b4b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ef6ac5806f82fdaa35c01f89b6c8cd4b47b4b5"}], "stats": {"total": 66, "additions": 37, "deletions": 29}, "files": [{"sha": "2a35bf252f05fe3539787bbb056917cab4b5299b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea20bd0218fd6386cef3701befa653cee6f1101/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea20bd0218fd6386cef3701befa653cee6f1101/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ea20bd0218fd6386cef3701befa653cee6f1101", "patch": "@@ -1,3 +1,7 @@\n+2019-10-09  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-tree.h (template_info_decl_check): Check ENABLE_TREE_CHECKING.\n+\n 2019-10-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91364 - P0388R4: Permit conversions to arrays of\tunknown bound."}, {"sha": "663d84b2a58e010b4cc5d2d1426a29626b550559", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea20bd0218fd6386cef3701befa653cee6f1101/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea20bd0218fd6386cef3701befa653cee6f1101/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6ea20bd0218fd6386cef3701befa653cee6f1101", "patch": "@@ -593,15 +593,46 @@ extern GTY(()) tree cp_global_trees[CPTI_MAX];\n   TREE_CHECK(NODE,BOUND_TEMPLATE_TEMPLATE_PARM)\n \n #if defined ENABLE_TREE_CHECKING && (GCC_VERSION >= 2007)\n+\n+/* Returns t iff the node can have a TEMPLATE_INFO field.  */\n+\n+inline tree\n+template_info_decl_check (const_tree t, const char* f, int l, const char* fn)\n+{\n+  switch (TREE_CODE (t))\n+    {\n+    case VAR_DECL:\n+    case FUNCTION_DECL:\n+    case FIELD_DECL:\n+    case TYPE_DECL:\n+    case CONCEPT_DECL:\n+    case TEMPLATE_DECL:\n+      return const_cast<tree>(t);\n+    default:\n+      break;\n+    }\n+  tree_check_failed (t, f, l, fn,\n+\t\t     VAR_DECL, FUNCTION_DECL, FIELD_DECL, TYPE_DECL,\n+\t\t     CONCEPT_DECL, TEMPLATE_DECL, 0);\n+  gcc_unreachable ();\n+}\n+\n+#define TEMPLATE_INFO_DECL_CHECK(NODE) \\\n+  template_info_decl_check ((NODE), __FILE__, __LINE__, __FUNCTION__)\n+\n #define THUNK_FUNCTION_CHECK(NODE) __extension__\t\t\t\\\n ({  __typeof (NODE) const __t = (NODE);\t\t\t\t\t\\\n     if (TREE_CODE (__t) != FUNCTION_DECL || !__t->decl_common.lang_specific \\\n \t|| !__t->decl_common.lang_specific->u.fn.thunk_p)\t\t\\\n       tree_check_failed (__t, __FILE__, __LINE__, __FUNCTION__, 0);\t\\\n      __t; })\n-#else\n+\n+#else /* ENABLE_TREE_CHECKING */\n+\n+#define TEMPLATE_INFO_DECL_CHECK(NODE) (NODE)\n #define THUNK_FUNCTION_CHECK(NODE) (NODE)\n-#endif\n+\n+#endif /* ENABLE_TREE_CHECKING */\n \f\n /* Language-dependent contents of an identifier.  */\n \n@@ -3348,33 +3379,6 @@ struct GTY(()) lang_decl {\n #define TEMPLATE_DECL_COMPLEX_ALIAS_P(NODE) \\\n   DECL_LANG_FLAG_2 (TEMPLATE_DECL_CHECK (NODE))\n \n-/* Returns t iff the node can have a TEMPLATE_INFO field.  */\n-\n-inline tree\n-template_info_decl_check (const_tree t, const char* f, int l, const char* fn)\n-{\n-  switch (TREE_CODE (t))\n-    {\n-    case VAR_DECL:\n-    case FUNCTION_DECL:\n-    case FIELD_DECL:\n-    case TYPE_DECL:\n-    case CONCEPT_DECL:\n-    case TEMPLATE_DECL:\n-      return const_cast<tree>(t);\n-    default:\n-      break;\n-    }\n-  tree_check_failed (t, f, l, fn,\n-                     VAR_DECL, FUNCTION_DECL, FIELD_DECL, TYPE_DECL,\n-                     CONCEPT_DECL, TEMPLATE_DECL, 0);\n-  gcc_unreachable ();\n-}\n-\n-\n-#define TEMPLATE_INFO_DECL_CHECK(NODE) \\\n-  template_info_decl_check ((NODE), __FILE__, __LINE__, __FUNCTION__)\n-\n /* Nonzero for a type which is an alias for another type; i.e, a type\n    which declaration was written 'using name-of-type =\n    another-type'.  */"}]}