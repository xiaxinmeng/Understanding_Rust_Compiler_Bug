{"sha": "e6b9638bffefdbb60bf261626d2335848de301c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiOTYzOGJmZmVmZGJiNjBiZjI2MTYyNmQyMzM1ODQ4ZGUzMDFjNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-11T15:52:20Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-11T15:52:20Z"}, "message": "parse.y (reserved_declspecs): Don't handle attributes.\n\n        * parse.y (reserved_declspecs): Don't handle attributes.\n        (reserved_typespecquals): Handle them here.\n        * Make-lang.in (parse.c): Adjust expected conflicts.\n\nFrom-SVN: r49678", "tree": {"sha": "b634d429e088a0ccefa6b3c7358a84f2106abf2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b634d429e088a0ccefa6b3c7358a84f2106abf2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b9638bffefdbb60bf261626d2335848de301c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b9638bffefdbb60bf261626d2335848de301c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b9638bffefdbb60bf261626d2335848de301c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b9638bffefdbb60bf261626d2335848de301c4/comments", "author": null, "committer": null, "parents": [{"sha": "d6b2c474747305341ffe3f4c6fdc4f1fee4a47d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6b2c474747305341ffe3f4c6fdc4f1fee4a47d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6b2c474747305341ffe3f4c6fdc4f1fee4a47d1"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "f6c2a542951619b1966582c1852c2449298b7ca1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e6b9638bffefdbb60bf261626d2335848de301c4", "patch": "@@ -1,3 +1,9 @@\n+2002-02-11  Jason Merrill  <jason@redhat.com>\n+\n+\t* parse.y (reserved_declspecs): Don't handle attributes.\n+\t(reserved_typespecquals): Handle them here.\n+\t* Make-lang.in (parse.c): Adjust expected conflicts.\n+\n 2002-02-08  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parse.y (primary, primary_no_id): Use compstmt_or_stmtexpr\n@@ -1603,8 +1609,8 @@ Fri Sep 21 08:16:19 2001  J\"orn Rennecke <amylaar@redhat.com>\n \n 2001-09-15  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n-\t\t* Make-lang.in (cp/error.o): Depend on real.h\n-\t\t* error.c: #include \"real.h\"\n+\t* Make-lang.in (cp/error.o): Depend on real.h\n+\t* error.c: #include \"real.h\"\n \n 2001-09-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n "}, {"sha": "f8d023a1cb7c05d9322a1d81798709aa12ed0767", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=e6b9638bffefdbb60bf261626d2335848de301c4", "patch": "@@ -120,7 +120,7 @@ $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf\n \n $(srcdir)/cp/parse.h: $(srcdir)/cp/parse.c\n $(srcdir)/cp/parse.c: $(srcdir)/cp/parse.y\n-\t@echo \"Expect 31 shift/reduce conflicts and 58 reduce/reduce conflicts.\"\n+\t@echo \"Expect 33 shift/reduce conflicts and 58 reduce/reduce conflicts.\"\n \tcd $(srcdir)/cp && \\\n \tif $(BISON) $(BISONFLAGS) -d -o p$$$$.c parse.y; then \\\n \t  grep '^#define[ \t]*YYEMPTY' p$$$$.c >> p$$$$.h ; \\"}, {"sha": "54a6823a616dd0da635719bbce9566e75b71999f", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=e6b9638bffefdbb60bf261626d2335848de301c4", "patch": "@@ -1895,10 +1895,6 @@ reserved_declspecs:\n \t\t    warning (\"`%s' is not at beginning of declaration\",\n \t\t\t     IDENTIFIER_POINTER ($2));\n \t\t  $$ = tree_cons (NULL_TREE, $2, $$); }\n-\t| reserved_declspecs attributes\n-\t\t{ $$ = tree_cons ($2, NULL_TREE, $1); }\n-\t| attributes\n-\t\t{ $$ = tree_cons ($1, NULL_TREE, NULL_TREE); }\n \t;\n \n /* List of just storage classes and type modifiers.\n@@ -1966,6 +1962,10 @@ reserved_typespecquals:\n \t\t{ $$ = build_tree_list (NULL_TREE, $1.t); }\n \t| reserved_typespecquals typespecqual_reserved\n \t\t{ $$ = tree_cons (NULL_TREE, $2.t, $1); }\n+\t| reserved_typespecquals attributes\n+\t\t{ $$ = tree_cons ($2, NULL_TREE, $1); }\n+\t| attributes %prec EMPTY\n+\t\t{ $$ = tree_cons ($1, NULL_TREE, NULL_TREE); }\n \t;\n \n /* A typespec (but not a type qualifier)."}, {"sha": "68cc7415558feca7415ca07ccb27f78da357f123", "filename": "gcc/testsuite/g++.dg/ext/attrib4.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b9638bffefdbb60bf261626d2335848de301c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fattrib4.C?ref=e6b9638bffefdbb60bf261626d2335848de301c4", "patch": "@@ -0,0 +1,31 @@\n+// Test for syntax support of various attribute permutations.\n+\n+int\n+__attribute__((noreturn))\n+__attribute__((unused))\n+one(void); // OK \n+\n+__attribute__((noreturn))\n+__attribute__((unused))\n+int\n+two(void); // OK\n+\n+int\n+__attribute__((unused))\n+three (void)\n+__attribute__((noreturn)); // OK\n+\n+__attribute__((unused))\n+int\n+four (void)\n+__attribute__((noreturn)); // OK\n+\n+int\n+five(void)\n+__attribute__((noreturn))\n+__attribute__((unused));  // OK\n+\n+__attribute__((noreturn))\n+int\n+__attribute__((unused)) // parse error before '__attribute__' in C++\n+six (void);              // OK in C"}]}