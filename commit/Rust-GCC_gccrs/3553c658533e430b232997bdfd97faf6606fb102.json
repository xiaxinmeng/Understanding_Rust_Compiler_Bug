{"sha": "3553c658533e430b232997bdfd97faf6606fb102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1M2M2NTg1MzNlNDMwYjIzMjk5N2JkZmQ5N2ZhZjY2MDZmYjEwMg==", "commit": {"author": {"name": "Dennis Zhang", "email": "denzha01@e124712.cambridge.arm.com", "date": "2020-11-03T16:56:02Z"}, "committer": {"name": "Dennis Zhang", "email": "denzha01@e124712.cambridge.arm.com", "date": "2020-11-03T16:56:02Z"}, "message": "aarch64: intrinsics extract half of bf16 vector\n\nThis patch implements ACLE intrinsics vget_low_bf16 and vget_high_bf16\nto extract lower or higher half from a bfloat16x8 vector. The\nvget_high_bf16 is done by 'dup' instruction. The vget_low_bf16 is just\nto return the lower half of a vector register. Tests include both big-\nand little-endian cases.\n\ngcc/ChangeLog:\n\n2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def (vget_lo_half): New entry.\n\t(vget_hi_half): Likewise.\n\t* config/aarch64/aarch64-simd.md (aarch64_vget_lo_halfv8bf): New entry.\n\t(aarch64_vget_hi_halfv8bf): Likewise.\n\t* config/aarch64/arm_neon.h (vget_low_bf16): New intrinsic.\n\t(vget_high_bf16): Likewise.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c: New test.", "tree": {"sha": "366d78e9ad002496d287d08adc51592a9e584d0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/366d78e9ad002496d287d08adc51592a9e584d0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3553c658533e430b232997bdfd97faf6606fb102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3553c658533e430b232997bdfd97faf6606fb102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3553c658533e430b232997bdfd97faf6606fb102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3553c658533e430b232997bdfd97faf6606fb102/comments", "author": null, "committer": null, "parents": [{"sha": "cee45e49126d18fe2dc8efc83c190662cd41914d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cee45e49126d18fe2dc8efc83c190662cd41914d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cee45e49126d18fe2dc8efc83c190662cd41914d"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "748614418b240df121aea2045de2b0b40b671ef7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -1,3 +1,12 @@\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (vget_lo_half): New entry.\n+\t(vget_hi_half): Likewise.\n+\t* config/aarch64/aarch64-simd.md (aarch64_vget_lo_halfv8bf): New entry.\n+\t(aarch64_vget_hi_halfv8bf): Likewise.\n+\t* config/aarch64/arm_neon.h (vget_low_bf16): New intrinsic.\n+\t(vget_high_bf16): Likewise.\n+\n 2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/97205"}, {"sha": "6d898d4503a8d42897aead4725d96545db09cc7f", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -722,6 +722,10 @@\n   VAR1 (QUADOP_LANE, bfmlalb_lane_q, 0, ALL, v4sf)\n   VAR1 (QUADOP_LANE, bfmlalt_lane_q, 0, ALL, v4sf)\n \n+  /* Implemented by aarch64_vget_lo/hi_halfv8bf.  */\n+  VAR1 (UNOP, vget_lo_half, 0, AUTO_FP, v8bf)\n+  VAR1 (UNOP, vget_hi_half, 0, AUTO_FP, v8bf)\n+\n   /* Implemented by aarch64_simd_<sur>mmlav16qi.  */\n   VAR1 (TERNOP, simd_smmla, 0, NONE, v16qi)\n   VAR1 (TERNOPU, simd_ummla, 0, NONE, v16qi)"}, {"sha": "a667efa15ed7c322a536e35c0684b498c08545e8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -7159,6 +7159,27 @@\n   [(set_attr \"type\" \"neon_dot<VDQSF:q>\")]\n )\n \n+;; vget_low/high_bf16\n+(define_expand \"aarch64_vget_lo_halfv8bf\"\n+  [(match_operand:V4BF 0 \"register_operand\")\n+   (match_operand:V8BF 1 \"register_operand\")]\n+  \"TARGET_BF16_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (V8BFmode, 8, false);\n+  emit_insn (gen_aarch64_get_halfv8bf (operands[0], operands[1], p));\n+  DONE;\n+})\n+\n+(define_expand \"aarch64_vget_hi_halfv8bf\"\n+  [(match_operand:V4BF 0 \"register_operand\")\n+   (match_operand:V8BF 1 \"register_operand\")]\n+  \"TARGET_BF16_SIMD\"\n+{\n+  rtx p = aarch64_simd_vect_par_cnst_half (V8BFmode, 8, true);\n+  emit_insn (gen_aarch64_get_halfv8bf (operands[0], operands[1], p));\n+  DONE;\n+})\n+\n ;; bfmmla\n (define_insn \"aarch64_bfmmlaqv4sf\"\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=w\")"}, {"sha": "0009e50f3feb6235ddc200afa3da7c45ea5755fe", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -35680,6 +35680,20 @@ vbfmlaltq_laneq_f32 (float32x4_t __r, bfloat16x8_t __a, bfloat16x8_t __b,\n   return __builtin_aarch64_bfmlalt_lane_qv4sf (__r, __a, __b, __index);\n }\n \n+__extension__ extern __inline bfloat16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vget_low_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_aarch64_vget_lo_halfv8bf (__a);\n+}\n+\n+__extension__ extern __inline bfloat16x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+vget_high_bf16 (bfloat16x8_t __a)\n+{\n+  return __builtin_aarch64_vget_hi_halfv8bf (__a);\n+}\n+\n __extension__ extern __inline float32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vcvt_f32_bf16 (bfloat16x4_t __a)"}, {"sha": "7068f80a4bef9d360867bed0b1348d8a5e37364a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -1,3 +1,8 @@\n+2020-11-03  Dennis Zhang  <dennis.zhang@arm.com>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get.c: New test.\n+\t* gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c: New test.\n+\t\n 2020-11-03  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR target/97205"}, {"sha": "bd9bb1109741f3f5886472566de327383eee78ed", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_get-be.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get-be.c?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-mbig-endian -save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_vget_low_bf16:\n+**     ret\n+*/\n+bfloat16x4_t test_vget_low_bf16 (bfloat16x8_t a)\n+{\n+  return vget_low_bf16 (a);\n+}\n+\n+/*\n+**test_vget_high_bf16:\n+**     dup\td0, v0.d\\[1\\]\n+**     ret\n+*/\n+bfloat16x4_t test_vget_high_bf16 (bfloat16x8_t a)\n+{\n+  return vget_high_bf16 (a);\n+}"}, {"sha": "2193753ffbb6246aa16eb5033559b21266a556a6", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_get.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3553c658533e430b232997bdfd97faf6606fb102/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_get.c?ref=3553c658533e430b232997bdfd97faf6606fb102", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon } */\n+/* { dg-additional-options \"-save-temps\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" {-O[^0]} } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+\n+#include <arm_neon.h>\n+\n+/*\n+**test_vget_low_bf16:\n+**     ret\n+*/\n+bfloat16x4_t test_vget_low_bf16 (bfloat16x8_t a)\n+{\n+  return vget_low_bf16 (a);\n+}\n+\n+/*\n+**test_vget_high_bf16:\n+**     dup\td0, v0.d\\[1\\]\n+**     ret\n+*/\n+bfloat16x4_t test_vget_high_bf16 (bfloat16x8_t a)\n+{\n+  return vget_high_bf16 (a);\n+}"}]}