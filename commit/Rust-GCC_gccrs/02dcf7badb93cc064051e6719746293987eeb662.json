{"sha": "02dcf7badb93cc064051e6719746293987eeb662", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJkY2Y3YmFkYjkzY2MwNjQwNTFlNjcxOTc0NjI5Mzk4N2VlYjY2Mg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-01-21T09:34:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-01-21T09:34:19Z"}, "message": "re PR c++/34850 (Recursive BLOCK tree causes compilation to hang during diagnostics)\n\n2008-01-21  Richard Guenther  <rguenther@suse.de>\n\n\tPR c++/34850\n\tcp/\n\t* error.c (cp_print_error_function): Deal with recursive\n\tBLOCK trees.\n\n\t* g++.dg/torture/pr34850.C: New testcase.\n\nFrom-SVN: r131690", "tree": {"sha": "6f554d4813d2c8677f8ccb321f6fad2ad910ca4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f554d4813d2c8677f8ccb321f6fad2ad910ca4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02dcf7badb93cc064051e6719746293987eeb662", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02dcf7badb93cc064051e6719746293987eeb662", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02dcf7badb93cc064051e6719746293987eeb662", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02dcf7badb93cc064051e6719746293987eeb662/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b158b5c6aa0a3773622552c165ee88ebc31ab004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b158b5c6aa0a3773622552c165ee88ebc31ab004", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b158b5c6aa0a3773622552c165ee88ebc31ab004"}], "stats": {"total": 89, "additions": 88, "deletions": 1}, "files": [{"sha": "768efc523ceec88a976f2606e649b11e6a42134a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=02dcf7badb93cc064051e6719746293987eeb662", "patch": "@@ -1,3 +1,9 @@\n+2008-01-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/34850\n+\t* error.c (cp_print_error_function): Deal with recursive\n+\tBLOCK trees.\n+\n 2008-01-20  Paolo Carlini  <pcarlini@suse.de>\n \n         PR c++/34891"}, {"sha": "94f108e5c3777b320a887d09bc89fa247c479925", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=02dcf7badb93cc064051e6719746293987eeb662", "patch": "@@ -2424,7 +2424,9 @@ cp_print_error_function (diagnostic_context *context,\n \t\t{\n \t\t  ao = BLOCK_ABSTRACT_ORIGIN (block);\n \n-\t\t  while (TREE_CODE (ao) == BLOCK && BLOCK_ABSTRACT_ORIGIN (ao))\n+\t\t  while (TREE_CODE (ao) == BLOCK\n+\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao)\n+\t\t\t && BLOCK_ABSTRACT_ORIGIN (ao) != ao)\n \t\t    ao = BLOCK_ABSTRACT_ORIGIN (ao);\n \n \t\t  if (TREE_CODE (ao) == FUNCTION_DECL)"}, {"sha": "04ad10cd0321f44dab49c06dd6d300eb2591241d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02dcf7badb93cc064051e6719746293987eeb662", "patch": "@@ -1,3 +1,8 @@\n+2008-01-21  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c++/34850\n+\t* g++.dg/torture/pr34850.C: New testcase.\n+\n 2008-01-21  Alon Dayan  <alond@il.ibm.com>\n \t    Olga Golovanevsky  <olga@il.ibm.com>\n "}, {"sha": "e7caa7b6638f5ca804961911191aa7e711a50ae1", "filename": "gcc/testsuite/g++.dg/torture/pr34850.C", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02dcf7badb93cc064051e6719746293987eeb662/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr34850.C?ref=02dcf7badb93cc064051e6719746293987eeb662", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned char uint8_t;\n+typedef unsigned int uint32_t;\n+typedef uint8_t byte;\n+typedef uint32_t u32bit;\n+typedef unsigned int size_t;\n+extern \"C\" {\n+    extern void __warn_memset_zero_len (void) __attribute__((__warning__ (\"\")));\n+    extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__, __artificial__))\n+    void * memset (void *__dest, int __ch, size_t __len) throw () {\n+\tif (__builtin_constant_p (__len) && __len == 0)\n+\t    __warn_memset_zero_len (); /* { dg-warning \"\" } */\n+    }\n+}\n+inline void clear_mem(void* ptr, u32bit n)    {\n+    memset(ptr, 0, n);\n+}\n+template<typename T> class MemoryRegion    {\n+public:\n+    u32bit size() const {\n+    }\n+    const T* begin() const {\n+    }\n+    void set(const T in[], u32bit n) {\n+\tcreate(n);\n+    }\n+    void set(const MemoryRegion<T>& in) {\n+\tset(in.begin(), in.size());\n+    }\n+    void clear() {\n+\tclear_mem(buf, allocated);\n+    }\n+    void create(u32bit);\n+    MemoryRegion() {\n+\tused = allocated = 0;\n+    }\n+    mutable T* buf;\n+    mutable u32bit used;\n+    mutable u32bit allocated;\n+};\n+template<typename T> void MemoryRegion<T>::create(u32bit n)    {\n+    if(n <= allocated) {\n+\tclear();\n+    }\n+}\n+template<typename T> class SecureVector : public MemoryRegion<T>    {\n+public:\n+    SecureVector<T>& operator=(const MemoryRegion<T>& in)          {\n+\tif(this != &in) set(in);\n+    }\n+};\n+class OctetString    {\n+public:\n+    SecureVector<byte> bits_of() const {\n+    }\n+    OctetString& operator^=(const OctetString&);\n+    void change(const MemoryRegion<byte>& in) {\n+\tbits = in;\n+    }\n+    OctetString(const MemoryRegion<byte>& in) {\n+\tchange(in);\n+    }\n+    SecureVector<byte> bits;\n+};\n+OctetString& OctetString::operator^=(const OctetString& k)    {\n+    if(&k == this) {\n+\tbits.clear();\n+    }\n+}\n+bool operator==(const OctetString& s1, const OctetString& s2)    {\n+    return (s1.bits_of() == s2.bits_of());\n+}"}]}