{"sha": "a49a045b92f982f5617c3bbde97a33157237e25b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ5YTA0NWI5MmY5ODJmNTYxN2MzYmJkZTk3YTMzMTU3MjM3ZTI1Yg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-26T16:32:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-26T18:15:34Z"}, "message": "libstdc++: Change [range.iter.op] functions to function objects [PR 100768]\n\nThe standard specifies std::ranges::distance etc as function templates,\nbut it also requires them to not be found by ADL, and to suppress ADL\nwhen normal unqualified lookup does find them. That means they need to\nbe function objects.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100768\n\t* include/bits/ranges_base.h (advance, distance, next, prev):\n\tReplace function templates with function objects.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++20.cc:\n\tAdjust for changes to function objects.\n\t* testsuite/std/ranges/adaptors/elements.cc: Add using\n\tdeclarations for names from namespace ranges.\n\t* testsuite/std/ranges/adaptors/transform.cc: Likewise.\n\t* testsuite/24_iterators/range_operations/100768.cc: New test.", "tree": {"sha": "ca296da21c602e87ce31d7f632fb834a373cae7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca296da21c602e87ce31d7f632fb834a373cae7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a49a045b92f982f5617c3bbde97a33157237e25b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49a045b92f982f5617c3bbde97a33157237e25b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a49a045b92f982f5617c3bbde97a33157237e25b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a49a045b92f982f5617c3bbde97a33157237e25b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f0cfeb1ac580edf629874146b349fe7ad7e7718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f0cfeb1ac580edf629874146b349fe7ad7e7718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f0cfeb1ac580edf629874146b349fe7ad7e7718"}], "stats": {"total": 537, "additions": 336, "deletions": 201}, "files": [{"sha": "11f05fa4e2ddf40bdb6046af804b6abd2a07decc", "filename": "libstdc++-v3/include/bits/ranges_base.h", "status": "modified", "additions": 197, "deletions": 181, "changes": 378, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_base.h?ref=a49a045b92f982f5617c3bbde97a33157237e25b", "patch": "@@ -674,197 +674,213 @@ namespace ranges\n \n   // [range.iter.ops] range iterator operations\n \n-  template<input_or_output_iterator _It>\n-    constexpr void\n-    advance(_It& __it, iter_difference_t<_It> __n)\n-    {\n-      if constexpr (random_access_iterator<_It>)\n-\t__it += __n;\n-      else if constexpr (bidirectional_iterator<_It>)\n-\t{\n-\t  if (__n > 0)\n-\t    {\n-\t      do\n-\t\t{\n-\t\t  ++__it;\n-\t\t}\n-\t      while (--__n);\n-\t    }\n-\t  else if (__n < 0)\n-\t    {\n-\t      do\n-\t\t{\n-\t\t  --__it;\n-\t\t}\n-\t      while (++__n);\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  // cannot decrement a non-bidirectional iterator\n-\t  __glibcxx_assert(__n >= 0);\n-\t  while (__n-- > 0)\n-\t    ++__it;\n-\t}\n-    }\n-\n-  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n-    constexpr void\n-    advance(_It& __it, _Sent __bound)\n-    {\n-      if constexpr (assignable_from<_It&, _Sent>)\n-\t__it = std::move(__bound);\n-      else if constexpr (sized_sentinel_for<_Sent, _It>)\n-\tranges::advance(__it, __bound - __it);\n-      else\n-\t{\n-\t  while (__it != __bound)\n-\t    ++__it;\n-\t}\n-    }\n+  struct __advance_fn\n+  {\n+    template<input_or_output_iterator _It>\n+      constexpr void\n+      operator()(_It& __it, iter_difference_t<_It> __n) const\n+      {\n+\tif constexpr (random_access_iterator<_It>)\n+\t  __it += __n;\n+\telse if constexpr (bidirectional_iterator<_It>)\n+\t  {\n+\t    if (__n > 0)\n+\t      {\n+\t\tdo\n+\t\t  {\n+\t\t    ++__it;\n+\t\t  }\n+\t\twhile (--__n);\n+\t      }\n+\t    else if (__n < 0)\n+\t      {\n+\t\tdo\n+\t\t  {\n+\t\t    --__it;\n+\t\t  }\n+\t\twhile (++__n);\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    // cannot decrement a non-bidirectional iterator\n+\t    __glibcxx_assert(__n >= 0);\n+\t    while (__n-- > 0)\n+\t      ++__it;\n+\t  }\n+      }\n \n-  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n-    constexpr iter_difference_t<_It>\n-    advance(_It& __it, iter_difference_t<_It> __n, _Sent __bound)\n-    {\n-      if constexpr (sized_sentinel_for<_Sent, _It>)\n-\t{\n-\t  const auto __diff = __bound - __it;\n-#ifdef __cpp_lib_is_constant_evaluated\n-\t  if (std::is_constant_evaluated()\n-\t      && !(__n == 0 || __diff == 0 || (__n < 0 == __diff < 0)))\n-\t    throw \"inconsistent directions for distance and bound\";\n-#endif\n-\t  // n and bound must not lead in opposite directions:\n-\t  __glibcxx_assert(__n == 0 || __diff == 0 || (__n < 0 == __diff < 0));\n-\t  const auto __absdiff = __diff < 0 ? -__diff : __diff;\n-\t  const auto __absn = __n < 0 ? -__n : __n;;\n-\t  if (__absn >= __absdiff)\n-\t    {\n-\t      ranges::advance(__it, __bound);\n-\t      return __n - __diff;\n-\t    }\n-\t  else\n-\t    {\n-\t      ranges::advance(__it, __n);\n-\t      return 0;\n-\t    }\n-\t}\n-      else if (__it == __bound || __n == 0)\n-\treturn iter_difference_t<_It>(0);\n-      else if (__n > 0)\n-\t{\n-\t  iter_difference_t<_It> __m = 0;\n-\t  do\n-\t    {\n+    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      constexpr void\n+      operator()(_It& __it, _Sent __bound) const\n+      {\n+\tif constexpr (assignable_from<_It&, _Sent>)\n+\t  __it = std::move(__bound);\n+\telse if constexpr (sized_sentinel_for<_Sent, _It>)\n+\t  (*this)(__it, __bound - __it);\n+\telse\n+\t  {\n+\t    while (__it != __bound)\n \t      ++__it;\n-\t      ++__m;\n-\t    }\n-\t  while (__m != __n && __it != __bound);\n-\t  return __n - __m;\n-\t}\n-      else if constexpr (bidirectional_iterator<_It> && same_as<_It, _Sent>)\n-\t{\n-\t  iter_difference_t<_It> __m = 0;\n-\t  do\n-\t    {\n-\t      --__it;\n-\t      --__m;\n-\t    }\n-\t  while (__m != __n && __it != __bound);\n-\t  return __n - __m;\n-\t}\n-      else\n-\t{\n-\t  // cannot decrement a non-bidirectional iterator\n-\t  __glibcxx_assert(__n >= 0);\n-\t  return __n;\n-\t}\n-    }\n+\t  }\n+      }\n \n-  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n-    constexpr iter_difference_t<_It>\n-    distance(_It __first, _Sent __last)\n-    {\n-      if constexpr (sized_sentinel_for<_Sent, _It>)\n-\treturn __last - __first;\n-      else\n-\t{\n-\t  iter_difference_t<_It> __n = 0;\n-\t  while (__first != __last)\n-\t    {\n-\t      ++__first;\n-\t      ++__n;\n-\t    }\n-\t  return __n;\n-\t}\n-    }\n+    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      constexpr iter_difference_t<_It>\n+      operator()(_It& __it, iter_difference_t<_It> __n, _Sent __bound) const\n+      {\n+\tif constexpr (sized_sentinel_for<_Sent, _It>)\n+\t  {\n+\t    const auto __diff = __bound - __it;\n+\n+\t    // n and bound must not lead in opposite directions:\n+\t    __glibcxx_assert(__n == 0 || __diff == 0 || (__n < 0 == __diff < 0));\n+\t    const auto __absdiff = __diff < 0 ? -__diff : __diff;\n+\t    const auto __absn = __n < 0 ? -__n : __n;;\n+\t    if (__absn >= __absdiff)\n+\t      {\n+\t\t(*this)(__it, __bound);\n+\t\treturn __n - __diff;\n+\t      }\n+\t    else\n+\t      {\n+\t\t(*this)(__it, __n);\n+\t\treturn 0;\n+\t      }\n+\t  }\n+\telse if (__it == __bound || __n == 0)\n+\t  return iter_difference_t<_It>(0);\n+\telse if (__n > 0)\n+\t  {\n+\t    iter_difference_t<_It> __m = 0;\n+\t    do\n+\t      {\n+\t\t++__it;\n+\t\t++__m;\n+\t      }\n+\t    while (__m != __n && __it != __bound);\n+\t    return __n - __m;\n+\t  }\n+\telse if constexpr (bidirectional_iterator<_It> && same_as<_It, _Sent>)\n+\t  {\n+\t    iter_difference_t<_It> __m = 0;\n+\t    do\n+\t      {\n+\t\t--__it;\n+\t\t--__m;\n+\t      }\n+\t    while (__m != __n && __it != __bound);\n+\t    return __n - __m;\n+\t  }\n+\telse\n+\t  {\n+\t    // cannot decrement a non-bidirectional iterator\n+\t    __glibcxx_assert(__n >= 0);\n+\t    return __n;\n+\t  }\n+      }\n+  };\n \n-  template<range _Range>\n-    constexpr range_difference_t<_Range>\n-    distance(_Range&& __r)\n-    {\n-      if constexpr (sized_range<_Range>)\n-\treturn static_cast<range_difference_t<_Range>>(ranges::size(__r));\n-      else\n-\treturn ranges::distance(ranges::begin(__r), ranges::end(__r));\n-    }\n-\n-  template<input_or_output_iterator _It>\n-    constexpr _It\n-    next(_It __x)\n-    {\n-      ++__x;\n-      return __x;\n-    }\n+  inline constexpr __advance_fn advance{};\n \n-  template<input_or_output_iterator _It>\n-    constexpr _It\n-    next(_It __x, iter_difference_t<_It> __n)\n-    {\n-      ranges::advance(__x, __n);\n-      return __x;\n-    }\n+  struct __distance_fn\n+  {\n+    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      constexpr iter_difference_t<_It>\n+      operator()(_It __first, _Sent __last) const\n+      {\n+\tif constexpr (sized_sentinel_for<_Sent, _It>)\n+\t  return __last - __first;\n+\telse\n+\t  {\n+\t    iter_difference_t<_It> __n = 0;\n+\t    while (__first != __last)\n+\t      {\n+\t\t++__first;\n+\t\t++__n;\n+\t      }\n+\t    return __n;\n+\t  }\n+      }\n \n-  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n-    constexpr _It\n-    next(_It __x, _Sent __bound)\n-    {\n-      ranges::advance(__x, __bound);\n-      return __x;\n-    }\n+    template<range _Range>\n+      constexpr range_difference_t<_Range>\n+      operator()(_Range&& __r) const\n+      {\n+\tif constexpr (sized_range<_Range>)\n+\t  return static_cast<range_difference_t<_Range>>(ranges::size(__r));\n+\telse\n+\t  return (*this)(ranges::begin(__r), ranges::end(__r));\n+      }\n+  };\n \n-  template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n-    constexpr _It\n-    next(_It __x, iter_difference_t<_It> __n, _Sent __bound)\n-    {\n-      ranges::advance(__x, __n, __bound);\n-      return __x;\n-    }\n+  inline constexpr __distance_fn distance{};\n \n-  template<bidirectional_iterator _It>\n-    constexpr _It\n-    prev(_It __x)\n-    {\n-      --__x;\n-      return __x;\n-    }\n+  struct __next_fn\n+  {\n+    template<input_or_output_iterator _It>\n+      constexpr _It\n+      operator()(_It __x) const\n+      {\n+\t++__x;\n+\treturn __x;\n+      }\n \n-  template<bidirectional_iterator _It>\n-    constexpr _It\n-    prev(_It __x, iter_difference_t<_It> __n)\n-    {\n-      ranges::advance(__x, -__n);\n-      return __x;\n-    }\n+    template<input_or_output_iterator _It>\n+      constexpr _It\n+      operator()(_It __x, iter_difference_t<_It> __n) const\n+      {\n+\tranges::advance(__x, __n);\n+\treturn __x;\n+      }\n \n-  template<bidirectional_iterator _It>\n-    constexpr _It\n-    prev(_It __x, iter_difference_t<_It> __n, _It __bound)\n-    {\n-      ranges::advance(__x, -__n, __bound);\n-      return __x;\n-    }\n+    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      constexpr _It\n+      operator()(_It __x, _Sent __bound) const\n+      {\n+\tranges::advance(__x, __bound);\n+\treturn __x;\n+      }\n+\n+    template<input_or_output_iterator _It, sentinel_for<_It> _Sent>\n+      constexpr _It\n+      operator()(_It __x, iter_difference_t<_It> __n, _Sent __bound) const\n+      {\n+\tranges::advance(__x, __n, __bound);\n+\treturn __x;\n+      }\n+  };\n+\n+  inline constexpr __next_fn next{};\n+\n+  struct __prev_fn\n+  {\n+    template<bidirectional_iterator _It>\n+      constexpr _It\n+      operator()(_It __x) const\n+      {\n+\t--__x;\n+\treturn __x;\n+      }\n+\n+    template<bidirectional_iterator _It>\n+      constexpr _It\n+      operator()(_It __x, iter_difference_t<_It> __n) const\n+      {\n+\tranges::advance(__x, -__n);\n+\treturn __x;\n+      }\n+\n+    template<bidirectional_iterator _It>\n+      constexpr _It\n+      operator()(_It __x, iter_difference_t<_It> __n, _It __bound) const\n+      {\n+\tranges::advance(__x, -__n, __bound);\n+\treturn __x;\n+      }\n+  };\n+\n+  inline constexpr __prev_fn prev{};\n \n   /// Type returned by algorithms instead of a dangling iterator or subrange.\n   struct dangling"}, {"sha": "112d654aefbf9351bf9673757721aa34b456f98c", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++20.cc", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B20.cc?ref=a49a045b92f982f5617c3bbde97a33157237e25b", "patch": "@@ -31,26 +31,11 @@ namespace std\n \n   namespace ranges\n   {\n-    template<input_or_output_iterator I, sentinel_for<I> S>\n-      constexpr iter_difference_t<I> distance(I first, S last);\n-    template<range R>\n-      constexpr range_difference_t<R> distance(R&& r);\n-\n-    template<input_or_output_iterator I>\n-      constexpr I next(I x);\n-    template<input_or_output_iterator I>\n-      constexpr I next(I x, iter_difference_t<I> n);\n-    template<input_or_output_iterator I, sentinel_for<I> S>\n-      constexpr I next(I x, S bound);\n-    template<input_or_output_iterator I, sentinel_for<I> S>\n-      constexpr I next(I x, iter_difference_t<I> n, S bound);\n-\n-    template<bidirectional_iterator I>\n-      constexpr I prev(I x);\n-    template<bidirectional_iterator I>\n-      constexpr I prev(I x, iter_difference_t<I> n);\n-    template<bidirectional_iterator I>\n-      constexpr I prev(I x, iter_difference_t<I> n, I bound);\n+    // These are function objects of unspecified type.\n+    auto& _distance = distance;\n+    auto& _advance = advance;\n+    auto& _next = next;\n+    auto& _prev = prev;\n   }\n \n   template<semiregular S> class move_sentinel;"}, {"sha": "bbcfcece5ff148ccd76c56303a554d8c68181663", "filename": "libstdc++-v3/testsuite/24_iterators/range_operations/100768.cc", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Frange_operations%2F100768.cc?ref=a49a045b92f982f5617c3bbde97a33157237e25b", "patch": "@@ -0,0 +1,128 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++20\" }\n+// { dg-do compile { target c++20 } }\n+\n+// PR libstdc++/100768 - Range iterator operations should be function objects\n+\n+#include <iterator>\n+#include <ranges>\n+\n+namespace ns1\n+{\n+  struct R { };\n+  void check_adl(R) { }\n+}\n+\n+namespace ns2\n+{\n+  using ns1::R;\n+\n+  struct A { };\n+\n+  template<typename I>\n+    R advance(I, ...) { return R{}; }\n+\n+  template<typename I>\n+    R distance(I, ...) { return R{}; }\n+\n+  template<typename I>\n+    R next(I, ...) { return R{}; }\n+\n+  template<typename I>\n+    R prev(I, ...) { return R{}; }\n+}\n+\n+template<typename T, typename U> struct associated { };\n+\n+void\n+test02()\n+{\n+  // This type has both ns2 and std::ranges as associated namespaces.\n+  using X = associated<ns2::A, std::ranges::dangling>;\n+\n+  X range[1];\n+  X* iter = range;\n+  X* const sentinel = iter + 1;\n+\n+  // [range.iter.op.general] p2 says: \"The function templates defined in\n+  // [range.iter.ops] are not found by argument-dependent name lookup.\"\n+  //\n+  // If we do not meet that requirement then the following will find those\n+  // function templates (because std::ranges is an associated namespace),\n+  // and the calls to check_adl will be ill-formed.\n+  check_adl( advance(iter, 1) );\n+  check_adl( advance(iter, 1, sentinel) );\n+  check_adl( distance(iter, sentinel) );\n+  check_adl( distance(range) );\n+  check_adl( next(iter) );\n+  check_adl( next(iter, 1) );\n+  check_adl( next(iter, sentinel) );\n+  check_adl( next(iter, 1, sentinel) );\n+  check_adl( prev(iter) );\n+  check_adl( prev(iter, 1) );\n+  check_adl( prev(iter, 1, sentinel) );\n+}\n+\n+namespace ns3\n+{\n+  struct A { };\n+\n+  void advance(A*, int) = delete;\n+  void advance(A*, int, A*) = delete;\n+\n+  void distance(A*, A*) = delete;\n+  void distance(A(&)[1]) = delete;\n+\n+  void next(A*) = delete;\n+  void next(A*, int) = delete;\n+  void next(A*, A*) = delete;\n+  void next(A*, int, A*) = delete;\n+\n+  void prev(A*) = delete;\n+  void prev(A*, int) = delete;\n+  void prev(A*, int, A*) = delete;\n+}\n+\n+void\n+test01()\n+{\n+  ns3::A range[1];\n+  ns3::A* iter = range;\n+  ns3::A* const sentinel = iter + 1;\n+\n+  // [range.iter.op.general] p2 also says: \"When found by unqualified name\n+  // lookup for the postfix-expression in a function call, they inhibit\n+  // argument-dependent name lookup.\"\n+  //\n+  // If we do not meet that requirement then the following will find the\n+  // deleted overloads in namespace ns3 (because it is an associated namespace\n+  // and those functions are exact matches for the arguments).\n+  using namespace std::ranges;\n+  advance(iter, 1);\n+  advance(iter, 3, sentinel);\n+  distance(iter, sentinel);\n+  distance(range);\n+  next(iter);\n+  next(iter, -1);\n+  next(iter, sentinel);\n+  next(iter, 5, sentinel);\n+  prev(iter);\n+  prev(iter, 0);\n+  prev(iter, 0, sentinel);\n+}"}, {"sha": "633fb36725dee3def3b35a7bd1922b43a3f87e63", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/elements.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Felements.cc?ref=a49a045b92f982f5617c3bbde97a33157237e25b", "patch": "@@ -76,6 +76,9 @@ struct X\n void\n test03()\n {\n+  using ranges::next;\n+  using ranges::begin;\n+\n   // LWG 3483\n   std::pair<int, X> x[3];\n   __gnu_test::test_forward_range<std::pair<int, X>> r(x);"}, {"sha": "c2e7ba0ba0255fc0111a07ede0a4501863734a0b", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/transform.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a49a045b92f982f5617c3bbde97a33157237e25b/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Ftransform.cc?ref=a49a045b92f982f5617c3bbde97a33157237e25b", "patch": "@@ -132,6 +132,9 @@ struct Y\n void\n test06()\n {\n+  using ranges::next;\n+  using ranges::begin;\n+\n   // LWG 3483\n   Y y[3];\n   __gnu_test::test_forward_range<Y> r(y);"}]}