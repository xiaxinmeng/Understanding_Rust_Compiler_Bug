{"sha": "8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNjZTA3ZDFkZGNjZDlmZmNkY2FhZmFhYTRjZjEzZmZhOTVlYzM2MA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-17T16:54:25Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-10-17T16:54:25Z"}, "message": "runtime: copy rdebug code from Go 1.7 runtime\n    \n    While we're at it, update the runtime/debug package, and start running\n    its testsuite by default.  I'm not sure why runtime/debug was not\n    previously updated to 1.7.  Doing that led me to fix some minor aspects\n    of runtime.Stack and the C function runtime/debug.readGCStats.\n    \n    Reviewed-on: https://go-review.googlesource.com/31251\n\nFrom-SVN: r241261", "tree": {"sha": "99f8a824655109bd2cd36ab0a8502e2fd713101a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f8a824655109bd2cd36ab0a8502e2fd713101a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/comments", "author": null, "committer": null, "parents": [{"sha": "31a84d4a65c9e820fa6f928f8a031f6dfe213c85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31a84d4a65c9e820fa6f928f8a031f6dfe213c85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31a84d4a65c9e820fa6f928f8a031f6dfe213c85"}], "stats": {"total": 223, "additions": 139, "deletions": 84}, "files": [{"sha": "9c1839d58c289fe0eaef8415edd6d1e8fe6bcef0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -1,4 +1,4 @@\n-880cb0a45590d992880fc6aabc7484e54c817eeb\n+314ba28067383516c213ba84c931f93325a48c39\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d6a53eff9ac71bee3c35984ebfa0680ff2aa9e62", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -515,7 +515,6 @@ runtime_files = \\\n \tlfstack.c \\\n \tmalloc.c \\\n \tnetpoll.c \\\n-\trdebug.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsigqueue.c \\\n@@ -3035,6 +3034,7 @@ TEST_PACKAGES = \\\n \tos/user/check \\\n \tpath/filepath/check \\\n \tregexp/syntax/check \\\n+\truntime/debug/check \\\n \truntime/pprof/check \\\n \truntime/internal/atomic/check \\\n \truntime/internal/sys/check \\"}, {"sha": "84d96b3b6ae2ae806493f5254d1d46bbdc6c8181", "filename": "libgo/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -262,7 +262,7 @@ am__objects_6 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \t$(am__objects_2) panic.lo parfor.lo print.lo proc.lo \\\n \truntime.lo signal_unix.lo thread.lo $(am__objects_3) yield.lo \\\n \t$(am__objects_4) go-iface.lo lfstack.lo malloc.lo netpoll.lo \\\n-\trdebug.lo reflect.lo runtime1.lo sigqueue.lo $(am__objects_5)\n+\treflect.lo runtime1.lo sigqueue.lo $(am__objects_5)\n am_libgo_llgo_la_OBJECTS = $(am__objects_6)\n libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n libgo_llgo_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \\\n@@ -913,7 +913,6 @@ runtime_files = \\\n \tlfstack.c \\\n \tmalloc.c \\\n \tnetpoll.c \\\n-\trdebug.c \\\n \treflect.c \\\n \truntime1.c \\\n \tsigqueue.c \\\n@@ -1384,6 +1383,7 @@ TEST_PACKAGES = \\\n \tos/user/check \\\n \tpath/filepath/check \\\n \tregexp/syntax/check \\\n+\truntime/debug/check \\\n \truntime/pprof/check \\\n \truntime/internal/atomic/check \\\n \truntime/internal/sys/check \\\n@@ -1624,7 +1624,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/parfor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/print.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/proc.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rdebug.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/reflect.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/rtems-task-variable-add.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/runtime.Plo@am__quote@"}, {"sha": "81444971774c070aacdde7edf03b0c5eb56b8cbc", "filename": "libgo/go/runtime/debug/garbage.go", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -16,17 +16,10 @@ type GCStats struct {\n \tNumGC          int64           // number of garbage collections\n \tPauseTotal     time.Duration   // total pause for all collections\n \tPause          []time.Duration // pause history, most recent first\n+\tPauseEnd       []time.Time     // pause end times history, most recent first\n \tPauseQuantiles []time.Duration\n }\n \n-// Implemented in package runtime.\n-func readGCStats(*[]time.Duration)\n-func enableGC(bool) bool\n-func setGCPercent(int) int\n-func freeOSMemory()\n-func setMaxStack(int) int\n-func setMaxThreads(int) int\n-\n // ReadGCStats reads statistics about garbage collection into stats.\n // The number of entries in the pause history is system-dependent;\n // stats.Pause slice will be reused if large enough, reallocated otherwise.\n@@ -38,25 +31,36 @@ func setMaxThreads(int) int\n func ReadGCStats(stats *GCStats) {\n \t// Create a buffer with space for at least two copies of the\n \t// pause history tracked by the runtime. One will be returned\n-\t// to the caller and the other will be used as a temporary buffer\n-\t// for computing quantiles.\n+\t// to the caller and the other will be used as transfer buffer\n+\t// for end times history and as a temporary buffer for\n+\t// computing quantiles.\n \tconst maxPause = len(((*runtime.MemStats)(nil)).PauseNs)\n-\tif cap(stats.Pause) < 2*maxPause {\n-\t\tstats.Pause = make([]time.Duration, 2*maxPause)\n+\tif cap(stats.Pause) < 2*maxPause+3 {\n+\t\tstats.Pause = make([]time.Duration, 2*maxPause+3)\n \t}\n \n-\t// readGCStats fills in the pause history (up to maxPause entries)\n-\t// and then three more: Unix ns time of last GC, number of GC,\n-\t// and total pause time in nanoseconds. Here we depend on the\n-\t// fact that time.Duration's native unit is nanoseconds, so the\n-\t// pauses and the total pause time do not need any conversion.\n+\t// readGCStats fills in the pause and end times histories (up to\n+\t// maxPause entries) and then three more: Unix ns time of last GC,\n+\t// number of GC, and total pause time in nanoseconds. Here we\n+\t// depend on the fact that time.Duration's native unit is\n+\t// nanoseconds, so the pauses and the total pause time do not need\n+\t// any conversion.\n \treadGCStats(&stats.Pause)\n \tn := len(stats.Pause) - 3\n \tstats.LastGC = time.Unix(0, int64(stats.Pause[n]))\n \tstats.NumGC = int64(stats.Pause[n+1])\n \tstats.PauseTotal = stats.Pause[n+2]\n+\tn /= 2 // buffer holds pauses and end times\n \tstats.Pause = stats.Pause[:n]\n \n+\tif cap(stats.PauseEnd) < maxPause {\n+\t\tstats.PauseEnd = make([]time.Time, 0, maxPause)\n+\t}\n+\tstats.PauseEnd = stats.PauseEnd[:0]\n+\tfor _, ns := range stats.Pause[n : n+n] {\n+\t\tstats.PauseEnd = append(stats.PauseEnd, time.Unix(0, int64(ns)))\n+\t}\n+\n \tif len(stats.PauseQuantiles) > 0 {\n \t\tif n == 0 {\n \t\t\tfor i := range stats.PauseQuantiles {\n@@ -91,9 +95,9 @@ func (x byDuration) Less(i, j int) bool { return x[i] < x[j] }\n // at startup, or 100 if the variable is not set.\n // A negative percentage disables garbage collection.\n func SetGCPercent(percent int) int {\n-\told := setGCPercent(percent)\n+\told := setGCPercent(int32(percent))\n \truntime.GC()\n-\treturn old\n+\treturn int(old)\n }\n \n // FreeOSMemory forces a garbage collection followed by an\n@@ -145,7 +149,9 @@ func SetMaxThreads(threads int) int {\n // that the runtime trigger only a panic, not a crash.\n // SetPanicOnFault applies only to the current goroutine.\n // It returns the previous setting.\n-func SetPanicOnFault(enabled bool) bool\n+func SetPanicOnFault(enabled bool) bool {\n+\treturn setPanicOnFault(enabled)\n+}\n \n // WriteHeapDump writes a description of the heap and the objects in\n // it to the given file descriptor."}, {"sha": "6ec94aa3fb9d6492d77252a5f18aca1e9d86d341", "filename": "libgo/go/runtime/debug/garbage_test.go", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug%2Fgarbage_test.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -71,6 +71,19 @@ func TestReadGCStats(t *testing.T) {\n \t\t\tt.Errorf(\"stats.PauseQuantiles[%d]=%d > stats.PauseQuantiles[%d]=%d\", i, q[i], i+1, q[i+1])\n \t\t}\n \t}\n+\n+\t// compare memory stats with gc stats:\n+\tif len(stats.PauseEnd) != n {\n+\t\tt.Fatalf(\"len(stats.PauseEnd) = %d, want %d\", len(stats.PauseEnd), n)\n+\t}\n+\toff := (int(mstats.NumGC) + len(mstats.PauseEnd) - 1) % len(mstats.PauseEnd)\n+\tfor i := 0; i < n; i++ {\n+\t\tdt := stats.PauseEnd[i]\n+\t\tif dt.UnixNano() != int64(mstats.PauseEnd[off]) {\n+\t\t\tt.Errorf(\"stats.PauseEnd[%d] = %d, want %d\", i, dt, mstats.PauseEnd[off])\n+\t\t}\n+\t\toff = (off + len(mstats.PauseEnd) - 1) % len(mstats.PauseEnd)\n+\t}\n }\n \n var big = make([]byte, 1<<20)"}, {"sha": "67931d17f6be4016ac04ed114b155399d6818329", "filename": "libgo/go/runtime/debug/stack_test.go", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fstack_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fstack_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug%2Fstack_test.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -50,10 +50,12 @@ func TestStack(t *testing.T) {\n \t\tcheck(t, lines[n], line)\n \t\tn++\n \t}\n-\tframe(\"stack_test.go\", \"\\tmethod.N15_runtime_debug.T: return Stack()\")\n-\tframe(\"stack_test.go\", \"\\tmethod.N15_runtime_debug.T: return t.ptrmethod()\")\n-\tframe(\"stack_test.go\", \"\\tTestStack: b := T(0).method()\")\n-\tframe(\"testing/testing.go\", \"\")\n+\tn++\n+\tframe(\"stack.go\", \"runtime_debug.Stack\")\n+\tframe(\"stack_test.go\", \"ptrmethod\")\n+\tframe(\"stack_test.go\", \"method\")\n+\tframe(\"stack_test.go\", \"runtime_debug_test.TestStack\")\n+\tframe(\"testing.go\", \"\")\n }\n \n func check(t *testing.T, line, has string) {"}, {"sha": "2cba136044bbce34f3ca4533e326392be694ca8b", "filename": "libgo/go/runtime/debug/stubs.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fdebug%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fdebug%2Fstubs.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package debug\n+\n+import (\n+\t\"time\"\n+)\n+\n+// Implemented in package runtime.\n+func readGCStats(*[]time.Duration)\n+func freeOSMemory()\n+func setMaxStack(int) int\n+func setGCPercent(int32) int32\n+func setPanicOnFault(bool) bool\n+func setMaxThreads(int) int"}, {"sha": "a2701e32f76912fbe1d40b0df084220667bc69e1", "filename": "libgo/go/runtime/mprof.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fmprof.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fmprof.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmprof.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -623,7 +623,7 @@ func Stack(buf []byte, all bool) int {\n \t\tgp.m.traceback = 1\n \t\tgp.writebuf = buf[0:0:len(buf)]\n \t\tgoroutineheader(gp)\n-\t\ttraceback()\n+\t\ttraceback(1)\n \t\tif all {\n \t\t\ttracebackothers(gp)\n \t\t}\n@@ -653,7 +653,7 @@ func tracealloc(p unsafe.Pointer, size uintptr, typ *_type) {\n \t}\n \tif gp.m.curg == nil || gp == gp.m.curg {\n \t\tgoroutineheader(gp)\n-\t\ttraceback()\n+\t\ttraceback(1)\n \t} else {\n \t\tgoroutineheader(gp.m.curg)\n \t\t// FIXME: Can't do traceback of other g.\n@@ -669,7 +669,7 @@ func tracefree(p unsafe.Pointer, size uintptr) {\n \tgp.m.traceback = 2\n \tprint(\"tracefree(\", p, \", \", hex(size), \")\\n\")\n \tgoroutineheader(gp)\n-\ttraceback()\n+\ttraceback(1)\n \tprint(\"\\n\")\n \tgp.m.traceback = 0\n \tunlock(&tracelock)"}, {"sha": "76535a905acc1ca8a32c9ffc4c6edb7c578ae78c", "filename": "libgo/go/runtime/rdebug.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Frdebug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Frdebug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Frdebug.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2014 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package runtime\n+\n+import _ \"unsafe\" // for go:linkname\n+\n+// Define maxstacksize here for gccgo. For gc it is defined in\n+// stack.go, but gccgo doesn't use that file. Or, for that matter,\n+// maxstacksize.\n+var maxstacksize uintptr = 1 << 20 // enough until runtime.main sets it for real\n+\n+//go:linkname setMaxStack runtime_debug.setMaxStack\n+func setMaxStack(in int) (out int) {\n+\tout = int(maxstacksize)\n+\tmaxstacksize = uintptr(in)\n+\treturn out\n+}\n+\n+//go:linkname setPanicOnFault runtime_debug.setPanicOnFault\n+func setPanicOnFault(new bool) (old bool) {\n+\t_g_ := getg()\n+\told = _g_.paniconfault\n+\t_g_.paniconfault = new\n+\treturn old\n+}"}, {"sha": "3db8fea62a1d38375cb4a2390aa8a32f342dab82", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -444,3 +444,19 @@ func setprofilebucket(p unsafe.Pointer, b *bucket)\n \n // Currently in proc.c.\n func tracebackothers(*g)\n+\n+// Temporary for gccgo until we port mgc.go.\n+func setgcpercent(int32) int32\n+\n+//go:linkname setGCPercent runtime_debug.setGCPercent\n+func setGCPercent(in int32) (out int32) {\n+\treturn setgcpercent(in)\n+}\n+\n+// Temporary for gccgo until we port proc.go.\n+func setmaxthreads(int) int\n+\n+//go:linkname setMaxThreads runtime_debug.setMaxThreads\n+func setMaxThreads(in int) (out int) {\n+\treturn setmaxthreads(in)\n+}"}, {"sha": "b102826f4228fa3be8374fa27e060406159192b6", "filename": "libgo/go/runtime/traceback_gccgo.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ftraceback_gccgo.go?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -67,17 +67,17 @@ func callers(skip int, locbuf []location) int {\n // traceback prints a traceback of the current goroutine.\n // This differs from the gc version, which is given pc, sp, lr and g and\n // can print a traceback of any goroutine.\n-func traceback() {\n+func traceback(skip int32) {\n \tvar locbuf [100]location\n-\tc := c_callers(1, &locbuf[0], int32(len(locbuf)), false)\n+\tc := c_callers(skip+1, &locbuf[0], int32(len(locbuf)), false)\n \tprinttrace(locbuf[:c], getg())\n }\n \n // printtrace prints a traceback from locbuf.\n func printtrace(locbuf []location, gp *g) {\n \tfor i := range locbuf {\n \t\tif showframe(locbuf[i].function, gp) {\n-\t\t\tprint(locbuf[i].function, \"\\n\\t\", locbuf[i].filename, \":\", locbuf[i].lineno)\n+\t\t\tprint(locbuf[i].function, \"\\n\\t\", locbuf[i].filename, \":\", locbuf[i].lineno, \"\\n\")\n \t\t}\n \t}\n }"}, {"sha": "e3e4a1985660eb67b58c6c9d85c6d3487ad628db", "filename": "libgo/runtime/go-signal.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fgo-signal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fgo-signal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-signal.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -222,7 +222,7 @@ runtime_sighandler (int sig, Siginfo *info,\n \t  G *g;\n \n \t  g = runtime_g ();\n-\t  runtime_traceback ();\n+\t  runtime_traceback (0);\n \t  runtime_tracebackothers (g);\n \n \t  /* The gc library calls runtime_dumpregs here, and provides"}, {"sha": "afab0b448b1f48ede1ba34bea38622cc12f76892", "filename": "libgo/runtime/heapdump.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fheapdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fheapdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fheapdump.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -545,6 +545,8 @@ dumpmemprof_callback(Bucket *b, uintptr nstk, Location *stk, uintptr size, uintp\n \tdumpint(frees);\n }\n \n+static FuncVal dumpmemprof_callbackv = {(void(*)(void))dumpmemprof_callback};\n+\n static void\n dumpmemprof(void)\n {\n@@ -554,7 +556,7 @@ dumpmemprof(void)\n \tSpecialProfile *spp;\n \tbyte *p;\n \n-\truntime_iterate_memprof(dumpmemprof_callback);\n+\truntime_iterate_memprof(&dumpmemprof_callbackv);\n \n \tallspans = runtime_mheap.allspans;\n \tfor(spanidx=0; spanidx<runtime_mheap.nspan; spanidx++) {"}, {"sha": "f37f206e5f7821f7a985af733b664abd225cdc77", "filename": "libgo/runtime/malloc.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fmalloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fmalloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.h?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -465,7 +465,7 @@ void\truntime_MProf_Free(Bucket*, uintptr, bool)\n   __asm__ (GOSYM_PREFIX \"runtime.mProf_Free\");\n void\truntime_MProf_GC(void)\n   __asm__ (GOSYM_PREFIX \"runtime.mProf_GC\");\n-void\truntime_iterate_memprof(void (*callback)(Bucket*, uintptr, Location*, uintptr, uintptr, uintptr))\n+void\truntime_iterate_memprof(FuncVal* callback)\n   __asm__ (GOSYM_PREFIX \"runtime.iterate_memprof\");\n int32\truntime_gcprocs(void);\n void\truntime_helpgc(int32 nproc);\n@@ -535,7 +535,8 @@ void\truntime_gc_g_ptr(Eface*);\n void\truntime_gc_itab_ptr(Eface*);\n \n void\truntime_memorydump(void);\n-int32\truntime_setgcpercent(int32);\n+int32\truntime_setgcpercent(int32)\n+  __asm__ (GOSYM_PREFIX \"runtime.setgcpercent\");\n \n // Value we use to mark dead pointers when GODEBUG=gcdead=1.\n #define PoisonGC ((uintptr)0xf969696969696969ULL)"}, {"sha": "84353c771ab2a757f0d70b6dadbf8c7526047e98", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -2392,14 +2392,16 @@ runtime_debug_readGCStats(Slice *pauses)\n \t// pause_ns[(numgc-1)%nelem(pause_ns)], and then backward\n \t// from there to go back farther in time. We deliver the times\n \t// most recent first (in p[0]).\n-\tfor(i=0; i<n; i++)\n+\tfor(i=0; i<n; i++) {\n \t\tp[i] = pmstats->pause_ns[(pmstats->numgc-1-i)%nelem(pmstats->pause_ns)];\n+\t\tp[n+i] = pmstats->pause_end[(pmstats->numgc-1-i)%nelem(pmstats->pause_ns)];\n+\t}\n \n-\tp[n] = pmstats->last_gc;\n-\tp[n+1] = pmstats->numgc;\n-\tp[n+2] = pmstats->pause_total_ns;\n+\tp[n+n] = pmstats->last_gc;\n+\tp[n+n+1] = pmstats->numgc;\n+\tp[n+n+2] = pmstats->pause_total_ns;\n \truntime_unlock(&runtime_mheap);\n-\tpauses->__count = n+3;\n+\tpauses->__count = n+n+3;\n }\n \n int32"}, {"sha": "0dd677693af3661710bbb801fb352472a6d78c4b", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -130,11 +130,11 @@ runtime_dopanic(int32 unused __attribute__ ((unused)))\n \t\tif(g != runtime_m()->g0) {\n \t\t\truntime_printf(\"\\n\");\n \t\t\truntime_goroutineheader(g);\n-\t\t\truntime_traceback();\n+\t\t\truntime_traceback(0);\n \t\t\truntime_printcreatedby(g);\n \t\t} else if(t >= 2 || runtime_m()->throwing > 0) {\n \t\t\truntime_printf(\"\\nruntime stack:\\n\");\n-\t\t\truntime_traceback();\n+\t\t\truntime_traceback(0);\n \t\t}\n \t\tif(!didothers) {\n \t\t\tdidothers = true;"}, {"sha": "9838c7f7635bb160006254f5b1eea5bfa2f29faa", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -3470,14 +3470,14 @@ runtime_testSchedLocalQueueSteal(void)\n \t}\n }\n \n-int32\n-runtime_setmaxthreads(int32 in)\n+intgo\n+runtime_setmaxthreads(intgo in)\n {\n-\tint32 out;\n+\tintgo out;\n \n \truntime_lock(&runtime_sched);\n-\tout = runtime_sched.maxmcount;\n-\truntime_sched.maxmcount = in;\n+\tout = (intgo)runtime_sched.maxmcount;\n+\truntime_sched.maxmcount = (int32)in;\n \tcheckmcount();\n \truntime_unlock(&runtime_sched);\n \treturn out;"}, {"sha": "63eb4dd4572ec327a43c8b3e28bd394f023396b0", "filename": "libgo/runtime/rdebug.goc", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31a84d4a65c9e820fa6f928f8a031f6dfe213c85/libgo%2Fruntime%2Frdebug.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31a84d4a65c9e820fa6f928f8a031f6dfe213c85/libgo%2Fruntime%2Frdebug.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Frdebug.goc?ref=31a84d4a65c9e820fa6f928f8a031f6dfe213c85", "patch": "@@ -1,26 +0,0 @@\n-// Copyright 2013 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package runtime_debug\n-#include \"runtime.h\"\n-#include \"arch.h\"\n-#include \"malloc.h\"\n-\n-func setMaxStack(in int) (out int) {\n-\tout = runtime_maxstacksize;\n-\truntime_maxstacksize = in;\n-}\n-\n-func setGCPercent(in int) (out int) {\n-\tout = runtime_setgcpercent(in);\n-}\n-\n-func setMaxThreads(in int) (out int) {\n-\tout = runtime_setmaxthreads(in);\n-}\n-\n-func SetPanicOnFault(enabled bool) (old bool) {\n-\told = runtime_g()->paniconfault;\n-\truntime_g()->paniconfault = enabled;\n-}"}, {"sha": "16be0891aeab91cf70ea3b966c9b5fce726ff112", "filename": "libgo/runtime/runtime.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fruntime.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fruntime.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.c?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -151,10 +151,6 @@ runtime_setdebug(struct debugVars* d) {\n   runtime_debug = *d;\n }\n \n-// Setting the max stack size doesn't really do anything for gccgo.\n-\n-uintptr runtime_maxstacksize = 1<<20; // enough until runtime.main sets it for real\n-\n void memclrBytes(Slice)\n      __asm__ (GOSYM_PREFIX \"runtime.memclrBytes\");\n "}, {"sha": "dedc57452f941d813d65bb817492dab7110c0abb", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=8cce07d1ddccd9ffcdcaafaaa4cf13ffa95ec360", "patch": "@@ -230,7 +230,7 @@ enum {\n };\n void\truntime_hashinit(void);\n \n-void\truntime_traceback(void)\n+void\truntime_traceback(int32)\n   __asm__ (GOSYM_PREFIX \"runtime.traceback\");\n void\truntime_tracebackothers(G*)\n   __asm__ (GOSYM_PREFIX \"runtime.tracebackothers\");\n@@ -256,7 +256,6 @@ extern\tint8*\truntime_goos;\n extern\tint32\truntime_ncpu;\n extern \tvoid\t(*runtime_sysargs)(int32, uint8**);\n extern\tstruct debugVars runtime_debug;\n-extern\tuintptr\truntime_maxstacksize;\n \n extern\tbool\truntime_isstarted;\n extern\tbool\truntime_isarchive;\n@@ -411,7 +410,8 @@ void\truntime_crash(void);\n void\truntime_parsedebugvars(void)\n   __asm__(GOSYM_PREFIX \"runtime.parsedebugvars\");\n void\t_rt0_go(void);\n-int32\truntime_setmaxthreads(int32);\n+intgo\truntime_setmaxthreads(intgo)\n+  __asm__ (GOSYM_PREFIX \"runtime.setmaxthreads\");\n G*\truntime_timejump(void);\n void\truntime_iterate_finq(void (*callback)(FuncVal*, void*, const FuncType*, const PtrType*));\n "}]}