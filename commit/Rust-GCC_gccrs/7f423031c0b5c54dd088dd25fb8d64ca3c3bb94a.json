{"sha": "7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y0MjMwMzFjMGI1YzU0ZGQwODhkZDI1ZmI4ZDY0Y2EzYzNiYjk0YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-24T13:10:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-10-24T13:10:37Z"}, "message": "(make_range, comparison cases): When making range for unsigned to\nmerge in, use full range.\n\nFrom-SVN: r13027", "tree": {"sha": "fa1e8f986c3c3855e54d39d20286a018c1bde3fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa1e8f986c3c3855e54d39d20286a018c1bde3fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a/comments", "author": null, "committer": null, "parents": [{"sha": "70e7fabe9e7e2db26a3a25424ada897e4365583f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70e7fabe9e7e2db26a3a25424ada897e4365583f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70e7fabe9e7e2db26a3a25424ada897e4365583f"}], "stats": {"total": 17, "additions": 11, "deletions": 6}, "files": [{"sha": "cb45cd28ee2519aa2eed712f2c0cf766ec1a9f3b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=7f423031c0b5c54dd088dd25fb8d64ca3c3bb94a", "patch": "@@ -2757,15 +2757,20 @@ make_range (exp, pin_p, plow, phigh)\n \n \t  exp = arg0;\n \n-\t  /* If this is an unsigned comparison, we also know that EXP\n-\t     is greater than or equal to zero.  We base the range tests\n-\t     we make on that fact, so we record it here so we can parse\n-\t     existing range tests.  */\n-\t  if (TREE_UNSIGNED (type))\n+\t  /* If this is an unsigned comparison, we also know that EXP is\n+\t     greater than or equal to zero and less than the maximum value of\n+\t     the unsigned type.  We base the range tests we make on that fact,\n+\t     so we record it here so we can parse existing range tests.  */\n+\t  if (TREE_UNSIGNED (type) && (low == 0 || high == 0))\n \t    {\n \t      if (! merge_ranges (&n_in_p, &n_low, &n_high, in_p, low, high,\n \t\t\t\t  1, convert (type, integer_zero_node),\n-\t\t\t\t  NULL_TREE))\n+\t\t\t\t  const_binop (MINUS_EXPR,\n+\t\t\t\t\t       convert (type,\n+\t\t\t\t\t\t\tinteger_zero_node),\n+\t\t\t\t\t       convert (type,\n+\t\t\t\t\t\t\tinteger_one_node),\n+\t\t\t\t\t       0)))\n \t\tbreak;\n \n \t      in_p = n_in_p, low = n_low, high = n_high;"}]}