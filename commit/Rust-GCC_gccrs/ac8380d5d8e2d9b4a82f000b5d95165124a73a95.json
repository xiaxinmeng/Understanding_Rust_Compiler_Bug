{"sha": "ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4MzgwZDVkOGUyZDliNGE4MmYwMDBiNWQ5NTE2NTEyNGE3M2E5NQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T10:48:39Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-06T10:48:39Z"}, "message": "[multiple changes]\n\n2017-01-06  Yannick Moy  <moy@adacore.com>\n\n\t* ghost.adb Minor fixing of references to SPARK RM.\n\t(Check_Ghost_Context): Check whether reference is to a lvalue\n\tbefore issuing an error about violation of SPARK RM 6.9(13)\n\twhen declaration has Ghost policy Check and reference has Ghost\n\tpolicy Ignore.\n\t* sem_util.adb Minor indentation.\n\t* sem_ch10.adb (Analyze_Package_Body_Stub, Analyze_Protected_Body_Stub,\n\tAnalyze_Task_Body_Stub): Set Ekind of the defining identifier.\n\t* sem_util.ads (Unique_Defining_Entity): Document the result\n\tfor package body stubs.\n\n2017-01-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* raise-gcc.c (abort): Macro to call Abort_Propagation.\n\t* s-tpoben.ads (Protected_Entry_Queue_Max_Access): Make it access\n\tconstant.\n\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration):\n\tDo not generate the Entry_Max_Queue_Lengths_Array if all default\n\tvalues.\n\t* exp_util.adb (Corresponding_Runtime_Package): Consider\n\tMax_Queue_Length pragma.\n\nFrom-SVN: r244129", "tree": {"sha": "10e75d6405edf153a55f107e561a9eab2efe0333", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10e75d6405edf153a55f107e561a9eab2efe0333"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/comments", "author": null, "committer": null, "parents": [{"sha": "7727a9c182e4e12878b2e4703563cc68a695653d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7727a9c182e4e12878b2e4703563cc68a695653d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7727a9c182e4e12878b2e4703563cc68a695653d"}], "stats": {"total": 290, "additions": 172, "deletions": 118}, "files": [{"sha": "a4c2eb3fca95ae636bd8f1c316e7da9ee6756618", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -1,3 +1,27 @@\n+2017-01-06  Yannick Moy  <moy@adacore.com>\n+\n+\t* ghost.adb Minor fixing of references to SPARK RM.\n+\t(Check_Ghost_Context): Check whether reference is to a lvalue\n+\tbefore issuing an error about violation of SPARK RM 6.9(13)\n+\twhen declaration has Ghost policy Check and reference has Ghost\n+\tpolicy Ignore.\n+\t* sem_util.adb Minor indentation.\n+\t* sem_ch10.adb (Analyze_Package_Body_Stub, Analyze_Protected_Body_Stub,\n+\tAnalyze_Task_Body_Stub): Set Ekind of the defining identifier.\n+\t* sem_util.ads (Unique_Defining_Entity): Document the result\n+\tfor package body stubs.\n+\n+2017-01-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* raise-gcc.c (abort): Macro to call Abort_Propagation.\n+\t* s-tpoben.ads (Protected_Entry_Queue_Max_Access): Make it access\n+\tconstant.\n+\t* exp_ch9.adb (Expand_N_Protected_Type_Declaration):\n+\tDo not generate the Entry_Max_Queue_Lengths_Array if all default\n+\tvalues.\n+\t* exp_util.adb (Corresponding_Runtime_Package): Consider\n+\tMax_Queue_Length pragma.\n+\n 2017-01-06  Justin Squirek  <squirek@adacore.com>\n \n \t* exp_ch9.adb (Expand_N_Protected_Type_Declaration):"}, {"sha": "0b029426cdc7f8d96095754a938b752533380a9a", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 78, "deletions": 90, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -9767,102 +9767,85 @@ package body Exp_Ch9 is\n       --  type. This object is later passed to the appropriate protected object\n       --  initialization routine.\n \n-      declare\n-         Max      : Uint;\n-         Maxs     : constant List_Id := New_List;\n-         Count    : Int;\n-         Item     : Entity_Id;\n-         Maxs_Id  : Entity_Id;\n-         Max_Vals : Node_Id;\n-\n-      begin\n-         if Has_Entries (Prot_Typ) then\n+      if Has_Entries (Prot_Typ) then\n+         declare\n+            Need_Array : Boolean := False;\n+            Maxs       : List_Id;\n+            Count      : Int;\n+            Item       : Entity_Id;\n+            Maxs_Id    : Entity_Id;\n+            Max_Vals   : Node_Id;\n \n-            --  Gather the Max_Queue_Length values of all entries in a list. A\n-            --  value of zero indicates that the entry has no limitation on its\n-            --  queue length.\n+         begin\n+            --  First check if there is any Max_Queue_Length pragma\n \n-            Count := 0;\n             Item  := First_Entity (Prot_Typ);\n             while Present (Item) loop\n-               if Is_Entry (Item) then\n-                  Count := Count + 1;\n-                  Max   := Get_Max_Queue_Length (Item);\n-\n-                  --  The package System_Tasking_Protected_Objects_Single_Entry\n-                  --  is only used in cases where queue length is 1, so if this\n-                  --  package is being used and there is a value supplied for\n-                  --  it print an error message and halt compilation.\n-\n-                  if Max /= 0\n-                    and then Corresponding_Runtime_Package (Prot_Typ) =\n-                               System_Tasking_Protected_Objects_Single_Entry\n-                  then\n-                     Error_Msg_N\n-                       (\"max_queue_length cannot be applied to entries under \"\n-                        & \"the Ravenscar profile\", Item);\n-                     raise Program_Error;\n-                  end if;\n-\n-                  Append_To (Maxs, Make_Integer_Literal (Loc, Intval => Max));\n+               if Is_Entry (Item) and then Has_Max_Queue_Length (Item) then\n+                  Need_Array := True;\n+                  exit;\n                end if;\n-\n                Next_Entity (Item);\n             end loop;\n \n-            case Corresponding_Runtime_Package (Prot_Typ) is\n-               when System_Tasking_Protected_Objects_Entries =>\n-\n-                  --  Create the declaration of the array object. Generate:\n-\n-                  --    Maxs_Id : aliased Protected_Entry_Queue_Max_Array\n-                  --                        (1 .. Count) := (..., ...);\n-\n-                  Maxs_Id :=\n-                    Make_Defining_Identifier (Loc,\n-                      Chars => New_External_Name (Chars (Prot_Typ), 'B'));\n-\n-                  Max_Vals :=\n-                    Make_Object_Declaration (Loc,\n-                      Defining_Identifier => Maxs_Id,\n-                      Aliased_Present     => True,\n-                      Object_Definition   =>\n-                        Make_Subtype_Indication (Loc,\n-                          Subtype_Mark =>\n-                            New_Occurrence_Of\n-                              (RTE (RE_Protected_Entry_Queue_Max_Array), Loc),\n-                          Constraint   =>\n-                            Make_Index_Or_Discriminant_Constraint (Loc,\n-                              Constraints => New_List (\n-                                Make_Range (Loc,\n-                                  Make_Integer_Literal (Loc, 1),\n-                                  Make_Integer_Literal (Loc, Count))))),\n-                      Expression          => Make_Aggregate (Loc, Maxs));\n-\n-                  --  A pointer to this array will be placed in the\n-                  --  corresponding record by its initialization procedure so\n-                  --  this needs to be analyzed here.\n+            --  Gather the Max_Queue_Length values of all entries in a list. A\n+            --  value of zero indicates that the entry has no limitation on its\n+            --  queue length.\n \n-                  Insert_After (Current_Node, Max_Vals);\n-                  Current_Node := Max_Vals;\n-                  Analyze (Max_Vals);\n+            if Need_Array then\n+               Maxs := New_List;\n+               Count := 0;\n+               Item  := First_Entity (Prot_Typ);\n+               while Present (Item) loop\n+                  if Is_Entry (Item) then\n+                     Count := Count + 1;\n+                     Append_To (Maxs,\n+                        Make_Integer_Literal (Loc,\n+                           Get_Max_Queue_Length (Item)));\n+                  end if;\n \n-                  Set_Entry_Max_Queue_Lengths_Array (Prot_Typ, Maxs_Id);\n+                  Next_Entity (Item);\n+               end loop;\n \n-               when System_Tasking_Protected_Objects_Single_Entry =>\n+               --  Create the declaration of the array object. Generate:\n \n-                  --  If this section is entered this means the package\n-                  --  System_Tasking_Protected_Objects_Single_Entry is being\n-                  --  used and that it correctly has no Max_Queue_Length\n-                  --  specified, so fall through and continue normally.\n+               --    Maxs_Id : aliased Protected_Entry_Queue_Max_Array\n+               --                        (1 .. Count) := (..., ...);\n \n-                  null;\n+               Maxs_Id :=\n+                 Make_Defining_Identifier (Loc,\n+                   Chars => New_External_Name (Chars (Prot_Typ), 'B'));\n \n-               when others =>\n-                  raise Program_Error;\n-            end case;\n-         end if;\n-      end;\n+               Max_Vals :=\n+                 Make_Object_Declaration (Loc,\n+                   Defining_Identifier => Maxs_Id,\n+                   Aliased_Present     => True,\n+                   Constant_Present    => True,\n+                   Object_Definition   =>\n+                     Make_Subtype_Indication (Loc,\n+                       Subtype_Mark =>\n+                         New_Occurrence_Of\n+                           (RTE (RE_Protected_Entry_Queue_Max_Array), Loc),\n+                       Constraint   =>\n+                         Make_Index_Or_Discriminant_Constraint (Loc,\n+                           Constraints => New_List (\n+                             Make_Range (Loc,\n+                               Make_Integer_Literal (Loc, 1),\n+                               Make_Integer_Literal (Loc, Count))))),\n+                   Expression          => Make_Aggregate (Loc, Maxs));\n+\n+               --  A pointer to this array will be placed in the\n+               --  corresponding record by its initialization procedure so\n+               --  this needs to be analyzed here.\n+\n+               Insert_After (Current_Node, Max_Vals);\n+               Current_Node := Max_Vals;\n+               Analyze (Max_Vals);\n+\n+               Set_Entry_Max_Queue_Lengths_Array (Prot_Typ, Maxs_Id);\n+            end if;\n+         end;\n+      end if;\n \n       --  Emit declaration for Entry_Bodies_Array, now that the addresses of\n       --  all protected subprograms have been collected.\n@@ -14209,19 +14192,24 @@ package body Exp_Ch9 is\n                      raise Program_Error;\n             end case;\n \n-            --  Entry_Queue_Maxs parameter. This is a pointer to an array of\n+            --  Entry_Queue_Maxs parameter. This is an access to an array of\n             --  naturals representing the entry queue maximums for each entry\n-            --  in the protected type. Zero represents no max.\n+            --  in the protected type. Zero represents no max. The access is\n+            --  null if there is no limit for all entries (usual case).\n \n             if Has_Entry\n               and then Pkg_Id /= System_Tasking_Protected_Objects_Single_Entry\n             then\n-               Append_To (Args,\n-                 Make_Attribute_Reference (Loc,\n-                   Prefix         =>\n-                     New_Occurrence_Of\n-                       (Entry_Max_Queue_Lengths_Array (Ptyp), Loc),\n-                   Attribute_Name => Name_Unrestricted_Access));\n+               if Present (Entry_Max_Queue_Lengths_Array (Ptyp)) then\n+                  Append_To (Args,\n+                    Make_Attribute_Reference (Loc,\n+                      Prefix         =>\n+                        New_Occurrence_Of\n+                          (Entry_Max_Queue_Lengths_Array (Ptyp), Loc),\n+                      Attribute_Name => Name_Unrestricted_Access));\n+               else\n+                  Append_To (Args, Make_Null (Loc));\n+               end if;\n \n             --  Edge cases exist where entry initialization functions are\n             --  called, but no entries exist, so null is appended."}, {"sha": "29d167b8b6c1fc781979a43523d300fd1c92eb9d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -2020,6 +2020,45 @@ package body Exp_Util is\n    -----------------------------------\n \n    function Corresponding_Runtime_Package (Typ : Entity_Id) return RTU_Id is\n+\n+      function Has_One_Entry_And_No_Queue (T : Entity_Id) return Boolean;\n+      --  Return True if protected type T has one entry and the maximum queue\n+      --  length is one.\n+\n+      --------------------------------\n+      -- Has_One_Entry_And_No_Queue --\n+      --------------------------------\n+\n+      function Has_One_Entry_And_No_Queue (T : Entity_Id) return Boolean is\n+         Is_First : Boolean := True;\n+         Ent      : Entity_Id;\n+      begin\n+         Ent := First_Entity (T);\n+         while Present (Ent) loop\n+            if Is_Entry (Ent) then\n+               if not Is_First then\n+                  --  More than one entry\n+\n+                  return False;\n+               end if;\n+\n+               if not Restriction_Active (No_Entry_Queue)\n+                 and then Get_Max_Queue_Length (Ent) /= Uint_1\n+               then\n+                  --  Max queue length is not 1\n+\n+                  return False;\n+               end if;\n+\n+               Is_First := False;\n+            end if;\n+\n+            Ent := Next_Entity (Ent);\n+         end loop;\n+\n+         return True;\n+      end Has_One_Entry_And_No_Queue;\n+\n       Pkg_Id : RTU_Id := RTU_Null;\n \n    begin\n@@ -2047,9 +2086,8 @@ package body Exp_Util is\n            or else Has_Interrupt_Handler (Typ)\n          then\n             if Abort_Allowed\n-              or else Restriction_Active (No_Entry_Queue) = False\n               or else Restriction_Active (No_Select_Statements) = False\n-              or else Number_Entries (Typ) > 1\n+              or else not Has_One_Entry_And_No_Queue (Typ)\n               or else (Has_Attach_Handler (Typ)\n                         and then not Restricted_Profile)\n             then"}, {"sha": "26ea406f433f440e070a1e8c4ff3c2a4e5e84c2e", "filename": "gcc/ada/ghost.adb", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fghost.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fghost.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fghost.adb?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -148,10 +148,10 @@ package body Ghost is\n    -------------------------\n \n    procedure Check_Ghost_Context (Ghost_Id : Entity_Id; Ghost_Ref : Node_Id) is\n-      procedure Check_Ghost_Policy (Id : Entity_Id; Err_N : Node_Id);\n+      procedure Check_Ghost_Policy (Id : Entity_Id; Ref : Node_Id);\n       --  Verify that the Ghost policy at the point of declaration of entity Id\n-      --  matches the policy at the point of reference. If this is not the case\n-      --  emit an error at Err_N.\n+      --  matches the policy at the point of reference Ref. If this is not the\n+      --  case emit an error at Ref.\n \n       function Is_OK_Ghost_Context (Context : Node_Id) return Boolean;\n       --  Determine whether node Context denotes a Ghost-friendly context where\n@@ -539,26 +539,29 @@ package body Ghost is\n       -- Check_Ghost_Policy --\n       ------------------------\n \n-      procedure Check_Ghost_Policy (Id : Entity_Id; Err_N : Node_Id) is\n+      procedure Check_Ghost_Policy (Id : Entity_Id; Ref : Node_Id) is\n          Policy : constant Name_Id := Policy_In_Effect (Name_Ghost);\n \n       begin\n          --  The Ghost policy in effect a the point of declaration and at the\n          --  point of use must match (SPARK RM 6.9(13)).\n \n-         if Is_Checked_Ghost_Entity (Id) and then Policy = Name_Ignore then\n-            Error_Msg_Sloc := Sloc (Err_N);\n+         if Is_Checked_Ghost_Entity (Id)\n+           and then Policy = Name_Ignore\n+           and then May_Be_Lvalue (Ref)\n+         then\n+            Error_Msg_Sloc := Sloc (Ref);\n \n-            Error_Msg_N  (\"incompatible ghost policies in effect\", Err_N);\n-            Error_Msg_NE (\"\\& declared with ghost policy `Check`\", Err_N, Id);\n-            Error_Msg_NE (\"\\& used # with ghost policy `Ignore`\",  Err_N, Id);\n+            Error_Msg_N  (\"incompatible ghost policies in effect\", Ref);\n+            Error_Msg_NE (\"\\& declared with ghost policy `Check`\", Ref, Id);\n+            Error_Msg_NE (\"\\& used # with ghost policy `Ignore`\",  Ref, Id);\n \n          elsif Is_Ignored_Ghost_Entity (Id) and then Policy = Name_Check then\n-            Error_Msg_Sloc := Sloc (Err_N);\n+            Error_Msg_Sloc := Sloc (Ref);\n \n-            Error_Msg_N  (\"incompatible ghost policies in effect\",  Err_N);\n-            Error_Msg_NE (\"\\& declared with ghost policy `Ignore`\", Err_N, Id);\n-            Error_Msg_NE (\"\\& used # with ghost policy `Check`\",    Err_N, Id);\n+            Error_Msg_N  (\"incompatible ghost policies in effect\",  Ref);\n+            Error_Msg_NE (\"\\& declared with ghost policy `Ignore`\", Ref, Id);\n+            Error_Msg_NE (\"\\& used # with ghost policy `Check`\",    Ref, Id);\n          end if;\n       end Check_Ghost_Policy;\n \n@@ -573,7 +576,7 @@ package body Ghost is\n          Check_Ghost_Policy (Ghost_Id, Ghost_Ref);\n \n       --  Otherwise the Ghost entity appears in a non-Ghost context and affects\n-      --  its behavior or value (SPARK RM 6.9(11,12)).\n+      --  its behavior or value (SPARK RM 6.9(10,11)).\n \n       else\n          Error_Msg_N (\"ghost entity cannot appear in this context\", Ghost_Ref);"}, {"sha": "0074ad53fbc0def9a9bc9e7f2bfb3503cc10e574", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -86,12 +86,9 @@ extern struct Exception_Occurrence *__gnat_setup_current_excep\n extern void __gnat_unhandled_except_handler (_Unwind_Exception *);\n \n #ifdef CERT\n+/* Called in case of error during propagation.  */\n+extern void __gnat_raise_abort (void) __attribute__ ((noreturn));\n #define abort() __gnat_raise_abort()\n-static void __gnat_raise_abort(void)\n-{\n-  while (1)\n-    ;\n-}\n #endif\n \n #include \"unwind-pe.h\""}, {"sha": "28a0099032821312104f81d0f00cf81024ee6b7b", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -70,7 +70,7 @@ package System.Tasking.Protected_Objects.Entries is\n      array (Positive_Protected_Entry_Index range <>) of Natural;\n \n    type Protected_Entry_Queue_Max_Access is\n-     access all Protected_Entry_Queue_Max_Array;\n+     access constant Protected_Entry_Queue_Max_Array;\n \n    --  The following declarations define an array that contains the string\n    --  names of entries and entry family members, together with an associated"}, {"sha": "e0baf7b0e49347dddcfbbb0515403b2e507a0367", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -1590,6 +1590,7 @@ package body Sem_Ch10 is\n \n          Set_Has_Completion (Nam);\n          Set_Scope (Defining_Entity (N), Current_Scope);\n+         Set_Ekind (Defining_Entity (N), E_Package_Body);\n          Set_Corresponding_Spec_Of_Stub (N, Nam);\n          Generate_Reference (Nam, Id, 'b');\n          Analyze_Proper_Body (N, Nam);\n@@ -1931,6 +1932,7 @@ package body Sem_Ch10 is\n \n       else\n          Set_Scope (Defining_Entity (N), Current_Scope);\n+         Set_Ekind (Defining_Entity (N), E_Protected_Body);\n          Set_Has_Completion (Etype (Nam));\n          Set_Corresponding_Spec_Of_Stub (N, Nam);\n          Generate_Reference (Nam, Defining_Identifier (N), 'b');\n@@ -2384,6 +2386,7 @@ package body Sem_Ch10 is\n \n       else\n          Set_Scope (Defining_Entity (N), Current_Scope);\n+         Set_Ekind (Defining_Entity (N), E_Task_Body);\n          Generate_Reference (Nam, Defining_Identifier (N), 'b');\n          Set_Corresponding_Spec_Of_Stub (N, Nam);\n "}, {"sha": "cd75585ea8963c529910b87304f4ef96ebfdbe02", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -8375,13 +8375,14 @@ package body Sem_Util is\n    --------------------------\n \n    function Get_Max_Queue_Length (Id : Entity_Id) return Uint is\n+      pragma Assert (Is_Entry (Id));\n       Prag : constant Entity_Id := Get_Pragma (Id, Pragma_Max_Queue_Length);\n \n    begin\n       --  A value of 0 represents no maximum specified, and entries and entry\n       --  families with no Max_Queue_Length aspect or pragma default to it.\n \n-      if not Has_Max_Queue_Length (Id) or else not Present (Prag) then\n+      if not Present (Prag) then\n          return Uint_0;\n       end if;\n \n@@ -15677,7 +15678,7 @@ package body Sem_Util is\n          when N_Assignment_Statement =>\n             return N = Name (P);\n \n-            --  Function call arguments are never lvalues\n+         --  Function call arguments are never lvalues\n \n          when N_Function_Call =>\n             return False;"}, {"sha": "b1559ad9c195f24f6a4a7d39019060b7c826a811", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8380d5d8e2d9b4a82f000b5d95165124a73a95/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ac8380d5d8e2d9b4a82f000b5d95165124a73a95", "patch": "@@ -2344,12 +2344,12 @@ package Sem_Util is\n    --  Return the entity which represents declaration N, so that different\n    --  views of the same entity have the same unique defining entity:\n    --    * entry declaration and entry body\n-   --    * package spec and body\n-   --    * protected type declaration, protected body stub and protected body\n+   --    * package spec, package body, and package body stub\n+   --    * protected type declaration, protected body and protected body stub\n    --    * private view and full view of a deferred constant\n    --    * private view and full view of a type\n-   --    * subprogram declaration, subprogram stub and subprogram body\n-   --    * task type declaration, task body stub and task body\n+   --    * subprogram declaration, subprogram and subprogram body stub\n+   --    * task type declaration, task body and task body stub\n    --  In other cases, return the defining entity for N.\n \n    function Unique_Entity (E : Entity_Id) return Entity_Id;"}]}