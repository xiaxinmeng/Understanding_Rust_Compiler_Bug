{"sha": "8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQ0ODgyNmI5OWI4MWI3ZWQ5NmM1ZGIwOGVjODMzNGEyYjBjNjU1Nw==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-10-24T16:20:26Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2015-10-24T16:20:26Z"}, "message": "re PR fortran/67805 (ICE on array constructor with wrong character specification)\n\n2015-10-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/67805\n\t* array.c (gfc_match_array_constructor): Check for error from type\n\tspec matching.\n\t* decl.c (char_len_param_value): Check for valid of charlen parameter.\n\tReap dead code dating to 2008.\n\tmatch.c (gfc_match_type_spec): Special case the keyword use in REAL.\n\n2015-10-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/67805\n\t* gfortran.dg/pr67805.f90: New testcase.\n\t* gfortran.dg/array_constructor_26.f03: Update testcase.\n\t* gfortran.dg/array_constructor_27.f03: Ditto.\n\t* gfortran.dg/char_type_len_2.f90: Ditto.\n\t* gfortran.dg/pr67802.f90: Ditto.\n\t* gfortran.dg/used_before_typed_3.f90: Ditto.\n\nFrom-SVN: r229287", "tree": {"sha": "fc9895b536072c30abae69ea95b29645078ed28c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc9895b536072c30abae69ea95b29645078ed28c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/comments", "author": null, "committer": null, "parents": [{"sha": "ae1158c42534a9becfb51585b9b69df8d0d13a10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae1158c42534a9becfb51585b9b69df8d0d13a10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae1158c42534a9becfb51585b9b69df8d0d13a10"}], "stats": {"total": 148, "additions": 114, "deletions": 34}, "files": [{"sha": "67d1fb0313ebb59598d8bc792fda703dc59f11fe", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -1,3 +1,12 @@\n+2015-10-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/67805\n+\t* array.c (gfc_match_array_constructor): Check for error from type\n+\tspec matching.\n+\t* decl.c (char_len_param_value): Check for valid of charlen parameter.\n+\tReap dead code dating to 2008.\n+\tmatch.c (gfc_match_type_spec): Special case the keyword use in REAL.\n+\n 2015-10-23  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \t* trans-common.c (create_common): Adjust to use flag_checking."}, {"sha": "2355a980a6112ccfc08f05cdd445714e4ac436fb", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -1080,7 +1080,8 @@ gfc_match_array_constructor (gfc_expr **result)\n   /* Try to match an optional \"type-spec ::\"  */\n   gfc_clear_ts (&ts);\n   gfc_new_undo_checkpoint (changed_syms);\n-  if (gfc_match_type_spec (&ts) == MATCH_YES)\n+  m = gfc_match_type_spec (&ts);\n+  if (m == MATCH_YES)\n     {\n       seen_ts = (gfc_match (\" ::\") == MATCH_YES);\n \n@@ -1102,6 +1103,11 @@ gfc_match_array_constructor (gfc_expr **result)\n \t    }\n \t}\n     }\n+  else if (m == MATCH_ERROR)\n+    {\n+      gfc_restore_last_undo_checkpoint ();\n+      goto cleanup;\n+    }\n \n   if (seen_ts)\n     gfc_drop_last_undo_checkpoint ();"}, {"sha": "200a1287057ba73cb944fc7dca654d78dfba9994", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 45, "deletions": 22, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -715,36 +715,59 @@ char_len_param_value (gfc_expr **expr, bool *deferred)\n \n   if ((*expr)->expr_type == EXPR_FUNCTION)\n     {\n-      if ((*expr)->value.function.actual\n-\t  && (*expr)->value.function.actual->expr->symtree)\n+      if ((*expr)->ts.type == BT_INTEGER\n+\t  || ((*expr)->ts.type == BT_UNKNOWN\n+\t      && strcmp((*expr)->symtree->name, \"null\") != 0))\n+\treturn MATCH_YES;\n+\n+      goto syntax;\n+    }\n+  else if ((*expr)->expr_type == EXPR_CONSTANT)\n+    {\n+      /* F2008, 4.4.3.1:  The length is a type parameter; its kind is\n+\t processor dependent and its value is greater than or equal to zero.\n+\t F2008, 4.4.3.2:  If the character length parameter value evaluates\n+\t to a negative value, the length of character entities declared\n+\t is zero.  */\n+\n+      if ((*expr)->ts.type == BT_INTEGER)\n \t{\n-\t  gfc_expr *e;\n-\t  e = (*expr)->value.function.actual->expr;\n-\t  if (e->symtree->n.sym->attr.flavor == FL_PROCEDURE\n-\t      && e->expr_type == EXPR_VARIABLE)\n-\t    {\n-\t      if (e->symtree->n.sym->ts.type == BT_UNKNOWN)\n-\t\tgoto syntax;\n-\t      if (e->symtree->n.sym->ts.type == BT_CHARACTER\n-\t\t  && e->symtree->n.sym->ts.u.cl\n-\t\t  && e->symtree->n.sym->ts.u.cl->length->ts.type == BT_UNKNOWN)\n-\t        goto syntax;\n-\t    }\n+\t  if (mpz_cmp_si ((*expr)->value.integer, 0) < 0)\n+\t    mpz_set_si ((*expr)->value.integer, 0);\n \t}\n+      else\n+\tgoto syntax;\n     }\n+  else if ((*expr)->expr_type == EXPR_ARRAY)\n+    goto syntax;\n+  else if ((*expr)->expr_type == EXPR_VARIABLE)\n+    {\n+      gfc_expr *e;\n+\n+      e = gfc_copy_expr (*expr);\n+\n+      /* This catches the invalid code \"[character(m(2:3)) :: 'x', 'y']\",\n+\t which causes an ICE if gfc_reduce_init_expr() is called.  */\n+      if (e->ref && e->ref->u.ar.type == AR_UNKNOWN\n+\t  && e->ref->u.ar.dimen_type[0] == DIMEN_RANGE)\n+\tgoto syntax;\n+\n+      gfc_reduce_init_expr (e);\n+\n+      if ((e->ref && e->ref->u.ar.type != AR_ELEMENT) \n+\t  || (!e->ref && e->expr_type == EXPR_ARRAY))\n+\t{\n+\t  gfc_free_expr (e);\n+\t  goto syntax;\n+\t}\n \n-  /* F2008, 4.4.3.1:  The length is a type parameter; its kind is processor\n-     dependent and its value is greater than or equal to zero.\n-     F2008, 4.4.3.2:  If the character length parameter value evaluates to\n-     a negative value, the length of character entities declared is zero.  */\n-  if ((*expr)->expr_type == EXPR_CONSTANT\n-      && mpz_cmp_si ((*expr)->value.integer, 0) < 0)\n-    mpz_set_si ((*expr)->value.integer, 0);\n+      gfc_free_expr (e);\n+    }\n \n   return m;\n \n syntax:\n-  gfc_error (\"Conflict in attributes of function argument at %C\");\n+  gfc_error (\"Scalar INTEGER expression expected at %L\", &(*expr)->where);\n   return MATCH_ERROR;\n }\n "}, {"sha": "dda2d5ab1da26f1636f2c8625a478fcf216b737f", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -1939,6 +1939,11 @@ gfc_match_type_spec (gfc_typespec *ts)\n   if (m == MATCH_NO)\n     m = MATCH_YES;\t\t/* No kind specifier found.  */\n \n+  /* gfortran may have matched REAL(a=1), which is the keyword form of the\n+     intrinsic procedure.  */\n+  if (ts->type == BT_REAL && m == MATCH_ERROR)\n+    m = MATCH_NO;\n+\n   return m;\n }\n "}, {"sha": "9993099af917c3f8141521681141696f1562d1e3", "filename": "gcc/testsuite/gfortran.dg/array_constructor_26.f03", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_26.f03?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -11,7 +11,6 @@ MODULE WinData\n   integer :: i\n   TYPE TWindowData\n     CHARACTER (MAX_FLD_HED, 1) :: DWFdHd(MAXFLD) = [(\" \", i = 1, MAXFLD)]\n-    ! { dg-error \"no IMPLICIT type\" \"\" { target *-*-* } 13 }\n     ! { dg-error \"specification expression\" \"\" { target *-*-* } 13 }\n   END TYPE TWindowData\n END MODULE WinData"}, {"sha": "21adac82ad459cfdec10423bc6819d362c64898d", "filename": "gcc/testsuite/gfortran.dg/array_constructor_27.f03", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Farray_constructor_27.f03?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -9,7 +9,6 @@\n \n type t\n   character (a) :: arr (1) = [ \"a\" ]\n-  ! { dg-error \"no IMPLICIT type\" \"\" { target *-*-* } 11 }\n   ! { dg-error \"specification expression\" \"\" { target *-*-* } 11 }\n end type t\n "}, {"sha": "bfa7945dbc66a45530d3fa08b382beda729926da", "filename": "gcc/testsuite/gfortran.dg/char_type_len_2.f90", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_type_len_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_type_len_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fchar_type_len_2.f90?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -1,8 +1,11 @@\n ! { dg-do compile }\n ! PR31251 Non-integer character length leads to segfault\n ! Submitted by Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n-  character(len=2.3) :: s ! { dg-error \"must be of INTEGER type\" }\n-  character(kind=1,len=4.3) :: t ! { dg-error \"must be of INTEGER type\" }\n+!\n+! Updated to deal with the fix for PR fortran/67805.\n+!\n+  character(len=2.3) :: s ! { dg-error \"INTEGER expression expected\" }\n+  character(kind=1,len=4.3) :: t ! { dg-error \"INTEGER expression expected\" }\n   character(len=,,7.2,kind=1) :: u ! { dg-error \"Syntax error in CHARACTER declaration\" }\n   character(len=7,kind=2) :: v ! ! { dg-error \"Kind 2 is not supported for CHARACTER\" }\n   character(kind=2) :: w ! ! { dg-error \"Kind 2 is not supported for CHARACTER\" }"}, {"sha": "128376963ba0ca0e7da598759ed8afc1bc7cdd84", "filename": "gcc/testsuite/gfortran.dg/large_real_kind_3.F90", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Flarge_real_kind_3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Flarge_real_kind_3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flarge_real_kind_3.F90?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -1,6 +1,5 @@\n ! { dg-do run }\n ! { dg-require-effective-target fortran_large_real }\n-! { dg-xfail-if \"\" { \"*-*-freebsd*\" } { \"*\" }  { \"\" } }\n \n ! Testing erf and erfc library calls on large real kinds (larger than kind=8)\n   implicit none"}, {"sha": "2ccd8c51116c3f9ca473406e8d55699ba607a5fd", "filename": "gcc/testsuite/gfortran.dg/pr67802.f90", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67802.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67802.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67802.f90?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -2,8 +2,8 @@\n ! PR fortran/67802\n ! Original code contribute by gerhard.steinmetz.fortran at t-online.de\n program p\n-   character(1.) :: c1 = ' '      ! { dg-error \"must be of INTEGER\" }\n-   character(1d1) :: c2 = ' '     ! { dg-error \"must be of INTEGER\" }\n-   character((0.,1.)) :: c3 = ' ' ! { dg-error \"must be of INTEGER\" }\n-   character(.true.) :: c4 = ' '  ! { dg-error \"must be of INTEGER\" }\n+   character(1.) :: c1 = ' '      ! { dg-error \"INTEGER expression expected\" }\n+   character(1d1) :: c2 = ' '     ! { dg-error \"INTEGER expression expected\" }\n+   character((0.,1.)) :: c3 = ' ' ! { dg-error \"INTEGER expression expected\" }\n+   character(.true.) :: c4 = ' '  ! { dg-error \"INTEGER expression expected\" }\n end program p"}, {"sha": "7371991717d820c32e638788dd2f349d684adeef", "filename": "gcc/testsuite/gfortran.dg/pr67805.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67805.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67805.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67805.f90?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+! PR fortran/67805\n+! Original code contributed by Gerhard Steinmetz\n+! gerhard dot steinmetz dot fortran at t-online dot de\n+!\n+subroutine p\n+   integer, parameter :: n = 1\n+   integer, parameter :: m(3) = [1, 2, 3]\n+   character(len=1) s(2)\n+   s = [character((m(1))) :: 'x', 'y']    ! OK.\n+   s = [character(m(1)) :: 'x', 'y']      ! OK.\n+   s = [character(m) :: 'x', 'y']         ! { dg-error \"INTEGER expression expected\" }\n+   \n+   ! The next line should case an error, but causes an ICE. \n+   s = [character(m(2:3)) :: 'x', 'y']    ! { dg-error \"INTEGER expression expected\" }\n+   \n+   call foo(s)\n+   s = [character('') :: 'x', 'y']        ! { dg-error \"INTEGER expression expected\" }\n+   s = [character(['']) :: 'x', 'y']      ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([.true.]) :: 'x', 'y']  ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([.false.]) :: 'x', 'y'] ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([1.]) :: 'x', 'y']      ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([1d1]) :: 'x', 'y']     ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([(0.,1.)]) :: 'x', 'y'] ! { dg-error \"INTEGER expression expected\" }\n+   s = [character([null()]) :: 'x', 'y']  ! { dg-error \"INTEGER expression expected\" }\n+   s =  [character(null()) :: 'x', 'y']   ! { dg-error \"INTEGER expression expected\" }\n+   call foo(s)\n+end subroutine p\n+\n+subroutine q\n+   print *, '1: ', [character(.true.) :: 'x', 'y']  ! { dg-error \"INTEGER expression expected\" }\n+   print *, '2: ', [character(.false.) :: 'x', 'y'] ! { dg-error \"INTEGER expression expected\" }\n+   print *, '3: ', [character(1.) :: 'x', 'y']      ! { dg-error \"INTEGER expression expected\" }\n+   print *, '4: ', [character(1d1) :: 'x', 'y']     ! { dg-error \"INTEGER expression expected\" }\n+   print *, '5: ', [character((0.,1.)) :: 'x', 'y'] ! { dg-error \"INTEGER expression expected\" }\n+   print *, '6: ', [character(null()) :: 'x', 'y']  ! { dg-error \"INTEGER expression expected\" }.\n+end subroutine q"}, {"sha": "ef2c679e08286d870bf16406ef2c0c2bbbaa0850", "filename": "gcc/testsuite/gfortran.dg/used_before_typed_3.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d48826b99b81b7ed96c5db08ec8334a2b0c6557/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_before_typed_3.f90?ref=8d48826b99b81b7ed96c5db08ec8334a2b0c6557", "patch": "@@ -17,14 +17,14 @@ CHARACTER(len=x) FUNCTION test1 (x) ! { dg-error \"of INTEGER\" }\n     test1 = \"foobar\"\n   END FUNCTION test1\n \n-  CHARACTER(len=x) FUNCTION test2 (x) ! { dg-bogus \"used before|of INTEGER\" }\n+  CHARACTER(len=x) FUNCTION test2 (x) ! { dg-error \"of INTEGER\" }\n     IMPLICIT INTEGER(a-z)\n     test2 = \"foobar\"\n   END FUNCTION test2\n \n END MODULE testmod\n   \n-CHARACTER(len=i) FUNCTION test3 (i) ! { dg-bogus \"used before|of INTEGER\" }\n+CHARACTER(len=i) FUNCTION test3 (i)\n   ! i is IMPLICIT INTEGER by default\n   test3 = \"foobar\"\n END FUNCTION test3"}]}