{"sha": "a9374841850fb444b6de78ff169b88dc03766d83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkzNzQ4NDE4NTBmYjQ0NGI2ZGU3OGZmMTY5Yjg4ZGMwMzc2NmQ4Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-02-07T18:58:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-02-07T18:58:07Z"}, "message": "defaults.h (CPLUSPLUS_CPP_SPEC): New macro.\n\n\t* defaults.h (CPLUSPLUS_CPP_SPEC): New macro.\n\t* gcc.c (struct compiler): Add cpp_spec field.\n\t(input_file_compiler): New variable.\n\t(do_spec_1): Allow a particular compiler to handle `%C'\n\tspecially.\n\t(main): Store the current compiler in input_file_compiler.\n\t* tm.texi (CPLUSPLUS_CPP_SPEC): Document.\n\n\t* lang-specs.h: Use CPLUSPLUS_CPP_SPEC for the preprocessor\n\tspec.\n\nFrom-SVN: r39524", "tree": {"sha": "5bb110c877d3ed4e2cdd76284980fa386224d22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb110c877d3ed4e2cdd76284980fa386224d22d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9374841850fb444b6de78ff169b88dc03766d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9374841850fb444b6de78ff169b88dc03766d83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9374841850fb444b6de78ff169b88dc03766d83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9374841850fb444b6de78ff169b88dc03766d83/comments", "author": null, "committer": null, "parents": [{"sha": "7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d4918a2d96f1512bd71b00d1deae61fbd4a6ab9"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "285097e26248031e8e6e21a05be7efed5de0d06e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -1,3 +1,13 @@\n+2001-02-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* defaults.h (CPLUSPLUS_CPP_SPEC): New macro.\n+\t* gcc.c (struct compiler): Add cpp_spec field.\n+\t(input_file_compiler): New variable.\n+\t(do_spec_1): Allow a particular compiler to handle `%C' \n+\tspecially.\n+\t(main): Store the current compiler in input_file_compiler.\n+\t* tm.texi (CPLUSPLUS_CPP_SPEC): Document.\n+\t\n 2001-02-07  Zack Weinberg  <zack@wolery.stanford.edu>\n \n \t* cpphash.h (struct spec_nodes): Add n_true and n_false."}, {"sha": "6f756a4976c483c9ea763b3d4ee4269224aa5180", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -1,3 +1,8 @@\n+2001-02-07  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* lang-specs.h: Use CPLUSPLUS_CPP_SPEC for the preprocessor \n+\tspec.\n+\n 2001-02-06  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (lookup_template_class): Make sure it's a primary"}, {"sha": "cfcac347487a30a79dfb5294e1df90518d6833e7", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -67,6 +67,9 @@ Boston, MA 02111-1307, USA.  */\n        %{ansi:-trigraphs -$}\\\n        %(cc1_options) %2 %{+e*}\\\n        %{!fsyntax-only:%(invoke_as)}}}}\"\n+#endif\n+#ifdef CPLUSPLUS_CPP_SPEC\n+     , CPLUSPLUS_CPP_SPEC\n #endif\n      },\n   {\".ii\", \"@c++-cpp-output\"},"}, {"sha": "20ea99ab62c431e8ae2dad90a60aee3c93265c9e", "filename": "gcc/defaults.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -296,5 +296,13 @@ do {\t\t\t\t\t\t\t\t\\\n #define BUILD_VA_LIST_TYPE(X) ((X) = ptr_type_node)\n #endif\n \n+/* By default, the preprocessor should be invoked the same way in C++\n+   as in C.  */\n+#ifndef CPLUSPLUS_CPP_SPEC\n+#ifdef CPP_SPEC\n+#define CPLUSPLUS_CPP_SPEC CPP_SPEC\n+#endif\n+#endif\n+\n #endif  /* GCC_DEFAULTS_H */\n "}, {"sha": "51213c1c16568cb95bd23c1a0b8fdeee6ad175a8", "filename": "gcc/gcc.c", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -698,6 +698,10 @@ struct compiler\n \t\t\t\t   whose names end in this suffix.  */\n \n   const char *spec;\t\t/* To use this compiler, run this spec.  */\n+\n+  const char *cpp_spec;         /* If non-NULL, substitute this spec\n+\t\t\t\t   for `%C', rather than the usual\n+\t\t\t\t   cpp_spec.  */\n };\n \n /* Pointer to a vector of `struct compiler' that gives the spec for\n@@ -3870,6 +3874,9 @@ static int suffixed_basename_length;\n static const char *input_basename;\n static const char *input_suffix;\n \n+/* The compiler used to process the current input file.  */\n+static struct compiler *input_file_compiler;\n+\n /* These are variables used within do_spec and do_spec_1.  */\n \n /* Nonzero if an arg has been started and not yet terminated\n@@ -4441,9 +4448,15 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t    break;\n \n \t  case 'C':\n-\t    value = do_spec_1 (cpp_spec, 0, NULL_PTR);\n-\t    if (value != 0)\n-\t      return value;\n+\t    {\n+\t      const char* spec \n+\t\t= (input_file_compiler->cpp_spec \n+\t\t   ? input_file_compiler->cpp_spec \n+\t\t   : cpp_spec);\n+\t      value = do_spec_1 (spec, 0, NULL_PTR);\n+\t      if (value != 0)\n+\t\treturn value;\n+\t    }\n \t    break;\n \n \t  case 'E':\n@@ -5795,7 +5808,6 @@ main (argc, argv)\n \n   for (i = 0; (int) i < n_infiles; i++)\n     {\n-      register struct compiler *cp = 0;\n       int this_file_error = 0;\n \n       /* Tell do_spec what to substitute for %i.  */\n@@ -5809,17 +5821,18 @@ main (argc, argv)\n \n       /* Figure out which compiler from the file's suffix.  */\n \n-      cp = lookup_compiler (infiles[i].name, input_filename_length,\n-\t\t\t    infiles[i].language);\n-\n-      if (cp)\n+      input_file_compiler\n+\t= lookup_compiler (infiles[i].name, input_filename_length,\n+\t\t\t   infiles[i].language);\n+      \n+      if (input_file_compiler)\n \t{\n \t  /* Ok, we found an applicable compiler.  Run its spec.  */\n \n-\t  if (cp->spec[0] == '#')\n+\t  if (input_file_compiler->spec[0] == '#')\n \t    error (\"%s: %s compiler not installed on this system\",\n-\t\t   input_filename, &cp->spec[1]);\n-\t  value = do_spec (cp->spec);\n+\t\t   input_filename, &input_file_compiler->spec[1]);\n+\t  value = do_spec (input_file_compiler->spec);\n \t  if (value < 0)\n \t    this_file_error = 1;\n \t}"}, {"sha": "d6557b861f80d2b8e7e66ce2ceaee88bc8c7dcdd", "filename": "gcc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9374841850fb444b6de78ff169b88dc03766d83/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=a9374841850fb444b6de78ff169b88dc03766d83", "patch": "@@ -109,6 +109,12 @@ give to GCC into options for GCC to pass to the CPP.\n \n Do not define this macro if it does not need to do anything.\n \n+@findex CPLUSPLUS_CPP_SPEC\n+@item CPLUSPLUS_CPP_SPEC\n+This macro is just like @code{CPP_SPEC}, but is used for C++, rather\n+than C.  If you do not define this macro, then the value of\n+@code{CPP_SPEC} (if any) will be used instead.\n+\n @findex NO_BUILTIN_SIZE_TYPE\n @item NO_BUILTIN_SIZE_TYPE\n If this macro is defined, the preprocessor will not define the builtin macro"}]}