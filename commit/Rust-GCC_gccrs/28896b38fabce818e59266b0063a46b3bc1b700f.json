{"sha": "28896b38fabce818e59266b0063a46b3bc1b700f", "node_id": "C_kwDOANBUbNoAKDI4ODk2YjM4ZmFiY2U4MThlNTkyNjZiMDA2M2E0NmIzYmMxYjcwMGY", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-05-10T07:21:42Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2022-05-10T07:21:42Z"}, "message": "middle-end/70090: Dynamic sizes for -fsanitize=object-size\n\nUse __builtin_dynamic_object_size to get object sizes for ubsan.\n\ngcc/ChangeLog:\n\n\tPR middle-end/70090\n\t* ubsan.cc (ubsan_expand_objsize_ifn): Allow non-constant SIZE.\n\t(instrument_object_size): Get dynamic object size expression.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/70090\n\t* gcc.dg/ubsan/object-size-dyn.c: New test.\n\nSigned-off-by: Siddhesh Poyarekar <siddhesh@gotplt.org>", "tree": {"sha": "e59cc4ea722ed2354fcce448d15c9463c212237f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e59cc4ea722ed2354fcce448d15c9463c212237f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28896b38fabce818e59266b0063a46b3bc1b700f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28896b38fabce818e59266b0063a46b3bc1b700f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28896b38fabce818e59266b0063a46b3bc1b700f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28896b38fabce818e59266b0063a46b3bc1b700f/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb2921ab84dba014f24be06663636c7fb1361474", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb2921ab84dba014f24be06663636c7fb1361474", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb2921ab84dba014f24be06663636c7fb1361474"}], "stats": {"total": 58, "additions": 52, "deletions": 6}, "files": [{"sha": "0159f5b982046d90b3296845ea51613a01679bb4", "filename": "gcc/testsuite/gcc.dg/ubsan/object-size-dyn.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28896b38fabce818e59266b0063a46b3bc1b700f/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fobject-size-dyn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28896b38fabce818e59266b0063a46b3bc1b700f/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fobject-size-dyn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Fobject-size-dyn.c?ref=28896b38fabce818e59266b0063a46b3bc1b700f", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=undefined\" } */\n+#include <stdio.h>\n+\n+int\n+__attribute__ ((noinline))\n+dyn (int size, int i)\n+{\n+  __builtin_printf (\"dyn\\n\");\n+  fflush (stdout);\n+  int *alloc = __builtin_calloc (size, sizeof (int));\n+  int ret = alloc[i];\n+  __builtin_free (alloc);\n+  return ret;\n+}\n+\n+int\n+__attribute__ ((noinline))\n+off (int size, int i, int ret)\n+{\n+  char *mem = __builtin_alloca (size);\n+  mem += size - 1;\n+\n+  return (int) mem[i] & ret;\n+}\n+\n+int\n+main (void)\n+{\n+  int ret = dyn (2, 2);\n+\n+  ret |= off (4, 4, 0);\n+\n+  return ret;\n+}\n+\n+/* { dg-output \"load of address \\[^\\n\\r]* with insufficient space for an object of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*load of address \\[^\\n\\r]* with insufficient space for an object of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*note: pointer points here\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*\\\\^\" } */"}, {"sha": "f74929d0f17d40bbedb1af81bb874824189126bc", "filename": "gcc/ubsan.cc", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28896b38fabce818e59266b0063a46b3bc1b700f/gcc%2Fubsan.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28896b38fabce818e59266b0063a46b3bc1b700f/gcc%2Fubsan.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.cc?ref=28896b38fabce818e59266b0063a46b3bc1b700f", "patch": "@@ -942,8 +942,8 @@ ubsan_expand_objsize_ifn (gimple_stmt_iterator *gsi)\n   gimple *g;\n \n   /* See if we can discard the check.  */\n-  if (TREE_CODE (size) != INTEGER_CST\n-      || integer_all_onesp (size))\n+  if (TREE_CODE (size) == INTEGER_CST\n+      && integer_all_onesp (size))\n     /* Yes, __builtin_object_size couldn't determine the\n        object size.  */;\n   else if (TREE_CODE (offset) == INTEGER_CST\n@@ -2162,14 +2162,14 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n   if (decl_p)\n     base_addr = build1 (ADDR_EXPR,\n \t\t\tbuild_pointer_type (TREE_TYPE (base)), base);\n-  if (compute_builtin_object_size (base_addr, 0, &sizet))\n+  if (compute_builtin_object_size (base_addr, OST_DYNAMIC, &sizet))\n     ;\n   else if (optimize)\n     {\n       if (LOCATION_LOCUS (loc) == UNKNOWN_LOCATION)\n \tloc = input_location;\n-      /* Generate __builtin_object_size call.  */\n-      sizet = builtin_decl_explicit (BUILT_IN_OBJECT_SIZE);\n+      /* Generate __builtin_dynamic_object_size call.  */\n+      sizet = builtin_decl_explicit (BUILT_IN_DYNAMIC_OBJECT_SIZE);\n       sizet = build_call_expr_loc (loc, sizet, 2, base_addr,\n \t\t\t\t   integer_zero_node);\n       sizet = force_gimple_operand_gsi (gsi, sizet, false, NULL_TREE, true,\n@@ -2226,7 +2226,8 @@ instrument_object_size (gimple_stmt_iterator *gsi, tree t, bool is_lhs)\n       && !TREE_ADDRESSABLE (base))\n     mark_addressable (base);\n \n-  if (bos_stmt && gimple_call_builtin_p (bos_stmt, BUILT_IN_OBJECT_SIZE))\n+  if (bos_stmt\n+      && gimple_call_builtin_p (bos_stmt, BUILT_IN_DYNAMIC_OBJECT_SIZE))\n     ubsan_create_edge (bos_stmt);\n \n   /* We have to emit the check.  */"}]}