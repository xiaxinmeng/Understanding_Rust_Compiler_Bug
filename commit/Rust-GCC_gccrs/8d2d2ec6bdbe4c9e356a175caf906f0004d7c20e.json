{"sha": "8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGQyZDJlYzZiZGJlNGM5ZTM1NmExNzVjYWY5MDZmMDAwNGQ3YzIwZQ==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2005-02-01T17:54:45Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2005-02-01T17:54:45Z"}, "message": "sourcebuild.texi (Test directives): Describe selector expressions.\n\n\t* doc/sourcebuild.texi (Test directives): Describe selector\n\texpressions.\n\n\t* lib/gcc-dg.exp (selector_opd, selector_list, selector_expression):\n\tNew procs.\n\t(dg-process-target (local override)): Handle selector expressions.\n\nFrom-SVN: r94551", "tree": {"sha": "4cba8622e906f1a2053151c017f6299e858bc309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cba8622e906f1a2053151c017f6299e858bc309"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/comments", "author": null, "committer": null, "parents": [{"sha": "91442c2081b37f63adb5d0c3f626949abcce406a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91442c2081b37f63adb5d0c3f626949abcce406a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91442c2081b37f63adb5d0c3f626949abcce406a"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "9f27f20124a96914b88d6e5f47bb3e4cf594249c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "patch": "@@ -1,3 +1,8 @@\n+2005-02-01  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* doc/sourcebuild.texi (Test directives): Describe selector\n+\texpressions.\n+\n 2005-02-01  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config.gcc (powerpc64-*-linux*): Default to -m64 also for"}, {"sha": "14cdee2e4d6af343cddf6a99b584f011fa9d84b5", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "patch": "@@ -919,17 +919,26 @@ DejaGnu directives, which know nothing about the GCC directives, so the\n DejaGnu directives must precede GCC directives.\n \n Several test directives include selectors which are usually preceded by\n-the keyword @code{target} or @code{xfail}.  A selector is one or\n-more target triplets, possibly including wildcard characters, or else a\n-single effective-target keyword.  Depending on the context, the selector\n-specifies whether a test is skipped and reported as unsupported or is\n-expected to fail.  Use @samp{*-*-*} to match any target.\n-\n+the keyword @code{target} or @code{xfail}.  A selector is: one or more\n+target triplets, possibly including wildcard characters; a single\n+effective-target keyword; or a logical expression.  Depending on the\n+context, the selector specifies whether a test is skipped and reported\n+as unsupported or is expected to fail.  Use @samp{*-*-*} to match any\n+target.\n Effective-target keywords are defined in @file{target-supports.exp} in\n-the GCC testsuite or, in the case of unusual effective targets that are\n-used only for a limited number of tests, in @file{.exp} files in the\n-same directory as the tests.  There is no mechanism to combine or negate\n-effective-target keywords.\n+the GCC testsuite.\n+\n+A selector expression appears within curly braces and uses a single\n+logical operator: one of @option{!}, @option{&&}, or @option{||}.  An\n+operand is another selector expression, an effective-target keyword,\n+a single target triplet, or a list of target triplets within quotes or\n+curly braces.  For example:\n+\n+@smallexample\n+@{ target @{ ! \"hppa*-*-* ia64*-*-*\" @} @}\n+@{ target @{ powerpc*-*-* && lp64 @} @}\n+@{ xfail @{ lp64 || vect_no_align @} @}\n+@end smallexample\n \n @table @code\n @item @{ dg-do @var{do-what-keyword} [@{ target/xfail @var{selector} @}] @}"}, {"sha": "28334bbaa1dd26fc201446644bd7846f558e614e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "patch": "@@ -1,5 +1,9 @@\n 2005-02-01  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* lib/gcc-dg.exp (selector_opd, selector_list, selector_expression):\n+\tNew procs.\n+\t(dg-process-target (local override)): Handle selector expressions.\n+\n \t* gcc.test-framework/README: Describe tests in source directory.\n \t* gcc.test-framework/test-framework.awk: Handle dg- tests.\n \t* gcc.test-framework/test-framework.exp: Handle dg- tests."}, {"sha": "6e09639b1cfdab495018180297ac7af43c3e32f0", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=8d2d2ec6bdbe4c9e356a175caf906f0004d7c20e", "patch": "@@ -522,17 +522,74 @@ if { [info procs saved-dg-test] == [list] } {\n # selector is one of:\n #    xfail target-triplet-1 ...\n #    xfail effective-target-keyword\n+#    xfail selector-expression\n #    target target-triplet-1 ...\n #    target effective-target-keyword\n+#    target selector-expression\n #\n # For a target list the result is \"S\" if the target is selected, \"N\" otherwise.\n # For an xfail list the result is \"F\" if the target is affected, \"P\" otherwise.\n+#\n+# A selector expression appears within curly braces and uses a single logical\n+# operator: !, &&, or ||.  An operand is another selector expression, an\n+# effective-target keyword, or a list of target triplets within quotes or\n+# curly braces.\n \n if { [info procs saved-dg-process-target] == [list] } {\n     rename dg-process-target saved-dg-process-target\n \n+    # Evaluate an operand within a selector expression.\n+    proc selector_opd { op } {\n+\tset selector \"target\"\n+\tlappend selector $op\n+\tset answer [ expr { [dg-process-target $selector] == \"S\" } ]\n+\tverbose \"selector_opd: `$op' $answer\" 2\n+\treturn $answer\n+    }\n+\n+    # Evaluate a target triplet list within a selector expression.\n+    # Unlike other operands, this needs to be expanded from a list to\n+    # the same string as \"target\".\n+    proc selector_list { op } {\n+\tset selector \"target [join $op]\"\n+\tset answer [ expr { [dg-process-target $selector] == \"S\" } ]\n+\tverbose \"selector_list: `$op' $answer\" 2\n+\treturn $answer\n+    }\n+\n+    # Evaluate a selector expression.\n+    proc selector_expression { exp } {\n+\tif { [llength $exp] == 2 } {\n+\t    if [string match \"!\" [lindex $exp 0]] {\n+\t\tset op1 [lindex $exp 1]\n+\t\tset answer [expr { ! [selector_opd $op1] }]\n+\t    } else {\n+\t\t# Assume it's a list of target triplets.\n+\t\tset answer [selector_list $exp]\n+\t    }\n+\t} elseif { [llength $exp] == 3 } {\n+\t    set op1 [lindex $exp 0]\n+\t    set opr [lindex $exp 1]\n+\t    set op2 [lindex $exp 2]\n+\t    if [string match \"&&\" $opr] {\n+\t\tset answer [expr { [selector_opd $op1] && [selector_opd $op2] }]\n+\t    } elseif [string match \"||\" $opr] {\n+\t\tset answer [expr { [selector_opd $op1] || [selector_opd $op2] }]\n+\t    } else {\n+\t\t# Assume it's a list of target triplets.\n+\t\tset answer [selector_list $exp]\n+\t    }\n+\t} else {\n+\t    # Assume it's a list of target triplets.\n+\t    set answer [selector_list $exp]\n+\t}\n+\n+\tverbose \"selector_expression: `$exp' $answer\" 2\n+\treturn $answer\n+    }\n+\n     proc dg-process-target { args } {\n-        verbose \"replacement dg-process-target\" 2\n+\tverbose \"replacement dg-process-target: `$args'\" 2\n \t\n \t# Extract the 'what' keyword from the argument list.\n \tset selector [string trim [lindex $args 0]]\n@@ -557,6 +614,14 @@ if { [info procs saved-dg-process-target] == [list] } {\n \t    }\n \t}\n \n+\tif [string match \"{*}\" $rest] {\n+\t    if [selector_expression [lindex $rest 0]] {\n+\t\treturn [expr { $what == \"xfail\" ? \"F\" : \"S\" }]\n+\t    } else {\n+\t\treturn [expr { $what == \"xfail\" ? \"P\" : \"N\" }]\n+\t    }\n+\t}\n+\n \t# The selector is not an effective-target keyword, so process\n \t# the list of target triplets.\n \treturn [saved-dg-process-target $selector]"}]}