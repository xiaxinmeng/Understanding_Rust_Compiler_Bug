{"sha": "62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "node_id": "C_kwDOANBUbNoAKDYyZWM3ODBhYzBiNGQxMDlmMmEzYzhjNDU5N2NiMTlhODJmNjE4OGQ", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T06:56:04Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-10-07T07:00:00Z"}, "message": "fixincludes: Fix up powerpc floatn.h tweaks [PR107059]\n\nOn Wed, Sep 28, 2022 at 12:23:31AM +0000, Joseph Myers wrote:\n> In general the changes match those made by fixincludes, though I think\n> the ones in sysdeps/powerpc/bits/floatn.h, where the header tests\n> __LDBL_MANT_DIG__ == 113 or uses #elif, wouldn't match the existing\n> fixincludes patterns.\n\nYou're right, missed that.\nThe header has:\n /* Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.  */\n # if __HAVE_FLOAT128\n #  if __LDBL_MANT_DIG__ == 113 && defined __cplusplus\n typedef long double _Float128;\n #   define __CFLOAT128 _Complex long double\n #  elif !__GNUC_PREREQ (7, 0) || defined __cplusplus\n /* The type _Float128 exist for powerpc only since GCC 7.0.  */\n typedef __float128 _Float128;\n /* Add a typedef for older GCC and C++ compilers which don't natively support\n    _Complex _Float128.  */\n typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__KC__)));\n #   define __CFLOAT128 __cfloat128\n #  else\n #   define __CFLOAT128 _Complex _Float128\n #  endif\n # endif\nand my current rules don't do anything about that.\n\nThe following patch fixes that.\nI've run additionally\nMACRO_LIST=`pwd`/../gcc/macro_list TARGET_MACHINE=x86_64-pc-linux-gnu \\\n  ../fixincludes/fixinc.sh /tmp/include-fixed \\\n    `echo /usr/src/libc | sed -e :a -e 's,[^/]*/\\.\\.\\/,,' -e ta`\nin the builddir/fixincludes directory where /usr/src/libc is latest glibc\ntrunk checkout and seems the remaining defined __cplusplus cases in the floatn.h\nand floatn-common.h headers are ok or acceptable.\nThe remaining cases are:\n #if __GNUC_PREREQ (7, 0) && !defined __cplusplus\n # define __HAVE_FLOATN_NOT_TYPEDEF 1\n #else\n # define __HAVE_FLOATN_NOT_TYPEDEF 0\n #endif\nwhich is IMHO ok because this is only used in tgmath.h or tgmath-like math.h\nstuff which is C only, as C++ doesn't have _Generic.\nAnother case are the following 3 snippets:\n #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n #   error \"_Float128X supported but no constant suffix\"\n #  else\n #   define __f128x(x) x##f128x\n #  endif\n...\n #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n #   error \"_Float128X supported but no complex type\"\n #  else\n #   define __CFLOAT128X _Complex _Float128x\n #  endif\n...\n #  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n #   error \"_Float128x supported but no type\"\n #  endif\nbut as no target has _Float128x right now and don't see it\ncoming soon, it isn't a big deal (on the glibc side it is of\ncourse ok to adjust those).\nOT, besides floatn.h and floatn-common.h headers, the only\none remaining in /tmp/include-fixed is sysdeps/arm/unwind.h, perhaps\n-#if defined(linux) || defined(__NetBSD__)\n+#if defined(__linux__) || defined(__NetBSD__)\nshould be done in that header (and libgcc/config/arm/unwind-arm.h\ntoo).\n\n2022-10-07  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR bootstrap/107059\n\t* inclhack.def (glibc_cxx_floatn_2): Handle #elif the same as #if.\n\t(glibc_cxx_floatn_4): New.\n\t* fixincl.x: Regenerated.\n\t* tests/base/bits/floatn.h: Regenerated.", "tree": {"sha": "5a002f8ccbeb3406eed899271f36b354b7ced0e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a002f8ccbeb3406eed899271f36b354b7ced0e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6ab375cbd07f71edb481358c3bcf5916df9aadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6ab375cbd07f71edb481358c3bcf5916df9aadf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6ab375cbd07f71edb481358c3bcf5916df9aadf"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "ff3c724c8502e442defeff30dad44c05906aa914", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 53, "deletions": 7, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "patch": "@@ -2,11 +2,11 @@\n  *\n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  *\n- * It has been AutoGen-ed  September 27, 2022 at 12:21:44 PM by AutoGen 5.18.16\n+ * It has been AutoGen-ed  September 28, 2022 at 07:56:15 PM by AutoGen 5.18.16\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Tue Sep 27 12:21:44 CEST 2022\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Wed Sep 28 19:56:15 CEST 2022\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 270 fixup descriptions.\n+ * This file contains 271 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -4167,7 +4167,7 @@ tSCC zGlibc_Cxx_Floatn_2List[] =\n  *  content selection pattern - do fix if pattern found\n  */\n tSCC zGlibc_Cxx_Floatn_2Select0[] =\n-       \"^([ \\t]*#[ \\t]*if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\\\n+       \"^([ \\t]*#[ \\t]*(el)?if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\\\n (([ \\t]*/\\\\*[^\\n\\\n ]*\\\\*/\\n\\\n )?[ \\t]*typedef[ \\t]+[^\\n\\\n@@ -4183,7 +4183,7 @@ static tTestDesc aGlibc_Cxx_Floatn_2Tests[] = {\n static const char* apzGlibc_Cxx_Floatn_2Patch[] = {\n     \"format\",\n     \"%1(defined __cplusplus && !__GNUC_PREREQ (13, 0))\\n\\\n-%2\",\n+%3\",\n     (char*)NULL };\n \n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n@@ -4231,6 +4231,46 @@ static const char* apzGlibc_Cxx_Floatn_3Patch[] = {\n %2\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Glibc_Cxx_Floatn_4 fix\n+ */\n+tSCC zGlibc_Cxx_Floatn_4Name[] =\n+     \"glibc_cxx_floatn_4\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zGlibc_Cxx_Floatn_4List[] =\n+  \"bits/floatn.h\\0*/bits/floatn.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzGlibc_Cxx_Floatn_4Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zGlibc_Cxx_Floatn_4Select0[] =\n+       \"^([ \\t]*#[ \\t]*if __LDBL_MANT_DIG__ == 113 && )defined __cplusplus\\n\\\n+(([ \\t]*/\\\\*[^\\n\\\n+]*\\\\*/\\n\\\n+)?[ \\t]*typedef[ \\t]+[^\\n\\\n+]*[ \\t]+_Float128;)\";\n+\n+#define    GLIBC_CXX_FLOATN_4_TEST_CT  1\n+static tTestDesc aGlibc_Cxx_Floatn_4Tests[] = {\n+  { TT_EGREP,    zGlibc_Cxx_Floatn_4Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Glibc_Cxx_Floatn_4\n+ */\n+static const char* apzGlibc_Cxx_Floatn_4Patch[] = {\n+    \"format\",\n+    \"%1defined __cplusplus && !__GNUC_PREREQ (13, 0)\\n\\\n+%2\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Glibc_Mutex_Init fix\n@@ -10998,9 +11038,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          308\n+#define REGEX_COUNT          309\n #define MACH_LIST_SIZE_LIMIT 187\n-#define FIX_COUNT            270\n+#define FIX_COUNT            271\n \n /*\n  *  Enumerate the fixes\n@@ -11106,6 +11146,7 @@ typedef enum {\n     GLIBC_CXX_FLOATN_1_FIXIDX,\n     GLIBC_CXX_FLOATN_2_FIXIDX,\n     GLIBC_CXX_FLOATN_3_FIXIDX,\n+    GLIBC_CXX_FLOATN_4_FIXIDX,\n     GLIBC_MUTEX_INIT_FIXIDX,\n     GLIBC_STDINT_FIXIDX,\n     GLIBC_STRNCPY_FIXIDX,\n@@ -11779,6 +11820,11 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      GLIBC_CXX_FLOATN_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aGlibc_Cxx_Floatn_3Tests,   apzGlibc_Cxx_Floatn_3Patch, 0 },\n \n+  {  zGlibc_Cxx_Floatn_4Name,    zGlibc_Cxx_Floatn_4List,\n+     apzGlibc_Cxx_Floatn_4Machs,\n+     GLIBC_CXX_FLOATN_4_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aGlibc_Cxx_Floatn_4Tests,   apzGlibc_Cxx_Floatn_4Patch, 0 },\n+\n   {  zGlibc_Mutex_InitName,    zGlibc_Mutex_InitList,\n      apzGlibc_Mutex_InitMachs,\n      GLIBC_MUTEX_INIT_TEST_CT, FD_MACH_ONLY,"}, {"sha": "71f1c47c07f1c6fc0cfc7e4f18dcadc2b48be237", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "patch": "@@ -2060,18 +2060,22 @@ fix = {\n fix = {\n     hackname  = glibc_cxx_floatn_2;\n     files     = bits/floatn.h, bits/floatn-common.h, \"*/bits/floatn.h\", \"*/bits/floatn-common.h\";\n-    select    = \"^([ \\t]*#[ \\t]*if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\"\n+    select    = \"^([ \\t]*#[ \\t]*(el)?if !__GNUC_PREREQ \\\\(7, 0\\\\) \\\\|\\\\| )defined __cplusplus\\n\"\n \t\t\"(([ \\t]*/\\\\*[^\\n]*\\\\*/\\n)?\"\n \t\t\"[ \\t]*typedef[ \\t]+[^\\n]*[ \\t]+_Float(16|32|64|128)x?([ \\t]+__attribute__ \\\\(\\\\(__mode__ \\\\(__HF__\\\\)\\\\)\\\\))?;)\";\n     c_fix     = format;\n-    c_fix_arg = \"%1(defined __cplusplus && !__GNUC_PREREQ (13, 0))\\n%2\";\n+    c_fix_arg = \"%1(defined __cplusplus && !__GNUC_PREREQ (13, 0))\\n%3\";\n     test_text = <<-EOT\n \t#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n \ttypedef float _Float16 __attribute__ ((__mode__ (__HF__)));\n \t#  endif\n \t#  if !__GNUC_PREREQ (7, 0) || defined __cplusplus\n \ttypedef __float128 _Float128;\n \t#  endif\n+\t#  if 0\n+\t#  elif !__GNUC_PREREQ (7, 0) || defined __cplusplus\n+\ttypedef __float128 _Float128;\n+\t#  endif\n \tEOT;\n };\n \n@@ -2111,6 +2115,22 @@ fix = {\n \tEOT;\n };\n \n+fix = {\n+    hackname  = glibc_cxx_floatn_4;\n+    files     = bits/floatn.h, \"*/bits/floatn.h\";\n+    select    = \"^([ \\t]*#[ \\t]*if __LDBL_MANT_DIG__ == 113 && )defined __cplusplus\\n\"\n+\t\t\"(([ \\t]*/\\\\*[^\\n]*\\\\*/\\n)?\"\n+\t\t\"[ \\t]*typedef[ \\t]+[^\\n]*[ \\t]+_Float128;)\";\n+    c_fix     = format;\n+    c_fix_arg = \"%1defined __cplusplus && !__GNUC_PREREQ (13, 0)\\n%2\";\n+    test_text = <<-EOT\n+\t#  if __LDBL_MANT_DIG__ == 113 && defined __cplusplus\n+\ttypedef long double _Float128;\n+\t#   define __CFLOAT128 _Complex long double\n+\t#  endif\n+\tEOT;\n+};\n+\n /*  glibc-2.3.5 defines pthread mutex initializers incorrectly,\n  *  so we replace them with versions that correspond to the\n  *  definition."}, {"sha": "c80941f5666ad982241da1c669d15dfb67799dfb", "filename": "fixincludes/tests/base/bits/floatn.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62ec780ac0b4d109f2a3c8c4597cb19a82f6188d/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fbits%2Ffloatn.h?ref=62ec780ac0b4d109f2a3c8c4597cb19a82f6188d", "patch": "@@ -45,6 +45,10 @@ typedef float _Float16 __attribute__ ((__mode__ (__HF__)));\n #  if !__GNUC_PREREQ (7, 0) || (defined __cplusplus && !__GNUC_PREREQ (13, 0))\n typedef __float128 _Float128;\n #  endif\n+#  if 0\n+#  elif !__GNUC_PREREQ (7, 0) || (defined __cplusplus && !__GNUC_PREREQ (13, 0))\n+typedef __float128 _Float128;\n+#  endif\n #endif  /* GLIBC_CXX_FLOATN_2_CHECK */\n \n \n@@ -72,3 +76,11 @@ typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));\n #   define __CFLOAT64 _Complex _Float64\n #  endif\n #endif  /* GLIBC_CXX_FLOATN_3_CHECK */\n+\n+\n+#if defined( GLIBC_CXX_FLOATN_4_CHECK )\n+#  if __LDBL_MANT_DIG__ == 113 && defined __cplusplus && !__GNUC_PREREQ (13, 0)\n+typedef long double _Float128;\n+#   define __CFLOAT128 _Complex long double\n+#  endif\n+#endif  /* GLIBC_CXX_FLOATN_4_CHECK */"}]}