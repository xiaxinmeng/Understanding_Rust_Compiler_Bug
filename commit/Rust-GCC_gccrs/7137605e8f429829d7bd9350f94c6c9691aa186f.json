{"sha": "7137605e8f429829d7bd9350f94c6c9691aa186f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzNzYwNWU4ZjQyOTgyOWQ3YmQ5MzUwZjk0YzZjOTY5MWFhMTg2Zg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-05-02T15:59:50Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-05-02T15:59:50Z"}, "message": "re PR c++/27309 (ICE on invalid constructor definition)\n\n\tPR c++/27309\n\t* class.c (add_method): Call grok_special_member_properties.\n\t* decl.c (grokdeclarator): Don't call it here.\n\t(copy_fn_p): A TEMPLATE_DECL is never a copy constructor or\n\tassignment operator.  Set TYPE_HAS_CONSTURCTOR if DECL is a\n\tconstructor.\n\t(start_method): Don't call grok_special_member_properties.\n\t* method.c (implicitly_declare_fn): Likewise.\n\t* pt.c (instantiate_class_template): Likewise.\n\t* decl2.c (grokfield): Likewise.\n\tPR c++/27309\n\t* g++.dg/parser/ctor5.C: New test.\n\nFrom-SVN: r113473", "tree": {"sha": "8a8cf2fbbce2ce7e3e9f80eb8c80ad42a8e58c79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a8cf2fbbce2ce7e3e9f80eb8c80ad42a8e58c79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7137605e8f429829d7bd9350f94c6c9691aa186f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7137605e8f429829d7bd9350f94c6c9691aa186f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7137605e8f429829d7bd9350f94c6c9691aa186f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7137605e8f429829d7bd9350f94c6c9691aa186f/comments", "author": null, "committer": null, "parents": [{"sha": "263bb8fb8603df086463cca38be38bdaedee08d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/263bb8fb8603df086463cca38be38bdaedee08d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/263bb8fb8603df086463cca38be38bdaedee08d2"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "803644d87904be4e6bd89d7563eafa44308581e7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -1,3 +1,16 @@\n+2006-05-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27309\n+\t* class.c (add_method): Call grok_special_member_properties.\n+\t* decl.c (grokdeclarator): Don't call it here.\n+\t(copy_fn_p): A TEMPLATE_DECL is never a copy constructor or\n+\tassignment operator.  Set TYPE_HAS_CONSTURCTOR if DECL is a\n+\tconstructor.\n+\t(start_method): Don't call grok_special_member_properties.\n+\t* method.c (implicitly_declare_fn): Likewise.\n+\t* pt.c (instantiate_class_template): Likewise.\n+\t* decl2.c (grokfield): Likewise.\n+\n 2006-05-02  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/27337"}, {"sha": "f592fe6805ae867c63e45bf9f25d8e94bc1eb690", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -924,6 +924,9 @@ add_method (tree type, tree method, tree using_decl)\n       CLASSTYPE_METHOD_VEC (type) = method_vec;\n     }\n \n+  /* Maintain TYPE_HAS_CONSTRUCTOR, etc.  */\n+  grok_special_member_properties (method);\n+\n   /* Constructors and destructors go in special slots.  */\n   if (DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (method))\n     slot = CLASSTYPE_CONSTRUCTOR_SLOT;"}, {"sha": "40c2120556858429ae484d6166d47c062f41d290", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -7541,12 +7541,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\tpedwarn (\"constructors cannot be declared virtual\");\n \t\t\tvirtualp = 0;\n \t\t      }\n-\t\t    if (decl_context == FIELD)\n-\t\t      {\n-\t\t\tTYPE_HAS_CONSTRUCTOR (ctype) = 1;\n-\t\t\tif (sfk != sfk_constructor)\n-\t\t\t  return NULL_TREE;\n-\t\t      }\n+\t\t    if (decl_context == FIELD\n+\t\t\t&& sfk != sfk_constructor)\n+\t\t      return NULL_TREE;\n \t\t  }\n \t\tif (decl_context == FIELD)\n \t\t  staticp = 0;\n@@ -8816,8 +8813,9 @@ copy_fn_p (tree d)\n \n   gcc_assert (DECL_FUNCTION_MEMBER_P (d));\n \n-  if (DECL_TEMPLATE_INFO (d)\n-      && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (d)))\n+  if (TREE_CODE (d) == TEMPLATE_DECL\n+      || (DECL_TEMPLATE_INFO (d)\n+\t  && DECL_MEMBER_TEMPLATE_P (DECL_TI_TEMPLATE (d))))\n     /* Instantiations of template member functions are never copy\n        functions.  Note that member functions of templated classes are\n        represented as template functions internally, and we must\n@@ -8859,12 +8857,18 @@ copy_fn_p (tree d)\n \n void grok_special_member_properties (tree decl)\n {\n+  tree class_type;\n+\n   if (!DECL_NONSTATIC_MEMBER_FUNCTION_P (decl))\n-    ; /* Not special.  */\n-  else if (DECL_CONSTRUCTOR_P (decl))\n+    return;\n+\n+  class_type = DECL_CONTEXT (decl);\n+  if (DECL_CONSTRUCTOR_P (decl))\n     {\n       int ctor = copy_fn_p (decl);\n \n+      TYPE_HAS_CONSTRUCTOR (class_type) = 1;\n+\n       if (ctor > 0)\n \t{\n \t  /* [class.copy]\n@@ -8874,12 +8878,12 @@ void grok_special_member_properties (tree decl)\n \t     X&, volatile X& or const volatile X&, and either there\n \t     are no other parameters or else all other parameters have\n \t     default arguments.  */\n-\t  TYPE_HAS_INIT_REF (DECL_CONTEXT (decl)) = 1;\n+\t  TYPE_HAS_INIT_REF (class_type) = 1;\n \t  if (ctor > 1)\n-\t    TYPE_HAS_CONST_INIT_REF (DECL_CONTEXT (decl)) = 1;\n+\t    TYPE_HAS_CONST_INIT_REF (class_type) = 1;\n \t}\n       else if (sufficient_parms_p (FUNCTION_FIRST_USER_PARMTYPE (decl)))\n-\tTYPE_HAS_DEFAULT_CONSTRUCTOR (DECL_CONTEXT (decl)) = 1;\n+\tTYPE_HAS_DEFAULT_CONSTRUCTOR (class_type) = 1;\n     }\n   else if (DECL_OVERLOADED_OPERATOR_P (decl) == NOP_EXPR)\n     {\n@@ -8893,9 +8897,9 @@ void grok_special_member_properties (tree decl)\n \n       if (assop)\n \t{\n-\t  TYPE_HAS_ASSIGN_REF (DECL_CONTEXT (decl)) = 1;\n+\t  TYPE_HAS_ASSIGN_REF (class_type) = 1;\n \t  if (assop != 1)\n-\t    TYPE_HAS_CONST_ASSIGN_REF (DECL_CONTEXT (decl)) = 1;\n+\t    TYPE_HAS_CONST_ASSIGN_REF (class_type) = 1;\n \t}\n     }\n }\n@@ -11203,7 +11207,6 @@ start_method (cp_decl_specifier_seq *declspecs,\n \t  fndecl = copy_node (fndecl);\n \t  TREE_CHAIN (fndecl) = NULL_TREE;\n \t}\n-      grok_special_member_properties (fndecl);\n     }\n \n   finish_decl (fndecl, NULL_TREE, NULL_TREE);"}, {"sha": "ac85b44eac1b45775839787e31aafb56259d45a9", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -923,8 +923,6 @@ grokfield (const cp_declarator *declarator,\n     case  FUNCTION_DECL:\n       if (asmspec)\n \tset_user_assembler_name (value, asmspec);\n-      if (!DECL_FRIEND_P (value))\n-\tgrok_special_member_properties (value);\n \n       cp_finish_decl (value, init, /*init_const_expr_p=*/false, \n \t\t      asmspec_tree, flags);"}, {"sha": "ddf79bf8e6609de9c532ac06858baccd908f197d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -1083,7 +1083,6 @@ implicitly_declare_fn (special_function_kind kind, tree type, bool const_p)\n   DECL_ARGUMENTS (fn) = this_parm;\n \n   grokclassfn (type, fn, kind == sfk_destructor ? DTOR_FLAG : NO_SPECIAL);\n-  grok_special_member_properties (fn);\n   set_linkage_according_to_type (type, fn);\n   rest_of_decl_compilation (fn, toplevel_bindings_p (), at_eof);\n   DECL_IN_AGGR_P (fn) = 1;"}, {"sha": "7b814aef8b64a160d222d2e25432a01051873485", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -5702,7 +5702,6 @@ instantiate_class_template (tree type)\n \t      if (TREE_CODE (t) == TEMPLATE_DECL)\n \t\t--processing_template_decl;\n \t      set_current_access_from_decl (r);\n-\t      grok_special_member_properties (r);\n \t      finish_member_declaration (r);\n \t    }\n \t  else"}, {"sha": "9608839ee784d68d584a6dfc92ac022b16bbf616", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -1,3 +1,8 @@\n+2006-05-02  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/27309\n+\t* g++.dg/parser/ctor5.C: New test.\n+\n 2006-05-02  Kazu Hirata  <kazu@codesourcery.com>\n \n \tPR target/27387"}, {"sha": "819458598a3c933d4cc873cf082472eb07ae4764", "filename": "gcc/testsuite/g++.dg/parse/ctor5.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7137605e8f429829d7bd9350f94c6c9691aa186f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fctor5.C?ref=7137605e8f429829d7bd9350f94c6c9691aa186f", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/27309\n+\n+struct A\n+{\n+  int i;\n+  A() i() {}  // { dg-error \"expected\" }\n+}; // { dg-error \"expected\" }\n+\n+struct B\n+{\n+  A a;\n+};\n+\n+B b;"}]}