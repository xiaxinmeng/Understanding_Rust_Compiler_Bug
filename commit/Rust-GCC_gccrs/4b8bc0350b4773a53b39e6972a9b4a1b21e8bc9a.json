{"sha": "4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4YmMwMzUwYjQ3NzNhNTNiMzllNjk3MmE5YjRhMWIyMWU4YmM5YQ==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2013-08-07T20:50:26Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2013-08-07T20:50:26Z"}, "message": "Implement -mtune-crl=..\n\nFrom-SVN: r201582", "tree": {"sha": "37ffc4a7cb129573e9d4eaa71ca0f3e5dd9a167b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37ffc4a7cb129573e9d4eaa71ca0f3e5dd9a167b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5b38740ff3d76b48bec5e8ee5d1205dbf1b9705", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b38740ff3d76b48bec5e8ee5d1205dbf1b9705", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b38740ff3d76b48bec5e8ee5d1205dbf1b9705"}], "stats": {"total": 230, "additions": 155, "deletions": 75}, "files": [{"sha": "c84e21306c84f0e885bdc0272e309d5e1e41cc9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "patch": "@@ -1,3 +1,11 @@\n+2013-08-07  Xinliang David Li  <davidxl@google.com>\n+\n+\t* config/i386/i386.opt: New option -mtune-ctrl=.\n+\t* config/i386/x86-tune.def: New file.\n+\t* config/i386/i386.h: include x86-tune.def.\n+\t* config/i386/i386.c (ix86_option_override_internal):\n+\tParsing -mtune-ctrl= option and set tune features.\n+\n 2013-08-07  Oleg Endo <olegendo@gcc.gnu.org>\n \n \tPR other/12081"}, {"sha": "9812b5e764c48aee97c4a2b45d158b40a1db01a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "patch": "@@ -1835,6 +1835,13 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n    (PPro/PENT4/NOCONA/CORE2/Athlon/K8).  */\n #define m_GENERIC (m_GENERIC32 | m_GENERIC64)\n \n+const char* ix86_tune_feature_names[X86_TUNE_LAST] = {\n+#undef DEF_TUNE\n+#define DEF_TUNE(tune, name) name,\n+#include \"x86-tune.def\"\n+#undef DEF_TUNE\n+};\n+\n /* Feature tests against the various tunings.  */\n unsigned char ix86_tune_features[X86_TUNE_LAST];\n \n@@ -3569,6 +3576,40 @@ ix86_option_override_internal (bool main_args_p)\n   for (i = 0; i < X86_TUNE_LAST; ++i)\n     ix86_tune_features[i] = !!(initial_ix86_tune_features[i] & ix86_tune_mask);\n \n+  if (ix86_tune_ctrl_string)\n+    {\n+      /* parse the tune ctrl string in the following form:\n+         [^]tune_name1,[^]tune_name2,..a */\n+      char *next_feature_string = NULL;\n+      char *curr_feature_string = xstrdup (ix86_tune_ctrl_string);\n+      char *orig = curr_feature_string;\n+      do {\n+        bool clear = false;\n+\n+        next_feature_string = strchr (curr_feature_string, ',');\n+\tif (next_feature_string)\n+          *next_feature_string++ = '\\0';\n+        if (*curr_feature_string == '^')\n+\t  {\n+\t    curr_feature_string++;\n+\t    clear = true;\n+\t  }\n+        for (i = 0; i < X86_TUNE_LAST; i++)\n+\t  {\n+            if (!strcmp (curr_feature_string, ix86_tune_feature_names[i]))\n+\t      {\n+                ix86_tune_features[i] = !clear;\n+                break;\n+              }\n+\t  }\n+        if (i == X86_TUNE_LAST)\n+\t  warning (0, \"Unknown parameter to option -mtune-ctrl: %s\",\n+\t           clear ? curr_feature_string - 1 : curr_feature_string);\n+\tcurr_feature_string = next_feature_string;    \n+      } while (curr_feature_string);\n+      free (orig);\n+    }\n+\n #ifndef USE_IX86_FRAME_POINTER\n #define USE_IX86_FRAME_POINTER 0\n #endif"}, {"sha": "97ddf0846a544d69d1666ec91745445b1422a6cc", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 75, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "patch": "@@ -261,81 +261,11 @@ extern const struct processor_costs ix86_size_cost;\n \n /* Feature tests against the various tunings.  */\n enum ix86_tune_indices {\n-  X86_TUNE_USE_LEAVE,\n-  X86_TUNE_PUSH_MEMORY,\n-  X86_TUNE_ZERO_EXTEND_WITH_AND,\n-  X86_TUNE_UNROLL_STRLEN,\n-  X86_TUNE_BRANCH_PREDICTION_HINTS,\n-  X86_TUNE_DOUBLE_WITH_ADD,\n-  X86_TUNE_USE_SAHF,\n-  X86_TUNE_MOVX,\n-  X86_TUNE_PARTIAL_REG_STALL,\n-  X86_TUNE_PARTIAL_FLAG_REG_STALL,\n-  X86_TUNE_LCP_STALL,\n-  X86_TUNE_USE_HIMODE_FIOP,\n-  X86_TUNE_USE_SIMODE_FIOP,\n-  X86_TUNE_USE_MOV0,\n-  X86_TUNE_USE_CLTD,\n-  X86_TUNE_USE_XCHGB,\n-  X86_TUNE_SPLIT_LONG_MOVES,\n-  X86_TUNE_READ_MODIFY_WRITE,\n-  X86_TUNE_READ_MODIFY,\n-  X86_TUNE_PROMOTE_QIMODE,\n-  X86_TUNE_FAST_PREFIX,\n-  X86_TUNE_SINGLE_STRINGOP,\n-  X86_TUNE_QIMODE_MATH,\n-  X86_TUNE_HIMODE_MATH,\n-  X86_TUNE_PROMOTE_QI_REGS,\n-  X86_TUNE_PROMOTE_HI_REGS,\n-  X86_TUNE_SINGLE_POP,\n-  X86_TUNE_DOUBLE_POP,\n-  X86_TUNE_SINGLE_PUSH,\n-  X86_TUNE_DOUBLE_PUSH,\n-  X86_TUNE_INTEGER_DFMODE_MOVES,\n-  X86_TUNE_PARTIAL_REG_DEPENDENCY,\n-  X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY,\n-  X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL,\n-  X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL,\n-  X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL,\n-  X86_TUNE_SSE_SPLIT_REGS,\n-  X86_TUNE_SSE_TYPELESS_STORES,\n-  X86_TUNE_SSE_LOAD0_BY_PXOR,\n-  X86_TUNE_MEMORY_MISMATCH_STALL,\n-  X86_TUNE_PROLOGUE_USING_MOVE,\n-  X86_TUNE_EPILOGUE_USING_MOVE,\n-  X86_TUNE_SHIFT1,\n-  X86_TUNE_USE_FFREEP,\n-  X86_TUNE_INTER_UNIT_MOVES_TO_VEC,\n-  X86_TUNE_INTER_UNIT_MOVES_FROM_VEC,\n-  X86_TUNE_INTER_UNIT_CONVERSIONS,\n-  X86_TUNE_FOUR_JUMP_LIMIT,\n-  X86_TUNE_SCHEDULE,\n-  X86_TUNE_USE_BT,\n-  X86_TUNE_USE_INCDEC,\n-  X86_TUNE_PAD_RETURNS,\n-  X86_TUNE_PAD_SHORT_FUNCTION,\n-  X86_TUNE_EXT_80387_CONSTANTS,\n-  X86_TUNE_AVOID_VECTOR_DECODE,\n-  X86_TUNE_PROMOTE_HIMODE_IMUL,\n-  X86_TUNE_SLOW_IMUL_IMM32_MEM,\n-  X86_TUNE_SLOW_IMUL_IMM8,\n-  X86_TUNE_MOVE_M1_VIA_OR,\n-  X86_TUNE_NOT_UNPAIRABLE,\n-  X86_TUNE_NOT_VECTORMODE,\n-  X86_TUNE_USE_VECTOR_FP_CONVERTS,\n-  X86_TUNE_USE_VECTOR_CONVERTS,\n-  X86_TUNE_FUSE_CMP_AND_BRANCH,\n-  X86_TUNE_OPT_AGU,\n-  X86_TUNE_VECTORIZE_DOUBLE,\n-  X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,\n-  X86_TUNE_AVX128_OPTIMAL,\n-  X86_TUNE_REASSOC_INT_TO_PARALLEL,\n-  X86_TUNE_REASSOC_FP_TO_PARALLEL,\n-  X86_TUNE_GENERAL_REGS_SSE_SPILL,\n-  X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE,\n-  X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS,\n-\n-  X86_TUNE_LAST\n+#undef DEF_TUNE\n+#define DEF_TUNE(tune, name) tune,\n+#include \"x86-tune.def\"\n+#undef DEF_TUNE\n+X86_TUNE_LAST\n };\n \n extern unsigned char ix86_tune_features[X86_TUNE_LAST];"}, {"sha": "4b0c4a630dfbe0040d51dfb930e7738ac62fab28", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "patch": "@@ -370,6 +370,10 @@ mtune=\n Target RejectNegative Joined Var(ix86_tune_string)\n Schedule code for given CPU\n \n+mtune-ctrl=\n+Target RejectNegative Joined Var(ix86_tune_ctrl_string)\n+Fine grain control of tune features\n+\n mabi=\n Target RejectNegative Joined Var(ix86_abi) Enum(calling_abi) Init(SYSV_ABI)\n Generate code that conforms to the given ABI"}, {"sha": "d662959abca4771a31d30b31325f3c81c9308d53", "filename": "gcc/config/i386/x86-tune.def", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=4b8bc0350b4773a53b39e6972a9b4a1b21e8bc9a", "patch": "@@ -0,0 +1,97 @@\n+/* Definitions of target machine for GCC for IA-32.\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+DEF_TUNE (X86_TUNE_USE_LEAVE, \"use_leave\")\n+DEF_TUNE (X86_TUNE_PUSH_MEMORY, \"push_memory\")\n+DEF_TUNE (X86_TUNE_ZERO_EXTEND_WITH_AND, \"zero_extend_with_and\")\n+DEF_TUNE (X86_TUNE_UNROLL_STRLEN, \"unroll_strlen\")\n+DEF_TUNE (X86_TUNE_BRANCH_PREDICTION_HINTS, \"branch_prediction_hints\")\n+DEF_TUNE (X86_TUNE_DOUBLE_WITH_ADD, \"double_with_add\")\n+DEF_TUNE (X86_TUNE_USE_SAHF, \"use_sahf\")\n+DEF_TUNE (X86_TUNE_MOVX, \"movx\")\n+DEF_TUNE (X86_TUNE_PARTIAL_REG_STALL, \"partial_reg_stall\")\n+DEF_TUNE (X86_TUNE_PARTIAL_FLAG_REG_STALL, \"partial_flag_reg_stall\")\n+DEF_TUNE (X86_TUNE_LCP_STALL, \"lcp_stall\")\n+DEF_TUNE (X86_TUNE_USE_HIMODE_FIOP, \"use_himode_fiop\")\n+DEF_TUNE (X86_TUNE_USE_SIMODE_FIOP, \"use_simode_fiop\")\n+DEF_TUNE (X86_TUNE_USE_MOV0, \"use_mov0\")\n+DEF_TUNE (X86_TUNE_USE_CLTD, \"use_cltd\")\n+DEF_TUNE (X86_TUNE_USE_XCHGB, \"use_xchgb\")\n+DEF_TUNE (X86_TUNE_SPLIT_LONG_MOVES, \"split_long_moves\")\n+DEF_TUNE (X86_TUNE_READ_MODIFY_WRITE, \"read_modify_write\")\n+DEF_TUNE (X86_TUNE_READ_MODIFY, \"read_modify\")\n+DEF_TUNE (X86_TUNE_PROMOTE_QIMODE, \"promote_qimode\")\n+DEF_TUNE (X86_TUNE_FAST_PREFIX, \"fast_prefix\")\n+DEF_TUNE (X86_TUNE_SINGLE_STRINGOP, \"single_stringop\")\n+DEF_TUNE (X86_TUNE_QIMODE_MATH, \"qimode_math\")\n+DEF_TUNE (X86_TUNE_HIMODE_MATH, \"himode_math\")\n+DEF_TUNE (X86_TUNE_PROMOTE_QI_REGS, \"promote_qi_regs\")\n+DEF_TUNE (X86_TUNE_PROMOTE_HI_REGS, \"promote_hi_regs\")\n+DEF_TUNE (X86_TUNE_SINGLE_POP, \"single_pop\")\n+DEF_TUNE (X86_TUNE_DOUBLE_POP, \"double_pop\")\n+DEF_TUNE (X86_TUNE_SINGLE_PUSH, \"single_push\")\n+DEF_TUNE (X86_TUNE_DOUBLE_PUSH, \"double_push\")\n+DEF_TUNE (X86_TUNE_INTEGER_DFMODE_MOVES, \"integer_dfmode_moves\")\n+DEF_TUNE (X86_TUNE_PARTIAL_REG_DEPENDENCY, \"partial_reg_dependency\")\n+DEF_TUNE (X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY, \"sse_partial_reg_dependency\")\n+DEF_TUNE (X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL, \"sse_unaligned_load_optimal\")\n+DEF_TUNE (X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL, \"sse_unaligned_store_optimal\")\n+DEF_TUNE (X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL, \"sse_packed_single_insn_optimal\")\n+DEF_TUNE (X86_TUNE_SSE_SPLIT_REGS, \"sse_split_regs\")\n+DEF_TUNE (X86_TUNE_SSE_TYPELESS_STORES, \"sse_typeless_stores\")\n+DEF_TUNE (X86_TUNE_SSE_LOAD0_BY_PXOR, \"sse_load0_by_pxor\")\n+DEF_TUNE (X86_TUNE_MEMORY_MISMATCH_STALL, \"memory_mismatch_stall\")\n+DEF_TUNE (X86_TUNE_PROLOGUE_USING_MOVE, \"prologue_using_move\")\n+DEF_TUNE (X86_TUNE_EPILOGUE_USING_MOVE, \"epilogue_using_move\")\n+DEF_TUNE (X86_TUNE_SHIFT1, \"shift1\")\n+DEF_TUNE (X86_TUNE_USE_FFREEP, \"use_ffreep\")\n+DEF_TUNE (X86_TUNE_INTER_UNIT_MOVES_TO_VEC, \"inter_unit_moves_to_vec\")\n+DEF_TUNE (X86_TUNE_INTER_UNIT_MOVES_FROM_VEC, \"inter_unit_moves_from_vec\")\n+DEF_TUNE (X86_TUNE_INTER_UNIT_CONVERSIONS, \"inter_unit_conversions\")\n+DEF_TUNE (X86_TUNE_FOUR_JUMP_LIMIT, \"four_jump_limit\")\n+DEF_TUNE (X86_TUNE_SCHEDULE, \"schedule\")\n+DEF_TUNE (X86_TUNE_USE_BT, \"use_bt\")\n+DEF_TUNE (X86_TUNE_USE_INCDEC, \"use_incdec\")\n+DEF_TUNE (X86_TUNE_PAD_RETURNS, \"pad_returns\")\n+DEF_TUNE (X86_TUNE_PAD_SHORT_FUNCTION, \"pad_short_function\")\n+DEF_TUNE (X86_TUNE_EXT_80387_CONSTANTS, \"ext_80387_constants\")\n+DEF_TUNE (X86_TUNE_AVOID_VECTOR_DECODE, \"avoid_vector_decode\")\n+DEF_TUNE (X86_TUNE_PROMOTE_HIMODE_IMUL, \"promote_himode_imul\")\n+DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM32_MEM, \"slow_imul_imm32_mem\")\n+DEF_TUNE (X86_TUNE_SLOW_IMUL_IMM8, \"slow_imul_imm8\")\n+DEF_TUNE (X86_TUNE_MOVE_M1_VIA_OR, \"move_m1_via_or\")\n+DEF_TUNE (X86_TUNE_NOT_UNPAIRABLE, \"not_unpairable\")\n+DEF_TUNE (X86_TUNE_NOT_VECTORMODE, \"not_vectormode\")\n+DEF_TUNE (X86_TUNE_USE_VECTOR_FP_CONVERTS, \"use_vector_fp_converts\")\n+DEF_TUNE (X86_TUNE_USE_VECTOR_CONVERTS, \"use_vector_converts\")\n+DEF_TUNE (X86_TUNE_FUSE_CMP_AND_BRANCH, \"fuse_cmp_and_branch\")\n+DEF_TUNE (X86_TUNE_OPT_AGU, \"opt_agu\")\n+DEF_TUNE (X86_TUNE_VECTORIZE_DOUBLE, \"vectorize_double\")\n+DEF_TUNE (X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL, \"software_prefetching_beneficial\")\n+DEF_TUNE (X86_TUNE_AVX128_OPTIMAL, \"avx128_optimal\")\n+DEF_TUNE (X86_TUNE_REASSOC_INT_TO_PARALLEL, \"reassoc_int_to_parallel\")\n+DEF_TUNE (X86_TUNE_REASSOC_FP_TO_PARALLEL, \"reassoc_fp_to_parallel\")\n+DEF_TUNE (X86_TUNE_GENERAL_REGS_SSE_SPILL, \"general_regs_sse_spill\")\n+DEF_TUNE (X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE, \"avoid_mem_opnd_for_cmove\")\n+DEF_TUNE (X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS, \"split_mem_opnd_for_fp_converts\")"}]}