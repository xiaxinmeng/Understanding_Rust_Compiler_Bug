{"sha": "94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "node_id": "C_kwDOANBUbNoAKDk0Y2JhYTI5YThhZmU2ZWExZGZlNWFiMDRkYWQwZDg3YTA1Y2U4OWU", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-20T19:46:03Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-07T10:11:10Z"}, "message": "Add AltPattern HIR node\n\nExample:\n\tmatch x {\n\t    0 | 1 => true,\n\t    _ => false\n\t}\n\ngcc/rust/ChangeLog:\n\n\t* backend/rust-compile-fnparam.h:\n\t(CompileFnParam::visit): Add AltPattern visitor.\n\t* backend/rust-compile-pattern.h:\n\t(CompilePatternCaseLabelExpr::visit): Add AltPattern visitor.\n\t(CompilePatternBindings::visit): Add AltPattern visitor.\n\t(CompilePatternLet::visit): Add AltPattern visitor.\n\t* backend/rust-compile-resolve-path.h:\n\t(ResolvePathRef::visit): Add AltPattern visitor.\n\t* backend/rust-compile-var-decl.h:\n\t(CompileVarDecl::visit): Add AltPattern visitor.\n\t* checks/errors/rust-const-checker.cc\n\t(ConstChecker::visit): Add AltPattern visitor.\n\t* checks/errors/rust-const-checker.h:\n\t(ConstChecker::visit): Add AltPattern visitor.\n\t* checks/errors/rust-unsafe-checker.cc\n\t(UnsafeChecker::visit): Add AltPattern visitor.\n\t* checks/errors/rust-unsafe-checker.h:\n\t(UnsafeChecker::visit): Add AltPattern visitor.\n\t* hir/rust-hir-dump.cc\n\t(Dump::visit): Add AltPattern visitor.\n\t* hir/rust-hir-dump.h:\n\t(Dump::visit): Add AltPattern visitor.\n\t* hir/tree/rust-hir-full-decls.h\n\t(class AltPattern): Add forward declaration.\n\t* hir/tree/rust-hir-pattern.h\n\t(class AltPattern): New class.\n\t* hir/tree/rust-hir-visitor.h:\n\t(HIRFullVisitor::visit): Add AltPattern visitor.\n\t(HIRFullVisitorBase::visit): Add AltPattern visitor.\n\t(HIRPatternVisitor::visit): Add AltPattern visitor.\n\t* hir/tree/rust-hir.h:\n\t(Pattern::PatternType::ALT): New enumerator.\n\t* typecheck/rust-hir-type-check-pattern.cc\n\t(TypeCheckPattern::visit): Add AltPattern visitor.\n\t* typecheck/rust-hir-type-check-pattern.h:\n\t(TypeCheckPattern::visit): Add AltPattern visitor.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "b2799804242e885f2774598da1f35829f5c2ce4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2799804242e885f2774598da1f35829f5c2ce4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e926a68941cda00086c3ed29523de0c0980b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6e926a68941cda00086c3ed29523de0c0980b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6e926a68941cda00086c3ed29523de0c0980b9f"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "c5b08e3a0190549aba9431dd125758186d52f64c", "filename": "gcc/rust/backend/rust-compile-fnparam.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-fnparam.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -39,6 +39,7 @@ class CompileFnParam : private HIRCompileBase, protected HIR::HIRPatternVisitor\n   void visit (HIR::TupleStructPattern &) override;\n \n   // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::AltPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}"}, {"sha": "93faeeae8d1167db1adb558ce80ce6f3de285986", "filename": "gcc/rust/backend/rust-compile-pattern.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-pattern.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -39,6 +39,13 @@ class CompilePatternCaseLabelExpr : public HIRCompileBase,\n   void visit (HIR::WildcardPattern &pattern) override;\n   void visit (HIR::RangePattern &pattern) override;\n \n+  // unsupported\n+  void visit (HIR::AltPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"alternate pattern case labels not supported\");\n+  }\n+\n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::IdentifierPattern &) override {}\n   void visit (HIR::LiteralPattern &) override;\n@@ -70,6 +77,13 @@ class CompilePatternBindings : public HIRCompileBase,\n   void visit (HIR::StructPattern &pattern) override;\n   void visit (HIR::TupleStructPattern &pattern) override;\n \n+  // unsupported\n+  void visit (HIR::AltPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"alternate pattern bindings not supported\");\n+  }\n+\n   // Empty visit for unused Pattern HIR nodes.\n   void visit (HIR::IdentifierPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n@@ -104,6 +118,12 @@ class CompilePatternLet : public HIRCompileBase, public HIR::HIRPatternVisitor\n   void visit (HIR::TuplePattern &) override;\n \n   // check for unimplemented Pattern HIR nodes.\n+  void visit (HIR::AltPattern &pattern) override\n+  {\n+    rust_sorry_at (pattern.get_locus (),\n+\t\t   \"alternate pattern let statements not supported\");\n+  }\n+\n   void visit (HIR::LiteralPattern &pattern) override\n   {\n     rust_sorry_at (pattern.get_locus (),"}, {"sha": "ad7a67fe91158af5144abf13d60b59431876fd20", "filename": "gcc/rust/backend/rust-compile-resolve-path.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-resolve-path.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -50,6 +50,7 @@ class ResolvePathRef : public HIRCompileBase, public HIR::HIRPatternVisitor\n   void visit (HIR::RangePattern &) override {}\n   void visit (HIR::ReferencePattern &) override {}\n   void visit (HIR::SlicePattern &) override {}\n+  void visit (HIR::AltPattern &) override {}\n   void visit (HIR::StructPattern &) override {}\n   void visit (HIR::TuplePattern &) override {}\n   void visit (HIR::TupleStructPattern &) override {}"}, {"sha": "bc838167b2b1433f594406d169572c243be6b886", "filename": "gcc/rust/backend/rust-compile-var-decl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-var-decl.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -54,6 +54,7 @@ class CompileVarDecl : public HIRCompileBase, public HIR::HIRPatternVisitor\n   }\n \n   // Empty visit for unused Pattern HIR nodes.\n+  void visit (HIR::AltPattern &) override {}\n   void visit (HIR::LiteralPattern &) override {}\n   void visit (HIR::PathInExpression &) override {}\n   void visit (HIR::QualifiedPathInExpression &) override {}"}, {"sha": "d0ca5cf1c8a0a37413df0edb0f1faba25852f5f5", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -838,6 +838,10 @@ void\n ConstChecker::visit (SlicePattern &)\n {}\n \n+void\n+ConstChecker::visit (AltPattern &)\n+{}\n+\n void\n ConstChecker::visit (EmptyStmt &)\n {}"}, {"sha": "2183992b7d374b5b9731cf6290594a26d0e270b8", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -187,6 +187,7 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (TuplePatternItemsRanged &tuple_items) override;\n   virtual void visit (TuplePattern &pattern) override;\n   virtual void visit (SlicePattern &pattern) override;\n+  virtual void visit (AltPattern &pattern) override;\n   virtual void visit (EmptyStmt &stmt) override;\n   virtual void visit (LetStmt &stmt) override;\n   virtual void visit (ExprStmtWithoutBlock &stmt) override;"}, {"sha": "be85c90c7ad05680ae1d9313f74cb867d86132b0", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -905,6 +905,10 @@ void\n UnsafeChecker::visit (SlicePattern &)\n {}\n \n+void\n+UnsafeChecker::visit (AltPattern &)\n+{}\n+\n void\n UnsafeChecker::visit (EmptyStmt &)\n {}"}, {"sha": "2e6719a5d6e5fcdabbdbd95c7eec2422b8373c24", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -169,6 +169,7 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (TuplePatternItemsRanged &tuple_items) override;\n   virtual void visit (TuplePattern &pattern) override;\n   virtual void visit (SlicePattern &pattern) override;\n+  virtual void visit (AltPattern &pattern) override;\n   virtual void visit (EmptyStmt &stmt) override;\n   virtual void visit (LetStmt &stmt) override;\n   virtual void visit (ExprStmtWithoutBlock &stmt) override;"}, {"sha": "9975a1e66b1b2f0d0d3a0424f7a4ac67b69b0362", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -580,6 +580,9 @@ Dump::visit (TuplePattern &)\n void\n Dump::visit (SlicePattern &)\n {}\n+void\n+Dump::visit (AltPattern &)\n+{}\n \n void\n Dump::visit (EmptyStmt &)"}, {"sha": "c1ef9849b46a05fee8d0122f60c26aabdd34e36f", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -164,6 +164,7 @@ class Dump : public HIRFullVisitor\n   virtual void visit (TuplePatternItemsRanged &) override;\n   virtual void visit (TuplePattern &) override;\n   virtual void visit (SlicePattern &) override;\n+  virtual void visit (AltPattern &) override;\n \n   virtual void visit (EmptyStmt &) override;\n   virtual void visit (LetStmt &) override;"}, {"sha": "d486d91818639893434be91c96254c5102f930aa", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -207,6 +207,7 @@ class TuplePatternItemsMultiple;\n class TuplePatternItemsRanged;\n class TuplePattern;\n class SlicePattern;\n+class AltPattern;\n \n // rust-type.h\n class TraitBound;"}, {"sha": "69faed1643e597f01a8ff7a8cb3efa9bacb70cc6", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -1300,6 +1300,73 @@ class SlicePattern : public Pattern\n   }\n };\n \n+// HIR node for alternative patterns\n+class AltPattern : public Pattern\n+{\n+  std::vector<std::unique_ptr<Pattern>> alts;\n+  Location locus;\n+  Analysis::NodeMapping mappings;\n+\n+public:\n+public:\n+  std::string as_string () const override;\n+\n+  AltPattern (Analysis::NodeMapping mappings,\n+\t      std::vector<std::unique_ptr<Pattern>> alts, Location locus)\n+    : alts (std::move (alts)), locus (locus), mappings (mappings)\n+  {}\n+\n+  // Copy constructor with vector clone\n+  AltPattern (AltPattern const &other)\n+    : locus (other.locus), mappings (other.mappings)\n+  {\n+    alts.reserve (other.alts.size ());\n+    for (const auto &e : other.alts)\n+      alts.push_back (e->clone_pattern ());\n+  }\n+\n+  // Overloaded assignment operator to vector clone\n+  AltPattern &operator= (AltPattern const &other)\n+  {\n+    locus = other.locus;\n+    mappings = other.mappings;\n+\n+    alts.clear ();\n+    alts.reserve (other.alts.size ());\n+    for (const auto &e : other.alts)\n+      alts.push_back (e->clone_pattern ());\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  AltPattern (AltPattern &&other) = default;\n+  AltPattern &operator= (AltPattern &&other) = default;\n+\n+  Location get_locus () const override { return locus; }\n+\n+  void accept_vis (HIRFullVisitor &vis) override;\n+  void accept_vis (HIRPatternVisitor &vis) override;\n+\n+  Analysis::NodeMapping get_pattern_mappings () const override final\n+  {\n+    return mappings;\n+  }\n+\n+  PatternType get_pattern_type () const override final\n+  {\n+    return PatternType::ALT;\n+  }\n+\n+protected:\n+  /* Use covariance to implement clone function as returning this object rather\n+   * than base */\n+  AltPattern *clone_pattern_impl () const override\n+  {\n+    return new AltPattern (*this);\n+  }\n+};\n+\n // Moved definition to rust-path.h\n class PathPattern;\n "}, {"sha": "fa6f5923f2fbf184d55b9d3343cd9f26cc2b5008", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -139,6 +139,7 @@ class HIRFullVisitor\n   virtual void visit (TuplePatternItemsRanged &tuple_items) = 0;\n   virtual void visit (TuplePattern &pattern) = 0;\n   virtual void visit (SlicePattern &pattern) = 0;\n+  virtual void visit (AltPattern &pattern) = 0;\n   virtual void visit (EmptyStmt &stmt) = 0;\n   virtual void visit (LetStmt &stmt) = 0;\n   virtual void visit (ExprStmtWithoutBlock &stmt) = 0;\n@@ -290,6 +291,7 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (TuplePatternItemsRanged &) override {}\n   virtual void visit (TuplePattern &) override {}\n   virtual void visit (SlicePattern &) override {}\n+  virtual void visit (AltPattern &) override {}\n \n   virtual void visit (EmptyStmt &) override {}\n   virtual void visit (LetStmt &) override {}\n@@ -475,6 +477,7 @@ class HIRPatternVisitor\n   virtual void visit (RangePattern &) = 0;\n   virtual void visit (ReferencePattern &) = 0;\n   virtual void visit (SlicePattern &) = 0;\n+  virtual void visit (AltPattern &) = 0;\n   virtual void visit (StructPattern &) = 0;\n   virtual void visit (TuplePattern &) = 0;\n   virtual void visit (TupleStructPattern &) = 0;"}, {"sha": "6ed74428356465cb24511c2c42a3ad685b0b27b7", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -384,6 +384,7 @@ class Pattern : public Node\n     TUPLE,\n     GROUPED,\n     SLICE,\n+    ALT\n   };\n \n   BaseKind get_hir_kind () override final { return PATTERN; }"}, {"sha": "3dca07baf9cac2b8b111640052a2cd663759d1c2", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.cc?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -437,5 +437,12 @@ TypeCheckPattern::emit_pattern_size_error (const HIR::Pattern &pattern,\n \t\t got_field_count == 1 ? \"element\" : \"elements\");\n }\n \n+void\n+TypeCheckPattern::visit (HIR::AltPattern &pattern)\n+{\n+  rust_sorry_at (pattern.get_locus (),\n+\t\t \"type checking alternate patterns not supported\");\n+}\n+\n } // namespace Resolver\n } // namespace Rust"}, {"sha": "3b392b552d5d4120cf67197422671865d9e3045a", "filename": "gcc/rust/typecheck/rust-hir-type-check-pattern.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-pattern.h?ref=94cbaa29a8afe6ea1dfe5ab04dad0d87a05ce89e", "patch": "@@ -42,6 +42,7 @@ class TypeCheckPattern : public TypeCheckBase, public HIR::HIRPatternVisitor\n   void visit (HIR::QualifiedPathInExpression &pattern) override;\n   void visit (HIR::ReferencePattern &pattern) override;\n   void visit (HIR::SlicePattern &pattern) override;\n+  void visit (HIR::AltPattern &pattern) override;\n \n private:\n   TypeCheckPattern (TyTy::BaseType *parent);"}]}