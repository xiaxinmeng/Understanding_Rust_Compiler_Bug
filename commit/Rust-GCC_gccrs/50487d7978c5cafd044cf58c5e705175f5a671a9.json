{"sha": "50487d7978c5cafd044cf58c5e705175f5a671a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA0ODdkNzk3OGM1Y2FmZDA0NGNmNThjNWU3MDUxNzVmNWE2NzFhOQ==", "commit": {"author": {"name": "Evandro Menezes", "email": "e.menezes@samsung.com", "date": "2015-11-12T14:46:52Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2015-11-12T14:46:52Z"}, "message": "[AArch64] Add extra tuning parameters for target processors\n\ngcc/\n\n\t* config/aarch64/aarch64-protos.h (tune_params): Add new members\n\t\"max_case_values\" and \"cache_line_size\".\n\t* config/aarch64/aarch64.c (aarch64_case_values_threshold): New\n\tfunction.\n\t(aarch64_override_options_internal): Tune heuristics based on new\n\tmembers in \"tune_params\".\n\t(TARGET_CASE_VALUES_THRESHOLD): Define macro.\n\nFrom-SVN: r230261", "tree": {"sha": "4d98a5304673d857a961b285eb22515ee403fbe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d98a5304673d857a961b285eb22515ee403fbe5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50487d7978c5cafd044cf58c5e705175f5a671a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50487d7978c5cafd044cf58c5e705175f5a671a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50487d7978c5cafd044cf58c5e705175f5a671a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50487d7978c5cafd044cf58c5e705175f5a671a9/comments", "author": null, "committer": null, "parents": [{"sha": "31271e9129c949aeb4628021a34191d696d75e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31271e9129c949aeb4628021a34191d696d75e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31271e9129c949aeb4628021a34191d696d75e34"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "27a1e9ec267f2c9d22459972d2f7d3f29b2a560d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50487d7978c5cafd044cf58c5e705175f5a671a9", "patch": "@@ -1,3 +1,13 @@\n+2015-11-12  Evandro Menezes  <e.menezes@samsung.com>\n+\n+\t* config/aarch64/aarch64-protos.h (tune_params): Add new members\n+\t\"max_case_values\" and \"cache_line_size\".\n+\t* config/aarch64/aarch64.c (aarch64_case_values_threshold): New\n+\tfunction.\n+\t(aarch64_override_options_internal): Tune heuristics based on new\n+\tmembers in \"tune_params\".\n+\t(TARGET_CASE_VALUES_THRESHOLD): Define macro.\n+\n 2015-11-12  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68306"}, {"sha": "9000d67a9d1827b986dd355b4d0df047df35a81e", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=50487d7978c5cafd044cf58c5e705175f5a671a9", "patch": "@@ -195,6 +195,10 @@ struct tune_params\n   int vec_reassoc_width;\n   int min_div_recip_mul_sf;\n   int min_div_recip_mul_df;\n+  /* Value for aarch64_case_values_threshold; or 0 for the default.  */\n+  unsigned int max_case_values;\n+  /* Value for PARAM_L1_CACHE_LINE_SIZE; or 0 to use the default.  */\n+  unsigned int cache_line_size;\n \n /* An enum specifying how to take into account CPU autoprefetch capabilities\n    during instruction scheduling:"}, {"sha": "5ec7f08ca96bbe973d2d28605a20e3b376cefba7", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50487d7978c5cafd044cf58c5e705175f5a671a9/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=50487d7978c5cafd044cf58c5e705175f5a671a9", "patch": "@@ -356,6 +356,8 @@ static const struct tune_params generic_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n@@ -379,6 +381,8 @@ static const struct tune_params cortexa53_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n@@ -402,6 +406,8 @@ static const struct tune_params cortexa57_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_RENAME_FMA_REGS\n    | AARCH64_EXTRA_TUNE_RECIP_SQRT)\t/* tune_flags.  */\n@@ -426,6 +432,8 @@ static const struct tune_params cortexa72_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n@@ -448,6 +456,8 @@ static const struct tune_params thunderx_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_NONE)\t/* tune_flags.  */\n };\n@@ -470,6 +480,8 @@ static const struct tune_params xgene1_tunings =\n   1,\t/* vec_reassoc_width.  */\n   2,\t/* min_div_recip_mul_sf.  */\n   2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  0,\t/* cache_line_size.  */\n   tune_params::AUTOPREFETCHER_OFF,\t/* autoprefetcher_model.  */\n   (AARCH64_EXTRA_TUNE_RECIP_SQRT)\t/* tune_flags.  */\n };\n@@ -3240,6 +3252,20 @@ aarch64_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return aarch64_tls_referenced_p (x);\n }\n \n+/* Implement TARGET_CASE_VALUES_THRESHOLD.  */\n+\n+static unsigned int\n+aarch64_case_values_threshold (void)\n+{\n+  /* Use the specified limit for the number of cases before using jump\n+     tables at higher optimization levels.  */\n+  if (optimize > 2\n+      && selected_cpu->tune->max_case_values != 0)\n+    return selected_cpu->tune->max_case_values;\n+  else\n+    return default_case_values_threshold ();\n+}\n+\n /* Return true if register REGNO is a valid index register.\n    STRICT_P is true if REG_OK_STRICT is in effect.  */\n \n@@ -7782,6 +7808,13 @@ aarch64_override_options_internal (struct gcc_options *opts)\n \t\t\t opts->x_param_values,\n \t\t\t global_options_set.x_param_values);\n \n+  /* Set the L1 cache line size.  */\n+  if (selected_cpu->tune->cache_line_size != 0)\n+    maybe_set_param_value (PARAM_L1_CACHE_LINE_SIZE,\n+\t\t\t   selected_cpu->tune->cache_line_size,\n+\t\t\t   opts->x_param_values,\n+\t\t\t   global_options_set.x_param_values);\n+\n   aarch64_override_options_after_change_1 (opts);\n }\n \n@@ -13526,6 +13559,9 @@ aarch64_promoted_type (const_tree t)\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM aarch64_cannot_force_const_mem\n \n+#undef TARGET_CASE_VALUES_THRESHOLD\n+#define TARGET_CASE_VALUES_THRESHOLD aarch64_case_values_threshold\n+\n #undef TARGET_CONDITIONAL_REGISTER_USAGE\n #define TARGET_CONDITIONAL_REGISTER_USAGE aarch64_conditional_register_usage\n "}]}