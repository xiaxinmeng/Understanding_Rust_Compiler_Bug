{"sha": "719938ae43b46f9f098c15f620cd388f6aadf55b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5OTM4YWU0M2I0NmY5ZjA5OGMxNWY2MjBjZDM4OGY2YWFkZjU1Yg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-13T10:27:03Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-04-13T10:27:03Z"}, "message": "i386.md (extendsidi2 splitter): Also check for DX_REG when generating cltd insn.\n\n\t* config/i386/i386.md (extendsidi2 splitter): Also check for DX_REG\n\twhen generating cltd insn.\n\n\t(*ashl<mode>3_1): Remove special handling for register operand 2.\n\t(*ashlsi3_1_zext): Ditto.\n\t(*ashlhi3_1): Ditto.\n\t(*ashlhi3_1_lea): Ditto.\n\t(*ashlqi3_1): Ditto.\n\t(*ashlqi3_1_lea): Ditto.\n\t(*<shiftrt_insn><mode>3_1): Ditto.\n\t(*<shiftrt_insn>si3_1_zext): Ditto.\n\t(*<shiftrt_insn>qi3_1_slp): Ditto.\n\t(*<rotate_insn><mode>3_1): Ditto.\n\t(*<rotate_insn>si3_1_zext): Ditto.\n\t(*<rotate_insn>qi3_1_slp): Ditto.\n\nFrom-SVN: r158261", "tree": {"sha": "696629a3583f4a3bf13ac53211865b1bb354b9d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696629a3583f4a3bf13ac53211865b1bb354b9d4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/719938ae43b46f9f098c15f620cd388f6aadf55b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719938ae43b46f9f098c15f620cd388f6aadf55b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/719938ae43b46f9f098c15f620cd388f6aadf55b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/719938ae43b46f9f098c15f620cd388f6aadf55b/comments", "author": null, "committer": null, "parents": [{"sha": "3e8542ca16c5d7b274ad27002e16d572dd512b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e8542ca16c5d7b274ad27002e16d572dd512b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e8542ca16c5d7b274ad27002e16d572dd512b04"}], "stats": {"total": 124, "additions": 55, "deletions": 69}, "files": [{"sha": "8918dec2290c716e71f95c6039d2d1dde23cee70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719938ae43b46f9f098c15f620cd388f6aadf55b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719938ae43b46f9f098c15f620cd388f6aadf55b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=719938ae43b46f9f098c15f620cd388f6aadf55b", "patch": "@@ -1,3 +1,21 @@\n+2010-04-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (extendsidi2 splitter): Also check for DX_REG\n+\twhen generating cltd insn.\n+\n+\t(*ashl<mode>3_1): Remove special handling for register operand 2.\n+\t(*ashlsi3_1_zext): Ditto.\n+\t(*ashlhi3_1): Ditto.\n+\t(*ashlhi3_1_lea): Ditto.\n+\t(*ashlqi3_1): Ditto.\n+\t(*ashlqi3_1_lea): Ditto.\n+\t(*<shiftrt_insn><mode>3_1): Ditto.\n+\t(*<shiftrt_insn>si3_1_zext): Ditto.\n+\t(*<shiftrt_insn>qi3_1_slp): Ditto.\n+\t(*<rotate_insn><mode>3_1): Ditto.\n+\t(*<rotate_insn>si3_1_zext): Ditto.\n+\t(*<rotate_insn>qi3_1_slp): Ditto.\n+\n 2010-04-13  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c (callused_id): Remove.\n@@ -126,8 +144,7 @@\n \tplugin name.\n \t(default_plugin_dir_name): Added new function.\n \n-\t* common.opt (iplugindir): New option to set the plugin\n-\tdirectory.\n+\t* common.opt (iplugindir): New option to set the plugin directory.\n \n 2010-04-12  Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "b8799960921cc86cff931a72962c0ae54d658161", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 36, "deletions": 67, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/719938ae43b46f9f098c15f620cd388f6aadf55b/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/719938ae43b46f9f098c15f620cd388f6aadf55b/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=719938ae43b46f9f098c15f620cd388f6aadf55b", "patch": "@@ -4228,7 +4228,8 @@\n \n   /* Generate a cltd if possible and doing so it profitable.  */\n   if ((optimize_function_for_size_p (cfun) || TARGET_USE_CLTD)\n-      && true_regnum (operands[3]) == AX_REG)\n+      && true_regnum (operands[3]) == AX_REG\n+      && true_regnum (operands[4]) == DX_REG)\n     {\n       emit_insn (gen_ashrsi3_cvt (operands[4], operands[3], GEN_INT (31)));\n       DONE;\n@@ -9702,19 +9703,17 @@\n {\n   switch (get_attr_type (insn))\n     {\n+    case TYPE_LEA:\n+      return \"#\";\n+\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n       return \"add{<imodesuffix>}\\t%0, %0\";\n \n-    case TYPE_LEA:\n-      return \"#\";\n-\n     default:\n-      if (REG_P (operands[2]))\n-\treturn \"sal{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{<imodesuffix>}\\t%0\";\n       else\n \treturn \"sal{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n@@ -9751,18 +9750,16 @@\n {\n   switch (get_attr_type (insn))\n     {\n+    case TYPE_LEA:\n+      return \"#\";\n+\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       return \"add{l}\\t%k0, %k0\";\n \n-    case TYPE_LEA:\n-      return \"#\";\n-\n     default:\n-      if (REG_P (operands[2]))\n-\treturn \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{l}\\t%k0\";\n       else\n \treturn \"sal{l}\\t{%2, %k0|%k0, %2}\";\n@@ -9803,10 +9800,8 @@\n       return \"add{w}\\t%0, %0\";\n \n     default:\n-      if (REG_P (operands[2]))\n-\treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -9843,15 +9838,14 @@\n     {\n     case TYPE_LEA:\n       return \"#\";\n+\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       return \"add{w}\\t%0, %0\";\n \n     default:\n-      if (REG_P (operands[2]))\n-\treturn \"sal{w}\\t{%b2, %0|%0, %b2}\";\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \treturn \"sal{w}\\t%0\";\n       else\n \treturn \"sal{w}\\t{%2, %0|%0, %2}\";\n@@ -9896,18 +9890,11 @@\n         return \"add{b}\\t%0, %0\";\n \n     default:\n-      if (REG_P (operands[2]))\n-\t{\n-\t  if (get_attr_mode (insn) == MODE_SI)\n-\t    return \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n-\t  else\n-\t    return \"sal{b}\\t{%b2, %0|%0, %b2}\";\n-\t}\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n-\t    return \"sal{l}\\t%0\";\n+\t    return \"sal{l}\\t%k0\";\n \t  else\n \t    return \"sal{b}\\t%0\";\n \t}\n@@ -9952,6 +9939,7 @@\n     {\n     case TYPE_LEA:\n       return \"#\";\n+\n     case TYPE_ALU:\n       gcc_assert (operands[2] == const1_rtx);\n       if (REG_P (operands[1]) && !ANY_QI_REG_P (operands[1]))\n@@ -9960,18 +9948,11 @@\n         return \"add{b}\\t%0, %0\";\n \n     default:\n-      if (REG_P (operands[2]))\n-\t{\n-\t  if (get_attr_mode (insn) == MODE_SI)\n-\t    return \"sal{l}\\t{%b2, %k0|%k0, %b2}\";\n-\t  else\n-\t    return \"sal{b}\\t{%b2, %0|%0, %b2}\";\n-\t}\n-      else if (operands[2] == const1_rtx\n-\t       && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+      if (operands[2] == const1_rtx\n+\t  && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n \t{\n \t  if (get_attr_mode (insn) == MODE_SI)\n-\t    return \"sal{l}\\t%0\";\n+\t    return \"sal{l}\\t%k0\";\n \t  else\n \t    return \"sal{b}\\t%0\";\n \t}\n@@ -10384,10 +10365,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (REG_P (operands[2]))\n-    return \"<shiftrt>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-  else if (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<shiftrt>{<imodesuffix>}\\t%0\";\n   else\n     return \"<shiftrt>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n@@ -10410,10 +10389,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n {\n-  if (REG_P (operands[2]))\n-    return \"<shiftrt>{l}\\t{%b2, %k0|%k0, %b2}\";\n-  else if (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<shiftrt>{l}\\t%k0\";\n   else\n     return \"<shiftrt>{l}\\t{%2, %k0|%k0, %2}\";\n@@ -10438,10 +10415,8 @@\n     || (operands[1] == const1_rtx\n \t&& TARGET_SHIFT1))\"\n {\n-  if (REG_P (operands[1]))\n-    return \"<shiftrt>{b}\\t{%b1, %0|%0, %b1}\";\n-  else if (operands[1] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+  if (operands[1] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<shiftrt>{b}\\t%0\";\n   else\n     return \"<shiftrt>{b}\\t{%1, %0|%0, %1}\";\n@@ -10661,10 +10636,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n {\n-  if (REG_P (operands[2]))\n-    return \"<rotate>{<imodesuffix>}\\t{%b2, %0|%0, %b2}\";\n-  else if (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+  if (operands[2] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<rotate>{<imodesuffix>}\\t%0\";\n   else\n     return \"<rotate>{<imodesuffix>}\\t{%2, %0|%0, %2}\";\n@@ -10687,10 +10660,8 @@\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && ix86_binary_operator_ok (<CODE>, SImode, operands)\"\n {\n-  if (REG_P (operands[2]))\n-    return \"<rotate>{l}\\t{%b2, %k0|%k0, %b2}\";\n-  else if (operands[2] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+    if (operands[2] == const1_rtx\n+\t&& (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<rotate>{l}\\t%k0\";\n   else\n     return \"<rotate>{l}\\t{%2, %k0|%k0, %2}\";\n@@ -10715,10 +10686,8 @@\n     || (operands[1] == const1_rtx\n \t&& TARGET_SHIFT1))\"\n {\n-  if (REG_P (operands[1]))\n-    return \"<rotate>{b}\\t{%b1, %0|%0, %b1}\";\n-  else if (operands[1] == const1_rtx\n-\t   && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n+  if (operands[1] == const1_rtx\n+      && (TARGET_SHIFT1 || optimize_function_for_size_p (cfun)))\n     return \"<rotate>{b}\\t%0\";\n   else\n     return \"<rotate>{b}\\t{%1, %0|%0, %1}\";"}]}