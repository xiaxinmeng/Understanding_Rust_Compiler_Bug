{"sha": "080b4cf6bd8622c7dff6299f9103184d518ca93f", "node_id": "C_kwDOANBUbNoAKDA4MGI0Y2Y2YmQ4NjIyYzdkZmY2Mjk5ZjkxMDMxODRkNTE4Y2E5M2Y", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-11T17:01:54Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-15T00:16:35Z"}, "message": "c++: Disable -Wdangling-reference when initing T&\n\nNon-const lvalue references can't bind to a temporary, so the\nwarning should not be emitted if we're initializing something of that\ntype.  I'm not disabling the warning when the function itself returns\na non-const lvalue reference, that would regress at least\n\n  const int &r = std::any_cast<int&>(std::any());\n\nin Wdangling-reference2.C where the any_cast returns an int&.\n\nUnfortunately, this patch means we'll stop diagnosing\n\n  int& fn(int&& x) { return static_cast<int&>(x); }\n  void test ()\n  {\n    int &r = fn(4);\n  }\n\nwhere there's a genuine dangling reference.  OTOH, the patch\nshould suppress false positives with iterators, like:\n\n  auto &candidate = *candidates.begin ();\n\nand arguably that's more important than detecting some relatively\nobscure cases.  It's probably not worth it making the warning more\ncomplicated by, for instance, not warning when a fn returns 'int&'\nbut takes 'const int&' (because then it can't return its argument).\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (maybe_warn_dangling_reference): Don't warn when initializing\n\ta non-const lvalue reference.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp23/elision4.C: Remove dg-warning.\n\t* g++.dg/warn/Wdangling-reference1.C: Turn dg-warning into dg-bogus.\n\t* g++.dg/warn/Wdangling-reference7.C: New test.", "tree": {"sha": "84aeaeee7582532811422d570f108301f2631db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84aeaeee7582532811422d570f108301f2631db4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/080b4cf6bd8622c7dff6299f9103184d518ca93f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080b4cf6bd8622c7dff6299f9103184d518ca93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/080b4cf6bd8622c7dff6299f9103184d518ca93f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/080b4cf6bd8622c7dff6299f9103184d518ca93f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa37a91cab19855ae6b0c6660eff8511b7a81436", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa37a91cab19855ae6b0c6660eff8511b7a81436", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa37a91cab19855ae6b0c6660eff8511b7a81436"}], "stats": {"total": 34, "additions": 28, "deletions": 6}, "files": [{"sha": "ef618d5c485a029a3b392544f3e798b0c7522260", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=080b4cf6bd8622c7dff6299f9103184d518ca93f", "patch": "@@ -13679,8 +13679,14 @@ maybe_warn_dangling_reference (const_tree decl, tree init)\n {\n   if (!warn_dangling_reference)\n     return;\n-  if (!(TYPE_REF_OBJ_P (TREE_TYPE (decl))\n-\t|| std_pair_ref_ref_p (TREE_TYPE (decl))))\n+  tree type = TREE_TYPE (decl);\n+  /* Only warn if what we're initializing has type T&& or const T&, or\n+     std::pair<const T&, const T&>.  (A non-const lvalue reference can't\n+     bind to a temporary.)  */\n+  if (!((TYPE_REF_OBJ_P (type)\n+\t && (TYPE_REF_IS_RVALUE (type)\n+\t     || CP_TYPE_CONST_P (TREE_TYPE (type))))\n+\t|| std_pair_ref_ref_p (type)))\n     return;\n   /* Don't suppress the diagnostic just because the call comes from\n      a system header.  If the DECL is not in a system header, or if"}, {"sha": "77dcffcdaad323330f3df7fdefac1bf368d98a1e", "filename": "gcc/testsuite/g++.dg/cpp23/elision4.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Felision4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Felision4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Felision4.C?ref=080b4cf6bd8622c7dff6299f9103184d518ca93f", "patch": "@@ -34,6 +34,6 @@ T& temporary2(T&& x) { return static_cast<T&>(x); }\n void\n test ()\n {\n-  int& r1 = temporary1 (42); // { dg-warning \"dangling reference\" }\n-  int& r2 = temporary2 (42); // { dg-warning \"dangling reference\" }\n+  int& r1 = temporary1 (42);\n+  int& r2 = temporary2 (42);\n }"}, {"sha": "1718c28165e9878fe3535fad782d5fe02b32f4db", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-reference1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference1.C?ref=080b4cf6bd8622c7dff6299f9103184d518ca93f", "patch": "@@ -139,6 +139,6 @@ struct Y {\n // x1 = Y::operator int&& (&TARGET_EXPR <D.2410, {}>)\n int&& x1 = Y(); // { dg-warning \"dangling reference\" }\n int&& x2 = Y{}; // { dg-warning \"dangling reference\" }\n-int& x3 = Y(); // { dg-warning \"dangling reference\" }\n-int& x4 = Y{}; // { dg-warning \"dangling reference\" }\n+int& x3 = Y(); // { dg-bogus \"dangling reference\" }\n+int& x4 = Y{}; // { dg-bogus \"dangling reference\" }\n const int& t1 = Y().foo(10); // { dg-warning \"dangling reference\" }"}, {"sha": "4b0de2d8670154b7aeb511c242bad7674eeadd46", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-reference7.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/080b4cf6bd8622c7dff6299f9103184d518ca93f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference7.C?ref=080b4cf6bd8622c7dff6299f9103184d518ca93f", "patch": "@@ -0,0 +1,16 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wdangling-reference\" }\n+\n+int& ref(const int&);\n+int&& rref(const int&);\n+\n+void\n+g ()\n+{\n+  const int& r1 = ref (1); // { dg-warning \"dangling reference\" }\n+  int& r2 = ref (2); // { dg-bogus \"dangling reference\" }\n+  auto& r3 = ref (3); // { dg-bogus \"dangling reference\" }\n+  int&& r4 = rref (4); // { dg-warning \"dangling reference\" }\n+  auto&& r5 = rref (5); // { dg-warning \"dangling reference\" }\n+  const int&& r6 = rref (6); // { dg-warning \"dangling reference\" }\n+}"}]}