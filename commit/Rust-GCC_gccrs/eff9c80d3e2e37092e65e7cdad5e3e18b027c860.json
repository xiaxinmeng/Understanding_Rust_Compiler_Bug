{"sha": "eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmOWM4MGQzZTJlMzcwOTJlNjVlN2NkYWQ1ZTNlMThiMDI3Yzg2MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-07-15T17:22:26Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-07-15T17:22:26Z"}, "message": "fold-const.c (extract_muldiv): Don't optimize past an unsigned cast around an expression.\n\n        * fold-const.c (extract_muldiv): Don't optimize past an unsigned\n        cast around an expression.  Tidy other unsigned tests.\n\nFrom-SVN: r35049", "tree": {"sha": "e5579d53bbfd68cc1b545093e50c591a58f7e5da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5579d53bbfd68cc1b545093e50c591a58f7e5da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff9c80d3e2e37092e65e7cdad5e3e18b027c860/comments", "author": null, "committer": null, "parents": [{"sha": "b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b27ca4d10ba6ce5966aa6e4b01966bcdc43a3181"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "77a6af1b6452b1fd54e14d134bdac817e5166a59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff9c80d3e2e37092e65e7cdad5e3e18b027c860/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff9c80d3e2e37092e65e7cdad5e3e18b027c860/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "patch": "@@ -1,3 +1,8 @@\n+2000-07-15  Richard Henderson  <rth@cygnus.com>\n+\n+\t* fold-const.c (extract_muldiv): Don't optimize past an unsigned\n+\tcast around an expression.  Tidy other unsigned tests.\n+\n 2000-07-15  Gabriel Dos Reis  <gdr@codesourcery.com>\n \n \t* diagnostic.c (doing_line_wrapping, line_wrapper_printf, notice,"}, {"sha": "c636bdc73ee36e0a411213b51783356d6cd9be8f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff9c80d3e2e37092e65e7cdad5e3e18b027c860/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff9c80d3e2e37092e65e7cdad5e3e18b027c860/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=eff9c80d3e2e37092e65e7cdad5e3e18b027c860", "patch": "@@ -4397,6 +4397,18 @@ extract_muldiv (t, c, code, wide_type)\n       break;\n \n     case CONVERT_EXPR:  case NON_LVALUE_EXPR:  case NOP_EXPR:\n+      /* If op0 is an expression, and is unsigned, and the type is\n+\t smaller than ctype, then we cannot widen the expression.  */\n+      if ((TREE_CODE_CLASS (TREE_CODE (op0)) == '<'\n+\t   || TREE_CODE_CLASS (TREE_CODE (op0)) == '1'\n+\t   || TREE_CODE_CLASS (TREE_CODE (op0)) == '2'\n+\t   || TREE_CODE_CLASS (TREE_CODE (op0)) == 'e')\n+\t  && TREE_UNSIGNED (TREE_TYPE (op0))\n+\t  && ! TYPE_IS_SIZETYPE (TREE_TYPE (op0))\n+\t  && (GET_MODE_SIZE (TYPE_MODE (ctype))\n+              > GET_MODE_SIZE (TYPE_MODE (TREE_TYPE (op0)))))\n+\tbreak;\n+\n       /* Pass the constant down and see if we can make a simplification.  If\n \t we can, replace this expression with the inner simplification for\n \t possible later conversion to our or some other type.  */\n@@ -4413,7 +4425,7 @@ extract_muldiv (t, c, code, wide_type)\n     case MIN_EXPR:  case MAX_EXPR:\n       /* If widening the type changes the signedness, then we can't perform\n \t this optimization as that changes the result.  */\n-      if (ctype != type && TREE_UNSIGNED (ctype) != TREE_UNSIGNED (type))\n+      if (TREE_UNSIGNED (ctype) != TREE_UNSIGNED (type))\n \tbreak;\n \n       /* MIN (a, b) / 5 -> MIN (a / 5, b / 5)  */\n@@ -4581,8 +4593,7 @@ extract_muldiv (t, c, code, wide_type)\n \t this since it will change the result if the original computation\n \t overflowed.  */\n       if ((! TREE_UNSIGNED (ctype)\n-\t   || (TREE_CODE (ctype) == INTEGER_TYPE\n-\t       && TYPE_IS_SIZETYPE (ctype)))\n+\t   || TYPE_IS_SIZETYPE (ctype))\n \t  && ((code == MULT_EXPR && tcode == EXACT_DIV_EXPR)\n \t      || (tcode == MULT_EXPR\n \t\t  && code != TRUNC_MOD_EXPR && code != CEIL_MOD_EXPR"}]}