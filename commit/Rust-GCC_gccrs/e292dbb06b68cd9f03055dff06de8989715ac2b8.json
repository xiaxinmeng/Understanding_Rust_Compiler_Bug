{"sha": "e292dbb06b68cd9f03055dff06de8989715ac2b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI5MmRiYjA2YjY4Y2Q5ZjAzMDU1ZGZmMDZkZTg5ODk3MTVhYzJiOA==", "commit": {"author": {"name": "Waldek Hebisch", "email": "hebisch@math.uni.wroc.pl", "date": "2003-12-05T11:11:08Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2003-12-05T11:11:08Z"}, "message": "stmt.c (expand_nl_goto_receiver): Copy hard register clobbers and ASM_INPUT barrier from...\n\n        * stmt.c (expand_nl_goto_receiver): Copy hard register clobbers\n        and ASM_INPUT barrier from expand_builtin_setjmp_receiver.\n\t* gcc.c-torture/execute/nestfunc-5.c: New.\n\nFrom-SVN: r74326", "tree": {"sha": "f2a8d9cb58beed3a710c192bcb0534e8ac50f597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2a8d9cb58beed3a710c192bcb0534e8ac50f597"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e292dbb06b68cd9f03055dff06de8989715ac2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292dbb06b68cd9f03055dff06de8989715ac2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e292dbb06b68cd9f03055dff06de8989715ac2b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e292dbb06b68cd9f03055dff06de8989715ac2b8/comments", "author": {"login": "hebisch", "id": 423725, "node_id": "MDQ6VXNlcjQyMzcyNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/423725?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hebisch", "html_url": "https://github.com/hebisch", "followers_url": "https://api.github.com/users/hebisch/followers", "following_url": "https://api.github.com/users/hebisch/following{/other_user}", "gists_url": "https://api.github.com/users/hebisch/gists{/gist_id}", "starred_url": "https://api.github.com/users/hebisch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hebisch/subscriptions", "organizations_url": "https://api.github.com/users/hebisch/orgs", "repos_url": "https://api.github.com/users/hebisch/repos", "events_url": "https://api.github.com/users/hebisch/events{/privacy}", "received_events_url": "https://api.github.com/users/hebisch/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "84f47d5f223ee48685a4c05fca7cdcdfbec895d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f47d5f223ee48685a4c05fca7cdcdfbec895d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f47d5f223ee48685a4c05fca7cdcdfbec895d7"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "1105644a9b76bac565e8aef882c1927a05ae6903", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e292dbb06b68cd9f03055dff06de8989715ac2b8", "patch": "@@ -1,3 +1,8 @@\n+2003-12-05  Waldek Hebisch <hebisch@math.uni.wroc.pl>\n+\n+\t* stmt.c (expand_nl_goto_receiver): Copy hard register clobbers\n+\tand ASM_INPUT barrier from expand_builtin_setjmp_receiver.\n+\n 2003-12-05  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* config/mips/mips.c (mips_expand_call): Don't allow laziy binding"}, {"sha": "bc52a6b096b2eb2d226c840f0dd40d9f3d553a57", "filename": "gcc/stmt.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=e292dbb06b68cd9f03055dff06de8989715ac2b8", "patch": "@@ -3558,6 +3558,14 @@ expand_nl_handler_label (rtx slot, rtx before_insn)\n static void\n expand_nl_goto_receiver (void)\n {\n+    /* Clobber the FP when we get here, so we have to make sure it's\n+     marked as used by this function.  */\n+  emit_insn (gen_rtx_USE (VOIDmode, hard_frame_pointer_rtx));\n+\n+  /* Mark the static chain as clobbered here so life information\n+     doesn't get messed up for it.  */\n+  emit_insn (gen_rtx_CLOBBER (VOIDmode, static_chain_rtx));\n+\n #ifdef HAVE_nonlocal_goto\n   if (! HAVE_nonlocal_goto)\n #endif\n@@ -3606,6 +3614,13 @@ expand_nl_goto_receiver (void)\n   if (HAVE_nonlocal_goto_receiver)\n     emit_insn (gen_nonlocal_goto_receiver ());\n #endif\n+\n+  /* @@@ This is a kludge.  Not all machine descriptions define a blockage\n+     insn, but we must not allow the code we just generated to be reordered\n+     by scheduling.  Specifically, the update of the frame pointer must\n+     happen immediately, not later.  So emit an ASM_INPUT to act as blockage\n+     insn.  */\n+  emit_insn (gen_rtx_ASM_INPUT (VOIDmode, \"\"));\n }\n \n /* Make handlers for nonlocal gotos taking place in the function calls in"}, {"sha": "88e74cc904cde80fa1f9795cdc3814f50f258488", "filename": "gcc/testsuite/gcc.c-torture/execute/nestfunc-5.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e292dbb06b68cd9f03055dff06de8989715ac2b8/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fnestfunc-5.c?ref=e292dbb06b68cd9f03055dff06de8989715ac2b8", "patch": "@@ -0,0 +1,36 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+#ifndef NO_TRAMPOLINES\n+static void recursive (int n, void (*proc) (void))\n+{\n+  __label__ l1;\n+\n+  void do_goto (void)\n+  {\n+    goto l1;\n+  }\n+\n+  if (n == 3)\n+      recursive (n - 1, do_goto);\n+  else if (n > 0)\n+    recursive (n - 1, proc);\n+  else\n+    (*proc) ();\n+  return;\n+\n+l1:\n+  if (n == 3)\n+    exit (0);\n+  else\n+    abort ();\n+}\n+\n+int main ()\n+{\n+  recursive (10, abort);\n+  abort ();\n+}\n+#else\n+int main () { return 0; }\n+#endif"}]}