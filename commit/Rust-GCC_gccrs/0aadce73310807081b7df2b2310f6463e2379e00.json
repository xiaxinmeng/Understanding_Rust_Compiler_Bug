{"sha": "0aadce73310807081b7df2b2310f6463e2379e00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGFhZGNlNzMzMTA4MDcwODFiN2RmMmIyMzEwZjY0NjNlMjM3OWUwMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2014-05-23T11:32:01Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2014-05-23T11:32:01Z"}, "message": "GF_OMP_FOR_SIMD: Flag for SIMD variants of OMP_FOR kinds.\n\n\tgcc/\n\t* gimple.h (enum gf_mask): Add and use GF_OMP_FOR_SIMD.\n\t* omp-low.c: Update accordingly.\n\nFrom-SVN: r210855", "tree": {"sha": "e2e024643b9068bb6399b4c525c4362608dee32e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2e024643b9068bb6399b4c525c4362608dee32e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0aadce73310807081b7df2b2310f6463e2379e00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aadce73310807081b7df2b2310f6463e2379e00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aadce73310807081b7df2b2310f6463e2379e00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aadce73310807081b7df2b2310f6463e2379e00/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb63c927ea35dbfb28fb4431de4b77f41f2b390e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb63c927ea35dbfb28fb4431de4b77f41f2b390e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb63c927ea35dbfb28fb4431de4b77f41f2b390e"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "c1b2416bc6db2f880f1741ab08abc4b9c38d4911", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0aadce73310807081b7df2b2310f6463e2379e00", "patch": "@@ -1,5 +1,8 @@\n 2014-05-23  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\t* gimple.h (enum gf_mask): Add and use GF_OMP_FOR_SIMD.\n+\t* omp-low.c: Update accordingly.\n+\n \t* gimple.h (enum gf_mask): Rewrite \"<< 0\" shift expressions used\n \tfor GF_OMP_FOR_KIND_MASK, GF_OMP_FOR_KIND_FOR,\n \tGF_OMP_FOR_KIND_DISTRIBUTE, GF_OMP_FOR_KIND_SIMD,"}, {"sha": "ceefbc0890f09fcddaedf48959d75ac7cead6a9d", "filename": "gcc/gimple.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=0aadce73310807081b7df2b2310f6463e2379e00", "patch": "@@ -94,8 +94,10 @@ enum gf_mask {\n     GF_OMP_FOR_KIND_MASK\t= (1 << 2) - 1,\n     GF_OMP_FOR_KIND_FOR\t\t= 0,\n     GF_OMP_FOR_KIND_DISTRIBUTE\t= 1,\n-    GF_OMP_FOR_KIND_SIMD\t= 2,\n-    GF_OMP_FOR_KIND_CILKSIMD\t= 3,\n+    /* Flag for SIMD variants of OMP_FOR kinds.  */\n+    GF_OMP_FOR_SIMD\t\t= 1 << 1,\n+    GF_OMP_FOR_KIND_SIMD\t= GF_OMP_FOR_SIMD | 0,\n+    GF_OMP_FOR_KIND_CILKSIMD\t= GF_OMP_FOR_SIMD | 1,\n     GF_OMP_FOR_COMBINED\t\t= 1 << 2,\n     GF_OMP_FOR_COMBINED_INTO\t= 1 << 3,\n     GF_OMP_TARGET_KIND_MASK\t= (1 << 2) - 1,"}, {"sha": "54e837f5805cf81eb7d8573ffd3df2c8ed57d690", "filename": "gcc/omp-low.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0aadce73310807081b7df2b2310f6463e2379e00/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=0aadce73310807081b7df2b2310f6463e2379e00", "patch": "@@ -298,7 +298,7 @@ extract_omp_for_data (gimple for_stmt, struct omp_for_data *fd,\n   int i;\n   struct omp_for_data_loop dummy_loop;\n   location_t loc = gimple_location (for_stmt);\n-  bool simd = gimple_omp_for_kind (for_stmt) & GF_OMP_FOR_KIND_SIMD;\n+  bool simd = gimple_omp_for_kind (for_stmt) & GF_OMP_FOR_SIMD;\n   bool distribute = gimple_omp_for_kind (for_stmt)\n \t\t    == GF_OMP_FOR_KIND_DISTRIBUTE;\n \n@@ -1020,7 +1020,7 @@ build_outer_var_ref (tree var, omp_context *ctx)\n       x = build_receiver_ref (var, by_ref, ctx);\n     }\n   else if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t   && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD)\n+\t   && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n     {\n       /* #pragma omp simd isn't a worksharing construct, and can reference even\n \t private vars in its linear etc. clauses.  */\n@@ -2249,7 +2249,7 @@ check_omp_nesting_restrictions (gimple stmt, omp_context *ctx)\n   if (ctx != NULL)\n     {\n       if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD)\n+\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n \t{\n \t  error_at (gimple_location (stmt),\n \t\t    \"OpenMP constructs may not be nested inside simd region\");\n@@ -2272,7 +2272,7 @@ check_omp_nesting_restrictions (gimple stmt, omp_context *ctx)\n   switch (gimple_code (stmt))\n     {\n     case GIMPLE_OMP_FOR:\n-      if (gimple_omp_for_kind (stmt) & GF_OMP_FOR_KIND_SIMD)\n+      if (gimple_omp_for_kind (stmt) & GF_OMP_FOR_SIMD)\n \treturn true;\n       if (gimple_omp_for_kind (stmt) == GF_OMP_FOR_KIND_DISTRIBUTE)\n \t{\n@@ -2598,7 +2598,7 @@ scan_omp_1_stmt (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n \t  if (setjmp_or_longjmp_p (fndecl)\n \t      && ctx\n \t      && gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD)\n+\t      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n \t    {\n \t      remove = true;\n \t      error_at (gimple_location (stmt),\n@@ -3034,7 +3034,7 @@ lower_rec_input_clauses (tree clauses, gimple_seq *ilist, gimple_seq *dlist,\n   bool reduction_omp_orig_ref = false;\n   int pass;\n   bool is_simd = (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-\t\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD);\n+\t\t  && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD);\n   int max_vf = 0;\n   tree lane = NULL_TREE, idx = NULL_TREE;\n   tree ivar = NULL_TREE, lvar = NULL_TREE;\n@@ -3774,7 +3774,7 @@ lower_lastprivate_clauses (tree clauses, tree predicate, gimple_seq *stmt_list,\n     }\n \n   if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD)\n+      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n     {\n       simduid = find_omp_clause (orig_clauses, OMP_CLAUSE__SIMDUID_);\n       if (simduid)\n@@ -3877,7 +3877,7 @@ lower_reduction_clauses (tree clauses, gimple_seq *stmt_seqp, omp_context *ctx)\n \n   /* SIMD reductions are handled in lower_rec_input_clauses.  */\n   if (gimple_code (ctx->stmt) == GIMPLE_OMP_FOR\n-      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_KIND_SIMD)\n+      && gimple_omp_for_kind (ctx->stmt) & GF_OMP_FOR_SIMD)\n     return;\n \n   /* First see if there is exactly one reduction clause.  Use OMP_ATOMIC\n@@ -6925,7 +6925,7 @@ expand_omp_for (struct omp_region *region, gimple inner_stmt)\n        original loops from being detected.  Fix that up.  */\n     loops_state_set (LOOPS_NEED_FIXUP);\n \n-  if (gimple_omp_for_kind (fd.for_stmt) & GF_OMP_FOR_KIND_SIMD)\n+  if (gimple_omp_for_kind (fd.for_stmt) & GF_OMP_FOR_SIMD)\n     expand_omp_simd (region, &fd);\n   else if (fd.sched_kind == OMP_CLAUSE_SCHEDULE_STATIC\n \t   && !fd.have_ordered)"}]}