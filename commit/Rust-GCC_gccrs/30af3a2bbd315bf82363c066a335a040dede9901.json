{"sha": "30af3a2bbd315bf82363c066a335a040dede9901", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhZjNhMmJiZDMxNWJmODIzNjNjMDY2YTMzNWEwNDBkZWRlOTkwMQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-08-09T12:34:36Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-08-09T12:34:36Z"}, "message": "Boolify some parameters.\n\nFrom-SVN: r250986", "tree": {"sha": "1ad718c16d54f76d957c681caf1b70df47f304ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ad718c16d54f76d957c681caf1b70df47f304ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30af3a2bbd315bf82363c066a335a040dede9901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af3a2bbd315bf82363c066a335a040dede9901", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30af3a2bbd315bf82363c066a335a040dede9901", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af3a2bbd315bf82363c066a335a040dede9901/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/296c53ac8ad2a1ec7483d81f8ed9e2eee520f841"}], "stats": {"total": 107, "additions": 69, "deletions": 38}, "files": [{"sha": "5c7454b806909c562feff59547644caf1abe6271", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -1,3 +1,10 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (pointer_int_sum): Use true/false instead of 1/0.\n+\t(c_common_truthvalue_conversion): Likewise.\n+\t* c-omp.c (c_finish_omp_atomic): Likewise.\n+\t* c-common.h (build_binary_op): Update declaration.\n+\n 2017-08-08  Martin Liska  <mliska@suse.cz>\n \n \t* c-ada-spec.c: Include header files."}, {"sha": "a9c0614b4366b5ef241ab44aa4118f749ae67412", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -3133,7 +3133,8 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n \t can result in a sum or difference with different type args.  */\n       ptrop = build_binary_op (EXPR_LOCATION (TREE_OPERAND (intop, 1)),\n \t\t\t       subcode, ptrop,\n-\t\t\t       convert (int_type, TREE_OPERAND (intop, 1)), 1);\n+\t\t\t       convert (int_type, TREE_OPERAND (intop, 1)),\n+\t\t\t       true);\n       intop = convert (int_type, TREE_OPERAND (intop, 0));\n     }\n \n@@ -3306,7 +3307,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \t\t\t\t\t\tTREE_OPERAND (expr, 0)),\n \t\tc_common_truthvalue_conversion (location,\n \t\t\t\t\t\tTREE_OPERAND (expr, 1)),\n-\t\t\t      0);\n+\t\t\t      false);\n       goto ret;\n \n     case NEGATE_EXPR:\n@@ -3457,7 +3458,7 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n \tc_common_truthvalue_conversion\n \t       (location,\n \t\tbuild_unary_op (location, IMAGPART_EXPR, t, false)),\n-\t       0));\n+\t       false));\n       goto ret;\n     }\n \n@@ -3466,10 +3467,10 @@ c_common_truthvalue_conversion (location_t location, tree expr)\n       tree fixed_zero_node = build_fixed (TREE_TYPE (expr),\n \t\t\t\t\t  FCONST0 (TYPE_MODE\n \t\t\t\t\t\t   (TREE_TYPE (expr))));\n-      return build_binary_op (location, NE_EXPR, expr, fixed_zero_node, 1);\n+      return build_binary_op (location, NE_EXPR, expr, fixed_zero_node, true);\n     }\n   else\n-    return build_binary_op (location, NE_EXPR, expr, integer_zero_node, 1);\n+    return build_binary_op (location, NE_EXPR, expr, integer_zero_node, true);\n \n  ret:\n   protected_set_expr_location (expr, location);"}, {"sha": "b44e1bd78d6046eeccd62df98eb76000abb1c9e6", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -960,7 +960,7 @@ extern tree build_real_imag_expr (location_t, enum tree_code, tree);\n    a variant of the C language.  They are used in c-common.c.  */\n \n extern tree build_unary_op (location_t, enum tree_code, tree, bool);\n-extern tree build_binary_op (location_t, enum tree_code, tree, tree, int);\n+extern tree build_binary_op (location_t, enum tree_code, tree, tree, bool);\n extern tree perform_integral_promotions (tree);\n \n /* These functions must be defined by each front-end which implements"}, {"sha": "eef7ac0c769b50da04d5a2b4aa22b0d872cd00d7", "filename": "gcc/c-family/c-omp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc-family%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-omp.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -276,14 +276,14 @@ c_finish_omp_atomic (location_t loc, enum tree_code code,\n       lhs = build3_loc (loc, BIT_FIELD_REF, TREE_TYPE (blhs), lhs,\n \t\t\tbitsize_int (bitsize), bitsize_int (bitpos));\n       if (swapped)\n-\trhs = build_binary_op (loc, opcode, rhs, lhs, 1);\n+\trhs = build_binary_op (loc, opcode, rhs, lhs, true);\n       else if (opcode != NOP_EXPR)\n-\trhs = build_binary_op (loc, opcode, lhs, rhs, 1);\n+\trhs = build_binary_op (loc, opcode, lhs, rhs, true);\n       opcode = NOP_EXPR;\n     }\n   else if (swapped)\n     {\n-      rhs = build_binary_op (loc, opcode, rhs, lhs, 1);\n+      rhs = build_binary_op (loc, opcode, rhs, lhs, true);\n       opcode = NOP_EXPR;\n     }\n   bool save = in_late_binary_op;"}, {"sha": "a7cc74658d56d123febb46a9cc86202b659c7b02", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -1,3 +1,20 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (build_enumerator): Use true/false instead of 1/0.\n+\t* c-tree.h (build_external_ref): Update declaration.\n+\t* c-typeck.c (build_array_ref): Use true/false instead of 1/0.\n+\t(build_external_ref): Change the type of a parameter to bool.\n+\t(parser_build_binary_op): Use true/false instead of 1/0.\n+\t(pointer_diff): Likewise.\n+\t(build_modify_expr): Likewise.\n+\t(set_designator): Change the type of a parameter to bool.\n+\t(set_init_index): Use true/false instead of 1/0.\n+\t(set_init_label): Likewise.\n+\t(output_init_element): Change the type of a parameter to bool.\n+\t(output_pending_init_elements): Use true/false instead of 1/0.\n+\t(process_init_element): Likewise.\n+\t(build_binary_op): Change the type of a parameter to bool.\n+\n 2017-08-09  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/81233"}, {"sha": "d21fbc5883e087ea755b82774c6fa542b981c9b7", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -8475,7 +8475,7 @@ build_enumerator (location_t decl_loc, location_t loc,\n   /* Set basis for default for next value.  */\n   the_enum->enum_next_value\n     = build_binary_op (EXPR_LOC_OR_LOC (value, input_location),\n-\t\t       PLUS_EXPR, value, integer_one_node, 0);\n+\t\t       PLUS_EXPR, value, integer_one_node, false);\n   the_enum->enum_overflow = tree_int_cst_lt (the_enum->enum_next_value, value);\n \n   /* Now create a declaration for the enum value name.  */"}, {"sha": "92bcc70653e6b267e9641dcdca4abc7446603945", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -634,7 +634,7 @@ extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (location_t, tree, tree, location_t);\n extern tree build_array_ref (location_t, tree, tree);\n-extern tree build_external_ref (location_t, tree, int, tree *);\n+extern tree build_external_ref (location_t, tree, bool, tree *);\n extern void pop_maybe_used (bool);\n extern struct c_expr c_expr_sizeof_expr (location_t, struct c_expr);\n extern struct c_expr c_expr_sizeof_type (location_t, struct c_type_name *);"}, {"sha": "c33601f6b625025e0376b3508036a7f036b4909b", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -106,10 +106,10 @@ static int spelling_length (void);\n static char *print_spelling (char *);\n static void warning_init (location_t, int, const char *);\n static tree digest_init (location_t, tree, tree, tree, bool, bool, int);\n-static void output_init_element (location_t, tree, tree, bool, tree, tree, int,\n+static void output_init_element (location_t, tree, tree, bool, tree, tree, bool,\n \t\t\t\t bool, struct obstack *);\n static void output_pending_init_elements (int, struct obstack *);\n-static bool set_designator (location_t, int, struct obstack *);\n+static bool set_designator (location_t, bool, struct obstack *);\n static void push_range_stack (tree, struct obstack *);\n static void add_pending_init (location_t, tree, tree, tree, bool,\n \t\t\t      struct obstack *);\n@@ -2723,7 +2723,7 @@ build_array_ref (location_t loc, tree array, tree index)\n       gcc_assert (TREE_CODE (TREE_TYPE (TREE_TYPE (ar))) != FUNCTION_TYPE);\n \n       ret = build_indirect_ref (loc, build_binary_op (loc, PLUS_EXPR, ar,\n-\t\t\t\t\t\t      index, 0),\n+\t\t\t\t\t\t      index, false),\n \t\t\t\tRO_ARRAY_INDEXING);\n       if (non_lvalue)\n \tret = non_lvalue_loc (loc, ret);\n@@ -2738,7 +2738,7 @@ build_array_ref (location_t loc, tree array, tree index)\n    for CONST_DECLs defined as enum constants.  If the type of the\n    identifier is not available, *TYPE is set to NULL.  */\n tree\n-build_external_ref (location_t loc, tree id, int fun, tree *type)\n+build_external_ref (location_t loc, tree id, bool fun, tree *type)\n {\n   tree ref;\n   tree decl = lookup_name (id);\n@@ -3642,7 +3642,7 @@ parser_build_binary_op (location_t location, enum tree_code code,\n                 : TREE_TYPE (arg2.value));\n \n   result.value = build_binary_op (location, code,\n-\t\t\t\t  arg1.value, arg2.value, 1);\n+\t\t\t\t  arg1.value, arg2.value, true);\n   result.original_code = code;\n   result.original_type = NULL;\n \n@@ -3831,7 +3831,7 @@ pointer_diff (location_t loc, tree op0, tree op1)\n \n   op0 = build_binary_op (loc,\n \t\t\t MINUS_EXPR, convert (inttype, op0),\n-\t\t\t convert (inttype, op1), 0);\n+\t\t\t convert (inttype, op1), false);\n   /* This generates an error if op1 is pointer to incomplete type.  */\n   if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (TREE_TYPE (orig_op1))))\n     error_at (loc, \"arithmetic on pointer to an incomplete type\");\n@@ -4098,7 +4098,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   add_stmt (loop_label);\n \n   /* newval = old + val;  */\n-  rhs = build_binary_op (loc, modifycode, old, val, 1);\n+  rhs = build_binary_op (loc, modifycode, old, val, true);\n   rhs = c_fully_fold (rhs, false, NULL);\n   rhs = convert_for_assignment (loc, UNKNOWN_LOCATION, nonatomic_lhs_type,\n \t\t\t\trhs, NULL_TREE, ic_assign, false, NULL_TREE,\n@@ -5796,7 +5796,7 @@ build_modify_expr (location_t location, tree lhs, tree lhs_origtype,\n \t      rhseval = newrhs;\n \t    }\n \t  newrhs = build_binary_op (location,\n-\t\t\t\t    modifycode, lhs, newrhs, 1);\n+\t\t\t\t    modifycode, lhs, newrhs, true);\n \n \t  /* The original type of the right hand side is no longer\n \t     meaningful.  */\n@@ -8291,7 +8291,7 @@ pop_init_level (location_t loc, int implicit,\n    ARRAY argument is nonzero for array ranges.  Returns false for success.  */\n \n static bool\n-set_designator (location_t loc, int array,\n+set_designator (location_t loc, bool array,\n \t\tstruct obstack *braced_init_obstack)\n {\n   tree subtype;\n@@ -8387,7 +8387,7 @@ void\n set_init_index (location_t loc, tree first, tree last,\n \t\tstruct obstack *braced_init_obstack)\n {\n-  if (set_designator (loc, 1, braced_init_obstack))\n+  if (set_designator (loc, true, braced_init_obstack))\n     return;\n \n   designator_erroneous = 1;\n@@ -8477,7 +8477,7 @@ set_init_label (location_t loc, tree fieldname, location_t fieldname_loc,\n {\n   tree field;\n \n-  if (set_designator (loc, 0, braced_init_obstack))\n+  if (set_designator (loc, false, braced_init_obstack))\n     return;\n \n   designator_erroneous = 1;\n@@ -8517,7 +8517,7 @@ set_init_label (location_t loc, tree fieldname, location_t fieldname_loc,\n \tfield = TREE_CHAIN (field);\n \tif (field)\n \t  {\n-\t    if (set_designator (loc, 0, braced_init_obstack))\n+\t    if (set_designator (loc, false, braced_init_obstack))\n \t      return;\n \t  }\n       }\n@@ -8950,9 +8950,9 @@ find_init_member (tree field, struct obstack * braced_init_obstack)\n    unparenthesized or we should not warn here for it being parenthesized.\n    For other types of VALUE, STRICT_STRING is not used.\n \n-   PENDING if non-nil means output pending elements that belong\n-   right after this element.  (PENDING is normally 1;\n-   it is 0 while outputting pending elements, to avoid recursion.)\n+   PENDING if true means output pending elements that belong\n+   right after this element.  (PENDING is normally true;\n+   it is false while outputting pending elements, to avoid recursion.)\n \n    IMPLICIT is true if value comes from pop_init_level (1),\n    the new initializer has been merged with the existing one\n@@ -8961,7 +8961,7 @@ find_init_member (tree field, struct obstack * braced_init_obstack)\n \n static void\n output_init_element (location_t loc, tree value, tree origtype,\n-\t\t     bool strict_string, tree type, tree field, int pending,\n+\t\t     bool strict_string, tree type, tree field, bool pending,\n \t\t     bool implicit, struct obstack * braced_init_obstack)\n {\n   tree semantic_type = NULL_TREE;\n@@ -9204,7 +9204,7 @@ output_pending_init_elements (int all, struct obstack * braced_init_obstack)\n \t\t\t\t  constructor_unfilled_index))\n \t    output_init_element (input_location, elt->value, elt->origtype,\n \t\t\t\t true, TREE_TYPE (constructor_type),\n-\t\t\t\t constructor_unfilled_index, 0, false,\n+\t\t\t\t constructor_unfilled_index, false, false,\n \t\t\t\t braced_init_obstack);\n \t  else if (tree_int_cst_lt (constructor_unfilled_index,\n \t\t\t\t    elt->purpose))\n@@ -9258,7 +9258,7 @@ output_pending_init_elements (int all, struct obstack * braced_init_obstack)\n \t      constructor_unfilled_fields = elt->purpose;\n \t      output_init_element (input_location, elt->value, elt->origtype,\n \t\t\t\t   true, TREE_TYPE (elt->purpose),\n-\t\t\t\t   elt->purpose, 0, false,\n+\t\t\t\t   elt->purpose, false, false,\n \t\t\t\t   braced_init_obstack);\n \t    }\n \t  else if (tree_int_cst_lt (ctor_unfilled_bitpos, elt_bitpos))\n@@ -9502,7 +9502,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      push_member_name (constructor_fields);\n \t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, fieldtype,\n-\t\t\t\t   constructor_fields, 1, implicit,\n+\t\t\t\t   constructor_fields, true, implicit,\n \t\t\t\t   braced_init_obstack);\n \t      RESTORE_SPELLING_DEPTH (constructor_depth);\n \t    }\n@@ -9594,7 +9594,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      push_member_name (constructor_fields);\n \t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, fieldtype,\n-\t\t\t\t   constructor_fields, 1, implicit,\n+\t\t\t\t   constructor_fields, true, implicit,\n \t\t\t\t   braced_init_obstack);\n \t      RESTORE_SPELLING_DEPTH (constructor_depth);\n \t    }\n@@ -9646,7 +9646,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t      push_array_bounds (tree_to_uhwi (constructor_index));\n \t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, elttype,\n-\t\t\t\t   constructor_index, 1, implicit,\n+\t\t\t\t   constructor_index, true, implicit,\n \t\t\t\t   braced_init_obstack);\n \t      RESTORE_SPELLING_DEPTH (constructor_depth);\n \t    }\n@@ -9681,7 +9681,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t\telttype = TYPE_MAIN_VARIANT (constructor_type);\n \t      output_init_element (loc, value.value, value.original_type,\n \t\t\t\t   strict_string, elttype,\n-\t\t\t\t   constructor_index, 1, implicit,\n+\t\t\t\t   constructor_index, true, implicit,\n \t\t\t\t   braced_init_obstack);\n \t    }\n \n@@ -9710,7 +9710,7 @@ process_init_element (location_t loc, struct c_expr value, bool implicit,\n \t  if (value.value)\n \t    output_init_element (loc, value.value, value.original_type,\n \t\t\t\t strict_string, constructor_type,\n-\t\t\t\t NULL_TREE, 1, implicit,\n+\t\t\t\t NULL_TREE, true, implicit,\n \t\t\t\t braced_init_obstack);\n \t  constructor_fields = NULL_TREE;\n \t}\n@@ -10842,7 +10842,7 @@ build_vec_cmp (tree_code code, tree type,\n \n tree\n build_binary_op (location_t location, enum tree_code code,\n-\t\t tree orig_op0, tree orig_op1, int convert_p)\n+\t\t tree orig_op0, tree orig_op1, bool convert_p)\n {\n   tree type0, type1, orig_type0, orig_type1;\n   tree eptype;"}, {"sha": "c28336f45d795fdc8a0cfc6320ed90429ed60345", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -1,3 +1,9 @@\n+2017-08-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* parser.c (cp_parser_perform_range_for_lookup): Use false instead of 0.\n+\t* typeck.c (build_binary_op): Change the type of a parameter to bool.\n+\t(cp_truthvalue_conversion): Use true instead of 1.\n+\n 2017-08-08  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/81607"}, {"sha": "28f32888312f91ace758c5a929dda1434abc4270", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -11925,7 +11925,7 @@ cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)\n       *end = build_binary_op (input_location, PLUS_EXPR,\n \t\t\t      range,\n \t\t\t      array_type_nelts_top (TREE_TYPE (range)),\n-\t\t\t      0);\n+\t\t\t      false);\n       return TREE_TYPE (*begin);\n     }\n   else"}, {"sha": "3ce39061010fface01aa1c73ca5a1e5a14af350b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af3a2bbd315bf82363c066a335a040dede9901/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=30af3a2bbd315bf82363c066a335a040dede9901", "patch": "@@ -4050,7 +4050,7 @@ enum_cast_to_int (tree op)\n /* For the c-common bits.  */\n tree\n build_binary_op (location_t location, enum tree_code code, tree op0, tree op1,\n-\t\t int /*convert_p*/)\n+\t\t bool /*convert_p*/)\n {\n   return cp_build_binary_op (location, code, op0, op1, tf_warning_or_error);\n }\n@@ -5592,7 +5592,7 @@ cp_truthvalue_conversion (tree expr)\n   if (TYPE_PTR_OR_PTRMEM_P (type)\n       /* Avoid ICE on invalid use of non-static member function.  */\n       || TREE_CODE (expr) == FUNCTION_DECL)\n-    return build_binary_op (input_location, NE_EXPR, expr, nullptr_node, 1);\n+    return build_binary_op (input_location, NE_EXPR, expr, nullptr_node, true);\n   else\n     return c_common_truthvalue_conversion (input_location, expr);\n }"}]}