{"sha": "b887f1a033ac9c5daae593722a985e3dc79457c7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjg4N2YxYTAzM2FjOWM1ZGFhZTU5MzcyMmE5ODVlM2RjNzk0NTdjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T10:14:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-11-06T10:14:13Z"}, "message": "[multiple changes]\n\n2012-11-06  Geert Bosch  <bosch@adacore.com>\n\n\t* eval_fat.adb (Machine, Succ): Fix front end to support static\n\tevaluation of attributes on targets with both VAX and IEEE float.\n\t* sem_util.ads, sem_util.adb (Has_Denormals, Has_Signed_Zeros):\n\tNew type-specific functions. Previously we used Denorm_On_Target\n\tand Signed_Zeros_On_Target directly, but that doesn't work well\n\tfor OpenVMS where a single target supports both floating point\n\twith and without signed zeros.\n\t* sem_attr.adb (Attribute_Denorm, Attribute_Signed_Zeros): Use\n\tnew Has_Denormals and Has_Signed_Zeros functions to support both\n\tIEEE and VAX floating point on a single target.\n\n2012-11-06  Tristan Gingold  <gingold@adacore.com>\n\n\t* bindgen.adb (System_Interrupts_Used): New variable.\n\t(Gen_Adainit): Declare and call\n\tInstall_Restricted_Handlers_Sequential if System.Interrupts is\n\tused when elaboration policy is sequential.\n\n2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch8.adb: Complete previous change.\n\nFrom-SVN: r193225", "tree": {"sha": "fb0147fbad50c7ea63b9ef646b5de01da32bcd66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb0147fbad50c7ea63b9ef646b5de01da32bcd66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b887f1a033ac9c5daae593722a985e3dc79457c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b887f1a033ac9c5daae593722a985e3dc79457c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b887f1a033ac9c5daae593722a985e3dc79457c7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b887f1a033ac9c5daae593722a985e3dc79457c7/comments", "author": null, "committer": null, "parents": [{"sha": "436d9f924cf07f4901d701999f4f19138bd5e917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/436d9f924cf07f4901d701999f4f19138bd5e917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/436d9f924cf07f4901d701999f4f19138bd5e917"}], "stats": {"total": 133, "additions": 116, "deletions": 17}, "files": [{"sha": "7ca698e339c645e3a8fc99786632a74f732cd67c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -1,3 +1,27 @@\n+2012-11-06  Geert Bosch  <bosch@adacore.com>\n+\n+\t* eval_fat.adb (Machine, Succ): Fix front end to support static\n+\tevaluation of attributes on targets with both VAX and IEEE float.\n+\t* sem_util.ads, sem_util.adb (Has_Denormals, Has_Signed_Zeros):\n+\tNew type-specific functions. Previously we used Denorm_On_Target\n+\tand Signed_Zeros_On_Target directly, but that doesn't work well\n+\tfor OpenVMS where a single target supports both floating point\n+\twith and without signed zeros.\n+\t* sem_attr.adb (Attribute_Denorm, Attribute_Signed_Zeros): Use\n+\tnew Has_Denormals and Has_Signed_Zeros functions to support both\n+\tIEEE and VAX floating point on a single target.\n+\n+2012-11-06  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* bindgen.adb (System_Interrupts_Used): New variable.\n+\t(Gen_Adainit): Declare and call\n+\tInstall_Restricted_Handlers_Sequential if System.Interrupts is\n+\tused when elaboration policy is sequential.\n+\n+2012-11-06  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch8.adb: Complete previous change.\n+\n 2012-11-06  Tristan Gingold  <gingold@adacore.com>\n \n \t* fe.h (Get_Vax_Real_Literal_As_Signed): Declare."}, {"sha": "bcc01c3d299f30608829a04fd79d925397365612", "filename": "gcc/ada/bindgen.adb", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fbindgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fbindgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindgen.adb?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -82,7 +82,13 @@ package body Bindgen is\n    --  Flag indicating whether the unit System.Tasking.Restricted.Stages is in\n    --  the closure of the partition. This is set by Resolve_Binder_Options,\n    --  and it used to call a routine to active all the tasks at the end of\n-   --  the elaboration.\n+   --  the elaboration when partition elaboration policy is sequential.\n+\n+   System_Interrupts_Used : Boolean := False;\n+   --  Flag indicating whether the unit System.Interrups is in the closure of\n+   --  the partition. This is set by Resolve_Binder_Options, and it used to\n+   --  attach interrupt handlers at the end of the elaboration when partition\n+   --  elaboration policy is sequential.\n \n    Lib_Final_Built : Boolean := False;\n    --  Flag indicating whether the finalize_library rountine has been built\n@@ -488,6 +494,16 @@ package body Bindgen is\n             WBI (\"\");\n          end if;\n \n+         if System_Interrupts_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            WBI (\"      procedure Install_Restricted_Handlers_Sequential;\");\n+            WBI (\"      pragma Import (C,\"\n+                   & \"Install_Restricted_Handlers_Sequential,\" &\n+                   \" \"\"__gnat_attach_all_handlers\"\");\");\n+            WBI (\"\");\n+         end if;\n+\n          if System_Tasking_Restricted_Stages_Used\n            and then Partition_Elaboration_Policy_Specified = 'S'\n          then\n@@ -601,7 +617,21 @@ package body Bindgen is\n          WBI (\"      pragma Import (C, Handler_Installed, \" &\n               \"\"\"__gnat_handler_installed\"\");\");\n \n-         --  Import task activation procedure for ravenscar\n+         --  Import handlers attach procedure for sequential elaboration\n+         --  policy.\n+\n+         if System_Interrupts_Used\n+           and then Partition_Elaboration_Policy_Specified = 'S'\n+         then\n+            WBI (\"      procedure Install_Restricted_Handlers_Sequential;\");\n+            WBI (\"      pragma Import (C,\"\n+                   & \"Install_Restricted_Handlers_Sequential,\" &\n+                   \" \"\"__gnat_attach_all_handlers\"\");\");\n+            WBI (\"\");\n+         end if;\n+\n+         --  Import task activation procedure for sequential elaboration\n+         --  policy.\n \n          if System_Tasking_Restricted_Stages_Used\n            and then Partition_Elaboration_Policy_Specified = 'S'\n@@ -944,10 +974,16 @@ package body Bindgen is\n          WBI (\"      Freeze_Dispatching_Domains;\");\n       end if;\n \n-      if System_Tasking_Restricted_Stages_Used\n-        and then Partition_Elaboration_Policy_Specified = 'S'\n-      then\n-         WBI (\"      Activate_All_Tasks_Sequential;\");\n+      --  Sequential partition elaboration policy\n+\n+      if Partition_Elaboration_Policy_Specified = 'S' then\n+         if System_Interrupts_Used then\n+            WBI (\"      Install_Restricted_Handlers_Sequential;\");\n+         end if;\n+\n+         if System_Tasking_Restricted_Stages_Used then\n+            WBI (\"      Activate_All_Tasks_Sequential;\");\n+         end if;\n       end if;\n \n       --  Case of main program is CIL function or procedure\n@@ -2896,6 +2932,10 @@ package body Bindgen is\n            (System_Tasking_Restricted_Stages_Used,\n             \"system.tasking.restricted.stages%s\");\n \n+         --  Ditto for the use of interrupts\n+\n+         Check_Package (System_Interrupts_Used, \"system.interrupts%s\");\n+\n          --  Ditto for the use of dispatching domains\n \n          Check_Package"}, {"sha": "d1c9d74859add8710f3f4f49b707b59fd5132096", "filename": "gcc/ada/eval_fat.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Feval_fat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Feval_fat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feval_fat.adb?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -25,7 +25,7 @@\n \n with Einfo;    use Einfo;\n with Errout;   use Errout;\n-with Targparm; use Targparm;\n+with Sem_Util; use Sem_Util;\n \n package body Eval_Fat is\n \n@@ -505,8 +505,8 @@ package body Eval_Fat is\n             Emin_Den : constant UI := Machine_Emin_Value (RT)\n                                         - Machine_Mantissa_Value (RT) + Uint_1;\n          begin\n-            if X_Exp < Emin_Den or not Denorm_On_Target then\n-               if Signed_Zeros_On_Target and then UR_Is_Negative (X) then\n+            if X_Exp < Emin_Den or not Has_Denormals (RT) then\n+               if Has_Signed_Zeros (RT) and then UR_Is_Negative (X) then\n                   Error_Msg_N\n                     (\"floating-point value underflows to -0.0?\", Enode);\n                   return Ureal_M_0;\n@@ -517,7 +517,7 @@ package body Eval_Fat is\n                   return Ureal_0;\n                end if;\n \n-            elsif Denorm_On_Target then\n+            elsif Has_Denormals (RT) then\n \n                --  Emin - Mant <= X_Exp < Emin, so result is denormal. Handle\n                --  gradual underflow by first computing the number of\n@@ -718,7 +718,7 @@ package body Eval_Fat is\n       --  Set exponent such that the radix point will be directly following the\n       --  mantissa after scaling.\n \n-      if Denorm_On_Target or Exp /= Emin then\n+      if Has_Denormals (RT) or Exp /= Emin then\n          Exp := Exp - Mantissa;\n       else\n          Exp := Exp - 1;"}, {"sha": "1b9ebcb1ffe567263a9447fd0398c4f4b7fc9124", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -6517,7 +6517,7 @@ package body Sem_Attr is\n \n       when Attribute_Denorm =>\n          Fold_Uint\n-           (N, UI_From_Int (Boolean'Pos (Denorm_On_Target)), True);\n+           (N, UI_From_Int (Boolean'Pos (Has_Denormals (P_Type))), True);\n \n       ---------------------\n       -- Descriptor_Size --\n@@ -7631,7 +7631,7 @@ package body Sem_Attr is\n \n       when Attribute_Signed_Zeros =>\n          Fold_Uint\n-           (N, UI_From_Int (Boolean'Pos (Signed_Zeros_On_Target)), Static);\n+           (N, UI_From_Int (Boolean'Pos (Has_Signed_Zeros (P_Type))), Static);\n \n       ----------\n       -- Size --"}, {"sha": "479798044a08e5252cb691daa5011c48f097222b", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -709,6 +709,7 @@ package body Sem_Ch8 is\n       ------------------------------\n \n       procedure Check_Constrained_Object is\n+         Typ  : constant Entity_Id := Etype (Nam);\n          Subt : Entity_Id;\n \n       begin\n@@ -728,16 +729,20 @@ package body Sem_Ch8 is\n             --  A renaming of an unchecked union does not have an\n             --  actual subtype.\n \n-            elsif Is_Unchecked_Union (Etype (Nam)) then\n+            elsif Is_Unchecked_Union (Typ) then\n                null;\n \n             --  If a record is limited its size is invariant. This is the case\n             --  in particular with record types with an access discirminant\n             --  that are used in iterators. This is an optimization, but it\n             --  also prevents typing anomalies when the prefix is further\n-            --  expanded.\n+            --  expanded. Limited types with discriminants are included.\n \n-            elsif Is_Limited_Record (Etype (Nam)) then\n+            elsif Is_Limited_Record (Typ)\n+              or else (Ekind (Typ) = E_Limited_Private_Type\n+                and then Has_Discriminants (Typ)\n+                and then Is_Access_Type (Etype (First_Discriminant (Typ))))\n+            then\n                null;\n \n             else\n@@ -747,7 +752,7 @@ package body Sem_Ch8 is\n                  Make_Subtype_Declaration (Loc,\n                    Defining_Identifier => Subt,\n                    Subtype_Indication  =>\n-                     Make_Subtype_From_Expr (Nam, Etype (Nam))));\n+                     Make_Subtype_From_Expr (Nam, Typ)));\n                Rewrite (Subtype_Mark (N), New_Occurrence_Of (Subt, Loc));\n                Set_Etype (Nam, Subt);\n             end if;"}, {"sha": "8fa7c3747a32fa659b63776a8fb893ede994644a", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -5398,6 +5398,17 @@ package body Sem_Util is\n                                   N_Package_Specification);\n    end Has_Declarations;\n \n+   -------------------\n+   -- Has_Denormals --\n+   -------------------\n+\n+   function Has_Denormals (E : Entity_Id) return Boolean is\n+   begin\n+      return Is_Floating_Point_Type (E)\n+        and then Denorm_On_Target\n+        and then not Vax_Float (E);\n+   end Has_Denormals;\n+\n    -------------------------------------------\n    -- Has_Discriminant_Dependent_Constraint --\n    -------------------------------------------\n@@ -6076,6 +6087,17 @@ package body Sem_Util is\n       end if;\n    end Has_Private_Component;\n \n+   ----------------------\n+   -- Has_Signed_Zeros --\n+   ----------------------\n+\n+   function Has_Signed_Zeros (E : Entity_Id) return Boolean is\n+   begin\n+      return Is_Floating_Point_Type (E)\n+        and then Signed_Zeros_On_Target\n+        and then not Vax_Float (E);\n+   end Has_Signed_Zeros;\n+\n    -----------------------------\n    -- Has_Static_Array_Bounds --\n    -----------------------------"}, {"sha": "b4ce100cb985fd7a1460a3144f249b0e352c91b0", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b887f1a033ac9c5daae593722a985e3dc79457c7/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=b887f1a033ac9c5daae593722a985e3dc79457c7", "patch": "@@ -674,6 +674,10 @@ package Sem_Util is\n    function Has_Declarations (N : Node_Id) return Boolean;\n    --  Determines if the node can have declarations\n \n+   function Has_Denormals (E : Entity_Id) return Boolean;\n+   --  Determines if the floating-point type E supports denormal numbers.\n+   --  Returns False if E is not a floating-point type.\n+\n    function Has_Discriminant_Dependent_Constraint\n      (Comp : Entity_Id) return Boolean;\n    --  Returns True if and only if Comp has a constrained subtype that depends\n@@ -708,6 +712,10 @@ package Sem_Util is\n    --  Check if a type has a (sub)component of a private type that has not\n    --  yet received a full declaration.\n \n+   function Has_Signed_Zeros (E : Entity_Id) return Boolean;\n+   --  Determines if the floating-point type E supports signed zeros.\n+   --  Returns False if E is not a floating-point type.\n+\n    function Has_Static_Array_Bounds (Typ : Node_Id) return Boolean;\n    --  Return whether an array type has static bounds\n "}]}