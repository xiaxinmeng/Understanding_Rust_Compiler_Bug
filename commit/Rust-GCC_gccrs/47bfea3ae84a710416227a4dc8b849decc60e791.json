{"sha": "47bfea3ae84a710416227a4dc8b849decc60e791", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDdiZmVhM2FlODRhNzEwNDE2MjI3YTRkYzhiODQ5ZGVjYzYwZTc5MQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:24:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:24:37Z"}, "message": "[multiple changes]\n\n2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch9.ads (Build_Private_Protected_Declaration): For a protected\n\toperation that is only declared in a protected body, create a\n\tcorresponding subprogram declaration.\n\t* exp_ch9.adb (Expand_N_Protected_Body): Create protected body of\n\toperation in all cases, including for an operation that is only\n\tdeclared in the body.\n\t* sem_ch6.adb: Call Build_Private_Protected_Declaration\n\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): For an operation\n\tdeclared in a protected body, create the declaration for the\n\tcorresponding protected version of the operation.\n\n2009-11-30  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb (Adjust_Global_Switches): Disable specific expansions\n\tfor Restrictions pragmas, to avoid tree inconsistencies between\n\tcompilations with different pragmas.\n\n2009-11-30  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* sem_prag.adb (Check_Duplicated_Export_Name): Allow entities exported\n\tto CIL to have duplicated export name.\n\nFrom-SVN: r154828", "tree": {"sha": "e85c08fdecea3c8ab0ac525dc1311885778f9026", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e85c08fdecea3c8ab0ac525dc1311885778f9026"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/47bfea3ae84a710416227a4dc8b849decc60e791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bfea3ae84a710416227a4dc8b849decc60e791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47bfea3ae84a710416227a4dc8b849decc60e791", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47bfea3ae84a710416227a4dc8b849decc60e791/comments", "author": null, "committer": null, "parents": [{"sha": "9d607bc318655f164555aaa634f82e0eb9704d03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d607bc318655f164555aaa634f82e0eb9704d03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d607bc318655f164555aaa634f82e0eb9704d03"}], "stats": {"total": 237, "additions": 153, "deletions": 84}, "files": [{"sha": "39b56f021ac06a45819cde48d066c25a835025f7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -1,3 +1,27 @@\n+2009-11-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch9.ads (Build_Private_Protected_Declaration): For a protected\n+\toperation that is only declared in a protected body, create a\n+\tcorresponding subprogram declaration.\n+\t* exp_ch9.adb (Expand_N_Protected_Body): Create protected body of\n+\toperation in all cases, including for an operation that is only\n+\tdeclared in the body.\n+\t* sem_ch6.adb: Call Build_Private_Protected_Declaration\n+\t* exp_ch6.adb (Expand_N_Subprogram_Declaration): For an operation\n+\tdeclared in a protected body, create the declaration for the\n+\tcorresponding protected version of the operation.\n+\n+2009-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb (Adjust_Global_Switches): Disable specific expansions\n+\tfor Restrictions pragmas, to avoid tree inconsistencies between\n+\tcompilations with different pragmas.\n+\n+2009-11-30  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* sem_prag.adb (Check_Duplicated_Export_Name): Allow entities exported\n+\tto CIL to have duplicated export name.\n+\n 2009-11-30  Robert Dewar  <dewar@adacore.com>\n \n \t* a-tiinio.adb: Remove extraneous pragma Warnings (Off)."}, {"sha": "fa74f6cc7abc33b2309692560907197d75f7bbe7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -4502,6 +4502,21 @@ package body Exp_Ch6 is\n             Analyze (Prot_Decl);\n             Insert_Actions (N, Freeze_Entity (Prot_Id, Loc));\n             Set_Protected_Body_Subprogram (Subp, Prot_Id);\n+\n+            --  Create protected operation as well. Even though the operation\n+            --  is only accessible within the body, it is possible to make it\n+            --  available outside of the protected object by using 'Access to\n+            --  provide a callback, so we build the protected version in all\n+            --  cases.\n+\n+            Prot_Decl :=\n+                 Make_Subprogram_Declaration (Loc,\n+                   Specification =>\n+                     Build_Protected_Sub_Specification\n+                      (N, Scop, Protected_Mode));\n+            Insert_Before (Prot_Bod, Prot_Decl);\n+            Analyze (Prot_Decl);\n+\n             Pop_Scope;\n          end if;\n "}, {"sha": "869a2f22fc53be0518f0529051ab1b2bee4fc34f", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 88, "deletions": 28, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -2551,6 +2551,72 @@ package body Exp_Ch9 is\n       end loop;\n    end Build_Master_Entity;\n \n+   -----------------------------------------\n+   -- Build_Private_Protected_Declaration --\n+   -----------------------------------------\n+\n+   function Build_Private_Protected_Declaration (N : Node_Id)\n+     return Entity_Id\n+   is\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Body_Id  : constant Entity_Id := Defining_Entity (N);\n+      Decl     : Node_Id;\n+      Plist    : List_Id;\n+      Formal   : Entity_Id;\n+      New_Spec : Node_Id;\n+      Spec_Id  : Entity_Id;\n+\n+   begin\n+      Formal := First_Formal (Body_Id);\n+\n+      --  The protected operation always has at least one formal, namely\n+      --  the object itself, but it is only placed in the parameter list\n+      --  if expansion is enabled.\n+\n+      if Present (Formal)\n+        or else Expander_Active\n+      then\n+         Plist := Copy_Parameter_List (Body_Id);\n+      else\n+         Plist := No_List;\n+      end if;\n+\n+      if Nkind (Specification (N)) = N_Procedure_Specification then\n+         New_Spec :=\n+           Make_Procedure_Specification (Loc,\n+              Defining_Unit_Name =>\n+                Make_Defining_Identifier (Sloc (Body_Id),\n+                  Chars => Chars (Body_Id)),\n+              Parameter_Specifications => Plist);\n+      else\n+         New_Spec :=\n+           Make_Function_Specification (Loc,\n+              Defining_Unit_Name =>\n+                Make_Defining_Identifier (Sloc (Body_Id),\n+                  Chars => Chars (Body_Id)),\n+              Parameter_Specifications => Plist,\n+              Result_Definition =>\n+                New_Occurrence_Of (Etype (Body_Id), Loc));\n+      end if;\n+\n+      Decl :=\n+        Make_Subprogram_Declaration (Loc,\n+          Specification => New_Spec);\n+      Insert_Before (N, Decl);\n+      Spec_Id := Defining_Unit_Name (New_Spec);\n+\n+      --  Indicate that the entity comes from source, to ensure that\n+      --  cross-reference information is properly generated. The body\n+      --  itself is rewritten during expansion, and the body entity will\n+      --  not appear in calls to the operation.\n+\n+      Set_Comes_From_Source (Spec_Id, True);\n+      Analyze (Decl);\n+      Set_Has_Completion (Spec_Id);\n+      Set_Convention (Spec_Id, Convention_Protected);\n+      return Spec_Id;\n+   end Build_Private_Protected_Declaration;\n+\n    ---------------------------\n    -- Build_Protected_Entry --\n    ---------------------------\n@@ -7182,7 +7248,6 @@ package body Exp_Ch9 is\n       New_Op_Body  : Node_Id;\n       Num_Entries  : Natural := 0;\n       Op_Body      : Node_Id;\n-      Op_Decl      : Node_Id;\n       Op_Id        : Entity_Id;\n \n       Chain        : Entity_Id := Empty;\n@@ -7344,41 +7409,36 @@ package body Exp_Ch9 is\n                   --  to an external caller. This is the common idiom in code\n                   --  that uses the Ada 2005 Timing_Events package. As a result\n                   --  we need to produce the protected body for both visible\n-                  --  and private operations.\n+                  --  and private operations, as well as operations that only\n+                  --  have a body in the source, and for which we create a\n+                  --  declaration in the protected body itself.\n \n                   if Present (Corresponding_Spec (Op_Body)) then\n-                     Op_Decl :=\n-                       Unit_Declaration_Node (Corresponding_Spec (Op_Body));\n+                     New_Op_Body :=\n+                       Build_Protected_Subprogram_Body (\n+                         Op_Body, Pid, Specification (New_Op_Body));\n \n-                     if Nkind (Parent (Op_Decl)) =\n-                          N_Protected_Definition\n-                     then\n-                        New_Op_Body :=\n-                          Build_Protected_Subprogram_Body (\n-                            Op_Body, Pid, Specification (New_Op_Body));\n-\n-                        Insert_After (Current_Node, New_Op_Body);\n-                        Analyze (New_Op_Body);\n+                     Insert_After (Current_Node, New_Op_Body);\n+                     Analyze (New_Op_Body);\n \n-                        Current_Node := New_Op_Body;\n+                     Current_Node := New_Op_Body;\n \n-                        --  Generate an overriding primitive operation body for\n-                        --  this subprogram if the protected type implements\n-                        --  an interface.\n+                     --  Generate an overriding primitive operation body for\n+                     --  this subprogram if the protected type implements\n+                     --  an interface.\n \n-                        if Ada_Version >= Ada_05\n-                          and then Present (Interfaces (\n-                                     Corresponding_Record_Type (Pid)))\n-                        then\n-                           Disp_Op_Body :=\n-                             Build_Dispatching_Subprogram_Body (\n-                               Op_Body, Pid, New_Op_Body);\n+                     if Ada_Version >= Ada_05\n+                       and then Present (Interfaces (\n+                                  Corresponding_Record_Type (Pid)))\n+                     then\n+                        Disp_Op_Body :=\n+                          Build_Dispatching_Subprogram_Body (\n+                            Op_Body, Pid, New_Op_Body);\n \n-                           Insert_After (Current_Node, Disp_Op_Body);\n-                           Analyze (Disp_Op_Body);\n+                        Insert_After (Current_Node, Disp_Op_Body);\n+                        Analyze (Disp_Op_Body);\n \n-                           Current_Node := Disp_Op_Body;\n-                        end if;\n+                        Current_Node := Disp_Op_Body;\n                      end if;\n                   end if;\n                end if;"}, {"sha": "1bb810690e5f6e4810b86b58ea5618ba5013958e", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -81,6 +81,15 @@ package Exp_Ch9 is\n    --  object at the outer level, but it is much easier to generate one per\n    --  declarative part.\n \n+   function Build_Private_Protected_Declaration (N : Node_Id) return Entity_Id;\n+   --  A subprogram body without a previous spec that appears in a protected\n+   --  body must be expanded separately to create a subprogram declaration\n+   --  for it, in order to resolve internal calls to it from other protected\n+   --  operations. It would seem that no locking version of the operation is\n+   --  needed, but in fact, in Ada2005 the subprogram may be used in a call-\n+   --  back, and therefore a protected version of the operation must be\n+   --  generated as well.\n+\n    function Build_Protected_Sub_Specification\n      (N        : Node_Id;\n       Prot_Typ : Entity_Id;"}, {"sha": "cec96452ab118b30b571111e26f63a9a7f43d829", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -158,10 +158,17 @@ procedure Gnat1drv is\n          Front_End_Inlining := False;\n          Inline_Active      := False;\n \n-         --  Turn off ASIS mode: incompatible with front-end expansion.\n+         --  Turn off ASIS mode: incompatible with front-end expansion\n \n          ASIS_Mode := False;\n \n+         --  Disable specific expansions for Restrictions pragmas to avoid\n+         --  tree inconsistencies between compilations with different pragmas\n+         --  that will cause different SCIL files to be generated for the\n+         --  same Ada spec.\n+\n+         Treat_Restrictions_As_Warnings := True;\n+\n          --  Suppress overflow, division by zero and access checks since they\n          --  are handled implicitly by CodePeer.\n "}, {"sha": "507a03cb89f2ad2af7c8265bc9696b7931f94b55", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -1994,61 +1994,7 @@ package body Sem_Ch6 is\n         and then Comes_From_Source (N)\n         and then Is_Protected_Type (Current_Scope)\n       then\n-         declare\n-            Decl     : Node_Id;\n-            Plist    : List_Id;\n-            Formal   : Entity_Id;\n-            New_Spec : Node_Id;\n-\n-         begin\n-            Formal := First_Formal (Body_Id);\n-\n-            --  The protected operation always has at least one formal, namely\n-            --  the object itself, but it is only placed in the parameter list\n-            --  if expansion is enabled.\n-\n-            if Present (Formal)\n-              or else Expander_Active\n-            then\n-               Plist := Copy_Parameter_List (Body_Id);\n-            else\n-               Plist := No_List;\n-            end if;\n-\n-            if Nkind (Body_Spec) = N_Procedure_Specification then\n-               New_Spec :=\n-                 Make_Procedure_Specification (Loc,\n-                    Defining_Unit_Name =>\n-                      Make_Defining_Identifier (Sloc (Body_Id),\n-                        Chars => Chars (Body_Id)),\n-                    Parameter_Specifications => Plist);\n-            else\n-               New_Spec :=\n-                 Make_Function_Specification (Loc,\n-                    Defining_Unit_Name =>\n-                      Make_Defining_Identifier (Sloc (Body_Id),\n-                        Chars => Chars (Body_Id)),\n-                    Parameter_Specifications => Plist,\n-                    Result_Definition =>\n-                      New_Occurrence_Of (Etype (Body_Id), Loc));\n-            end if;\n-\n-            Decl :=\n-              Make_Subprogram_Declaration (Loc,\n-                Specification => New_Spec);\n-            Insert_Before (N, Decl);\n-            Spec_Id := Defining_Unit_Name (New_Spec);\n-\n-            --  Indicate that the entity comes from source, to ensure that\n-            --  cross-reference information is properly generated. The body\n-            --  itself is rewritten during expansion, and the body entity will\n-            --  not appear in calls to the operation.\n-\n-            Set_Comes_From_Source (Spec_Id, True);\n-            Analyze (Decl);\n-            Set_Has_Completion (Spec_Id);\n-            Set_Convention (Spec_Id, Convention_Protected);\n-         end;\n+         Spec_Id := Build_Private_Protected_Declaration (N);\n       end if;\n \n       --  If a separate spec is present, then deal with freezing issues"}, {"sha": "aa1ed1b383019ce11e2ffd7c289d0ee5540549f8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/47bfea3ae84a710416227a4dc8b849decc60e791/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=47bfea3ae84a710416227a4dc8b849decc60e791", "patch": "@@ -1154,6 +1154,14 @@ package body Sem_Prag is\n          String_Val : constant String_Id := Strval (Nam);\n \n       begin\n+         --  We allow duplicated export names in CIL, as they are always\n+         --  enclosed in a namespace that differenciates them, and overloaded\n+         --  entities are supported by the VM.\n+\n+         if VM_Target = CLI_Target then\n+            return;\n+         end if;\n+\n          --  We are only interested in the export case, and in the case of\n          --  generics, it is the instance, not the template, that is the\n          --  problem (the template will generate a warning in any case)."}]}