{"sha": "e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThmNDNkYTZmOWQzNGYxN2YzZTZlNGFkYmY0MmU3OWFkZGI1ZTIxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-08-10T20:47:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-08-10T20:47:55Z"}, "message": "Implement DR 757...\n\n\tImplement DR 757: It's OK for a decl to use a type without linkage\n\tso long as the decl is defined in the current translation unit.\n\t* decl2.c (no_linkage_decls): New vector.\n\t(mark_used): Add decls that use types with no linkage.\n\t(cp_write_global_declarations): Check that they are defined.\n\t(decl_defined_p, no_linkage_error): New fns.\n\t* cp-tree.h (DECL_NO_LINKAGE_CHECKED): New macro.\n\t(struct lang_decl_base): Add flag.\n\t* decl.c (grokfndecl): Don't check type linkage.\n\t(grokvardecl): If the type has no linkage, just make sure\n\tDECL_LANG_SPECIFIC is set.\n\t* pt.c (check_instantiated_arg): Don't check type linkage.\n\t* name-lookup.c (is_local_extern): New fn.\n\t* name-lookup.h: Declare it.\n\nFrom-SVN: r150634", "tree": {"sha": "a4546f632af854bec30da3734e864ea5f11269f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4546f632af854bec30da3734e864ea5f11269f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1b99e26ad5c88a05c7c7ba2fbb05bdc345e9d2"}], "stats": {"total": 306, "additions": 204, "deletions": 102}, "files": [{"sha": "dc9f1cac4d7fe88e60936ee01df0411ff0a556f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -1,3 +1,20 @@\n+2009-08-10  Jason Merrill  <jason@redhat.com>\n+\n+\tImplement DR 757: It's OK for a decl to use a type without linkage\n+\tso long as the decl is defined in the current translation unit.\n+\t* decl2.c (no_linkage_decls): New vector.\n+\t(mark_used): Add decls that use types with no linkage.\n+\t(cp_write_global_declarations): Check that they are defined.\n+\t(decl_defined_p, no_linkage_error): New fns.\n+\t* cp-tree.h (DECL_NO_LINKAGE_CHECKED): New macro.\n+\t(struct lang_decl_base): Add flag.\n+\t* decl.c (grokfndecl): Don't check type linkage.\n+\t(grokvardecl): If the type has no linkage, just make sure\n+\tDECL_LANG_SPECIFIC is set.\n+\t* pt.c (check_instantiated_arg): Don't check type linkage.\n+\t* name-lookup.c (is_local_extern): New fn.\n+\t* name-lookup.h: Declare it.\n+\n 2009-08-05  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/40948"}, {"sha": "ae39110588b1d3ac965bb7034bdbe148a082ca94", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -1579,8 +1579,9 @@ struct GTY(()) lang_decl_base {\n   unsigned anticipated_p : 1;\t\t   /* fn or type */\n   unsigned friend_attr : 1;\t\t   /* fn or type */\n   unsigned template_conv_p : 1;\t\t   /* template only? */\n+  unsigned no_linkage_checked : 1;         /* var or fn */\n   unsigned u2sel : 1;\n-  /* 2 spare bits */\n+  /* 1 spare bit */\n };\n \n /* True for DECL codes which have template info and access.  */\n@@ -1982,6 +1983,14 @@ struct GTY(()) lang_decl {\n   (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n    ->u.base.initialized_in_class)\n \n+/* Nonzero if we've checked whether DECL uses types without linkage in a\n+   potentially invalid way.\n+   ??? Instead, should fix mark_used to only set TREE_USED when we're\n+   really using something, and just return if it's already set.  */\n+#define DECL_NO_LINKAGE_CHECKED(DECL) \\\n+  (DECL_LANG_SPECIFIC (VAR_OR_FUNCTION_DECL_CHECK (DECL)) \\\n+   ->u.base.no_linkage_checked)\n+\n /* Nonzero for DECL means that this decl is just a friend declaration,\n    and should not be added to the list of members for this class.  */\n #define DECL_FRIEND_P(NODE) (DECL_LANG_SPECIFIC (NODE)->u.base.friend_attr)"}, {"sha": "898542f16194081b89dd9b8636d865d2dc359fbd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 60, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -6747,36 +6747,6 @@ grokfndecl (tree ctype,\n \t\t|| decl_function_context (TYPE_MAIN_DECL (ctype))))\n     publicp = 0;\n \n-  if (publicp)\n-    {\n-      /* [basic.link]: A name with no linkage (notably, the name of a class\n-\t or enumeration declared in a local scope) shall not be used to\n-\t declare an entity with linkage.\n-\n-\t Only check this for public decls for now.  See core 319, 389.  */\n-      t = no_linkage_check (TREE_TYPE (decl),\n-\t\t\t    /*relaxed_p=*/false);\n-      if (t)\n-\t{\n-\t  if (TYPE_ANONYMOUS_P (t))\n-\t    {\n-\t      if (DECL_EXTERN_C_P (decl))\n-\t\t/* Allow this; it's pretty common in C.  */;\n-\t      else\n-\t\t{\n-\t\t  permerror (input_location, \"non-local function %q#D uses anonymous type\",\n-\t\t\t      decl);\n-\t\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n-\t\t    permerror (input_location, \"%q+#D does not refer to the unqualified \"\n-\t\t\t       \"type, so it is not used for linkage\",\n-\t\t\t       TYPE_NAME (t));\n-\t\t}\n-\t    }\n-\t  else\n-\t    permerror (input_location, \"non-local function %q#D uses local type %qT\", decl, t);\n-\t}\n-    }\n-\n   TREE_PUBLIC (decl) = publicp;\n   if (! publicp)\n     {\n@@ -7021,36 +6991,13 @@ grokvardecl (tree type,\n \n   if (TREE_PUBLIC (decl))\n     {\n-      /* [basic.link]: A name with no linkage (notably, the name of a class\n-\t or enumeration declared in a local scope) shall not be used to\n-\t declare an entity with linkage.\n-\n-\t Only check this for public decls for now.  */\n-      tree t = no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false);\n-      if (t)\n-\t{\n-\t  if (TYPE_ANONYMOUS_P (t))\n-\t    {\n-\t      if (DECL_EXTERN_C_P (decl))\n-\t\t/* Allow this; it's pretty common in C.  */\n-\t\t  ;\n-\t      else\n-\t\t{\n-\t\t  /* DRs 132, 319 and 389 seem to indicate types with\n-\t\t     no linkage can only be used to declare extern \"C\"\n-\t\t     entities.  Since it's not always an error in the\n-\t\t     ISO C++ 90 Standard, we only issue a warning.  */\n-\t\t  warning (0, \"non-local variable %q#D uses anonymous type\",\n-\t\t\t   decl);\n-\t\t  if (DECL_ORIGINAL_TYPE (TYPE_NAME (t)))\n-\t\t    warning (0, \"%q+#D does not refer to the unqualified \"\n-\t\t\t     \"type, so it is not used for linkage\",\n-\t\t\t     TYPE_NAME (t));\n-\t\t}\n-\t    }\n-\t  else\n-\t    warning (0, \"non-local variable %q#D uses local type %qT\", decl, t);\n-\t}\n+      /* If the type of the decl has no linkage, make sure that we'll\n+\t notice that in mark_used.  */\n+      if (DECL_LANG_SPECIFIC (decl) == NULL\n+\t  && TREE_PUBLIC (decl)\n+\t  && !DECL_EXTERN_C_P (decl)\n+\t  && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n+\tretrofit_lang_decl (decl);\n     }\n   else\n     DECL_INTERFACE_KNOWN (decl) = 1;"}, {"sha": "610d62d2e60755525b4be15528ee1cb9930bb2c8", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -84,6 +84,7 @@ static void write_out_vars (tree);\n static void import_export_class (tree);\n static tree get_guard_bits (tree);\n static void determine_visibility_from_class (tree, tree);\n+static bool decl_defined_p (tree);\n \n /* A list of static class variables.  This is needed, because a\n    static class variable can be declared inside the class without\n@@ -94,6 +95,10 @@ static GTY(()) VEC(tree,gc) *pending_statics;\n    may need to emit outline anyway.  */\n static GTY(()) VEC(tree,gc) *deferred_fns;\n \n+/* A list of decls that use types with no linkage, which we need to make\n+   sure are defined.  */\n+static GTY(()) VEC(tree,gc) *no_linkage_decls;\n+\n /* Nonzero if we're done parsing and into end-of-file activities.  */\n \n int at_eof;\n@@ -3332,6 +3337,40 @@ build_java_method_aliases (void)\n     }\n }\n \n+/* Returns true iff there is a definition available for variable or\n+   function DECL.  */\n+\n+static bool\n+decl_defined_p (tree decl)\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    return (DECL_INITIAL (decl) != NULL_TREE);\n+  else\n+    {\n+      gcc_assert (TREE_CODE (decl) == VAR_DECL);\n+      return !DECL_EXTERNAL (decl);\n+    }\n+}\n+\n+/* Complain that DECL uses a type with no linkage but is never defined.  */\n+\n+static void\n+no_linkage_error (tree decl)\n+{\n+  tree t = no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false);\n+  if (TYPE_ANONYMOUS_P (t))\n+    {\n+      permerror (0, \"%q+#D, declared using anonymous type, \"\n+\t\t \"is used but never defined\", decl);\n+      if (is_typedef_decl (TYPE_NAME (t)))\n+\tpermerror (0, \"%q+#D does not refer to the unqualified type, \"\n+\t\t   \"so it is not used for linkage\", TYPE_NAME (t));\n+    }\n+  else\n+    permerror (0, \"%q+#D, declared using local type %qT, \"\n+\t       \"is used but never defined\", decl, t);\n+}\n+\n /* This routine is called at the end of compilation.\n    Its job is to create all the code needed to initialize and\n    destroy the global aggregates.  We do the destruction\n@@ -3613,6 +3652,11 @@ cp_write_global_declarations (void)\n \t}\n     }\n \n+  /* So must decls that use a type with no linkage.  */\n+  for (i = 0; VEC_iterate (tree, no_linkage_decls, i, decl); ++i)\n+    if (!decl_defined_p (decl))\n+      no_linkage_error (decl);\n+\n   /* We give C linkage to static constructors and destructors.  */\n   push_lang_context (lang_name_c);\n \n@@ -3851,6 +3895,32 @@ mark_used (tree decl)\n   if (processing_template_decl)\n     return;\n \n+  /* DR 757: A type without linkage shall not be used as the type of a\n+     variable or function with linkage, unless\n+   o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n+   o the variable or function is not used (3.2 [basic.def.odr]) or is\n+   defined in the same translation unit.  */\n+  if (TREE_PUBLIC (decl)\n+      && (TREE_CODE (decl) == FUNCTION_DECL\n+\t  || TREE_CODE (decl) == VAR_DECL)\n+      && DECL_LANG_SPECIFIC (decl)\n+      && !DECL_NO_LINKAGE_CHECKED (decl))\n+    {\n+      DECL_NO_LINKAGE_CHECKED (decl) = true;\n+      if (!DECL_EXTERN_C_P (decl)\n+\t  && !DECL_ARTIFICIAL (decl)\n+\t  && !decl_defined_p (decl)\n+\t  && no_linkage_check (TREE_TYPE (decl), /*relaxed_p=*/false))\n+\t{\n+\t  if (is_local_extern (decl))\n+\t    /* There's no way to define a local extern, and adding it to\n+\t       the vector interferes with GC, so give an error now.  */\n+\t    no_linkage_error (decl);\n+\t  else\n+\t    VEC_safe_push (tree, gc, no_linkage_decls, decl);\n+\t}\n+    }\n+\n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl)\n       && !TREE_ASM_WRITTEN (decl))\n     /* Remember it, so we can check it was defined.  */"}, {"sha": "feb2cf280d138af1be7068de96f5e27356b0df44", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -4392,6 +4392,34 @@ lookup_name_innermost_nonclass_level (tree name)\n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, t);\n }\n \n+/* Returns true iff DECL is a block-scope extern declaration of a function\n+   or variable.  */\n+\n+bool\n+is_local_extern (tree decl)\n+{\n+  cxx_binding *binding;\n+\n+  /* For functions, this is easy.  */\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    return DECL_LOCAL_FUNCTION_P (decl);\n+\n+  if (TREE_CODE (decl) != VAR_DECL)\n+    return false;\n+  if (!current_function_decl)\n+    return false;\n+\n+  /* For variables, this is not easy.  We need to look at the binding stack\n+     for the identifier to see whether the decl we have is a local.  */\n+  for (binding = IDENTIFIER_BINDING (DECL_NAME (decl));\n+       binding && binding->scope->kind != sk_namespace;\n+       binding = binding->previous)\n+    if (binding->value == decl)\n+      return LOCAL_BINDING_P (binding);\n+\n+  return false;\n+}\n+\n /* Like lookup_name_innermost_nonclass_level, but for types.  */\n \n static tree"}, {"sha": "7a3625a2926127034c325848c5a6c000829699d9", "filename": "gcc/cp/name-lookup.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fname-lookup.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fname-lookup.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.h?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -318,6 +318,7 @@ extern tree remove_hidden_names (tree);\n extern tree lookup_qualified_name (tree, tree, bool, bool);\n extern tree lookup_name_nonclass (tree);\n extern tree lookup_name_innermost_nonclass_level (tree);\n+extern bool is_local_extern (tree);\n extern tree lookup_function_nonclass (tree, VEC(tree,gc) *, bool);\n extern void push_local_binding (tree, tree, int);\n extern bool pushdecl_class_level (tree);"}, {"sha": "36f1b00fa6b8d17d19e19c23c06c1438b3975985", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -12215,7 +12215,7 @@ tsubst_copy_and_build (tree t,\n }\n \n /* Verify that the instantiated ARGS are valid. For type arguments,\n-   make sure that the type's linkage is ok. For non-type arguments,\n+   make sure that the type is not variably modified. For non-type arguments,\n    make sure they are constants if they are integral or enumerations.\n    Emit an error under control of COMPLAIN, and return TRUE on error.  */\n \n@@ -12236,30 +12236,7 @@ check_instantiated_arg (tree tmpl, tree t, tsubst_flags_t complain)\n     }\n   else if (TYPE_P (t))\n     {\n-      /* [basic.link]: A name with no linkage (notably, the name\n-\t of a class or enumeration declared in a local scope)\n-\t shall not be used to declare an entity with linkage.\n-\t This implies that names with no linkage cannot be used as\n-\t template arguments.  */\n-      tree nt = no_linkage_check (t, /*relaxed_p=*/false);\n-\n-      if (nt)\n-\t{\n-\t  /* DR 488 makes use of a type with no linkage cause\n-\t     type deduction to fail.  */\n-\t  if (complain & tf_error)\n-\t    {\n-\t      if (TYPE_ANONYMOUS_P (nt))\n-\t\terror (\"%qT is/uses anonymous type\", t);\n-\t      else\n-\t\terror (\"template argument for %qD uses local type %qT\",\n-\t\t       tmpl, t);\n-\t    }\n-\t  return true;\n-\t}\n-      /* In order to avoid all sorts of complications, we do not\n-\t allow variably-modified types as template arguments.  */\n-      else if (variably_modified_type_p (t, NULL_TREE))\n+      if (variably_modified_type_p (t, NULL_TREE))\n \t{\n \t  if (complain & tf_error)\n \t    error (\"%qT is a variably modified type\", t);"}, {"sha": "bea2eaaa822517d8d3f3b66553a38a70dc4961a7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -1,3 +1,18 @@\n+2009-08-10  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/other/linkage2.C: New test for types-without-linkage\n+\thandling.\n+\t* g++.dg/ext/anon-struct4.C: No error about anonymous type.\n+\t* g++.dg/lookup/anon2.C: Likewise.\n+\t* g++.dg/other/anon3.C: Likewise.\n+\t* g++.dg/template/arg2.C: Likewise.\n+\t* g++.dg/template/local4.C: Likewise.\n+\t* g++.old-deja/g++.law/operators32.C: Likewise.\n+\t* g++.old-deja/g++.other/linkage2.C: Likewise.\n+\t* g++.old-deja/g++.pt/enum6.C: Likewise.\n+\t* g++.old-deja/g++.other/anon9.C: Use the undefined decls.\n+\t* g++.old-deja/g++.other/linkage1.C: Likewise.\n+\n 2009-08-10  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n        * gcc.dg/dg.exp: Test also c-c++-common dir."}, {"sha": "53302d84b79097dd24320f1ceb23a19199d7ec18", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -1,4 +1,3 @@\n // PR c++/14401\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"uninitialized\" \"uninit\" }\n-// { dg-warning \"anonymous\" \"anon\" { target *-*-* } 3 }"}, {"sha": "3143b62fd33ae41c9d129af800e385a7c8df0c4f", "filename": "gcc/testsuite/g++.dg/lookup/anon2.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -1,9 +1,9 @@\n // { dg-do compile }\n // { dg-options \"\" }\n \n-// Make sure we issue a diagnostic if a type with no linkage is used\n-// to declare a a variable that has linkage.\n+// Make sure we don't issue a diagnostic if a type with no linkage is used\n+// to declare a a variable that has linkage if that variable is defined.\n \n-struct { int i; } a; // { dg-warning \"anonymous type\" }\n+struct { int i; } a;\n \n void foo() { a.i; }"}, {"sha": "87cbfb544cd1259e2d7894ebb2b2a6408b30c969", "filename": "gcc/testsuite/g++.dg/other/anon3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -4,4 +4,4 @@\n \n // { dg-do compile }\n \n-enum { a = 3 } x; // { dg-warning \"anonymous type\" }\n+enum { a = 3 } x;"}, {"sha": "4e3e6f1eab3d264540535c194a9cfb51f79514ea", "filename": "gcc/testsuite/g++.dg/other/linkage2.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Flinkage2.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -0,0 +1,31 @@\n+// DR 743: A type without linkage shall not be used as the type of a\n+//     variable or function with linkage, unless\n+//   o the variable or function has extern \"C\" linkage (7.5 [dcl.link]), or\n+//   o the variable or function is not used (3.2 [basic.def.odr]) or is\n+//   defined in the same translation unit.\n+\n+template <typename T> struct B {\n+  void g(T){}\n+  void h(T);\t\t\t// { dg-error \"never defined\" }\n+  friend void i(B, T){}\n+  static T t1;\t\t\t// { dg-error \"never defined\" }\n+  static T t2;\n+};\n+\n+template <typename T> T B<T>::t2 = { };\n+\n+enum {} e1;\t\t\t// OK, defined\n+extern enum {} e2;\t\t// { dg-error \"never defined\" }\n+extern \"C\" enum {} e3;\t\t// OK, extern \"C\"\n+\n+void f() {\n+  struct A { int x; };  // no linkage\n+  A a = {1};\n+  B<A> ba;              // declares B<A>::g(A) and B<A>::h(A)\n+  ba.t1 = a;\t\t// error, B<T>::t never defined\n+  ba.t2 = a;\t\t// OK\n+  ba.g(a);              // OK\n+  ba.h(a);              // error, B<T>::h never defined\n+  i(ba, a);             // OK\n+  e1+e2+e3;\n+}"}, {"sha": "1314b258fef987f55b2ef49904314d7159a2df24", "filename": "gcc/testsuite/g++.dg/template/arg2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farg2.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -10,5 +10,5 @@ template <typename T> class X {};\n void fn ()\n {\n   class L {};\n-  X<L> f; // { dg-error \"uses local type|trying to instantiate|no type|invalid type\" \"\" }\n+  X<L> f;\n }"}, {"sha": "41e2370c39510b91ed6a968267102ceff71505c0", "filename": "gcc/testsuite/g++.dg/template/local4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal4.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -4,5 +4,5 @@ template <typename T> void foo() {}\n \n int main () {\n   struct S {};\n-  foo<S> (); // { dg-error \"match\" } \n+  foo<S> ();\n }"}, {"sha": "89f0b6601aa3cd09b506a56bf8c4abdc02592495", "filename": "gcc/testsuite/g++.old-deja/g++.law/operators32.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Foperators32.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -49,7 +49,7 @@ foo() {std::cout << \"foo created\" << std::endl; }\n };\n \n foo **f2;\n-allocate2d(d1, d2, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n-ffree(d1, f2);// { dg-error \"\" }  type.*// ERROR -    trying to.*\n+allocate2d(d1, d2, f2);\n+ffree(d1, f2);\n \n }"}, {"sha": "f4b192337c1d5d9f62b52d690e3405f66648bdbc", "filename": "gcc/testsuite/g++.old-deja/g++.other/anon9.C", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fanon9.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -4,3 +4,8 @@\n \n typedef const struct { int i; } T; // { dg-error \"\" } referenced below\n void f (T* t);\t\t\t// { dg-error \"\" } uses unnamed type\n+\n+int main()\n+{\n+  f(0);\n+}"}, {"sha": "de9a6accf18a3286dd18351d107a9209e5efcd34", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage1.C", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage1.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -3,13 +3,16 @@ typedef struct {\n   int i;\n } *p;\n \n-void f (p) { }\t\t\t// { dg-error \"uses anonymous type\" }\n-p q;\t\t\t\t// { dg-warning \"uses anonymous type\" } \n+void f (p) { }\n+p q;\n \n int main()\n {\n-  extern p j;\t\t\t// { dg-warning \"uses anonymous type\" }\n+  extern p j;\t\t\t// { dg-error \"anonymous type\" }\n+  j+1;\n   struct A { int j; };\n-  extern A a;\t\t\t// { dg-warning \"uses local type\" }\n-  extern void f (A);\t\t// { dg-error \"uses local type\" }\n+  extern A a;\t\t\t// { dg-error \"local type\" }\n+  a.j+1;\n+  extern void f (A);\t\t// { dg-error \"local type\" }\n+  f(a);\n }"}, {"sha": "64f74f7292c2001934cc8cf76855a711f9d61bcf", "filename": "gcc/testsuite/g++.old-deja/g++.other/linkage2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Flinkage2.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -7,7 +7,7 @@ extern GDBM_FILE gdbm_open();\n }\n \n typedef struct { int dummy[10]; } *FAIL_FILE;\n-extern FAIL_FILE fail_open(); // { dg-error \"\" } non-local function\n+extern FAIL_FILE fail_open(); // OK because it's never used\n \n typedef struct { int dummy[10]; } *SUCCESS_FILE, S;\n extern SUCCESS_FILE success_open();"}, {"sha": "561254d0d68d7188a2d251f77fbea608ca566f40", "filename": "gcc/testsuite/g++.old-deja/g++.pt/enum6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8f43da6f9d34f17f3e6e4adbf42e79addb5e217/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fenum6.C?ref=e8f43da6f9d34f17f3e6e4adbf42e79addb5e217", "patch": "@@ -8,7 +8,7 @@ void fn(T)\n {\n   enum tern { H, L, X, U };\n \n-  vector<tern> ternvec; // { dg-error \"\" } composed from a local type\n+  vector<tern> ternvec;\n }\n \n template void fn(int);"}]}