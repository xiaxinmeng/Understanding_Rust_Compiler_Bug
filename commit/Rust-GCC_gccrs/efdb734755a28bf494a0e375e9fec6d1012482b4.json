{"sha": "efdb734755a28bf494a0e375e9fec6d1012482b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkYjczNDc1NWEyOGJmNDk0YTBlMzc1ZTlmZWM2ZDEwMTI0ODJiNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2009-05-05T21:32:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2009-05-05T21:32:38Z"}, "message": "re PR libstdc++/39909 (non-TLS version of std::call_once causes terminate)\n\n2009-05-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/39909\n\t* include/std/mutex (__get_once_functor_lock, __get_once_mutex,\n\t__set_once_functor_lock_ptr): Replace global lock object with local\n\tlocks on global mutex.\n\t* src/mutex.cc (__get_once_functor_lock, __get_once_mutex,\n\t__set_once_functor_lock_ptr): Likewise, keeping old function to\n\tpreserve ABI.\n\t(__once_proxy): Use pointer to local lock if set, global lock\n\totherwise.\n\t* config/abi/pre/gnu.ver: Add new symbols to new ABI version.\n\t* testsuite/util/testsuite_abi.cc: Add GLIBCX_3.4.12 version.\n\t* testsuite/30_threads/call_once/39909.cc: New.\n\nFrom-SVN: r147137", "tree": {"sha": "7872cbd2d5e29eb4cc6cb620d05574769ca67a24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7872cbd2d5e29eb4cc6cb620d05574769ca67a24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efdb734755a28bf494a0e375e9fec6d1012482b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdb734755a28bf494a0e375e9fec6d1012482b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efdb734755a28bf494a0e375e9fec6d1012482b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efdb734755a28bf494a0e375e9fec6d1012482b4/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f579f6ebde02d94ac8fbd0379b1d0207dd9ac5"}], "stats": {"total": 127, "additions": 116, "deletions": 11}, "files": [{"sha": "3ff387c17cece99d58682473c11d5beaccbd7c00", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -1,3 +1,18 @@\n+2009-05-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/39909\n+\t* include/std/mutex (__get_once_functor_lock, __get_once_mutex,\n+\t__set_once_functor_lock_ptr): Replace global lock object with local\n+\tlocks on global mutex.\n+\t* src/mutex.cc (__get_once_functor_lock, __get_once_mutex,\n+\t__set_once_functor_lock_ptr): Likewise, keeping old function to\n+\tpreserve ABI.\n+\t(__once_proxy): Use pointer to local lock if set, global lock\n+\totherwise.\n+\t* config/abi/pre/gnu.ver: Add new symbols to new ABI version.\n+\t* testsuite/util/testsuite_abi.cc: Add GLIBCX_3.4.12 version.\n+\t* testsuite/30_threads/call_once/39909.cc: New.\n+\n 2009-05-03  Jan Hubicka  <jh@suse.cz>\n \n \t* include/parallel/settings.h (get): Mark const."}, {"sha": "240e7bcf09bb24d18ec501122aded30e344d6271", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -958,6 +958,14 @@ GLIBCXX_3.4.11 {\n \n } GLIBCXX_3.4.10;\n \n+GLIBCXX_3.4.12 {\n+\n+    # mutex\n+    _ZSt27__set_once_functor_lock_ptrPSt11unique_lockISt5mutexE;\n+    _ZSt16__get_once_mutexv;\n+\n+} GLIBCXX_3.4.11;\n+\n # Symbols in the support library (libsupc++) have their own tag.\n CXXABI_1.3 {\n "}, {"sha": "c090608cb53120b68ac62f524ea5caf5e676061d", "filename": "libstdc++-v3/include/std/mutex", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmutex?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -729,8 +729,11 @@ namespace std\n #else\n   extern function<void()> __once_functor;\n \n-  extern unique_lock<mutex>&\n-  __get_once_functor_lock();\n+  extern void\n+  __set_once_functor_lock_ptr(unique_lock<mutex>*);\n+\n+  extern mutex&\n+  __get_once_mutex();\n #endif\n \n   extern \"C\" void __once_proxy();\n@@ -745,16 +748,16 @@ namespace std\n       __once_callable = &__bound_functor;\n       __once_call = &__once_call_impl<decltype(__bound_functor)>;\n #else\n-      unique_lock<mutex>& __functor_lock = __get_once_functor_lock();\n-      __functor_lock.lock();\n+      unique_lock<mutex> __functor_lock(__get_once_mutex());\n       __once_functor = bind(__f, __args...);\n+      __set_once_functor_lock_ptr(&__functor_lock);\n #endif\n \n       int __e = __gthread_once(&(__once._M_once), &__once_proxy);\n \n #ifndef _GLIBCXX_HAVE_TLS\n       if (__functor_lock)\n-\t__functor_lock.unlock();\n+        __set_once_functor_lock_ptr(0);\n #endif\n \n       if (__e)"}, {"sha": "fcc1eb97a8913e7083067a7e7a31c249f61c2fa8", "filename": "libstdc++-v3/src/mutex.cc", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmutex.cc?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -28,11 +28,11 @@\n #ifndef _GLIBCXX_HAVE_TLS\n namespace\n {\n-  std::mutex&\n-  get_once_mutex()\n+  inline std::unique_lock<std::mutex>*&\n+  __get_once_functor_lock_ptr()\n   {\n-    static std::mutex once_mutex;\n-    return once_mutex;\n+    static std::unique_lock<std::mutex>* __once_functor_lock_ptr = 0;\n+    return __once_functor_lock_ptr;\n   }\n }\n #endif\n@@ -55,10 +55,25 @@ namespace std\n   template class function<void()>;\n   function<void()> __once_functor;\n \n+  mutex&\n+  __get_once_mutex()\n+  {\n+    static mutex once_mutex;\n+    return once_mutex;\n+  }\n+\n+  // code linked against ABI 3.4.12 and later uses this\n+  void\n+  __set_once_functor_lock_ptr(unique_lock<mutex>* __ptr)\n+  {\n+    __get_once_functor_lock_ptr() = __ptr;\n+  }\n+\n+  // unsafe - retained for compatibility with ABI 3.4.11\n   unique_lock<mutex>&\n   __get_once_functor_lock()\n   {\n-    static unique_lock<mutex> once_functor_lock(get_once_mutex(), defer_lock);\n+    static unique_lock<mutex> once_functor_lock(__get_once_mutex(), defer_lock);\n     return once_functor_lock;\n   }\n #endif\n@@ -69,7 +84,14 @@ namespace std\n     {\n #ifndef _GLIBCXX_HAVE_TLS\n       function<void()> __once_call = std::move(__once_functor);\n-      __get_once_functor_lock().unlock();\n+      if (unique_lock<mutex>* __lock = __get_once_functor_lock_ptr())\n+      {\n+        // caller is using new ABI and provided lock ptr\n+        __get_once_functor_lock_ptr() = 0;\n+        __lock->unlock();\n+      }\n+      else\n+        __get_once_functor_lock().unlock();  // global lock\n #endif\n       __once_call();\n     }"}, {"sha": "aa125919bf801cbc96e3205baf836dbb4b24647b", "filename": "libstdc++-v3/testsuite/30_threads/call_once/39909.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcall_once%2F39909.cc?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <mutex>\n+#include <thread>\n+#include <testsuite_hooks.h>\n+\n+std::once_flag flag;\n+int value = 0;\n+\n+struct Inc { void operator()() const { ++value; } };\n+\n+struct Func\n+{\n+   void operator()() const\n+   {\n+       Inc inc;\n+       for (int i = 0; i < 10000;  ++i)\n+           std::call_once(flag, inc);\n+   }\n+};\n+\n+int main()\n+{\n+   Func f;\n+   std::thread t1(f);\n+   std::thread t2(f);\n+   std::thread t3(f);\n+   t1.join();\n+   t2.join();\n+   t3.join();\n+   VERIFY( value == 1 );\n+   return 0;\n+}"}, {"sha": "ca1bb912ce5a14c01155726e0d24cd4fd1f0d780", "filename": "libstdc++-v3/testsuite/util/testsuite_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efdb734755a28bf494a0e375e9fec6d1012482b4/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_abi.cc?ref=efdb734755a28bf494a0e375e9fec6d1012482b4", "patch": "@@ -183,6 +183,7 @@ check_version(symbol& test, bool added)\n       known_versions.push_back(\"GLIBCXX_3.4.9\");\n       known_versions.push_back(\"GLIBCXX_3.4.10\");\n       known_versions.push_back(\"GLIBCXX_3.4.11\");\n+      known_versions.push_back(\"GLIBCXX_3.4.12\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.7\");\n       known_versions.push_back(\"GLIBCXX_LDBL_3.4.10\");"}]}