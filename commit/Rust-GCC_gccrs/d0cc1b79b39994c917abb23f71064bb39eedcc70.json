{"sha": "d0cc1b79b39994c917abb23f71064bb39eedcc70", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBjYzFiNzliMzk5OTRjOTE3YWJiMjNmNzEwNjRiYjM5ZWVkY2M3MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T19:23:58Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-08T19:23:58Z"}, "message": "cselib, reload: Fix cselib ICE on m68k/microblaze [PR94526]\n\nThe following testcase ICEs on m68k (and another one Jeff mailed me\nprivately on microblaze).\nThe problem is that reload creates two DEBUG_INSNs with the same\nvalue of (plus:P (reg:P sp) (const_int 0)), we compute correctly the\nsame hash value for them, but then don't find them in the cselib hash table,\nas rtx_equal_for_cselib_1 thinks it is different from (reg:P sp),\nand trigger an assertion failure that requires that from two different debug\ninsns one doesn't add locations to VALUEs.\n\nThe patch has two fixes for this, each fixes the ICE on both targets\nseparately, but I think we want both.\n\nThe cselib.c change ensures that rtx_equal_for_cselib_1 considers\n(value:P sp_derived_value) and (plus:P (reg:P sp) (const_int 0)) equivalent.\n\nThe reload1.c change makes sure we don't create those bogus plus 0\nexpressions.  I understand the reasons for creating them, but they don't\nreally apply to DEBUG_INSNs; we don't have validity matching there, all we\ncare is that the expressions aren't arbitrarily deep, but it is just fine\nto fold x + 0 into just x in there.\n\n2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/94526\n\t* cselib.c (autoinc_split): Handle e->val_rtx being SP_DERIVED_VALUE_P\n\twith zero offset.\n\t* reload1.c (eliminate_regs_1): Avoid creating\n\t(plus (reg) (const_int 0)) in DEBUG_INSNs.\n\n\t* gcc.dg/pr94526.c: New test.", "tree": {"sha": "226a45ee459c36319c0b4f4f18c1a666d186e9c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226a45ee459c36319c0b4f4f18c1a666d186e9c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0cc1b79b39994c917abb23f71064bb39eedcc70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cc1b79b39994c917abb23f71064bb39eedcc70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0cc1b79b39994c917abb23f71064bb39eedcc70", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cc1b79b39994c917abb23f71064bb39eedcc70/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f52eb4f988992d393c69ee4ab76f236dced80e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52eb4f988992d393c69ee4ab76f236dced80e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52eb4f988992d393c69ee4ab76f236dced80e36"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "20fe7e2ac637398d046c46ac6c0beecca549ae60", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0cc1b79b39994c917abb23f71064bb39eedcc70", "patch": "@@ -1,5 +1,11 @@\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/94526\n+\t* cselib.c (autoinc_split): Handle e->val_rtx being SP_DERIVED_VALUE_P\n+\twith zero offset.\n+\t* reload1.c (eliminate_regs_1): Avoid creating\n+\t(plus (reg) (const_int 0)) in DEBUG_INSNs.\n+\n \tPR tree-optimization/94524\n \t* tree-vect-generic.c (expand_vector_divmod): If any elt of op1 is\n \tnegative for signed TRUNC_MOD_EXPR, multiply with absolute value of"}, {"sha": "0de683617d1e2dae64b0122d1af6572028680f05", "filename": "gcc/cselib.c", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=d0cc1b79b39994c917abb23f71064bb39eedcc70", "patch": "@@ -884,21 +884,29 @@ autoinc_split (rtx x, rtx *off, machine_mode memmode)\n       else\n \te = cselib_lookup (x, GET_MODE (x), 0, memmode);\n       if (e)\n-\tfor (struct elt_loc_list *l = e->locs; l; l = l->next)\n-\t  if (GET_CODE (l->loc) == PLUS\n-\t      && GET_CODE (XEXP (l->loc, 0)) == VALUE\n-\t      && SP_DERIVED_VALUE_P (XEXP (l->loc, 0))\n-\t      && CONST_INT_P (XEXP (l->loc, 1)))\n+\t{\n+\t  if (SP_DERIVED_VALUE_P (e->val_rtx)\n+\t      && (*off == NULL_RTX || *off == const0_rtx))\n \t    {\n-\t      if (*off == NULL_RTX)\n-\t\t*off = XEXP (l->loc, 1);\n-\t      else\n-\t\t*off = plus_constant (Pmode, *off,\n-\t\t\t\t      INTVAL (XEXP (l->loc, 1)));\n-\t      if (*off == const0_rtx)\n-\t\t*off = NULL_RTX;\n-\t      return XEXP (l->loc, 0);\n+\t      *off = NULL_RTX;\n+\t      return e->val_rtx;\n \t    }\n+\t  for (struct elt_loc_list *l = e->locs; l; l = l->next)\n+\t    if (GET_CODE (l->loc) == PLUS\n+\t\t&& GET_CODE (XEXP (l->loc, 0)) == VALUE\n+\t\t&& SP_DERIVED_VALUE_P (XEXP (l->loc, 0))\n+\t\t&& CONST_INT_P (XEXP (l->loc, 1)))\n+\t      {\n+\t\tif (*off == NULL_RTX)\n+\t\t  *off = XEXP (l->loc, 1);\n+\t\telse\n+\t\t  *off = plus_constant (Pmode, *off,\n+\t\t\t\t\tINTVAL (XEXP (l->loc, 1)));\n+\t\tif (*off == const0_rtx)\n+\t\t  *off = NULL_RTX;\n+\t\treturn XEXP (l->loc, 0);\n+\t      }\n+\t}\n     }\n   return x;\n }"}, {"sha": "88f4727d5453dd0b406fc22838274a3a7bb1eb5c", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d0cc1b79b39994c917abb23f71064bb39eedcc70", "patch": "@@ -2607,8 +2607,9 @@ eliminate_regs_1 (rtx x, machine_mode mem_mode, rtx insn,\n \t\t   structure of the insn in a way that reload can't handle.\n \t\t   We special-case the commonest situation in\n \t\t   eliminate_regs_in_insn, so just replace a PLUS with a\n-\t\t   PLUS here, unless inside a MEM.  */\n-\t\tif (mem_mode != 0\n+\t\t   PLUS here, unless inside a MEM.  In DEBUG_INSNs, it is\n+\t\t   always ok to replace a PLUS with just a REG.  */\n+\t\tif ((mem_mode != 0 || (insn && DEBUG_INSN_P (insn)))\n \t\t    && CONST_INT_P (XEXP (x, 1))\n \t\t    && known_eq (INTVAL (XEXP (x, 1)), -ep->previous_offset))\n \t\t  return ep->to_rtx;"}, {"sha": "6f26fc6cdc275b162c826d54a084aef028000ca4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0cc1b79b39994c917abb23f71064bb39eedcc70", "patch": "@@ -1,5 +1,8 @@\n 2020-04-08  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/94526\n+\t* gcc.dg/pr94526.c: New test.\n+\n \tPR tree-optimization/94524\n \t* gcc.c-torture/execute/pr94524-1.c: New test.\n \t* gcc.c-torture/execute/pr94524-2.c: New test."}, {"sha": "9864c4c311392b52200f66bf888e963e685d82ec", "filename": "gcc/testsuite/gcc.dg/pr94526.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94526.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0cc1b79b39994c917abb23f71064bb39eedcc70/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94526.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94526.c?ref=d0cc1b79b39994c917abb23f71064bb39eedcc70", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/94526 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+struct S { int val[8 * sizeof (int)]; };\n+\n+void\n+foo (struct S *x)\n+{\n+  struct S *a = x;\n+}\n+\n+void baz (struct S);\n+\n+void\n+bar (void)\n+{\n+  struct S b;\n+  foo (&b);\n+  baz (b);\n+}"}]}