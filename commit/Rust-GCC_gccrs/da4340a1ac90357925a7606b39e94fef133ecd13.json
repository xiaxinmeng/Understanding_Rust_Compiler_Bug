{"sha": "da4340a1ac90357925a7606b39e94fef133ecd13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE0MzQwYTFhYzkwMzU3OTI1YTc2MDZiMzllOTRmZWYxMzNlY2QxMw==", "commit": {"author": {"name": "Thomas Koenig", "email": "Thomas.Koenig@online.de", "date": "2006-06-15T10:30:09Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2006-06-15T10:30:09Z"}, "message": "trans-array.h (gfc_trans_create_temp_array): Add bool argument.\n\n2006-06-15  Thomas Koenig <Thomas.Koenig@online.de>\n\n\t* trans-array.h (gfc_trans_create_temp_array):  Add bool\n\targument.\n\t* trans-arrray.c (gfc_trans_create_temp_array): Add extra\n\targument \"function\" to show if we are translating a function.\n\tIf we are translating a function, perform checks whether\n\tthe size along any argument is negative.  In that case,\n\tallocate size 0.\n\t(gfc_trans_allocate_storage):  Add function argument (as\n\tfalse) to gfc_trans_create_temp_array call.\n\t* trans-expr.c (gfc_conv_function_call):  Add function\n\targument (as true) to gfc_trans_create_temp_array call.\n\t* trans-stmt.c (gfc_conv_elemental_dependencies): Add\n\tfunction argument (as false) to gfc_trans_create_temp_array\n\tcall.\n\t* trans-intrinsic.c:  Likewise.\n\n2006-06-15  Thomas Koenig <Thomas.Koenig@online.de>\n\n\t* gfortran.dg/allocate_zerosize_2.f90:  New test case.\n\nFrom-SVN: r114677", "tree": {"sha": "06d0b13a15e2aaf26aced996353a9955adcfce96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06d0b13a15e2aaf26aced996353a9955adcfce96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da4340a1ac90357925a7606b39e94fef133ecd13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4340a1ac90357925a7606b39e94fef133ecd13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da4340a1ac90357925a7606b39e94fef133ecd13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da4340a1ac90357925a7606b39e94fef133ecd13/comments", "author": null, "committer": null, "parents": [{"sha": "e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8"}], "stats": {"total": 115, "additions": 104, "deletions": 11}, "files": [{"sha": "d94a7487c895bf1feac5f54ce2ffcc3d7b95d3a1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -1,3 +1,21 @@\n+2006-06-15  Thomas Koenig <Thomas.Koenig@online.de>\n+\n+\t* trans-array.h (gfc_trans_create_temp_array):  Add bool\n+\targument.\n+\t* trans-arrray.c (gfc_trans_create_temp_array): Add extra\n+\targument \"function\" to show if we are translating a function.\n+\tIf we are translating a function, perform checks whether\n+\tthe size along any argument is negative.  In that case,\n+\tallocate size 0.\n+\t(gfc_trans_allocate_storage):  Add function argument (as\n+\tfalse) to gfc_trans_create_temp_array call.\n+\t* trans-expr.c (gfc_conv_function_call):  Add function\n+\targument (as true) to gfc_trans_create_temp_array call.\n+\t* trans-stmt.c (gfc_conv_elemental_dependencies): Add\n+\tfunction argument (as false) to gfc_trans_create_temp_array\n+\tcall.\n+\t* trans-intrinsic.c:  Likewise.\n+\n 2006-06-10  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/24558"}, {"sha": "a8a8aa6d1203b026e5ba8d7942cd74604a684018", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -575,13 +575,20 @@ tree\n gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n \t\t\t     gfc_loopinfo * loop, gfc_ss_info * info,\n \t\t\t     tree eltype, bool dynamic, bool dealloc,\n-\t\t\t     bool callee_alloc)\n+\t\t\t     bool callee_alloc, bool function)\n {\n   tree type;\n   tree desc;\n   tree tmp;\n   tree size;\n   tree nelem;\n+  tree cond;\n+  tree or_expr;\n+  tree thencase;\n+  tree elsecase;\n+  tree var;\n+  stmtblock_t thenblock;\n+  stmtblock_t elseblock;\n   int n;\n   int dim;\n \n@@ -633,6 +640,8 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n      size = size * sizeof(element);\n   */\n \n+  or_expr = NULL_TREE;\n+\n   for (n = 0; n < info->dimen; n++)\n     {\n       if (loop->to[n] == NULL_TREE)\n@@ -660,17 +669,55 @@ gfc_trans_create_temp_array (stmtblock_t * pre, stmtblock_t * post,\n       tmp = fold_build2 (PLUS_EXPR, gfc_array_index_type,\n \t\t\t loop->to[n], gfc_index_one_node);\n \n+      if (function)\n+\t{\n+\t  /* Check wether the size for this dimension is negative.  */\n+\t  cond = fold_build2 (LE_EXPR, boolean_type_node, tmp,\n+\t\t\t  gfc_index_zero_node);\n+\n+\t  cond = gfc_evaluate_now (cond, pre);\n+\n+\t  if (n == 0)\n+\t    or_expr = cond;\n+\t  else\n+\t    or_expr = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, or_expr, cond);\n+\t}\n       size = fold_build2 (MULT_EXPR, gfc_array_index_type, size, tmp);\n       size = gfc_evaluate_now (size, pre);\n     }\n \n   /* Get the size of the array.  */\n-  nelem = size;\n+\n   if (size && !callee_alloc)\n-    size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n-\t\t\tTYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+    {\n+      if (function)\n+\t{\n+\t  var = gfc_create_var (TREE_TYPE (size), \"size\");\n+\t  gfc_start_block (&thenblock);\n+\t  gfc_add_modify_expr (&thenblock, var, gfc_index_zero_node);\n+\t  thencase = gfc_finish_block (&thenblock);\n+\n+\t  gfc_start_block (&elseblock);\n+\t  gfc_add_modify_expr (&elseblock, var, size);\n+\t  elsecase = gfc_finish_block (&elseblock);\n+\t  \n+\t  tmp = gfc_evaluate_now (or_expr, pre);\n+\t  tmp = build3_v (COND_EXPR, tmp, thencase, elsecase);\n+\t  gfc_add_expr_to_block (pre, tmp);\n+\t  nelem = var;\n+\t  size = var;\n+\t}\n+      else\n+\t  nelem = size;\n+\n+      size = fold_build2 (MULT_EXPR, gfc_array_index_type, size,\n+\t\t\t  TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+    }\n   else\n-    size = NULL_TREE;\n+    {\n+      nelem = size;\n+      size = NULL_TREE;\n+    }\n \n   gfc_trans_allocate_array_storage (pre, post, info, size, nelem, dynamic,\n \t\t\t            dealloc);\n@@ -1421,7 +1468,7 @@ gfc_trans_array_constructor (gfc_loopinfo * loop, gfc_ss * ss)\n     }\n \n   gfc_trans_create_temp_array (&loop->pre, &loop->post, loop, &ss->data.info,\n-\t\t\t       type, dynamic, true, false);\n+\t\t\t       type, dynamic, true, false, false);\n \n   desc = ss->data.info.descriptor;\n   offset = gfc_index_zero_node;\n@@ -2890,7 +2937,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop)\n       loop->temp_ss->data.info.dimen = n;\n       gfc_trans_create_temp_array (&loop->pre, &loop->post, loop,\n \t\t\t\t   &loop->temp_ss->data.info, tmp, false, true,\n-\t\t\t\t   false);\n+\t\t\t\t   false, false);\n     }\n \n   for (n = 0; n < loop->temp_dim; n++)"}, {"sha": "29ccffd3bd8a7e0c47575d85206d5862b9ecfb42", "filename": "gcc/fortran/trans-array.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-array.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-array.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.h?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -32,7 +32,7 @@ void gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping *,\n \n /* Generate code to create a temporary array.  */\n tree gfc_trans_create_temp_array (stmtblock_t *, stmtblock_t *, gfc_loopinfo *,\n-                                  gfc_ss_info *, tree, bool, bool, bool);\n+                                  gfc_ss_info *, tree, bool, bool, bool, bool);\n \n /* Generate function entry code for allocation of compiler allocated array\n    variables.  */"}, {"sha": "c99372acc14d3953caecedcf5b4442516bfa9360", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -2042,7 +2042,8 @@ gfc_conv_function_call (gfc_se * se, gfc_symbol * sym,\n \t     mustn't be deallocated.  */\n \t  callee_alloc = sym->attr.allocatable || sym->attr.pointer;\n \t  gfc_trans_create_temp_array (&se->pre, &se->post, se->loop, info, tmp,\n-\t\t\t\t       false, !sym->attr.pointer, callee_alloc);\n+\t\t\t\t       false, !sym->attr.pointer, callee_alloc,\n+\t\t\t\t       true);\n \n \t  /* Pass the temporary as the first argument.  */\n \t  tmp = info->descriptor;"}, {"sha": "9d6a0b74eff74f1ce86b40f3edbbdb9fae843992", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -2712,7 +2712,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n      data field.  This is already allocated so set callee_alloc.  */\n   tmp = gfc_typenode_for_spec (&expr->ts);\n   gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       info, tmp, false, true, false);\n+\t\t\t       info, tmp, false, true, false, false);\n \n   /* Use memcpy to do the transfer.  */\n   tmp = gfc_conv_descriptor_data_get (info->descriptor);"}, {"sha": "2a5d100f2d9e20e6d3ffc9bd29b1cb206f90a1f7", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -270,7 +270,7 @@ gfc_conv_elemental_dependencies (gfc_se * se, gfc_se * loopse,\n \t  tmp = gfc_typenode_for_spec (&e->ts);\n \t  tmp = gfc_trans_create_temp_array (&se->pre, &se->post,\n \t\t\t\t\t      &tmp_loop, info, tmp,\n-\t\t\t\t\t      false, true, false);\n+\t\t\t\t\t      false, true, false, false);\n \t  gfc_add_modify_expr (&se->pre, size, tmp);\n \t  tmp = fold_convert (pvoid_type_node, info->data);\n \t  gfc_add_modify_expr (&se->pre, data, tmp);"}, {"sha": "c538d132f7139504d1a96b71a394f3efe59b49c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -1,3 +1,7 @@\n+2006-06-15  Thomas Koenig <Thomas.Koenig@online.de>\n+\n+\t* gfortran.dg/allocate_zerosize_2.f90:  New test case.\n+\n 2006-06-15  Zdenek Dvorak <dvorakz@suse.cz>\n \n \t* gcc.dg/tree-ssa/loop-18.c: New test."}, {"sha": "bd6d299f4b6f059dc6dc73a251a01ba14f19bf55", "filename": "gcc/testsuite/gfortran.dg/allocate_zerosize_2.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da4340a1ac90357925a7606b39e94fef133ecd13/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fallocate_zerosize_2.f90?ref=da4340a1ac90357925a7606b39e94fef133ecd13", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do run }\n+! PR 27980 - We used to allocate negative amounts of memory\n+!            for functions returning arrays if lbound > ubound-1.\n+!            Based on a test case by beliavsky@aol.com posted to\n+!            comp.lang.fortran.\n+program xint_func\n+  implicit none\n+  integer, parameter :: n=3,ii(n)=(/2,0,-1/)\n+  integer            :: i\n+  character(len=80)  :: line\n+  do i=1,n\n+     write (line,'(10I5)') int_func(ii(i))\n+  end do\n+contains\n+  function int_func(n) result(ivec)\n+    integer, intent(in) :: n\n+    integer             :: ivec(n)\n+    integer             :: i\n+    if (n > 0) then\n+       forall (i=1:n) ivec(i) = i\n+    end if\n+  end function int_func\n+end program xint_func"}]}