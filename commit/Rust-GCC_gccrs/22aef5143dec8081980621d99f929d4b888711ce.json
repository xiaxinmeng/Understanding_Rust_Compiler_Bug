{"sha": "22aef5143dec8081980621d99f929d4b888711ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJhZWY1MTQzZGVjODA4MTk4MDYyMWQ5OWY5MjlkNGI4ODg3MTFjZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:43:31Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:43:31Z"}, "message": "configopts.html: Edit.\n\n\n\n\n\n2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* docs/configopts.html: Edit.\n\n\t* libio/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libio/Makefile.in: Regenerate.\n\t* libmath/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libmath/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (INCLUDES): Remove duplicate.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* Makefile.am (AM_MAKEFLAGS): Add GLIBCPP_INCLUDES,\n\tTOPLEVEL_INCLUDES, LIBMATH_INCLUDES, LIBIO_INCLUDES,\n\tCSHADOW_INCLUDES up here.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.am (CSHADOW_INCLUDES): Add include/c_std, include/c\n\tfor shadow headers.\n\t(myinstallheaders): Change glibcpp_includedir to GLIBCPP_INCLUDES.\n\tMove GLIBCPP_INCLUDES, TOPLEVEL_INCLUDES, LIBMATH_INCLUDES,\n\tLIBIO_INCLUDES, CSHADOW_INCLUDES up Makefile hierarchy.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/c: New directory.\n\t* include/c/bits/(std_cassert.h, std_cctype.h, std_cerrno.h,\n\tstd_cfloat.h, std_climits.h, std_clocale.h, std_cmath.h,\n\tstd_csetjmp.h, std_csignal.h, std_cstdarg.h, std_cstddef.h,\n\tstd_cstdio.h, std_cstdlib.h, std_cstring.h, std_ctime.h,\n\tstd_cwchar.h, std_cwctype.h): Add, moving from...\n\t* include/bits: ...here.\n\t* include/c_std: New directory.\n\t* include/c_std/bits/*: Populate from...\n\t* shadow: ...here. Remove directory.\n\nFrom-SVN: r36802", "tree": {"sha": "198afd01b4ec4ea3ee1371321cfd910d039a8ece", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/198afd01b4ec4ea3ee1371321cfd910d039a8ece"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22aef5143dec8081980621d99f929d4b888711ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22aef5143dec8081980621d99f929d4b888711ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22aef5143dec8081980621d99f929d4b888711ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22aef5143dec8081980621d99f929d4b888711ce/comments", "author": null, "committer": null, "parents": [{"sha": "4d0230e166ce370a9d556b305cfa7ddcd8b0c6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d0230e166ce370a9d556b305cfa7ddcd8b0c6c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d0230e166ce370a9d556b305cfa7ddcd8b0c6c8"}], "stats": {"total": 4411, "additions": 4411, "deletions": 0}, "files": [{"sha": "26c084555b3c70ae71e2f44bba910e90fb9870cd", "filename": "libstdc++-v3/include/c_std/bits/std_cassert.h", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cassert.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,72 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 19.2  Assertions\n+//\n+\n+#ifndef _CPP_CASSERT\n+#define _CPP_CASSERT 1\n+\n+#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+# undef _IN_C_LEGACY_\n+# define _ASSERT_NEED_C_LEGACY_\n+#endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <assert.h>\n+  }\n+\n+} // namespace _C_legacy\n+\n+\n+#undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+#ifdef _ASSERT_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+# define _IN_C_LEGACY_\n+# undef _ASSERT_NEED_C_LEGACY_\n+#endif /* _ASSERT_NEED_C_LEGACY_ */\n+\n+#endif\n+\n+\n+\n+"}, {"sha": "ee7c140cd6d18ed75816abd66ebb7670bbe96b51", "filename": "libstdc++-v3/include/c_std/bits/std_cctype.h", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cctype.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,174 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// ISO C++ 14882: 22\n+//\n+\n+#ifndef _CPP_CCTYPE\n+#define _CPP_CCTYPE 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _CTYPE_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <ctype.h>\n+  }\n+\n+  inline int \n+  _CPP_isalnum_capture(int c) { return isalnum(c); }\n+\n+  inline int \n+  _CPP_isalpha_capture(int c) { return isalpha(c); }\n+\n+  inline int \n+  _CPP_iscntrl_capture(int c) { return iscntrl(c); }\n+\n+  inline int \n+  _CPP_isdigit_capture(int c) { return isdigit(c); }\n+\n+  inline int \n+  _CPP_isgraph_capture(int c) { return isgraph(c); }\n+\n+  inline int \n+  _CPP_islower_capture(int c) { return islower(c); }\n+\n+  inline int \n+  _CPP_isprint_capture(int c) { return isprint(c); }\n+\n+  inline int \n+  _CPP_ispunct_capture(int c) { return ispunct(c); }\n+\n+  inline int \n+  _CPP_isspace_capture(int c) { return isspace(c); }\n+\n+  inline int \n+  _CPP_isupper_capture(int c) { return isupper(c); }\n+\n+  inline int \n+  _CPP_isxdigit_capture(int c) { return isxdigit(c); }\n+\n+  inline int \n+  _CPP_tolower_capture(int c) { return tolower(c); }\n+\n+  inline int \n+  _CPP_toupper_capture(int c) { return toupper(c); }\n+} // namespace _C_legacy\n+\n+# undef isalnum\n+# undef isalpha\n+# undef iscntrl\n+# undef isdigit\n+# undef isgraph\n+# undef islower\n+# undef isprint\n+# undef ispunct\n+# undef isspace\n+# undef isupper\n+# undef isxdigit\n+\n+# undef tolower\n+# undef toupper\n+\n+namespace std {\n+  inline int \n+  isalnum(int __c) { return _C_legacy::_CPP_isalnum_capture(__c); }\n+\n+  inline int \n+  isalpha(int __c) { return _C_legacy::_CPP_isalpha_capture(__c); }\n+\n+  inline int \n+  iscntrl(int __c) { return _C_legacy::_CPP_iscntrl_capture(__c); }\n+\n+  inline int \n+  isdigit(int __c) { return _C_legacy::_CPP_isdigit_capture(__c); }\n+\n+  inline int \n+  isgraph(int __c) { return _C_legacy::_CPP_isgraph_capture(__c); }\n+\n+  inline int \n+  islower(int __c) { return _C_legacy::_CPP_islower_capture(__c); }\n+\n+  inline int \n+  isprint(int __c) { return _C_legacy::_CPP_isprint_capture(__c); }\n+\n+  inline int \n+  ispunct(int __c) { return _C_legacy::_CPP_ispunct_capture(__c); }\n+\n+  inline int \n+  isspace(int __c) { return _C_legacy::_CPP_isspace_capture(__c); }\n+\n+  inline int \n+  isupper(int __c) { return _C_legacy::_CPP_isupper_capture(__c); }\n+\n+  inline int \n+  isxdigit(int __c) { return _C_legacy::_CPP_isxdigit_capture(__c); }\n+\n+  inline int \n+  tolower(int __c) { return _C_legacy::_CPP_tolower_capture(__c); }\n+\n+  inline int \n+  toupper(int __c) { return _C_legacy::_CPP_toupper_capture(__c); }\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::isalnum;\n+  using std::isalpha;\n+  using std::iscntrl;\n+  using std::isdigit;\n+  using std::isgraph;\n+  using std::islower;\n+  using std::isprint;\n+  using std::ispunct;\n+  using std::isspace;\n+  using std::isupper;\n+  using std::isxdigit;\n+  using std::tolower;\n+  using std::toupper;\n+\n+# ifdef _CTYPE_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _CTYPE_NEED_C_LEGACY_\n+# endif /* _CTYPE_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CCTYPE*/\n+"}, {"sha": "5a5a2533e941509e2148f54ade26881a9a9cd03f", "filename": "libstdc++-v3/include/c_std/bits/std_cerrno.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cerrno.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,78 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// ISO C++ 14882: 19.3  Error numbers\n+//\n+\n+#ifndef _CPP_CERRNO\n+#define _CPP_CERRNO 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _ERRNO_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <errno.h>\n+  }\n+\n+  //  inline int& \n+  //  _CPP_errno_capture() { return errno; }\n+\n+} // namespace _C_legacy::\n+\n+#  undef  errno\n+//#  define errno _C_legacy::_CPP_errno_capture()\n+\n+namespace std {\n+  using _C_legacy::errno;\n+}\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::errno;\n+\n+# ifdef _ERRNO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _ERRNO_NEED_C_LEGACY_\n+# endif /* _ERRNO_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CERRNO*/\n+"}, {"sha": "6bf6db2e16e03431f30b3841e7566001c2158e17", "filename": "libstdc++-v3/include/c_std/bits/std_cfloat.h", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cfloat.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,73 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CFLOAT\n+#define _CPP_CFLOAT 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _FLOAT_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <float.h>\n+  }\n+} // namespace _C_legacy\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+# ifdef _FLOAT_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _FLOAT_NEED_C_LEGACY_\n+# endif /* _FLOAT_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CFLOAT*/\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "de4a05b2959074c170f6bac2f0edd0362706f43c", "filename": "libstdc++-v3/include/c_std/bits/std_climits.h", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_climits.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,76 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CLIMITS\n+#define _CPP_CLIMTIS 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LIMITS_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <limits.h>\n+  }\n+} // namespace _C_legacy\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+# ifdef _LIMITS_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LIMITS_NEED_C_LEGACY_\n+# endif /* _LIMITS_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CLIMITS*/\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "b41d284023d92118130e0b5dbd4ea7e3ddbad8e2", "filename": "libstdc++-v3/include/c_std/bits/std_clocale.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_clocale.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,92 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.2.2  Implementation properties: C library\n+//\n+\n+#ifndef _CPP_CLOCALE\n+#define _CPP_CLOCALE     1\n+\n+# include <bits/std_cstddef.h> \n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LOCALE_NEED_C_LEGACY_\n+#endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <locale.h>\n+  }\n+\n+  typedef lconv _CPP_lconv_capture;\n+} // namespace _C_legacy\n+\n+#  undef lconv\n+#  undef setlocale\n+#  undef localeconv\n+\n+namespace std {\n+  // Adopt C names into std::\n+  struct lconv : _C_legacy::_CPP_lconv_capture  { };\n+\n+  using _C_legacy::setlocale;  \n+\n+  inline lconv* \n+  localeconv() { return reinterpret_cast<lconv*>(_C_legacy::localeconv()); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::lconv;\n+  using std::setlocale;\n+  using std::localeconv;\n+\n+# ifdef _LOCALE_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LOCALE_NEED_C_LEGACY_\n+# endif /* _LOCALE_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CLOCALE*/\n+\n+\n+\n+\n+"}, {"sha": "b0d933196484d6cb11defd3dda695311c31a175a", "filename": "libstdc++-v3/include/c_std/bits/std_cmath.h", "status": "added", "additions": 1082, "deletions": 0, "changes": 1082, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cmath.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,1082 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 26.5  C library\n+//\n+\n+#ifndef _CPP_CMATH\n+#define _CPP_CMATH 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _MATH_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/c++config.h>\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <math.h>\n+  }\n+\n+#if _GLIBCPP_HAVE_ACOSF\n+  inline float \n+  _CPP_acos_capture(float __x) { return acosf(__x); }\n+#else\n+  inline float \n+  _CPP_acos_capture(float __x) { return acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ASINF\n+  inline float \n+  _CPP_asin_capture(float __x) { return asinf(__x); }\n+#else\n+  inline float \n+  _CPP_asin_capture(float __x) { return asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATANF\n+  inline float \n+  _CPP_atan_capture(float __x) { return atanf(__x); }\n+#else\n+  inline float \n+  _CPP_atan_capture(float __x) { return atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATAN2F\n+  inline float \n+  _CPP_atan2_capture(float __y, float __x) { return atan2f(__y, __x); }\n+#else\n+  inline float \n+  _CPP_atan2_capture(float __y, float __x) \n+  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_CEILF\n+  inline float \n+  _CPP_ceil_capture(float __x) { return ceilf(__x); }\n+#else\n+  inline float \n+  _CPP_ceil_capture(float __x) { return ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COSF\n+  inline float \n+  _CPP_cos_capture(float __x) { return __builtin_cosf(__x); }\n+#elif _GLIBCPP_HAVE_COSF\n+  inline float \n+  _CPP_cos_capture(float __x) { return cosf(__x); }\n+#else\n+  inline float \n+  _CPP_cos_capture(float __x) { return cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_COSHF\n+  inline float \n+  _CPP_cosh_capture(float __x) { return coshf(__x); }\n+#else\n+  inline float \n+  _CPP_cosh_capture(float __x) { return cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_EXPF\n+  inline float \n+  _CPP_exp_capture(float __x) { return expf(__x); }\n+#else\n+  inline float \n+  _CPP_exp_capture(float __x) { return exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSF\n+  inline float \n+  _CPP_fabs_capture(float __x) { return __builtin_fabsf(__x); }\n+#elif _GLIBCPP_HAVE_FABSF\n+  inline float \n+  _CPP_fabs_capture(float __x) { return fabsf(__x); }\n+#else\n+  inline float \n+  _CPP_fabs_capture(float __x) { return fabs(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FLOORF\n+  inline float \n+  _CPP_floor_capture(float __x) { return floorf(__x); }\n+#else\n+  inline float \n+  _CPP_floor_capture(float __x) { return floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FMODFF\n+  inline float \n+  _CPP_fmod_capture(float __x, float __y) { return fmodf(__x, __y); }\n+#else\n+  inline float \n+  _CPP_fmod_capture(float __x, float __y) \n+  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FREXPF\n+  inline float \n+  _CPP_frexp_capture(float __x, int* __exp) { return frexpf(__x, __exp); }\n+#else\n+  inline float \n+  _CPP_frexp_capture(float __x, int* __exp) { return frexp(__x, __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LDEXPF\n+  inline float \n+  _CPP_ldexp_capture(float __x, int __exp) { return ldexpf(__x, __exp); }\n+#else\n+  inline float \n+  _CPP_ldexp_capture(float __x, int __exp) \n+  { return ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOGF\n+  inline float \n+  _CPP_log_capture(float __x) { return logf(__x); }\n+#else\n+  inline float \n+  _CPP_log_capture(float __x) { return log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOG10F\n+  inline float \n+  _CPP_log10_capture(float __x) { return log10f(__x); }\n+#else\n+  inline float \n+  _CPP_log10_capture(float __x) { return log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_MODFF\n+  inline float \n+  _CPP_modf_capture(float __x, float* __iptr) { return modff(__x, __iptr); }\n+#else\n+  inline float \n+  _CPP_modf_capture(float __x, float* __iptr)\n+  {\n+    double __tmp;\n+    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<float> (__tmp);\n+    return __res;\n+  }\n+#endif\n+  \n+#if _GLIBCPP_HAVE_POWF\n+  inline float \n+  _CPP_pow_capture(float __x, float __y) { return powf(__x, __y); }\n+#else\n+  inline float \n+  _CPP_pow_capture(float __x, float __y)\n+  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+  float pow(float, int);\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SINF\n+  inline float \n+  _CPP_sin_capture(float __x) { return __builtin_sinf(__x); }\n+#elif _GLIBCPP_HAVE_SINF\n+  inline float \n+  _CPP_sin_capture(float __x) { return sinf(__x); }\n+#else\n+  inline float \n+  _CPP_sin_capture(float __x) { return sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_SINHF\n+  inline float \n+  _CPP_sinh_capture(float __x) { return sinhf(__x); }\n+#else\n+  inline float \n+  _CPP_sinh_capture(float __x) { return sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return __builtin_sqrtf(__x); }\n+#elif _GLIBCPP_HAVE_SQRTF\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return sqrtf(__x); }\n+#else\n+  inline float \n+  _CPP_sqrt_capture(float __x) { return sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANF\n+  inline float \n+  _CPP_tan_capture(float __x) { return tanf(__x); }\n+#else\n+  inline float \n+  _CPP_tan_capture(float __x) { return tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANHF\n+  inline float \n+  _CPP_tanh_capture(float __x) { return tanhf(__x); }\n+#else\n+  inline float \n+  _CPP_tanh_capture(float __x) { return tanh(static_cast<double>(__x)); }\n+#endif\n+\n+\n+  inline double \n+  _CPP_acos_capture(double __x) { return acos(__x); }\n+\n+  inline double \n+  _CPP_asin_capture(double __x) { return asin(__x); }\n+\n+  inline double \n+  _CPP_atan_capture(double __x) { return atan(__x); }\n+\n+  inline double \n+  _CPP_atan2_capture(double __y, double __x) { return atan2(__y, __x); }\n+\n+  inline double \n+  _CPP_ceil_capture(double __x) { return ceil(__x); }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COS\n+  inline double \n+  _CPP_cos_capture(double __x) { return __builtin_cos(__x); }\n+#else\n+  inline double \n+  _CPP_cos_capture(double __x) { return cos(__x); }\n+#endif\n+\n+  inline double \n+  _CPP_cosh_capture(double __x) { return cosh(__x); }\n+\n+  inline double \n+  _CPP_exp_capture(double __x) { return exp(__x); }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABS\n+  inline double \n+  _CPP_fabs_capture(double __x) { return __builtin_fabs(__x); }\n+#else\n+  inline double \n+  _CPP_fabs_capture(double __x) { return fabs(__x); }\n+#endif\n+\n+  inline double \n+  _CPP_floor_capture(double __x) { return floor(__x); }\n+\n+  inline double \n+  _CPP_fmod_capture(double __x, double __y) { return fmod(__x, __y); }\n+\n+  inline double \n+  _CPP_frexp_capture(double __x, int* __exp) { return frexp(__x, __exp); }\n+\n+  inline double \n+  _CPP_ldexp_capture(double __x, int __exp) { return ldexp(__x, __exp); }\n+\n+  inline double \n+  _CPP_log_capture(double __x) { return log(__x); }\n+\n+  inline double \n+  _CPP_log10_capture(double __x) { return log10(__x); }\n+\n+  inline double \n+  _CPP_modf_capture(double __x, double* __iptr) { return modf(__x, __iptr); }\n+\n+  inline double \n+  _CPP_pow_capture(double __x, double __y) { return pow(__x, __y); }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SIN\n+  inline double \n+  _CPP_sin_capture(double __x) { return __builtin_sin(__x); }\n+#else\n+  inline double \n+  _CPP_sin_capture(double __x) { return sin(__x); }\n+#endif\n+\n+  inline double \n+  _CPP_sinh_capture(double __x) { return sinh(__x); }\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRT\n+  inline double \n+  _CPP_sqrt_capture(double __x) { return __builtin_fsqrt(__x); }\n+#else\n+  inline double \n+  _CPP_sqrt_capture(double __x) { return sqrt(__x); }\n+#endif\n+\n+  inline double \n+  _CPP_tan_capture(double __x) { return tan(__x); }\n+\n+  inline double \n+  _CPP_tanh_capture(double __x) { return tanh(__x); }\n+\n+\n+#if _GLIBCPP_HAVE_ACOSL\n+  inline long double \n+  _CPP_acos_capture(long double __x) { return acosl(__x); }\n+#else\n+  inline long double \n+  _CPP_acos_capture(long double __x) { return acos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ASINL\n+  inline long double \n+  _CPP_asin_capture(long double __x) { return asinl(__x); }\n+#else\n+  inline long double \n+  _CPP_asin_capture(long double __x) { return asin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATANL\n+  inline long double \n+  _CPP_atan_capture(long double __x) { return atanl(__x); }\n+#else\n+  inline long double \n+  _CPP_atan_capture(long double __x) { return atan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_ATAN2L\n+  inline long double \n+  _CPP_atan2_capture(long double __y, long double __x)\n+  { return atan2l(__y, __x); }\n+#else\n+  inline long double \n+  _CPP_atan2_capture(long double __y, long double __x) \n+  { return atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_CEILL\n+  inline long double \n+  _CPP_ceil_capture(long double __x) { return ceill(__x); }\n+#else\n+  inline long double \n+  _CPP_ceil_capture(long double __x) { return ceil(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_COSL\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return __builtin_cosl(__x); }\n+#elif _GLIBCPP_HAVE_COSL\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return cosl(__x); }\n+#else\n+  inline long double \n+  _CPP_cos_capture(long double __x) { return cos(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_COSHL\n+  inline long double \n+  _CPP_cosh_capture(long double __x) { return coshl(__x); }\n+#else\n+  inline long double \n+  _CPP_cosh_capture(long double __x) { return cosh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_EXPL\n+  inline long double \n+  _CPP_exp_capture(long double __x) { return expl(__x); }\n+#else\n+  inline long double \n+  _CPP_exp_capture(long double __x) { return exp(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_FABSL\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return __builtin_fabsl(__x); }\n+#elif _GLIBCPP_HAVE_FABSL\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return fabsl(__x); }\n+#else\n+  inline long double \n+  _CPP_fabs_capture(long double __x) { return fabs(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FLOORL\n+  inline long double \n+  _CPP_floor_capture(long double __x) { return floorl(__x); }\n+#else\n+  inline long double \n+  _CPP_floor_capture(long double __x) \n+  { return floor(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FMODL\n+  inline long double \n+  _CPP_fmod_capture(long double __x, long double __y) \n+  { return fmodl(__x, __y); }\n+#else\n+  inline long double \n+  _CPP_fmod_capture(long double __x, long double __y)\n+  { return fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_FREXPL\n+  inline long double \n+  _CPP_frexp_capture(long double __x, int* __exp) \n+  { return frexpl(__x, __exp); }\n+#else\n+  inline long double \n+  _CPP_frexp_capture(long double __x, int* __exp)\n+  { return frexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LDEXPL\n+  inline long double \n+  _CPP_ldexp_capture(long double __x, int __exp) { return ldexpl(__x, __exp); }\n+#else\n+  inline long double \n+  _CPP_ldexp_capture(long double __x, int __exp)\n+  { return ldexp(static_cast<double>(__x), __exp); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOGL\n+  inline long double \n+  _CPP_log_capture(long double __x) { return logl(__x); }\n+#else\n+  inline long double \n+  _CPP_log_capture(long double __x) { return log(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_LOG10L\n+  inline long double \n+  _CPP_log10_capture(long double __x) { return log10l(__x); }\n+#else\n+  inline long double \n+  _CPP_log10_capture(long double __x) \n+  { return log10(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_MODFL\n+  inline long double \n+  _CPP_modf_capture(long double __x, long double* __iptr)\n+  { return modfl(__x, __iptr); }\n+#else\n+  inline long double \n+  _CPP_modf_capture(long double __x, long double* __iptr)\n+  {\n+    double __tmp;\n+    double __res = _C_legacy::modf(static_cast<double>(__x), &__tmp);\n+    *__iptr = static_cast<long double> (__tmp);\n+    return __res;\n+  }\n+#endif\n+\n+#if _GLIBCPP_HAVE_POWL\n+  inline long double \n+  _CPP_pow_capture(long double __x, long double __y) { return powl(__x, __y); }\n+#else\n+  inline long double \n+  _CPP_pow_capture(long double __x, long double __y)\n+  { return pow(static_cast<double>(__x), static_cast<double>(__y)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SINL\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return __builtin_sinl(__x); }\n+#elif _GLIBCPP_HAVE_SINL\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return sinl(__x); }\n+#else\n+  inline long double \n+  _CPP_sin_capture(long double __x) { return sin(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_SINHL\n+  inline long double \n+  _CPP_sinh_capture(long double __x) { return sinhl(__x); }\n+#else\n+  inline long double \n+  _CPP_sinh_capture(long double __x) { return sinh(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return __builtin_sqrtl(__x); }\n+#elif _GLIBCPP_HAVE_SQRTL\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return sqrtl(__x); }\n+#else\n+  inline long double \n+  _CPP_sqrt_capture(long double __x) { return sqrt(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANL\n+  inline long double \n+  _CPP_tan_capture(long double __x) { return tanl(__x); }\n+#else\n+  inline long double \n+  _CPP_tan_capture(long double __x) { return tan(static_cast<double>(__x)); }\n+#endif\n+\n+#if _GLIBCPP_HAVE_TANHL\n+  inline long double \n+  _CPP_tanh_capture(long double __x) { return tanhl(__x); }\n+#else\n+  inline long double \n+  _CPP_tanh_capture(long double __x) { return tanh(static_cast<double>(__x)); }\n+#endif\n+} // namespace _C_legacy\n+\n+# undef abs\n+# undef acos\n+# undef asin\n+# undef atan\n+# undef atan2\n+# undef ceil\n+# undef cos\n+# undef cosh\n+# undef exp\n+# undef fabs\n+# undef floor\n+# undef fmod\n+# undef frexp\n+# undef ldexp\n+# undef log\n+# undef log10\n+# undef modf\n+# undef pow\n+# undef sin\n+# undef sinh\n+# undef sqrt\n+# undef tan\n+# undef tanh\n+\n+namespace std {\n+  inline float \n+  abs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline float \n+  acos(float __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline float \n+  asin(float __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline float \n+  atan(float __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline float \n+  atan2(float __y, float __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline float \n+  ceil(float __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline float \n+  cos(float __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline float \n+  cosh(float __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline float \n+  exp(float __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline float \n+  fabs(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline float \n+  floor(float __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline float \n+  fmod(float __x, float __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline float \n+  frexp(float __x, int* __exp) \n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline float \n+  ldexp(float __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline float \n+  log(float __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline float \n+  log10(float __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline float \n+  modf(float __x, float* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline float \n+  pow(float __x, float __y) { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  float \n+  pow(float, int);\n+\n+  inline float \n+  sin(float __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline float \n+  sinh(float __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline float \n+  sqrt(float __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline float \n+  tan(float __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline float \n+  tanh(float __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+\n+  inline double \n+  abs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline double \n+  acos(double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline double \n+  asin(double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline double \n+  atan(double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline double \n+  atan2(double __y, double __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline double \n+  ceil(double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline double \n+  cos(double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline double \n+  cosh(double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline double \n+  exp(double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline double \n+  fabs(double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline double \n+  floor(double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline double \n+  fmod(double __x, double __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline double \n+  frexp(double __x, int* __exp) \n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline double \n+  ldexp(double __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline double \n+  log(double __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline double \n+  log10(double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline double \n+  modf(double __x, double* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline double \n+  pow(double __x, double __y) \n+  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  double \n+  pow(double, int);\n+\n+  inline double \n+  sin(double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline double \n+  sinh(double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline double \n+  sqrt(double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline double \n+  tan(double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline double \n+  tanh(double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+\n+  inline long double \n+  abs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  acos(long double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline long double \n+  asin(long double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline long double \n+  atan(long double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline long double \n+  atan2(long double __y, long double __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline long double \n+  ceil(long double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline long double \n+  cos(long double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline long double \n+  cosh(long double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline long double \n+  exp(long double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline long double \n+  fabs(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  floor(long double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline long double \n+  fmod(long double __x, long double __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline long double \n+  frexp(long double __x, int* __exp)\n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline long double \n+  ldexp(long double __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline long double \n+  log(long double __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline long double \n+  log10(long double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline long double \n+  modf(long double __x, long double* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline long double \n+  pow(long double __x, long double __y)\n+  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  long double \n+  pow(long double, int);\n+\n+  inline long double \n+  sin(long double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline long double \n+  sinh(long double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline long double \n+  sqrt(long double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline long double \n+  tan(long double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline long double \n+  tanh(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+\n+  // From ISO/IEC 9899:1999\n+  inline float \n+  absf(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline float \n+  acosf(float __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline float \n+  asinf(float __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline float \n+  atanf(float __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline float \n+  atan2f(float __y, float __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline float \n+  ceilf(float __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline float \n+  cosf(float __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline float \n+  coshf(float __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline float \n+  expf(float __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline float \n+  fabsf(float __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline float \n+  floorf(float __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline float \n+  fmodf(float __x, float __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline float \n+  frexpf(float __x, int* __exp) \n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline float \n+  ldexpf(float __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline float \n+  logf(float __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline float \n+  log10f(float __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline float \n+  modff(float __x, float* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline float \n+  powf(float __x, float __y) { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  float \n+  powf(float, int);\n+\n+  inline float \n+  sinf(float __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline float \n+  sinhf(float __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline float \n+  sqrtf(float __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline float \n+  tanf(float __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline float \n+  tanhf(float __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+\n+  // From ISO/IEC 9899:1999\n+  inline long double \n+  absl(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  acosl(long double __x) { return _C_legacy::_CPP_acos_capture(__x); }\n+\n+  inline long double \n+  asinl(long double __x) { return _C_legacy::_CPP_asin_capture(__x); }\n+\n+  inline long double \n+  atanl(long double __x) { return _C_legacy::_CPP_atan_capture(__x); }\n+\n+  inline long double \n+  atan2l(long double __y, long double __x) \n+  { return _C_legacy::_CPP_atan2_capture(__y, __x); }\n+\n+  inline long double \n+  ceill(long double __x) { return _C_legacy::_CPP_ceil_capture(__x); }\n+\n+  inline long double \n+  cosl(long double __x) { return _C_legacy::_CPP_cos_capture(__x); }\n+\n+  inline long double \n+  coshl(long double __x) { return _C_legacy::_CPP_cosh_capture(__x); }\n+\n+  inline long double \n+  expl(long double __x) { return _C_legacy::_CPP_exp_capture(__x); }\n+\n+  inline long double \n+  fabsl(long double __x) { return _C_legacy::_CPP_fabs_capture(__x); }\n+\n+  inline long double \n+  floorl(long double __x) { return _C_legacy::_CPP_floor_capture(__x); }\n+\n+  inline long double \n+  fmodl(long double __x, long double __y) \n+  { return _C_legacy::_CPP_fmod_capture(__x, __y); }\n+\n+  inline long double \n+  frexpl(long double __x, int* __exp)\n+  { return _C_legacy::_CPP_frexp_capture(__x, __exp); }\n+\n+  inline long double \n+  ldexpl(long double __x, int __exp)\n+  { return _C_legacy::_CPP_ldexp_capture(__x, __exp); }\n+\n+  inline long double \n+  logl(long double __x) { return _C_legacy::_CPP_log_capture(__x); }\n+\n+  inline long double \n+  log10l(long double __x) { return _C_legacy::_CPP_log10_capture(__x); }\n+\n+  inline long double \n+  modfl(long double __x, long double* __iptr) \n+  { return _C_legacy::_CPP_modf_capture(__x, __iptr); }\n+\n+  inline long double \n+  powl(long double __x, long double __y)\n+  { return _C_legacy::_CPP_pow_capture(__x, __y); }\n+\n+  long double \n+  powl(long double, int);\n+\n+  inline long double \n+  sinl(long double __x) { return _C_legacy::_CPP_sin_capture(__x); }\n+\n+  inline long double \n+  sinhl(long double __x) { return _C_legacy::_CPP_sinh_capture(__x); }\n+\n+  inline long double \n+  sqrtl(long double __x) { return _C_legacy::_CPP_sqrt_capture(__x); }\n+\n+  inline long double \n+  tanl(long double __x) { return _C_legacy::_CPP_tan_capture(__x); }\n+\n+  inline long double \n+  tanhl(long double __x) { return _C_legacy::_CPP_tanh_capture(__x); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::abs;\n+  using std::acos;\n+  using std::asin;\n+  using std::atan;\n+  using std::atan2;\n+  using std::cos;\n+  using std::sin;\n+  using std::tan;\n+  using std::cosh;\n+  using std::sinh;\n+  using std::tanh;\n+  using std::exp;\n+  using std::frexp;\n+  using std::ldexp;\n+  using std::log;\n+  using std::log10;\n+  using std::modf;\n+  using std::pow;\n+  using std::sqrt;\n+  using std::ceil;\n+  using std::fabs;\n+  using std::floor;\n+  using std::fmod;\n+\n+  // From ISO/IEC 9899:1999\n+  using std::absf;\n+  using std::acosf;\n+  using std::asinf;\n+  using std::atanf;\n+  using std::atan2f;\n+  using std::cosf;\n+  using std::sinf;\n+  using std::tanf;\n+  using std::coshf;\n+  using std::sinhf;\n+  using std::tanhf;\n+  using std::expf;\n+  using std::frexpf;\n+  using std::ldexpf;\n+  using std::logf;\n+  using std::log10f;\n+  using std::modff;\n+  using std::powf;\n+  using std::sqrtf;\n+  using std::ceilf;\n+  using std::fabsf;\n+  using std::floorf;\n+  using std::fmodf;\n+\n+  // From ISO/IEC 9899:1999\n+  using std::absl;\n+  using std::acosl;\n+  using std::asinl;\n+  using std::atanl;\n+  using std::atan2l;\n+  using std::cosl;\n+  using std::sinl;\n+  using std::tanl;\n+  using std::coshl;\n+  using std::sinhl;\n+  using std::tanhl;\n+  using std::expl;\n+  using std::frexpl;\n+  using std::ldexpl;\n+  using std::logl;\n+  using std::log10l;\n+  using std::modfl;\n+  using std::powl;\n+  using std::sqrtl;\n+  using std::ceill;\n+  using std::fabsl;\n+  using std::floorl;\n+  using std::fmodl;\n+\n+# ifdef _MATH_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _MATH_NEED_C_LEGACY_\n+# endif /* _MATH_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CMATH*/\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "b32bf59e32ef02bedc244c1a5c46a8f48f1ad2eb", "filename": "libstdc++-v3/include/c_std/bits/std_csetjmp.h", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csetjmp.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,84 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSETJMP\n+#define _CPP_CSETJMP 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _SETJMP_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <setjmp.h>\n+  }\n+  inline int \n+  _CPP_setjmp_capture(jmp_buf __jb) { return setjmp(__jb); }\n+} // namespace _C_legacy\n+\n+#  undef jmp_buf\n+#  undef setjmp\n+#  define setjmp(__jb) ::_C_legacy::_CPP_setjmp_capture(__jb)\n+#  undef longjmp\n+\n+namespace std {\n+  // Adopt C names into std::\n+  using _C_legacy::jmp_buf;\n+  using _C_legacy::longjmp;\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::jmp_buf;\n+  using std::longjmp;\n+\n+# ifdef _SETJMP_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _SETJMP_NEED_C_LEGACY_\n+# endif /* _SETJMP_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CSETJUMP*/\n+\n+\n+"}, {"sha": "d529a152fc64ef1e275b2d065301ea44b0f65228", "filename": "libstdc++-v3/include/c_std/bits/std_csignal.h", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_csignal.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,90 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSIGNAL\n+#define _CPP_CSIGNAL 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _SIGNAL_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+    // XXX\n+#   undef __need_sig_atomic_t\n+#   undef __need_sigset_t\n+\n+#   pragma GCC system_header\n+#   include_next <signal.h>\n+  }\n+} // namespace _C_legacy\n+\n+#  undef sig_atomic_t\n+#  undef raise\n+#  undef signal\n+\n+namespace std {\n+  // Adopt C names into std::\n+  using _C_legacy::sig_atomic_t;\n+  using _C_legacy::raise;\n+  using _C_legacy::signal;\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::sig_atomic_t;\n+\n+  using std::raise;\n+  using std::signal;\n+\n+# ifdef _SIGNAL_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _SIGNAL_NEED_C_LEGACY_\n+#  endif /* _SIGNAL_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CSIGNAL*/\n+\n+\n+\n+\n+"}, {"sha": "df3103a7e3f503b297905b0c4423403de6855e4b", "filename": "libstdc++-v3/include/c_std/bits/std_cstdarg.h", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdarg.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,74 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSTDARG\n+#define _CPP_CSTDARG 1\n+\n+#ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDARG_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <stdarg.h>\n+  }\n+} // namespace _C_legacy\n+\n+#  undef va_list\n+\n+namespace std {\n+  using _C_legacy::va_list;\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::va_list;\n+\n+# ifdef _STDARG_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDARG_NEED_C_LEGACY_\n+# endif /* _STDARG_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CSTDARG*/\n+"}, {"sha": "713253768b129330208921a7a1a72d77732db9ff", "filename": "libstdc++-v3/include/c_std/bits/std_cstddef.h", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstddef.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,91 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 18.1  Types\n+//\n+\n+#ifndef _CPP_CSTDDEF\n+#define _CPP_CSTDDEF 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDDEF_NEED_C_LEGACY_\n+# endif\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+\n+    // XXX\n+    // glibc 2.1.x time.h is on crack\n+#   define __need_wchar_t\n+#   define __need_ptrdiff_t\n+#   define __need_size_t\n+\n+#   include_next <stddef.h>\n+  }\n+} // namespace _C_legacy\n+\n+#  undef ptrdiff_t  \n+#  undef size_t  \n+#  undef wchar_t\n+\n+namespace std {\n+  using _C_legacy::ptrdiff_t;\n+  using _C_legacy::size_t;\n+  using _C_legacy::wchar_t;\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::ptrdiff_t;\n+  using std::size_t;\n+  using std::wchar_t;\n+\n+# ifdef _STDDEF_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDDEF_NEED_C_LEGACY_\n+# endif /* _STDDEF_NEED_C_LEGACY_ */\n+\n+#endif  /*_CPP_CSTDDEF*/\n+\n+\n+\n+\n+"}, {"sha": "2855c6f3c5dfef85e3da07e584cd818c26fb8635", "filename": "libstdc++-v3/include/c_std/bits/std_cstdio.h", "status": "added", "additions": 346, "deletions": 0, "changes": 346, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdio.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,346 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 27.8.2  C Library files\n+//\n+\n+#ifndef _CPP_CSTDIO\n+#define _CPP_CSTDIO 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDIO_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/std_cstddef.h>  \n+# include <bits/std_cstdarg.h>  \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   undef __need_FILE\n+#   pragma GCC system_header\n+#   include_next <stdio.h>\n+  }\n+\n+  typedef FILE _CPP_FILE_capture;\n+  typedef fpos_t _CPP_fpos_t_capture;\n+\n+  inline FILE* \n+  _CPP_stderr_capture() { return stderr; }\n+\n+  inline FILE* \n+  _CPP_stdin_capture()  { return stdin; }\n+\n+  inline FILE* \n+  _CPP_stdout_capture() { return stdout; }\n+\n+  inline int \n+  _CPP_getc_capture(FILE* __f) { return getc(__f); }\n+\n+  inline int \n+  _CPP_getchar_capture() { return getchar(); }\n+\n+  inline int \n+  _CPP_putc_capture(int __c, FILE* __f) { return putc(__c, __f); }\n+  \n+  inline int \n+  _CPP_putchar_capture(int __c) { return putchar(__c); }\n+ \n+  inline int \n+  _CPP_feof_capture(FILE* __f) { return feof(__f); }\n+\n+} // namespace _C_legacy\n+\n+# undef FILE \n+# undef fpos_t \n+\n+# undef remove\n+# undef rename\n+# undef tmpfile\n+# undef tmpnam\n+# undef fclose\n+# undef fflush\n+# undef fopen\n+# undef freopen\n+# undef setbuf\n+# undef setvbuf\n+# undef fprintf\n+# undef fscanf\n+# undef printf\n+# undef scanf\n+# undef sprintf\n+# undef sscanf\n+# undef vfprintf\n+# undef vprintf\n+# undef vsprintf\n+# undef fgetc\n+# undef fgets\n+# undef fputc\n+# undef fputs\n+# undef getc\n+# undef getchar\n+# undef gets\n+# undef putc\n+# undef putchar\n+# undef puts\n+# undef ungetc\n+# undef fread\n+# undef fwrite\n+# undef fgetpos\n+# undef fseek\n+# undef fsetpos\n+# undef ftell\n+# undef rewind\n+# undef clearerr\n+# undef feof\n+# undef ferror\n+# undef perror\n+  \n+# undef stderr\n+# define stderr std::_CPP_stderr()\n+# undef stdin\n+# define stdin  std::_CPP_stdin()\n+# undef stdout\n+# define stdout std::_CPP_stdout()\n+\n+namespace std {\n+  struct FILE : _C_legacy::_CPP_FILE_capture { };\n+  struct fpos_t { _C_legacy::_CPP_fpos_t_capture _M_dummy; };\n+\n+  using _C_legacy::remove;\n+  using _C_legacy::rename;\n+  using _C_legacy::tmpnam;\n+  using _C_legacy::printf;\n+  using _C_legacy::scanf;\n+  using _C_legacy::sprintf;\n+  using _C_legacy::sscanf;\n+  using _C_legacy::gets;\n+  using _C_legacy::perror;\n+\n+  inline FILE* \n+  _CPP_stderr()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stderr_capture() ); }\n+\n+  inline FILE* \n+  _CPP_stdin()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdin_capture() ); }\n+\n+  inline FILE* \n+  _CPP_stdout()\n+  { return reinterpret_cast<FILE*>(_C_legacy::_CPP_stdout_capture() ); }\n+\n+  inline FILE*\n+  tmpfile() { return reinterpret_cast<FILE*>(_C_legacy::tmpfile()); }\n+\n+  inline int\n+  fclose(FILE* __f) { return _C_legacy::fclose(__f); }\n+\n+  inline int\n+  fflush(FILE* __f) { return _C_legacy::fflush(__f); }\n+\n+  inline FILE*\n+  fopen(char const* __name, char const* __mode) \n+  { return reinterpret_cast<FILE*>(_C_legacy::fopen(__name,__mode)); }\n+\n+  inline FILE*\n+  freopen(char const* __name, char const* __mode, FILE* __f) \n+  { return reinterpret_cast<FILE*>(_C_legacy::freopen(__name,__mode,__f)); }\n+\n+  inline void\n+  setbuf(FILE* __f, char* __buf) \n+  { return _C_legacy::setbuf(__f, __buf); }\n+\n+  inline int\n+  setvbuf(FILE* __f, char* __buf, int __mode, size_t __size) \n+  { return _C_legacy::setvbuf(__f, __buf, __mode, __size); }\n+\n+  inline int\n+  fprintf(FILE* __f, char const* __fmt, ...)\n+  { \n+    va_list __v; \n+    va_start(__v,__fmt); \n+    int __i = _C_legacy::vfprintf(__f, __fmt, __v); \n+    va_end(__v);\n+    return __i; \n+  }\n+\n+  inline int\n+  fscanf(FILE* __f, char const* __fmt, ...)\n+  { \n+    va_list __v; \n+    va_start(__v,__fmt); \n+    int __i = _C_legacy::vfscanf(__f, __fmt, __v); \n+    va_end(__v);\n+    return __i; \n+  }\n+\n+  inline int\n+  vfprintf(FILE* __f, char const* __fmt, va_list __v)\n+  { return _C_legacy::vfprintf(__f, __fmt, __v); }\n+\n+  inline int\n+  vprintf(char const* __fmt, va_list __v)\n+  { return _C_legacy::vprintf(__fmt, __v); }\n+\n+  inline int\n+  vsprintf(char* __buf, char const* __fmt, va_list __v)\n+  { return _C_legacy::vsprintf(__buf, __fmt, __v); }\n+\n+  inline int\n+  fgetc(FILE* __f) { return _C_legacy::fgetc(__f); }\n+\n+  inline char*\n+  fgets(char* __buf, int __n, FILE* __f) \n+  { return _C_legacy::fgets(__buf, __n, __f); }\n+\n+  inline int\n+  fputc(int __c, FILE* __f) { return _C_legacy::fputc(__c, __f); }\n+\n+  inline int\n+  fputs(char const* __s, FILE* __f) \n+  { return _C_legacy::fputs(__s, __f); }\n+\n+  inline int\n+  getc(FILE* __f) { return _C_legacy::_CPP_getc_capture(__f); }\n+\n+  inline int\n+  getchar() { return _C_legacy::_CPP_getchar_capture(); }\n+\n+  inline int\n+  putc(int __c, FILE* __f) \n+  { return _C_legacy::_CPP_putc_capture(__c, __f); }\n+\n+  inline int\n+  putchar(int __c) { return _C_legacy::_CPP_putchar_capture(__c); }\n+\n+  using _C_legacy::puts;\n+\n+  inline int\n+  ungetc(int __c, FILE* __f) { return _C_legacy::ungetc(__c, __f); }\n+\n+  inline size_t\n+  fread(void* __p, size_t __z, size_t __n, FILE* __f)\n+  { return _C_legacy::fread(__p,__z,__n,__f); }\n+\n+  inline size_t\n+  fwrite(void const* __p, size_t __z, size_t __n, FILE* __f)\n+  { return _C_legacy::fwrite(__p,__z,__n,__f); }\n+\n+  inline int\n+  fgetpos(FILE* __f, fpos_t* __pos)\n+  { return _C_legacy::fgetpos(__f,&__pos->_M_dummy); }\n+\n+  inline int\n+  fseek(FILE* __f, long __off, int __how)\n+  { return _C_legacy::fseek(__f,__off,__how); }\n+\n+  inline int\n+  fsetpos(FILE* __f, fpos_t const* __pos)\n+  { return _C_legacy::fsetpos(__f,&__pos->_M_dummy); }\n+\n+  inline long\n+  ftell(FILE* __f) { return _C_legacy::ftell(__f); }\n+\n+  inline void\n+  rewind(FILE* __f) { return _C_legacy::rewind(__f); }\n+\n+  inline void\n+  clearerr(FILE* __f) { return _C_legacy::clearerr(__f); }\n+\n+  inline int\n+  feof(FILE* __f) { return _C_legacy::_CPP_feof_capture(__f); }\n+\n+  inline int\n+  ferror(FILE* __f) { return _C_legacy::ferror(__f); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::FILE;\n+  using std::fpos_t; \n+\n+  using std::remove;\n+  using std::rename;\n+  using std::tmpfile;\n+  using std::tmpnam;\n+  using std::fclose;\n+  using std::fflush;\n+  using std::fopen;\n+  using std::freopen;\n+  using std::setbuf;\n+  using std::setvbuf;\n+  using std::fprintf;\n+  using std::fscanf;\n+  using std::printf;\n+  using std::scanf;\n+  using std::sprintf;\n+  using std::sscanf;\n+  using std::vfprintf;\n+  using std::vprintf;\n+  using std::vsprintf;\n+  using std::fgetc;\n+  using std::fgets;\n+  using std::fputc;\n+  using std::fputs;\n+  using std::getc;\n+  using std::getchar;\n+  using std::gets;\n+  using std::putc;\n+  using std::putchar;\n+  using std::puts;\n+  using std::ungetc;\n+  using std::fread;\n+  using std::fwrite;\n+  using std::fgetpos;\n+  using std::fseek;\n+  using std::fsetpos;\n+  using std::ftell;\n+  using std::rewind;\n+  using std::clearerr;\n+  using std::feof;\n+  using std::ferror;\n+  using std::perror;\n+\n+# ifdef _STDIO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDIO_NEED_C_LEGACY_\n+# endif /* _STDIO_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CSTDIO*/\n+"}, {"sha": "108eb61bb5441e003c6f12f3ba0a7fa64bc5d1bd", "filename": "libstdc++-v3/include/c_std/bits/std_cstdlib.h", "status": "added", "additions": 251, "deletions": 0, "changes": 251, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstdlib.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,251 @@\n+// -*- C++ -*- header wrapper\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+// Function decls in this header are overloaded on the \n+// extern \"C\"-ness of arguments.  This is a rich ground\n+// for compiler bugs.\n+\n+#ifndef _CPP_CSTDLIB\n+#define _CPP_CSTDLIB 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STDLIB_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/c++config.h>\n+# include <bits/std_cstddef.h>  \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <stdlib.h>\n+      typedef int (*_C_cmp_fun_ptr)(const void*, const void*);  // C fn ptr\n+    }\n+\n+  typedef div_t   _CPP_div_t_capture;\n+  typedef ldiv_t  _CPP_ldiv_t_capture;\n+\n+# if _GLIBCPP_HAVE_LLDIV_T\n+  typedef lldiv_t  _CPP_lldiv_t_capture;\n+# endif\n+} // namespace _C_legacy\n+\n+#  undef size_t\n+#  undef wchar_t\n+#  undef div_t\n+#  undef ldiv_t\n+\n+#  undef atof\n+#  undef atoi\n+#  undef atol\n+#  undef strtod\n+#  undef strtol\n+#  undef strtoul\n+#  undef rand\n+#  undef srand\n+#  undef calloc\n+#  undef free\n+#  undef malloc\n+#  undef realloc\n+#  undef abort\n+#  undef atexit\n+#  undef exit\n+#  undef getenv\n+#  undef system\n+#  undef bsearch\n+#  undef qsort\n+#  undef abs\n+#  undef div\n+#  undef labs\n+#  undef ldiv\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+#  undef llabs\n+#  undef lldiv\n+#endif\n+#  undef mblen\n+#  undef mbtowc\n+#  undef wctomb\n+#  undef mbstowcs\n+#  undef wcstombs\n+\n+namespace std {\n+  struct div_t : _C_legacy::_CPP_div_t_capture { };\n+  struct ldiv_t : _C_legacy::_CPP_ldiv_t_capture { };\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+# ifdef _GLIBCPP_HAVE_LLDIV_T\n+  struct lldiv_t : _C_legacy::_CPP_lldiv_t_captur { };\n+# else\n+  struct lldiv_t\n+  {\n+    long long quot;\n+    long long rem;\n+  };\n+# endif\n+#endif\n+\n+  using _C_legacy::atof;\n+  using _C_legacy::atoi;\n+  using _C_legacy::atol;\n+  using _C_legacy::strtod;\n+  using _C_legacy::strtol;\n+  using _C_legacy::strtoul;\n+  using _C_legacy::rand;\n+  using _C_legacy::srand;\n+  using _C_legacy::calloc;\n+  using _C_legacy::free;\n+  using _C_legacy::malloc;\n+  using _C_legacy::realloc;\n+\n+  using _C_legacy::abort;\n+  using _C_legacy::atexit;\n+  using _C_legacy::exit;\n+  using _C_legacy::bsearch;\n+  using _C_legacy::qsort; \n+\n+  using _C_legacy::getenv;\n+  using _C_legacy::system;\n+  using _C_legacy::mbtowc;\n+  using _C_legacy::wctomb;\n+  using _C_legacy::mbstowcs;\n+  using _C_legacy::wcstombs;\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using _C_legacy::strtoll;\n+  using _C_legacy::strtoull;\n+  using _C_legacy::strtof;\n+  using _C_legacy::strtold;\n+#endif\n+\n+  using _C_legacy::mblen;\n+\n+  inline int \n+  abs(int __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline div_t \n+  div(int __n, int __d)\n+  { div_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline long \n+  labs(long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long \n+  abs(long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline ldiv_t \n+  ldiv(long __n, long __d)\n+  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline ldiv_t \n+  div(long __n, long __d)\n+  { ldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  inline long long \n+  llabs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline long long \n+  abs(long long __x) { return __x >= 0 ? __x : -__x; }\n+\n+  inline lldiv_t \n+  lldiv(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+\n+  inline lldiv_t \n+  div(long long __n, long long __d)\n+  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }\n+#endif\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::div_t;\n+  using std::ldiv_t;\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using std::lldiv_t;\n+#endif\n+\n+  using std::abort;\n+  using std::abs;\n+  using std::atexit;\n+  using std::atof;\n+  using std::atoi;\n+  using std::atol;\n+  using std::bsearch;\n+  using std::calloc;\n+  using std::div;\n+  using std::exit;\n+  using std::free;\n+  using std::getenv;\n+  using std::labs;\n+  using std::ldiv;\n+  using std::malloc;\n+  using std::mblen;\n+  using std::mbstowcs;\n+  using std::mbtowc;\n+  using std::qsort;\n+  using std::rand;\n+  using std::realloc;\n+  using std::srand;\n+  using std::strtod;\n+  using std::strtol;\n+  using std::strtoul;\n+  using std::system;\n+  using std::wcstombs;\n+  using std::wctomb;\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  using std::strtoll;\n+  using std::strtoull;\n+  using std::strtof;\n+  using std::strtold;\n+#endif\n+\n+# ifdef _STDLIB_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STDLIB_NEED_C_LEGACY_\n+# endif /* _STDLIB_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CSTDLIB*/\n+\n+"}, {"sha": "d5f98a49e6f4c7e49823d1d3cf7acfcd75dd939a", "filename": "libstdc++-v3/include/c_std/bits/std_cstring.h", "status": "added", "additions": 320, "deletions": 0, "changes": 320, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,320 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.4.6  C library\n+//\n+\n+#ifndef _CPP_CSTRING\n+#define _CPP_CSTRING 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _STRING_NEED_C_LEGACY_\n+# endif\n+\n+# if defined __GLIBC__ && __GLIBC__ >= 2\n+// We must not see the optimized string functions GNU libc defines.\n+#  define __NO_STRING_INLINES\n+# endif\n+\n+# include <bits/std_cstddef.h>  \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <string.h>\n+  }\n+\n+  // We do inline captures of most of these in case they\n+  // have been optimized with macros.  \n+  inline void* \n+  _CPP_memcpy_capture(void* __s1, void const* __s2, size_t __n)\n+  { return memcpy(__s1, __s2, __n); }\n+\n+  inline void* \n+  _CPP_memmove_capture(void* __s1, void const* __s2, size_t __n)\n+  { return memmove(__s1, __s2, __n); }\n+\n+  inline void* \n+  _CPP_strcpy_capture(char* __s1, char const* __s2)\n+  { return strcpy(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strncpy_capture(char* __s1, char const* __s2, size_t __n)\n+  { return strncpy(__s1, __s2, __n); }\n+\n+  inline char* \n+  _CPP_strcat_capture(char* __s1, char const* __s2)\n+  { return strcat(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strncat_capture(char* __s1, char const* __s2, size_t __n)\n+  { return strncat(__s1, __s2, __n); }\n+\n+  inline int \n+  _CPP_memcmp_capture(void const* __s1, void const* __s2, size_t __n)\n+  { return memcmp(__s1, __s2, __n); }\n+\n+  inline int \n+  _CPP_strcmp_capture(char const* __s1, char const* __s2)\n+  { return strcmp(__s1, __s2); }\n+\n+  inline int \n+  _CPP_strcoll_capture(char const* __s1, char const* __s2)\n+  { return strcoll(__s1, __s2); }\n+\n+  inline int \n+  _CPP_strncmp_capture(char const* __s1, char const* __s2, size_t __n)\n+  { return strncmp(__s1, __s2, __n); }\n+\n+  inline size_t \n+  _CPP_strxfrm_capture(char* __b, char const* __s, size_t __n)\n+  { return strxfrm(__b, __s, __n); }\n+\n+  inline void* \n+  _CPP_memchr_capture(void const* __s1, int __c, size_t __n)\n+  { return memchr(__s1, __c, __n); }\n+\n+  inline char* \n+  _CPP_strchr_capture(char const* __s1, int __c)\n+  { return strchr(__s1, __c); }\n+\n+  inline size_t \n+  _CPP_strcspn_capture(char const* __s1, char const* __s2)\n+  { return strcspn(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strpbrk_capture(char const* __s1, char const* __s2)\n+  { return strpbrk(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strrchr_capture(char const* __s1, int __c)\n+  { return strrchr(__s1, __c); }\n+\n+  inline size_t \n+  _CPP_strspn_capture(char const* __s1, char const* __s2)\n+  { return strspn(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strstr_capture(char const* __s1, char const* __s2)\n+  { return strstr(__s1, __s2); }\n+\n+  inline char* \n+  _CPP_strtok_capture(char* __s1, char const* __s2)\n+  { return strtok(__s1, __s2); }\n+\n+  inline void* \n+  _CPP_memset_capture(void* __s, int __c, size_t __n)\n+  { return memset(__s, __c, __n); }\n+\n+  // inline char* \n+  // _CPP_strerror_capture(int __num)\n+  // { return strerror(__num); }\n+\n+  inline size_t \n+  _CPP_strlen_capture(char const* __s)\n+  { return strlen(__s); }\n+} // namespace _C_legacy\n+\n+# undef memcpy\n+# undef memmove\n+# undef strcpy\n+# undef strncpy\n+# undef strcat\n+# undef strncat\n+# undef memcmp\n+# undef strcmp\n+# undef strcoll\n+# undef strncmp\n+# undef strxfrm\n+# undef memchr\n+# undef strchr\n+# undef strcspn\n+# undef strpbrk\n+# undef strrchr\n+# undef strspn\n+# undef strstr\n+# undef strtok\n+# undef memset\n+# undef strerror\n+# undef strlen\n+\n+namespace std {\n+  // Redefine most of these inline.  Note that the \n+  // C++ definition differs from C in some cases.\n+  inline void* \n+  memcpy(void* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memcpy_capture(__s1, __s2, __n); }\n+\n+  inline void* \n+  memmove(void* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memmove_capture(__s1, __s2, __n); }\n+\n+  inline void* \n+  strcpy(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcpy_capture(__s1, __s2); }\n+\n+  inline char* \n+  strncpy(char* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncpy_capture(__s1, __s2, __n); }\n+\n+  inline char* \n+  strcat(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcat_capture(__s1, __s2); }\n+\n+  inline char* \n+  strncat(char* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncat_capture(__s1, __s2, __n); }\n+\n+  inline int \n+  memcmp(void const* __s1, void const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_memcmp_capture(__s1, __s2, __n); }\n+\n+  inline int \n+  strcmp(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcmp_capture(__s1, __s2); }\n+\n+  inline int \n+  strcoll(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcoll_capture(__s1, __s2); }\n+\n+  inline int \n+  strncmp(char const* __s1, char const* __s2, size_t __n)\n+  { return _C_legacy::_CPP_strncmp_capture(__s1, __s2, __n); }\n+\n+  inline size_t \n+  strxfrm(char* __b, char const* __s, size_t __n)\n+  { return _C_legacy::_CPP_strxfrm_capture(__b, __s, __n); }\n+\n+  inline void \n+  const* memchr(void const* __s1, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n+\n+  inline void* \n+  memchr(void* __s1, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memchr_capture(__s1, __c, __n); }\n+\n+  inline char const* \n+  strchr(char const* __s1, int __c)\n+  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n+\n+  inline char*\n+  strchr(char* __s1, int __c)\n+  { return _C_legacy::_CPP_strchr_capture(__s1, __c); }\n+\n+  inline size_t \n+  strcspn(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strcspn_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strpbrk(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n+\n+  inline char* \n+  strpbrk(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strpbrk_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strrchr(char const* __s1, int __c)\n+  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n+\n+  inline char* \n+  strrchr(char* __s1, int __c)\n+  { return _C_legacy::_CPP_strrchr_capture(__s1, __c); }\n+\n+  inline size_t \n+  strspn(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strspn_capture(__s1, __s2); }\n+\n+  inline char const* \n+  strstr(char const* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n+\n+  inline char* \n+  strstr(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strstr_capture(__s1, __s2); }\n+\n+  inline char* \n+  strtok(char* __s1, char const* __s2)\n+  { return _C_legacy::_CPP_strtok_capture(__s1, __s2); }\n+\n+  inline void* \n+  memset(void* __s, int __c, size_t __n)\n+  { return _C_legacy::_CPP_memset_capture(__s, __c, __n); }\n+\n+  using _C_legacy::strerror;\n+\n+  inline size_t \n+  strlen(char const* __s)\n+  { return _C_legacy::_CPP_strlen_capture(__s); }\n+\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::memcpy;\n+  using std::memmove;\n+  using std::strcpy;\n+  using std::strncpy;\n+  using std::strcat;\n+  using std::strncat;\n+  using std::memcmp;\n+  using std::strcmp;\n+  using std::strcoll;\n+  using std::strncmp;\n+  using std::strxfrm;\n+  using std::memchr;\n+  using std::strchr;\n+  using std::strcspn;\n+  using std::strpbrk;\n+  using std::strrchr;\n+  using std::strspn;\n+  using std::strstr;\n+  using std::strtok;\n+  using std::memset;\n+  using std::strerror;\n+  using std::strlen;\n+\n+# ifdef _STRING_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _STRING_NEED_C_LEGACY_\n+# endif /* _STRING_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CSTRING*/\n+"}, {"sha": "fdcf5ae26577828744664c8f8920b9d5c6ce764c", "filename": "libstdc++-v3/include/c_std/bits/std_ctime.h", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_ctime.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,140 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5  Date and time\n+//\n+\n+#ifndef _CPP_CTIME\n+#define _CPP_CTIME 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _TIME_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/std_cstddef.h>  \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+\n+      // XXX\n+      // glibc 2.1.x time.h is on crack\n+#   undef __need_time_t\n+#   undef __need_clock_t\n+#   undef __need_timespec\n+\n+#   include_next <time.h>\n+  }\n+\n+  typedef clock_t\t_CPP_clock_t_capture;\n+  typedef time_t    \t_CPP_time_t_capture;\n+  typedef tm \t\t_CPP_tm_capture;\n+\n+} // namespace _C_legacy\n+\n+#  undef clock_t\n+#  undef time_t\n+#  undef tm\n+#  undef clock\n+#  undef difftime\n+#  undef mktime\n+#  undef time\n+#  undef asctime\n+#  undef ctime\n+#  undef gmtime\n+#  undef localtime\n+#  undef strftime\n+\n+namespace std {\n+\n+  // Adopt C names into std::\n+  typedef _C_legacy::_CPP_clock_t_capture  clock_t;\n+  typedef _C_legacy::_CPP_time_t_capture   time_t;\n+  struct tm : _C_legacy::_CPP_tm_capture  { };\n+\n+  using _C_legacy::clock;\n+  using _C_legacy::difftime;\n+  using _C_legacy::mktime;\n+  using _C_legacy::time;\n+  using _C_legacy::ctime;\n+\n+  inline char* \n+  asctime(const tm* __t) \n+  { return _C_legacy::asctime(static_cast<_C_legacy::_CPP_tm_capture const*>(__t)); }\n+\n+  inline tm* \n+  gmtime(time_t const* __tp) \n+  { return reinterpret_cast<tm*>(_C_legacy::gmtime(__tp)); }\n+\n+  inline tm* \n+  localtime(const time_t* __tp) \n+  { return reinterpret_cast<tm*>(_C_legacy::localtime(__tp)); } \n+    \n+  inline size_t \n+  strftime(char* __buf, size_t __maxsz, char const* __fmt, tm const* __tp) \n+  { return _C_legacy::strftime(__buf, __maxsz, __fmt,\n+\t       \t       static_cast<_C_legacy::_CPP_tm_capture const*>(__tp)); }\n+\n+} // namespace std\n+  \n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::clock_t;\n+  using std::time_t;\n+  using std::tm;\n+\n+  using std::clock;\n+  using std::difftime;\n+  using std::mktime;\n+  using std::time;\n+  using std::asctime;\n+  using std::ctime;\n+  using std::gmtime;\n+  using std::localtime;\n+  using std::strftime;\n+\n+# ifdef _TIME_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _TIME_NEED_C_LEGACY_\n+# endif /* _TIME_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CTIME*/\n+\n+"}, {"sha": "7cda9359738ea96f66d8b6524302218548ed9173", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "added", "additions": 366, "deletions": 0, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,366 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 21\n+\n+#ifndef _CPP_CWCHAR\n+# define _CPP_CWCHAR 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_  /* sub-included by a C header */\n+#  define _WCHAR_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/std_cstdio.h> \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <wchar.h>\n+  }\n+\n+#if 0\n+  // XXX\n+  inline int \n+  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n+\n+  inline int \n+  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n+\n+  inline wint_t \n+  _CPP_fgetwc_capture(FILE* __stream)\n+  { return fgetwc(__stream); }\n+\n+  inline wchar_t*\n+  _CPP_fgetws_capture(wchar_t* __s, int __n, FILE* __stream)\n+  { return fgetws(__s, __n, __stream); }\n+\n+  inline wint_t \n+  _CPP_fputwc_capture(wchar_t __c, FILE* __stream)\n+  { return fputwc(__c, __stream); }\n+\n+  inline int \n+  _CPP_fputws_capture(const wchar_t* __s, FILE* __stream)\n+  { return fputws(__s, __stream); }\n+\n+  inline int \n+  _CPP_fwide_capture(FILE* __stream, int __mode) \n+  { return fwide(__stream, __mode); }\n+\n+  inline wint_t \n+  _CPP_fgetwc_capture(FILE* __stream)\n+  { return fgetwc(__stream); }\n+\n+  inline wint_t \n+  _CPP_putwc_capture(wchar_t __c, FILE* __stream)\n+  { return putwc(__c, __stream); }\n+  \n+  inline wint_t \n+  _CPP_ungetwc_capture(wint_t __c, FILE* __stream)\n+  { return ungetwc(__c, __stream); }\n+#endif\n+} // namespace _C_legacy\n+\n+# undef wint_t\n+# undef mbstate_t\n+\n+# undef fwprintf\n+# undef fwscanf\n+# undef swprintf\n+# undef swscanf\n+# undef vfwprintf\n+# undef vfwscanf\n+# undef vswprintf\n+# undef vswscanf\n+# undef vwprintf\n+# undef vwscanf\n+# undef wprintf\n+# undef wscanf\n+# undef fgetwc\n+# undef fgetws\n+# undef fputwc\n+# undef fputws\n+# undef fwide\n+# undef getwc\n+# undef getwchar\n+# undef putwc\n+# undef putwchar\n+# undef ungetwc\n+# undef wcstod\n+# undef wcstof\n+# undef wcstold\n+# undef wcstol\n+# undef wcstoll\n+# undef wcstoul\n+# undef wcstoull\n+# undef wcscpy\n+# undef wcsncpy\n+# undef wcscat\n+# undef wcsncat\n+# undef wcsmp\n+# undef wcscoll\n+# undef wcsncmp\n+# undef wcsxfrm\n+# undef wcschr\n+# undef wcscspn\n+# undef wcslen\n+# undef wcspbrk\n+# undef wcsrchr\n+# undef wcsspn\n+# undef wcsstr\n+# undef wcstok\n+# undef wmemchr\n+# undef wmemcmp\n+# undef wmemcpy\n+# undef wmemmove\n+# undef wmemset\n+# undef wcsftime\n+# undef btowc\n+# undef wctob\n+# undef mbsinit\n+# undef mbrlen\n+# undef mbrtowc\n+# undef wcrtomb\n+# undef mbsrtowcs\n+# undef wcsrtombs\n+\n+namespace std {\n+  using _C_legacy::wint_t;\n+  using _C_legacy::mbstate_t;\n+\n+#if 0\n+  using _C_legacy::swprintf;\n+  using _C_legacy::swscanf;\n+  using _C_legacy::vswprintf;\n+  using _C_legacy::vswscanf;\n+  using _C_legacy::vwprintf;\n+  using _C_legacy::vwscanf;\n+  using _C_legacy::wprintf;\n+  using _C_legacy::wscanf;\n+  using _C_legacy::getwchar;\n+  using _C_legacy::putwchar;\n+#endif\n+\n+  using _C_legacy::wcstod;\n+  using _C_legacy::wcstof;\n+  using _C_legacy::wcstold;\n+  using _C_legacy::wcstol;\n+  using _C_legacy::wcstoll;\n+  using _C_legacy::wcstoul;\n+  using _C_legacy::wcstoull;\n+  using _C_legacy::wcscpy;\n+  using _C_legacy::wcsncpy;\n+  using _C_legacy::wcscat;\n+  using _C_legacy::wcsncat;\n+\n+#if 0\n+  using _C_legacy::wcsmp;\n+#endif\n+\n+  using _C_legacy::wcscoll;\n+  using _C_legacy::wcsncmp;\n+  using _C_legacy::wcsxfrm;\n+  using _C_legacy::wcschr;\n+  using _C_legacy::wcscspn;\n+  using _C_legacy::wcslen;\n+  using _C_legacy::wcspbrk;\n+  using _C_legacy::wcsrchr;\n+  using _C_legacy::wcsspn;\n+  using _C_legacy::wcsstr;\n+  using _C_legacy::wcstok;\n+  using _C_legacy::wmemchr;\n+  using _C_legacy::wmemcmp;\n+  using _C_legacy::wmemcpy;\n+  using _C_legacy::wmemmove;\n+  using _C_legacy::wmemset;\n+\n+#if 0\n+  using _C_legacy::wcsftime;\n+#endif\n+\n+  using _C_legacy::btowc;\n+  using _C_legacy::wctob;\n+  using _C_legacy::mbsinit;\n+  using _C_legacy::mbrlen;\n+  using _C_legacy::mbrtowc;\n+  using _C_legacy::wcrtomb;\n+  using _C_legacy::mbsrtowcs;\n+  using _C_legacy::wcsrtombs;\n+\n+#if 0\n+  // XXX\n+  inline int \n+  fwprintf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  fwscanf(FILE* __stream, const wchar_t* __format, ...); \n+\n+  inline int \n+  vfwprintf(FILE* __stream, const wchar_t* __format, va_list __arg); \n+\n+  inline int \n+  vfwscanf(FILE* __stream, const wchar_t* __format, va_list __arg);\n+\n+  inline wint_t \n+  fgetwc(FILE* __stream)\n+  { return _C_legacy::_CPP_fgetwc_capture(__stream); }\n+\n+  inline wchar_t*\n+  fgetws(wchar_t* __s, int __n, FILE* __stream) \n+  { return _C_legacy::_CPP_fgetws_capture(__s, __n, __stream); }\n+\n+  inline wint_t \n+  fputwc(wchar_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_fputwc_capture(__c, __stream); }\n+\n+  inline int \n+  fputws(const wchar_t* __s, FILE* __stream)\n+  { return _C_legacy::_CPP_fputws_capture(__s, __stream); }\n+\n+  inline int \n+  fwide(FILE* __stream, int __mode)\n+  { return _C_legacy::_CPP_fwide_capture(__stream, __mode); }\n+\n+  inline wint_t \n+  getwc(FILE* __stream)\n+  { return _C_legacy::_CPP_getwc_capture(__stream); }\n+\n+  inline wint_t \n+  putwc(wchar_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_putwc_capture(__c, __stream); }\n+  \n+  inline wint_t \n+  ungetwc(wint_t __c, FILE* __stream)\n+  { return _C_legacy::_CPP_ungetwc_capture(__c, __stream); }\n+#endif\n+}\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::wint_t;\n+  using std::mbstate_t;\n+\n+#if 0\n+  using std::fwprintf;\n+  using std::fwscanf;\n+  using std::swprintf;\n+  using std::swscanf;\n+  using std::vfwprintf;\n+  using std::vfwscanf;\n+  using std::vswprintf;\n+  using std::vswscanf;\n+  using std::vwprintf;\n+  using std::vwscanf;\n+  using std::wprintf;\n+  using std::wscanf;\n+  using std::fgetwc;\n+  using std::fgetws;\n+  using std::fputwc;\n+  using std::fputws;\n+  using std::fwide;\n+  using std::getwc;\n+  using std::getwchar;\n+  using std::putwc;\n+  using std::putwchar;\n+  using std::ungetwc;\n+#endif\n+\n+  using std::wcstod;\n+  using std::wcstof;\n+  using std::wcstold;\n+  using std::wcstol;\n+  using std::wcstoll;\n+  using std::wcstoul;\n+  using std::wcstoull;\n+  using std::wcscpy;\n+  using std::wcsncpy;\n+  using std::wcscat;\n+  using std::wcsncat;\n+\n+#if 0\n+  using std::wcsmp;\n+#endif\n+\n+  using std::wcscoll;\n+  using std::wcsncmp;\n+  using std::wcsxfrm;\n+  using std::wcschr;\n+  using std::wcscspn;\n+  using std::wcslen;\n+  using std::wcspbrk;\n+  using std::wcsrchr;\n+  using std::wcsspn;\n+  using std::wcsstr;\n+  using std::wcstok;\n+  using std::wmemchr;\n+  using std::wmemcmp;\n+  using std::wmemcpy;\n+  using std::wmemmove;\n+  using std::wmemset;\n+\n+#if 0\n+  using std::wcsftime;\n+#endif\n+\n+  using std::btowc;\n+  using std::wctob;\n+  using std::mbsinit;\n+  using std::mbrlen;\n+  using std::mbrtowc;\n+  using std::wcrtomb;\n+  using std::mbsrtowcs;\n+  using std::wcsrtombs;\n+\n+# ifdef _WCHAR_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _WCHAR_NEED_C_LEGACY_\n+# endif /* _WCHAR_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CWCHAR*/\n+\n+\n+\n+\n+"}, {"sha": "ecce6e87f993b81f37623ea964e6cd90903079fe", "filename": "libstdc++-v3/include/c_std/bits/std_cwctype.h", "status": "added", "additions": 167, "deletions": 0, "changes": 167, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwctype.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,167 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: \n+//\n+\n+#ifndef _CPP_CWCTYPE\n+#define _CPP_CWCTYPE 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _CWCHAR_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/std_cwchar.h>  \n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#   define _IN_C_LEGACY_\n+#   pragma GCC system_header\n+#   include_next <wctype.h>\n+  }\n+} // namespace _C_legacy\n+\n+# undef wctype_t\n+# undef wctrans_t\n+# undef iswalpha\n+# undef iswupper\n+# undef iswlower\n+# undef iswdigit\n+# undef iswxdigit\n+# undef iswalnum\n+# undef iswspace\n+# undef iswpunct\n+# undef iswprint\n+# undef iswgraph\n+# undef iswcntrl\n+# undef iswctype\n+# undef towctrans\n+# undef towlower\n+# undef towupper\n+# undef wctrans\n+# undef wctype\n+\n+namespace std {\n+  using _C_legacy::wctype_t;\n+  using _C_legacy::wctrans_t;\n+\n+  inline int \n+  iswalpha(wint_t __wc) { return _C_legacy::iswalpha(__wc); }\n+\n+  inline int \n+  iswupper(wint_t __wc) { return _C_legacy::iswupper(__wc); }\n+\n+  inline int \n+  iswlower(wint_t __wc) { return _C_legacy::iswlower(__wc); }\n+\n+  inline int \n+  iswdigit(wint_t __wc) { return _C_legacy::iswdigit(__wc); }\n+\n+  inline int \n+  iswxdigit(wint_t __wc) { return _C_legacy::iswxdigit(__wc); }\n+\n+  inline int \n+  iswalnum(wint_t __wc) { return _C_legacy::iswalnum(__wc); }\n+\n+  inline int \n+  iswspace(wint_t __wc) { return _C_legacy::iswspace(__wc); }\n+\n+  inline int \n+  iswpunct(wint_t __wc) { return _C_legacy::iswpunct(__wc); }\n+\n+  inline int \n+  iswprint(wint_t __wc) { return _C_legacy::iswprint(__wc); }\n+\n+  inline int \n+  iswgraph(wint_t __wc) { return _C_legacy::iswgraph(__wc); }\n+\n+  inline int \n+  iswcntrl(wint_t __wc) { return _C_legacy::iswcntrl(__wc); }\n+\n+  inline int \n+  towlower(wint_t __wc) { return _C_legacy::towlower(__wc); }\n+\n+  inline int \n+  towupper(wint_t __wc) { return _C_legacy::towupper(__wc); }\n+\n+  inline int \n+  iswctype(wint_t __wc, wctype_t __desc) \n+  { return _C_legacy::iswctype(__wc, __desc); }\n+\n+  inline wint_t \n+  towctrans(wint_t __wc, wctrans_t __desc)\n+  { return _C_legacy::towctrans (__wc, __desc); }\n+  \n+  inline wctrans_t \n+  wctrans(const char *__property) { return _C_legacy::wctrans(__property); }\n+\n+  inline wctype_t \n+  wctype(char const* __property) { return _C_legacy::wctype(__property); }\n+} // namespace std\n+\n+# undef _IN_C_LEGACY_\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using std::wint_t;\n+  using std::wctype_t;\n+  using std::wctrans_t;\n+  using std::iswalpha;\n+  using std::iswupper;\n+  using std::iswlower;\n+  using std::iswdigit;\n+  using std::iswxdigit;\n+  using std::iswalnum;\n+  using std::iswspace;\n+  using std::iswpunct;\n+  using std::iswprint;\n+  using std::iswgraph;\n+  using std::iswcntrl;\n+  using std::iswctype;\n+  using std::towctrans;\n+  using std::towlower;\n+  using std::towupper;\n+  using std::wctrans;\n+  using std::wctype;\n+\n+# ifdef _CWCHAR_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _CWCHAR_NEED_C_LEGACY_\n+# endif /* _CWCHAR_NEED_C_LEGACY_ */\n+\n+#endif /*_CPP_CWCTYPE*/\n+"}, {"sha": "0bed4bf1d4af890187748e539881860e0f2417d2", "filename": "libstdc++-v3/include/c_std/bits/wrap_fcntl.h", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_fcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_fcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_fcntl.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,92 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 26.5  C library extensions\n+//\n+\n+#ifndef _CPP_FCNTL\n+#define _CPP_FCNTL 1\n+\n+# include <bits/c++config.h>\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+    // XXX\n+# undef SEEK_SET\n+# undef SEEK_CUR\n+# undef SEEK_END\n+\n+#     include_next <fcntl.h>\n+  }\n+} // namespace _C_legacy\n+\n+# undef SEEK_SET\n+# undef SEEK_CUR\n+# undef SEEK_END\n+\n+// NB: Don't bring elements from this non-standard header into namespace std.\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "3e72e2d46eeb50be14d4e5fce473d818409c3466", "filename": "libstdc++-v3/include/c_std/bits/wrap_iconv.h", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iconv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iconv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iconv.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,51 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5 Extensions  \n+//\n+\n+#ifndef _CPP_WRAP_ICONV_H\n+#define _CPP_WRAP_ICONV_H 1\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <iconv.h>\n+  }\n+} // namespace _C_legacy\n+\n+// NB: Don't bring elements from this non-standard header into namespace std.\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+\n+"}, {"sha": "ddbabd7a424c70a5cff442c613ca2f2609abe18b", "filename": "libstdc++-v3/include/c_std/bits/wrap_iolibio.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_iolibio.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,50 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5 Extensions  \n+//\n+\n+#ifndef _CPP_WRAP_IOLIBIO_H\n+#define _CPP_WRAP_IOLIBIO_H 1\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <iolibio.h>\n+  }\n+} // namespace _C_legacy\n+\n+// NB: Don't bring elements from this non-standard header into namespace std.\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+"}, {"sha": "e5da6e3f382de5c639a1987e34e5af87e6474580", "filename": "libstdc++-v3/include/c_std/bits/wrap_libio.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libio.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,50 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5 Extensions  \n+//\n+\n+#ifndef _CPP_WRAP_LIBIO_H\n+#define _CPP_WRAP_LIBIO_H 1\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <libio.h>\n+  }\n+} // namespace _C_legacy\n+\n+// NB: Don't bring elements from this non-standard header into namespace std.\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+"}, {"sha": "32f8c2ebd10a60f0bb663326f936b0347a6a6434", "filename": "libstdc++-v3/include/c_std/bits/wrap_libioP.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_libioP.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,50 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 20.5 Extensions  \n+//\n+\n+#ifndef _CPP_WRAP_LIBIOP_H\n+#define _CPP_WRAP_LIBIOP_H 1\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <libioP.h>\n+  }\n+} // namespace _C_legacy\n+\n+// NB: Don't bring elements from this non-standard header into namespace std.\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+"}, {"sha": "d04eeba8a31b8f68d9bff5ad6e891eeee99d3164", "filename": "libstdc++-v3/include/c_std/bits/wrap_pthread.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_pthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_pthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fwrap_pthread.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,81 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 26.5  C library extensions\n+//\n+\n+#ifndef _CPP_WRAP_PTHREAD_H\n+#define _CPP_WRAP_PTHREAD_H 1\n+\n+# include <bits/c++config.h>\n+\n+namespace _C_legacy {\n+  extern \"C\" {\n+#     define _IN_C_LEGACY_\n+#     pragma GCC system_header\n+#     include_next <pthread.h>\n+  }\n+} // namespace _C_legacy\n+\n+# undef _IN_C_LEGACY_\n+\n+#endif\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+"}, {"sha": "f19a15492741348eaf7596f73619eb05f350caee", "filename": "libstdc++-v3/include/c_std/fcntl.h", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ffcntl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ffcntl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ffcntl.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,63 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_FCNTL_H_\n+# define _INCLUDED_CPP_FCNTL_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _FCNTL_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_fcntl.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using _C_legacy::flock;\n+\n+  using _C_legacy::creat;\n+  using _C_legacy::open;\n+  using _C_legacy::fcntl;\n+\n+# ifdef _FCNTL_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _FCNTL_NEED_C_LEGACY_\n+# endif /* _FCNTL_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_FCNTL_H_ */\n+\n+\n+\n+"}, {"sha": "1ea5038c24a2a222aab81477cf9f7837ad31dac5", "filename": "libstdc++-v3/include/c_std/iconv.h", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ficonv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ficonv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Ficonv.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,66 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_ICONV_H_\n+# define _INCLUDED_CPP_ICONV_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _ICONV_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_iconv.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+  // NB: Cannot use typedefs here to inject the names as the \"C\" headers\n+  // often include typedefs that include the keyword 'struct'\n+  using _C_legacy::iconv_t;\n+\n+  using _C_legacy::iconv_open;\n+  using _C_legacy::iconv;\n+  using _C_legacy::iconv_close;\n+\n+# ifdef _ICONV_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _ICONV_NEED_C_LEGACY_\n+# endif /* _ICONV_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_ICONV_H_ */\n+\n+\n+\n+"}, {"sha": "845f6403594e3068f23d69da5ee3e0385a49bceb", "filename": "libstdc++-v3/include/c_std/iolibio.h", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fiolibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fiolibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fiolibio.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,58 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_IOLIBIO_H_\n+# define _INCLUDED_CPP_IOLIBIO_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _IOLIBIO_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_iolibio.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+# ifdef _IOLIBIO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _IOLIBIO_NEED_C_LEGACY_\n+# endif /* _IOLIBIO_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_IOLIBIO_H_ */\n+\n+\n+\n+"}, {"sha": "2cafc7d88ebffa154757c6c9ede9e4cf1c9063da", "filename": "libstdc++-v3/include/c_std/libio.h", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Flibio.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,81 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_LIBIO_H_\n+# define _INCLUDED_CPP_LIBIO_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LIBIO_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_libio.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+\n+  // NB: Cannot use typedefs here to inject the names as the \"C\" headers\n+  // often include typedefs that include the keyword 'struct'\n+  using _C_legacy::_IO_pos_t;\n+  using _C_legacy::_IO_fpos_t;\n+  using _C_legacy::_IO_fpos64_t;\n+  using _C_legacy::_IO_size_t;\n+  using _C_legacy::_IO_ssize_t;\n+  using _C_legacy::_IO_off_t;\n+  using _C_legacy::_IO_off64_t;\n+  using _C_legacy::_IO_pid_t;\n+  using _C_legacy::_IO_uid_t;\n+  using _C_legacy::_IO_iconv_t;\n+  using _C_legacy::_IO_va_list;\n+  using _C_legacy::_IO_wint_t;\n+  using _C_legacy::_IO_lock_t;\n+\n+  using _C_legacy::_IO_marker;\n+  using _C_legacy::_IO_codecvt;\n+  using _C_legacy::_IO_wide_data;\n+  using _C_legacy::_IO_FILE;\n+  using _C_legacy::_IO_cookie_io_functions_t;\n+  using _C_legacy::_IO_cookie_file;\n+\n+# ifdef _LIBIO_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LIBIO_NEED_C_LEGACY_\n+# endif /* _LIBIO_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_LIBIO_H_ */\n+\n+\n+\n+"}, {"sha": "da3e716768fb92dedc657b098ed1a34433f644ed", "filename": "libstdc++-v3/include/c_std/libioP.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2FlibioP.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,64 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_LIBIOP_H_\n+# define _INCLUDED_CPP_LIBIOP_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _LIBIOP_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_libioP.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using _C_legacy::_IO_jump_t;\n+  using _C_legacy::_IO_FILE_plus;\n+  using _C_legacy::_IO_cookie_file;\n+\n+  using _C_legacy::_IO_file_jumps;\n+  using _C_legacy::_IO_wfile_jumps;\n+\n+# ifdef _LIBIOP_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _LIBIOP_NEED_C_LEGACY_\n+# endif /* _LIBIOP_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_LIBIOP_H_ */\n+\n+\n+\n+"}, {"sha": "8692d3e52d43b6b88822ad4249c2b4f974b569cb", "filename": "libstdc++-v3/include/c_std/pthread.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fpthread.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fpthread.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fpthread.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,86 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef  _INCLUDED_CPP_PTHREAD_H_\n+# define _INCLUDED_CPP_PTHREAD_H_ 1\n+\n+# ifdef _IN_C_LEGACY_  /* sub-included by a C header */\n+      // get out of the \"legacy\"\n+    } // close extern \"C\"\n+  }   // close namespace _C_legacy::\n+#  undef _IN_C_LEGACY_\n+#  define _PTHREAD_NEED_C_LEGACY_\n+# endif\n+\n+# include <bits/wrap_pthread.h>\n+\n+  // Expose global C names, including non-standard ones, but shadow\n+  // some names and types with the std:: C++ version.\n+  using _C_legacy::__sched_param;\n+\n+  using _C_legacy::pthread_attr_t;\n+  using _C_legacy::pthread_cond_t;\n+  using _C_legacy::pthread_condattr_t;\n+  using _C_legacy::pthread_key_t;\n+  using _C_legacy::pthread_mutex_t;\n+  using _C_legacy::pthread_mutexattr_t;\n+  using _C_legacy::pthread_once_t;\n+  using _C_legacy::pthread_rwlock_t;\n+  using _C_legacy::pthread_rwlockattr_t;\n+  using _C_legacy::pthread_t;\n+\n+  using _C_legacy::pthread_mutex_init;\n+  using _C_legacy::pthread_mutex_destroy;\n+  using _C_legacy::pthread_mutex_lock;\n+  using _C_legacy::pthread_mutex_trylock;\n+  using _C_legacy::pthread_mutex_unlock;\n+  using _C_legacy::pthread_mutexattr_init;\n+  using _C_legacy::pthread_mutexattr_destroy;\n+  using _C_legacy::pthread_mutexattr_settype;\n+  using _C_legacy::pthread_mutexattr_gettype;\n+  using _C_legacy::pthread_key_create;\n+  using _C_legacy::pthread_key_delete;\n+  using _C_legacy::pthread_setspecific;\n+  using _C_legacy::pthread_getspecific;\n+  using _C_legacy::pthread_once;\n+  using _C_legacy::pthread_atfork;\n+\n+# ifdef _PTHREAD_NEED_C_LEGACY_\n+  // dive back into the \"swamp\"\n+  namespace _C_legacy {\n+    extern \"C\" {\n+#  define _IN_C_LEGACY_\n+#  undef _PTHREAD_NEED_C_LEGACY_\n+# endif /* _PTHREAD_NEED_C_LEGACY_ */\n+#endif /* _INCLUDED_CPP_PTHREAD_H_ */\n+\n+\n+\n+"}, {"sha": "dd7c303556d10b05982ae3a56f08791619d69133", "filename": "libstdc++-v3/include/c_std/sys/cdefs.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fsys%2Fcdefs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22aef5143dec8081980621d99f929d4b888711ce/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fsys%2Fcdefs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fsys%2Fcdefs.h?ref=22aef5143dec8081980621d99f929d4b888711ce", "patch": "@@ -0,0 +1,43 @@\n+// -*- C++ -*- header wrapper.\n+\n+// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+\n+#ifndef _CPP_SYS_CDEFS_H\n+# define _CPP_SYS_CDEFS_H\n+\n+# pragma GCC system_header\n+# include_next <sys/cdefs.h>\n+\n+// glibc-2 hackery.  Other systems likely require other hacks.\n+#undef\t__BEGIN_DECLS\n+#define\t__BEGIN_DECLS\n+#undef\t__END_DECLS\n+#define\t__END_DECLS\n+\n+#endif"}]}