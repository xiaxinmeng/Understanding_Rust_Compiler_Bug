{"sha": "56638b9b1853666f575928f8baf17f70e4ed3517", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY2MzhiOWIxODUzNjY2ZjU3NTkyOGY4YmFmMTdmNzBlNGVkMzUxNw==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-17T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-06-17T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "a7e38bbaa591cfe15a8e8bb6977feb9c790762f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7e38bbaa591cfe15a8e8bb6977feb9c790762f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56638b9b1853666f575928f8baf17f70e4ed3517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56638b9b1853666f575928f8baf17f70e4ed3517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56638b9b1853666f575928f8baf17f70e4ed3517", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56638b9b1853666f575928f8baf17f70e4ed3517/comments", "author": null, "committer": null, "parents": [{"sha": "d4b0f996fc497fba8724960107c3b52d3011c117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b0f996fc497fba8724960107c3b52d3011c117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b0f996fc497fba8724960107c3b52d3011c117"}], "stats": {"total": 760, "additions": 759, "deletions": 1}, "files": [{"sha": "a8472544ee8babc78bfe9fb4dfc0c18219e140a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,83 @@\n+2020-06-16  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\tPR tree-optimization/95649\n+\t* tree-ssa-propagate.c (propagate_into_phi_args): Do not propagate unless\n+\tvalue is a constant.\n+\n+2020-06-16  Stefan Schulze Frielinghaus  <stefansf@linux.ibm.com>\n+\n+\t* config.in: Regenerate.\n+\t* config/s390/s390.c (print_operand): Emit vector alignment hints\n+\tfor target z13, if AS accepts them.  For other targets the logic\n+\tstays the same.\n+\t* config/s390/s390.h (TARGET_VECTOR_LOADSTORE_ALIGNMENT_HINTS): Define\n+\tmacro.\n+\t* configure: Regenerate.\n+\t* configure.ac: Check HAVE_AS_VECTOR_LOADSTORE_ALIGNMENT_HINTS_ON_Z13.\n+\n+2020-06-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm_mve.h (__arm_vaddq_m_n_s8): Correct the intrinsic\n+\targuments.\n+\t(__arm_vaddq_m_n_s32): Likewise.\n+\t(__arm_vaddq_m_n_s16): Likewise.\n+\t(__arm_vaddq_m_n_u8): Likewise.\n+\t(__arm_vaddq_m_n_u32): Likewise.\n+\t(__arm_vaddq_m_n_u16): Likewise.\n+\t(__arm_vaddq_m): Modify polymorphic variant.\n+\n+2020-06-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/mve.md (mve_uqrshll_sat<supf>_di): Correct the predicate\n+\tand constraint of all the operands.\n+\t(mve_sqrshrl_sat<supf>_di): Likewise.\n+\t(mve_uqrshl_si): Likewise.\n+\t(mve_sqrshr_si): Likewise.\n+\t(mve_uqshll_di): Likewise.\n+\t(mve_urshrl_di): Likewise.\n+\t(mve_uqshl_si): Likewise.\n+\t(mve_urshr_si): Likewise.\n+\t(mve_sqshl_si): Likewise.\n+\t(mve_srshr_si): Likewise.\n+\t(mve_srshrl_di): Likewise.\n+\t(mve_sqshll_di): Likewise.\n+\t* config/arm/predicates.md (arm_low_register_operand): Define.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* tree.h (OMP_FOR_NON_RECTANGULAR): Define.\n+\t* gimplify.c (gimplify_omp_for): Diagnose schedule, ordered\n+\tor dist_schedule clause on non-rectangular loops.  Handle\n+\tgimplification of non-rectangular lb/b expressions.  When changing\n+\titeration variable, adjust also non-rectangular lb/b expressions\n+\treferencing that.\n+\t* omp-general.h (struct omp_for_data_loop): Add m1, m2 and outer\n+\tmembers.\n+\t(struct omp_for_data): Add non_rect member.\n+\t* omp-general.c (omp_extract_for_data): Handle non-rectangular\n+\tloops.  Fill in non_rect, m1, m2 and outer.\n+\t* omp-low.c (lower_omp_for): Handle non-rectangular lb/b expressions.\n+\t* omp-expand.c (expand_omp_for): Emit sorry_at for unsupported\n+\tnon-rectangular loop cases and assert for cases that can't be\n+\tnon-rectangular.\n+\t* tree-pretty-print.c (dump_mem_ref): Formatting fix.\n+\t(dump_omp_loop_non_rect_expr): New function.\n+\t(dump_generic_node): Handle non-rectangular OpenMP loops.\n+\t* tree-pretty-print.h (dump_omp_loop_non_rect_expr): Declare.\n+\t* gimple-pretty-print.c (dump_gimple_omp_for): Handle non-rectangular\n+\tOpenMP loops.\n+\n+2020-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95690\n+\t* varasm.c (build_constant_desc): Remove set_mem_attributes call.\n+\n+2020-06-16  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/95683\n+\t* config/riscv/riscv.c (riscv_gpr_save_operation_p): Remove\n+\tassertion and turn it into a early exit check.\n+\n 2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* gimplify.c (gimplify_init_constructor) <AGGREGATE_TYPE>: Declare"}, {"sha": "d2b0822d197766d630bb2b8cf53306c44173c942", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1 +1 @@\n-20200616\n+20200617"}, {"sha": "31d6c2498494a004d01a63b2a5e6a07598a51b37", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,279 @@\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sinfo.ads (Conversion_OK): Document use for 'Pos and 'Val.\n+\t* exp_attr.adb (Get_Integer_Type): New function returning a\n+\tsmall integer type appropriate for an enumeration type.\n+\t(Expand_N_Attribute_Reference) <Attribute_Enum_Rep>: Call it.\n+\t<Attribute_Pos>: For an enumeration type with a standard\n+\trepresentation, expand to a conversion with Conversion_OK.\n+\t<Attribute_Val>: Likewise.\n+\t* exp_ch4.adb (Expand_N_Type_Conversion): Do not expand when\n+\tthe target is an enumeration type and Conversion_OK is set.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Common_Type): Go to Underlying_Full_View, if any.\n+\n+2020-06-16  Richard Kenner  <kenner@adacore.com>\n+\n+\t* exp_unst.adb (Subp_Index): Change way we detect internal\n+\tprotected subprograms.\n+\n+2020-06-16  Richard Kenner  <kenner@adacore.com>\n+\n+\t* comperr.adb (Compiler_Abort): Clarify message displayed to\n+\tcustomers.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* checks.adb, doc/gnat_ugn/the_gnat_compilation_model.rst,\n+\teinfo.ads, exp_ch5.adb, exp_ch7.adb, lib-xref.ads,\n+\tlibgnat/g-spitbo.ads, make.adb, sem_aux.adb, sem_ch3.adb,\n+\tsem_ch4.adb, sem_ch5.adb, urealp.adb: Fix wrong casing.\n+\t* gnat_ugn.texi: Regenerate.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* einfo.adb, exp_spark.adb, exp_util.adb, sem_eval.adb: Replace\n+\t\"Ekind ... in Object_Kind\" with \"Is_Object (...)\".\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Fix typo in\n+\tcomment.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Evaluate_Name): Force evaluation of aggregates;\n+\trecursively evaluate expression of a qualified expression; fix\n+\tlocation of the comment for an attribute referenced and an\n+\tindexed component.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Use consistent style and\n+\tformatting in a couple of cases.\n+\n+2020-06-16  Steve Baird  <baird@adacore.com>\n+\n+\t* libgnat/a-nbnbin.ads, libgnat/a-nbnbre.ads: Uncomment the\n+\tcommented-out Integer_Literal aspect specification for type\n+\tBig_Integer.\n+\n+2020-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_ch6.adb (BIP_Suffix_Kind, Check_BIP_Actuals,\n+\tIs_Build_In_Place_Entity): New subprograms.\n+\t(Make_Build_In_Place_Call_In_Allocator,\n+\tMake_Build_In_Place_Call_In_Anonymous_Context,\n+\tMake_Build_In_Place_Call_In_Assignment,\n+\tMake_Build_In_Place_Call_In_Object_Declaration): Add assertions.\n+\t(Needs_BIP_Task_Actuals): Add missing support for thunks.\n+\t(Expand_Actuals): Ensure that the BIP call has available an\n+\tactivation chain and the _master variable.\n+\t* exp_ch9.adb (Find_Enclosing_Context): Initialize the list of\n+\tdeclarations of empty blocks when the _master variable must be\n+\tdeclared and the list was not available.\n+\n+2020-06-16  Bob Duff  <duff@adacore.com>\n+\n+\t* par-ch4.adb (P_Case_Expression): Move to be local.\n+\t(P_Declare_Expression): New parsing routine.\n+\t(P_Unparen_Cond_Expr_Etc): New name for\n+\tP_Unparen_Cond_Case_Quant_Expression which was missing one case\n+\tin its name (iterated component association), and we're adding a\n+\tnew case (declare expression), so lets use \"Etc\" instead of\n+\ttrying to pack all those things into the name.  Add call to\n+\tP_Declare_Expression, and check for missing parens.\n+\t(P_Expression_If_OK, P_Expression_Or_Range_Attribute_If_OK): Add\n+\tTok_Declare.\n+\t* par.adb (P_Basic_Declarative_Items): Add parameter\n+\tDeclare_Expression so we can tailor the error message about\n+\tincorrect bodies.\n+\t(P_Case_Expression): Move to body.\n+\t* par-ch3.adb (P_Basic_Declarative_Items): Tailor the error\n+\tmessage about incorrect bodies.\n+\t* par-ch7.adb (P_Package): Pass Declare_Expression => False to\n+\tP_Basic_Declarative_Items.\n+\t* sem.ads (In_Declare_Expr): Counter used to determine whether\n+\twe are analyzing a declare_expression. Needed to give errors\n+\tabout things that are not allowed in declare_expression, such as\n+\tthe 'Access attribute.\n+\t* sem.adb (Do_Analyze): Save/restore In_Declare_Expr.\n+\t* sem_ch4.adb (Analyze_Expression_With_Actions): Give this node\n+\tits own scope.  That seems better in general, but it is\n+\tnecessary for declare_expressions.  For example, an identifier\n+\tdeclared in a declare_expression should not clash with the same\n+\tidentifier in an outer scope.  If this is a declare_expression,\n+\tindicated by Comes_From_Source, then check legality rules, and\n+\tincr/decr In_Declare_Expr.\n+\t* sem_aggr.adb (Resolve_Aggregate): Allow an applicable index\n+\tconstraint for a declare_expression, so if its expression is an\n+\tarray aggregate, it can have \"others => ...\".\n+\t* sem_attr.adb (Analyze_Access_Attribute): Disallow these\n+\tattributes in declare_expressions. Add comment to make it clear\n+\tthat Unrestricted_Access is included.\n+\t* sinfo.ads, sinfo.adb, atree.ads, atree.adb: Remove the\n+\tnow-incorrect comment in sinfo.ads that says\n+\tN_Expression_With_Actions has no proper scope.  Add 17-parameter\n+\tversions of Nkind_In.  Remove the 16-parameter versions of\n+\tNkind_In.\n+\n+2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aux.ads, sem_aux.adb (Is_Record_Or_Limited_Type): New\n+\tfunction.\n+\t* exp_ch4.adb, sem_ch4.adb (Analyze_Membership_Op,\n+\tExpand_Set_Membership.Make_Cond): Choose between primitive and\n+\tpredefined equality for membership tests.\n+\n+2020-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_warn.adb (Warn_On_Overlapping_Actuals): Simplify code and\n+\timplement AI12-0216 which clarifies the conditions under which\n+\toverlapping actuals in a call are illegal. If proper warnings\n+\tare enabled, GNAT also emits warnings in legal cases of\n+\toverlopping actuals.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (Freeze_Expression): Stop climbing the parent chain\n+\tat a N_{Case,If}_Expression node for a type or an entity that\n+\tdoes not come from source.\n+\n+2020-06-16  Steve Baird  <baird@adacore.com>\n+\n+\t* snames.ads-tmpl: Define names of the three new aspects.\n+\t* aspects.ads: Define the three new aspects.\n+\t* sem_util.ads, sem_util.adb, sem_dim.adb: Move the function\n+\tString_From_Numeric_Literal from being declared in the body of\n+\tpackage Sem_Dim to being declared in the visible part of package\n+\tSem_Util.\n+\t* sem_ch13.ads, sem_ch13.adb: Declare new visible procedure\n+\tValidate_Literal_Aspect. This is where most of the legality\n+\tchecking occurs for an aspect specification for one of the three\n+\tnew aspects, as well as resolution of the subprogram named in\n+\tthe aspect specification. Follow example of other aspects (e.g.,\n+\tValidate_Literal_Aspect is called in much the same way as\n+\tValidate_Iterable_Aspect in Analyze_Aspects_At_Freeze_Point; a\n+\tsmall amount of legality checking is performed in\n+\tAnalyze_One_Aspect in much the same way as for Default_Value or\n+\tDefault_Component_Value aspects). Most of the work is done in\n+\tValidate_Literal_Aspect.\n+\t* contracts.adb (Add_Contract_Item): Call\n+\tValidate_Literal_Aspect in much the same way that\n+\tValidate_Iterable_Aspect was already being called.\n+\t* sem_res.adb (Resolve): Rewrite a literal as a call if it is a\n+\tuser-defined literal.  This is where the dynamic semantics of\n+\tthe 3 new aspects are implemented.\n+\t* sem_ch6.adb (Fully_Conformant_Expressions): Two numeric\n+\tliterals that have different text but the same value (e.g.,\n+\t12345 and 12_345) do not conform if they are user-defined\n+\tliterals. Introduce a new function\n+\tUser_Defined_Numeric_Literal_Mismatch to avoid duplication in\n+\tmaking this check.\n+\t* sem_type.adb (Has_Compatible_Type): A numeric literal can be\n+\tcompatible with a non-numeric type (and a string literal can be\n+\tcompatible with a non-string type) if it can be interpreted as a\n+\tuser-defined literal.\n+\n+2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Extension_Aggregate): Fix implementation\n+\tof AI05-0115 by checking the correct type.\n+\n+2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Specification): Generate error\n+\tmessage for functions returning interfaces.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch13.adb (Membership_Entry): Relax assertion to also\n+\trecognize qualified identifiers.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* exp_util.adb (Evaluate_Name): Force evaluation of operators.\n+\n+2020-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* sem_ch4.adb (Analyze_Membership_Op): Reset entity of equality\n+\tnodes for membership tests with singletons.\n+\t(Analyze_User_Defined_Binary_Op): Always perform the analysis\n+\tsince nodes coming from the expander also may refer to non\n+\tstandard operators as part of membership expansion.\n+\t* exp_ch4.adb (Expand_Set_Membership.Make_Cond): Reset entity of\n+\tequality node.\n+\t* sem_type.ads: Fix typo in comment.\n+\n+2020-06-16  Ghjuvan Lacambre  <lacambre@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute): Add\n+\tCheck_Not_Incomplete_Type call.\n+\n+2020-06-16  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb: Add closing paren in a comment.\n+\t* sem_util.adb: Correct comment typo (aggreate => aggregate).\n+\n+2020-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_prag.adb (Process_Restrictions_Or_Restriction_Warnings):\n+\tCode cleanup.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* freeze.adb (In_Expanded_Body): Remove unreachable code.\n+\t(Freeze_Expression): Rename a couple of local variables.\n+\tIn the case of an expanded body, also freeze locally the\n+\tentities declared in a nested block.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch4.adb (Transform_Object_Operation): Document that it\n+\tmay be partially destructive for the parent of the node.\n+\t(Try_Object_Operation): Undo the changes made above on failure.\n+\n+2020-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* restrict.adb (Global_No_Tasking): Adding\n+\tTargparm.Restrictions_On_Target Fixes regressions with zfp.\n+\n+2020-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb: (Freeze_Expression, In_Expanded_Body): Treat the\n+\tgenerated body of an expression function like other bodies\n+\tgenerated during expansion (e.g. stream subprograms) so that\n+\tthose bodies are not treated as freezing points. Handle properly\n+\tother global references in such completions.\n+\n+2020-06-16  Piotr Trojanek  <trojanek@adacore.com>\n+\n+\t* sem_ch8.adb (Analyze_Object_Renaming): Remove trivially\n+\tuseless initialization of Is_Object_Reference.\n+\t* sem_util.adb (Is_Object_Reference): Simplify detection of\n+\tbinary and unary operators; literally implement rules about\n+\taggregates and qualified expressions; recognize string literals\n+\tas object references.\n+\n+2020-06-16  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch12.adb (Validate_Derived_Type_Instance): Reword error\n+\tmessage for 12.5.1(8) subclause and add secondary message if\n+\tthe incompatibility comes from the predicates.\n+\t* sem_ch3.adb (Check_Constraining_Discriminant): New procedure\n+\tto give the error required by the 3.7(15) subclause.  Mention\n+\t\"statically\" in the error message and add secondary message\n+\tif the incompatibility comes from the predicates.\n+\t(Build_Derived_Concurrent_Type): Call it when a new discriminant\n+\tconstrains an old one.\n+\t(Build_Derived_Record_Type): Likewise.\n+\t* sem_eval.ads (Predicates_Compatible): Declare.\n+\t* sem_eval.adb (Predicates_Compatible): New function to implement\n+\tthe compatibility of predicates specified by the 4.9.1 clause.\n+\t(Subtypes_Statically_Compatible): Call it.\n+\n 2020-06-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* sem_eval.ads (Predicates_Match): Fix description."}, {"sha": "4bc6a6b4e793fc432879b356fa0373e5f3ac2375", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,19 @@\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-common.h (c_omp_check_loop_iv_exprs): Add an int argument.\n+\t* c-omp.c (struct c_omp_check_loop_iv_data): Add maybe_nonrect and\n+\tidx members.\n+\t(c_omp_is_loop_iterator): New function.\n+\t(c_omp_check_loop_iv_r): Use it.  Add support for silent scanning\n+\tif outer loop iterator is present.  Perform duplicate checking through\n+\thash_set in the function rather than expecting caller to do that.\n+\tPass NULL instead of d->ppset to walk_tree_1.\n+\t(c_omp_check_nonrect_loop_iv): New function.\n+\t(c_omp_check_loop_iv): Use it.  Fill in new members, allow\n+\tnon-rectangular loop forms, diagnose multiple associated loops with\n+\tthe same iterator.  Pass NULL instead of &pset to walk_tree_1.\n+\t(c_omp_check_loop_iv_exprs): Likewise.\n+\n 2020-06-10  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/92860"}, {"sha": "7d85d5a53aced742cc2a5dfd1833d1a84cb96c37", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,21 @@\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_expr_no_commas): Save, clear and restore\n+\tc_in_omp_for.\n+\t(c_parser_omp_for_loop): Set c_in_omp_for around some calls to avoid\n+\tpremature c_fully_fold.  Defer explicit c_fully_fold calls to after\n+\tc_finish_omp_for.\n+\t* c-tree.h (c_in_omp_for): Declare.\n+\t* c-typeck.c (c_in_omp_for): Define.\n+\t(build_modify_expr): Avoid c_fully_fold if c_in_omp_for.\n+\t(digest_init): Likewise.\n+\t(build_binary_op): Likewise.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_schedule): Reject modifier separated\n+\tfrom kind by comma rather than colon.\n+\n 2020-06-05  Mark Wielaard  <mark@klomp.org>\n \n \t* c-decl.c (implicit_decl_warning): When warned and olddecl is"}, {"sha": "01753789b17a058399d62480eff0186f723cebfb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,85 @@\n+2020-06-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95369\n+\t* call.c (add_list_candidates): Return if a designated initializer\n+\tis used with a non-aggregate.\n+\t(implicit_conversion_error): Give an error for the case above.\n+\n+2020-06-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95560\n+\t* name-lookup.c (check_local_shadow): Check if types are\n+\tnon-null before calling same_type_p.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* semantics.c (handle_omp_for_class_iterator): Adjust\n+\tc_omp_check_loop_iv_exprs caller.\n+\t(finish_omp_for): Likewise.  Don't call fold_build_cleanup_point_expr\n+\tbefore calling c_finish_omp_for and c_omp_check_loop_iv, move it\n+\tafter those calls.\n+\t* pt.c (tsubst_omp_for_iterator): Handle non-rectangular loops.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_schedule): Reject modifier separated\n+\tfrom kind by comma rather than colon.\n+\n+2020-06-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* pt.c (perform_instantiation_time_access_checks): No need to\n+\ttsubst into decl.\n+\t* semantics.c (enforce_access): Verify that decl is not\n+\tdependent.\n+\n+2020-06-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/41437\n+\tPR c++/47346\n+\t* cp-tree.h (qualified_typedef_usage_s): Delete.\n+\t(qualified_typedef_usage_t): Delete.\n+\t(deferred_access_check): Move up in file.\n+\t(tree_template_info::typedefs_needing_access_checking): Delete.\n+\t(tree_template_info::deferred_access_checks): New field.\n+\t(TI_TYPEDEFS_NEEDING_ACCESS_CHECKING): Rename to ...\n+\t(TI_DEFERRED_ACCESS_CHECKS): ... this, and adjust accordingly.\n+\t* pt.c (perform_typedefs_access_check): Rename to ...\n+\t(perform_instantiation_time_access_checks): ... this, and adjust\n+\taccordingly.  Remove unnecessary tree tests.\n+\t(instantiate_class_template_1): Adjust accordingly.\n+\t(instantiate_decl): Likewise.\n+\t* semantics.c (enforce_access): Likewise.\n+\n+2020-06-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/41437\n+\tPR c++/47346\n+\t* call.c (enforce_access): Move to semantics.c.\n+\t* cp-tree.h (enforce_access): Delete.\n+\t(get_types_needing_access_check): Delete.\n+\t(add_typedef_to_current_template_for_access_check): Delete.\n+\t* decl.c (make_typename_type): Adjust accordingly.  Use\n+\tcheck_accessibility_of_qualified_id instead of directly using\n+\tperform_or_defer_access_check.\n+\t* parser.c (cp_parser_template_declaration_after_parameters):\n+\tDon't push a dk_no_check access state when parsing a template.\n+\t* pt.c (get_types_needing_access_check): Delete.\n+\t(append_type_to_template_for_access_check_1): Delete.\n+\t(perform_typedefs_access_check): Adjust.  If type_decl is a\n+\tFIELD_DECL, also check its DECL_CONTEXT for dependence. Use\n+\ttsubst_copy instead of tsubst to substitute into type_decl so\n+\tthat we substitute into the DECL_CONTEXT of a FIELD_DECL.\n+\t(append_type_to_template_for_access_check): Delete.\n+\t* search.c (accessible_p): Remove the processing_template_decl\n+\tearly exit.\n+\t* semantics.c (enforce_access): Moved from call.c.  If we're\n+\tparsing a template and the access check failed, add the check to\n+\tTI_TYPEDEFS_NEEDING_ACCESS_CHECKING.\n+\t(perform_or_defer_access_check): Adjust comment.\n+\t(add_typedef_to_current_template_for_access_check): Delete.\n+\t(check_accessibility_of_qualified_id):  Adjust accordingly.\n+\tExit early if the scope is dependent.\n+\n 2020-06-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/93467"}, {"sha": "d2dd2082bad2b58ed8aa784405addb4eada34f60", "filename": "gcc/d/ChangeLog", "status": "modified", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fd%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Fd%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,141 @@\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (handle_noreturn_attribute): Remove names of unused\n+\tfunction parameters.\n+\t(handle_leaf_attribute): Likewise.\n+\t(handle_const_attribute): Likewise.\n+\t(handle_malloc_attribute): Likewise.\n+\t(handle_pure_attribute): Likewise.\n+\t(handle_novops_attribute): Likewise.\n+\t(handle_nonnull_attribute): Likewise.\n+\t(handle_nothrow_attribute): Likewise.\n+\t(handle_type_generic_attribute): Likewise.\n+\t(handle_transaction_pure_attribute): Likewise.\n+\t(handle_returns_twice_attribute): Likewise.\n+\t(handle_fnspec_attribute): Likewise.\n+\t(handle_always_inline_attribute): Likewise.\n+\t(d_handle_noinline_attribute): Likewise.\n+\t(d_handle_forceinline_attribute): Likewise.\n+\t(d_handle_flatten_attribute): Likewise.\n+\t(d_handle_noclone_attribute): Likewise.\n+\t(d_handle_section_attribute): Likewise.\n+\t(d_handle_alias_attribute): Likewise.\n+\t(d_handle_weak_attribute): Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc: Update code formatting in a consistant style.\n+\t* d-builtins.cc: Likewise.\n+\t* d-codegen.cc: Likewise.\n+\t* d-compiler.cc: Likewise.\n+\t* d-convert.cc: Likewise.\n+\t* d-diagnostic.cc: Likewise.\n+\t* d-frontend.cc: Likewise.\n+\t* d-lang.cc: Likewise.\n+\t* d-longdouble.cc: Likewise.\n+\t* d-port.cc: Likewise.\n+\t* d-spec.cc: Likewise.\n+\t* d-tree.h: Likewise.\n+\t* decl.cc: Likewise.\n+\t* expr.cc: Likewise.\n+\t* longdouble.h: Likewise.\n+\t* modules.cc: Likewise.\n+\t* toir.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc: Update quotation formatting of comments.\n+\t* d-codegen.cc: Likewise.\n+\t* d-lang.cc: Likewise.\n+\t* decl.cc: Likewise.\n+\t* expr.cc: Likewise.\n+\t* imports.cc: Likewise.\n+\t* runtime.cc: Likewise.\n+\t* toir.cc: Likewise.\n+\t* typeinfo.cc: Likewise.\n+\t* types.cc: Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-diagnostic.cc (expand_d_format): Replace OutBuffer with obstack.\n+\t(d_diagnostic_report_diagnostic): Don't free xformat.\n+\t* d-lang.cc (struct d_option_data): Change deps_target type from\n+\tOutBuffer to vec <const char *>.\n+\t(deps_add_target): Update to push each target to deps_target.\n+\t(deps_write_string): New function.\n+\t(deps_write): Change buffer type to obstack* and remove colmax.\n+\t(d_init_options): Update initialization of deps_target.\n+\t(d_parse_file): Replace OutBuffer with obstack.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-lang.cc (d_parse_file): Replace uses of File with FILE.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-codegen.cc (build_array_bounds_call): New function.\n+\t(build_bounds_condition): Use build_array_bounds_call.\n+\t* d-lang.cc (d_init_options): Explicitly set default check action to\n+\tCHECKACTION_D.\n+\t(d_post_options): Set check action to CHECKACTION_C if the flag\n+\t-fno-druntime was seen.\n+\t* d-tree.h (build_array_bounds_call): Declare.\n+\t* expr.cc (ExprVisitor::visit (AssertExp *)): Use\n+\tbuild_array_bounds_call.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (build_attributes): Use toStringExp instead of cast.\n+\t* toir.cc (IRVisitor::visit): Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-attribs.cc (build_attributes): Use isXxxxExp helpers instead of\n+\texplicit casts.\n+\t* d-codegen.cc (d_build_call): Likewise.\n+\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n+\t* decl.cc (ExprVisitor::visit): Likewise.\n+\t(layout_class_initializer): Likewise.\n+\t* expr.cc (ExprVisitor::lvalue_p): Likewise\n+\t(ExprVisitor::visit): Likewise.\n+\t* types.cc (layout_aggregate_members): Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-frontend.cc (eval_builtin): Use toTypeFunction instead of cast.\n+\t* decl.cc (DeclVisitor::visit): Likewise.\n+\t* toir.cc (IRVisitor::visit): Likewise.\n+\t* typeinfo.cc (TypeInfoVisitor::visit): Likewise.\n+\n+2020-06-16  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* d-builtins.cc (d_eval_constant_expression): Use isTypeXxxx helpers\n+\tinstead of explicit casts.\n+\t(d_build_builtins_module): Likewise.\n+\t* d-codegen.cc (get_array_length): Likewise.\n+\t(identity_compare_p): Likewise.\n+\t(lower_struct_comparison): Likewise.\n+\t(build_array_from_val): Likewise.\n+\t(array_bounds_check): Likewise.\n+\t(get_function_type): Likewise.\n+\t(d_build_call): Likewise.\n+\t* d-compiler.cc (Compiler::paintAsType): Likewise.\n+\t* d-convert.cc (convert_expr): Likewise.\n+\t(convert_for_assignment): Likewise.\n+\t* d-lang.cc (d_classify_record): Likewise.\n+\t(d_build_eh_runtime_type): Likewise.\n+\t* decl.cc (DeclVisitor::visit): Likewise.\n+\t* expr.cc (ExprVisitor::needs_postblit): Likewise.\n+\t(ExprVisitor::needs_dtor): Likewise.\n+\t(ExprVisitor::visit): Likewise.\n+\t* imports.cc (ImportVisitor::visit): Likewise.\n+\t* typeinfo.cc (get_typeinfo_kind): Likewise.\n+\t(TypeInfoVisitor::visit): Likewise.\n+\t(TypeDeclInfoVisitor::visit): Likewise.\n+\t* types.cc (merge_aggregate_types): Likewise.\n+\t(TypeVisitor::visit): Likewise.\n+\n 2020-06-14  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* expr.cc (ExprVisitor::visit (AssocArrayLiteralExp *)): Fix line"}, {"sha": "ddad8295b1a9b9deacae6563cd7fd3595623e771", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,20 @@\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parse.c (decode_oacc_directive): Permit 'acc routine' also\n+\tinside pure procedures.\n+\t* openmp.c (gfc_match_oacc_routine): Inside pure procedures\n+\tdo not permit gang, worker or vector clauses.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parse.c (decode_omp_directive): Remove \"or ELEMENTAL\"\n+\tfrom \"in PURE\" error message also for -fopenmp-simd.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* parse.c (decode_omp_directive): Remove \"or ELEMENTAL\"\n+\tfrom \"in PURE\" error message.\n+\n 2020-06-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/42122"}, {"sha": "c2459d2ab06f45126809fe7c55267d1582e12d0e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,112 @@\n+2020-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* g++.dg/torture/pr95493-1.C: New test.\n+\n+2020-06-16  Aldy Hernandez  <aldyh@redhat.com>\n+\n+\t* g++.dg/tree-ssa/pr95649.C: New test.\n+\t* gcc.dg/tree-ssa/pr95649.c: New test.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/goacc/pure-elemental-procedures-2.f90: New test.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr79154-simd.f90: New test.\n+\n+2020-06-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95369\n+\t* g++.dg/cpp2a/desig11.C: Adjust dg-error.\n+\t* g++.dg/cpp2a/desig16.C: New test.\n+\n+2020-06-16  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/95560\n+\t* g++.dg/warn/Wshadow-local-3.C: New test.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/asan/inline.c: Add -ffat-lto-objects to dg-options.\n+\t* c-c++-common/asan/inline-kernel.c: Likewise.\n+\t* c-c++-common/ubsan/inline.c: Likewise.\n+\n+2020-06-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_vaddq_m.c: New test.\n+\n+2020-06-16  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts1.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts2.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts3.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/mve_scalar_shifts4.c: Likewise.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/loop-6.c: New test.\n+\t* gcc.dg/gomp/loop-1.c: Don't expect diagnostics on valid\n+\tnon-rectangular loops.\n+\t* gcc.dg/gomp/loop-2.c: New test.\n+\t* g++.dg/gomp/loop-1.C: Don't expect diagnostics on valid\n+\tnon-rectangular loops.\n+\t* g++.dg/gomp/loop-2.C: Likewise.\n+\t* g++.dg/gomp/loop-5.C: New test.\n+\t* g++.dg/gomp/loop-6.C: New test.\n+\n+2020-06-16  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/gomp/schedule-modifiers-2.c: New test.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR middle-end/95622\n+\t* lib/target-supports.exp (check_effective_target_offloading_enabled):\n+\tNew.\n+\t* c-c++-common/goacc/kernels-alias-ipa-pta-2.c: Use it for xfail.\n+\t* c-c++-common/goacc/kernels-alias-ipa-pta-4.c: Likewise.\n+\t* c-c++-common/goacc/kernels-alias-ipa-pta.c: Likewise.\n+\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gfortran.dg/gomp/pr79154-1.f90: Update dg-*;\n+\tadd an impure elemental example.\n+\t* gfortran.dg/gomp/pr79154-2.f90: Likewise.\n+\n+2020-06-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR c++/41437\n+\tPR c++/47346\n+\t* g++.dg/cpp2a/concepts-using2.C: Adjust.\n+\t* g++.dg/lto/20081219_1.C: Adjust.\n+\t* g++.dg/lto/20091002-1_0.C: Adjust.\n+\t* g++.dg/lto/pr65475c_0.C: Adjust.\n+\t* g++.dg/opt/dump1.C: Adjust.\n+\t* g++.dg/other/pr53574.C: Adjust.\n+\t* g++.dg/template/access30.C: New test.\n+\t* g++.dg/template/access31.C: New test.\n+\t* g++.dg/wrappers/wrapper-around-type-pack-expansion.C: Adjust.\n+\n+2020-06-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/95690\n+\t* gfortran.dg/pr95690.f90: New testcase.\n+\n+2020-06-16  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR tree-optimization/94988\n+\t* gcc.dg/graphite/pr80906.c: Un-XFAIL.\n+\n+2020-06-16  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\t* gcc.dg/lto/pr52634_0.c: Further adjust 'dg-lto-options'.\n+\n+2020-06-16  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/95683\n+\t* gcc.target/riscv/pr95683.c: New.\n+\n 2020-06-15  Eric Botcazou  <ebotcazou@gcc.gnu.org>\n \n \t* gnat.dg/aggr30.ads, gnat.dg/aggr30.adb: New test."}, {"sha": "ae729763913404f62dcb0b5b8772aed2bb7a4ca4", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,7 @@\n+2020-06-16  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* testsuite/libgomp.oacc-fortran/routine-10.f90: New test.\n+\n 2020-06-08  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR lto/94848"}, {"sha": "99f547c72cae5ff0963bd19fda5b4dcb1badc68a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56638b9b1853666f575928f8baf17f70e4ed3517/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56638b9b1853666f575928f8baf17f70e4ed3517/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=56638b9b1853666f575928f8baf17f70e4ed3517", "patch": "@@ -1,3 +1,21 @@\n+2020-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/95282\n+\t* include/bits/atomic_base.h (__atomic_impl::load): Use the _Val\n+\talias instead of deducing _Tp as an unqualified type.\n+\t(__atomic_impl::exchange): Use the _Val alias to remove volatile\n+\tfrom the reinterpret_cast result type.\n+\n+2020-06-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/atomic (atomic): Add static assertions.\n+\t* testsuite/29_atomics/atomic/requirements/types_neg.cc: New test.\n+\n+2020-06-16  Patrick Palka  <ppalka@redhat.com>\n+\n+\tPR libstdc++/94003\n+\t* testsuite/20_util/is_constructible/94003.cc: New test.\n+\n 2020-06-15  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/char_traits.h (__cpp_lib_constexpr_char_traits):"}]}