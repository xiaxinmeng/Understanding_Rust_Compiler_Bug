{"sha": "0d09ca2550da86793e9bcc2820524fc4d6486e74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQwOWNhMjU1MGRhODY3OTNlOWJjYzI4MjA1MjRmYzRkNjQ4NmU3NA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-13T10:49:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-13T10:49:58Z"}, "message": "Remove array_allocator extension, deprecated since 4.9.0\n\nThis type is not a conforming allocator, because it cannot be reliably\nrebound to allocate for a different type. The result of the rebind\ntransformation still uses the same underlying std::tr1::array<T, 1>\narray, which may not be correctly aligned or even have elements the\nright size for the value_type of the rebound allocator.\n\nIt has been deprecated for several years and should now be removed.\n\n\t* doc/xml/manual/allocator.xml: Remove documentation for\n\tarray_allocator.\n\t* doc/xml/manual/evolution.xml: Document array_allocator removal.\n\t* doc/xml/manual/using.xml: Remove header from documentation.\n\t* include/Makefile.am: Remove <ext/array_allocator.h> header.\n\t* include/Makefile.in: Regenerate.\n\t* include/ext/array_allocator.h: Remove.\n\t* include/precompiled/extc++.h: Do not include removed header.\n\t* testsuite/ext/array_allocator/1.cc: Remove.\n\t* testsuite/ext/array_allocator/2.cc: Remove.\n\t* testsuite/ext/array_allocator/26875.cc: Remove.\n\t* testsuite/ext/array_allocator/3.cc: Remove.\n\t* testsuite/ext/array_allocator/check_deallocate_null.cc: Remove.\n\t* testsuite/ext/array_allocator/check_delete.cc: Remove.\n\t* testsuite/ext/array_allocator/check_new.cc: Remove.\n\t* testsuite/ext/array_allocator/variadic_construct.cc: Remove.\n\t* testsuite/ext/headers.cc: Do not include removed header.\n\nFrom-SVN: r271119", "tree": {"sha": "dbc8953fb6d81b7e2492e72533e73590a32d892e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbc8953fb6d81b7e2492e72533e73590a32d892e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d09ca2550da86793e9bcc2820524fc4d6486e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d09ca2550da86793e9bcc2820524fc4d6486e74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d09ca2550da86793e9bcc2820524fc4d6486e74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d09ca2550da86793e9bcc2820524fc4d6486e74/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db881be90d9b953ed48c69f6ecbdbb534d8d678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db881be90d9b953ed48c69f6ecbdbb534d8d678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db881be90d9b953ed48c69f6ecbdbb534d8d678"}], "stats": {"total": 642, "additions": 25, "deletions": 617}, "files": [{"sha": "2869dafa810a0e734b2372ca81d353ed76594396", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -1,3 +1,24 @@\n+2019-05-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tRemove array_allocator extension, deprecated since 4.9.0\n+\t* doc/xml/manual/allocator.xml: Remove documentation for\n+\tarray_allocator.\n+\t* doc/xml/manual/evolution.xml: Document array_allocator removal.\n+\t* doc/xml/manual/using.xml: Remove header from documentation.\n+\t* include/Makefile.am: Remove <ext/array_allocator.h> header.\n+\t* include/Makefile.in: Regenerate.\n+\t* include/ext/array_allocator.h: Remove.\n+\t* include/precompiled/extc++.h: Do not include removed header.\n+\t* testsuite/ext/array_allocator/1.cc: Remove.\n+\t* testsuite/ext/array_allocator/2.cc: Remove.\n+\t* testsuite/ext/array_allocator/26875.cc: Remove.\n+\t* testsuite/ext/array_allocator/3.cc: Remove.\n+\t* testsuite/ext/array_allocator/check_deallocate_null.cc: Remove.\n+\t* testsuite/ext/array_allocator/check_delete.cc: Remove.\n+\t* testsuite/ext/array_allocator/check_new.cc: Remove.\n+\t* testsuite/ext/array_allocator/variadic_construct.cc: Remove.\n+\t* testsuite/ext/headers.cc: Do not include removed header.\n+\n 2019-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_bvector.h"}, {"sha": "2b9a5ca6611c71a2479e97aca26ffcbf9b2aea97", "filename": "libstdc++-v3/doc/xml/manual/allocator.xml", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fallocator.xml?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -354,23 +354,6 @@\n \t taken care of elsewhere).\n        </para>\n      </listitem>\n-     <listitem>\n-       <para>\n-       <classname>array_allocator</classname>\n-       </para>\n-       <para>\n-\t Allows allocations of known and fixed sizes using existing\n-\t global or external storage allocated via construction of\n-\t <classname>std::tr1::array</classname> objects. By using this\n-\t allocator, fixed size containers (including\n-\t <classname>std::string</classname>) can be used without\n-\t instances calling <function>::operator new</function> and\n-\t <function>::operator delete</function>. This capability\n-\t allows the use of STL abstractions without runtime\n-\t complications or overhead, even in situations such as program\n-\t startup. For usage examples, please consult the testsuite.\n-       </para>\n-     </listitem>\n      <listitem>\n        <para>\n        <classname>debug_allocator</classname>"}, {"sha": "802886940567bf6960dc1583cf58eb2729c08f0f", "filename": "libstdc++-v3/doc/xml/manual/evolution.xml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fevolution.xml?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -947,4 +947,8 @@ now defaults to zero.\n \n </section>\n \n+<section xml:id=\"api.rel_101\"><info><title><constant>10</constant></title></info>\n+<para> <classname>__gnu_cxx::array_allocator</classname> removed. </para>\n+</section>\n+\n </section>"}, {"sha": "a97099989a120957b0ebf7ac069bf7c4e2ba83ab", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -719,7 +719,6 @@ compiler supports scalar decimal floating-point types defined via\n <row>\n <entry><filename class=\"headerfile\">ext/algorithm</filename></entry>\n <entry><filename class=\"headerfile\">ext/atomicity.h</filename></entry>\n-<entry><filename class=\"headerfile\">ext/array_allocator.h</filename></entry>\n <entry><filename class=\"headerfile\">ext/bitmap_allocator.h</filename></entry>\n <entry><filename class=\"headerfile\">ext/cast.h</filename></entry>\n </row>"}, {"sha": "f8f126fbc7d4a2733087536e05be1d3bdb46b8fd", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -563,7 +563,6 @@ ext_headers = \\\n \t${ext_srcdir}/aligned_buffer.h \\\n \t${ext_srcdir}/alloc_traits.h \\\n \t${ext_srcdir}/atomicity.h \\\n-\t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n \t${ext_srcdir}/cast.h \\\n \t${ext_srcdir}/cmath \\"}, {"sha": "31e83eab7ecc0a0e9acccf2bc2a7b16cde792153", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -906,7 +906,6 @@ ext_headers = \\\n \t${ext_srcdir}/aligned_buffer.h \\\n \t${ext_srcdir}/alloc_traits.h \\\n \t${ext_srcdir}/atomicity.h \\\n-\t${ext_srcdir}/array_allocator.h \\\n \t${ext_srcdir}/bitmap_allocator.h \\\n \t${ext_srcdir}/cast.h \\\n \t${ext_srcdir}/cmath \\"}, {"sha": "c0d4a3497dc36b2b90b5b8dba0c8f9fea7295085", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "removed", "additions": 0, "deletions": 182, "changes": 182, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,182 +0,0 @@\n-// array allocator -*- C++ -*-\n-\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// Under Section 7 of GPL version 3, you are granted additional\n-// permissions described in the GCC Runtime Library Exception, version\n-// 3.1, as published by the Free Software Foundation.\n-\n-// You should have received a copy of the GNU General Public License and\n-// a copy of the GCC Runtime Library Exception along with this program;\n-// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n-// <http://www.gnu.org/licenses/>.\n-\n-/** @file ext/array_allocator.h\n- *  This file is a GNU extension to the Standard C++ Library.\n- */\n-\n-#ifndef _ARRAY_ALLOCATOR_H\n-#define _ARRAY_ALLOCATOR_H 1\n-\n-#include <bits/c++config.h>\n-#include <new>\n-#include <bits/functexcept.h>\n-#include <tr1/array>\n-#include <bits/move.h>\n-#if __cplusplus >= 201103L\n-#include <type_traits>\n-#endif\n-\n-// Suppress deprecated warning for this file.\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wdeprecated-declarations\"\n-\n-namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n- using std::size_t;\n- using std::ptrdiff_t;\n-\n-  /// Base class.\n- template<typename _Tp>\n-    class array_allocator_base\n-    {\n-    public:\n-      typedef size_t     \tsize_type;\n-      typedef ptrdiff_t  \tdifference_type;\n-      typedef _Tp*       \tpointer;\n-      typedef const _Tp* \tconst_pointer;\n-      typedef _Tp&       \treference;\n-      typedef const _Tp&\tconst_reference;\n-      typedef _Tp        \tvalue_type;\n-\n-      pointer\n-      address(reference __x) const _GLIBCXX_NOEXCEPT\n-      { return std::__addressof(__x); }\n-\n-      const_pointer\n-      address(const_reference __x) const _GLIBCXX_NOEXCEPT\n-      { return std::__addressof(__x); }\n-\n-      void\n-      deallocate(pointer, size_type)\n-      { \n-\t// Does nothing.\n-      }\n-\n-      size_type\n-      max_size() const _GLIBCXX_USE_NOEXCEPT \n-      { return size_t(-1) / sizeof(_Tp); }\n-\n-#if __cplusplus >= 201103L\n-      template<typename _Up, typename... _Args>\n-        void\n-        construct(_Up* __p, _Args&&... __args)\n-\t{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }\n-\n-      template<typename _Up>\n-        void \n-        destroy(_Up* __p) { __p->~_Up(); }\n-#else\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 402. wrong new expression in [some_] allocator::construct\n-      void \n-      construct(pointer __p, const _Tp& __val) \n-      { ::new((void *)__p) value_type(__val); }\n-\n-      void \n-      destroy(pointer __p) { __p->~_Tp(); }\n-#endif\n-    } _GLIBCXX_DEPRECATED;\n-\n-  /**\n-   *  @brief  An allocator that uses previously allocated memory.\n-   *  This memory can be externally, globally, or otherwise allocated.\n-   *  @ingroup allocators\n-   */\n-  template<typename _Tp, typename _Array = std::tr1::array<_Tp, 1> >\n-    class array_allocator : public array_allocator_base<_Tp>\n-    {\n-    public:\n-      typedef size_t     \tsize_type;\n-      typedef ptrdiff_t  \tdifference_type;\n-      typedef _Tp*       \tpointer;\n-      typedef const _Tp* \tconst_pointer;\n-      typedef _Tp&       \treference;\n-      typedef const _Tp& \tconst_reference;\n-      typedef _Tp        \tvalue_type;\n-      typedef _Array\t\tarray_type;\n-\n-#if __cplusplus >= 201103L\n-      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-      // 2103. std::allocator propagate_on_container_move_assignment\n-      typedef std::true_type propagate_on_container_move_assignment;\n-\n-      typedef std::true_type is_always_equal;\n-#endif\n-\n-    private:\n-      array_type* \t_M_array;\n-      size_type \t_M_used;\n-\n-    public:\n-     template<typename _Tp1, typename _Array1 = _Array>\n-        struct rebind\n-        {\n-\t  typedef array_allocator<_Tp1, _Array1> other _GLIBCXX_DEPRECATED;\n-\t} _GLIBCXX_DEPRECATED;\n-\n-      array_allocator(array_type* __array = 0) _GLIBCXX_USE_NOEXCEPT \n-      : _M_array(__array), _M_used(size_type()) { }\n-\n-      array_allocator(const array_allocator& __o) _GLIBCXX_USE_NOEXCEPT \n-      : _M_array(__o._M_array), _M_used(__o._M_used) { }\n-\n-      template<typename _Tp1, typename _Array1>\n-        array_allocator(const array_allocator<_Tp1, _Array1>&)\n-\t_GLIBCXX_USE_NOEXCEPT\n-\t: _M_array(0), _M_used(size_type()) { }\n-\n-      ~array_allocator() _GLIBCXX_USE_NOEXCEPT { }\n-\n-      _GLIBCXX_NODISCARD pointer\n-      allocate(size_type __n, const void* = 0)\n-      {\n-\tif (_M_array == 0 || _M_used + __n > _M_array->size())\n-\t  std::__throw_bad_alloc();\n-\tpointer __ret = _M_array->begin() + _M_used;\n-\t_M_used += __n;\n-\treturn __ret;\n-      }\n-    } _GLIBCXX_DEPRECATED;\n-\n-  template<typename _Tp, typename _Array>\n-    inline bool\n-    operator==(const array_allocator<_Tp, _Array>&,\n-\t       const array_allocator<_Tp, _Array>&)\n-    { return true; }\n-  \n-  template<typename _Tp, typename _Array>\n-    inline bool\n-    operator!=(const array_allocator<_Tp, _Array>&, \n-\t       const array_allocator<_Tp, _Array>&)\n-    { return false; }\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n-#pragma GCC diagnostic pop\n-\n-#endif"}, {"sha": "e6cf779fb8eea8828775be726f11243bf0faa18b", "filename": "libstdc++-v3/include/precompiled/extc++.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprecompiled%2Fextc%2B%2B.h?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -37,7 +37,6 @@\n # include <ext/aligned_buffer.h>\n #endif\n #include <ext/alloc_traits.h>\n-#include <ext/array_allocator.h>\n #include <ext/atomicity.h>\n #include <ext/bitmap_allocator.h>\n #include <ext/cast.h>"}, {"sha": "4c2b2c49d9260969c535c71c84cd6fc54ad04c08", "filename": "libstdc++-v3/testsuite/ext/array_allocator/1.cc", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F1.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,57 +0,0 @@\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-#include <ext/vstring.h>\n-#include <ext/array_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-typedef char char_type;\n-typedef std::char_traits<char_type> traits_type;\n-typedef std::tr1::array<char_type, 4> array_type;\n-\n-array_type extern_array;\n-\n-void test01() \n-{\n-  using __gnu_cxx::__versa_string;\n-  typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n-  typedef __versa_string<char_type, traits_type, allocator_type> string_type;\n-\n-  allocator_type a(&extern_array);\n-  string_type s(a);\n-    \n-  try\n-    {\n-      s.reserve(4); // Actually need 4 + 1 + sizeof(std::string::_Rep).\n-    }\n-  catch(std::bad_alloc& obj)\n-    {\n-      VERIFY( true );\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "44060415dc09d3eeee6baf46f4c5a94ad3ccd2c4", "filename": "libstdc++-v3/testsuite/ext/array_allocator/2.cc", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F2.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,63 +0,0 @@\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-#include <iostream>\n-#include <ext/vstring.h>\n-#include <ext/array_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-typedef char char_type;\n-typedef std::char_traits<char_type> traits_type;\n-typedef std::tr1::array<char_type, 32> array_type;\n-\n-array_type extern_array;\n-\n-void test01() \n-{\n-  using __gnu_cxx::__versa_string;\n-  typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n-  typedef __versa_string<char_type, traits_type, allocator_type> string_type;\n-\n-  allocator_type a(&extern_array);\n-  string_type s(a);\n-    \n-  try\n-    {\n-      s.reserve(4); // Actually need 4 + 1 + sizeof(std::string::_Rep).\n-    }\n-  catch(std::bad_alloc& obj)\n-    {\n-      VERIFY( false );\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-\n-  s.append(1, 'c');\n-  s.append(2, 'b');\n-\n-  std::cout << s.c_str() << std::endl;\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "e72e3b2e0ef4458c018f5940fdc48c09468b6524", "filename": "libstdc++-v3/testsuite/ext/array_allocator/26875.cc", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F26875.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,47 +0,0 @@\n-//\n-// Copyright (C) 2006-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-#include <ext/array_allocator.h>\n-\n-// libstdc++/26875\n-int main()\n-{\n-  typedef std::tr1::array<int, 1> array_type;\n-  array_type Array1;\n-  array_type Array2;\n-\n-  typedef __gnu_cxx::array_allocator<int> allocator_type;\n-  allocator_type Allocator1(&Array1);\n-  allocator_type Allocator2(&Array2);\n-\n-  try\n-    {\n-      (void) Allocator1.allocate(1);\n-      (void) Allocator2.allocate(1);\n-    }\n-  catch (std::bad_alloc& ex)\n-    {\n-      // fail, rethrow\n-      throw;\n-    }\n-    \n-  return 0;\n-}\n-"}, {"sha": "041972f8b742cc85b81ebe1553cac5543dd44856", "filename": "libstdc++-v3/testsuite/ext/array_allocator/3.cc", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2F3.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,58 +0,0 @@\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-#include <ext/vstring.h>\n-#include <ext/array_allocator.h>\n-#include <testsuite_hooks.h>\n-\n-typedef char char_type;\n-typedef std::char_traits<char_type> traits_type;\n-typedef std::tr1::array<char_type, 4> array_type;\n-\n-array_type extern_array;\n-\n-void test01() \n-{\n-  using __gnu_cxx::__versa_string;\n-  typedef __gnu_cxx::array_allocator<char_type, array_type> allocator_type;\n-  typedef __versa_string<char_type, traits_type, allocator_type> string_type;\n-\n-  // Construct array_allocator without underlying array.\n-  allocator_type a;\n-  string_type s(a);\n-    \n-  try\n-    {\n-      s.reserve(4); // Actually need 4 + 1 + sizeof(std::string::_Rep).\n-    }\n-  catch(std::bad_alloc& obj)\n-    {\n-      VERIFY( true );\n-    }\n-  catch(...)\n-    {\n-      VERIFY( false );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "7bba0c66d701287c195b4341e62b4b79b5d97d7c", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_allocate_max_size.cc", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_allocate_max_size.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,32 +0,0 @@\n-//\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-// 20.4.1.1 allocator members\n-\n-#include <ext/array_allocator.h>\n-#include <testsuite_allocator.h>\n-\n-int main()\n-{ \n-  typedef int value_type;\n-  typedef __gnu_cxx::array_allocator<value_type> allocator_type;\n-  __gnu_test::check_allocate_max_size<allocator_type>();\n-  return 0;\n-}"}, {"sha": "ae59fcbff4db9339c69c9a53fb19809eacd7c37f", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_deallocate_null.cc", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_deallocate_null.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,33 +0,0 @@\n-//\n-// Copyright (C) 2004-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-// 20.4.1.1 allocator members\n-\n-#include <ext/array_allocator.h>\n-#include <testsuite_allocator.h>\n-\n-int main()\n-{ \n-  typedef int value_type;\n-  typedef __gnu_cxx::array_allocator<value_type> allocator_type;\n-  __gnu_test::check_deallocate_null<allocator_type>(); \n-  return 0;\n-}\n-"}, {"sha": "681935371ecf7ecf708e93fe49c0a5c135044cd5", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_delete.cc", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_delete.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,37 +0,0 @@\n-// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n-//\n-// Copyright (C) 2001-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-// 20.4.1.1 allocator members\n-\n-#include <cstdlib>\n-#include <ext/array_allocator.h>\n-#include <replacement_memory_operators.h>\n-\n-int main()\n-{ \n-  typedef unsigned int value_type;\n-  typedef std::tr1::array<value_type, 15> array_type;\n-  typedef __gnu_cxx::array_allocator<value_type, array_type> allocator_type;\n-  array_type store;\n-  allocator_type a(&store);\n-  __gnu_test::check_delete<allocator_type, false>(a); \n-  return 0;\n-}"}, {"sha": "9c515c08582c1aadb1511d7daa9481b319425c8b", "filename": "libstdc++-v3/testsuite/ext/array_allocator/check_new.cc", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fcheck_new.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,37 +0,0 @@\n-// 2001-11-25  Phil Edwards  <pme@gcc.gnu.org>\n-//\n-// Copyright (C) 2001-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// { dg-options \"-Wno-deprecated\" }\n-\n-// 20.4.1.1 allocator members\n-\n-#include <cstdlib>\n-#include <ext/array_allocator.h>\n-#include <replacement_memory_operators.h>\n-\n-int main()\n-{ \n-  typedef unsigned int value_type;\n-  typedef std::tr1::array<value_type, 15> array_type;\n-  typedef __gnu_cxx::array_allocator<value_type, array_type> allocator_type;\n-  array_type store;\n-  allocator_type a(&store);\n-  __gnu_test::check_new<allocator_type, false>(a); \n-  return 0;\n-}"}, {"sha": "880362b0be8d5e58df4b5a551b5f3fcd28967e15", "filename": "libstdc++-v3/testsuite/ext/array_allocator/variadic_construct.cc", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db881be90d9b953ed48c69f6ecbdbb534d8d678/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Farray_allocator%2Fvariadic_construct.cc?ref=6db881be90d9b953ed48c69f6ecbdbb534d8d678", "patch": "@@ -1,49 +0,0 @@\n-// { dg-do run { target c++11 } }\n-// { dg-options \"-Wno-deprecated\" }\n-\n-// 2007-10-27  Paolo Carlini  <pcarlini@suse.de>\n-\n-// Copyright (C) 2007-2019 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 3, or (at your option)\n-// any later version.\n-//\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-//\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING3.  If not see\n-// <http://www.gnu.org/licenses/>.\n-\n-// 20.4.1.1 allocator members\n-\n-#include <ext/array_allocator.h>\n-#include <utility>\n-#include <testsuite_hooks.h>\n-\n-void test01()\n-{\n-  typedef std::pair<int, char> pair_type;\n-  typedef std::tr1::array<pair_type, 3> array_type;\n-  array_type store;\n-\n-  __gnu_cxx::array_allocator<pair_type, array_type> alloc1(&store);\n-  pair_type* ptp1 = alloc1.allocate(1);\n-  alloc1.construct(ptp1, 3, 'a');\n-\n-  VERIFY( ptp1->first == 3 );\n-  VERIFY( ptp1->second == 'a' );\n-\n-  alloc1.deallocate(ptp1, 1);\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}"}, {"sha": "0e365d6d044de8f5ac1dd52f51948607abe174ce", "filename": "libstdc++-v3/testsuite/ext/headers.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d09ca2550da86793e9bcc2820524fc4d6486e74/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fheaders.cc?ref=0d09ca2550da86793e9bcc2820524fc4d6486e74", "patch": "@@ -24,7 +24,6 @@\n // subdirectory that are meant to be directly included.\n \n #include <ext/algorithm>\n-#include <ext/array_allocator.h>\n #include <ext/atomicity.h>\n #include <ext/bitmap_allocator.h>\n #if _GLIBCXX_HAVE_ICONV"}]}