{"sha": "ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWUyMmJjNWQ0YWQyMmFhMGE4ZjIxMzIzYmI1NzZlNjQ4NWZmYmQ0ZA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-11-25T11:45:43Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-11-25T11:45:43Z"}, "message": "re PR middle-end/78507 (ICE: tree check: expected integer_type or enumeral_type or boolean_type or real_type or fixed_point_type, have pointer_type in int_fits_type_p, at tree.c:9153)\n\n\tPR middle-end/78507\n\tPR middle-end/78510\n\tPR middle-end/78517\n\t* match.pd ((cond (cmp (convert1? @1) @3) (convert2? @1) @2)): Use\n\tcmp directly, rather than cmp_code.  Initialize code to ERROR_MARK\n\tand set it to result code if transformation is valid.  Use code EQ\n\tdirectly in last simplification case.\n\n\tgcc/testsuite\n\tPR middle-end/78507\n\tPR middle-end/78510\n\tPR middle-end/78517\n\t* g++.dg/torture/pr78507.C: New test.\n\t* gcc.dg/torture/pr78510.c: New test.\n\t* gcc.dg/torture/pr78517.c: New test.\n\nFrom-SVN: r242874", "tree": {"sha": "8bff6f7c3ab488c3bd7613c5c2b6ab3e3c4e7d53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bff6f7c3ab488c3bd7613c5c2b6ab3e3c4e7d53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/comments", "author": null, "committer": null, "parents": [{"sha": "1af928db7cd28e28e044f45760f11e0667d3fcbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af928db7cd28e28e044f45760f11e0667d3fcbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af928db7cd28e28e044f45760f11e0667d3fcbc"}], "stats": {"total": 129, "additions": 115, "deletions": 14}, "files": [{"sha": "18d3b3fa8c159a72601cf35ebf13a4b7c37cccc1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -1,3 +1,13 @@\n+2016-11-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR middle-end/78507\n+\tPR middle-end/78510\n+\tPR middle-end/78517\n+\t* match.pd ((cond (cmp (convert1? @1) @3) (convert2? @1) @2)): Use\n+\tcmp directly, rather than cmp_code.  Initialize code to ERROR_MARK\n+\tand set it to result code if transformation is valid.  Use code EQ\n+\tdirectly in last simplification case.\n+\n 2016-11-25  Richard Biener  <rguenther@suse.de>\n \n \t* gimple-fold.c (fold_stmt_1): Check may_propagate_copy"}, {"sha": "2d4e0197c190b61995f4fcad87592f1d61d5a420", "filename": "gcc/match.pd", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -1971,14 +1971,15 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (cond (eq (convert1? x) c1) (convert2? x) c2) -> (cond (eq x c1) c1 c2).  */\n (for cmp (lt le gt ge eq)\n  (simplify\n-  (cond (cmp@0 (convert1? @1) INTEGER_CST@3) (convert2? @1) INTEGER_CST@2)\n+  (cond (cmp (convert1? @1) INTEGER_CST@3) (convert2? @1) INTEGER_CST@2)\n   (with\n    {\n      tree from_type = TREE_TYPE (@1);\n      tree c1_type = TREE_TYPE (@3), c2_type = TREE_TYPE (@2);\n-     enum tree_code code = TREE_CODE (@0), cmp_code = TREE_CODE (@0);\n+     enum tree_code code = ERROR_MARK;\n \n-     if (int_fits_type_p (@2, from_type)\n+     if (INTEGRAL_TYPE_P (from_type)\n+\t && int_fits_type_p (@2, from_type)\n \t && (types_match (c1_type, from_type)\n \t     || (TYPE_PRECISION (c1_type) > TYPE_PRECISION (from_type)\n \t\t && (TYPE_UNSIGNED (from_type)\n@@ -1988,45 +1989,46 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t && (TYPE_UNSIGNED (from_type)\n \t\t     || TYPE_SIGN (c2_type) == TYPE_SIGN (from_type)))))\n        {\n-\t if (code != EQ_EXPR)\n+\t if (cmp != EQ_EXPR)\n \t   {\n \t     if (wi::to_widest (@3) == (wi::to_widest (@2) - 1))\n \t       {\n \t\t /* X <= Y - 1 equals to X < Y.  */\n-\t\t if (cmp_code == LE_EXPR)\n+\t\t if (cmp == LE_EXPR)\n \t\t   code = LT_EXPR;\n \t\t /* X > Y - 1 equals to X >= Y.  */\n-\t\t if (cmp_code == GT_EXPR)\n+\t\t if (cmp == GT_EXPR)\n \t\t   code = GE_EXPR;\n \t       }\n \t     if (wi::to_widest (@3) == (wi::to_widest (@2) + 1))\n \t       {\n \t\t /* X < Y + 1 equals to X <= Y.  */\n-\t\t if (cmp_code == LT_EXPR)\n+\t\t if (cmp == LT_EXPR)\n \t\t   code = LE_EXPR;\n \t\t /* X >= Y + 1 equals to X > Y.  */\n-\t\t if (cmp_code == GE_EXPR)\n+\t\t if (cmp == GE_EXPR)\n \t\t   code = GT_EXPR;\n \t       }\n-\t     if (code != cmp_code || wi::to_widest (@2) == wi::to_widest (@3))\n+\t     if (code != ERROR_MARK\n+\t\t || wi::to_widest (@2) == wi::to_widest (@3))\n \t       {\n-\t\t if (cmp_code == LT_EXPR || cmp_code == LE_EXPR)\n+\t\t if (cmp == LT_EXPR || cmp == LE_EXPR)\n \t\t   code = MIN_EXPR;\n-\t\t if (cmp_code == GT_EXPR || cmp_code == GE_EXPR)\n+\t\t if (cmp == GT_EXPR || cmp == GE_EXPR)\n \t\t   code = MAX_EXPR;\n \t       }\n \t   }\n \t /* Can do A == C1 ? A : C2  ->  A == C1 ? C1 : C2?  */\n-\t else if (!int_fits_type_p (@3, from_type))\n-\t   code = ERROR_MARK;\n+\t else if (int_fits_type_p (@3, from_type))\n+\t   code = EQ_EXPR;\n        }\n    }\n    (if (code == MAX_EXPR)\n     (convert (max @1 (convert @2)))\n     (if (code == MIN_EXPR)\n      (convert (min @1 (convert @2)))\n      (if (code == EQ_EXPR)\n-      (convert (cond (cmp @1 (convert @3))\n+      (convert (cond (eq @1 (convert @3))\n \t\t     (convert:from_type @3) (convert:from_type @2)))))))))\n \n (for cnd (cond vec_cond)"}, {"sha": "fe43b97635f801abfce1ed6f9aa920f4a39f0f81", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -1,3 +1,12 @@\n+2016-11-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR middle-end/78507\n+\tPR middle-end/78510\n+\tPR middle-end/78517\n+\t* g++.dg/torture/pr78507.C: New test.\n+\t* gcc.dg/torture/pr78510.c: New test.\n+\t* gcc.dg/torture/pr78517.c: New test.\n+\n 2016-11-24  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78343"}, {"sha": "9691cf9bd7ac722832455dbec9a04fa91ef5dad7", "filename": "gcc/testsuite/g++.dg/torture/pr78507.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr78507.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr78507.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr78507.C?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -0,0 +1,57 @@\n+// PR middle-end/78507\n+// { dg-do compile }\n+struct A {\n+  template <typename _Iterator1, typename _Iterator2>\n+  int operator()(_Iterator1, _Iterator2);\n+};\n+struct B {\n+  template <typename _BI1, typename _BI2>\n+  static _BI2 __copy_move_b(_BI1 p1, _BI2 p2) {\n+    _BI1 a;\n+    long b = p1 - a;\n+    for (; b > 0; --b)\n+      *--p2 = *--p1;\n+  }\n+};\n+template <int, typename _BI1, typename _BI2>\n+void __copy_move_backward_a(_BI1 p1, _BI2 p2) {\n+  B::__copy_move_b(p1, p2);\n+}\n+template <int, typename _BI1, typename _BI2>\n+void __copy_move_backward_a2(_BI1 p1, _BI2 p2) {\n+  __copy_move_backward_a<0>(p1, p2);\n+}\n+template <typename _BI1, typename _BI2> void move_backward(_BI1 p1, _BI2 p2) {\n+  __copy_move_backward_a2<0>(p1, p2);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __insertion_sort(_RandomAccessIterator, _Compare p2) {\n+  for (_RandomAccessIterator c;; ++c)\n+    if (p2(0, 0))\n+      move_backward(c, c + 1);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __final_insertion_sort(_RandomAccessIterator, _Compare p2) {\n+  _RandomAccessIterator d;\n+  __insertion_sort(d, p2);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void __sort(_RandomAccessIterator p1, _Compare p2) {\n+  __final_insertion_sort(p1, p2);\n+}\n+template <typename _RandomAccessIterator, typename _Compare>\n+void sort(_RandomAccessIterator, _RandomAccessIterator p2, _Compare) {\n+  A e;\n+  __sort(p2, e);\n+}\n+struct C {\n+  struct D {\n+    int DwarfRegNum;\n+  };\n+  int parseRegisterLiveOutMask() const;\n+};\n+int C::parseRegisterLiveOutMask() const {\n+  D f, g;\n+  sort(&f, &g, [] {});\n+}\n+"}, {"sha": "8d0ab5fa3e35b3021cf2aebe32aba6c3c9953b47", "filename": "gcc/testsuite/gcc.dg/torture/pr78510.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78510.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78510.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78510.c?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -0,0 +1,19 @@\n+/* PR middle-end/78510 */\n+/* { dg-do compile } */\n+int a, b, c, e, f;\n+char d;\n+short g, h;\n+char fn1(int p1) {\n+  for (;;) {\n+    h = p1 << 2;\n+    int i = h;\n+    g = i > 32767 >> 13 ? i : i << 3;\n+    f = a ?: c;\n+    if (e)\n+      return d;\n+  }\n+}\n+\n+static int fn2() { fn1(0 || b); }\n+\n+int main() { fn2(); return 0; }"}, {"sha": "475bce7b979e33fb0f4a669732b1e666f3d8487e", "filename": "gcc/testsuite/gcc.dg/torture/pr78517.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78517.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78517.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr78517.c?ref=ae22bc5d4ad22aa0a8f21323bb576e6485ffbd4d", "patch": "@@ -0,0 +1,4 @@\n+/* PR middle-end/78517 */\n+/* { dg-do compile } */\n+char a;\n+int fn1() { return a == '[' ? a : 0; }"}]}