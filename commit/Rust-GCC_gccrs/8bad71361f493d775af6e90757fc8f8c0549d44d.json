{"sha": "8bad71361f493d775af6e90757fc8f8c0549d44d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJhZDcxMzYxZjQ5M2Q3NzVhZjZlOTA3NTdmYzhmOGMwNTQ5ZDQ0ZA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "2000-06-16T00:59:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-06-16T00:59:02Z"}, "message": "i386.md: Create new [right,left] rotate and right shift patterns to optimize shift by 1...\n\n\t* i386.md: Create new [right,left] rotate and right shift\n\tpatterns to optimize shift by 1 bit for certain ia32 processors.\n\tUpdate patterns which perform left shifts to optimize shift by\n\t1 bit for certain ia32 processors.\n\t* i386.c (const_int_1_operand): New predicate.\n\t* i386.h (PREDICATE_CODES): Handle const_int_1_operand.\n\t* i386-protos.h (const_int_1_operand): Prototype.\n\nFrom-SVN: r34569", "tree": {"sha": "ff7862b539655275833a025a7cf74a1386643fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff7862b539655275833a025a7cf74a1386643fe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bad71361f493d775af6e90757fc8f8c0549d44d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bad71361f493d775af6e90757fc8f8c0549d44d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bad71361f493d775af6e90757fc8f8c0549d44d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bad71361f493d775af6e90757fc8f8c0549d44d/comments", "author": null, "committer": null, "parents": [{"sha": "297a5329dca4f22150ec201d48b8de8a730f6447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/297a5329dca4f22150ec201d48b8de8a730f6447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/297a5329dca4f22150ec201d48b8de8a730f6447"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "7d1eec4f308b0b0cec641f1f55ad4d0582c09c8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bad71361f493d775af6e90757fc8f8c0549d44d", "patch": "@@ -1,3 +1,13 @@\n+Thu Jun 15 18:56:12 2000  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* i386.md: Create new [right,left] rotate and right shift\n+\tpatterns to optimize shift by 1 bit for certain ia32 processors.\n+\tUpdate patterns which perform left shifts to optimize shift by\n+\t1 bit for certain ia32 processors.\n+\t* i386.c (const_int_1_operand): New predicate.\n+\t* i386.h (PREDICATE_CODES): Handle const_int_1_operand.\n+\t* i386-protos.h (const_int_1_operand): Prototype.\n+\n Wed Jun 14 23:46:26 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* mips.c (machine_dependent_reorg): Fix braces for nested if."}, {"sha": "9d062ddb7abdc8a813f640ca43b1a820eb29299b", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=8bad71361f493d775af6e90757fc8f8c0549d44d", "patch": "@@ -41,6 +41,7 @@ extern int ix86_aligned_p PARAMS ((rtx));\n extern int standard_80387_constant_p PARAMS ((rtx));\n extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n \n+extern int const_int_1_operand PARAMS ((rtx, enum machine_mode));\n extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int pic_symbolic_operand PARAMS ((rtx, enum machine_mode));\n extern int call_insn_operand PARAMS ((rtx, enum machine_mode));"}, {"sha": "722d52e2d9b926c8d076581fb2111eb2fbfa15e1", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8bad71361f493d775af6e90757fc8f8c0549d44d", "patch": "@@ -981,6 +981,17 @@ function_arg (cum, mode, type, named)\n   return ret;\n }\n \f\n+\n+/* Return nonzero if OP is (const_int 1), else return zero.  */\n+\n+int\n+const_int_1_operand (op, mode)\n+     rtx op;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n+{\n+  return (GET_CODE (op) == CONST_INT && INTVAL (op) == 1);\n+}\n+\n /* Returns 1 if OP is either a symbol reference or a sum of a symbol\n    reference and a constant.  */\n "}, {"sha": "881f4eaf4f5de72b8b4604c0f108131436b2c269", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=8bad71361f493d775af6e90757fc8f8c0549d44d", "patch": "@@ -2496,6 +2496,7 @@ do { long l;\t\t\t\t\t\t\\\n /* Define the codes that are matched by predicates in i386.c.  */\n \n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n+  {\"const_int_1_operand\", {CONST_INT}},\t\t\t\t\t\\\n   {\"symbolic_operand\", {SYMBOL_REF, LABEL_REF, CONST}},\t\t\t\\\n   {\"aligned_operand\", {CONST_INT, CONST_DOUBLE, CONST, SYMBOL_REF,\t\\\n \t\t       LABEL_REF, SUBREG, REG, MEM}},\t\t\t\\"}, {"sha": "21cc145b86e04fef3d21c6699d82d48ef562ca7c", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 323, "deletions": 0, "changes": 323, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bad71361f493d775af6e90757fc8f8c0549d44d/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=8bad71361f493d775af6e90757fc8f8c0549d44d", "patch": "@@ -5949,6 +5949,10 @@\n     default:\n       if (REG_P (operands[2]))\n \treturn \\\"sal{l}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{l}\\\\t%0\\\";\n       else\n \treturn \\\"sal{l}\\\\t{%2, %0|%0, %2}\\\";\n     }\n@@ -6002,6 +6006,10 @@\n     default:\n       if (REG_P (operands[2]))\n \treturn \\\"sal{l}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{l}\\\\t%0\\\";\n       else\n \treturn \\\"sal{l}\\\\t{%2, %0|%0, %2}\\\";\n     }\n@@ -6041,6 +6049,10 @@\n     default:\n       if (REG_P (operands[2]))\n \treturn \\\"sal{w}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{w}\\\\t%0\\\";\n       else\n \treturn \\\"sal{w}\\\\t{%2, %0|%0, %2}\\\";\n     }\n@@ -6079,6 +6091,10 @@\n     default:\n       if (REG_P (operands[2]))\n \treturn \\\"sal{w}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{w}\\\\t%0\\\";\n       else\n \treturn \\\"sal{w}\\\\t{%2, %0|%0, %2}\\\";\n     }\n@@ -6127,6 +6143,15 @@\n \t  else\n \t    return \\\"sal{b}\\\\t{%b2, %0|%0, %b2}\\\";\n \t}\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\t{\n+          if (NON_QI_REG_P (operands[1]))\n+\t    return \\\"sal{l}\\\\t%0\\\";\n+\t  else\n+\t    return \\\"sal{b}\\\\t%0\\\";\n+\t}\n       else\n \t{\n           if (NON_QI_REG_P (operands[1]))\n@@ -6170,6 +6195,10 @@\n     default:\n       if (REG_P (operands[2]))\n \treturn \\\"sal{b}\\\\t{%b2, %0|%0, %b2}\\\";\n+      else if (GET_CODE (operands[2]) == CONST_INT\n+\t       && INTVAL (operands[2]) == 1\n+\t       && (TARGET_PENTIUM || TARGET_PENTIUMPRO))\n+\treturn \\\"sal{b}\\\\t%0\\\";\n       else\n \treturn \\\"sal{b}\\\\t{%2, %0|%0, %2}\\\";\n     }\n@@ -6304,6 +6333,20 @@\n   \"\"\n   \"ix86_expand_binary_operator (ASHIFTRT, SImode, operands); DONE;\")\n \n+(define_insn \"*ashrsi3_1_one_bit\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*ashrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6315,6 +6358,27 @@\n    sar{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashrsi3_one_bit_cmpno\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (ASHIFTRT, SImode, operands)\"\n+  \"sar{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6340,6 +6404,20 @@\n   \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFTRT, HImode, operands); DONE;\")\n \n+(define_insn \"*ashrhi3_1_one_bit\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*ashrhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6351,6 +6429,27 @@\n    sar{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashrhi3_one_bit_cmpno\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:HI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (ASHIFTRT, HImode, operands)\"\n+  \"sar{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6376,6 +6475,20 @@\n   \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ASHIFTRT, QImode, operands); DONE;\")\n \n+(define_insn \"*ashrqi3_1_one_bit\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"sar{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*ashrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6387,6 +6500,27 @@\n    sar{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*ashrqi3_cmpno_one_bit\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (ashiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"I\"))\n+\t  (const_int 0)))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(ashiftrt:QI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (ASHIFTRT, QImode, operands)\"\n+  \"sar{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6469,6 +6603,20 @@\n   \"\"\n   \"ix86_expand_binary_operator (LSHIFTRT, SImode, operands); DONE;\")\n \n+(define_insn \"*lshrsi3_1_one_bit\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*lshrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6480,6 +6628,27 @@\n    shr{l}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*lshrsi3_cmpno_one_bit\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6505,6 +6674,20 @@\n   \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (LSHIFTRT, HImode, operands); DONE;\")\n \n+(define_insn \"*lshrhi3_1_one_bit\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*lshrhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6516,6 +6699,27 @@\n    shr{w}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*lshrhi3_cmpno_one_bit\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(lshiftrt:HI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (LSHIFTRT, HImode, operands)\"\n+  \"shr{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6541,6 +6745,20 @@\n   \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (LSHIFTRT, QImode, operands); DONE;\")\n \n+(define_insn \"*lshrqi3_1_one_bit\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"shr{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*lshrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6552,6 +6770,27 @@\n    shr{b}\\\\t{%b2, %0|%0, %b2}\"\n   [(set_attr \"type\" \"ishift\")])\n \n+;; This pattern can't accept a variable shift count, since shifts by\n+;; zero don't affect the flags.  We assume that shifts by constant\n+;; zero are optimized away.\n+(define_insn \"*lshrqi2_cmpno_one_bit\"\n+  [(set (reg 17)\n+\t(compare\n+\t  (lshiftrt:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t       (match_operand:QI 2 \"const_int_1_operand\" \"\"))\n+\t  (const_int 0)))\n+   (set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(lshiftrt:QI (match_dup 1) (match_dup 2)))]\n+  \"ix86_match_ccmode (insn, CCNOmode)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\n+   && ix86_binary_operator_ok (LSHIFTRT, QImode, operands)\"\n+  \"shr{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n ;; This pattern can't accept a variable shift count, since shifts by\n ;; zero don't affect the flags.  We assume that shifts by constant\n ;; zero are optimized away.\n@@ -6578,6 +6817,20 @@\n   \"\"\n   \"ix86_expand_binary_operator (ROTATE, SImode, operands); DONE;\")\n \n+(define_insn \"*rotlsi3_1_one_bit\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATE, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotlsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotate:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6597,6 +6850,20 @@\n   \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATE, HImode, operands); DONE;\")\n \n+(define_insn \"*rotlhi3_1_one_bit\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATE, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotlhi3_1\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotate:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6616,6 +6883,20 @@\n   \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATE, QImode, operands); DONE;\")\n \n+(define_insn \"*rotlqi3_1_one_bit\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t   (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATE, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"rol{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotlqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(rotate:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6635,6 +6916,20 @@\n   \"\"\n   \"ix86_expand_binary_operator (ROTATERT, SImode, operands); DONE;\")\n \n+(define_insn \"*rotrsi3_1_one_bit\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATERT, SImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{l}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotrsi3_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6654,6 +6949,20 @@\n   \"TARGET_HIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATERT, HImode, operands); DONE;\")\n \n+(define_insn \"*rotrhi3_one_bit\"\n+  [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm\")\n+\t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATERT, HImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{w}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotrhi3\"\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=rm,rm\")\n \t(rotatert:HI (match_operand:HI 1 \"nonimmediate_operand\" \"0,0\")\n@@ -6673,6 +6982,20 @@\n   \"TARGET_QIMODE_MATH\"\n   \"ix86_expand_binary_operator (ROTATERT, QImode, operands); DONE;\")\n \n+(define_insn \"*rotrqi3_1_one_bit\"\n+  [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm\")\n+\t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0\")\n+\t\t     (match_operand:QI 2 \"const_int_1_operand\" \"\")))\n+   (clobber (reg:CC 17))]\n+  \"ix86_binary_operator_ok (ROTATERT, QImode, operands)\n+   && (TARGET_PENTIUM || TARGET_PENTIUMPRO)\"\n+  \"ror{b}\\\\t%0\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set (attr \"length\") \n+     (if_then_else (match_operand:SI 0 \"register_operand\" \"\") \n+\t(const_string \"2\")\n+\t(const_string \"*\")))])\n+\n (define_insn \"*rotrqi3_1\"\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=qm,qm\")\n \t(rotatert:QI (match_operand:QI 1 \"nonimmediate_operand\" \"0,0\")"}]}