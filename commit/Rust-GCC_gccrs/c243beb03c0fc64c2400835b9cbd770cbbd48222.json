{"sha": "c243beb03c0fc64c2400835b9cbd770cbbd48222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0M2JlYjAzYzBmYzY0YzI0MDA4MzViOWNiZDc3MGNiYmQ0ODIyMg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-05T13:06:27Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-05T13:06:27Z"}, "message": "defaults.h (DEFAULT_WORD_SWITCH_TAKES_ARG, [...]): Remove.\n\n\t* defaults.h (DEFAULT_WORD_SWITCH_TAKES_ARG,\n\tWORD_SWITCH_TAKES_ARG): Remove.\n\t* doc/options.texi (Args): Document.\n\t* doc/tm.texi.in (WORD_SWITCH_TAKES_ARG): Remove.\n\t* doc/tm.texi: Regenerate.\n\t* opt-functions.awk (switch_flags): Handle Args.\n\t* opts-common.c: Update comment on tm.h include.\n\t(decode_cmdline_option): Handle options with multiple arguments.\n\tDon't check WORD_SWITCH_TAKES_ARG for unknown options.\n\t* opts.h (CL_SEPARATE_NARGS_SHIFT, CL_SEPARATE_NARGS_MASK):\n\tDefine.\n\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER, CL_TARGET,\n\tCL_COMMON): Update values.\n\t* system.h (WORD_SWITCH_TAKES_ARG): Poison.\n\t* config/darwin.h (WORD_SWITCH_TAKES_ARG): Remove.\n\t* config/darwin.opt (Zsegaddr, sectalign, sectcreate,\n\tsectobjectsymbols, sectorder, segcreate, segprot): New.\n\nFrom-SVN: r166359", "tree": {"sha": "6b1a8cba615f48d1963fa98f1d69555be29e0ee1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b1a8cba615f48d1963fa98f1d69555be29e0ee1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c243beb03c0fc64c2400835b9cbd770cbbd48222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c243beb03c0fc64c2400835b9cbd770cbbd48222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c243beb03c0fc64c2400835b9cbd770cbbd48222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c243beb03c0fc64c2400835b9cbd770cbbd48222/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73ee4e74eb82f29e5949c13c6544b50d0f96d4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d73ee4e74eb82f29e5949c13c6544b50d0f96d4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d73ee4e74eb82f29e5949c13c6544b50d0f96d4c"}], "stats": {"total": 184, "additions": 100, "deletions": 84}, "files": [{"sha": "732c42384e28f6432046638fca51ac97c0c8b685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -1,3 +1,23 @@\n+2010-11-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* defaults.h (DEFAULT_WORD_SWITCH_TAKES_ARG,\n+\tWORD_SWITCH_TAKES_ARG): Remove.\n+\t* doc/options.texi (Args): Document.\n+\t* doc/tm.texi.in (WORD_SWITCH_TAKES_ARG): Remove.\n+\t* doc/tm.texi: Regenerate.\n+\t* opt-functions.awk (switch_flags): Handle Args.\n+\t* opts-common.c: Update comment on tm.h include.\n+\t(decode_cmdline_option): Handle options with multiple arguments.\n+\tDon't check WORD_SWITCH_TAKES_ARG for unknown options.\n+\t* opts.h (CL_SEPARATE_NARGS_SHIFT, CL_SEPARATE_NARGS_MASK):\n+\tDefine.\n+\t(CL_PARAMS, CL_WARNING, CL_OPTIMIZATION, CL_DRIVER, CL_TARGET,\n+\tCL_COMMON): Update values.\n+\t* system.h (WORD_SWITCH_TAKES_ARG): Poison.\n+\t* config/darwin.h (WORD_SWITCH_TAKES_ARG): Remove.\n+\t* config/darwin.opt (Zsegaddr, sectalign, sectcreate,\n+\tsectobjectsymbols, sectorder, segcreate, segprot): New.\n+\n 2010-11-05  H.J. Lu  <hongjiu.lu@intel.com>\n \t    Uros Bizjak  <ubizjak@gmail.com>\n "}, {"sha": "1974704d25ab43838ccb33b545ad8e24578de0af", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -194,20 +194,6 @@ extern GTY(()) int darwin_ms_struct;\n     darwin_override_options ();\t\t\t\t\t\t\\\n   } while (0)\n \n-/* These compiler options take n arguments.  */\n-\n-#undef  WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR)              \\\n-  (DEFAULT_WORD_SWITCH_TAKES_ARG (STR) ? 1 :    \\\n-   !strcmp (STR, \"sectcreate\") ? 3 :            \\\n-   !strcmp (STR, \"sectorder\") ? 3 :             \\\n-   !strcmp (STR, \"Zsegaddr\") ? 2 :              \\\n-   !strcmp (STR, \"segprot\") ? 3 :               \\\n-   !strcmp (STR, \"sectalign\") ? 3 :             \\\n-   !strcmp (STR, \"sectobjectsymbols\") ? 2 :     \\\n-   !strcmp (STR, \"segcreate\") ? 3 :             \\\n-   0)\n-\n #define SUBTARGET_C_COMMON_OVERRIDE_OPTIONS do {                        \\\n     if (flag_mkernel || flag_apple_kext)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "6bdfb06372d96ebb3ff730f53d8c5281b251b192", "filename": "gcc/config/darwin.opt", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fconfig%2Fdarwin.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fconfig%2Fdarwin.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.opt?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -96,6 +96,9 @@ Driver Separate\n Zseg_addr_table\n Driver Separate\n \n+Zsegaddr\n+Driver Separate Args(2)\n+\n Zsegs_read_only_addr\n Driver Separate\n \n@@ -129,9 +132,27 @@ Driver Separate\n read_only_relocs\n Driver Separate\n \n+sectalign\n+Driver Separate Args(3)\n+\n+sectcreate\n+Driver Separate Args(3)\n+\n+sectobjectsymbols\n+Driver Separate Args(2)\n+\n+sectorder\n+Driver Separate Args(3)\n+\n seg1addr\n Driver Separate\n \n+segcreate\n+Driver Separate Args(3)\n+\n+segprot\n+Driver Separate Args(3)\n+\n segs_read_only_addr\n Driver Separate\n "}, {"sha": "7d3b8499c193d90e79e327c34fd8ab474f4043e6", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -32,14 +32,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define GET_ENVIRONMENT(VALUE, NAME) do { (VALUE) = getenv (NAME); } while (0)\n #endif\n \n-/* This defines which multi-letter switches take arguments.  */\n-\n-#define DEFAULT_WORD_SWITCH_TAKES_ARG(STR)\t\t0\n-\n-#ifndef WORD_SWITCH_TAKES_ARG\n-#define WORD_SWITCH_TAKES_ARG(STR) DEFAULT_WORD_SWITCH_TAKES_ARG (STR)\n-#endif\n-\n /* Store in OUTPUT a string (made with alloca) containing an\n    assembler-name for a local static variable or function named NAME.\n    LABELNO is an integer which is different for each call.  */"}, {"sha": "3b844bb9eb6efe36dedad7a273389192dc5d9a72", "filename": "gcc/doc/options.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Foptions.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Foptions.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Foptions.texi?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -162,6 +162,10 @@ generic error message is used.  @var{message} should contain a single\n @samp{%qs} format, which will be used to format the name of the option\n passed.\n \n+@item Args(@var{n})\n+For an option marked @code{Separate}, indicate that it takes @var{n}\n+arguments.  The default is 1.\n+\n @item UInteger\n The option's argument is a non-negative integer.  The option parser\n will check and convert the argument before passing it to the relevant"}, {"sha": "0bb146e9cf24b16e9d406bf47c3dc94ea6596e07", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -99,21 +99,6 @@ from being defined in the @file{.h} file to being part of the\n @c prevent bad page break with this line\n You can control the compilation driver.\n \n-@defmac WORD_SWITCH_TAKES_ARG (@var{name})\n-A C expression which determines whether the option @option{-@var{name}}\n-takes arguments.  The value should be the number of arguments that\n-option takes--zero, for many options.\n-This macro does not need to handle options defined in @file{.opt}\n-files, only those that are handled purely through specs.\n-\n-By default, this macro is defined as\n-@code{DEFAULT_WORD_SWITCH_TAKES_ARG}, which handles the standard options\n-properly.  You need not define @code{WORD_SWITCH_TAKES_ARG} unless you\n-wish to add additional options which take arguments.  Any redefinition\n-should call @code{DEFAULT_WORD_SWITCH_TAKES_ARG} and then check for\n-additional options.\n-@end defmac\n-\n @defmac TARGET_OPTION_TRANSLATE_TABLE\n If defined, a list of pairs of strings, the first of which is a\n potential command line target to the @file{gcc} driver program, and the"}, {"sha": "6bf51d65d24ba93037888f6ac23855473973d099", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -99,21 +99,6 @@ from being defined in the @file{.h} file to being part of the\n @c prevent bad page break with this line\n You can control the compilation driver.\n \n-@defmac WORD_SWITCH_TAKES_ARG (@var{name})\n-A C expression which determines whether the option @option{-@var{name}}\n-takes arguments.  The value should be the number of arguments that\n-option takes--zero, for many options.\n-This macro does not need to handle options defined in @file{.opt}\n-files, only those that are handled purely through specs.\n-\n-By default, this macro is defined as\n-@code{DEFAULT_WORD_SWITCH_TAKES_ARG}, which handles the standard options\n-properly.  You need not define @code{WORD_SWITCH_TAKES_ARG} unless you\n-wish to add additional options which take arguments.  Any redefinition\n-should call @code{DEFAULT_WORD_SWITCH_TAKES_ARG} and then check for\n-additional options.\n-@end defmac\n-\n @defmac TARGET_OPTION_TRANSLATE_TABLE\n If defined, a list of pairs of strings, the first of which is a\n potential command line target to the @file{gcc} driver program, and the"}, {"sha": "c85df5cd3de53cdd888730296466bc9cba8cead3", "filename": "gcc/opt-functions.awk", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopt-functions.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopt-functions.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopt-functions.awk?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -100,6 +100,12 @@ function switch_flags (flags)\n \t  test_flag(\"Warning\", flags,  \" | CL_WARNING\") \\\n \t  test_flag(\"Optimization\", flags,  \" | CL_OPTIMIZATION\") \\\n \t  test_flag(\"Report\", flags, \" | CL_REPORT\")\n+\tsep_args = opt_args(\"Args\", flags)\n+\tif (sep_args != \"\") {\n+\t\tsep_args--\n+\t\tresult = result \" | (\" sep_args \\\n+\t\t    \" << CL_SEPARATE_NARGS_SHIFT)\"\n+\t}\n \tsub( \"^0 \\\\| \", \"\", result )\n \treturn result\n }"}, {"sha": "9239a5aaa13fb3c48c1bd7143c947071da95c295", "filename": "gcc/opts-common.c", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -24,8 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\"\n-#include \"tm.h\" /* For WORD_SWITCH_TAKES_ARG and\n-\t\t   TARGET_OPTION_TRANSLATE_TABLE.  */\n+#include \"tm.h\" /* For TARGET_OPTION_TRANSLATE_TABLE.  */\n \n static void prune_options (struct cl_decoded_option **, unsigned int *);\n \n@@ -288,7 +287,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   size_t opt_index;\n   const char *arg = 0;\n   int value = 1;\n-  unsigned int result = 1, i, extra_args;\n+  unsigned int result = 1, i, extra_args, separate_args;\n   int adjust_len = 0;\n   size_t total_len;\n   char *p;\n@@ -366,10 +365,15 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n     errors |= CL_ERR_DISABLED;\n \n   /* Determine whether there may be a separate argument based on\n-     whether this option is being processed for the driver.  */\n+     whether this option is being processed for the driver, and, if\n+     so, how many such arguments.  */\n   separate_arg_flag = ((option->flags & CL_SEPARATE)\n \t\t       && !((option->flags & CL_NO_DRIVER_ARG)\n \t\t\t    && (lang_mask & CL_DRIVER)));\n+  separate_args = (separate_arg_flag\n+\t\t   ? ((option->flags & CL_SEPARATE_NARGS_MASK)\n+\t\t      >> CL_SEPARATE_NARGS_SHIFT) + 1\n+\t\t   : 0);\n   joined_arg_flag = (option->flags & CL_JOINED) != 0;\n \n   /* Sort out any argument the switch takes.  */\n@@ -399,10 +403,14 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   else if (separate_arg_flag)\n     {\n       arg = argv[extra_args + 1];\n-      result = extra_args + 2;\n-      if (arg == NULL)\n-\tresult = extra_args + 1;\n-      else\n+      for (i = 0; i < separate_args; i++)\n+\tif (argv[extra_args + 1 + i] == NULL)\n+\t  {\n+\t    errors |= CL_ERR_MISSING_ARG;\n+\t    break;\n+\t  }\n+      result = extra_args + 1 + i;\n+      if (arg != NULL)\n \thave_separate_arg = true;\n     }\n \n@@ -461,6 +469,11 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \t\t\t\t    && (lang_mask & CL_DRIVER)));\n \t  joined_arg_flag = (option->flags & CL_JOINED) != 0;\n \n+\t  if (separate_args > 1 || (option->flags & CL_SEPARATE_NARGS_MASK))\n+\t    gcc_assert (separate_args\n+\t\t\t== ((option->flags & CL_SEPARATE_NARGS_MASK)\n+\t\t\t    >> CL_SEPARATE_NARGS_SHIFT) + 1);\n+\n \t  if (!(errors & CL_ERR_MISSING_ARG))\n \t    {\n \t      if (separate_arg_flag || joined_arg_flag)\n@@ -504,22 +517,7 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n   decoded->warn_message = warn_message;\n \n   if (opt_index == OPT_SPECIAL_unknown)\n-    {\n-      /* Skip the correct number of arguments for options handled\n-\t through specs.  */\n-      const char *popt ATTRIBUTE_UNUSED = argv[0] + 1;\n-\n-      gcc_assert (result == 1);\n-      if (WORD_SWITCH_TAKES_ARG (popt))\n-\tresult += WORD_SWITCH_TAKES_ARG (popt);\n-      if (result > 1)\n-\tfor (i = 1; i < result; i++)\n-\t  if (argv[i] == NULL)\n-\t    {\n-\t      result = i;\n-\t      break;\n-\t    }\n-    }\n+    gcc_assert (result == 1);\n \n   gcc_assert (result >= 1 && result <= ARRAY_SIZE (decoded->canonical_option));\n   decoded->canonical_option_num_elements = result;\n@@ -538,7 +536,21 @@ decode_cmdline_option (const char **argv, unsigned int lang_mask,\n \tdecoded->canonical_option[i] = NULL;\n     }\n   if (opt_index != OPT_SPECIAL_unknown && opt_index != OPT_SPECIAL_ignore)\n-    generate_canonical_option (opt_index, arg, value, decoded);\n+    {\n+      generate_canonical_option (opt_index, arg, value, decoded);\n+      if (separate_args > 1)\n+\t{\n+\t  for (i = 0; i < separate_args; i++)\n+\t    {\n+\t      if (argv[extra_args + 1 + i] == NULL)\n+\t\t  break;\n+\t      else\n+\t\tdecoded->canonical_option[1 + i] = argv[extra_args + 1 + i];\n+\t    }\n+\t  gcc_assert (result == 1 + i);\n+\t  decoded->canonical_option_num_elements = result;\n+\t}\n+    }\n   decoded->orig_option_with_args_text = p = XNEWVEC (char, total_len);\n   for (i = 0; i < result; i++)\n     {"}, {"sha": "2643c37070cf7d89de5aa9e6d943dd983e63272c", "filename": "gcc/opts.h", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -71,12 +71,12 @@ extern const unsigned int cl_options_count;\n extern const char *const lang_names[];\n extern const unsigned int cl_lang_count;\n \n-#define CL_PARAMS               (1 << 13) /* Fake entry.  Used to display --param info with --help.  */\n-#define CL_WARNING\t\t(1 << 14) /* Enables an (optional) warning message.  */\n-#define CL_OPTIMIZATION\t\t(1 << 15) /* Enables an (optional) optimization.  */\n-#define CL_DRIVER\t\t(1 << 16) /* Driver option.  */\n-#define CL_TARGET\t\t(1 << 17) /* Target-specific option.  */\n-#define CL_COMMON\t\t(1 << 18) /* Language-independent.  */\n+#define CL_PARAMS               (1 << 11) /* Fake entry.  Used to display --param info with --help.  */\n+#define CL_WARNING\t\t(1 << 12) /* Enables an (optional) warning message.  */\n+#define CL_OPTIMIZATION\t\t(1 << 13) /* Enables an (optional) optimization.  */\n+#define CL_DRIVER\t\t(1 << 14) /* Driver option.  */\n+#define CL_TARGET\t\t(1 << 15) /* Target-specific option.  */\n+#define CL_COMMON\t\t(1 << 16) /* Language-independent.  */\n \n #define CL_MIN_OPTION_CLASS\tCL_PARAMS\n #define CL_MAX_OPTION_CLASS\tCL_COMMON\n@@ -86,6 +86,11 @@ extern const unsigned int cl_lang_count;\n    This distinction is important because --help will not list options\n    which only have these higher bits set.  */\n \n+/* Options marked with CL_SEPARATE take a number of separate arguments\n+   (1 to 4) that is one more than the number in this bit-field.  */\n+#define CL_SEPARATE_NARGS_SHIFT\t17\n+#define CL_SEPARATE_NARGS_MASK\t(3 << CL_SEPARATE_NARGS_SHIFT)\n+\n #define CL_SEPARATE_ALIAS\t(1 << 19) /* Option is an alias when used with separate argument.  */\n #define CL_NO_DRIVER_ARG\t(1 << 20) /* Option takes no argument in the driver.  */\n #define CL_REJECT_DRIVER\t(1 << 21) /* Reject this option in the driver.  */"}, {"sha": "afe015a4a3184e8264e0570197c4205698ef3e50", "filename": "gcc/system.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c243beb03c0fc64c2400835b9cbd770cbbd48222/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=c243beb03c0fc64c2400835b9cbd770cbbd48222", "patch": "@@ -776,7 +776,7 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tSTACK_CHECK_PROBE_INTERVAL STACK_CHECK_PROBE_LOAD\t\t   \\\n \tORDER_REGS_FOR_LOCAL_ALLOC FUNCTION_OUTGOING_VALUE\t\t   \\\n \tASM_DECLARE_CONSTANT_NAME MODIFY_TARGET_NAME SWITCHES_NEED_SPACES  \\\n-\tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG\n+\tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}]}