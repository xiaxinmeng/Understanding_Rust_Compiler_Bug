{"sha": "ee78c20e74d30284fee36e22a64e86e45e676029", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWU3OGMyMGU3NGQzMDI4NGZlZTM2ZTIyYTY0ZTg2ZTQ1ZTY3NjAyOQ==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-12-18T07:56:06Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-01-22T04:35:14Z"}, "message": "Lower AVX512 vector comparison to AVX version when dest is vector.\n\ngcc/ChangeLog:\n\n\tPR target/96891\n\tPR target/98348\n\t* config/i386/sse.md (VI_128_256): New mode iterator.\n\t(*avx_cmp<mode>3_1, *avx_cmp<mode>3_2, *avx_cmp<mode>3_3,\n\t *avx_cmp<mode>3_4, *avx2_eq<mode>3, *avx2_pcmp<mode>3_1,\n\t *avx2_pcmp<mode>3_2, *avx2_gt<mode>3): New\n\tdefine_insn_and_split to lower avx512 vector comparison to avx\n\tversion when dest is vector.\n\t(*<avx512>_cmp<mode>3,*<avx512>_cmp<mode>3,*<avx512>_ucmp<mode>3):\n\tdefine_insn_and_split for negating the comparison result.\n\t* config/i386/predicates.md (float_vector_all_ones_operand):\n\tNew predicate.\n\t* config/i386/i386-expand.c (ix86_expand_sse_movcc): Use\n\tgeneral NOT operator without UNSPEC_MASKOP.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/96891\n\tPR target/98348\n\t* gcc.target/i386/avx512bw-pr96891-1.c: New test.\n\t* gcc.target/i386/avx512f-pr96891-1.c: New test.\n\t* gcc.target/i386/avx512f-pr96891-2.c: New test.\n\t* gcc.target/i386/avx512f-pr96891-3.c: New test.\n\t* g++.target/i386/avx512f-pr96891-1.C: New test.\n\t* gcc.target/i386/bitwise_mask_op-3.c: Adjust testcase.", "tree": {"sha": "f36f196ec99d2fb29394a30cb5d4df8ddd9ff448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f36f196ec99d2fb29394a30cb5d4df8ddd9ff448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee78c20e74d30284fee36e22a64e86e45e676029", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee78c20e74d30284fee36e22a64e86e45e676029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee78c20e74d30284fee36e22a64e86e45e676029", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee78c20e74d30284fee36e22a64e86e45e676029/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca467e56fe111fa6d876656c60d5704065e83fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca467e56fe111fa6d876656c60d5704065e83fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca467e56fe111fa6d876656c60d5704065e83fe"}], "stats": {"total": 544, "additions": 531, "deletions": 13}, "files": [{"sha": "d64b4acc7dca7a56f270ce59ca4ae479cc913352", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -3568,17 +3568,11 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t\t  ? force_reg (mode, op_false) : op_false);\n       if (op_true == CONST0_RTX (mode))\n \t{\n-\t  rtx (*gen_not) (rtx, rtx);\n-\t  switch (cmpmode)\n-\t    {\n-\t    case E_QImode: gen_not = gen_knotqi; break;\n-\t    case E_HImode: gen_not = gen_knothi; break;\n-\t    case E_SImode: gen_not = gen_knotsi; break;\n-\t    case E_DImode: gen_not = gen_knotdi; break;\n-\t    default: gcc_unreachable ();\n-\t    }\n \t  rtx n = gen_reg_rtx (cmpmode);\n-\t  emit_insn (gen_not (n, cmp));\n+\t  if (cmpmode == E_DImode && !TARGET_64BIT)\n+\t    emit_insn (gen_knotdi (n, cmp));\n+\t  else\n+\t    emit_insn (gen_rtx_SET (n, gen_rtx_fmt_e (NOT, cmpmode, cmp)));\n \t  cmp = n;\n \t  /* Reverse op_true op_false.  */\n \t  std::swap (op_true, op_false);"}, {"sha": "ee42ba2922bfdadb65d8ebdc30486680d20c4c99", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -1069,6 +1069,53 @@\n   return true;\n })\n \n+/* Return true if operand is a float vector constant that is all ones. */\n+(define_predicate \"float_vector_all_ones_operand\"\n+  (match_code \"const_vector,mem\")\n+{\n+  mode = GET_MODE (op);\n+  if (!FLOAT_MODE_P (mode)\n+      || (MEM_P (op)\n+\t  && (!SYMBOL_REF_P (XEXP (op, 0))\n+\t      || !CONSTANT_POOL_ADDRESS_P (XEXP (op, 0)))))\n+    return false;\n+\n+  if (MEM_P (op))\n+    {\n+      op = get_pool_constant (XEXP (op, 0));\n+      if (GET_CODE (op) != CONST_VECTOR)\n+\treturn false;\n+\n+      if (GET_MODE (op) != mode\n+\t && INTEGRAL_MODE_P (GET_MODE (op))\n+\t && op == CONSTM1_RTX (GET_MODE (op)))\n+\treturn true;\n+    }\n+\n+  rtx first = XVECEXP (op, 0, 0);\n+  for (int i = 1; i != GET_MODE_NUNITS (GET_MODE (op)); i++)\n+    {\n+      rtx tmp = XVECEXP (op, 0, i);\n+      if (!rtx_equal_p (tmp, first))\n+\treturn false;\n+    }\n+  if (GET_MODE (first) == E_SFmode)\n+    {\n+      long l;\n+      REAL_VALUE_TO_TARGET_SINGLE (*CONST_DOUBLE_REAL_VALUE (first), l);\n+      return (l & 0xffffffff) == 0xffffffff;\n+    }\n+  else if (GET_MODE (first) == E_DFmode)\n+    {\n+      long l[2];\n+      REAL_VALUE_TO_TARGET_DOUBLE (*CONST_DOUBLE_REAL_VALUE (first), l);\n+      return ((l[0] & 0xffffffff) == 0xffffffff\n+\t     && (l[1] & 0xffffffff) == 0xffffffff);\n+    }\n+  else\n+    return false;\n+})\n+\n /* Return true if operand is a vector constant that is all ones. */\n (define_predicate \"vector_all_ones_operand\"\n   (and (match_code \"const_vector\")"}, {"sha": "9683a991fb2f716460a8c4ec43f441b8de263192", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 259, "deletions": 2, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -648,6 +648,9 @@\n ;; All 256bit vector integer modes\n (define_mode_iterator VI_256 [V32QI V16HI V8SI V4DI])\n \n+;; All 128 and 256bit vector integer modes\n+(define_mode_iterator VI_128_256 [V16QI V8HI V4SI V2DI V32QI V16HI V8SI V4DI])\n+\n ;; Various 128bit vector integer mode combinations\n (define_mode_iterator VI12_128 [V16QI V8HI])\n (define_mode_iterator VI14_128 [V16QI V4SI])\n@@ -2965,6 +2968,102 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+(define_insn_and_split \"*avx_cmp<mode>3_1\"\n+  [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n+\t(vec_merge:<sseintvecmode>\n+\t  (match_operand:<sseintvecmode> 1 \"vector_all_ones_operand\")\n+\t  (match_operand:<sseintvecmode> 2 \"const0_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VF_128_256 3 \"register_operand\")\n+\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_31_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 6)\n+\t(unspec:VF_128_256\n+\t  [(match_dup 3)\n+\t   (match_dup 4)\n+\t   (match_dup 5)]\n+\t  UNSPEC_PCMP))\n+   (set (match_dup 0) (match_dup 7))]\n+{\n+  operands[6] = gen_reg_rtx (<MODE>mode);\n+  operands[7]\n+    = lowpart_subreg (GET_MODE (operands[0]), operands[6], <MODE>mode);\n+})\n+\n+(define_insn_and_split \"*avx_cmp<mode>3_2\"\n+  [(set (match_operand:<sseintvecmode> 0 \"register_operand\")\n+\t(vec_merge:<sseintvecmode>\n+\t  (match_operand:<sseintvecmode> 1 \"vector_all_ones_operand\")\n+\t  (match_operand:<sseintvecmode> 2 \"const0_operand\")\n+\t  (not:<avx512fmaskmode>\n+\t    (unspec:<avx512fmaskmode>\n+\t      [(match_operand:VF_128_256 3 \"register_operand\")\n+\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")\n+\t       (match_operand:SI 5 \"const_0_to_31_operand\")]\n+\t       UNSPEC_PCMP))))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 6)\n+\t(unspec:VF_128_256\n+\t  [(match_dup 3)\n+\t   (match_dup 4)\n+\t   (match_dup 5)]\n+\t  UNSPEC_PCMP))\n+   (set (match_dup 0) (match_dup 7))]\n+{\n+  operands[5] = GEN_INT (INTVAL (operands[5]) ^ 4);\n+  operands[6] = gen_reg_rtx (<MODE>mode);\n+  operands[7]\n+    = lowpart_subreg (GET_MODE (operands[0]), operands[6], <MODE>mode);\n+})\n+\n+(define_insn_and_split \"*avx_cmp<mode>3_3\"\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(vec_merge:VF_128_256\n+\t  (match_operand:VF_128_256 1 \"float_vector_all_ones_operand\")\n+\t  (match_operand:VF_128_256 2 \"const0_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VF_128_256 3 \"register_operand\")\n+\t     (match_operand:VF_128_256 4 \"nonimmediate_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_31_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_128_256\n+\t  [(match_dup 3)\n+\t   (match_dup 4)\n+\t   (match_dup 5)]\n+\t  UNSPEC_PCMP))])\n+\n+(define_insn_and_split \"*avx_cmp<mode>3_4\"\n+  [(set (match_operand:VF_128_256 0 \"register_operand\")\n+\t(vec_merge:VF_128_256\n+\t  (match_operand:VF_128_256 1 \"float_vector_all_ones_operand\")\n+\t  (match_operand:VF_128_256 2 \"const0_operand\")\n+\t  (not:<avx512fmaskmode>\n+\t    (unspec:<avx512fmaskmode>\n+\t      [(match_operand:VF_128_256 3 \"register_operand\")\n+\t       (match_operand:VF_128_256 4 \"nonimmediate_operand\")\n+\t       (match_operand:SI 5 \"const_0_to_31_operand\")]\n+\t       UNSPEC_PCMP))))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:VF_128_256\n+\t  [(match_dup 3)\n+\t   (match_dup 4)\n+\t   (match_dup 5)]\n+\t  UNSPEC_PCMP))]\n+  \"operands[5] = GEN_INT (INTVAL (operands[5]) ^ 4);\")\n+\n (define_insn \"avx_vmcmp<mode>3\"\n   [(set (match_operand:VF_128 0 \"register_operand\" \"=x\")\n \t(vec_merge:VF_128\n@@ -3056,6 +3155,25 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_insn_and_split \"*<avx512>_cmp<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n+\t(not:<avx512fmaskmode>\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:V48_AVX512VL 1 \"register_operand\")\n+\t     (match_operand:V48_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"<cmp_imm_predicate>\" \"n\")]\n+\t    UNSPEC_PCMP)))]\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+  \t(unspec:<avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 4)]\n+\t   UNSPEC_PCMP))]\n+  \"operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);\")\n+\n (define_insn \"<avx512>_cmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3070,6 +3188,28 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n+(define_int_iterator UNSPEC_PCMP_ITER\n+  [UNSPEC_PCMP UNSPEC_UNSIGNED_PCMP])\n+\n+(define_insn_and_split \"*<avx512>_cmp<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n+\t(not:<avx512fmaskmode>\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI12_AVX512VL 1 \"register_operand\")\n+\t     (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"<cmp_imm_predicate>\")]\n+\t    UNSPEC_PCMP_ITER)))]\n+  \"TARGET_AVX512BW && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 4)]\n+\t   UNSPEC_PCMP_ITER))]\n+  \"operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);\")\n+\n (define_insn \"<avx512>_ucmp<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>\n@@ -3098,8 +3238,24 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_int_iterator UNSPEC_PCMP_ITER\n-  [UNSPEC_PCMP UNSPEC_UNSIGNED_PCMP])\n+(define_insn_and_split \"*<avx512>_ucmp<mode>3\"\n+  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n+\t(not:<avx512fmaskmode>\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI48_AVX512VL 1 \"register_operand\")\n+\t     (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\")\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n+\t    UNSPEC_UNSIGNED_PCMP)))]\n+  \"TARGET_AVX512F && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(unspec:<avx512fmaskmode>\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 4)]\n+\t   UNSPEC_UNSIGNED_PCMP))]\n+  \"operands[4] = GEN_INT (INTVAL (operands[3]) ^ 4);\")\n \n (define_int_attr pcmp_signed_mask\n   [(UNSPEC_PCMP \"3\") (UNSPEC_UNSIGNED_PCMP \"1\")])\n@@ -12733,6 +12889,89 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx2_eq<mode>3\"\n+ [(set (match_operand:VI_128_256  0 \"register_operand\")\n+\t(vec_merge:VI_128_256\n+\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n+\t  (match_operand:VI_128_256 2 \"const0_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI_128_256 3 \"nonimmediate_operand\")\n+\t     (match_operand:VI_128_256 4 \"nonimmediate_operand\")]\n+\t     UNSPEC_MASKED_EQ)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  && !(MEM_P (operands[3]) && MEM_P (operands[4]))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(eq:VI_128_256\n+\t   (match_dup 3)\n+\t   (match_dup 4)))])\n+\n+(define_insn_and_split \"*avx2_pcmp<mode>3_1\"\n+ [(set (match_operand:VI_128_256  0 \"register_operand\")\n+\t(vec_merge:VI_128_256\n+\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n+\t  (match_operand:VI_128_256 2 \"const0_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI_128_256 3 \"nonimmediate_operand\")\n+\t     (match_operand:VI_128_256 4 \"nonimmediate_operand\")\n+\t     (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t     UNSPEC_PCMP)))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+  /* EQ is commutative.  */\n+   && ((INTVAL (operands[5]) == 0\n+\t&& !(MEM_P (operands[3]) && MEM_P (operands[4])))\n+\t  /* NLE aka GT, 3 must be register.  */\n+       || (INTVAL (operands[5]) == 6\n+\t   && !MEM_P (operands[3]))\n+\t  /* LT, 4 must be register and we swap operands.  */\n+       || (INTVAL (operands[5]) == 1\n+\t   && !MEM_P (operands[4])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (INTVAL (operands[5]) == 1)\n+    std::swap (operands[3], operands[4]);\n+  enum rtx_code code = INTVAL (operands[5]) ? GT : EQ;\n+  emit_move_insn (operands[0], gen_rtx_fmt_ee (code, <MODE>mode,\n+\t\t\t\t\t       operands[3], operands[4]));\n+  DONE;\n+})\n+\n+(define_insn_and_split \"*avx2_pcmp<mode>3_2\"\n+ [(set (match_operand:VI_128_256  0 \"register_operand\")\n+\t(vec_merge:VI_128_256\n+\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n+\t  (match_operand:VI_128_256 2 \"const0_operand\")\n+\t  (not:<avx512fmaskmode>\n+\t    (unspec:<avx512fmaskmode>\n+\t      [(match_operand:VI_128_256 3 \"nonimmediate_operand\")\n+\t       (match_operand:VI_128_256 4 \"nonimmediate_operand\")\n+\t       (match_operand:SI 5 \"const_0_to_7_operand\")]\n+\t       UNSPEC_PCMP))))]\n+  \"TARGET_AVX512VL && ix86_pre_reload_split ()\n+   /* NE is commutative.  */\n+   && ((INTVAL (operands[5]) == 4\n+\t&& !(MEM_P (operands[3]) && MEM_P (operands[4])))\n+\t  /* LE, 3 must be register.  */\n+       || (INTVAL (operands[5]) == 2\n+\t   && !MEM_P (operands[3]))\n+\t  /* NLT aka GE, 4 must be register and we swap operands.  */\n+       || (INTVAL (operands[5]) == 5\n+\t   && !MEM_P (operands[4])))\"\n+  \"#\"\n+  \"&& 1\"\n+  [(const_int 0)]\n+{\n+  if (INTVAL (operands[5]) == 5)\n+    std::swap (operands[3], operands[4]);\n+  enum rtx_code code = INTVAL (operands[5]) != 4 ? GT : EQ;\n+  emit_move_insn (operands[0], gen_rtx_fmt_ee (code, <MODE>mode,\n+\t\t\t\t\t       operands[3], operands[4]));\n+  DONE;\n+})\n+\n (define_expand \"<avx512>_eq<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\")\n \t(unspec:<avx512fmaskmode>\n@@ -12857,6 +13096,24 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n+(define_insn_and_split \"*avx2_gt<mode>3\"\n+ [(set (match_operand:VI_128_256  0 \"register_operand\")\n+\t(vec_merge:VI_128_256\n+\t  (match_operand:VI_128_256 1 \"vector_all_ones_operand\")\n+\t  (match_operand:VI_128_256 2 \"const0_operand\")\n+\t  (unspec:<avx512fmaskmode>\n+\t    [(match_operand:VI_128_256 3 \"register_operand\")\n+\t     (match_operand:VI_128_256 4 \"nonimmediate_operand\")]\n+\t     UNSPEC_MASKED_GT)))]\n+  \"TARGET_AVX512VL\n+  && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(set (match_dup 0)\n+\t(gt:VI_128_256\n+\t   (match_dup 3)\n+\t   (match_dup 4)))])\n+\n (define_insn \"<avx512>_gt<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n \t(unspec:<avx512fmaskmode>"}, {"sha": "969a085b9009e8b42a022b563231950cde7a7f01", "filename": "gcc/testsuite/g++.target/i386/avx512f-pr96891-1.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512f-pr96891-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512f-pr96891-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Favx512f-pr96891-1.C?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not \"%k\\[0-7\\]\" } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef float v8sf __attribute__ ((vector_size (32)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef double v4df __attribute__ ((vector_size (32)));\n+\n+\n+v4sf\n+foo_v4sf (v4sf x)\n+{\n+  const union U { unsigned u; float f; } u = { -1U };\n+  return x > 0.0f ? u.f : 0.0f;\n+}\n+\n+v8sf\n+foo_v8sf (v8sf x)\n+{\n+  const union U { unsigned u; float f; } u = { -1U };\n+  return x > 0.0f ? u.f : 0.0f;\n+}\n+\n+v2df\n+foo_v2df (v2df x)\n+{\n+  const union U { unsigned long long u; double df; } u = { -1ULL };\n+  return x > 0.0 ? u.df : 0.0;\n+}\n+\n+v4df\n+foo_v4df (v4df x)\n+{\n+  const union U { unsigned long long u; double df; } u = { -1ULL };\n+  return x > 0.0 ? u.df : 0.0;\n+}"}, {"sha": "d899cebd0d66d3cf2a178f095d2c635a87043597", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-pr96891-1.c", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96891-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96891-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-pr96891-1.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -0,0 +1,75 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512bw -mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not \"%k\\[0-7\\]\" } } */\n+\n+typedef char v16qi __attribute__ ((vector_size (16)));\n+typedef char v32qi __attribute__ ((vector_size (32)));\n+typedef short v8hi __attribute__ ((vector_size (16)));\n+typedef short v16hi __attribute__ ((vector_size (32)));\n+typedef int v4si __attribute__ ((vector_size (16)));\n+typedef int v8si __attribute__ ((vector_size (32)));\n+typedef long long v2di __attribute__ ((vector_size (16)));\n+typedef long long v4di __attribute__ ((vector_size (32)));\n+\n+#define FOO(VTYPE, OPNAME, OP)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  foo_##VTYPE##_##OPNAME (VTYPE a, VTYPE b)\t\\\n+  {\t\t\t\t\t\t\\\n+    return a OP b;\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+#define FOO1(VTYPE, OPNAME, OP)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  foo1_##VTYPE##_##OPNAME (VTYPE a, VTYPE b)\t\\\n+  {\t\t\t\t\t\t\\\n+    return ~(a OP b);\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+FOO (v16qi, eq, ==)\n+FOO1 (v16qi, neq, !=)\n+FOO (v16qi, gt, >)\n+FOO (v16qi, lt, <)\n+FOO1 (v16qi, le, <=)\n+FOO1 (v16qi, ge, >=)\n+FOO (v32qi, eq, ==)\n+FOO1 (v32qi, neq, !=)\n+FOO (v32qi, gt, >)\n+FOO (v32qi, lt, <)\n+FOO1 (v32qi, le, <=)\n+FOO1 (v32qi, ge, >=)\n+FOO (v8hi, eq, ==)\n+FOO1 (v8hi, neq, !=)\n+FOO (v8hi, gt, >)\n+FOO (v8hi, lt, <)\n+FOO1 (v8hi, le, <=)\n+FOO1 (v8hi, ge, >=)\n+FOO (v16hi, eq, ==)\n+FOO1 (v16hi, neq, !=)\n+FOO (v16hi, gt, >)\n+FOO (v16hi, lt, <)\n+FOO1 (v16hi, le, <=)\n+FOO1 (v16hi, ge, >=)\n+FOO (v4si, eq, ==)\n+FOO1 (v4si, neq, !=)\n+FOO (v4si, gt, >)\n+FOO (v4si, lt, <)\n+FOO1 (v4si, le, <=)\n+FOO1 (v4si, ge, >=)\n+FOO (v8si, eq, ==)\n+FOO1 (v8si, neq, !=)\n+FOO (v8si, gt, >)\n+FOO (v8si, lt, <)\n+FOO1 (v8si, le, <=)\n+FOO1 (v8si, ge, >=)\n+FOO (v2di, eq, ==)\n+FOO1 (v2di, neq, !=)\n+FOO (v2di, gt, >)\n+FOO (v2di, lt, <)\n+FOO1 (v2di, le, <=)\n+FOO1 (v2di, ge, >=)\n+FOO (v4di, eq, ==)\n+FOO1 (v4di, neq, !=)\n+FOO (v4di, gt, >)\n+FOO (v4di, lt, >)\n+FOO1 (v4di, le, <=)\n+FOO1 (v4di, ge, >=)"}, {"sha": "48ba943e1510bc38755260140308886a50631d16", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr96891-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-1.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -O2\" } */\n+/* { dg-final { scan-assembler-not \"%k\\[0-7\\]\" } } */\n+\n+typedef float v4sf __attribute__ ((vector_size (16)));\n+typedef float v8sf __attribute__ ((vector_size (32)));\n+typedef double v2df __attribute__ ((vector_size (16)));\n+typedef double v4df __attribute__ ((vector_size (32)));\n+\n+#define FOO(VTYPE, OPNAME, OP)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\\\n+  foo_##VTYPE##_##OPNAME (VTYPE a, VTYPE b)\t\\\n+  {\t\t\t\t\t\t\\\n+    return a OP b;\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+FOO (v4sf, eq, ==)\n+FOO (v4sf, neq, !=)\n+FOO (v4sf, gt, >)\n+FOO (v4sf, ge, >=)\n+FOO (v4sf, lt, <)\n+FOO (v4sf, le, <=)\n+FOO (v8sf, eq, ==)\n+FOO (v8sf, neq, !=)\n+FOO (v8sf, gt, >)\n+FOO (v8sf, ge, >=)\n+FOO (v8sf, lt, <)\n+FOO (v8sf, le, <=)\n+FOO (v2df, eq, ==)\n+FOO (v2df, neq, !=)\n+FOO (v2df, gt, >)\n+FOO (v2df, ge, >=)\n+FOO (v2df, lt, <)\n+FOO (v2df, le, <=)\n+FOO (v4df, eq, ==)\n+FOO (v4df, neq, !=)\n+FOO (v4df, gt, >)\n+FOO (v4df, ge, >=)\n+FOO (v4df, lt, <)\n+FOO (v4df, le, <=)"}, {"sha": "5192a00e0f4005ee384d36a0d116b34286a20df0", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr96891-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-2.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512bw -mavx512dq -O2\" } */\n+/* { dg-final { scan-assembler-not \"%k\\[0-7\\]\" } } */\n+\n+#include<immintrin.h>\n+\n+#define FOO(VTYPE,PREFIX,SUFFIX,OPNAME,MASK,LEN)\t\t\t\\\n+  VTYPE\t\t\t\t\t\t\t\t\\\n+  foo_##LEN##_##SUFFIX##_##OPNAME (VTYPE a, VTYPE b)\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    MASK m = _mm##PREFIX##_cmp##OPNAME##_##SUFFIX##_mask (a, b);\t\\\n+    return _mm##PREFIX##_movm_##SUFFIX (m);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO (__m128i,, epi8, eq, __mmask16, 128);\n+FOO (__m128i,, epi16, eq, __mmask8, 128);\n+FOO (__m128i,, epi32, eq, __mmask8, 128);\n+FOO (__m128i,, epi64, eq, __mmask8, 128);\n+FOO (__m128i,, epi8, gt, __mmask16, 128);\n+FOO (__m128i,, epi16, gt, __mmask8, 128);\n+FOO (__m128i,, epi32, gt, __mmask8, 128);\n+FOO (__m128i,, epi64, gt, __mmask8, 128);\n+FOO (__m256i, 256, epi8, eq, __mmask32, 256);\n+FOO (__m256i, 256, epi16, eq, __mmask16, 256);\n+FOO (__m256i, 256, epi32, eq, __mmask8, 256);\n+FOO (__m256i, 256, epi64, eq, __mmask8, 256);\n+FOO (__m256i, 256, epi8, gt, __mmask32, 256);\n+FOO (__m256i, 256, epi16, gt, __mmask16, 256);\n+FOO (__m256i, 256, epi32, gt, __mmask8, 256);\n+FOO (__m256i, 256, epi64, gt, __mmask8, 256);"}, {"sha": "1cf18f2407b2abff9a5492c88ccc280293f93e96", "filename": "gcc/testsuite/gcc.target/i386/avx512f-pr96891-3.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-pr96891-3.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512bw -mavx512dq -O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-not {not[bwlqd]\\]} } } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmp[bwdq][ \\t]*\\$5} 4} } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmp[bwdq][ \\t]*\\$6} 4} } */\n+/* { dg-final { scan-assembler-times {(?n)vpcmp[bwdq][ \\t]*\\$7} 4} } */\n+/* { dg-final { scan-assembler-times {(?n)vcmpp[sd][ \\t]*\\$5} 2} } */\n+/* { dg-final { scan-assembler-times {(?n)vcmpp[sd][ \\t]*\\$6} 2} } */\n+/* { dg-final { scan-assembler-times {(?n)vcmpp[sd][ \\t]*\\$7} 2} } */\n+\n+#include<immintrin.h>\n+\n+#define FOO(VTYPE,PREFIX,SUFFIX,MASK,LEN,CMPIMM)\t\t\t\\\n+  MASK\t\t\t\t\t\t\t\t\\\n+  foo_##LEN##_##SUFFIX##_##CMPIMM (VTYPE a, VTYPE b)\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    MASK m = _mm##PREFIX##_cmp_##SUFFIX##_mask (a, b, CMPIMM);\t\t\\\n+    return ~m;\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\n+FOO (__m128i,, epi8, __mmask16, 128, 1);\n+FOO (__m128i,, epi16, __mmask8, 128, 1);\n+FOO (__m128i,, epi32, __mmask8, 128, 1);\n+FOO (__m128i,, epi64, __mmask8, 128, 1);\n+FOO (__m256i, 256, epi8, __mmask32, 256, 2);\n+FOO (__m256i, 256, epi16, __mmask16, 256, 2);\n+FOO (__m256i, 256, epi32, __mmask8, 256, 2);\n+FOO (__m256i, 256, epi64, __mmask8, 256, 2);\n+FOO (__m512i, 512, epi8, __mmask64, 512, 3);\n+FOO (__m512i, 512, epi16, __mmask32, 512, 3);\n+FOO (__m512i, 512, epi32, __mmask16, 512, 3);\n+FOO (__m512i, 512, epi64, __mmask8, 512, 3);\n+\n+FOO (__m128,, ps, __mmask8, 128, 1);\n+FOO (__m128d,, pd, __mmask8, 128, 1);\n+FOO (__m256, 256, ps, __mmask8, 256, 2);\n+FOO (__m256d, 256, pd, __mmask8, 256, 2);\n+FOO (__m512, 512, ps, __mmask16, 512, 3);\n+FOO (__m512d, 512, pd, __mmask8, 512, 3);"}, {"sha": "4a9078615aadf5387edff29eef4e5995ece94e38", "filename": "gcc/testsuite/gcc.target/i386/bitwise_mask_op-3.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee78c20e74d30284fee36e22a64e86e45e676029/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbitwise_mask_op-3.c?ref=ee78c20e74d30284fee36e22a64e86e45e676029", "patch": "@@ -40,5 +40,4 @@ foo_andnb (__m512i a, __m512i b)\n   foo = m1 & ~m2;\n }\n \n-/* { dg-final { scan-assembler-times \"knotb\\[\\t \\]\" \"1\" } }  */\n /* { dg-final { scan-assembler-times \"kmovb\\[\\t \\]\" \"4\"} }  */"}]}