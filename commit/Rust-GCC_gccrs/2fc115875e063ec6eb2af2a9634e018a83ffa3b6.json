{"sha": "2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmZjMTE1ODc1ZTA2M2VjNmViMmFmMmE5NjM0ZTAxOGE4M2ZmYTNiNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-10-04T15:08:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-10-04T15:08:23Z"}, "message": "Build filesystem library with large file support\n\nEnable AC_SYS_LARGEFILE to set the macros needed for large file APIs to\nbe used by default. We do not want to define those macros in the\npublic headers that users include. The values of the macros are copied\nto a separate file that is only included by the filesystem sources\nduring the build, and then the macros in <bits/c++config.h> are renamed\nso that they don't have any effect in user code including our headers.\n\nAlso use larger type for result of filesystem::file_size to avoid\ntruncation of large values on 32-bit systems (PR 91947).\n\n\tPR libstdc++/81091\n\tPR libstdc++/91947\n\t* configure.ac: Use AC_SYS_LARGEFILE to enable 64-bit file APIs.\n\t* config.h.in: Regenerate:\n\t* configure: Regenerate:\n\t* include/Makefile.am (${host_builddir}/largefile-config.h): New\n\ttarget to generate config header for filesystem library.\n\t(${host_builddir}/c++config.h): Rename macros for large file support.\n\t* include/Makefile.in: Regenerate.\n\t* src/c++17/fs_dir.cc: Include new config header.\n\t* src/c++17/fs_ops.cc: Likewise.\n\t(filesystem::file_size): Use uintmax_t for size.\n\t* src/filesystem/dir.cc: Include new config header.\n\t* src/filesystem/ops.cc: Likewise.\n\t(experimental::filesystem::file_size): Use uintmax_t for size.\n\nFrom-SVN: r276585", "tree": {"sha": "df5ab1d61a4cd3d7e0eac3081e9b7f27bc6146e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df5ab1d61a4cd3d7e0eac3081e9b7f27bc6146e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a789c10e91ec8c8f021f72f7df6045d019e5538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a789c10e91ec8c8f021f72f7df6045d019e5538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a789c10e91ec8c8f021f72f7df6045d019e5538"}], "stats": {"total": 306, "additions": 294, "deletions": 12}, "files": [{"sha": "4e822def3fe310dc08b427c06ed3d7115ab45370", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -1,5 +1,21 @@\n 2019-10-04  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/81091\n+\tPR libstdc++/91947\n+\t* configure.ac: Use AC_SYS_LARGEFILE to enable 64-bit file APIs.\n+\t* config.h.in: Regenerate:\n+\t* configure: Regenerate:\n+\t* include/Makefile.am (${host_builddir}/largefile-config.h): New\n+\ttarget to generate config header for filesystem library.\n+\t(${host_builddir}/c++config.h): Rename macros for large file support.\n+\t* include/Makefile.in: Regenerate.\n+\t* src/c++17/fs_dir.cc: Include new config header.\n+\t* src/c++17/fs_ops.cc: Likewise.\n+\t(filesystem::file_size): Use uintmax_t for size.\n+\t* src/filesystem/dir.cc: Include new config header.\n+\t* src/filesystem/ops.cc: Likewise.\n+\t(experimental::filesystem::file_size): Use uintmax_t for size.\n+\n \t* testsuite/util/testsuite_abi.h: Use std::unordered_map instead of\n \tstd::tr1::unordered_map.\n \t* testsuite/util/testsuite_allocator.h: Likewise."}, {"sha": "32f7863a85ef90083c29f466b84b95c54b0339a2", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -803,6 +803,14 @@\n /* Version number of package */\n #undef VERSION\n \n+/* Enable large inode numbers on Mac OS X 10.5.  */\n+#ifndef _DARWIN_USE_64_BIT_INODE\n+# define _DARWIN_USE_64_BIT_INODE 1\n+#endif\n+\n+/* Number of bits in a file offset, on hosts where this is settable. */\n+#undef _FILE_OFFSET_BITS\n+\n /* Define if C99 functions in <complex.h> should be used in <complex> for\n    C++11. Using compiler builtins for these functions requires corresponding\n    C99 library functions to be present. */\n@@ -1047,6 +1055,9 @@\n /* Define to 1 if mutex_timedlock is available. */\n #undef _GTHREAD_USE_MUTEX_TIMEDLOCK\n \n+/* Define for large files, on AIX-style hosts. */\n+#undef _LARGE_FILES\n+\n /* Define if all C++11 floating point overloads are available in <math.h>.  */\n #if __cplusplus >= 201103L\n #undef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP"}, {"sha": "cb67581206d10f09b69171b53cc45a337e39749a", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 213, "deletions": 10, "changes": 223, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -895,6 +895,7 @@ ac_user_opts='\n enable_option_checking\n enable_multilib\n enable_silent_rules\n+enable_largefile\n with_target_subdir\n with_cross_host\n with_newlib\n@@ -1579,6 +1580,7 @@ Optional Features:\n   --enable-multilib       build many library versions (default)\n   --enable-silent-rules   less verbose build output (undo: \"make V=1\")\n   --disable-silent-rules  verbose build output (undo: \"make V=0\")\n+  --disable-largefile     omit support for large files\n   --enable-maintainer-mode\n                           enable make rules and dependencies not useful (and\n                           sometimes confusing) to the casual installer\n@@ -4928,9 +4930,210 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n CXXFLAGS=\"$save_CXXFLAGS\"\n \n+\n+# Check whether --enable-largefile was given.\n+if test \"${enable_largefile+set}\" = set; then :\n+  enableval=$enable_largefile;\n+fi\n+\n+if test \"$enable_largefile\" != no; then\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for special C compiler options needed for large files\" >&5\n+$as_echo_n \"checking for special C compiler options needed for large files... \" >&6; }\n+if ${ac_cv_sys_largefile_CC+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_cv_sys_largefile_CC=no\n+     if test \"$GCC\" != yes; then\n+       ac_save_CC=$CC\n+       while :; do\n+\t # IRIX 6.2 and later do not support large files by default,\n+\t # so use the C compiler's -n32 option if that helps.\n+\t cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+\t if ac_fn_c_try_compile \"$LINENO\"; then :\n+  break\n+fi\n+rm -f core conftest.err conftest.$ac_objext\n+\t CC=\"$CC -n32\"\n+\t if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_largefile_CC=' -n32'; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext\n+\t break\n+       done\n+       CC=$ac_save_CC\n+       rm -f conftest.$ac_ext\n+    fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_largefile_CC\" >&5\n+$as_echo \"$ac_cv_sys_largefile_CC\" >&6; }\n+  if test \"$ac_cv_sys_largefile_CC\" != no; then\n+    CC=$CC$ac_cv_sys_largefile_CC\n+  fi\n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _FILE_OFFSET_BITS value needed for large files\" >&5\n+$as_echo_n \"checking for _FILE_OFFSET_BITS value needed for large files... \" >&6; }\n+if ${ac_cv_sys_file_offset_bits+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  while :; do\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_file_offset_bits=no; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#define _FILE_OFFSET_BITS 64\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_file_offset_bits=64; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  ac_cv_sys_file_offset_bits=unknown\n+  break\n+done\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_file_offset_bits\" >&5\n+$as_echo \"$ac_cv_sys_file_offset_bits\" >&6; }\n+case $ac_cv_sys_file_offset_bits in #(\n+  no | unknown) ;;\n+  *)\n+cat >>confdefs.h <<_ACEOF\n+#define _FILE_OFFSET_BITS $ac_cv_sys_file_offset_bits\n+_ACEOF\n+;;\n+esac\n+rm -rf conftest*\n+  if test $ac_cv_sys_file_offset_bits = unknown; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for _LARGE_FILES value needed for large files\" >&5\n+$as_echo_n \"checking for _LARGE_FILES value needed for large files... \" >&6; }\n+if ${ac_cv_sys_large_files+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  while :; do\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_large_files=no; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#define _LARGE_FILES 1\n+#include <sys/types.h>\n+ /* Check that off_t can represent 2**63 - 1 correctly.\n+    We can't simply define LARGE_OFF_T to be 9223372036854775807,\n+    since some C++ compilers masquerading as C compilers\n+    incorrectly reject 9223372036854775807.  */\n+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n+\t\t       && LARGE_OFF_T % 2147483647 == 1)\n+\t\t      ? 1 : -1];\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_cv_sys_large_files=1; break\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  ac_cv_sys_large_files=unknown\n+  break\n+done\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_large_files\" >&5\n+$as_echo \"$ac_cv_sys_large_files\" >&6; }\n+case $ac_cv_sys_large_files in #(\n+  no | unknown) ;;\n+  *)\n+cat >>confdefs.h <<_ACEOF\n+#define _LARGE_FILES $ac_cv_sys_large_files\n+_ACEOF\n+;;\n+esac\n+rm -rf conftest*\n+  fi\n+\n+\n+fi\n+\n+\n # Runs configure.host, and assorted other critical bits.  Sets\n # up critical shell variables.\n-\n ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n@@ -11850,7 +12053,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11853 \"configure\"\n+#line 12056 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11956,7 +12159,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11959 \"configure\"\n+#line 12162 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15648,7 +15851,7 @@ $as_echo \"$glibcxx_cv_atomic_long_long\" >&6; }\n   # Fake what AC_TRY_COMPILE does.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15651 \"configure\"\n+#line 15854 \"configure\"\n int main()\n {\n   typedef bool atomic_type;\n@@ -15683,7 +15886,7 @@ $as_echo \"$glibcxx_cv_atomic_bool\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15686 \"configure\"\n+#line 15889 \"configure\"\n int main()\n {\n   typedef short atomic_type;\n@@ -15718,7 +15921,7 @@ $as_echo \"$glibcxx_cv_atomic_short\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15721 \"configure\"\n+#line 15924 \"configure\"\n int main()\n {\n   // NB: _Atomic_word not necessarily int.\n@@ -15754,7 +15957,7 @@ $as_echo \"$glibcxx_cv_atomic_int\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15757 \"configure\"\n+#line 15960 \"configure\"\n int main()\n {\n   typedef long long atomic_type;\n@@ -15907,7 +16110,7 @@ $as_echo \"mutex\" >&6; }\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15910 \"configure\"\n+#line 16113 \"configure\"\n int main()\n {\n   _Decimal32 d1;\n@@ -15949,7 +16152,7 @@ ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n   # unnecessary for this test.\n \n     cat > conftest.$ac_ext << EOF\n-#line 15952 \"configure\"\n+#line 16155 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };\n@@ -15983,7 +16186,7 @@ $as_echo \"$enable_int128\" >&6; }\n     rm -f conftest*\n \n     cat > conftest.$ac_ext << EOF\n-#line 15986 \"configure\"\n+#line 16189 \"configure\"\n template<typename T1, typename T2>\n   struct same\n   { typedef T2 type; };"}, {"sha": "154819acefef3c6f62bf90e8bc04a2e0bb5ddbac", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -83,6 +83,8 @@ AC_PROG_CC\n AC_PROG_CXX\n CXXFLAGS=\"$save_CXXFLAGS\"\n \n+AC_SYS_LARGEFILE\n+\n # Runs configure.host, and assorted other critical bits.  Sets\n # up critical shell variables.\n GLIBCXX_CONFIGURE"}, {"sha": "3e9540ca0470f968a300f9ce226dc626a0c72bc3", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -1014,6 +1014,7 @@ allstamped = \\\n # catenation.\n allcreated = \\\n \t${host_builddir}/c++config.h \\\n+\t${host_builddir}/largefile-config.h \\\n \t${thread_host_headers} \\\n \t${pch_build}\n \n@@ -1237,10 +1238,29 @@ stamp-float128:\n \techo 'undef _GLIBCXX_USE_FLOAT128' > stamp-float128\n endif\n \n+# This header is not installed, it's only used to build libstdc++ itself.\n+${host_builddir}/largefile-config.h: ${CONFIG_HEADER} \\\n+\t\t\t\t     ${glibcxx_srcdir}/include/bits/c++config\n+\t@echo '#if defined _GLIBCXX_CXX_CONFIG_H || defined _FEATURES_H' > $@\n+\t@echo '# error \"This file must be included before any others\"' >> $@\n+\t@echo '#endif' >> $@\n+\t@echo >> $@\n+\t@echo '/* Enable large inode numbers on Mac OS X 10.5.  */' >> $@\n+\t@echo '#ifndef _DARWIN_USE_64_BIT_INODE' >> $@\n+\t@echo '# define _DARWIN_USE_64_BIT_INODE 1' >> $@\n+\t@echo '#endif' >> $@\n+\t@echo >> $@\n+\t@echo '/* Number of bits in a file offset, on hosts where this is settable. */' >> $@\n+\t@grep '_FILE_OFFSET_BITS' ${CONFIG_HEADER} >> $@\n+\t@echo >> $@\n+\t@echo '/* Define for large files, on AIX-style hosts. */' >> $@\n+\t@grep '_LARGE_FILES' ${CONFIG_HEADER} >> $@\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      ${glibcxx_srcdir}/include/bits/c++config \\\n+\t\t\t      ${host_builddir}/largefile-config.h \\\n \t\t\t      stamp-${host_alias} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n@@ -1278,6 +1298,9 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e 's/_DARWIN_USE_64_BIT_INODE/_GLIBCXX_DARWIN_USE_64_BIT_INODE/g' \\\n+\t    -e 's/_FILE_OFFSET_BITS/_GLIBCXX_FILE_OFFSET_BITS/g' \\\n+\t    -e 's/_LARGE_FILES/_GLIBCXX_LARGE_FILES/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_COMPAT[\t ]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\"}, {"sha": "24e1363951c8ab160e7eca2383b56aee810bed1d", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -1346,6 +1346,7 @@ allstamped = \\\n # catenation.\n allcreated = \\\n \t${host_builddir}/c++config.h \\\n+\t${host_builddir}/largefile-config.h \\\n \t${thread_host_headers} \\\n \t${pch_build}\n \n@@ -1717,10 +1718,29 @@ stamp-host: ${host_headers} ${bits_host_headers} ${ext_host_headers} ${host_head\n @ENABLE_FLOAT128_FALSE@stamp-float128:\n @ENABLE_FLOAT128_FALSE@\techo 'undef _GLIBCXX_USE_FLOAT128' > stamp-float128\n \n+# This header is not installed, it's only used to build libstdc++ itself.\n+${host_builddir}/largefile-config.h: ${CONFIG_HEADER} \\\n+\t\t\t\t     ${glibcxx_srcdir}/include/bits/c++config\n+\t@echo '#if defined _GLIBCXX_CXX_CONFIG_H || defined _FEATURES_H' > $@\n+\t@echo '# error \"This file must be included before any others\"' >> $@\n+\t@echo '#endif' >> $@\n+\t@echo >> $@\n+\t@echo '/* Enable large inode numbers on Mac OS X 10.5.  */' >> $@\n+\t@echo '#ifndef _DARWIN_USE_64_BIT_INODE' >> $@\n+\t@echo '# define _DARWIN_USE_64_BIT_INODE 1' >> $@\n+\t@echo '#endif' >> $@\n+\t@echo >> $@\n+\t@echo '/* Number of bits in a file offset, on hosts where this is settable. */' >> $@\n+\t@grep '_FILE_OFFSET_BITS' ${CONFIG_HEADER} >> $@\n+\t@echo >> $@\n+\t@echo '/* Define for large files, on AIX-style hosts. */' >> $@\n+\t@grep '_LARGE_FILES' ${CONFIG_HEADER} >> $@\n+\n # NB: The non-empty default ldbl_compat works around an AIX sed\n # oddity, see libstdc++/31957 for details.\n ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t\t\t      ${glibcxx_srcdir}/include/bits/c++config \\\n+\t\t\t      ${host_builddir}/largefile-config.h \\\n \t\t\t      stamp-${host_alias} \\\n \t\t\t      ${toplevel_srcdir}/gcc/DATESTAMP \\\n \t\t\t      stamp-namespace-version \\\n@@ -1758,6 +1778,9 @@ ${host_builddir}/c++config.h: ${CONFIG_HEADER} \\\n \t    -e 's/PACKAGE/_GLIBCXX_PACKAGE/g' \\\n \t    -e 's/VERSION/_GLIBCXX_VERSION/g' \\\n \t    -e 's/WORDS_/_GLIBCXX_WORDS_/g' \\\n+\t    -e 's/_DARWIN_USE_64_BIT_INODE/_GLIBCXX_DARWIN_USE_64_BIT_INODE/g' \\\n+\t    -e 's/_FILE_OFFSET_BITS/_GLIBCXX_FILE_OFFSET_BITS/g' \\\n+\t    -e 's/_LARGE_FILES/_GLIBCXX_LARGE_FILES/g' \\\n \t    -e 's/ICONV_CONST/_GLIBCXX_ICONV_CONST/g' \\\n \t    -e '/[\t ]_GLIBCXX_LONG_DOUBLE_COMPAT[\t ]/d' \\\n \t    < ${CONFIG_HEADER} >> $@ ;\\"}, {"sha": "bcbcd7ba6b3bdbe5f81d5c00832c32bc02e6939d", "filename": "libstdc++-v3/src/c++17/fs_dir.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_dir.cc?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -26,6 +26,7 @@\n # define _GLIBCXX_USE_CXX11_ABI 1\n #endif\n \n+#include <bits/largefile-config.h>\n #include <filesystem>\n #include <utility>\n #include <stack>"}, {"sha": "2541530e784dcce28755f193bff918b0da041ce7", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -28,6 +28,7 @@\n # define NEED_DO_SPACE\n #endif\n \n+#include <bits/largefile-config.h>\n #include <filesystem>\n #include <functional>\n #include <ostream>\n@@ -950,7 +951,7 @@ fs::file_size(const path& p, error_code& ec) noexcept\n     S(const stat_type& st) : type(make_file_type(st)), size(st.st_size) { }\n     S() : type(file_type::not_found) { }\n     file_type type;\n-    size_t size;\n+    uintmax_t size;\n   };\n   auto s = do_stat(p, ec, [](const auto& st) { return S{st}; }, S{});\n   if (s.type == file_type::regular)"}, {"sha": "ac3bd3aafb3457c91224247f5c5d9fe3ae0f6623", "filename": "libstdc++-v3/src/filesystem/dir.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fdir.cc?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -26,6 +26,7 @@\n # define _GLIBCXX_USE_CXX11_ABI 1\n #endif\n \n+#include <bits/largefile-config.h>\n #include <experimental/filesystem>\n \n #ifndef _GLIBCXX_HAVE_DIRENT_H"}, {"sha": "8687fcdc297c8cfff070458c1909ad642f0159c4", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2fc115875e063ec6eb2af2a9634e018a83ffa3b6/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=2fc115875e063ec6eb2af2a9634e018a83ffa3b6", "patch": "@@ -28,6 +28,7 @@\n # define NEED_DO_SPACE\n #endif\n \n+#include <bits/largefile-config.h>\n #include <experimental/filesystem>\n #include <functional>\n #include <ostream>\n@@ -806,7 +807,7 @@ fs::file_size(const path& p, error_code& ec) noexcept\n     S(const stat_type& st) : type(make_file_type(st)), size(st.st_size) { }\n     S() : type(file_type::not_found) { }\n     file_type type;\n-    size_t size;\n+    uintmax_t size;\n   };\n   auto s = do_stat(p, ec, [](const auto& st) { return S{st}; }, S{});\n   if (s.type == file_type::regular)"}]}