{"sha": "87e3e0c1b502d3cbb316cd32745eb1fc4542a540", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdlM2UwYzFiNTAyZDNjYmIzMTZjZDMyNzQ1ZWIxZmM0NTQyYTU0MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-05T18:37:00Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-05T18:37:00Z"}, "message": "(simplify_rtx, case SUBREG): Don't call force_to_mode.\n\n(simplify_set): Call force_to_mode here.\n\nFrom-SVN: r7216", "tree": {"sha": "d3253a207d9e3b252e59fd090297a29b8aef3417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3253a207d9e3b252e59fd090297a29b8aef3417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87e3e0c1b502d3cbb316cd32745eb1fc4542a540", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3e0c1b502d3cbb316cd32745eb1fc4542a540", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87e3e0c1b502d3cbb316cd32745eb1fc4542a540", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87e3e0c1b502d3cbb316cd32745eb1fc4542a540/comments", "author": null, "committer": null, "parents": [{"sha": "83a24b1d0d7894b76f1ad1e31dd149f2c6a79baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83a24b1d0d7894b76f1ad1e31dd149f2c6a79baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83a24b1d0d7894b76f1ad1e31dd149f2c6a79baf"}], "stats": {"total": 19, "additions": 10, "deletions": 9}, "files": [{"sha": "32010967c50bc5a70013c59ec44c0ebb1a71644c", "filename": "gcc/combine.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87e3e0c1b502d3cbb316cd32745eb1fc4542a540/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87e3e0c1b502d3cbb316cd32745eb1fc4542a540/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=87e3e0c1b502d3cbb316cd32745eb1fc4542a540", "patch": "@@ -3260,16 +3260,10 @@ simplify_rtx (x, op0_mode, last, in_dest)\n \t  && GET_MODE_SIZE (mode) > GET_MODE_SIZE (op0_mode))\n \treturn SUBREG_REG (x);\n \n-      /* If we are narrowing an integral object, we need to see if we can\n-\t simplify the expression for the object knowing that we only need the\n-\t low-order bits.  */\n+      /* Note that we cannot do any narrowing for non-constants since\n+\t we might have been counting on using the fact that some bits were\n+\t zero.  We now do this in the SET.  */\n \n-      if (GET_MODE_CLASS (mode) == MODE_INT\n-\t  && GET_MODE_CLASS (GET_MODE (SUBREG_REG (x))) == MODE_INT\n-\t  && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))\n-\t  && subreg_lowpart_p (x))\n-\treturn force_to_mode (SUBREG_REG (x), mode, GET_MODE_MASK (mode),\n-\t\t\t      NULL_RTX, 0);\n       break;\n \n     case NOT:\n@@ -4201,6 +4195,13 @@ simplify_set (x)\n   if (GET_CODE (dest) == PC && GET_CODE (src) == RETURN)\n     return src;\n \n+  /* Now that we know for sure which bits of SRC we are using, see if we can\n+     simplify the expression for the object knowing that we only need the\n+     low-order bits.  */\n+\n+  if (GET_MODE_CLASS (mode) == MODE_INT)\n+    src = force_to_mode (src, mode, GET_MODE_MASK (mode), NULL_RTX, 0);\n+\n   /* Convert this into a field assignment operation, if possible.  */\n   x = make_field_assignment (x);\n "}]}