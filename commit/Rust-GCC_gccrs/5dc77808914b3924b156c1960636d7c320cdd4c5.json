{"sha": "5dc77808914b3924b156c1960636d7c320cdd4c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjNzc4MDg5MTRiMzkyNGIxNTZjMTk2MDYzNmQ3YzMyMGNkZDRjNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2008-04-06T20:54:32Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2008-04-06T20:54:32Z"}, "message": "avr.h (avr_mega_p): Remove declaration.\n\n\t* config/avr/avr.h (avr_mega_p): Remove declaration.\n\t(AVR_MEGA): Remove macro.\n\t* config/avr/avr.c (avr_mega_p): Remove variable.\n\t(avr_override_options): Remove inicializion of avr_mega_p.\n\tUse AVR_HAVE_JMP_CALL instead of AVR_MEGA.\n\t(print_operand): Use AVR_HAVE_JMP_CALL instead of AVR_MEGA.\n\t(avr_jump_mode): (Ditto.).\n\t(avr_output_progmem_section_asm_op): (Ditto.).\n\t(avr_asm_init_sections): (Ditto.).\n\t(avr_asm_init_sections): (Ditto.).\n\t(avr_rtx_costs): (Ditto.).\n\t* config/avr/avr.md: (Ditto.).\n\t* config/avr/avr.h: Use '__AVR_HAVE_JMP_CALL__' instead of \n\t'__AVR_MEGA__'.\n\nFrom-SVN: r133966", "tree": {"sha": "9ea8e16e1e14b825181bd78914bc9af886b5024e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea8e16e1e14b825181bd78914bc9af886b5024e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc77808914b3924b156c1960636d7c320cdd4c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc77808914b3924b156c1960636d7c320cdd4c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc77808914b3924b156c1960636d7c320cdd4c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc77808914b3924b156c1960636d7c320cdd4c5/comments", "author": null, "committer": null, "parents": [{"sha": "679d963737bf7ed3c3a60feac76a45a12f820a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/679d963737bf7ed3c3a60feac76a45a12f820a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/679d963737bf7ed3c3a60feac76a45a12f820a8e"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "da2f5a7cdf857eb14f9e752da4543a2e05e14dc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dc77808914b3924b156c1960636d7c320cdd4c5", "patch": "@@ -1,3 +1,20 @@\n+2008-04-06  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.h (avr_mega_p): Remove declaration.\n+\t(AVR_MEGA): Remove macro.\n+\t* config/avr/avr.c (avr_mega_p): Remove variable.\n+\t(avr_override_options): Remove inicializion of avr_mega_p.\n+\tUse AVR_HAVE_JMP_CALL instead of AVR_MEGA.\n+\t(print_operand): Use AVR_HAVE_JMP_CALL instead of AVR_MEGA.\n+\t(avr_jump_mode): (Ditto.).\n+\t(avr_output_progmem_section_asm_op): (Ditto.).\n+\t(avr_asm_init_sections): (Ditto.).\n+\t(avr_asm_init_sections): (Ditto.).\n+\t(avr_rtx_costs): (Ditto.).\n+\t* config/avr/avr.md: (Ditto.).\n+\t* config/avr/avr.h: Use '__AVR_HAVE_JMP_CALL__' instead of \n+\t'__AVR_MEGA__'.\n+\n 2008-04-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35842"}, {"sha": "e8e90b773338b9bc8cd50bcc6a32cbfd0a684eb0", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5dc77808914b3924b156c1960636d7c320cdd4c5", "patch": "@@ -105,9 +105,6 @@ const struct base_arch_s *avr_current_arch;\n \n section *progmem_section;\n \n-/* More than 8K of program memory: use \"call\" and \"jmp\".  */\n-int avr_mega_p = 0;\n-\n /* Core have 'MUL*' instructions.  */\n int avr_have_mul_p = 0;\n \n@@ -360,13 +357,13 @@ avr_override_options (void)\n   base = &avr_arch_types[t->arch];\n   avr_asm_only_p = base->asm_only;\n   avr_have_mul_p = base->have_mul;\n-  avr_mega_p = base->have_jmp_call;\n   avr_have_movw_lpmx_p = base->have_movw_lpmx;\n   avr_base_arch_macro = base->macro;\n   avr_extra_arch_macro = t->macro;\n \n   if (optimize && !TARGET_NO_TABLEJUMP)\n-    avr_case_values_threshold = (!AVR_MEGA || TARGET_CALL_PROLOGUES) ? 8 : 17;\n+    avr_case_values_threshold = \n+      (!AVR_HAVE_JMP_CALL || TARGET_CALL_PROLOGUES) ? 8 : 17;\n \n   tmp_reg_rtx  = gen_rtx_REG (QImode, TMP_REGNO);\n   zero_reg_rtx = gen_rtx_REG (QImode, ZERO_REGNO);\n@@ -1148,7 +1145,7 @@ print_operand (FILE *file, rtx x, int code)\n \n   if (code == '~')\n     {\n-      if (!AVR_MEGA)\n+      if (!AVR_HAVE_JMP_CALL)\n \tfputc ('r', file);\n     }\n   else if (code == '!')\n@@ -1323,7 +1320,7 @@ avr_jump_mode (rtx x, rtx insn)\n     return 1;\n   else if (-2046 <= jump_distance && jump_distance <= 2045)\n     return 2;\n-  else if (AVR_MEGA)\n+  else if (AVR_HAVE_JMP_CALL)\n     return 3;\n   \n   return 2;\n@@ -4773,7 +4770,7 @@ avr_output_progmem_section_asm_op (const void *arg ATTRIBUTE_UNUSED)\n {\n   fprintf (asm_out_file,\n \t   \"\\t.section .progmem.gcc_sw_table, \\\"%s\\\", @progbits\\n\",\n-\t   AVR_MEGA ? \"a\" : \"ax\");\n+\t   AVR_HAVE_JMP_CALL ? \"a\" : \"ax\");\n   /* Should already be aligned, this is just to be safe if it isn't.  */\n   fprintf (asm_out_file, \"\\t.p2align 1\\n\");\n }\n@@ -4783,7 +4780,7 @@ avr_output_progmem_section_asm_op (const void *arg ATTRIBUTE_UNUSED)\n static void\n avr_asm_init_sections (void)\n {\n-  progmem_section = get_unnamed_section (AVR_MEGA ? 0 : SECTION_CODE,\n+  progmem_section = get_unnamed_section (AVR_HAVE_JMP_CALL ? 0 : SECTION_CODE,\n \t\t\t\t\t avr_output_progmem_section_asm_op,\n \t\t\t\t\t NULL);\n   readonly_data_section = data_section;\n@@ -5068,7 +5065,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  if (AVR_HAVE_MUL)\n \t    *total = COSTS_N_INSNS (optimize_size ? 3 : 4);\n \t  else if (optimize_size)\n-\t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+\t    *total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n \t  else\n \t    return false;\n \t  break;\n@@ -5077,7 +5074,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n \t  if (AVR_HAVE_MUL)\n \t    *total = COSTS_N_INSNS (optimize_size ? 7 : 10);\n \t  else if (optimize_size)\n-\t    *total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+\t    *total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n \t  else\n \t    return false;\n \t  break;\n@@ -5094,7 +5091,7 @@ avr_rtx_costs (rtx x, int code, int outer_code ATTRIBUTE_UNUSED, int *total)\n     case UDIV:\n     case UMOD:\n       if (optimize_size)\n-\t*total = COSTS_N_INSNS (AVR_MEGA ? 2 : 1);\n+\t*total = COSTS_N_INSNS (AVR_HAVE_JMP_CALL ? 2 : 1);\n       else\n \treturn false;\n       *total += avr_operand_rtx_cost (XEXP (x, 0), mode, code);"}, {"sha": "373e9d6991eaa2dd3404fefd19f477a4f7bc766a", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=5dc77808914b3924b156c1960636d7c320cdd4c5", "patch": "@@ -96,15 +96,13 @@ extern const struct base_arch_s *avr_current_arch;\n \n extern const char *avr_base_arch_macro;\n extern const char *avr_extra_arch_macro;\n-extern int avr_mega_p;\n extern int avr_have_mul_p;\n extern int avr_asm_only_p;\n extern int avr_have_movw_lpmx_p;\n #if !defined(IN_LIBGCC2) && !defined(IN_TARGET_LIBS)\n extern GTY(()) section *progmem_section;\n #endif\n \n-#define AVR_MEGA (avr_mega_p && !TARGET_SHORT_CALLS)\n #define AVR_HAVE_JMP_CALL (avr_current_arch->have_jmp_call && !TARGET_SHORT_CALLS)\n #define AVR_HAVE_MUL (avr_have_mul_p)\n #define AVR_HAVE_MOVW (avr_have_movw_lpmx_p)"}, {"sha": "922c4af21368a591c1b65ceaec3d08edd42e4a14", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=5dc77808914b3924b156c1960636d7c320cdd4c5", "patch": "@@ -31,7 +31,7 @@\n ;;  o  Displacement for (mem (plus (reg) (const_int))) operands.\n ;;  p  POST_INC or PRE_DEC address as a pointer (X, Y, Z)\n ;;  r  POST_INC or PRE_DEC address as a register (r26, r28, r30)\n-;;  ~  Output 'r' if not AVR_MEGA.\n+;;  ~  Output 'r' if not AVR_HAVE_JMP_CALL.\n ;;  !  Output 'e' if AVR_HAVE_EIJMP_EICALL.\n \n ;; UNSPEC usage:\n@@ -74,7 +74,7 @@\n \t\t       (const_string \"no\"))))\n \n (define_attr \"mcu_mega\" \"yes,no\"\n-  (const (if_then_else (symbol_ref \"AVR_MEGA\")\n+  (const (if_then_else (symbol_ref \"AVR_HAVE_JMP_CALL\")\n \t\t       (const_string \"yes\")\n \t\t       (const_string \"no\"))))\n   \n@@ -2260,7 +2260,7 @@\n         (label_ref (match_operand 0 \"\" \"\")))]\n   \"\"\n   \"*{\n-  if (AVR_MEGA && get_attr_length (insn) != 1)\n+  if (AVR_HAVE_JMP_CALL && get_attr_length (insn) != 1)\n     return AS1 (jmp,%0);\n   return AS1 (rjmp,%0);\n }\"\n@@ -2412,7 +2412,7 @@\n \t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"AVR_MEGA && TARGET_CALL_PROLOGUES\"\n+  \"AVR_HAVE_JMP_CALL && TARGET_CALL_PROLOGUES\"\n   \"jmp __tablejump2__\"\n   [(set_attr \"length\" \"2\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -2422,7 +2422,7 @@\n \t\t\tUNSPEC_INDEX_JMP))\n    (use (label_ref (match_operand 1 \"\" \"\")))\n    (clobber (match_dup 0))]\n-  \"AVR_MEGA && AVR_HAVE_LPMX\"\n+  \"AVR_HAVE_JMP_CALL && AVR_HAVE_LPMX\"\n   \"lsl r30\n \trol r31\n \tlpm __tmp_reg__,Z+"}, {"sha": "a63b26aa50629fbc8dad0db33e260c06e00f586b", "filename": "gcc/config/avr/libgcc.S", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Flibgcc.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc77808914b3924b156c1960636d7c320cdd4c5/gcc%2Fconfig%2Favr%2Flibgcc.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Flibgcc.S?ref=5dc77808914b3924b156c1960636d7c320cdd4c5", "patch": "@@ -784,7 +784,7 @@ __do_clear_bss:\n /* __do_global_ctors and __do_global_dtors are only necessary\n    if there are any constructors/destructors.  */\n \n-#if defined (__AVR_MEGA__)\n+#if defined (__AVR_HAVE_JMP_CALL__)\n #define XCALL call\n #else\n #define XCALL rcall"}]}