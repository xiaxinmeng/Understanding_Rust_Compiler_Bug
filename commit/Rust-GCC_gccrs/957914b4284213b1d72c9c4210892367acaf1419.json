{"sha": "957914b4284213b1d72c9c4210892367acaf1419", "node_id": "C_kwDOANBUbNoAKDk1NzkxNGI0Mjg0MjEzYjFkNzJjOWM0MjEwODkyMzY3YWNhZjE0MTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-03T09:29:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-03T09:29:34Z"}, "message": "Merge #1290 #1291 #1294\n\n1290: Reformat copyright header in rust-parse-impl.h r=philberty a=philberty\n\n\n\n1291: Fix bad impl item overlap check r=philberty a=philberty\n\nThis issue here was the equality checks for reference\r\nand pointer types did not check the mutability.\r\n    \r\nFixes #1289\n\n1294: Add new mappings for items within a module r=philberty a=philberty\n\nThis patch adds two new interfaces to the mappings class.\r\n\r\n  - Lookup the child items within a module\r\n  - Lookup the parent module id from the child item id\r\n\r\nEach of these API's are going to be required so that we can resolve two new\r\ntypes of path segment:\r\n\r\n  super::foo::bar\r\n\r\nWhere we need to be able to lookup the super module node id from the\r\ncurrent scope node id. To then lookup the children within that scope. The\r\nother path is simpler such as: crate::foo::bar. Where we lookup the items\r\nwithin the current Crate NodeId and follow on as normal.\r\n\r\nAddresses #1227\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "5e4ff911f6d4682bb886f574eca437955c462b08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e4ff911f6d4682bb886f574eca437955c462b08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/957914b4284213b1d72c9c4210892367acaf1419", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimdR+CRBK7hj4Ov3rIwAAOR4IAKyEN8ftvepmmOyPWR3KtvWx\ntuKb9xhnkJeR2Vp03GyYoNp1+PP6/BkiDiEnQswD3uCdWRMZQz9Mt9QPBssHgssF\n6CryngcuHxBfb0JgjLAVRctBSofAoxDfDcqM1vR3/QPtep82MIV4xdpERd50Bw3k\nvH0iTPdzUJ7qVG48v1873cYiZ3l042vhKV2bJ9LFXerjv24D+aSg6Paq99JbmT+2\nYN/T9xFZgzb630z1V8mnlT16VkABNWAfGFlSrs/Xnmryqw51uXggcwXcWFXzoSty\nZi09i04OxuWSMGGeRTaKd+BWE3qUMPFwfcoCcVqHsiKWSsuuFOnQAn7FM/lOf00=\n=d053\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e4ff911f6d4682bb886f574eca437955c462b08\nparent 664bd46f4cfff6e1864b674d6ec6a10b2985104c\nparent fb2fc585fdcc2dd4f3e5ac0c3a895b33e8213c53\nparent a89eb96d79ec3d001579fca8e4bead46080bba7d\nparent 8d1f5f99484f2b79439b86dca7123eb0260776d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1654248574 +0000\ncommitter GitHub <noreply@github.com> 1654248574 +0000\n\nMerge #1290 #1291 #1294\n\n1290: Reformat copyright header in rust-parse-impl.h r=philberty a=philberty\n\n\n\n1291: Fix bad impl item overlap check r=philberty a=philberty\n\nThis issue here was the equality checks for reference\r\nand pointer types did not check the mutability.\r\n    \r\nFixes #1289\n\n1294: Add new mappings for items within a module r=philberty a=philberty\n\nThis patch adds two new interfaces to the mappings class.\r\n\r\n  - Lookup the child items within a module\r\n  - Lookup the parent module id from the child item id\r\n\r\nEach of these API's are going to be required so that we can resolve two new\r\ntypes of path segment:\r\n\r\n  super::foo::bar\r\n\r\nWhere we need to be able to lookup the super module node id from the\r\ncurrent scope node id. To then lookup the children within that scope. The\r\nother path is simpler such as: crate::foo::bar. Where we lookup the items\r\nwithin the current Crate NodeId and follow on as normal.\r\n\r\nAddresses #1227\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/957914b4284213b1d72c9c4210892367acaf1419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/957914b4284213b1d72c9c4210892367acaf1419/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "664bd46f4cfff6e1864b674d6ec6a10b2985104c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/664bd46f4cfff6e1864b674d6ec6a10b2985104c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/664bd46f4cfff6e1864b674d6ec6a10b2985104c"}, {"sha": "fb2fc585fdcc2dd4f3e5ac0c3a895b33e8213c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb2fc585fdcc2dd4f3e5ac0c3a895b33e8213c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb2fc585fdcc2dd4f3e5ac0c3a895b33e8213c53"}, {"sha": "a89eb96d79ec3d001579fca8e4bead46080bba7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a89eb96d79ec3d001579fca8e4bead46080bba7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a89eb96d79ec3d001579fca8e4bead46080bba7d"}, {"sha": "8d1f5f99484f2b79439b86dca7123eb0260776d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d1f5f99484f2b79439b86dca7123eb0260776d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d1f5f99484f2b79439b86dca7123eb0260776d7"}], "stats": {"total": 145, "additions": 133, "deletions": 12}, "files": [{"sha": "dfd393e6a2d726f09e62bdd7b3b14c4c9b5ba762", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -1,18 +1,20 @@\n-/* This file is part of GCC.\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n \n-GCC is free software; you can redistribute it and/or modify\n-it under the terms of the GNU General Public License as published by\n-the Free Software Foundation; either version 3, or (at your option)\n-any later version.\n+// This file is part of GCC.\n \n-GCC is distributed in the hope that it will be useful,\n-but WITHOUT ANY WARRANTY; without even the implied warranty of\n-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-GNU General Public License for more details.\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n \n-You should have received a copy of the GNU General Public License\n-along with GCC; see the file COPYING3.  If not see\n-<http://www.gnu.org/licenses/>. */\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n \n /* Template implementation for Rust::Parser. Previously in rust-parse.cc (before\n  * Parser was template). Separated from rust-parse.h for readability. */"}, {"sha": "8d4e12b0616d747991d98bf17004dd28ddbc0d39", "filename": "gcc/rust/resolve/rust-ast-resolve-toplevel.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-toplevel.h?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -41,6 +41,8 @@ class ResolveTopLevel : public ResolverBase\n \n     ResolveTopLevel resolver (prefix, canonical_prefix, current_module);\n     item->accept_vis (resolver);\n+    resolver.mappings->insert_child_item_to_parent_module_mapping (\n+      item->get_node_id (), current_module);\n   };\n \n   void visit (AST::Module &module) override\n@@ -62,6 +64,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{module.get_node_id (),\n \t\t\t\t\t\tmodule.get_node_id ()});\n \n+    mappings->insert_module_child_item (current_module, mod);\n     mappings->insert_module_child (current_module, module.get_node_id ());\n \n     for (auto &item : module.get_items ())\n@@ -86,6 +89,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, talias);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     alias.get_node_id (), cpath);\n   }\n@@ -105,6 +109,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n   }\n@@ -127,6 +132,7 @@ class ResolveTopLevel : public ResolverBase\n     for (auto &variant : enum_decl.get_variants ())\n       ResolveTopLevel::go (variant.get (), path, cpath, current_module);\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     enum_decl.get_node_id (), cpath);\n   }\n@@ -146,6 +152,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     item.get_node_id (), cpath);\n   }\n@@ -222,6 +229,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     struct_decl.get_node_id (), cpath);\n   }\n@@ -241,6 +249,7 @@ class ResolveTopLevel : public ResolverBase\n \trust_error_at (r, \"redefined multiple times\");\n       });\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     union_decl.get_node_id (), cpath);\n   }\n@@ -264,6 +273,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\t\tvar.get_node_id ()});\n     resolver->mark_decl_mutability (var.get_node_id (), var.is_mutable ());\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     var.get_node_id (), cpath);\n   }\n@@ -285,6 +295,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t     Definition{constant.get_node_id (),\n \t\t\t\t\t\tconstant.get_node_id ()});\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     constant.get_node_id (), cpath);\n   }\n@@ -314,6 +325,7 @@ class ResolveTopLevel : public ResolverBase\n \t\t\t\t\tfunction.get_node_id ());\n       }\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     function.get_node_id (), cpath);\n   }\n@@ -391,6 +403,7 @@ class ResolveTopLevel : public ResolverBase\n     for (auto &item : trait.get_trait_items ())\n       ResolveTopLevelTraitItems::go (item.get (), path, cpath);\n \n+    mappings->insert_module_child_item (current_module, decl);\n     mappings->insert_canonical_path (mappings->get_current_crate (),\n \t\t\t\t     trait.get_node_id (), cpath);\n   }"}, {"sha": "c509d9b845b400dc4770f27da9e4da8eb0eb0e17", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -2441,6 +2441,9 @@ ReferenceType::is_equal (const BaseType &other) const\n     return false;\n \n   auto other2 = static_cast<const ReferenceType &> (other);\n+  if (mutability () != other2.mutability ())\n+    return false;\n+\n   return get_base ()->is_equal (*other2.get_base ());\n }\n \n@@ -2535,6 +2538,9 @@ PointerType::is_equal (const BaseType &other) const\n     return false;\n \n   auto other2 = static_cast<const PointerType &> (other);\n+  if (mutability () != other2.mutability ())\n+    return false;\n+\n   return get_base ()->is_equal (*other2.get_base ());\n }\n "}, {"sha": "f9932a4705ed096c3e930e3d1c4d12e4cd26e51f", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -884,5 +884,46 @@ Mappings::lookup_module_children (NodeId module)\n   return Optional<std::vector<NodeId> &>::some (it->second);\n }\n \n+void\n+Mappings::insert_module_child_item (NodeId module,\n+\t\t\t\t    Resolver::CanonicalPath child)\n+{\n+  rust_assert (!child.is_empty ());\n+  rust_assert (child.get_node_id () != UNKNOWN_NODEID);\n+\n+  auto it = module_child_items.find (module);\n+  if (it == module_child_items.end ())\n+    module_child_items.insert ({module, {child}});\n+  else\n+    it->second.emplace_back (child);\n+}\n+\n+Optional<std::vector<Resolver::CanonicalPath> &>\n+Mappings::lookup_module_chidren_items (NodeId module)\n+{\n+  auto it = module_child_items.find (module);\n+  if (it == module_child_items.end ())\n+    return Optional<std::vector<Resolver::CanonicalPath> &>::none ();\n+\n+  return Optional<std::vector<Resolver::CanonicalPath> &>::some (it->second);\n+}\n+\n+void\n+Mappings::insert_child_item_to_parent_module_mapping (NodeId child_item,\n+\t\t\t\t\t\t      NodeId parent_module)\n+{\n+  child_to_parent_module_map.insert ({child_item, parent_module});\n+}\n+\n+Optional<NodeId>\n+Mappings::lookup_parent_module (NodeId child_item)\n+{\n+  auto it = child_to_parent_module_map.find (child_item);\n+  if (it == child_to_parent_module_map.end ())\n+    return Optional<NodeId>::none ();\n+\n+  return Optional<NodeId>::some (it->second);\n+}\n+\n } // namespace Analysis\n } // namespace Rust"}, {"sha": "a48d4beace7bae569928252865a1f2aa87cba574", "filename": "gcc/rust/util/rust-hir-map.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-hir-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-hir-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.h?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -326,6 +326,14 @@ class Mappings\n   void insert_module_child (NodeId module, NodeId child);\n   Optional<std::vector<NodeId> &> lookup_module_children (NodeId module);\n \n+  void insert_module_child_item (NodeId module, Resolver::CanonicalPath item);\n+  Optional<std::vector<Resolver::CanonicalPath> &>\n+  lookup_module_chidren_items (NodeId module);\n+\n+  void insert_child_item_to_parent_module_mapping (NodeId child_item,\n+\t\t\t\t\t\t   NodeId parent_module);\n+  Optional<NodeId> lookup_parent_module (NodeId child_item);\n+\n private:\n   Mappings ();\n \n@@ -396,6 +404,8 @@ class Mappings\n \n   // Maps each module's node id to a list of its children\n   std::map<NodeId, std::vector<NodeId>> module_child_map;\n+  std::map<NodeId, std::vector<Resolver::CanonicalPath>> module_child_items;\n+  std::map<NodeId, NodeId> child_to_parent_module_map;\n };\n \n } // namespace Analysis"}, {"sha": "9d1ee900aeccaf74847c14007af63ba3bd0f3e70", "filename": "gcc/rust/util/rust-lang-item.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-lang-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Frust%2Futil%2Frust-lang-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-lang-item.h?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -70,6 +70,7 @@ class RustLangItem\n \n     // https://github.com/rust-lang/rust/blob/master/library/core/src/ptr/const_ptr.rs\n     CONST_PTR,\n+    MUT_PTR,\n     CONST_SLICE_PTR,\n \n     UNKNOWN,\n@@ -209,6 +210,10 @@ class RustLangItem\n       {\n \treturn ItemType::CONST_PTR;\n       }\n+    else if (item.compare (\"mut_ptr\") == 0)\n+      {\n+\treturn ItemType::MUT_PTR;\n+      }\n     else if (item.compare (\"const_slice_ptr\") == 0)\n       {\n \treturn ItemType::CONST_SLICE_PTR;\n@@ -287,6 +292,8 @@ class RustLangItem\n \treturn \"RangeToInclusive\";\n       case CONST_PTR:\n \treturn \"const_ptr\";\n+      case MUT_PTR:\n+\treturn \"mut_ptr\";\n       case CONST_SLICE_PTR:\n \treturn \"const_slice_ptr\";\n "}, {"sha": "8634f1d7e4efff2a639a09d30483280ab3f9aaeb", "filename": "gcc/testsuite/rust/compile/issue-1289.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/957914b4284213b1d72c9c4210892367acaf1419/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fissue-1289.rs?ref=957914b4284213b1d72c9c4210892367acaf1419", "patch": "@@ -0,0 +1,42 @@\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+mod intrinsics {\n+    extern \"rust-intrinsic\" {\n+        pub fn offset<T>(dst: *const T, offset: isize) -> *const T;\n+    }\n+}\n+\n+#[lang = \"mut_ptr\"]\n+impl<T> *mut T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+#[lang = \"const_ptr\"]\n+impl<T> *const T {\n+    pub const unsafe fn offset(self, count: isize) -> *mut T {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { intrinsics::offset(self, count) as *mut T }\n+    }\n+\n+    pub const unsafe fn add(self, count: usize) -> Self {\n+        // { dg-warning \"associated function is never used\" \"\" { target *-*-* } .-1 }\n+        unsafe { self.offset(count as isize) }\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a: *mut _ = &mut 123;\n+    unsafe {\n+        let _b = a.add(123);\n+    }\n+\n+    0\n+}"}]}