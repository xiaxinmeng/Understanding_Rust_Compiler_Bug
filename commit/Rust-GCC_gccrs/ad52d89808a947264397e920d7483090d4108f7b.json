{"sha": "ad52d89808a947264397e920d7483090d4108f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ1MmQ4OTgwOGE5NDcyNjQzOTdlOTIwZDc0ODMwOTBkNDEwOGY3Yg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-25T15:24:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-25T15:24:38Z"}, "message": "c++: Avoid -Wunused-value false positives on nullptr passed to ellipsis [PR100666]\n\nWhen passing expressions with decltype(nullptr) type with side-effects to\nellipsis, we pass (void *)0 instead, but for the side-effects evaluate them\non the lhs of a COMPOUND_EXPR.  Unfortunately that means we warn about it\nif the expression is a call to nodiscard marked function, even when the\nresult is really used, just needs to be transformed.\n\nFixed by adding a warning_sentinel.\n\n2021-05-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/100666\n\t* call.c (convert_arg_to_ellipsis): For expressions with NULLPTR_TYPE\n\tand side-effects, temporarily disable -Wunused-result warning when\n\tbuilding COMPOUND_EXPR.\n\n\t* g++.dg/cpp1z/nodiscard8.C: New test.\n\t* g++.dg/cpp1z/nodiscard9.C: New test.", "tree": {"sha": "2fdf00fd50be88d58880aed5e5302bdc24c6529e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2fdf00fd50be88d58880aed5e5302bdc24c6529e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad52d89808a947264397e920d7483090d4108f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad52d89808a947264397e920d7483090d4108f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad52d89808a947264397e920d7483090d4108f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad52d89808a947264397e920d7483090d4108f7b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d3707a52d6b8a3054248b4291719150937db309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d3707a52d6b8a3054248b4291719150937db309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d3707a52d6b8a3054248b4291719150937db309"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "3076fe67d5c33b92d6e9feab0604efc959506cee", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ad52d89808a947264397e920d7483090d4108f7b", "patch": "@@ -8178,7 +8178,10 @@ convert_arg_to_ellipsis (tree arg, tsubst_flags_t complain)\n     {\n       arg = mark_rvalue_use (arg);\n       if (TREE_SIDE_EFFECTS (arg))\n-\targ = cp_build_compound_expr (arg, null_pointer_node, complain);\n+\t{\n+\t  warning_sentinel w(warn_unused_result);\n+\t  arg = cp_build_compound_expr (arg, null_pointer_node, complain);\n+\t}\n       else\n \targ = null_pointer_node;\n     }"}, {"sha": "b5096acbea1072760c13c89be4f972de4eaf386e", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard8.C?ref=ad52d89808a947264397e920d7483090d4108f7b", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/100666\n+// { dg-do compile { target c++11 } }\n+\n+[[nodiscard]] decltype(nullptr) bar ();\n+extern void foo (...);\n+template <typename T> void qux (T);\n+\n+void\n+baz ()\n+{\n+  foo (bar ());\t\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  bar ();\t\t// { dg-warning \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  auto x = bar ();\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  qux (bar ());\t\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+}"}, {"sha": "1315ccdbf7c7ea8b2cbcbdbce6b923c19294729a", "filename": "gcc/testsuite/g++.dg/cpp1z/nodiscard9.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad52d89808a947264397e920d7483090d4108f7b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnodiscard9.C?ref=ad52d89808a947264397e920d7483090d4108f7b", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/100666\n+// { dg-do compile { target c++11 } }\n+\n+struct S {};\n+[[nodiscard]] S bar ();\n+struct U { S s; };\n+[[nodiscard]] U corge ();\n+extern void foo (...);\n+template <typename T> void qux (T);\n+\n+void\n+baz ()\n+{\n+  foo (bar ());\t\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  bar ();\t\t// { dg-warning \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  auto x = bar ();\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  qux (bar ());\t\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  foo (corge ());\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  corge ();\t\t// { dg-warning \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  auto y = corge ();\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+  qux (corge ());\t// { dg-bogus \"ignoring return value of '\\[^\\n\\r]*', declared with attribute 'nodiscard'\" }\n+}"}]}