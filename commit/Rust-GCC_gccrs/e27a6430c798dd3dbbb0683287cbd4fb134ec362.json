{"sha": "e27a6430c798dd3dbbb0683287cbd4fb134ec362", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI3YTY0MzBjNzk4ZGQzZGJiYjA2ODMyODdjYmQ0ZmIxMzRlYzM2Mg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-10-30T23:55:46Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-10-30T23:55:46Z"}, "message": "re PR rtl-optimization/58545 (error: unable to find a register to spill in class 'POINTER_REGS')\n\ngcc:\n        PR other/58545\n        * reload1.c (update_eliminables_and_spill): New function, broken\n        out of reload.\n        (reload): Use it.  Check for frame size change after frame\n        size alignment, and call update_eliminables_and_spill first\n        if continue-ing.\ngcc/testsuite:\n        PR other/58545\n        * gcc.target/avr/pr58545.c: New test.\n\nFrom-SVN: r204234", "tree": {"sha": "5c9f15cee17124d1c53762cc0c992f3ca37b151b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c9f15cee17124d1c53762cc0c992f3ca37b151b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e27a6430c798dd3dbbb0683287cbd4fb134ec362", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27a6430c798dd3dbbb0683287cbd4fb134ec362", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e27a6430c798dd3dbbb0683287cbd4fb134ec362", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e27a6430c798dd3dbbb0683287cbd4fb134ec362/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fbdec79172bf97c510d5c436732e120e0f497c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdec79172bf97c510d5c436732e120e0f497c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdec79172bf97c510d5c436732e120e0f497c25"}], "stats": {"total": 110, "additions": 81, "deletions": 29}, "files": [{"sha": "60c58b620963b723086202b5d441d175843921f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e27a6430c798dd3dbbb0683287cbd4fb134ec362", "patch": "@@ -1,3 +1,12 @@\n+2013-10-30  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR other/58545\n+\t* reload1.c (update_eliminables_and_spill): New function, broken\n+\tout of reload.\n+\t(reload): Use it.  Check for frame size change after frame\n+\tsize alignment, and call update_eliminables_and_spill first\n+\tif continue-ing.\n+\n 2013-10-30  Cong Hou  <congh@google.com>\n \n \tPR target/58762"}, {"sha": "204685da31620ec8563128cfb7611269a5fc65cd", "filename": "gcc/reload1.c", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e27a6430c798dd3dbbb0683287cbd4fb134ec362", "patch": "@@ -373,6 +373,7 @@ static void init_eliminable_invariants (rtx, bool);\n static void init_elim_table (void);\n static void free_reg_equiv (void);\n static void update_eliminables (HARD_REG_SET *);\n+static bool update_eliminables_and_spill (void);\n static void elimination_costs_in_insn (rtx);\n static void spill_hard_reg (unsigned int, int);\n static int finish_spills (int);\n@@ -913,9 +914,6 @@ reload (rtx first, int global)\n       if (caller_save_needed)\n \tsetup_save_areas ();\n \n-      /* If we allocated another stack slot, redo elimination bookkeeping.  */\n-      if (something_was_spilled || starting_frame_size != get_frame_size ())\n-\tcontinue;\n       if (starting_frame_size && crtl->stack_alignment_needed)\n \t{\n \t  /* If we have a stack frame, we must align it now.  The\n@@ -927,8 +925,12 @@ reload (rtx first, int global)\n \t     STARTING_FRAME_OFFSET not be already aligned to\n \t     STACK_BOUNDARY.  */\n \t  assign_stack_local (BLKmode, 0, crtl->stack_alignment_needed);\n-\t  if (starting_frame_size != get_frame_size ())\n-\t    continue;\n+\t}\n+      /* If we allocated another stack slot, redo elimination bookkeeping.  */\n+      if (something_was_spilled || starting_frame_size != get_frame_size ())\n+\t{\n+\t  update_eliminables_and_spill ();\n+\t  continue;\n \t}\n \n       if (caller_save_needed)\n@@ -962,30 +964,11 @@ reload (rtx first, int global)\n       else if (!verify_initial_elim_offsets ())\n \tsomething_changed = 1;\n \n-      {\n-\tHARD_REG_SET to_spill;\n-\tCLEAR_HARD_REG_SET (to_spill);\n-\tupdate_eliminables (&to_spill);\n-\tAND_COMPL_HARD_REG_SET (used_spill_regs, to_spill);\n-\n-\tfor (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\t  if (TEST_HARD_REG_BIT (to_spill, i))\n-\t    {\n-\t      spill_hard_reg (i, 1);\n-\t      did_spill = 1;\n-\n-\t      /* Regardless of the state of spills, if we previously had\n-\t\t a register that we thought we could eliminate, but now can\n-\t\t not eliminate, we must run another pass.\n-\n-\t\t Consider pseudos which have an entry in reg_equiv_* which\n-\t\t reference an eliminable register.  We must make another pass\n-\t\t to update reg_equiv_* so that we do not substitute in the\n-\t\t old value from when we thought the elimination could be\n-\t\t performed.  */\n-\t      something_changed = 1;\n-\t    }\n-      }\n+      if (update_eliminables_and_spill ())\n+\t{\n+\t  did_spill = 1;\n+\t  something_changed = 1;\n+\t}\n \n       select_reload_regs ();\n       if (failure)\n@@ -4031,6 +4014,38 @@ update_eliminables (HARD_REG_SET *pset)\n     SET_HARD_REG_BIT (*pset, HARD_FRAME_POINTER_REGNUM);\n }\n \n+/* Call update_eliminables an spill any registers we can't eliminate anymore.\n+   Return true iff a register was spilled.  */\n+\n+static bool\n+update_eliminables_and_spill (void)\n+{\n+  int i;\n+  bool did_spill = false;\n+  HARD_REG_SET to_spill;\n+  CLEAR_HARD_REG_SET (to_spill);\n+  update_eliminables (&to_spill);\n+  AND_COMPL_HARD_REG_SET (used_spill_regs, to_spill);\n+\n+  for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+    if (TEST_HARD_REG_BIT (to_spill, i))\n+      {\n+\tspill_hard_reg (i, 1);\n+\tdid_spill = true;\n+\n+\t/* Regardless of the state of spills, if we previously had\n+\t   a register that we thought we could eliminate, but now can\n+\t   not eliminate, we must run another pass.\n+\n+\t   Consider pseudos which have an entry in reg_equiv_* which\n+\t   reference an eliminable register.  We must make another pass\n+\t   to update reg_equiv_* so that we do not substitute in the\n+\t   old value from when we thought the elimination could be\n+\t   performed.  */\n+      }\n+  return did_spill;\n+}\n+\n /* Return true if X is used as the target register of an elimination.  */\n \n bool"}, {"sha": "23b2a7eed74ebb1dae1399f72b626698c40ec31e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e27a6430c798dd3dbbb0683287cbd4fb134ec362", "patch": "@@ -1,3 +1,8 @@\n+2013-10-30  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\tPR other/58545\n+\t* gcc.target/avr/pr58545.c: New test.\n+\n 2013-10-30  Tobias Burnus  <burnus@net-b.de>\n \n \tRevert:"}, {"sha": "d1b8461f7cf4ed370c339e5727f32b999a895e7c", "filename": "gcc/testsuite/gcc.target/avr/pr58545.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr58545.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e27a6430c798dd3dbbb0683287cbd4fb134ec362/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr58545.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr58545.c?ref=e27a6430c798dd3dbbb0683287cbd4fb134ec362", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mmcu=atmega8\" } */\n+\n+typedef unsigned char uint8_t;\n+typedef unsigned int uint16_t;\n+\n+extern uint8_t f1 (const uint8_t*);\n+extern void f2 (uint8_t*, uint8_t);\n+\n+void func (uint16_t parameter, uint8_t *addr, uint8_t data)\n+{\n+   uint8_t status;\n+\n+   status = f1 (addr + 8);\n+\n+   addr++;\n+\n+   if (*addr == parameter + 8)\n+      *addr = parameter;\n+\n+   f2 (addr, data);\n+   f2 (addr + 8, status + 1);\n+}"}]}