{"sha": "513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTEzZDg2NmQ1YjNiMmI2MmZjZTlhZDkxZmQwMzJhMDJmMTdlZDZlYg==", "commit": {"author": {"name": "Yuri Rumyantsev", "email": "ysrumyan@gmail.com", "date": "2016-07-28T14:19:18Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2016-07-28T14:19:18Z"}, "message": "re PR middle-end/71734 (FAIL: libgomp.fortran/simd4.f90   -O3 -g  execution test)\n\ngcc/\n\n2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/71734\n\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Pass value of safelen\n\tattribute instead of REF_LOOP and use it.\n\t(ref_indep_loop_p_2): Use SAFELEN argument instead of REF_LOOP and\n\tset it for Loops having non-zero safelen attribute.\n\t(ref_indep_loop_p): Pass zero as initial value for safelen.\n\ngcc/testsuite/\n\n2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n\n\tPR tree-optimization/71734\n        * g++.dg/vect/pr70729-nest.cc: New test.\n\nFrom-SVN: r238817", "tree": {"sha": "8f89f1c18b45e9943665ed76b10cb460cd282ba9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f89f1c18b45e9943665ed76b10cb460cd282ba9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/comments", "author": {"login": "ysrumyan", "id": 44425612, "node_id": "MDQ6VXNlcjQ0NDI1NjEy", "avatar_url": "https://avatars.githubusercontent.com/u/44425612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ysrumyan", "html_url": "https://github.com/ysrumyan", "followers_url": "https://api.github.com/users/ysrumyan/followers", "following_url": "https://api.github.com/users/ysrumyan/following{/other_user}", "gists_url": "https://api.github.com/users/ysrumyan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ysrumyan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ysrumyan/subscriptions", "organizations_url": "https://api.github.com/users/ysrumyan/orgs", "repos_url": "https://api.github.com/users/ysrumyan/repos", "events_url": "https://api.github.com/users/ysrumyan/events{/privacy}", "received_events_url": "https://api.github.com/users/ysrumyan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69cd47a17f09ef328b6fbb3c6703cebf13864e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69cd47a17f09ef328b6fbb3c6703cebf13864e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69cd47a17f09ef328b6fbb3c6703cebf13864e95"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "6bd694ab78dea7edc752a6ed7fd01a53be6b46da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "patch": "@@ -1,3 +1,12 @@\n+2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/71734\n+\t* tree-ssa-loop-im.c (ref_indep_loop_p_1): Pass value of safelen\n+\tattribute instead of REF_LOOP and use it.\n+\t(ref_indep_loop_p_2): Use SAFELEN argument instead of REF_LOOP and\n+\tset it for Loops having non-zero safelen attribute.\n+\t(ref_indep_loop_p): Pass zero as initial value for safelen.\n+\n 2016-07-28  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \tPR middle-end/72657"}, {"sha": "1db9f6e563495592447d6784f5ed9c6773b2cf84", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "patch": "@@ -1,3 +1,8 @@\n+2016-07-28  Yuri Rumyantsev  <ysrumyan@gmail.com>\n+\n+\tPR tree-optimization/71734\n+        * g++.dg/vect/pr70729-nest.cc: New test.\n+\n 2016-07-28  Renlin Li  <renlin.li@arm.com>\n \n \tRevert"}, {"sha": "96171e5ec94e6190d556af93bd8b8b406d9a7501", "filename": "gcc/testsuite/g++.dg/vect/pr70729-nest.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fpr70729-nest.cc?ref=513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "patch": "@@ -0,0 +1,79 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-ffast-math -fopenmp-simd\" }\n+// { dg-additional-options \"-msse2\" { target x86_64-*-* i?86-*-* } }\n+\n+inline void* my_alloc (__SIZE_TYPE__ bytes) {void *ptr; __builtin_posix_memalign (&ptr, bytes, 128);}\n+inline void my_free (void* memory) {__builtin_free (memory);}\n+float W[100];\n+\n+template <typename T>\n+class Vec\n+{\n+  const int isize;\n+\tT* data;\n+\n+public:\n+\n+  Vec (int n) : isize (n) {data = (T*)my_alloc (isize*sizeof (T));}\n+  ~Vec () {my_free(data);}\n+\n+  Vec& operator = (const Vec& other)\t\n+    {\n+      if (this != &other)\n+\t__builtin_memcpy (data, other.data, isize*sizeof (T));\n+      return *this;\n+    }\n+\n+  T& operator [] (int i) {return data[i];}\n+  const T& operator [] (int i) const {return data[i];}\n+  T& at (int i)  {return data[i];}\n+  const T& at (int i) const {return data[i];}\n+\n+  operator T* ()  {return data;}\n+  int size () const {return isize;}\n+};\n+\n+template <typename T>                                  \n+class Cl\n+{\n+public:\n+\n+  Cl (int n, int m);\n+  const int N, M;\n+  Vec<T> v_x, v_y;\n+  Vec<int> v_i;\n+  Vec<float> v_z;\n+};\n+\n+struct Ss\n+{\n+    const int S_n, S_m;\n+    Cl<float> v1;\n+    float* C1;\n+    float* C2;\n+    Ss (int n1, int n2): S_n(n1), S_m(n2), v1(n1, n2)\n+      {\n+\tC1 = new float[n1 * 3];\n+\tC2 = new float[n2 * 4]; \n+      }\n+\n+    ~Ss () { delete C1; delete C2;}\n+   void foo (int n);\n+};\n+void Ss::foo (int n)\n+{\n+  float w;\n+  for (int j = 0; j < n; j++)\n+    {\n+      w = W[j];\n+#pragma omp simd\n+      for (int i = 0; i < S_n; i++)\n+\t{\n+\t  float w1 = C2[S_n + i] * w;\n+\t  v1.v_i[i] += (int)w1;\n+\t  C1[S_n + i] += w1;\n+\t}\n+    }\n+}\n+ \n+// { dg-final { scan-tree-dump \"LOOP VECTORIZED\" \"vect\" { target x86_64-*-* i?86-*-* } } }"}, {"sha": "947724bceff3ea8b01fd4b3049ccf339fdde6923", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/513d866d5b3b2b62fce9ad91fd032a02f17ed6eb/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=513d866d5b3b2b62fce9ad91fd032a02f17ed6eb", "patch": "@@ -2113,7 +2113,7 @@ record_dep_loop (struct loop *loop, im_mem_ref *ref, bool stored_p)\n    references in LOOP.  */\n \n static bool\n-ref_indep_loop_p_1 (struct loop *ref_loop, struct loop *loop,\n+ref_indep_loop_p_1 (int safelen, struct loop *loop,\n \t\t    im_mem_ref *ref, bool stored_p)\n {\n   bitmap refs_to_check;\n@@ -2129,12 +2129,12 @@ ref_indep_loop_p_1 (struct loop *ref_loop, struct loop *loop,\n   if (bitmap_bit_p (refs_to_check, UNANALYZABLE_MEM_ID))\n     return false;\n \n-  if (ref_loop->safelen > 1)\n+  if (safelen > 1)\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \t{\n-\t  fprintf (dump_file,\"REF is independent in ref_loop#%d\\n\",\n-\t\t   ref_loop->num);\n+\t  fprintf (dump_file,\"REF is independent due to safelen %d\\n\",\n+\t\t   safelen);\n \t  print_generic_expr (dump_file, ref->mem.ref, TDF_SLIM);\n \t  fprintf (dump_file, \"\\n\");\n \t}\n@@ -2156,7 +2156,7 @@ ref_indep_loop_p_1 (struct loop *ref_loop, struct loop *loop,\n    results.  */\n \n static bool\n-ref_indep_loop_p_2 (struct loop *ref_loop, struct loop *loop,\n+ref_indep_loop_p_2 (int safelen, struct loop *loop,\n \t\t    im_mem_ref *ref, bool stored_p)\n {\n   stored_p |= (ref->stored && bitmap_bit_p (ref->stored, loop->num));\n@@ -2166,15 +2166,18 @@ ref_indep_loop_p_2 (struct loop *ref_loop, struct loop *loop,\n   if (bitmap_bit_p (&ref->dep_loop, LOOP_DEP_BIT (loop->num, stored_p)))\n     return false;\n \n+  if (loop->safelen > safelen)\n+    safelen = loop->safelen;\n+\n   struct loop *inner = loop->inner;\n   while (inner)\n     {\n-      if (!ref_indep_loop_p_2 (ref_loop, inner, ref, stored_p))\n+      if (!ref_indep_loop_p_2 (safelen, inner, ref, stored_p))\n \treturn false;\n       inner = inner->next;\n     }\n \n-  bool indep_p = ref_indep_loop_p_1 (ref_loop, loop, ref, stored_p);\n+  bool indep_p = ref_indep_loop_p_1 (safelen, loop, ref, stored_p);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     fprintf (dump_file, \"Querying dependencies of ref %u in loop %d: %s\\n\",\n@@ -2213,7 +2216,7 @@ ref_indep_loop_p (struct loop *loop, im_mem_ref *ref)\n {\n   gcc_checking_assert (MEM_ANALYZABLE (ref));\n \n-  return ref_indep_loop_p_2 (loop, loop, ref, false);\n+  return ref_indep_loop_p_2 (0, loop, ref, false);\n }\n \n /* Returns true if we can perform store motion of REF from LOOP.  */"}]}