{"sha": "3b641023b36ac88164d64851ee5e45fc365937cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2I2NDEwMjNiMzZhYzg4MTY0ZDY0ODUxZWU1ZTQ1ZmMzNjU5MzdjYw==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2005-07-04T13:27:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-07-04T13:27:32Z"}, "message": "exp_attr.adb (Mod): Evaluate condition expression with checks off, to prevent spurious warnings.\n\n2005-07-04  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_attr.adb (Mod): Evaluate condition expression with checks off,\n\tto prevent spurious warnings.\n\nFrom-SVN: r101577", "tree": {"sha": "101f3dee509d9d4f866608dbae64b745e938791a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/101f3dee509d9d4f866608dbae64b745e938791a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b641023b36ac88164d64851ee5e45fc365937cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b641023b36ac88164d64851ee5e45fc365937cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b641023b36ac88164d64851ee5e45fc365937cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b641023b36ac88164d64851ee5e45fc365937cc/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d9e0a58787285a0753791dd83a5d831bbbc92117", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9e0a58787285a0753791dd83a5d831bbbc92117", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9e0a58787285a0753791dd83a5d831bbbc92117"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "0c43d595207049b960e16d3c62b89400bfe82af5", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b641023b36ac88164d64851ee5e45fc365937cc/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b641023b36ac88164d64851ee5e45fc365937cc/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=3b641023b36ac88164d64851ee5e45fc365937cc", "patch": "@@ -2372,7 +2372,7 @@ package body Exp_Attr is\n                   Right_Opnd => Make_Integer_Literal (Loc, Modv))));\n \n          --  Here we know that the modulus is larger than type'Last of the\n-         --  integer type. There are three possible cases to consider:\n+         --  integer type. There are two cases to consider:\n \n          --    a) The integer value is non-negative. In this case, it is\n          --    returned as the result (since it is less than the modulus).\n@@ -2393,6 +2393,10 @@ package body Exp_Attr is\n          --    Furthermore, (-value - 1) can be expressed as -(value + 1)\n          --    which we can compute using the integer base type.\n \n+         --  Once this is done we analyze the conditional expression without\n+         --  range checks, because we know everything is in range, and we\n+         --  want to prevent spurious warnings on either branch.\n+\n          else\n             Rewrite (N,\n               Make_Conditional_Expression (Loc,\n@@ -2420,7 +2424,7 @@ package body Exp_Attr is\n \n          end if;\n \n-         Analyze_And_Resolve (N, Btyp);\n+         Analyze_And_Resolve (N, Btyp, All_Checks);\n       end Mod_Case;\n \n       -----------"}]}