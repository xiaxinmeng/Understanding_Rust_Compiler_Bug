{"sha": "0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlZTBlZjliMTBkYmYxMDA0NTRmNzkyZjM5NWJkMDZiYzVkZjNiMA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-18T13:52:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-18T13:52:11Z"}, "message": "re PR testsuite/68776 (gcc.dg/vect/vect-widen-mult-const-[su]16.c failures since r226675)\n\n2015-12-18  Richard Biener  <rguenther@suse.de>\n\n\tPR testsuite/68776\n\t* tree-vect-patterns.c (struct vect_recog_func): New.\n\t(vect_vect_recog_func_ptrs): Make an array of function name pairs.\n\t(vect_pattern_recog_1): Print the recognized pattern name.  Return\n\ttrue if a pattern was recognized.\n\t(vect_pattern_recog): Adjust.  Stop iterating over pattern recognition\n\tfunctions on a stmt if a pattern was recognized.\n\n\t* gcc.dg/vect/vect-widen-mult-const-s16.c: Adjust.\n\t* gcc.dg/vect/vect-widen-mult-const-u16.c: Likewise.\n\nFrom-SVN: r231815", "tree": {"sha": "1d66c9a5f8c266d23958ed0591b8399a8418b57f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d66c9a5f8c266d23958ed0591b8399a8418b57f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f12f020c62b9f460febb59053e312f5ff298bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f12f020c62b9f460febb59053e312f5ff298bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f12f020c62b9f460febb59053e312f5ff298bec"}], "stats": {"total": 92, "additions": 56, "deletions": 36}, "files": [{"sha": "d8b4126d79a327471467395140f7c623b17f924c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "patch": "@@ -1,3 +1,13 @@\n+2015-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/68776\n+\t* tree-vect-patterns.c (struct vect_recog_func): New.\n+\t(vect_vect_recog_func_ptrs): Make an array of function name pairs.\n+\t(vect_pattern_recog_1): Print the recognized pattern name.  Return\n+\ttrue if a pattern was recognized.\n+\t(vect_pattern_recog): Adjust.  Stop iterating over pattern recognition\n+\tfunctions on a stmt if a pattern was recognized.\n+\n 2015-12-18  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* ira.c (ira_setup_alts): Move the scan for commutative modifier"}, {"sha": "11c84abbd0162839c5c9fe4e6a756a6934c84ae0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "patch": "@@ -1,3 +1,9 @@\n+2015-12-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR testsuite/68776\n+\t* gcc.dg/vect/vect-widen-mult-const-s16.c: Adjust.\n+\t* gcc.dg/vect/vect-widen-mult-const-u16.c: Likewise.\n+\n 2015-12-18  Dominik Vogt  <vogt@linux.vnet.ibm.com>\n \n \t* gcc.target/s390/litpool-r3-1.c: New test."}, {"sha": "e1c2f17b4e513052126f81fe719ae49aa5261719", "filename": "gcc/testsuite/gcc.dg/vect/vect-widen-mult-const-s16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-s16.c?ref=0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "patch": "@@ -56,5 +56,5 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 2 \"vect\" { target vect_widen_mult_hi_to_si } } } */\n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n-/* { dg-final { scan-tree-dump-times \"pattern recognized\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n+/* { dg-final { scan-tree-dump-times \"widen_mult pattern recognized\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n "}, {"sha": "983a326445ecc696747415b65d1a9eb625f852d2", "filename": "gcc/testsuite/gcc.dg/vect/vect-widen-mult-const-u16.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-widen-mult-const-u16.c?ref=0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "patch": "@@ -73,4 +73,4 @@ int main (void)\n \n /* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 3 \"vect\" { target vect_widen_mult_hi_to_si } } } */\n /* { dg-final { scan-tree-dump-times \"vect_recog_widen_mult_pattern: detected\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n-/* { dg-final { scan-tree-dump-times \"pattern recognized\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */\n+/* { dg-final { scan-tree-dump-times \"widen_mult pattern recognized\" 2 \"vect\" { target vect_widen_mult_hi_to_si_pattern } } } */"}, {"sha": "8deeedcff48934f6dae5869250d73e9af2267ba9", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 38, "deletions": 34, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bee0ef9b10dbf100454f792f395bd06bc5df3b0/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=0bee0ef9b10dbf100454f792f395bd06bc5df3b0", "patch": "@@ -69,21 +69,28 @@ static gimple *vect_recog_mixed_size_cond_pattern (vec<gimple *> *,\n \t\t\t\t\t\t  tree *, tree *);\n static gimple *vect_recog_bool_pattern (vec<gimple *> *, tree *, tree *);\n static gimple *vect_recog_mask_conversion_pattern (vec<gimple *> *, tree *, tree *);\n-static vect_recog_func_ptr vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n-\tvect_recog_widen_mult_pattern,\n-\tvect_recog_widen_sum_pattern,\n-\tvect_recog_dot_prod_pattern,\n-        vect_recog_sad_pattern,\n-\tvect_recog_pow_pattern,\n-\tvect_recog_widen_shift_pattern,\n-\tvect_recog_over_widening_pattern,\n-\tvect_recog_rotate_pattern,\n-\tvect_recog_vector_vector_shift_pattern,\n-\tvect_recog_divmod_pattern,\n-\tvect_recog_mult_pattern,\n-\tvect_recog_mixed_size_cond_pattern,\n-\tvect_recog_bool_pattern,\n-\tvect_recog_mask_conversion_pattern};\n+\n+struct vect_recog_func\n+{\n+  vect_recog_func_ptr fn;\n+  const char *name;\n+};\n+static vect_recog_func vect_vect_recog_func_ptrs[NUM_PATTERNS] = {\n+      { vect_recog_widen_mult_pattern, \"widen_mult\" },\n+      { vect_recog_widen_sum_pattern, \"widen_sum\" },\n+      { vect_recog_dot_prod_pattern, \"dot_prod\" },\n+      { vect_recog_sad_pattern, \"sad\" },\n+      { vect_recog_pow_pattern, \"pow\" },\n+      { vect_recog_widen_shift_pattern, \"widen_shift\" },\n+      { vect_recog_over_widening_pattern, \"over_widening\" },\n+      { vect_recog_rotate_pattern, \"rotate\" },\n+      { vect_recog_vector_vector_shift_pattern, \"vector_vector_shift\" },\n+      {\tvect_recog_divmod_pattern, \"divmod\" },\n+      {\tvect_recog_mult_pattern, \"mult\" },\n+      {\tvect_recog_mixed_size_cond_pattern, \"mixed_size_cond\" },\n+      {\tvect_recog_bool_pattern, \"bool\" },\n+      {\tvect_recog_mask_conversion_pattern, \"mask_conversion\" }\n+};\n \n static inline void\n append_pattern_def_seq (stmt_vec_info stmt_info, gimple *stmt)\n@@ -3791,8 +3798,8 @@ vect_mark_pattern_stmts (gimple *orig_stmt, gimple *pattern_stmt,\n    This function also does some bookkeeping, as explained in the documentation\n    for vect_recog_pattern.  */\n \n-static void\n-vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n+static bool\n+vect_pattern_recog_1 (vect_recog_func *recog_func,\n \t\t      gimple_stmt_iterator si,\n \t\t      vec<gimple *> *stmts_to_replace)\n {\n@@ -3807,9 +3814,9 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n \n   stmts_to_replace->truncate (0);\n   stmts_to_replace->quick_push (stmt);\n-  pattern_stmt = (* vect_recog_func) (stmts_to_replace, &type_in, &type_out);\n+  pattern_stmt = recog_func->fn (stmts_to_replace, &type_in, &type_out);\n   if (!pattern_stmt)\n-    return;\n+    return false;\n \n   stmt = stmts_to_replace->last ();\n   stmt_info = vinfo_for_stmt (stmt);\n@@ -3831,13 +3838,13 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n       /* Check target support  */\n       type_in = get_vectype_for_scalar_type (type_in);\n       if (!type_in)\n-\treturn;\n+\treturn false;\n       if (type_out)\n \ttype_out = get_vectype_for_scalar_type (type_out);\n       else\n \ttype_out = type_in;\n       if (!type_out)\n-\treturn;\n+\treturn false;\n       pattern_vectype = type_out;\n \n       if (is_gimple_assign (pattern_stmt))\n@@ -3853,14 +3860,14 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n       if (!optab\n           || (icode = optab_handler (optab, vec_mode)) == CODE_FOR_nothing\n           || (insn_data[icode].operand[0].mode != TYPE_MODE (type_out)))\n-\treturn;\n+\treturn false;\n     }\n \n   /* Found a vectorizable pattern.  */\n   if (dump_enabled_p ())\n     {\n       dump_printf_loc (MSG_NOTE, vect_location,\n-                       \"pattern recognized: \");\n+                       \"%s pattern recognized: \", recog_func->name);\n       dump_gimple_stmt (MSG_NOTE, TDF_SLIM, pattern_stmt, 0);\n     }\n \n@@ -3892,6 +3899,8 @@ vect_pattern_recog_1 (vect_recog_func_ptr vect_recog_func,\n \n       vect_mark_pattern_stmts (stmt, pattern_stmt, NULL_TREE);\n     }\n+\n+  return true;\n }\n \n \n@@ -3980,7 +3989,6 @@ vect_pattern_recog (vec_info *vinfo)\n   unsigned int nbbs;\n   gimple_stmt_iterator si;\n   unsigned int i, j;\n-  vect_recog_func_ptr vect_recog_func;\n   auto_vec<gimple *, 1> stmts_to_replace;\n   gimple *stmt;\n \n@@ -4003,11 +4011,9 @@ vect_pattern_recog (vec_info *vinfo)\n \t    {\n \t      /* Scan over all generic vect_recog_xxx_pattern functions.  */\n \t      for (j = 0; j < NUM_PATTERNS; j++)\n-\t\t{\n-\t\t  vect_recog_func = vect_vect_recog_func_ptrs[j];\n-\t\t  vect_pattern_recog_1 (vect_recog_func, si,\n-\t\t\t\t\t&stmts_to_replace);\n-\t\t}\n+\t\tif (vect_pattern_recog_1 (&vect_vect_recog_func_ptrs[j], si,\n+\t\t\t\t\t  &stmts_to_replace))\n+\t\t  break;\n \t    }\n \t}\n     }\n@@ -4024,11 +4030,9 @@ vect_pattern_recog (vec_info *vinfo)\n \n \t  /* Scan over all generic vect_recog_xxx_pattern functions.  */\n \t  for (j = 0; j < NUM_PATTERNS; j++)\n-\t    {\n-\t      vect_recog_func = vect_vect_recog_func_ptrs[j];\n-\t      vect_pattern_recog_1 (vect_recog_func, si,\n-\t\t\t\t    &stmts_to_replace);\n-\t    }\n+\t    if (vect_pattern_recog_1 (&vect_vect_recog_func_ptrs[j], si,\n+\t\t\t\t      &stmts_to_replace))\n+\t      break;\n \t}\n     }\n }"}]}