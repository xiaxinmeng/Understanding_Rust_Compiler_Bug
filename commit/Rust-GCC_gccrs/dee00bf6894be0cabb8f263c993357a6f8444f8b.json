{"sha": "dee00bf6894be0cabb8f263c993357a6f8444f8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVlMDBiZjY4OTRiZTBjYWJiOGYyNjNjOTkzMzU3YTZmODQ0NGY4Yg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-08T00:02:18Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-07-08T21:38:49Z"}, "message": "c++: Fix noexcept with unevaluated operand [PR101087]\n\nIt sounds plausible that this assert\n\n  int f();\n  static_assert(noexcept(sizeof(f())));\n\nshould pass: sizeof produces a std::size_t and its operand is not\nevaluated, so it can't throw.  noexcept should only evaluate to\nfalse for potentially evaluated operands.  Therefore I think that\ncheck_noexcept_r shouldn't walk into operands of sizeof/decltype/\nalignof/typeof.\n\n\tPR c++/101087\n\ngcc/cp/ChangeLog:\n\n\t* cp-tree.h (unevaluated_p): New.\n\t* except.c (check_noexcept_r): Use it.  Don't walk into\n\tunevaluated operands.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/noexcept70.C: New test.", "tree": {"sha": "28900c25657b1c8193f3d6491c7b58a5c57806b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28900c25657b1c8193f3d6491c7b58a5c57806b2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dee00bf6894be0cabb8f263c993357a6f8444f8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee00bf6894be0cabb8f263c993357a6f8444f8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dee00bf6894be0cabb8f263c993357a6f8444f8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dee00bf6894be0cabb8f263c993357a6f8444f8b/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b14ac7b29c9a05c94f62fe065c219bbaa83653db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b14ac7b29c9a05c94f62fe065c219bbaa83653db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b14ac7b29c9a05c94f62fe065c219bbaa83653db"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "d4810c0c9869527420c97d74ce6617db02ae02f9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dee00bf6894be0cabb8f263c993357a6f8444f8b", "patch": "@@ -8465,6 +8465,19 @@ is_constrained_auto (const_tree t)\n   return is_auto (t) && PLACEHOLDER_TYPE_CONSTRAINTS_INFO (t);\n }\n \n+/* True if CODE, a tree code, denotes a tree whose operand is not evaluated\n+   as per [expr.context], i.e., an operand to sizeof, typeof, decltype, or\n+   alignof.  */\n+\n+inline bool\n+unevaluated_p (tree_code code)\n+{\n+  return (code == DECLTYPE_TYPE\n+\t  || code == ALIGNOF_EXPR\n+\t  || code == SIZEOF_EXPR\n+\t  || code == NOEXCEPT_EXPR);\n+}\n+\n /* RAII class to push/pop the access scope for T.  */\n \n struct push_access_scope_guard"}, {"sha": "a8acbc4b7b21982894873e58f61faa7b1e6992be", "filename": "gcc/cp/except.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=dee00bf6894be0cabb8f263c993357a6f8444f8b", "patch": "@@ -1033,12 +1033,15 @@ check_handlers (tree handlers)\n      expression whose type is a polymorphic class type (10.3).  */\n \n static tree\n-check_noexcept_r (tree *tp, int * /*walk_subtrees*/, void * /*data*/)\n+check_noexcept_r (tree *tp, int *walk_subtrees, void *)\n {\n   tree t = *tp;\n   enum tree_code code = TREE_CODE (t);\n-  if ((code == CALL_EXPR && CALL_EXPR_FN (t))\n-      || code == AGGR_INIT_EXPR)\n+\n+  if (unevaluated_p (code))\n+    *walk_subtrees = false;\n+  else if ((code == CALL_EXPR && CALL_EXPR_FN (t))\n+\t   || code == AGGR_INIT_EXPR)\n     {\n       /* We can only use the exception specification of the called function\n \t for determining the value of a noexcept expression; we can't use"}, {"sha": "45a6137dd6f9188d375e933b2dcb0dbe9da0e9e7", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept70.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dee00bf6894be0cabb8f263c993357a6f8444f8b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept70.C?ref=dee00bf6894be0cabb8f263c993357a6f8444f8b", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/101087\n+// { dg-do compile { target c++11 } }\n+\n+int f();\n+static_assert(noexcept(sizeof(f())), \"\");"}]}