{"sha": "bd91de63294d20aad1f34417f99fc2b2a5674e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ5MWRlNjMyOTRkMjBhYWQxZjM0NDE3Zjk5ZmMyYjJhNTY3NGU4NA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-06-11T12:05:10Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-06-11T12:05:10Z"}, "message": "* doc/objc.texi: Use more logical markup.  Use TeX dashes.\n\nFrom-SVN: r43182", "tree": {"sha": "9be0b96e5c56ebfa641ef44e56232f49756c75a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9be0b96e5c56ebfa641ef44e56232f49756c75a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd91de63294d20aad1f34417f99fc2b2a5674e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd91de63294d20aad1f34417f99fc2b2a5674e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd91de63294d20aad1f34417f99fc2b2a5674e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd91de63294d20aad1f34417f99fc2b2a5674e84/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c96a7ca3ca36b851d6893e4efad7179c2bb0942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c96a7ca3ca36b851d6893e4efad7179c2bb0942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c96a7ca3ca36b851d6893e4efad7179c2bb0942"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "20948adc2287e1465fa5cbec8a609c3c2ed81e9e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd91de63294d20aad1f34417f99fc2b2a5674e84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd91de63294d20aad1f34417f99fc2b2a5674e84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd91de63294d20aad1f34417f99fc2b2a5674e84", "patch": "@@ -1,3 +1,7 @@\n+2001-06-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* doc/objc.texi: Use more logical markup.  Use TeX dashes.\n+\n 2001-06-11  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* doc/c-tree.texi: Use more logical markup."}, {"sha": "7e0aae12d102094ef9d98bdf73b0f04425893207", "filename": "gcc/doc/objc.texi", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd91de63294d20aad1f34417f99fc2b2a5674e84/gcc%2Fdoc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd91de63294d20aad1f34417f99fc2b2a5674e84/gcc%2Fdoc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fobjc.texi?ref=bd91de63294d20aad1f34417f99fc2b2a5674e84", "patch": "@@ -116,8 +116,8 @@ things:\n you can write whatever C code you like;\n \n @item\n-you can send messages to Objective-C constant strings (@@\"this is a\n-constant string\");\n+you can send messages to Objective-C constant strings (@code{@@\"this is a\n+constant string\"});\n \n @item\n you can allocate and send messages to objects whose class is implemented\n@@ -241,13 +241,13 @@ The non-atomic types are encoded as follows:\n \n @multitable @columnfractions .2 .8\n @item pointers\n-@tab @code{'^'} followed by the pointed type.\n+@tab @samp{^} followed by the pointed type.\n @item arrays\n-@tab @code{'['} followed by the number of elements in the array followed by the type of the elements followed by @code{']'}\n+@tab @samp{[} followed by the number of elements in the array followed by the type of the elements followed by @samp{]}\n @item structures\n-@tab @code{'@{'} followed by the name of the structure (or '?' if the structure is unnamed), the '=' sign, the type of the members and by @code{'@}'}\n+@tab @samp{@{} followed by the name of the structure (or @samp{?} if the structure is unnamed), the @samp{=} sign, the type of the members and by @samp{@}}\n @item unions\n-@tab @code{'('} followed by the name of the structure (or '?' if the union is unnamed), the '=' sign, the type of the members followed by @code{')'}\n+@tab @samp{(} followed by the name of the structure (or @samp{?} if the union is unnamed), the @samp{=} sign, the type of the members followed by @samp{)}\n @end multitable\n \n Here are some types and their encodings, as they are generated by the\n@@ -317,11 +317,11 @@ Boehm-Demers-Weiser conservative garbage collector. It is available from\n @w{@uref{http://www.hpl.hp.com/personal/Hans_Boehm/gc/}}.\n \n To enable the support for it you have to configure the compiler using an\n-additional argument, @w{@kbd{--enable-objc-gc}}. You need to have\n+additional argument, @w{@option{--enable-objc-gc}}. You need to have\n garbage collector installed before building the compiler. This will\n build an additional runtime library which has several enhancements to\n support the garbage collector. The new library has a new name,\n-@kbd{libobjc_gc.a} to not conflict with the non-garbage-collected\n+@file{libobjc_gc.a} to not conflict with the non-garbage-collected\n library.\n \n When the garbage collector is used, the objects are allocated using the\n@@ -331,7 +331,7 @@ where pointers are located inside objects. This information is computed\n once per class, immediately after the class has been initialized.\n \n There is a new runtime function @code{class_ivar_set_gcinvisible()}\n-which can be used to declare a so-called @strong{weak pointer}\n+which can be used to declare a so-called @dfn{weak pointer}\n reference. Such a pointer is basically hidden for the garbage collector;\n this can be useful in certain situations, especially when you want to\n keep track of the allocated objects, yet allow them to be\n@@ -379,7 +379,7 @@ following class does this:\n @end example\n \n Weak pointers are supported through a new type character specifier\n-represented by the @code{'!'} character. The\n+represented by the @samp{!} character. The\n @code{class_ivar_set_gcinvisible()} function adds or removes this\n specifier to the string type description of the instance variable named\n as argument.\n@@ -390,7 +390,7 @@ as argument.\n \n GNU Objective-C provides constant string objects that are generated\n directly by the compiler. You declare a constant string object by\n-prefixing a C constant string with the character @code{@@}:\n+prefixing a C constant string with the character @samp{@@}:\n \n @example\n   id myString = @@\"this is a constant string object\";\n@@ -403,8 +403,8 @@ runtime. To get the definition of this class you must include the\n \n User defined libraries may want to implement their own constant string\n class. To be able to support them, the GNU Objective-C compiler provides\n-a new command line options @code{-fconstant-string-class=<class\n-name>}. The provided class should adhere to a strict structure, the same\n+a new command line options @option{-fconstant-string-class=@var{class-name}}.\n+The provided class should adhere to a strict structure, the same\n as @code{NXConstantString}'s structure:\n \n @example\n@@ -422,7 +422,7 @@ User class libraries may choose to inherit the customized constant\n string class from a different class than @code{Object}. There is no\n requirement in the methods the constant string class has to implement.\n \n-When a file is compiled with the @code{-fconstant-string-class} option,\n+When a file is compiled with the @option{-fconstant-string-class} option,\n all the constant string objects will be instances of the class specified\n as argument to this option. It is possible to have multiple compilation\n units referring to different constant string classes, neither the\n@@ -447,7 +447,7 @@ tells the compiler that each time it encounters @code{WOApplication} as\n a class name, it should replace it with @code{GSWApplication} (that is,\n @code{WOApplication} is just an alias for @code{GSWApplication}).\n \n-There are some constraints on how this can be used -\n+There are some constraints on how this can be used---\n \n @itemize @bullet\n "}]}