{"sha": "6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFjOWQzYTNjM2VkZTBmZDc5OTU0ODgyOWViMDgzNDFkOWM4Yjc4NA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-01T14:21:57Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-01T14:21:57Z"}, "message": "gegenrtl.c: Remove unnecesary prototypes.\n\n\t* gegenrtl.c: Remove unnecesary prototypes.\n\t(gendecl): Remove.\n\t(gendef): Produce static inline.\n\t(gencode): Remove.\n\t(main): Do not decode parameters; generate header only.\n\t* Makefile.in (genrtl.c): Remove.\n\nFrom-SVN: r160108", "tree": {"sha": "2844d8f43e24d1234d11fbc4555e187a55872127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2844d8f43e24d1234d11fbc4555e187a55872127"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/comments", "author": null, "committer": null, "parents": [{"sha": "558c51c59dea8a6d596889350970fb1d6c947d79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558c51c59dea8a6d596889350970fb1d6c947d79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558c51c59dea8a6d596889350970fb1d6c947d79"}], "stats": {"total": 116, "additions": 25, "deletions": 91}, "files": [{"sha": "c1317965b86b7e4ec7aefe2cf87d3cb2bb3bd7f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "patch": "@@ -1,3 +1,12 @@\n+2010-06-01  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gegenrtl.c: Remove unnecesary prototypes.\n+\t(gendecl): Remove.\n+\t(gendef): Produce static inline.\n+\t(gencode): Remove.\n+\t(main): Do not decode parameters; generate header only.\n+\t* Makefile.in (genrtl.c): Remove.\n+\n 2010-06-01  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-switch-conversion.c (build_one_array): Make it readonly."}, {"sha": "bbc4d2aed4d9e0d23aeb2e050396a99555a94b89", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "patch": "@@ -1211,7 +1211,6 @@ OBJS-common = \\\n \tfunction.o \\\n \tfwprop.o \\\n \tgcse.o \\\n-\tgenrtl.o \\\n \tggc-common.o \\\n \tgimple.o \\\n \tgimple-iterator.o \\\n@@ -1469,7 +1468,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  insn-attr.h insn-attrtab.c insn-opinit.c insn-preds.c insn-constants.h \\\n  tm-preds.h tm-constrs.h \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n- genrtl.c genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n+ genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n  xgcc$(exeext) cpp$(exeext) cc1$(exeext) cc1*-dummy$(exeext) $(EXTRA_PASSES) \\\n  $(EXTRA_PARTS) $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(SPECS) collect2$(exeext) lto-wrapper$(exeext) \\\n@@ -3486,8 +3485,6 @@ s-mddeps: $(md_file) $(MD_INCLUDES) build/genmddeps$(build_exeext)\n \t$(STAMP) s-mddeps\n \n # Header dependencies for generated source files.\n-genrtl.o : genrtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H)\t$(RTL_H)\\\n-  $(GGC_H) $(OBSTACK_H)\n insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(SYSTEM_H) coretypes.h\t\\\n   $(TM_H) $(RTL_H) $(REGS_H) output.h $(INSN_ATTR_H)\t\t\t\\\n   insn-config.h $(TOPLEV_H) $(RECOG_H) $(TM_P_H) $(FLAGS_H)\n@@ -3597,16 +3594,10 @@ s-condmd: build/gencondmd$(build_exeext)\n # These files are generated by running the same generator more than\n # once with different options, so they have custom rules.  The\n # stampfile idiom is the same.\n-genrtl.c: s-genrtl; @true\n genrtl.h: s-genrtl-h; @true\n \n-s-genrtl: build/gengenrtl$(build_exeext)\n-\t$(RUN_GEN) build/gengenrtl$(build_exeext) > tmp-genrtl.c\n-\t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.c genrtl.c\n-\t$(STAMP) s-genrtl\n-\n s-genrtl-h: build/gengenrtl$(build_exeext)\n-\t$(RUN_GEN) build/gengenrtl$(build_exeext) -h > tmp-genrtl.h\n+\t$(RUN_GEN) build/gengenrtl$(build_exeext) > tmp-genrtl.h\n \t$(SHELL) $(srcdir)/../move-if-change tmp-genrtl.h genrtl.h\n \t$(STAMP) s-genrtl-h\n "}, {"sha": "afc9709cd6e028c9266745e95fed27816f7d61b6", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 14, "deletions": 80, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ac9d3a3c3ede0fd799548829eb08341d9c8b784/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=6ac9d3a3c3ede0fd799548829eb08341d9c8b784", "patch": "@@ -41,19 +41,6 @@ static const struct rtx_definition defs[] =\n #define NUM_RTX_CODE ARRAY_SIZE(defs)\n \n static const char *formats[NUM_RTX_CODE];\n-\n-static const char *type_from_format\t(int);\n-static const char *accessor_from_format\t(int);\n-static int special_format\t\t(const char *);\n-static int special_rtx\t\t\t(int);\n-static int excluded_rtx\t\t\t(int);\n-static void find_formats\t\t(void);\n-static void gendecl\t\t\t(const char *);\n-static void genmacro\t\t\t(int);\n-static void gendef\t\t\t(const char *);\n-static void genlegend\t\t\t(void);\n-static void genheader\t\t\t(void);\n-static void gencode\t\t\t(void);\n \f\n /* Decode a format letter into a C type string.  */\n \n@@ -178,44 +165,6 @@ find_formats (void)\n     }\n }\n \n-/* Write the declarations for the routine to allocate RTL with FORMAT.  */\n-\n-static void\n-gendecl (const char *format)\n-{\n-  const char *p;\n-  int i, pos;\n-\n-  printf (\"extern rtx gen_rtx_fmt_%s_stat\\t (RTX_CODE, \", format);\n-  printf (\"enum machine_mode mode\");\n-\n-  /* Write each parameter that is needed and start a new line when the line\n-     would overflow.  */\n-  for (p = format, i = 0, pos = 75; *p != 0; p++)\n-    if (*p != '0')\n-      {\n-\tint ourlen = strlen (type_from_format (*p)) + 6 + (i > 9);\n-\n-\tprintf (\",\");\n-\tif (pos + ourlen > 76)\n-\t  printf (\"\\n\\t\\t\\t\\t      \"), pos = 39;\n-\n-\tprintf (\" %sarg%d\", type_from_format (*p), i++);\n-\tpos += ourlen;\n-      }\n-  printf (\" MEM_STAT_DECL\");\n-\n-  printf (\");\\n\");\n-  printf (\"#define gen_rtx_fmt_%s(c, m\", format);\n-  for (p = format, i = 0; *p != 0; p++)\n-    if (*p != '0')\n-      printf (\", p%i\",i++);\n-  printf (\")\\\\\\n        gen_rtx_fmt_%s_stat (c, m\", format);\n-  for (p = format, i = 0; *p != 0; p++)\n-    if (*p != '0')\n-      printf (\", p%i\",i++);\n-  printf (\" MEM_STAT_INFO)\\n\\n\");\n-}\n \n /* Generate macros to generate RTL of code IDX using the functions we\n    write.  */\n@@ -262,7 +211,7 @@ gendef (const char *format)\n   /* Start by writing the definition of the function name and the types\n      of the arguments.  */\n \n-  printf (\"rtx\\ngen_rtx_fmt_%s_stat (RTX_CODE code, enum machine_mode mode\", format);\n+  printf (\"static inline rtx\\ngen_rtx_fmt_%s_stat (RTX_CODE code, enum machine_mode mode\", format);\n   for (p = format, i = 0; *p != 0; p++)\n     if (*p != '0')\n       printf (\",\\n\\t%sarg%d\", type_from_format (*p), i++);\n@@ -284,6 +233,15 @@ gendef (const char *format)\n       printf (\"  X0EXP (rt, %d) = NULL_RTX;\\n\", i);\n \n   puts (\"\\n  return rt;\\n}\\n\");\n+  printf (\"#define gen_rtx_fmt_%s(c, m\", format);\n+  for (p = format, i = 0; *p != 0; p++)\n+    if (*p != '0')\n+      printf (\", p%i\",i++);\n+  printf (\")\\\\\\n        gen_rtx_fmt_%s_stat (c, m\", format);\n+  for (p = format, i = 0; *p != 0; p++)\n+    if (*p != '0')\n+      printf (\", p%i\",i++);\n+  printf (\" MEM_STAT_INFO)\\n\\n\");\n }\n \n /* Generate the documentation header for files we write.  */\n@@ -307,7 +265,7 @@ genheader (void)\n   puts (\"#include \\\"statistics.h\\\"\\n\");\n \n   for (fmt = formats; *fmt; ++fmt)\n-    gendecl (*fmt);\n+    gendef (*fmt);\n \n   putchar ('\\n');\n \n@@ -318,39 +276,15 @@ genheader (void)\n   puts (\"\\n#endif /* GCC_GENRTL_H */\");\n }\n \n-/* Generate the text of the code file we write, genrtl.c.  */\n-\n-static void\n-gencode (void)\n-{\n-  const char **fmt;\n-\n-  puts (\"#include \\\"config.h\\\"\");\n-  puts (\"#include \\\"system.h\\\"\");\n-  puts (\"#include \\\"coretypes.h\\\"\");\n-  puts (\"#include \\\"tm.h\\\"\");\n-  puts (\"#include \\\"obstack.h\\\"\");\n-  puts (\"#include \\\"rtl.h\\\"\");\n-  puts (\"#include \\\"ggc.h\\\"\\n\");\n-\n-  for (fmt = formats; *fmt != 0; fmt++)\n-    gendef (*fmt);\n-}\n-\n-/* This is the main program.  We accept only one argument, \"-h\", which\n-   says we are writing the genrtl.h file.  Otherwise we are writing the\n-   genrtl.c file.  */\n+/* This is the main program.  */\n \n int\n-main (int argc, char **argv)\n+main (void)\n {\n   find_formats ();\n   genlegend ();\n \n-  if (argc == 2 && argv[1][0] == '-' && argv[1][1] == 'h')\n-    genheader ();\n-  else\n-    gencode ();\n+  genheader ();\n \n   if (ferror (stdout) || fflush (stdout) || fclose (stdout))\n     return FATAL_EXIT_CODE;"}]}