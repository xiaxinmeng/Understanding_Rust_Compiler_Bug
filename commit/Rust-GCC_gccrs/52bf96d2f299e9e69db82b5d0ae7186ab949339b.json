{"sha": "52bf96d2f299e9e69db82b5d0ae7186ab949339b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJiZjk2ZDJmMjk5ZTllNjlkYjgyYjVkMGFlNzE4NmFiOTQ5MzM5Yg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2007-03-06T18:57:27Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2007-03-06T18:57:27Z"}, "message": "errors.h (warning, [...]): Mark as cold.\n\n\t* errors.h (warning, error, fatal, internal_error): Mark as cold.\n\t* predict.c (maybe_hot_bb): Cold functions are never hot; hot functions\n\tare hot.\n\t(probably_cold_bb_p): Cold functions are cold.\n\t(probably_never_executed_bb_p): Cold functions are cold.\n\t(tree_bb_level_predictions): Predict calls to cold functions as not\n\ttaken.\n\t(compute_function_frequency): Check hot/cold attributes.\n\t* function.h (function_frequency): Update comments.\n\t* predict.def (PRED_COLD_FUNCTION): Predict cold function.\n\t* c-common.c (handle_hot_attribute, handle_cold_attribute): New.\n\t(c_common_att): Add cold and hot.\n\n\t* doc/extend.texi (hot,cold attributes): Document.\n\t\n\t* ansidecl.h (ATTRIBUTE_COLD, ATTRIBUTE_HOT): New.\n\nFrom-SVN: r122632", "tree": {"sha": "6db0f16a08d3e0f5d8feea8a59bd2d27420fa52d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6db0f16a08d3e0f5d8feea8a59bd2d27420fa52d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52bf96d2f299e9e69db82b5d0ae7186ab949339b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52bf96d2f299e9e69db82b5d0ae7186ab949339b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52bf96d2f299e9e69db82b5d0ae7186ab949339b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52bf96d2f299e9e69db82b5d0ae7186ab949339b/comments", "author": null, "committer": null, "parents": [{"sha": "20f326d7103a4d9d821a54ad5fa030c8a9aa2478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f326d7103a4d9d821a54ad5fa030c8a9aa2478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f326d7103a4d9d821a54ad5fa030c8a9aa2478"}], "stats": {"total": 180, "additions": 169, "deletions": 11}, "files": [{"sha": "125b6fff9d7021c454f0299eeeab03a77e0514dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -1,3 +1,20 @@\n+2007-03-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* errors.h (warning, error, fatal, internal_error): Mark as cold.\n+\t* predict.c (maybe_hot_bb): Cold functions are never hot; hot functions\n+\tare hot.\n+\t(probably_cold_bb_p): Cold functions are cold.\n+\t(probably_never_executed_bb_p): Cold functions are cold.\n+\t(tree_bb_level_predictions): Predict calls to cold functions as not\n+\ttaken.\n+\t(compute_function_frequency): Check hot/cold attributes.\n+\t* function.h (function_frequency): Update comments.\n+\t* predict.def (PRED_COLD_FUNCTION): Predict cold function.\n+\t* c-common.c (handle_hot_attribute, handle_cold_attribute): New.\n+\t(c_common_att): Add cold and hot.\n+\n+\t* doc/extend.texi (hot,cold attributes): Document.\n+\n 2007-03-06  Andrew Haley  <aph@redhat.com>\n \n \t* function.c (expand_function_end): Move blockage to just after we"}, {"sha": "db64da59c03f41a875f2b1436d1c55404898e6fc", "filename": "gcc/c-common.c", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -511,6 +511,8 @@ static tree handle_packed_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nocommon_attribute (tree *, tree, tree, int, bool *);\n static tree handle_common_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_hot_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_cold_attribute (tree *, tree, tree, int, bool *);\n static tree handle_noinline_attribute (tree *, tree, tree, int, bool *);\n static tree handle_always_inline_attribute (tree *, tree, tree, int,\n \t\t\t\t\t    bool *);\n@@ -648,6 +650,10 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_warn_unused_result_attribute },\n   { \"sentinel\",               0, 1, false, true, true,\n \t\t\t      handle_sentinel_attribute },\n+  { \"cold\",                   0, 0, true,  false, false,\n+\t\t\t      handle_cold_attribute },\n+  { \"hot\",                    0, 0, true,  false, false,\n+\t\t\t      handle_hot_attribute },\n   { NULL,                     0, 0, false, false, false, NULL }\n };\n \n@@ -4432,6 +4438,59 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   return NULL_TREE;\n }\n \n+/* Handle a \"hot\" and attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_hot_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t  int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (*node)) != NULL)\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute conflicts with attribute %s\",\n+\t\t   name, \"cold\");\n+\t  *no_add_attrs = true;\n+\t}\n+      /* Do nothing else, just set the attribute.  We'll get at\n+\t it later with lookup_attribute.  */\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+/* Handle a \"cold\" and attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_cold_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t       int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  if (TREE_CODE (*node) == FUNCTION_DECL)\n+    {\n+      if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (*node)) != NULL)\n+\t{\n+\t  warning (OPT_Wattributes, \"%qE attribute conflicts with attribute %s\",\n+\t\t   name, \"hot\");\n+\t  *no_add_attrs = true;\n+\t}\n+      /* Do nothing else, just set the attribute.  We'll get at\n+\t it later with lookup_attribute.  */\n+    }\n+  else\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      *no_add_attrs = true;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"noinline\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "788cbfc14a0339194691c60e10d7ac4edfe29c1d", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -1578,10 +1578,11 @@ attributes are currently defined for functions on all targets:\n @code{section}, @code{constructor}, @code{destructor}, @code{used},\n @code{unused}, @code{deprecated}, @code{weak}, @code{malloc},\n @code{alias}, @code{warn_unused_result}, @code{nonnull},\n-@code{gnu_inline} and @code{externally_visible}.  Several other\n-attributes are defined for functions on particular target systems.  Other\n-attributes, including @code{section} are supported for variables declarations\n-(@pxref{Variable Attributes}) and for types (@pxref{Type Attributes}).\n+@code{gnu_inline} and @code{externally_visible}, @code{hot}, @code{cold}.\n+Several other attributes are defined for functions on particular target\n+systems.  Other attributes, including @code{section} are supported for\n+variables declarations (@pxref{Variable Attributes}) and for types (@pxref{Type\n+Attributes}).\n \n You may also specify attributes with @samp{__} preceding and following\n each keyword.  This allows you to use them in header files without\n@@ -2242,6 +2243,35 @@ two consecutive calls (such as @code{feof} in a multithreading environment).\n The attribute @code{pure} is not implemented in GCC versions earlier\n than 2.96.\n \n+@item hot\n+@cindex @code{hot} function attribute\n+The @code{hot} attribute is used to inform the compiler that a function is a\n+hot spot of the compiled program.  The function is optimized more aggressively\n+and on many target it is placed into special subsection of the text section so\n+all hot functions appears close together improving locality.\n+\n+When profile feedback is available, via @option{-fprofile-use}, hot functions\n+are automatically detected and this attribute is ignored.\n+\n+The @code{hot} attribute is not implemented in GCC versions earlier than 4.3.\n+\n+@item cold\n+@cindex @code{cold} function attribute\n+The @code{cold} attribute is used to inform the compiler that a function is\n+unlikely executed.  The function is optimized for size rather than speed and on\n+many targets it is placed into special subsection of the text section so all\n+cold functions appears close together improving code locality of non-cold parts\n+of program.  The paths leading to call of cold functions within code are marked\n+as unlikely by the branch prediction mechanizm. It is thus useful to mark\n+functions used to handle unlikely conditions, such as @code{perror}, as cold to\n+improve optimization of hot functions that do call marked functions in rare\n+occasions.\n+\n+When profile feedback is available, via @option{-fprofile-use}, hot functions\n+are automatically detected and this attribute is ignored.\n+\n+The @code{hot} attribute is not implemented in GCC versions earlier than 4.3.\n+\n @item regparm (@var{number})\n @cindex @code{regparm} attribute\n @cindex functions that are passed arguments in registers on the 386"}, {"sha": "a5c7fe508e9b4d709db02c21b1cd1635bac1c07c", "filename": "gcc/errors.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Ferrors.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Ferrors.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ferrors.h?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -34,10 +34,10 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n    version of warning().  For those, you'd pass an OPT_W* value from\n    options.h, but in generator programs it has no effect, so it's OK\n    to just pass zero for calls from generator-only files.  */\n-extern void warning (int, const char *, ...) ATTRIBUTE_PRINTF_2;\n-extern void error (const char *, ...) ATTRIBUTE_PRINTF_1;\n-extern void fatal (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;\n-extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1;\n+extern void warning (int, const char *, ...) ATTRIBUTE_PRINTF_2 ATTRIBUTE_COLD;\n+extern void error (const char *, ...) ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n+extern void fatal (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n+extern void internal_error (const char *, ...) ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF_1 ATTRIBUTE_COLD;\n extern const char *trim_filename (const char *);\n \n extern int have_error;"}, {"sha": "85431944e68cf0d68c9884a00c318fe0927cf88d", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -168,12 +168,12 @@ DEF_VEC_ALLOC_P(temp_slot_p,gc);\n \n enum function_frequency {\n   /* This function most likely won't be executed at all.\n-     (set only when profile feedback is available).  */\n+     (set only when profile feedback is available or via function attribute). */\n   FUNCTION_FREQUENCY_UNLIKELY_EXECUTED,\n   /* The default value.  */\n   FUNCTION_FREQUENCY_NORMAL,\n   /* Optimize this function hard\n-     (set only when profile feedback is available).  */\n+     (set only when profile feedback is available or via function attribute). */\n   FUNCTION_FREQUENCY_HOT\n };\n "}, {"sha": "f8a6a1175f2ea7e58517d7e292c01da4314a0a04", "filename": "gcc/predict.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -117,6 +117,13 @@ maybe_hot_bb_p (basic_block bb)\n       && (bb->count\n \t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n     return false;\n+  if (!profile_info || !flag_branch_probabilities)\n+    {\n+      if (cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n+        return false;\n+      if (cfun->function_frequency == FUNCTION_FREQUENCY_HOT)\n+        return true;\n+    }\n   if (bb->frequency < BB_FREQ_MAX / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n     return false;\n   return true;\n@@ -131,6 +138,9 @@ probably_cold_bb_p (basic_block bb)\n       && (bb->count\n \t  < profile_info->sum_max / PARAM_VALUE (HOT_BB_COUNT_FRACTION)))\n     return true;\n+  if ((!profile_info || !flag_branch_probabilities)\n+      && cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n+    return true;\n   if (bb->frequency < BB_FREQ_MAX / PARAM_VALUE (HOT_BB_FREQUENCY_FRACTION))\n     return true;\n   return false;\n@@ -142,6 +152,9 @@ probably_never_executed_bb_p (basic_block bb)\n {\n   if (profile_info && flag_branch_probabilities)\n     return ((bb->count + profile_info->runs / 2) / profile_info->runs) == 0;\n+  if ((!profile_info || !flag_branch_probabilities)\n+      && cfun->function_frequency == FUNCTION_FREQUENCY_UNLIKELY_EXECUTED)\n+    return true;\n   return false;\n }\n \n@@ -1234,6 +1247,7 @@ tree_bb_level_predictions (void)\n       for (bsi = bsi_start (bb); !bsi_end_p (bsi); bsi_next (&bsi))\n \t{\n \t  tree stmt = bsi_stmt (bsi);\n+\t  tree decl;\n \t  switch (TREE_CODE (stmt))\n \t    {\n \t      case GIMPLE_MODIFY_STMT:\n@@ -1248,6 +1262,12 @@ call_expr:;\n \t\tif (call_expr_flags (stmt) & ECF_NORETURN)\n \t\t  predict_paths_leading_to (bb, heads, PRED_NORETURN,\n \t\t      \t\t\t    NOT_TAKEN);\n+\t\tdecl = get_callee_fndecl (stmt);\n+\t\tif (decl\n+\t\t    && lookup_attribute (\"cold\",\n+\t\t\t\t\t DECL_ATTRIBUTES (decl)))\n+\t\t  predict_paths_leading_to (bb, heads, PRED_COLD_FUNCTION,\n+\t\t      \t\t\t    NOT_TAKEN);\n \t\tbreak;\n \t      default:\n \t\tbreak;\n@@ -1785,7 +1805,15 @@ compute_function_frequency (void)\n   basic_block bb;\n \n   if (!profile_info || !flag_branch_probabilities)\n-    return;\n+    {\n+      if (lookup_attribute (\"cold\", DECL_ATTRIBUTES (current_function_decl))\n+\t  != NULL)\n+        cfun->function_frequency = FUNCTION_FREQUENCY_UNLIKELY_EXECUTED;\n+      else if (lookup_attribute (\"hot\", DECL_ATTRIBUTES (current_function_decl))\n+\t       != NULL)\n+        cfun->function_frequency = FUNCTION_FREQUENCY_HOT;\n+      return;\n+    }\n   cfun->function_frequency = FUNCTION_FREQUENCY_UNLIKELY_EXECUTED;\n   FOR_EACH_BB (bb)\n     {"}, {"sha": "cf31442c175402431fa6f4263717784c3ad3be35", "filename": "gcc/predict.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fpredict.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/gcc%2Fpredict.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.def?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -73,6 +73,10 @@ DEF_PREDICTOR (PRED_CONTINUE, \"continue\", HITRATE (56), 0)\n DEF_PREDICTOR (PRED_NORETURN, \"noreturn call\", HITRATE (99),\n \t       PRED_FLAG_FIRST_MATCH)\n \n+/* Branch to basic block containing call marked by cold function attribute.  */\n+DEF_PREDICTOR (PRED_COLD_FUNCTION, \"cold function call\", HITRATE (99),\n+\t       PRED_FLAG_FIRST_MATCH)\n+\n /* Loopback edge is taken.  */\n DEF_PREDICTOR (PRED_LOOP_BRANCH, \"loop branch\", HITRATE (86),\n \t       PRED_FLAG_FIRST_MATCH)"}, {"sha": "e0556667d10faa81183447fbe239b80ab2c2992a", "filename": "include/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -1,3 +1,7 @@\n+2007-03-06  Jan Hubicka  <jh@suse.cz>\n+\t\n+\t* ansidecl.h (ATTRIBUTE_COLD, ATTRIBUTE_HOT): New.\n+\n 2007-02-09  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* libiberty.h (pex_write_input): Remove prototype."}, {"sha": "c19955a98a677f66dc9bf5e54291ac0f3aa3efff", "filename": "include/ansidecl.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52bf96d2f299e9e69db82b5d0ae7186ab949339b/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52bf96d2f299e9e69db82b5d0ae7186ab949339b/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=52bf96d2f299e9e69db82b5d0ae7186ab949339b", "patch": "@@ -367,6 +367,22 @@ So instead we use the macro below and test it against specific values.  */\n # define ATTRIBUTE_PACKED __attribute__ ((packed))\n #endif\n \n+/* Attribute `hot' and `cold' was valid as of gcc 4.3.  */\n+#ifndef ATTRIBUTE_COLD\n+# if (GCC_VERSION >= 4003)\n+#  define ATTRIBUTE_COLD __attribute__ ((__cold__))\n+# else\n+#  define ATTRIBUTE_COLD\n+# endif /* GNUC >= 4.3 */\n+#endif /* ATTRIBUTE_COLD */\n+#ifndef ATTRIBUTE_HOT\n+# if (GCC_VERSION >= 4003)\n+#  define ATTRIBUTE_HOT __attribute__ ((__hot__))\n+# else\n+#  define ATTRIBUTE_HOT\n+# endif /* GNUC >= 4.3 */\n+#endif /* ATTRIBUTE_HOT */\n+\n /* We use __extension__ in some places to suppress -pedantic warnings\n    about GCC extensions.  This feature didn't work properly before\n    gcc 2.8.  */"}]}