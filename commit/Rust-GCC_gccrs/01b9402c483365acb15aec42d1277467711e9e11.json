{"sha": "01b9402c483365acb15aec42d1277467711e9e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFiOTQwMmM0ODMzNjVhY2IxNWFlYzQyZDEyNzc0Njc3MTFlOWUxMQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-09-24T13:39:40Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-24T13:39:40Z"}, "message": "[AArch64] Don't split 64-bit constant stores to volatile location\n\nThe optimisation to optimise:\n   typedef unsigned long long u64;\n\n   void bar(u64 *x)\n   {\n     *x = 0xabcdef10abcdef10;\n   }\n\nfrom:\n        mov     x1, 61200\n        movk    x1, 0xabcd, lsl 16\n        movk    x1, 0xef10, lsl 32\n        movk    x1, 0xabcd, lsl 48\n        str     x1, [x0]\n\ninto:\n        mov     w1, 61200\n        movk    w1, 0xabcd, lsl 16\n        stp     w1, w1, [x0]\n\nends up producing two distinct stores if the destination is volatile:\n  void bar(u64 *x)\n  {\n    *(volatile u64 *)x = 0xabcdef10abcdef10;\n  }\n        mov     w1, 61200\n        movk    w1, 0xabcd, lsl 16\n        str     w1, [x0]\n        str     w1, [x0, 4]\n\nbecause we end up not merging the strs into an stp. It's questionable whether the use of STP is valid for volatile in the first place.\nTo avoid unnecessary pain in a context where it's unlikely to be performance critical [1] (use of volatile), this patch avoids this\ntransformation for volatile destinations, so we produce the original single STR-X.\n\nBootstrapped and tested on aarch64-none-linux-gnu.\n\n[1] https://lore.kernel.org/lkml/20190821103200.kpufwtviqhpbuv2n@willie-the-truck/\n\n\t* config/aarch64/aarch64.md (mov<mode>): Don't call\n\taarch64_split_dimode_const_store on volatile MEM.\n\n\t* gcc.target/aarch64/nosplit-di-const-volatile_1.c: New test.\n\nFrom-SVN: r276098", "tree": {"sha": "10118a7cd1a4cdef04275c389bd8e3b12db9bf35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10118a7cd1a4cdef04275c389bd8e3b12db9bf35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01b9402c483365acb15aec42d1277467711e9e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9402c483365acb15aec42d1277467711e9e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b9402c483365acb15aec42d1277467711e9e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b9402c483365acb15aec42d1277467711e9e11/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "937960dfd7f324316e9b9d5a685d25799b8e5523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/937960dfd7f324316e9b9d5a685d25799b8e5523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/937960dfd7f324316e9b9d5a685d25799b8e5523"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "c163e61758a11fe2b9d292e51188840a216bbc24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9402c483365acb15aec42d1277467711e9e11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9402c483365acb15aec42d1277467711e9e11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01b9402c483365acb15aec42d1277467711e9e11", "patch": "@@ -1,3 +1,8 @@\n+2019-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (mov<mode>): Don't call\n+\taarch64_split_dimode_const_store on volatile MEM.\n+\n 2019-09-24  Stamatis Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* config/aarch64/aarch64-option-extensions.def (fp16fml):"}, {"sha": "edeaa6fe785fc13fef10319e783634799f48ec7e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=01b9402c483365acb15aec42d1277467711e9e11", "patch": "@@ -1104,8 +1104,8 @@\n \t(match_operand:GPI 1 \"general_operand\"))]\n   \"\"\n   \"\n-    if (MEM_P (operands[0]) && CONST_INT_P (operands[1])\n-\t&& <MODE>mode == DImode\n+    if (MEM_P (operands[0]) && !MEM_VOLATILE_P (operands[0])\n+\t&& CONST_INT_P (operands[1]) && <MODE>mode == DImode\n \t&& aarch64_split_dimode_const_store (operands[0], operands[1]))\n       DONE;\n "}, {"sha": "55b3bab945b9e8094010a2a0246e38732a55d688", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01b9402c483365acb15aec42d1277467711e9e11", "patch": "@@ -1,3 +1,7 @@\n+2019-09-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/nosplit-di-const-volatile_1.c: New test.\n+\n 2019-09-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/91866"}, {"sha": "da5975ad1652c00a3b69b3dc19e5c09c77526de7", "filename": "gcc/testsuite/gcc.target/aarch64/nosplit-di-const-volatile_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnosplit-di-const-volatile_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01b9402c483365acb15aec42d1277467711e9e11/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnosplit-di-const-volatile_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fnosplit-di-const-volatile_1.c?ref=01b9402c483365acb15aec42d1277467711e9e11", "patch": "@@ -0,0 +1,15 @@\n+/* Check that storing the 64-bit immediate to a volatile location is done\n+   with a single store.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef unsigned long long u64;\n+\n+void bar (u64 *x)\n+{\n+  *(volatile u64 *)x = 0xabcdef10abcdef10ULL;\n+}\n+\n+/* { dg-final { scan-assembler-times \"str\\tx..?, .*\" 1 } } */\n+/* { dg-final { scan-assembler-not \"str\\tw..?, .*\" } } */"}]}