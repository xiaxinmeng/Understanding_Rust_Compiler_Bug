{"sha": "92cdd338fdbfd33f72e645af1caaa1a357fe9839", "node_id": "C_kwDOANBUbNoAKDkyY2RkMzM4ZmRiZmQzM2Y3MmU2NDVhZjFjYWFhMWEzNTdmZTk4Mzk", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-09-14T19:31:31Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2021-09-28T12:58:23Z"}, "message": "reassoc: Test rank biasing\n\nAdd both positive and negative tests.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/reassoc-46.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-46.h: Common code for new tests.\n\t* gcc.dg/tree-ssa/reassoc-47.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-48.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-49.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-50.c: New test.\n\t* gcc.dg/tree-ssa/reassoc-51.c: New test.", "tree": {"sha": "fe7fe44e48c2259afc00e211a6bc699ec6fb5096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe7fe44e48c2259afc00e211a6bc699ec6fb5096"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92cdd338fdbfd33f72e645af1caaa1a357fe9839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cdd338fdbfd33f72e645af1caaa1a357fe9839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92cdd338fdbfd33f72e645af1caaa1a357fe9839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92cdd338fdbfd33f72e645af1caaa1a357fe9839/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32f7df917b01c3636aa85916a36264e807ced9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c32f7df917b01c3636aa85916a36264e807ced9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c32f7df917b01c3636aa85916a36264e807ced9d"}], "stats": {"total": 90, "additions": 90, "deletions": 0}, "files": [{"sha": "97563dd929f6641076463207dda14a3ab6ef8e72", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-46.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#include \"reassoc-46.h\"\n+\n+/* Check that the loop accumulator is added last.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 1 \"optimized\" } } */"}, {"sha": "e60b490ea0d5bc28a18d7e9f676110ac50af6932", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-46.h", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-46.h?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,33 @@\n+#define M 1024\n+unsigned int arr1[M];\n+unsigned int arr2[M];\n+volatile unsigned int sink;\n+\n+unsigned int\n+test (void)\n+{\n+  unsigned int sum = 0;\n+  for (int i = 0; i < M; i++)\n+    {\n+#ifdef MODIFY\n+      /* Modify the loop accumulator using a chain of operations - this should\n+         not affect its rank biasing.  */\n+      sum |= 1;\n+      sum ^= 2;\n+#endif\n+#ifdef STORE\n+      /* Save the loop accumulator into a global variable - this should not\n+         affect its rank biasing.  */\n+      sink = sum;\n+#endif\n+#ifdef USE\n+      /* Add a tricky use of the loop accumulator - this should prevent its\n+         rank biasing.  */\n+      i = (i + sum) % M;\n+#endif\n+      /* Use addends with different ranks.  */\n+      sum += arr1[i];\n+      sum += arr2[((i ^ 1) + 1) % M];\n+    }\n+  return sum;\n+}"}, {"sha": "1b0f0fdabe114bf619097a59f0fc9ea923e3ceee", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-47.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-47.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-47.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-47.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#define MODIFY\n+#include \"reassoc-46.h\"\n+\n+/* Check that if the loop accumulator is saved into a global variable, it's\n+   still added last.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 1 \"optimized\" } } */"}, {"sha": "13836ebe8e621b17970f9433c2121482d38051a4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-48.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-48.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-48.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-48.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#define STORE\n+#include \"reassoc-46.h\"\n+\n+/* Check that if the loop accumulator is modified using a chain of operations\n+   other than addition, its new value is still added last.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 1 \"optimized\" } } */"}, {"sha": "c1136a447a2cf56df832032fc73c16d3872bcfab", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-49.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-49.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-49.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-49.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#define MODIFY\n+#define STORE\n+#include \"reassoc-46.h\"\n+\n+/* Check that if the loop accumulator is both modified using a chain of\n+   operations other than addition and stored into a global variable, its new\n+   value is still added last.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 1 \"optimized\" } } */"}, {"sha": "e35a4ff12785edbdb4a4a1d5f40280bb8ee4fc9c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-50.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-50.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-50.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-50.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#define MODIFY\n+#define USE\n+#include \"reassoc-46.h\"\n+\n+/* Check that if the loop accumulator has multiple uses inside the loop, it's\n+   not forced to the end of the reassociation chain.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 2 \"optimized\" } } */"}, {"sha": "07175675e24db8ec9654cd2042fc7cb97c87175a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/reassoc-51.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-51.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92cdd338fdbfd33f72e645af1caaa1a357fe9839/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-51.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Freassoc-51.c?ref=92cdd338fdbfd33f72e645af1caaa1a357fe9839", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized -ftree-vectorize\" } */\n+\n+#define MODIFY\n+#define STORE\n+#define USE\n+#include \"reassoc-46.h\"\n+\n+/* Check that if the loop accumulator has multiple uses inside the loop, it's\n+   not forced to the end of the reassociation chain.  */\n+/* { dg-final { scan-tree-dump-times {(?:vect_)?sum_[\\d._]+ = (?:(?:vect_)?_[\\d._]+ \\+ (?:vect_)?sum_[\\d._]+|(?:vect_)?sum_[\\d._]+ \\+ (?:vect_)?_[\\d._]+)} 2 \"optimized\" } } */"}]}