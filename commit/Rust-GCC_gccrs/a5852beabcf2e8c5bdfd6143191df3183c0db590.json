{"sha": "a5852beabcf2e8c5bdfd6143191df3183c0db590", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTU4NTJiZWFiY2YyZThjNWJkZmQ2MTQzMTkxZGYzMTgzYzBkYjU5MA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2014-06-18T09:00:22Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2014-06-18T09:00:22Z"}, "message": "improve sloc assignment on bind_expr entry/exit code\n\n2014-06-18  Olivier Hainque <hainque@adacore.com>\n\n        improve sloc assignment on bind_expr entry/exit code\n\n        gcc/\n        * tree-core.h (tree_block): Add an \"end_locus\" field, allowing\n        memorization of the end of block source location.\n        * tree.h (BLOCK_SOURCE_END_LOCATION): New accessor.\n        * gimplify.c (gimplify_bind_expr): Propagate the block start and\n        end source location info we have on the block entry/exit code we\n        generate.\n\n        testsuite/\n        * gnat.dg/blocklocs.adb: New test.\n\nFrom-SVN: r211773", "tree": {"sha": "fff1f2d130096327303f4f0437fbb8ca6589d52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff1f2d130096327303f4f0437fbb8ca6589d52a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5852beabcf2e8c5bdfd6143191df3183c0db590", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5852beabcf2e8c5bdfd6143191df3183c0db590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5852beabcf2e8c5bdfd6143191df3183c0db590", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5852beabcf2e8c5bdfd6143191df3183c0db590/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68f6df73324a1389bce336d55ae94aa58f519997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f6df73324a1389bce336d55ae94aa58f519997", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f6df73324a1389bce336d55ae94aa58f519997"}], "stats": {"total": 70, "additions": 67, "deletions": 3}, "files": [{"sha": "af5dc1b7388cc1bc2969c2cc9d6646a10dfb54d3", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -1,3 +1,12 @@\n+2014-06-18  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* tree-core.h (tree_block): Add an \"end_locus\" field, allowing\n+\tmemorization of the end of block source location.\n+\t* tree.h (BLOCK_SOURCE_END_LOCATION): New accessor.\n+\t* gimplify.c (gimplify_bind_expr): Propagate the block start and\n+\tend source location info we have on the block entry/exit code we\n+\tgenerate.\n+\n 2014-06-13  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* config-ml.in: Robustify ac_configure_args parsing."}, {"sha": "3dcb4affe3f58dbe4a6b43f5a2cac24c94332d9a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -1047,6 +1047,7 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n   gimple gimple_bind;\n   gimple_seq body, cleanup;\n   gimple stack_save;\n+  location_t start_locus = 0, end_locus = 0;\n \n   tree temp = voidify_wrapper_expr (bind_expr, NULL);\n \n@@ -1099,6 +1100,19 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n   gimplify_stmt (&BIND_EXPR_BODY (bind_expr), &body);\n   gimple_bind_set_body (gimple_bind, body);\n \n+  /* Source location wise, the cleanup code (stack_restore and clobbers)\n+     belongs to the end of the block, so propagate what we have.  The\n+     stack_save operation belongs to the beginning of block, which we can\n+     infer from the bind_expr directly if the block has no explicit\n+     assignment.  */\n+  if (BIND_EXPR_BLOCK (bind_expr))\n+    {\n+      end_locus = BLOCK_SOURCE_END_LOCATION (BIND_EXPR_BLOCK (bind_expr));\n+      start_locus = BLOCK_SOURCE_LOCATION (BIND_EXPR_BLOCK (bind_expr));\n+    }\n+  if (start_locus == 0)\n+    start_locus = EXPR_LOCATION (bind_expr);\n+\n   cleanup = NULL;\n   stack_save = NULL;\n   if (gimplify_ctxp->save_stack)\n@@ -1109,6 +1123,9 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t block to achieve this.  */\n       build_stack_save_restore (&stack_save, &stack_restore);\n \n+      gimple_set_location (stack_save, start_locus);\n+      gimple_set_location (stack_restore, end_locus);\n+\n       gimplify_seq_add_stmt (&cleanup, stack_restore);\n     }\n \n@@ -1126,10 +1143,12 @@ gimplify_bind_expr (tree *expr_p, gimple_seq *pre_p)\n \t  && !is_gimple_reg (t)\n \t  && flag_stack_reuse != SR_NONE)\n \t{\n-\t  tree clobber = build_constructor (TREE_TYPE (t),\n-\t\t\t\t\t    NULL);\n+\t  tree clobber = build_constructor (TREE_TYPE (t), NULL);\n+\t  gimple clobber_stmt;\n \t  TREE_THIS_VOLATILE (clobber) = 1;\n-\t  gimplify_seq_add_stmt (&cleanup, gimple_build_assign (t, clobber));\n+\t  clobber_stmt = gimple_build_assign (t, clobber);\n+\t  gimple_set_location (clobber_stmt, end_locus);\n+\t  gimplify_seq_add_stmt (&cleanup, clobber_stmt);\n \t}\n     }\n "}, {"sha": "c61da63182f7a1128448373a3b3922b50a463ca4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -1,3 +1,7 @@\n+2014-06-18  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/blocklocs.adb: New test.\n+\n 2014-06-18  Evgeny Stupachenko  <evstupac@gmail.com>\n \n \tPR tree-optimization/52252"}, {"sha": "20ff7b3013561a465459a90725adcd8f4ae76a31", "filename": "gcc/testsuite/gnat.dg/blocklocs.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftestsuite%2Fgnat.dg%2Fblocklocs.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftestsuite%2Fgnat.dg%2Fblocklocs.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fblocklocs.adb?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -0,0 +1,26 @@\n+-- { dg-do compile { target *-*-linux* } }\n+-- { dg-options \"-gdwarf-2\" }\n+\n+procedure Blocklocs (Choice : Integer; N : in out Integer) is\n+begin\n+   if Choice > 0 then\n+      declare -- line 7\n+         S : String (1 .. N * 2);\n+         pragma Volatile (S);\n+      begin\n+\t S := (others => 'B');\n+      end;    -- line 12\n+   else\n+      declare -- line 14\n+\t S : String (1 .. N );\n+\t pragma Volatile (S);\n+      begin\n+\t S := (others => '1');\n+      end;    -- line 19\n+   end if;\n+end;\n+   \n+-- { dg-final { scan-assembler \"loc 1 7\" } }\n+-- { dg-final { scan-assembler \"loc 1 12\" } }\n+-- { dg-final { scan-assembler \"loc 1 14\" } }\n+-- { dg-final { scan-assembler \"loc 1 19\" } }"}, {"sha": "c9d43d0732efab44009f0b3afa0f95b41fd4f138", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -1253,6 +1253,7 @@ struct GTY(()) tree_block {\n   unsigned block_num : 31;\n \n   location_t locus;\n+  location_t end_locus;\n \n   tree vars;\n   vec<tree, va_gc> *nonlocalized_vars;"}, {"sha": "0a334cc511df1e2425bc9a2c793d68b4510a431a", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5852beabcf2e8c5bdfd6143191df3183c0db590/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=a5852beabcf2e8c5bdfd6143191df3183c0db590", "patch": "@@ -1500,6 +1500,11 @@ extern void protected_set_expr_location (tree, location_t);\n \n #define BLOCK_SOURCE_LOCATION(NODE) (BLOCK_CHECK (NODE)->block.locus)\n \n+/* This gives the location of the end of the block, useful to attach\n+   code implicitly generated for outgoing paths.  */\n+\n+#define BLOCK_SOURCE_END_LOCATION(NODE) (BLOCK_CHECK (NODE)->block.end_locus)\n+\n /* Define fields and accessors for nodes representing data types.  */\n \n /* See tree.def for documentation of the use of these fields."}]}