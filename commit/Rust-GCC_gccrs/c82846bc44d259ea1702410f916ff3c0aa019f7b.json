{"sha": "c82846bc44d259ea1702410f916ff3c0aa019f7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgyODQ2YmM0NGQyNTllYTE3MDI0MTBmOTE2ZmYzYzBhYTAxOWY3Yg==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2014-01-11T18:57:56Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2014-01-11T18:57:56Z"}, "message": "re PR target/58115 (testcase gcc.target/i386/intrinsics_4.c failure)\n\n        PR target/58115\n        * config/rs6000/rs6000.h (SWITCHABLE_TARGET): Define.\n        * config/rs6000/rs6000.c: Include target-globals.h.\n        (rs6000_set_current_function): Instead of doing target_reinit\n        unconditionally, use save_target_globals_default_opts and\n        restore_target_globals.\n\n        * config/rs6000/rs6000-builtin.def (mffs, mtfsf): Add builtins for\n        FPSCR.\n        * config/rs6000/rs6000.c (rs6000_expand_mtfsf_builtin): New.\n        (rs6000_expand_builtin): Handle mffs and mtfsf.\n        (rs6000_init_builtins): Define mffs and mtfsf.\n        * config/rs6000/rs6000.md (UNSPECV_MFFS, UNSPECV_MTFSF): New.\n        (rs6000_mffs): New pattern.\n        (rs6000_mtfsf): New pattern.\n\nFrom-SVN: r206554", "tree": {"sha": "a5436871a1c494bc86f3e27e8561dc3c69eeb824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5436871a1c494bc86f3e27e8561dc3c69eeb824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c82846bc44d259ea1702410f916ff3c0aa019f7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82846bc44d259ea1702410f916ff3c0aa019f7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c82846bc44d259ea1702410f916ff3c0aa019f7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c82846bc44d259ea1702410f916ff3c0aa019f7b/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2558e2e838790ef1441788c0ba4c14e1bf061b55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2558e2e838790ef1441788c0ba4c14e1bf061b55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2558e2e838790ef1441788c0ba4c14e1bf061b55"}], "stats": {"total": 123, "additions": 117, "deletions": 6}, "files": [{"sha": "7b38804c3edab52f0dce1623f9f5c86445468247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c82846bc44d259ea1702410f916ff3c0aa019f7b", "patch": "@@ -1,3 +1,21 @@\n+2014-01-11  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\tPR target/58115\n+\t* config/rs6000/rs6000.h (SWITCHABLE_TARGET): Define.\n+\t* config/rs6000/rs6000.c: Include target-globals.h.\n+\t(rs6000_set_current_function): Instead of doing target_reinit\n+\tunconditionally, use save_target_globals_default_opts and\n+\trestore_target_globals.\n+\n+\t* config/rs6000/rs6000-builtin.def (mffs, mtfsf): Add builtins for\n+\tFPSCR.\n+\t* config/rs6000/rs6000.c (rs6000_expand_mtfsf_builtin): New.\n+\t(rs6000_expand_builtin): Handle mffs and mtfsf.\n+\t(rs6000_init_builtins): Define mffs and mtfsf.\n+\t* config/rs6000/rs6000.md (UNSPECV_MFFS, UNSPECV_MTFSF): New constants.\n+\t(rs6000_mffs): New pattern.\n+\t(rs6000_mtfsf): New pattern.\n+\n 2014-01-11  Bin Cheng  <bin.cheng@arm.com>\n \n \t* tree-ssa-loop-ivopts.c (iv_ca_narrow): New parameter."}, {"sha": "b7b67fae1c8f0be289607915b2684e352e3640b2", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=c82846bc44d259ea1702410f916ff3c0aa019f7b", "patch": "@@ -1752,6 +1752,14 @@ BU_SPECIAL_X (RS6000_BUILTIN_GET_TB, \"__builtin_ppc_get_timebase\",\n BU_SPECIAL_X (RS6000_BUILTIN_MFTB, \"__builtin_ppc_mftb\",\n \t      RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n \n+BU_SPECIAL_X (RS6000_BUILTIN_MFFS, \"__builtin_mffs\",\n+\t      RS6000_BTM_ALWAYS, RS6000_BTC_MISC)\n+\n+RS6000_BUILTIN_X (RS6000_BUILTIN_MTFSF, \"__builtin_mtfsf\",\n+\t          RS6000_BTM_ALWAYS,\n+\t          RS6000_BTC_MISC | RS6000_BTC_UNARY | RS6000_BTC_VOID,\n+\t\t  CODE_FOR_rs6000_mtfsf)\n+\n /* Darwin CfString builtin.  */\n BU_SPECIAL_X (RS6000_BUILTIN_CFSTRING, \"__builtin_cfstring\", RS6000_BTM_ALWAYS,\n \t      RS6000_BTC_MISC)"}, {"sha": "e4daa789f4027d8412e66b6cfa9966fa5554a380", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 72, "deletions": 6, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c82846bc44d259ea1702410f916ff3c0aa019f7b", "patch": "@@ -78,6 +78,7 @@\n #include \"tree-vectorizer.h\"\n #include \"dumpfile.h\"\n #include \"cgraph.h\"\n+#include \"target-globals.h\"\n #if TARGET_XCOFF\n #include \"xcoffout.h\"  /* get declarations of xcoff_*_section_name */\n #endif\n@@ -11468,6 +11469,48 @@ rs6000_expand_zeroop_builtin (enum insn_code icode, rtx target)\n }\n \n \n+static rtx\n+rs6000_expand_mtfsf_builtin (enum insn_code icode, tree exp, rtx target)\n+{\n+  rtx pat;\n+  tree arg0 = CALL_EXPR_ARG (exp, 0);\n+  tree arg1 = CALL_EXPR_ARG (exp, 1);\n+  rtx op0 = expand_normal (arg0);\n+  rtx op1 = expand_normal (arg1);\n+  enum machine_mode mode0 = insn_data[icode].operand[0].mode;\n+  enum machine_mode mode1 = insn_data[icode].operand[1].mode;\n+\n+  if (icode == CODE_FOR_nothing)\n+    /* Builtin not supported on this processor.  */\n+    return 0;\n+\n+  /* If we got invalid arguments bail out before generating bad rtl.  */\n+  if (arg0 == error_mark_node || arg1 == error_mark_node)\n+    return const0_rtx;\n+\n+  if (GET_CODE (op0) != CONST_INT\n+      || INTVAL (op0) > 255\n+      || INTVAL (op0) < 0)\n+    {\n+      error (\"argument 1 must be an 8-bit field value\");\n+      return const0_rtx;\n+    }\n+\n+  if (! (*insn_data[icode].operand[0].predicate) (op0, mode0))\n+    op0 = copy_to_mode_reg (mode0, op0);\n+\n+  if (! (*insn_data[icode].operand[1].predicate) (op1, mode1))\n+    op1 = copy_to_mode_reg (mode1, op1);\n+\n+  pat = GEN_FCN (icode) (op0, op1);\n+  if (! pat)\n+    return const0_rtx;\n+  emit_insn (pat);\n+\n+  return NULL_RTX;\n+}\n+\n+\n static rtx\n rs6000_expand_unop_builtin (enum insn_code icode, tree exp, rtx target)\n {\n@@ -13277,6 +13320,12 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t\t\t\t\t    : CODE_FOR_rs6000_mftb_si),\n \t\t\t\t\t   target);\n \n+    case RS6000_BUILTIN_MFFS:\n+      return rs6000_expand_zeroop_builtin (CODE_FOR_rs6000_mffs, target);\n+\n+    case RS6000_BUILTIN_MTFSF:\n+      return rs6000_expand_mtfsf_builtin (CODE_FOR_rs6000_mtfsf, exp, target);\n+\n     case ALTIVEC_BUILTIN_MASK_FOR_LOAD:\n     case ALTIVEC_BUILTIN_MASK_FOR_STORE:\n       {\n@@ -13584,6 +13633,14 @@ rs6000_init_builtins (void)\n \t\t\t\t      NULL_TREE);\n   def_builtin (\"__builtin_ppc_mftb\", ftype, RS6000_BUILTIN_MFTB);\n \n+  ftype = build_function_type_list (double_type_node, NULL_TREE);\n+  def_builtin (\"__builtin_mffs\", ftype, RS6000_BUILTIN_MFFS);\n+\n+  ftype = build_function_type_list (void_type_node,\n+\t\t\t\t    intSI_type_node, double_type_node,\n+\t\t\t\t    NULL_TREE);\n+  def_builtin (\"__builtin_mtfsf\", ftype, RS6000_BUILTIN_MTFSF);\n+\n #if TARGET_XCOFF\n   /* AIX libm provides clog as __clog.  */\n   if ((tdecl = builtin_decl_explicit (BUILT_IN_CLOG)) != NULL_TREE)\n@@ -31199,16 +31256,25 @@ rs6000_set_current_function (tree fndecl)\n \t{\n \t  cl_target_option_restore (&global_options,\n \t\t\t\t    TREE_TARGET_OPTION (new_tree));\n-\t  target_reinit ();\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n \t}\n \n       else if (old_tree)\n \t{\n-\t  struct cl_target_option *def\n-\t    = TREE_TARGET_OPTION (target_option_current_node);\n-\n-\t  cl_target_option_restore (&global_options, def);\n-\t  target_reinit ();\n+\t  new_tree = target_option_current_node;\n+\t  cl_target_option_restore (&global_options,\n+\t\t\t\t    TREE_TARGET_OPTION (new_tree));\n+\t  if (TREE_TARGET_GLOBALS (new_tree))\n+\t    restore_target_globals (TREE_TARGET_GLOBALS (new_tree));\n+\t  else if (new_tree == target_option_default_node)\n+\t    restore_target_globals (&default_target_globals);\n+\t  else\n+\t    TREE_TARGET_GLOBALS (new_tree)\n+\t      = save_target_globals_default_opts ();\n \t}\n     }\n }"}, {"sha": "1a37a5df981a71b0e1f0739f450e873458a406ff", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c82846bc44d259ea1702410f916ff3c0aa019f7b", "patch": "@@ -2446,6 +2446,9 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n \n+/* For switching between functions with different target attributes.  */\n+#define SWITCHABLE_TARGET 1\n+\n /* uncomment for disabling the corresponding default options */\n /* #define  MACHINE_no_sched_interblock */\n /* #define  MACHINE_no_sched_speculative */"}, {"sha": "744a11d6d96986c798f9cef9a16b2e71066247f7", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c82846bc44d259ea1702410f916ff3c0aa019f7b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c82846bc44d259ea1702410f916ff3c0aa019f7b", "patch": "@@ -140,6 +140,8 @@\n    UNSPECV_ISYNC\t\t; isync instruction\n    UNSPECV_MFTB\t\t\t; move from time base\n    UNSPECV_NLGR\t\t\t; non-local goto receiver\n+   UNSPECV_MFFS\t\t\t; Move from FPSCR\n+   UNSPECV_MTFSF\t\t; Move to FPSCR Fields\n   ])\n \n \f\n@@ -15586,6 +15588,20 @@\n     return \"mftb %0\";\n })\n \n+\f\n+(define_insn \"rs6000_mffs\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n+\t(unspec_volatile:DF [(const_int 0)] UNSPECV_MFFS))]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"mffs %0\")\n+\n+(define_insn \"rs6000_mtfsf\"\n+  [(unspec_volatile [(match_operand:SI 0 \"const_int_operand\" \"i\")\n+\t\t     (match_operand:DF 1 \"gpc_reg_operand\" \"d\")]\n+\t\t    UNSPECV_MTFSF)]\n+  \"TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"mtfsf %0,%1\")\n+\n \f\n ;; Power8 fusion support for fusing an addis instruction with a D-form load of\n ;; a GPR.  The addis instruction must be adjacent to the load, and use the same"}]}