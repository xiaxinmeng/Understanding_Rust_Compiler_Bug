{"sha": "33497fd242760dcd0db7f69596a0aec21c735b35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM0OTdmZDI0Mjc2MGRjZDBkYjdmNjk1OTZhMGFlYzIxYzczNWIzNQ==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2015-10-27T16:54:52Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2015-10-27T16:54:52Z"}, "message": "[PR fortran/63865] OpenACC cache directive: match Fortran support with C/C++\n\n\tgcc/fortran/\n\tPR fortran/63865\n\t* openmp.c (resolve_oacc_cache): Remove function.\n\t(gfc_match_oacc_cache): Enable array sections.\n\t(resolve_omp_clauses, gfc_resolve_oacc_directive): Change\n\taccordingly.\n\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n\tgcc/testsuite/\n\tPR fortran/63865\n\t* gfortran.dg/goacc/coarray.f95: Expect the OpenACC cache\n\tdirective to work.\n\t* gfortran.dg/goacc/loop-1.f95: Likewise.\n\t* gfortran.dg/goacc/cache-1.f95: Likewise, and extend testing.\n\t* gfortran.dg/goacc/cray.f95: Likewise.\n\t* gfortran.dg/goacc/parameter.f95: Likewise.\n\nCo-Authored-By: James Norris <jnorris@codesourcery.com>\n\nFrom-SVN: r229448", "tree": {"sha": "42870bcd2643f2dd30e91b84a0dbf6619385a2c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42870bcd2643f2dd30e91b84a0dbf6619385a2c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/33497fd242760dcd0db7f69596a0aec21c735b35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33497fd242760dcd0db7f69596a0aec21c735b35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33497fd242760dcd0db7f69596a0aec21c735b35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33497fd242760dcd0db7f69596a0aec21c735b35/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34b48146ac2f07e78825c3e99da2e2e588f3c3d"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "02564cebeab8d3501024d8991135cc2997fd4e13", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -1,3 +1,13 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\tPR fortran/63865\n+\t* openmp.c (resolve_oacc_cache): Remove function.\n+\t(gfc_match_oacc_cache): Enable array sections.\n+\t(resolve_omp_clauses, gfc_resolve_oacc_directive): Change\n+\taccordingly.\n+\t* trans-openmp.c (gfc_trans_omp_clauses): Likewise.\n+\n 2015-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/68108"}, {"sha": "6c78c97288b248dcf577d39856aca652f63943ce", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -1387,7 +1387,8 @@ gfc_match_oacc_cache (void)\n {\n   gfc_omp_clauses *c = gfc_get_omp_clauses ();\n   match m = gfc_match_omp_variable_list (\" (\",\n-\t\t\t\t\t &c->lists[OMP_LIST_CACHE], true);\n+\t\t\t\t\t &c->lists[OMP_LIST_CACHE], true,\n+\t\t\t\t\t NULL, NULL, true);\n   if (m != MATCH_YES)\n     {\n       gfc_free_omp_clauses(c);\n@@ -3107,6 +3108,7 @@ resolve_omp_clauses (gfc_code *code, locus *where,\n \t  case OMP_LIST_MAP:\n \t  case OMP_LIST_TO:\n \t  case OMP_LIST_FROM:\n+\t  case OMP_LIST_CACHE:\n \t    for (; n != NULL; n = n->next)\n \t      {\n \t\tif (n->expr)\n@@ -3380,7 +3382,6 @@ resolve_omp_clauses (gfc_code *code, locus *where,\n \t\t\t\t   n->sym->name, name, where);\n \t\t      /* FALLTHRU */\n \t\t  case OMP_LIST_DEVICE_RESIDENT:\n-\t\t  case OMP_LIST_CACHE:\n \t\t    check_symbol_not_pointer (n->sym, *where, name);\n \t\t    check_array_not_assumed (n->sym, *where, name);\n \t\t    break;\n@@ -4597,13 +4598,6 @@ resolve_oacc_loop (gfc_code *code)\n }\n \n \n-static void\n-resolve_oacc_cache (gfc_code *code ATTRIBUTE_UNUSED)\n-{\n-  sorry (\"Sorry, !$ACC cache unimplemented yet\");\n-}\n-\n-\n void\n gfc_resolve_oacc_declare (gfc_namespace *ns)\n {\n@@ -4657,6 +4651,7 @@ gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n     case EXEC_OACC_ENTER_DATA:\n     case EXEC_OACC_EXIT_DATA:\n     case EXEC_OACC_WAIT:\n+    case EXEC_OACC_CACHE:\n       resolve_omp_clauses (code, &code->loc, code->ext.omp_clauses, NULL,\n \t\t\t   true);\n       break;\n@@ -4665,9 +4660,6 @@ gfc_resolve_oacc_directive (gfc_code *code, gfc_namespace *ns ATTRIBUTE_UNUSED)\n     case EXEC_OACC_LOOP:\n       resolve_oacc_loop (code);\n       break;\n-    case EXEC_OACC_CACHE:\n-      resolve_oacc_cache (code);\n-      break;\n     default:\n       break;\n     }"}, {"sha": "3be9f516e583619e01fdc52f8b5e4952ac21e7b1", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -1778,9 +1778,6 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \tcase OMP_LIST_DEVICE_RESIDENT:\n \t  clause_code = OMP_CLAUSE_DEVICE_RESIDENT;\n \t  goto add_clause;\n-\tcase OMP_LIST_CACHE:\n-\t  clause_code = OMP_CLAUSE__CACHE_;\n-\t  goto add_clause;\n \n \tadd_clause:\n \t  omp_clauses\n@@ -2159,14 +2156,27 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t  break;\n \tcase OMP_LIST_TO:\n \tcase OMP_LIST_FROM:\n+\tcase OMP_LIST_CACHE:\n \t  for (; n != NULL; n = n->next)\n \t    {\n \t      if (!n->sym->attr.referenced)\n \t\tcontinue;\n \n-\t      tree node = build_omp_clause (input_location,\n-\t\t\t\t\t    list == OMP_LIST_TO\n-\t\t\t\t\t    ? OMP_CLAUSE_TO : OMP_CLAUSE_FROM);\n+\t      switch (list)\n+\t\t{\n+\t\tcase OMP_LIST_TO:\n+\t\t  clause_code = OMP_CLAUSE_TO;\n+\t\t  break;\n+\t\tcase OMP_LIST_FROM:\n+\t\t  clause_code = OMP_CLAUSE_FROM;\n+\t\t  break;\n+\t\tcase OMP_LIST_CACHE:\n+\t\t  clause_code = OMP_CLAUSE__CACHE_;\n+\t\t  break;\n+\t\tdefault:\n+\t\t  gcc_unreachable ();\n+\t\t}\n+\t      tree node = build_omp_clause (input_location, clause_code);\n \t      if (n->expr == NULL || n->expr->ref->u.ar.type == AR_FULL)\n \t\t{\n \t\t  tree decl = gfc_get_symbol_decl (n->sym);"}, {"sha": "1185917c9131a647999d2234ed16fa40a16927f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -1,3 +1,14 @@\n+2015-10-27  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    James Norris  <jnorris@codesourcery.com>\n+\n+\tPR fortran/63865\n+\t* gfortran.dg/goacc/coarray.f95: Expect the OpenACC cache\n+\tdirective to work.\n+\t* gfortran.dg/goacc/loop-1.f95: Likewise.\n+\t* gfortran.dg/goacc/cache-1.f95: Likewise, and extend testing.\n+\t* gfortran.dg/goacc/cray.f95: Likewise.\n+\t* gfortran.dg/goacc/parameter.f95: Likewise.\n+\n  2015-10-27  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/68108"}, {"sha": "2aa9e05362703d622cc21ada4442c78644cdcad2", "filename": "gcc/testsuite/gfortran.dg/goacc/cache-1.f95", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcache-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcache-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcache-1.f95?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -3,10 +3,15 @@\n \n program test\n   implicit none\n-  integer :: i, d(10)\n+  integer :: i, d(10), e(5,13)\n \n   do concurrent (i=1:5)\n     !$acc cache (d)\n+    !$acc cache (d(1:3))\n+    !$acc cache (d(i:i+2))\n+\n+    !$acc cache (e)\n+    !$acc cache (e(1:3,2:4))\n+    !$acc cache (e(i:i+2,i+1:i+3))\n   enddo\n end\n-! { dg-prune-output \"unimplemented\" }"}, {"sha": "130ffc3ce9dbcffb81ccc05adc79961a37a86362", "filename": "gcc/testsuite/gfortran.dg/goacc/coarray.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray.f95?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -9,13 +9,15 @@ subroutine oacc1(a)\n     implicit none\n     integer :: i\n     integer, codimension[*] :: a\n+    ! { dg-excess-errors \"sorry, unimplemented: directive not yet implemented\" }\n     !$acc declare device_resident (a)\n     !$acc data copy (a)\n     !$acc end data\n     !$acc data deviceptr (a)\n     !$acc end data\n     !$acc parallel private (a)\n     !$acc end parallel\n+    ! { dg-excess-errors \"sorry, unimplemented: directive not yet implemented\" }\n     !$acc host_data use_device (a)\n     !$acc end host_data\n     !$acc parallel loop reduction(+:a)\n@@ -32,4 +34,3 @@ subroutine oacc1(a)\n     !$acc update self (a)\n   end subroutine oacc1\n end module test\n-! { dg-prune-output \"ACC cache unimplemented\" }"}, {"sha": "a35ab0dc995e4f8ef859d79c9e100d3bf51ee582", "filename": "gcc/testsuite/gfortran.dg/goacc/cray.f95", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcray.f95?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -24,8 +24,7 @@ subroutine oacc1\n     !$acc end parallel loop\n     !$acc parallel loop\n     do i = 1,5\n-      ! Subarrays are not implemented yet\n-      !$acc cache (pointee) ! TODO: This must fail, as in openacc-1_0-branch\n+      !$acc cache (pointee) ! { dg-error \"Cray pointee\" }\n     enddo\n     !$acc end parallel loop\n     !$acc update device (pointee) ! { dg-error \"Cray pointee\" }\n@@ -53,4 +52,3 @@ subroutine oacc1\n     !$acc update self (ptr)\n   end subroutine oacc1\n end module test\n-! { dg-prune-output \"ACC cache unimplemented\" }"}, {"sha": "817039f5ac590d6710ae7d049b0612fa3acec1c0", "filename": "gcc/testsuite/gfortran.dg/goacc/loop-1.f95", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Floop-1.f95?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -168,4 +168,3 @@ subroutine test1\n end subroutine test1\n end module test\n ! { dg-prune-output \"Deleted\" }\n-! { dg-prune-output \"ACC cache unimplemented\" }"}, {"sha": "84274611915c0613c149160504e358fc16a2a950", "filename": "gcc/testsuite/gfortran.dg/goacc/parameter.f95", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/33497fd242760dcd0db7f69596a0aec21c735b35/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparameter.f95?ref=33497fd242760dcd0db7f69596a0aec21c735b35", "patch": "@@ -21,12 +21,11 @@ subroutine oacc1\n     !$acc end parallel loop\n     !$acc parallel loop\n     do i = 1,5\n-      !$acc cache (a) ! TODO: This must fail, as in openacc-1_0-branch\n+      !$acc cache (a) ! { dg-error \"not a variable\" }\n     enddo\n     !$acc end parallel loop\n     !$acc update device (a) ! { dg-error \"not a variable\" }\n     !$acc update host (a) ! { dg-error \"not a variable\" }\n     !$acc update self (a) ! { dg-error \"not a variable\" }\n   end subroutine oacc1\n end module test\n-! { dg-prune-output \"ACC cache unimplemented\" }"}]}