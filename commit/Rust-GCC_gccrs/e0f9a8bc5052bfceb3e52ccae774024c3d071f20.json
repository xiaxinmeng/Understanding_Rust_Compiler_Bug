{"sha": "e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBmOWE4YmM1MDUyYmZjZWIzZTUyY2NhZTc3NDAyNGMzZDA3MWYyMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-08-19T18:48:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-08-19T18:48:58Z"}, "message": "typeck.c (build_binary_op_nodefault): Warn on use of NULL in arithmetic.\n\n\t* typeck.c (build_binary_op_nodefault): Warn on use of NULL in\n\tarithmetic.\n\t* except.c (build_throw): Warn when NULL is thrown, even with\n\t-ansi.  Use ansi_null_node, rather than integer_zero_node, in the\n\tthrown expression.\n\nFrom-SVN: r21863", "tree": {"sha": "7407d7664089d119c0f773a50038ffdfd571132a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7407d7664089d119c0f773a50038ffdfd571132a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/comments", "author": null, "committer": null, "parents": [{"sha": "893779cc020424b6555cb851fd2659597174461a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893779cc020424b6555cb851fd2659597174461a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893779cc020424b6555cb851fd2659597174461a"}], "stats": {"total": 47, "additions": 33, "deletions": 14}, "files": [{"sha": "7cd9e51bcd96a339eb37d589d58d677677612702", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "patch": "@@ -1,13 +1,19 @@\n 1998-08-19  Mark Mitchell  <mark@markmitchell.com>\n \n+\t* typeck.c (build_binary_op_nodefault): Warn on use of NULL in\n+\tarithmetic.\n+\t* except.c (build_throw): Warn when NULL is thrown, even with\n+\t-ansi.  Use ansi_null_node, rather than integer_zero_node, in the\n+\tthrown expression.\n+\t\n \t* cp-tree.h (ansi_null_node): New variable.\n \t* decl.c (ansi_null_node): New variable.\n \t(init_decl_processing): Initialize its type.\n \t* lex.c (init_parse): Initialize its value.  Use ansi_null_node\n \tfor null_node in non-ANSI mode.\n \t* typeck.c (build_binary_op_nodefault): Use ansi_null_node in\n \tplace of null_node to avoid spurious errors.\n-\t\n+\n 1998-08-17  Mark Mitchell  <mark@markmitchell.com>\n \n \t* cp-tree.h (enter_scope_of): New function."}, {"sha": "9a23948521338085ef01e2611e54d951b9ad1305", "filename": "gcc/cp/except.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "patch": "@@ -1277,10 +1277,10 @@ build_throw (e)\n   if (processing_template_decl)\n     return build_min (THROW_EXPR, void_type_node, e);\n \n-  if (! flag_ansi && e == null_node)\n+  if (e == null_node)\n     {\n-      cp_warning (\"throwing NULL\");\n-      e = integer_zero_node;\n+      cp_warning (\"throwing NULL, which has integral, not pointer type\");\n+      e = ansi_null_node;\n     }\n \n   e = build1 (THROW_EXPR, void_type_node, e);"}, {"sha": "00a1add42b365d50dbaacff2ec75a6b419f1bd87", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "patch": "@@ -3248,23 +3248,21 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n      things like `7 != NULL' result in errors about comparisons\n      between pointers and integers.  So, here, we replace __null with\n      an appropriate null pointer constant.  */\n-  if (orig_op0 == null_node)\n-    orig_op0 = ansi_null_node;\n-  if (orig_op1 == null_node)\n-    orig_op1 = ansi_null_node;\n+  op0 = (orig_op0 == null_node) ? ansi_null_node : orig_op0;\n+  op1 = (orig_op1 == null_node) ? ansi_null_node : orig_op1;\n \n   /* Apply default conversions.  */\n   if (code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR\n       || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR\n       || code == TRUTH_XOR_EXPR)\n     {\n-      op0 = decay_conversion (orig_op0);\n-      op1 = decay_conversion (orig_op1);\n+      op0 = decay_conversion (op0);\n+      op1 = decay_conversion (op1);\n     }\n   else\n     {\n-      op0 = default_conversion (orig_op0);\n-      op1 = default_conversion (orig_op1);\n+      op0 = default_conversion (op0);\n+      op1 = default_conversion (op1);\n     }\n \n   type0 = TREE_TYPE (op0);\n@@ -3963,6 +3961,21 @@ build_binary_op_nodefault (code, orig_op0, orig_op1, error_code)\n       return error_mark_node;\n     }\n \n+  if (/* If OP0 is NULL and OP1 is not a pointer, or vice versa.  */\n+      (orig_op0 == null_node\n+       && TREE_CODE (TREE_TYPE (orig_op1)) != POINTER_TYPE)\n+      /* Or vice versa.  */\n+      || (orig_op1 == null_node\n+\t  && TREE_CODE (TREE_TYPE (orig_op0)) != POINTER_TYPE)\n+      /* Or, both are NULL and the operation was not a comparison.  */\n+      || (orig_op0 == null_node && orig_op1 == null_node \n+\t  && code != EQ_EXPR && code != NE_EXPR))\n+    /* Some sort of arithmetic operation involving NULL was\n+       performed.  Note that pointer-difference and pointer-addition\n+       have already been handled above, and so we don't end up here in\n+       that case.  */\n+    cp_warning (\"NULL used in arithmetic\");\n+\n   if (! converted)\n     {\n       if (TREE_TYPE (op0) != result_type)"}, {"sha": "9965a4387a47071d543a1737799b1153216e48b9", "filename": "gcc/testsuite/g++.old-deja/g++.other/null1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0f9a8bc5052bfceb3e52ccae774024c3d071f20/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fnull1.C?ref=e0f9a8bc5052bfceb3e52ccae774024c3d071f20", "patch": "@@ -7,6 +7,6 @@ void f()\n   int i;\n   float f;\n \n-  i != NULL;\n-  f != NULL;\n+  i != NULL; // WARNING - NULL used in arithmetic\n+  f != NULL; // WARNING - NULL used in arithmetic\n }"}]}