{"sha": "a9d3cc3f1a1da3d0e5044249891594933e37ab20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkM2NjM2YxYTFkYTNkMGU1MDQ0MjQ5ODkxNTk0OTMzZTM3YWIyMA==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "1999-10-16T00:43:59Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "1999-10-16T00:43:59Z"}, "message": "* config/c4x/c4x.md (HF mode patterns):  Add missing modes.\n\nFrom-SVN: r30034", "tree": {"sha": "43a44a1fac01916d75ec2c4c370a2e40efb6fc20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43a44a1fac01916d75ec2c4c370a2e40efb6fc20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d3cc3f1a1da3d0e5044249891594933e37ab20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d3cc3f1a1da3d0e5044249891594933e37ab20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d3cc3f1a1da3d0e5044249891594933e37ab20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d3cc3f1a1da3d0e5044249891594933e37ab20/comments", "author": null, "committer": null, "parents": [{"sha": "0dced2c729c164873a10bccdbfff8d5dc6d2a820", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dced2c729c164873a10bccdbfff8d5dc6d2a820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dced2c729c164873a10bccdbfff8d5dc6d2a820"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "54715100b6e344c68f8c0fdbedd0c395343c2c8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d3cc3f1a1da3d0e5044249891594933e37ab20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d3cc3f1a1da3d0e5044249891594933e37ab20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9d3cc3f1a1da3d0e5044249891594933e37ab20", "patch": "@@ -1,3 +1,7 @@\n+Sat Oct 16 13:42:29 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* config/c4x/c4x.md (HF mode patterns):  Add missing modes.\n+\n Sat Oct 16 13:37:46 1999  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n \n \t* config/c4x/c4x.md (movstrqi_small): Utilise parallel move"}, {"sha": "238a8e65cb13a0d8f8e3b01c04c5b6e16aa415e1", "filename": "gcc/config/c4x/c4x.md", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d3cc3f1a1da3d0e5044249891594933e37ab20/gcc%2Fconfig%2Fc4x%2Fc4x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d3cc3f1a1da3d0e5044249891594933e37ab20/gcc%2Fconfig%2Fc4x%2Fc4x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.md?ref=a9d3cc3f1a1da3d0e5044249891594933e37ab20", "patch": "@@ -5562,7 +5562,8 @@\n        (match_operand:HF 1 \"memory_operand\" \"\"))]\n  \"reload_completed\"\n  [(set (match_dup 0) (float_extend:HF (match_dup 2)))\n-  (set (match_dup 0) (unspec[(subreg:QI (match_dup 0) 0) (match_dup 3)] 8))]\n+  (set (match_dup 0) (unspec:HF [(subreg:QI (match_dup 0) 0)\n+                                            (match_dup 3)] 8))]\n  \"operands[2] = c4x_operand_subword (operands[1], 0, 1, HFmode);\n   operands[3] = c4x_operand_subword (operands[1], 1, 1, HFmode);\n   PUT_MODE (operands[2], QFmode);\n@@ -5573,7 +5574,8 @@\n        (match_operand:HF 1 \"const_operand\" \"\"))]\n  \"reload_completed && 0\"\n  [(set (match_dup 0) (float_extend:HF (match_dup 2)))\n-  (set (match_dup 0) (unspec[(subreg:QI (match_dup 0) 0) (match_dup 3)] 8))]\n+  (set (match_dup 0) (unspec:HF [(subreg:QI (match_dup 0) 0)\n+                                            (match_dup 3)] 8))]\n  \"operands[2] = c4x_operand_subword (operands[1], 0, 1, HFmode);\n   operands[3] = c4x_operand_subword (operands[1], 1, 1, HFmode);\n   PUT_MODE (operands[2], QFmode);\n@@ -5601,7 +5603,7 @@\n (define_insn \"*loadhf_int\"\n  [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n        (unspec:HF [(subreg:QI (match_dup 0) 0)\n-               (match_operand:QI 1 \"src_operand\" \"rIm\")] 8))]\n+                   (match_operand:QI 1 \"src_operand\" \"rIm\")] 8))]\n  \"\"\n  \"@\n   ldiu\\\\t%1,%0\"\n@@ -5689,15 +5691,15 @@\n                    (float_extend:HF (mem:QF (post_dec:QI (reg:QI 20)))))\n               (clobber (reg:CC 21))])\n    (parallel [(set (match_dup 0)\n-                   (unspec[(subreg:QI (match_dup 0) 0)\n+                   (unspec:HF [(subreg:QI (match_dup 0) 0)\n                    (mem:QI (post_dec:QI (reg:QI 20)))] 8))\n               (clobber (reg:CC 21))])]\n  \"\")\n \n (define_insn \"*pophf_int\"\n  [(set (match_operand:HF 0 \"reg_operand\" \"=h\")\n        (unspec:HF [(subreg:QI (match_dup 0) 0)\n-               (mem:QI (post_dec:QI (reg:QI 20)))] 8))\n+                   (mem:QI (post_dec:QI (reg:QI 20)))] 8))\n   (clobber (reg:CC 21))]\n  \"\"\n  \"@\n@@ -6808,7 +6810,7 @@\n (define_insn \"cmphi_cc\"\n   [(set (reg:CC 21)\n         (unspec:CC [(compare:CC (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n-                             (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n+                                (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n    (clobber (match_scratch:QI 2 \"=&d,&d\"))\n    (clobber (match_scratch:QI 3 \"=&c,&c\"))]\n   \"valid_operands (COMPARE, operands, HImode)\"\n@@ -6823,9 +6825,8 @@\n \n (define_insn \"cmphi_cc_noov\"\n   [(set (reg:CC_NOOV 21)\n-        (unspec:CC_NOOV [\n-          (compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n-                           (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n+        (unspec:CC_NOOV [(compare:CC_NOOV (match_operand:HI 0 \"src_operand\" \"rR,rS<>\")\n+                                     (match_operand:HI 1 \"src_operand\" \"R,rS<>\"))] 4))\n    (clobber (match_scratch:QI 2 \"=&d,&d\"))\n    (clobber (match_scratch:QI 3 \"=&c,&c\"))]\n   \"valid_operands (COMPARE, operands, HImode)\"\n@@ -6903,6 +6904,7 @@\n ;\n ; Which moves the bCC condition outside the inner loop for free.\n ;\n+\n (define_peephole\n   [(set (pc) (if_then_else (match_operator 3 \"comparison_operator\"\n                            [(reg:CC 21) (const_int 0)])\n@@ -6918,8 +6920,7 @@\n             (pc)))\n      (set (match_dup 0)\n           (plus:QI (match_dup 0)\n-                   (const_int -1)))\n-     (clobber (reg:CC_NOOV 21))])]\n+                   (const_int -1)))])]\n   \"! c4x_label_conflict (insn, operands[2], operands[1])\"\n   \"db%I3\\\\t%0,%l1\\\\n\\\\tb%3\\\\t%l2\"\n   [(set_attr \"type\" \"multi\")])\n@@ -6938,8 +6939,7 @@\n             (pc)))\n      (set (match_dup 0)\n           (plus:QI (match_dup 0)\n-                   (const_int -1)))\n-     (clobber (reg:CC_NOOV 21))])]\n+                   (const_int -1)))])]\n   \"! c4x_label_conflict (insn, operands[2], operands[1])\"\n   \"db%I3\\\\t%0,%l1\\\\n\\\\tb%3\\\\t%l2\"\n   [(set_attr \"type\" \"multi\")])\n@@ -6987,6 +6987,7 @@\n  \"\"\n  \"ldf\\\\t*%1++,%0\\\\n\\\\tldf\\\\t*%1++,%2\")\n \n+\n ; This peephole should be unnecessary with my patches to flow.c\n ; for better autoincrement detection\n (define_peephole"}]}