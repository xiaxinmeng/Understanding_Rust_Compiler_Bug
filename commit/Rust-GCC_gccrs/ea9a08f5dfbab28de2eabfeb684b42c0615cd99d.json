{"sha": "ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE5YTA4ZjVkZmJhYjI4ZGUyZWFiZmViNjg0YjQyYzA2MTVjZDk5ZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:59:02Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-06-14T13:59:02Z"}, "message": "cmd/cgo: make _cgo_flags consistent across runs\n    \n    The go tool will pass -I objdir as one of the flags, where objdir is\n    the temporary build directory. Remove that from _cgo_flags: we don't\n    need it, and it will be different each time.\n    \n    Sort the flags to avoid the unpredictable map iteration order.\n    \n    This matters for gccgo because for a package that uses cgo, the go\n    tool when building for gccgo will store the _cgo_flags file in the\n    archive. That means that we want to generate identical _cgo_flags for\n    every run.\n    \n    The test for this is the cmd/go testsuite, to follow in a future CL.\n    \n    Reviewed-on: https://go-review.googlesource.com/45692\n\nFrom-SVN: r249199", "tree": {"sha": "6ce4306631e5e2799767b4aab2de1bd3f442eb58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ce4306631e5e2799767b4aab2de1bd3f442eb58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/comments", "author": null, "committer": null, "parents": [{"sha": "1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1279f21fc520cc8c91ef4dd3a8938b7aa256d799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1279f21fc520cc8c91ef4dd3a8938b7aa256d799"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "1f600d3e312312e939c618acf0b3a3830544babd", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "patch": "@@ -1,4 +1,4 @@\n-bc785455a35bfa7d4b0a66781c7c3ef08a24a845\n+372e75503c1dc9a38d9978aa6b67631283d5d6dd\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "028804e4ab1428a718d4fbbd76d4166b2a6754e6", "filename": "libgo/go/cmd/cgo/gcc.go", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/libgo%2Fgo%2Fcmd%2Fcgo%2Fgcc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/libgo%2Fgo%2Fcmd%2Fcgo%2Fgcc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fcgo%2Fgcc.go?ref=ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "patch": "@@ -86,11 +86,29 @@ func (f *File) DiscardCgoDirectives() {\n // addToFlag appends args to flag. All flags are later written out onto the\n // _cgo_flags file for the build system to use.\n func (p *Package) addToFlag(flag string, args []string) {\n-\tp.CgoFlags[flag] = append(p.CgoFlags[flag], args...)\n \tif flag == \"CFLAGS\" {\n-\t\t// We'll also need these when preprocessing for dwarf information.\n+\t\t// We'll need these when preprocessing for dwarf information.\n \t\tp.GccOptions = append(p.GccOptions, args...)\n \t}\n+\n+\tskip := false\n+\tfor i, arg := range args {\n+\t\t// The go tool will pass us a -I option pointing to objdir;\n+\t\t// we don't need to record that for later, as the objdir\n+\t\t// will disappear anyhow.\n+\t\tif skip {\n+\t\t\t// Discard argument in \"-I objdir\" case.\n+\t\t\tskip = false\n+\t\t} else if strings.HasPrefix(arg, \"-I\") && strings.HasPrefix(arg[2:], *objDir) {\n+\t\t\t// This is -Iobjdir. Don't save this argument.\n+\t\t} else if arg == \"-I\" && i+1 < len(args) && strings.HasPrefix(args[i+1], *objDir) {\n+\t\t\t// This is -I objdir. Don't save this argument\n+\t\t\t// or the next one.\n+\t\t\tskip = true\n+\t\t} else {\n+\t\t\tp.CgoFlags[flag] = append(p.CgoFlags[flag], arg)\n+\t\t}\n+\t}\n }\n \n // splitQuoted splits the string s around each instance of one or more consecutive"}, {"sha": "a8292f22d3fea953bc2448d4bdcc681ebdfbb929", "filename": "libgo/go/cmd/cgo/out.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/libgo%2Fgo%2Fcmd%2Fcgo%2Fout.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea9a08f5dfbab28de2eabfeb684b42c0615cd99d/libgo%2Fgo%2Fcmd%2Fcgo%2Fout.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fcgo%2Fout.go?ref=ea9a08f5dfbab28de2eabfeb684b42c0615cd99d", "patch": "@@ -40,14 +40,19 @@ func (p *Package) writeDefs() {\n \tvar gccgoInit bytes.Buffer\n \n \tfflg := creat(*objDir + \"_cgo_flags\")\n+\tvar flags []string\n \tfor k, v := range p.CgoFlags {\n-\t\tfmt.Fprintf(fflg, \"_CGO_%s=%s\\n\", k, strings.Join(v, \" \"))\n+\t\tflags = append(flags, fmt.Sprintf(\"_CGO_%s=%s\", k, strings.Join(v, \" \")))\n \t\tif k == \"LDFLAGS\" && !*gccgo {\n \t\t\tfor _, arg := range v {\n \t\t\t\tfmt.Fprintf(fgo2, \"//go:cgo_ldflag %q\\n\", arg)\n \t\t\t}\n \t\t}\n \t}\n+\tsort.Strings(flags)\n+\tfor _, flag := range flags {\n+\t\tfmt.Fprintln(fflg, flag)\n+\t}\n \tfflg.Close()\n \n \t// Write C main file for using gcc to resolve imports."}]}