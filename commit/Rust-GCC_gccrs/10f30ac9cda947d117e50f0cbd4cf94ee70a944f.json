{"sha": "10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBmMzBhYzljZGE5NDdkMTE3ZTUwZjBjYmQ0Y2Y5NGVlNzBhOTQ0Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-16T11:58:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-16T11:58:35Z"}, "message": "re PR tree-optimization/91756 (g++.dg/lto/alias-3 FAILs)\n\n2019-09-16  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91756\n\tPR tree-optimization/87132\n\t* tree-ssa-alias.h (enum translate_flags): New.\n\t(get_continuation_for_phi): Use it instead of simple bool flag.\n\t(walk_non_aliased_vuses): Likewise.\n\t* tree-ssa-alias.c (maybe_skip_until): Adjust.\n\t(get_continuation_for_phi): When looking across backedges only\n\tdisallow valueization.\n\t(walk_non_aliased_vuses): Adjust.\n\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid valueization\n\tif requested.\n\n\t* gcc.dg/tree-ssa/ssa-fre-81.c: New testcase.\n\nFrom-SVN: r275747", "tree": {"sha": "e3d30cc89a219df83c072e2c386756aa17aff19d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3d30cc89a219df83c072e2c386756aa17aff19d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ddc1a45b373ce98929d0d67e8c97ab6783236c40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddc1a45b373ce98929d0d67e8c97ab6783236c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddc1a45b373ce98929d0d67e8c97ab6783236c40"}], "stats": {"total": 110, "additions": 88, "deletions": 22}, "files": [{"sha": "49b7902e3a853feab65de30531624597014b06ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -1,3 +1,17 @@\n+2019-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91756\n+\tPR tree-optimization/87132\n+\t* tree-ssa-alias.h (enum translate_flags): New.\n+\t(get_continuation_for_phi): Use it instead of simple bool flag.\n+\t(walk_non_aliased_vuses): Likewise.\n+\t* tree-ssa-alias.c (maybe_skip_until): Adjust.\n+\t(get_continuation_for_phi): When looking across backedges only\n+\tdisallow valueization.\n+\t(walk_non_aliased_vuses): Adjust.\n+\t* tree-ssa-sccvn.c (vn_reference_lookup_3): Avoid valueization\n+\tif requested.\n+\n 2019-09-14  Kewen Lin  <linkw@gcc.gnu.org>\n \n \tPR middle-end/80791"}, {"sha": "b893ed0d462a697acf30e270db77ab8e76a449f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -1,3 +1,9 @@\n+2019-09-16  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91756\n+\tPR tree-optimization/87132\n+\t* gcc.dg/tree-ssa/ssa-fre-81.c: New testcase.\n+\n 2019-09-15  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/91740 - ICE with constexpr call and ?: in ARRAY_REF."}, {"sha": "e88f6663aaae8b883bd1baf068afc0c9feaedcb0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-81.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-81.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-81.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-81.c?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-fre1-details\" } */\n+\n+struct a\n+{\n+  int foo,bar;\n+};\n+struct b\n+{\n+  struct a a[10];\n+};\n+struct b b, *bptr=&b, *bptr2=&b;\n+int j;\n+int i;\n+int n=1;\n+\n+int\n+main ()\n+{\n+  int jj=j;\n+  bptr2->a[jj].bar = 0;\n+  for (int i=0; i<n; i++)\n+    bptr->a[i].foo=1;\n+  if (!__builtin_constant_p (bptr2->a[jj].bar == 0))\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump \"Replaced __builtin_constant_p \\\\\\(\\[^)\\]*\\\\\\) with 1\" \"fre1\" } } */"}, {"sha": "52cda38c2aaad5778a48e3652b5711e27da629f2", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -3150,7 +3150,8 @@ static bool\n maybe_skip_until (gimple *phi, tree &target, basic_block target_bb,\n \t\t  ao_ref *ref, tree vuse, bool tbaa_p, unsigned int &limit,\n \t\t  bitmap *visited, bool abort_on_visited,\n-\t\t  void *(*translate)(ao_ref *, tree, void *, bool *),\n+\t\t  void *(*translate)(ao_ref *, tree, void *, translate_flags *),\n+\t\t  translate_flags disambiguate_only,\n \t\t  void *data)\n {\n   basic_block bb = gimple_bb (phi);\n@@ -3185,7 +3186,7 @@ maybe_skip_until (gimple *phi, tree &target, basic_block target_bb,\n \t    return !abort_on_visited;\n \t  vuse = get_continuation_for_phi (def_stmt, ref, tbaa_p, limit,\n \t\t\t\t\t   visited, abort_on_visited,\n-\t\t\t\t\t   translate, data);\n+\t\t\t\t\t   translate, data, disambiguate_only);\n \t  if (!vuse)\n \t    return false;\n \t  continue;\n@@ -3200,9 +3201,9 @@ maybe_skip_until (gimple *phi, tree &target, basic_block target_bb,\n \t  --limit;\n \t  if (stmt_may_clobber_ref_p_1 (def_stmt, ref, tbaa_p))\n \t    {\n-\t      bool disambiguate_only = true;\n+\t      translate_flags tf = disambiguate_only;\n \t      if (translate\n-\t\t  && (*translate) (ref, vuse, data, &disambiguate_only) == NULL)\n+\t\t  && (*translate) (ref, vuse, data, &tf) == NULL)\n \t\t;\n \t      else\n \t\treturn false;\n@@ -3233,8 +3234,10 @@ tree\n get_continuation_for_phi (gimple *phi, ao_ref *ref, bool tbaa_p,\n \t\t\t  unsigned int &limit, bitmap *visited,\n \t\t\t  bool abort_on_visited,\n-\t\t\t  void *(*translate)(ao_ref *, tree, void *, bool *),\n-\t\t\t  void *data)\n+\t\t\t  void *(*translate)(ao_ref *, tree, void *,\n+\t\t\t\t\t     translate_flags *),\n+\t\t\t  void *data,\n+\t\t\t  translate_flags disambiguate_only)\n {\n   unsigned nargs = gimple_phi_num_args (phi);\n \n@@ -3276,13 +3279,15 @@ get_continuation_for_phi (gimple *phi, ao_ref *ref, bool tbaa_p,\n       else if (! maybe_skip_until (phi, arg0, dom, ref, arg1, tbaa_p,\n \t\t\t\t   limit, visited,\n \t\t\t\t   abort_on_visited,\n-\t\t\t\t   /* Do not translate when walking over\n+\t\t\t\t   translate,\n+\t\t\t\t   /* Do not valueize when walking over\n \t\t\t\t      backedges.  */\n \t\t\t\t   dominated_by_p\n \t\t\t\t     (CDI_DOMINATORS,\n \t\t\t\t      gimple_bb (SSA_NAME_DEF_STMT (arg1)),\n \t\t\t\t      phi_bb)\n-\t\t\t\t   ? NULL : translate, data))\n+\t\t\t\t   ? TR_DISAMBIGUATE\n+\t\t\t\t   : disambiguate_only, data))\n \treturn NULL_TREE;\n     }\n \n@@ -3320,7 +3325,8 @@ get_continuation_for_phi (gimple *phi, ao_ref *ref, bool tbaa_p,\n void *\n walk_non_aliased_vuses (ao_ref *ref, tree vuse, bool tbaa_p,\n \t\t\tvoid *(*walker)(ao_ref *, tree, void *),\n-\t\t\tvoid *(*translate)(ao_ref *, tree, void *, bool *),\n+\t\t\tvoid *(*translate)(ao_ref *, tree, void *,\n+\t\t\t\t\t   translate_flags *),\n \t\t\ttree (*valueize)(tree),\n \t\t\tunsigned &limit, void *data)\n {\n@@ -3373,7 +3379,7 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse, bool tbaa_p,\n \t    {\n \t      if (!translate)\n \t\tbreak;\n-\t      bool disambiguate_only = false;\n+\t      translate_flags disambiguate_only = TR_TRANSLATE;\n \t      res = (*translate) (ref, vuse, data, &disambiguate_only);\n \t      /* Failed lookup and translation.  */\n \t      if (res == (void *)-1)\n@@ -3385,7 +3391,7 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse, bool tbaa_p,\n \t      else if (res != NULL)\n \t\tbreak;\n \t      /* Translation succeeded, continue walking.  */\n-\t      translated = translated || !disambiguate_only;\n+\t      translated = translated || disambiguate_only == TR_TRANSLATE;\n \t    }\n \t  vuse = gimple_vuse (def_stmt);\n \t}"}, {"sha": "6d72c2fcdc2791a68bd51fe4d83c7e09dfe14b87", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -132,13 +132,18 @@ extern bool call_may_clobber_ref_p (gcall *, tree);\n extern bool call_may_clobber_ref_p_1 (gcall *, ao_ref *);\n extern bool stmt_kills_ref_p (gimple *, tree);\n extern bool stmt_kills_ref_p (gimple *, ao_ref *);\n+enum translate_flags\n+  { TR_TRANSLATE, TR_VALUEIZE_AND_DISAMBIGUATE, TR_DISAMBIGUATE };\n extern tree get_continuation_for_phi (gimple *, ao_ref *, bool,\n \t\t\t\t      unsigned int &, bitmap *, bool,\n-\t\t\t\t      void *(*)(ao_ref *, tree, void *, bool *),\n-\t\t\t\t      void *);\n+\t\t\t\t      void *(*)(ao_ref *, tree, void *,\n+\t\t\t\t\t\ttranslate_flags *),\n+\t\t\t\t      void *, translate_flags\n+\t\t\t\t        = TR_VALUEIZE_AND_DISAMBIGUATE);\n extern void *walk_non_aliased_vuses (ao_ref *, tree, bool,\n \t\t\t\t     void *(*)(ao_ref *, tree, void *),\n-\t\t\t\t     void *(*)(ao_ref *, tree, void *, bool *),\n+\t\t\t\t     void *(*)(ao_ref *, tree, void *,\n+\t\t\t\t\t       translate_flags *),\n \t\t\t\t     tree (*)(tree), unsigned &, void *);\n extern int walk_aliased_vdefs (ao_ref *, tree,\n \t\t\t       bool (*)(ao_ref *, tree, void *),"}, {"sha": "c29e2de61acdf69dbf6af4594d9b8c8569044a52", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10f30ac9cda947d117e50f0cbd4cf94ee70a944f/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=10f30ac9cda947d117e50f0cbd4cf94ee70a944f", "patch": "@@ -2189,7 +2189,7 @@ adjust_offsets_for_equal_base_address (tree base1, poly_int64 *offset1,\n \n static void *\n vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n-\t\t       bool *disambiguate_only)\n+\t\t       translate_flags *disambiguate_only)\n {\n   vn_walk_cb_data *data = (vn_walk_cb_data *)data_;\n   vn_reference_t vr = data->vr;\n@@ -2210,8 +2210,11 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n       lhs_ops.truncate (0);\n       basic_block saved_rpo_bb = vn_context_bb;\n       vn_context_bb = gimple_bb (def_stmt);\n-      copy_reference_ops_from_ref (lhs, &lhs_ops);\n-      lhs_ops = valueize_refs_1 (lhs_ops, &valueized_anything, true);\n+      if (*disambiguate_only <= TR_VALUEIZE_AND_DISAMBIGUATE)\n+\t{\n+\t  copy_reference_ops_from_ref (lhs, &lhs_ops);\n+\t  lhs_ops = valueize_refs_1 (lhs_ops, &valueized_anything, true);\n+\t}\n       vn_context_bb = saved_rpo_bb;\n       if (valueized_anything)\n \t{\n@@ -2221,7 +2224,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t  if (lhs_ref_ok\n \t      && !refs_may_alias_p_1 (ref, &lhs_ref, data->tbaa_p))\n \t    {\n-\t      *disambiguate_only = true;\n+\t      *disambiguate_only = TR_VALUEIZE_AND_DISAMBIGUATE;\n \t      return NULL;\n \t    }\n \t}\n@@ -2248,7 +2251,9 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    }\n \t  if (!refs_may_alias_p_1 (&data->orig_ref, lref, data->tbaa_p))\n \t    {\n-\t      *disambiguate_only = true;\n+\t      *disambiguate_only = (valueized_anything\n+\t\t\t\t    ? TR_VALUEIZE_AND_DISAMBIGUATE\n+\t\t\t\t    : TR_DISAMBIGUATE);\n \t      return NULL;\n \t    }\n \t}\n@@ -2290,7 +2295,8 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    }\n \t}\n     }\n-  else if (gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL)\n+  else if (*disambiguate_only <= TR_VALUEIZE_AND_DISAMBIGUATE\n+\t   && gimple_call_builtin_p (def_stmt, BUILT_IN_NORMAL)\n \t   && gimple_call_num_args (def_stmt) <= 4)\n     {\n       /* For builtin calls valueize its arguments and call the\n@@ -2319,15 +2325,15 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *data_,\n \t    gimple_call_set_arg (def_stmt, i, oldargs[i]);\n \t  if (!res)\n \t    {\n-\t      *disambiguate_only = true;\n+\t      *disambiguate_only = TR_VALUEIZE_AND_DISAMBIGUATE;\n \t      return NULL;\n \t    }\n \t}\n     }\n \n   /* If we are looking for redundant stores do not create new hashtable\n      entries from aliasing defs with made up alias-sets.  */\n-  if (*disambiguate_only || !data->tbaa_p)\n+  if (*disambiguate_only > TR_TRANSLATE || !data->tbaa_p)\n     return (void *)-1;\n \n   /* If we cannot constrain the size of the reference we cannot"}]}