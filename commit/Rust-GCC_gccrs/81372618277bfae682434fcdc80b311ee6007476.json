{"sha": "81372618277bfae682434fcdc80b311ee6007476", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEzNzI2MTgyNzdiZmFlNjgyNDM0ZmNkYzgwYjMxMWVlNjAwNzQ3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-11T07:27:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-11-11T07:29:17Z"}, "message": "fortran: Fix up gfc_typename CHARACTER length handling [PR97768]\n\nThe first testcase below ICEs when f951 is 32-bit (or 64-bit big-endian).\nThe problem is that ex->ts.u.cl && ex->ts.u.cl->length are both non-NULL,\nbut ex->ts.u.cl->length->expr_type is not EXPR_CONSTANT, but EXPR_FUNCTION.\nvalue.function.actual and value.function.name are in that case pointers,\nbut value._mp_alloc and value._mp_size are 4 byte integers no matter what.\nSo, in 64-bit little-endian the function returns most of the time incorrect\nCHARACTER(0) because the most significant 32 bits of the\nvalue.function.actual pointer are likely 0.\nAnyway, the following patch is an attempt to get all the cases right.\nUses ex->value.character.length only for ex->expr_type == EXPR_CONSTANT\n(i.e. CHARACTER literals), handles the deferred lengths, assumed lengths,\nknown constant lengths and finally if the length is something other,\njust doesn't print it, i.e. prints just CHARACTER (for default kind)\nor CHARACTER(KIND=4) (for e.g. kind 4).\n\n2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR fortran/97768\ngcc/fortran/\n\t* misc.c (gfc_typename): Use ex->value.character.length only if\n\tex->expr_type == EXPR_CONSTANT.  If ex->ts.deferred, print : instead\n\tof length.  If ex->ts.u.cl && ex->ts.u.cl->length == NULL, print *\n\tinstead of length.  Otherwise if character length is non-constant,\n\tprint just CHARACTER or CHARACTER(KIND=N).\ngcc/testsuite/\n\t* gfortran.dg/pr97768_1.f90: New test.\n\t* gfortran.dg/pr97768_2.f90: New test.", "tree": {"sha": "5b3f8e8eea65ef33aa42f6d0fdad4ae4acbb971f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b3f8e8eea65ef33aa42f6d0fdad4ae4acbb971f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81372618277bfae682434fcdc80b311ee6007476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81372618277bfae682434fcdc80b311ee6007476", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81372618277bfae682434fcdc80b311ee6007476", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81372618277bfae682434fcdc80b311ee6007476/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "693a79a355e13b3cf381d4adebe3fcea2736c8f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/693a79a355e13b3cf381d4adebe3fcea2736c8f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/693a79a355e13b3cf381d4adebe3fcea2736c8f0"}], "stats": {"total": 106, "additions": 103, "deletions": 3}, "files": [{"sha": "e9b87aa9c6a99f88f1f7d46ce43f3e171a412c86", "filename": "gcc/fortran/misc.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ffortran%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ffortran%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmisc.c?ref=81372618277bfae682434fcdc80b311ee6007476", "patch": "@@ -224,10 +224,32 @@ gfc_typename (gfc_expr *ex)\n \n   if (ex->ts.type == BT_CHARACTER)\n     {\n-      if (ex->ts.u.cl && ex->ts.u.cl->length)\n-\tlength = gfc_mpz_get_hwi (ex->ts.u.cl->length->value.integer);\n-      else\n+      if (ex->expr_type == EXPR_CONSTANT)\n \tlength = ex->value.character.length;\n+      else if (ex->ts.deferred)\n+\t{\n+\t  if (ex->ts.kind == gfc_default_character_kind)\n+\t    return \"CHARACTER(:)\";\n+\t  sprintf (buffer, \"CHARACTER(:,%d)\", ex->ts.kind);\n+\t  return buffer;\n+\t}\n+      else if (ex->ts.u.cl && ex->ts.u.cl->length == NULL)\n+\t{\n+\t  if (ex->ts.kind == gfc_default_character_kind)\n+\t    return \"CHARACTER(*)\";\n+\t  sprintf (buffer, \"CHARACTER(*,%d)\", ex->ts.kind);\n+\t  return buffer;\n+\t}\n+      else if (ex->ts.u.cl == NULL\n+\t       || ex->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n+\t{\n+\t  if (ex->ts.kind == gfc_default_character_kind)\n+\t    return \"CHARACTER\";\n+\t  sprintf (buffer, \"CHARACTER(KIND=%d)\", ex->ts.kind);\n+\t  return buffer;\n+\t}\n+      else\n+\tlength = gfc_mpz_get_hwi (ex->ts.u.cl->length->value.integer);\n       if (ex->ts.kind == gfc_default_character_kind)\n \tsprintf (buffer, \"CHARACTER(\" HOST_WIDE_INT_PRINT_DEC \")\", length);\n       else"}, {"sha": "fce01e36a706edd3581a377fe11d5a38f1570529", "filename": "gcc/testsuite/gfortran.dg/pr97768_1.f90", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_1.f90?ref=81372618277bfae682434fcdc80b311ee6007476", "patch": "@@ -0,0 +1,25 @@\n+! PR fortran/97768\n+! { dg-do compile }\n+\n+module pr97768_1\n+  interface operator(.in.)\n+    module procedure substr_in_str\n+  end interface\n+contains\n+  pure function to_upper (in_str) result (string)\n+    character(len=*), intent(in) :: in_str\n+    character(len=len(in_str)) :: string\n+    string = in_str\n+  end function to_upper\n+  logical pure function substr_in_str (substring, string)\n+    character(len=*), intent(in) :: string, substring\n+    substr_in_str=.false.\n+  end function\n+end module\n+function foo ()\n+  use pr97768_1, only : to_upper, operator(.in.)\n+  logical :: foo\n+  character(len=8) :: str\n+  str = 'abcde'\n+  foo = 'b' .in. to_upper (str)\n+end function foo"}, {"sha": "5dc198720b6330d7eb048d8958b843d3c4e6ac01", "filename": "gcc/testsuite/gfortran.dg/pr97768_2.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81372618277bfae682434fcdc80b311ee6007476/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr97768_2.f90?ref=81372618277bfae682434fcdc80b311ee6007476", "patch": "@@ -0,0 +1,53 @@\n+! PR fortran/97768\n+! { dg-do compile }\n+\n+module pr97768_2\n+  interface operator(.in.)\n+    module procedure substr_in_str\n+  end interface\n+contains\n+  pure function to_upper (in_str) result (string)\n+    character(len=*), intent(in) :: in_str\n+    character(len=len(in_str)) :: string\n+    string = in_str\n+  end function to_upper\n+  logical pure function substr_in_str (substring, string)\n+    character(len=*), intent(in) :: string, substring\n+    substr_in_str=.false.\n+  end function\n+end module\n+function foo ()\n+  use pr97768_2, only : to_upper, operator(.in.)\n+  logical :: foo\n+  character(len=8) :: str\n+  str = 'abcde'\n+  foo = to_upper (str) .in. 32    ! { dg-error \"are CHARACTER/INTEGER\" }\n+end function foo\n+function bar (str)\n+  use pr97768_2, only : operator(.in.)\n+  logical :: bar\n+  character(len=*) :: str\n+  foo = str .in. 32               ! { dg-error \"are CHARACTER\\\\(\\\\*\\\\)/INTEGER\" }\n+end function bar\n+function baz (lenstr)\n+  use pr97768_2, only : operator(.in.)\n+  logical :: baz\n+  integer :: lenstr\n+  character(len=lenstr) :: str\n+  str = 'abc'\n+  foo = str .in. 32               ! { dg-error \"are CHARACTER/INTEGER\" }\n+end function baz\n+function qux ()\n+  use pr97768_2, only : operator(.in.)\n+  logical :: qux\n+  character(len=8) :: str\n+  str = 'def'\n+  foo = str .in. 32               ! { dg-error \"are CHARACTER\\\\(8\\\\)/INTEGER\" }\n+end function qux\n+function corge ()\n+  use pr97768_2, only : operator(.in.)\n+  logical :: corge\n+  character(len=:), allocatable :: str\n+  str = 'ghijk'\n+  foo = str .in. 32               ! { dg-error \"are CHARACTER\\\\(:\\\\)/INTEGER\" }\n+end function corge"}]}