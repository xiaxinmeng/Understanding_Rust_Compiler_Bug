{"sha": "113459fad35faf22bcc72cee950e8f2ae573eb6f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzNDU5ZmFkMzVmYWYyMmJjYzcyY2VlOTUwZThmMmFlNTczZWI2Zg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2017-06-21T16:11:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2017-06-21T16:11:36Z"}, "message": "C++: Add fix-it hints for -Wold-style-cast\n\ngcc/cp/ChangeLog:\n\t* parser.c (get_cast_suggestion): New function.\n\t(maybe_add_cast_fixit): New function.\n\t(cp_parser_cast_expression): Capture the location of the closing\n\tparenthesis.  Call maybe_add_cast_fixit when emitting warnings\n\tabout old-style casts.\n\ngcc/testsuite/ChangeLog:\n\t* g++.dg/other/old-style-cast-fixits.C: New test case.\n\nFrom-SVN: r249461", "tree": {"sha": "c2c83dd1eec5d1c040a6baba3c186f4de2b3dbf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2c83dd1eec5d1c040a6baba3c186f4de2b3dbf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113459fad35faf22bcc72cee950e8f2ae573eb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113459fad35faf22bcc72cee950e8f2ae573eb6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113459fad35faf22bcc72cee950e8f2ae573eb6f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113459fad35faf22bcc72cee950e8f2ae573eb6f/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b10f10092ebcee637d04788f2ac8b72644dbba34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10f10092ebcee637d04788f2ac8b72644dbba34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10f10092ebcee637d04788f2ac8b72644dbba34"}], "stats": {"total": 201, "additions": 198, "deletions": 3}, "files": [{"sha": "7d50a0b74f87d2340229d4846bb8b17e79f698dd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=113459fad35faf22bcc72cee950e8f2ae573eb6f", "patch": "@@ -1,3 +1,11 @@\n+2017-06-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* parser.c (get_cast_suggestion): New function.\n+\t(maybe_add_cast_fixit): New function.\n+\t(cp_parser_cast_expression): Capture the location of the closing\n+\tparenthesis.  Call maybe_add_cast_fixit when emitting warnings\n+\tabout old-style casts.\n+\n 2017-06-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80972 - C++17 ICE with attribute packed."}, {"sha": "37f9154c4aefdb082f6b8bc1e5c5529b3bda092e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 91, "deletions": 3, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=113459fad35faf22bcc72cee950e8f2ae573eb6f", "patch": "@@ -8636,6 +8636,85 @@ cp_parser_tokens_start_cast_expression (cp_parser *parser)\n     }\n }\n \n+/* Try to find a legal C++-style cast to DST_TYPE for ORIG_EXPR, trying them\n+   in the order: const_cast, static_cast, reinterpret_cast.\n+\n+   Don't suggest dynamic_cast.\n+\n+   Return the first legal cast kind found, or NULL otherwise.  */\n+\n+static const char *\n+get_cast_suggestion (tree dst_type, tree orig_expr)\n+{\n+  tree trial;\n+\n+  /* Reuse the parser logic by attempting to build the various kinds of\n+     cast, with \"complain\" disabled.\n+     Identify the first such cast that is valid.  */\n+\n+  /* Don't attempt to run such logic within template processing.  */\n+  if (processing_template_decl)\n+    return NULL;\n+\n+  /* First try const_cast.  */\n+  trial = build_const_cast (dst_type, orig_expr, tf_none);\n+  if (trial != error_mark_node)\n+    return \"const_cast\";\n+\n+  /* If that fails, try static_cast.  */\n+  trial = build_static_cast (dst_type, orig_expr, tf_none);\n+  if (trial != error_mark_node)\n+    return \"static_cast\";\n+\n+  /* Finally, try reinterpret_cast.  */\n+  trial = build_reinterpret_cast (dst_type, orig_expr, tf_none);\n+  if (trial != error_mark_node)\n+    return \"reinterpret_cast\";\n+\n+  /* No such cast possible.  */\n+  return NULL;\n+}\n+\n+/* If -Wold-style-cast is enabled, add fix-its to RICHLOC,\n+   suggesting how to convert a C-style cast of the form:\n+\n+     (DST_TYPE)ORIG_EXPR\n+\n+   to a C++-style cast.\n+\n+   The primary range of RICHLOC is asssumed to be that of the original\n+   expression.  OPEN_PAREN_LOC and CLOSE_PAREN_LOC give the locations\n+   of the parens in the C-style cast.  */\n+\n+static void\n+maybe_add_cast_fixit (rich_location *rich_loc, location_t open_paren_loc,\n+\t\t      location_t close_paren_loc, tree orig_expr,\n+\t\t      tree dst_type)\n+{\n+  /* This function is non-trivial, so bail out now if the warning isn't\n+     going to be emitted.  */\n+  if (!warn_old_style_cast)\n+    return;\n+\n+  /* Try to find a legal C++ cast, trying them in order:\n+     const_cast, static_cast, reinterpret_cast.  */\n+  const char *cast_suggestion = get_cast_suggestion (dst_type, orig_expr);\n+  if (!cast_suggestion)\n+    return;\n+\n+  /* Replace the open paren with \"CAST_SUGGESTION<\".  */\n+  pretty_printer pp;\n+  pp_printf (&pp, \"%s<\", cast_suggestion);\n+  rich_loc->add_fixit_replace (open_paren_loc, pp_formatted_text (&pp));\n+\n+  /* Replace the close paren with \"> (\".  */\n+  rich_loc->add_fixit_replace (close_paren_loc, \"> (\");\n+\n+  /* Add a closing paren after the expr (the primary range of RICH_LOC).  */\n+  rich_loc->add_fixit_insert_after (\")\");\n+}\n+\n+\n /* Parse a cast-expression.\n \n    cast-expression:\n@@ -8671,6 +8750,7 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n       /* Consume the `('.  */\n       cp_token *open_paren = cp_lexer_consume_token (parser->lexer);\n       location_t open_paren_loc = open_paren->location;\n+      location_t close_paren_loc = UNKNOWN_LOCATION;\n \n       /* A very tricky bit is that `(struct S) { 3 }' is a\n \t compound-literal (which we permit in C++ as an extension).\n@@ -8733,7 +8813,10 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t  /* Look for the type-id.  */\n \t  type = cp_parser_type_id (parser);\n \t  /* Look for the closing `)'.  */\n-\t  cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\t  cp_token *close_paren\n+\t    = cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n+\t  if (close_paren)\n+\t    close_paren_loc = close_paren->location;\n \t  parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;\n \t}\n \n@@ -8763,8 +8846,13 @@ cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t\t  && !in_system_header_at (input_location)\n \t\t  && !VOID_TYPE_P (type)\n \t\t  && current_lang_name != lang_name_c)\n-\t\twarning (OPT_Wold_style_cast,\n-\t\t\t \"use of old-style cast to %qT\", type);\n+\t\t{\n+\t\t  gcc_rich_location rich_loc (input_location);\n+\t\t  maybe_add_cast_fixit (&rich_loc, open_paren_loc, close_paren_loc,\n+\t\t\t\t\texpr, type);\n+\t\t  warning_at_rich_loc (&rich_loc, OPT_Wold_style_cast,\n+\t\t\t\t       \"use of old-style cast to %qT\", type);\n+\t\t}\n \n \t      /* Only type conversions to integral or enumeration types\n \t\t can be used in constant-expressions.  */"}, {"sha": "446e234a1e2fabc1a8feea7fa406a9c130eb5ae4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=113459fad35faf22bcc72cee950e8f2ae573eb6f", "patch": "@@ -1,3 +1,7 @@\n+2017-06-21  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* g++.dg/other/old-style-cast-fixits.C: New test case.\n+\n 2017-06-21  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/cpp0x/constexpr-cast.C: Adjust dg-error for ILP32."}, {"sha": "a10b623f9818d531be9e6145aa009f207fc95a51", "filename": "gcc/testsuite/g++.dg/other/old-style-cast-fixits.C", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fold-style-cast-fixits.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113459fad35faf22bcc72cee950e8f2ae573eb6f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fold-style-cast-fixits.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fold-style-cast-fixits.C?ref=113459fad35faf22bcc72cee950e8f2ae573eb6f", "patch": "@@ -0,0 +1,95 @@\n+// { dg-options \"-Wold-style-cast -fdiagnostics-show-caret\" }\n+\n+struct foo {};\n+struct bar { const foo *field; };\n+\n+void test_1 (void *ptr)\n+{\n+  foo *f = (foo *)ptr; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr;\n+                   ^~~\n+            ----------\n+            static_cast<foo *> (ptr)\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_2 (const foo *ptr)\n+{\n+  foo *f = (foo *)ptr; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr;\n+                   ^~~\n+            ----------\n+            const_cast<foo *> (ptr)\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_3 (bar *ptr)\n+{\n+  foo *f = (foo *)ptr; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr;\n+                   ^~~\n+            ----------\n+            reinterpret_cast<foo *> (ptr)\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_4 (bar *ptr)\n+{\n+  foo *f = (foo *)ptr->field; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr->field;\n+                        ^~~~~\n+            -----------------\n+            const_cast<foo *> (ptr->field)\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_5 ()\n+{\n+  bar b_inst;\n+  foo *f = (foo *)&b_inst; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)&b_inst;\n+                    ^~~~~~\n+            --------------\n+            reinterpret_cast<foo *> (&b_inst)\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* We don't offer suggestions for templates.  */\n+\n+template <typename T>\n+void test_6 (void *ptr)\n+{\n+  foo *f = (foo *)ptr; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr;\n+                   ^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* We don't offer suggestions where a single C++-style cast can't be\n+   used.  */\n+\n+void test_7 (const void *ptr)\n+{\n+  foo *f = (foo *)ptr; // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)ptr;\n+                   ^~~\n+     { dg-end-multiline-output \"\" } */\n+}\n+\n+/* Likewise, no single C++-style cast is usable here.  */\n+\n+void test_8 (const bar &b_inst)\n+{\n+  foo *f = (foo *)&b_inst;  // { dg-warning \"old-style cast\" }\n+  /* { dg-begin-multiline-output \"\" }\n+   foo *f = (foo *)&b_inst;\n+                    ^~~~~~\n+     { dg-end-multiline-output \"\" } */\n+}"}]}