{"sha": "3c2f6fae598f997003b73ab93bb85cb33471f389", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2MyZjZmYWU1OThmOTk3MDAzYjczYWI5M2JiODVjYjMzNDcxZjM4OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-07-29T10:10:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-07-29T10:10:15Z"}, "message": "re PR middle-end/91267 (SEGV in value_range_base::equal_p)\n\n2019-07-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91267\n\t* vr-values.c (vr_values::update_value_range): Add early return\n\tfor effectively VARYING lattice entry.\n\n\t* gcc.dg/torture/pr91267.c: New testcase.\n\nFrom-SVN: r273874", "tree": {"sha": "d21caa39e524b8782d74b86a3d2c9e9b99703483", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d21caa39e524b8782d74b86a3d2c9e9b99703483"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c2f6fae598f997003b73ab93bb85cb33471f389", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2f6fae598f997003b73ab93bb85cb33471f389", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c2f6fae598f997003b73ab93bb85cb33471f389", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c2f6fae598f997003b73ab93bb85cb33471f389/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f33b9c40b97f6f8a72ee370068ad81e33d71434e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33b9c40b97f6f8a72ee370068ad81e33d71434e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33b9c40b97f6f8a72ee370068ad81e33d71434e"}], "stats": {"total": 38, "additions": 37, "deletions": 1}, "files": [{"sha": "01e4666051d9c96cd43e135e71dda990f063f6a9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c2f6fae598f997003b73ab93bb85cb33471f389", "patch": "@@ -1,3 +1,9 @@\n+2019-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91267\n+\t* vr-values.c (vr_values::update_value_range): Add early return\n+\tfor effectively VARYING lattice entry.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \tPR debug/86638"}, {"sha": "30671620e437f12cc2fd591d660a53addc052b2b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3c2f6fae598f997003b73ab93bb85cb33471f389", "patch": "@@ -1,3 +1,8 @@\n+2019-07-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91267\n+\t* gcc.dg/torture/pr91267.c: New testcase.\n+\n 2019-07-29  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* c-c++-common/guality/Og-dce-1.c: New test."}, {"sha": "084bd248439f7cd5d43e7382191ee0ba5e2da863", "filename": "gcc/testsuite/gcc.dg/torture/pr91267.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91267.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91267.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr91267.c?ref=3c2f6fae598f997003b73ab93bb85cb33471f389", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+\n+void bar (void);\n+void baz (int);\n+char *qux (void);\n+int a, b;\n+\n+void\n+foo (int f, char *d)\n+{\n+  char *e;\n+  while (d)\n+    {\n+      if (f)\n+\tif (e)\n+\t  bar ();\n+      baz (e - (d + a));\n+      b = e - d;\n+      d = qux ();\n+    }\n+}"}, {"sha": "d03309942af4c21109527e174326354a1bf795c5", "filename": "gcc/vr-values.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c2f6fae598f997003b73ab93bb85cb33471f389/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=3c2f6fae598f997003b73ab93bb85cb33471f389", "patch": "@@ -202,8 +202,12 @@ vr_values::update_value_range (const_tree var, value_range *new_vr)\n \tnew_vr->intersect (&nr);\n     }\n \n-  /* Update the value range, if necessary.  */\n+  /* Update the value range, if necessary.  If we cannot allocate a lattice\n+     entry for VAR keep it at VARYING.  This happens when DOM feeds us stmts\n+     with SSA names allocated after setting up the lattice.  */\n   old_vr = get_lattice_entry (var);\n+  if (!old_vr)\n+    return false;\n   is_new = !old_vr->equal_p (*new_vr, /*ignore_equivs=*/false);\n \n   if (is_new)"}]}