{"sha": "710700abb804afc0846423ab246034dec745a599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEwNzAwYWJiODA0YWZjMDg0NjQyM2FiMjQ2MDM0ZGVjNzQ1YTU5OQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2015-01-27T19:57:55Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2015-01-27T19:57:55Z"}, "message": "re PR fortran/63861 (OpenACC coarray ICE  (also with OpenMP?))\n\n2015-01-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/63861\ngcc/fortran/\n        * trans-openmp.c (gfc_has_alloc_comps, gfc_trans_omp_clauses):\n        Fix handling for scalar coarrays.\n        * trans-types.c (gfc_get_element_type): Add comment.\ngcc/testsuite/\n        * gfortran.dg/goacc/coarray_2.f90: New.\n\nFrom-SVN: r220189", "tree": {"sha": "22f542a953ff70a841a13ba6dce2a744b4118c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22f542a953ff70a841a13ba6dce2a744b4118c8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/710700abb804afc0846423ab246034dec745a599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710700abb804afc0846423ab246034dec745a599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/710700abb804afc0846423ab246034dec745a599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/710700abb804afc0846423ab246034dec745a599/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e23f28927f1922bd684d985901d13588a942fbd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e23f28927f1922bd684d985901d13588a942fbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e23f28927f1922bd684d985901d13588a942fbd4"}], "stats": {"total": 148, "additions": 139, "deletions": 9}, "files": [{"sha": "13cd7509bef52e63218937ad81a80fb43fef6356", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=710700abb804afc0846423ab246034dec745a599", "patch": "@@ -1,3 +1,10 @@\n+2015-01-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/63861\n+\t* trans-openmp.c (gfc_has_alloc_comps, gfc_trans_omp_clauses):\n+\tFix handling for scalar coarrays.\n+\t* trans-types.c (gfc_get_element_type): Add comment.\n+\n 2015-01-27  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tPR fortran/64771"}, {"sha": "8da55d3b467dfdfa94e1b5273dd83e17559dff8b", "filename": "gcc/fortran/trans-openmp.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2Ftrans-openmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2Ftrans-openmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-openmp.c?ref=710700abb804afc0846423ab246034dec745a599", "patch": "@@ -189,7 +189,7 @@ gfc_has_alloc_comps (tree type, tree decl)\n \treturn false;\n     }\n \n-  while (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type))\n+  if (GFC_DESCRIPTOR_TYPE_P (type) || GFC_ARRAY_TYPE_P (type))\n     type = gfc_get_element_type (type);\n \n   if (TREE_CODE (type) != RECORD_TYPE)\n@@ -1989,7 +1989,10 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t      OMP_CLAUSE_DECL (node3)\n \t\t\t= gfc_conv_descriptor_data_get (decl);\n \t\t      OMP_CLAUSE_SIZE (node3) = size_int (0);\n-\t\t      if (n->sym->attr.pointer)\n+\n+\t\t      /* We have to check for n->sym->attr.dimension because\n+\t\t\t of scalar coarrays.  */\n+\t\t      if (n->sym->attr.pointer && n->sym->attr.dimension)\n \t\t\t{\n \t\t\t  stmtblock_t cond_block;\n \t\t\t  tree size\n@@ -2019,16 +2022,19 @@ gfc_trans_omp_clauses (stmtblock_t *block, gfc_omp_clauses *clauses,\n \t\t\t\t\t\t\t     else_b));\n \t\t\t  OMP_CLAUSE_SIZE (node) = size;\n \t\t\t}\n-\t\t      else\n+\t\t      else if (n->sym->attr.dimension)\n \t\t\tOMP_CLAUSE_SIZE (node)\n \t\t\t  = gfc_full_array_size (block, decl,\n \t\t\t\t\t\t GFC_TYPE_ARRAY_RANK (type));\n-\t\t      tree elemsz\n-\t\t\t= TYPE_SIZE_UNIT (gfc_get_element_type (type));\n-\t\t      elemsz = fold_convert (gfc_array_index_type, elemsz);\n-\t\t      OMP_CLAUSE_SIZE (node)\n-\t\t\t= fold_build2 (MULT_EXPR, gfc_array_index_type,\n-\t\t\t\t       OMP_CLAUSE_SIZE (node), elemsz);\n+\t\t      if (n->sym->attr.dimension)\n+\t\t\t{\n+\t\t\t  tree elemsz\n+\t\t\t    = TYPE_SIZE_UNIT (gfc_get_element_type (type));\n+\t\t\t  elemsz = fold_convert (gfc_array_index_type, elemsz);\n+\t\t\t  OMP_CLAUSE_SIZE (node)\n+\t\t\t    = fold_build2 (MULT_EXPR, gfc_array_index_type,\n+\t\t\t\t\t   OMP_CLAUSE_SIZE (node), elemsz);\n+\t\t\t}\n \t\t    }\n \t\t  else\n \t\t    OMP_CLAUSE_DECL (node) = decl;"}, {"sha": "53da053fc4dba80bbf8d7dd2611fc16cc23fee55", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710700abb804afc0846423ab246034dec745a599/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=710700abb804afc0846423ab246034dec745a599", "patch": "@@ -1172,6 +1172,10 @@ gfc_conv_array_bound (gfc_expr * expr)\n   return NULL_TREE;\n }\n \f\n+/* Return the type of an element of the array.  Note that scalar coarrays\n+   are special.  In particular, for GFC_ARRAY_TYPE_P, the original argument\n+   (with POINTER_TYPE stripped) is returned.  */\n+\n tree\n gfc_get_element_type (tree type)\n {"}, {"sha": "6c0f0e19f5a496d5ad783dc434e69aeabe8c2cdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710700abb804afc0846423ab246034dec745a599/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710700abb804afc0846423ab246034dec745a599/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=710700abb804afc0846423ab246034dec745a599", "patch": "@@ -1,3 +1,8 @@\n+2015-01-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/63861\n+\t* gfortran.dg/goacc/coarray_2.f90: New.\n+\n 2015-01-27  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/60871"}, {"sha": "f35d4b9b18e2adf367656da8fd4f5a12b9a0441e", "filename": "gcc/testsuite/gfortran.dg/goacc/coarray_2.f90", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/710700abb804afc0846423ab246034dec745a599/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/710700abb804afc0846423ab246034dec745a599/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fcoarray_2.f90?ref=710700abb804afc0846423ab246034dec745a599", "patch": "@@ -0,0 +1,108 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-fcoarray=lib\" }\n+!\n+! PR fortran/63861\n+\n+module test\n+contains\n+  subroutine oacc1(a)\n+    implicit none\n+    integer :: i\n+    integer, codimension[*] :: a\n+    !$acc declare device_resident (a)\n+    !$acc data copy (a)\n+    !$acc end data\n+    !$acc data deviceptr (a)\n+    !$acc end data\n+    !$acc parallel private (a)\n+    !$acc end parallel\n+    !$acc host_data use_device (a)\n+    !$acc end host_data\n+    !$acc parallel loop reduction(+:a)\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (a)\n+    !$acc update host (a)\n+    !$acc update self (a)\n+  end subroutine oacc1\n+\n+  subroutine oacc2(a)\n+    implicit none\n+    integer :: i\n+    integer, allocatable, codimension[:] :: a\n+    !$acc declare device_resident (a)\n+    !$acc data copy (a)\n+    !$acc end data\n+    !$acc parallel private (a)\n+    !$acc end parallel\n+! FIXME:\n+!       !$acc parallel loop reduction(+:a)\n+!       This involves an assignment, which shall not reallocate\n+!       the LHS variable. Version without reduction:\n+    !$acc parallel loop\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (a)\n+    !$acc update host (a)\n+    !$acc update self (a)\n+  end subroutine oacc2\n+\n+  subroutine oacc3(a)\n+    implicit none\n+    integer :: i\n+    integer, codimension[*] :: a(:)\n+    !$acc declare device_resident (a)\n+    !$acc data copy (a)\n+    !$acc end data\n+    !$acc data deviceptr (a)\n+    !$acc end data\n+    !$acc parallel private (a)\n+    !$acc end parallel\n+    !$acc host_data use_device (a)\n+    !$acc end host_data\n+    !$acc parallel loop reduction(+:a)\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (a)\n+    !$acc update host (a)\n+    !$acc update self (a)\n+  end subroutine oacc3\n+\n+  subroutine oacc4(a)\n+    implicit none\n+    integer :: i\n+    integer, allocatable, codimension[:] :: a(:)\n+    !$acc declare device_resident (a)\n+    !$acc data copy (a)\n+    !$acc end data\n+    !$acc parallel private (a)\n+    !$acc end parallel\n+    !$acc parallel loop reduction(+:a)\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc parallel loop\n+    do i = 1,5\n+    enddo\n+    !$acc end parallel loop\n+    !$acc update device (a)\n+    !$acc update host (a)\n+    !$acc update self (a)\n+  end subroutine oacc4\n+end module test\n+! { dg-excess-errors \"sorry, unimplemented: directive not yet implemented\" }"}]}