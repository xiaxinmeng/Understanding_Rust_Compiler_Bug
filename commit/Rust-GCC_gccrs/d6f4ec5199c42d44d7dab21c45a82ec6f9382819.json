{"sha": "d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZmNGVjNTE5OWM0MmQ0NGQ3ZGFiMjFjNDVhODJlYzZmOTM4MjgxOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-05-13T12:40:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-05-13T12:40:39Z"}, "message": "Warning fixes:\n\n\t* Makefile.in (c-lang.o): Depend on c-tree.h, c-lex.h and toplev.h.\n\t(c-lex.o): Depend on output.h.\n\t(c-common.o): Likewise.\n\t(stmt.o): Likewise.\n\t(calls.o): Likewise.\n\t(integrate.o): Depend on toplev.h.\n\t(regclass.o): Depend on output.h.\n\t(final.o): Depend on reload.h.\n\t* c-common.c: Include output.h.\n\t(check_format_info): Remove unused variable `integral_format'.\n\t* c-decl.c (print_lang_decl): Mark parameters `file', `node' and\n\t`indent' with ATTRIBUTE_UNUSED.\n\t(print_lang_type): Likewise.\n\t(maybe_build_cleanup): Likewise for parameter `decl'.\n\t(copy_lang_decl): Likewise for parameter `node'.\n\t* c-lang.c: Include c-tree.h, c-lex.h and toplev.h.\n\t(lang_print_xnode): Mark parameters `file', `node' and `indent'\n \twith ATTRIBUTE_UNUSED.\n\t(lookup_interface): Likewise for parameter `arg'.\n\t(is_class_name): Likewise.\n\t(maybe_objc_check_decl): Likewise for parameter `decl'.\n\t(maybe_objc_comptypes): Likewise for parameters `lhs', `rhs' and\n\t`reflexive'.\n\t(maybe_objc_method_name): Likewise for parameter `decl'.\n\t(build_objc_string): Likewise for parameters `len' and `str'.\n\t* c-lex.c: Include output.h.\n\t* c-lex.h (position_after_white_space): Correct typo in prototype.\n\t* c-tree.h (finish_file, c_expand_start_cond, c_expand_start_else,\n \tc_expand_end_cond, init_iterators): Add prototypes.\n\t* caller-save.c (set_reg_live): Mark parameters `reg' and `setter'\n\twith ATTRIBUTE_UNUSED.\n\t* calls.c: Include output.h.\n\t* cccp.c (pipe_closed): Mark parameter `signo' with\n \tATTRIBUTE_UNUSED.\n\t* combine.c: Move inclusion of expr.h to after insn-config.h.\n\t* iris6.h (ASM_IDENTIFY_GCC, ASM_IDENTIFY_LANGUAGE): Don't define\n\tas empty, rather define as ((void)0).\n\t* sparc.c (sparc_check_64): Add braces around ambiguous `else'.\n\tAdd parentheses around assignment used as truth value.\n\t* cplus-dem.c (squangle_mop_up): Change return type to void.\n\t(internal_cplus_demangle): Remove unused parameter `options'.\n\tAll callers changed.\n\t(cplus_demangle_opname): Remove function wide variable `int i' and\n \treplace with `size_t i' at each location where it is used.\n\t(cplus_demangle_opname): change type of `i' from int to size_t.\n\t* cppexp.c (right_shift): Mark parameter `pfile' with\n\tATTRIBUTE_UNUSED.\n\t* cpphash.c (cpp_lookup): Likewise.\n\t(cpp_hash_cleanup): Likewise.\n\t* cpplib.c (parse_name): Add a prototype and make it static.\n\t(null_underflow): Mark parameter `pfile' with ATTRIBUTE_UNUSED.\n\t(null_cleanup): Likewise for parameters `pbuf' and `pfile'.\n\t(macro_cleanup): Likewise for parameter `pfile'.\n\t(file_cleanup): Likewise.\n\t* cpplib.h (cpp_reader_init, cpp_options_init, cpp_start_read,\n \tcpp_read_check_assertion, skip_rest_of_line): Add prototypes.\n\t* crtstuff.c (force_to_data, __CTOR_LIST__, force_to_data,\n\t__DTOR_END__, __FRAME_END__): Mark with ATTRIBUTE_UNUSED.\n\t* cse.c (cse_check_loop_start): Mark parameter `set' with\n \tATTRIBUTE_UNUSED.\n\t* dbxout.c (flag_minimal_debug, have_used_extensions,\n\tsource_label_number): Move inside macro wrapper check against\n\tdefined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO).\n\t* dwarf2out.c (gen_entry_point_die): Hide prototype and definition.\n\t* except.h (doing_eh): Provide prototype.\n\t* expr.c: Move inclusion of expr.h to after insn-config.h.\n\t* final.c: Include reload.h.\n\t(shorten_branches): Cast the first argument of bzero to char *.\n\t* fix-header.c (cpp_print_containing_files): Mark parameter\n \t`pfile' with ATTRIBUTE_UNUSED.\n\t(cpp_fatal): Likewise.\n\t* flow.c (find_basic_blocks_1): Cast the first argument of bzero\n\tto char *.\n\t* genattrtab.c (make_length_attrs): Change the type of variable\n\t`i' from int to size_t.\n\t(zero_fn): Mark parameter `exp' with ATTRIBUTE_UNUSED.\n\t(one_fn): Likewise.\n\t* genextract.c (main): When generating insn-extract.c, mark\n\tvariable `junk' with ATTRIBUTE_UNUSED.\n\t* gengenrtl.c (gencode): When generating genrtl.c, cast the first\n\targument of bzero to char*.\n\t* integrate.c: Include toplev.h.\n\t* libgcc2.c: Wrap `struct exception_table' and\n\t`find_exception_handler' in macro DWARF2_UNWIND_INFO.\n\t* objc/Make-lang.in (objc-act.o): Depend on toplev.h.\n\t* objc/objc-act.c: Include toplev.h.\n\t(lang_print_xnode): Mark parameters `file', `node' and `indent'\n\twith ATTRIBUTE_UNUSED.\n\t(finish_protocol): Likewise for parameter `protocol'.\n\t* output.h (declare_weak): Add prototype.\n\t(decode_reg_name): Don't wrap with TREE_CODE macro.\n\t(assemble_alias): Add prototype.\n\t* regclass.c: Include output.h.\n\t* reload.h (reloads_conflict): Add prototype.\n\t* rtl.h (print_rtl_single, mark_elimiation, reg_class_subset_p,\n\toutput_func_start_profiler): Add prototypes.\n\t* rtlanal.c (reg_set_p_1): Mark parameters `x' and `pat' with\n \tATTRIBUTE_UNUSED.\n\t* scan-decls.c: Include scan.h.\n\t* scan.h (recognized_function, recognized_extern): Add prototypes.\n\t* stmt.c: Include output.h.\n\t* toplev.c (error_for_asm, warning_for_asm): Remove prototypes.\n\t(output_lang_identify): Hide prototype and definition.\n\t(float_signal): Mark parameter `signo' with ATTRIBUTE_UNUSED.\n\t(pipe_closed): Likewise.\n\t* toplev.h (count_error, strip_off_ending, error_for_asm,\n \twarning_for_asm): Add prototypes.\n\nFrom-SVN: r19712", "tree": {"sha": "4aba14f6d0d485010db33bbb03ebf81e7a0508ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4aba14f6d0d485010db33bbb03ebf81e7a0508ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/comments", "author": null, "committer": null, "parents": [{"sha": "32e705c43462a5ec39354fd088d367949b1a63d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e705c43462a5ec39354fd088d367949b1a63d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e705c43462a5ec39354fd088d367949b1a63d9"}], "stats": {"total": 286, "additions": 184, "deletions": 102}, "files": [{"sha": "48ea6304061439071d8acb606b94cc2bc57278fa", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -1254,9 +1254,10 @@ c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h \\\n     output.h toplev.h\n c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h \\\n     output.h expr.h insn-codes.h $(RTL_H) toplev.h\n-c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H)\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h toplev.h\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n-    $(srcdir)/c-parse.h input.h flags.h $(srcdir)/c-gperf.h c-pragma.h toplev.h\n+    $(srcdir)/c-parse.h input.h flags.h $(srcdir)/c-gperf.h c-pragma.h \\\n+    toplev.h output.h\n c-aux-info.o : c-aux-info.c  $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h\n c-convert.o : c-convert.c $(CONFIG_H) system.h $(TREE_H) flags.h toplev.h\n c-pragma.o: c-pragma.c $(CONFIG_H) system.h $(TREE_H) except.h function.h \\\n@@ -1299,7 +1300,7 @@ s-under: $(GCC_PASSES)\n # A file used by all variants of C.\n \n c-common.o : c-common.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h \\\n-\tflags.h toplev.h\n+\tflags.h toplev.h output.h\n \n # Language-independent files.\n \n@@ -1354,15 +1355,15 @@ function.o : function.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    insn-config.h $(RECOG_H) output.h toplev.h\n stmt.o : stmt.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h  \\\n    insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h except.h \\\n-   loop.h $(RECOG_H) toplev.h\n+   loop.h $(RECOG_H) toplev.h output.h\n except.o : except.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    function.h insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h \\\n    insn-config.h $(RECOG_H) output.h except.h toplev.h\n expr.o : expr.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h function.h \\\n    regs.h insn-flags.h insn-codes.h expr.h insn-config.h $(RECOG_H) output.h \\\n    typeclass.h hard-reg-set.h toplev.h\n calls.o : calls.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h expr.h \\\n-   insn-codes.h insn-flags.h regs.h toplev.h\n+   insn-codes.h insn-flags.h regs.h toplev.h output.h\n expmed.o : expmed.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h  \\\n    insn-flags.h insn-config.h insn-codes.h expr.h $(RECOG_H) real.h\n explow.o : explow.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n@@ -1389,7 +1390,7 @@ getpwd.o : getpwd.c $(CONFIG_H) system.h\n \n integrate.o : integrate.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h \\\n    integrate.h insn-flags.h insn-config.h insn-codes.h expr.h real.h regs.h \\\n-   function.h output.h $(RECOG_H) except.h\n+   function.h output.h $(RECOG_H) except.h toplev.h\n \n jump.o : jump.c $(CONFIG_H) system.h $(RTL_H) flags.h hard-reg-set.h regs.h \\\n    insn-config.h insn-codes.h insn-flags.h $(RECOG_H) expr.h real.h except.h\n@@ -1409,7 +1410,8 @@ combine.o : combine.c $(CONFIG_H) system.h $(RTL_H) flags.h  \\\n    insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \\\n    $(BASIC_BLOCK_H) $(RECOG_H) real.h hard-reg-set.h\n regclass.o : regclass.c $(CONFIG_H) system.h $(RTL_H) hard-reg-set.h flags.h \\\n-   $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h toplev.h\n+   $(BASIC_BLOCK_H) regs.h insn-config.h $(RECOG_H) reload.h real.h toplev.h \\\n+   output.h\n local-alloc.o : local-alloc.c $(CONFIG_H) system.h $(RTL_H) flags.h \\\n    $(BASIC_BLOCK_H) regs.h hard-reg-set.h insn-config.h $(RECOG_H) output.h\n bitmap.o : bitmap.c $(CONFIG_H) system.h $(RTL_H) flags.h $(BASIC_BLOCK_H) \\\n@@ -1439,7 +1441,7 @@ $(SCHED_PREFIX)sched.o : $(SCHED_PREFIX)sched.c $(CONFIG_H) system.h $(RTL_H) \\\n final.o : final.c $(CONFIG_H) system.h $(RTL_H) $(TREE_H) flags.h regs.h \\\n    $(RECOG_H) conditions.h insn-config.h insn-attr.h except.h real.h output.h \\\n    hard-reg-set.h insn-flags.h insn-codes.h gstab.h xcoffout.h defaults.h \\\n-   toplev.h\n+   toplev.h reload.h\n recog.o : recog.c $(CONFIG_H) system.h $(RTL_H)  \\\n    regs.h $(RECOG_H) hard-reg-set.h flags.h insn-config.h insn-attr.h \\\n    insn-flags.h insn-codes.h real.h"}, {"sha": "bc93ea28d0383411e189c27430657122cd9483ce", "filename": "gcc/c-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n #ifndef WCHAR_TYPE_SIZE\n #ifdef INT_TYPE_SIZE\n@@ -1235,7 +1236,6 @@ check_format_info (info, params)\n   int length_char;\n   int format_char;\n   int format_length;\n-  int integral_format;\n   tree format_tree;\n   tree cur_param;\n   tree cur_type;"}, {"sha": "6a0e0eaceeb4d69308cc81650f14fee88d796a64", "filename": "gcc/c-decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -808,17 +808,17 @@ c_decode_option (p)\n \n void\n print_lang_decl (file, node, indent)\n-     FILE *file;\n-     tree node;\n-     int indent;\n+     FILE *file ATTRIBUTE_UNUSED;\n+     tree node ATTRIBUTE_UNUSED;\n+     int indent ATTRIBUTE_UNUSED;\n {\n }\n \n void\n print_lang_type (file, node, indent)\n-     FILE *file;\n-     tree node;\n-     int indent;\n+     FILE *file ATTRIBUTE_UNUSED;\n+     tree node ATTRIBUTE_UNUSED;\n+     int indent ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -4083,7 +4083,7 @@ finish_decl (decl, init, asmspec_tree)\n \n tree\n maybe_build_cleanup (decl)\n-     tree decl;\n+     tree decl ATTRIBUTE_UNUSED;\n {\n   /* There are no cleanups in C.  */\n   return NULL_TREE;\n@@ -7296,6 +7296,6 @@ pop_c_function_context ()\n \n void\n copy_lang_decl (node)\n-     tree node;\n+     tree node ATTRIBUTE_UNUSED;\n {\n }"}, {"sha": "ca1e9fef4431cdd955106d291e62064db7d4afbc", "filename": "gcc/c-lang.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -23,6 +23,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"system.h\"\n #include \"tree.h\"\n #include \"input.h\"\n+#include \"c-tree.h\"\n+#include \"c-lex.h\"\n+#include \"toplev.h\"\n \n /* Each of the functions defined here\n    is an alternative to a function in objc-actions.c.  */\n@@ -65,45 +68,46 @@ print_lang_statistics ()\n \n void\n lang_print_xnode (file, node, indent)\n-     FILE *file;\n-     tree node;\n-     int indent;\n+     FILE *file ATTRIBUTE_UNUSED;\n+     tree node ATTRIBUTE_UNUSED;\n+     int indent ATTRIBUTE_UNUSED;\n {\n }\n \n /* Used by c-lex.c, but only for objc.  */\n \n tree\n lookup_interface (arg)\n-     tree arg;\n+     tree arg ATTRIBUTE_UNUSED;\n {\n   return 0;\n }\n \n tree\n is_class_name (arg)\n-    tree arg;\n+    tree arg ATTRIBUTE_UNUSED;\n {\n   return 0;\n }\n \n void\n maybe_objc_check_decl (decl)\n-     tree decl;\n+     tree decl ATTRIBUTE_UNUSED;\n {\n }\n \n int\n maybe_objc_comptypes (lhs, rhs, reflexive)\n-     tree lhs, rhs;\n-     int reflexive;\n+     tree lhs ATTRIBUTE_UNUSED;\n+     tree rhs ATTRIBUTE_UNUSED;\n+     int reflexive ATTRIBUTE_UNUSED;\n {\n   return -1;\n }\n \n tree\n maybe_objc_method_name (decl)\n-    tree decl;\n+    tree decl ATTRIBUTE_UNUSED;\n {\n   return 0;\n }\n@@ -122,8 +126,8 @@ recognize_objc_keyword ()\n \n tree\n build_objc_string (len, str)\n-    int len;\n-    char *str;\n+    int len ATTRIBUTE_UNUSED;\n+    char *str ATTRIBUTE_UNUSED;\n {\n   abort ();\n   return NULL_TREE;"}, {"sha": "a180711e81306b026302e6c042a2685d14153fca", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -25,6 +25,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"rtl.h\"\n #include \"tree.h\"\n #include \"input.h\"\n+#include \"output.h\"\n #include \"c-lex.h\"\n #include \"c-tree.h\"\n #include \"flags.h\""}, {"sha": "d0df996b263b6cbbab0f851fa9e96bf6b02e06a2", "filename": "gcc/c-lex.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-lex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -75,7 +75,7 @@ extern char *token_buffer;\t/* Pointer to token buffer.  */\n \n extern tree make_pointer_declarator PROTO((tree, tree));\n extern void reinit_parse_for_function PROTO((void));\n-extern void position_after_whitespace PROTO((void));\n+extern void position_after_white_space PROTO((void));\n extern int check_newline PROTO((void));\n \n extern int yylex PROTO((void));"}, {"sha": "cca93884ec503c9b3f9906b55ae8a3d486375b79", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -149,6 +149,7 @@ struct lang_type\n extern tree lookup_interface\t\t\tPROTO((tree));\n extern tree is_class_name\t\t\tPROTO((tree));\n extern void maybe_objc_check_decl\t\tPROTO((tree));\n+extern void finish_file\t\t\t\tPROTO((void));\n extern int maybe_objc_comptypes                 PROTO((tree, tree, int));\n extern tree maybe_building_objc_message_expr    PROTO((void));\n extern tree maybe_objc_method_name\t\tPROTO((tree));\n@@ -167,6 +168,9 @@ extern void check_function_format\t\tPROTO((tree, tree, tree));\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error                     PROTO((enum tree_code));\n extern void c_expand_expr_stmt                  PROTO((tree));\n+extern void c_expand_start_cond                 PROTO((tree, int, int));\n+extern void c_expand_start_else                 PROTO((void));\n+extern void c_expand_end_cond                   PROTO((void));\n /* Validate the expression after `case' and apply default promotions.  */\n extern tree check_case_value                    PROTO((tree));\n /* Concatenate a list of STRING_CST nodes into one STRING_CST.  */\n@@ -366,6 +370,7 @@ extern void c_expand_return\t\t\tPROTO((tree));\n extern tree c_expand_start_case                 PROTO((tree));\n \n /* in c-iterate.c */\n+extern void init_iterators\t\t\tPROTO((void));\n extern void iterator_expand\t\t\tPROTO((tree));\n extern void iterator_for_loop_start\t\tPROTO((tree));\n extern void iterator_for_loop_end\t\tPROTO((tree));"}, {"sha": "375d20810979ba38408609c4120d40b79e89d216", "filename": "gcc/caller-save.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -505,7 +505,8 @@ save_call_clobbered_regs (insn_mode)\n \n static void\n set_reg_live (reg, setter)\n-     rtx reg, setter;\n+     rtx reg;\n+     rtx setter ATTRIBUTE_UNUSED;\n {\n   register int regno, endregno, i;\n   enum machine_mode mode = GET_MODE (reg);"}, {"sha": "8133cc0f58a59ab0e9e67724f82a161ba3c56fac", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -32,6 +32,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"regs.h\"\n #include \"insn-flags.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n /* Decide whether a function's arguments should be processed\n    from first to last or from last to first."}, {"sha": "91aa331b072630ca6c9132956222ec7b498e40da", "filename": "gcc/cccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -10224,7 +10224,7 @@ pfatal_with_name (name)\n static void\n pipe_closed (signo)\n      /* If this is missing, some compilers complain.  */\n-     int signo;\n+     int signo ATTRIBUTE_UNUSED;\n {\n   fatal (\"output pipe has been closed\");\n }"}, {"sha": "68c084f047d87a3053328781fb9b5157a323cd59", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -88,9 +88,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"regs.h\"\n #include \"hard-reg-set.h\"\n-#include \"expr.h\"\n #include \"basic-block.h\"\n #include \"insn-config.h\"\n+/* Include expr.h after insn-config.h so we get HAVE_conditional_move. */\n+#include \"expr.h\"\n #include \"insn-flags.h\"\n #include \"insn-codes.h\"\n #include \"insn-attr.h\""}, {"sha": "9d96225a4aab6917c823552bb228a37e0eb8b682", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -118,8 +118,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* The Irix 6.0.1 assembler doesn't like labels in the text section, so\n    just avoid emitting them.  */\n-#define ASM_IDENTIFY_GCC\n-#define ASM_IDENTIFY_LANGUAGE\n+#define ASM_IDENTIFY_GCC(x) ((void)0)\n+#define ASM_IDENTIFY_LANGUAGE(x) ((void)0)\n \n /* Irix 5 stuff that we don't need for Irix 6.  */\n /* ??? We do need this for the -mabi=32 switch though.  */"}, {"sha": "8186f5fa7e82116bf491d45294e65e7dcd2cd702", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -6724,12 +6724,14 @@ sparc_check_64 (x, insn)\n     set_once = 1;\n \n   if (insn == 0)\n-    if (set_once)\n-      insn = get_last_insn_anywhere ();\n-    else\n-      return 0;\n+    {\n+      if (set_once)\n+\tinsn = get_last_insn_anywhere ();\n+      else\n+\treturn 0;\n+    }\n \n-  while (insn = PREV_INSN (insn))\n+  while ((insn = PREV_INSN (insn)))\n     {\n       switch (GET_CODE (insn))\n \t{"}, {"sha": "8f6809100c5fa2e46bb8daf0ea3b1c03290a7b9c", "filename": "gcc/cplus-dem.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcplus-dem.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -230,7 +230,7 @@ typedef struct string\t\t/* Beware: these aren't required to be */\n static char *\n mop_up PARAMS ((struct work_stuff *, string *, int));\n \n-static char *\n+static void\n squangle_mop_up PARAMS ((struct work_stuff *));\n \n #if 0\n@@ -239,7 +239,7 @@ demangle_method_args PARAMS ((struct work_stuff *, const char **, string *));\n #endif\n \n static char *\n-internal_cplus_demangle PARAMS ((struct work_stuff *, const char *, int));\n+internal_cplus_demangle PARAMS ((struct work_stuff *, const char *));\n \n static int\n demangle_template_template_parm PARAMS ((struct work_stuff *work, \n@@ -422,7 +422,7 @@ cplus_demangle_opname (opname, result, options)\n      char *result;\n      int options;\n {\n-  int len, i, len1, ret;\n+  int len, len1, ret;\n   string type;\n   struct work_stuff work[1];\n   const char *tem;\n@@ -453,6 +453,7 @@ cplus_demangle_opname (opname, result, options)\n       if (opname[4] == '\\0')\n \t{\n \t  /* Operator.  */\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      if (strlen (optable[i].in) == 2\n@@ -470,6 +471,7 @@ cplus_demangle_opname (opname, result, options)\n \t  if (opname[2] == 'a' && opname[5] == '\\0')\n \t    {\n \t      /* Assignment.  */\n+\t      size_t i;\n \t      for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t\t{\n \t\t  if (strlen (optable[i].in) == 3\n@@ -493,6 +495,7 @@ cplus_demangle_opname (opname, result, options)\n       if (len >= 10 /* op$assign_ */\n \t  && memcmp (opname + 3, \"assign_\", 7) == 0)\n \t{\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 10;\n@@ -509,6 +512,7 @@ cplus_demangle_opname (opname, result, options)\n \t}\n       else\n \t{\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 3;\n@@ -551,7 +555,7 @@ cplus_mangle_opname (opname, options)\n      const char *opname;\n      int options;\n {\n-  int i;\n+  size_t i;\n   int len;\n \n   len = strlen (opname);\n@@ -605,7 +609,7 @@ cplus_demangle (mangled, options)\n   if ((work -> options & DMGL_STYLE_MASK) == 0)\n     work -> options |= (int) current_demangling_style & DMGL_STYLE_MASK;\n \n-  ret = internal_cplus_demangle (work, mangled, options);\n+  ret = internal_cplus_demangle (work, mangled);\n   squangle_mop_up (work);\n   return (ret);\n }\n@@ -618,10 +622,9 @@ cplus_demangle (mangled, options)\n    calls go directly to this routine to avoid resetting that info. */\n \n static char *\n-internal_cplus_demangle (work, mangled, options)\n+internal_cplus_demangle (work, mangled)\n      struct work_stuff *work;\n      const char *mangled;\n-     int options;\n {\n \n   string decl;\n@@ -679,7 +682,7 @@ internal_cplus_demangle (work, mangled, options)\n \n \n /* Clear out and squangling related storage */\n-static char *\n+static void\n squangle_mop_up (work)\n      struct work_stuff *work;\n {\n@@ -1340,7 +1343,7 @@ demangle_template_value_parm (work, mangled, s)\n \t  char *p = xmalloc (symbol_len + 1), *q;\n \t  strncpy (p, *mangled, symbol_len);\n \t  p [symbol_len] = '\\0';\n-\t  q = internal_cplus_demangle (work, p, work->options);\n+\t  q = internal_cplus_demangle (work, p);\n \t  string_appendn (s, \"&\", 1);\n \t  if (q)\n \t    {\n@@ -2073,7 +2076,7 @@ gnu_special (work, mangled, declp)\n   else if (strncmp (*mangled, \"__thunk_\", 8) == 0)\n     {\n       int delta = ((*mangled) += 8, consume_count (mangled));\n-      char *method = internal_cplus_demangle (work, ++*mangled, work->options);\n+      char *method = internal_cplus_demangle (work, ++*mangled);\n       if (method)\n \t{\n \t  char buf[50];"}, {"sha": "bb462af95245f33aa57ec5afe0788b082f5f6aa8", "filename": "gcc/cppexp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -617,7 +617,7 @@ left_shift (pfile, a, unsignedp, b)\n \n static long\n right_shift (pfile, a, unsignedp, b)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n      long a;\n      int unsignedp;\n      unsigned long b;"}, {"sha": "b1375e143383ab0e2c2032e329ed408ae33c5e38", "filename": "gcc/cpphash.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpphash.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpphash.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpphash.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -58,7 +58,7 @@ hashf (name, len, hashsize)\n \n HASHNODE *\n cpp_lookup (pfile, name, len, hash)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n      const U_CHAR *name;\n      int len;\n      int hash;\n@@ -193,7 +193,7 @@ install (name, len, type, ivalue, value, hash)\n \n void\n cpp_hash_cleanup (pfile)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n   register int i;\n   for (i = HASHSIZE; --i >= 0; )"}, {"sha": "08a30a6d321456c546bdbdb20053feb076ccea7e", "filename": "gcc/cpplib.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -242,6 +242,7 @@ static char *savestring ();\n \n static void conditional_skip ();\n static void skip_if_group ();\n+static int parse_name PARAMS ((cpp_reader *, int));\n \n /* Last arg to output_line_command.  */\n enum file_change_code {same_file, enter_file, leave_file};\n@@ -768,23 +769,23 @@ cpp_options_init (opts)\n \n enum cpp_token\n null_underflow (pfile)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n   return CPP_EOF;\n }\n \n int\n null_cleanup (pbuf, pfile)\n-     cpp_buffer *pbuf;\n-     cpp_reader *pfile;\n+     cpp_buffer *pbuf ATTRIBUTE_UNUSED;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n   return 0;\n }\n \n int\n macro_cleanup (pbuf, pfile)\n      cpp_buffer *pbuf;\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n   HASHNODE *macro = (HASHNODE *) pbuf->data;\n   if (macro->type == T_DISABLED)\n@@ -797,7 +798,7 @@ macro_cleanup (pbuf, pfile)\n int\n file_cleanup (pbuf, pfile)\n      cpp_buffer *pbuf;\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n   if (pbuf->buf)\n     {\n@@ -5200,7 +5201,7 @@ cpp_get_non_space_token (pfile)\n \n /* Parse an identifier starting with C.  */\n \n-int\n+static int\n parse_name (pfile, c)\n      cpp_reader *pfile; int c;\n {"}, {"sha": "c474c3f9eb5561ddc8e96f6d452c14aaa8632404", "filename": "gcc/cpplib.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -663,6 +663,11 @@ extern cpp_buffer *cpp_pop_buffer PARAMS ((cpp_reader *));\n \n extern cpp_hashnode *cpp_lookup PARAMS ((cpp_reader *, const unsigned char *,\n \t\t\t\t\t int, int));\n+extern void cpp_reader_init PARAMS ((cpp_reader *));\n+extern void cpp_options_init PARAMS ((cpp_options *));\n+extern int cpp_start_read PARAMS ((cpp_reader *, char *));\n+extern int cpp_read_check_assertion PARAMS ((cpp_reader *));\n+extern void skip_rest_of_line PARAMS ((cpp_reader *));\n \n #ifdef __cplusplus\n }"}, {"sha": "3c53cef81dd3494053bde8b1bd771635f708e96b", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -274,7 +274,7 @@ __frame_dummy ()\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */\n-static func_ptr force_to_data[0] = { };\n+static func_ptr force_to_data[0] __attribute__ ((__unused__)) = { };\n \n /* NOTE:  In order to be able to support SVR4 shared libraries, we arrange\n    to have one set of symbols { __CTOR_LIST__, __DTOR_LIST__, __CTOR_END__,\n@@ -294,7 +294,8 @@ static func_ptr force_to_data[0] = { };\n CTOR_LIST_BEGIN;\n #else\n asm (CTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-STATIC func_ptr __CTOR_LIST__[1] = { (func_ptr) (-1) };\n+STATIC func_ptr __CTOR_LIST__[1] __attribute__ ((__unused__))\n+  = { (func_ptr) (-1) };\n #endif\n \n #ifdef DTOR_LIST_BEGIN\n@@ -421,7 +422,7 @@ __do_global_ctors ()\n #endif /* defined(INIT_SECTION_ASM_OP) */\n \n /* Force cc1 to switch to .data section.  */\n-static func_ptr force_to_data[0] = { };\n+static func_ptr force_to_data[0] __attribute__ ((__unused__)) = { };\n \n /* Put a word containing zero at the end of each of our two lists of function\n    addresses.  Note that the words defined here go into the .ctors and .dtors\n@@ -440,7 +441,8 @@ STATIC func_ptr __CTOR_END__[1] = { (func_ptr) 0 };\n DTOR_LIST_END;\n #else\n asm (DTORS_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n-STATIC func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n+STATIC func_ptr __DTOR_END__[1] __attribute__ ((__unused__))\n+  = { (func_ptr) 0 };\n #endif\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n@@ -449,7 +451,7 @@ STATIC func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n \n typedef unsigned int ui32 __attribute__ ((mode (SI)));\n asm (EH_FRAME_SECTION_ASM_OP);\n-STATIC ui32 __FRAME_END__[] = { 0 };\n+STATIC ui32 __FRAME_END__[] __attribute__ ((__unused__)) = { 0 };\n #endif /* EH_FRAME_SECTION */\n \n #endif /* defined(CRT_END) */"}, {"sha": "6d513c121be2454aee071b28e9c142e5b1ed1161", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -7933,7 +7933,7 @@ static rtx cse_check_loop_start_value;\n static void\n cse_check_loop_start (x, set)\n      rtx x;\n-     rtx set;\n+     rtx set ATTRIBUTE_UNUSED;\n {\n   if (cse_check_loop_start_value == 0\n       || GET_CODE (x) == CC0 || GET_CODE (x) == PC)"}, {"sha": "dc7b754af435641c50260afe01c63d199467584b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -134,6 +134,13 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n+char *getpwd ();\n+\n+/* Typical USG systems don't have stab.h, and they also have\n+   no use for DBX-format debugging info.  */\n+\n+#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n+\n static int flag_minimal_debug = MINIMAL_DEBUG;\n \n /* Nonzero if we have actually used any of the GDB extensions\n@@ -148,13 +155,6 @@ static int have_used_extensions = 0;\n \n static int source_label_number = 1;\n \n-char *getpwd ();\n-\n-/* Typical USG systems don't have stab.h, and they also have\n-   no use for DBX-format debugging info.  */\n-\n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-\n #ifdef DEBUG_SYMS_TEXT\n #define FORCE_TEXT text_section ();\n #else"}, {"sha": "12ad09a79e1ee0b671e0a4057b4db465a3680c53", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -2506,7 +2506,9 @@ static tree member_declared_type\tPROTO((tree));\n static char *decl_start_label\t\tPROTO((tree));\n static void gen_array_type_die\t\tPROTO((tree, dw_die_ref));\n static void gen_set_type_die\t\tPROTO((tree, dw_die_ref));\n+#if 0\n static void gen_entry_point_die\t\tPROTO((tree, dw_die_ref));\n+#endif\n static void pend_type\t\t\tPROTO((tree));\n static void output_pending_types_for_scope PROTO((dw_die_ref));\n static void gen_inlined_enumeration_type_die PROTO((tree, dw_die_ref));\n@@ -7816,6 +7818,7 @@ gen_set_type_die (type, context_die)\n   add_type_attribute (type_die, TREE_TYPE (type), 0, 0, context_die);\n }\n \n+#if 0\n static void\n gen_entry_point_die (decl, context_die)\n      register tree decl;\n@@ -7837,6 +7840,7 @@ gen_entry_point_die (decl, context_die)\n   else\n     add_AT_lbl_id (decl_die, DW_AT_low_pc, decl_start_label (decl));\n }\n+#endif\n \n /* Remember a type in the pending_types_list.  */\n "}, {"sha": "d93a8c979d81f4ca3de5bdea363ca06bd9595502", "filename": "gcc/except.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fexcept.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fexcept.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -139,6 +139,10 @@ extern rtx catch_clauses;\n \n #endif\n \n+/* Test: is exception handling turned on? */\n+\n+extern int doing_eh\t\t\t\t       PROTO ((int));\n+\n /* Toplevel initialization for EH.  */\n \n extern void init_eh\t\t\t\tPROTO((void));"}, {"sha": "dcbde1505886b893548959ea31d89877795eaa86", "filename": "gcc/expr.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -32,8 +32,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"insn-flags.h\"\n #include \"insn-codes.h\"\n-#include \"expr.h\"\n #include \"insn-config.h\"\n+/* Include expr.h after insn-config.h so we get HAVE_conditional_move. */\n+#include \"expr.h\"\n #include \"recog.h\"\n #include \"output.h\"\n #include \"typeclass.h\""}, {"sha": "d45b577419631b36bb6a221ec52d2a8dbcae923f", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -68,6 +68,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"except.h\"\n #include \"toplev.h\"\n+#include \"reload.h\"\n \n /* Get N_SLINE and N_SOL from stab.h if we can expect the file to exist.  */\n #if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n@@ -989,7 +990,8 @@ shorten_branches (first)\n   min_labelno = get_first_label_num ();\n   label_align\n     = (short*) xmalloc ((max_labelno - min_labelno + 1) * sizeof (short));\n-  bzero (label_align, (max_labelno - min_labelno + 1) * sizeof (short));\n+  bzero ((char *) label_align,\n+\t (max_labelno - min_labelno + 1) * sizeof (short));\n \n   uid_shuid = (int *) xmalloc (max_uid * sizeof *uid_shuid);\n "}, {"sha": "74c251a48e070701a5845cfa1b7c7ca8b0c55e15", "filename": "gcc/fix-header.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ffix-header.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ffix-header.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffix-header.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -1341,7 +1341,7 @@ cpp_file_line_for_message (filename, line, column)\n \n void\n cpp_print_containing_files (pfile)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -1377,7 +1377,7 @@ fatal (str, arg)\n \n void\n cpp_fatal (pfile, str, arg)\n-     cpp_reader *pfile;\n+     cpp_reader *pfile ATTRIBUTE_UNUSED;\n      char *str, *arg;\n {\n   fatal (str, arg);"}, {"sha": "14791e2de32e1dca9e8fdbbebd20def13bc27d43", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -414,7 +414,7 @@ find_basic_blocks_1 (f, nonlocal_label_list, live_reachable_p)\n   bzero (block_live, n_basic_blocks);\n   bzero (block_marked, n_basic_blocks);\n   bzero (basic_block_computed_jump_target, n_basic_blocks);\n-  bzero (active_eh_handler, (max_uid_for_flow + 1) * sizeof (rtx));\n+  bzero ((char *) active_eh_handler, (max_uid_for_flow + 1) * sizeof (rtx));\n   current_function_has_computed_jump = 0;\n \n   /* Initialize with just block 0 reachable and no blocks marked.  */"}, {"sha": "3038f684a92307cba868b012406c4e87f6a5fa75", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -2392,7 +2392,7 @@ make_length_attrs ()\n \t\t\t      \"*insn_current_length\"};\n   static rtx (*no_address_fn[]) PROTO((rtx)) = {identity_fn, zero_fn, zero_fn};\n   static rtx (*address_fn[]) PROTO((rtx)) = {max_fn, one_fn, identity_fn};\n-  int i;\n+  size_t i;\n   struct attr_desc *length_attr, *new_attr;\n   struct attr_value *av, *new_av;\n   struct insn_ent *ie, *new_ie;\n@@ -2443,14 +2443,14 @@ identity_fn (exp)\n \n static rtx\n zero_fn (exp)\n-     rtx exp;\n+     rtx exp ATTRIBUTE_UNUSED;\n {\n   return make_numeric_value (0);\n }\n \n static rtx\n one_fn (exp)\n-     rtx exp;\n+     rtx exp ATTRIBUTE_UNUSED;\n {\n   return make_numeric_value (1);\n }"}, {"sha": "32c991682d21da000ab0503f31b735259aa8eb60", "filename": "gcc/genextract.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -459,7 +459,7 @@ from the machine description file `md'.  */\\n\\n\");\n \n   /* This variable exists only so it can be the \"location\"\n      of any missing operand whose numbers are skipped by a given pattern.  */\n-  printf (\"static rtx junk;\\n\");\n+  printf (\"static rtx junk ATTRIBUTE_UNUSED;\\n\");\n \n   printf (\"extern rtx recog_operand[];\\n\");\n   printf (\"extern rtx *recog_operand_loc[];\\n\");"}, {"sha": "419ed31d5f833af5fcaf340d2b123c49d2343816", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -262,7 +262,7 @@ gencode (f)\n   fputs (\"  else if (sizeof(struct rtx_def) - sizeof(rtunion) == sizeof(HOST_WIDE_INT))\\n\", f);\n   fputs (\"    *(HOST_WIDE_INT *)rt = 0;\\n\", f);\n   fputs (\"  else\\n\", f);\n-  fputs (\"    bzero(rt, sizeof(struct rtx_def) - sizeof(rtunion));\\n\\n\", f);\n+  fputs (\"    bzero((char *) rt, sizeof(struct rtx_def) - sizeof(rtunion));\\n\\n\", f);\n   fputs (\"  return rt;\\n}\\n\\n\", f);\n \n   for (fmt = formats; *fmt; ++fmt)"}, {"sha": "2f8dde132dd5dcf1f332c4738357757d353a44af", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -36,6 +36,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"real.h\"\n #include \"except.h\"\n #include \"function.h\"\n+#include \"toplev.h\"\n \n #include \"obstack.h\"\n #define\tobstack_chunk_alloc\txmalloc"}, {"sha": "1b33c05b1b46ad3db64406d59e744c147d71ac37", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -3360,6 +3360,7 @@ EH_TABLE_LOOKUP\n \n #else\n \n+#ifdef DWARF2_UNWIND_INFO\n typedef struct exception_table {\n   void *start;\n   void *end;\n@@ -3404,6 +3405,7 @@ find_exception_handler (void *pc, exception_table *table)\n \n   return (void *) 0;\n }\n+#endif /* DWARF2_UNWIND_INFO */\n #endif /* EH_TABLE_LOOKUP */\n \f\n #ifdef DWARF2_UNWIND_INFO"}, {"sha": "df6c3bcdfb4c74422302fd57518d186c40386751", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -88,7 +88,7 @@ $(srcdir)/objc/objc-parse.y: $(srcdir)/c-parse.in\n \n objc-act.o : $(srcdir)/objc/objc-act.c \\\n    $(CONFIG_H) $(TREE_H) $(RTL_H) system.h \\\n-   $(srcdir)/c-tree.h $(srcdir)/c-lex.h \\\n+   $(srcdir)/c-tree.h $(srcdir)/c-lex.h $(srcdir)/toplev.h \\\n    $(srcdir)/flags.h $(srcdir)/objc/objc-act.h $(srcdir)/input.h \\\n    $(srcdir)/function.h $(srcdir)/output.h $(srcdir)/c-parse.h\n \t$(CC) $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) -I$(srcdir)/objc \\"}, {"sha": "b7165dfb89b3be9fbdfa74e9320e352f8d17448b", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -49,6 +49,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"function.h\"\n #include \"output.h\"\n+#include \"toplev.h\"\n \n /* This is the default way of generating a method name.  */\n /* I am not sure it is really correct.\n@@ -695,9 +696,9 @@ lang_decode_option (p)\n \n void\n lang_print_xnode (file, node, indent)\n-     FILE *file;\n-     tree node;\n-     int indent;\n+     FILE *file ATTRIBUTE_UNUSED;\n+     tree node ATTRIBUTE_UNUSED;\n+     int indent ATTRIBUTE_UNUSED;\n {\n }\n \n@@ -6419,7 +6420,7 @@ start_protocol (code, name, list)\n \n void\n finish_protocol (protocol)\n-\ttree protocol;\n+\ttree protocol ATTRIBUTE_UNUSED;\n {\n }\n "}, {"sha": "40a26b01e43dd083ab46d77546b302e6f8b1f617", "filename": "gcc/output.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -155,6 +155,10 @@ extern void exception_section\t\tPROTO((void));\n    The rtl is stored into DECL.  */\n extern void make_function_rtl\t\tPROTO((tree));\n \n+/* Declare DECL to be a weak symbol.  */\n+extern void declare_weak\t\tPROTO ((tree));\n+#endif /* TREE_CODE */\n+\n /* Decode an `asm' spec for a declaration as a register name.\n    Return the register number, or -1 if nothing specified,\n    or -2 if the ASMSPEC is not `cc' or `memory' and is not recognized,\n@@ -164,6 +168,7 @@ extern void make_function_rtl\t\tPROTO((tree));\n    Prefixes such as % are optional.  */\n extern int decode_reg_name\t\tPROTO((char *));\n \n+#ifdef TREE_CODE\n /* Create the DECL_RTL for a declaration for a static or external variable\n    or static or external function.\n    ASMSPEC, if not 0, is the string which the user specified\n@@ -180,6 +185,8 @@ extern void make_var_volatile\t\tPROTO((tree));\n /* Output alignment directive to align for constant expression EXP.  */\n extern void assemble_constant_align\tPROTO((tree));\n \n+extern void assemble_alias\t\tPROTO((tree, tree));\n+\n /* Output a string of literal assembler code\n    for an `asm' keyword used between functions.  */\n extern void assemble_asm\t\tPROTO((tree));\n@@ -232,7 +239,7 @@ extern void assemble_variable\t\tPROTO((tree, int, int, int));\n    (Most assemblers don't need this, so we normally output nothing.)\n    Do nothing if DECL is not external.  */\n extern void assemble_external\t\tPROTO((tree));\n-#endif\n+#endif /* TREE_CODE */\n \n #ifdef RTX_CODE\n /* Similar, for calling a library function FUN.  */"}, {"sha": "e7ea926b2746ec8764cdedf50cf48dbaf1f4790b", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"real.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n #ifndef REGISTER_MOVE_COST\n #define REGISTER_MOVE_COST(x, y) 2"}, {"sha": "d35dc3fa6b5b4cbc689f8b360c4ce7126a107a3a", "filename": "gcc/reload.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Freload.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Freload.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -217,6 +217,8 @@ extern int regno_clobbered_p PROTO((int, rtx));\n \n /* Functions in reload1.c:  */\n \n+extern int reloads_conflict\t\tPROTO ((int, int));\n+\n int count_occurrences            PROTO((rtx, rtx));\n \n /* Initialize the reload pass once per compilation.  */"}, {"sha": "0d8b9b46891d982e99dbba9b42664bfd293d3727", "filename": "gcc/rtl.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -1202,6 +1202,7 @@ extern void debug_rtx_list\t\tPROTO ((rtx, int));\n extern rtx debug_rtx_find\t\tPROTO ((rtx, int));\n #ifdef BUFSIZ\n extern void print_rtl\t\t\tPROTO ((FILE *, rtx));\n+extern void print_rtl_single\t\tPROTO ((FILE *, rtx));\n extern void print_inline_rtx\t\tPROTO ((FILE *, rtx, int));\n #endif\n \n@@ -1292,12 +1293,14 @@ extern rtx expand_mult_highpart\t\tPROTO ((enum machine_mode, rtx,\n \t\t\t\t\t\tint, int));\n \n /* In global.c */\n+extern void mark_elimiation\t\tPROTO ((int, int));\n #ifdef BUFSIZ\n extern int global_alloc\t\t\tPROTO ((FILE *));\n extern void dump_global_regs\t\tPROTO ((FILE *));\n #endif\n \n /* In regclass.c */\n+extern int reg_class_subset_p\t\tPROTO ((enum reg_class, enum reg_class));\n extern void globalize_reg\t\tPROTO ((int));\n extern void init_regs\t\t\tPROTO ((void));\n extern void init_reg_sets\t\tPROTO ((void));\n@@ -1329,6 +1332,7 @@ extern void init_caller_save\t\tPROTO ((void));\n \n /* In profile.c */\n extern void init_branch_prob\t\tPROTO ((char *));\n+extern void output_func_start_profiler\tPROTO ((void));\n \n /* In reg-stack.c */\n #ifdef BUFSIZ"}, {"sha": "e2fc66a906e9c0c5aa8c80a987a6ba9cd3171212", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -455,7 +455,8 @@ static int reg_set_flag;\n \n static void\n reg_set_p_1 (x, pat)\n-     rtx x, pat;\n+     rtx x;\n+     rtx pat ATTRIBUTE_UNUSED;\n {\n   /* We don't want to return 1 if X is a MEM that contains a register\n      within REG_SET_REG.  */"}, {"sha": "5b947a412e39716fa41ab248d7457bbd753d6fac", "filename": "gcc/scan-decls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fscan-decls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fscan-decls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan-decls.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -20,6 +20,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #include \"hconfig.h\"\n #include \"system.h\"\n #include \"cpplib.h\"\n+#include \"scan.h\"\n \n int brace_nesting = 0;\n "}, {"sha": "12879c015bf9c288a1079914d16106ad58587a2d", "filename": "gcc/scan.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fscan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fscan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fscan.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -60,6 +60,8 @@ extern int read_upto _PARAMS((FILE *, sstring *, int));\n extern char *xmalloc _PARAMS((unsigned));\n extern char *xrealloc _PARAMS((char *, unsigned));\n extern unsigned long hash _PARAMS((const char *));\n+extern void recognized_function _PARAMS((char *, int, int, char *, int, int, char *, int));\n+extern void recognized_extern _PARAMS((char *, int, char *, int));\n \n /* get_token is a simple C lexer. */\n #define IDENTIFIER_TOKEN 300"}, {"sha": "fc8c382d958fcac46f372c92d9a05eaf6b515900", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -51,6 +51,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"machmode.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free"}, {"sha": "59d81ac9b1eee6b76b05724c94570620092982b0", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -153,12 +153,10 @@ extern void print_rtl_with_bb ();\n void rest_of_decl_compilation ();\n void error_with_file_and_line PVPROTO((char *file, int line, char *s, ...));\n void error_with_decl PVPROTO((tree decl, char *s, ...));\n-void error_for_asm PVPROTO((rtx insn, char *s, ...));\n void error PVPROTO((char *s, ...));\n void fatal PVPROTO((char *s, ...));\n void warning_with_file_and_line PVPROTO((char *file, int line, char *s, ...));\n void warning_with_decl PVPROTO((tree decl, char *s, ...));\n-void warning_for_asm PVPROTO((rtx insn, char *s, ...));\n void warning PVPROTO((char *s, ...));\n void pedwarn PVPROTO((char *s, ...));\n void pedwarn_with_decl PVPROTO((tree decl, char *s, ...));\n@@ -189,7 +187,9 @@ static void vsorry PROTO((char *, va_list));\n static void v_really_sorry PROTO((char *, va_list));\n static void float_signal PROTO((int));\n static void pipe_closed PROTO((int));\n+#if 0\n static void output_lang_identify PROTO((FILE *));\n+#endif\n static void open_dump_file PROTO((char *, char *));\n static void close_dump_file PROTO((void (*) (FILE *, rtx), rtx));\n static void dump_rtl PROTO((char *, tree, void (*) (FILE *, rtx), rtx));\n@@ -1989,7 +1989,7 @@ jmp_buf float_handler;\n static void\n float_signal (signo)\n      /* If this is missing, some compilers complain.  */\n-     int signo;\n+     int signo ATTRIBUTE_UNUSED;\n {\n   if (float_handled == 0)\n     abort ();\n@@ -2056,7 +2056,7 @@ pop_float_handler (handled, handler)\n static void\n pipe_closed (signo)\n      /* If this is missing, some compilers complain.  */\n-     int signo;\n+     int signo ATTRIBUTE_UNUSED;\n {\n   fatal (\"output pipe has been closed\");\n }\n@@ -2138,6 +2138,7 @@ output_file_directive (asm_file, input_name)\n \f\n /* Routine to build language identifier for object file.  */\n \n+#if 0\n static void\n output_lang_identify (asm_out_file)\n      FILE *asm_out_file;\n@@ -2147,6 +2148,7 @@ output_lang_identify (asm_out_file)\n   sprintf (s, \"__gnu_compiled_%s\", lang_identify ());\n   ASM_OUTPUT_LABEL (asm_out_file, s);\n }\n+#endif\n \n /* Routine to open a dump file.  */\n static void"}, {"sha": "c6af2fb07a0d540ebde86aaf3bd92442f90049c0", "filename": "gcc/toplev.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -5,6 +5,8 @@\n #ifndef __GCC_TOPLEV_H__\n #define __GCC_TOPLEV_H__\n \n+extern int count_error\t\t\tPROTO ((int));\n+extern void strip_off_ending\t\tPROTO ((char *, int));\n extern void print_time\t\t\tPROTO ((char *, int));\n extern int get_run_time\t\t\tPROTO ((void));\n extern void debug_start_source_file\tPROTO ((char *));\n@@ -40,4 +42,8 @@ extern void warning_with_decl\t\tPVPROTO ((union tree_node *, char *, ...));\n extern void error_with_decl\t\tPVPROTO ((union tree_node *, char *, ...));\n extern void announce_function\t\tPROTO ((union tree_node *));\n \n+extern void error_for_asm\t\tPVPROTO((struct rtx_def *, char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_2;\n+extern void warning_for_asm\t\tPVPROTO((struct rtx_def *, char *, ...))\n+\t\t\t\t\t\tATTRIBUTE_PRINTF_2;\n #endif /* __GCC_TOPLEV_H */"}, {"sha": "89ee87b861db8b56af5ab34c6263391ca1770ca7", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -1,3 +1,12 @@\n+Wed May 13 14:24:38 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+        * cplus-dem.c (squangle_mop_up): Change return type to void.\n+        (internal_cplus_demangle): Remove unused parameter `options'.\n+        All callers changed.\n+        (cplus_demangle_opname): Remove function wide variable `int i' and\n+        replace with `size_t i' at each location where it is used.\n+        (cplus_mangle_opname): change type of `i' from int to size_t.\n+\n Mon Apr 27 15:53:30 EDT 1998 Andrew MacLeod <amacleod@cygnus.com>\n \n \t* cplus-dem.c (demangle_qualified): Replace missing else."}, {"sha": "8f6809100c5fa2e46bb8daf0ea3b1c03290a7b9c", "filename": "libiberty/cplus-dem.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/libiberty%2Fcplus-dem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6f4ec5199c42d44d7dab21c45a82ec6f9382819/libiberty%2Fcplus-dem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcplus-dem.c?ref=d6f4ec5199c42d44d7dab21c45a82ec6f9382819", "patch": "@@ -230,7 +230,7 @@ typedef struct string\t\t/* Beware: these aren't required to be */\n static char *\n mop_up PARAMS ((struct work_stuff *, string *, int));\n \n-static char *\n+static void\n squangle_mop_up PARAMS ((struct work_stuff *));\n \n #if 0\n@@ -239,7 +239,7 @@ demangle_method_args PARAMS ((struct work_stuff *, const char **, string *));\n #endif\n \n static char *\n-internal_cplus_demangle PARAMS ((struct work_stuff *, const char *, int));\n+internal_cplus_demangle PARAMS ((struct work_stuff *, const char *));\n \n static int\n demangle_template_template_parm PARAMS ((struct work_stuff *work, \n@@ -422,7 +422,7 @@ cplus_demangle_opname (opname, result, options)\n      char *result;\n      int options;\n {\n-  int len, i, len1, ret;\n+  int len, len1, ret;\n   string type;\n   struct work_stuff work[1];\n   const char *tem;\n@@ -453,6 +453,7 @@ cplus_demangle_opname (opname, result, options)\n       if (opname[4] == '\\0')\n \t{\n \t  /* Operator.  */\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      if (strlen (optable[i].in) == 2\n@@ -470,6 +471,7 @@ cplus_demangle_opname (opname, result, options)\n \t  if (opname[2] == 'a' && opname[5] == '\\0')\n \t    {\n \t      /* Assignment.  */\n+\t      size_t i;\n \t      for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t\t{\n \t\t  if (strlen (optable[i].in) == 3\n@@ -493,6 +495,7 @@ cplus_demangle_opname (opname, result, options)\n       if (len >= 10 /* op$assign_ */\n \t  && memcmp (opname + 3, \"assign_\", 7) == 0)\n \t{\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 10;\n@@ -509,6 +512,7 @@ cplus_demangle_opname (opname, result, options)\n \t}\n       else\n \t{\n+\t  size_t i;\n \t  for (i = 0; i < sizeof (optable) / sizeof (optable[0]); i++)\n \t    {\n \t      len1 = len - 3;\n@@ -551,7 +555,7 @@ cplus_mangle_opname (opname, options)\n      const char *opname;\n      int options;\n {\n-  int i;\n+  size_t i;\n   int len;\n \n   len = strlen (opname);\n@@ -605,7 +609,7 @@ cplus_demangle (mangled, options)\n   if ((work -> options & DMGL_STYLE_MASK) == 0)\n     work -> options |= (int) current_demangling_style & DMGL_STYLE_MASK;\n \n-  ret = internal_cplus_demangle (work, mangled, options);\n+  ret = internal_cplus_demangle (work, mangled);\n   squangle_mop_up (work);\n   return (ret);\n }\n@@ -618,10 +622,9 @@ cplus_demangle (mangled, options)\n    calls go directly to this routine to avoid resetting that info. */\n \n static char *\n-internal_cplus_demangle (work, mangled, options)\n+internal_cplus_demangle (work, mangled)\n      struct work_stuff *work;\n      const char *mangled;\n-     int options;\n {\n \n   string decl;\n@@ -679,7 +682,7 @@ internal_cplus_demangle (work, mangled, options)\n \n \n /* Clear out and squangling related storage */\n-static char *\n+static void\n squangle_mop_up (work)\n      struct work_stuff *work;\n {\n@@ -1340,7 +1343,7 @@ demangle_template_value_parm (work, mangled, s)\n \t  char *p = xmalloc (symbol_len + 1), *q;\n \t  strncpy (p, *mangled, symbol_len);\n \t  p [symbol_len] = '\\0';\n-\t  q = internal_cplus_demangle (work, p, work->options);\n+\t  q = internal_cplus_demangle (work, p);\n \t  string_appendn (s, \"&\", 1);\n \t  if (q)\n \t    {\n@@ -2073,7 +2076,7 @@ gnu_special (work, mangled, declp)\n   else if (strncmp (*mangled, \"__thunk_\", 8) == 0)\n     {\n       int delta = ((*mangled) += 8, consume_count (mangled));\n-      char *method = internal_cplus_demangle (work, ++*mangled, work->options);\n+      char *method = internal_cplus_demangle (work, ++*mangled);\n       if (method)\n \t{\n \t  char buf[50];"}]}