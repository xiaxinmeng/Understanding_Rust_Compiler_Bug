{"sha": "798355a229acf2076722cee832a98a1e64b122eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4MzU1YTIyOWFjZjIwNzY3MjJjZWU4MzJhOThhMWU2NGIxMjJlYg==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-03-03T17:48:42Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-03-03T17:48:42Z"}, "message": "std_sstream.h: Remove trailing spaces.\n\n2002-03-03  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/std/std_sstream.h:  Remove trailing spaces.\n\t(basic_stringbuf::_M_stringbuf_init):  Also check for ios_base::app.\n\t* testsuite/27_io/stringbuf.cc (test05, test06):  New tests.\n\nFrom-SVN: r50258", "tree": {"sha": "797fb154ab03a99308f6b6a427891dcb1c1351bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/797fb154ab03a99308f6b6a427891dcb1c1351bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798355a229acf2076722cee832a98a1e64b122eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798355a229acf2076722cee832a98a1e64b122eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798355a229acf2076722cee832a98a1e64b122eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798355a229acf2076722cee832a98a1e64b122eb/comments", "author": null, "committer": null, "parents": [{"sha": "e81dd3810b095e922795b16de27af819ee190ba8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81dd3810b095e922795b16de27af819ee190ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81dd3810b095e922795b16de27af819ee190ba8"}], "stats": {"total": 122, "additions": 82, "deletions": 40}, "files": [{"sha": "47f4cca94f028c7c37c9e66c33413ee272ce99d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=798355a229acf2076722cee832a98a1e64b122eb", "patch": "@@ -1,3 +1,9 @@\n+2002-03-03  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/std/std_sstream.h:  Remove trailing spaces.\n+\t(basic_stringbuf::_M_stringbuf_init):  Also check for ios_base::app.\n+\t* testsuite/27_io/stringbuf.cc (test05, test06):  New tests.\n+\n 2002-03-02  Paolo Carlini  <pcarlini@unitus.it>\n \n \t* testsuite/22_locale/num_get_members_char.cc (test04):"}, {"sha": "bb1dfcdb0d6a456cc994b52b8d1108881d566c10", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=798355a229acf2076722cee832a98a1e64b122eb", "patch": "@@ -69,23 +69,23 @@ namespace std\n     protected:\n       // Data Members:\n       __string_type \t\t_M_string;\n-      \n+\n     public:\n       // Constructors:\n-      explicit \n+      explicit\n       basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)\n       : __streambuf_type(), _M_string()\n       { _M_stringbuf_init(__mode); }\n \n-      explicit \n+      explicit\n       basic_stringbuf(const __string_type& __str,\n \t\t      ios_base::openmode __mode = ios_base::in | ios_base::out)\n       : __streambuf_type(), _M_string(__str.data(), __str.size())\n       { _M_stringbuf_init(__mode); }\n \n       // Get and set:\n-      __string_type \n-      str() const \n+      __string_type\n+      str() const\n       {\n \tif (_M_mode & ios_base::out)\n \t  {\n@@ -102,7 +102,7 @@ namespace std\n \t  return _M_string;\n       }\n \n-      void \n+      void\n       str(const __string_type& __s)\n       {\n \t_M_string = __s;\n@@ -127,14 +127,14 @@ namespace std\n \t// suite particular needs.\n \t_M_buf_size_opt = 512;\n \t_M_mode = __mode;\n-\tif (_M_mode & ios_base::ate)\n-\t  _M_really_sync(0, _M_buf_size); \n-\telse  \n+\tif (_M_mode & (ios_base::ate | ios_base::app))\n+\t  _M_really_sync(0, _M_buf_size);\n+\telse\n \t  _M_really_sync(0, 0);\n       }\n \n       // Overridden virtual functions:\n-      virtual int_type \n+      virtual int_type\n       underflow()\n       {\n \tif (_M_in_cur && _M_in_cur < _M_in_end)\n@@ -143,38 +143,38 @@ namespace std\n \t  return traits_type::eof();\n       }\n \n-      virtual int_type \n+      virtual int_type\n       pbackfail(int_type __c = traits_type::eof());\n \n-      virtual int_type \n+      virtual int_type\n       overflow(int_type __c = traits_type::eof());\n \n-      virtual __streambuf_type* \n+      virtual __streambuf_type*\n       setbuf(char_type* __s, streamsize __n)\n-      { \n-\tif (__s && __n) \n+      {\n+\tif (__s && __n)\n \t  {\n \t    _M_string = __string_type(__s, __n);\n \t    _M_really_sync(0, 0);\n \t  }\n-\treturn this; \n-      } \n+\treturn this;\n+      }\n \n-      virtual pos_type \n+      virtual pos_type\n       seekoff(off_type __off, ios_base::seekdir __way,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n-      virtual pos_type \n-      seekpos(pos_type __sp, \n+      virtual pos_type\n+      seekpos(pos_type __sp,\n \t      ios_base::openmode __mode = ios_base::in | ios_base::out);\n \n       // Internal function for correctly updating the internal buffer\n       // for a particular _M_string, due to initialization or\n       // re-sizing of an existing _M_string.\n       // Assumes: contents of _M_string and internal buffer match exactly.\n-      // __i == _M_in_cur - _M_in_beg      \n+      // __i == _M_in_cur - _M_in_beg\n       // __o == _M_out_cur - _M_out_beg\n-      virtual int \n+      virtual int\n       _M_really_sync(__size_type __i, __size_type __o)\n       {\n \tchar_type* __base = const_cast<char_type*>(_M_string.data());\n@@ -221,12 +221,12 @@ namespace std\n \n     public:\n       // Constructors:\n-      explicit \n+      explicit\n       basic_istringstream(ios_base::openmode __mode = ios_base::in)\n       : __istream_type(NULL), _M_stringbuf(__mode | ios_base::in)\n       { this->init(&_M_stringbuf); }\n \n-      explicit \n+      explicit\n       basic_istringstream(const __string_type& __str,\n \t\t\t  ios_base::openmode __mode = ios_base::in)\n       : __istream_type(NULL), _M_stringbuf(__str, __mode | ios_base::in)\n@@ -236,15 +236,15 @@ namespace std\n       { }\n \n       // Members:\n-      __stringbuf_type* \n+      __stringbuf_type*\n       rdbuf() const\n       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n \n       __string_type\n       str() const\n       { return _M_stringbuf.str(); }\n-  \n-      void \n+\n+      void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n     };\n@@ -276,12 +276,12 @@ namespace std\n \n     public:\n      // Constructors/destructor:\n-      explicit \n+      explicit\n       basic_ostringstream(ios_base::openmode __mode = ios_base::out)\n       : __ostream_type(NULL), _M_stringbuf(__mode | ios_base::out)\n       { this->init(&_M_stringbuf); }\n \n-      explicit \n+      explicit\n       basic_ostringstream(const __string_type& __str,\n \t\t\t  ios_base::openmode __mode = ios_base::out)\n       : __ostream_type(NULL), _M_stringbuf(__str, __mode | ios_base::out)\n@@ -291,20 +291,20 @@ namespace std\n       { }\n \n       // Members:\n-      __stringbuf_type* \n+      __stringbuf_type*\n       rdbuf() const\n       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n \n       __string_type\n       str() const\n       { return _M_stringbuf.str(); }\n- \n-      void \n+\n+      void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n     };\n-  \n-  \n+\n+\n   // 27.7.4  Template class basic_stringstream\n   template <typename _CharT, typename _Traits, typename _Alloc>\n     class basic_stringstream : public basic_iostream<_CharT, _Traits>\n@@ -331,12 +331,12 @@ namespace std\n \n     public:\n       // Constructors/destructors\n-      explicit \n+      explicit\n       basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)\n       : __iostream_type(NULL), _M_stringbuf(__m)\n       { this->init(&_M_stringbuf); }\n \n-      explicit \n+      explicit\n       basic_stringstream(const __string_type& __str,\n \t\t\t ios_base::openmode __m = ios_base::out | ios_base::in)\n       : __iostream_type(NULL), _M_stringbuf(__str, __m)\n@@ -346,15 +346,15 @@ namespace std\n       { }\n \n       // Members:\n-      __stringbuf_type* \n+      __stringbuf_type*\n       rdbuf() const\n       { return const_cast<__stringbuf_type*>(&_M_stringbuf); }\n \n       __string_type\n       str() const\n       { return _M_stringbuf.str(); }\n \n-      void \n+      void\n       str(const __string_type& __s)\n       { _M_stringbuf.str(__s); }\n     };"}, {"sha": "bc0bbb4dd8e1365e5ffe2135e991ba0ce7da342d", "filename": "libstdc++-v3/testsuite/27_io/stringbuf.cc", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798355a229acf2076722cee832a98a1e64b122eb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fstringbuf.cc?ref=798355a229acf2076722cee832a98a1e64b122eb", "patch": "@@ -1,6 +1,7 @@\n // 981208 bkoz test functionality of basic_stringbuf for char_type == char\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -439,12 +440,47 @@ bool test04() {\n }\n \n \n-int main() {\n+// libstdc++/3955 -- ios_base::app overwrites from the beginning\n+bool test05()\n+{\n+  bool test = true;\n+\n+  std::ostringstream os (\"foo\");\n+  os << \"bar\";\n+\n+  test = os.str() == \"bar\";\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n+\n+bool test06()\n+{\n+  bool test = true;\n+\n+  std::ostringstream os (\"foo\", std::ios_base::app);\n+  os << \"bar\";\n+\n+  test = os.str() == \"foobar\";\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+\n+  return test;\n+}\n \n+int main()\n+{\n   test01();\n   test02();\n   test03();\n   test04();\n+  test05();\n+  test06();\n \n   return 0;\n }"}]}