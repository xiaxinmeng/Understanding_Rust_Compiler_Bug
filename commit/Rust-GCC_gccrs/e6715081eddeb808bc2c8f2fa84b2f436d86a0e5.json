{"sha": "e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY3MTUwODFlZGRlYjgwOGJjMmM4ZjJmYTg0YjJmNDM2ZDg2YTBlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-21T07:00:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-21T07:00:52Z"}, "message": "poly_int: instantiate_virtual_regs\n\nThis patch makes the instantiate virtual regs pass track offsets\nas poly_ints.\n\n2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* function.c (in_arg_offset, var_offset, dynamic_offset)\n\t(out_arg_offset, cfa_offset): Change from int to poly_int64.\n\t(instantiate_new_reg): Return the new offset as a poly_int64_pod\n\trather than a HOST_WIDE_INT.\n\t(instantiate_virtual_regs_in_rtx): Track polynomial offsets.\n\t(instantiate_virtual_regs_in_insn): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255920", "tree": {"sha": "2eff5af01ca6c65c6232ba9e366ab22902ec09a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2eff5af01ca6c65c6232ba9e366ab22902ec09a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5/comments", "author": null, "committer": null, "parents": [{"sha": "68184180f25f3c89ebcb9202ff3235f936bcdc78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68184180f25f3c89ebcb9202ff3235f936bcdc78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68184180f25f3c89ebcb9202ff3235f936bcdc78"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "2d682556a80e522d6a80c7094ae0d6b4fb1034e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "patch": "@@ -1,3 +1,14 @@\n+2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* function.c (in_arg_offset, var_offset, dynamic_offset)\n+\t(out_arg_offset, cfa_offset): Change from int to poly_int64.\n+\t(instantiate_new_reg): Return the new offset as a poly_int64_pod\n+\trather than a HOST_WIDE_INT.\n+\t(instantiate_virtual_regs_in_rtx): Track polynomial offsets.\n+\t(instantiate_virtual_regs_in_insn): Likewise.\n+\n 2017-12-21  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "e479b1e5686fe004972d23922e66695cb165dcce", "filename": "gcc/function.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6715081eddeb808bc2c8f2fa84b2f436d86a0e5/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e6715081eddeb808bc2c8f2fa84b2f436d86a0e5", "patch": "@@ -1367,11 +1367,11 @@ initial_value_entry (int i, rtx *hreg, rtx *preg)\n    routines.  They contain the offsets of the virtual registers from their\n    respective hard registers.  */\n \n-static int in_arg_offset;\n-static int var_offset;\n-static int dynamic_offset;\n-static int out_arg_offset;\n-static int cfa_offset;\n+static poly_int64 in_arg_offset;\n+static poly_int64 var_offset;\n+static poly_int64 dynamic_offset;\n+static poly_int64 out_arg_offset;\n+static poly_int64 cfa_offset;\n \n /* In most machines, the stack pointer register is equivalent to the bottom\n    of the stack.  */\n@@ -1418,10 +1418,10 @@ static int cfa_offset;\n    offset indirectly through the pointer.  Otherwise, return 0.  */\n \n static rtx\n-instantiate_new_reg (rtx x, HOST_WIDE_INT *poffset)\n+instantiate_new_reg (rtx x, poly_int64_pod *poffset)\n {\n   rtx new_rtx;\n-  HOST_WIDE_INT offset;\n+  poly_int64 offset;\n \n   if (x == virtual_incoming_args_rtx)\n     {\n@@ -1480,7 +1480,7 @@ instantiate_virtual_regs_in_rtx (rtx *loc)\n       if (rtx x = *loc)\n \t{\n \t  rtx new_rtx;\n-\t  HOST_WIDE_INT offset;\n+\t  poly_int64 offset;\n \t  switch (GET_CODE (x))\n \t    {\n \t    case REG:\n@@ -1533,7 +1533,7 @@ safe_insn_predicate (int code, int operand, rtx x)\n static void\n instantiate_virtual_regs_in_insn (rtx_insn *insn)\n {\n-  HOST_WIDE_INT offset;\n+  poly_int64 offset;\n   int insn_code, i;\n   bool any_change = false;\n   rtx set, new_rtx, x;\n@@ -1572,7 +1572,8 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \t to the generic case is avoiding a new pseudo and eliminating a\n \t move insn in the initial rtl stream.  */\n       new_rtx = instantiate_new_reg (SET_SRC (set), &offset);\n-      if (new_rtx && offset != 0\n+      if (new_rtx\n+\t  && maybe_ne (offset, 0)\n \t  && REG_P (SET_DEST (set))\n \t  && REGNO (SET_DEST (set)) > LAST_VIRTUAL_REGISTER)\n \t{\n@@ -1598,17 +1599,18 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \n       /* Handle a plus involving a virtual register by determining if the\n \t operands remain valid if they're modified in place.  */\n+      poly_int64 delta;\n       if (GET_CODE (SET_SRC (set)) == PLUS\n \t  && recog_data.n_operands >= 3\n \t  && recog_data.operand_loc[1] == &XEXP (SET_SRC (set), 0)\n \t  && recog_data.operand_loc[2] == &XEXP (SET_SRC (set), 1)\n-\t  && CONST_INT_P (recog_data.operand[2])\n+\t  && poly_int_rtx_p (recog_data.operand[2], &delta)\n \t  && (new_rtx = instantiate_new_reg (recog_data.operand[1], &offset)))\n \t{\n-\t  offset += INTVAL (recog_data.operand[2]);\n+\t  offset += delta;\n \n \t  /* If the sum is zero, then replace with a plain move.  */\n-\t  if (offset == 0\n+\t  if (known_eq (offset, 0)\n \t      && REG_P (SET_DEST (set))\n \t      && REGNO (SET_DEST (set)) > LAST_VIRTUAL_REGISTER)\n \t    {\n@@ -1686,7 +1688,7 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \t  new_rtx = instantiate_new_reg (x, &offset);\n \t  if (new_rtx == NULL)\n \t    continue;\n-\t  if (offset == 0)\n+\t  if (known_eq (offset, 0))\n \t    x = new_rtx;\n \t  else\n \t    {\n@@ -1711,7 +1713,7 @@ instantiate_virtual_regs_in_insn (rtx_insn *insn)\n \t  new_rtx = instantiate_new_reg (SUBREG_REG (x), &offset);\n \t  if (new_rtx == NULL)\n \t    continue;\n-\t  if (offset != 0)\n+\t  if (maybe_ne (offset, 0))\n \t    {\n \t      start_sequence ();\n \t      new_rtx = expand_simple_binop"}]}