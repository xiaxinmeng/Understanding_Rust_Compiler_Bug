{"sha": "b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhMTVhODMyNWJhODliOTI2ZTNjNDM3Yjc5NjE4MjlhNmIyZmEyYg==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-07-03T15:37:33Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-07-03T15:37:33Z"}, "message": "ipa-sra: Avoid transitive splits with type mismatches (PR 96040)\n\nPR 96040 revealed IPA-SRA, when checking whether an intended split is\nthe same as the one in a called function does not also check if the\ntypes match and the transformation code does not handle any resulting\ntype mismatches.  This patch simply avoids the the split in the case\nof mismatches, so that we do not have to be careful about invalid\nfloating-point values being passed in floating point registers and\nrelated issues.\n\ngcc/ChangeLog:\n\n2020-07-03  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/96040\n\t* ipa-sra.c (all_callee_accesses_present_p): Do not accept type\n\tmismatched accesses.\n\ngcc/testsuite/ChangeLog:\n\n2020-07-03  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/96040\n\t* gcc.dg/ipa/pr96040.c: New test.", "tree": {"sha": "3183b83ea5aaa813b93c3e4ea754a6c3d56a2e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3183b83ea5aaa813b93c3e4ea754a6c3d56a2e08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9a15a8325ba89b926e3c437b7961829a6b2fa2b/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f3f7fe08bdd49367f682398e1d2f4e6b60ef84"}], "stats": {"total": 61, "additions": 60, "deletions": 1}, "files": [{"sha": "03e3fc55dafee607e0b8eac0056f6a023550b9fa", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a15a8325ba89b926e3c437b7961829a6b2fa2b/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a15a8325ba89b926e3c437b7961829a6b2fa2b/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "patch": "@@ -3271,7 +3271,9 @@ all_callee_accesses_present_p (isra_param_desc *param_desc,\n \tcontinue;\n       param_access *pacc = find_param_access (param_desc, argacc->unit_offset,\n \t\t\t\t\t      argacc->unit_size);\n-      if (!pacc || !pacc->certain)\n+      if (!pacc\n+\t  || !pacc->certain\n+\t  || !types_compatible_p (argacc->type, pacc->type))\n \treturn false;\n     }\n   return true;"}, {"sha": "af7e9c4ed941849f906474cd0ad601dcad40035f", "filename": "gcc/testsuite/gcc.dg/ipa/pr96040.c", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9a15a8325ba89b926e3c437b7961829a6b2fa2b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96040.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9a15a8325ba89b926e3c437b7961829a6b2fa2b/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96040.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96040.c?ref=b9a15a8325ba89b926e3c437b7961829a6b2fa2b", "patch": "@@ -0,0 +1,57 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -std=c99\" } */\n+\n+\n+int puts(const char *);\n+int snprintf(char *, unsigned long, const char *, ...);\n+unsigned long strspn(const char *, const char *);\n+\n+struct TValue {\n+  union {\n+    long long i;\n+    double n;\n+  } value_;\n+  unsigned char tt_;\n+};\n+\n+static int tostringbuff (struct TValue *num, char *str) {\n+  int len;\n+  if (num->tt_ == 3) {\n+    len = snprintf(str,50,\"%lld\",num->value_.i);\n+  } else {\n+    len = snprintf(str,50,\"%.14g\",num->value_.n);\n+    if (str[strspn(str, \"-0123456789\")] == '\\0') {\n+      str[len++] = '.';\n+      str[len++] = '0';\n+    }\n+  }\n+  return len;\n+}\n+\n+void unused (int *buff, struct TValue *num) {\n+  char junk[50];\n+  *buff += tostringbuff(num, junk);\n+}\n+\n+char space[400];\n+\n+void addnum2buff (int *buff, struct TValue *num) __attribute__((__noinline__));\n+void addnum2buff (int *buff, struct TValue *num) {\n+  *buff += tostringbuff(num, space);\n+}\n+\n+int __attribute__((noipa)) check_space (char *s)\n+{\n+  return (s[0] == '1' && s[1] == '.' && s[2] =='0' && s[3] == '\\0');\n+}\n+\n+int main(void) {\n+    int buff = 0;\n+    struct TValue num;\n+    num.value_.n = 1.0;\n+    num.tt_ = 19;\n+    addnum2buff(&buff, &num);\n+    if (!check_space(space))\n+      __builtin_abort ();\n+    return 0;\n+}"}]}