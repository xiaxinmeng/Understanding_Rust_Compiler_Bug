{"sha": "94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRmZjRjOWRkOThmMzkyODBmYmEyMmQxYWQwOTU4ZmIyNWE1MzYzYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-22T18:17:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-01-25T15:36:27Z"}, "message": "c++: [[no_unique_address]] in empty base [PR98463]\n\nIn this testcase, cxx_eval_store_expression got confused trying to build up\nCONSTRUCTORs for initializing a subobject because the subobject is a member\nof an empty base.  In C++14 mode and below we don't build FIELD_DECLs for\nempty bases, so the CONSTRUCTOR skipped the empty base, and treated the\nmember as a member of the derived class, which breaks.\n\nFixed by recognizing this situation and giving up on trying to build a\nCONSTRUCTOR for the inner target at that point; since it doesn't have any\ndata, we don't need to actually store anything.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/98463\n\t* constexpr.c (get_or_insert_ctor_field): Add check.\n\t(cxx_eval_store_expression): Handle discontinuity of refs.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/98463\n\t* g++.dg/cpp2a/no_unique_address8.C: New test.", "tree": {"sha": "ab662beb03a2eb1997cef9866d0c14c4d3f5f3b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab662beb03a2eb1997cef9866d0c14c4d3f5f3b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ff4c9dd98f39280fba22d1ad0958fb25a5363b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c83fb7131779ee27fbaa9091065ca6cfedc0c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10c83fb7131779ee27fbaa9091065ca6cfedc0c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10c83fb7131779ee27fbaa9091065ca6cfedc0c5"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "c1217535761eae02b5768faf9925af313caf33cf", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ff4c9dd98f39280fba22d1ad0958fb25a5363b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ff4c9dd98f39280fba22d1ad0958fb25a5363b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "patch": "@@ -3474,7 +3474,9 @@ get_or_insert_ctor_field (tree ctor, tree index, int pos_hint = -1)\n     }\n   else\n     {\n-      gcc_assert (TREE_CODE (index) == FIELD_DECL);\n+      gcc_assert (TREE_CODE (index) == FIELD_DECL\n+\t\t  && (same_type_ignoring_top_level_qualifiers_p\n+\t\t      (DECL_CONTEXT (index), TREE_TYPE (ctor))));\n \n       /* We must keep the CONSTRUCTOR's ELTS in FIELD order.\n \t Usually we meet initializers in that order, but it is\n@@ -5277,7 +5279,7 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n \t\t};\n \t      CONSTRUCTOR_ELTS (ary_ctor)->quick_push (elt);\n \t    }\n-\t  \n+\n \t  *valp = ary_ctor;\n \t}\n \n@@ -5289,6 +5291,18 @@ cxx_eval_store_expression (const constexpr_ctx *ctx, tree t,\n       type = refs->pop();\n       tree index = refs->pop();\n \n+      if (TREE_CODE (index) == FIELD_DECL\n+\t  && !(same_type_ignoring_top_level_qualifiers_p\n+\t       (DECL_CONTEXT (index), TREE_TYPE (*valp))))\n+\t{\n+\t  /* INDEX isn't a member of *valp.  This can happen if it's a member\n+\t     of an empty base which isn't represented with a FIELD_DECL.  Stop\n+\t     trying to build a CONSTRUCTOR for the inner target; we'll notice\n+\t     this disconnect again below and just return init.  */\n+\t  gcc_assert (is_empty_class (DECL_CONTEXT (index)));\n+\t  break;\n+\t}\n+\n       if (code == UNION_TYPE && CONSTRUCTOR_NELTS (*valp)\n \t  && CONSTRUCTOR_ELT (*valp, 0)->index != index)\n \t{"}, {"sha": "8b63ca37bab41d1e5d635ab41680ab69268b4bd8", "filename": "gcc/testsuite/g++.dg/cpp2a/no_unique_address8.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ff4c9dd98f39280fba22d1ad0958fb25a5363b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ff4c9dd98f39280fba22d1ad0958fb25a5363b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fno_unique_address8.C?ref=94ff4c9dd98f39280fba22d1ad0958fb25a5363b", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/98463\n+// { dg-do compile { target c++11 } }\n+\n+template <typename T> struct A { constexpr A () : a() {} [[no_unique_address]] T a; };\n+template <unsigned long, typename...> struct B;\n+template <unsigned long T, typename U, typename... V>\n+struct B<T, U, V...> : B<1, V...>, A<U> {};\n+template <unsigned long T, typename U> struct B<T, U> : A<U> {};\n+template <typename... h> struct C : B<0, h...> {};\n+struct D {};\n+struct E { C<int, D> k; virtual ~E (); } a;"}]}