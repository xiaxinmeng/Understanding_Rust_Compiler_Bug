{"sha": "cace77f4fb8df18c01dfdf9040cc944eedef1147", "node_id": "C_kwDOANBUbNoAKGNhY2U3N2Y0ZmI4ZGYxOGMwMWRmZGY5MDQwY2M5NDRlZWRlZjExNDc", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-27T14:15:55Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-08-27T14:15:55Z"}, "message": "libstdc++: Add test for std::con/disjunction's base class\n\nlibstdc++-v3/ChangeLog:\n\n\t* testsuite/20_util/logical_traits/requirements/base_classes.cc: New test.", "tree": {"sha": "2b469a89ce66440f223e307febf12923007ef3bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b469a89ce66440f223e307febf12923007ef3bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cace77f4fb8df18c01dfdf9040cc944eedef1147", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace77f4fb8df18c01dfdf9040cc944eedef1147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cace77f4fb8df18c01dfdf9040cc944eedef1147", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace77f4fb8df18c01dfdf9040cc944eedef1147/comments", "author": null, "committer": null, "parents": [{"sha": "4d291ca6a48eeeef3f51b8ab8452fe2166f021ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d291ca6a48eeeef3f51b8ab8452fe2166f021ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d291ca6a48eeeef3f51b8ab8452fe2166f021ee"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "9067a3b670ed006c000b1f7d66b1c8e23c138807", "filename": "libstdc++-v3/testsuite/20_util/logical_traits/requirements/base_classes.cc", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cace77f4fb8df18c01dfdf9040cc944eedef1147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fbase_classes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cace77f4fb8df18c01dfdf9040cc944eedef1147/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fbase_classes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Flogical_traits%2Frequirements%2Fbase_classes.cc?ref=cace77f4fb8df18c01dfdf9040cc944eedef1147", "patch": "@@ -0,0 +1,34 @@\n+// { dg-do compile { target c++17 } }\n+\n+#include <type_traits>\n+\n+template<int> struct T : std::true_type { };\n+template<int> struct F : std::false_type { };\n+\n+// [meta.logical]/5: The specialization conjunction<B_1, ..., B_n> has a\n+// public and unambiguous base that is either:\n+//   - the first type B_i in the list true_type, B_1, ..., B_n for which\n+//       bool(B_i::value) is false, or\n+//   - if there is no such B_i, the last type in the list.\n+\n+static_assert(std::is_base_of_v<std::true_type, std::conjunction<>>);\n+static_assert(std::is_base_of_v<T<0>, std::conjunction<T<0>>>);\n+static_assert(std::is_base_of_v<F<0>, std::conjunction<F<0>>>);\n+static_assert(std::is_base_of_v<T<1>, std::conjunction<T<0>, T<1>>>);\n+static_assert(std::is_base_of_v<F<0>, std::conjunction<F<0>, F<1>>>);\n+static_assert(std::is_base_of_v<F<0>, std::conjunction<T<0>, F<0>, F<1>>>);\n+static_assert(std::is_base_of_v<F<0>, std::conjunction<T<0>, F<0>, T<1>, F<1>>>);\n+\n+// [meta.logical]/10: The specialization disjunction<B_1, ..., B_n> has a\n+// public and unambiguous base that is either:\n+//   - the first type B_i in the list false_type, B_1, ..., B_n for which\n+//       bool(B_i::value) is true, or\n+//   - if there is no such B_i, the last type in the list.\n+\n+static_assert(std::is_base_of_v<std::false_type, std::disjunction<>>);\n+static_assert(std::is_base_of_v<T<0>, std::disjunction<T<0>>>);\n+static_assert(std::is_base_of_v<F<0>, std::disjunction<F<0>>>);\n+static_assert(std::is_base_of_v<T<0>, std::disjunction<T<0>, T<1>>>);\n+static_assert(std::is_base_of_v<F<1>, std::disjunction<F<0>, F<1>>>);\n+static_assert(std::is_base_of_v<T<0>, std::disjunction<T<0>, F<0>, F<1>>>);\n+static_assert(std::is_base_of_v<T<0>, std::disjunction<T<0>, F<0>, T<1>, F<1>>>);"}]}