{"sha": "08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhjOGEyNmU5Y2E4N2FkMmRkNWIyNmQzOTdlNjEwN2I2OGFkZmU3Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-03T21:45:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-05-03T21:45:35Z"}, "message": "compiler: recognize and optimize array range clear\n    \n    Recognize\n    \n            for i := range a { a[i] = zero }\n    \n    for array or slice a, and rewrite it to call memclr, as the gc\n    compiler does.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/169398\n\nFrom-SVN: r270862", "tree": {"sha": "72997940c63241636375f8e4b4565d8f6301b724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72997940c63241636375f8e4b4565d8f6301b724"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/comments", "author": null, "committer": null, "parents": [{"sha": "e339291fc13d074bade3fd9ab3cbfacce5a21cbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e339291fc13d074bade3fd9ab3cbfacce5a21cbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e339291fc13d074bade3fd9ab3cbfacce5a21cbd"}], "stats": {"total": 282, "additions": 280, "deletions": 2}, "files": [{"sha": "6cb0662957ee28703e8724d0ac0e3fc313fd1536", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -1,4 +1,4 @@\n-208521930c9b5adcfb495799ee01b6aec86c2ccf\n+4b3015de639cf22ed11ff96097555700909827c8\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "efb3d0dae6c874bae58288233c585c6d02fc2664", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -1671,6 +1671,10 @@ class Boolean_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  { return this->val_ == false; }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -2054,6 +2058,10 @@ class Integer_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  { return mpz_sgn(this->val_) == 0; }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -2474,6 +2482,13 @@ class Float_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  {\n+    return mpfr_zero_p(this->val_) != 0\n+           && mpfr_signbit(this->val_) == 0;\n+  }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -2685,6 +2700,15 @@ class Complex_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  {\n+    return mpfr_zero_p(mpc_realref(this->val_)) != 0\n+           && mpfr_signbit(mpc_realref(this->val_)) == 0\n+           && mpfr_zero_p(mpc_imagref(this->val_)) != 0\n+           && mpfr_signbit(mpc_imagref(this->val_)) == 0;\n+  }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -2922,6 +2946,10 @@ class Const_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  { return this->constant_->const_value()->expr()->is_zero_value(); }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -3289,6 +3317,10 @@ class Nil_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  { return true; }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -3533,6 +3565,28 @@ Type_conversion_expression::do_is_constant() const\n   return true;\n }\n \n+// Return whether a type conversion is a zero value.\n+\n+bool\n+Type_conversion_expression::do_is_zero_value() const\n+{\n+  if (!this->expr_->is_zero_value())\n+    return false;\n+\n+  // Some type conversion from zero value is still not zero value.\n+  // For example, []byte(\"\") or interface{}(0).\n+  // Conservatively, only report true if the RHS is nil.\n+  Type* type = this->type_;\n+  if (type->integer_type() == NULL\n+      && type->float_type() == NULL\n+      && type->complex_type() == NULL\n+      && !type->is_boolean_type()\n+      && !type->is_string_type())\n+    return this->expr_->is_nil_expression();\n+\n+  return true;\n+}\n+\n // Return whether a type conversion can be used in a constant\n // initializer.\n \n@@ -6879,6 +6933,19 @@ String_concat_expression::do_is_constant() const\n   return true;\n }\n \n+bool\n+String_concat_expression::do_is_zero_value() const\n+{\n+  for (Expression_list::const_iterator pe = this->exprs_->begin();\n+       pe != this->exprs_->end();\n+       ++pe)\n+    {\n+      if (!(*pe)->is_zero_value())\n+\treturn false;\n+    }\n+  return true;\n+}\n+\n bool\n String_concat_expression::do_is_static_initializer() const\n {\n@@ -13007,6 +13074,33 @@ Struct_construction_expression::is_constant_struct() const\n   return true;\n }\n \n+// Return whether this is a zero value.\n+\n+bool\n+Struct_construction_expression::do_is_zero_value() const\n+{\n+  if (this->vals() == NULL)\n+    return true;\n+  for (Expression_list::const_iterator pv = this->vals()->begin();\n+       pv != this->vals()->end();\n+       ++pv)\n+    if (*pv != NULL && !(*pv)->is_zero_value())\n+      return false;\n+\n+  const Struct_field_list* fields = this->type_->struct_type()->fields();\n+  for (Struct_field_list::const_iterator pf = fields->begin();\n+       pf != fields->end();\n+       ++pf)\n+    {\n+      // Interface conversion may cause a zero value being converted\n+      // to a non-zero value, like interface{}(0).  Be conservative.\n+      if (pf->type()->interface_type() != NULL)\n+        return false;\n+    }\n+\n+  return true;\n+}\n+\n // Return whether this struct can be used as a constant initializer.\n \n bool\n@@ -13288,6 +13382,28 @@ Array_construction_expression::is_constant_array() const\n   return true;\n }\n \n+// Return whether this is a zero value.\n+\n+bool\n+Array_construction_expression::do_is_zero_value() const\n+{\n+  if (this->vals() == NULL)\n+    return true;\n+\n+  // Interface conversion may cause a zero value being converted\n+  // to a non-zero value, like interface{}(0).  Be conservative.\n+  if (this->type_->array_type()->element_type()->interface_type() != NULL)\n+    return false;\n+\n+  for (Expression_list::const_iterator pv = this->vals()->begin();\n+       pv != this->vals()->end();\n+       ++pv)\n+    if (*pv != NULL && !(*pv)->is_zero_value())\n+      return false;\n+\n+  return true;\n+}\n+\n // Return whether this can be used a constant initializer.\n \n bool"}, {"sha": "d2a347289723063a4889dfcae035531d97b4a0ba", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -544,6 +544,11 @@ class Expression\n   is_constant() const\n   { return this->do_is_constant(); }\n \n+  // Return whether this is the zero value of its type.\n+  bool\n+  is_zero_value() const\n+  { return this->do_is_zero_value(); }\n+\n   // Return whether this expression can be used as a static\n   // initializer.  This is true for an expression that has only\n   // numbers and pointers to global variables or composite literals\n@@ -1066,6 +1071,11 @@ class Expression\n   do_is_constant() const\n   { return false; }\n \n+  // Return whether this is the zero value of its type.\n+  virtual bool\n+  do_is_zero_value() const\n+  { return false; }\n+\n   // Return whether this expression can be used as a constant\n   // initializer.\n   virtual bool\n@@ -1599,6 +1609,10 @@ class String_expression : public Expression\n   do_is_constant() const\n   { return true; }\n \n+  bool\n+  do_is_zero_value() const\n+  { return this->val_ == \"\"; }\n+\n   bool\n   do_is_static_initializer() const\n   { return true; }\n@@ -1692,6 +1706,9 @@ class Type_conversion_expression : public Expression\n   bool\n   do_is_constant() const;\n \n+  bool\n+  do_is_zero_value() const;\n+\n   bool\n   do_is_static_initializer() const;\n \n@@ -1755,6 +1772,10 @@ class Unsafe_type_conversion_expression : public Expression\n   int\n   do_traverse(Traverse* traverse);\n \n+  bool\n+  do_is_zero_value() const\n+  { return this->expr_->is_zero_value(); }\n+\n   bool\n   do_is_static_initializer() const;\n \n@@ -2151,6 +2172,9 @@ class String_concat_expression : public Expression\n   bool\n   do_is_constant() const;\n \n+  bool\n+  do_is_zero_value() const;\n+\n   bool\n   do_is_static_initializer() const;\n \n@@ -3570,14 +3594,17 @@ class Struct_construction_expression : public Expression,\n \ttype_(type)\n   { }\n \n- // Return whether this is a constant initializer.\n+  // Return whether this is a constant initializer.\n   bool\n   is_constant_struct() const;\n \n  protected:\n   int\n   do_traverse(Traverse* traverse);\n \n+  bool\n+  do_is_zero_value() const;\n+\n   bool\n   do_is_static_initializer() const;\n \n@@ -3642,6 +3669,9 @@ class Array_construction_expression : public Expression,\n   virtual int\n   do_traverse(Traverse* traverse);\n \n+  bool\n+  do_is_zero_value() const;\n+\n   bool\n   do_is_static_initializer() const;\n "}, {"sha": "0fcc0a8c78013c3127fe92b230bfaaa8987b7d73", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -313,6 +313,14 @@ DEF_GO_RUNTIME(GCWRITEBARRIER, \"runtime.gcWriteBarrier\",\n DEF_GO_RUNTIME(TYPEDMEMMOVE, \"runtime.typedmemmove\",\n \t       P3(TYPE, POINTER, POINTER), R0())\n \n+// Clear memory that contains no pointer.\n+DEF_GO_RUNTIME(MEMCLRNOPTR, \"runtime.memclrNoHeapPointers\",\n+               P2(POINTER, UINTPTR), R0())\n+\n+// Clear memory that contains pointer.\n+DEF_GO_RUNTIME(MEMCLRHASPTR, \"runtime.memclrHasPointers\",\n+               P2(POINTER, UINTPTR), R0())\n+\n \n // Lock the printer (for print/println).\n DEF_GO_RUNTIME(PRINTLOCK, \"runtime.printlock\", P0(), R0())"}, {"sha": "1827f81901bab00927e9383562f9d4286ef7db14", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -5516,6 +5516,21 @@ For_range_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n           return Statement::make_block_statement(temp_block, loc);\n         }\n     }\n+  else if (range_type->array_type() != NULL)\n+    {\n+      // Slice or array.\n+      Statement* clear = this->lower_array_range_clear(gogo,\n+                                                       range_type,\n+                                                       orig_range_expr,\n+                                                       temp_block,\n+                                                       range_object,\n+                                                       range_temp, loc);\n+      if (clear != NULL)\n+        {\n+          temp_block->add_statement(clear);\n+          return Statement::make_block_statement(temp_block, loc);\n+        }\n+    }\n \n   Temporary_statement* index_temp = Statement::make_temporary(index_type,\n \t\t\t\t\t\t\t      NULL, loc);\n@@ -6237,6 +6252,109 @@ For_range_statement::lower_map_range_clear(Type* map_type,\n   return Statement::make_statement(call, true);\n }\n \n+// Match\n+//\n+//   for i := range a { a[i] = zero }\n+//\n+// Lower it to call memclr on match, and return the statement.  Return\n+// NULL otherwise.\n+\n+Statement*\n+For_range_statement::lower_array_range_clear(Gogo* gogo,\n+                                             Type* array_type,\n+                                             Expression* orig_range_expr,\n+                                             Block* temp_block,\n+                                             Named_object* range_object,\n+                                             Temporary_statement* range_temp,\n+                                             Location loc)\n+{\n+  if (this->value_var_ != NULL)\n+    return NULL;\n+  if (this->index_var_ == NULL)\n+    return NULL;\n+\n+  // Match the body, a single assignment statement a[i] = zero.\n+  const std::vector<Statement*>* statements = this->statements_->statements();\n+  if (statements->size() != 1)\n+    return NULL;\n+  Assignment_statement* as = statements->at(0)->assignment_statement();\n+  if (as == NULL || !as->rhs()->is_zero_value())\n+    return NULL;\n+  if (as->lhs()->type()->interface_type() != NULL\n+      && as->rhs()->type()->interface_type() == NULL\n+      && !as->rhs()->type()->is_nil_type())\n+    // Implicit type conversion may change a zero value to non-zero, like\n+    // interface{}(0).\n+    return NULL;\n+  Array_index_expression* aie = as->lhs()->array_index_expression();\n+  if (aie == NULL || aie->end() != NULL\n+      || !Expression::is_same_variable(orig_range_expr, aie->array())\n+      || !Expression::is_same_variable(this->index_var_, aie->start()))\n+    return NULL;\n+\n+  // Everything matches. Rewrite to\n+  //\n+  //   if len(a) != 0 {\n+  //     tmp1 = &a[0]\n+  //     tmp2 = len(a)*sizeof(elem(a))\n+  //     memclr{NoHeap,Has}Pointers(tmp1, tmp2)\n+  //     i = len(a) - 1\n+  //   }\n+\n+  Type* elem_type = array_type->array_type()->element_type();\n+  int64_t elme_sz;\n+  bool ok = elem_type->backend_type_size(gogo, &elme_sz);\n+  if (!ok)\n+    return NULL;\n+\n+  Block* b = new Block(temp_block, loc);\n+\n+  Expression* ref;\n+  if (range_object == NULL && range_temp == NULL)\n+    // is_same_variable implies no side effect, so it is ok to copy.\n+    ref = orig_range_expr->copy();\n+  else\n+    ref = this->make_range_ref(range_object, range_temp, loc);\n+  Expression* len = this->call_builtin(gogo, \"len\", ref, loc);\n+  Temporary_statement* tslen = Statement::make_temporary(NULL, len, loc);\n+  temp_block->add_statement(tslen);\n+\n+  Expression* zero = Expression::make_integer_ul(0, this->index_var_->type(), loc);\n+  ref = ref->copy();\n+  Expression* elem = Expression::make_array_index(ref, zero, NULL, NULL, loc);\n+  elem->array_index_expression()->set_needs_bounds_check(false);\n+  Expression* e1 = Expression::make_unary(OPERATOR_AND, elem, loc);\n+  Temporary_statement* ts1 = Statement::make_temporary(NULL, e1, loc);\n+  b->add_statement(ts1);\n+\n+  len = Expression::make_temporary_reference(tslen, loc);\n+  Expression* sz = Expression::make_integer_int64(elme_sz, len->type(), loc);\n+  Expression* e2 = Expression::make_binary(OPERATOR_MULT, len, sz, loc);\n+  Temporary_statement* ts2 = Statement::make_temporary(NULL, e2, loc);\n+  b->add_statement(ts2);\n+\n+  Expression* arg1 = Expression::make_temporary_reference(ts1, loc);\n+  Expression* arg2 = Expression::make_temporary_reference(ts2, loc);\n+  Runtime::Function code = (elem_type->has_pointer()\n+                            ? Runtime::MEMCLRHASPTR\n+                            : Runtime::MEMCLRNOPTR);\n+  Expression* call = Runtime::make_call(code, loc, 2, arg1, arg2);\n+  Statement* cs3 = Statement::make_statement(call, true);\n+  b->add_statement(cs3);\n+\n+  len = Expression::make_temporary_reference(tslen, loc);\n+  Expression* one = Expression::make_integer_ul(1, len->type(), loc);\n+  Expression* rhs = Expression::make_binary(OPERATOR_MINUS, len, one, loc);\n+  Expression* lhs = this->index_var_->copy();\n+  Statement* as4 = Statement::make_assignment(lhs, rhs, loc);\n+  b->add_statement(as4);\n+\n+  len = Expression::make_temporary_reference(tslen, loc);\n+  zero = zero->copy();\n+  Expression* cond = Expression::make_binary(OPERATOR_NOTEQ, len, zero, loc);\n+  return Statement::make_if_statement(cond, b, NULL, loc);\n+}\n+\n // Return the break LABEL_EXPR.\n \n Unnamed_label*"}, {"sha": "ec9ade3f9e7075f5516693add813bd0ac2dd3a55", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -1622,6 +1622,11 @@ class For_range_statement : public Statement\n   lower_map_range_clear(Type*, Block*, Expression*, Named_object*,\n                         Temporary_statement*, Location);\n \n+  Statement*\n+  lower_array_range_clear(Gogo*, Type*, Expression*, Block*,\n+                          Named_object*, Temporary_statement*,\n+                          Location);\n+\n   // The variable which is set to the index value.\n   Expression* index_var_;\n   // The variable which is set to the element value.  This may be"}, {"sha": "89febb9d4a239f31b163456223d6b08d3b47d5b3", "filename": "libgo/go/runtime/mbarrier.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/libgo%2Fgo%2Fruntime%2Fmbarrier.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08c8a26e9ca87ad2dd5b26d397e6107b68adfe76/libgo%2Fgo%2Fruntime%2Fmbarrier.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmbarrier.go?ref=08c8a26e9ca87ad2dd5b26d397e6107b68adfe76", "patch": "@@ -23,6 +23,7 @@ import (\n //\n //go:linkname typedmemmove runtime.typedmemmove\n //go:linkname typedslicecopy runtime.typedslicecopy\n+//go:linkname memclrHasPointers runtime.memclrHasPointers\n \n // Go uses a hybrid barrier that combines a Yuasa-style deletion\n // barrier\u2014which shades the object whose reference is being"}]}