{"sha": "523ca6403c68d580043af01485f2a8a8ce3a56d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIzY2E2NDAzYzY4ZDU4MDA0M2FmMDE0ODVmMmE4YThjZTNhNTZkMQ==", "commit": {"author": {"name": "Corentin Gay", "email": "gay@adacore.com", "date": "2021-05-05T00:49:43Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-05-05T00:49:43Z"}, "message": "ctype support for libstdc++ on VxWorks\n\nfor  libstdc++-v3/ChangeLog\n\n\t* acinclude.m4: Add VxWorks-specific case for the\n\tconfiguration of ctypes.\n\t* configure: Regenerate.\n\t* config/locale/vxworks/ctype_members.cc: Add VxWorks-specific\n\tversion.\n\t* config/os/vxworks/ctype_base.h: Adjust for VxWorks7+.\n\t* config/os/vxworks/ctype_configure_char.cc: Likewise.\n\t* config/os/vxworks/ctype_inline.h: Likewise.\n\t* testsuite/28_regex/traits/char/isctype.cc: Defines\n\tNEWLINE_IN_CLASS_BLANK if the target is VxWorks.\n\t* testsuite/28_regex/traits/wchar_t/isctype.cc: Likewise.", "tree": {"sha": "334e1e19f4c0a51d35cbdea7ccd77973f462ffbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/334e1e19f4c0a51d35cbdea7ccd77973f462ffbe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/523ca6403c68d580043af01485f2a8a8ce3a56d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523ca6403c68d580043af01485f2a8a8ce3a56d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/523ca6403c68d580043af01485f2a8a8ce3a56d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/523ca6403c68d580043af01485f2a8a8ce3a56d1/comments", "author": {"login": "ashleygay", "id": 28534730, "node_id": "MDQ6VXNlcjI4NTM0NzMw", "avatar_url": "https://avatars.githubusercontent.com/u/28534730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ashleygay", "html_url": "https://github.com/ashleygay", "followers_url": "https://api.github.com/users/ashleygay/followers", "following_url": "https://api.github.com/users/ashleygay/following{/other_user}", "gists_url": "https://api.github.com/users/ashleygay/gists{/gist_id}", "starred_url": "https://api.github.com/users/ashleygay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ashleygay/subscriptions", "organizations_url": "https://api.github.com/users/ashleygay/orgs", "repos_url": "https://api.github.com/users/ashleygay/repos", "events_url": "https://api.github.com/users/ashleygay/events{/privacy}", "received_events_url": "https://api.github.com/users/ashleygay/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9aed32cc8f1baca398a203ddf4df2f80f43562c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9aed32cc8f1baca398a203ddf4df2f80f43562c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9aed32cc8f1baca398a203ddf4df2f80f43562c1"}], "stats": {"total": 407, "additions": 406, "deletions": 1}, "files": [{"sha": "90ecc4a87a2531cf8cb6c96afd34cac1251d4155", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -2391,6 +2391,9 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n       darwin*)\n \tenable_clocale_flag=darwin\n \t;;\n+      vxworks*)\n+\tenable_clocale_flag=vxworks\n+\t;;\n       dragonfly* | freebsd*)\n \tenable_clocale_flag=dragonfly\n \t;;\n@@ -2485,7 +2488,22 @@ AC_DEFUN([GLIBCXX_ENABLE_CLOCALE], [\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n+    vxworks)\n+      AC_MSG_RESULT(vxworks)\n \n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/generic/c_locale.cc\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/vxworks/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n     dragonfly)\n       AC_MSG_RESULT(dragonfly or freebsd)\n "}, {"sha": "f9dd64c73ff78647186787c5104e094b9fdf775b", "filename": "libstdc++-v3/config/locale/vxworks/ctype_members.cc", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fvxworks%2Fctype_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fvxworks%2Fctype_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fvxworks%2Fctype_members.cc?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -0,0 +1,292 @@\n+// std::ctype implementation details, vxworks specific version -*- C++ -*-\n+\n+// Copyright (C) 2001-2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 22.2.1.1.2  ctype virtual functions.\n+//\n+\n+// Originally written by Benjamin Kosnik <bkoz@redhat.com>.\n+// Ported to vxworks by Corentin Gay <gay@adacore.com>.\n+\n+#include <locale>\n+#include <cstdlib>\n+#include <cstring>\n+#include <cstdio>\n+#include <iostream>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // NB: The other ctype<char> specializations are in src/locale.cc and\n+  // various /config/os/* files.\n+  ctype_byname<char>::ctype_byname(const char* __s, size_t __refs)\n+  : ctype<char>(0, false, __refs)\n+  {\n+    if (std::strcmp(__s, \"C\") != 0 && std::strcmp(__s, \"POSIX\") != 0)\n+      {\n+\tthis->_S_destroy_c_locale(this->_M_c_locale_ctype);\n+\tthis->_S_create_c_locale(this->_M_c_locale_ctype, __s);\n+      }\n+  }\n+\n+  ctype_byname<char>::~ctype_byname()\n+  { }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  ctype<wchar_t>::__wmask_type\n+  ctype<wchar_t>::_M_convert_to_wmask(const mask __m) const throw()\n+  {\n+    __wmask_type __ret;\n+\n+    switch (__m)\n+      {\n+      case space:\n+\t__ret = wctype(\"space\");\n+\tbreak;\n+      case print:\n+\t__ret = wctype(\"print\");\n+\tbreak;\n+      case cntrl:\n+\t__ret = wctype(\"cntrl\");\n+\tbreak;\n+      case upper:\n+\t__ret = wctype(\"upper\");\n+\tbreak;\n+      case lower:\n+\t__ret = wctype(\"lower\");\n+\tbreak;\n+      case alpha:\n+\t__ret = wctype(\"alpha\");\n+\tbreak;\n+      case digit:\n+\t__ret = wctype(\"digit\");\n+\tbreak;\n+      case punct:\n+\t__ret = wctype(\"punct\");\n+\tbreak;\n+      case xdigit:\n+\t__ret = wctype(\"xdigit\");\n+\tbreak;\n+      case alnum:\n+\t__ret = wctype(\"alnum\");\n+\tbreak;\n+      case graph:\n+\t__ret = wctype(\"graph\");\n+\tbreak;\n+      default:\n+\t  __ret = __wmask_type();\n+\t  break;\n+      }\n+    return __ret;\n+  };\n+\n+  wchar_t\n+  ctype<wchar_t>::do_toupper(wchar_t __c) const\n+  { return towupper(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+\t*__lo = towupper(*__lo);\n+\t++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::do_tolower(wchar_t __c) const\n+  { return towlower(__c); }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi)\n+      {\n+\t*__lo = towlower(*__lo);\n+\t++__lo;\n+      }\n+    return __hi;\n+  }\n+\n+  bool\n+  ctype<wchar_t>::\n+  do_is(mask __m, char_type __c) const\n+  {\n+    bool __ret = false;\n+    // In VxWorks, a ctype is a short int, thus if we go up to the 15th index,\n+    // we will overflow.\n+    const size_t __bitmasksize = 14;\n+\n+    // VxWorks does not consider spaces to be blank, however, the testsuite\n+    // and more generally the libstdc++ rely on it, we explicitly handle\n+    // that case here.\n+    if ((__m & blank) && isspace(__c))\n+      {\n+\t__ret = true;\n+      }\n+    else\n+      {\n+\tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur) {\n+\t  if (__m & _M_bit[__bitcur]\n+\t      && iswctype(__c, _M_wmask[__bitcur]))\n+\t    {\n+\t      __ret = true;\n+\t      break;\n+\t    }\n+\t}\n+      }\n+    return __ret;\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_is(const wchar_t* __lo, const wchar_t* __hi, mask* __vec) const\n+  {\n+    for (;__lo < __hi; ++__vec, ++__lo)\n+      {\n+\tconst size_t __bitmasksize = 14;\n+\t// In VxWorks, a ctype is a short int, thus if we go up to the 15th index,\n+\t// we will overflow.\n+\tmask __m = 0;\n+\t// VxWorks does not consider space as blank, so let's add an explicit\n+\t// check.\n+\tif (isspace(*__lo))\n+\t  __m |= blank;\n+\tfor (size_t __bitcur = 0; __bitcur <= __bitmasksize; ++__bitcur)\n+\t  if (iswctype(*__lo, _M_wmask[__bitcur]))\n+\t    __m |= _M_bit[__bitcur];\n+\t*__vec = __m;\n+      }\n+    return __hi;\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_is(mask __m, const wchar_t* __lo, const wchar_t* __hi) const\n+  {\n+    while (__lo < __hi && !this->do_is(__m, *__lo))\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const\n+  {\n+    while (__lo < __hi && this->do_is(__m, *__lo) != 0)\n+      ++__lo;\n+    return __lo;\n+  }\n+\n+  wchar_t\n+  ctype<wchar_t>::\n+  do_widen(char __c) const\n+  { return _M_widen[static_cast<unsigned char>(__c)]; }\n+\n+  const char*\n+  ctype<wchar_t>::\n+  do_widen(const char* __lo, const char* __hi, wchar_t* __dest) const\n+  {\n+    while (__lo < __hi)\n+      {\n+\t*__dest = _M_widen[static_cast<unsigned char>(*__lo)];\n+\t++__lo;\n+\t++__dest;\n+      }\n+    return __hi;\n+  }\n+\n+  char\n+  ctype<wchar_t>::\n+  do_narrow(wchar_t __wc, char __dfault) const\n+  {\n+    if (__wc >= 0 && __wc < 128 && _M_narrow_ok)\n+      return _M_narrow[__wc];\n+    const int __c = wctob(__wc);\n+    return (__c == EOF ? __dfault : static_cast<char>(__c));\n+  }\n+\n+  const wchar_t*\n+  ctype<wchar_t>::\n+  do_narrow(const wchar_t* __lo, const wchar_t* __hi, char __dfault,\n+\t    char* __dest) const\n+  {\n+    if (_M_narrow_ok)\n+      while (__lo < __hi)\n+\t{\n+\t  if (*__lo >= 0 && *__lo < 128)\n+\t    *__dest = _M_narrow[*__lo];\n+\t  else\n+\t    {\n+\t      const int __c = wctob(*__lo);\n+\t      *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t    }\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    else\n+      while (__lo < __hi)\n+\t{\n+\t  const int __c = wctob(*__lo);\n+\t  *__dest = (__c == EOF ? __dfault : static_cast<char>(__c));\n+\t  ++__lo;\n+\t  ++__dest;\n+\t}\n+    return __hi;\n+  }\n+\n+  void\n+  ctype<wchar_t>::_M_initialize_ctype() throw()\n+  {\n+    wint_t __i;\n+    for (__i = 0; __i < 128; ++__i)\n+      {\n+\tconst int __c = wctob(__i);\n+\tif (__c == EOF)\n+\t  break;\n+\telse\n+\t  _M_narrow[__i] = static_cast<char>(__c);\n+      }\n+    if (__i == 128)\n+      _M_narrow_ok = true;\n+    else\n+      _M_narrow_ok = false;\n+    for (size_t __i = 0;\n+\t __i < sizeof(_M_widen) / sizeof(wint_t); ++__i)\n+      _M_widen[__i] = btowc(__i);\n+\n+    // In VxWorks, a ctype is a short int, thus if we go up to the 15th index,\n+    // we will overflow.\n+    for (size_t __i = 0; __i <= 14; ++__i)\n+      {\n+\t_M_bit[__i] = static_cast<mask>(1 << __i);\n+\t_M_wmask[__i] = _M_convert_to_wmask(_M_bit[__i]);\n+      }\n+  }\n+#endif //  _GLIBCXX_USE_WCHAR_T\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "951cb80d456ef4c167b27c2cc24d22547fa4af28", "filename": "libstdc++-v3/config/os/vxworks/ctype_base.h", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_base.h?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -28,13 +28,16 @@\n \n // Information extracted from target/h/ctype.h.\n \n+#include <_vxworks-versions.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   /// @brief  Base class for ctype.\n   struct ctype_base\n   {\n+#if _VXWORKS_MAJOR_LT(7) && !defined(__RTP__)\n     // Non-standard typedefs.\n     typedef const unsigned char* \t__to_type;\n \n@@ -50,11 +53,33 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     static const mask print \t= (_C_UPPER | _C_LOWER | _C_NUMBER\n \t\t\t\t   | _C_WHITE_SPACE | _C_PUNCT);\n     static const mask graph \t= _C_UPPER | _C_LOWER | _C_NUMBER | _C_PUNCT;\n-    static const mask cntrl \t= _C_CONTROL;\n+    static const mask cntrl \t= _C_CONTROL | _C_B;\n     static const mask punct \t= _C_PUNCT;\n     static const mask alnum \t= _C_UPPER | _C_LOWER | _C_NUMBER;\n #if __cplusplus >= 201103L\n     static const mask blank\t= _C_WHITE_SPACE;\n+#endif\n+#else\n+    // Non-standard typedefs.\n+    typedef const short* \t__to_type;\n+\n+    // NB: Offsets into ctype<char>::_M_table force a particular size\n+    // on the mask type. Because of this, we don't use an enum.\n+    typedef short\tmask;\n+    static const mask upper    \t= _UP;\n+    static const mask lower \t= _LO;\n+    static const mask alpha \t= _UP|_LO|_XA;\n+    static const mask digit \t= _DI;\n+    static const mask xdigit \t= _XD;\n+    static const mask space \t= _CN|_SP|_XS;\n+    static const mask print \t= _DI|_LO|_PU|_SP|_UP|_XA;\n+    static const mask graph \t= _DI|_LO|_PU|_UP|_XA;\n+    static const mask cntrl \t= _BB;\n+    static const mask punct \t= _PU;\n+    static const mask alnum \t= _DI|_LO|_UP|_XA;\n+#if __cplusplus >= 201103L\n+    static const mask blank\t= _SP|_XB;\n+#endif\n #endif\n   };\n "}, {"sha": "34f12dbb1f78be8f489928eea64de2df8cbea5da", "filename": "libstdc++-v3/config/os/vxworks/ctype_configure_char.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_configure_char.cc?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -28,6 +28,8 @@\n // ISO C++ 14882: 22.1  Locales\n //\n \n+#include <_vxworks-versions.h>\n+\n #include <locale>\n #include <cstdlib>\n #include <cstring>\n@@ -38,9 +40,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n // Information as gleaned from target/h/ctype.h\n \n+#if _VXWORKS_MAJOR_LT(7) && !defined(__RTP__)\n   const ctype_base::mask*\n   ctype<char>::classic_table() throw()\n   { return __ctype; }\n+#else\n+  const ctype_base::mask*\n+  ctype<char>::classic_table() throw()\n+  { return _Getpctype(); }\n+# define __toupper _CToupper\n+# define __tolower _CTolower\n+#endif\n \n   ctype<char>::ctype(__c_locale, const mask* __table, bool __del,\n \t\t     size_t __refs)"}, {"sha": "885886fa92b758562b04f5db2af603f8a4c406ef", "filename": "libstdc++-v3/config/os/vxworks/ctype_inline.h", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fvxworks%2Fctype_inline.h?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -36,10 +36,13 @@\n // ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n // functions go in ctype.cc\n \n+#include <_vxworks-versions.h>\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+#if _VXWORKS_MAJOR_LT(7) && !defined(__RTP__)\n   bool\n   ctype<char>::\n   is(mask __m, char __c) const\n@@ -74,5 +77,41 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __low;\n   }\n \n+#else\n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const\n+  { return _Getpctype()[static_cast<int>(__c)] & __m; }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const\n+  {\n+    while (__low < __high)\n+      *__vec++ = _Getpctype()[static_cast<int>(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high\n+\t   && !(_Getpctype()[static_cast<int>(*__low)] & __m))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const\n+  {\n+    while (__low < __high\n+\t   && (_Getpctype()[static_cast<int>(*__low)] & __m))\n+      ++__low;\n+    return __low;\n+  }\n+#endif\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "6f08b65c8ba769413a5f94ab3e6d0f6a4ef58982", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -16403,6 +16403,9 @@ fi\n       darwin*)\n \tenable_clocale_flag=darwin\n \t;;\n+      vxworks*)\n+\tenable_clocale_flag=vxworks\n+\t;;\n       dragonfly* | freebsd*)\n \tenable_clocale_flag=dragonfly\n \t;;\n@@ -16550,7 +16553,23 @@ $as_echo \"darwin\" >&6; }\n       CTIME_CC=config/locale/generic/time_members.cc\n       CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n       ;;\n+    vxworks)\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: vxworks\" >&5\n+$as_echo \"vxworks\" >&6; }\n \n+      CLOCALE_H=config/locale/generic/c_locale.h\n+      CLOCALE_CC=config/locale/generic/c_locale.cc\n+      CCODECVT_CC=config/locale/generic/codecvt_members.cc\n+      CCOLLATE_CC=config/locale/generic/collate_members.cc\n+      CCTYPE_CC=config/locale/vxworks/ctype_members.cc\n+      CMESSAGES_H=config/locale/generic/messages_members.h\n+      CMESSAGES_CC=config/locale/generic/messages_members.cc\n+      CMONEY_CC=config/locale/generic/monetary_members.cc\n+      CNUMERIC_CC=config/locale/generic/numeric_members.cc\n+      CTIME_H=config/locale/generic/time_members.h\n+      CTIME_CC=config/locale/generic/time_members.cc\n+      CLOCALE_INTERNAL_H=config/locale/generic/c++locale_internal.h\n+      ;;\n     dragonfly)\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: dragonfly or freebsd\" >&5\n $as_echo \"dragonfly or freebsd\" >&6; }"}, {"sha": "5dc5074c3da0b7c91999e758768bb5e044ff6cff", "filename": "libstdc++-v3/testsuite/28_regex/traits/char/isctype.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fchar%2Fisctype.cc?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -1,6 +1,7 @@\n // { dg-do run { target c++11 } }\n // { dg-timeout-factor 2 }\n // { dg-additional-options \"-DNEWLINE_IN_CLASS_BLANK\" { target newlib } }\n+// { dg-additional-options \"-DNEWLINE_IN_CLASS_BLANK\" { target *-vxworks*-* } }\n \n //\n // 2010-06-23  Stephen M. Webb <stephen.webb@bregmasoft.ca>"}, {"sha": "e3de5ea9ee91181263bf240c32e77e0ff0c1d973", "filename": "libstdc++-v3/testsuite/28_regex/traits/wchar_t/isctype.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/523ca6403c68d580043af01485f2a8a8ce3a56d1/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F28_regex%2Ftraits%2Fwchar_t%2Fisctype.cc?ref=523ca6403c68d580043af01485f2a8a8ce3a56d1", "patch": "@@ -1,6 +1,7 @@\n // { dg-do run { target c++11 } }\n // { dg-timeout-factor 2 }\n // { dg-additional-options \"-DNEWLINE_IN_CLASS_BLANK\" { target newlib } }\n+// { dg-additional-options \"-DNEWLINE_IN_CLASS_BLANK\" { target *-vxworks*-* } }\n \n // Copyright (C) 2010-2021 Free Software Foundation, Inc.\n //"}]}