{"sha": "15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjOTRhNTViMTNhZDZjNGMyZTQxNzhkMmRmN2E0ZmUyYWQ4YzU0Yg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2012-12-05T10:15:56Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T10:15:56Z"}, "message": "gnat_rm.texi: Update overflow description.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Update overflow description. Pragma Overflow_Checks\n\tchanged to Overflow_Mode.\n\n2012-12-05  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.ads, exp_ch4.adb, gnat1drv.adb, par-prag.adb, sem_prag.adb,\n\tsnames.ads-tmpl, switch-c.adb, types.ads, checks.adb: Change pragma\n\tOverflow_Checks to Overflow_Mode.\n\tSeparate overflow checking from overflow mode.\n\tSeveral name changes to reflect this separation.\n\tCHECKED mode is renamed STRICT mode.\n\nFrom-SVN: r194193", "tree": {"sha": "4e74a774f8f1bff781b68ad2e46ce576829cbd38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e74a774f8f1bff781b68ad2e46ce576829cbd38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/comments", "author": null, "committer": null, "parents": [{"sha": "de0db391baca1edbebd69d622a98acef75263a0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de0db391baca1edbebd69d622a98acef75263a0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de0db391baca1edbebd69d622a98acef75263a0a"}], "stats": {"total": 230, "additions": 115, "deletions": 115}, "files": [{"sha": "be53a761fc6bc64b706e70f2218d73d3d78f2d5b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -1,3 +1,17 @@\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Update overflow description. Pragma Overflow_Checks\n+\tchanged to Overflow_Mode.\n+\n+2012-12-05  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.ads, exp_ch4.adb, gnat1drv.adb, par-prag.adb, sem_prag.adb,\n+\tsnames.ads-tmpl, switch-c.adb, types.ads, checks.adb: Change pragma\n+\tOverflow_Checks to Overflow_Mode.\n+\tSeparate overflow checking from overflow mode.\n+\tSeveral name changes to reflect this separation.\n+\tCHECKED mode is renamed STRICT mode.\n+\n 2012-12-05  Yannick Moy  <moy@adacore.com>\n \n \t* gnat1drv.adb (Adjust_Global_Switches): Move setting of flags for"}, {"sha": "841b17861b2c905f78b356404655f4e27c5ea148", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -1091,7 +1091,7 @@ package body Checks is\n       Result_Type : constant Entity_Id := Etype (Op);\n       --  Original result type\n \n-      Check_Mode : constant Overflow_Check_Type := Overflow_Check_Mode;\n+      Check_Mode : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       pragma Assert (Check_Mode in Minimized_Or_Eliminated);\n \n       Lo, Hi : Uint;\n@@ -1682,7 +1682,7 @@ package body Checks is\n       Left  : constant Node_Id    := Left_Opnd (N);\n       Right : constant Node_Id    := Right_Opnd (N);\n \n-      Mode : constant Overflow_Check_Type := Overflow_Check_Mode;\n+      Mode : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       --  Current overflow checking mode\n \n       LLB : Uint;\n@@ -4425,7 +4425,7 @@ package body Checks is\n \n    procedure Enable_Overflow_Check (N : Node_Id) is\n       Typ  : constant Entity_Id           := Base_Type (Etype (N));\n-      Mode : constant Overflow_Check_Type := Overflow_Check_Mode;\n+      Mode : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       Chk  : Nat;\n       OK   : Boolean;\n       Ent  : Entity_Id;\n@@ -6738,7 +6738,7 @@ package body Checks is\n       pragma Assert (Is_Signed_Integer_Type (Rtyp));\n       --  Result type, must be a signed integer type\n \n-      Check_Mode : constant Overflow_Check_Type := Overflow_Check_Mode;\n+      Check_Mode : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       pragma Assert (Check_Mode in Minimized_Or_Eliminated);\n \n       Loc : constant Source_Ptr := Sloc (N);\n@@ -6848,16 +6848,16 @@ package body Checks is\n       ---------------\n \n       procedure Reanalyze (Typ : Entity_Id; Suppress : Boolean := False) is\n-         Svg : constant Overflow_Check_Type :=\n-                 Scope_Suppress.Overflow_Checks_General;\n-         Sva : constant Overflow_Check_Type :=\n-                 Scope_Suppress.Overflow_Checks_Assertions;\n+         Svg : constant Overflow_Mode_Type :=\n+                 Scope_Suppress.Overflow_Mode_General;\n+         Sva : constant Overflow_Mode_Type :=\n+                 Scope_Suppress.Overflow_Mode_Assertions;\n          Svo : constant Boolean             :=\n                  Scope_Suppress.Suppress (Overflow_Check);\n \n       begin\n-         Scope_Suppress.Overflow_Checks_General    := Strict;\n-         Scope_Suppress.Overflow_Checks_Assertions := Strict;\n+         Scope_Suppress.Overflow_Mode_General    := Strict;\n+         Scope_Suppress.Overflow_Mode_Assertions := Strict;\n \n          if Suppress then\n             Scope_Suppress.Suppress (Overflow_Check) := True;\n@@ -6866,25 +6866,25 @@ package body Checks is\n          Analyze_And_Resolve (N, Typ);\n \n          Scope_Suppress.Suppress (Overflow_Check)  := Svo;\n-         Scope_Suppress.Overflow_Checks_General    := Svg;\n-         Scope_Suppress.Overflow_Checks_Assertions := Sva;\n+         Scope_Suppress.Overflow_Mode_General    := Svg;\n+         Scope_Suppress.Overflow_Mode_Assertions := Sva;\n       end Reanalyze;\n \n       --------------\n       -- Reexpand --\n       --------------\n \n       procedure Reexpand (Suppress : Boolean := False) is\n-         Svg : constant Overflow_Check_Type :=\n-                 Scope_Suppress.Overflow_Checks_General;\n-         Sva : constant Overflow_Check_Type :=\n-                 Scope_Suppress.Overflow_Checks_Assertions;\n+         Svg : constant Overflow_Mode_Type :=\n+                 Scope_Suppress.Overflow_Mode_General;\n+         Sva : constant Overflow_Mode_Type :=\n+                 Scope_Suppress.Overflow_Mode_Assertions;\n          Svo : constant Boolean             :=\n                  Scope_Suppress.Suppress (Overflow_Check);\n \n       begin\n-         Scope_Suppress.Overflow_Checks_General    := Strict;\n-         Scope_Suppress.Overflow_Checks_Assertions := Strict;\n+         Scope_Suppress.Overflow_Mode_General    := Strict;\n+         Scope_Suppress.Overflow_Mode_Assertions := Strict;\n          Set_Analyzed (N, False);\n \n          if Suppress then\n@@ -6894,8 +6894,8 @@ package body Checks is\n          Expand (N);\n \n          Scope_Suppress.Suppress (Overflow_Check)  := Svo;\n-         Scope_Suppress.Overflow_Checks_General    := Svg;\n-         Scope_Suppress.Overflow_Checks_Assertions := Sva;\n+         Scope_Suppress.Overflow_Mode_General    := Svg;\n+         Scope_Suppress.Overflow_Mode_Assertions := Sva;\n       end Reexpand;\n \n    --  Start of processing for Minimize_Eliminate_Overflows\n@@ -7606,36 +7606,36 @@ package body Checks is\n       --  MINIMIZED/ELIMINATED handling, since we are now done with that!\n \n       declare\n-         SG : constant Overflow_Check_Type :=\n-                Scope_Suppress.Overflow_Checks_General;\n-         SA : constant Overflow_Check_Type :=\n-                Scope_Suppress.Overflow_Checks_Assertions;\n+         SG : constant Overflow_Mode_Type :=\n+                Scope_Suppress.Overflow_Mode_General;\n+         SA : constant Overflow_Mode_Type :=\n+                Scope_Suppress.Overflow_Mode_Assertions;\n \n       begin\n-         Scope_Suppress.Overflow_Checks_General    := Strict;\n-         Scope_Suppress.Overflow_Checks_Assertions := Strict;\n+         Scope_Suppress.Overflow_Mode_General    := Strict;\n+         Scope_Suppress.Overflow_Mode_Assertions := Strict;\n \n          if not Do_Overflow_Check (N) then\n             Reanalyze (LLIB, Suppress => True);\n          else\n             Reanalyze (LLIB);\n          end if;\n \n-         Scope_Suppress.Overflow_Checks_General    := SG;\n-         Scope_Suppress.Overflow_Checks_Assertions := SA;\n+         Scope_Suppress.Overflow_Mode_General    := SG;\n+         Scope_Suppress.Overflow_Mode_Assertions := SA;\n       end;\n    end Minimize_Eliminate_Overflows;\n \n    -------------------------\n    -- Overflow_Check_Mode --\n    -------------------------\n \n-   function Overflow_Check_Mode return Overflow_Check_Type is\n+   function Overflow_Check_Mode return Overflow_Mode_Type is\n    begin\n       if In_Assertion_Expr = 0 then\n-         return Scope_Suppress.Overflow_Checks_General;\n+         return Scope_Suppress.Overflow_Mode_General;\n       else\n-         return Scope_Suppress.Overflow_Checks_Assertions;\n+         return Scope_Suppress.Overflow_Mode_Assertions;\n       end if;\n    end Overflow_Check_Mode;\n "}, {"sha": "fa1c0555d971575129a2c20a280497ddec4d15a4", "filename": "gcc/ada/checks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fchecks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fchecks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.ads?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -74,7 +74,7 @@ package Checks is\n    --  is False, then the status of the check can be determined simply by\n    --  examining Scope_Suppress, so this routine is not called in that case.\n \n-   function Overflow_Check_Mode return Overflow_Check_Type;\n+   function Overflow_Check_Mode return Overflow_Mode_Type;\n    --  Returns current overflow checking mode, taking into account whether\n    --  we are inside an assertion expression.\n "}, {"sha": "82af98e43e802df8654f5893cce1e13dee7d4e4f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -2274,7 +2274,7 @@ package body Exp_Ch4 is\n       LLIB : constant Entity_Id := Base_Type (Standard_Long_Long_Integer);\n       --  Entity for Long_Long_Integer'Base\n \n-      Check : constant Overflow_Check_Type := Overflow_Check_Mode;\n+      Check : constant Overflow_Mode_Type := Overflow_Check_Mode;\n       --  Current overflow checking mode\n \n       procedure Set_True;"}, {"sha": "798acf15f87c67378c5cba7afd37a30bb589e5ea", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -205,9 +205,9 @@ procedure Gnat1drv is\n          --  prevents suppressing of overflow checks by default, in code down\n          --  below.\n \n-         if Suppress_Options.Overflow_Checks_General = Not_Set then\n-            Suppress_Options.Overflow_Checks_General    := Strict;\n-            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+         if Suppress_Options.Overflow_Mode_General = Not_Set then\n+            Suppress_Options.Overflow_Mode_General    := Strict;\n+            Suppress_Options.Overflow_Mode_Assertions := Strict;\n          end if;\n \n          --  Kill debug of generated code, since it messes up sloc values\n@@ -323,9 +323,9 @@ procedure Gnat1drv is\n          --  prevents suppressing of overflow checks by default, in code down\n          --  below.\n \n-         if Suppress_Options.Overflow_Checks_General = Not_Set then\n-            Suppress_Options.Overflow_Checks_General    := Strict;\n-            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+         if Suppress_Options.Overflow_Mode_General = Not_Set then\n+            Suppress_Options.Overflow_Mode_General    := Strict;\n+            Suppress_Options.Overflow_Mode_Assertions := Strict;\n          end if;\n \n          --  Kill debug of generated code, since it messes up sloc values\n@@ -463,7 +463,7 @@ procedure Gnat1drv is\n       --  If already set (by -gnato or above in Alfa or CodePeer mode) then we\n       --  have nothing to do.\n \n-      if Opt.Suppress_Options.Overflow_Checks_General /= Not_Set then\n+      if Opt.Suppress_Options.Overflow_Mode_General /= Not_Set then\n          null;\n \n       --  Otherwise set overflow mode defaults\n@@ -480,8 +480,8 @@ procedure Gnat1drv is\n          --  By default set STRICT mode if -gnatg in effect\n \n          if GNAT_Mode then\n-            Suppress_Options.Overflow_Checks_General    := Strict;\n-            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+            Suppress_Options.Overflow_Mode_General    := Strict;\n+            Suppress_Options.Overflow_Mode_Assertions := Strict;\n \n          --  If we have backend divide and overflow checks, then by default\n          --  overflow checks are STRICT. Historically this code used to also\n@@ -492,16 +492,16 @@ procedure Gnat1drv is\n            and\n              Targparm.Backend_Overflow_Checks_On_Target\n          then\n-            Suppress_Options.Overflow_Checks_General    := Strict;\n-            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+            Suppress_Options.Overflow_Mode_General    := Strict;\n+            Suppress_Options.Overflow_Mode_Assertions := Strict;\n \n          --  Otherwise for now, default is STRICT mode. This may change in the\n          --  future, but for now this is the compatible behavior with previous\n          --  versions of GNAT.\n \n          else\n-            Suppress_Options.Overflow_Checks_General    := Strict;\n-            Suppress_Options.Overflow_Checks_Assertions := Strict;\n+            Suppress_Options.Overflow_Mode_General    := Strict;\n+            Suppress_Options.Overflow_Mode_Assertions := Strict;\n          end if;\n       end if;\n "}, {"sha": "cd18f78eddc2bd4120628fa6eaf517e947eccf98", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -180,7 +180,7 @@ Implementation Defined Pragmas\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n * Pragma Ordered::\n-* Pragma Overflow_Checks::\n+* Pragma Overflow_Mode::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -919,7 +919,7 @@ consideration, the use of these pragmas should be minimized.\n * Pragma Obsolescent::\n * Pragma Optimize_Alignment::\n * Pragma Ordered::\n-* Pragma Overflow_Checks::\n+* Pragma Overflow_Mode::\n * Pragma Passive::\n * Pragma Persistent_BSS::\n * Pragma Polling::\n@@ -4162,23 +4162,24 @@ as unordered, and will generate warnings for inappropriate uses.\n For additional information please refer to the description of the\n @option{-gnatw.u} switch in the @value{EDITION} User's Guide.\n \n-@node Pragma Overflow_Checks\n-@unnumberedsec Pragma Overflow_Checks\n+@node Pragma Overflow_Mode\n+@unnumberedsec Pragma Overflow_Mode\n @findex Overflow checks\n-@findex pragma @code{Overflow_Checks}\n+@findex Overflow mode\n+@findex pragma @code{Overflow_Mode}\n @noindent\n Syntax:\n \n @smallexample @c ada\n-pragma Overflow_Checks\n+pragma Overflow_Mode\n  (  [General    =>] MODE\n   [,[Assertions =>] MODE]);\n \n-MODE ::= SUPPRESSED | CHECKED | MINIMIZED | ELIMINATED\n+MODE ::= STRICT | MINIMIZED | ELIMINATED\n @end smallexample\n \n @noindent\n-This pragma sets the current overflow mode to the given mode. For details\n+This pragma sets the current overflow mode to the given setting. For details\n of the meaning of these modes, please refer to the\n ``Overflow Check Handling in GNAT'' appendix in the\n @value{EDITION} User's Guide. If only the @code{General} parameter is present,\n@@ -4190,32 +4191,17 @@ The case of the @code{MODE} parameter is ignored,\n so @code{MINIMIZED}, @code{Minimized} and\n @code{minimized} all have the same effect.\n \n-The @code{Overflow_Checks} pragma has the same scoping and placement\n+The @code{Overflow_Mode} pragma has the same scoping and placement\n rules as pragma @code{Suppress}, so it can occur either as a\n configuration pragma, specifying a default for the whole\n program, or in a declarative scope, where it applies to the\n remaining declarations and statements in that scope.\n \n-The pragma @code{Suppress (Overflow_Check)} sets mode\n-\n-@smallexample @c ada\n-   General => Suppressed\n-@end smallexample\n-\n-@noindent\n-suppressing all overflow checking within and outside\n-assertions.\n-\n-The pragam @code{Unsuppress (Overflow_Check)} sets mode\n-\n-@smallexample @c ada\n-   General => Checked\n-@end smallexample\n-\n-@noindent\n-which causes overflow checking of all intermediate overflows.\n-This applies both inside and outside assertions.\n+The pragma @code{Suppress (Overflow_Check)} suppresses\n+overflow checking, but does not affect the overflow mode.\n \n+The pragam @code{Unsuppress (Overflow_Check)} unsuppresses (enables)\n+overflow checking, but does not affect the overflow mode.\n \n @node Pragma Passive\n @unnumberedsec Pragma Passive"}, {"sha": "246839583fd472a6bcb3c3d2faaf6d776b5102cc", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -1202,7 +1202,7 @@ begin\n            Pragma_Ordered                        |\n            Pragma_Optimize                       |\n            Pragma_Optimize_Alignment             |\n-           Pragma_Overflow_Checks                |\n+           Pragma_Overflow_Mode                  |\n            Pragma_Pack                           |\n            Pragma_Partition_Elaboration_Policy   |\n            Pragma_Passive                        |"}, {"sha": "2765f10ee09a2bd2fa4e49b1d0fd8fe7ace5eb0f", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -11990,11 +11990,11 @@ package body Sem_Prag is\n             Optimize_Alignment_Local := True;\n          end Optimize_Alignment;\n \n-         ---------------------\n-         -- Overflow_Checks --\n-         ---------------------\n+         -------------------\n+         -- Overflow_Mode --\n+         -------------------\n \n-         --  pragma Overflow_Checks\n+         --  pragma Overflow_Mode\n          --    ([General => ] MODE [, [Assertions => ] MODE]);\n \n          --  MODE := STRICT | MINIMIZED | ELIMINATED\n@@ -12003,21 +12003,21 @@ package body Sem_Prag is\n          --  since System.Bignums makes this assumption. This is true of nearly\n          --  all (all?) targets.\n \n-         when Pragma_Overflow_Checks => Overflow_Checks : declare\n-            function Get_Check_Mode\n+         when Pragma_Overflow_Mode => Overflow_Mode : declare\n+            function Get_Overflow_Mode\n               (Name : Name_Id;\n-               Arg  : Node_Id) return Overflow_Check_Type;\n+               Arg  : Node_Id) return Overflow_Mode_Type;\n             --  Function to process one pragma argument, Arg. If an identifier\n-            --  is present, it must be Name. Check type is returned if a valid\n+            --  is present, it must be Name. Mode type is returned if a valid\n             --  argument exists, otherwise an error is signalled.\n \n-            --------------------\n-            -- Get_Check_Mode --\n-            --------------------\n+            -----------------------\n+            -- Get_Overflow_Mode --\n+            -----------------------\n \n-            function Get_Check_Mode\n+            function Get_Overflow_Mode\n               (Name : Name_Id;\n-               Arg  : Node_Id) return Overflow_Check_Type\n+               Arg  : Node_Id) return Overflow_Mode_Type\n             is\n                Argx : constant Node_Id := Get_Pragma_Arg (Arg);\n \n@@ -12042,9 +12042,9 @@ package body Sem_Prag is\n                else\n                   Error_Pragma_Arg (\"invalid argument for pragma%\", Argx);\n                end if;\n-            end Get_Check_Mode;\n+            end Get_Overflow_Mode;\n \n-         --  Start of processing for Overflow_Checks\n+         --  Start of processing for Overflow_Mode\n \n          begin\n             GNAT_Pragma;\n@@ -12053,22 +12053,22 @@ package body Sem_Prag is\n \n             --  Process first argument\n \n-            Scope_Suppress.Overflow_Checks_General :=\n-              Get_Check_Mode (Name_General, Arg1);\n+            Scope_Suppress.Overflow_Mode_General :=\n+              Get_Overflow_Mode (Name_General, Arg1);\n \n             --  Case of only one argument\n \n             if Arg_Count = 1 then\n-               Scope_Suppress.Overflow_Checks_Assertions :=\n-                 Scope_Suppress.Overflow_Checks_General;\n+               Scope_Suppress.Overflow_Mode_Assertions :=\n+                 Scope_Suppress.Overflow_Mode_General;\n \n             --  Case of two arguments present\n \n             else\n-               Scope_Suppress.Overflow_Checks_Assertions  :=\n-                 Get_Check_Mode (Name_Assertions, Arg2);\n+               Scope_Suppress.Overflow_Mode_Assertions  :=\n+                 Get_Overflow_Mode (Name_Assertions, Arg2);\n             end if;\n-         end Overflow_Checks;\n+         end Overflow_Mode;\n \n          -------------\n          -- Ordered --\n@@ -15541,7 +15541,7 @@ package body Sem_Prag is\n       Pragma_Obsolescent                    =>  0,\n       Pragma_Optimize                       => -1,\n       Pragma_Optimize_Alignment             => -1,\n-      Pragma_Overflow_Checks                =>  0,\n+      Pragma_Overflow_Mode                  =>  0,\n       Pragma_Ordered                        =>  0,\n       Pragma_Pack                           =>  0,\n       Pragma_Page                           => -1,"}, {"sha": "296d431af3924fe0945d02e61d991d316bec0cff", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -410,7 +410,7 @@ package Snames is\n    Name_No_Strict_Aliasing             : constant Name_Id := N + $; -- GNAT\n    Name_Normalize_Scalars              : constant Name_Id := N + $;\n    Name_Optimize_Alignment             : constant Name_Id := N + $; -- GNAT\n-   Name_Overflow_Checks                : constant Name_Id := N + $; -- GNAT\n+   Name_Overflow_Mode                  : constant Name_Id := N + $; -- GNAT\n    Name_Partition_Elaboration_Policy   : constant Name_Id := N + $; -- Ada 05\n    Name_Persistent_BSS                 : constant Name_Id := N + $; -- GNAT\n    Name_Polling                        : constant Name_Id := N + $; -- GNAT\n@@ -1690,7 +1690,7 @@ package Snames is\n       Pragma_No_Strict_Aliasing,\n       Pragma_Normalize_Scalars,\n       Pragma_Optimize_Alignment,\n-      Pragma_Overflow_Checks,\n+      Pragma_Overflow_Mode,\n       Pragma_Partition_Elaboration_Policy,\n       Pragma_Persistent_BSS,\n       Pragma_Polling,"}, {"sha": "031e9cf4ce04de423bc922cbfac797b8e6e66d64", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -51,9 +51,9 @@ package body Switch.C is\n       new Ada.Unchecked_Deallocation (String_List, String_List_Access);\n    --  Avoid using System.Strings.Free, which also frees the designated strings\n \n-   function Get_Overflow_Mode (C : Character) return Overflow_Check_Type;\n+   function Get_Overflow_Mode (C : Character) return Overflow_Mode_Type;\n    --  Given a digit in the range 0 .. 3, returns the corresponding value of\n-   --  Overflow_Check_Type. Raises Program_Error if C is outside this range.\n+   --  Overflow_Mode_Type. Raises Program_Error if C is outside this range.\n \n    function Switch_Subsequently_Cancelled\n      (C        : String;\n@@ -94,7 +94,7 @@ package body Switch.C is\n    -- Get_Overflow_Mode --\n    -----------------------\n \n-   function Get_Overflow_Mode (C : Character) return Overflow_Check_Type is\n+   function Get_Overflow_Mode (C : Character) return Overflow_Mode_Type is\n    begin\n       case C is\n          when '1' =>\n@@ -803,15 +803,15 @@ package body Switch.C is\n                --  Case of no digits after the -gnato\n \n                if Ptr > Max or else Switch_Chars (Ptr) not in '1' .. '3' then\n-                  Suppress_Options.Overflow_Checks_General    := Strict;\n-                  Suppress_Options.Overflow_Checks_Assertions := Strict;\n+                  Suppress_Options.Overflow_Mode_General    := Strict;\n+                  Suppress_Options.Overflow_Mode_Assertions := Strict;\n \n                --  At least one digit after the -gnato\n \n                else\n                   --  Handle first digit after -gnato\n \n-                  Suppress_Options.Overflow_Checks_General :=\n+                  Suppress_Options.Overflow_Mode_General :=\n                     Get_Overflow_Mode (Switch_Chars (Ptr));\n                   Ptr := Ptr + 1;\n \n@@ -821,13 +821,13 @@ package body Switch.C is\n                   if Ptr > Max\n                     or else Switch_Chars (Ptr) not in '1' .. '3'\n                   then\n-                     Suppress_Options.Overflow_Checks_Assertions :=\n-                       Suppress_Options.Overflow_Checks_General;\n+                     Suppress_Options.Overflow_Mode_Assertions :=\n+                       Suppress_Options.Overflow_Mode_General;\n \n                   --  Process second digit after -gnato\n \n                   else\n-                     Suppress_Options.Overflow_Checks_Assertions :=\n+                     Suppress_Options.Overflow_Mode_Assertions :=\n                        Get_Overflow_Mode (Switch_Chars (Ptr));\n                      Ptr := Ptr + 1;\n                   end if;"}, {"sha": "d983c2915a48f7a99b9f2e5fa88546525822901b", "filename": "gcc/ada/types.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Ftypes.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b/gcc%2Fada%2Ftypes.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.ads?ref=15c94a55b13ad6c4c2e4178d2df7a4fe2ad8c54b", "patch": "@@ -704,14 +704,14 @@ package Types is\n    --    5.  Add appropriate checks for the new test\n \n    --  The following provides precise details on the mode used to generate\n-   --  code for intermediate overflows in expressions for signed integer\n+   --  code for intermediate operations in expressions for signed integer\n    --  arithmetic (and how to generate overflow checks if enabled). Note\n    --  that this only affects handling of intermediate results. The final\n    --  result must always fit within the target range, and if overflow\n    --  checking is enabled, the check on the final result is against this\n    --  target range.\n \n-   type Overflow_Check_Type is (\n+   type Overflow_Mode_Type is (\n       Not_Set,\n       --  Dummy value used during initialization process to show that the\n       --  corresponding value has not yet been initialized.\n@@ -734,9 +734,9 @@ package Types is\n       --  the overflow checking mode, since overflows are eliminated.\n \n    subtype Minimized_Or_Eliminated is\n-     Overflow_Check_Type range Minimized .. Eliminated;\n+     Overflow_Mode_Type range Minimized .. Eliminated;\n    --  Define subtype so that clients don't need to know ordering. Note that\n-   --  Overflow_Check_Type is not marked as an ordered enumeration type.\n+   --  Overflow_Mode_Type is not marked as an ordered enumeration type.\n \n    --  The following structure captures the state of check suppression or\n    --  activation at a particular point in the program execution.\n@@ -745,12 +745,12 @@ package Types is\n       Suppress : Suppress_Array;\n       --  Indicates suppression status of each possible check\n \n-      Overflow_Checks_General : Overflow_Check_Type;\n+      Overflow_Mode_General : Overflow_Mode_Type;\n       --  This field indicates the mode for handling code generation and\n       --  overflow checking (if enabled) for intermediate expression values.\n       --  This applies to general expressions outside assertions.\n \n-      Overflow_Checks_Assertions : Overflow_Check_Type;\n+      Overflow_Mode_Assertions : Overflow_Mode_Type;\n       --  This field indicates the mode for handling code generation and\n       --  overflow checking (if enabled) for intermediate expression values.\n       --  This applies to any expression occuring inside assertions."}]}