{"sha": "2bdf324fb33d67f0850139040df0c0390258ab38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJkZjMyNGZiMzNkNjdmMDg1MDEzOTA0MGRmMGMwMzkwMjU4YWIzOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-08T12:13:54Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-10-08T12:13:54Z"}, "message": "Fix handling of parm_offset in ipa-modref on 32bit targets.\n\n\t* ipa-modref.c (get_access): Fix handling of offsets.\n\t* tree-ssa-alias.c (modref_may_conflict): Watch for overflows.", "tree": {"sha": "2e10c8a794361e25ce262d1dd2355d3de093a17d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e10c8a794361e25ce262d1dd2355d3de093a17d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bdf324fb33d67f0850139040df0c0390258ab38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf324fb33d67f0850139040df0c0390258ab38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bdf324fb33d67f0850139040df0c0390258ab38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bdf324fb33d67f0850139040df0c0390258ab38/comments", "author": null, "committer": null, "parents": [{"sha": "e4ee51ebcf00dc0e003f9208766cb0fbda819ac0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ee51ebcf00dc0e003f9208766cb0fbda819ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ee51ebcf00dc0e003f9208766cb0fbda819ac0"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "5868aa97484d31c902f62423eca4d62280773c50", "filename": "gcc/ipa-modref.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf324fb33d67f0850139040df0c0390258ab38/gcc%2Fipa-modref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf324fb33d67f0850139040df0c0390258ab38/gcc%2Fipa-modref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-modref.c?ref=2bdf324fb33d67f0850139040df0c0390258ab38", "patch": "@@ -318,8 +318,7 @@ get_access (ao_ref *ref)\n \t\t\t  0, -1, false};\n   if (TREE_CODE (base) == MEM_REF || TREE_CODE (base) == TARGET_MEM_REF)\n     {\n-      tree offset = TREE_CODE (base) == MEM_REF\n-\t\t    ? TREE_OPERAND (base, 1) : NULL_TREE;\n+      tree memref = base;\n       base = TREE_OPERAND (base, 0);\n       if (TREE_CODE (base) == SSA_NAME\n \t  && SSA_NAME_IS_DEFAULT_DEF (base)\n@@ -336,8 +335,14 @@ get_access (ao_ref *ref)\n \t\t}\n \t      a.parm_index++;\n \t    }\n-\t  a.parm_offset_known\n-\t    = offset && wi::to_poly_offset (offset).to_shwi (&a.parm_offset);\n+\t  if (TREE_CODE (memref) == MEM_REF)\n+\t    {\n+\t      a.parm_offset_known\n+\t\t = wi::to_poly_wide (TREE_OPERAND\n+\t\t\t\t\t (memref, 1)).to_shwi (&a.parm_offset);\n+\t    }\n+\t  else\n+\t    a.parm_offset_known = false;\n \t}\n       else\n \ta.parm_index = -1;"}, {"sha": "97255987e79bca2ca5afaa39a618de286f69d5ad", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bdf324fb33d67f0850139040df0c0390258ab38/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bdf324fb33d67f0850139040df0c0390258ab38/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=2bdf324fb33d67f0850139040df0c0390258ab38", "patch": "@@ -2546,16 +2546,22 @@ modref_may_conflict (const gimple *stmt,\n \t      else\n \t\t{\n \t\t  ao_ref ref2;\n-\n-\t\t  ao_ref_init_from_ptr_and_range\n-\t\t\t (&ref2, arg, true,\n-\t\t\t  access_node->offset\n-\t\t\t  + (access_node->parm_offset\n-\t\t\t     << LOG2_BITS_PER_UNIT), access_node->size,\n-\t\t\t  access_node->max_size);\n-\t\t  ref2.ref_alias_set = ref_set;\n-\t\t  ref2.base_alias_set = base_set;\n-\t\t  if (refs_may_alias_p_1 (&ref2, ref, tbaa_p))\n+\t\t  poly_offset_int off = (poly_offset_int)access_node->offset\n+\t\t\t+ ((poly_offset_int)access_node->parm_offset\n+\t\t\t   << LOG2_BITS_PER_UNIT);\n+\t\t  poly_int64 off2;\n+\t\t  if (off.to_shwi (&off2))\n+\t\t    {\n+\t\t      ao_ref_init_from_ptr_and_range\n+\t\t\t     (&ref2, arg, true, off2,\n+\t\t\t      access_node->size,\n+\t\t\t      access_node->max_size);\n+\t\t      ref2.ref_alias_set = ref_set;\n+\t\t      ref2.base_alias_set = base_set;\n+\t\t      if (refs_may_alias_p_1 (&ref2, ref, tbaa_p))\n+\t\t\treturn true;\n+\t\t    }\n+\t\t  else if (ptr_deref_may_alias_ref_p_1 (arg, ref))\n \t\t    return true;\n \t\t}\n \t      num_tests++;"}]}