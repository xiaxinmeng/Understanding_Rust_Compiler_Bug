{"sha": "01036503d173b294661f06aff8146b0e10c673b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDEwMzY1MDNkMTczYjI5NDY2MWYwNmFmZjgxNDZiMGUxMGM2NzNiMQ==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-06-27T19:42:19Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2004-06-27T19:42:19Z"}, "message": "FilePermission.java (usingPerms): Removed.\n\n       * java/io/FilePermission.java (usingPerms): Removed.\n       (actionsString): Made final.\n       (cachePerms): Renamed to checkPerms.\n       (checkPerms): Renamed from cachePerms. Call trim() and toLowerCase()\n       on action String.\n       (FilePermission): Check arguments, call checkPerms().\n       (equals): Remove cachePerms() call.\n       (implies): Likewise.\n\nFrom-SVN: r83743", "tree": {"sha": "20550b6ae14e7eb6b74be814db934118a8d55153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20550b6ae14e7eb6b74be814db934118a8d55153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01036503d173b294661f06aff8146b0e10c673b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01036503d173b294661f06aff8146b0e10c673b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01036503d173b294661f06aff8146b0e10c673b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01036503d173b294661f06aff8146b0e10c673b1/comments", "author": null, "committer": null, "parents": [{"sha": "ce6230c4060eb099accc315bd3f6ff88813d2e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce6230c4060eb099accc315bd3f6ff88813d2e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce6230c4060eb099accc315bd3f6ff88813d2e7b"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "5f4565cb24ccd2355ddadf27276f914aad0ed3e5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01036503d173b294661f06aff8146b0e10c673b1/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01036503d173b294661f06aff8146b0e10c673b1/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=01036503d173b294661f06aff8146b0e10c673b1", "patch": "@@ -1,3 +1,14 @@\n+2004-06-27 Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/FilePermission.java (usingPerms): Removed.\n+\t(actionsString): Made final.\n+\t(cachePerms): Renamed to checkPerms.\n+\t(checkPerms): Renamed from cachePerms. Call trim() and toLowerCase()\n+\ton action String.\n+\t(FilePermission): Check arguments, call checkPerms().\n+\t(equals): Remove cachePerms() call.\n+\t(implies): Likewise.\n+\n 2004-06-27  Mark Wielaard  <mark@klomp.org>\n \n \t* gnu/java/net/protocol/http/Connection.java (userAgent): New static"}, {"sha": "7d86c292dad82c61db93679269d73b934feff97d", "filename": "libjava/java/io/FilePermission.java", "status": "modified", "additions": 26, "deletions": 24, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01036503d173b294661f06aff8146b0e10c673b1/libjava%2Fjava%2Fio%2FFilePermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01036503d173b294661f06aff8146b0e10c673b1/libjava%2Fjava%2Fio%2FFilePermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilePermission.java?ref=01036503d173b294661f06aff8146b0e10c673b1", "patch": "@@ -1,5 +1,5 @@\n /* java.lang.FilePermission\n-   Copyright (C) 1998, 2000, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2000, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -46,23 +46,21 @@ public final class FilePermission extends Permission implements Serializable\n \n   private static final String CURRENT_DIRECTORY = \n     System.getProperty(\"user.dir\");\n-  private boolean usingPerms = false;\n   private boolean readPerm = false;\n   private boolean writePerm = false;\n   private boolean executePerm = false;\n   private boolean deletePerm = false;\n-  private String actionsString;\n+  private final String actionsString;\n   \n-  private void cachePerms() \n+  // Checks and caches the actions\n+  private void checkPerms() throws IllegalArgumentException\n   {\n-    // While race conditions could occur, they don't matter at all.\n-    \n     String action;\n     int i = actionsString.indexOf(',');\n     int startI = 0;\n     while(i != -1) \n       {\n-        action = actionsString.substring(startI,i);\n+        action = actionsString.substring(startI,i).trim().toLowerCase();\n         if(action.equals(\"read\"))\n           readPerm = true;\n         else if(action.equals(\"write\"))\n@@ -71,12 +69,14 @@ else if(action.equals(\"execute\"))\n           executePerm = true;\n         else if(action.equals(\"delete\"))\n           deletePerm = true;\n+\telse\n+\t  throw new IllegalArgumentException(\"Unknown action: \" + action);\n       \n         startI = i+1;\n         i = actionsString.indexOf(',',startI);\n       }\n     \n-    action = actionsString.substring(startI);\n+    action = actionsString.substring(startI).trim().toLowerCase();\n     if(action.equals(\"read\"))\n       readPerm = true;\n     else if(action.equals(\"write\"))\n@@ -85,19 +85,30 @@ else if(action.equals(\"execute\"))\n       executePerm = true;\n     else if(action.equals(\"delete\"))\n       deletePerm = true;\n+    else\n+      throw new IllegalArgumentException(\"Unknown action: \" + action);\n   }\n   \n-  /** Create a new FilePermission.\n-   ** @param pathExpression an expression specifying the paths this\n-   **        permission represents.\n-   ** @param actionsString a comma-separated list of the actions this\n-   **        permission represents.\n-   ** FIXME: what to do when the file string is malformed?\n-   **/\n+  /*\n+   * Create a new FilePermission.\n+   *\n+   * @param pathExpression an expression specifying the paths this\n+   *        permission represents.\n+   * @param actionsString a comma-separated list of the actions this\n+   *        permission represents. The actions must be \"read\", \"write\",\n+   *        \"execute\" and/or \"delete\".\n+   *\n+   * FIXME: what to do when the file string is malformed?\n+   */\n   public FilePermission(String pathExpression, String actionsString) \n   {\n     super(pathExpression);\n+    if (pathExpression == null)\n+      throw new NullPointerException(\"pathExpression\");\n+    if (actionsString == null)\n+      throw new IllegalArgumentException(\"actionsString\");\n     this.actionsString = actionsString;\n+    checkPerms();\n   }\n   \n   /** Get the actions this FilePermission supports.\n@@ -132,10 +143,6 @@ public boolean equals(Object o)\n     if(!(o instanceof FilePermission))\n       return false;\n     FilePermission p = (FilePermission)o;\n-    if(!usingPerms)\n-      cachePerms();\n-    if(!p.usingPerms)\n-      p.cachePerms();\n     \n     String f1 = getName();\n     String f2 = p.getName();\n@@ -283,11 +290,6 @@ else if(!f2.substring(0,sub1.length()).equals(sub1))\n          break;\n       }\n     \n-    if(!usingPerms)\n-      cachePerms();\n-    if(!fp.usingPerms)\n-      fp.cachePerms();\n-    \n     if(readPerm && !fp.readPerm)\n       return false;\n     if(writePerm && !fp.writePerm)"}]}