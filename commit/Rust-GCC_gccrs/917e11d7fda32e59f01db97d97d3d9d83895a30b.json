{"sha": "917e11d7fda32e59f01db97d97d3d9d83895a30b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE3ZTExZDdmZGEzMmU1OWYwMWRiOTdkOTdkM2Q5ZDgzODk1YTMwYg==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-12-20T07:26:12Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-12-20T07:26:12Z"}, "message": "doc: @var fixes.\n\ngcc/:\n\t* doc/cppopts.texi: Use @var when appropriate.\n\t* doc/extend.texi (Structure-Packing Pragmas): Likewise.\n\t* doc/gimple.texi (Logical Operators)\n\t(Adding a new GIMPLE statement code): Likewise.\n\t* doc/invoke.texi (Target Options, Precompiled Headers):\n\tLikewise.\n\t* doc/plugins.texi (Plugins): Likewise.\n\nFrom-SVN: r168081", "tree": {"sha": "bbeca672c40e18af22fcb37603551094b24bf388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbeca672c40e18af22fcb37603551094b24bf388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/917e11d7fda32e59f01db97d97d3d9d83895a30b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917e11d7fda32e59f01db97d97d3d9d83895a30b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/917e11d7fda32e59f01db97d97d3d9d83895a30b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/917e11d7fda32e59f01db97d97d3d9d83895a30b/comments", "author": null, "committer": null, "parents": [{"sha": "987977840a808f3745bc6e300fc7c36680238061", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987977840a808f3745bc6e300fc7c36680238061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987977840a808f3745bc6e300fc7c36680238061"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "aaafb645b3225ae176f232f362de549f23b6d584", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -1,5 +1,13 @@\n 2010-12-20  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n+\t* doc/cppopts.texi: Use @var when appropriate.\n+\t* doc/extend.texi (Structure-Packing Pragmas): Likewise.\n+\t* doc/gimple.texi (Logical Operators)\n+\t(Adding a new GIMPLE statement code): Likewise.\n+\t* doc/invoke.texi (Target Options, Precompiled Headers):\n+\tLikewise.\n+\t* doc/plugins.texi (Plugins): Likewise.\n+\n \t* doc/install.texi (Configuration, Building, Testing, Specific):\n \tRemove leading whitespace from examples.\n "}, {"sha": "5212478389dcf1994cf90042c46b629da4b4ea1c", "filename": "gcc/doc/cppopts.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fcppopts.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fcppopts.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppopts.texi?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -330,10 +330,10 @@ header is used.\n @opindex fpch-preprocess\n This option allows use of a precompiled header (@pxref{Precompiled\n Headers}) together with @option{-E}.  It inserts a special @code{#pragma},\n-@code{#pragma GCC pch_preprocess \"<filename>\"} in the output to mark\n-the place where the precompiled header was found, and its filename.  When\n-@option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma} and\n-loads the PCH@.\n+@code{#pragma GCC pch_preprocess \"@var{filename}\"} in the output to mark\n+the place where the precompiled header was found, and its @var{filename}.\n+When @option{-fpreprocessed} is in use, GCC recognizes this @code{#pragma}\n+and loads the PCH@.\n \n This option is off by default, because the resulting preprocessed output\n is only really suitable as input to GCC@.  It is switched on by"}, {"sha": "90f8b7afd39d9cacf9c3dae9e5b1d30a88e5af29", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -12989,7 +12989,7 @@ to be a small power of two and specifies the new alignment in bytes.\n @item @code{#pragma pack(@var{n})} simply sets the new alignment.\n @item @code{#pragma pack()} sets the alignment to the one that was in\n effect when compilation started (see also command-line option\n-@option{-fpack-struct[=<n>]} @pxref{Code Gen Options}).\n+@option{-fpack-struct[=@var{n}]} @pxref{Code Gen Options}).\n @item @code{#pragma pack(push[,@var{n}])} pushes the current alignment\n setting on an internal stack and then optionally sets the new alignment.\n @item @code{#pragma pack(pop)} restores the alignment setting to the one"}, {"sha": "e8cecd75d3c89566b82446c1e6b6c0eede6a3c82", "filename": "gcc/doc/gimple.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fgimple.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fgimple.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgimple.texi?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -635,7 +635,7 @@ access the operands.\n When adding a new operand to a gimple statement, the operand will\n be validated according to what each tuple accepts in its operand\n vector.  These predicates are called by the\n-@code{gimple_<name>_set_...()}.  Each tuple will use one of the\n+@code{gimple_@var{name}_set_...()}.  Each tuple will use one of the\n following predicates (Note, this list is not exhaustive):\n \n @deftypefn {GIMPLE function} is_gimple_operand (tree t)\n@@ -2497,7 +2497,7 @@ in @code{gimple.c}.\n \n You will probably want to create a function to build the new\n gimple statement in @code{gimple.c}.  The function should be called\n-@code{gimple_build_<@code{NEW_TUPLE_NAME}>}, and should return the new tuple\n+@code{gimple_build_@var{new-tuple-name}}, and should return the new tuple\n of type gimple.\n \n If your new statement requires accessors for any members or"}, {"sha": "834965131a4003e1a18628425626602dc8e1757d", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -9856,10 +9856,10 @@ proper position among the other output files.\n @cindex compiler version, specifying\n @cindex target machine, specifying\n \n-The usual way to run GCC is to run the executable called @file{gcc}, or\n-@file{<machine>-gcc} when cross-compiling, or\n-@file{<machine>-gcc-<version>} to run a version other than the one that\n-was installed last.\n+The usual way to run GCC is to run the executable called @command{gcc}, or\n+@command{@var{machine}-gcc} when cross-compiling, or\n+@command{@var{machine}-gcc-@var{version}} to run a version other than the\n+one that was installed last.\n \n @node Submodel Options\n @section Hardware Models and Configurations\n@@ -18479,7 +18479,7 @@ precompiled header.  The following are known to be safe:\n \n @gccoptlist{-fmessage-length=  -fpreprocessed  -fsched-interblock @gol\n -fsched-spec  -fsched-spec-load  -fsched-spec-load-dangerous @gol\n--fsched-verbose=<number>  -fschedule-insns  -fvisibility= @gol\n+-fsched-verbose=@var{number}  -fschedule-insns  -fvisibility= @gol\n -pedantic-errors}\n \n @end itemize"}, {"sha": "767cee8800cc73c33344dbf579e37a43e75895ee", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/917e11d7fda32e59f01db97d97d3d9d83895a30b/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=917e11d7fda32e59f01db97d97d3d9d83895a30b", "patch": "@@ -16,16 +16,16 @@ process.\n \n Plugins are loaded with \n \n-@option{-fplugin=/path/to/NAME.so} @option{-fplugin-arg-NAME-<key1>[=<value1>]}\n+@option{-fplugin=/path/to/@var{name}.so} @option{-fplugin-arg-@var{name}-@var{key1}[=@var{value1}]}\n \n The plugin arguments are parsed by GCC and passed to respective\n plugins as key-value pairs. Multiple plugins can be invoked by\n specifying multiple @option{-fplugin} arguments.\n \n A plugin can be simply given by its short name (no dots or\n-slashes). When simply passing @option{-fplugin=NAME}, the plugin is\n-loaded from the @file{plugin} directory, so @option{-fplugin=NAME} is\n-the same as @option{-fplugin=`gcc -print-file-name=plugin`/NAME.so},\n+slashes). When simply passing @option{-fplugin=@var{name}}, the plugin is\n+loaded from the @file{plugin} directory, so @option{-fplugin=@var{name}} is\n+the same as @option{-fplugin=`gcc -print-file-name=plugin`/@var{name}.so},\n using backquote shell syntax to query the @file{plugin} directory.\n \n @section Plugin API\n@@ -45,8 +45,8 @@ If this symbol does not exist, the compiler will emit a fatal error\n and exit with the error message:\n \n @smallexample\n-fatal error: plugin <name> is not licensed under a GPL-compatible license\n-<name>: undefined symbol: plugin_is_GPL_compatible\n+fatal error: plugin @var{name} is not licensed under a GPL-compatible license\n+@var{name}: undefined symbol: plugin_is_GPL_compatible\n compilation terminated\n @end smallexample\n "}]}