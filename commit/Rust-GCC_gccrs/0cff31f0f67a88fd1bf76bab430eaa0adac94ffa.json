{"sha": "0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmZjMxZjBmNjdhODhmZDFiZjc2YmFiNDMwZWFhMGFkYWM5NGZmYQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-09-18T08:33:32Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-09-18T08:33:32Z"}, "message": "[Ada] Use static discriminant value for discriminated task record\n\nThis patch allows the construction of a static subtype for the generated\nconstrained Secondary_Stack component of a task for which a stack size\nis specified, when compiling for a restricted run-time that forbids\ndynamic allocation. Needed for LLVM.\n\n2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* sem_ch3.adb (Constrain_Component_Type): For a discriminated\n\ttype, handle the case of a constraint given by a conversion of a\n\tdiscriminant of the enclosing type. Necessary when compiling a\n\tdiscriminated task for a restricted run-time, when the generated\n\tSecondary_Stack component may be set by means of an aspect on\n\tthe task type.\n\nFrom-SVN: r275863", "tree": {"sha": "849b0df78fdbcbaac14da6e1c1a9bc1c6b4a4f3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/849b0df78fdbcbaac14da6e1c1a9bc1c6b4a4f3d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8411279b0674cd76850b0fa8266e8db21724e0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8411279b0674cd76850b0fa8266e8db21724e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8411279b0674cd76850b0fa8266e8db21724e0e"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "d9b552ae531a90427dc8b4c342dd9723e3a64353", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "patch": "@@ -1,3 +1,12 @@\n+2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Constrain_Component_Type): For a discriminated\n+\ttype, handle the case of a constraint given by a conversion of a\n+\tdiscriminant of the enclosing type. Necessary when compiling a\n+\tdiscriminated task for a restricted run-time, when the generated\n+\tSecondary_Stack component may be set by means of an aspect on\n+\tthe task type.\n+\n 2019-09-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_aggr.adb (Expand_Record_Aggregate, Rewrite_Discriminant):"}, {"sha": "35be35a10e058f8952fb333c72cfab5e04055d1f", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cff31f0f67a88fd1bf76bab430eaa0adac94ffa/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=0cff31f0f67a88fd1bf76bab430eaa0adac94ffa", "patch": "@@ -13258,7 +13258,9 @@ package body Sem_Ch3 is\n \n       function Build_Constrained_Discriminated_Type\n         (Old_Type : Entity_Id) return Entity_Id;\n-      --  Ditto for record components\n+      --  Ditto for record components. Handle the case where the constraint\n+      --  is a conversion of the discriminant value, introduced during\n+      --  expansion.\n \n       function Build_Constrained_Access_Type\n         (Old_Type : Entity_Id) return Entity_Id;\n@@ -13443,6 +13445,17 @@ package body Sem_Ch3 is\n \n             if Is_Discriminant (Expr) then\n                Need_To_Create_Itype := True;\n+\n+            --  After expansion of discriminated task types, the value\n+            --  of the discriminant may be converted to a run-time type\n+            --  for restricted run-times. Propagate the value of the\n+            --  discriminant ss well, so that e.g. the secondary stack\n+            --  component has a static constraint. Necessry for LLVM.\n+\n+            elsif Nkind (Expr) = N_Type_Conversion\n+              and then Is_Discriminant (Expression (Expr))\n+            then\n+               Need_To_Create_Itype := True;\n             end if;\n \n             Next_Elmt (Old_Constraint);\n@@ -13457,6 +13470,12 @@ package body Sem_Ch3 is\n \n                if Is_Discriminant (Expr) then\n                   Expr := Get_Discr_Value (Expr);\n+\n+               elsif Nkind (Expr) = N_Type_Conversion\n+                 and then Is_Discriminant (Expression (Expr))\n+               then\n+                  Expr := New_Copy_Tree (Expr);\n+                  Set_Expression (Expr, Get_Discr_Value (Expression (Expr)));\n                end if;\n \n                Append (New_Copy_Tree (Expr), To => Constr_List);"}]}