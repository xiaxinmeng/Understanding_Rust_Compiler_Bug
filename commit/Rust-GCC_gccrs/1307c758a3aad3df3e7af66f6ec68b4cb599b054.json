{"sha": "1307c758a3aad3df3e7af66f6ec68b4cb599b054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMwN2M3NThhM2FhZDNkZjNlN2FmNjZmNmVjNjhiNGNiNTk5YjA1NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-10-28T13:28:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-10-28T13:28:32Z"}, "message": "re PR middle-end/41855 (ICE in refs_may_alias_p_1, at tree-ssa-alias.c:855)\n\n2009-10-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41855\n\t* tree-ssa-alias.c (refs_may_alias_p_1): Deal with CONST_DECLs\n\t(ref_maybe_used_by_call_p_1): Fix bcopy handling.\n\t(call_may_clobber_ref_p_1): Likewise.\n\t* tree-ssa-structalias.c (find_func_aliases): Likewise.\n\t* alias.c (nonoverlapping_memrefs_p): Deal with CONST_DECLs.\n\n\t* gfortran.dg/lto/20091028-1_0.f90: New testcase.\n\t* gfortran.dg/lto/20091028-1_1.c: Likewise.\n\t* gfortran.dg/lto/20091028-2_0.f90: Likewise.\n\t* gfortran.dg/lto/20091028-2_1.c: Likewise.\n\nFrom-SVN: r153655", "tree": {"sha": "c6cbdb47b276ee46a1baf832ef5152d54c71249e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cbdb47b276ee46a1baf832ef5152d54c71249e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1307c758a3aad3df3e7af66f6ec68b4cb599b054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1307c758a3aad3df3e7af66f6ec68b4cb599b054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1307c758a3aad3df3e7af66f6ec68b4cb599b054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1307c758a3aad3df3e7af66f6ec68b4cb599b054/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de5b9f12c55af9a6f48a2febe7cf345fe0bd9163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de5b9f12c55af9a6f48a2febe7cf345fe0bd9163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de5b9f12c55af9a6f48a2febe7cf345fe0bd9163"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "9a7155fbd999769951103932aeede05efa347b1b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -1,3 +1,12 @@\n+2009-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41855\n+\t* tree-ssa-alias.c (refs_may_alias_p_1): Deal with CONST_DECLs\n+\t(ref_maybe_used_by_call_p_1): Fix bcopy handling.\n+\t(call_may_clobber_ref_p_1): Likewise.\n+\t* tree-ssa-structalias.c (find_func_aliases): Likewise.\n+\t* alias.c (nonoverlapping_memrefs_p): Deal with CONST_DECLs.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/41812"}, {"sha": "1d4290f7848a8651a3c7f3f584b59a4c4a22573f", "filename": "gcc/alias.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -2200,6 +2200,13 @@ nonoverlapping_memrefs_p (const_rtx x, const_rtx y)\n   if (! DECL_P (exprx) || ! DECL_P (expry))\n     return 0;\n \n+  /* With invalid code we can end up storing into the constant pool.\n+     Bail out to avoid ICEing when creating RTL for this.\n+     See gfortran.dg/lto/20091028-2_0.f90.  */\n+  if (TREE_CODE (exprx) == CONST_DECL\n+      || TREE_CODE (expry) == CONST_DECL)\n+    return 1;\n+\n   rtlx = DECL_RTL (exprx);\n   rtly = DECL_RTL (expry);\n "}, {"sha": "9311bac87b7c274b8a47af4230a813e3c8ede05d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -1,3 +1,11 @@\n+2009-10-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41855\n+\t* gfortran.dg/lto/20091028-1_0.f90: New testcase.\n+\t* gfortran.dg/lto/20091028-1_1.c: Likewise.\n+\t* gfortran.dg/lto/20091028-2_0.f90: Likewise.\n+\t* gfortran.dg/lto/20091028-2_1.c: Likewise.\n+\n 2009-10-28  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/39715"}, {"sha": "57c1b1f60287285ad04a5471159d38034b4d25ed", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-1_0.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_0.f90?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -0,0 +1,9 @@\n+! { dg-lto-do link }\n+! { dg-extra-ld-options \"-r -nostdlib -finline-functions\" }\n+\n+SUBROUTINE int_gen_ti_header_char( hdrbuf, hdrbufsize, itypesize, &\n+                              DataHandle, Element, VarName, Data, code )\n+  CALL int_gen_ti_header_c ( hdrbuf, hdrbufsize, itypesize, 1, &\n+                             DataHandle, DummyData, DummyCount, code )\n+END SUBROUTINE int_gen_ti_header_char\n+"}, {"sha": "b3afc23fb8e849a784b9240c26b167edeb3bdfea", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-1_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-1_1.c?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -0,0 +1,11 @@\n+extern void bcopy(const void *, void *, __SIZE_TYPE__ n);\n+char *p;\n+int int_gen_ti_header_c_ (char * hdrbuf, int * hdrbufsize,\n+                          int * itypesize, int * typesize,\n+                          int * DataHandle, char * Data,\n+                          int * Count, int * code)\n+{\n+  bcopy (typesize, p, sizeof(int)) ;\n+  bcopy (Data, p, *Count * *typesize) ;\n+}\n+"}, {"sha": "57c1b1f60287285ad04a5471159d38034b4d25ed", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-2_0.f90", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_0.f90?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -0,0 +1,9 @@\n+! { dg-lto-do link }\n+! { dg-extra-ld-options \"-r -nostdlib -finline-functions\" }\n+\n+SUBROUTINE int_gen_ti_header_char( hdrbuf, hdrbufsize, itypesize, &\n+                              DataHandle, Element, VarName, Data, code )\n+  CALL int_gen_ti_header_c ( hdrbuf, hdrbufsize, itypesize, 1, &\n+                             DataHandle, DummyData, DummyCount, code )\n+END SUBROUTINE int_gen_ti_header_char\n+"}, {"sha": "496aaf11220bc50397948534e42ec00e007c6da2", "filename": "gcc/testsuite/gfortran.dg/lto/20091028-2_1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flto%2F20091028-2_1.c?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -0,0 +1,11 @@\n+extern void *memcpy(void *dest, const void *src, __SIZE_TYPE__ n);\n+char *p;\n+int int_gen_ti_header_c_ (char * hdrbuf, int * hdrbufsize,\n+                          int * itypesize, int * typesize,\n+                          int * DataHandle, char * Data,\n+                          int * Count, int * code)\n+{\n+  memcpy (typesize, p, sizeof(int)) ;\n+  memcpy (Data, p, *Count * *typesize) ;\n+}\n+"}, {"sha": "4c052be418f72631fd19860d87782ae83a6d6785", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -776,12 +776,14 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n \t       || SSA_VAR_P (ref1->ref)\n \t       || handled_component_p (ref1->ref)\n \t       || INDIRECT_REF_P (ref1->ref)\n-\t       || TREE_CODE (ref1->ref) == TARGET_MEM_REF)\n+\t       || TREE_CODE (ref1->ref) == TARGET_MEM_REF\n+\t       || TREE_CODE (ref1->ref) == CONST_DECL)\n \t      && (!ref2->ref\n \t\t  || SSA_VAR_P (ref2->ref)\n \t\t  || handled_component_p (ref2->ref)\n \t\t  || INDIRECT_REF_P (ref2->ref)\n-\t\t  || TREE_CODE (ref2->ref) == TARGET_MEM_REF));\n+\t\t  || TREE_CODE (ref2->ref) == TARGET_MEM_REF\n+\t\t  || TREE_CODE (ref2->ref) == CONST_DECL));\n \n   /* Decompose the references into their base objects and the access.  */\n   base1 = ao_ref_base (ref1);\n@@ -798,6 +800,8 @@ refs_may_alias_p_1 (ao_ref *ref1, ao_ref *ref2, bool tbaa_p)\n      which is seen as a struct copy.  */\n   if (TREE_CODE (base1) == SSA_NAME\n       || TREE_CODE (base2) == SSA_NAME\n+      || TREE_CODE (base1) == CONST_DECL\n+      || TREE_CODE (base2) == CONST_DECL\n       || is_gimple_min_invariant (base1)\n       || is_gimple_min_invariant (base2))\n     return false;\n@@ -934,7 +938,6 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t   their first argument.  */\n \tcase BUILT_IN_STRCPY:\n \tcase BUILT_IN_STRNCPY:\n-\tcase BUILT_IN_BCOPY:\n \tcase BUILT_IN_MEMCPY:\n \tcase BUILT_IN_MEMMOVE:\n \tcase BUILT_IN_MEMPCPY:\n@@ -952,6 +955,15 @@ ref_maybe_used_by_call_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\tcase BUILT_IN_BCOPY:\n+\t  {\n+\t    ao_ref dref;\n+\t    tree size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 0),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n+\t  }\n \t/* The following builtins do not read from memory.  */\n \tcase BUILT_IN_FREE:\n \tcase BUILT_IN_MEMSET:\n@@ -1151,7 +1163,6 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t   their first argument.  */\n \tcase BUILT_IN_STRCPY:\n \tcase BUILT_IN_STRNCPY:\n-\tcase BUILT_IN_BCOPY:\n \tcase BUILT_IN_MEMCPY:\n \tcase BUILT_IN_MEMMOVE:\n \tcase BUILT_IN_MEMPCPY:\n@@ -1170,6 +1181,15 @@ call_may_clobber_ref_p_1 (gimple call, ao_ref *ref)\n \t\t\t\t\t   size);\n \t    return refs_may_alias_p_1 (&dref, ref, false);\n \t  }\n+\tcase BUILT_IN_BCOPY:\n+\t  {\n+\t    ao_ref dref;\n+\t    tree size = gimple_call_arg (call, 2);\n+\t    ao_ref_init_from_ptr_and_size (&dref,\n+\t\t\t\t\t   gimple_call_arg (call, 1),\n+\t\t\t\t\t   size);\n+\t    return refs_may_alias_p_1 (&dref, ref, false);\n+\t  }\n \t/* Freeing memory kills the pointed-to memory.  More importantly\n \t   the call has to serve as a barrier for moving loads and stores\n \t   across it.  */"}, {"sha": "74dc6d2c1baca9db4ba56fafc1b0538e8b33ca3b", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1307c758a3aad3df3e7af66f6ec68b4cb599b054/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=1307c758a3aad3df3e7af66f6ec68b4cb599b054", "patch": "@@ -3687,8 +3687,10 @@ find_func_aliases (gimple origt)\n \t  case BUILT_IN_STRNCAT:\n \t    {\n \t      tree res = gimple_call_lhs (t);\n-\t      tree dest = gimple_call_arg (t, 0);\n-\t      tree src = gimple_call_arg (t, 1);\n+\t      tree dest = gimple_call_arg (t, (DECL_FUNCTION_CODE (fndecl)\n+\t\t\t\t\t       == BUILT_IN_BCOPY ? 1 : 0));\n+\t      tree src = gimple_call_arg (t, (DECL_FUNCTION_CODE (fndecl)\n+\t\t\t\t\t      == BUILT_IN_BCOPY ? 0 : 1));\n \t      if (res != NULL_TREE)\n \t\t{\n \t\t  get_constraint_for (res, &lhsc);"}]}