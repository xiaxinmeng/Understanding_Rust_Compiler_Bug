{"sha": "4bbf910eefafa77900eb9234feac7dce5451e18b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJiZjkxMGVlZmFmYTc3OTAwZWI5MjM0ZmVhYzdkY2U1NDUxZTE4Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-14T04:19:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-14T04:19:34Z"}, "message": "recog.h (INSN_OUTPUT_FORMAT_*): New.\n\n        * recog.h (INSN_OUTPUT_FORMAT_*): New.\n        (struct insn_data): Merge `template' and `outfun' into `output'.\n        Add `output_format'.\n        * genoutput.c (INSN_OUTPUT_FORMAT_*): New.\n        (struct data): Remove `outfun'; add `output_format'.\n        (name_for_index): Remove declaration.\n        (output_insn_data): Handle output formats.\n        (process_template): Emit the bare array for @.\n        (gen_expand, gen_split): Set output_format to NONE.\n        * output.h (get_insn_template): Declare.\n        * final.c (get_insn_template): New.\n        (final_scan_insn): Use it.\n        * toplev.c (compile_file): Likewise.\n\n        * c4x/c4x.c (c4x_process_after_reload): Likewise.\n        * i860/i860.c (output_delayed_branch): Likewise.\n        (output_delay_insn): Likewise.\n\nFrom-SVN: r29389", "tree": {"sha": "ddfa019fe74f8976a92fcdd7a45d5f6e82b77a46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddfa019fe74f8976a92fcdd7a45d5f6e82b77a46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bbf910eefafa77900eb9234feac7dce5451e18b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbf910eefafa77900eb9234feac7dce5451e18b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bbf910eefafa77900eb9234feac7dce5451e18b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bbf910eefafa77900eb9234feac7dce5451e18b/comments", "author": null, "committer": null, "parents": [{"sha": "c452dcde0ad257958078a4f0561f5bbd9d8763fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c452dcde0ad257958078a4f0561f5bbd9d8763fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c452dcde0ad257958078a4f0561f5bbd9d8763fa"}], "stats": {"total": 227, "additions": 127, "deletions": 100}, "files": [{"sha": "b694c997ab008e519cb266402215ba73d15e11ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -1,3 +1,23 @@\n+Mon Sep 13 21:06:01 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* recog.h (INSN_OUTPUT_FORMAT_*): New.\n+\t(struct insn_data): Merge `template' and `outfun' into `output'.\n+\tAdd `output_format'.\n+\t* genoutput.c (INSN_OUTPUT_FORMAT_*): New.\n+\t(struct data): Remove `outfun'; add `output_format'.\n+\t(name_for_index): Remove declaration.\n+\t(output_insn_data): Handle output formats.\n+\t(process_template): Emit the bare array for @.\n+\t(gen_expand, gen_split): Set output_format to NONE.\n+\t* output.h (get_insn_template): Declare.\n+\t* final.c (get_insn_template): New.\n+\t(final_scan_insn): Use it.\n+\t* toplev.c (compile_file): Likewise.\n+\n+\t* c4x/c4x.c (c4x_process_after_reload): Likewise.\n+\t* i860/i860.c (output_delayed_branch): Likewise.\n+\t(output_delay_insn): Likewise.\n+\n 1999-09-13  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* rtl.c (obstack_alloc_rtx): Removed."}, {"sha": "517ba0f189b79d346c1951da23bb5a042c01d214", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -2196,7 +2196,7 @@ c4x_process_after_reload (first)\n \t    {\n \t      const char *template;\n \n-\t      template = insn_data[insn_code_number].template;\n+\t      template = get_insn_template (insn_code_number, insn);\n \t      if (template && template[0] == '#' && template[1] == '\\0')\n \t\t{\n \t\t  rtx new = try_split (PATTERN(insn), insn, 0);"}, {"sha": "bdbccfb1f8167f627a36cebb7d3342b57051dfb0", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -1456,10 +1456,7 @@ output_delayed_branch (template, operands, insn)\n       if (! constrain_operands (1))\n \tfatal_insn_not_found (delay_insn);\n \n-      template = insn_data[insn_code_number].template;\n-      if (template == 0)\n-\ttemplate = ((*insn_data[insn_code_number].outfun)\n-\t\t    (recog_data.operand, delay_insn));\n+      template = get_insn_template (insn_code_number, delay_insn);\n       output_asm_insn (template, recog_data.operand);\n     }\n   CC_STATUS_INIT;\n@@ -1513,10 +1510,7 @@ output_delay_insn (delay_insn)\n   /* Now get the template for what this insn would\n      have been, without the branch.  */\n \n-  template = insn_data[insn_code_number].template;\n-  if (template == 0)\n-    template = ((*insn_data[insn_code_number].outfun)\n-\t\t(recog_data.operand, delay_insn));\n+  template = get_insn_template (insn_code_number, delay_insn);\n   output_asm_insn (template, recog_data.operand);\n   return \"\";\n }"}, {"sha": "7046344e36dbb7abd867bf4c20ac1932aa9c0330", "filename": "gcc/final.c", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -2034,6 +2034,27 @@ final (first, file, optimize, prescan)\n   free_insn_eh_region ();\n }\n \f\n+const char *\n+get_insn_template (code, insn)\n+     int code;\n+     rtx insn;\n+{\n+  const void *output = insn_data[code].output;\n+  switch (insn_data[code].output_format)\n+    {\n+    case INSN_OUTPUT_FORMAT_SINGLE:\n+      return (const char *) output;\n+    case INSN_OUTPUT_FORMAT_MULTI:\n+      return ((const char * const *) output)[which_alternative];\n+    case INSN_OUTPUT_FORMAT_FUNCTION:\n+      if (insn == NULL)\n+\tabort ();\n+      return (* (insn_output_fn) output) (recog_data.operand, insn);\n+\n+    default:\n+      abort ();\n+    }\n+}\n /* The final scan for one insn, INSN.\n    Args are same as in `final', except that INSN\n    is the insn being scanned.\n@@ -2895,25 +2916,18 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  dwarf2out_frame_debug (insn);\n #endif\n \n-\t/* If the proper template needs to be chosen by some C code,\n-\t   run that code and get the real template.  */\n+\t/* Find the proper template for this insn.  */\n+\ttemplate = get_insn_template (insn_code_number, insn);\n \n-\ttemplate = insn_data[insn_code_number].template;\n+\t/* If the C code returns 0, it means that it is a jump insn\n+\t   which follows a deleted test insn, and that test insn\n+\t   needs to be reinserted.  */\n \tif (template == 0)\n \t  {\n-\t    template = ((*insn_data[insn_code_number].outfun)\n-\t\t\t(recog_data.operand, insn));\n-\n-\t    /* If the C code returns 0, it means that it is a jump insn\n-\t       which follows a deleted test insn, and that test insn\n-\t       needs to be reinserted.  */\n-\t    if (template == 0)\n-\t      {\n-\t\tif (prev_nonnote_insn (insn) != last_ignored_compare)\n-\t\t  abort ();\n-\t\tnew_block = 0;\n-\t\treturn prev_nonnote_insn (insn);\n-\t      }\n+\t    if (prev_nonnote_insn (insn) != last_ignored_compare)\n+\t      abort ();\n+\t    new_block = 0;\n+\t    return prev_nonnote_insn (insn);\n \t  }\n \n \t/* If the template is the string \"#\", it means that this insn must"}, {"sha": "d40433f294280dfccd94dd85d21e7d04d275f635", "filename": "gcc/genoutput.c", "status": "modified", "additions": 61, "deletions": 72, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -29,27 +29,24 @@ Boston, MA 02111-1307, USA.  */\n      a. `name' is the name for that pattern.  Nameless patterns are\n      given a name.\n \n-     b. `template' is the template for output of that insn,\n-\n-     c. `outfun' is the function that returns a template to use for output of\n-     that insn.  This is used only in the cases where the template is not\n-     constant.  These cases are specified by a * or @ at the beginning of the\n-     template string in the machine description.  They are identified for the\n-     sake of other parts of the compiler by a zero element in `template'.\n-  \n-     d. `genfun' is the function to generate a body for that pattern,\n+     b. `output' hold either the output template, an array of output\n+     templates, or an output function.\n+\n+     c. `genfun' is the function to generate a body for that pattern,\n      given operands as arguments.\n \n-     e. `n_operands' is the number of distinct operands in the pattern\n+     d. `n_operands' is the number of distinct operands in the pattern\n      for that insn,\n \n-     f. `n_dups' is the number of match_dup's that appear in the insn's\n+     e. `n_dups' is the number of match_dup's that appear in the insn's\n      pattern.  This says how many elements of `recog_data.dup_loc' are\n      significant after an insn has been recognized.\n \n-     g. `n_alternatives' is the number of alternatives in the constraints\n+     f. `n_alternatives' is the number of alternatives in the constraints\n      of each pattern.\n \n+     g. `output_format' tells what type of thing `output' is.\n+\n      h. `operand' is the base of an array of operand data for the insn.\n \n    2. An array of `struct insn_operand data', used by `operand' above.\n@@ -144,21 +141,28 @@ static struct operand_data null_operand =\n static struct operand_data *odata = &null_operand;\n static struct operand_data **odata_end = &null_operand.next;\n \n+/* Must match the constants in recog.h.  */\n+\n+#define INSN_OUTPUT_FORMAT_NONE         0       /* abort */\n+#define INSN_OUTPUT_FORMAT_SINGLE       1       /* const char * */\n+#define INSN_OUTPUT_FORMAT_MULTI        2       /* const char * const * */\n+#define INSN_OUTPUT_FORMAT_FUNCTION     3       /* const char * (*)(...) */\n+\n /* Record in this chain all information that we will output,\n    associated with the code number of the insn.  */\n \n struct data\n {\n   struct data *next;\n   char *name;\n-  char *template;\t\t/* string such as \"movl %1,%0\" */\n+  char *template;\n   int code_number;\n   int index_number;\n   int n_operands;\t\t/* Number of operands this insn recognizes */\n   int n_dups;\t\t\t/* Number times match_dup appears in pattern */\n   int n_alternatives;\t\t/* Number of alternatives in each constraint */\n-  char outfun;\t\t\t/* Nonzero means this has an output function */\n   int operand_number;\t\t/* Operand index in the big array.  */\n+  int output_format;\t\t/* INSN_OUTPUT_FORMAT_*.  */\n   struct operand_data operand[MAX_MAX_OPERANDS];\n };\n \n@@ -172,7 +176,6 @@ static struct data *idata, **idata_end = &idata;\n static int have_constraints;\n \n \f\n-static char * name_for_index PROTO((int));\n static void output_prologue PROTO((void));\n static void output_predicate_decls PROTO((void));\n static void output_operand_data PROTO((void));\n@@ -353,15 +356,21 @@ output_insn_data ()\n \t    printf (\"    \\\"%s+%d\\\",\\n\", last_name, name_offset);\n \t}\n \n-      if (d->template)\n-\tprintf (\"    \\\"%s\\\",\\n\", d->template);\n-      else\n-\tprintf (\"    0,\\n\");\n-\n-      if (d->outfun)\n-\tprintf (\"    output_%d,\\n\", d->code_number);\n-      else\n-\tprintf (\"    0,\\n\");\n+      switch (d->output_format)\n+\t{\n+\tcase INSN_OUTPUT_FORMAT_NONE:\n+\t  printf (\"    0,\\n\");\n+\t  break;\n+\tcase INSN_OUTPUT_FORMAT_SINGLE:\n+\t  printf (\"    \\\"%s\\\",\\n\", d->template);\n+\t  break;\n+\tcase INSN_OUTPUT_FORMAT_MULTI:\n+\tcase INSN_OUTPUT_FORMAT_FUNCTION:\n+\t  printf (\"    output_%d,\\n\", d->code_number);\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n \n       if (d->name && d->name[0] != '*')\n \tprintf (\"    gen_%s,\\n\", d->name);\n@@ -371,7 +380,8 @@ output_insn_data ()\n       printf (\"    &operand_data[%d],\\n\", d->operand_number);\n       printf (\"    %d,\\n\", d->n_operands);\n       printf (\"    %d,\\n\", d->n_dups);\n-      printf (\"    %d\\n\", d->n_alternatives);\n+      printf (\"    %d,\\n\", d->n_alternatives);\n+      printf (\"    %d\\n\", d->output_format);\n \n       printf(\"  },\\n\");\n     }\n@@ -637,44 +647,39 @@ process_template (d, template)\n   register char *cp;\n   register int i;\n \n-  /* We need to consider only the instructions whose assembler code template\n-     starts with a * or @.  These are the ones where C code is run to decide\n-     on a template to use.  So for all others just return now.  */\n-\n-  if (template[0] != '*' && template[0] != '@')\n+  /* Templates starting with * contain straight code to be run.  */\n+  if (template[0] == '*')\n     {\n-      d->template = template;\n-      d->outfun = 0;\n-      return;\n-    }\n+      d->template = 0;\n+      d->output_format = INSN_OUTPUT_FORMAT_FUNCTION;\n \n-  d->template = 0;\n-  d->outfun = 1;\n-\n-  printf (\"\\nstatic const char *output_%d PROTO ((rtx *, rtx));\\n\",\n-\t  d->code_number);\n-  printf (\"\\nstatic const char *\\n\");\n-  printf (\"output_%d (operands, insn)\\n\", d->code_number);\n-  printf (\"     rtx *operands ATTRIBUTE_UNUSED;\\n\");\n-  printf (\"     rtx insn ATTRIBUTE_UNUSED;\\n\");\n-  printf (\"{\\n\");\n+      printf (\"\\nstatic const char *output_%d PROTO ((rtx *, rtx));\\n\",\n+\t      d->code_number);\n+      puts (\"\\nstatic const char *\");\n+      printf (\"output_%d (operands, insn)\\n\", d->code_number);\n+      puts (\"     rtx *operands ATTRIBUTE_UNUSED;\");\n+      puts (\"     rtx insn ATTRIBUTE_UNUSED;\");\n+      puts (\"{\");\n+\n+      puts (template + 1);\n+      puts (\"}\");\n+    }\n \n   /* If the assembler code template starts with a @ it is a newline-separated\n-     list of assembler code templates, one for each alternative.  So produce\n-     a routine to select the correct one.  */\n-\n-  if (template[0] == '@')\n+     list of assembler code templates, one for each alternative.  */\n+  else if (template[0] == '@')\n     {\n+      d->template = 0;\n+      d->output_format = INSN_OUTPUT_FORMAT_MULTI;\n \n-      printf (\"  static const char *const strings_%d[] = {\\n\",\n-\t      d->code_number);\n+      printf (\"\\nstatic const char * const output_%d[] = {\\n\", d->code_number);\n \n       for (i = 0, cp = &template[1]; *cp; )\n \t{\n \t  while (*cp == '\\n' || *cp == ' ' || *cp== '\\t')\n \t    cp++;\n \n-\t  printf (\"    \\\"\");\n+\t  printf (\"  \\\"\");\n \t  while (*cp != '\\n' && *cp != '\\0')\n \t    {\n \t      putchar (*cp);\n@@ -685,29 +690,13 @@ process_template (d, template)\n \t  i++;\n \t}\n \n-      printf (\"  };\\n\");\n-      printf (\"  return strings_%d[which_alternative];\\n\", d->code_number);\n-\n-      if (i != d->n_alternatives)\n-\tfatal (\"Insn pattern %d has %d alternatives but %d assembler choices\",\n-\t       d->index_number, d->n_alternatives, i);\n-\n+      printf (\"};\\n\");\n     }\n   else\n     {\n-      /* The following is done in a funny way to get around problems in\n-\t VAX-11 \"C\" on VMS.  It is the equivalent of:\n-\t printf (\"%s\\n\", &template[1])); */\n-      cp = &template[1];\n-      while (*cp)\n-\t{\n-\t  putchar (*cp);\n-\t  cp++;\n-\t}\n-      putchar ('\\n');\n+      d->template = template;\n+      d->output_format = INSN_OUTPUT_FORMAT_SINGLE;\n     }\n-\n-  printf (\"}\\n\");\n }\n \f\n /* Check insn D for consistency in number of constraint alternatives.  */\n@@ -849,7 +838,7 @@ gen_expand (insn)\n   d->n_operands = max_opno + 1;\n   d->n_dups = num_dups;\n   d->template = 0;\n-  d->outfun = 0;\n+  d->output_format = INSN_OUTPUT_FORMAT_NONE;\n \n   validate_insn_alternatives (d);\n   place_operands (d);\n@@ -889,7 +878,7 @@ gen_split (split)\n   d->n_dups = 0;\n   d->n_alternatives = 0;\n   d->template = 0;\n-  d->outfun = 0;\n+  d->output_format = INSN_OUTPUT_FORMAT_NONE;\n \n   place_operands (d);\n }"}, {"sha": "db94ddfd120263660733b6c6a9d8a728b4553e68", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -123,6 +123,9 @@ extern int only_leaf_regs_used\tPROTO((void));\n    available in leaf functions.  */\n extern void leaf_renumber_regs_insn PROTO((rtx));\n \n+/* Locate the proper template for the given insn-code.  */\n+extern const char *get_insn_template PROTO((int, rtx));\n+\n /* Functions in flow.c */\n extern void allocate_for_life_analysis\tPROTO((void));\n extern int regno_uninitialized\t\tPROTO((int));"}, {"sha": "e5875d59293b45e293cbfa53c833abaaf53e0ad7", "filename": "gcc/recog.h", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -211,17 +211,24 @@ struct insn_operand_data\n   char strict_low;\n };\n \n+/* Legal values for insn_data.output_format.  Indicate what type of data\n+   is stored in insn_data.output.  */\n+#define INSN_OUTPUT_FORMAT_NONE\t\t0\t/* abort */\n+#define INSN_OUTPUT_FORMAT_SINGLE\t1\t/* const char * */\n+#define INSN_OUTPUT_FORMAT_MULTI\t2\t/* const char * const * */\n+#define INSN_OUTPUT_FORMAT_FUNCTION\t3\t/* const char * (*)(...) */\n+\n struct insn_data\n {\n   const char *name;\n-  const char *template;\n-  insn_output_fn outfun;\n+  const PTR output;\n   insn_gen_fn genfun;\n   const struct insn_operand_data *operand;\n \n   unsigned char n_operands;\n   unsigned char n_dups;\n   unsigned char n_alternatives;\n+  unsigned char output_format;\n };\n \n extern const struct insn_data insn_data[];"}, {"sha": "0be8824e753008d01fb15421bad47a16c6c8e307", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bbf910eefafa77900eb9234feac7dce5451e18b/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4bbf910eefafa77900eb9234feac7dce5451e18b", "patch": "@@ -3172,7 +3172,7 @@ compile_file (name)\n       /* It's best if we can write a nop here since some\n \t assemblers don't tolerate zeros in the text section.  */\n       if (insn_data[CODE_FOR_nop].template != 0)\n-\toutput_asm_insn (insn_data[CODE_FOR_nop].template, NULL_PTR);\n+\toutput_asm_insn (get_insn_template (CODE_FOR_nop, NULL), NULL_PTR);\n       else\n \tassemble_zeros (UNITS_PER_WORD);\n     }"}]}