{"sha": "b0fbea136ef18450fdc326a7ea6a35deca625448", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBmYmVhMTM2ZWYxODQ1MGZkYzMyNmE3ZWE2YTM1ZGVjYTYyNTQ0OA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-02-29T12:46:19Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2008-02-29T12:46:19Z"}, "message": "sh.c (sh_scalar_mode_supported_p): New function.\n\n\t* config/sh/sh.c (sh_scalar_mode_supported_p): New function.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n\n\t* config/sh/sh.h (OVERRIDE_OPTIONS): Don't warn for profiling.\n\nFrom-SVN: r132766", "tree": {"sha": "e3c72a1b48ac1c5eda7695b12f412d94123a531b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3c72a1b48ac1c5eda7695b12f412d94123a531b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0fbea136ef18450fdc326a7ea6a35deca625448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0fbea136ef18450fdc326a7ea6a35deca625448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0fbea136ef18450fdc326a7ea6a35deca625448", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0fbea136ef18450fdc326a7ea6a35deca625448/comments", "author": null, "committer": null, "parents": [{"sha": "0c96231b2f444ee89f91882555744bfdab8d2cea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c96231b2f444ee89f91882555744bfdab8d2cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c96231b2f444ee89f91882555744bfdab8d2cea"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "4563e5290371fe7315645c3af0072be20a2dee43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0fbea136ef18450fdc326a7ea6a35deca625448", "patch": "@@ -1,3 +1,10 @@\n+2008-02-29  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (sh_scalar_mode_supported_p): New function.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n+\n+\t* config/sh/sh.h (OVERRIDE_OPTIONS): Don't warn for profiling.\n+\n 2008-02-29  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-loop-linear.c (try_interchange_loops): Compare memory access"}, {"sha": "f2a0ba94bcc7cb646d0b96e8a2030f0e48b3c51e", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=b0fbea136ef18450fdc326a7ea6a35deca625448", "patch": "@@ -256,6 +256,7 @@ static bool sh_callee_copies (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t      const_tree, bool);\n static int sh_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t         tree, bool);\n+static bool sh_scalar_mode_supported_p (enum machine_mode);\n static int sh_dwarf_calling_convention (const_tree);\n \n \f\n@@ -431,6 +432,8 @@ static int sh_dwarf_calling_convention (const_tree);\n #undef TARGET_GIMPLIFY_VA_ARG_EXPR\n #define TARGET_GIMPLIFY_VA_ARG_EXPR sh_gimplify_va_arg_expr\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P sh_scalar_mode_supported_p\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P sh_vector_mode_supported_p\n \n@@ -9201,6 +9204,17 @@ sh_md_finish_global (FILE *dump ATTRIBUTE_UNUSED,\n     }\n }\n \n+/* The scalar modes supported differs from the default version in TImode\n+   for 32-bit SHMEDIA.  */\n+static bool\n+sh_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  if (TARGET_SHMEDIA32 && mode == TImode)\n+    return false;\n+\n+  return default_scalar_mode_supported_p (mode);\n+}\n+\n /* Cache the can_issue_more so that we can return it from reorder2. Also,\n    keep count of register pressures on SImode and SFmode. */\n static int"}, {"sha": "7a1547932e516706a2c95752659c04dc3e412b3d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0fbea136ef18450fdc326a7ea6a35deca625448/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b0fbea136ef18450fdc326a7ea6a35deca625448", "patch": "@@ -623,12 +623,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  TARGET_CBRANCHDI4 = 0;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n-      /* -fprofile-arcs needs a working libgcov .  In unified tree\t\\\n-\t configurations with newlib, this requires to configure with\t\\\n-\t --with-newlib --with-headers.  But there is no way to check\t\\\n-\t here we have a working libgcov, so just assume that we have.  */\\\n-      if (profile_flag)\t\t\t\t\t\t\t\\\n-\twarning (0, \"profiling is still experimental for this target\");\\\n     }\t\t\t\t\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}]}