{"sha": "5422cd26d3438eeaad83c53e99a9b04f27fb798b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQyMmNkMjZkMzQzOGVlYWFkODNjNTNlOTlhOWIwNGYyN2ZiNzk4Yg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-03T00:46:54Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-10-03T00:46:54Z"}, "message": "Add missing sparc shift zero extensions, and fix shift attributes.\n\n\t* config/sparc/sparc.md (ashlsi3, *ashldi3_sp64): Remove\n\tconditional insn type setting, we always emit a shift.\n\t(*ashlsi3_extend, *lshrsi3_extend0): New patterns.\n\t(*lshrsi3_extend): Rename to *lshrsi3_extend1.\n\nCo-Authored-By: David S. Miller <davem@davemloft.net>\n\nFrom-SVN: r179441", "tree": {"sha": "8857e1ea08e0012b09f9c8522cfafb7c319d898c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8857e1ea08e0012b09f9c8522cfafb7c319d898c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5422cd26d3438eeaad83c53e99a9b04f27fb798b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5422cd26d3438eeaad83c53e99a9b04f27fb798b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5422cd26d3438eeaad83c53e99a9b04f27fb798b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5422cd26d3438eeaad83c53e99a9b04f27fb798b/comments", "author": null, "committer": null, "parents": [{"sha": "073c1757248ff235efb686ca1fa721f97cce07b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/073c1757248ff235efb686ca1fa721f97cce07b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/073c1757248ff235efb686ca1fa721f97cce07b8"}], "stats": {"total": 49, "additions": 37, "deletions": 12}, "files": [{"sha": "fbc0b20077b24c85b0020e37c96d223a022331b3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5422cd26d3438eeaad83c53e99a9b04f27fb798b", "patch": "@@ -1,3 +1,11 @@\n+2011-10-02  Richard Henderson  <rth@redhat.com>\n+\t    David S. Miller  <davem@davemloft.net>\n+\n+\t* config/sparc/sparc.md (ashlsi3, *ashldi3_sp64): Remove\n+\tconditional insn type setting, we always emit a shift.\n+\t(*ashlsi3_extend, *lshrsi3_extend0): New patterns.\n+\t(*lshrsi3_extend): Rename to *lshrsi3_extend1.\n+\n 2011-10-02  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* invoke.texi (SPARC Options): Refer to GNU/Linux."}, {"sha": "f0be14997afcc3bf8b724664fe1984e7016c642e", "filename": "gcc/config/sparc/predicates.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2Fconfig%2Fsparc%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fpredicates.md?ref=5422cd26d3438eeaad83c53e99a9b04f27fb798b", "patch": "@@ -24,11 +24,6 @@\n   (and (match_code \"const_int,const_double,const_vector\")\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n-;; Return true if OP is the one constant for MODE.\n-(define_predicate \"const_one_operand\"\n-  (and (match_code \"const_int,const_double,const_vector\")\n-       (match_test \"op == CONST1_RTX (mode)\")))\n-\n ;; Return true if the integer representation of OP is\n ;; all-ones.\n (define_predicate \"const_all_ones_operand\""}, {"sha": "699074682f660bef06de944f1ac8f6e833acf980", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5422cd26d3438eeaad83c53e99a9b04f27fb798b/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=5422cd26d3438eeaad83c53e99a9b04f27fb798b", "patch": "@@ -5814,9 +5814,20 @@\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n   return \"sll\\t%1, %2, %0\";\n }\n-  [(set (attr \"type\")\n-\t(if_then_else (match_operand 2 \"const_one_operand\" \"\")\n-\t\t      (const_string \"ialu\") (const_string \"shift\")))])\n+  [(set_attr \"type\" \"shift\")])\n+\n+(define_insn \"*ashlsi3_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t     (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n+  \"TARGET_ARCH64\"\n+{\n+  if (GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+  return \"sll\\t%1, %2, %0\";\n+}\n+  [(set_attr \"type\" \"shift\")])\n \n (define_expand \"ashldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n@@ -5843,9 +5854,7 @@\n     operands[2] = GEN_INT (INTVAL (operands[2]) & 0x3f);\n   return \"sllx\\t%1, %2, %0\";\n }\n-  [(set (attr \"type\")\n-\t(if_then_else (match_operand 2 \"const_one_operand\" \"\")\n-\t\t      (const_string \"ialu\") (const_string \"shift\")))])\n+  [(set_attr \"type\" \"shift\")])\n \n ;; XXX UGH!\n (define_insn \"ashldi3_v8plus\"\n@@ -5980,10 +5989,23 @@\n   }\n   [(set_attr \"type\" \"shift\")])\n \n+(define_insn \"*lshrsi3_extend0\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t  (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:SI 2 \"arith_operand\" \"rI\"))))]\n+  \"TARGET_ARCH64\"\n+  {\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      operands[2] = GEN_INT (INTVAL (operands[2]) & 0x1f);\n+    return \"srl\\t%1, %2, %0\";\n+  }\n+  [(set_attr \"type\" \"shift\")])\n+\n ;; This handles the case where\n ;; (zero_extend:DI (lshiftrt:SI (match_operand:SI) (match_operand:SI))),\n ;; but combiner \"simplifies\" it for us.\n-(define_insn \"*lshrsi3_extend\"\n+(define_insn \"*lshrsi3_extend1\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(and:DI (subreg:DI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t\t   (match_operand:SI 2 \"arith_operand\" \"r\")) 0)"}]}