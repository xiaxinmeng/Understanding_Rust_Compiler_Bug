{"sha": "66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZhZTMxZWIzMDhlNWJjOTBjZTZkZmQwYTY3MzgxYTA5MjlhNmFhMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T14:41:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T15:28:33Z"}, "message": "libstdc++: span's deduction-guide for built-in arrays doesn't work (LWG 3369)\n\nThe 23_containers/span/deduction.cc test was already passing, but only\nbecause I had previously implemented the original proposed resolution of\n3255. As pointed out in 3255 that original P/R was incorrect because it\nbroke construction from array xvalues. This reverts the incorrect part\nof 3255 (and adds tests for the case it broke), and implements the\nresolution of 3369 instead.\n\n\t* include/std/span (span(T (&)[N])): Use non-deduced context to\n\tprevent first parameter from interfering with class template argument\n\tdeduction (LWG 3369).\n\t* testsuite/23_containers/span/deduction.cc: Add missing 'const'.\n\t* testsuite/23_containers/span/lwg3255.cc: Check for construction from\n\trvalues.", "tree": {"sha": "b33c676794c3d8adaac4007d12201db29a5b38f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b33c676794c3d8adaac4007d12201db29a5b38f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247f410b83797a1840573840cc2a539ef9d7f96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247f410b83797a1840573840cc2a539ef9d7f96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247f410b83797a1840573840cc2a539ef9d7f96b"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "18085f3d9bd09e04fcc765373be793dd208c662b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "patch": "@@ -1,5 +1,12 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/span (span(T (&)[N])): Use non-deduced context to\n+\tprevent first parameter from interfering with class template argument\n+\tdeduction (LWG 3369).\n+\t* testsuite/23_containers/span/deduction.cc: Add missing 'const'.\n+\t* testsuite/23_containers/span/lwg3255.cc: Check for construction from\n+\trvalues.\n+\n \t* include/std/span (span::const_iterator, span::const_reverse_iterator)\n \t(span::cbegin(), span::cend(), span::crbegin(), span::crend()):\n \tRemove (LWG 3320)."}, {"sha": "16b09a1e50cddd7c9fb5233611f7df589cbec1b3", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "patch": "@@ -182,10 +182,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    }\n \t}\n \n-      template<typename _Tp, size_t _ArrayExtent>\n-\trequires __is_compatible_array<_Tp, _ArrayExtent>::value\n+      template<size_t _ArrayExtent>\n+\trequires (_Extent == dynamic_extent || _ArrayExtent == _Extent)\n \tconstexpr\n-\tspan(_Tp (&__arr)[_ArrayExtent]) noexcept\n+\tspan(type_identity_t<element_type> (&__arr)[_ArrayExtent]) noexcept\n \t: span(static_cast<pointer>(__arr), _ArrayExtent)\n \t{ }\n "}, {"sha": "2fe1ac477c8261fecd712b2ee863aa68da1725b3", "filename": "libstdc++-v3/testsuite/23_containers/span/deduction.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fdeduction.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fdeduction.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Fdeduction.cc?ref=66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "patch": "@@ -73,7 +73,7 @@ test01()\n   std::span s9(s2);\n   static_assert( is_static_span<int, 2>(s9) );\n \n-  std::span s10(const_cast<std::span<int, 2>&>(s2));\n+  std::span s10(const_cast<const std::span<int, 2>&>(s2));\n   static_assert( is_static_span<int, 2>(s10) );\n \n   std::span s11(s5);"}, {"sha": "03ced2c8710098bb7380fa11d24d964070102947", "filename": "libstdc++-v3/testsuite/23_containers/span/lwg3255.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fspan%2Flwg3255.cc?ref=66ae31eb308e5bc90ce6dfd0a67381a0929a6aa0", "patch": "@@ -57,10 +57,14 @@ static_assert( !is_constructible_v<span<const int, 1>, const array<const int, 2>\n static_assert( is_constructible_v<span<int>, int(&)[2]> );\n static_assert( is_constructible_v<span<const int>, int(&)[2]> );\n static_assert( is_constructible_v<span<const int>, const int(&)[2]> );\n+static_assert( is_constructible_v<span<const int>, int[2]> );\n+static_assert( is_constructible_v<span<const int>, const int[2]> );\n \n static_assert( is_constructible_v<span<int>, array<int, 2>&> );\n static_assert( is_constructible_v<span<const int>, array<int, 2>&> );\n static_assert( is_constructible_v<span<const int>, array<const int, 2>&> );\n+static_assert( is_constructible_v<span<const int>, array<int, 2>> );\n+static_assert( is_constructible_v<span<const int>, array<const int, 2>> );\n \n static_assert( is_constructible_v<span<const int>, const array<int, 2>&> );\n static_assert( is_constructible_v<span<const int>, const array<const int, 2>&> );"}]}