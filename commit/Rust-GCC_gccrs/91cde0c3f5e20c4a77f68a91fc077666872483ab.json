{"sha": "91cde0c3f5e20c4a77f68a91fc077666872483ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFjZGUwYzNmNWUyMGM0YTc3ZjY4YTkxZmMwNzc2NjY4NzI0ODNhYg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2004-05-15T06:21:34Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2004-05-15T06:21:34Z"}, "message": "tree-ssa-dom.c (redirect_edges_and_update_ssa_graph): Don't even bother marking bypassed virtuals for out-of-ssa.\n\n        * tree-ssa-dom.c (redirect_edges_and_update_ssa_graph): Don't even\n        bother marking bypassed virtuals for out-of-ssa.  Instead merge\n        bypassed virtuals into vars_to_rename just before into-ssa pass.\n\nFrom-SVN: r81872", "tree": {"sha": "60cedd08244ef4752b3d88e01bf7703eec576bb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60cedd08244ef4752b3d88e01bf7703eec576bb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91cde0c3f5e20c4a77f68a91fc077666872483ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91cde0c3f5e20c4a77f68a91fc077666872483ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91cde0c3f5e20c4a77f68a91fc077666872483ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91cde0c3f5e20c4a77f68a91fc077666872483ab/comments", "author": null, "committer": null, "parents": [{"sha": "e9a757769b395ef082be82777e68bfe8a8a79f90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9a757769b395ef082be82777e68bfe8a8a79f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9a757769b395ef082be82777e68bfe8a8a79f90"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "0365e82ade30c390d614263b0d34c15f461d8a96", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91cde0c3f5e20c4a77f68a91fc077666872483ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91cde0c3f5e20c4a77f68a91fc077666872483ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=91cde0c3f5e20c4a77f68a91fc077666872483ab", "patch": "@@ -19,6 +19,10 @@\n \n 2004-05-14  Jeff Law  <law@redhat.com>\n \n+\t* tree-ssa-dom.c (redirect_edges_and_update_ssa_graph): Don't even\n+\tbother marking bypassed virtuals for out-of-ssa.  Instead merge\n+        bypassed virtuals into vars_to_rename just before into-ssa pass.\n+\n \t* tree-ssa-dom.c (simplify_rhs_and_lookup_avail_expr): Reorganize\n \tso that it picks up more opportunities to eliminate ABS expressions\n \tor turn them into negations."}, {"sha": "5f8896f70196875c3350e92de970cd3eea1b86c7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 36, "deletions": 17, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91cde0c3f5e20c4a77f68a91fc077666872483ab/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91cde0c3f5e20c4a77f68a91fc077666872483ab/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=91cde0c3f5e20c4a77f68a91fc077666872483ab", "patch": "@@ -312,12 +312,14 @@ set_value_for (tree var, tree value, varray_type table)\n static void\n redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n {\n-  basic_block tgt;\n+  basic_block tgt, bb;\n+  tree phi;\n   unsigned int i;\n   size_t old_num_referenced_vars = num_referenced_vars;\n+  bitmap virtuals_to_rename = BITMAP_XMALLOC ();\n \n   /* First note any variables which we are going to have to take\n-     out of SSA form.  */\n+     out of SSA form as well as any virtuals which need updating.  */\n   for (i = 0; i < VARRAY_ACTIVE_SIZE (redirection_edges); i += 2)\n     {\n       block_stmt_iterator bsi;\n@@ -333,7 +335,11 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n       for (phi = phi_nodes (e->dest); phi; phi = TREE_CHAIN (phi))\n \t{\n \t  tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n-\t  bitmap_set_bit (vars_to_rename, var_ann (result)->uid);\n+\n+\t  if (is_gimple_reg (PHI_RESULT (phi)))\n+\t    bitmap_set_bit (vars_to_rename, var_ann (result)->uid);\n+\t  else\n+\t    bitmap_set_bit (virtuals_to_rename, var_ann (result)->uid);\n         }\n \n       /* Any variables set by statements at the start of the block we\n@@ -362,7 +368,7 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n \t  for (j = 0; j < NUM_VDEFS (vdefs); j++)\n \t    {\n \t      tree op = VDEF_RESULT (vdefs, j);\n-\t      bitmap_set_bit (vars_to_rename, var_ann (op)->uid);\n+\t      bitmap_set_bit (virtuals_to_rename, var_ann (op)->uid);\n \t    }\n \t}\n \n@@ -371,20 +377,11 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n       for (phi = phi_nodes (tgt); phi; phi = TREE_CHAIN (phi))\n \t{\n \t  tree result = SSA_NAME_VAR (PHI_RESULT (phi));\n-\t  int j;\n-\n-\t  bitmap_set_bit (vars_to_rename, var_ann (result)->uid);\n \n-\t  for (j = 0; j < PHI_NUM_ARGS (phi); j++)\n-\t    {\n-\t      tree arg = PHI_ARG_DEF (phi, j);\n-\n-\t      if (TREE_CODE (arg) != SSA_NAME)\n-\t\tcontinue;\n-\n-\t      arg = SSA_NAME_VAR (arg);\n-\t      bitmap_set_bit (vars_to_rename, var_ann (arg)->uid);\n-\t    }\n+\t  if (is_gimple_reg (PHI_RESULT (phi)))\n+\t    bitmap_set_bit (vars_to_rename, var_ann (result)->uid);\n+\t  else\n+\t    bitmap_set_bit (virtuals_to_rename, var_ann (result)->uid);\n         }\n     }\n \n@@ -497,6 +494,28 @@ redirect_edges_and_update_ssa_graph (varray_type redirection_edges)\n       bitmap_set_bit (vars_to_rename, i);\n       var_ann (referenced_var (i))->out_of_ssa_tag = 0;\n     }\n+\n+  bitmap_a_or_b (vars_to_rename, vars_to_rename, virtuals_to_rename);\n+\n+  /* We must remove any PHIs for virtual variables that we are going to\n+     re-rename.  Hopefully we'll be able to simply update these incrementally\n+     soon.  */\n+  FOR_EACH_BB (bb)\n+    {\n+      tree next;\n+\n+      for (phi = phi_nodes (bb); phi; phi = next)\n+\t{\n+\t  tree result = PHI_RESULT (phi);\n+\n+\t  next = TREE_CHAIN (phi);\n+\n+\t  if (bitmap_bit_p (virtuals_to_rename,\n+\t\t\t    var_ann (SSA_NAME_VAR (result))->uid))\n+\t    remove_phi_node (phi, NULL, bb);\n+\t}\n+    }\n+  BITMAP_XFREE (virtuals_to_rename);\n }\n \n /* Jump threading, redundancy elimination and const/copy propagation. "}]}