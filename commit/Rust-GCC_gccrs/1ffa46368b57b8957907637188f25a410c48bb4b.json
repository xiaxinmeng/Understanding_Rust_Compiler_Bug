{"sha": "1ffa46368b57b8957907637188f25a410c48bb4b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmYTQ2MzY4YjU3Yjg5NTc5MDc2MzcxODhmMjVhNDEwYzQ4YmI0Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T09:13:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T09:13:02Z"}, "message": "Delete questionable files\n\nFrom-SVN: r28457", "tree": {"sha": "f225eb0e9140c4325efb75d81e3e09c5f6155964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f225eb0e9140c4325efb75d81e3e09c5f6155964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ffa46368b57b8957907637188f25a410c48bb4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffa46368b57b8957907637188f25a410c48bb4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ffa46368b57b8957907637188f25a410c48bb4b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ffa46368b57b8957907637188f25a410c48bb4b/comments", "author": null, "committer": null, "parents": [{"sha": "cb585cfa2e921884cbf8fae075019eb43908e68b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb585cfa2e921884cbf8fae075019eb43908e68b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb585cfa2e921884cbf8fae075019eb43908e68b"}], "stats": {"total": 136, "additions": 0, "deletions": 136}, "files": [{"sha": "3baea64743dae6688206a083e2c370b49c63f9aa", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb78.C", "status": "removed", "additions": 0, "deletions": 136, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb585cfa2e921884cbf8fae075019eb43908e68b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb585cfa2e921884cbf8fae075019eb43908e68b/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb78.C?ref=cb585cfa2e921884cbf8fae075019eb43908e68b", "patch": "@@ -1,136 +0,0 @@\n-// Special g++ Options: -W -Wall -O\n-\n-//This is the source code from FAQ-259, found in chapter 20 of \"C++ FAQs.\"\n-//Copyright (C) 1994, Addison-Wesley Publishers, Inc.; All rights reserved.\n-//\n-//The book, \"C++ FAQs\" is by Marshall P. Cline and Greg A. Lomow,\n-//Copyright (C) 1994, Addison-Wesley Publishers, Inc.; All rights reserved.\n-//\n-//This code is presented for its instructional value.  It has been tested with\n-//care, but it is not guaranteed for any particular purpose.  Neither the\n-//publisher nor the authors offer any warranties or representations, nor do\n-//they accept any liabilities with respect to this code.\n-\n-#include <string.h>\n-#include <iostream.h>\n-\n-class BadIndex { };\n-\n-class String {\n-public:\n-\n-  String()\n-    : len_(0), data_(new char[1])\n-    { data_[0] = '\\0'; }\n-\n-  String(const char* s)\n-    : len_(strlen(s)), data_(new char[len_ + 1])\n-    { memcpy(data_, s, len_ + 1); }\n-\n- ~String()\n-    { delete [] data_; }\n-\n-  String(const String& s)\n-    : len_(s.len_), data_(new char[s.len_ + 1])\n-    { memcpy(data_, s.data_, len_ + 1); }\n-\n-  String& operator= (const String& s)\n-    {\n-      if (len_ != s.len_) { //makes self-assignment harmless\n-        char* newData = new char[s.len_ + 1];\n-        delete [] data_;\n-        data_ = newData;\n-        len_ = s.len_;\n-      }\n-      memcpy(data_, s.data_, len_ + 1);\n-      return *this;\n-    }\n-\n-  unsigned len() const\n-    { return len_; }\n-\n-  char& operator[] (unsigned i)\n-    { indexTest(i); return data_[i]; }\n-  char  operator[] (unsigned i) const\n-    { indexTest(i); return data_[i]; }\n-\n-  friend ostream& operator<< (ostream& o, const String& s)\n-    { return o.write(s.data_, s.len_); }\n-\n-  friend int operator== (const String& a, const String& b)\n-    { return a.len_ == b.len_ &&\n-             memcmp(a.data_, b.data_, a.len_) == 0; }\n-  friend int operator!= (const String& a, const String& b)\n-    { return ! (a == b); }\n-\n-private:\n-  void indexTest(unsigned i) const\n-    { if (i >= len_) throw BadIndex(); }\n-  unsigned len_;  //ORDER DEPENDENCY; see FAQ-190\n-  char* data_;    //ORDER DEPENDENCY; see FAQ-190\n-};\n-\n-class AccessViolation { };\n-class BadFileName     { };\n-\n-class File {\n-public:\n-  File(const String& filename)\n-    throw(AccessViolation, BadFileName)\n-    {\n-      cout << \"Open \" << filename << \"\\n\";\n-      if (filename == \"badAccess.txt\")\n-        throw AccessViolation();\n-      if (filename == \"badName.txt\")\n-        throw BadFileName();\n-    }\n-};\n-\n-class UserClass {\n-public:\n-  void f(const String& filename) throw(BadFileName);\n-};\n-\n-void\n-UserClass::f(const String& filename) throw(BadFileName)\n-{\n-  try {\n-    File f(filename);\t\t// WARNING - unused\n-  }\n-  catch (const AccessViolation& e) {\n-    cout << \"  FULLY recover from access-violation\\n\";\n-  }\n-  catch (const BadFileName& e) {\n-    cout << \"  PARTIALLY recover from bad-file-name\\n\";\n-    throw;\n-  }\n-}\n-\n-void\n-tryIt(const String& filename)\n-{\n-  try {\n-    UserClass u;\n-    u.f(filename);\n-    cout << \"  OK\\n\";\n-  }\n-  catch (const BadFileName& e) {\n-    cout << \"  Finish recovering from bad-file-name\\n\";\n-  }\n-}\n-\n-int\n-main()\n-{\n-  tryIt(\"goodFile.txt\");\n-  tryIt(\"badAccess.txt\");\n-  tryIt(\"badName.txt\");\n-}\n-\n-// g++ -O -o warn warn.C -W -Wall\n-// warn.C: In method `void UserClass::f(const class String &)':\n-// warn.C:96: warning: unused variable `class File f'\n-// warn.C:101: warning: `struct cp_eh_info * __exception_info' might \n-// be used uninitialized in this function\n-\n-"}]}