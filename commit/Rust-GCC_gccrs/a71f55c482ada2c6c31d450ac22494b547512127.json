{"sha": "a71f55c482ada2c6c31d450ac22494b547512127", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcxZjU1YzQ4MmFkYTJjNmMzMWQ0NTBhYzIyNDk0YjU0NzUxMjEyNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-20T16:48:16Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-05-20T16:50:28Z"}, "message": "i386: Avoid integer logic insns for 32bit and 64bit vector modes [PR100701]\n\nInteger logic instructions clobber flags, do not use them for\n32bit and 64bit vector modes.\n\n2021-05-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/100701\n\t* config/i386/i386.md (isa): Remove x64_bmi.\n\t(enabled): Remove x64_bmi.\n\t* config/i386/mmx.md (mmx_andnot<MMXMODEI:mode>3):\n\tRemove general register alternative.\n\t(*andnot<VI_32:mode>3): Ditto.\n\t(*mmx_<any_logic:code><MMXMODEI:mode>3): Ditto.\n\t(*<any_logic:code><VI_32:mode>3): Ditto.\n\ngcc/testsuite/\n\n\tPR target/100701\n\t* gcc.target/i386/pr100701.c: New test.", "tree": {"sha": "7219806beb9ee5f93b40b9bf006e4e0487bfb308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7219806beb9ee5f93b40b9bf006e4e0487bfb308"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a71f55c482ada2c6c31d450ac22494b547512127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71f55c482ada2c6c31d450ac22494b547512127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a71f55c482ada2c6c31d450ac22494b547512127", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a71f55c482ada2c6c31d450ac22494b547512127/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdcec2f8505ea12c2236cf0184d77dd2f5de4832", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdcec2f8505ea12c2236cf0184d77dd2f5de4832"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "960ecbd327a73fb1291a0ec49200b58b587747b2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a71f55c482ada2c6c31d450ac22494b547512127", "patch": "@@ -815,7 +815,7 @@\n (define_attr \"movu\" \"0,1\" (const_string \"0\"))\n \n ;; Used to control the \"enabled\" attribute on a per-instruction basis.\n-(define_attr \"isa\" \"base,x64,nox64,x64_bmi,x64_sse2,x64_sse4,x64_sse4_noavx,\n+(define_attr \"isa\" \"base,x64,nox64,x64_sse2,x64_sse4,x64_sse4_noavx,\n \t\t    x64_avx,x64_avx512bw,x64_avx512dq,\n \t\t    sse_noavx,sse2,sse2_noavx,sse3,sse3_noavx,sse4,sse4_noavx,\n \t\t    avx,noavx,avx2,noavx2,bmi,bmi2,fma4,fma,avx512f,noavx512f,\n@@ -831,8 +831,6 @@\n (define_attr \"enabled\" \"\"\n   (cond [(eq_attr \"isa\" \"x64\") (symbol_ref \"TARGET_64BIT\")\n \t (eq_attr \"isa\" \"nox64\") (symbol_ref \"!TARGET_64BIT\")\n-\t (eq_attr \"isa\" \"x64_bmi\")\n-\t   (symbol_ref \"TARGET_64BIT && TARGET_BMI\")\n \t (eq_attr \"isa\" \"x64_sse2\")\n \t   (symbol_ref \"TARGET_64BIT && TARGET_SSE2\")\n \t (eq_attr \"isa\" \"x64_sse4\")"}, {"sha": "baeed04d8c94fb8b350830f644b2765901ba2ce9", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=a71f55c482ada2c6c31d450ac22494b547512127", "patch": "@@ -2055,40 +2055,34 @@\n   \"operands[2] = force_reg (<MODE>mode, CONSTM1_RTX (<MODE>mode));\")\n \n (define_insn \"mmx_andnot<mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,r,x,x,v\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n \t(and:MMXMODEI\n-\t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\"\n-\t    \"0,r,0,x,v\"))\n-\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\"\n-\t    \"ym,r,x,x,v\")))]\n+\t  (not:MMXMODEI (match_operand:MMXMODEI 1 \"register_operand\" \"0,0,x,v\"))\n+\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,x,x,v\")))]\n   \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"@\n    pandn\\t{%2, %0|%0, %2}\n-   andn\\t{%2, %1, %0|%0, %1, %2}\n    pandn\\t{%2, %0|%0, %2}\n    vpandn\\t{%2, %1, %0|%0, %1, %2}\n    vpandnd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,x64_bmi,sse2_noavx,avx,avx512vl\")\n-   (set_attr \"mmx_isa\" \"native,*,*,*,*\")\n-   (set_attr \"type\" \"mmxadd,bitmanip,sselog,sselog,sselog\")\n-   (set_attr \"btver2_decode\" \"*,direct,*,*,*\")\n-   (set_attr \"mode\" \"DI,DI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"mmx_isa\" \"native,*,*,*\")\n+   (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n (define_insn \"*andnot<mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=r,x,x,v\")\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x,v\")\n \t(and:VI_32\n-\t  (not:VI_32 (match_operand:VI_32 1 \"register_operand\" \"r,0,x,v\"))\n-\t  (match_operand:VI_32 2 \"register_operand\" \"r,x,x,v\")))]\n+\t  (not:VI_32 (match_operand:VI_32 1 \"register_operand\" \"0,x,v\"))\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,x,v\")))]\n   \"TARGET_SSE2\"\n   \"@\n-   andn\\t{%2, %1, %0|%0, %1, %2}\n    pandn\\t{%2, %0|%0, %2}\n    vpandn\\t{%2, %1, %0|%0, %1, %2}\n    vpandnd\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"bmi,noavx,avx,avx512vl\")\n-   (set_attr \"type\" \"bitmanip,sselog,sselog,sselog\")\n-   (set_attr \"btver2_decode\" \"direct,*,*,*\")\n-   (set_attr \"mode\" \"SI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n (define_expand \"mmx_<code><mode>3\"\n   [(set (match_operand:MMXMODEI 0 \"register_operand\")\n@@ -2107,22 +2101,21 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*mmx_<code><mode>3\"\n-  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,r,x,x,v\")\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\" \"=y,x,x,v\")\n         (any_logic:MMXMODEI\n-\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"%0,0,0,x,v\")\n-\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,r,x,x,v\")))]\n+\t  (match_operand:MMXMODEI 1 \"register_mmxmem_operand\" \"%0,0,x,v\")\n+\t  (match_operand:MMXMODEI 2 \"register_mmxmem_operand\" \"ym,x,x,v\")))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n    p<logic>\\t{%2, %0|%0, %2}\n-   <logic>\\t{%2, %0|%0, %2}\n    p<logic>\\t{%2, %0|%0, %2}\n    vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n    vp<logic>d\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,x64,sse2_noavx,avx,avx512vl\")\n-   (set_attr \"mmx_isa\" \"native,*,*,*,*\")\n-   (set_attr \"type\" \"mmxadd,alu,sselog,sselog,sselog\")\n-   (set_attr \"mode\" \"DI,DI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"*,sse2_noavx,avx,avx512vl\")\n+   (set_attr \"mmx_isa\" \"native,*,*,*\")\n+   (set_attr \"type\" \"mmxadd,sselog,sselog,sselog\")\n+   (set_attr \"mode\" \"DI,TI,TI,TI\")])\n \n (define_expand \"<code><mode>3\"\n   [(set (match_operand:VI_32 0 \"register_operand\")\n@@ -2133,20 +2126,19 @@\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*<code><mode>3\"\n-  [(set (match_operand:VI_32 0 \"register_operand\" \"=r,x,x,v\")\n+  [(set (match_operand:VI_32 0 \"register_operand\" \"=x,x,v\")\n         (any_logic:VI_32\n-\t  (match_operand:VI_32 1 \"register_operand\" \"%0,0,x,v\")\n-\t  (match_operand:VI_32 2 \"register_operand\" \"r,x,x,v\")))]\n+\t  (match_operand:VI_32 1 \"register_operand\" \"%0,x,v\")\n+\t  (match_operand:VI_32 2 \"register_operand\" \"x,x,v\")))]\n   \"TARGET_SSE2\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n-   <logic>\\t{%2, %0|%0, %2}\n    p<logic>\\t{%2, %0|%0, %2}\n    vp<logic>\\t{%2, %1, %0|%0, %1, %2}\n    vp<logic>d\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"*,noavx,avx,avx512vl\")\n-   (set_attr \"type\" \"alu,sselog,sselog,sselog\")\n-   (set_attr \"mode\" \"SI,TI,TI,TI\")])\n+  [(set_attr \"isa\" \"noavx,avx,avx512vl\")\n+   (set_attr \"type\" \"sselog\")\n+   (set_attr \"mode\" \"TI\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;"}, {"sha": "3132d66929d43f4660c0084284a9a308f9ca0b87", "filename": "gcc/testsuite/gcc.target/i386/pr100701.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100701.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a71f55c482ada2c6c31d450ac22494b547512127/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100701.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr100701.c?ref=a71f55c482ada2c6c31d450ac22494b547512127", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/100701 */\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O0 -fschedule-insns2 -msse2\" } */\n+\n+typedef unsigned char __attribute__((__vector_size__ (8))) V;\n+typedef unsigned int __attribute__((__vector_size__ (8))) U;\n+\n+U u;\n+unsigned x;\n+unsigned char y;\n+\n+V\n+foo (V a, __int128 i)\n+{\n+  V b = a;\n+  a &= y;\n+  if (i == 0)\n+    __builtin_abort ();\n+  U c = (x != y / i) <= u;\n+  return (V) c + a + b;\n+}\n+\n+int\n+main (void)\n+{\n+  (void)foo ((V) { }, 4);\n+  return 0;\n+}"}]}