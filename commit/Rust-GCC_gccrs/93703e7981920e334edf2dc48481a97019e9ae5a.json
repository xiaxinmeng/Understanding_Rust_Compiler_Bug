{"sha": "93703e7981920e334edf2dc48481a97019e9ae5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM3MDNlNzk4MTkyMGUzMzRlZGYyZGM0ODQ4MWE5NzAxOWU5YWU1YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-25T20:42:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-25T20:42:00Z"}, "message": "i386: Add widen_multiply_even/odd builtins and hooks\n\nFrom-SVN: r188959", "tree": {"sha": "07223ef530774d0b5c59de78ed4ccff23ca203c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07223ef530774d0b5c59de78ed4ccff23ca203c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93703e7981920e334edf2dc48481a97019e9ae5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93703e7981920e334edf2dc48481a97019e9ae5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93703e7981920e334edf2dc48481a97019e9ae5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93703e7981920e334edf2dc48481a97019e9ae5a/comments", "author": null, "committer": null, "parents": [{"sha": "379eaa6f239853b087fb3276cea41580f8ef3efa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/379eaa6f239853b087fb3276cea41580f8ef3efa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/379eaa6f239853b087fb3276cea41580f8ef3efa"}], "stats": {"total": 141, "additions": 137, "deletions": 4}, "files": [{"sha": "cdc22ab8b2647741aa8ee6e4de3e53ac3e8f53eb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=93703e7981920e334edf2dc48481a97019e9ae5a", "patch": "@@ -1,3 +1,22 @@\n+2012-06-25  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386-builtin-types.def (V4UDI, V8USI): New.\n+\t(V2UDI_FUNC_V4USI_V4USI): New.\n+\t(V4UDI_FUNC_V8USI_V8USI): New.\n+\t* config/i386/i386.c (ix86_expand_args_builtin): Handle them.\n+\t(IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI): New.\n+\t(IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI): New.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI): New.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI): New.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI): New.\n+\t(IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI): New.\n+\t(bdesc_args): Add them.\n+\t(ix86_builtin_mul_widen_even, ix86_builtin_mul_widen_odd): New.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN): New.\n+\t(TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD): New.\n+\t(ix86_expand_mul_widen_evenodd): Use xop_pmacsdqh.\n+\t* config/i386/sse.md (vec_widen_<s>mult_odd_<V124_AVX2>): New.\n+\n 2012-06-25  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386.sse.md (mul<VI4_AVX2>3): Use xop_pmacsdd."}, {"sha": "398bf0af07dc7f4716effdb7066fb8d096886b01", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=93703e7981920e334edf2dc48481a97019e9ae5a", "patch": "@@ -97,7 +97,8 @@ DEF_VECTOR_TYPE (V4DI, DI)\n DEF_VECTOR_TYPE (V8SI, SI)\n DEF_VECTOR_TYPE (V16HI, HI)\n DEF_VECTOR_TYPE (V32QI, QI)\n-\n+DEF_VECTOR_TYPE (V4UDI, UDI, V4DI)\n+DEF_VECTOR_TYPE (V8USI, USI, V8SI)\n \n DEF_POINTER_TYPE (PCCHAR, CHAR, CONST)\n DEF_POINTER_TYPE (PCDOUBLE, DOUBLE, CONST)\n@@ -283,6 +284,7 @@ DEF_FUNCTION_TYPE (V2DI, V2DI, SI)\n DEF_FUNCTION_TYPE (V2DI, V2DI, V16QI)\n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI)\n DEF_FUNCTION_TYPE (V2DI, V4SI, V4SI)\n+DEF_FUNCTION_TYPE (V2UDI, V4USI, V4USI)\n DEF_FUNCTION_TYPE (V2DI, PCV2DI, V2DI)\n DEF_FUNCTION_TYPE (V2SF, V2SF, V2SF)\n DEF_FUNCTION_TYPE (V2SI, INT, INT)\n@@ -349,6 +351,7 @@ DEF_FUNCTION_TYPE (V8SI, V8SI, SI)\n DEF_FUNCTION_TYPE (V8SI, PCV8SI, V8SI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI)\n DEF_FUNCTION_TYPE (V4DI, V8SI, V8SI)\n+DEF_FUNCTION_TYPE (V4UDI, V8USI, V8USI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, V2DI)\n DEF_FUNCTION_TYPE (V4DI, PCV4DI, V4DI)\n DEF_FUNCTION_TYPE (V4DI, V4DI, INT)"}, {"sha": "c825033094183d073b172cede743f398c3c114ce", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 100, "deletions": 3, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=93703e7981920e334edf2dc48481a97019e9ae5a", "patch": "@@ -25754,6 +25754,13 @@ enum ix86_builtins\n   IX86_BUILTIN_CPYSGNPS256,\n   IX86_BUILTIN_CPYSGNPD256,\n \n+  IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI,\n+  IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI,\n+  IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI,\n+  IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI,\n+  IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI,\n+  IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI,\n+\n   /* FMA4 instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n   IX86_BUILTIN_VFMADDSD,\n@@ -26612,6 +26619,8 @@ static const struct builtin_description bdesc_args[] =\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv1siv1di3, \"__builtin_ia32_pmuludq\", IX86_BUILTIN_PMULUDQ, UNKNOWN, (int) V1DI_FTYPE_V2SI_V2SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_ia32_pmuludq128\", IX86_BUILTIN_PMULUDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_umulv2siv2di3, \"__builtin_vw_umul_even_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_vec_widen_umult_odd_v4si, \"__builtin_ia32_vw_umul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI, UNKNOWN, (int) V2UDI_FTYPE_V4USI_V4USI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmaddwd, \"__builtin_ia32_pmaddwd128\", IX86_BUILTIN_PMADDWD128, UNKNOWN, (int) V4SI_FTYPE_V8HI_V8HI },\n \n@@ -26738,6 +26747,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv4si3, \"__builtin_ia32_pminud128\", IX86_BUILTIN_PMINUD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_uminv8hi3, \"__builtin_ia32_pminuw128\", IX86_BUILTIN_PMINUW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_sse4_1_mulv2siv2di3, \"__builtin_ia32_pmuldq128\", IX86_BUILTIN_PMULDQ128, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n+  { OPTION_MASK_ISA_SSE4_1, CODE_FOR_vec_widen_smult_odd_v4si, \"__builtin_ia32_vw_smul_odd_v4si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI, UNKNOWN, (int) V2DI_FTYPE_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE4_1, CODE_FOR_mulv4si3, \"__builtin_ia32_pmulld128\", IX86_BUILTIN_PMULLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI },\n \n   /* SSE4.1 */\n@@ -27004,12 +27014,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4hiv4di2  , \"__builtin_ia32_pmovzxwq256\", IX86_BUILTIN_PMOVZXWQ256, UNKNOWN, (int) V4DI_FTYPE_V8HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_zero_extendv4siv4di2  , \"__builtin_ia32_pmovzxdq256\", IX86_BUILTIN_PMOVZXDQ256, UNKNOWN, (int) V4DI_FTYPE_V4SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_mulv4siv4di3  , \"__builtin_ia32_pmuldq256\"  , IX86_BUILTIN_PMULDQ256  , UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_smult_odd_v8si, \"__builtin_ia32_vw_smul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI, UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulhrswv16hi3 , \"__builtin_ia32_pmulhrsw256\", IX86_BUILTIN_PMULHRSW256, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_umulv16hi3_highpart, \"__builtin_ia32_pmulhuw256\" , IX86_BUILTIN_PMULHUW256 , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_smulv16hi3_highpart, \"__builtin_ia32_pmulhw256\"  , IX86_BUILTIN_PMULHW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv16hi3, \"__builtin_ia32_pmullw256\"  , IX86_BUILTIN_PMULLW256  , UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_mulv8si3, \"__builtin_ia32_pmulld256\"  , IX86_BUILTIN_PMULLD256  , UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulv4siv4di3  , \"__builtin_ia32_pmuludq256\" , IX86_BUILTIN_PMULUDQ256 , UNKNOWN, (int) V4DI_FTYPE_V8SI_V8SI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_umulv4siv4di3  , \"__builtin_i386_vw_umul_even_v8si\" , IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n+  { OPTION_MASK_ISA_AVX2, CODE_FOR_vec_widen_umult_odd_v8si, \"__builtin_ia32_vw_umul_odd_v8si\", IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI, UNKNOWN, (int) V4UDI_FTYPE_V8USI_V8USI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_iorv4di3, \"__builtin_ia32_por256\", IX86_BUILTIN_POR256, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_psadbw, \"__builtin_ia32_psadbw256\", IX86_BUILTIN_PSADBW256, UNKNOWN, (int) V16HI_FTYPE_V32QI_V32QI },\n   { OPTION_MASK_ISA_AVX2, CODE_FOR_avx2_pshufbv32qi3, \"__builtin_ia32_pshufb256\", IX86_BUILTIN_PSHUFB256, UNKNOWN, (int) V32QI_FTYPE_V32QI_V32QI },\n@@ -29142,6 +29155,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V2DI_FTYPE_V2DI_V2DI:\n     case V2DI_FTYPE_V16QI_V16QI:\n     case V2DI_FTYPE_V4SI_V4SI:\n+    case V2UDI_FTYPE_V4USI_V4USI:\n     case V2DI_FTYPE_V2DI_V16QI:\n     case V2DI_FTYPE_V2DF_V2DF:\n     case V2SI_FTYPE_V2SI_V2SI:\n@@ -29166,6 +29180,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V8SI_FTYPE_V16HI_V16HI:\n     case V4DI_FTYPE_V4DI_V4DI:\n     case V4DI_FTYPE_V8SI_V8SI:\n+    case V4UDI_FTYPE_V8USI_V8USI:\n       if (comparison == UNKNOWN)\n \treturn ix86_expand_binop_builtin (icode, exp, target);\n       nargs = 2;\n@@ -31042,6 +31057,78 @@ ix86_builtin_reciprocal (unsigned int fn, bool md_fn,\n \treturn NULL_TREE;\n       }\n }\n+\n+static tree\n+ix86_builtin_mul_widen_even (tree type)\n+{\n+  bool uns_p = TYPE_UNSIGNED (type);\n+  enum ix86_builtins code;\n+\n+  switch (TYPE_MODE (type))\n+    {\n+    case V4SImode:\n+      if (uns_p)\n+\t{\n+\t  if (!TARGET_SSE2)\n+\t    return NULL;\n+\t  code = IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V4SI;\n+\t}\n+      else\n+\t{\n+\t  if (!TARGET_SSE4_1)\n+\t    return NULL;\n+\t  code = IX86_BUILTIN_PMULDQ128;\n+\t}\n+      break;\n+\n+    case V8SImode:\n+      if (!TARGET_AVX2)\n+\treturn NULL;\n+      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_EVEN_V8SI\n+\t      : IX86_BUILTIN_PMULDQ256);\n+      break;\n+\n+    default:\n+      return NULL;\n+    }\n+  return ix86_builtins[code];\n+}\n+\n+static tree\n+ix86_builtin_mul_widen_odd (tree type)\n+{\n+  bool uns_p = TYPE_UNSIGNED (type);\n+  enum ix86_builtins code;\n+\n+  switch (TYPE_MODE (type))\n+    {\n+    case V4SImode:\n+      if (uns_p)\n+\t{\n+\t  if (!TARGET_SSE2)\n+\t    return NULL;\n+\t  code = IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V4SI;\n+\t}\n+      else\n+\t{\n+\t  if (!TARGET_SSE4_1)\n+\t    return NULL;\n+\t  code = IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V4SI;\n+\t}\n+      break;\n+\n+    case V8SImode:\n+      if (!TARGET_AVX2)\n+\treturn NULL;\n+      code = (uns_p ? IX86_BUILTIN_VEC_WIDEN_UMUL_ODD_V8SI\n+\t      : IX86_BUILTIN_VEC_WIDEN_SMUL_ODD_V8SI);\n+      break;\n+\n+    default:\n+      return NULL;\n+    }\n+  return ix86_builtins[code];\n+}\n \f\n /* Helper for avx_vpermilps256_operand et al.  This is also used by\n    the expansion functions to turn the parallel back into a mask.\n@@ -38663,6 +38750,7 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n \t\t\t       bool uns_p, bool odd_p)\n {\n   enum machine_mode mode = GET_MODE (op1);\n+  enum machine_mode wmode = GET_MODE (dest);\n   rtx x;\n \n   /* We only play even/odd games with vectors of SImode.  */\n@@ -38672,8 +38760,12 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n      the even slots.  For some cpus this is faster than a PSHUFD.  */\n   if (odd_p)\n     {\n-      enum machine_mode wmode = GET_MODE (dest);\n-\n+      if (TARGET_XOP && mode == V4SImode)\n+\t{\n+\t  x = force_reg (wmode, CONST0_RTX (wmode));\n+\t  emit_insn (gen_xop_pmacsdqh (dest, op1, op2, x));\n+\t  return;\n+\t}\n       op1 = expand_binop (wmode, lshr_optab, gen_lowpart (wmode, op1),\n \t\t\t  GEN_INT (GET_MODE_UNIT_BITSIZE (mode)), NULL,\n \t\t\t  1, OPTAB_DIRECT);\n@@ -38697,7 +38789,7 @@ ix86_expand_mul_widen_evenodd (rtx dest, rtx op1, rtx op2,\n     x = gen_sse4_1_mulv2siv2di3 (dest, op1, op2);\n   else if (TARGET_XOP)\n     {\n-      x = force_reg (V2DImode, CONST0_RTX (V2DImode));\n+      x = force_reg (wmode, CONST0_RTX (wmode));\n       x = gen_xop_pmacsdql (dest, op1, op2, x);\n     }\n   else\n@@ -39980,6 +40072,11 @@ ix86_memmodel_check (unsigned HOST_WIDE_INT val)\n #undef TARGET_VECTORIZE_BUILTIN_GATHER\n #define TARGET_VECTORIZE_BUILTIN_GATHER ix86_vectorize_builtin_gather\n \n+#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN\n+#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN ix86_builtin_mul_widen_even\n+#undef TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD\n+#define TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD ix86_builtin_mul_widen_odd\n+\n #undef TARGET_BUILTIN_RECIPROCAL\n #define TARGET_BUILTIN_RECIPROCAL ix86_builtin_reciprocal\n "}, {"sha": "45d3a9ca32533d451d6e8eded1675056cab5f948", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93703e7981920e334edf2dc48481a97019e9ae5a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=93703e7981920e334edf2dc48481a97019e9ae5a", "patch": "@@ -5708,6 +5708,20 @@\n   DONE;\n })\n \n+(define_expand \"vec_widen_<s>mult_odd_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\")\n+   (any_extend:<sseunpackmode>\n+     (match_operand:VI124_AVX2 1 \"register_operand\"))\n+   (match_operand:VI124_AVX2 2 \"register_operand\")]\n+  ; Note that SSE2 does not have signed SI multiply\n+  \"TARGET_AVX || TARGET_XOP || TARGET_SSE4_1\n+   || (TARGET_SSE2 && (<u_bool> || <MODE>mode != V4SImode))\"\n+{\n+  ix86_expand_mul_widen_evenodd (operands[0], operands[1], operands[2],\n+\t\t\t\t <u_bool>, true);\n+  DONE;\n+})\n+\n (define_expand \"sdot_prod<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n    (match_operand:VI2_AVX2 1 \"register_operand\")"}]}