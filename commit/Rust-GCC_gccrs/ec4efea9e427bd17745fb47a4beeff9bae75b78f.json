{"sha": "ec4efea9e427bd17745fb47a4beeff9bae75b78f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0ZWZlYTllNDI3YmQxNzc0NWZiNDdhNGJlZWZmOWJhZTc1Yjc4Zg==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-04-01T17:41:18Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-04-01T17:41:18Z"}, "message": "haifa-sched.c (queue_insn): New arg REASON.\n\n\t* haifa-sched.c (queue_insn): New arg REASON.  All callers\n\tchanged.  Print it in debugging output.\n\nFrom-SVN: r171841", "tree": {"sha": "4b5908207244ec4d3515d3da0147d587df198055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b5908207244ec4d3515d3da0147d587df198055"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4efea9e427bd17745fb47a4beeff9bae75b78f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4efea9e427bd17745fb47a4beeff9bae75b78f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4efea9e427bd17745fb47a4beeff9bae75b78f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4efea9e427bd17745fb47a4beeff9bae75b78f/comments", "author": null, "committer": null, "parents": [{"sha": "c5dd277d0170878d41370afa32b10a56da8b4af6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5dd277d0170878d41370afa32b10a56da8b4af6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5dd277d0170878d41370afa32b10a56da8b4af6"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "4aa0284544e113662604ba8fc8e4ae559b88067e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4efea9e427bd17745fb47a4beeff9bae75b78f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4efea9e427bd17745fb47a4beeff9bae75b78f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ec4efea9e427bd17745fb47a4beeff9bae75b78f", "patch": "@@ -10,6 +10,9 @@\n \t* ifcvt.c (cond_exec_process_insns): Disallow converting a block\n \tthat contains the prologue.\n \n+\t* haifa-sched.c (queue_insn): New arg REASON.  All callers\n+\tchanged.  Print it in debugging output.\n+\n 2011-04-01  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* config/spu/t-spu-elf (dp-bit.c): Use > instead of >>."}, {"sha": "73dc81834d0944c999cd0bbdc219726822acbea4", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4efea9e427bd17745fb47a4beeff9bae75b78f/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4efea9e427bd17745fb47a4beeff9bae75b78f/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=ec4efea9e427bd17745fb47a4beeff9bae75b78f", "patch": "@@ -489,7 +489,7 @@ haifa_classify_insn (const_rtx insn)\n static int priority (rtx);\n static int rank_for_schedule (const void *, const void *);\n static void swap_sort (rtx *, int);\n-static void queue_insn (rtx, int);\n+static void queue_insn (rtx, int, const char *);\n static int schedule_insn (rtx);\n static void adjust_priority (rtx);\n static void advance_one_cycle (void);\n@@ -1313,10 +1313,11 @@ swap_sort (rtx *a, int n)\n \n /* Add INSN to the insn queue so that it can be executed at least\n    N_CYCLES after the currently executing insn.  Preserve insns\n-   chain for debugging purposes.  */\n+   chain for debugging purposes.  REASON will be printed in debugging\n+   output.  */\n \n HAIFA_INLINE static void\n-queue_insn (rtx insn, int n_cycles)\n+queue_insn (rtx insn, int n_cycles, const char *reason)\n {\n   int next_q = NEXT_Q_AFTER (q_ptr, n_cycles);\n   rtx link = alloc_INSN_LIST (insn, insn_queue[next_q]);\n@@ -1332,7 +1333,7 @@ queue_insn (rtx insn, int n_cycles)\n       fprintf (sched_dump, \";;\\t\\tReady-->Q: insn %s: \",\n \t       (*current_sched_info->print_insn) (insn, 0));\n \n-      fprintf (sched_dump, \"queued for %d cycles.\\n\", n_cycles);\n+      fprintf (sched_dump, \"queued for %d cycles (%s).\\n\", n_cycles, reason);\n     }\n \n   QUEUE_INDEX (insn) = next_q;\n@@ -2062,11 +2063,7 @@ queue_to_ready (struct ready_list *ready)\n \t  && ready->n_ready - ready->n_debug > MAX_SCHED_READY_INSNS\n \t  && !SCHED_GROUP_P (insn)\n \t  && insn != skip_insn)\n-\t{\n-\t  if (sched_verbose >= 2)\n-\t    fprintf (sched_dump, \"requeued because ready full\\n\");\n-\t  queue_insn (insn, 1);\n-\t}\n+\tqueue_insn (insn, 1, \"ready full\");\n       else\n \t{\n \t  ready_add (ready, insn, false);\n@@ -2925,7 +2922,7 @@ schedule_block (basic_block *target_bb)\n \t    insn = ready_remove (&ready, i);\n \n \t    if (insn != skip_insn)\n-\t      queue_insn (insn, 1);\n+\t      queue_insn (insn, 1, \"list truncated\");\n \t  }\n       }\n     }\n@@ -3144,7 +3141,7 @@ schedule_block (basic_block *target_bb)\n \n \t  if (cost >= 1)\n \t    {\n-\t      queue_insn (insn, cost);\n+\t      queue_insn (insn, cost, \"resource conflict\");\n  \t      if (SCHED_GROUP_P (insn))\n  \t\t{\n  \t\t  advance = cost;\n@@ -3974,7 +3971,7 @@ change_queue_index (rtx next, int delay)\n   if (delay == QUEUE_READY)\n     ready_add (readyp, next, false);\n   else if (delay >= 1)\n-    queue_insn (next, delay);\n+    queue_insn (next, delay, \"change queue index\");\n \n   if (sched_verbose >= 2)\n     {"}]}