{"sha": "4be312862dec5c8e49c76249dd5aed220c72039e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJlMzEyODYyZGVjNWM4ZTQ5Yzc2MjQ5ZGQ1YWVkMjIwYzcyMDM5ZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2021-03-24T08:44:35Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2021-03-24T08:44:35Z"}, "message": "fix ssse3_pshufbv8qi3 post-reload const pool load\n\nThe split in ssse3_pshufbv8qi3 forces a const vector into the constant\npool, and loads from it.  That runs after reload, so if the load\nrequires any reloading, we're out of luck.  Indeed, if the load\naddress is not legitimate, e.g. -mcmodel=large, the insn is no longer\nrecognized.\n\nThis patch turns the constant into an input operand, introduces an\nexpander to generate the constant unconditionally, and arranges for\nthis input operand to be retained as an unused immediate in the\nalternatives that don't undergo splitting, and for it to be loaded\ninto the scratch register for those that do.\n\nIt is now the register allocator that arranges to load the const\nvector into a register, so it deals with whatever legitimizing steps\nneeded for the target configuration.\n\n\nfor  gcc/ChangeLog\n\n\t* config/i386/predicates.md (reg_or_const_vec_operand): New.\n\t* config/i386/sse.md (ssse3_pshufbv8qi3): Add an expander for\n\tthe now *-prefixed insn_and_split, turn the splitter const vec\n\tinto an input for the insn, making it an ignored immediate for\n\tnon-split cases, and loaded into the scratch register\n\totherwise.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.target/i386/pr94467-3.c: New.", "tree": {"sha": "8d823f907224e7e094e0b7a5523b15a703ae1b49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8d823f907224e7e094e0b7a5523b15a703ae1b49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4be312862dec5c8e49c76249dd5aed220c72039e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be312862dec5c8e49c76249dd5aed220c72039e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be312862dec5c8e49c76249dd5aed220c72039e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be312862dec5c8e49c76249dd5aed220c72039e/comments", "author": null, "committer": null, "parents": [{"sha": "b179026a5d9fcadadef6ca511933933672557495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b179026a5d9fcadadef6ca511933933672557495", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b179026a5d9fcadadef6ca511933933672557495"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "b1df8548af63942abe57dc4686670370db5f50e6", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=4be312862dec5c8e49c76249dd5aed220c72039e", "patch": "@@ -1153,6 +1153,12 @@\n   (ior (match_operand 0 \"nonimmediate_operand\")\n        (match_code \"const_vector\")))\n \n+;; Return true when OP is either register operand, or any\n+;; CONST_VECTOR.\n+(define_predicate \"reg_or_const_vector_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_code \"const_vector\")))\n+\n ;; Return true when OP is nonimmediate or standard SSE constant.\n (define_predicate \"nonimmediate_or_sse_const_operand\"\n   (ior (match_operand 0 \"nonimmediate_operand\")"}, {"sha": "9d3728d1cb08be295ab49282b42b7500adb2ce12", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=4be312862dec5c8e49c76249dd5aed220c72039e", "patch": "@@ -17159,10 +17159,25 @@\n    (set_attr \"btver2_decode\" \"vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn_and_split \"ssse3_pshufbv8qi3\"\n+(define_expand \"ssse3_pshufbv8qi3\"\n+  [(parallel\n+    [(set (match_operand:V8QI 0 \"register_operand\")\n+\t  (unspec:V8QI [(match_operand:V8QI 1 \"register_operand\")\n+\t\t        (match_operand:V8QI 2 \"register_mmxmem_operand\")\n+\t\t\t(match_dup 3)] UNSPEC_PSHUFB))\n+     (clobber (match_scratch:V4SI 4))])]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n+{\n+  operands[3] = ix86_build_const_vector (V4SImode, true,\n+                                         gen_int_mode (0xf7f7f7f7, SImode));\n+})\n+\n+(define_insn_and_split \"*ssse3_pshufbv8qi3\"\n   [(set (match_operand:V8QI 0 \"register_operand\" \"=y,x,Yv\")\n \t(unspec:V8QI [(match_operand:V8QI 1 \"register_operand\" \"0,0,Yv\")\n-\t\t      (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")]\n+\t\t      (match_operand:V8QI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n+\t\t      (match_operand:V4SI 4 \"reg_or_const_vector_operand\"\n+\t\t\t\t\t  \"i,3,3\")]\n \t\t     UNSPEC_PSHUFB))\n    (clobber (match_scratch:V4SI 3 \"=X,&x,&Yv\"))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n@@ -17172,8 +17187,7 @@\n    #\"\n   \"TARGET_SSSE3 && reload_completed\n    && SSE_REGNO_P (REGNO (operands[0]))\"\n-  [(set (match_dup 3) (match_dup 5))\n-   (set (match_dup 3)\n+  [(set (match_dup 3)\n \t(and:V4SI (match_dup 3) (match_dup 2)))\n    (set (match_dup 0)\n \t(unspec:V16QI [(match_dup 1) (match_dup 4)] UNSPEC_PSHUFB))]\n@@ -17188,9 +17202,6 @@\n \t\t\t\tGET_MODE (operands[2]));\n   operands[4] = lowpart_subreg (V16QImode, operands[3],\n \t\t\t\tGET_MODE (operands[3]));\n-  rtx vec_const = ix86_build_const_vector (V4SImode, true,\n-\t\t\t\t\t   gen_int_mode (0xf7f7f7f7, SImode));\n-  operands[5] = force_const_mem (V4SImode, vec_const);\n }\n   [(set_attr \"mmx_isa\" \"native,sse_noavx,avx\")\n    (set_attr \"prefix_extra\" \"1\")"}, {"sha": "b415847b2563432726400481e9c4bd290673beab", "filename": "gcc/testsuite/gcc.target/i386/pr94467-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4be312862dec5c8e49c76249dd5aed220c72039e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94467-3.c?ref=4be312862dec5c8e49c76249dd5aed220c72039e", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile { target { lp64 } } } */\n+/* { dg-options \"-O -mavx -mcmodel=large\" } */\n+\n+#include \"pr94467-1.c\""}]}