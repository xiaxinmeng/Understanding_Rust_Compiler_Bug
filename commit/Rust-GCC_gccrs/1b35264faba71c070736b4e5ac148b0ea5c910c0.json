{"sha": "1b35264faba71c070736b4e5ac148b0ea5c910c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWIzNTI2NGZhYmE3MWMwNzA3MzZiNGU1YWMxNDhiMGVhNWM5MTBjMA==", "commit": {"author": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-21T22:24:55Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-05-21T22:24:55Z"}, "message": "re PR fortran/32002 (insufficient conformance check when assigning the result of an elemental function to an array)\n\ngcc/fortran:\n2005-05-21  Jerry DeLisle  <jvdelisle@verizon.net>\n            Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/32002\n        * resolve.c (resolve_actual_arglist): Resolve actual argument after\n        being identified as variable.\n\n\ngcc/testsuite:\n2005-05-21  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/32002\n        * gfortran.dg/compliant_elemental_intrinsics_2.f90: New test.\n\nFrom-SVN: r124924", "tree": {"sha": "9e3752725ea5fa801e046db1fd56d2a18a949134", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e3752725ea5fa801e046db1fd56d2a18a949134"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b35264faba71c070736b4e5ac148b0ea5c910c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b35264faba71c070736b4e5ac148b0ea5c910c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b35264faba71c070736b4e5ac148b0ea5c910c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b35264faba71c070736b4e5ac148b0ea5c910c0/comments", "author": null, "committer": null, "parents": [{"sha": "244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244974bd1bb1e486361d7b4ec6fe686239e2e1f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244974bd1bb1e486361d7b4ec6fe686239e2e1f1"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "10bcc08f9b4387da865cf6df63ac2387740e8586", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1b35264faba71c070736b4e5ac148b0ea5c910c0", "patch": "@@ -1,3 +1,10 @@\n+2005-05-21  Jerry DeLisle  <jvdelisle@verizon.net>\n+\t    Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32002\n+\t* resolve.c (resolve_actual_arglist): Resolve actual argument after\n+\tbeing identified as variable.\n+\n 2007-05-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32027"}, {"sha": "746d41b331586072e302f77a28cad5c66fda30e0", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=1b35264faba71c070736b4e5ac148b0ea5c910c0", "patch": "@@ -1013,6 +1013,13 @@ resolve_actual_arglist (gfc_actual_arglist *arg, procedure_type ptype)\n \t  e->ref->u.ar.as = sym->as;\n \t}\n \n+      /* Expressions are assigned a default ts.type of BT_PROCEDURE in\n+\t primary.c (match_actual_arg). If above code determines that it\n+\t is a  variable instead, it needs to be resolved as it was not\n+\t done at the beginning of this function.  */\n+      if (gfc_resolve_expr (e) != SUCCESS)\n+\treturn FAILURE;\n+\n     argument_list:\n       /* Check argument list functions %VAL, %LOC and %REF.  There is\n \t nothing to do for %REF.  */"}, {"sha": "c08db442f70a8726c6428ec87b15dce2833933d5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1b35264faba71c070736b4e5ac148b0ea5c910c0", "patch": "@@ -1,3 +1,8 @@\n+2005-05-21  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/32002\n+\t* gfortran.dg/compliant_elemental_intrinsics_2.f90: New test.\n+\n 2007-05-21  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/32027"}, {"sha": "ab5607f1dbc644c063beffdf9d8174a1610974a4", "filename": "gcc/testsuite/gfortran.dg/compliant_elemental_intrinsics_2.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b35264faba71c070736b4e5ac148b0ea5c910c0/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcompliant_elemental_intrinsics_2.f90?ref=1b35264faba71c070736b4e5ac148b0ea5c910c0", "patch": "@@ -0,0 +1,44 @@\n+! { dg-compile }\n+!\n+! Testcases from PR32002.\n+!\n+PROGRAM test_pr32002\n+\n+  CALL test_1()                       ! scalar/vector\n+  CALL test_2()                       ! vector/vector\n+  CALL test_3()                       ! matrix/vector\n+  CALL test_4()                       ! matrix/matrix\n+\n+CONTAINS\n+  ELEMENTAL FUNCTION f(x)\n+    INTEGER, INTENT(in) :: x\n+    INTEGER :: f\n+    f = x\n+  END FUNCTION\n+\n+  SUBROUTINE test_1()\n+    INTEGER :: a = 0, b(2) = 0\n+    a = f(b)                          ! { dg-error \"Incompatible ranks\" }\n+    b = f(a)                          ! ok, set all array elements to f(a)\n+  END SUBROUTINE\n+\n+  SUBROUTINE test_2()\n+    INTEGER :: a(2) = 0, b(3) = 0\n+    a = f(b)                          ! { dg-error \"different shape\" }\n+    a = f(b(1:2))                     ! ok, slice, stride 1\n+    a = f(b(1:3:2))                   ! ok, slice, stride 2\n+  END SUBROUTINE\n+\n+  SUBROUTINE test_3()\n+    INTEGER :: a(4) = 0, b(2,2) = 0\n+    a = f(b)                          ! { dg-error \"Incompatible ranks\" }\n+    a = f(RESHAPE(b, (/ 4 /)))        ! ok, same shape\n+  END SUBROUTINE\n+\n+  SUBROUTINE test_4()\n+    INTEGER :: a(2,2) = 0, b(3,3) = 0\n+    a = f(b)                          ! { dg-error \"different shape\" }\n+    a = f(b(1:3, 1:2))                ! { dg-error \"different shape\" }\n+    a = f(b(1:3:2, 1:3:2))            ! ok, same shape\n+  END SUBROUTINE\n+END PROGRAM"}]}