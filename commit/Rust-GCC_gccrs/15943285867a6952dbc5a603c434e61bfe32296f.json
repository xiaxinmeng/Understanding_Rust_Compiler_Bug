{"sha": "15943285867a6952dbc5a603c434e61bfe32296f", "node_id": "C_kwDOANBUbNoAKDE1OTQzMjg1ODY3YTY5NTJkYmM1YTYwM2M0MzRlNjFiZmUzMjI5NmY", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T10:39:41Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-16T14:54:41Z"}, "message": "libstdc++: Remove __alloc_neq helper\n\nThis class template and partial specialization were added 15 years ago\nto optimize allocator equality comparisons in std::list. I think it's\nsafe to assume that GCC is now capable of optimizing an inline\noperator!= that just returns false at least as well as an inline member\nfunction that just returns false.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/allocator.h (__alloc_neq): Remove.\n\t* include/bits/stl_list.h (list::_M_check_equal_allocators):\n\tCompare allocators directly, without __alloc_neq.", "tree": {"sha": "1cc434375b33f7be03de34f78c421a03506e10e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cc434375b33f7be03de34f78c421a03506e10e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15943285867a6952dbc5a603c434e61bfe32296f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15943285867a6952dbc5a603c434e61bfe32296f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15943285867a6952dbc5a603c434e61bfe32296f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15943285867a6952dbc5a603c434e61bfe32296f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64f9580423eef22b81a7e90be851c81dc6e04778", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64f9580423eef22b81a7e90be851c81dc6e04778", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64f9580423eef22b81a7e90be851c81dc6e04778"}], "stats": {"total": 22, "additions": 2, "deletions": 20}, "files": [{"sha": "c39166e24feb6f0ce31a3607ebfba70f8191e383", "filename": "libstdc++-v3/include/bits/allocator.h", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15943285867a6952dbc5a603c434e61bfe32296f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15943285867a6952dbc5a603c434e61bfe32296f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fallocator.h?ref=15943285867a6952dbc5a603c434e61bfe32296f", "patch": "@@ -298,23 +298,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n     };\n \n-  // Optimize for stateless allocators.\n-  template<typename _Alloc, bool = __is_empty(_Alloc)>\n-    struct __alloc_neq\n-    {\n-      static bool\n-      _S_do_it(const _Alloc&, const _Alloc&)\n-      { return false; }\n-    };\n-\n-  template<typename _Alloc>\n-    struct __alloc_neq<_Alloc, false>\n-    {\n-      static bool\n-      _S_do_it(const _Alloc& __one, const _Alloc& __two)\n-      { return __one != __two; }\n-    };\n-\n #if __cplusplus >= 201103L\n   template<typename _Tp, bool\n     = __or_<is_copy_constructible<typename _Tp::value_type>,"}, {"sha": "a73ca60df5a001f339d33473d63a228b135b4071", "filename": "libstdc++-v3/include/bits/stl_list.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15943285867a6952dbc5a603c434e61bfe32296f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15943285867a6952dbc5a603c434e61bfe32296f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_list.h?ref=15943285867a6952dbc5a603c434e61bfe32296f", "patch": "@@ -2026,10 +2026,9 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       // To implement the splice (and merge) bits of N1599.\n       void\n-      _M_check_equal_allocators(list& __x) _GLIBCXX_NOEXCEPT\n+      _M_check_equal_allocators(const list& __x) _GLIBCXX_NOEXCEPT\n       {\n-\tif (std::__alloc_neq<typename _Base::_Node_alloc_type>::\n-\t    _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))\n+\tif (_M_get_Node_allocator() != __x._M_get_Node_allocator())\n \t  __builtin_abort();\n       }\n "}]}