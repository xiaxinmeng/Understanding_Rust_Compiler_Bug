{"sha": "0f490a2bdebeae8a982559b8ee190ffee7ac03df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY0OTBhMmJkZWJlYWU4YTk4MjU1OWI4ZWUxOTBmZmVlN2FjMDNkZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-04-14T20:55:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-04-14T20:55:48Z"}, "message": "class.c (layout_virtual_bases): Do all dsize computation on trees.\n\n\t* class.c (layout_virtual_bases): Do all dsize computation on trees.\n\n\t* g++.dg/other/big-struct.C: New test.\n\nFrom-SVN: r52304", "tree": {"sha": "0c82c7225233632861b75672931c0dd3c1256a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c82c7225233632861b75672931c0dd3c1256a70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f490a2bdebeae8a982559b8ee190ffee7ac03df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f490a2bdebeae8a982559b8ee190ffee7ac03df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f490a2bdebeae8a982559b8ee190ffee7ac03df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f490a2bdebeae8a982559b8ee190ffee7ac03df/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ebef4e8ca795b46b1f51a82d4b93c35f1eacd54c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebef4e8ca795b46b1f51a82d4b93c35f1eacd54c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebef4e8ca795b46b1f51a82d4b93c35f1eacd54c"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "2f37e2548b8118cf07d2789359bd6ca886776cd4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0f490a2bdebeae8a982559b8ee190ffee7ac03df", "patch": "@@ -1,3 +1,7 @@\n+2002-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* class.c (layout_virtual_bases): Do all dsize computation on trees.\n+\n 2002-04-14  Jason Merrill  <jason@redhat.com>\n \n \t* typeck.c (get_member_function_from_ptrfunc): Don't do"}, {"sha": "c8627fb36fd9eb4d233c63849f117396a2cad6f2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0f490a2bdebeae8a982559b8ee190ffee7ac03df", "patch": "@@ -4642,8 +4642,7 @@ layout_virtual_bases (t, offsets)\n      tree t;\n      splay_tree offsets;\n {\n-  tree vbases;\n-  unsigned HOST_WIDE_INT dsize;\n+  tree vbases, dsize;\n   unsigned HOST_WIDE_INT eoc;\n \n   if (CLASSTYPE_N_BASECLASSES (t) == 0)\n@@ -4656,7 +4655,7 @@ layout_virtual_bases (t, offsets)\n #endif\n \n   /* DSIZE is the size of the class without the virtual bases.  */\n-  dsize = tree_low_cst (TYPE_SIZE (t), 1);\n+  dsize = TYPE_SIZE (t);\n \n   /* Make every class have alignment of at least one.  */\n   TYPE_ALIGN (t) = MAX (TYPE_ALIGN (t), BITS_PER_UNIT);\n@@ -4678,7 +4677,7 @@ layout_virtual_bases (t, offsets)\n \t{\n \t  /* This virtual base is not a primary base of any class in the\n \t     hierarchy, so we have to add space for it.  */\n-\t  tree basetype;\n+\t  tree basetype, usize;\n \t  unsigned int desired_align;\n \n \t  basetype = BINFO_TYPE (vbase);\n@@ -4688,19 +4687,21 @@ layout_virtual_bases (t, offsets)\n \n \t  /* Add padding so that we can put the virtual base class at an\n \t     appropriately aligned offset.  */\n-\t  dsize = CEIL (dsize, desired_align) * desired_align;\n+\t  dsize = round_up (dsize, desired_align);\n+\n+\t  usize = size_binop (CEIL_DIV_EXPR, dsize, bitsize_unit_node);\n \n \t  /* We try to squish empty virtual bases in just like\n \t     ordinary empty bases.  */\n \t  if (is_empty_class (basetype))\n \t    layout_empty_base (vbase,\n-\t\t\t       size_int (CEIL (dsize, BITS_PER_UNIT)),\n+\t\t\t       convert (sizetype, usize),\n \t\t\t       offsets, t);\n \t  else\n \t    {\n \t      tree offset;\n \n-\t      offset = ssize_int (CEIL (dsize, BITS_PER_UNIT));\n+\t      offset = convert (ssizetype, usize);\n \t      offset = size_diffop (offset, \n \t\t\t\t    convert (ssizetype, \n \t\t\t\t\t     BINFO_OFFSET (vbase)));\n@@ -4710,8 +4711,9 @@ layout_virtual_bases (t, offsets)\n \t      /* Every virtual baseclass takes a least a UNIT, so that\n \t\t we can take it's address and get something different\n \t\t for each base.  */\n-\t      dsize += MAX (BITS_PER_UNIT,\n-\t\t\t    tree_low_cst (CLASSTYPE_SIZE (basetype), 0));\n+\t      dsize = size_binop (PLUS_EXPR, dsize,\n+\t\t\t\t  size_binop (MAX_EXPR, bitsize_unit_node,\n+\t\t\t\t\t      CLASSTYPE_SIZE (basetype)));\n \t    }\n \n \t  /* Keep track of the offsets assigned to this virtual base.  */\n@@ -4733,13 +4735,12 @@ layout_virtual_bases (t, offsets)\n      class, we didn't update DSIZE above; we were hoping to overlay\n      multiple such bases at the same location.  */\n   eoc = end_of_class (t, /*include_virtuals_p=*/1);\n-  if (eoc * BITS_PER_UNIT > dsize)\n-    dsize = eoc * BITS_PER_UNIT;\n+  dsize = size_binop (MAX_EXPR, dsize, bitsize_int (eoc * BITS_PER_UNIT));\n \n   /* Now, make sure that the total size of the type is a multiple of\n      its alignment.  */\n-  dsize = CEIL (dsize, TYPE_ALIGN (t)) * TYPE_ALIGN (t);\n-  TYPE_SIZE (t) = bitsize_int (dsize);\n+  dsize = round_up (dsize, TYPE_ALIGN (t));\n+  TYPE_SIZE (t) = dsize;\n   TYPE_SIZE_UNIT (t) = convert (sizetype,\n \t\t\t\tsize_binop (CEIL_DIV_EXPR, TYPE_SIZE (t),\n \t\t\t\t\t    bitsize_unit_node));"}, {"sha": "39ed219340251cc37ea186148390edd03ae85350", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0f490a2bdebeae8a982559b8ee190ffee7ac03df", "patch": "@@ -1,3 +1,7 @@\n+2002-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/other/big-struct.C: New test.\n+\n 2002-04-14  David Billinghurst <David.Billinghurst@riotinto.com>\n \n \t* g77.dg/f77-edit-i-in.f: Use internal buffer in place"}, {"sha": "b00683135f3cc4cbef7cd8059e3e6969ff3f52b8", "filename": "gcc/testsuite/g++.dg/other/big-struct.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbig-struct.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f490a2bdebeae8a982559b8ee190ffee7ac03df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbig-struct.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbig-struct.C?ref=0f490a2bdebeae8a982559b8ee190ffee7ac03df", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target i?86-*-* } }\n+\n+struct A\n+{\n+};\n+\n+struct B : public A\n+{\n+  char b[0x20000000];\n+} e;"}]}