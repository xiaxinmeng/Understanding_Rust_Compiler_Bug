{"sha": "86efdc8e6d1187677d45e727b8144a421385d28d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZlZmRjOGU2ZDExODc2NzdkNDVlNzI3YjgxNDRhNDIxMzg1ZDI4ZA==", "commit": {"author": {"name": "Philip Blundell", "email": "pb@nexus.co.uk", "date": "1999-05-08T09:40:05Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "1999-05-08T09:40:05Z"}, "message": "arm.h (NEED_PLT_GOT): New macro.\n\n* config/arm/arm.h (NEED_PLT_GOT): New macro.  Set to 0 if not\nalready defined.\n* config/arm/elf.h (NEED_PLT_GOT): Define to flag_pic.\n* config/arm/arm.md (call_symbol, call_value_symbol et al.): If\nNEED_PLT_GOT is true, add explicit \"(PLT)\" to generated branches.\n* config/arm/arm.c (output_func_epilogue,\noutput_return_instruction): Likewise for calls to abort.\n\nFrom-SVN: r26839", "tree": {"sha": "eb0aab3e5f15c99892361a195ddbacb05b71b41e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb0aab3e5f15c99892361a195ddbacb05b71b41e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86efdc8e6d1187677d45e727b8144a421385d28d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86efdc8e6d1187677d45e727b8144a421385d28d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86efdc8e6d1187677d45e727b8144a421385d28d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86efdc8e6d1187677d45e727b8144a421385d28d/comments", "author": null, "committer": null, "parents": [{"sha": "91ab104696a8ea53982115aabd749e3d936b3d12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ab104696a8ea53982115aabd749e3d936b3d12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ab104696a8ea53982115aabd749e3d936b3d12"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "fc52fc1b11e5c11c70c3534e0dba245bcd87cf56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86efdc8e6d1187677d45e727b8144a421385d28d", "patch": "@@ -1,3 +1,14 @@\n+Sat May  8 06:23:21 1999  Philip Blundell  <pb@nexus.co.uk>\n+\n+\tBased on patch by Scott Bambrough:\n+\t* config/arm/arm.h (NEED_PLT_GOT): New macro.  Set to 0 if not\n+\talready defined.\n+\t* config/arm/elf.h (NEED_PLT_GOT): Define to flag_pic.\n+\t* config/arm/arm.md (call_symbol, call_value_symbol et al.): If \n+\tNEED_PLT_GOT is true, add explicit \"(PLT)\" to generated branches.\n+\t* config/arm/arm.c (output_func_epilogue, \n+\toutput_return_instruction): Likewise for calls to abort.\n+\n Sat May  8 01:57:58 1999  Donn Terry (donn@interix.com)\n \n \t* calls.c (rtx_for_function_call): Extend function pointer being"}, {"sha": "e2fe037ad56fbde78913b43dbfbfa72f0898e65a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=86efdc8e6d1187677d45e727b8144a421385d28d", "patch": "@@ -5299,7 +5299,8 @@ output_return_instruction (operand, really_return, reverse)\n \n       /* Otherwise, trap an attempted return by aborting. */\n       ops[0] = operand;\n-      ops[1] = gen_rtx_SYMBOL_REF (Pmode, \"abort\");\n+      ops[1] = gen_rtx_SYMBOL_REF (Pmode, NEED_PLT_GOT ? \"abort(PLT)\" \n+\t\t\t\t   : \"abort\");\n       assemble_external_libcall (ops[1]);\n       output_asm_insn (reverse ? \"bl%D0\\t%a1\" : \"bl%d0\\t%a1\", ops);\n       return \"\";\n@@ -5553,7 +5554,8 @@ output_func_epilogue (f, frame_size)\n   /* A volatile function should never return.  Call abort.  */\n   if (TARGET_ABORT_NORETURN && volatile_func)\n     {\n-      rtx op = gen_rtx_SYMBOL_REF (Pmode, \"abort\");\n+      rtx op;\n+      op = gen_rtx_SYMBOL_REF (Pmode, NEED_PLT_GOT ? \"abort(PLT)\" : \"abort\");\n       assemble_external_libcall (op);\n       output_asm_insn (\"bl\\t%a0\", &op);\n       goto epilogue_done;"}, {"sha": "ad2b865501a2814b4047b4741cbded40e960345e", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=86efdc8e6d1187677d45e727b8144a421385d28d", "patch": "@@ -476,6 +476,11 @@ extern int arm_is_6_or_7;\n #define TARGET_MEM_FUNCTIONS 1\n \n #define OVERRIDE_OPTIONS  arm_override_options ()\n+\n+/* Nonzero if PIC code requires explicit qualifiers to generate\n+   PLT and GOT relocs rather than the assembler doing so implicitly.\n+   Subtargets can override this if required.  */\n+#define NEED_PLT_GOT\t0\n \f\n /* Target machine storage Layout.  */\n "}, {"sha": "5696e11c302106d35ac5491a0838141c3c7c9c64", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=86efdc8e6d1187677d45e727b8144a421385d28d", "patch": "@@ -4246,7 +4246,10 @@\n \t (match_operand:SI 1 \"general_operand\" \"g\"))\n    (clobber (reg:SI 14))]\n   \"GET_CODE (operands[0]) == SYMBOL_REF\"\n-  \"bl%?\\\\t%a0\"\n+  \"*\n+  {\n+    return NEED_PLT_GOT ? \\\"bl%?\\\\t%a0(PLT)\\\" : \\\"bl%?\\\\t%a0\\\";\n+  }\"\n [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_value_symbol\"\n@@ -4255,7 +4258,10 @@\n \t(match_operand:SI 2 \"general_operand\" \"g\")))\n    (clobber (reg:SI 14))]\n   \"GET_CODE(operands[1]) == SYMBOL_REF\"\n-  \"bl%?\\\\t%a1\"\n+  \"*\n+  {\n+    return NEED_PLT_GOT ? \\\"bl%?\\\\t%a1(PLT)\\\" : \\\"bl%?\\\\t%a1\\\";\n+  }\"\n [(set_attr \"type\" \"call\")])\n \n ;; Often the return insn will be the same as loading from memory, so set attr\n@@ -5993,7 +5999,7 @@\n   }\n \n   output_return_instruction (NULL, FALSE, FALSE);\n-  return \\\"b%?\\\\t%a0\\\";\n+  return NEED_PLT_GOT ? \\\"b%?\\\\t%a0(PLT)\\\" : \\\"b%?\\\\t%a0\\\";\n }\"\n [(set_attr \"type\" \"call\")\n  (set_attr \"length\" \"8\")])\n@@ -6021,7 +6027,7 @@\n   }\n \n   output_return_instruction (NULL, FALSE, FALSE);\n-  return \\\"b%?\\\\t%a1\\\";\n+  return NEED_PLT_GOT ? \\\"b%?\\\\t%a1(PLT)\\\" : \\\"b%?\\\\t%a1\\\";\n }\"\n [(set_attr \"type\" \"call\")\n  (set_attr \"length\" \"8\")])"}, {"sha": "d2ba8bb1da8db84bcc80499ce484c7262d6404a7", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86efdc8e6d1187677d45e727b8144a421385d28d/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=86efdc8e6d1187677d45e727b8144a421385d28d", "patch": "@@ -335,4 +335,7 @@ do {\t\t\t\t\t\t\\\n   do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n        fputc ('\\n', FILE); } while (0)\n \n+/* For PIC code we need to explicitly specify (PLT) and (GOT) relocs.  */\n+#define NEED_PLT_GOT\tflag_pic\n+\n #include \"arm/aout.h\""}]}