{"sha": "3232e9d8b8877976b55a4c6715a025c7b240eb92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzIzMmU5ZDhiODg3Nzk3NmI1NWE0YzY3MTVhMDI1YzdiMjQwZWI5Mg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2009-07-01T15:47:33Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2009-07-01T15:47:33Z"}, "message": "pa.c (forward_branch_p): Return bool type.\n\n\t* pa.c (forward_branch_p): Return bool type.  Use instruction addresses\n\twhen available.  Assert that INSN has a jump label.\n\t(pa_adjust_insn_length): Don't call forward_branch_p if INSN doesn't\n\thave a jump label.\n\nFrom-SVN: r149141", "tree": {"sha": "80565532d2e5a3795712bb2ab293b33e271ad456", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80565532d2e5a3795712bb2ab293b33e271ad456"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3232e9d8b8877976b55a4c6715a025c7b240eb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3232e9d8b8877976b55a4c6715a025c7b240eb92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3232e9d8b8877976b55a4c6715a025c7b240eb92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3232e9d8b8877976b55a4c6715a025c7b240eb92/comments", "author": null, "committer": null, "parents": [{"sha": "14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c41b9bb9c2918a0727d6dd43b96c2df0b3bcf8"}], "stats": {"total": 30, "additions": 22, "deletions": 8}, "files": [{"sha": "9b42f4f1df595e36c153cb7cfb2a50b873aeb55f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3232e9d8b8877976b55a4c6715a025c7b240eb92/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3232e9d8b8877976b55a4c6715a025c7b240eb92/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3232e9d8b8877976b55a4c6715a025c7b240eb92", "patch": "@@ -1,3 +1,10 @@\n+2009-07-01  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\t* pa.c (forward_branch_p): Return bool type.  Use instruction addresses\n+\twhen available.  Assert that INSN has a jump label.\n+\t(pa_adjust_insn_length): Don't call forward_branch_p if INSN doesn't\n+\thave a jump label.\n+\n 2009-07-01  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/19831"}, {"sha": "ed64d5de2fed2232a6a514c9b9532eecf29f317d", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3232e9d8b8877976b55a4c6715a025c7b240eb92/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3232e9d8b8877976b55a4c6715a025c7b240eb92/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=3232e9d8b8877976b55a4c6715a025c7b240eb92", "patch": "@@ -93,7 +93,7 @@ static inline rtx force_mode (enum machine_mode, rtx);\n static void pa_reorg (void);\n static void pa_combine_instructions (void);\n static int pa_can_combine_p (rtx, rtx, rtx, int, rtx, rtx, rtx);\n-static int forward_branch_p (rtx);\n+static bool forward_branch_p (rtx);\n static void compute_zdepwi_operands (unsigned HOST_WIDE_INT, unsigned *);\n static int compute_movmem_length (rtx);\n static int compute_clrmem_length (rtx);\n@@ -4751,6 +4751,7 @@ pa_adjust_insn_length (rtx insn, int length)\n       /* Adjust a short backwards conditional with an unfilled delay slot.  */\n       if (GET_CODE (pat) == SET\n \t  && length == 4\n+\t  && JUMP_LABEL (insn) != NULL_RTX\n \t  && ! forward_branch_p (insn))\n \treturn 4;\n       else if (GET_CODE (pat) == PARALLEL\n@@ -8578,22 +8579,28 @@ non_hard_reg_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n   return ! (GET_CODE (op) == REG && REGNO (op) < FIRST_PSEUDO_REGISTER);\n }\n \n-/* Return 1 if INSN branches forward.  Should be using insn_addresses\n-   to avoid walking through all the insns...  */\n-static int\n+/* Return TRUE if INSN branches forward.  */\n+\n+static bool\n forward_branch_p (rtx insn)\n {\n-  rtx label = JUMP_LABEL (insn);\n+  rtx lab = JUMP_LABEL (insn);\n+\n+  /* The INSN must have a jump label.  */\n+  gcc_assert (lab != NULL_RTX);\n+\n+  if (INSN_ADDRESSES_SET_P ())\n+    return INSN_ADDRESSES (INSN_UID (lab)) > INSN_ADDRESSES (INSN_UID (insn));  \n \n   while (insn)\n     {\n-      if (insn == label)\n-\tbreak;\n+      if (insn == lab)\n+\treturn true;\n       else\n \tinsn = NEXT_INSN (insn);\n     }\n \n-  return (insn == label);\n+  return false;\n }\n \n /* Return 1 if OP is an equality comparison, else return 0.  */"}]}