{"sha": "151d1347c99acfcf0f5bcd8caac36dcc7353816d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTUxZDEzNDdjOTlhY2ZjZjBmNWJjZDhjYWFjMzZkY2M3MzUzODE2ZA==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-15T04:10:13Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-12-16T13:42:08Z"}, "message": "Require .init_array/.fini_array support for SHF_GNU_RETAIN\n\nSince SHF_GNU_RETAIN support doesn't work for crtstuff.c which switches\nthe output section directly with asm statement:\n\n---\nstatic void __attribute__((used))\n__do_global_dtors_aux (void)\n{\n  static _Bool completed;\n\n  if (__builtin_expect (completed, 0))\n    return;\n  completed = 1;\n}\n\nstatic void __attribute__((__used__))\ncall___do_global_dtors_aux (void)\n{\n  asm (\"\\t.section\\t.fini\");\n  __do_global_dtors_aux ();\n  asm (\"\\t.section\\t.text\");\n}\n---\n\nuse SHF_GNU_RETAIN only if .init_array/.fini_array section is supported.\n\ngcc/\n\n\tPR target/98146\n\t* defaults.h (SUPPORTS_SHF_GNU_RETAIN): New.\n\t* varasm.c (get_section): Replace HAVE_GAS_SHF_GNU_RETAIN with\n\tSUPPORTS_SHF_GNU_RETAIN.\n\t(resolve_unique_section): Likewise.\n\t(get_variable_section): Likewise.\n\t(switch_to_section): Likewise.\n\ngcc/testsuite/\n\n\tPR target/98146\n\t* lib/target-supports.exp\n\t(check_effective_target_R_flag_in_section): Also check\n\tHAVE_INITFINI_ARRAY_SUPPORT != 0.", "tree": {"sha": "34f662e0f712743b0d1c70f1378193d3b0930573", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34f662e0f712743b0d1c70f1378193d3b0930573"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/151d1347c99acfcf0f5bcd8caac36dcc7353816d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151d1347c99acfcf0f5bcd8caac36dcc7353816d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/151d1347c99acfcf0f5bcd8caac36dcc7353816d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/151d1347c99acfcf0f5bcd8caac36dcc7353816d/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a976020603589e897fcfa3276590ef50b489d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a976020603589e897fcfa3276590ef50b489d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a976020603589e897fcfa3276590ef50b489d34"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "80a84dde2d6665dabfe5e2b62322a3b3ea92ae32", "filename": "gcc/defaults.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=151d1347c99acfcf0f5bcd8caac36dcc7353816d", "patch": "@@ -286,6 +286,17 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #endif\n #endif\n \n+/* This determines whether or not we support marking sections with\n+   SHF_GNU_RETAIN flag.  Also require .init_array/.fini_array section\n+   for constructors and destructors.  */\n+#ifndef SUPPORTS_SHF_GNU_RETAIN\n+#if HAVE_GAS_SHF_GNU_RETAIN && HAVE_INITFINI_ARRAY_SUPPORT\n+#define SUPPORTS_SHF_GNU_RETAIN 1\n+#else\n+#define SUPPORTS_SHF_GNU_RETAIN 0\n+#endif\n+#endif\n+\n /* This determines whether or not we support link-once semantics.  */\n #ifndef SUPPORTS_ONE_ONLY\n #ifdef MAKE_DECL_ONE_ONLY"}, {"sha": "11343d0192fcb7d38c3b994c0a6062c2ab79d075", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=151d1347c99acfcf0f5bcd8caac36dcc7353816d", "patch": "@@ -10840,7 +10840,7 @@ proc check_effective_target_R_flag_in_section { } {\n \n \tset f [open $src \"w\"]\n \tputs $f \"#include \\\"../../auto-host.h\\\"\"\n-\tputs $f \"#if HAVE_GAS_SHF_GNU_RETAIN == 0\"\n+\tputs $f \"#if HAVE_GAS_SHF_GNU_RETAIN == 0 || HAVE_INITFINI_ARRAY_SUPPORT == 0\"\n \tputs $f \"# error Assembler does not support 'R' flag in .section directive.\"\n \tputs $f \"#endif\"\n \tclose $f"}, {"sha": "267a052331d8fbd76711ef2e4f492682396b97a1", "filename": "gcc/varasm.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/151d1347c99acfcf0f5bcd8caac36dcc7353816d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=151d1347c99acfcf0f5bcd8caac36dcc7353816d", "patch": "@@ -297,7 +297,7 @@ get_section (const char *name, unsigned int flags, tree decl,\n   slot = section_htab->find_slot_with_hash (name, htab_hash_string (name),\n \t\t\t\t\t    INSERT);\n   flags |= SECTION_NAMED;\n-  if (HAVE_GAS_SHF_GNU_RETAIN\n+  if (SUPPORTS_SHF_GNU_RETAIN\n       && decl != nullptr\n       && DECL_P (decl)\n       && DECL_PRESERVE_P (decl))\n@@ -487,7 +487,7 @@ resolve_unique_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n   if (DECL_SECTION_NAME (decl) == NULL\n       && targetm_common.have_named_sections\n       && (flag_function_or_data_sections\n-\t  || (HAVE_GAS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl))\n+\t  || (SUPPORTS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl))\n \t  || DECL_COMDAT_GROUP (decl)))\n     {\n       targetm.asm_out.unique_section (decl, reloc);\n@@ -1227,7 +1227,7 @@ get_variable_section (tree decl, bool prefer_noswitch_p)\n     vnode->get_constructor ();\n \n   if (DECL_COMMON (decl)\n-      && !(HAVE_GAS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl)))\n+      && !(SUPPORTS_SHF_GNU_RETAIN && DECL_PRESERVE_P (decl)))\n     {\n       /* If the decl has been given an explicit section name, or it resides\n \t in a non-generic address space, then it isn't common, and shouldn't\n@@ -7756,7 +7756,7 @@ switch_to_section (section *new_section, tree decl)\n {\n   if (in_section == new_section)\n     {\n-      if (HAVE_GAS_SHF_GNU_RETAIN\n+      if (SUPPORTS_SHF_GNU_RETAIN\n \t  && (new_section->common.flags & SECTION_NAMED)\n \t  && decl != nullptr\n \t  && DECL_P (decl)"}]}