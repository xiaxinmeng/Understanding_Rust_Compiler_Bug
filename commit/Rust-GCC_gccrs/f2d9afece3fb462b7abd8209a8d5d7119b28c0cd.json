{"sha": "f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjJkOWFmZWNlM2ZiNDYyYjdhYmQ4MjA5YThkNWQ3MTE5YjI4YzBjZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2002-02-01T19:31:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2002-02-01T19:31:23Z"}, "message": "typeck.c (build_component_ref): Always complain about offsetof constructs on non-PODs.\n\n        * typeck.c (build_component_ref): Always complain about offsetof\n        constructs on non-PODs.  Only make it an error for members of\n        virtual bases.\n\nFrom-SVN: r49406", "tree": {"sha": "80228c7e0490ef91806b6ba75498c7783a7abd06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80228c7e0490ef91806b6ba75498c7783a7abd06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1338ea6c7f4f429b5920196173b2e35ed3f54263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1338ea6c7f4f429b5920196173b2e35ed3f54263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1338ea6c7f4f429b5920196173b2e35ed3f54263"}], "stats": {"total": 75, "additions": 63, "deletions": 12}, "files": [{"sha": "af18329d129c6ada4ccf7f1f60099351e02ed00a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "patch": "@@ -1,5 +1,9 @@\n 2002-02-01  Jason Merrill  <jason@redhat.com>\n \n+\t* typeck.c (build_component_ref): Always complain about offsetof\n+\tconstructs on non-PODs.  Only make it an error for members of\n+\tvirtual bases.\n+\n \t* error.c (dump_scope): Don't add TFF_DECL_SPECIFIERS.\n \t(dump_function_decl): Always dump parms.\n "}, {"sha": "ba37b10fff64fdf2b1b40f90c0cc0efb1d83c6a8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "patch": "@@ -1999,6 +1999,8 @@ build_component_ref (datum, component, basetype_path, protect)\n   register tree ref;\n   tree field_type;\n   int type_quals;\n+  tree old_datum;\n+  tree old_basetype;\n \n   if (processing_template_decl)\n     return build_min_nt (COMPONENT_REF, datum, component);\n@@ -2202,6 +2204,9 @@ build_component_ref (datum, component, basetype_path, protect)\n   if (TREE_DEPRECATED (field))\n     warn_deprecated_use (field);\n \n+  old_datum = datum;\n+  old_basetype = basetype;\n+\n   /* See if we have to do any conversions so that we pick up the field from the\n      right context.  */\n   if (DECL_FIELD_CONTEXT (field) != basetype)\n@@ -2215,12 +2220,17 @@ build_component_ref (datum, component, basetype_path, protect)\n       /* Handle base classes here...  */\n       if (base != basetype && TYPE_BASE_CONVS_MAY_REQUIRE_CODE_P (basetype))\n \t{\n- \t  tree binfo = lookup_base (TREE_TYPE (datum), base, ba_check, NULL);\n- \n+\t  base_kind kind;\n+ \t  tree binfo = lookup_base (TREE_TYPE (datum), base, ba_check, &kind);\n+\n+\t  /* Complain about use of offsetof which will break.  */\n \t  if (TREE_CODE (datum) == INDIRECT_REF\n-\t      && integer_zerop (TREE_OPERAND (datum, 0)))\n+\t      && integer_zerop (TREE_OPERAND (datum, 0))\n+\t      && kind == bk_via_virtual)\n \t    {\n-\t      error (\"invalid reference to NULL ptr, use ptr-to-member instead\");\n+\t      error (\"\\\n+invalid offsetof from non-POD type `%#T'; use pointer to member instead\",\n+\t\t     basetype);\n \t      return error_mark_node;\n \t    }\n  \t  datum = build_base_path (PLUS_EXPR, datum, binfo, 1);\n@@ -2239,6 +2249,18 @@ build_component_ref (datum, component, basetype_path, protect)\n \t}\n     }\n \n+  /* Complain about other invalid uses of offsetof, even though they will\n+     give the right answer.  Note that we complain whether or not they\n+     actually used the offsetof macro, since there's no way to know at this\n+     point.  So we just give a warning, instead of a pedwarn.  */\n+  if (protect\n+      && CLASSTYPE_NON_POD_P (old_basetype)\n+      && TREE_CODE (old_datum) == INDIRECT_REF\n+      && integer_zerop (TREE_OPERAND (old_datum, 0)))\n+    warning (\"\\\n+invalid offsetof from non-POD type `%#T'; use pointer to member instead\",\n+\t     basetype);\n+\n   /* Compute the type of the field, as described in [expr.ref].  */\n   type_quals = TYPE_UNQUALIFIED;\n   field_type = TREE_TYPE (field);"}, {"sha": "8a2e732c9ff251954f8bd99c0dc6d002a557a6b4", "filename": "gcc/testsuite/g++.dg/abi/offsetof.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Foffsetof.C?ref=f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "patch": "@@ -0,0 +1,22 @@\n+// Test that we can refer to the address of a base member of a null pointer\n+// to get its offset.  The standard says that offsetof shall not be used on\n+// non-POD classes, but there seems to be no such restriction on the common\n+// implementation thereof.\n+\n+// Yes, this is bad, naughty, evil code.  But it seems to be well-formed.\n+// So we'll just warn.\n+\n+// { dg-do run }\n+\n+struct A { int i; };\n+\n+struct B: public A {\n+  virtual void f ();\n+};\n+\n+struct C: public B { };\n+\n+int main ()\n+{\n+  return ((unsigned long) &((C*)0)->i) != 4; // { dg-warning \"offsetof\" \"\" }\n+}"}, {"sha": "f8e22c2eb918dd86a4b2848d5918c9300d1ff44f", "filename": "gcc/testsuite/g++.old-deja/g++.other/friend1.C", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2d9afece3fb462b7abd8209a8d5d7119b28c0cd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Ffriend1.C?ref=f2d9afece3fb462b7abd8209a8d5d7119b28c0cd", "patch": "@@ -46,19 +46,22 @@ struct R {\n   X<&B::j> x;\n };\n \n+B b;\n+D d;\n+\n void f()\n {\n-    ((B*)0)->i = 3; // ERROR - protected\n-    ((D*)0)->i = 4;\n+    b.i = 3; // ERROR - protected\n+    d.i = 4;\n     B::j = 5;\n     D::j = 6;\n }\n \n template <typename T>\n void g()\n {\n-    ((B*)0)->i = 3; // ERROR - protected\n-    ((D*)0)->i = 4;\n+    b.i = 3; // ERROR - protected\n+    d.i = 4;\n     B::j = 5;\n     D::j = 6;\n }\n@@ -67,17 +70,17 @@ template void g<int>();\n \n void S::h()\n {\n-  ((B*)0)->i = 3; // ERROR - protected\n-  ((D*)0)->i = 4;\n+  b.i = 3; // ERROR - protected\n+  d.i = 4;\n   B::j = 5;\n   D::j = 6;\n }\n \n template <typename T>\n void R<T>::h() \n {\n-  ((B*)0)->i = 3; // ERROR - protected\n-  ((D*)0)->i = 4;\n+  b.i = 3; // ERROR - protected\n+  d.i = 4;\n   B::j = 5;\n   D::j = 6;\n }"}]}