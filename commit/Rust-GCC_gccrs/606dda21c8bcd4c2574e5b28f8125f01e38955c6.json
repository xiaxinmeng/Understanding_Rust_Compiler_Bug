{"sha": "606dda21c8bcd4c2574e5b28f8125f01e38955c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA2ZGRhMjFjOGJjZDRjMjU3NGU1YjI4ZjgxMjVmMDFlMzg5NTVjNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-03T17:01:10Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-03T17:01:10Z"}, "message": "Define std::gcd and std::lcm for C++17\n\n\t* doc/xml/manual/status_cxx2017.xml: Update gcd/lcm status.\n\t* doc/html/*: Regenerate.\n\t* include/experimental/numeric (__abs): Move to <numeric>.\n\t(gcd, lcm): Use __detail::gcd and __detail::lcm.\n\t* include/std/numeric (__detail::__abs_integral)\n\t(__detail::__gcd, __detail::__lcm): Define.\n\t(gcd, lcm): Define for C++17.\n\t* testsuite/26_numerics/gcd/1.cc: New test.\n\t* testsuite/26_numerics/lcm/1.cc: New test.\n\t* testsuite/experimental/numeric/gcd.cc: Swap contents with ...\n\t* testsuite/experimental/numeric/lcd.cc: ... this.\n\nFrom-SVN: r240723", "tree": {"sha": "fbbf846d1547d0889eb640b9c224bef9cb11882b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbbf846d1547d0889eb640b9c224bef9cb11882b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/606dda21c8bcd4c2574e5b28f8125f01e38955c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606dda21c8bcd4c2574e5b28f8125f01e38955c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606dda21c8bcd4c2574e5b28f8125f01e38955c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606dda21c8bcd4c2574e5b28f8125f01e38955c6/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec9d5ad13bf6a965007d727d0dcbc77155e8132a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec9d5ad13bf6a965007d727d0dcbc77155e8132a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec9d5ad13bf6a965007d727d0dcbc77155e8132a"}], "stats": {"total": 249, "additions": 202, "deletions": 47}, "files": [{"sha": "3e5828154b63fc01e4e42ab7cd0e58c87f48bcec", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -1,5 +1,17 @@\n 2016-10-03  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* doc/xml/manual/status_cxx2017.xml: Update gcd/lcm status.\n+\t* doc/html/*: Regenerate.\n+\t* include/experimental/numeric (__abs): Move to <numeric>.\n+\t(gcd, lcm): Use __detail::gcd and __detail::lcm.\n+\t* include/std/numeric (__detail::__abs_integral)\n+\t(__detail::__gcd, __detail::__lcm): Define.\n+\t(gcd, lcm): Define for C++17.\n+\t* testsuite/26_numerics/gcd/1.cc: New test.\n+\t* testsuite/26_numerics/lcm/1.cc: New test.\n+\t* testsuite/experimental/numeric/gcd.cc: Swap contents with ...\n+\t* testsuite/experimental/numeric/lcd.cc: ... this.\n+\n \tPR libstdc++/68323\n \tPR libstdc++/77794\n \t* config/abi/pre/gnu-versioned-namespace.ver: Add exports for"}, {"sha": "a0a68b1003396bcc67a9b9dc310dee51c5e1ae89", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -687,11 +687,11 @@\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0025r0.html\" target=\"_top\">\n \tP0025R0\n \t</a>\n-      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_clamp &gt;= 201603 </code></td></tr><tr bgcolor=\"#C8B0B0\"><td align=\"left\"> Adopt Selected Library Fundamentals V2 Components for C++17 </td><td align=\"left\">\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_clamp &gt;= 201603 </code></td></tr><tr><td align=\"left\"> Adopt Selected Library Fundamentals V2 Components for C++17 </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0295r0.pdf\" target=\"_top\">\n \tP0295R0\n \t</a>\n-      </td><td align=\"center\"> No </td><td align=\"left\"><code class=\"code\"> __cpp_lib_gcd &gt;= 201606 </code>,\n+      </td><td align=\"center\"> 7 </td><td align=\"left\"><code class=\"code\"> __cpp_lib_gcd &gt;= 201606 </code>,\n \t     <code class=\"code\"> __cpp_lib_lcm &gt;= 201606 </code>\n       </td></tr><tr><td align=\"left\"> Proposal to Introduce a 3-Argument Overload to <code class=\"code\">std::hypot</code> </td><td align=\"left\">\n \t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0030r1.pdf\" target=\"_top\">"}, {"sha": "9f47b3498345fd3f50240de7266dafcc68e0bc49", "filename": "libstdc++-v3/doc/xml/manual/status_cxx2017.xml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fstatus_cxx2017.xml?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -615,14 +615,13 @@ Feature-testing recommendations for C++</link>.\n     </row>\n \n     <row>\n-      <?dbhtml bgcolor=\"#C8B0B0\" ?>\n       <entry> Adopt Selected Library Fundamentals V2 Components for C++17 </entry>\n       <entry>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0295r0.pdf\">\n \tP0295R0\n \t</link>\n       </entry>\n-      <entry align=\"center\"> No </entry>\n+      <entry align=\"center\"> 7 </entry>\n       <entry><code> __cpp_lib_gcd >= 201606 </code>,\n \t     <code> __cpp_lib_lcm >= 201606 </code>\n       </entry>"}, {"sha": "6d1dc21ff4dd93a625ce3c900bc302faa3ae7096", "filename": "libstdc++-v3/include/experimental/numeric", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fnumeric?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -52,44 +52,24 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #define __cpp_lib_experimental_gcd_lcm 201411\n \n-  // std::abs is not constexpr and doesn't support unsigned integers.\n-  template<typename _Tp>\n-    constexpr\n-    enable_if_t<__and_<is_integral<_Tp>, is_signed<_Tp>>::value, _Tp>\n-    __abs(_Tp __val)\n-    { return __val < 0 ? -__val : __val; }\n-\n-  template<typename _Tp>\n-    constexpr\n-    enable_if_t<__and_<is_integral<_Tp>, is_unsigned<_Tp>>::value, _Tp>\n-    __abs(_Tp __val)\n-    { return __val; }\n-\n-  // Greatest common divisor\n+  /// Greatest common divisor\n   template<typename _Mn, typename _Nn>\n     constexpr common_type_t<_Mn, _Nn>\n     gcd(_Mn __m, _Nn __n)\n     {\n       static_assert(is_integral<_Mn>::value, \"arguments to gcd are integers\");\n       static_assert(is_integral<_Nn>::value, \"arguments to gcd are integers\");\n-\n-      return __m == 0 ? fundamentals_v2::__abs(__n)\n-\t: __n == 0 ? fundamentals_v2::__abs(__m)\n-\t: fundamentals_v2::gcd(__n, __m % __n);\n+      return std::__detail::__gcd(__m, __n);\n     }\n \n-  // Least common multiple\n+  /// Least common multiple\n   template<typename _Mn, typename _Nn>\n     constexpr common_type_t<_Mn, _Nn>\n     lcm(_Mn __m, _Nn __n)\n     {\n       static_assert(is_integral<_Mn>::value, \"arguments to lcm are integers\");\n       static_assert(is_integral<_Nn>::value, \"arguments to lcm are integers\");\n-\n-      return (__m != 0 && __n != 0)\n-\t? (fundamentals_v2::__abs(__m) / fundamentals_v2::gcd(__m, __n))\n-\t  * fundamentals_v2::__abs(__n)\n-\t: 0;\n+      return std::__detail::__lcm(__m, __n);\n     }\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7b1ab986879dca5fb90d3f1a087b615bf0b6ea18", "filename": "libstdc++-v3/include/std/numeric", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fnumeric?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -74,4 +74,83 @@\n  * math functions.\n  */\n \n+#if __cplusplus >= 201402L\n+#include <type_traits>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+namespace __detail\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // std::abs is not constexpr and doesn't support unsigned integers.\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_integral<_Tp>, is_signed<_Tp>>::value, _Tp>\n+    __abs_integral(_Tp __val)\n+    { return __val < 0 ? -__val : __val; }\n+\n+  template<typename _Tp>\n+    constexpr\n+    enable_if_t<__and_<is_integral<_Tp>, is_unsigned<_Tp>>::value, _Tp>\n+    __abs_integral(_Tp __val)\n+    { return __val; }\n+\n+  template<typename _Mn, typename _Nn>\n+    constexpr common_type_t<_Mn, _Nn>\n+    __gcd(_Mn __m, _Nn __n)\n+    {\n+      return __m == 0 ? __detail::__abs_integral(__n)\n+\t: __n == 0 ? __detail::__abs_integral(__m)\n+\t: __detail::__gcd(__n, __m % __n);\n+    }\n+\n+  /// Least common multiple\n+  template<typename _Mn, typename _Nn>\n+    constexpr common_type_t<_Mn, _Nn>\n+    __lcm(_Mn __m, _Nn __n)\n+    {\n+      return (__m != 0 && __n != 0)\n+\t? (__detail::__abs_integral(__m) / __detail::__gcd(__m, __n))\n+\t  * __detail::__abs_integral(__n)\n+\t: 0;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#if __cplusplus > 201402L\n+\n+#define __cpp_lib_gcd 201606\n+  /// Greatest common divisor\n+  template<typename _Mn, typename _Nn>\n+    constexpr common_type_t<_Mn, _Nn>\n+    gcd(_Mn __m, _Nn __n)\n+    {\n+      static_assert(is_integral<_Mn>::value, \"arguments to gcd are integers\");\n+      static_assert(is_integral<_Nn>::value, \"arguments to gcd are integers\");\n+      return __detail::__gcd(__m, __n);\n+    }\n+\n+#define __cpp_lib_lcm 201606\n+  /// Least common multiple\n+  template<typename _Mn, typename _Nn>\n+    constexpr common_type_t<_Mn, _Nn>\n+    lcm(_Mn __m, _Nn __n)\n+    {\n+      static_assert(is_integral<_Mn>::value, \"arguments to lcm are integers\");\n+      static_assert(is_integral<_Nn>::value, \"arguments to lcm are integers\");\n+      return __detail::__lcm(__m, __n);\n+    }\n+\n+#endif // C++17\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace std\n+\n+#endif // C++14\n+\n+\n #endif /* _GLIBCXX_NUMERIC */"}, {"sha": "8e162571fb3c6d7ad50262d1fb75234f664bf8a0", "filename": "libstdc++-v3/testsuite/26_numerics/gcd/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fgcd%2F1.cc?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <numeric>\n+\n+#ifndef __cpp_lib_gcd\n+# error \"Feature-test macro for gcd missing\"\n+#elif __cpp_lib_gcd != 201606\n+# error \"Feature-test macro for gcd has wrong value\"\n+#endif\n+\n+using std::gcd;\n+\n+static_assert( gcd(1071, 462) == 21, \"\" );\n+static_assert( gcd(2000, 20) == 20, \"\" );\n+static_assert( gcd(2011, 17) == 1, \"GCD of two primes is 1\" );\n+static_assert( gcd(200, 200) == 200, \"GCD of equal numbers is that number\" );\n+static_assert( gcd(0, 13) == 13, \"GCD of any number and 0 is that number\" );\n+static_assert( gcd(29, 0) == 29, \"GCD of any number and 0 is that number\" );\n+static_assert( gcd(0, 0) == 0, \"\" );\n+\n+static_assert(gcd(1u, 2) == 1, \"unsigned and signed\");\n+static_assert(gcd(3, 4u) == 1, \"signed and unsigned\");\n+static_assert(gcd(5u, 6u) == 1, \"unsigned and unsigned\");\n+\n+static_assert( std::is_same_v<decltype(gcd(1l, 1)), long> );\n+static_assert( std::is_same_v<decltype(gcd(1ul, 1ull)), unsigned long long> );"}, {"sha": "caa2032bd66af771ba462703c37081b7bd6d2976", "filename": "libstdc++-v3/testsuite/26_numerics/lcm/1.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Flcm%2F1.cc?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2015-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++1z\" }\n+// { dg-do compile { target c++1z } }\n+\n+#include <numeric>\n+\n+#ifndef __cpp_lib_lcm\n+# error \"Feature-test macro for lcm missing\"\n+#elif __cpp_lib_lcm != 201606\n+# error \"Feature-test macro for lcm has wrong value\"\n+#endif\n+\n+using std::lcm;\n+\n+static_assert(lcm(21, 6) == 42, \"\");\n+static_assert(lcm(41, 0) == 0, \"LCD with zero is zero\");\n+static_assert(lcm(0, 7) == 0, \"LCD with zero is zero\");\n+static_assert(lcm(0, 0) == 0, \"no division by zero\");\n+\n+static_assert(lcm(1u, 2) == 2, \"unsigned and signed\");\n+static_assert(lcm(3, 4u) == 12, \"signed and unsigned\");\n+static_assert(lcm(5u, 6u) == 30, \"unsigned and unsigned\");\n+\n+static_assert( std::is_same_v<decltype(lcm(1l, 1)), long> );\n+static_assert( std::is_same_v<decltype(lcm(1ul, 1ull)), unsigned long long> );"}, {"sha": "d90c15275413e1e87704dd492cfbff78dc153ea6", "filename": "libstdc++-v3/testsuite/experimental/numeric/gcd.cc", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Fgcd.cc?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -19,13 +19,16 @@\n \n #include <experimental/numeric>\n \n-using std::experimental::fundamentals_v2::lcm;\n+using std::experimental::fundamentals_v2::gcd;\n \n-static_assert(lcm(21, 6) == 42, \"\");\n-static_assert(lcm(41, 0) == 0, \"LCD with zero is zero\");\n-static_assert(lcm(0, 7) == 0, \"LCD with zero is zero\");\n-static_assert(lcm(0, 0) == 0, \"no division by zero\");\n+static_assert( gcd(1071, 462) == 21, \"\" );\n+static_assert( gcd(2000, 20) == 20, \"\" );\n+static_assert( gcd(2011, 17) == 1, \"GCD of two primes is 1\" );\n+static_assert( gcd(200, 200) == 200, \"GCD of equal numbers is that number\" );\n+static_assert( gcd(0, 13) == 13, \"GCD of any number and 0 is that number\" );\n+static_assert( gcd(29, 0) == 29, \"GCD of any number and 0 is that number\" );\n+static_assert( gcd(0, 0) == 0, \"\" );\n \n-static_assert(lcm(1u, 2) == 2, \"unsigned and signed\");\n-static_assert(lcm(3, 4u) == 12, \"signed and unsigned\");\n-static_assert(lcm(5u, 6u) == 30, \"unsigned and unsigned\");\n+static_assert(gcd(1u, 2) == 1, \"unsigned and signed\");\n+static_assert(gcd(3, 4u) == 1, \"signed and unsigned\");\n+static_assert(gcd(5u, 6u) == 1, \"unsigned and unsigned\");"}, {"sha": "b3345dc5e6d79380a1db9260167f54c155d777e2", "filename": "libstdc++-v3/testsuite/experimental/numeric/lcm.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/606dda21c8bcd4c2574e5b28f8125f01e38955c6/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fnumeric%2Flcm.cc?ref=606dda21c8bcd4c2574e5b28f8125f01e38955c6", "patch": "@@ -19,16 +19,13 @@\n \n #include <experimental/numeric>\n \n-using std::experimental::fundamentals_v2::gcd;\n+using std::experimental::fundamentals_v2::lcm;\n \n-static_assert( gcd(1071, 462) == 21, \"\" );\n-static_assert( gcd(2000, 20) == 20, \"\" );\n-static_assert( gcd(2011, 17) == 1, \"GCD of two primes is 1\" );\n-static_assert( gcd(200, 200) == 200, \"GCD of equal numbers is that number\" );\n-static_assert( gcd(0, 13) == 13, \"GCD of any number and 0 is that number\" );\n-static_assert( gcd(29, 0) == 29, \"GCD of any number and 0 is that number\" );\n-static_assert( gcd(0, 0) == 0, \"\" );\n+static_assert(lcm(21, 6) == 42, \"\");\n+static_assert(lcm(41, 0) == 0, \"LCD with zero is zero\");\n+static_assert(lcm(0, 7) == 0, \"LCD with zero is zero\");\n+static_assert(lcm(0, 0) == 0, \"no division by zero\");\n \n-static_assert(gcd(1u, 2) == 1, \"unsigned and signed\");\n-static_assert(gcd(3, 4u) == 1, \"signed and unsigned\");\n-static_assert(gcd(5u, 6u) == 1, \"unsigned and unsigned\");\n+static_assert(lcm(1u, 2) == 2, \"unsigned and signed\");\n+static_assert(lcm(3, 4u) == 12, \"signed and unsigned\");\n+static_assert(lcm(5u, 6u) == 30, \"unsigned and unsigned\");"}]}