{"sha": "85cf5a23772ee14b1b19320f19a4749f874854d7", "node_id": "C_kwDOANBUbNoAKDg1Y2Y1YTIzNzcyZWUxNGIxYjE5MzIwZjE5YTQ3NDlmODc0ODU0ZDc", "commit": {"author": {"name": "marxin", "email": "mliska@suse.cz", "date": "2022-07-25T10:35:26Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-28T10:37:03Z"}, "message": "jit,docs: use list-table instead of fixed table\n\nUse rather list-table that is easible to maintainer and one\ndoes not have to wrap lines. Moreover, it provides great\nattribute :widths: that correctly works (tested for HTML and PDF).\n\ngcc/jit/ChangeLog:\n\n\t* docs/cp/intro/tutorial04.rst: Use list-table.\n\t* docs/intro/tutorial04.rst: Likewise.\n\t* docs/intro/tutorial05.rst: Likewise.\n\t* docs/topics/compilation.rst: Likewise.\n\t* docs/topics/expressions.rst: Likewise.\n\t* docs/topics/types.rst: Likewise.", "tree": {"sha": "addf83f1cbba1dd748c34385dcb83bbdd96817ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/addf83f1cbba1dd748c34385dcb83bbdd96817ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85cf5a23772ee14b1b19320f19a4749f874854d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85cf5a23772ee14b1b19320f19a4749f874854d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85cf5a23772ee14b1b19320f19a4749f874854d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85cf5a23772ee14b1b19320f19a4749f874854d7/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c5f312b4477dd8622c3a26f378dad85e72a558e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5f312b4477dd8622c3a26f378dad85e72a558e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5f312b4477dd8622c3a26f378dad85e72a558e"}], "stats": {"total": 413, "additions": 270, "deletions": 143}, "files": [{"sha": "66dcce903c691447e3002ab4c8b7b5c633ba47c9", "filename": "gcc/jit/docs/cp/intro/tutorial04.rst", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial04.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -50,30 +50,55 @@ Naturally, a real interpreter would be much more complicated that this.\n \n The following operations are supported:\n \n-====================== ======================== =============== ==============\n-Operation              Meaning                  Old Stack       New Stack\n-====================== ======================== =============== ==============\n-DUP                    Duplicate top of stack.  ``[..., x]``    ``[..., x, x]``\n-ROT                    Swap top two elements    ``[..., x, y]`` ``[..., y, x]``\n-                       of stack.\n-BINARY_ADD             Add the top two elements ``[..., x, y]`` ``[..., (x+y)]``\n-                       on the stack.\n-BINARY_SUBTRACT        Likewise, but subtract.  ``[..., x, y]`` ``[..., (x-y)]``\n-BINARY_MULT            Likewise, but multiply.  ``[..., x, y]`` ``[..., (x*y)]``\n-BINARY_COMPARE_LT      Compare the top two      ``[..., x, y]`` ``[..., (x<y)]``\n-                       elements on the stack\n-                       and push a nonzero/zero\n-                       if (x<y).\n-RECURSE                Recurse, passing the top ``[..., x]``    ``[..., fn(x)]``\n-                       of the stack, and\n-                       popping the result.\n-RETURN                 Return the top of the    ``[x]``         ``[]``\n-                       stack.\n-PUSH_CONST `arg`       Push an int const.       ``[...]``       ``[..., arg]``\n-JUMP_ABS_IF_TRUE `arg` Pop; if top of stack was ``[..., x]``    ``[...]``\n-                       nonzero, jump to\n-                       ``arg``.\n-====================== ======================== =============== ==============\n+.. list-table::\n+   :header-rows: 1\n+   :widths: 35 50 25 25\n+\n+   * - Operation\n+     - Meaning\n+     - Old Stack\n+     - New Stack\n+\n+   * - DUP\n+     - Duplicate top of stack.\n+     - ``[..., x]``\n+     - ``[..., x, x]``\n+   * - ROT\n+     - Swap top two elements of stack.\n+     - ``[..., x, y]``\n+     - ``[..., y, x]``\n+   * - BINARY_ADD\n+     - Add the top two elements on the stack.\n+     - ``[..., x, y]``\n+     - ``[..., (x+y)]``\n+   * - BINARY_SUBTRACT\n+     - Likewise, but subtract.\n+     - ``[..., x, y]``\n+     - ``[..., (x-y)]``\n+   * - BINARY_MULT\n+     - Likewise, but multiply.\n+     - ``[..., x, y]``\n+     - ``[..., (x*y)]``\n+   * - BINARY_COMPARE_LT\n+     - Compare the top two elements on the stack and push a nonzero/zero if (x<y).\n+     - ``[..., x, y]``\n+     - ``[..., (x<y)]``\n+   * - RECURSE\n+     - Recurse, passing the top of the stack, and popping the result.\n+     - ``[..., x]``\n+     - ``[..., fn(x)]``\n+   * - RETURN\n+     - Return the top of the stack.\n+     - ``[x]``\n+     - ``[]``\n+   * - PUSH_CONST `arg`\n+     - Push an int const.\n+     - ``[...]``\n+     - ``[..., arg]``\n+   * - JUMP_ABS_IF_TRUE `arg`\n+     - Pop; if top of stack was nonzero, jump to ``arg``.\n+     - ``[..., x]``\n+     - ``[...]``\n \n Programs can be interpreted, disassembled, and compiled to machine code.\n "}, {"sha": "c2e3fb5c05463b7b917f9e04a17f5a7a206096ad", "filename": "gcc/jit/docs/intro/tutorial04.rst", "status": "modified", "additions": 49, "deletions": 24, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -48,30 +48,55 @@ Naturally, a real interpreter would be much more complicated that this.\n \n The following operations are supported:\n \n-====================== ======================== =============== ==============\n-Operation              Meaning                  Old Stack       New Stack\n-====================== ======================== =============== ==============\n-DUP                    Duplicate top of stack.  ``[..., x]``    ``[..., x, x]``\n-ROT                    Swap top two elements    ``[..., x, y]`` ``[..., y, x]``\n-                       of stack.\n-BINARY_ADD             Add the top two elements ``[..., x, y]`` ``[..., (x+y)]``\n-                       on the stack.\n-BINARY_SUBTRACT        Likewise, but subtract.  ``[..., x, y]`` ``[..., (x-y)]``\n-BINARY_MULT            Likewise, but multiply.  ``[..., x, y]`` ``[..., (x*y)]``\n-BINARY_COMPARE_LT      Compare the top two      ``[..., x, y]`` ``[..., (x<y)]``\n-                       elements on the stack\n-                       and push a nonzero/zero\n-                       if (x<y).\n-RECURSE                Recurse, passing the top ``[..., x]``    ``[..., fn(x)]``\n-                       of the stack, and\n-                       popping the result.\n-RETURN                 Return the top of the    ``[x]``         ``[]``\n-                       stack.\n-PUSH_CONST `arg`       Push an int const.       ``[...]``       ``[..., arg]``\n-JUMP_ABS_IF_TRUE `arg` Pop; if top of stack was ``[..., x]``    ``[...]``\n-                       nonzero, jump to\n-                       ``arg``.\n-====================== ======================== =============== ==============\n+.. list-table::\n+   :header-rows: 1\n+   :widths: 35 50 25 25\n+\n+   * - Operation\n+     - Meaning\n+     - Old Stack\n+     - New Stack\n+\n+   * - DUP\n+     - Duplicate top of stack.\n+     - ``[..., x]``\n+     - ``[..., x, x]``\n+   * - ROT\n+     - Swap top two elements of stack.\n+     - ``[..., x, y]``\n+     - ``[..., y, x]``\n+   * - BINARY_ADD\n+     - Add the top two elements on the stack.\n+     - ``[..., x, y]``\n+     - ``[..., (x+y)]``\n+   * - BINARY_SUBTRACT\n+     - Likewise, but subtract.\n+     - ``[..., x, y]``\n+     - ``[..., (x-y)]``\n+   * - BINARY_MULT\n+     - Likewise, but multiply.\n+     - ``[..., x, y]``\n+     - ``[..., (x*y)]``\n+   * - BINARY_COMPARE_LT\n+     - Compare the top two elements on the stack and push a nonzero/zero if (x<y).\n+     - ``[..., x, y]``\n+     - ``[..., (x<y)]``\n+   * - RECURSE\n+     - Recurse, passing the top of the stack, and popping the result.\n+     - ``[..., x]``\n+     - ``[..., fn(x)]``\n+   * - RETURN\n+     - Return the top of the stack.\n+     - ``[x]``\n+     - ``[]``\n+   * - PUSH_CONST `arg`\n+     - Push an int const.\n+     - ``[...]``\n+     - ``[..., arg]``\n+   * - JUMP_ABS_IF_TRUE `arg`\n+     - Pop; if top of stack was nonzero, jump to ``arg``.\n+     - ``[..., x]``\n+     - ``[...]``\n \n Programs can be interpreted, disassembled, and compiled to machine code.\n "}, {"sha": "b977d1ddf59d0b9b0ec7d617c884c28ccf320236", "filename": "gcc/jit/docs/intro/tutorial05.rst", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial05.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial05.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial05.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -42,19 +42,30 @@ within the array.\n brainf is hard for humans to read, but it's trivial to write a parser for\n it, as there is no lexing; just a stream of bytes.  The operations are:\n \n-====================== =============================\n-Character              Meaning\n-====================== =============================\n-``>``                  ``idx += 1``\n-``<``                  ``idx -= 1``\n-``+``                  ``data[idx] += 1``\n-``-``                  ``data[idx] -= 1``\n-``.``                  ``output (data[idx])``\n-``,``                  ``data[idx] = input ()``\n-``[``                  loop until ``data[idx] == 0``\n-``]``                  end of loop\n-Anything else          ignored\n-====================== =============================\n+.. list-table::\n+   :header-rows: 1\n+\n+   * - Character\n+     - Meaning\n+\n+   * - ``>``\n+     - ``idx += 1``\n+   * - ``<``\n+     - ``idx -= 1``\n+   * - ``+``\n+     - ``data[idx] += 1``\n+   * - ``-``\n+     - ``data[idx] -= 1``\n+   * - ``.``\n+     - ``output (data[idx])``\n+   * - ``,``\n+     - ``data[idx] = input ()``\n+   * - ``[``\n+     - loop until ``data[idx] == 0``\n+   * - ``]``\n+     - end of loop\n+   * - Anything else\n+     - ignored\n \n Unlike the previous example, we'll implement an ahead-of-time compiler,\n which reads ``.bf`` scripts and outputs executables (though it would"}, {"sha": "adcde8d8eb9decd5812e0ae6d46ed005369bc434", "filename": "gcc/jit/docs/topics/compilation.rst", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fcompilation.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -169,14 +169,20 @@ For linking in object files, use :c:func:`gcc_jit_context_add_driver_option`.\n \n The available kinds of output are:\n \n-==============================================  ==============\n-Output kind                                     Typical suffix\n-==============================================  ==============\n-:c:macro:`GCC_JIT_OUTPUT_KIND_ASSEMBLER`        .s\n-:c:macro:`GCC_JIT_OUTPUT_KIND_OBJECT_FILE`      .o\n-:c:macro:`GCC_JIT_OUTPUT_KIND_DYNAMIC_LIBRARY`  .so or .dll\n-:c:macro:`GCC_JIT_OUTPUT_KIND_EXECUTABLE`       None, or .exe\n-==============================================  ==============\n+.. list-table::\n+   :header-rows: 1\n+\n+   * - Output kind\n+     - Typical suffix\n+\n+   * - :c:macro:`GCC_JIT_OUTPUT_KIND_ASSEMBLER`\n+     - .s\n+   * - :c:macro:`GCC_JIT_OUTPUT_KIND_OBJECT_FILE`\n+     - .o\n+   * - :c:macro:`GCC_JIT_OUTPUT_KIND_DYNAMIC_LIBRARY`\n+     - .so or .dll\n+   * - :c:macro:`GCC_JIT_OUTPUT_KIND_EXECUTABLE`\n+     - None, or .exe\n \n .. c:macro:: GCC_JIT_OUTPUT_KIND_ASSEMBLER\n "}, {"sha": "ff1eec800cea479a169d187e4d37b47245128519", "filename": "gcc/jit/docs/topics/expressions.rst", "status": "modified", "additions": 62, "deletions": 35, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Fexpressions.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -313,14 +313,20 @@ Unary Operations\n \n The available unary operations are:\n \n-==========================================  ============\n-Unary Operation                             C equivalent\n-==========================================  ============\n-:c:macro:`GCC_JIT_UNARY_OP_MINUS`           `-(EXPR)`\n-:c:macro:`GCC_JIT_UNARY_OP_BITWISE_NEGATE`  `~(EXPR)`\n-:c:macro:`GCC_JIT_UNARY_OP_LOGICAL_NEGATE`  `!(EXPR)`\n-:c:macro:`GCC_JIT_UNARY_OP_ABS`             `abs (EXPR)`\n-==========================================  ============\n+.. list-table::\n+   :header-rows: 1\n+\n+   * - Unary Operation\n+     - C equivalent\n+\n+   * - :c:macro:`GCC_JIT_UNARY_OP_MINUS`\n+     - `-(EXPR)`\n+   * - :c:macro:`GCC_JIT_UNARY_OP_BITWISE_NEGATE`\n+     - `~(EXPR)`\n+   * - :c:macro:`GCC_JIT_UNARY_OP_LOGICAL_NEGATE`\n+     - `!(EXPR)`\n+   * - :c:macro:`GCC_JIT_UNARY_OP_ABS`\n+     - `abs (EXPR)`\n \n .. c:macro:: GCC_JIT_UNARY_OP_MINUS\n \n@@ -380,22 +386,36 @@ Binary Operations\n \n The available binary operations are:\n \n-========================================  ============\n-Binary Operation                          C equivalent\n-========================================  ============\n-:c:macro:`GCC_JIT_BINARY_OP_PLUS`         `x + y`\n-:c:macro:`GCC_JIT_BINARY_OP_MINUS`        `x - y`\n-:c:macro:`GCC_JIT_BINARY_OP_MULT`         `x * y`\n-:c:macro:`GCC_JIT_BINARY_OP_DIVIDE`       `x / y`\n-:c:macro:`GCC_JIT_BINARY_OP_MODULO`       `x % y`\n-:c:macro:`GCC_JIT_BINARY_OP_BITWISE_AND`  `x & y`\n-:c:macro:`GCC_JIT_BINARY_OP_BITWISE_XOR`  `x ^ y`\n-:c:macro:`GCC_JIT_BINARY_OP_BITWISE_OR`   `x | y`\n-:c:macro:`GCC_JIT_BINARY_OP_LOGICAL_AND`  `x && y`\n-:c:macro:`GCC_JIT_BINARY_OP_LOGICAL_OR`   `x || y`\n-:c:macro:`GCC_JIT_BINARY_OP_LSHIFT`       `x << y`\n-:c:macro:`GCC_JIT_BINARY_OP_RSHIFT`       `x >> y`\n-========================================  ============\n+.. list-table::\n+   :header-rows: 1\n+\n+   * - Binary Operation\n+     - C equivalent\n+\n+   * - :c:macro:`GCC_JIT_BINARY_OP_PLUS`\n+     - `x + y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_MINUS`\n+     - `x - y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_MULT`\n+     - `x * y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_DIVIDE`\n+     - `x / y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_MODULO`\n+     - `x % y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_BITWISE_AND`\n+     - `x & y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_BITWISE_XOR`\n+     - `x ^ y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_BITWISE_OR`\n+     - `x | y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_LOGICAL_AND`\n+     - `x && y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_LOGICAL_OR`\n+     - `x || y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_LSHIFT`\n+     - `x << y`\n+   * - :c:macro:`GCC_JIT_BINARY_OP_RSHIFT`\n+     - `x >> y`\n \n .. c:macro:: GCC_JIT_BINARY_OP_PLUS\n \n@@ -536,17 +556,24 @@ Comparisons\n \n .. enum:: gcc_jit_comparison\n \n-=======================================  ============\n-Comparison                               C equivalent\n-=======================================  ============\n-:c:macro:`GCC_JIT_COMPARISON_EQ`         `x == y`\n-:c:macro:`GCC_JIT_COMPARISON_NE`         `x != y`\n-:c:macro:`GCC_JIT_COMPARISON_LT`         `x < y`\n-:c:macro:`GCC_JIT_COMPARISON_LE`         `x <= y`\n-:c:macro:`GCC_JIT_COMPARISON_GT`         `x > y`\n-:c:macro:`GCC_JIT_COMPARISON_GE`         `x >= y`\n-=======================================  ============\n-\n+.. list-table::\n+   :header-rows: 1\n+\n+   * - Comparison\n+     - C equivalent\n+\n+   * - :c:macro:`GCC_JIT_COMPARISON_EQ`\n+     - `x == y`\n+   * - :c:macro:`GCC_JIT_COMPARISON_NE`\n+     - `x != y`\n+   * - :c:macro:`GCC_JIT_COMPARISON_LT`\n+     - `x < y`\n+   * - :c:macro:`GCC_JIT_COMPARISON_LE`\n+     - `x <= y`\n+   * - :c:macro:`GCC_JIT_COMPARISON_GT`\n+     - `x > y`\n+   * - :c:macro:`GCC_JIT_COMPARISON_GE`\n+     - `x >= y`\n \n Function calls\n **************"}, {"sha": "457b3623ec925f92d6e0b69c62c2956476120c74", "filename": "gcc/jit/docs/topics/types.rst", "status": "modified", "additions": 72, "deletions": 39, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85cf5a23772ee14b1b19320f19a4749f874854d7/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Ftopics%2Ftypes.rst?ref=85cf5a23772ee14b1b19320f19a4749f874854d7", "patch": "@@ -57,45 +57,78 @@ Standard types\n \n    Access a specific type.  The available types are:\n \n-   ==========================================  ================================\n-   `enum gcc_jit_types` value                  Meaning\n-   ==========================================  ================================\n-   :c:data:`GCC_JIT_TYPE_VOID`                 C's ``void`` type.\n-   :c:data:`GCC_JIT_TYPE_VOID_PTR`             C's ``void *``.\n-   :c:data:`GCC_JIT_TYPE_BOOL`                 C++'s ``bool`` type; also C99's\n-                                               ``_Bool`` type, aka ``bool`` if\n-                                               using stdbool.h.\n-   :c:data:`GCC_JIT_TYPE_CHAR`                 C's ``char`` (of some signedness)\n-   :c:data:`GCC_JIT_TYPE_SIGNED_CHAR`          C's ``signed char``\n-   :c:data:`GCC_JIT_TYPE_UNSIGNED_CHAR`        C's ``unsigned char``\n-   :c:data:`GCC_JIT_TYPE_SHORT`                C's ``short`` (signed)\n-   :c:data:`GCC_JIT_TYPE_UNSIGNED_SHORT`       C's ``unsigned short``\n-   :c:data:`GCC_JIT_TYPE_INT`                  C's ``int`` (signed)\n-   :c:data:`GCC_JIT_TYPE_UNSIGNED_INT`         C's ``unsigned int``\n-   :c:data:`GCC_JIT_TYPE_LONG`                 C's ``long`` (signed)\n-   :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG`        C's ``unsigned long``\n-   :c:data:`GCC_JIT_TYPE_LONG_LONG`            C99's ``long long`` (signed)\n-   :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG_LONG`   C99's ``unsigned long long``\n-   :c:data:`GCC_JIT_TYPE_UINT8_T`              C99's ``uint8_t``\n-   :c:data:`GCC_JIT_TYPE_UINT16_T`             C99's ``uint16_t``\n-   :c:data:`GCC_JIT_TYPE_UINT32_T`             C99's ``uint32_t``\n-   :c:data:`GCC_JIT_TYPE_UINT64_T`             C99's ``uint64_t``\n-   :c:data:`GCC_JIT_TYPE_UINT128_T`            C99's ``__uint128_t``\n-   :c:data:`GCC_JIT_TYPE_INT8_T`               C99's ``int8_t``\n-   :c:data:`GCC_JIT_TYPE_INT16_T`              C99's ``int16_t``\n-   :c:data:`GCC_JIT_TYPE_INT32_T`              C99's ``int32_t``\n-   :c:data:`GCC_JIT_TYPE_INT64_T`              C99's ``int64_t``\n-   :c:data:`GCC_JIT_TYPE_INT128_T`             C99's ``__int128_t``\n-   :c:data:`GCC_JIT_TYPE_FLOAT`\n-   :c:data:`GCC_JIT_TYPE_DOUBLE`\n-   :c:data:`GCC_JIT_TYPE_LONG_DOUBLE`\n-   :c:data:`GCC_JIT_TYPE_CONST_CHAR_PTR`       C type: ``(const char *)``\n-   :c:data:`GCC_JIT_TYPE_SIZE_T`               C's ``size_t`` type\n-   :c:data:`GCC_JIT_TYPE_FILE_PTR`             C type: ``(FILE *)``\n-   :c:data:`GCC_JIT_TYPE_COMPLEX_FLOAT`        C99's ``_Complex float``\n-   :c:data:`GCC_JIT_TYPE_COMPLEX_DOUBLE`       C99's ``_Complex double``\n-   :c:data:`GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE`  C99's ``_Complex long double``\n-   ==========================================  ================================\n+  .. list-table::\n+     :header-rows: 1\n+\n+     * - `enum gcc_jit_types` value\n+       - Meaning\n+\n+     * - :c:data:`GCC_JIT_TYPE_VOID`\n+       - C's ``void`` type.\n+     * - :c:data:`GCC_JIT_TYPE_VOID_PTR`\n+       - C's ``void *``.\n+     * - :c:data:`GCC_JIT_TYPE_BOOL`\n+       - C++'s ``bool`` type; also C99's ``_Bool`` type, aka ``bool`` if using stdbool.h.\n+     * - :c:data:`GCC_JIT_TYPE_CHAR`\n+       - C's ``char`` (of some signedness)\n+     * - :c:data:`GCC_JIT_TYPE_SIGNED_CHAR`\n+       - C's ``signed char``\n+     * - :c:data:`GCC_JIT_TYPE_UNSIGNED_CHAR`\n+       - C's ``unsigned char``\n+     * - :c:data:`GCC_JIT_TYPE_SHORT`\n+       - C's ``short`` (signed)\n+     * - :c:data:`GCC_JIT_TYPE_UNSIGNED_SHORT`\n+       - C's ``unsigned short``\n+     * - :c:data:`GCC_JIT_TYPE_INT`\n+       - C's ``int`` (signed)\n+     * - :c:data:`GCC_JIT_TYPE_UNSIGNED_INT`\n+       - C's ``unsigned int``\n+     * - :c:data:`GCC_JIT_TYPE_LONG`\n+       - C's ``long`` (signed)\n+     * - :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG`\n+       - C's ``unsigned long``\n+     * - :c:data:`GCC_JIT_TYPE_LONG_LONG`\n+       - C99's ``long long`` (signed)\n+     * - :c:data:`GCC_JIT_TYPE_UNSIGNED_LONG_LONG`\n+       - C99's ``unsigned long long``\n+     * - :c:data:`GCC_JIT_TYPE_UINT8_T`\n+       - C99's ``uint8_t``\n+     * - :c:data:`GCC_JIT_TYPE_UINT16_T`\n+       - C99's ``uint16_t``\n+     * - :c:data:`GCC_JIT_TYPE_UINT32_T`\n+       - C99's ``uint32_t``\n+     * - :c:data:`GCC_JIT_TYPE_UINT64_T`\n+       - C99's ``uint64_t``\n+     * - :c:data:`GCC_JIT_TYPE_UINT128_T`\n+       - C99's ``__uint128_t``\n+     * - :c:data:`GCC_JIT_TYPE_INT8_T`\n+       - C99's ``int8_t``\n+     * - :c:data:`GCC_JIT_TYPE_INT16_T`\n+       - C99's ``int16_t``\n+     * - :c:data:`GCC_JIT_TYPE_INT32_T`\n+       - C99's ``int32_t``\n+     * - :c:data:`GCC_JIT_TYPE_INT64_T`\n+       - C99's ``int64_t``\n+     * - :c:data:`GCC_JIT_TYPE_INT128_T`\n+       - C99's ``__int128_t``\n+     * - :c:data:`GCC_JIT_TYPE_FLOAT`\n+       -\n+     * - :c:data:`GCC_JIT_TYPE_DOUBLE`\n+       -\n+     * - :c:data:`GCC_JIT_TYPE_LONG_DOUBLE`\n+       -\n+     * - :c:data:`GCC_JIT_TYPE_CONST_CHAR_PTR`\n+       - C type: ``(const char *)``\n+     * - :c:data:`GCC_JIT_TYPE_SIZE_T`\n+       - C's ``size_t`` type\n+     * - :c:data:`GCC_JIT_TYPE_FILE_PTR`\n+       - C type: ``(FILE *)``\n+     * - :c:data:`GCC_JIT_TYPE_COMPLEX_FLOAT`\n+       - C99's ``_Complex float``\n+     * - :c:data:`GCC_JIT_TYPE_COMPLEX_DOUBLE`\n+       - C99's ``_Complex double``\n+     * - :c:data:`GCC_JIT_TYPE_COMPLEX_LONG_DOUBLE`\n+       - C99's ``_Complex long double``\n \n .. function:: gcc_jit_type *\\\n               gcc_jit_context_get_int_type (gcc_jit_context *ctxt, \\"}]}