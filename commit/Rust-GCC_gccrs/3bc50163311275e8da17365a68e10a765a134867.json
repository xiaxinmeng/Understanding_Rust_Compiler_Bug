{"sha": "3bc50163311275e8da17365a68e10a765a134867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JjNTAxNjMzMTEyNzVlOGRhMTczNjVhNjhlMTBhNzY1YTEzNDg2Nw==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2011-10-29T01:02:35Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2011-10-29T01:02:35Z"}, "message": "Use more efficient alignment in ggc\n\nJakub had some concerns about the performance of page alignments in\nggc-page, which use a hardware division instructions currently.\nThis patch changes them all to use a new PAGE_ALIGN macro, which\nexploits that pages are a power of two.\n\ngcc/:\n2011-10-21  Andi Kleen  <ak@linux.intel.com>\n\n\t* ggc-page (PAGE_ALIGN): Add.\n\t(alloc_page, ggc_pch_total_size, ggc_pch_this_base, ggc_pch_read):\n\tReplace ROUND_UP with PAGE_ALIGN.\n\nFrom-SVN: r180650", "tree": {"sha": "8f9e002586202119430d4bd8c63fee062dce5c6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f9e002586202119430d4bd8c63fee062dce5c6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bc50163311275e8da17365a68e10a765a134867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc50163311275e8da17365a68e10a765a134867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc50163311275e8da17365a68e10a765a134867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc50163311275e8da17365a68e10a765a134867/comments", "author": null, "committer": null, "parents": [{"sha": "25f0ea8135b221a7d560e9062d30d14be33c5582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25f0ea8135b221a7d560e9062d30d14be33c5582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25f0ea8135b221a7d560e9062d30d14be33c5582"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "364abf0e199e4386564bf91e349c10c23ce8f63a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc50163311275e8da17365a68e10a765a134867/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc50163311275e8da17365a68e10a765a134867/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bc50163311275e8da17365a68e10a765a134867", "patch": "@@ -1,3 +1,9 @@\n+2011-10-21  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* ggc-page (PAGE_ALIGN): Add.\n+\t(alloc_page, ggc_pch_total_size, ggc_pch_this_base, ggc_pch_read):\n+\tReplace ROUND_UP with PAGE_ALIGN.\n+\n 2011-10-20  Andi Kleen  <ak@linux.intel.com>\n \n \t* ggc-page (alloc_anon): Add check argument."}, {"sha": "ee796cbb7e9fd76f87666651313a03dd88f9ee56", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bc50163311275e8da17365a68e10a765a134867/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bc50163311275e8da17365a68e10a765a134867/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=3bc50163311275e8da17365a68e10a765a134867", "patch": "@@ -221,6 +221,10 @@ static const size_t extra_order_size_table[] = {\n \n #define ROUND_UP(x, f) (CEIL (x, f) * (f))\n \n+/* Round X to next multiple of the page size */\n+\n+#define PAGE_ALIGN(x) (((x) + G.pagesize - 1) & ~(G.pagesize - 1))\n+\n /* The Ith entry is the number of objects on a page or order I.  */\n \n static unsigned objects_per_page_table[NUM_ORDERS];\n@@ -739,7 +743,7 @@ alloc_page (unsigned order)\n   entry_size = num_objects * OBJECT_SIZE (order);\n   if (entry_size < G.pagesize)\n     entry_size = G.pagesize;\n-  entry_size = ROUND_UP (entry_size, G.pagesize);\n+  entry_size = PAGE_ALIGN (entry_size);\n \n   entry = NULL;\n   page = NULL;\n@@ -2236,7 +2240,7 @@ ggc_pch_total_size (struct ggc_pch_data *d)\n   unsigned i;\n \n   for (i = 0; i < NUM_ORDERS; i++)\n-    a += ROUND_UP (d->d.totals[i] * OBJECT_SIZE (i), G.pagesize);\n+    a += PAGE_ALIGN (d->d.totals[i] * OBJECT_SIZE (i));\n   return a;\n }\n \n@@ -2249,7 +2253,7 @@ ggc_pch_this_base (struct ggc_pch_data *d, void *base)\n   for (i = 0; i < NUM_ORDERS; i++)\n     {\n       d->base[i] = a;\n-      a += ROUND_UP (d->d.totals[i] * OBJECT_SIZE (i), G.pagesize);\n+      a += PAGE_ALIGN (d->d.totals[i] * OBJECT_SIZE (i));\n     }\n }\n \n@@ -2442,7 +2446,7 @@ ggc_pch_read (FILE *f, void *addr)\n       if (d.totals[i] == 0)\n \tcontinue;\n \n-      bytes = ROUND_UP (d.totals[i] * OBJECT_SIZE (i), G.pagesize);\n+      bytes = PAGE_ALIGN (d.totals[i] * OBJECT_SIZE (i));\n       num_objs = bytes / OBJECT_SIZE (i);\n       entry = XCNEWVAR (struct page_entry, (sizeof (struct page_entry)\n \t\t\t\t\t    - sizeof (long)"}]}