{"sha": "a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2M2NhNDAxMjViNjFlYTdiNmJkNGExMTY4YjUxZGUxZmM5ZTc4Yw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2019-05-26T22:48:24Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-05-26T22:48:24Z"}, "message": "i386.md (@leave_<mode>): New expander.\n\n\t* config/i386/i386.md (@leave_<mode>): New expander.\n\t(*leave): Rename from leave.\n\t(*leave_rex64): Rename from leave_rex64.\n\t(@monitorx_<mode>): Rename from monitorx_<mode>.\n\t(@clzero_<mode>): Rename from clzero_<mode>.\n\t* config/i386/sse.md (@sse3_monitor_<mode>): Rename from\n\tsse3_monitor_<mode>.\n\t* config/i386/i386.c (*ix86_gen_leave): Remove indirect function.\n\t(*ix86_gen_monitor): Ditto.\n\t(*ix86_gen_monitorx): Ditto.\n\t(*ix86_gen_clzero): Ditto.\n\t(*ix86_gen_one_cmpl2): Ditto.\n\t(ix86_emit_leave): Use gen_leave instead of ix86_gen_leave.\n\t* config/i386/i386-expand.c (ix86_expand_builtin)\n\t<case IX86_BUILTIN_MONITOR>: Use gen_sse3_monitor\n\tinstead of ix86_gen_monitor.\n\t<case IX86_BUILTIN_MONITORX>: Use gen_monitorx\n\tinstead of ix86_gen_monitorx.\n\t<case IX86_BUILTIN_CLZERO>: Use gen_clzero\n\tinstead of ix86_gen_clzero.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tDo not initialize ix86_gen_leave, ix86_gen_monitor,\n\tix86_gen_monitorx, ix86_gen_clzero and ix86_gen_one_cmpl2.\n\n\t* config/i386/i386.md (@tls_global_dynamic_64_<mode>):\n\tRename from tls_global_dynamic_64_<mode>.\n\t(@tls_local_dynamic_base_64_<mode>): Rename from\n\ttls_local_dynamic_base_64_<mode>.\n\t* config/i386/i386.c (*ix86_gen_tls_global_dynamic_64):\n\tRemove indirect function.\n\t(*ix86_gen_tls_local_dynamic_base_64): Ditto.\n\t(legitimize_tls_address): Use gen_tls_global_dynamic_64 function\n\tinstead of ix86_gen_tls_global_dynamic_64.\n\tUse gen_tls_local_dynamic_base_64 instead of\n\tix86_gen_tls_local_dynamic_base_64.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tDo not initialize ix86_gen_tls_global_dynamic_64 and\n\tix86_gen_tls_local_dynamic_base_64.\n\n\t* config/i386/i386.md (@pro_epilogue_adjust_stack_add_<mode>)\n\tRename from pro_epilogue_adjust_stack_<mode>_add.\n\t(@pro_epilogue_adjust_stack_sub_<mode>)\n\tRename from pro_epilogue_adjust_stack_<mode>_sub.\n\t(@allocate_stack_worker_probe_<mode>):\n\tRename from allocate_stack_worker_probe_<mode>.\n\t(allocate_stack): Use gen_allocate_stack_worker_probe.\n\t(probe_stack): Use gen_probe_stack_1.\n\t(@probe_stack_1_<mode>): Rename from probe_stack_<mode>.\n\t(@adjust_stack_and_probe_<mode>): Rename from\n\tadjust_stack_and_probe<mode>.\n\t(@probe_stack_range_<mode>): Rename from probe_stack_range<mode>.\n\t(stack_protect_set): Use gen_stack_protect_set_1.\n\t(@stack_protect_set_1_<mode>): Rename from stack_protect_set_<mode>.\n\t(stack_protect_test): Use gen_stack_protect_test_1.\n\t(@stack_protect_test_1_<mode>): Rename from stack_protect_test_<mode>.\n\t* config/i386/i386.c (*ix86_gen_allocate_stack_worker):\n\tRemove indirect function.\n\t(*ix86_gen_adjust_stack_and_probe): Ditto.\n\t(*ix86_gen_probe_stack_range): Ditto.\n\t(pro_epilogue_adjust_stack): Use gen_pro_epilogue_adjust_stack_add\n\tinstead of gen_pro_epilogue_adjust_stack_{si,di}_add.\n\t(ix86_adjust_stack_and_probe_stack_clash): Use\n\tgen_adjust_stack_and_probe instead of ix86_gen_adjust_stack_and_probe.\n\t(ix86_adjust_stack_and_probe): Ditto.\n\t(ix86_emit_probe_stack_range): Use gen_probe_stack_range instead\n\tof ix86_gen_probe_stack_range.\n\t(ix86_expand_prologue):  Use gen_pro_epilogue_adjust_stack_sub\n\tinstead of gen_pro_epilogue_adjust_stack_{si,di}_sub.\n\t* config/i386/x86-tune-sched.c (ix86_macro_fusion_pair_p):\n\tInclude insn-opinit.h.  Use code_for_stack_protect_test_1 instead of\n\tCODE_FOR_stack_protect_test_{si,di}.\n\t* config/i386/i386-options.c (ix86_option_override_internal):\n\tDo not initialize ix86_gen_allocate_stack_worker,\n\tix86_gen_adjust_stack_and_probe and ix86_gen_probe_stack_range.\n\nFrom-SVN: r271636", "tree": {"sha": "6d4e35646d70de992b4a0da0c9cafd7a8cbb5f32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d4e35646d70de992b4a0da0c9cafd7a8cbb5f32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "558f3941e9a1b5b801740b58277538b78bb70853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/558f3941e9a1b5b801740b58277538b78bb70853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/558f3941e9a1b5b801740b58277538b78bb70853"}], "stats": {"total": 269, "additions": 140, "deletions": 129}, "files": [{"sha": "67e8333e3d6c9ba2af4ce7a2c9f39de537913e22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -1,3 +1,84 @@\n+2019-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (@leave_<mode>): New expander.\n+\t(*leave): Rename from leave.\n+\t(*leave_rex64): Rename from leave_rex64.\n+\t(@monitorx_<mode>): Rename from monitorx_<mode>.\n+\t(@clzero_<mode>): Rename from clzero_<mode>.\n+\t* config/i386/sse.md (@sse3_monitor_<mode>): Rename from\n+\tsse3_monitor_<mode>.\n+\t* config/i386/i386.c (*ix86_gen_leave): Remove indirect function.\n+\t(*ix86_gen_monitor): Ditto.\n+\t(*ix86_gen_monitorx): Ditto.\n+\t(*ix86_gen_clzero): Ditto.\n+\t(*ix86_gen_one_cmpl2): Ditto.\n+\t(ix86_emit_leave): Use gen_leave instead of ix86_gen_leave.\n+\t* config/i386/i386-expand.c (ix86_expand_builtin)\n+\t<case IX86_BUILTIN_MONITOR>: Use gen_sse3_monitor\n+\tinstead of ix86_gen_monitor.\n+\t<case IX86_BUILTIN_MONITORX>: Use gen_monitorx\n+\tinstead of ix86_gen_monitorx.\n+\t<case IX86_BUILTIN_CLZERO>: Use gen_clzero\n+\tinstead of ix86_gen_clzero.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tDo not initialize ix86_gen_leave, ix86_gen_monitor,\n+\tix86_gen_monitorx, ix86_gen_clzero and ix86_gen_one_cmpl2.\n+\n+2019-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (@tls_global_dynamic_64_<mode>):\n+\tRename from tls_global_dynamic_64_<mode>.\n+\t(@tls_local_dynamic_base_64_<mode>): Rename from\n+\ttls_local_dynamic_base_64_<mode>.\n+\t* config/i386/i386.c (*ix86_gen_tls_global_dynamic_64):\n+\tRemove indirect function.\n+\t(*ix86_gen_tls_local_dynamic_base_64): Ditto.\n+\t(legitimize_tls_address): Use gen_tls_global_dynamic_64 function\n+\tinstead of ix86_gen_tls_global_dynamic_64.\n+\tUse gen_tls_local_dynamic_base_64 instead of\n+\tix86_gen_tls_local_dynamic_base_64.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tDo not initialize ix86_gen_tls_global_dynamic_64 and\n+\tix86_gen_tls_local_dynamic_base_64.\n+\n+2019-05-26  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (@pro_epilogue_adjust_stack_add_<mode>)\n+\tRename from pro_epilogue_adjust_stack_<mode>_add.\n+\t(@pro_epilogue_adjust_stack_sub_<mode>)\n+\tRename from pro_epilogue_adjust_stack_<mode>_sub.\n+\t(@allocate_stack_worker_probe_<mode>):\n+\tRename from allocate_stack_worker_probe_<mode>.\n+\t(allocate_stack): Use gen_allocate_stack_worker_probe.\n+\t(probe_stack): Use gen_probe_stack_1.\n+\t(@probe_stack_1_<mode>): Rename from probe_stack_<mode>.\n+\t(@adjust_stack_and_probe_<mode>): Rename from\n+\tadjust_stack_and_probe<mode>.\n+\t(@probe_stack_range_<mode>): Rename from probe_stack_range<mode>.\n+\t(stack_protect_set): Use gen_stack_protect_set_1.\n+\t(@stack_protect_set_1_<mode>): Rename from stack_protect_set_<mode>.\n+\t(stack_protect_test): Use gen_stack_protect_test_1.\n+\t(@stack_protect_test_1_<mode>): Rename from stack_protect_test_<mode>.\n+\t* config/i386/i386.c (*ix86_gen_allocate_stack_worker):\n+\tRemove indirect function.\n+\t(*ix86_gen_adjust_stack_and_probe): Ditto.\n+\t(*ix86_gen_probe_stack_range): Ditto.\n+\t(pro_epilogue_adjust_stack): Use gen_pro_epilogue_adjust_stack_add\n+\tinstead of gen_pro_epilogue_adjust_stack_{si,di}_add.\n+\t(ix86_adjust_stack_and_probe_stack_clash): Use\n+\tgen_adjust_stack_and_probe instead of ix86_gen_adjust_stack_and_probe.\n+\t(ix86_adjust_stack_and_probe): Ditto.\n+\t(ix86_emit_probe_stack_range): Use gen_probe_stack_range instead\n+\tof ix86_gen_probe_stack_range.\n+\t(ix86_expand_prologue):  Use gen_pro_epilogue_adjust_stack_sub\n+\tinstead of gen_pro_epilogue_adjust_stack_{si,di}_sub.\n+\t* config/i386/x86-tune-sched.c (ix86_macro_fusion_pair_p):\n+\tInclude insn-opinit.h.  Use code_for_stack_protect_test_1 instead of\n+\tCODE_FOR_stack_protect_test_{si,di}.\n+\t* config/i386/i386-options.c (ix86_option_override_internal):\n+\tDo not initialize ix86_gen_allocate_stack_worker,\n+\tix86_gen_adjust_stack_and_probe and ix86_gen_probe_stack_range.\n+\n 2019-05-26  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/invoke.texi (Link Options): Many editorial changes around"}, {"sha": "06ed1078ca46d3d25e6ec2edc09b7fabe568bcc5", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -11067,8 +11067,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \top2 = copy_to_mode_reg (SImode, op2);\n \n       emit_insn (fcode == IX86_BUILTIN_MONITOR \n-\t\t ? ix86_gen_monitor (op0, op1, op2)\n-\t\t : ix86_gen_monitorx (op0, op1, op2));\n+\t\t ? gen_sse3_monitor (Pmode, op0, op1, op2)\n+\t\t : gen_monitorx (Pmode, op0, op1, op2));\n       return 0;\n \n     case IX86_BUILTIN_MWAIT:\n@@ -11180,7 +11180,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       op0 = expand_normal (arg0);\n       if (!REG_P (op0))\n \top0 = ix86_zero_extend_to_Pmode (op0);\n-      emit_insn (ix86_gen_clzero (op0));\n+      emit_insn (gen_clzero (Pmode, op0));\n       return 0;\n \n     case IX86_BUILTIN_CLDEMOTE:"}, {"sha": "5f14bb54ca2106f812303810e33bca3279e1834f", "filename": "gcc/config/i386/i386-options.c", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-options.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-options.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.c?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -2552,52 +2552,19 @@ ix86_option_override_internal (bool main_args_p,\n   if (!TARGET_64BIT_P (opts->x_ix86_isa_flags) && !opts->x_flag_split_stack)\n     targetm.expand_builtin_va_start = NULL;\n \n-  if (TARGET_64BIT_P (opts->x_ix86_isa_flags))\n-    {\n-      ix86_gen_leave = gen_leave_rex64;\n-      if (Pmode == DImode)\n-\t{\n-\t  ix86_gen_tls_global_dynamic_64 = gen_tls_global_dynamic_64_di;\n-\t  ix86_gen_tls_local_dynamic_base_64\n-\t    = gen_tls_local_dynamic_base_64_di;\n-\t}\n-      else\n-\t{\n-\t  ix86_gen_tls_global_dynamic_64 = gen_tls_global_dynamic_64_si;\n-\t  ix86_gen_tls_local_dynamic_base_64\n-\t    = gen_tls_local_dynamic_base_64_si;\n-\t}\n-    }\n-  else\n-    ix86_gen_leave = gen_leave;\n-\n   if (Pmode == DImode)\n     {\n       ix86_gen_add3 = gen_adddi3;\n       ix86_gen_sub3 = gen_subdi3;\n       ix86_gen_sub3_carry = gen_subdi3_carry;\n-      ix86_gen_one_cmpl2 = gen_one_cmpldi2;\n       ix86_gen_andsp = gen_anddi3;\n-      ix86_gen_allocate_stack_worker = gen_allocate_stack_worker_probe_di;\n-      ix86_gen_adjust_stack_and_probe = gen_adjust_stack_and_probedi;\n-      ix86_gen_probe_stack_range = gen_probe_stack_rangedi;\n-      ix86_gen_monitor = gen_sse3_monitor_di;\n-      ix86_gen_monitorx = gen_monitorx_di;\n-      ix86_gen_clzero = gen_clzero_di;\n     }\n   else\n     {\n       ix86_gen_add3 = gen_addsi3;\n       ix86_gen_sub3 = gen_subsi3;\n       ix86_gen_sub3_carry = gen_subsi3_carry;\n-      ix86_gen_one_cmpl2 = gen_one_cmplsi2;\n       ix86_gen_andsp = gen_andsi3;\n-      ix86_gen_allocate_stack_worker = gen_allocate_stack_worker_probe_si;\n-      ix86_gen_adjust_stack_and_probe = gen_adjust_stack_and_probesi;\n-      ix86_gen_probe_stack_range = gen_probe_stack_rangesi;\n-      ix86_gen_monitor = gen_sse3_monitor_si;\n-      ix86_gen_monitorx = gen_monitorx_si;\n-      ix86_gen_clzero = gen_clzero_si;\n     }\n \n #ifdef USE_IX86_CLD"}, {"sha": "5021ac5e7d7ebc77c3f3a82ee3a2ecc59f42d494", "filename": "gcc/config/i386/i386-options.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-options.h?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -55,20 +55,10 @@ extern tree (*ix86_veclib_handler) (combined_fn, tree, tree);\n extern tree ix86_veclibabi_svml (combined_fn, tree, tree);\n extern tree ix86_veclibabi_acml (combined_fn, tree, tree);\n \n-extern rtx (*ix86_gen_leave) (void);\n extern rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n extern rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n extern rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n-extern rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n-extern rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_monitorx) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_clzero) (rtx);\n extern rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_allocate_stack_worker) (rtx, rtx);\n-extern rtx (*ix86_gen_adjust_stack_and_probe) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_probe_stack_range) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_tls_global_dynamic_64) (rtx, rtx, rtx);\n-extern rtx (*ix86_gen_tls_local_dynamic_base_64) (rtx, rtx);\n \n enum ix86_function_specific_strings\n {"}, {"sha": "75ad1058e4cb452efdb914a16302dc743dfe265f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -349,20 +349,10 @@ enum processor_type ix86_arch;\n /* True if processor has SSE prefetch instruction.  */\n unsigned char x86_prefetch_sse;\n \n-rtx (*ix86_gen_leave) (void);\n rtx (*ix86_gen_add3) (rtx, rtx, rtx);\n rtx (*ix86_gen_sub3) (rtx, rtx, rtx);\n rtx (*ix86_gen_sub3_carry) (rtx, rtx, rtx, rtx, rtx);\n-rtx (*ix86_gen_one_cmpl2) (rtx, rtx);\n-rtx (*ix86_gen_monitor) (rtx, rtx, rtx);\n-rtx (*ix86_gen_monitorx) (rtx, rtx, rtx);\n-rtx (*ix86_gen_clzero) (rtx);\n rtx (*ix86_gen_andsp) (rtx, rtx, rtx);\n-rtx (*ix86_gen_allocate_stack_worker) (rtx, rtx);\n-rtx (*ix86_gen_adjust_stack_and_probe) (rtx, rtx, rtx);\n-rtx (*ix86_gen_probe_stack_range) (rtx, rtx, rtx);\n-rtx (*ix86_gen_tls_global_dynamic_64) (rtx, rtx, rtx);\n-rtx (*ix86_gen_tls_local_dynamic_base_64) (rtx, rtx);\n \n /* Preferred alignment for stack boundary in bits.  */\n unsigned int ix86_preferred_stack_boundary;\n@@ -6551,34 +6541,29 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n \t\t\t   int style, bool set_cfa)\n {\n   struct machine_function *m = cfun->machine;\n+  rtx addend = offset;\n   rtx insn;\n   bool add_frame_related_expr = false;\n \n-  if (Pmode == SImode)\n-    insn = gen_pro_epilogue_adjust_stack_si_add (dest, src, offset);\n-  else if (x86_64_immediate_operand (offset, DImode))\n-    insn = gen_pro_epilogue_adjust_stack_di_add (dest, src, offset);\n-  else\n+  if (!x86_64_immediate_operand (offset, Pmode))\n     {\n-      rtx tmp;\n       /* r11 is used by indirect sibcall return as well, set before the\n \t epilogue and used after the epilogue.  */\n       if (style)\n-        tmp = gen_rtx_REG (DImode, R11_REG);\n+        addend = gen_rtx_REG (Pmode, R11_REG);\n       else\n \t{\n \t  gcc_assert (src != hard_frame_pointer_rtx\n \t\t      && dest != hard_frame_pointer_rtx);\n-\t  tmp = hard_frame_pointer_rtx;\n+\t  addend = hard_frame_pointer_rtx;\n \t}\n-      insn = emit_insn (gen_rtx_SET (tmp, offset));\n+      emit_insn (gen_rtx_SET (addend, offset));\n       if (style < 0)\n \tadd_frame_related_expr = true;\n-\n-      insn = gen_pro_epilogue_adjust_stack_di_add (dest, src, tmp);\n     }\n \n-  insn = emit_insn (insn);\n+  insn = emit_insn (gen_pro_epilogue_adjust_stack_add\n+\t\t    (Pmode, dest, src, addend));\n   if (style >= 0)\n     ix86_add_queued_cfa_restore_notes (insn);\n \n@@ -7078,8 +7063,8 @@ ix86_adjust_stack_and_probe_stack_clash (HOST_WIDE_INT size,\n \n       /* Step 3: the loop.  */\n       rtx size_rtx = GEN_INT (rounded_size);\n-      insn = emit_insn (ix86_gen_adjust_stack_and_probe (sr.reg, sr.reg,\n-\t\t\t\t\t\t\t size_rtx));\n+      insn = emit_insn (gen_adjust_stack_and_probe (Pmode, sr.reg, sr.reg,\n+\t\t\t\t\t\t    size_rtx));\n       if (m->fs.cfa_reg == stack_pointer_rtx)\n \t{\n \t  m->fs.cfa_offset += rounded_size;\n@@ -7232,7 +7217,7 @@ ix86_adjust_stack_and_probe (HOST_WIDE_INT size,\n \t adjusts SP and probes to PROBE_INTERVAL + N * PROBE_INTERVAL for\n \t values of N from 1 until it is equal to ROUNDED_SIZE.  */\n \n-      emit_insn (ix86_gen_adjust_stack_and_probe (sr.reg, sr.reg, size_rtx));\n+      emit_insn (gen_adjust_stack_and_probe (Pmode, sr.reg, sr.reg, size_rtx));\n \n \n       /* Step 4: adjust SP and probe at PROBE_INTERVAL + SIZE if we cannot\n@@ -7390,7 +7375,8 @@ ix86_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n          probes at FIRST + N * PROBE_INTERVAL for values of N from 1\n          until it is equal to ROUNDED_SIZE.  */\n \n-      emit_insn (ix86_gen_probe_stack_range (sr.reg, sr.reg, GEN_INT (-last)));\n+      emit_insn\n+\t(gen_probe_stack_range (Pmode, sr.reg, sr.reg, GEN_INT (-last)));\n \n \n       /* Step 4: probe at FIRST + SIZE if we cannot assert at compile-time\n@@ -8182,7 +8168,6 @@ ix86_expand_prologue (void)\n     {\n       rtx eax = gen_rtx_REG (Pmode, AX_REG);\n       rtx r10 = NULL;\n-      rtx (*adjust_stack_insn)(rtx, rtx, rtx);\n       const bool sp_is_cfa_reg = (m->fs.cfa_reg == stack_pointer_rtx);\n       bool eax_live = ix86_eax_live_at_start_p ();\n       bool r10_live = false;\n@@ -8203,7 +8188,8 @@ ix86_expand_prologue (void)\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n \t\t\t    gen_rtx_SET (stack_pointer_rtx,\n-\t\t\t\t\t plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t-UNITS_PER_WORD)));\n \t    }\n \t}\n@@ -8220,21 +8206,18 @@ ix86_expand_prologue (void)\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n \t\t\t    gen_rtx_SET (stack_pointer_rtx,\n-\t\t\t\t\t plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t plus_constant (Pmode,\n+\t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t-UNITS_PER_WORD)));\n \t    }\n \t}\n \n       emit_move_insn (eax, GEN_INT (allocate));\n-      emit_insn (ix86_gen_allocate_stack_worker (eax, eax));\n+      emit_insn (gen_allocate_stack_worker_probe (Pmode, eax, eax));\n \n       /* Use the fact that AX still contains ALLOCATE.  */\n-      adjust_stack_insn = (Pmode == DImode\n-\t\t\t   ? gen_pro_epilogue_adjust_stack_di_sub\n-\t\t\t   : gen_pro_epilogue_adjust_stack_si_sub);\n-\n-      insn = emit_insn (adjust_stack_insn (stack_pointer_rtx,\n-\t\t\t\t\t   stack_pointer_rtx, eax));\n+      insn = emit_insn (gen_pro_epilogue_adjust_stack_sub\n+\t\t\t(Pmode, stack_pointer_rtx, stack_pointer_rtx, eax));\n \n       if (sp_is_cfa_reg || TARGET_SEH)\n \t{\n@@ -8412,8 +8395,9 @@ static void\n ix86_emit_leave (rtx_insn *insn)\n {\n   struct machine_function *m = cfun->machine;\n+\n   if (!insn)\n-    insn = emit_insn (ix86_gen_leave ());\n+    insn = emit_insn (gen_leave (word_mode));\n \n   ix86_add_queued_cfa_restore_notes (insn);\n \n@@ -10827,7 +10811,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n \t      start_sequence ();\n \t      emit_call_insn\n-\t\t(ix86_gen_tls_global_dynamic_64 (rax, x, caddr));\n+\t\t(gen_tls_global_dynamic_64 (Pmode, rax, x, caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n \n@@ -10881,7 +10865,7 @@ legitimize_tls_address (rtx x, enum tls_model model, bool for_mov)\n \n \t      start_sequence ();\n \t      emit_call_insn\n-\t\t(ix86_gen_tls_local_dynamic_base_64 (rax, caddr));\n+\t\t(gen_tls_local_dynamic_base_64 (Pmode, rax, caddr));\n \t      insns = get_insns ();\n \t      end_sequence ();\n "}, {"sha": "b7328e040d3f2dbf8358903302ad6abe5787ca3e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 29, "deletions": 40, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -13097,15 +13097,23 @@\n   [(const_int 0)]\n   \"ix86_expand_epilogue (2); DONE;\")\n \n-(define_insn \"leave\"\n+(define_expand \"@leave_<mode>\"\n+  [(parallel\n+    [(set (reg:W SP_REG) (plus:W (reg:W BP_REG) (match_dup 0)))\n+     (set (reg:W BP_REG) (mem:W (reg:W BP_REG)))\n+     (clobber (mem:BLK (scratch)))])]\n+  \"\"\n+  \"operands[0] = GEN_INT (<MODE_SIZE>);\")\n+\n+(define_insn \"*leave\"\n   [(set (reg:SI SP_REG) (plus:SI (reg:SI BP_REG) (const_int 4)))\n    (set (reg:SI BP_REG) (mem:SI (reg:SI BP_REG)))\n    (clobber (mem:BLK (scratch)))]\n   \"!TARGET_64BIT\"\n   \"leave\"\n   [(set_attr \"type\" \"leave\")])\n \n-(define_insn \"leave_rex64\"\n+(define_insn \"*leave_rex64\"\n   [(set (reg:DI SP_REG) (plus:DI (reg:DI BP_REG) (const_int 8)))\n    (set (reg:DI BP_REG) (mem:DI (reg:DI BP_REG)))\n    (clobber (mem:BLK (scratch)))]\n@@ -14274,7 +14282,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"22\")])\n \n-(define_expand \"tls_global_dynamic_64_<mode>\"\n+(define_expand \"@tls_global_dynamic_64_<mode>\"\n   [(parallel\n     [(set (match_operand:P 0 \"register_operand\")\n \t  (call:P\n@@ -14368,7 +14376,7 @@\n   [(set_attr \"type\" \"multi\")\n    (set_attr \"length\" \"22\")])\n \n-(define_expand \"tls_local_dynamic_base_64_<mode>\"\n+(define_expand \"@tls_local_dynamic_base_64_<mode>\"\n   [(parallel\n      [(set (match_operand:P 0 \"register_operand\")\n \t   (call:P\n@@ -17830,7 +17838,7 @@\n ;;\n ;; in proper program order.\n \n-(define_insn \"pro_epilogue_adjust_stack_<mode>_add\"\n+(define_insn \"@pro_epilogue_adjust_stack_add_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r,r\")\n \t(plus:P (match_operand:P 1 \"register_operand\" \"0,r\")\n \t        (match_operand:P 2 \"<nonmemory_operand>\" \"r<i>,l<i>\")))\n@@ -17873,7 +17881,7 @@\n \t      (const_string \"*\")))\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"pro_epilogue_adjust_stack_<mode>_sub\"\n+(define_insn \"@pro_epilogue_adjust_stack_sub_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(minus:P (match_operand:P 1 \"register_operand\" \"0\")\n \t\t (match_operand:P 2 \"register_operand\" \"r\")))\n@@ -17884,7 +17892,7 @@\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"allocate_stack_worker_probe_<mode>\"\n+(define_insn \"@allocate_stack_worker_probe_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")]\n \t\t\t    UNSPECV_STACK_PROBE))\n@@ -17910,15 +17918,9 @@\n     x = operands[1];\n   else\n     {\n-      rtx (*insn) (rtx, rtx);\n-\n       x = copy_to_mode_reg (Pmode, operands[1]);\n \n-      insn = (TARGET_64BIT\n-\t      ? gen_allocate_stack_worker_probe_di\n-\t      : gen_allocate_stack_worker_probe_si);\n-\n-      emit_insn (insn (x, x));\n+      emit_insn (gen_allocate_stack_worker_probe (Pmode, x, x));\n     }\n \n   x = expand_simple_binop (Pmode, MINUS, stack_pointer_rtx, x,\n@@ -17935,16 +17937,13 @@\n   [(match_operand 0 \"memory_operand\")]\n   \"\"\n {\n-  rtx (*insn) (rtx, rtx)\n-    = (GET_MODE (operands[0]) == DImode\n-       ? gen_probe_stack_di : gen_probe_stack_si);\n-\n-  emit_insn (insn (operands[0], const0_rtx));\n+  emit_insn (gen_probe_stack_1\n+\t     (word_mode, operands[0], const0_rtx));\n   DONE;\n })\n \n ;; Use OR for stack probes, this is shorter.\n-(define_insn \"probe_stack_<mode>\"\n+(define_insn \"@probe_stack_1_<mode>\"\n   [(set (match_operand:W 0 \"memory_operand\" \"=m\")\n \t(unspec:W [(match_operand:W 1 \"const0_operand\")]\n \t\t  UNSPEC_PROBE_STACK))\n@@ -17955,7 +17954,7 @@\n    (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"1\")])\n   \n-(define_insn \"adjust_stack_and_probe<mode>\"\n+(define_insn \"@adjust_stack_and_probe_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")]\n \t\t\t    UNSPECV_PROBE_STACK_RANGE))\n@@ -17967,7 +17966,7 @@\n   \"* return output_adjust_stack_and_probe (operands[0]);\"\n   [(set_attr \"type\" \"multi\")])\n \n-(define_insn \"probe_stack_range<mode>\"\n+(define_insn \"@probe_stack_range_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")\n \t\t\t    (match_operand:P 2 \"const_int_operand\" \"n\")]\n@@ -19473,17 +19472,12 @@\n    (match_operand 1 \"memory_operand\")]\n   \"\"\n {\n-  rtx (*insn)(rtx, rtx);\n-\n-  insn = (TARGET_LP64\n-\t  ? gen_stack_protect_set_di\n-\t  : gen_stack_protect_set_si);\n-\n-  emit_insn (insn (operands[0], operands[1]));\n+  emit_insn (gen_stack_protect_set_1\n+\t     (ptr_mode, operands[0], operands[1]));\n   DONE;\n })\n \n-(define_insn \"stack_protect_set_<mode>\"\n+(define_insn \"@stack_protect_set_1_<mode>\"\n   [(set (match_operand:PTR 0 \"memory_operand\" \"=m\")\n \t(unspec:PTR [(match_operand:PTR 1 \"memory_operand\" \"m\")]\n \t\t    UNSPEC_SP_SET))\n@@ -19501,20 +19495,15 @@\n {\n   rtx flags = gen_rtx_REG (CCZmode, FLAGS_REG);\n \n-  rtx (*insn)(rtx, rtx, rtx);\n-\n-  insn = (TARGET_LP64\n-\t  ? gen_stack_protect_test_di\n-\t  : gen_stack_protect_test_si);\n-\n-  emit_insn (insn (flags, operands[0], operands[1]));\n+  emit_insn (gen_stack_protect_test_1\n+\t     (ptr_mode, flags, operands[0], operands[1]));\n \n   emit_jump_insn (gen_cbranchcc4 (gen_rtx_EQ (VOIDmode, flags, const0_rtx),\n \t\t\t\t  flags, const0_rtx, operands[2]));\n   DONE;\n })\n \n-(define_insn \"stack_protect_test_<mode>\"\n+(define_insn \"@stack_protect_test_1_<mode>\"\n   [(set (match_operand:CCZ 0 \"flags_reg_operand\")\n \t(unspec:CCZ [(match_operand:PTR 1 \"memory_operand\" \"m\")\n \t\t     (match_operand:PTR 2 \"memory_operand\" \"m\")]\n@@ -20227,7 +20216,7 @@\n   \"mwaitx\"\n   [(set_attr \"length\" \"3\")])\n \n-(define_insn \"monitorx_<mode>\"\n+(define_insn \"@monitorx_<mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"a\")\n \t\t     (match_operand:SI 1 \"register_operand\" \"c\")\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")]\n@@ -20241,7 +20230,7 @@\n      (symbol_ref (\"(Pmode != word_mode) + 3\")))])\n \n ;; CLZERO\n-(define_insn \"clzero_<mode>\"\n+(define_insn \"@clzero_<mode>\"\n   [(unspec_volatile [(match_operand: P 0 \"register_operand\" \"a\")]\n                    UNSPECV_CLZERO)]\n   \"TARGET_CLZERO\""}, {"sha": "f053414a0c3b3533d89bb9c2d9b37bb6d6e08d6e", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -15568,7 +15568,7 @@\n   \"mwait\"\n   [(set_attr \"length\" \"3\")])\n \n-(define_insn \"sse3_monitor_<mode>\"\n+(define_insn \"@sse3_monitor_<mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"a\")\n \t\t     (match_operand:SI 1 \"register_operand\" \"c\")\n \t\t     (match_operand:SI 2 \"register_operand\" \"d\")]"}, {"sha": "f88e86c5140a994f34d3267163b6191f1a3a6e05", "filename": "gcc/config/i386/x86-tune-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a963ca40125b61ea7b6bd4a1168b51de1fc9e78c/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune-sched.c?ref=a963ca40125b61ea7b6bd4a1168b51de1fc9e78c", "patch": "@@ -27,10 +27,11 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree.h\"\n #include \"cfghooks.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n #include \"insn-config.h\"\n #include \"insn-attr.h\"\n+#include \"insn-opinit.h\"\n #include \"recog.h\"\n-#include \"target.h\"\n \n /* Return the maximum number of instructions a cpu can issue.  */\n \n@@ -541,8 +542,7 @@ ix86_macro_fusion_pair_p (rtx_insn *condgen, rtx_insn *condjmp)\n \n   condgen_type = get_attr_type (condgen);\n   if (condgen_type == TYPE_MULTI\n-      && (INSN_CODE (condgen) == CODE_FOR_stack_protect_test_di\n-\t  || INSN_CODE (condgen) == CODE_FOR_stack_protect_test_si)\n+      && INSN_CODE (condgen) == code_for_stack_protect_test_1 (ptr_mode)\n       && TARGET_FUSE_ALU_AND_BRANCH)\n     {\n       /* stack_protect_test_<mode> ends with a sub, which subtracts"}]}