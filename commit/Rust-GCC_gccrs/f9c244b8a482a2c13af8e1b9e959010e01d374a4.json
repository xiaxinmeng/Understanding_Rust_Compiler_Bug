{"sha": "f9c244b8a482a2c13af8e1b9e959010e01d374a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjljMjQ0YjhhNDgyYTJjMTNhZjhlMWI5ZTk1OTAxMGUwMWQzNzRhNA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-01-19T09:24:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-01-19T09:24:20Z"}, "message": "cp-tree.h (lookup_template_class): Add complain parm.\n\ncp:\n\t* cp-tree.h (lookup_template_class): Add complain parm.\n\t* decl.c (lookup_namespace_name): Adjust call to\n\tlookup_template_class.\n\t(make_typename_type): Likewise.\n\t* semantics.c (finish_template_type): Likewise.\n\t* pt.c (lookup_template_class): Add complain parm. Adjust.\n\t(tsubst_aggr_type): Pass COMPLAIN down to lookup_template_class.\n\t(tsubst): Likewise.\ntestsuite:\n\t* g++.old-deja/g++.pt/deduct3.C: New test.\n\nFrom-SVN: r39129", "tree": {"sha": "c096f6cbd10bc066542ce1544c8f0d20cf64addb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c096f6cbd10bc066542ce1544c8f0d20cf64addb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9c244b8a482a2c13af8e1b9e959010e01d374a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c244b8a482a2c13af8e1b9e959010e01d374a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9c244b8a482a2c13af8e1b9e959010e01d374a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9c244b8a482a2c13af8e1b9e959010e01d374a4/comments", "author": null, "committer": null, "parents": [{"sha": "61f0131c68b026c24560d3b9adde5ab7c34c073c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61f0131c68b026c24560d3b9adde5ab7c34c073c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61f0131c68b026c24560d3b9adde5ab7c34c073c"}], "stats": {"total": 79, "additions": 65, "deletions": 14}, "files": [{"sha": "69e74738ccaa9ef5c04a555f476c1e205a9d8696", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -1,3 +1,14 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* cp-tree.h (lookup_template_class): Add complain parm.\n+\t* decl.c (lookup_namespace_name): Adjust call to\n+\tlookup_template_class.\n+\t(make_typename_type): Likewise.\n+\t* semantics.c (finish_template_type): Likewise.\n+\t* pt.c (lookup_template_class): Add complain parm. Adjust.\n+\t(tsubst_aggr_type): Pass COMPLAIN down to lookup_template_class.\n+\t(tsubst): Likewise.\n+\n 2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* pt.c (copy_default_args_to_explicit_spec): Preserve"}, {"sha": "1df938b814dd5af7f3f265f5aaffa23a80773c79", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -4135,7 +4135,7 @@ extern tree current_template_args\t\tPARAMS ((void));\n extern tree push_template_decl\t\t\tPARAMS ((tree));\n extern tree push_template_decl_real             PARAMS ((tree, int));\n extern void redeclare_class_template            PARAMS ((tree, tree));\n-extern tree lookup_template_class\t\tPARAMS ((tree, tree, tree, tree, int));\n+extern tree lookup_template_class\t\tPARAMS ((tree, tree, tree, tree, int, int));\n extern tree lookup_template_function            PARAMS ((tree, tree));\n extern int uses_template_parms\t\t\tPARAMS ((tree));\n extern tree instantiate_class_template\t\tPARAMS ((tree));"}, {"sha": "158407ccf3a76090c5303f856017ef5e0f1caefd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -5439,7 +5439,8 @@ lookup_namespace_name (namespace, name)\n \t\t\t\t\t TREE_OPERAND (template_id, 1),\n \t\t\t\t\t /*in_decl=*/NULL_TREE,\n \t\t\t\t\t /*context=*/NULL_TREE,\n-\t\t\t\t\t /*entering_scope=*/0);\n+\t\t\t\t\t /*entering_scope=*/0,\n+\t                                 /*complain=*/1);\n \t  else if (DECL_FUNCTION_TEMPLATE_P (val)\n \t\t   || TREE_CODE (val) == OVERLOAD)\n \t    val = lookup_template_function (val,\n@@ -5623,7 +5624,8 @@ make_typename_type (context, name, complain)\n \t  return lookup_template_class (tmpl,\n \t\t\t\t\tTREE_OPERAND (fullname, 1),\n \t\t\t\t\tNULL_TREE, context,\n-\t\t\t\t\t/*entering_scope=*/0);\n+\t\t\t\t\t/*entering_scope=*/0,\n+\t                                /*complain=*/1);\n \t}\n       else\n \t{"}, {"sha": "cf3b52d33e2304ddcaf588b21bf88ccfaa40268d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -3813,17 +3813,20 @@ maybe_get_template_decl_from_type_decl (decl)\n \n    If ENTERING_SCOPE is non-zero, we are about to enter the scope of\n    the class we are looking up.\n+   \n+   If COMPLAIN is non-zero, issue error messages.\n \n    If the template class is really a local class in a template\n    function, then the FUNCTION_CONTEXT is the function in which it is\n    being instantiated.  */\n \n tree\n-lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n+lookup_template_class (d1, arglist, in_decl, context, entering_scope, complain)\n      tree d1, arglist;\n      tree in_decl;\n      tree context;\n      int entering_scope;\n+     int complain;\n {\n   tree template = NULL_TREE, parmlist;\n   tree t;\n@@ -3881,15 +3884,19 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n      crash. Alternatively D1 might not be a template type at all.  */\n   if (! template)\n     {\n-      cp_error (\"`%T' is not a template\", d1);\n+      if (complain)\n+        cp_error (\"`%T' is not a template\", d1);\n       return error_mark_node;\n     }\n \n   if (TREE_CODE (template) != TEMPLATE_DECL)\n     {\n-      cp_error (\"non-template type `%T' used as a template\", d1);\n-      if (in_decl)\n-\tcp_error_at (\"for template declaration `%D'\", in_decl);\n+      if (complain)\n+        {\n+          cp_error (\"non-template type `%T' used as a template\", d1);\n+          if (in_decl)\n+\t    cp_error_at (\"for template declaration `%D'\", in_decl);\n+\t}\n       return error_mark_node;\n     }\n \n@@ -3903,7 +3910,8 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \n       parmlist = DECL_INNERMOST_TEMPLATE_PARMS (template);\n \n-      arglist2 = coerce_template_parms (parmlist, arglist, template, 1, 1);\n+      arglist2 = coerce_template_parms (parmlist, arglist, template,\n+                                        complain, /*require_all_args=*/1);\n       if (arglist2 == error_mark_node)\n \treturn error_mark_node;\n \n@@ -3971,7 +3979,8 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \t       --i, t = TREE_CHAIN (t))\n \t    {\n \t      tree a = coerce_template_parms (TREE_VALUE (t),\n-\t\t\t\t\t      arglist, template, 1, 1);\n+\t\t\t\t\t      arglist, template,\n+\t                                      complain, /*require_all_args=*/1);\n \t      SET_TMPL_ARGS_LEVEL (bound_args, i, a);\n \n \t      /* We temporarily reduce the length of the ARGLIST so\n@@ -3990,7 +3999,8 @@ lookup_template_class (d1, arglist, in_decl, context, entering_scope)\n \targlist\n \t  = coerce_template_parms (INNERMOST_TEMPLATE_PARMS (parmlist),\n \t\t\t\t   INNERMOST_TEMPLATE_ARGS (arglist),\n-\t\t\t\t   template, 1, 1);\n+\t\t\t\t   template,\n+\t                           complain, /*require_all_args=*/1);\n \n       if (arglist == error_mark_node)\n \t/* We were unable to bind the arguments.  */\n@@ -5466,7 +5476,7 @@ tsubst_aggr_type (t, args, complain, in_decl, entering_scope)\n \t    return error_mark_node;\n \n   \t  r = lookup_template_class (t, argvec, in_decl, context,\n-\t\t\t\t     entering_scope);\n+\t\t\t\t     entering_scope, complain);\n \n \t  return cp_build_qualified_type_real (r, TYPE_QUALS (t),\n \t\t\t\t\t       complain);\n@@ -6426,7 +6436,8 @@ tsubst (t, args, complain, in_decl)\n \t\t    r = lookup_template_class (arg, \n \t\t\t\t\t       argvec, in_decl, \n \t\t\t\t\t       DECL_CONTEXT (arg),\n-\t\t\t\t\t       /*entering_scope=*/0);\n+\t\t\t\t\t       /*entering_scope=*/0,\n+\t                                       complain);\n \t\t    return cp_build_qualified_type_real (r, \n \t\t\t\t\t\t         TYPE_QUALS (t),\n \t\t\t\t\t\t         complain);"}, {"sha": "e52138ba7ee2bf2d2485f3b10ae7246fa322ffc8", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -2032,7 +2032,8 @@ finish_template_type (name, args, entering_scope)\n   tree decl;\n \n   decl = lookup_template_class (name, args,\n-\t\t\t\tNULL_TREE, NULL_TREE, entering_scope);\n+\t\t\t\tNULL_TREE, NULL_TREE,\n+\t                        entering_scope, /*complain=*/1);\n   if (decl != error_mark_node)\n     decl = TYPE_STUB_DECL (decl);\n "}, {"sha": "9c5b6169fa74d54401446e231ed9ab5c4db4c221", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -1,3 +1,7 @@\n+2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.pt/deduct3.C: New test.\n+\n 2001-01-19  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* g++.old-deja/g++.pt/spec34.C: New test."}, {"sha": "8b9b76ec1654e3910a8c0b1d03c93e738bce8dc1", "filename": "gcc/testsuite/g++.old-deja/g++.pt/deduct3.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9c244b8a482a2c13af8e1b9e959010e01d374a4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fdeduct3.C?ref=f9c244b8a482a2c13af8e1b9e959010e01d374a4", "patch": "@@ -0,0 +1,22 @@\n+// Build don't link:\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 18 Jan 2001 <nathan@codesourcery.com>\n+\n+// Bug 1694. We complained during deduction, rather than reject the deduction.\n+\n+template <class T, T d> class X {};\n+\n+template <class T> X<T,0> Foo (T *);\n+template <class T> int Foo (T const *);\n+\n+void Baz (int *p1, int const *p2)\n+{\n+  int i = Foo (p1); // ERROR - cannot convert\n+  int j = Foo (p2);\n+}\n+void Baz (float *p1, float const *p2)\n+{\n+  int i = Foo (p1); // ok, deduction fails on X<T,0> Foo (T *)\n+  int j = Foo (p2);\n+}"}]}