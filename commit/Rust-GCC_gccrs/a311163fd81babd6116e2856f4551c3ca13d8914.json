{"sha": "a311163fd81babd6116e2856f4551c3ca13d8914", "node_id": "C_kwDOANBUbNoAKGEzMTExNjNmZDgxYmFiZDYxMTZlMjg1NmY0NTUxYzNjYTEzZDg5MTQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T08:28:39Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-10-14T12:23:00Z"}, "message": "Do not call range_on_path_entry for SSAs defined within the path\n\nIn the path solver, when requesting the range of an SSA for which we\nknow nothing, we ask the ranger for the range incoming to the path.\nWe do this by asking for all the incoming ranges to the path entry\nblock and unioning them.\n\nThe problem here is that we're asking for a range on path entry for an\nSSA which *is* defined in the path, but for which we know nothing\nabout:\n\n\tsome_global.1_2 = some_global;\n\t_3 = (char) some_global.1_2;\n\nThis request is causing us to ask for range_on_edge of _3 on the\nincoming edges to the path.  This is a bit of nonsensical request\nbecause _3 isn't live on entry to the path, so ranger correctly\nreturns UNDEFINED.  The proper thing is to avoid asking this in the\nfirst place.\n\nI have added a relevant assert, since it doesn't make sense to call\nrange_on_path_entry for SSAs defined within the path.\n\nTested on x86-64 Linux.\n\n\tPR tree-optimization/102736\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/102736\n\t* gimple-range-path.cc (path_range_query::range_on_path_entry):\n\tAssert that the requested range is defined outside the path.\n\t(path_range_query::ssa_range_in_phi): Do not call\n\trange_on_path_entry for SSA names that are defined within the\n\tpath.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr102736.c: New test.", "tree": {"sha": "3b5719cf518151424f6bf048a8171b3ef9fd7f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b5719cf518151424f6bf048a8171b3ef9fd7f20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a311163fd81babd6116e2856f4551c3ca13d8914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a311163fd81babd6116e2856f4551c3ca13d8914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a311163fd81babd6116e2856f4551c3ca13d8914", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a311163fd81babd6116e2856f4551c3ca13d8914/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d67b22e7315ca7ecfcf5e5ec3d401285d7ea25b5"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "694271306a764869a30d66420a3dd46887e5c151", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a311163fd81babd6116e2856f4551c3ca13d8914/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a311163fd81babd6116e2856f4551c3ca13d8914/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=a311163fd81babd6116e2856f4551c3ca13d8914", "patch": "@@ -134,6 +134,7 @@ path_range_query::defined_outside_path (tree name)\n void\n path_range_query::range_on_path_entry (irange &r, tree name)\n {\n+  gcc_checking_assert (defined_outside_path (name));\n   int_range_max tmp;\n   basic_block entry = entry_bb ();\n   bool changed = false;\n@@ -258,7 +259,10 @@ path_range_query::ssa_range_in_phi (irange &r, gphi *phi)\n \t\t// Using both the range on entry to the path, and the\n \t\t// range on this edge yields significantly better\n \t\t// results.\n-\t\trange_on_path_entry (r, arg);\n+\t\tif (defined_outside_path (arg))\n+\t\t  range_on_path_entry (r, arg);\n+\t\telse\n+\t\t  r.set_varying (TREE_TYPE (name));\n \t\tm_ranger.range_on_edge (tmp, e_in, arg);\n \t\tr.intersect (tmp);\n \t\treturn;"}, {"sha": "7e556f01a86e0a07152fd8d077b50ad8684508b6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr102736.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a311163fd81babd6116e2856f4551c3ca13d8914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102736.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a311163fd81babd6116e2856f4551c3ca13d8914/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102736.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr102736.c?ref=a311163fd81babd6116e2856f4551c3ca13d8914", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do run }\n+// { dg-options \"-O1 -ftree-vrp\" }\n+\n+int a, b = -1, c;\n+int d = 1;\n+static inline char e(char f, int g) { return g ? f : 0; }\n+static inline char h(char f) { return f < a ? f : f < a; }\n+static inline unsigned char i(unsigned char f, int g) { return g ? f : f > g; }\n+void j() {\n+L:\n+  c = e(1, i(h(b), d));\n+  if (b)\n+    return;\n+  goto L;\n+}\n+int main() {\n+  j();\n+  if (c != 1)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}