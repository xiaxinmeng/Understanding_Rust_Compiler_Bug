{"sha": "a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkMGQzMGYwYjAyNTdkNjZjMTNlYTliZGQyNDE4YWNjMGUwNzgzMA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-06-28T17:00:59Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-06-28T17:00:59Z"}, "message": "common.opt (in_lto_p): New Variable entry.\n\n\t* common.opt (in_lto_p): New Variable entry.\n\t* flags.h (in_lto_p): Move to common.opt.\n\t* gcc.c: Include params.h.\n\t(set_option_handlers): Also use common_handle_option and\n\ttarget_handle_option.\n\t(main): Call global_init_params, finish_params and\n\tinit_options_struct.\n\t* opts.c (debug_type_names): Move from toplev.c.\n\t(print_filtered_help): Access quiet_flag through opts pointer.\n\t(common_handle_option): Return early in the driver for some\n\toptions.  Access in_lto_p, dwarf_version and\n\twarn_maybe_uninitialized through opts pointer.\n\t* toplev.c (in_lto_p): Move to common.opt.\n\t(debug_type_names): Move to opts.c.\n\t* Makefile.in (OBJS): Remove opts.o.\n\t(OBJS-libcommon-target): Add opts.o.\n\t(gcc.o): Update dependencies.\n\nFrom-SVN: r175591", "tree": {"sha": "3699ee680927bcf6ec7563dbe63b342be826efac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3699ee680927bcf6ec7563dbe63b342be826efac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc6aa1000fd895cf12b9c5e7882dd46d34a44270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6aa1000fd895cf12b9c5e7882dd46d34a44270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6aa1000fd895cf12b9c5e7882dd46d34a44270"}], "stats": {"total": 96, "additions": 66, "deletions": 30}, "files": [{"sha": "2422d34c52c8e92f0a4890d793e7ba02eac22b03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -1,3 +1,23 @@\n+2011-06-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* common.opt (in_lto_p): New Variable entry.\n+\t* flags.h (in_lto_p): Move to common.opt.\n+\t* gcc.c: Include params.h.\n+\t(set_option_handlers): Also use common_handle_option and\n+\ttarget_handle_option.\n+\t(main): Call global_init_params, finish_params and\n+\tinit_options_struct.\n+\t* opts.c (debug_type_names): Move from toplev.c.\n+\t(print_filtered_help): Access quiet_flag through opts pointer.\n+\t(common_handle_option): Return early in the driver for some\n+\toptions.  Access in_lto_p, dwarf_version and\n+\twarn_maybe_uninitialized through opts pointer.\n+\t* toplev.c (in_lto_p): Move to common.opt.\n+\t(debug_type_names): Move to opts.c.\n+\t* Makefile.in (OBJS): Remove opts.o.\n+\t(OBJS-libcommon-target): Add opts.o.\n+\t(gcc.o): Update dependencies.\n+\n 2011-06-28  Kai Tietz  <ktietz@redhat.com>\n \n \t* tree-ssa-forwprop.c (simplify_bitwise_binary): Improve"}, {"sha": "fc96ddafbfb4af611435b6c893d824c8ca193218", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -1354,7 +1354,6 @@ OBJS = \\\n \toptabs.o \\\n \toptions-save.o \\\n \topts-global.o \\\n-\topts.o \\\n \tpasses.o \\\n \tplugin.o \\\n \tpointer-set.o \\\n@@ -1504,7 +1503,7 @@ OBJS-libcommon = diagnostic.o pretty-print.o intl.o input.o version.o\n # Objects in libcommon-target.a, used by drivers and by the core\n # compiler and containing target-dependent code.\n OBJS-libcommon-target = $(common_out_object_file) prefix.o params.o \\\n-\topts-common.o options.o vec.o hooks.o common/common-targhooks.o\n+\topts.o opts-common.o options.o vec.o hooks.o common/common-targhooks.o\n \n # This lists all host objects for the front ends.\n ALL_HOST_FRONTEND_OBJS = $(C_OBJS) \\\n@@ -2260,7 +2259,7 @@ DRIVER_DEFINES = \\\n \n gcc.o: gcc.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h multilib.h \\\n     Makefile $(lang_specs_files) specs.h prefix.h $(GCC_H) $(FLAGS_H) \\\n-    configargs.h $(OBSTACK_H) $(OPTS_H) $(DIAGNOSTIC_H) $(VEC_H)\n+    configargs.h $(OBSTACK_H) $(OPTS_H) $(DIAGNOSTIC_H) $(VEC_H) $(PARAMS_H)\n \t(SHLIB_LINK='$(SHLIB_LINK)'; \\\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) \\\n   $(DRIVER_DEFINES) \\"}, {"sha": "f1279369906a3b929e60308c9773151c0f312404", "filename": "gcc/common.opt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -37,6 +37,13 @@ int optimize_size\n Variable\n int optimize_fast\n \n+; True if this is the lto front end.  This is used to disable gimple\n+; generation and lowering passes that are normally run on the output\n+; of a front end.  These passes must be bypassed for lto since they\n+; have already been done before the gimple was written.\n+Variable\n+bool in_lto_p = false\n+\n ; 0 means straightforward implementation of complex divide acceptable.\n ; 1 means wide ranges of inputs must work for complex divide.\n ; 2 means C99-like requirements for complex multiply and divide."}, {"sha": "8cc6670ef1b1243ad46e81cf275750e211da0e6c", "filename": "gcc/flags.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -1,6 +1,6 @@\n /* Compilation switch flag definitions for GCC.\n    Copyright (C) 1987, 1988, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2002,\n-   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -34,13 +34,6 @@ extern const char *const debug_type_names[];\n extern void strip_off_ending (char *, int);\n extern int base_of_path (const char *path, const char **base_out);\n \n-/* True if this is the LTO front end (lto1).  This is used to disable\n-   gimple generation and lowering passes that are normally run on the\n-   output of a front end.  These passes must be bypassed for lto since\n-   they have already been done before the gimple was written.  */\n-\n-extern bool in_lto_p;\n-\n /* Return true iff flags are set as if -ffast-math.  */\n extern bool fast_math_flags_set_p (const struct gcc_options *);\n extern bool fast_math_flags_struct_set_p (struct cl_optimization *);"}, {"sha": "2996de40d23ce3aa337f652aab3bcdd028892760", "filename": "gcc/gcc.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -43,6 +43,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"diagnostic.h\"\n #include \"flags.h\"\n #include \"opts.h\"\n+#include \"params.h\"\n #include \"vec.h\"\n #include \"filenames.h\"\n \n@@ -3532,9 +3533,13 @@ set_option_handlers (struct cl_option_handlers *handlers)\n   handlers->unknown_option_callback = driver_unknown_option_callback;\n   handlers->wrong_lang_callback = driver_wrong_lang_callback;\n   handlers->post_handling_callback = driver_post_handling_callback;\n-  handlers->num_handlers = 1;\n+  handlers->num_handlers = 3;\n   handlers->handlers[0].handler = driver_handle_option;\n   handlers->handlers[0].mask = CL_DRIVER;\n+  handlers->handlers[1].handler = common_handle_option;\n+  handlers->handlers[1].mask = CL_COMMON;\n+  handlers->handlers[2].handler = target_handle_option;\n+  handlers->handlers[2].mask = CL_TARGET;\n }\n \n /* Create the vector `switches' and its contents.\n@@ -6156,7 +6161,11 @@ main (int argc, char **argv)\n   if (argv != old_argv)\n     at_file_supplied = true;\n \n-  global_options = global_options_init;\n+  /* Register the language-independent parameters.  */\n+  global_init_params ();\n+  finish_params ();\n+\n+  init_options_struct (&global_options, &global_options_set);\n \n   decode_cmdline_options_to_array (argc, CONST_CAST2 (const char **, char **,\n \t\t\t\t\t\t      argv),"}, {"sha": "aa85ae59df3a599dd246f2c958a74471fb0f07a8", "filename": "gcc/opts.c", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -35,6 +35,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"insn-attr-common.h\"\n #include \"common/common-target.h\"\n \n+/* Indexed by enum debug_info_type.  */\n+const char *const debug_type_names[] =\n+{\n+  \"none\", \"stabs\", \"coff\", \"dwarf-2\", \"xcoff\", \"vms\"\n+};\n+\n /* Parse the -femit-struct-debug-detailed option value\n    and set the flag variables. */\n \n@@ -986,7 +992,7 @@ print_filtered_help (unsigned int include_flags,\n \n       /* With the -Q option enabled we change the descriptive text associated\n \t with an option to be an indication of its current setting.  */\n-      if (!quiet_flag)\n+      if (!opts->x_quiet_flag)\n \t{\n \t  void *flag_var = option_flag_var (i, opts);\n \n@@ -1246,6 +1252,9 @@ common_handle_option (struct gcc_options *opts,\n \tunsigned int undoc_mask;\n \tunsigned int i;\n \n+\tif (lang_mask == CL_DRIVER)\n+\t  break;;\n+\n \tundoc_mask = ((opts->x_verbose_flag | opts->x_extra_warnings)\n \t\t      ? 0\n \t\t      : CL_UNDOCUMENTED);\n@@ -1265,6 +1274,9 @@ common_handle_option (struct gcc_options *opts,\n       }\n \n     case OPT__target_help:\n+      if (lang_mask == CL_DRIVER)\n+\tbreak;\n+\n       print_specific_help (CL_TARGET, CL_UNDOCUMENTED, 0, opts, lang_mask);\n       opts->x_exit_after_options = true;\n       break;\n@@ -1280,6 +1292,9 @@ common_handle_option (struct gcc_options *opts,\n \t   --help=target,^undocumented  */\n \tunsigned int exclude_flags = 0;\n \n+\tif (lang_mask == CL_DRIVER)\n+\t  break;\n+\n \t/* Walk along the argument string, parsing each word in turn.\n \t   The format is:\n \t   arg = [^]{word}[,{arg}]\n@@ -1390,6 +1405,9 @@ common_handle_option (struct gcc_options *opts,\n       }\n \n     case OPT__version:\n+      if (lang_mask == CL_DRIVER)\n+\tbreak;\n+\n       opts->x_exit_after_options = true;\n       break;\n \n@@ -1400,6 +1418,9 @@ common_handle_option (struct gcc_options *opts,\n       break;\n \n     case OPT_Werror_:\n+      if (lang_mask == CL_DRIVER)\n+\tbreak;\n+\n       enable_warning_as_error (arg, value, lang_mask, handlers,\n \t\t\t       opts, opts_set, loc, dc);\n       break;\n@@ -1576,7 +1597,7 @@ common_handle_option (struct gcc_options *opts,\n       /* FIXME: Instrumentation we insert makes ipa-reference bitmaps\n \t quadratic.  Disable the pass until better memory representation\n \t is done.  */\n-      if (!opts_set->x_flag_ipa_reference && in_lto_p)\n+      if (!opts_set->x_flag_ipa_reference && opts->x_in_lto_p)\n         opts->x_flag_ipa_reference = false;\n       break;\n \n@@ -1666,7 +1687,7 @@ common_handle_option (struct gcc_options *opts,\n       if (value < 2 || value > 4)\n \terror_at (loc, \"dwarf version %d is not supported\", value);\n       else\n-\tdwarf_version = value;\n+\topts->x_dwarf_version = value;\n       set_debug_level (DWARF2_DEBUG, false, \"\", opts, opts_set, loc);\n       break;\n \n@@ -1713,7 +1734,7 @@ common_handle_option (struct gcc_options *opts,\n \n     case OPT_Wuninitialized:\n       /* Also turn on maybe uninitialized warning.  */\n-      warn_maybe_uninitialized = value;\n+      opts->x_warn_maybe_uninitialized = value;\n       break;\n \n     default:"}, {"sha": "884994cb0e4766cad1b82d6c6dac3e3d36965f68", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d0d30f0b0257d66c13ea9bdd2418acc0e07830/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a7d0d30f0b0257d66c13ea9bdd2418acc0e07830", "patch": "@@ -125,13 +125,6 @@ unsigned int save_decoded_options_count;\n \n const struct gcc_debug_hooks *debug_hooks;\n \n-/* True if this is the lto front end.  This is used to disable\n-   gimple generation and lowering passes that are normally run on the\n-   output of a front end.  These passes must be bypassed for lto since\n-   they have already been done before the gimple was written.  */\n-\n-bool in_lto_p = false;\n-\n /* The FUNCTION_DECL for the function currently being compiled,\n    or 0 if between functions.  */\n tree current_function_decl;\n@@ -658,12 +651,6 @@ compile_file (void)\n   timevar_stop (TV_PHASE_GENERATE);\n }\n \n-/* Indexed by enum debug_info_type.  */\n-const char *const debug_type_names[] =\n-{\n-  \"none\", \"stabs\", \"coff\", \"dwarf-2\", \"xcoff\", \"vms\"\n-};\n-\n /* Print version information to FILE.\n    Each line begins with INDENT (for the case where FILE is the\n    assembler output file).  */"}]}