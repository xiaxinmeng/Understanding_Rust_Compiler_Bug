{"sha": "f1518966c39218ec08ac6f1e0a73b6b650259ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE1MTg5NjZjMzkyMThlYzA4YWM2ZjFlMGE3M2I2YjY1MDI1OWFiOQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-11-01T09:59:50Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-11-01T09:59:50Z"}, "message": "unwind-dw2.c (_Unwind_FindEnclosingFunction): Constify variable.\n\n\n\t* unwind-dw2.c (_Unwind_FindEnclosingFunction): Constify variable.\n\t(uw_frame_state_for): Constify variables.\n\t(extract_cie_info): Constify first argument.\n\n\t* unwind-dw2-fde-darwin.c: Adjust prototype of\n\t_Unwind_Find_registered_FDE for recent changes.\n\t(examine_objects): Constify return value and local variable result.\n\t(_Unwind_Find_FDE): Constify return value and local variable ret.\n\nFrom-SVN: r73172", "tree": {"sha": "979d73e2cbba427d30603801daf43b6ff3a25bd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/979d73e2cbba427d30603801daf43b6ff3a25bd1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1518966c39218ec08ac6f1e0a73b6b650259ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1518966c39218ec08ac6f1e0a73b6b650259ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1518966c39218ec08ac6f1e0a73b6b650259ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1518966c39218ec08ac6f1e0a73b6b650259ab9/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ecde51ffffdb689608d99229cb05959e78e1c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ecde51ffffdb689608d99229cb05959e78e1c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ecde51ffffdb689608d99229cb05959e78e1c13"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "c69fa4ac82a8b33de1dd284ed1b0144e35ab3387", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1518966c39218ec08ac6f1e0a73b6b650259ab9", "patch": "@@ -1,3 +1,14 @@\n+2003-11-01  Andreas Jaeger  <aj@suse.de>\n+\n+\t* unwind-dw2.c (_Unwind_FindEnclosingFunction): Constify variable.\n+\t(uw_frame_state_for): Constify variables.\n+\t(extract_cie_info): Constify first argument.\n+\n+\t* unwind-dw2-fde-darwin.c: Adjust prototype of\n+\t_Unwind_Find_registered_FDE for recent changes.\n+\t(examine_objects): Constify return value and local variable result.\n+\t(_Unwind_Find_FDE): Constify return value and local variable ret.\n+\n 2003-10-31  Per Bothner  <pbothner@apple.com>\n \n \t* c-opts.c (finish_options):  Change to returns boolean - false iff"}, {"sha": "24cf3bca7e999e94018230936eacd6cb7d390c06", "filename": "gcc/unwind-dw2-fde-darwin.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2Funwind-dw2-fde-darwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2Funwind-dw2-fde-darwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2-fde-darwin.c?ref=f1518966c39218ec08ac6f1e0a73b6b650259ab9", "patch": "@@ -41,8 +41,8 @@ typedef int __gthread_mutex_t;\n #define __gthread_mutex_lock(x)  (void)(x)\n #define __gthread_mutex_unlock(x) (void)(x)\n \n-static fde * _Unwind_Find_registered_FDE (void *pc, \n-\t\t\t\t\t  struct dwarf_eh_bases *bases);\n+static const fde * _Unwind_Find_registered_FDE (void *pc,\n+\t\t\t\t\t\tstruct dwarf_eh_bases *bases);\n \n #define _Unwind_Find_FDE _Unwind_Find_registered_FDE\n #include \"unwind-dw2-fde.c\"\n@@ -99,7 +99,7 @@ enum {\n    because this object might be about to be unloaded.  Called by\n    KeyMgr.  */\n \n-static void \n+static void\n live_image_destructor (struct live_images *image)\n {\n   if (image->object_info)\n@@ -136,11 +136,11 @@ live_image_destructor (struct live_images *image)\n    give each unseen image a new `struct object'.  Even if we can't,\n    check whether the PC is inside the FDE of each unseen image.\n  */\n- \n-static inline fde *\n+\n+static inline const fde *\n examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n {\n-  fde *result = NULL;\n+  const fde *result = NULL;\n   struct live_images *image;\n \n   image = _keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_LIVE_IMAGE_LIST);\n@@ -150,7 +150,7 @@ examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n       {\n \tchar *fde;\n \tunsigned long sz;\n-\t\n+\n \tfde = getsectdatafromheader (image->mh, \"__DATA\", \"__eh_frame\", &sz);\n \tif (fde == NULL)\n \t  {\n@@ -159,40 +159,40 @@ examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n \t    if (fde != NULL)\n \t      image->examined_p |= IMAGE_IS_TEXT_MASK;\n \t  }\n-\t\n+\n \t/* If .eh_frame is empty, don't register at all.  */\n \tif (fde != NULL && sz > 0)\n \t  {\n \t    char *real_fde = (fde + image->vm_slide);\n \t    struct object *ob = NULL;\n \t    struct object panicob;\n-\t    \n+\n \t    if (! dont_alloc)\n \t      ob = calloc (1, sizeof (struct object));\n \t    dont_alloc |= ob == NULL;\n \t    if (dont_alloc)\n \t      ob = &panicob;\n-\t    \n+\n \t    ob->pc_begin = (void *)-1;\n \t    ob->tbase = 0;\n \t    ob->dbase = 0;\n \t    ob->u.single = (struct dwarf_fde *)real_fde;\n \t    ob->s.i = 0;\n \t    ob->s.b.encoding = DW_EH_PE_omit;\n \t    ob->fde_end = real_fde + sz;\n-\t    \n+\n \t    image->fde = real_fde;\n-\t    \n+\n \t    result = search_object (ob, pc);\n-\t    \n+\n \t    if (! dont_alloc)\n \t      {\n \t\tstruct object **p;\n \n \t\timage->destructor = live_image_destructor;\n \t\timage->object_info = ob;\n-\t\t\n-\t\timage->examined_p |= (EXAMINED_IMAGE_MASK \n+\n+\t\timage->examined_p |= (EXAMINED_IMAGE_MASK\n \t\t\t\t      | DESTRUCTOR_MAY_BE_CALLED_LIVE);\n \n \t\t/* Insert the object into the classified list.  */\n@@ -206,16 +206,16 @@ examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n \t    if (result)\n \t      {\n \t\tint encoding;\n-\t\t\n+\n \t\tbases->tbase = ob->tbase;\n \t\tbases->dbase = ob->dbase;\n-\t\t\n+\n \t\tencoding = ob->s.b.encoding;\n \t\tif (ob->s.b.mixed_encoding)\n \t\t  encoding = get_fde_encoding (result);\n-\t\tread_encoded_value_with_base (encoding, \n+\t\tread_encoded_value_with_base (encoding,\n \t\t\t\t\t      base_from_object (encoding, ob),\n-\t\t\t\t\t      result->pc_begin, \n+\t\t\t\t\t      result->pc_begin,\n \t\t\t\t\t      (_Unwind_Ptr *)&bases->func);\n \t\tbreak;\n \t      }\n@@ -229,25 +229,25 @@ examine_objects (void *pc, struct dwarf_eh_bases *bases, int dont_alloc)\n   return result;\n }\n \n-fde *\n+const fde *\n _Unwind_Find_FDE (void *pc, struct dwarf_eh_bases *bases)\n {\n   struct km_object_info *the_obj_info;\n-  fde *ret = NULL;\n+  const fde *ret = NULL;\n \n-  the_obj_info = \n+  the_obj_info =\n     _keymgr_get_and_lock_processwide_ptr (KEYMGR_GCC3_DW2_OBJ_LIST);\n   if (! the_obj_info)\n     the_obj_info = calloc (1, sizeof (*the_obj_info));\n-  \n+\n   if (the_obj_info != NULL)\n     {\n       seen_objects = the_obj_info->seen_objects;\n       unseen_objects = the_obj_info->unseen_objects;\n-  \n+\n       ret = _Unwind_Find_registered_FDE (pc, bases);\n     }\n-  \n+\n   /* OK, didn't find it in the list of FDEs we've seen before,\n      so go through and look at the new ones.  */\n   if (ret == NULL)"}, {"sha": "1e92c0238898f34f3b060fa33945366eae10da92", "filename": "gcc/unwind-dw2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1518966c39218ec08ac6f1e0a73b6b650259ab9/gcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funwind-dw2.c?ref=f1518966c39218ec08ac6f1e0a73b6b650259ab9", "patch": "@@ -290,7 +290,7 @@ void *\n _Unwind_FindEnclosingFunction (void *pc)\n {\n   struct dwarf_eh_bases bases;\n-  struct dwarf_fde *fde = _Unwind_Find_FDE (pc-1, &bases);\n+  const struct dwarf_fde *fde = _Unwind_Find_FDE (pc-1, &bases);\n   if (fde)\n     return bases.func;\n   else\n@@ -316,7 +316,7 @@ _Unwind_GetTextRelBase (struct _Unwind_Context *context)\n    or NULL if we encountered an undecipherable augmentation.  */\n \n static const unsigned char *\n-extract_cie_info (struct dwarf_cie *cie, struct _Unwind_Context *context,\n+extract_cie_info (const struct dwarf_cie *cie, struct _Unwind_Context *context,\n \t\t  _Unwind_FrameState *fs)\n {\n   const unsigned char *aug = cie->augmentation;\n@@ -1001,8 +1001,8 @@ execute_cfa_program (const unsigned char *insn_ptr,\n static _Unwind_Reason_Code\n uw_frame_state_for (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n {\n-  struct dwarf_fde *fde;\n-  struct dwarf_cie *cie;\n+  const struct dwarf_fde *fde;\n+  const struct dwarf_cie *cie;\n   const unsigned char *aug, *insn, *end;\n \n   memset (fs, 0, sizeof (*fs));"}]}