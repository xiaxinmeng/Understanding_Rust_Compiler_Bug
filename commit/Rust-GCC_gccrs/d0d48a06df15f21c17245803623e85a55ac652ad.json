{"sha": "d0d48a06df15f21c17245803623e85a55ac652ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkNDhhMDZkZjE1ZjIxYzE3MjQ1ODAzNjIzZTg1YTU1YWM2NTJhZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-10-15T22:40:12Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-15T22:40:12Z"}, "message": "sparc.c (sparc_expand_vec_perm_bmask): Use a scratch register as destination of bmask.\n\n\t* config/sparc/sparc.c (sparc_expand_vec_perm_bmask): Use a scratch\n\tregister as destination of bmask.\n\t(vector_init_bshuffle): Likewise.\n\t* config/sparc/sparc.md (vec_perm_constv8qi): Likewise.\n\t(bmaskdi_vis): Enable only in 64-bit mode.\n\nFrom-SVN: r241205", "tree": {"sha": "0c2e19e7ad32ab196eb675b4986f298363b1c54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c2e19e7ad32ab196eb675b4986f298363b1c54d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0d48a06df15f21c17245803623e85a55ac652ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d48a06df15f21c17245803623e85a55ac652ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d48a06df15f21c17245803623e85a55ac652ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d48a06df15f21c17245803623e85a55ac652ad/comments", "author": null, "committer": null, "parents": [{"sha": "68d01920587dc9424344514676f8000b4add9cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d01920587dc9424344514676f8000b4add9cd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d01920587dc9424344514676f8000b4add9cd4"}], "stats": {"total": 64, "additions": 60, "deletions": 4}, "files": [{"sha": "e616910bb0077c94658def78f5f5b44a3749de63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "patch": "@@ -1,3 +1,11 @@\n+2016-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* config/sparc/sparc.c (sparc_expand_vec_perm_bmask): Use a scratch\n+\tregister as destination of bmask.\n+\t(vector_init_bshuffle): Likewise.\n+\t* config/sparc/sparc.md (vec_perm_constv8qi): Likewise.\n+\t(bmaskdi_vis): Enable only in 64-bit mode.\n+\n 2016-10-15  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.c (rs6000_get_separate_components): Do not"}, {"sha": "f737061b92cb3dff062fce12af254547c1083c7f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "patch": "@@ -12044,7 +12044,7 @@ sparc_expand_vec_perm_bmask (machine_mode vmode, rtx sel)\n     }\n \n   /* Always perform the final addition/merge within the bmask insn.  */\n-  emit_insn (gen_bmasksi_vis (gen_rtx_REG (SImode, 0), sel, t_1));\n+  emit_insn (gen_bmasksi_vis (gen_reg_rtx (SImode), sel, t_1));\n }\n \n /* Implement TARGET_FRAME_POINTER_REQUIRED.  */\n@@ -12310,7 +12310,7 @@ vector_init_bshuffle (rtx target, rtx elt, machine_mode mode,\n     }\n \n   sel = force_reg (SImode, GEN_INT (bmask));\n-  emit_insn (gen_bmasksi_vis (gen_rtx_REG (SImode, 0), sel, const0_rtx));\n+  emit_insn (gen_bmasksi_vis (gen_reg_rtx (SImode), sel, const0_rtx));\n   emit_insn (final_insn);\n }\n "}, {"sha": "64376c7cad361076d469cb5c17e95ba711cba99c", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "patch": "@@ -8548,7 +8548,7 @@\n                  (match_operand:DI 2 \"register_or_zero_operand\" \"rJ\")))\n    (set (zero_extract:DI (reg:DI GSR_REG) (const_int 32) (const_int 32))\n         (plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_VIS2\"\n+  \"TARGET_VIS2 && TARGET_ARCH64\"\n   \"bmask\\t%r1, %r2, %0\"\n   [(set_attr \"type\" \"array\")\n    (set_attr \"v3pipe\" \"true\")])\n@@ -8593,7 +8593,7 @@\n     mask |= (INTVAL (XVECEXP (sel, 0, i)) & 0xf) << (28 - i*4);\n   sel = force_reg (SImode, gen_int_mode (mask, SImode));\n \n-  emit_insn (gen_bmasksi_vis (gen_rtx_REG (SImode, 0), sel, const0_rtx));\n+  emit_insn (gen_bmasksi_vis (gen_reg_rtx (SImode), sel, const0_rtx));\n   emit_insn (gen_bshufflev8qi_vis (operands[0], operands[1], operands[2]));\n   DONE;\n })"}, {"sha": "e55d653284c256afdf260b60cc0103378fe5a330", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "patch": "@@ -1,3 +1,9 @@\n+2016-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.target/sparc/bmaskbshuf.c: Rename to...\n+\t* gcc.target/sparc/bmaskbshuf-1.c: ...this.\n+\t* gcc.target/sparc/bmaskbshuf-2.c: New test.\n+\n 2016-10-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/popc.c: Rename to..."}, {"sha": "22809b5f5e997eca2a1192357a5aabf3937216b3", "filename": "gcc/testsuite/gcc.target/sparc/bmaskbshuf-1.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-1.c?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "previous_filename": "gcc/testsuite/gcc.target/sparc/bmaskbshuf.c"}, {"sha": "874e3db9982bbaceb9e0dcb4abceec8afed6f8a7", "filename": "gcc/testsuite/gcc.target/sparc/bmaskbshuf-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d48a06df15f21c17245803623e85a55ac652ad/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fbmaskbshuf-2.c?ref=d0d48a06df15f21c17245803623e85a55ac652ad", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target ultrasparc_vis2_hw } */\n+/* { dg-options \"-mcpu=ultrasparc3 -O\" } */\n+\n+typedef unsigned int Vect __attribute__((vector_size(8)));\n+\n+extern void abort (void);\n+\n+Vect a, b, c, d;\n+\n+__attribute__((noinline, noclone)) void test (void)\n+{\n+  Vect mask = { 2, 2 };\n+  int i;\n+\n+  c = __builtin_shuffle (a, mask);\n+  d = __builtin_shuffle (a, b, mask);\n+\n+  __asm__ (\"\" : : \"r\" (&c), \"r\" (&d) : \"memory\");\n+\n+  for (i = 0; i < 2; ++i)\n+    if (c[i] != a[mask[i] & 1])\n+      abort ();\n+    else if (mask[i] & 2)\n+      {\n+\tif (d[i] != b[mask[i] & 1])\n+\t  abort ();\n+      }\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  for (i = 0; i < 2; ++i)\n+    {\n+      a[i] = i + 2;\n+      b[i] = 2 + i + 2;\n+    }\n+\n+  test ();\n+  return 0;\n+}"}]}