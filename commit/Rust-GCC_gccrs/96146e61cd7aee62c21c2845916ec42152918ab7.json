{"sha": "96146e61cd7aee62c21c2845916ec42152918ab7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxNDZlNjFjZDdhZWU2MmMyMWMyODQ1OTE2ZWM0MjE1MjkxOGFiNw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-04T13:19:14Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-08-04T13:22:51Z"}, "message": "Fold (X<<C1)^(X<<C2) to a multiplication when possible.\n\nThe easiest way to motivate these additions to match.pd is with the\nfollowing example:\n\nunsigned int foo(unsigned char i) {\n  return i | (i<<8) | (i<<16) | (i<<24);\n}\n\nwhich mainline with -O2 on x86_64 currently generates:\nfoo:\tmovzbl  %dil, %edi\n\tmovl    %edi, %eax\n\tmovl    %edi, %edx\n\tsall    $8, %eax\n\tsall    $16, %edx\n\torl     %edx, %eax\n\torl     %edi, %eax\n\tsall    $24, %edi\n\torl     %edi, %eax\n\tret\n\nbut with this patch now becomes:\nfoo:\tmovzbl  %dil, %eax\n        imull   $16843009, %eax, %eax\n        ret\n\nInterestingly, this transformation is already applied when using\naddition, allowing synth_mult to select an optimal sequence, but\nnot when using the equivalent bit-wise ior or xor operators.\n\nThe solution is to use tree_nonzero_bits to check that the\npotentially non-zero bits of each operand don't overlap, which\nensures that BIT_IOR_EXPR and BIT_XOR_EXPR produce the same\nresults as PLUS_EXPR, which effectively generalizes the old\nfold_plusminus_mult_expr.  Technically, the transformation\nis to canonicalize (X*C1)|(X*C2) and (X*C1)^(X*C2) to\nX*(C1+C2) where X and X<<C are considered special cases.\n\n2021-08-04  Roger Sayle  <roger@nextmovesoftware.com>\n\t    Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/ChangeLog\n\t* match.pd (bit_ior, bit_xor): Canonicalize (X*C1)|(X*C2) and\n\t(X*C1)^(X*C2) as X*(C1+C2), and related variants, using\n\ttree_nonzero_bits to ensure that operands are bit-wise disjoint.\n\ngcc/testsuite/ChangeLog\n\t* gcc.dg/fold-ior-4.c: New test.", "tree": {"sha": "99914e14e7b67d97aa6e4789f3159c9e4ad02058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99914e14e7b67d97aa6e4789f3159c9e4ad02058"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96146e61cd7aee62c21c2845916ec42152918ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96146e61cd7aee62c21c2845916ec42152918ab7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96146e61cd7aee62c21c2845916ec42152918ab7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96146e61cd7aee62c21c2845916ec42152918ab7/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d04fe49239d91787850036599164788f1c87785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d04fe49239d91787850036599164788f1c87785", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d04fe49239d91787850036599164788f1c87785"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "0fcfd0ea62c043dc217d0d560ce5b7e569b70e7d", "filename": "gcc/match.pd", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96146e61cd7aee62c21c2845916ec42152918ab7/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96146e61cd7aee62c21c2845916ec42152918ab7/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=96146e61cd7aee62c21c2845916ec42152918ab7", "patch": "@@ -2833,6 +2833,62 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (convert (mult (convert:t @0) { cst; })))))\n #endif\n \n+/* Canonicalize (X*C1)|(X*C2) and (X*C1)^(X*C2) to (C1+C2)*X when\n+   tree_nonzero_bits allows IOR and XOR to be treated like PLUS.\n+   Likewise, handle (X<<C3) and X as legitimate variants of X*C.  */\n+(for op (bit_ior bit_xor)\n+ (simplify\n+  (op (mult:s@0 @1 INTEGER_CST@2)\n+      (mult:s@3 @1 INTEGER_CST@4))\n+  (if (INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type)\n+       && (tree_nonzero_bits (@0) & tree_nonzero_bits (@3)) == 0)\n+   (mult @1\n+\t { wide_int_to_tree (type, wi::to_wide (@2) + wi::to_wide (@4)); })))\n+ (simplify\n+  (op:c (mult:s@0 @1 INTEGER_CST@2)\n+\t(lshift:s@3 @1 INTEGER_CST@4))\n+  (if (INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type)\n+       && tree_int_cst_sgn (@4) > 0\n+       && (tree_nonzero_bits (@0) & tree_nonzero_bits (@3)) == 0)\n+   (with { wide_int wone = wi::one (TYPE_PRECISION (type));\n+\t   wide_int c = wi::add (wi::to_wide (@2),\n+\t\t\t\t wi::lshift (wone, wi::to_wide (@4))); }\n+    (mult @1 { wide_int_to_tree (type, c); }))))\n+ (simplify\n+  (op:c (mult:s@0 @1 INTEGER_CST@2)\n+\t@1)\n+  (if (INTEGRAL_TYPE_P (type) && TYPE_OVERFLOW_WRAPS (type)\n+       && (tree_nonzero_bits (@0) & tree_nonzero_bits (@1)) == 0)\n+   (mult @1\n+\t { wide_int_to_tree (type,\n+\t\t\t     wi::add (wi::to_wide (@2), 1)); })))\n+ (simplify\n+  (op (lshift:s@0 @1 INTEGER_CST@2)\n+      (lshift:s@3 @1 INTEGER_CST@4))\n+  (if (INTEGRAL_TYPE_P (type)\n+       && tree_int_cst_sgn (@2) > 0\n+       && tree_int_cst_sgn (@4) > 0\n+       && (tree_nonzero_bits (@0) & tree_nonzero_bits (@3)) == 0)\n+   (with { tree t = type;\n+\t   if (!TYPE_OVERFLOW_WRAPS (t))\n+\t     t = unsigned_type_for (t);\n+\t   wide_int wone = wi::one (TYPE_PRECISION (t));\n+\t   wide_int c = wi::add (wi::lshift (wone, wi::to_wide (@2)),\n+\t\t\t\t wi::lshift (wone, wi::to_wide (@4))); }\n+    (convert (mult:t (convert:t @1) { wide_int_to_tree (t,c); })))))\n+ (simplify\n+  (op:c (lshift:s@0 @1 INTEGER_CST@2)\n+\t@1)\n+  (if (INTEGRAL_TYPE_P (type)\n+       && tree_int_cst_sgn (@2) > 0\n+       && (tree_nonzero_bits (@0) & tree_nonzero_bits (@1)) == 0)\n+   (with { tree t = type;\n+\t   if (!TYPE_OVERFLOW_WRAPS (t))\n+\t     t = unsigned_type_for (t);\n+\t   wide_int wone = wi::one (TYPE_PRECISION (t));\n+\t   wide_int c = wi::add (wi::lshift (wone, wi::to_wide (@2)), wone); }\n+    (convert (mult:t (convert:t @1) { wide_int_to_tree (t, c); }))))))\n+\n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */\n \n (for minmax (min max FMIN_ALL FMAX_ALL)"}, {"sha": "8f7213eb6c948c154cc47a6c79e78a6f8f4b8f95", "filename": "gcc/testsuite/gcc.dg/fold-ior-4.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96146e61cd7aee62c21c2845916ec42152918ab7/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-ior-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96146e61cd7aee62c21c2845916ec42152918ab7/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-ior-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-ior-4.c?ref=96146e61cd7aee62c21c2845916ec42152918ab7", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+unsigned int test_ior(unsigned char i)\n+{\n+  return i | (i<<8) | (i<<16) | (i<<24);\n+}\n+\n+unsigned int test_xor(unsigned char i)\n+{\n+  return i ^ (i<<8) ^ (i<<16) ^ (i<<24);\n+}\n+\n+unsigned int test_ior_1s(unsigned char i)\n+{\n+  return i | (i<<8);\n+}\n+\n+unsigned int test_ior_1u(unsigned char i)\n+{\n+  unsigned int t = i;\n+  return t | (t<<8);\n+}\n+\n+unsigned int test_xor_1s(unsigned char i)\n+{\n+  return i ^ (i<<8);\n+}\n+\n+unsigned int test_xor_1u(unsigned char i)\n+{\n+  unsigned int t = i;\n+  return t ^ (t<<8);\n+}\n+\n+unsigned int test_ior_2s(unsigned char i)\n+{\n+  return (i<<8) | (i<<16);\n+}\n+\n+unsigned int test_ior_2u(unsigned char i)\n+{\n+  unsigned int t = i;\n+  return (t<<8) | (t<<16);\n+}\n+\n+unsigned int test_xor_2s(unsigned char i)\n+{\n+  return (i<<8) ^ (i<<16);\n+}\n+\n+unsigned int test_xor_2u(unsigned char i)\n+{\n+  unsigned int t = i;\n+  return (t<<8) ^ (t<<16);\n+}\n+\n+/* { dg-final { scan-tree-dump-not \" \\\\^ \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \" \\\\| \" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\* 16843009\" 2 \"optimized\" } } */\n+"}]}