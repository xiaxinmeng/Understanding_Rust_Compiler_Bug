{"sha": "cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjZGJlNTQ4MDJjNjlhN2Q3MzFkOGUxZjQ4Yjg1OGZlNzNhNDQ1Mg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-09-30T18:04:38Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-09-30T18:04:38Z"}, "message": "DataInput.java: Merge with Classpath.\n\n\t* java/io/DataInput.java:  Merge with Classpath.\n\t* java/io/DataOutput.java:  Idem.\n\t* java/io/FilenameFilter.java:  Idem.\n\t* java/io/Serializable.java:  Idem.\n\t* java/lang/Cloneable.java:  Idem.\n\t* java/lang/Comparable.java:  Idem.\n\t* java/lang/Runnable.java:  Idem.\n\t* java/lang/reflect/Member.java:  Idem.\n\t* java/net/ContentHandlerFactory.java:  Idem.\n\t* java/net/FileNameMap.java:  Idem.\n\t* java/net/SocketImplFactory.java:  Idem.\n\t* java/net/SocketOptions.java:  Idem.\n\t* java/net/URLStreamHandlerFactory.java:  Idem.\n\nFrom-SVN: r45910", "tree": {"sha": "2cec7bc9d47b85121f85787a13c11ecc61e48402", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2cec7bc9d47b85121f85787a13c11ecc61e48402"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/comments", "author": null, "committer": null, "parents": [{"sha": "c9b9c05cc1242181a04df16d7db71c885fbc54f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b9c05cc1242181a04df16d7db71c885fbc54f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b9c05cc1242181a04df16d7db71c885fbc54f5"}], "stats": {"total": 1487, "additions": 1269, "deletions": 218}, "files": [{"sha": "bebc677d6b5f16c78f31877ae8456ae3f496c2bc", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,3 +1,19 @@\n+2001-09-30  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/io/DataInput.java:  Merge with Classpath.\n+\t* java/io/DataOutput.java:  Idem.\n+\t* java/io/FilenameFilter.java:  Idem.\n+\t* java/io/Serializable.java:  Idem.\n+\t* java/lang/Cloneable.java:  Idem.\n+\t* java/lang/Comparable.java:  Idem.\n+\t* java/lang/Runnable.java:  Idem.\n+\t* java/lang/reflect/Member.java:  Idem.\n+\t* java/net/ContentHandlerFactory.java:  Idem.\n+\t* java/net/FileNameMap.java:  Idem.\n+\t* java/net/SocketImplFactory.java:  Idem.\n+\t* java/net/SocketOptions.java:  Idem.\n+\t* java/net/URLStreamHandlerFactory.java:  Idem.\n+\n 2001-09-30  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* java/lang/natClass.cc (_Jv_IsAssignableFrom): Handle the case of"}, {"sha": "caea6828707b6b5a7a1eec421bc4115aadae9d63", "filename": "libjava/java/io/DataInput.java", "status": "modified", "additions": 449, "deletions": 29, "changes": 478, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FDataInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FDataInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataInput.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,41 +1,461 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* DataInput.java -- Interface for reading data from a stream\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n-package java.io;\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date October 2, 1998.  \n- */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+  * This interface is implemented by classes that can data from streams \n+  * into Java primitive types. \n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public interface DataInput\n {\n-  public boolean readBoolean() throws IOException;\n-  public byte readByte() throws IOException;\n-  public char readChar() throws IOException;\n-  public double readDouble() throws IOException;\n-  public float readFloat() throws IOException;\n-  public void readFully(byte[] b)\n-    throws IOException, NullPointerException;\n-  public void readFully(byte[] b, int off, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException;\n-  public int readInt() throws IOException;\n-  public String readLine() throws IOException;\n-  public long readLong() throws IOException;\n-  public short readShort() throws IOException;\n-  public int readUnsignedByte() throws IOException;\n-  public int readUnsignedShort() throws IOException;\n-  public String readUTF() throws IOException;\n-  public int skipBytes(int n) throws IOException;\n-}\n+\n+/**\n+  * This method reads a Java boolean value from an input stream.  It does\n+  * so by reading a single byte of data.  If that byte is zero, then the\n+  * value returned is <code>false</code>.  If the byte is non-zero, then\n+  * the value returned is <code>true</code>.\n+  * <p>\n+  * This method can read a <code>boolean</code> written by an object\n+  * implementing the <code>writeBoolean()</code> method in the\n+  * <code>DataOutput</code> interface.\n+  *\n+  * @return The <code>boolean</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the boolean\n+  * @exception IOException If any other error occurs\n+  */\n+boolean\n+readBoolean() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java byte value from an input stream.  The value\n+  * is in the range of -128 to 127.\n+  * <p>\n+  * This method can read a <code>byte</code> written by an object\n+  * implementing the \n+  * <code>writeByte()</code> method in the <code>DataOutput</code> interface.\n+  * <p>\n+  * @return The <code>byte</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the byte\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+byte\n+readByte() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads 8 unsigned bits into a Java <code>int</code> value from\n+  * the stream. The value returned is in the range of 0 to 255.\n+  * <p>\n+  * This method can read an unsigned byte written by an object implementing the\n+  * <code>writeUnsignedByte()</code> method in the <code>DataOutput</code>\n+  * interface.\n+  *\n+  * @return The unsigned bytes value read as a Java <code>int</code>.\n+  *\n+  * @exception EOFException If end of file is reached before reading the value\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+int\n+readUnsignedByte() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java <code>char</code> value from an input stream.  \n+  * It operates by reading two bytes from the stream and converting them to \n+  * a single 16-bit Java <code>char</code>.  The two bytes are stored most\n+  * significant byte first (i.e., \"big endian\") regardless of the native\n+  * host byte ordering. \n+  * <p>\n+  * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+  * first and second byte read from the stream respectively, they will be\n+  * transformed to a <code>char</code> in the following manner:\n+  * <p>\n+  * <code>(char)((byte1 << 8) + byte2)</code>\n+  * <p>\n+  * This method can read a <code>char</code> written by an object implementing\n+  * the\n+  * <code>writeChar()</code> method in the <code>DataOutput</code> interface.\n+  *\n+  * @return The <code>char</code> value read \n+  *\n+  * @exception EOFException If end of file is reached before reading the char\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+char\n+readChar() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a signed 16-bit value into a Java in from the stream.\n+  * It operates by reading two bytes from the stream and converting them to \n+  * a single 16-bit Java <code>short</code>.  The two bytes are stored most\n+  * significant byte first (i.e., \"big endian\") regardless of the native\n+  * host byte ordering. \n+  * <p>\n+  * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+  * first and second byte read from the stream respectively, they will be\n+  * transformed to a <code>short</code> in the following manner:\n+  * <p>\n+  * <code>(short)((byte1 << 8) + byte2)</code>\n+  * <p>\n+  * The value returned is in the range of -32768 to 32767.\n+  * <p>\n+  * This method can read a <code>short</code> written by an object implementing\n+  * the <code>writeShort()</code> method in the <code>DataOutput</code>\n+  * interface.\n+  *\n+  * @return The <code>short</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the value\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+short\n+readShort() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads 16 unsigned bits into a Java int value from the stream.\n+  * It operates by reading two bytes from the stream and converting them to \n+  * a single Java <code>int</code>.  The two bytes are stored most\n+  * significant byte first (i.e., \"big endian\") regardless of the native\n+  * host byte ordering. \n+  * <p>\n+  * As an example, if <code>byte1</code> and <code>byte2</code> represent the\n+  * first and second byte read from the stream respectively, they will be\n+  * transformed to an <code>int</code> in the following manner:\n+  * <p>\n+  * <code>(int)((byte1 << 8) + byte2)</code>\n+  * <p>\n+  * The value returned is in the range of 0 to 65535.\n+  * <p>\n+  * This method can read an unsigned short written by an object implementing\n+  * the <code>writeUnsignedShort()</code> method in the <code>DataOutput</code>\n+  * interface.\n+  *\n+  * @return The unsigned short value read as a Java <code>int</code>.\n+  *\n+  * @exception EOFException If end of file is reached before reading the value\n+  * @exception IOException If any other error occurs\n+  */\n+int\n+readUnsignedShort() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java <code>int</code> value from an input stream\n+  * It operates by reading four bytes from the stream and converting them to \n+  * a single Java <code>int</code>.  The bytes are stored most\n+  * significant byte first (i.e., \"big endian\") regardless of the native\n+  * host byte ordering. \n+  * <p>\n+  * As an example, if <code>byte1</code> through <code>byte4</code> represent\n+  * the first four bytes read from the stream, they will be\n+  * transformed to an <code>int</code> in the following manner:\n+  * <p>\n+  * <code>(int)((byte1 << 24) + (byte2 << 16) + (byte3 << 8) + byte4))</code>\n+  * <p>\n+   The value returned is in the range of -2147483648 to 2147483647.\n+  * <p>\n+  * This method can read an <code>int</code> written by an object implementing\n+  * the <code>writeInt()</code> method in the <code>DataOutput</code> interface.\n+  *\n+  * @return The <code>int</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the int\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+int\n+readInt() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java <code>long</code> value from an input stream\n+  * It operates by reading eight bytes from the stream and converting them to \n+  * a single Java <code>long</code>.  The bytes are stored most\n+  * significant byte first (i.e., \"big endian\") regardless of the native\n+  * host byte ordering. \n+  * <p>\n+  * As an example, if <code>byte1</code> through <code>byte8</code> represent\n+  * the first eight bytes read from the stream, they will be\n+  * transformed to an <code>long</code> in the following manner:\n+  * <p>\n+  * <code>(long)((byte1 << 56) + (byte2 << 48) + (byte3 << 40) + \n+  * (byte4 << 32) + (byte5 << 24) + (byte6 << 16) + (byte7 << 8) + byte9))\n+  * </code>\n+  * <p>\n+  * The value returned is in the range of -9223372036854775808 to\n+  * 9223372036854775807.\n+  * <p>\n+  * This method can read an <code>long</code> written by an object implementing\n+  * the <code>writeLong()</code> method in the <code>DataOutput</code>\n+  * interface.\n+  *\n+  * @return The <code>long</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the long\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+long\n+readLong() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java float value from an input stream.  It operates\n+  * by first reading an <code>int</code> value from the stream by calling the\n+  * <code>readInt()</code> method in this interface, then converts that\n+  * <code>int</code> to a <code>float</code> using the\n+  * <code>intBitsToFloat</code> method in the class\n+  * <code>java.lang.Float</code>.\n+  * <p>\n+  * This method can read a <code>float</code> written by an object implementing\n+  * the <code>writeFloat()</code> method in the <code>DataOutput</code>\n+  * interface.\n+  *\n+  * @return The <code>float</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the float\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see java.lang.Float\n+  * @see DataOutput\n+  */\n+float\n+readFloat() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a Java double value from an input stream.  It operates\n+  * by first reading a <code>long</code> value from the stream by calling the\n+  * <code>readLong()</code> method in this interface, then converts that\n+  * <code>long</code> to a <code>double</code> using the\n+  * <code>longBitsToDouble</code> method in the class\n+  * <code>java.lang.Double</code>.\n+  * <p>\n+  * This method can read a <code>double</code> written by an object\n+  * implementing the <code>writeDouble()</code> method in the\n+  * <code>DataOutput</code> interface.\n+  *\n+  * @return The <code>double</code> value read\n+  *\n+  * @exception EOFException If end of file is reached before reading the double\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see java.lang.Double\n+  * @see DataOutput\n+  */\n+double\n+readDouble() throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads the next line of text data from an input stream.\n+  * It operates by reading bytes and converting those bytes to <code>char</code>\n+  * values by treating the byte read as the low eight bits of the\n+  * <code>char</code> and using 0 as the high eight bits.  Because of this,\n+  * it does not support the full 16-bit Unicode character set.\n+  * <P>\n+  * The reading of bytes ends when either the end of file or a line terminator\n+  * is encountered.  The bytes read are then returned as a <code>String</code>.\n+  * A line terminator is a byte sequence consisting of either \n+  * <code>\\r</code>, <code>\\n</code> or <code>\\r\\n</code>.  These termination\n+  * charaters are discarded and are not returned as part of the string.\n+  * <p>\n+  * This method can read data that was written by an object implementing the\n+  * <code>writeLine()</code> method in <code>DataOutput</code>.\n+  *\n+  * @return The line read as a <code>String</code>\n+  *\n+  * @exception IOException If an error occurs\n+  *\n+  * @see DataOutput\n+  */\n+String\n+readLine() throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads a <code>String</code> from an input stream that is\n+  * encoded in a modified UTF-8 format.  This format has a leading two byte\n+  * sequence that contains the remaining number of bytes to read.  This two byte\n+  * sequence is read using the <code>readUnsignedShort()</code> method of this\n+  * interface.\n+  *\n+  * After the number of remaining bytes have been determined, these bytes\n+  * are read an transformed into <code>char</code> values.  These\n+  * <code>char</code> values are encoded in the stream using either a one, two,\n+  * or three byte format.\n+  * The particular format in use can be determined by examining the first\n+  * byte read.  \n+  * <p>\n+  * If the first byte has a high order bit of 0, then\n+  * that character consists on only one byte.  This character value consists\n+  * of seven bits that are at positions 0 through 6 of the byte.  As an\n+  * example, if <code>byte1</code> is the byte read from the stream, it would\n+  * be converted to a <code>char</code> like so:\n+  * <p>\n+  * <code>(char)byte1</code>\n+  * <p>\n+  * If the first byte has 110 as its high order bits, then the \n+  * character consists of two bytes.  The bits that make up the character\n+  * value are in positions 0 through 4 of the first byte and bit positions\n+  * 0 through 5 of the second byte.  (The second byte should have \n+  * 10 as its high order bits).  These values are in most significant\n+  * byte first (i.e., \"big endian\") order.\n+  * <p>\n+  * As an example, if <code>byte1</code> and <code>byte2</code> are the first\n+  * two bytes read respectively, and the high order bits of them match the\n+  * patterns which indicate a two byte character encoding, then they would be\n+  * converted to a Java <code>char</code> like so:\n+  * <p>\n+  * <code>(char)(((byte1 & 0x1F) << 6) + (byte2 & 0x3F))</code>\n+  * <p>\n+  * If the first byte has a 1110 as its high order bits, then the\n+  * character consists of three bytes.  The bits that make up the character\n+  * value are in positions 0 through 3 of the first byte and bit positions\n+  * 0 through 5 of the other two bytes.  (The second and third bytes should\n+  * have 10 as their high order bits).  These values are in most\n+  * significant byte first (i.e., \"big endian\") order.\n+  * <p>\n+  * As an example, if <code>byte1</code>, <code>byte2</code>, and\n+  * <code>byte3</code> are the three bytes read, and the high order bits of\n+  * them match the patterns which indicate a three byte character encoding,\n+  * then they would be converted to a Java <code>char</code> like so:\n+  *\n+  * <code>\n+  * (char)(((byte1 & 0x0F) << 12) + ((byte2 & 0x3F) + (byte3 & 0x3F))\n+  * </code>\n+  *\n+  * Note that all characters are encoded in the method that requires the\n+  * fewest number of bytes with the exception of the character with the\n+  * value of <code>\\<llll>u0000</code> which is encoded as two bytes.  This is\n+  * a modification of the UTF standard used to prevent C language style\n+  * <code>NUL</code> values from appearing in the byte stream.\n+  * <p>\n+  * This method can read data that was written by an object implementing the\n+  * <code>writeUTF()</code> method in <code>DataOutput</code>.\n+  * \n+  * @returns The <code>String</code> read\n+  *\n+  * @exception EOFException If end of file is reached before reading the String\n+  * @exception UTFDataFormatException If the data is not in UTF-8 format\n+  * @exception IOException If any other error occurs\n+  *\n+  * @see DataOutput\n+  */\n+String\n+readUTF() throws EOFException, UTFDataFormatException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads raw bytes into the passed array until the array is\n+  * full.  Note that this method blocks until the data is available and\n+  * throws an exception if there is not enough data left in the stream to\n+  * fill the buffer\n+  *\n+  * @param buf The buffer into which to read the data\n+  *\n+  * @exception EOFException If end of file is reached before filling the buffer\n+  * @exception IOException If any other error occurs\n+  */\n+void\n+readFully(byte[] buf) throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method reads raw bytes into the passed array <code>buf</code> starting\n+  * <code>offset</code> bytes into the buffer.  The number of bytes read will be\n+  * exactly <code>len</code>.  Note that this method blocks until the data is \n+  * available and * throws an exception if there is not enough data left in \n+  * the stream to read <code>len</code> bytes.\n+  *\n+  * @param buf The buffer into which to read the data\n+  * @param offset The offset into the buffer to start storing data\n+  * @param len The number of bytes to read into the buffer\n+  *\n+  * @exception EOFException If end of file is reached before filling the buffer\n+  * @exception IOException If any other error occurs\n+  */\n+void\n+readFully(byte[] buf, int offset, int len) throws EOFException, IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method skips and discards the specified number of bytes in an\n+  * input stream\n+  *\n+  * @param num_bytes The number of bytes to skip\n+  *\n+  * @return The number of bytes actually skipped, which will always be\n+  *         <code>num_bytes</code>\n+  *\n+  * @exception EOFException If end of file is reached before all bytes can be\n+  *                         skipped\n+  * @exception IOException If any other error occurs\n+  */\n+int\n+skipBytes(int n) throws EOFException, IOException;\n+\n+} // interface DataInput"}, {"sha": "bb6c3c6a2b926d333f54ae60ae7c1aafbeba88c2", "filename": "libjava/java/io/DataOutput.java", "status": "modified", "additions": 204, "deletions": 31, "changes": 235, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FDataOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FDataOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FDataOutput.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,44 +1,217 @@\n-// DataOutput.java - Interface for data output conversions.\n+/* DataOutput.java -- Interface for writing data from a stream\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */ \n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to version 1.1.\n  */\n \n+/**\n+  * This interface is implemented by classes that can wrte data to streams \n+  * from Java primitive types.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n public interface DataOutput\n {\n-  public abstract void write (int b) throws IOException;\n-  public abstract void write (byte[] b)\n-    throws IOException, NullPointerException;\n-  public abstract void write (byte[] b, int off, int len)\n-    throws IOException, NullPointerException, IndexOutOfBoundsException;\n-  public abstract void writeBoolean (boolean v) throws IOException;\n-  public abstract void writeByte (int v) throws IOException;\n-  public abstract void writeShort (int v) throws IOException;\n-  public abstract void writeChar (int v) throws IOException;\n-  public abstract void writeInt (int v) throws IOException;\n-  public abstract void writeLong (long v) throws IOException;\n-  public abstract void writeFloat (float v) throws IOException;\n-  public abstract void writeDouble (double v) throws IOException;\n-  public abstract void writeBytes (String s)\n-    throws IOException, NullPointerException;\n-  public abstract void writeChars (String s)\n-    throws IOException, NullPointerException;\n-  public abstract void writeUTF (String s)\n-    throws IOException, NullPointerException;\n-}\n+\n+/**\n+  * This method writes a Java boolean value to an output stream\n+  *\n+  * @param value The boolean value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeBoolean(boolean value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java byte value to an output stream\n+  *\n+  * @param value The int value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeByte(int value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java char value to an output stream\n+  *\n+  * @param value The char value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeChar(int value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java int value to an output stream as a 16 bit value\n+  *\n+  * @param value The int value to write as a 16-bit value\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeShort(int value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java int value to an output stream\n+  *\n+  * @param value The int value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeInt(int value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java long value to an output stream\n+  *\n+  * @param value The long value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeLong(long value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java float value to an output stream\n+  *\n+  * @param value The float value to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeFloat(float value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a Java double value to an output stream\n+  *\n+  * @param value The double value to write\n+  *\n+  * @exception IOException If any other error occurs\n+  */\n+void\n+writeDouble(double value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a String to an output stream as an array of bytes\n+  *\n+  * @param value The String to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeBytes(String value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a String to an output stream as an array of char's\n+  *\n+  * @param value The String to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeChars(String value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes a String to an output stream encoded in\n+  * UTF-8 format.\n+  *\n+  * @param value The String to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+writeUTF(String value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes an 8-bit value (passed into the method as a Java\n+  * int) to an output stream.\n+  *\n+  * @param value The byte to write to the output stream\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+write(int value) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes the raw byte array passed in to the output stream.\n+  *\n+  * @param buf The byte array to write\n+  *\n+  * @exception IOException If an error occurs\n+  */\n+void\n+write(byte[] buf) throws IOException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * This method writes raw bytes from the passed array <code>buf</code> starting\n+  * <code>offset</code> bytes into the buffer.  The number of bytes written will be\n+  * exactly <code>len</code>. \n+  *\n+  * @param buf The buffer from which to write the data\n+  * @param offset The offset into the buffer to start writing data from\n+  * @param len The number of bytes to write from the buffer to the output stream\n+  *\n+  * @exception IOException If any other error occurs\n+  */\n+void\n+write(byte[] buf, int offset, int len) throws IOException;\n+\n+} // interface DataOutput"}, {"sha": "3e9eb9011d70fd8522b5287088ce3a16262187da", "filename": "libjava/java/io/FilenameFilter.java", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FFilenameFilter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FFilenameFilter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFilenameFilter.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,26 +1,62 @@\n-// FilenameFilter.java - Compute subset of list of file names\n+/* FilenameFilter.java -- Filter a list of filenames\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.io;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date September 24, 1998 \n- */\n+\n+package java.io;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * Status:  Complete to 1.1.\n  */\n \n+/**\n+  * This interface has one method which is used for filtering filenames\n+  * returned in a directory listing.  It is currently used by the \n+  * <code>File.list()</code> method and by the filename dialog in AWT.\n+  * <p>\n+  * The method in this interface determines if a particular file should\n+  * or should not be included in the file listing.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Tom Tromey <tromey@cygnus.com>\n+  */\n public interface FilenameFilter\n {\n-  public abstract boolean accept (File dir, String name);\n-}\n+\n+/**\n+  * This method determines whether or not a given file should be included\n+  * in a directory listing.\n+  *\n+  * @param dir The <code>File</code> instance for the directory being read\n+  * @param name The name of the file to test\n+  *\n+  * @return <code>true</code> if the file should be included in the list,\n+  * <code>false</code> otherwise.\n+  */\n+boolean\n+accept(File dir, String name);\n+\n+} // interface FilenameFilter"}, {"sha": "ff6d08cddeda9d8589d927edfbc762cb6707c1bc", "filename": "libjava/java/io/Serializable.java", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FSerializable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fio%2FSerializable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FSerializable.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,21 +1,43 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Serializable.java -- Interface to indicate a class may be serialized\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.io;\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date August 18, 1998.  \n- */\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * Status:  Believed complete\n  */\n \n+/**\n+  * This interface has no methods. It simply serves to indicate that\n+  * the implementing class may be serialized.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n public interface Serializable\n {\n-}\n+} // interface Serializable"}, {"sha": "1524409ee20c81eb7bef33f1b63ac7e8bffc22cc", "filename": "libjava/java/lang/Cloneable.java", "status": "modified", "additions": 64, "deletions": 11, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FCloneable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FCloneable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FCloneable.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,23 +1,76 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Cloneable.java -- Interface for marking objects cloneable by Object.clone()\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 2, 1998.  \n- */\n+\n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/**\n+ * This interface should be implemented by classes wishing to\n+ * support of override <code>Object.clone()</code>.  The default\n+ * behaviour of <code>clone()</code> performs a shallow copy, but\n+ * subclasses often change this to perform a deep copy.  Therefore,\n+ * it is a good idea to document how deep your clone will go.\n+ * If <code>clone()</code> is called on an object which does not\n+ * implement this interface, a <code>CloneNotSupportedException</code>\n+ * will be thrown.\n+ * <p>\n+ *\n+ * This interface is simply a tagging interface; it carries no\n+ * requirements on methods to implement.  However, it is typical for\n+ * a Cloneable class to implement at least <code>equals</code>,\n+ * <code>hashCode</code>, and <code>clone</code>, sometimes\n+ * increasing the accessibility of clone to be public. The typical\n+ * implementation of <code>clone</code> invokes <code>super.clone()</code>\n+ * rather than a constructor, but this is not a requirement.\n+ * <p>\n+ *\n+ * If an object that implement Cloneable should not be cloned,\n+ * simply override the <code>clone</code> method to throw a\n+ * <code>CloneNotSupportedException</code>.\n+ * <p>\n+ *\n+ * All array types implement Cloneable, and have a public\n+ * <code>clone</code> method that will never fail with a\n+ * <code>CloneNotSupportedException</code>.\n+ *\n+ * @since 1.0\n+ * @author Paul Fisher\n+ * @author Eric Blake <ebb9@email.byu.edu>\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ *\n+ * @see Object#clone()\n+ * @see CloneNotSupportedException\n+ */\n public interface Cloneable\n {\n+  // Tagging interface only.\n }"}, {"sha": "734abc40d1f1205d4ea56bba1919b40010dd89ac", "filename": "libjava/java/lang/Comparable.java", "status": "modified", "additions": 48, "deletions": 12, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FComparable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FComparable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FComparable.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,22 +1,58 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Comparable.java -- Interface for comparaing objects to obtain an ordering\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n  \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n+\n+\n package java.lang;\n- \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date September 8, 1998.  \n- */\n+\n /* Written using online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Believed complete and correct.\n  */\n- \n+\n+/** \n+ * Interface for objects that can be ordering among other\n+ * objects. The ordering can be <EM>total</EM>, such that two objects\n+ * only compare equal if they are equal by the equals method, or\n+ * <EM>partial</EM> such that this is not necessarily true. For\n+ * example, a case-sensitive dictionary order comparison of Strings\n+ * is total, but if it is case-insensitive it is partial, because\n+ * \"abc\" and \"ABC\" compare as equal even though \"abc\".equals(\"ABC\")\n+ * returns false.\n+ *\n+ * @author Geoff Berry\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ *\n+ * @since JDK1.2\n+ * @see java.util.Comparator\n+ */\n public interface Comparable\n {\n-  public int compareTo(Object o) throws ClassCastException;\n+  /**\n+   * @return a negative integer if this object is less than\n+   * <code>o<code>, zero if this object is equal to <code>o</code>, or\n+   * a positive integer if this object is greater than <code>o</code>\n+   */\n+  int compareTo( Object o );\n }"}, {"sha": "3d424e2da4cd55e55ce0b66bdb1b5d64aab319b9", "filename": "libjava/java/lang/Runnable.java", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FRunnable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2FRunnable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FRunnable.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,27 +1,54 @@\n-// Runnable.java - Runnable interface.\n+/* java.lang.Runnable\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.lang;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Tom Tromey <tromey@cygnus.com>\n- * @date August 25, 1998 \n- */\n+\n+package java.lang;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.\n  * Status:  Complete.\n  */\n \n+/**\n+ * Runnable is an interface you implement to indicate that your class can be\n+ * executed as the main part of a Thread, among other places.  When you want\n+ * an entry point to run a piece of code, implement this interface and\n+ * override run.\n+ *\n+ * @author Paul Fisher\n+ * @author Tom Tromey <tromey@cygnus.com>\n+ */\n+\n public interface Runnable\n {\n-  public abstract void run ();\n+  /**\n+   * This method will be called by whoever wishes to run your class\n+   * implementing Runnable.\n+   * @since JDK1.0\n+   */\n+  void run();\n }"}, {"sha": "d76cdda1befa21b704e61b67204dd0c3f299cf02", "filename": "libjava/java/lang/reflect/Member.java", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2Freflect%2FMember.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Flang%2Freflect%2FMember.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FMember.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,26 +1,81 @@\n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* java.lang.reflect.Member\n+   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.\n \n-   This file is part of libgcj.\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.lang.reflect;\n \n-/** \n- * @author Per Bothner <bothner@cygnus.com> \n- * @date September 27, 1998. \n- */ \n /* Written using \"Java Class Libraries\", 2nd edition.\n  * Status:  Believed complete and correct.\n  */\n \n-public interface Member\n-{\n-  public static final int PUBLIC = 0;\n-  public static final int DECLARED = 1;\n-  public Class getDeclaringClass ();\n-  public int getModifiers ();\n-  public String getName();\n+/**\n+ * Member is an interface that represents any member of a class.\n+ * i.e. a field, a method or a constructor.\n+ * You can get information about the declaring class, name or modifiers of\n+ * the member with this interface.\n+ *\n+ * @author  John Keiser\n+ * @author Per Bothner <bothner@cygnus.com> \n+ */\n+public interface Member {\n+    /**\n+     * Represents all members, whether public, private, protected or\n+     * package-protected.\n+     * Used in java.lang.SecurityManager.checkMemberAccess() to determine the\n+     * type of members to access.\n+     */\n+    static final int DECLARED = 1;\n+\n+    /**\n+     * Represents public members only.  Used inr\n+     * java.lang.SecurityManager.checkMemberAccess() to determine the type of\n+     * members to access.\n+     */\n+    static final int PUBLIC = 0;\n+\n+    /**\n+     * Gets the class that declared this member.\n+     * <STRONG>It is unclear whether this returns the class that actually\n+     * syntactically declared the member, or the class where the\n+     * <code>Member</code> object was gotten from.</STRONG>\n+     * @return the class that declared this member.\n+     */\n+    Class getDeclaringClass();\n+\n+    /**\n+     * Gets the modifiers this member uses.  Use the <code>Modifier</code>\n+     * class to interpret the values.\n+     * @see Modifier\n+     * @return an integer representing the modifiers to this Member.\n+     */\n+    int getModifiers();\n+\n+    /**\n+     * Gets the name of this member.\n+     * @return the name of this member.\n+     */\n+    String getName();\n }"}, {"sha": "95198a65d8aef07551155154fdaf741c07330299", "filename": "libjava/java/net/ContentHandlerFactory.java", "status": "modified", "additions": 45, "deletions": 14, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FContentHandlerFactory.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,27 +1,58 @@\n-// ContentHandlerFactory.java - Abstract Content Handler factory.\n+/* ContentHandlerFactory.java -- Interface for creating content handlers\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n-public abstract interface ContentHandlerFactory\n+/**\n+  * This interface maps MIME types to ContentHandler objects.  It consists\n+  * of one method that, when passed a MIME type, returns a handler for that\n+  * type.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n+public interface ContentHandlerFactory\n {\n-  public ContentHandler createContentHandler(String mimetype);\n-}\n+/**\n+  * This method is passed a MIME type as a string and is responsible for\n+  * returning the appropriate ContentType object.\n+  *\n+  * @param mime_type The MIME type to map to a ContentHandler\n+  *\n+  * @return The ContentHandler for the passed in MIME type\n+  */\n+ContentHandler\n+createContentHandler(String mime_type);\n+\n+} // interface ContentHandlerFactory\n+"}, {"sha": "42b5f875fd33f7b0a5df0acd760414d9d649ef70", "filename": "libjava/java/net/FileNameMap.java", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FFileNameMap.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FFileNameMap.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FFileNameMap.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,27 +1,57 @@\n-// FileNameMap.java - Abstract interface to map from a File Name to MIME type.\n+/* FileNameMap.java -- Maps filenames to MIME types\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n-public abstract interface FileNameMap\n+/**\n+  * This interface has one method which, when passed a filename, returns\n+  * the MIME type associated with that filename.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n+public interface FileNameMap\n {\n-  public String getContentTypeFor(String fileName);\n-}\n+/**\n+  * This method is passed a filename and is responsible for determining\n+  * the appropriate MIME type for that file.\n+  *\n+  * @param filename The name of the file to generate a MIME type for.\n+  *\n+  * @return The MIME type for the filename passed in.\n+  */\n+String\n+getContentTypeFor(String filename);\n+\n+} // interface FileNameMap\n+"}, {"sha": "73f66ec859f73d054477bbfee150fd7fe9a822fc", "filename": "libjava/java/net/SocketImplFactory.java", "status": "modified", "additions": 41, "deletions": 14, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FSocketImplFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImplFactory.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,25 +1,52 @@\n-// SocketImplFactory.java - Abstract socket implementation factory.\n+/* SocketImplFactory.java -- Interface to create a SocketImpl object\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n-  * @author Per Bothner <bothner@cygnus.com>\n-  * @date January 6, 1999.\n-  */\n+\n+package java.net;\n \n /** Written using on-line Java Platform 1.2 API Specification.\n   * Status:  Believed complete and correct.\n   */\n \n-public abstract interface SocketImplFactory\n+/**\n+  * This interface defines one method which returns a SocketImpl object.\n+  * This should not be needed by ordinary applications.\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Per Bothner <bothner@cygnus.com>\n+  */\n+public interface SocketImplFactory\n {\n-  public SocketImpl createSocketImpl ();\n-}\n+/**\n+  * This method returns an instance of the SocketImpl object\n+  *\n+  * @return A SocketImpl object\n+  */\n+SocketImpl\n+createSocketImpl();\n+\n+} // interface SocketImplFactory\n+"}, {"sha": "f83fb5005dd56b4f0084a83c6751ca30c0743a62", "filename": "libjava/java/net/SocketOptions.java", "status": "modified", "additions": 123, "deletions": 28, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FSocketOptions.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FSocketOptions.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketOptions.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,40 +1,135 @@\n-// SocketOptions.java - Interface for get/set socket options.\n+/* SocketOptions.java -- Implements options for sockets (duh!)\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date May 3, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification.\n  * Status:  Believed complete and correct.\n  */\n \n-public abstract interface SocketOptions\n+/**\n+  * This interface is used by <code>SocketImpl</code> and \n+  * <code>DatagramSocketImpl</code> to implement options\n+  * on sockets.  \n+  *\n+  * @since 1.2\n+  *\n+  * @author Aaron M. Renn (arenn@urbanophile.com)\n+  * @author Warren Levy <warrenl@cygnus.com>\n+  */\n+public interface SocketOptions\n {\n-  public static final int TCP_NODELAY = 0x1;\n-  public static final int SO_BINDADDR = 0xF;\n-  public static final int SO_REUSEADDR = 0x4;\n-  public static final int IP_MULTICAST_IF = 0x10;\n-  public static final int SO_LINGER = 0x80;\n-  public static final int SO_TIMEOUT = 0x1006;\n-\n-  // JDK1.2\n-  public static final int SO_SNDBUF = 0x1001;\n-\n-  // JDK1.2\n-  public static final int SO_RCVBUF = 0x1002;\n-\n-  public void setOption(int optID, Object value) throws SocketException;\n-  public Object getOption(int optID) throws SocketException;\n-}\n+\n+/*************************************************************************/\n+\n+/*\n+ * Static Variables\n+ */\n+\n+/**\n+  * Option id for the SO_LINGER value\n+  */\n+static final int SO_LINGER = 0x80; // 128\n+\n+/**\n+  * Option id for the SO_TIMEOUT value\n+  */\n+static final int SO_TIMEOUT = 0x1006; // 4102\n+\n+/**\n+  * Retrieve the local address to which the socket is bound.\n+  */\n+static final int SO_BINDADDR = 0x0F; // 15\n+\n+/**\n+  * Option id for the send buffer size\n+  * @since 1.2\n+  */\n+static final int SO_SNDBUF = 0x1001; // 4097\n+\n+/**\n+  * Option id for the receive buffer size\n+  * @since 1.2\n+  */\n+static final int SO_RCVBUF = 0x1002; // 4098\n+\n+/**\n+  * Sets the SO_REUSEADDR parameter on a socket\n+  */\n+static final int SO_REUSEADDR = 0x04; // 4\n+\n+/**\n+  * Option id for the TCP_NODELAY value\n+  */\n+static final int TCP_NODELAY = 0x01; // 1\n+\n+/**\n+  * Options id for the IP_MULTICAST_IF value\n+  */\n+static final int IP_MULTICAST_IF = 0x10; // 16\n+\n+/*************************************************************************/\n+\n+/*\n+ * Interface Methods\n+ */\n+\n+/**\n+  * Sets the specified option on a socket to the passed in object.  For\n+  * options that take an integer argument, the passed in object is an\n+  * <code>Integer</code>.  For options that are set to on or off, the\n+  * value passed will be a <code>Boolean</code>.   The <code>option_id</code> \n+  * parameter is one of the defined constants in this interface.\n+  *\n+  * @param option_id The identifier of the option\n+  * @param val The value to set the option to\n+  *\n+  * @exception SocketException If an error occurs\n+  */\n+void\n+setOption(int option_id, Object val) throws SocketException;\n+\n+/*************************************************************************/\n+\n+/**\n+  * Returns the current setting of the specified option.  The \n+  * <code>Object</code> returned will be an <code>Integer</code> for options \n+  * that have integer values.  For options that are set to on or off, a \n+  * <code>Boolean</code> will be returned.   The <code>option_id</code>\n+  * is one of the defined constants in this interface.\n+  *\n+  * @param option_id The option identifier\n+  *\n+  * @return The current value of the option\n+  *\n+  * @exception SocketException If an error occurs\n+  */\n+Object\n+getOption(int option_id) throws SocketException;\n+\n+} // interface SocketOptions\n+"}, {"sha": "26eb0e39d569c2b5c026724e337e8a5478edb5dc", "filename": "libjava/java/net/URLStreamHandlerFactory.java", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfcdbe54802c69a7d731d8e1f48b858fe73a4452/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLStreamHandlerFactory.java?ref=cfcdbe54802c69a7d731d8e1f48b858fe73a4452", "patch": "@@ -1,27 +1,57 @@\n-// URLStreamHandlerFactory.java - Abstract URL Stream Handler factory.\n+/* URLStreamHandlerFactory.java -- Maps protocols to URLStreamHandlers\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1999  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n \n-package java.net;\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-/**\n- * @author Warren Levy <warrenl@cygnus.com>\n- * @date March 5, 1999.\n- */\n+package java.net;\n \n /**\n  * Written using on-line Java Platform 1.2 API Specification, as well\n  * as \"The Java Class Libraries\", 2nd edition (Addison-Wesley, 1998).\n  * Status:  Believed complete and correct.\n  */\n \n-public abstract interface URLStreamHandlerFactory\n+/**\n+ * This interface contains one method which maps the protocol portion of\n+ * a URL (eg, \"http\" in \"http://www.urbanophile.com/arenn/\") to a \n+ * URLStreamHandler object.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @author Warren Levy <warrenl@cygnus.com>\n+ */\n+public interface URLStreamHandlerFactory\n {\n-  public URLStreamHandler createURLStreamHandler(String protocol);\n-}\n+/**\n+  * This method maps the protocol portion of a URL to a URLStreamHandler\n+  * object.\n+  *\n+  * @param protocol The protocol name to map (\"http\", \"ftp\", etc).\n+  *\n+  * @return The URLStreamHandler for the specified protocol\n+  */\n+URLStreamHandler\n+createURLStreamHandler(String protocol);\n+\n+} // interface URLStreamHandlerFactory\n+"}]}