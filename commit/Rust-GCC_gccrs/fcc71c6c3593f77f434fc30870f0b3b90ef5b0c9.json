{"sha": "fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNjNzFjNmMzNTkzZjc3ZjQzNGZjMzA4NzBmMGIzYjkwZWY1YjBjOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-21T19:11:55Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-21T19:11:55Z"}, "message": "re PR debug/45015 (ICE in cselib.c caused by fix for PR43051)\n\n\tPR debug/45015\n\t* var-tracking.c (adjust_mems): Ignore ASM_OPERANDS with non-zero\n\tASM_OPERANDS_OUTPUT_IDX.\n\t(adjust_insn): For inline asm with multiple sets ensure first\n\tASM_OPERANDS vectors are used by all following ASM_OPERANDS in\n\tthe insn.\n\n\t* gcc.target/m68k/pr45015.c: New test.\n\nFrom-SVN: r162385", "tree": {"sha": "8071e2d3083da19393a44e7fac297451201b88ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8071e2d3083da19393a44e7fac297451201b88ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "650b53291f0983f0af75e81729c3774b28967b69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/650b53291f0983f0af75e81729c3774b28967b69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/650b53291f0983f0af75e81729c3774b28967b69"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "222186ddf5863ebc3eb121e6c7f3648bfa1ede17", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "patch": "@@ -1,3 +1,12 @@\n+2010-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/45015\n+\t* var-tracking.c (adjust_mems): Ignore ASM_OPERANDS with non-zero\n+\tASM_OPERANDS_OUTPUT_IDX.\n+\t(adjust_insn): For inline asm with multiple sets ensure first\n+\tASM_OPERANDS vectors are used by all following ASM_OPERANDS in\n+\tthe insn.\n+\n 2010-07-21  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (setup_incoming_varargs_64): Emit a simple"}, {"sha": "2e4919c9e5aa8c6d7d001ece572aac31b81c9dbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "patch": "@@ -1,3 +1,8 @@\n+2010-07-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/45015\n+\t* gcc.target/m68k/pr45015.c: New test.\n+\n 2010-07-21  Jeffrey Yasskin  <jyasskin@google.com>\n \n \tPR c++/44641"}, {"sha": "fba9550e9ef0328842cdb1feb28a0b5cdd2330ec", "filename": "gcc/testsuite/gcc.target/m68k/pr45015.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr45015.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr45015.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fm68k%2Fpr45015.c?ref=fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "patch": "@@ -0,0 +1,26 @@\n+/* PR debug/45015 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g\" } */\n+\n+unsigned int\n+foo (unsigned int *x, const unsigned int *y, int z, unsigned int w)\n+{\n+  unsigned int a, b, c, s;\n+  int j;\n+  j = -z;\n+  x -= j;\n+  y -= j;\n+  a = 0;\n+  do\n+    {\n+      __asm__ (\"move.l %2, %0; move.l %3, %1\" : \"=d\" (b), \"=d\" (c) : \"g<>\" (y[j]), \"d\" (w));\n+      c += a;\n+      a = (c < a) + b;\n+      s = x[j];\n+      c = s + c;\n+      a += (c < s);\n+      x[j] = c;\n+    }\n+  while (++j != 0);\n+  return a;\n+}"}, {"sha": "3232fb75fb439c80df4ef97109669eb3d0418bcf", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 58, "deletions": 1, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=fcc71c6c3593f77f434fc30870f0b3b90ef5b0c9", "patch": "@@ -910,6 +910,16 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n \treturn use_narrower_mode (SUBREG_REG (tem), GET_MODE (tem),\n \t\t\t\t  GET_MODE (SUBREG_REG (tem)));\n       return tem;\n+    case ASM_OPERANDS:\n+      /* Don't do any replacements in second and following\n+\t ASM_OPERANDS of inline-asm with multiple sets.\n+\t ASM_OPERANDS_INPUT_VEC, ASM_OPERANDS_INPUT_CONSTRAINT_VEC\n+\t and ASM_OPERANDS_LABEL_VEC need to be equal between\n+\t all the ASM_OPERANDs in the insn and adjust_insn will\n+\t fix this up.  */\n+      if (ASM_OPERANDS_OUTPUT_IDX (loc) != 0)\n+\treturn loc;\n+      break;\n     default:\n       break;\n     }\n@@ -960,7 +970,54 @@ adjust_insn (basic_block bb, rtx insn)\n   note_stores (PATTERN (insn), adjust_mem_stores, &amd);\n \n   amd.store = false;\n-  note_uses (&PATTERN (insn), adjust_mem_uses, &amd);\n+  if (GET_CODE (PATTERN (insn)) == PARALLEL\n+      && asm_noperands (PATTERN (insn)) > 0\n+      && GET_CODE (XVECEXP (PATTERN (insn), 0, 0)) == SET)\n+    {\n+      rtx body, set0;\n+      int i;\n+\n+      /* inline-asm with multiple sets is tiny bit more complicated,\n+\t because the 3 vectors in ASM_OPERANDS need to be shared between\n+\t all ASM_OPERANDS in the instruction.  adjust_mems will\n+\t not touch ASM_OPERANDS other than the first one, asm_noperands\n+\t test above needs to be called before that (otherwise it would fail)\n+\t and afterwards this code fixes it up.  */\n+      note_uses (&PATTERN (insn), adjust_mem_uses, &amd);\n+      body = PATTERN (insn);\n+      set0 = XVECEXP (body, 0, 0);\n+      gcc_checking_assert (GET_CODE (set0) == SET\n+\t\t\t   && GET_CODE (SET_SRC (set0)) == ASM_OPERANDS\n+\t\t\t   && ASM_OPERANDS_OUTPUT_IDX (SET_SRC (set0)) == 0);\n+      for (i = 1; i < XVECLEN (body, 0); i++)\n+\tif (GET_CODE (XVECEXP (body, 0, i)) != SET)\n+\t  break;\n+\telse\n+\t  {\n+\t    set = XVECEXP (body, 0, i);\n+\t    gcc_checking_assert (GET_CODE (SET_SRC (set)) == ASM_OPERANDS\n+\t\t\t\t && ASM_OPERANDS_OUTPUT_IDX (SET_SRC (set))\n+\t\t\t\t    == i);\n+\t    if (ASM_OPERANDS_INPUT_VEC (SET_SRC (set))\n+\t\t!= ASM_OPERANDS_INPUT_VEC (SET_SRC (set0))\n+\t\t|| ASM_OPERANDS_INPUT_CONSTRAINT_VEC (SET_SRC (set))\n+\t\t   != ASM_OPERANDS_INPUT_CONSTRAINT_VEC (SET_SRC (set0))\n+\t\t|| ASM_OPERANDS_LABEL_VEC (SET_SRC (set))\n+\t\t   != ASM_OPERANDS_LABEL_VEC (SET_SRC (set0)))\n+\t      {\n+\t\trtx newsrc = shallow_copy_rtx (SET_SRC (set));\n+\t\tASM_OPERANDS_INPUT_VEC (newsrc)\n+\t\t  = ASM_OPERANDS_INPUT_VEC (SET_SRC (set0));\n+\t\tASM_OPERANDS_INPUT_CONSTRAINT_VEC (newsrc)\n+\t\t  = ASM_OPERANDS_INPUT_CONSTRAINT_VEC (SET_SRC (set0));\n+\t\tASM_OPERANDS_LABEL_VEC (newsrc)\n+\t\t  = ASM_OPERANDS_LABEL_VEC (SET_SRC (set0));\n+\t\tvalidate_change (NULL_RTX, &SET_SRC (set), newsrc, true);\n+\t      }\n+\t  }\n+    }\n+  else\n+    note_uses (&PATTERN (insn), adjust_mem_uses, &amd);\n \n   /* For read-only MEMs containing some constant, prefer those\n      constants.  */"}]}