{"sha": "5904d9d923bd86849209e55550b7876e513f4896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkwNGQ5ZDkyM2JkODY4NDkyMDllNTU1NTBiNzg3NmU1MTNmNDg5Ng==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2018-03-23T01:19:14Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-03-23T01:19:14Z"}, "message": "[PR c++/84789] do not fail to resolve typename into template-independent\n\nAlthough resolve_typename_type always takes a template-dependent\ntype-id, and it usually resolves it to another template-dependent\ntype-id, it is not correct to require the latter: in declarators,\ntemplate-dependent scopes may turn out to name template-independent\ntypes, as in the pr84789-2.C and pr84789-3.C testcases.\n\nThe ill-formed testcase pr84789.C trips the same too-strict assert,\nand also gets fixed by removing the assertion on the simplified scope.\nHowever, whereas when the dependent type cannot be resolved, we get an\nerror that suggests 'typename' is missing:\n\npr84789.C:12:3: error: need \u2018typename\u2019 before \u2018typename B<T>::A::I::I\u2019\nbecause \u2018typename B<T>::A::I\u2019 is a dependent scope\n   B<T>::A::I::I i;\n   ^~~~\n\nwhen it can, we got errors that did not point at that possibility,\nwhich may be confusing:\n\npr84789.C:9:15: error: \u2018A::I\u2019 {aka \u2018int\u2019} is not a class type\n   B<T>::A::I::I i; // { dg-error \"typename\" }\n               ^\npr84789.C:9:15: error: \u2018I\u2019 in \u2018A::I\u2019 {aka \u2018int\u2019} does not name a type\n\nChanging the parser diagnostic code that reports an invalid type name\nso that it does not attempt to reparse the name as a declarator gets\nus the superior diagnostic of a missing 'typename' keyword.\n\n\nfor  gcc/cp/ChangeLog\n\n\tPR c++/84789\n\t* pt.c (resolve_typename_type): Drop assert that stopped\n\tsimplification to template-independent types.  Add assert to\n\tverify the initial scope is template dependent.\n\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n\tReparse the id expression as a type-name, not a declarator.\n\nfor  gcc/testsuite/ChangeLog\n\n\tPR c++/84789\n\t* g++.dg/template/pr84789.C: New.\n\t* g++.dg/template/pr84789-2.C: New.\n\t* g++.dg/template/pr84789-3.C: New.\n\t* g++.dg/parse/dtor11.C: Accept alternate error message.\n\nFrom-SVN: r258792", "tree": {"sha": "a8f986c5da0ff2a8e3e7afaf7e13d4dadd64afdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8f986c5da0ff2a8e3e7afaf7e13d4dadd64afdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5904d9d923bd86849209e55550b7876e513f4896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5904d9d923bd86849209e55550b7876e513f4896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5904d9d923bd86849209e55550b7876e513f4896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5904d9d923bd86849209e55550b7876e513f4896/comments", "author": null, "committer": null, "parents": [{"sha": "3ec16e36107214035fe9d1177e0acc6ebe037112", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ec16e36107214035fe9d1177e0acc6ebe037112", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ec16e36107214035fe9d1177e0acc6ebe037112"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "08ecf21d9ba18015c5b2a9f829dda83995bc3d66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -1,5 +1,12 @@\n 2018-03-22  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/84789\n+\t* pt.c (resolve_typename_type): Drop assert that stopped\n+\tsimplification to template-independent types.  Add assert to\n+\tverify the initial scope is template dependent.\n+\t* parser.c (cp_parser_parse_and_diagnose_invalid_type_name):\n+\tReparse the id expression as a type-name, not a declarator.\n+\n \tPR c++/84729\n \t* init.c (build_vec_init): Error at parenthesized array init.\n "}, {"sha": "fd817024eacfc2b3db58df6eff18e7300955dea7", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -3455,7 +3455,7 @@ cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)\n \t\t\t\t/*template_keyword_p=*/false,\n \t\t\t\t/*check_dependency_p=*/true,\n \t\t\t\t/*template_p=*/NULL,\n-\t\t\t\t/*declarator_p=*/true,\n+\t\t\t\t/*declarator_p=*/false,\n \t\t\t\t/*optional_p=*/false);\n   /* If the next token is a (, this is a function with no explicit return\n      type, i.e. constructor, destructor or conversion op.  */"}, {"sha": "5293c2b5491bc823601bbdbe17a25cf9ec013835", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -25249,6 +25249,9 @@ resolve_typename_type (tree type, bool only_current_p)\n   gcc_assert (TREE_CODE (type) == TYPENAME_TYPE);\n \n   scope = TYPE_CONTEXT (type);\n+  /* We shouldn't have built a TYPENAME_TYPE with a non-dependent scope.  */\n+  gcc_checking_assert (uses_template_parms (scope));\n+\n   /* Usually the non-qualified identifier of a TYPENAME_TYPE is\n      TYPE_IDENTIFIER (type). But when 'type' is a typedef variant of\n      a TYPENAME_TYPE node, then TYPE_NAME (type) is set to the TYPE_DECL representing\n@@ -25285,8 +25288,6 @@ resolve_typename_type (tree type, bool only_current_p)\n     /* scope is either the template itself or a compatible instantiation\n        like X<T>, so look up the name in the original template.  */\n     scope = CLASSTYPE_PRIMARY_TEMPLATE_TYPE (scope);\n-  /* We shouldn't have built a TYPENAME_TYPE with a non-dependent scope.  */\n-  gcc_checking_assert (uses_template_parms (scope));\n   /* If scope has no fields, it can't be a current instantiation.  Check this\n      before currently_open_class to avoid infinite recursion (71515).  */\n   if (!TYPE_FIELDS (scope))"}, {"sha": "4875ce45e8d144a4f9e13fca97e91ef638a8a013", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -1,5 +1,11 @@\n 2018-03-22  Alexandre Oliva <aoliva@redhat.com>\n \n+\tPR c++/84789\n+\t* g++.dg/template/pr84789.C: New.\n+\t* g++.dg/template/pr84789-2.C: New.\n+\t* g++.dg/template/pr84789-3.C: New.\n+\t* g++.dg/parse/dtor11.C: Accept alternate error message.\n+\n \tPR c++/84729\n \t* g++.dg/pr84729.C: New.\n \t* g++.old-deja/g++.ext/arrnew2.C: Require error."}, {"sha": "83fd93489f11f14590ef132164abaaf3600757bd", "filename": "gcc/testsuite/g++.dg/parse/dtor11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fdtor11.C?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -8,5 +8,5 @@ struct A\n \n struct B\n {\n-  A::~B B();  // { dg-error \"as member of\" }\n+  A::~B B();  // { dg-error \"as member of|as a type\" }\n };"}, {"sha": "0b42148ef3e4d3f5d98afe7531ed8ebacbbb1e25", "filename": "gcc/testsuite/g++.dg/template/pr84789-2.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-2.C?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+\n+struct K {\n+  struct L {\n+    static double j;\n+  };\n+};\n+\n+template <typename T>\n+struct M {\n+  struct N {\n+    static int i;\n+  };\n+};\n+\n+template <typename T>\n+struct O {\n+  typedef M<T> P;\n+  typedef K Q;\n+};\n+\n+template <typename T>\n+int O<T>::P::N::i = 42; // This is obfuscated, but apparently ok.\n+\n+template <typename T>\n+double O<T>::Q::L::j = 42.0; // { dg-error \"non-template\" }"}, {"sha": "bc38c1544ba9fafb6f1c1322f0fcd249391f808c", "filename": "gcc/testsuite/g++.dg/template/pr84789-3.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789-3.C?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do compile }\n+\n+struct A\n+{\n+  static int i;\n+};\n+struct B\n+{\n+  typedef ::A A;\n+};\n+int B::A::i = 0;\n+\n+struct K\n+{\n+  struct L\n+  {\n+    template <typename T>\n+    static void f(T);\n+  };\n+};\n+\n+template <typename T>\n+struct O\n+{\n+  typedef K Q;\n+};\n+\n+template <typename T>\n+void O<T>::Q::L::f(T)\n+{\n+}"}, {"sha": "bc1567f3fe77a373565ea50d1d905187b17d2bf3", "filename": "gcc/testsuite/g++.dg/template/pr84789.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5904d9d923bd86849209e55550b7876e513f4896/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr84789.C?ref=5904d9d923bd86849209e55550b7876e513f4896", "patch": "@@ -0,0 +1,13 @@\n+// { dg-do compile }\n+\n+struct A\n+{\n+  typedef int I;\n+};\n+\n+template<typename> struct B : A {};\n+\n+template<typename T> struct C : B<T>\n+{\n+  B<T>::A::I::I i; // { dg-error \"typename\" }\n+};"}]}