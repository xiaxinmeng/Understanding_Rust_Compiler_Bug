{"sha": "e5049dfbe294abc56953d4f0b412000cd8a1f39e", "node_id": "C_kwDOANBUbNoAKGU1MDQ5ZGZiZTI5NGFiYzU2OTUzZDRmMGI0MTIwMDBjZDhhMWYzOWU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-18T08:04:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-11-18T08:04:16Z"}, "message": "c++: Implement CWG2635 - Constrained structured bindings\n\nThe following patch implements CWG2635.\n\n2022-11-18  Jakub Jelinek  <jakub@redhat.com>\n\n\t* decl.cc (grokdeclarator): Implement\n\tCWG2635 - Constrained structured bindings.  Emit a pedwarn on\n\tconstrained auto type.  Add auto_diagnostic_group for error_at\n\tand inform for non-auto type on structured bindings declaration.\n\n\t* g++.dg/cpp2a/decomp5.C: New test.\n\t* g++.dg/cpp2a/decomp6.C: New test.\n\t* g++.dg/cpp2a/decomp7.C: New test.\n\t* g++.dg/cpp2a/concepts-placeholder7.C: Adjust expected diagnostics.\n\t* g++.dg/cpp2a/concepts-placeholder8.C: Likewise.\n\t* g++.dg/cpp2a/concepts-placeholder9.C: New test.\n\t* g++.dg/cpp2a/concepts-placeholder10.C: New test.", "tree": {"sha": "aaa71c71958e5835ed51da675ffb35b64c2ef448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aaa71c71958e5835ed51da675ffb35b64c2ef448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5049dfbe294abc56953d4f0b412000cd8a1f39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5049dfbe294abc56953d4f0b412000cd8a1f39e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5049dfbe294abc56953d4f0b412000cd8a1f39e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5049dfbe294abc56953d4f0b412000cd8a1f39e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5df8392c5848c0462558f41cdf6eab31db301cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5df8392c5848c0462558f41cdf6eab31db301cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5df8392c5848c0462558f41cdf6eab31db301cf"}], "stats": {"total": 125, "additions": 118, "deletions": 7}, "files": [{"sha": "341b4bba9927a8e2003148bf1b046b81fed9d7a0", "filename": "gcc/cp/decl.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Fcp%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Fcp%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.cc?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -12664,6 +12664,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t{\n \t  if (type != error_mark_node)\n \t    {\n+\t      auto_diagnostic_group d;\n \t      error_at (loc, \"structured binding declaration cannot have \"\n \t\t\t\"type %qT\", type);\n \t      inform (loc,\n@@ -12673,6 +12674,10 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = build_qualified_type (make_auto (), type_quals);\n \t  declspecs->type = type;\n \t}\n+      else if (PLACEHOLDER_TYPE_CONSTRAINTS_INFO (type))\n+\tpedwarn (loc, OPT_Wpedantic,\n+\t\t \"structured binding declaration cannot have constrained \"\n+\t\t \"%<auto%> type %qT\", type);\n       inlinep = 0;\n       typedef_p = 0;\n       constexpr_p = 0;"}, {"sha": "b831531b11305ea44400367b791dab9321aee7d5", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder10.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder10.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wno-pedantic\" }\n+\n+template <class T> concept is_const = __is_same(T, const T);\n+\n+void f() {\n+  int x[] = {1,2};\n+  const int y[] = {3};\n+  const is_const auto [a,b] = x; // { dg-error \"constraints\" }\n+  const is_const auto [c] = y;\n+}"}, {"sha": "7ba6ab942b5543afc1f1eff433c2f838f0ad3e59", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder7.C", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -7,16 +7,18 @@ template <class>\n void f() {\n   int x[] = {1,2};\n   int y[] = {3};\n-  C1 auto [a,b] = x;\n-  C1 auto [c] = y; // { dg-error \"constraints\" }\n+  C1 auto [a,b] = x;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C1<<placeholder>, >\\\\\\]'\" }\n+  C1 auto [c] = y;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C1<<placeholder>, >\\\\\\]'\" }\n+\t\t\t// { dg-error \"constraints\" \"\" { target *-*-* } .-1 }\n }\n \n template <class T>\n void g() {\n   T x[] = {1,2};\n   T y[] = {3};\n-  C1 auto [a,b] = x;\n-  C1 auto [c] = y; // { dg-error \"constraints\" }\n+  C1 auto [a,b] = x;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C1<<placeholder>, >\\\\\\]'\" }\n+  C1 auto [c] = y;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C1<<placeholder>, >\\\\\\]'\" }\n+\t\t\t// { dg-error \"constraints\" \"\" { target *-*-* } .-1 }\n }\n template void g<int>();\n \n@@ -27,6 +29,6 @@ struct S { int a, b; } s;\n \n template <class T>\n void h() {\n-  const C2<T> auto& [a, b] = s;\n+  const C2<T> auto& [a, b] = s;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'const auto \\\\\\[requires ::C2<<placeholder>, >\\\\\\]'\" }\n }\n template void h<int>();"}, {"sha": "d887961227f156d21eac989e6d626f5749cc0620", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder8.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -5,6 +5,7 @@ template <class T> concept is_const = __is_same(T, const T);\n void f() {\n   int x[] = {1,2};\n   const int y[] = {3};\n-  const is_const auto [a,b] = x; // { dg-error \"constraints\" }\n-  const is_const auto [c] = y;\n+  const is_const auto [a,b] = x;\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'const auto \\\\\\[requires ::is_const<<placeholder>, >\\\\\\]'\" }\n+\t\t\t\t\t// { dg-error \"constraints\" \"\" { target *-*-* } .-1 }\n+  const is_const auto [c] = y;\t\t// { dg-error \"structured binding declaration cannot have constrained 'auto' type 'const auto \\\\\\[requires ::is_const<<placeholder>, >\\\\\\]'\" }\n }"}, {"sha": "96732f3975668f4e037abc796ed6551e2e0295c1", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder9.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder9.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/99899\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wno-pedantic\" }\n+\n+template <class T> concept C1 = sizeof(T) > sizeof(int[1]);\n+\n+template <class>\n+void f() {\n+  int x[] = {1,2};\n+  int y[] = {3};\n+  C1 auto [a,b] = x;\n+  C1 auto [c] = y; // { dg-error \"constraints\" }\n+}\n+\n+template <class T>\n+void g() {\n+  T x[] = {1,2};\n+  T y[] = {3};\n+  C1 auto [a,b] = x;\n+  C1 auto [c] = y; // { dg-error \"constraints\" }\n+}\n+template void g<int>();\n+\n+\n+template <class... Ts> concept C2 = sizeof...(Ts) > 1;\n+\n+struct S { int a, b; } s;\n+\n+template <class T>\n+void h() {\n+  const C2<T> auto& [a, b] = s;\n+}\n+template void h<int>();"}, {"sha": "9ea31c6b87b7c0f067926b34a68e268c0309b9c4", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp5.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp5.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -0,0 +1,19 @@\n+// CWG2635 - Constrained structured bindings \n+// { dg-do compile { target c++20 } }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+template<class T> concept C = true;\n+C auto [x, y] = A{1}; // { dg-error \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C<<placeholder>, >\\\\\\]'\" }"}, {"sha": "e6cd034ca352cb93355b9dcbff0a01ddb1031559", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp6.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp6.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -0,0 +1,20 @@\n+// CWG2635 - Constrained structured bindings \n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-pedantic\" }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+template<class T> concept C = true;\n+C auto [x, y] = A{1}; // { dg-warning \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C<<placeholder>, >\\\\\\]'\" }"}, {"sha": "581797e2d446c7a52890bd41919a0a43594245a8", "filename": "gcc/testsuite/g++.dg/cpp2a/decomp7.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5049dfbe294abc56953d4f0b412000cd8a1f39e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fdecomp7.C?ref=e5049dfbe294abc56953d4f0b412000cd8a1f39e", "patch": "@@ -0,0 +1,20 @@\n+// CWG2635 - Constrained structured bindings \n+// { dg-do compile { target c++20 } }\n+// { dg-options \"-Wno-pedantic\" }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  A(int x) : i(x) {}\n+  template <int I> int& get() { return i; }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = int; };\n+\n+template<class T> concept C = true;\n+C auto [x, y] = A{1}; // { dg-bogus \"structured binding declaration cannot have constrained 'auto' type 'auto \\\\\\[requires ::C<<placeholder>, >\\\\\\]'\" }"}]}