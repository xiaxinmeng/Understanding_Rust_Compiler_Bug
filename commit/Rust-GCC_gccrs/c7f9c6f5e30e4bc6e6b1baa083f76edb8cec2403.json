{"sha": "c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmOWM2ZjVlMzBlNGJjNmU2YjFiYWEwODNmNzZlZGI4Y2VjMjQwMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-01T21:56:38Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-01T21:56:38Z"}, "message": "cp-tree.h (lang_type): Move align into type_flags.\n\n\t* cp-tree.h (lang_type): Move align into type_flags.\n\t(CLASSTYPE_ALIGN): Adjust accordingly.\n\t* call.c (direct_reference_binding): Remove misleading comment.\n\nFrom-SVN: r29035", "tree": {"sha": "af4f5823ff7680f79711fc0f8bd9c6672f197291", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af4f5823ff7680f79711fc0f8bd9c6672f197291"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/comments", "author": null, "committer": null, "parents": [{"sha": "2219e9215ef55ec201a8395ccd0d194f69d4c794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2219e9215ef55ec201a8395ccd0d194f69d4c794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2219e9215ef55ec201a8395ccd0d194f69d4c794"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "1f418a947e15e5859c121fcf0d715ad28948ff3a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "patch": "@@ -1,3 +1,9 @@\n+1999-09-01  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (lang_type): Move align into type_flags.\n+\t(CLASSTYPE_ALIGN): Adjust accordingly.\n+\t* call.c (direct_reference_binding): Remove misleading comment.\n+\n 1999-08-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* parse.y (language_string): Constify."}, {"sha": "0eefa7f49c093e26c304767b4b71ceaabc34d996", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "patch": "@@ -987,10 +987,9 @@ direct_reference_binding (type, conv)\n \n /* Returns the conversion path from type FROM to reference type TO for\n    purposes of reference binding.  For lvalue binding, either pass a\n-   reference type to FROM or an lvalue expression to EXPR.\n-\n-   Currently does not distinguish in the generated trees between binding to\n-   an lvalue and a temporary.  Should it?  */\n+   reference type to FROM or an lvalue expression to EXPR.  If the\n+   reference will be bound to a temporary, NEED_TEMPORARY_P is set for\n+   the conversion returned.  */\n \n static tree\n reference_binding (rto, rfrom, expr, flags)"}, {"sha": "8448b109f616011f23b3ef92d44c696b2fb76cb8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c7f9c6f5e30e4bc6e6b1baa083f76edb8cec2403", "patch": "@@ -809,7 +809,9 @@ struct lang_type\n       /* The MIPS compiler gets it wrong if this struct also\n \t does not fill out to a multiple of 4 bytes.  Add a\n \t member `dummy' with new bits if you go over the edge.  */\n-      unsigned dummy : 14;\n+      unsigned dummy : 6;\n+      \n+      unsigned char align;\n     } type_flags;\n \n   int vsize;\n@@ -822,9 +824,6 @@ struct lang_type\n \n   union tree_node *search_slot;\n \n-  unsigned char align;\n-  /* Room for another three unsigned chars.  */\n-\n   union tree_node *size;\n \n   union tree_node *abstract_virtuals;\n@@ -999,7 +998,7 @@ struct lang_type\n /* These are the size, mode and alignment of the type without its\n    virtual base classes, for when we use this type as a base itself.  */\n #define CLASSTYPE_SIZE(NODE) (TYPE_LANG_SPECIFIC(NODE)->size)\n-#define CLASSTYPE_ALIGN(NODE) (TYPE_LANG_SPECIFIC(NODE)->align)\n+#define CLASSTYPE_ALIGN(NODE) (TYPE_LANG_SPECIFIC(NODE)->type_flags.align)\n \n /* A cons list of virtual functions which cannot be inherited by\n    derived classes.  When deriving from this type, the derived"}]}