{"sha": "91293ffb6af18705ab7857dc47656bdd74a9ce31", "node_id": "C_kwDOANBUbNoAKDkxMjkzZmZiNmFmMTg3MDVhYjc4NTdkYzQ3NjU2YmRkNzRhOWNlMzE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-28T21:42:23Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2023-03-29T02:23:51Z"}, "message": "c++: alias ctad refinements [PR109321]\n\nThe two hunks fix missing handling demonstrated by the two testcases: first,\nif we omit one alias template parm but include another, we need to rewrite\nthe deduced template args to reflect the new position of the included parm.\nSecond, if we can't deduce any template args for a parameter pack, it is\ndeduced to an empty pack.\n\n\tPR c++/109321\n\tPR c++/109320\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (alias_ctad_tweaks): Rewrite deduced args.\n\t(type_targs_deducible_from): Handle null pack deduction.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/class-deduction-alias16.C: New test.\n\t* g++.dg/cpp2a/class-deduction-alias17.C: New test.", "tree": {"sha": "c3e48b9b85c193244fb1c4ff8b3db4421273bbe6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3e48b9b85c193244fb1c4ff8b3db4421273bbe6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91293ffb6af18705ab7857dc47656bdd74a9ce31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91293ffb6af18705ab7857dc47656bdd74a9ce31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91293ffb6af18705ab7857dc47656bdd74a9ce31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91293ffb6af18705ab7857dc47656bdd74a9ce31/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa8f4242efc99f24de73c59d53996f28db28c13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa8f4242efc99f24de73c59d53996f28db28c13f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa8f4242efc99f24de73c59d53996f28db28c13f"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "e514a27787204cd16e1450d00aaa299427dd292d", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 48, "deletions": 14, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=91293ffb6af18705ab7857dc47656bdd74a9ce31", "patch": "@@ -30123,8 +30123,8 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t    for (unsigned i = 0; i < len; ++i)\n \t      TREE_VEC_ELT (targs, i) = NULL_TREE;\n \n-\t  /* The number of parms for f' is the number of parms for A plus\n-\t     non-deduced parms of f.  */\n+\t  /* The number of parms for f' is the number of parms of A used in\n+\t     the deduced arguments plus non-deduced parms of f.  */\n \t  unsigned ndlen = 0;\n \t  unsigned j;\n \t  for (unsigned i = 0; i < len; ++i)\n@@ -30142,22 +30142,34 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t  TREE_VALUE (current_template_parms) = gtparms;\n \n \t  j = 0;\n-\t  /* First copy over the parms of A.  */\n+\t  unsigned level = 1;\n+\n+\t  /* First copy over the used parms of A.  */\n+\t  tree atargs = make_tree_vec (natparms);\n \t  for (unsigned i = 0; i < natparms; ++i)\n \t    {\n \t      tree elt = TREE_VEC_ELT (atparms, i);\n \t      if (ftpi.found (elt))\n-\t\tTREE_VEC_ELT (gtparms, j++) = elt;\n+\t\t{\n+\t\t  unsigned index = j++;\n+\t\t  tree nelt = rewrite_tparm_list (elt, index, level,\n+\t\t\t\t\t\t  atargs, i, complain);\n+\t\t  TREE_VEC_ELT (gtparms, index) = nelt;\n+\t\t}\n \t    }\n \t  gcc_checking_assert (j == nusedatparms);\n \n+\t  /* Adjust the deduced template args for f to refer to the A parms\n+\t     with their new indexes.  */\n+\t  if (nusedatparms && nusedatparms != natparms)\n+\t    targs = tsubst_template_args (targs, atargs, complain, in_decl);\n+\n \t  /* Now rewrite the non-deduced parms of f.  */\n \t  for (unsigned i = 0; ndlen && i < len; ++i)\n \t    if (TREE_VEC_ELT (targs, i) == NULL_TREE)\n \t      {\n \t\t--ndlen;\n \t\tunsigned index = j++;\n-\t\tunsigned level = 1;\n \t\ttree oldlist = TREE_VEC_ELT (ftparms, i);\n \t\ttree list = rewrite_tparm_list (oldlist, index, level,\n \t\t\t\t\t\ttargs, i, complain);\n@@ -30261,15 +30273,37 @@ type_targs_deducible_from (tree tmpl, tree type)\n \n   /* We don't fail on an undeduced targ the second time through (like\n      get_partial_spec_bindings) because we're going to try defaults.  */\n-  if (!tried_array_deduction)\n-    for (int i =  0; i < len; ++i)\n-      if (! TREE_VEC_ELT (targs, i))\n-\t{\n-\t  try_array_deduction (tparms, targs, TREE_TYPE (tmpl));\n-\t  tried_array_deduction = true;\n-\t  if (TREE_VEC_ELT (targs, i))\n-\t    goto again;\n-\t}\n+  for (int i =  0; i < len; ++i)\n+    if (! TREE_VEC_ELT (targs, i))\n+      {\n+\ttree tparm = TREE_VEC_ELT (tparms, i);\n+\ttparm = TREE_VALUE (tparm);\n+\n+\tif (!tried_array_deduction\n+\t    && TREE_CODE (tparm) == TYPE_DECL)\n+\t  {\n+\t    try_array_deduction (tparms, targs, TREE_TYPE (tmpl));\n+\t    tried_array_deduction = true;\n+\t    if (TREE_VEC_ELT (targs, i))\n+\t      goto again;\n+\t  }\n+\t/* If the type parameter is a parameter pack, then it will be deduced\n+\t   to an empty parameter pack.  This is another case that doesn't model\n+\t   well as partial specialization.  */\n+\tif (template_parameter_pack_p (tparm))\n+\t  {\n+\t    tree arg;\n+\t    if (TREE_CODE (tparm) == TEMPLATE_PARM_INDEX)\n+\t      {\n+\t\targ = make_node (NONTYPE_ARGUMENT_PACK);\n+\t\tTREE_CONSTANT (arg) = 1;\n+\t      }\n+\t    else\n+\t      arg = cxx_make_type (TYPE_ARGUMENT_PACK);\n+\t    ARGUMENT_PACK_ARGS (arg) = make_tree_vec (0);\n+\t    TREE_VEC_ELT (targs, i) = arg;\n+\t  }\n+      }\n \n   /* Maybe add in default template args.  This seems like a flaw in the\n      specification in terms of partial specialization, since it says the"}, {"sha": "53d305b5c71e4673301d57af2b6eb47db2e82877", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias16.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias16.C?ref=91293ffb6af18705ab7857dc47656bdd74a9ce31", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/109321\n+// { dg-do compile { target c++20 } }\n+\n+struct A;\n+template<class C1> struct B;\n+template<class, class C2=A> using D = B<C2>;\n+void f () { D() = 0; }\t\t// { dg-error \"deduction failed|no match\" }"}, {"sha": "b8346895b5bd1dcdc63969f7fc20abbdc272e2ca", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias17.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91293ffb6af18705ab7857dc47656bdd74a9ce31/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias17.C?ref=91293ffb6af18705ab7857dc47656bdd74a9ce31", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/109320\n+// { dg-do compile { target c++20 } }\n+\n+template<bool B>\n+struct S {};\n+template<int... C>\n+using u = S<true>;\n+struct X {};\n+auto a = u {};"}]}