{"sha": "4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "node_id": "C_kwDOANBUbNoAKDRiMmZkYThiZWEzZmRjYzk0MjE3MjZlNWEyMWU1MzdmNzQ1Y2FkMGI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:03:28Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-10-27T07:03:28Z"}, "message": "c++: Diagnose taking address of an immediate member function [PR102753]\n\nThe consteval20.C testcase ICEs, because while we have in cp_build_addr_expr_1\ndiagnostics for taking address of an immediate function (and as an exception\ndeal with build_address from immediate invocation), I forgot to diagnose\ntaking address of a member function which is done in a different place.\nI hope (s.*&S::foo) () is not an immediate invocation like\n(*&foo) () is not, so this patch just diagnoses taking address of a member\nfunction when not in immediate context.\n\nOn Mon, Oct 18, 2021 at 12:42:00PM -0400, Jason Merrill wrote:\n> > --- gcc/cp/typeck.c.jj      2021-10-05 09:53:55.382734051 +0200\n> > +++ gcc/cp/typeck.c 2021-10-15 19:28:38.034213437 +0200\n> > @@ -6773,9 +6773,21 @@ cp_build_addr_expr_1 (tree arg, bool str\n> >         return error_mark_node;\n> >       }\n> > +   if (TREE_CODE (t) == FUNCTION_DECL\n> > +       && DECL_IMMEDIATE_FUNCTION_P (t)\n> > +       && cp_unevaluated_operand == 0\n> > +       && (current_function_decl == NULL_TREE\n> > +           || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\n>\n> This doesn't cover some of the other cases of immediate context; we should\n> probably factor most of immediate_invocation_p out into a function called\n> something like in_immediate_context and use it here, and in several other\n> places as well.\n\nYou're right, I've done that for the two spots in cp_build_addr_expr_1\nand added testsuite coverage for where it changed behavior.\nWhile doing that I've discovered further issues.\n\nOne is that we weren't diagnosing PMFs referring to immediate methods\nreturned from immediate functions (either directly or embedded in\naggregates).  I'm not sure if it can only appear as PTRMEM_CST which\nI've handled (cp_walk_subtree only walks the type and not the\nPTRMEM_CST_MEMBER) or something else.\n\nAnother issue is that while default arg in immediate function\ncontaining &immediate_fn works properly, if it is immediate_fn\ninstead, we were incorrectly rejecting it.\nI've handled this in build_over_call, though with this usage\nin_consteval_if_p is slightly misnamed, it stands for in consteval\nif or some other reason why we are currently in immediate function context.\nThough, that flag alone can't be all the reasons for being in immediate\nfunction contexts, as I've tried the other reasons can't be handled in such\na bool and need to be tested too.\n\n2021-10-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/102753\n\t* cp-tree.h (saved_scope): Document that consteval_if_p member\n\tis also set while processing immediate invocation.\n\t(in_immediate_context): Declare.\n\t* call.c (in_immediate_context): New function.\n\t(immediate_invocation_p): Use it.\n\t(struct in_consteval_if_p_temp_override): New class.\n\t(build_over_call): Temporarily set in_consteval_if_p for processing\n\timmediate invocation arguments.\n\t* typeck.c (cp_build_addr_expr_1): Diagnose taking address of\n\tan immediate method.  Use t instead of TREE_OPERAND (arg, 1).\n\tUse in_immediate_context function.\n\t* constexpr.c (find_immediate_fndecl): Handle PTRMEM_CST\n\twhich refers to immediate function decl.\n\n\t* g++.dg/cpp2a/consteval13.C: Don't expect errors.\n\t* g++.dg/cpp2a/consteval20.C: New test.\n\t* g++.dg/cpp2a/consteval21.C: New test.\n\t* g++.dg/cpp2a/consteval22.C: New test.\n\t* g++.dg/cpp2a/consteval23.C: New test.\n\t* g++.dg/cpp23/consteval-if11.C: New test.", "tree": {"sha": "dba7b242d075d5589f704481cf1bbf5d4f325468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dba7b242d075d5589f704481cf1bbf5d4f325468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ff5b4edbed4d7b31a88e748e482b01fb5428a8c"}], "stats": {"total": 201, "additions": 188, "deletions": 13}, "files": [{"sha": "20e66c6c63f3c504052044e1a03c88a42df656a6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -9025,6 +9025,20 @@ build_trivial_dtor_call (tree instance, bool no_ptr_deref)\n \t\t instance, clobber);\n }\n \n+/* Return true if in an immediate function context, or an unevaluated operand,\n+   or a subexpression of an immediate invocation.  */\n+\n+bool\n+in_immediate_context ()\n+{\n+  return (cp_unevaluated_operand != 0\n+\t  || (current_function_decl != NULL_TREE\n+\t      && DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n+\t  || (current_binding_level->kind == sk_function_parms\n+\t      && current_binding_level->immediate_fn_ctx_p)\n+\t  || in_consteval_if_p);\n+}\n+\n /* Return true if a call to FN with number of arguments NARGS\n    is an immediate invocation.  */\n \n@@ -9033,18 +9047,25 @@ immediate_invocation_p (tree fn, int nargs)\n {\n   return (TREE_CODE (fn) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (fn)\n-\t  && cp_unevaluated_operand == 0\n-\t  && (current_function_decl == NULL_TREE\n-\t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl))\n-\t  && (current_binding_level->kind != sk_function_parms\n-\t      || !current_binding_level->immediate_fn_ctx_p)\n-\t  && !in_consteval_if_p\n+\t  && !in_immediate_context ()\n \t  /* As an exception, we defer std::source_location::current ()\n \t     invocations until genericization because LWG3396 mandates\n \t     special behavior for it.  */\n \t  && (nargs > 1 || !source_location_current_p (fn)));\n }\n \n+/* temp_override for in_consteval_if_p, which can't use make_temp_override\n+   because it is a bitfield.  */\n+\n+struct in_consteval_if_p_temp_override {\n+  bool save_in_consteval_if_p;\n+  in_consteval_if_p_temp_override ()\n+    : save_in_consteval_if_p (in_consteval_if_p) {}\n+  void reset () { in_consteval_if_p = save_in_consteval_if_p; }\n+  ~in_consteval_if_p_temp_override ()\n+  { reset (); }\n+};\n+\n /* Subroutine of the various build_*_call functions.  Overload resolution\n    has chosen a winning candidate CAND; build up a CALL_EXPR accordingly.\n    ARGS is a TREE_LIST of the unconverted arguments to the call.  FLAGS is a\n@@ -9254,6 +9275,12 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     nargs = parmlen;\n   argarray = XALLOCAVEC (tree, nargs);\n \n+  in_consteval_if_p_temp_override icip;\n+  /* If the call is immediate function invocation, make sure\n+     taking address of immediate functions is allowed in its arguments.  */\n+  if (immediate_invocation_p (STRIP_TEMPLATE (fn), nargs))\n+    in_consteval_if_p = true;\n+\n   /* The implicit parameters to a constructor are not considered by overload\n      resolution, and must be of the proper type.  */\n   if (DECL_CONSTRUCTOR_P (fn))\n@@ -9498,6 +9525,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n \n   gcc_assert (j <= nargs);\n   nargs = j;\n+  icip.reset ();\n \n   /* Avoid performing argument transformation if warnings are disabled.\n      When tf_warning is set and at least one of the warnings is active"}, {"sha": "daa6358d08fb4d5523027cbf5567ef4b48f87f7f", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -7276,6 +7276,10 @@ find_immediate_fndecl (tree *tp, int */*walk_subtrees*/, void */*data*/)\n {\n   if (TREE_CODE (*tp) == FUNCTION_DECL && DECL_IMMEDIATE_FUNCTION_P (*tp))\n     return *tp;\n+  if (TREE_CODE (*tp) == PTRMEM_CST\n+      && TREE_CODE (PTRMEM_CST_MEMBER (*tp)) == FUNCTION_DECL\n+      && DECL_IMMEDIATE_FUNCTION_P (PTRMEM_CST_MEMBER (*tp)))\n+    return PTRMEM_CST_MEMBER (*tp);\n   return NULL_TREE;\n }\n "}, {"sha": "f387b5036d27f7efd8eef0f7cc845b33618b035f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -1825,7 +1825,8 @@ struct GTY(()) saved_scope {\n      if-statement.  */\n   BOOL_BITFIELD discarded_stmt : 1;\n   /* Nonzero if we are parsing or instantiating the compound-statement\n-     of consteval if statement.  */\n+     of consteval if statement.  Also set while processing an immediate\n+     invocation.  */\n   BOOL_BITFIELD consteval_if_p : 1;\n \n   int unevaluated_operand;\n@@ -6547,6 +6548,7 @@ extern tree perform_direct_initialization_if_possible (tree, tree, bool,\n                                                        tsubst_flags_t);\n extern vec<tree,va_gc> *resolve_args (vec<tree,va_gc>*, tsubst_flags_t);\n extern tree in_charge_arg_for_name\t\t(tree);\n+extern bool in_immediate_context\t\t();\n extern tree build_cxx_call\t\t\t(tree, int, tree *,\n \t\t\t\t\t\t tsubst_flags_t,\n \t\t\t\t\t\t tree = NULL_TREE);"}, {"sha": "d5f50001dc093ce35ac999d0f62551618abef0eb", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -6773,9 +6773,19 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \t    return error_mark_node;\n \t  }\n \n+\tif (TREE_CODE (t) == FUNCTION_DECL\n+\t    && DECL_IMMEDIATE_FUNCTION_P (t)\n+\t    && !in_immediate_context ())\n+\t  {\n+\t    if (complain & tf_error)\n+\t      error_at (loc, \"taking address of an immediate function %qD\",\n+\t\t\tt);\n+\t    return error_mark_node;\n+\t  }\n+\n \ttype = build_ptrmem_type (context_for_name_lookup (t),\n \t\t\t\t  TREE_TYPE (t));\n-\tt = make_ptrmem_cst (type, TREE_OPERAND (arg, 1));\n+\tt = make_ptrmem_cst (type, t);\n \treturn t;\n       }\n \n@@ -6800,9 +6810,7 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n       tree stripped_arg = tree_strip_any_location_wrapper (arg);\n       if (TREE_CODE (stripped_arg) == FUNCTION_DECL\n \t  && DECL_IMMEDIATE_FUNCTION_P (stripped_arg)\n-\t  && cp_unevaluated_operand == 0\n-\t  && (current_function_decl == NULL_TREE\n-\t      || !DECL_IMMEDIATE_FUNCTION_P (current_function_decl)))\n+\t  && !in_immediate_context ())\n \t{\n \t  if (complain & tf_error)\n \t    error_at (loc, \"taking address of an immediate function %qD\","}, {"sha": "a22736cc0063eb1009039faf649298c75754bb44", "filename": "gcc/testsuite/g++.dg/cpp23/consteval-if11.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp23%2Fconsteval-if11.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+// { dg-options \"\" }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  consteval int foo () { return 1; }\n+  virtual consteval int bar () { return 2; }\n+  int s;\n+};\n+\n+consteval int foo () { return 42; }\n+\n+constexpr int\n+bar ()\n+{\n+  if consteval {\t// { dg-warning \"'if consteval' only available with\" \"\" { target c++20_only } }\n+    int (*fn1) () = foo;\n+    int (S::*fn2) () = &S::foo;\n+    int (S::*fn3) () = &S::bar;\n+    S s;\n+    return fn1 () + (s.*fn2) () + (s.*fn3) ();\n+  }\n+  return 0;\n+}\n+\n+static_assert (bar () == 45);"}, {"sha": "09ea6b70b6b1bff5fef797ad4147b2eff7d99fd6", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval13.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval13.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -10,8 +10,8 @@ void\n foo ()\n {\n    auto qux = [] (fnptr a = quux ()) consteval { return a (); };\n-   constexpr auto c = qux (baz);\t// { dg-error \"28:taking address of an immediate function\" }\n-   constexpr auto d = qux (bar);\t// { dg-error \"28:taking address of an immediate function\" }\n+   constexpr auto c = qux (baz);\n+   constexpr auto d = qux (bar);\n    static_assert (c == 1);\n    static_assert (d == 42);\n }"}, {"sha": "2c359637c6198299ab00df375dd324761683cd3d", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval20.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval20.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  consteval int foo () const { return 42; }\n+};\n+\n+constexpr S s;\n+\n+int\n+bar ()\n+{\n+  return (s.*&S::foo) ();\t\t// { dg-error \"taking address of an immediate function\" }\n+}\n+\n+constexpr auto a = &S::foo;\t\t// { dg-error \"taking address of an immediate function\" }\n+\n+consteval int\n+baz ()\n+{\n+  return (s.*&S::foo) ();\n+}\n+\n+static_assert (baz () == 42);"}, {"sha": "06ec705c75bc477783bc0c8d9d4f8d2c67aeeaae", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval21.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval21.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  consteval int foo () { return 1; }\n+  virtual consteval int bar () { return 2; }\n+  int s;\n+};\n+\n+consteval int foo () { return 42; }\n+\n+consteval int\n+bar (int (*fn) () = &foo)\n+{\n+  return fn ();\n+}\n+\n+consteval int\n+baz (int (S::*fn) () = &S::foo)\n+{\n+  S s;\n+  return (s.*fn) ();\n+}\n+\n+consteval int\n+qux (int (S::*fn) () = &S::bar)\n+{\n+  S s;\n+  return (s.*fn) ();\n+}\n+\n+static_assert (bar () == 42);\n+static_assert (baz () == 1);\n+static_assert (qux () == 2);"}, {"sha": "5c3637189dc0593228e5dbe2426f57531ee98cc3", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval22.C", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval22.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -0,0 +1,34 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+\n+struct S {\n+  constexpr S () : s (0) {}\n+  consteval int foo () { return 1; }\n+  virtual consteval int bar () { return 2; }\n+  int s;\n+};\n+typedef int (S::*P) ();\n+\n+consteval P\n+foo ()\n+{\n+  return &S::foo;\n+}\n+\n+consteval P\n+bar ()\n+{\n+  return &S::bar;\n+}\n+\n+consteval int\n+baz ()\n+{\n+  S s;\n+  return (s.*(foo ())) () + (s.*(bar ())) ();\n+}\n+\n+static_assert (baz () == 3);\n+\n+constexpr P a = foo ();\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }\n+constexpr P b = bar ();\t\t// { dg-error \"immediate evaluation returns address of immediate function\" }"}, {"sha": "4c7e844c4509f95524768b00e10be41a5b95b7a2", "filename": "gcc/testsuite/g++.dg/cpp2a/consteval23.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b2fda8bea3fdcc9421726e5a21e537f745cad0b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconsteval23.C?ref=4b2fda8bea3fdcc9421726e5a21e537f745cad0b", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/102753\n+// { dg-do compile { target c++20 } }\n+\n+consteval int foo () { return 42; }\n+\n+consteval int\n+bar (int (*fn) () = foo)\n+{\n+  return fn ();\n+}\n+\n+static_assert (bar () == 42);\n+static_assert (bar (foo) == 42);"}]}