{"sha": "c1ff79996acfba45a50f181f9d3be1625cdef8f6", "node_id": "C_kwDOANBUbNoAKGMxZmY3OTk5NmFjZmJhNDVhNTBmMTgxZjlkM2JlMTYyNWNkZWY4ZjY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-05-10T17:17:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-10T17:17:08Z"}, "message": "Merge #1242\n\n1242: Remove undefined behavior in context vector r=CohenArthur a=CohenArthur\n\nThis also fixes the undefined behavior. Once again we are hurt by\r\n`std::vector<T>::back()` returning references and not\r\npointers/`std::optional<T>`s!\r\n\r\nThe cause of the bug was some overzealous popping from the context\r\nvector in block expressions. The amount of calls to `pop_context` is now\r\nthe same as the amount of calls to `push_context`\r\n\r\nCloses #1233 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "d99b71a754b5c9bc70d7a8ac6b7783f0f535d773", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d99b71a754b5c9bc70d7a8ac6b7783f0f535d773"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1ff79996acfba45a50f181f9d3be1625cdef8f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiep4UCRBK7hj4Ov3rIwAAwGIIABtWsgOnMADFNWSChrNC8Z8d\nbI6acrUC6XblgfWflQiNGIyOKvvTPv7LJ3s8Yk7H7Knq9xQnt2IwM0rLl7o2tyBa\noD+n/CzcgygOfEOizIw7yLVMgKSKnTCnnIuVglC5gi9LVLj2M+msC0HH2FDEOYRB\nRYV8nMdzICoAsrWCWvV5TLXRdWah0B9m8rSiVl0v4bWot8GV8L7geTvnI2xoA11H\n3Xj2hoq6yWky9uW6ASeADEdFyKeGgklzWxlJKhlXMDLIw7MM+tySZJHIgqMK83Tr\n8jh6fpxrpRHJ0n4tKFZOnTCjOCb4a9JwJ5c+VASCDgH2V/SvriZqWyNqe8BuYAc=\n=ZzLw\n-----END PGP SIGNATURE-----\n", "payload": "tree d99b71a754b5c9bc70d7a8ac6b7783f0f535d773\nparent 03c21a08eb40b71e67da0c8ae83ed2c645fb76a3\nparent 2959ff8e7dd8b06bee76636af84c5aee06971397\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1652203028 +0000\ncommitter GitHub <noreply@github.com> 1652203028 +0000\n\nMerge #1242\n\n1242: Remove undefined behavior in context vector r=CohenArthur a=CohenArthur\n\nThis also fixes the undefined behavior. Once again we are hurt by\r\n`std::vector<T>::back()` returning references and not\r\npointers/`std::optional<T>`s!\r\n\r\nThe cause of the bug was some overzealous popping from the context\r\nvector in block expressions. The amount of calls to `pop_context` is now\r\nthe same as the amount of calls to `push_context`\r\n\r\nCloses #1233 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ff79996acfba45a50f181f9d3be1625cdef8f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1ff79996acfba45a50f181f9d3be1625cdef8f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1ff79996acfba45a50f181f9d3be1625cdef8f6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03c21a08eb40b71e67da0c8ae83ed2c645fb76a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03c21a08eb40b71e67da0c8ae83ed2c645fb76a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03c21a08eb40b71e67da0c8ae83ed2c645fb76a3"}, {"sha": "2959ff8e7dd8b06bee76636af84c5aee06971397", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2959ff8e7dd8b06bee76636af84c5aee06971397", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2959ff8e7dd8b06bee76636af84c5aee06971397"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "c7c6867dd1027ef658951453518287c32da0639a", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=c1ff79996acfba45a50f181f9d3be1625cdef8f6", "patch": "@@ -1193,7 +1193,6 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n   if (expander.fails_cfg_with_expand (expr.get_outer_attrs ()))\n     {\n       expr.mark_for_strip ();\n-      expander.pop_context ();\n       return;\n     }\n \n@@ -1203,7 +1202,6 @@ AttrVisitor::visit (AST::BlockExpr &expr)\n   if (expander.fails_cfg_with_expand (expr.get_inner_attrs ()))\n     {\n       expr.mark_for_strip ();\n-      expander.pop_context ();\n       return;\n     }\n "}, {"sha": "a5825249f338eb222c5ecda64739a594abd95574", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=c1ff79996acfba45a50f181f9d3be1625cdef8f6", "patch": "@@ -275,8 +275,11 @@ struct MacroExpander\n \n   ContextType pop_context ()\n   {\n+    rust_assert (!context.empty ());\n+\n     ContextType t = context.back ();\n     context.pop_back ();\n+\n     return t;\n   }\n "}, {"sha": "d762bb7fb9e52354ecc497deb3b479f633c03bd0", "filename": "gcc/testsuite/rust/compile/macro-issue1233.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1ff79996acfba45a50f181f9d3be1625cdef8f6/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro-issue1233.rs?ref=c1ff79996acfba45a50f181f9d3be1625cdef8f6", "patch": "@@ -0,0 +1,22 @@\n+// { dg-additional-options \"-w\" }\n+\n+macro_rules! impl_uint {\n+    ($($ty:ident = $lang:literal),*) => {\n+        $(\n+            impl $ty {\n+                pub fn to_le(self) -> Self {\n+                    #[cfg(not(target_endian = \"little\"))]\n+                    {\n+                        self\n+                    }\n+                    #[cfg(target_endian = \"little\")]\n+                    {\n+                        self\n+                    }\n+                }\n+            }\n+        )*\n+    }\n+}\n+\n+impl_uint!(u8 = \"u8\", u16 = \"u16\", u32 = \"u32\");"}]}