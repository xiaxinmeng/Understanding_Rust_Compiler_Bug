{"sha": "7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c", "node_id": "C_kwDOANBUbNoAKDdmZmUxMzUwN2ZjM2YxMjU3NjZlMGZhNWY5ZDBhNGE0N2U1Y2NlNGM", "commit": {"author": {"name": "Pierre-Emmanuel Patry", "email": "pierre-emmanuel.patry@embecosm.com", "date": "2023-05-31T11:08:10Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-06-01T15:23:35Z"}, "message": "converter: Refactor locations\n\nRefactor location to make code smaller and cleaner.\n\ngcc/rust/ChangeLog:\n\n\t* util/rust-token-converter.cc (convert): Use a variable instead\n\tof multiple nested calls.\n\nSigned-off-by: Pierre-Emmanuel Patry <pierre-emmanuel.patry@embecosm.com>", "tree": {"sha": "615d931fa9ca226c091a734bd68118c9597e6f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/615d931fa9ca226c091a734bd68118c9597e6f7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c/comments", "author": {"login": "P-E-P", "id": 32375388, "node_id": "MDQ6VXNlcjMyMzc1Mzg4", "avatar_url": "https://avatars.githubusercontent.com/u/32375388?v=4", "gravatar_id": "", "url": "https://api.github.com/users/P-E-P", "html_url": "https://github.com/P-E-P", "followers_url": "https://api.github.com/users/P-E-P/followers", "following_url": "https://api.github.com/users/P-E-P/following{/other_user}", "gists_url": "https://api.github.com/users/P-E-P/gists{/gist_id}", "starred_url": "https://api.github.com/users/P-E-P/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/P-E-P/subscriptions", "organizations_url": "https://api.github.com/users/P-E-P/orgs", "repos_url": "https://api.github.com/users/P-E-P/repos", "events_url": "https://api.github.com/users/P-E-P/events{/privacy}", "received_events_url": "https://api.github.com/users/P-E-P/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430b26a3295329c931ce527de20b4c339eb285f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430b26a3295329c931ce527de20b4c339eb285f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430b26a3295329c931ce527de20b4c339eb285f2"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "e7d9a65991da0039114ca1831d70b1be2248d73d", "filename": "gcc/rust/util/rust-token-converter.cc", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c/gcc%2Frust%2Futil%2Frust-token-converter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c/gcc%2Frust%2Futil%2Frust-token-converter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-token-converter.cc?ref=7ffe13507fc3f125766e0fa5f9d0a4a47e5cce4c", "patch": "@@ -82,6 +82,7 @@ convert (const std::vector<const_TokenPtr> &tokens)\n   trees.push_back (ProcMacro::TokenStream::make_tokenstream ());\n   for (auto &token : tokens)\n     {\n+      auto loc = convert (token->get_locus ());\n       switch (token->get_id ())\n \t{\n \t// Literals\n@@ -96,26 +97,22 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase CHAR_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_char (),\n-\t\t\t\t\t      convert (token->get_locus ()),\n-\t\t\t\t\t      token->as_string ())));\n+\t\t\t\t\t      loc, token->as_string ())));\n \t  break;\n \tcase STRING_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_str (),\n-\t\t\t\t\t      convert (token->get_locus ()),\n-\t\t\t\t\t      token->as_string ())));\n+\t\t\t\t\t      loc, token->as_string ())));\n \t  break;\n \tcase BYTE_CHAR_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (ProcMacro::LitKind::make_byte (),\n-\t\t\t\t\t      convert (token->get_locus ()),\n-\t\t\t\t\t      token->as_string ())));\n+\t\t\t\t\t      loc, token->as_string ())));\n \t  break;\n \tcase BYTE_STRING_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n \t    ProcMacro::Literal::make_literal (\n-\t      ProcMacro::LitKind::make_byte_str (),\n-\t      convert (token->get_locus ()), token->as_string ())));\n+\t      ProcMacro::LitKind::make_byte_str (), loc, token->as_string ())));\n \t  break;\n \t// Ident\n \tcase IDENTIFIER:\n@@ -175,8 +172,7 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase FALSE_LITERAL:\n \tcase TRUE_LITERAL:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t    ProcMacro::Ident::make_ident (token->as_string (),\n-\t\t\t\t\t  convert (token->get_locus ()))));\n+\t    ProcMacro::Ident::make_ident (token->as_string (), loc)));\n \t  break;\n \t// Joint punct\n \tcase OR:\n@@ -207,12 +203,9 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \t    auto it = str.cbegin ();\n \t    for (; it != str.cend () - 1; it++)\n \t      trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t\tProcMacro::Punct::make_punct (*it,\n-\t\t\t\t\t      convert (token->get_locus ()),\n-\t\t\t\t\t      ProcMacro::JOINT)));\n+\t\tProcMacro::Punct::make_punct (*it, loc, ProcMacro::JOINT)));\n \t    trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t      ProcMacro::Punct::make_punct (*it, convert (token->get_locus ()),\n-\t\t\t\t\t    ProcMacro::ALONE)));\n+\t      ProcMacro::Punct::make_punct (*it, loc, ProcMacro::ALONE)));\n \t  }\n \t  break;\n \t// Alone punct tokens\n@@ -239,8 +232,7 @@ convert (const std::vector<const_TokenPtr> &tokens)\n \tcase QUESTION_MARK:\n \tcase SINGLE_QUOTE:\n \t  trees.back ().push (ProcMacro::TokenTree::make_tokentree (\n-\t    ProcMacro::Punct::make_punct (token->as_string ()[0],\n-\t\t\t\t\t  convert (token->get_locus ()),\n+\t    ProcMacro::Punct::make_punct (token->as_string ()[0], loc,\n \t\t\t\t\t  ProcMacro::ALONE)));\n \t  break;\n \tcase RIGHT_PAREN:"}]}