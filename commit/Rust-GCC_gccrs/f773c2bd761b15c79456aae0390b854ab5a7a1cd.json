{"sha": "f773c2bd761b15c79456aae0390b854ab5a7a1cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc3M2MyYmQ3NjFiMTVjNzk0NTZhYWUwMzkwYjg1NGFiNWE3YTFjZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-03-19T17:33:45Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-03-19T17:33:45Z"}, "message": "cfgcleanup.c (mark_effect): Use bitmap_set_range/bitmap_clear_range instead of loop.\n\n\t* cfgcleanup.c (mark_effect): Use bitmap_set_range/bitmap_clear_range\n\tinstead of loop. Use HARD_REGISTER_NUM_P predicate.\n\t* haifa-sched.c (setup_ref_regs): Ditto.\n\t* caller-save.c (add_used_regs_1): Ditto.\n\t* dse.c (look_for_hardregs): Ditto.\n\t* df-problems.c (df_simulate_one_insn_forwards): Ditto.\n\t* sched-rgn.c (check_live_1): Ditto.\n\nFrom-SVN: r171183", "tree": {"sha": "65a46d02e15ddf767df696b9661692c68608064a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65a46d02e15ddf767df696b9661692c68608064a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f773c2bd761b15c79456aae0390b854ab5a7a1cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f773c2bd761b15c79456aae0390b854ab5a7a1cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f773c2bd761b15c79456aae0390b854ab5a7a1cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f773c2bd761b15c79456aae0390b854ab5a7a1cd/comments", "author": null, "committer": null, "parents": [{"sha": "458653cc067362d84835bc39bd849dcdb4c13127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/458653cc067362d84835bc39bd849dcdb4c13127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/458653cc067362d84835bc39bd849dcdb4c13127"}], "stats": {"total": 106, "additions": 48, "deletions": 58}, "files": [{"sha": "bf32ebb9e50c7e93676cc6460582d1c6f93261a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1,3 +1,13 @@\n+2011-03-19  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* cfgcleanup.c (mark_effect): Use bitmap_set_range/bitmap_clear_range\n+\tinstead of loop. Use HARD_REGISTER_NUM_P predicate.\n+\t* haifa-sched.c (setup_ref_regs): Ditto.\n+\t* caller-save.c (add_used_regs_1): Ditto.\n+\t* dse.c (look_for_hardregs): Ditto.\n+\t* df-problems.c (df_simulate_one_insn_forwards): Ditto.\n+\t* sched-rgn.c (check_live_1): Ditto.\n+\n 2011-03-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (diagnose_mismatched_decls): Give an error for"}, {"sha": "f32d05ffde48c82f0ea31a6e889174e746d3a124", "filename": "gcc/caller-save.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1312,7 +1312,7 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n static int\n add_used_regs_1 (rtx *loc, void *data)\n {\n-  int regno, i;\n+  unsigned int regno;\n   regset live;\n   rtx x;\n \n@@ -1321,11 +1321,10 @@ add_used_regs_1 (rtx *loc, void *data)\n   if (REG_P (x))\n     {\n       regno = REGNO (x);\n-      if (!HARD_REGISTER_NUM_P (regno))\n+      if (HARD_REGISTER_NUM_P (regno))\n+\tbitmap_set_range (live, regno, hard_regno_nregs[regno][GET_MODE (x)]);\n+      else\n \tregno = reg_renumber[regno];\n-      if (regno >= 0)\n-\tfor (i = hard_regno_nregs[regno][GET_MODE (x)] - 1; i >= 0; i--)\n-\t  SET_REGNO_REG_SET (live, regno + i);\n     }\n   return 0;\n }"}, {"sha": "266fda7f1aac51c2636e9241fd729cb78dda1144", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1,6 +1,6 @@\n /* Control flow optimization code for GNU compiler.\n    Copyright (C) 1987, 1988, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -208,13 +208,11 @@ mark_effect (rtx exp, regset nonequal)\n \t{\n \t  dest = XEXP (exp, 0);\n \t  regno = REGNO (dest);\n-\t  CLEAR_REGNO_REG_SET (nonequal, regno);\n-\t  if (regno < FIRST_PSEUDO_REGISTER)\n-\t    {\n-\t      int n = hard_regno_nregs[regno][GET_MODE (dest)];\n-\t      while (--n > 0)\n-\t\tCLEAR_REGNO_REG_SET (nonequal, regno + n);\n-\t    }\n+\t  if (HARD_REGISTER_NUM_P (regno))\n+\t    bitmap_clear_range (nonequal, regno,\n+\t\t\t\thard_regno_nregs[regno][GET_MODE (dest)]);\n+\t  else\n+\t    bitmap_clear_bit (nonequal, regno);\n \t}\n       return false;\n \n@@ -227,13 +225,11 @@ mark_effect (rtx exp, regset nonequal)\n       if (!REG_P (dest))\n \treturn true;\n       regno = REGNO (dest);\n-      SET_REGNO_REG_SET (nonequal, regno);\n-      if (regno < FIRST_PSEUDO_REGISTER)\n-\t{\n-\t  int n = hard_regno_nregs[regno][GET_MODE (dest)];\n-\t  while (--n > 0)\n-\t    SET_REGNO_REG_SET (nonequal, regno + n);\n-\t}\n+      if (HARD_REGISTER_NUM_P (regno))\n+\tbitmap_set_range (nonequal, regno,\n+\t\t\t  hard_regno_nregs[regno][GET_MODE (dest)]);\n+      else\n+\tbitmap_set_bit (nonequal, regno);\n       return false;\n \n     default:"}, {"sha": "0f398ba3aa4bf87ea12846b888ac630e8bc0ecce", "filename": "gcc/df-problems.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1,6 +1,6 @@\n /* Standard problems for dataflow support routines.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,\n-   2008, 2009, 2010 Free Software Foundation, Inc.\n+   2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n    Originally contributed by Michael P. Hayes\n              (m.hayes@elec.canterbury.ac.nz, mhayes@redhat.com)\n    Major rewrite contributed by Danny Berlin (dberlin@dberlin.org)\n@@ -3774,12 +3774,9 @@ df_simulate_one_insn_forwards (basic_block bb, rtx insn, bitmap live)\n \t  {\n \t    rtx reg = XEXP (link, 0);\n \t    int regno = REGNO (reg);\n-\t    if (regno < FIRST_PSEUDO_REGISTER)\n-\t      {\n-\t\tint n = hard_regno_nregs[regno][GET_MODE (reg)];\n-\t\twhile (--n >= 0)\n-\t\t  bitmap_clear_bit (live, regno + n);\n-\t      }\n+\t    if (HARD_REGISTER_NUM_P (regno))\n+\t      bitmap_clear_range (live, regno,\n+\t\t\t\t  hard_regno_nregs[regno][GET_MODE (reg)]);\n \t    else\n \t      bitmap_clear_bit (live, regno);\n \t  }"}, {"sha": "dee4c76d4300c1d65cc771b73ef11b45c4ddb1f3", "filename": "gcc/dse.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1728,12 +1728,11 @@ look_for_hardregs (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n   bitmap regs_set = (bitmap) data;\n \n   if (REG_P (x)\n-      && REGNO (x) < FIRST_PSEUDO_REGISTER)\n+      && HARD_REGISTER_P (x))\n     {\n-      int regno = REGNO (x);\n-      int n = hard_regno_nregs[regno][GET_MODE (x)];\n-      while (--n >= 0)\n-\tbitmap_set_bit (regs_set, regno + n);\n+      unsigned int regno = REGNO (x);\n+      bitmap_set_range (regs_set, regno,\n+\t\t\thard_regno_nregs[regno][GET_MODE (x)]);\n     }\n }\n "}, {"sha": "ea69254fc9544b630036707b383b303638638652", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n@@ -672,11 +672,11 @@ setup_ref_regs (rtx x)\n   if (REG_P (x))\n     {\n       regno = REGNO (x);\n-      if (regno >= FIRST_PSEUDO_REGISTER)\n-\tbitmap_set_bit (region_ref_regs, REGNO (x));\n+      if (HARD_REGISTER_NUM_P (regno))\n+\tbitmap_set_range (region_ref_regs, regno,\n+\t\t\t  hard_regno_nregs[regno][GET_MODE (x)]);\n       else\n-\tfor (i = hard_regno_nregs[regno][GET_MODE (x)] - 1; i >= 0; i--)\n-\t  bitmap_set_bit (region_ref_regs, regno + i);\n+\tbitmap_set_bit (region_ref_regs, REGNO (x));\n       return;\n     }\n   fmt = GET_RTX_FORMAT (code);"}, {"sha": "be2a1e9a211fc6d08300b5b7b4b58dacd7c7c987", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f773c2bd761b15c79456aae0390b854ab5a7a1cd/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=f773c2bd761b15c79456aae0390b854ab5a7a1cd", "patch": "@@ -1,6 +1,6 @@\n /* Instruction scheduling pass.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,\n-   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010\n+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2010, 2011\n    Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) Enhanced by,\n    and currently maintained by, Jim Wilson (wilson@cygnus.com)\n@@ -1762,29 +1762,18 @@ update_live_1 (int src, rtx x)\n \n   regno = REGNO (reg);\n \n-  if (regno >= FIRST_PSEUDO_REGISTER || !global_regs[regno])\n+  if (! HARD_REGISTER_NUM_P (regno)\n+      || !global_regs[regno])\n     {\n-      if (regno < FIRST_PSEUDO_REGISTER)\n-\t{\n-\t  int j = hard_regno_nregs[regno][GET_MODE (reg)];\n-\t  while (--j >= 0)\n-\t    {\n-\t      for (i = 0; i < candidate_table[src].update_bbs.nr_members; i++)\n-\t\t{\n-\t\t  basic_block b = candidate_table[src].update_bbs.first_member[i];\n-\n-\t\t  SET_REGNO_REG_SET (df_get_live_in (b), regno + j);\n-\t\t}\n-\t    }\n-\t}\n-      else\n+      for (i = 0; i < candidate_table[src].update_bbs.nr_members; i++)\n \t{\n-\t  for (i = 0; i < candidate_table[src].update_bbs.nr_members; i++)\n-\t    {\n-\t      basic_block b = candidate_table[src].update_bbs.first_member[i];\n+\t  basic_block b = candidate_table[src].update_bbs.first_member[i];\n \n-\t      SET_REGNO_REG_SET (df_get_live_in (b), regno);\n-\t    }\n+\t  if (HARD_REGISTER_NUM_P (regno))\n+\t    bitmap_set_range (df_get_live_in (b), regno,\n+\t\t\t      hard_regno_nregs[regno][GET_MODE (reg)]);\n+\t  else\n+\t    bitmap_set_bit (df_get_live_in (b), regno);\n \t}\n     }\n }"}]}