{"sha": "218e53ff255953c209d36c431f3eda3fcd7d296a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE4ZTUzZmYyNTU5NTNjMjA5ZDM2YzQzMWYzZWRhM2ZjZDdkMjk2YQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2009-04-22T09:46:29Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-22T09:46:29Z"}, "message": "exp_pakd.adb: Minor comment fixes.\n\n2009-04-22  Bob Duff  <duff@adacore.com>\n\n\t* exp_pakd.adb: Minor comment fixes.\n\n\t* sinfo.ads, par-load.adb, sem_ch10.adb, lib-load.ads, lib-load.adb\n\tsem_ch12.adb: Change the meaning of the Library_Unit attribute to\n\tinclude units containing instantiations, as well as units that are\n\tgeneric instantiations.\n\n\t* sem.adb: Include dependents and corresponding specs/bodies in the\n\tunit walk.\n\n\t* gcc-interface/Make-lang.in:\n\tsem now depends on s-bitops, because of the packed array of Booleans.\n\nFrom-SVN: r146556", "tree": {"sha": "90c235956a6ffcc7534101fd39971c423ec12a7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c235956a6ffcc7534101fd39971c423ec12a7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/218e53ff255953c209d36c431f3eda3fcd7d296a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e53ff255953c209d36c431f3eda3fcd7d296a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/218e53ff255953c209d36c431f3eda3fcd7d296a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/218e53ff255953c209d36c431f3eda3fcd7d296a/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c73b64789603a591d339431e8b2e42079d4a54e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c73b64789603a591d339431e8b2e42079d4a54e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c73b64789603a591d339431e8b2e42079d4a54e5"}], "stats": {"total": 451, "additions": 366, "deletions": 85}, "files": [{"sha": "bcd2dd9c92e12a3b38f1d983199432d90a1ff4db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -1,3 +1,18 @@\n+2009-04-22  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_pakd.adb: Minor comment fixes.\n+\n+\t* sinfo.ads, par-load.adb, sem_ch10.adb, lib-load.ads, lib-load.adb\n+\tsem_ch12.adb: Change the meaning of the Library_Unit attribute to\n+\tinclude units containing instantiations, as well as units that are\n+\tgeneric instantiations.\n+\n+\t* sem.adb: Include dependents and corresponding specs/bodies in the\n+\tunit walk.\n+\n+\t* gcc-interface/Make-lang.in:\n+\tsem now depends on s-bitops, because of the packed array of Booleans.\n+\n 2009-04-22  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/ada-tree.def: Fix formatting nits."}, {"sha": "ed7ac4b9e76ffd3bb4ffbf14209d5925175c5127", "filename": "gcc/ada/exp_pakd.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fexp_pakd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fexp_pakd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_pakd.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1824,7 +1824,7 @@ package body Exp_Pakd is\n \n       --    Result : Ltype;\n \n-      --    System.Bitops.Bit_And/Or/Xor\n+      --    System.Bit_Ops.Bit_And/Or/Xor\n       --     (Left'Address,\n       --      Ltype'Length * Ltype'Component_Size;\n       --      Right'Address,\n@@ -2183,7 +2183,7 @@ package body Exp_Pakd is\n \n       --    Result : Typ;\n \n-      --    System.Bitops.Bit_Not\n+      --    System.Bit_Ops.Bit_Not\n       --     (Opnd'Address,\n       --      Typ'Length * Typ'Component_Size;\n       --      Result'Address);"}, {"sha": "5973262f20cac7046b0ec4e09d74511364cb01af", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -1,6 +1,6 @@\n # Top level -*- makefile -*- fragment for GNU Ada (GNAT).\n #   Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,\n-#   2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n+#   2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n \n #This file is part of GCC.\n \n@@ -118,7 +118,7 @@ GNAT1_C_OBJS = ada/b_gnat1.o ada/adadecode.o ada/adaint.o ada/cstreams.o \\\n \n # Object files from Ada sources that are used by gnat1\n \n-GNAT_ADA_OBJS = ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-except.o \\\n+GNAT_ADA_OBJS = ada/s-bitops.o ada/ada.o ada/a-charac.o ada/a-chlat1.o ada/a-except.o \\\n  ada/a-elchha.o ada/a-ioexce.o \\\n  ada/s-memory.o ada/s-carun8.o ada/s-casuti.o ada/s-strcom.o ada/s-purexc.o \\\n  ada/s-htable.o ada/s-traceb.o ada/s-mastop.o ada/ali.o \\\n@@ -2406,15 +2406,15 @@ ada/gnat1drv.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/sem_type.ads ada/sem_util.ads ada/sinfo.ads ada/sinfo.adb \\\n    ada/sinput.ads ada/sinput.adb ada/sinput-l.ads ada/snames.ads \\\n    ada/sprint.ads ada/stand.ads ada/stringt.ads ada/system.ads \\\n-   ada/s-assert.ads ada/s-exctab.ads ada/s-htable.ads ada/s-imenne.ads \\\n-   ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads ada/s-rident.ads \\\n-   ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads \\\n-   ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads ada/s-traent.ads \\\n-   ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads ada/table.adb \\\n-   ada/targparm.ads ada/tree_gen.ads ada/tree_io.ads ada/treepr.ads \\\n-   ada/ttypes.ads ada/types.ads ada/uintp.ads ada/uintp.adb ada/uname.ads \\\n-   ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads ada/usage.ads \\\n-   ada/widechar.ads \n+   ada/s-assert.ads ada/s-bitops.ads ada/s-exctab.ads ada/s-htable.ads \\\n+   ada/s-imenne.ads ada/s-memory.ads ada/s-os_lib.ads ada/s-parame.ads \\\n+   ada/s-rident.ads ada/s-secsta.ads ada/s-soflin.ads ada/s-stache.ads \\\n+   ada/s-stalib.ads ada/s-stoele.ads ada/s-stoele.adb ada/s-string.ads \\\n+   ada/s-traent.ads ada/s-unstyp.ads ada/s-wchcon.ads ada/table.ads \\\n+   ada/table.adb ada/targparm.ads ada/tree_gen.ads ada/tree_io.ads \\\n+   ada/treepr.ads ada/ttypes.ads ada/types.ads ada/uintp.ads ada/uintp.adb \\\n+   ada/uname.ads ada/unchconv.ads ada/unchdeal.ads ada/urealp.ads \\\n+   ada/usage.ads ada/widechar.ads \n \n ada/gnatbind.o : ada/ada.ads ada/a-comlin.ads ada/a-clrefi.ads \\\n    ada/a-except.ads ada/a-unccon.ads ada/a-uncdea.ads ada/ali.ads \\\n@@ -2871,6 +2871,10 @@ ada/s-assert.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n    ada/s-soflin.ads ada/s-stache.ads ada/s-stalib.ads ada/s-stoele.ads \\\n    ada/s-stoele.adb ada/s-traent.ads \n \n+ada/s-bitops.o : ada/ada.ads ada/a-except.ads ada/a-unccon.ads \\\n+   ada/system.ads ada/s-bitops.ads ada/s-bitops.adb ada/s-parame.ads \\\n+   ada/s-stalib.ads ada/s-traent.ads ada/s-unstyp.ads \n+\n ada/s-carun8.o : ada/ada.ads ada/a-unccon.ads ada/system.ads \\\n    ada/s-addope.ads ada/s-addope.adb ada/s-carun8.ads ada/s-carun8.adb \n "}, {"sha": "c582e1e58416931f191114431746ecc82221fc22", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -766,17 +766,27 @@ package body Lib.Load is\n    --  declaration has been attached to a new compilation unit node, and\n    --  code will have to be generated for it.\n \n-   procedure Make_Instance_Unit (N : Node_Id) is\n+   procedure Make_Instance_Unit (N : Node_Id; In_Main : Boolean) is\n       Sind : constant Source_File_Index := Source_Index (Main_Unit);\n    begin\n       Units.Increment_Last;\n-      Units.Table (Units.Last)               := Units.Table (Main_Unit);\n-      Units.Table (Units.Last).Cunit         := Library_Unit (N);\n-      Units.Table (Units.Last).Generate_Code := True;\n-      Units.Table (Main_Unit).Cunit          := N;\n-      Units.Table (Main_Unit).Unit_Name      :=\n-        Get_Body_Name (Unit_Name (Get_Cunit_Unit_Number (Library_Unit (N))));\n-      Units.Table (Main_Unit).Version        := Source_Checksum (Sind);\n+\n+      if In_Main then\n+         Units.Table (Units.Last)               := Units.Table (Main_Unit);\n+         Units.Table (Units.Last).Cunit         := Library_Unit (N);\n+         Units.Table (Units.Last).Generate_Code := True;\n+         Units.Table (Main_Unit).Cunit          := N;\n+         Units.Table (Main_Unit).Unit_Name      :=\n+           Get_Body_Name\n+             (Unit_Name (Get_Cunit_Unit_Number (Library_Unit (N))));\n+         Units.Table (Main_Unit).Version        := Source_Checksum (Sind);\n+\n+      else\n+         --  Duplicate information from instance unit, for the body.\n+         Units.Table (Units.Last) :=\n+           Units.Table (Get_Cunit_Unit_Number (Library_Unit (N)));\n+         Units.Table (Units.Last).Cunit := N;\n+      end if;\n    end Make_Instance_Unit;\n \n    ------------------------"}, {"sha": "088cc38249943bd72d56dc8f3c4c38c22ae3c485", "filename": "gcc/ada/lib-load.ads", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Flib-load.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Flib-load.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.ads?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -169,13 +169,20 @@ package Lib.Load is\n    --  creates a dummy package unit so that compilation can continue without\n    --  blowing up when the missing unit is referenced.\n \n-   procedure Make_Instance_Unit (N : Node_Id);\n+   procedure Make_Instance_Unit (N : Node_Id; In_Main : Boolean);\n    --  When a compilation unit is an instantiation, it contains both the\n    --  declaration and the body of the instance, each of which can have its\n    --  own elaboration routine. The file itself corresponds to the declaration.\n    --  We create an additional entry for the body, so that the binder can\n    --  generate the proper elaboration calls to both. The argument N is the\n    --  compilation unit node created for the body.\n+   --  If the instance is not the main program, we still generate the instance\n+   --  body even though we do not generate code for it. In that case we still\n+   --  generate a compilation unit node for it, and we need to make an entry\n+   --  for it in the units table, so as to maintain a one-to-one mapping\n+   --  between table and nodes. The table entry is used among other things to\n+   --  provide a canonical traversal order for context units for Inspector.\n+   --  The flag In_Main indicates whether the instance is the main unit.\n \n    procedure Version_Update (U : Node_Id; From : Node_Id);\n    --  This routine is called when unit U is found to be semantically"}, {"sha": "544998b623ea04e242fa77e4ddbcc237963a9e79", "filename": "gcc/ada/par-load.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fpar-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fpar-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-load.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -266,12 +266,13 @@ begin\n            Error_Node => Curunit,\n            Corr_Body  => Cur_Unum);\n \n-      --  If we successfully load the unit, then set the spec pointer. Once\n-      --  again note that if the loaded unit has a fatal error, Load will\n-      --  have set our Fatal_Error flag to propagate this condition.\n+      --  If we successfully load the unit, then set the spec/body\n+      --  pointers. Once again note that if the loaded unit has a fatal error,\n+      --  Load will have set our Fatal_Error flag to propagate this condition.\n \n       if Unum /= No_Unit then\n          Set_Library_Unit (Curunit, Cunit (Unum));\n+         Set_Library_Unit (Cunit (Unum), Curunit);\n \n          --  If this is a separate spec for the main unit, then we reset\n          --  Main_Unit_Entity to point to the entity for this separate spec"}, {"sha": "4c35ab9fc00f378aaa0931dbde4ded3872410185", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 277, "deletions": 38, "changes": 315, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -77,15 +77,28 @@ package body Sem is\n    --  No_Elist, because it's too early to call New_Elmt_List; we will set it\n    --  to New_Elmt_List on first use.\n \n-   Ignore_Comp_Units : Boolean := False;\n-   --  If True, we suppress appending compilation units onto the\n-   --  Comp_Unit_List.\n+   generic\n+      with procedure Action (Withed_Unit : Node_Id);\n+   procedure Walk_Withs_Immediate (CU : Node_Id; Include_Limited : Boolean);\n+   --  Walk all the with clauses of CU, and call Action for the with'ed\n+   --  unit. Ignore limited withs, unless Include_Limited is True.\n+   --  CU must be an N_Compilation_Unit.\n+\n+   generic\n+      with procedure Action (Withed_Unit : Node_Id);\n+   procedure Walk_Withs (CU : Node_Id; Include_Limited : Boolean);\n+   --  Same as Walk_Withs_Immediate, but also include with clauses on subunits\n+   --  of this unit, since they count as dependences on their parent library\n+   --  item. CU must be an N_Compilation_Unit whose Unit is not an N_Subunit.\n \n    procedure Write_Unit_Info\n      (Unit_Num : Unit_Number_Type;\n       Item     : Node_Id;\n-      Prefix   : String := \"\");\n-   --  Print out debugging information about the unit\n+      Prefix   : String := \"\";\n+      Withs    : Boolean := False);\n+   --  Print out debugging information about the unit. Prefix precedes the rest\n+   --  of the printout. If Withs is True, we print out units with'ed by this\n+   --  unit (not counting limited withs).\n \n    -------------\n    -- Analyze --\n@@ -1429,18 +1442,13 @@ package body Sem is\n \n          Do_Analyze;\n \n-         if Ignore_Comp_Units then\n-            null;\n-\n-         elsif Present (Comp_Unit)\n+         if Present (Comp_Unit)\n            and then Nkind (Unit (Comp_Unit)) in N_Proper_Body\n            and then not In_Extended_Main_Source_Unit (Comp_Unit)\n          then\n             null;\n \n          else\n-            pragma Assert (not Ignore_Comp_Units);\n-\n             --  Initialize if first time\n \n             if No (Comp_Unit_List) then\n@@ -1454,12 +1462,6 @@ package body Sem is\n                Write_Unit_Info\n                  (Get_Cunit_Unit_Number (Comp_Unit), Unit (Comp_Unit));\n             end if;\n-\n-            --  Ignore all units after main unit\n-\n-            if Comp_Unit = Cunit (Main_Unit) then\n-               Ignore_Comp_Units := True;\n-            end if;\n          end if;\n       end if;\n \n@@ -1501,11 +1503,21 @@ package body Sem is\n \n    procedure Walk_Library_Items is\n       type Unit_Number_Set is array (Main_Unit .. Last_Unit) of Boolean;\n-      Seen : Unit_Number_Set := (others => False);\n+      pragma Pack (Unit_Number_Set);\n+      Seen, Done : Unit_Number_Set := (others => False);\n+      --  Seen (X) is True after we have seen unit X in the walk. This is used\n+      --  to prevent processing the same unit more than once. Done (X) is True\n+      --  after we have fully processed X, and is used only for debugging\n+      --  printouts and assertions.\n \n       procedure Do_Action (CU : Node_Id; Item : Node_Id);\n       --  Calls Action, with some validity checks\n \n+      procedure Do_Unit_And_Dependents (CU : Node_Id; Item : Node_Id);\n+      --  Calls Do_Action, first on the units with'ed by this one, then on this\n+      --  unit. If it's an instance body, do the spec first. If it's an\n+      --  instance spec, do the body last.\n+\n       ---------------\n       -- Do_Action --\n       ---------------\n@@ -1557,23 +1569,66 @@ package body Sem is\n             pragma Assert (Item = Unit (CU));\n \n             declare\n-               Unit_Num : constant Unit_Number_Type :=\n-                            Get_Cunit_Unit_Number (CU);\n+               Unit_Num     : constant Unit_Number_Type :=\n+                                Get_Cunit_Unit_Number (CU);\n+\n+               procedure Assert_Done (Withed_Unit : Node_Id);\n+               --  Assert Withed_Unit is already Done\n+\n+               procedure Assert_Done (Withed_Unit : Node_Id) is\n+               begin\n+                  if not Done\n+                       (Get_Cunit_Unit_Number\n+                        (Withed_Unit))\n+                  then\n+                     Write_Unit_Name\n+                       (Unit_Name\n+                        (Get_Cunit_Unit_Number\n+                         (Withed_Unit)));\n+                     Write_Str (\" not yet walked!\");\n+                     Write_Eol;\n+                  end if;\n+\n+                  if False then\n+                     --  This assertion is disabled because it fails in the\n+                     --  presence of subunits.\n+                     pragma Assert  --  ???\n+                       (Done\n+                          (Get_Cunit_Unit_Number (Withed_Unit)));\n+                     null;\n+                  end if;\n+               end Assert_Done;\n+\n+               procedure Assert_Withed_Units_Done is\n+                  new Walk_Withs (Assert_Done);\n             begin\n                if Debug_Unit_Walk then\n                   Write_Unit_Info (Unit_Num, Item);\n                end if;\n \n-               --  This assertion is commented out because it fails in some\n-               --  circumstances related to library-level generic\n-               --  instantiations. We need to investigate why.\n-               --  ???pragma Assert (not Seen (Unit_Num));\n+               --  Main unit should come last\n+\n+               if Done (Main_Unit) then\n+                  Write_Line (\"Main unit is done!\");\n+               end if;\n+               if False then  --  ???\n+                  --  This assertion is disabled because it fails in the\n+                  --  presence of subunits.\n+                  pragma Assert (not Done (Main_Unit));\n+                  null;\n+               end if;\n+\n+               --  We shouldn't do the same thing twice\n+\n+               pragma Assert (not Done (Unit_Num));\n+\n+               --  Everything we depend upon should already be done\n \n-               Seen (Unit_Num) := True;\n+               Assert_Withed_Units_Done (CU, Include_Limited => False);\n             end;\n \n          else\n-            --  Must be Standard\n+            --  Must be Standard, which has no entry in the units table\n \n             pragma Assert (Item = Stand.Standard_Package_Node);\n \n@@ -1585,6 +1640,68 @@ package body Sem is\n          Action (Item);\n       end Do_Action;\n \n+      ----------------------------\n+      -- Do_Unit_And_Dependents --\n+      ----------------------------\n+\n+      procedure Do_Unit_And_Dependents (CU : Node_Id; Item : Node_Id) is\n+         Unit_Num     : constant Unit_Number_Type :=\n+                          Get_Cunit_Unit_Number (CU);\n+\n+         procedure Do_Withed_Unit (Withed_Unit : Node_Id);\n+         --  Pass the buck to Do_Unit_And_Dependents\n+\n+         procedure Do_Withed_Unit (Withed_Unit : Node_Id) is\n+         begin\n+            Do_Unit_And_Dependents (Withed_Unit, Unit (Withed_Unit));\n+         end Do_Withed_Unit;\n+\n+         procedure Do_Withed_Units is new Walk_Withs (Do_Withed_Unit);\n+      begin\n+         if Seen (Unit_Num) then\n+            return;\n+         end if;\n+\n+         Seen (Unit_Num) := True;\n+\n+         --  Process corresponding spec of body first\n+\n+         if Nkind_In (Item, N_Package_Body, N_Subprogram_Body) then\n+            declare\n+               Spec_Unit : constant Node_Id := Library_Unit (CU);\n+            begin\n+               Do_Unit_And_Dependents (Spec_Unit, Unit (Spec_Unit));\n+            end;\n+         end if;\n+\n+         --  Process the with clauses\n+\n+         Do_Withed_Units (CU, Include_Limited => False);\n+\n+         --  Process the unit itself\n+\n+         if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body)\n+           or else CU = Cunit (Main_Unit)\n+         then\n+\n+            Do_Action (CU, Item);\n+\n+            Done (Unit_Num) := True;\n+         end if;\n+\n+         --  Process the corresponding body last\n+\n+         if not Nkind_In (Item, N_Package_Body, N_Subprogram_Body) then\n+            declare\n+               Body_Unit : constant Node_Id := Library_Unit (CU);\n+            begin\n+               if Present (Body_Unit) then\n+                  Do_Unit_And_Dependents (Body_Unit, Unit (Body_Unit));\n+               end if;\n+            end;\n+         end if;\n+      end Do_Unit_And_Dependents;\n+\n       --  Local Declarations\n \n       Cur : Elmt_Id := First_Elmt (Comp_Unit_List);\n@@ -1638,39 +1755,35 @@ package body Sem is\n                         declare\n                            Spec_Unit : constant Node_Id := Library_Unit (CU);\n                         begin\n-                           Do_Action (Spec_Unit, Unit (Spec_Unit));\n+                           Do_Unit_And_Dependents\n+                             (Spec_Unit, Unit (Spec_Unit));\n                         end;\n                      end if;\n                   end;\n \n                   if CU = Cunit (Main_Unit) then\n-\n-                     --  Must come last\n-\n-                     pragma Assert (No (Next_Elmt (Cur)));\n-\n-                     Do_Action (CU, N);\n+                     Do_Unit_And_Dependents (CU, N);\n                   end if;\n \n                --  It's a spec, so just do it\n \n                when others =>\n-                  Do_Action (CU, N);\n+                  Do_Unit_And_Dependents (CU, N);\n             end case;\n          end;\n \n          Next_Elmt (Cur);\n       end loop;\n \n       if Debug_Unit_Walk then\n-         if Seen /= (Seen'Range => True) then\n+         if Done /= (Done'Range => True) then\n             Write_Eol;\n             Write_Line (\"Ignored units:\");\n \n             Indent;\n \n-            for Unit_Num in Seen'Range loop\n-               if not Seen (Unit_Num) then\n+            for Unit_Num in Done'Range loop\n+               if not Done (Unit_Num) then\n                   Write_Unit_Info (Unit_Num, Unit (Cunit (Unit_Num)));\n                end if;\n             end loop;\n@@ -1679,20 +1792,102 @@ package body Sem is\n          end if;\n       end if;\n \n+      pragma Assert (Done (Main_Unit));\n+\n       if Debug_Unit_Walk then\n          Outdent;\n          Write_Line (\"end Walk_Library_Items.\");\n       end if;\n    end Walk_Library_Items;\n \n+   ----------------\n+   -- Walk_Withs --\n+   ----------------\n+\n+   procedure Walk_Withs (CU : Node_Id; Include_Limited : Boolean) is\n+      pragma Assert (Nkind (CU) = N_Compilation_Unit);\n+      pragma Assert (Nkind (Unit (CU)) /= N_Subunit);\n+\n+      procedure Walk_Immediate is new Walk_Withs_Immediate (Action);\n+   begin\n+      --  First walk the withs immediately on the library item\n+\n+      Walk_Immediate (CU, Include_Limited);\n+\n+      --  For a body, we must also check for any subunits which belong to\n+      --  it and which have context clauses of their own, since these\n+      --  with'ed units are part of its own dependencies.\n+\n+      if Nkind (Unit (CU)) in N_Unit_Body then\n+         for S in Main_Unit .. Last_Unit loop\n+\n+            --  We are only interested in subunits.  For preproc. data and\n+            --  def. files, Cunit is Empty, so we need to test that first.\n+\n+            if Cunit (S) /= Empty\n+              and then Nkind (Unit (Cunit (S))) = N_Subunit\n+            then\n+               declare\n+                  Pnode : Node_Id;\n+               begin\n+                  Pnode := Library_Unit (Cunit (S));\n+\n+                  --  In -gnatc mode, the errors in the subunits will not\n+                  --  have been recorded, but the analysis of the subunit\n+                  --  may have failed, so just quit.\n+\n+                  if No (Pnode) then\n+                     exit;\n+                  end if;\n+\n+                  --  Find ultimate parent of the subunit\n+\n+                  while Nkind (Unit (Pnode)) = N_Subunit loop\n+                     Pnode := Library_Unit (Pnode);\n+                  end loop;\n+\n+                  --  See if it belongs to current unit, and if so, include its\n+                  --  with_clauses.\n+\n+                  if Pnode = CU then\n+                     Walk_Immediate (Cunit (S), Include_Limited);\n+                  end if;\n+               end;\n+            end if;\n+         end loop;\n+      end if;\n+   end Walk_Withs;\n+\n+   --------------------------\n+   -- Walk_Withs_Immediate --\n+   --------------------------\n+\n+   procedure Walk_Withs_Immediate (CU : Node_Id; Include_Limited : Boolean) is\n+      pragma Assert (Nkind (CU) = N_Compilation_Unit);\n+\n+      Context_Item : Node_Id := First (Context_Items (CU));\n+   begin\n+      while Present (Context_Item) loop\n+         if Nkind (Context_Item) = N_With_Clause\n+           and then (Include_Limited\n+                     or else not Limited_Present (Context_Item))\n+         then\n+            Action (Library_Unit (Context_Item));\n+         end if;\n+\n+         Context_Item := Next (Context_Item);\n+      end loop;\n+   end Walk_Withs_Immediate;\n+\n    ---------------------\n    -- Write_Unit_Info --\n    ---------------------\n \n    procedure Write_Unit_Info\n      (Unit_Num : Unit_Number_Type;\n       Item     : Node_Id;\n-      Prefix   : String := \"\")\n+      Prefix   : String := \"\";\n+      Withs    : Boolean := False)\n    is\n    begin\n       Write_Str (Prefix);\n@@ -1712,6 +1907,50 @@ package body Sem is\n       end if;\n \n       Write_Eol;\n+\n+      --  Skip the rest if we're not supposed to print the withs\n+\n+      if False and then not Withs then -- ???\n+         return;\n+      end if;\n+\n+      declare\n+         Context_Item : Node_Id := First (Context_Items (Cunit (Unit_Num)));\n+      begin\n+         while Present (Context_Item)\n+           and then (Nkind (Context_Item) /= N_With_Clause\n+                     or else Limited_Present (Context_Item))\n+         loop\n+            Context_Item := Next (Context_Item);\n+         end loop;\n+\n+         if Present (Context_Item) then\n+            Indent;\n+            Write_Line (\"withs:\");\n+            Indent;\n+\n+            while Present (Context_Item) loop\n+               if Nkind (Context_Item) = N_With_Clause\n+                 and then not Limited_Present (Context_Item)\n+               then\n+                  pragma Assert (Present (Library_Unit (Context_Item)));\n+                  Write_Unit_Name\n+                    (Unit_Name\n+                     (Get_Cunit_Unit_Number (Library_Unit (Context_Item))));\n+                  if Implicit_With (Context_Item) then\n+                     Write_Str (\" -- implicit\");\n+                  end if;\n+                  Write_Eol;\n+               end if;\n+\n+               Context_Item := Next (Context_Item);\n+            end loop;\n+\n+            Outdent;\n+            Write_Line (\"end withs\");\n+            Outdent;\n+         end if;\n+      end;\n    end Write_Unit_Info;\n \n end Sem;"}, {"sha": "791601d77b125d8a28ad43373404d795f38540d5", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -3283,7 +3283,7 @@ package body Sem_Ch10 is\n                     and then Renamed_Entity (E) = WEnt\n                   then\n                      --  The unlimited view is visible through use clause and\n-                     --  renamings. There is not need to generate the error\n+                     --  renamings. There is no need to generate the error\n                      --  message here because Is_Visible_Through_Renamings\n                      --  takes care of generating the precise error message.\n \n@@ -4322,7 +4322,7 @@ package body Sem_Ch10 is\n                      then\n                         --  Generate the error message only if the current unit\n                         --  is a package declaration; in case of subprogram\n-                        --  bodies and package bodies we just return true to\n+                        --  bodies and package bodies we just return True to\n                         --  indicate that the limited view must not be\n                         --  installed.\n \n@@ -4348,7 +4348,13 @@ package body Sem_Ch10 is\n                Next (Item);\n             end loop;\n \n-            if Present (Library_Unit (Aux_Unit)) then\n+            --  If it's a body not acting as spec, follow pointer to\n+            --  corresponding spec, otherwise follow pointer to parent spec.\n+\n+            if Present (Library_Unit (Aux_Unit))\n+              and then Nkind_In (Unit (Aux_Unit),\n+                                 N_Package_Body, N_Subprogram_Body)\n+            then\n                if Aux_Unit = Library_Unit (Aux_Unit) then\n \n                   --  Aux_Unit is a body that acts as a spec. Clause has\n@@ -4359,6 +4365,7 @@ package body Sem_Ch10 is\n                else\n                   Aux_Unit := Library_Unit (Aux_Unit);\n                end if;\n+\n             else\n                Aux_Unit := Parent_Spec (Unit (Aux_Unit));\n             end if;"}, {"sha": "5139e50cba2194e35911d5675afeafbc80751d9d", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -4393,6 +4393,7 @@ package body Sem_Ch12 is\n       --  and elaboration entity are not relevant to the compilation.\n \n       if Parent (N) /= Cunit (Main_Unit) then\n+         Make_Instance_Unit (Body_Cunit, In_Main => False);\n          return;\n       end if;\n \n@@ -4423,7 +4424,7 @@ package body Sem_Ch12 is\n       --  Make entry in Units table, so that binder can generate call to\n       --  elaboration procedure for body, if any.\n \n-      Make_Instance_Unit (Body_Cunit);\n+      Make_Instance_Unit (Body_Cunit, In_Main => True);\n       Main_Unit_Entity := New_Main;\n       Set_Cunit_Entity (Main_Unit, Main_Unit_Entity);\n "}, {"sha": "df677a44473d5426bbb3005cc55e6e895a06b1de", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/218e53ff255953c209d36c431f3eda3fcd7d296a/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=218e53ff255953c209d36c431f3eda3fcd7d296a", "patch": "@@ -1287,19 +1287,16 @@ package Sinfo is\n    --\n    --    In a compilation unit node, the usage depends on the unit type:\n    --\n-   --     For a subprogram body, Library_Unit points to the compilation unit\n-   --     node of the corresponding spec, unless Acts_As_Spec is set, in which\n-   --     case it points to itself.\n+   --     For a library unit body, Library_Unit points to the compilation unit\n+   --     node of the corresponding spec, unless it's a subprogram body with\n+   --     Acts_As_Spec set, in which case it points to itself.\n    --\n-   --     For a package body, Library_Unit points to the compilation unit of\n-   --     the corresponding package spec.\n-   --\n-   --     For a subprogram spec to which pragma Inline applies, Library_Unit\n-   --     points to the compilation unit node of the corresponding body, if\n-   --     inlining is active.\n-   --\n-   --     For a generic declaration, Library_Unit points to the compilation\n-   --     unit node of the corresponding generic body.\n+   --     For a spec, Library_Unit points to the compilation unit node of the\n+   --     corresponding body, if present. The body will be present if the spec\n+   --     is or contains generics that we needed to instantiate. Similarly, the\n+   --     body will be present if we needed it for inlining purposes. Thus, if\n+   --     we have a spec/body pair, both of which are present, they point to\n+   --     each other via Library_Unit.\n    --\n    --     For a subunit, Library_Unit points to the compilation unit node of\n    --     the parent body."}]}