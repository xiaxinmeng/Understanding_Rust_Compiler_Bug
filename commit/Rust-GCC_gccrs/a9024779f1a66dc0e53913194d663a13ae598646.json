{"sha": "a9024779f1a66dc0e53913194d663a13ae598646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTkwMjQ3NzlmMWE2NmRjMGU1MzkxMzE5NGQ2NjNhMTNhZTU5ODY0Ng==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2004-08-20T11:14:11Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2004-08-20T11:14:11Z"}, "message": "re PR other/5620 (GCC -save-temps foo.c fails to build foo.o)\n\n\tPR 5620\n\t* gcc.c (struct stat input_stat): Don't define if\n\tHOST_LACKS_INODE_NUMBERS\n\t(do_spec_1): If HOST_LACKS_INODE_NUMBERS, use lrealpath rather\n\tthan stat to determine if temp file is same as input file.\n\t* doc/hostconfig.texi: Document HOST_LACKS_INODE_NUMBERS.\n\t* config/i386/xm-mingw32.h: Define HOST_LACKS_INODE_NUMBERS\n\nFrom-SVN: r86311", "tree": {"sha": "9dfbe7358ca35bc39796d9b1b9a25bd2a7da1be7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9dfbe7358ca35bc39796d9b1b9a25bd2a7da1be7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9024779f1a66dc0e53913194d663a13ae598646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9024779f1a66dc0e53913194d663a13ae598646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9024779f1a66dc0e53913194d663a13ae598646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9024779f1a66dc0e53913194d663a13ae598646/comments", "author": null, "committer": null, "parents": [{"sha": "c0ca279584af777be53c427c287a5d2972447920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0ca279584af777be53c427c287a5d2972447920", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0ca279584af777be53c427c287a5d2972447920"}], "stats": {"total": 30, "additions": 29, "deletions": 1}, "files": [{"sha": "5ebb50c810c70d9c05c1e227f639f21515e2fb5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9024779f1a66dc0e53913194d663a13ae598646", "patch": "@@ -1,3 +1,13 @@\n+2004-08-20  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR 5620\n+\t* gcc.c (struct stat input_stat): Don't define if\n+\tHOST_LACKS_INODE_NUMBERS\n+\t(do_spec_1): If HOST_LACKS_INODE_NUMBERS, use lrealpath rather\n+\tthan stat to determine if temp file is same as input file.\n+\t* doc/hostconfig.texi: Document HOST_LACKS_INODE_NUMBERS.\n+\t* config/i386/xm-mingw32.h: Define HOST_LACKS_INODE_NUMBERS\n+\n 2004-08-20  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* configure.ac (mips*-*-*): Print an error if not using GAS."}, {"sha": "f22347c3fa0bdb349464637439cc56c489c82041", "filename": "gcc/config/i386/xm-mingw32.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-mingw32.h?ref=a9024779f1a66dc0e53913194d663a13ae598646", "patch": "@@ -27,3 +27,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* This is the name of the null device on windows.  */\n #define HOST_BIT_BUCKET \"nul\"\n+\n+/*  The st_ino field of struct stat is always 0.  */\n+#define HOST_LACKS_INODE_NUMBERS"}, {"sha": "dc52b85c5fd46dd56b1cdfd2e377ab03ef7f80d2", "filename": "gcc/doc/hostconfig.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fdoc%2Fhostconfig.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fdoc%2Fhostconfig.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fhostconfig.texi?ref=a9024779f1a66dc0e53913194d663a13ae598646", "patch": "@@ -163,6 +163,10 @@ If you do not define this macro, GCC will use the default version. You\n should define this macro if the default version does not reliably remove\n the temp file as, for example, on VMS which allows multiple versions\n of a file.\n+\n+@item HOST_LACKS_INODE_NUMBERS\n+Define this macro if the host filesystem does not report meaningful inode\n+numbers in struct stat.\n @end ftable\n \n @node Host Misc"}, {"sha": "d56a3958e7a58649c013520964509c85ed42a673", "filename": "gcc/gcc.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9024779f1a66dc0e53913194d663a13ae598646/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a9024779f1a66dc0e53913194d663a13ae598646", "patch": "@@ -4195,7 +4195,9 @@ static int basename_length;\n static int suffixed_basename_length;\n static const char *input_basename;\n static const char *input_suffix;\n+#ifndef HOST_LACKS_INODE_NUMBERS\n static struct stat input_stat;\n+#endif\n static int input_stat_set;\n \n /* The compiler used to process the current input file.  */\n@@ -4759,6 +4761,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    *((char *) temp_filename + temp_filename_length) = '\\0';\n \t\t    if (strcmp (temp_filename, input_filename) != 0)\n \t\t      {\n+#ifndef HOST_LACKS_INODE_NUMBERS\n \t\t\tstruct stat st_temp;\n \n \t\t\t/* Note, set_input() resets input_stat_set to 0.  */\n@@ -4773,11 +4776,19 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t\t   and we can do the stat for the temp_filename\n \t\t\t   then the they could still refer to the same\n \t\t\t   file if st_dev/st_ino's are the same.  */\n-\n \t\t\tif (input_stat_set != 1\n \t\t\t    || stat (temp_filename, &st_temp) < 0\n \t\t\t    || input_stat.st_dev != st_temp.st_dev\n \t\t\t    || input_stat.st_ino != st_temp.st_ino)\n+#else\n+\t\t\t/* Just compare canonical pathnames.  */\n+\t\t\tchar* input_realname = lrealpath (input_filename);\n+\t\t\tchar* temp_realname = lrealpath (temp_filename);\n+\t\t\tbool files_differ = strcmp (input_realname, temp_realname);\n+\t\t\tfree (input_realname);\n+\t\t\tfree (temp_realname);\n+\t\t\tif (files_differ) \t\n+#endif\n \t\t\t  {\n \t\t\t    temp_filename = save_string (temp_filename,\n \t\t\t\t\t\t\t temp_filename_length + 1);"}]}