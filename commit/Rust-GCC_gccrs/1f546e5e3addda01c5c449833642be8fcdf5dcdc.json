{"sha": "1f546e5e3addda01c5c449833642be8fcdf5dcdc", "node_id": "C_kwDOANBUbNoAKDFmNTQ2ZTVlM2FkZGRhMDFjNWM0NDk4MzM2NDJiZThmY2RmNWRjZGM", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-22T08:32:52Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-23T09:13:06Z"}, "message": "match_repetition: Set the correct amount of matches for each fragment\n\nCo-authored-by: philberty <philip.herron@embecosm.com>", "tree": {"sha": "e0ec05beebb6bcd83042d385920d79f38420d4aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0ec05beebb6bcd83042d385920d79f38420d4aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f546e5e3addda01c5c449833642be8fcdf5dcdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f546e5e3addda01c5c449833642be8fcdf5dcdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f546e5e3addda01c5c449833642be8fcdf5dcdc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f546e5e3addda01c5c449833642be8fcdf5dcdc/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6db51e39363a4500dd8d3e04d87f682f9ef11f26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db51e39363a4500dd8d3e04d87f682f9ef11f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db51e39363a4500dd8d3e04d87f682f9ef11f26"}], "stats": {"total": 133, "additions": 59, "deletions": 74}, "files": [{"sha": "45d2b74ab1459105097bcf93290134a2cc4f2554", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 28, "deletions": 73, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=1f546e5e3addda01c5c449833642be8fcdf5dcdc", "patch": "@@ -3611,7 +3611,6 @@ MacroExpander::match_n_matches (\n   match_amount = 0;\n \n   const MacroInvocLexer &source = parser.get_token_source ();\n-  std::vector<std::string> fragment_identifiers;\n   while (true)\n     {\n       // If the current token is a closing macro delimiter, break away.\n@@ -3637,8 +3636,6 @@ MacroExpander::match_n_matches (\n \t\t  {fragment->get_ident (),\n \t\t   MatchedFragment (fragment->get_ident (), offs_begin,\n \t\t\t\t    offs_end)});\n-\n-\t\tfragment_identifiers.emplace_back (fragment->get_ident ());\n \t      }\n \t      break;\n \n@@ -3677,21 +3674,10 @@ MacroExpander::match_n_matches (\n \n   // Check if the amount of matches we got is valid: Is it more than the lower\n   // bound and less than the higher bound?\n-  auto result = hi_bound ? match_amount >= lo_bound && match_amount <= hi_bound\n-\t\t\t : match_amount >= lo_bound;\n-\n-  // We can now set the amount to each fragment we matched in the substack\n-  auto &stack_map = sub_stack.peek ();\n-  for (auto &fragment_id : fragment_identifiers)\n-    {\n-      auto it = stack_map.find (fragment_id);\n-\n-      rust_assert (it != stack_map.end ());\n+  bool did_meet_lo_bound = match_amount >= lo_bound;\n+  bool did_meet_hi_bound = hi_bound ? match_amount <= hi_bound : true;\n \n-      it->second.set_match_amount (match_amount);\n-    }\n-\n-  return result;\n+  return did_meet_lo_bound && did_meet_hi_bound;\n }\n \n bool\n@@ -3733,6 +3719,31 @@ MacroExpander::match_repetition (Parser<MacroInvocLexer> &parser,\n   rust_debug_loc (rep.get_match_locus (), \"%s matched %lu times\",\n \t\t  res ? \"successfully\" : \"unsuccessfully\", match_amount);\n \n+  // We can now set the amount to each fragment we matched in the substack\n+  auto &stack_map = sub_stack.peek ();\n+  for (auto &match : rep.get_matches ())\n+    {\n+      if (match->get_macro_match_type ()\n+\t  == AST::MacroMatch::MacroMatchType::Fragment)\n+\t{\n+\t  auto fragment = static_cast<AST::MacroMatchFragment *> (match.get ());\n+\t  auto it = stack_map.find (fragment->get_ident ());\n+\n+\t  // If we can't find the fragment, but the result was valid, then it's\n+\t  // a zero-matched fragment and we can insert it\n+\t  if (it == stack_map.end ())\n+\t    {\n+\t      stack_map.insert (\n+\t\t{fragment->get_ident (),\n+\t\t MatchedFragment::zero (fragment->get_ident ())});\n+\t    }\n+\t  else\n+\t    {\n+\t      it->second.set_match_amount (match_amount);\n+\t    }\n+\t}\n+    }\n+\n   return res;\n }\n \n@@ -4037,14 +4048,6 @@ MacroExpander::substitute_tokens (\n {\n   std::vector<std::unique_ptr<AST::Token>> replaced_tokens;\n \n-  // for token in macro\n-  // \tif token == ?:\n-  // \t// That's not always true: If it's a left paren, it's repetition\n-  // \t// We probably want to store the matched amount in the fragment so\n-  // \t// we can expand it here\n-  // \t\tid = next_token();\n-  // \t\tfrag = fragment.find(id);\n-\n   for (size_t i = 0; i < macro.size (); i++)\n     {\n       auto &tok = macro.at (i);\n@@ -4065,54 +4068,6 @@ MacroExpander::substitute_tokens (\n \t{\n \t  replaced_tokens.emplace_back (tok->clone_token ());\n \t}\n-\n-      // std::vector<std::unique_ptr<AST::Token>> parsed_toks;\n-\n-      // std::string ident;\n-      // for (size_t offs = i; i < macro.size (); offs++)\n-      //   {\n-      //     auto &tok = macro.at (offs);\n-      //     if (tok->get_id () == DOLLAR_SIGN && offs == i)\n-      //       {\n-      //         parsed_toks.push_back (tok->clone_token ());\n-      //       }\n-      //     else if (tok->get_id () == IDENTIFIER)\n-      //       {\n-      //         rust_assert (tok->as_string ().size () == 1);\n-      //         ident.push_back (tok->as_string ().at (0));\n-      //         parsed_toks.push_back (tok->clone_token ());\n-      //       }\n-      //     else\n-      //       {\n-      //         break;\n-      //       }\n-      //   }\n-\n-      // // lookup the ident\n-      // auto it = fragments.find (ident);\n-      // if (it == fragments.end ())\n-      //   {\n-      //     // just leave the tokens in\n-      //     for (auto &tok : parsed_toks)\n-      //       {\n-      //         replaced_tokens.push_back (tok->clone_token ());\n-      //       }\n-      //   }\n-      // else\n-      //   {\n-      //     // replace\n-      //     MatchedFragment &frag = it->second;\n-      //     for (size_t offs = frag.token_offset_begin;\n-      //          offs < frag.token_offset_end; offs++)\n-      //       {\n-      //         auto &tok = input.at (offs);\n-      //         replaced_tokens.push_back (tok->clone_token ());\n-      //       }\n-      //   }\n-      // i += parsed_toks.size () - 1;\n-      //\n-      // }\n-      // else { replaced_tokens.push_back (tok->clone_token ()); }\n     }\n \n   return replaced_tokens;"}, {"sha": "f3cb36d44cadc8e091534d56f94ec0fb20471d0b", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=1f546e5e3addda01c5c449833642be8fcdf5dcdc", "patch": "@@ -57,11 +57,21 @@ struct MatchedFragment\n   size_t match_amount;\n \n   MatchedFragment (std::string identifier, size_t token_offset_begin,\n-\t\t   size_t token_offset_end, size_t match_amount = 0)\n+\t\t   size_t token_offset_end, size_t match_amount = 1)\n     : fragment_ident (identifier), token_offset_begin (token_offset_begin),\n       token_offset_end (token_offset_end), match_amount (match_amount)\n   {}\n \n+  /**\n+   * Create a valid fragment matched zero times. This is useful for repetitions\n+   * which allow the absence of a fragment, such as * and ?\n+   */\n+  static MatchedFragment zero (std::string identifier)\n+  {\n+    // We don't need offsets since there is \"no match\"\n+    return MatchedFragment (identifier, 0, 0, 0);\n+  }\n+\n   std::string as_string () const\n   {\n     return fragment_ident + \"=\" + std::to_string (token_offset_begin) + \":\""}, {"sha": "2dc95e3e3be55d0341650e9661b3af1fff835273", "filename": "gcc/testsuite/rust/execute/torture/macros14.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f546e5e3addda01c5c449833642be8fcdf5dcdc/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fmacros14.rs?ref=1f546e5e3addda01c5c449833642be8fcdf5dcdc", "patch": "@@ -0,0 +1,20 @@\n+// { dg-output \"15\\n\" }\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+fn print_int(value: i32) {\n+    let s = \"%d\\n\\0\" as *const str as *const i8;\n+    printf(s, value);\n+}\n+\n+macro_rules! add_exprs {\n+    ($($e:expr)*) => (15 $(+ $e)*)\n+}\n+\n+fn main() -> i32 {\n+    // 15\n+    print_int(add_exprs!());\n+\n+    0\n+}"}]}