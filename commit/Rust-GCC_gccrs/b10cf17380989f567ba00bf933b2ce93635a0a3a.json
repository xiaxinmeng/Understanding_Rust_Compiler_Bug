{"sha": "b10cf17380989f567ba00bf933b2ce93635a0a3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjEwY2YxNzM4MDk4OWY1NjdiYTAwYmY5MzNiMmNlOTM2MzVhMGEzYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2004-11-21T05:08:14Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-11-21T05:08:14Z"}, "message": "* io/write.c (write_float, list_formatted_write): Fix indentation.\n\nFrom-SVN: r90975", "tree": {"sha": "d40d072b00b94ef3b924970c118a4694d6149d5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d40d072b00b94ef3b924970c118a4694d6149d5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b10cf17380989f567ba00bf933b2ce93635a0a3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10cf17380989f567ba00bf933b2ce93635a0a3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10cf17380989f567ba00bf933b2ce93635a0a3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10cf17380989f567ba00bf933b2ce93635a0a3a/comments", "author": null, "committer": null, "parents": [{"sha": "484d0bd6fe6f3242e91ccfcf74cbccc779c88185", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/484d0bd6fe6f3242e91ccfcf74cbccc779c88185", "html_url": "https://github.com/Rust-GCC/gccrs/commit/484d0bd6fe6f3242e91ccfcf74cbccc779c88185"}], "stats": {"total": 117, "additions": 60, "deletions": 57}, "files": [{"sha": "8e633fcef314c6ae015a171baff6652497476188", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10cf17380989f567ba00bf933b2ce93635a0a3a/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10cf17380989f567ba00bf933b2ce93635a0a3a/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=b10cf17380989f567ba00bf933b2ce93635a0a3a", "patch": "@@ -1,3 +1,7 @@\n+2004-11-20  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* io/write.c (write_float, list_formatted_write): Fix indentation.\n+\n 2004-11-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \tPR target/16135"}, {"sha": "28bbd1b94265355b27a6ffecb583119788f6cfb2", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 56, "deletions": 57, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b10cf17380989f567ba00bf933b2ce93635a0a3a/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b10cf17380989f567ba00bf933b2ce93635a0a3a/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=b10cf17380989f567ba00bf933b2ce93635a0a3a", "patch": "@@ -653,41 +653,41 @@ write_float (fnode *f, const char *source, int len)\n   n = extract_real (source, len);\n \n   if (f->format != FMT_B && f->format != FMT_O && f->format != FMT_Z)\n-   {\n-     res = finite (n);\n-     if (res == 0)\n-       {\n-         nb =  f->u.real.w;\n-         p = write_block (nb);\n-         if (nb < 3)\n-         {\n-             memset (p, '*',nb);\n-             return;\n-         }\n-\n-         memset(p, ' ', nb);\n-         res = !isnan (n); \n-         if (res != 0)\n-         {\n-            if (signbit(n))   \n-               fin = '-';\n-            else\n-               fin = '+';\n-\n-            if (nb > 7)\n-               memcpy(p + nb - 8, \"Infinity\", 8); \n-            else\n-               memcpy(p + nb - 3, \"Inf\", 3);\n-            if (nb < 8 && nb > 3)\n-               p[nb - 4] = fin;\n-            else if (nb > 8)\n-               p[nb - 9] = fin; \n-          }\n-         else\n-             memcpy(p + nb - 3, \"NaN\", 3);\n-         return;\n-       }\n-   }\n+    {\n+      res = finite (n);\n+      if (res == 0)\n+\t{\n+\t  nb =  f->u.real.w;\n+\t  p = write_block (nb);\n+\t  if (nb < 3)\n+\t    {\n+\t      memset (p, '*',nb);\n+\t      return;\n+\t    }\n+\n+\t  memset(p, ' ', nb);\n+\t  res = !isnan (n); \n+\t  if (res != 0)\n+\t    {\n+\t      if (signbit(n))   \n+\t\tfin = '-';\n+\t      else\n+\t\tfin = '+';\n+\n+\t      if (nb > 7)\n+\t\tmemcpy(p + nb - 8, \"Infinity\", 8); \n+\t      else\n+\t\tmemcpy(p + nb - 3, \"Inf\", 3);\n+\t      if (nb < 8 && nb > 3)\n+\t\tp[nb - 4] = fin;\n+\t      else if (nb > 8)\n+\t\tp[nb - 9] = fin; \n+\t    }\n+\t  else\n+\t    memcpy(p + nb - 3, \"NaN\", 3);\n+\t  return;\n+\t}\n+    }\n \n   if (f->format != FMT_G)\n     {\n@@ -1252,20 +1252,20 @@ list_formatted_write (bt type, void *p, int len)\n void\n namelist_write (void)\n {\n-   namelist_info * t1, *t2;\n-   int len,num;\n-   void * p;\n+  namelist_info * t1, *t2;\n+  int len,num;\n+  void * p;\n \n-   num = 0;\n-   write_character(\"&\",1);\n-   write_character (ioparm.namelist_name, ioparm.namelist_name_len);\n-   write_character(\"\\n\",1);\n+  num = 0;\n+  write_character(\"&\",1);\n+  write_character (ioparm.namelist_name, ioparm.namelist_name_len);\n+  write_character(\"\\n\",1);\n \n-   if (ionml != NULL)\n-     {\n-       t1 = ionml;\n-       while (t1 != NULL)\n-        {\n+  if (ionml != NULL)\n+    {\n+      t1 = ionml;\n+      while (t1 != NULL)\n+\t{\n           num ++;\n           t2 = t1;\n           t1 = t1->next;\n@@ -1296,14 +1296,13 @@ namelist_write (void)\n             default:\n               internal_error (\"Bad type for namelist write\");\n             }\n-         write_character(\",\",1);\n-         if (num > 5)\n-           {\n-              num = 0;\n-              write_character(\"\\n\",1);\n-           }\n-        }\n-     }\n-     write_character(\"/\",1);\n-\n+\t  write_character(\",\",1);\n+\t  if (num > 5)\n+\t    {\n+\t      num = 0;\n+\t      write_character(\"\\n\",1);\n+\t    }\n+\t}\n+    }\n+  write_character(\"/\",1);\n }"}]}