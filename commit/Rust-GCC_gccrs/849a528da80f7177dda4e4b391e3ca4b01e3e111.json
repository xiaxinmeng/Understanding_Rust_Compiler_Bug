{"sha": "849a528da80f7177dda4e4b391e3ca4b01e3e111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ5YTUyOGRhODBmNzE3N2RkYTRlNGIzOTFlM2NhNGIwMWUzZTExMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-12T22:33:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-12T22:33:52Z"}, "message": "(sparc64_initialize_trampoline): Rewrite.\n\nFrom-SVN: r10342", "tree": {"sha": "1377d8a9a6eafb7c709e72ab03f6cf467abcf748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1377d8a9a6eafb7c709e72ab03f6cf467abcf748"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/849a528da80f7177dda4e4b391e3ca4b01e3e111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849a528da80f7177dda4e4b391e3ca4b01e3e111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/849a528da80f7177dda4e4b391e3ca4b01e3e111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/849a528da80f7177dda4e4b391e3ca4b01e3e111/comments", "author": null, "committer": null, "parents": [{"sha": "c83926886affae3b73de6f080cc3c76b77e37c55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83926886affae3b73de6f080cc3c76b77e37c55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83926886affae3b73de6f080cc3c76b77e37c55"}], "stats": {"total": 47, "additions": 11, "deletions": 36}, "files": [{"sha": "04494919f9840b7ec5eaa4067f5b783657c4c62a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 11, "deletions": 36, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/849a528da80f7177dda4e4b391e3ca4b01e3e111/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/849a528da80f7177dda4e4b391e3ca4b01e3e111/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=849a528da80f7177dda4e4b391e3ca4b01e3e111", "patch": "@@ -4080,9 +4080,7 @@ sparc_type_code (type)\n    (to store insns).  This is a bit excessive.  Perhaps a different\n    mechanism would be better here.\n \n-   Emit 3 FLUSH instructions to synchronize the data and instruction caches.\n-\n-   ??? v9: We assume the top 32 bits of function addresses are 0.  */\n+   Emit enough FLUSH insns to synchronize the data and instruction caches.  */\n \n void\n sparc_initialize_trampoline (tramp, fnaddr, cxt)\n@@ -4122,48 +4120,25 @@ sparc_initialize_trampoline (tramp, fnaddr, cxt)\n \t\t\t\t\t       plus_constant (tramp, 16)))));\n }\n \n+/* The 64 bit version is simpler because it makes more sense to load the\n+   values as \"immediate\" data out of the trampoline.  It's also easier since\n+   we can read the PC without clobbering a register.  */\n+\n void\n sparc64_initialize_trampoline (tramp, fnaddr, cxt)\n      rtx tramp, fnaddr, cxt;\n {\n-  rtx fnaddrdi = gen_reg_rtx (Pmode);\n-  rtx fnaddrsi = (emit_move_insn (fnaddrdi, fnaddr),\n-\t\tgen_rtx (SUBREG, SImode, fnaddrdi, 0));\n-  rtx cxtdi = gen_reg_rtx (Pmode);\n-  rtx cxtsi = (emit_move_insn (cxtdi, cxt),\n-\t\tgen_rtx (SUBREG, SImode, cxtdi, 0));\n-  rtx high_cxt = expand_shift (RSHIFT_EXPR, SImode, cxtsi,\n-\t\t\t      size_int (10), 0, 1);\n-  rtx high_fn = expand_shift (RSHIFT_EXPR, SImode, fnaddrsi,\n-\t\t\t     size_int (10), 0, 1);\n-  rtx low_cxt = expand_and (cxtsi, gen_rtx (CONST_INT, VOIDmode, 0x3ff), 0); \n-  rtx low_fn = expand_and (fnaddrsi, gen_rtx (CONST_INT, VOIDmode, 0x3ff), 0); \n-  rtx g1_sethi = gen_rtx (HIGH, SImode,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, 0x03000000));\n-  rtx g2_sethi = gen_rtx (HIGH, SImode,\n-\t\t\t  gen_rtx (CONST_INT, VOIDmode, 0x05000000));\n-  rtx g1_ori = gen_rtx (HIGH, SImode,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 0x82106000));\n-  rtx g2_ori = gen_rtx (HIGH, SImode,\n-\t\t\tgen_rtx (CONST_INT, VOIDmode, 0x8410A000));\n-  rtx tem = gen_reg_rtx (SImode);\n-  emit_move_insn (tem, g2_sethi);\n-  emit_insn (gen_iorsi3 (high_fn, high_fn, tem));\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (tramp, 0)), high_fn);\n-  emit_move_insn (tem, g2_ori);\n-  emit_insn (gen_iorsi3 (low_fn, low_fn, tem));\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (tramp, 4)), low_fn);\n-  emit_move_insn (tem, g1_sethi);\n-  emit_insn (gen_iorsi3 (high_cxt, high_cxt, tem));\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (tramp, 8)), high_cxt);\n-  emit_move_insn (tem, g1_ori);\n-  emit_insn (gen_iorsi3 (low_cxt, low_cxt, tem));\n-  emit_move_insn (gen_rtx (MEM, SImode, plus_constant (tramp, 16)), low_cxt);\n+  emit_move_insn (gen_rtx (MEM, DImode, plus_constant (tramp, 24)), cxt);\n+  emit_move_insn (gen_rtx (MEM, DImode, plus_constant (tramp, 32)), fnaddr);\n   emit_insn (gen_flush (validize_mem (gen_rtx (MEM, DImode, tramp))));\n   emit_insn (gen_flush (validize_mem (gen_rtx (MEM, DImode,\n \t\t\t\t\t       plus_constant (tramp, 8)))));\n   emit_insn (gen_flush (validize_mem (gen_rtx (MEM, DImode,\n \t\t\t\t\t       plus_constant (tramp, 16)))));\n+  emit_insn (gen_flush (validize_mem (gen_rtx (MEM, DImode,\n+\t\t\t\t\t       plus_constant (tramp, 24)))));\n+  emit_insn (gen_flush (validize_mem (gen_rtx (MEM, DImode,\n+\t\t\t\t\t       plus_constant (tramp, 32)))));\n }\n \f\n /* Subroutines to support a flat (single) register window calling"}]}