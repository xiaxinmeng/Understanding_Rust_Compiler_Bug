{"sha": "236261548b57ca45c29735e29708976525ddb9a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM2MjYxNTQ4YjU3Y2E0NWMyOTczNWUyOTcwODk3NjUyNWRkYjlhNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-08-15T00:07:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-08-15T00:07:55Z"}, "message": "calls.c: Include target.h.\n\n        * calls.c: Include target.h.\n        * Makefile.in (calls.o): Update.\n\n        * config/alpha/alpha.c (alpha_end_function): Use targetm.binds_local_p.\n        * config/alpha/alpha.h (FUNCTION_OK_FOR_SIBCALL): Likewise.\n\nFrom-SVN: r56335", "tree": {"sha": "1176bf68bd1ec4d7fe79eeb49abf9b39ed4a4b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1176bf68bd1ec4d7fe79eeb49abf9b39ed4a4b47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/236261548b57ca45c29735e29708976525ddb9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236261548b57ca45c29735e29708976525ddb9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/236261548b57ca45c29735e29708976525ddb9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/236261548b57ca45c29735e29708976525ddb9a5/comments", "author": null, "committer": null, "parents": [{"sha": "fd350d241fecf6ce538c72978ba4483e6a8fb549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd350d241fecf6ce538c72978ba4483e6a8fb549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd350d241fecf6ce538c72978ba4483e6a8fb549"}], "stats": {"total": 32, "additions": 18, "deletions": 14}, "files": [{"sha": "145f869ad16407a665bc83e2f9e7fd36405a576a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236261548b57ca45c29735e29708976525ddb9a5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236261548b57ca45c29735e29708976525ddb9a5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=236261548b57ca45c29735e29708976525ddb9a5", "patch": "@@ -1,3 +1,11 @@\n+2002-08-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* calls.c: Include target.h.\n+\t* Makefile.in (calls.o): Update.\n+\n+\t* config/alpha/alpha.c (alpha_end_function): Use targetm.binds_local_p.\n+\t* config/alpha/alpha.h (FUNCTION_OK_FOR_SIBCALL): Likewise.\n+\n 2002-08-14  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (LOOSE_WARN): Add -fno-common."}, {"sha": "e7364954a607505485b9da88a45e66b58016a0e9", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236261548b57ca45c29735e29708976525ddb9a5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236261548b57ca45c29735e29708976525ddb9a5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=236261548b57ca45c29735e29708976525ddb9a5", "patch": "@@ -1440,7 +1440,7 @@ builtins.o : builtins.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    $(RECOG_H) output.h typeclass.h hard-reg-set.h toplev.h hard-reg-set.h \\\n    except.h $(TM_P_H) $(PREDICT_H) libfuncs.h real.h langhooks.h\n calls.o : calls.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n-   $(EXPR_H) langhooks.h \\\n+   $(EXPR_H) langhooks.h $(TARGET_H) \\\n    libfuncs.h $(REGS_H) toplev.h output.h function.h $(TIMEVAR_H) $(TM_P_H)\n expmed.o : expmed.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h  \\\n    insn-config.h $(EXPR_H) $(OPTABS_H) $(RECOG_H) real.h \\"}, {"sha": "5979747a68bdb7bf76b08358a1cdda6c90753e04", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=236261548b57ca45c29735e29708976525ddb9a5", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"timevar.h\"\n #include \"sbitmap.h\"\n #include \"langhooks.h\"\n+#include \"target.h\"\n \n #if !defined FUNCTION_OK_FOR_SIBCALL\n #define FUNCTION_OK_FOR_SIBCALL(DECL) 1"}, {"sha": "99dee6bae6b20d0fbd5c0ee369174e29ea378962", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=236261548b57ca45c29735e29708976525ddb9a5", "patch": "@@ -7736,7 +7736,7 @@ void\n alpha_end_function (file, fnname, decl)\n      FILE *file;\n      const char *fnname;\n-     tree decl ATTRIBUTE_UNUSED;\n+     tree decl;\n {\n   /* End the function.  */\n   if (!TARGET_ABI_UNICOSMK && !flag_inhibit_size_directive)\n@@ -7747,20 +7747,16 @@ alpha_end_function (file, fnname, decl)\n     }\n   inside_function = FALSE;\n \n-  /* Show that we know this function if it is called again. \n+  /* Show that we know this function if it is called again.\n \n-     Don't do this for global functions in object files destined for a\n-     shared library because the function may be overridden by the application\n-     or other libraries.  Similarly, don't do this for weak functions.\n+     Do this only for functions whose symbols bind locally.\n \n      Don't do this for functions not defined in the .text section, as\n      otherwise it's not unlikely that the destination is out of range\n      for a direct branch.  */\n \n-  if (!DECL_WEAK (current_function_decl)\n-      && (!flag_pic || !TREE_PUBLIC (current_function_decl))\n-      && decl_in_text_section (current_function_decl))\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (current_function_decl), 0)) = 1;\n+  if ((*targetm.binds_local_p) (decl) && decl_in_text_section (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n \n   /* Output jump tables and the static subroutine information block.  */\n   if (TARGET_ABI_UNICOSMK)"}, {"sha": "d90d47618a7605b9e5573f14280f11bf49d789b8", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/236261548b57ca45c29735e29708976525ddb9a5/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=236261548b57ca45c29735e29708976525ddb9a5", "patch": "@@ -1158,12 +1158,11 @@ extern int alpha_memory_latency;\n \n /* We do not allow indirect calls to be optimized into sibling calls, nor\n    can we allow a call to a function in a different compilation unit to\n-   be optimized into a sibcall.  Except if the function is known not to\n-   return, in which case our caller doesn't care what the gp is.  */\n+   be optimized into a sibcall.  */\n #define FUNCTION_OK_FOR_SIBCALL(DECL)\t\t\t\\\n   (DECL\t\t\t\t\t\t\t\\\n-   && ((TREE_ASM_WRITTEN (DECL) && !flag_pic)\t\t\\\n-       || ! TREE_PUBLIC (DECL)))\n+   && (! TREE_PUBLIC (DECL)\t\t\t\t\\\n+       || (TREE_ASM_WRITTEN (DECL) && (*targetm.binds_local_p) (DECL))))\n \n /* Try to output insns to set TARGET equal to the constant C if it can be\n    done in less than N insns.  Do all computations in MODE.  Returns the place"}]}