{"sha": "80f1fd0dabb30f82a972b5eb114a7d47104263a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBmMWZkMGRhYmIzMGY4MmE5NzJiNWViMTE0YTdkNDcxMDQyNjNhMw==", "commit": {"author": {"name": "Sriraman Tallam", "email": "tmsriram@google.com", "date": "2013-12-03T03:14:09Z"}, "committer": {"name": "Sriraman Tallam", "email": "tmsriram@gcc.gnu.org", "date": "2013-12-03T03:14:09Z"}, "message": "This patch fixes PR 58944\nhttp://gcc.gnu.org/bugzilla/show_bug.cgi?id=58944\n\nix86_valid_target_attribute_tree in config/i386/i386.c was\nrefactored to not depend on global_options structure and to be able to\nuse any gcc_options structure.  One clean way to fix this is by having\ntarget_option_default_node save all the default target options which\ncan be restored to any gcc_options structure. The root cause of the\nabove bugs was that ix86_arch_string and ix86_tune_string was not\nsaved in target_option_deault_node.\n\nThis patch saves all the  target options used in i386.opt which are\neither obtained from the command-line or set to some default.\n\nTesting:\nPatch tested for bootstrap on all default languages(also obj-c++ and ada)\non x86_64 and regression testsuite checked for parity with RUNTESTFLAGS -m32\nand m64.\n\nFrom-SVN: r205616", "tree": {"sha": "008202786e69247dd609add1c42e242d3e1dd2de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/008202786e69247dd609add1c42e242d3e1dd2de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80f1fd0dabb30f82a972b5eb114a7d47104263a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f1fd0dabb30f82a972b5eb114a7d47104263a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80f1fd0dabb30f82a972b5eb114a7d47104263a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80f1fd0dabb30f82a972b5eb114a7d47104263a3/comments", "author": {"login": "tmsri", "id": 38991943, "node_id": "MDQ6VXNlcjM4OTkxOTQz", "avatar_url": "https://avatars.githubusercontent.com/u/38991943?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmsri", "html_url": "https://github.com/tmsri", "followers_url": "https://api.github.com/users/tmsri/followers", "following_url": "https://api.github.com/users/tmsri/following{/other_user}", "gists_url": "https://api.github.com/users/tmsri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmsri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmsri/subscriptions", "organizations_url": "https://api.github.com/users/tmsri/orgs", "repos_url": "https://api.github.com/users/tmsri/repos", "events_url": "https://api.github.com/users/tmsri/events{/privacy}", "received_events_url": "https://api.github.com/users/tmsri/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c2ecab0e4978f3a4a5b40fe595729b30375386a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c2ecab0e4978f3a4a5b40fe595729b30375386a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c2ecab0e4978f3a4a5b40fe595729b30375386a"}], "stats": {"total": 211, "additions": 205, "deletions": 6}, "files": [{"sha": "df4c84cac9a233cee0bd95ae5811bb911f5461d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80f1fd0dabb30f82a972b5eb114a7d47104263a3", "patch": "@@ -1,3 +1,42 @@\n+2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n+\n+\tPR target/58944\n+\t* config/i386/i386.opt (ix86_arch_string): Mark this variable\n+\tfor saving in cl_target_option.\n+\t(ix86_tune_string): Ditto.\n+\t(ix86_cmodel): Ditto.\n+\t(ix86_abi): Ditto.\n+\t(ix86_asm_dialect): Ditto.\n+\t(ix86_branch_cost): Ditto.\n+\t(ix86_dump_tunes): Ditto.\n+\t(ix86_force_align_arg_pointer): Ditto.\n+\t(ix86_force_drap): Ditto.\n+\t(ix86_incoming_stack_boundary_arg): Ditto.\n+\t(ix86_pmode): Ditto.\n+\t(ix86_preferred_stack_boundary_arg): Ditto.\n+\t(ix86_recip_name): Ditto.\n+\t(ix86_regparm): Ditto.\n+\t(ix86_section_threshold): Ditto.\n+\t(ix86_sse2avx): Ditto.\n+\t(ix86_stack_protector_guard): Ditto.\n+\t(ix86_stringop_alg): Ditto.\n+\t(ix86_tls_dialect): Ditto.\n+\t(ix86_tune_ctrl_string): Ditto.\n+\t(ix86_tune_memcpy_strategy): Ditto.\n+\t(ix86_tune_memset_strategy): Ditto.\n+\t(ix86_tune_no_default): Ditto.\n+\t(ix86_veclibabi_type): Ditto.\n+\t* config/i386/i386.c \n+\t(function_specific_save): Save the above variables\n+\tin gcc_options to cl_target_option.\n+\t(function_specific_restore): Do the reverse done in\n+\tfunction_specific_save.\n+\t(ix86_valid_target_attribute_tree): Change ix86_arch_string\n+\tand ix86_tune_string to use the opts structure.\n+\t(ix86_option_override_internal):Change\n+\tix86_incoming_stack_boundary_arg to\n+\topts->x_ix86_incoming_stack_boundary_arg\n+\n 2013-12-02  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/epiphany/epiphany.h: Wrap rtl_opt_pass declarations"}, {"sha": "81e9ce8348967807eacf8fe9eacfcd83e5cf392d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=80f1fd0dabb30f82a972b5eb114a7d47104263a3", "patch": "@@ -3866,16 +3866,16 @@ ix86_option_override_internal (bool main_args_p,\n   ix86_incoming_stack_boundary = ix86_default_incoming_stack_boundary;\n   if (opts_set->x_ix86_incoming_stack_boundary_arg)\n     {\n-      if (ix86_incoming_stack_boundary_arg\n+      if (opts->x_ix86_incoming_stack_boundary_arg\n \t  < (TARGET_64BIT_P (opts->x_ix86_isa_flags) ? 4 : 2)\n-\t  || ix86_incoming_stack_boundary_arg > 12)\n+\t  || opts->x_ix86_incoming_stack_boundary_arg > 12)\n \terror (\"-mincoming-stack-boundary=%d is not between %d and 12\",\n-\t       ix86_incoming_stack_boundary_arg,\n+\t       opts->x_ix86_incoming_stack_boundary_arg,\n \t       TARGET_64BIT_P (opts->x_ix86_isa_flags) ? 4 : 2);\n       else\n \t{\n \t  ix86_user_incoming_stack_boundary\n-\t    = (1 << ix86_incoming_stack_boundary_arg) * BITS_PER_UNIT;\n+\t    = (1 << opts->x_ix86_incoming_stack_boundary_arg) * BITS_PER_UNIT;\n \t  ix86_incoming_stack_boundary\n \t    = ix86_user_incoming_stack_boundary;\n \t}\n@@ -4282,6 +4282,30 @@ ix86_function_specific_save (struct cl_target_option *ptr,\n   ptr->x_ix86_isa_flags_explicit = opts->x_ix86_isa_flags_explicit;\n   ptr->x_ix86_target_flags_explicit = opts->x_ix86_target_flags_explicit;\n   ptr->x_recip_mask_explicit = opts->x_recip_mask_explicit;\n+  ptr->x_ix86_arch_string = opts->x_ix86_arch_string;\n+  ptr->x_ix86_tune_string = opts->x_ix86_tune_string;\n+  ptr->x_ix86_cmodel = opts->x_ix86_cmodel;\n+  ptr->x_ix86_abi = opts->x_ix86_abi;\n+  ptr->x_ix86_asm_dialect = opts->x_ix86_asm_dialect;\n+  ptr->x_ix86_branch_cost = opts->x_ix86_branch_cost;\n+  ptr->x_ix86_dump_tunes = opts->x_ix86_dump_tunes;\n+  ptr->x_ix86_force_align_arg_pointer = opts->x_ix86_force_align_arg_pointer;\n+  ptr->x_ix86_force_drap = opts->x_ix86_force_drap;\n+  ptr->x_ix86_incoming_stack_boundary_arg = opts->x_ix86_incoming_stack_boundary_arg;\n+  ptr->x_ix86_pmode = opts->x_ix86_pmode;\n+  ptr->x_ix86_preferred_stack_boundary_arg = opts->x_ix86_preferred_stack_boundary_arg;\n+  ptr->x_ix86_recip_name = opts->x_ix86_recip_name;\n+  ptr->x_ix86_regparm = opts->x_ix86_regparm;\n+  ptr->x_ix86_section_threshold = opts->x_ix86_section_threshold;\n+  ptr->x_ix86_sse2avx = opts->x_ix86_sse2avx;\n+  ptr->x_ix86_stack_protector_guard = opts->x_ix86_stack_protector_guard;\n+  ptr->x_ix86_stringop_alg = opts->x_ix86_stringop_alg;\n+  ptr->x_ix86_tls_dialect = opts->x_ix86_tls_dialect;\n+  ptr->x_ix86_tune_ctrl_string = opts->x_ix86_tune_ctrl_string;\n+  ptr->x_ix86_tune_memcpy_strategy = opts->x_ix86_tune_memcpy_strategy;\n+  ptr->x_ix86_tune_memset_strategy = opts->x_ix86_tune_memset_strategy;\n+  ptr->x_ix86_tune_no_default = opts->x_ix86_tune_no_default;\n+  ptr->x_ix86_veclibabi_type = opts->x_ix86_veclibabi_type;\n \n   /* The fields are char but the variables are not; make sure the\n      values fit in the fields.  */\n@@ -4311,6 +4335,30 @@ ix86_function_specific_restore (struct gcc_options *opts,\n   opts->x_ix86_isa_flags_explicit = ptr->x_ix86_isa_flags_explicit;\n   opts->x_ix86_target_flags_explicit = ptr->x_ix86_target_flags_explicit;\n   opts->x_recip_mask_explicit = ptr->x_recip_mask_explicit;\n+  opts->x_ix86_arch_string = ptr->x_ix86_arch_string;\n+  opts->x_ix86_tune_string = ptr->x_ix86_tune_string;\n+  opts->x_ix86_cmodel = ptr->x_ix86_cmodel;\n+  opts->x_ix86_abi = ptr->x_ix86_abi;\n+  opts->x_ix86_asm_dialect = ptr->x_ix86_asm_dialect;\n+  opts->x_ix86_branch_cost = ptr->x_ix86_branch_cost;\n+  opts->x_ix86_dump_tunes = ptr->x_ix86_dump_tunes;\n+  opts->x_ix86_force_align_arg_pointer = ptr->x_ix86_force_align_arg_pointer;\n+  opts->x_ix86_force_drap = ptr->x_ix86_force_drap;\n+  opts->x_ix86_incoming_stack_boundary_arg = ptr->x_ix86_incoming_stack_boundary_arg;\n+  opts->x_ix86_pmode = ptr->x_ix86_pmode;\n+  opts->x_ix86_preferred_stack_boundary_arg = ptr->x_ix86_preferred_stack_boundary_arg;\n+  opts->x_ix86_recip_name = ptr->x_ix86_recip_name;\n+  opts->x_ix86_regparm = ptr->x_ix86_regparm;\n+  opts->x_ix86_section_threshold = ptr->x_ix86_section_threshold;\n+  opts->x_ix86_sse2avx = ptr->x_ix86_sse2avx;\n+  opts->x_ix86_stack_protector_guard = ptr->x_ix86_stack_protector_guard;\n+  opts->x_ix86_stringop_alg = ptr->x_ix86_stringop_alg;\n+  opts->x_ix86_tls_dialect = ptr->x_ix86_tls_dialect;\n+  opts->x_ix86_tune_ctrl_string = ptr->x_ix86_tune_ctrl_string;\n+  opts->x_ix86_tune_memcpy_strategy = ptr->x_ix86_tune_memcpy_strategy;\n+  opts->x_ix86_tune_memset_strategy = ptr->x_ix86_tune_memset_strategy;\n+  opts->x_ix86_tune_no_default = ptr->x_ix86_tune_no_default;\n+  opts->x_ix86_veclibabi_type = ptr->x_ix86_veclibabi_type;\n \n   /* Recreate the arch feature tests if the arch changed */\n   if (old_arch != ix86_arch)\n@@ -4625,8 +4673,8 @@ ix86_valid_target_attribute_tree (tree args,\n \t\t\t\t  struct gcc_options *opts,\n \t\t\t\t  struct gcc_options *opts_set)\n {\n-  const char *orig_arch_string = ix86_arch_string;\n-  const char *orig_tune_string = ix86_tune_string;\n+  const char *orig_arch_string = opts->x_ix86_arch_string;\n+  const char *orig_tune_string = opts->x_ix86_tune_string;\n   enum fpmath_unit orig_fpmath_set = opts_set->x_ix86_fpmath;\n   int orig_tune_defaulted = ix86_tune_defaulted;\n   int orig_arch_specified = ix86_arch_specified;"}, {"sha": "1704c526746fb85fe82790ef17d538547112fabb", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=80f1fd0dabb30f82a972b5eb114a7d47104263a3", "patch": "@@ -48,6 +48,14 @@ unsigned char arch\n TargetSave\n unsigned char tune\n \n+;; -march= processor-string\n+TargetSave\n+const char *x_ix86_arch_string\n+\n+;; -mtune= processor-string\n+TargetSave\n+const char *x_ix86_tune_string\n+\n ;; CPU schedule model\n TargetSave\n unsigned char schedule\n@@ -76,6 +84,94 @@ unsigned char tune_defaulted\n TargetSave\n unsigned char arch_specified\n \n+;; -mcmodel= model\n+TargetSave\n+enum cmodel x_ix86_cmodel\n+\n+;; -mabi=\n+TargetSave\n+enum calling_abi x_ix86_abi\n+\n+;; -masm=\n+TargetSave\n+enum asm_dialect x_ix86_asm_dialect\n+\n+;; -mbranch-cost=\n+TargetSave\n+int x_ix86_branch_cost\n+\n+;; -mdump-tune-features= \n+TargetSave\n+int x_ix86_dump_tunes\n+\n+;; -mstackrealign=\n+TargetSave\n+int x_ix86_force_align_arg_pointer\n+\n+;; -mforce-drap= \n+TargetSave\n+int x_ix86_force_drap\n+\n+;; -mincoming-stack-boundary=\n+TargetSave\n+int x_ix86_incoming_stack_boundary_arg\n+\n+;; -maddress-mode=\n+TargetSave\n+enum pmode x_ix86_pmode\n+\n+;; -mpreferred-stack-boundary= \n+TargetSave\n+int x_ix86_preferred_stack_boundary_arg\n+\n+;; -mrecip=\n+TargetSave\n+const char *x_ix86_recip_name\n+\n+;; -mregparm=\n+TargetSave\n+int x_ix86_regparm\n+\n+;; -mlarge-data-threshold=\n+TargetSave\n+int x_ix86_section_threshold\n+\n+;; -msse2avx=\n+TargetSave\n+int x_ix86_sse2avx\n+\n+;; -mstack-protector-guard=\n+TargetSave\n+enum stack_protector_guard x_ix86_stack_protector_guard\n+\n+;; -mstringop-strategy=\n+TargetSave\n+enum stringop_alg x_ix86_stringop_alg\n+\n+;; -mtls-dialect=\n+TargetSave\n+enum tls_dialect x_ix86_tls_dialect\n+\n+;; -mtune-ctrl=\n+TargetSave\n+const char *x_ix86_tune_ctrl_string\n+\n+;; -mmemcpy-strategy=\n+TargetSave\n+const char *x_ix86_tune_memcpy_strategy\n+\n+;; -mmemset-strategy=\n+TargetSave\n+const char *x_ix86_tune_memset_strategy\n+\n+;; -mno-default=\n+TargetSave\n+int x_ix86_tune_no_default\n+\n+;; -mveclibabi=\n+TargetSave\n+enum ix86_veclibabi x_ix86_veclibabi_type\n+\n ;; x86 options\n m128bit-long-double\n Target RejectNegative Report Mask(128BIT_LONG_DOUBLE) Save"}, {"sha": "579c59ba1b704415ca54eb95398b0b1712a99eb8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=80f1fd0dabb30f82a972b5eb114a7d47104263a3", "patch": "@@ -1,3 +1,8 @@\n+2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n+\n+\tPR target/58944\n+\t* testsuite/gcc.target/i386/pr58944.c: New test.\t\n+\n 2013-12-02  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/58235"}, {"sha": "8164cf995085753c7812fd4778ca93c0abdd6b07", "filename": "gcc/testsuite/gcc.target/i386/pr58944.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58944.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80f1fd0dabb30f82a972b5eb114a7d47104263a3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58944.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr58944.c?ref=80f1fd0dabb30f82a972b5eb114a7d47104263a3", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused-macros -march=native\" } */\n+\n+#pragma GCC push_options\n+#pragma GCC target(\"xsaveopt\")\n+void fn1(void) {}\n+#pragma GCC pop_options\n+\n+/* { dg-prune-output \"macro \\\"__code_model_\" } */ \n+/* { dg-prune-output \"macro \\\"__XSAVE__\\\" is not used\" } */ \n+/* { dg-prune-output \"macro \\\"__XSAVEOPT__\\\" is not used\" } */ "}]}