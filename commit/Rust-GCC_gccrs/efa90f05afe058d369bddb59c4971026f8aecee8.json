{"sha": "efa90f05afe058d369bddb59c4971026f8aecee8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZhOTBmMDVhZmUwNThkMzY5YmRkYjU5YzQ5NzEwMjZmOGFlY2VlOA==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-05-31T13:34:55Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-05-31T13:34:55Z"}, "message": "jump.c (jump_optimize_1): Only set CAN_REACH_END if calculate_can_reach_end returns nonzero.\n\n        * jump.c (jump_optimize_1): Only set CAN_REACH_END if\n        calculate_can_reach_end returns nonzero.\n\nFrom-SVN: r27281", "tree": {"sha": "f84e9faad67f2e1fb47e9707dcea1434b28d3292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f84e9faad67f2e1fb47e9707dcea1434b28d3292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efa90f05afe058d369bddb59c4971026f8aecee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa90f05afe058d369bddb59c4971026f8aecee8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efa90f05afe058d369bddb59c4971026f8aecee8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efa90f05afe058d369bddb59c4971026f8aecee8/comments", "author": null, "committer": null, "parents": [{"sha": "2f0a2a5b4ac9639466b535fe4d0cb252611901c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f0a2a5b4ac9639466b535fe4d0cb252611901c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f0a2a5b4ac9639466b535fe4d0cb252611901c6"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "a771927c2f934c55b33d30f78b4584bd3e82fe2a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa90f05afe058d369bddb59c4971026f8aecee8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa90f05afe058d369bddb59c4971026f8aecee8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efa90f05afe058d369bddb59c4971026f8aecee8", "patch": "@@ -18,6 +18,9 @@ Mon May 31 11:40:20 EDT 1999  John Wehle  (john@feith.com)\n \n Mon May 31 00:46:17 1999  Jeffrey A Law  (law@cygnus.com)\n \n+\t* jump.c (jump_optimize_1): Only set CAN_REACH_END if \n+\tcalculate_can_reach_end returns nonzero.\n+\n \t* configure.in (native gas tests): Search for an assembler in the\n \tsame manner that the installed compiler will.\n \t* configure: Rebuilt."}, {"sha": "6b6a90ae3a94c92ccfbddf64532d4d7a0c285cfd", "filename": "gcc/jump.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efa90f05afe058d369bddb59c4971026f8aecee8/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efa90f05afe058d369bddb59c4971026f8aecee8/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=efa90f05afe058d369bddb59c4971026f8aecee8", "patch": "@@ -235,7 +235,12 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n \n   if (!optimize)\n     {\n-      can_reach_end = calculate_can_reach_end (last_insn, 1, 0);\n+      /* CAN_REACH_END is persistent for each function.  Once set it should\n+\t not be cleared.  This is especially true for the case where we\n+\t delete the NOTE_FUNCTION_END note.  CAN_REACH_END is cleared by\n+\t the front-end before compiling each function.  */\n+      if (calculate_can_reach_end (last_insn, 1, 0))\n+\tcan_reach_end = 1;\n \n       /* Zero the \"deleted\" flag of all the \"deleted\" insns.  */\n       for (insn = f; insn; insn = NEXT_INSN (insn))\n@@ -2068,7 +2073,12 @@ jump_optimize_1 (f, cross_jump, noop_moves, after_regscan, mark_labels_only)\n     }\n #endif\n \n-  can_reach_end = calculate_can_reach_end (last_insn, 0, 1);\n+  /* CAN_REACH_END is persistent for each function.  Once set it should\n+     not be cleared.  This is especially true for the case where we\n+     delete the NOTE_FUNCTION_END note.  CAN_REACH_END is cleared by\n+     the front-end before compiling each function.  */\n+  if (calculate_can_reach_end (last_insn, 0, 1))\n+    can_reach_end = 1;\n \n   /* Show JUMP_CHAIN no longer valid.  */\n   jump_chain = 0;"}]}