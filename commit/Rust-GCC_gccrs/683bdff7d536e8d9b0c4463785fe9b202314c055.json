{"sha": "683bdff7d536e8d9b0c4463785fe9b202314c055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzYmRmZjdkNTM2ZThkOWIwYzQ0NjM3ODVmZTliMjAyMzE0YzA1NQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-10-18T20:02:24Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-10-18T20:02:24Z"}, "message": "Separate TARGET_POWERPC64 patterns for TARGET_64BIT or TARGET_32BIT.\n\nApproved by David Edelsohn.\n\nFrom-SVN: r72650", "tree": {"sha": "041fb8044bec06bde4454fb41e0d283fd9598216", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/041fb8044bec06bde4454fb41e0d283fd9598216"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/683bdff7d536e8d9b0c4463785fe9b202314c055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683bdff7d536e8d9b0c4463785fe9b202314c055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683bdff7d536e8d9b0c4463785fe9b202314c055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683bdff7d536e8d9b0c4463785fe9b202314c055/comments", "author": null, "committer": null, "parents": [{"sha": "ad7e39caee334e9a6cc08993e76a24c7db5c0ea3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad7e39caee334e9a6cc08993e76a24c7db5c0ea3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad7e39caee334e9a6cc08993e76a24c7db5c0ea3"}], "stats": {"total": 453, "additions": 265, "deletions": 188}, "files": [{"sha": "73a878717337814925c3ce7603c29c0167608ae2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 265, "deletions": 188, "changes": 453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683bdff7d536e8d9b0c4463785fe9b202314c055/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683bdff7d536e8d9b0c4463785fe9b202314c055/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=683bdff7d536e8d9b0c4463785fe9b202314c055", "patch": "@@ -123,7 +123,7 @@\n \t(compare:CC (zero_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %2,%1,0,56\n    #\"\n@@ -149,7 +149,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %0,%1,0,56\n    #\"\n@@ -181,7 +181,7 @@\n \t(compare:CC (sign_extend:DI (match_operand:QI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsb. %2,%1\n    #\"\n@@ -207,7 +207,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsb. %0,%1\n    #\"\n@@ -248,7 +248,7 @@\n \t(compare:CC (zero_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %2,%1,0,48\n    #\"\n@@ -274,7 +274,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %0,%1,0,48\n    #\"\n@@ -315,7 +315,7 @@\n \t(compare:CC (sign_extend:DI (match_operand:HI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsh. %2,%1\n    #\"\n@@ -341,7 +341,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsh. %0,%1\n    #\"\n@@ -382,7 +382,7 @@\n \t(compare:CC (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %2,%1,0,32\n    #\"\n@@ -408,7 +408,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rldicl. %0,%1,0,32\n    #\"\n@@ -449,7 +449,7 @@\n \t(compare:CC (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsw. %2,%1\n    #\"\n@@ -475,7 +475,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(sign_extend:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    extsw. %0,%1\n    #\"\n@@ -2245,7 +2245,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    #\n    {andil.|andi.} %3,%1,%b2\n@@ -2326,7 +2326,7 @@\n \t(and:SI (match_dup 1)\n \t\t(match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    #\n    {andil.|andi.} %0,%1,%b2\n@@ -3223,7 +3223,7 @@\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 63;\n@@ -3245,7 +3245,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(zero_extract:DI (match_dup 1) (match_dup 2) (match_dup 3)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   int start = INTVAL (operands[3]) & 63;\n@@ -5242,7 +5242,7 @@\n (define_expand \"floatdisf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n         (float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   if (!flag_unsafe_math_optimizations)\n@@ -5293,7 +5293,7 @@\n \t\t\t   (pc)))\n    (set (match_dup 0) (xor:DI (match_dup 0) (match_dup 2)))\n    (set (match_dup 0) (ior:DI (match_dup 0) (const_int 2048)))]\n-  \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n+  \"TARGET_64BIT && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"\n {\n   operands[2] = gen_reg_rtx (DImode);\n@@ -5633,11 +5633,26 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))]\n-  \"TARGET_32BIT && !TARGET_POWER\"\n+  \"TARGET_32BIT && !TARGET_POWERPC64 && !TARGET_POWER\"\n   \"@\n    {srai|srawi} %0,%1,31\\;{srai|srawi} %L0,%1,%h2\n    {sri|srwi} %L0,%L1,%h2\\;insrwi %L0,%1,%h2,0\\;{srai|srawi} %0,%1,%h2\"\n   [(set_attr \"length\" \"8,12\")])\n+\n+(define_insn \"*ashrdisi3_noppc64\"\n+  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n+        (subreg:SI (ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")    \n+                                (const_int 32)) 4))]\n+  \"TARGET_32BIT && !TARGET_POWERPC64\"\n+  \"*\n+{\n+  if (REGNO (operands[0]) == REGNO (operands[1]))\n+    return \\\"\\\";\n+  else\n+    return \\\"mr %0,%1\\\";\n+}\"\n+   [(set_attr \"length\" \"4\")])      \n+\n \f\n ;; PowerPC64 DImode operations.\n \n@@ -5696,7 +5711,7 @@\n \t\t\t     (match_operand:DI 2 \"reg_or_short_operand\" \"r,I,r,I\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r,r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    add. %3,%1,%2\n    addic. %3,%1,%2\n@@ -5726,7 +5741,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(plus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    add. %0,%1,%2\n    addic. %0,%1,%2\n@@ -5792,7 +5807,7 @@\n \t(compare:CC (not:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    nor. %2,%1,%1\n    #\"\n@@ -5818,7 +5833,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(not:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    nor. %0,%1,%1\n    #\"\n@@ -5854,7 +5869,7 @@\n \t\t\t      (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subf. %3,%2,%1\n    #\"\n@@ -5882,7 +5897,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(minus:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subf. %0,%2,%1\n    #\"\n@@ -5960,7 +5975,7 @@\n \t(compare:CC (neg:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 2 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    neg. %2,%1\n    #\"\n@@ -5986,7 +6001,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(neg:DI (match_dup 1)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    neg. %0,%1\n    #\"\n@@ -6187,7 +6202,7 @@\n \t\t\t    (match_operand:DI 2 \"exact_log2_cint_operand\" \"N,N\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    sradi %3,%1,%p2\\;addze. %3,%3\n    #\"\n@@ -6215,7 +6230,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(div:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    sradi %0,%1,%p2\\;addze. %0,%0\n    #\"\n@@ -6266,7 +6281,7 @@\n \t\t\t       (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %3,%1,%H2,0\n    #\"\n@@ -6294,7 +6309,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(rotate:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %0,%1,%H2,0\n    #\"\n@@ -6332,7 +6347,7 @@\n \t\t     (match_operand:DI 3 \"mask64_operand\" \"n,n\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2c%B3. %4,%1,%H2,%S3\n    #\"\n@@ -6366,7 +6381,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:DI (rotate:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2c%B3. %0,%1,%H2,%S3\n    #\"\n@@ -6407,7 +6422,7 @@\n \t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %3,%1,%H2,56\n    #\"\n@@ -6441,7 +6456,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (subreg:QI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %0,%1,%H2,56\n    #\"\n@@ -6482,7 +6497,7 @@\n \t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %3,%1,%H2,48\n    #\"\n@@ -6516,7 +6531,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (subreg:HI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %0,%1,%H2,48\n    #\"\n@@ -6557,7 +6572,7 @@\n \t\t\t\t (match_operand:DI 2 \"reg_or_cint_operand\" \"ri,ri\")) 0))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %3,%1,%H2,32\n    #\"\n@@ -6591,7 +6606,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(zero_extend:DI (subreg:SI (rotate:DI (match_dup 1) (match_dup 2)) 0)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    rld%I2cl. %0,%1,%H2,32\n    #\"\n@@ -6647,7 +6662,7 @@\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    sld%I2. %3,%1,%H2\n    #\"\n@@ -6675,7 +6690,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashift:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    sld%I2. %0,%1,%H2\n    #\"\n@@ -6713,7 +6728,7 @@\n \t\t (match_operand:DI 3 \"const_int_operand\" \"n,n\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r,r\"))]\n-  \"TARGET_POWERPC64 && includes_rldic_lshift_p (operands[2], operands[3])\"\n+  \"TARGET_64BIT && includes_rldic_lshift_p (operands[2], operands[3])\"\n   \"@\n    rldic. %4,%1,%H2,%W3\n    #\"\n@@ -6747,7 +6762,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWERPC64 && includes_rldic_lshift_p (operands[2], operands[3])\"\n+  \"TARGET_64BIT && includes_rldic_lshift_p (operands[2], operands[3])\"\n   \"@\n    rldic. %0,%1,%H2,%W3\n    #\"\n@@ -6789,7 +6804,7 @@\n \t\t (match_operand:DI 3 \"mask64_operand\" \"n,n\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=r,r\"))]\n-  \"TARGET_POWERPC64 && includes_rldicr_lshift_p (operands[2], operands[3])\"\n+  \"TARGET_64BIT && includes_rldicr_lshift_p (operands[2], operands[3])\"\n   \"@\n    rldicr. %4,%1,%H2,%S3\n    #\"\n@@ -6823,7 +6838,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(and:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWERPC64 && includes_rldicr_lshift_p (operands[2], operands[3])\"\n+  \"TARGET_64BIT && includes_rldicr_lshift_p (operands[2], operands[3])\"\n   \"@\n    rldicr. %0,%1,%H2,%S3\n    #\"\n@@ -6880,7 +6895,7 @@\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT \"\n   \"@\n    srd%I2. %3,%1,%H2\n    #\"\n@@ -6908,7 +6923,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(lshiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    srd%I2. %0,%1,%H2\n    #\"\n@@ -6966,7 +6981,7 @@\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"ri,ri\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    srad%I2. %3,%1,%H2\n    #\"\n@@ -6994,7 +7009,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashiftrt:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    srad%I2. %0,%1,%H2\n    #\"\n@@ -7058,7 +7073,7 @@\n \t\t    (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r,r,r,r,r,r,r,r,r\"))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    and. %3,%1,%2\n    rldic%B2. %3,%1,0,%S2\n@@ -7123,7 +7138,7 @@\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r\")\n \t(and:DI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:CC 4 \"=X,X,X,X,X,X,X,x,x,X\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    and. %0,%1,%2\n    rldic%B2. %0,%1,0,%S2\n@@ -7268,7 +7283,7 @@\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %3,%1,%2\n    #\"\n@@ -7297,7 +7312,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 4))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %0,%1,%2\n    #\"\n@@ -7368,7 +7383,7 @@\n \t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\")])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %3,%2,%1\n    #\"\n@@ -7397,7 +7412,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 4))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %0,%2,%1\n    #\"\n@@ -7434,7 +7449,7 @@\n \t  (not:DI (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))])\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %3,%1,%2\n    #\"\n@@ -7463,7 +7478,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(match_dup 4))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    %q4. %0,%1,%2\n    #\"\n@@ -7619,17 +7634,23 @@\n \t  operands2[0] = operands[0];\n \t  operands2[1] = operands[1];\n \t  operands2[2] = operands[2];\n-\t  operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n-\t  output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n-#if TARGET_MACHO\n-\t  if (MACHO_DYNAMIC_NO_PIC_P)\n-\t    output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n+\t  if (TARGET_POWERPC64 && TARGET_32BIT)\n+\t    /* Note, old assemblers didn't support relocation here. */\n+\t    return \\\"ld %0,lo16(%2)(%1)\\\";\n \t  else\n-\t  /* We cannot rely on ha16(low half)==ha16(high half), alas,\n-\t     although in practice it almost always is.  */\n-\t  output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n+\t  {\n+\t    operands2[3] = gen_rtx_REG (SImode, RS6000_PIC_OFFSET_TABLE_REGNUM);     \n+\t    output_asm_insn (\\\"{l|lwz} %0,lo16(%2)(%1)\\\", operands);\n+#if TARGET_MACHO\n+\t    if (MACHO_DYNAMIC_NO_PIC_P)\n+\t      output_asm_insn (\\\"{liu|lis} %L0,ha16(%2+4)\\\", operands);\n+\t    else     \n+\t    /* We cannot rely on ha16(low half)==ha16(high half), alas,\n+\t       although in practice it almost always is.  */\n+\t    output_asm_insn (\\\"{cau|addis} %L0,%3,ha16(%2+4)\\\", operands2);\n #endif\n-\t  return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n+\t    return (\\\"{l|lwz} %L0,lo16(%2+4)(%L0)\\\");\n+\t  }\n \t}\n       default:\n \tabort();\n@@ -8644,7 +8665,7 @@\n \t(compare:CC (match_operand:DI 1 \"gpc_reg_operand\" \"0,r,r\")\n \t\t    (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r\") (match_dup 1))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    cmpdi %2,%0,0\n    mr. %0,%1\n@@ -8684,7 +8705,7 @@\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n \t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))\n    (clobber (match_scratch:SI 2 \"=q,q#X,X,X,X\"))]\n-  \"TARGET_POWER && ! TARGET_POWERPC64\n+  \"TARGET_POWER && ! TARGET_POWERPC64 \n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -11538,7 +11559,7 @@\n \t(eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\")))\n    (clobber (match_scratch:SI 3 \"=r,&r,r,r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n    {sfi|subfic} %3,%1,0\\;{ae|adde} %0,%3,%1\n@@ -11552,7 +11573,7 @@\n \t(eq:DI (match_operand:DI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t       (match_operand:DI 2 \"reg_or_cint_operand\" \"r,O,K,J,I\")))\n    (clobber (match_scratch:DI 3 \"=r,&r,r,r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    xor %0,%1,%2\\;subfic %3,%0,0\\;adde %0,%3,%0\n    subfic %3,%1,0\\;adde %0,%3,%1\n@@ -11570,7 +11591,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r\")\n \t(eq:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=r,&r,r,r,r,r,&r,r,r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae.|adde.} %0,%3,%0\n    {sfi|subfic} %3,%1,0\\;{ae.|adde.} %0,%3,%1\n@@ -11594,7 +11615,7 @@\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(eq:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t(eq:SI (match_dup 1) (match_dup 2)))\n    (clobber (match_dup 3))])\n@@ -11612,7 +11633,7 @@\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r,r,r,r,r\")\n \t(eq:DI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:DI 3 \"=r,&r,r,r,r,r,&r,r,r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    xor %0,%1,%2\\;subfic %3,%0,0\\;adde. %0,%3,%0\n    subfic %3,%1,0\\;adde. %0,%3,%1\n@@ -11636,7 +11657,7 @@\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(eq:DI (match_dup 1) (match_dup 2)))\n    (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t(eq:DI (match_dup 1) (match_dup 2)))\n    (clobber (match_dup 3))])\n@@ -11665,7 +11686,7 @@\n \t(plus:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t\t\t(match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\n    {sfi|subfic} %0,%1,0\\;{aze|addze} %0,%3\n@@ -11683,7 +11704,7 @@\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r,r,r,r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r,&r,&r,&r,&r,&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n    {sfi|subfic} %4,%1,0\\;{aze.|addze.} %4,%3\n@@ -11707,7 +11728,7 @@\n \t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:SI (eq:SI (match_dup 1)\n \t\t (match_dup 2))\n@@ -11727,7 +11748,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r,&r,&r,&r,&r,&r,&r\")\n \t(plus:SI (eq:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n    {sfi|subfic} %0,%1,0\\;{aze.|addze.} %0,%3\n@@ -11752,7 +11773,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (eq:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (eq:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -11764,7 +11785,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n \t(neg:SI (eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n \t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\"))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    xor %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,-1\\;{sfe|subfe} %0,%0,%0\n@@ -11780,7 +11801,7 @@\n \t(lshiftrt:SI (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 31)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC64 && !TARGET_ISEL\"\n+  \"! TARGET_POWER && TARGET_32BIT && !TARGET_ISEL\"\n   \"{ai|addic} %2,%1,-1\\;{sfe|subfe} %0,%2,%1\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -11789,7 +11810,7 @@\n \t(lshiftrt:DI (neg:DI (abs:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 63)))\n    (clobber (match_scratch:DI 2 \"=&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"addic %2,%1,-1\\;subfe %0,%2,%1\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -11801,7 +11822,7 @@\n \t\t  (const_int 31))\n \t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:SI 3 \"=&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{ai|addic} %3,%1,-1\\;{aze|addze} %0,%2\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -11812,7 +11833,7 @@\n \t\t  (const_int 63))\n \t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))\n    (clobber (match_scratch:DI 3 \"=&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"addic %3,%1,-1\\;addze %0,%2\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -11826,7 +11847,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))\n    (clobber (match_scratch:SI 4 \"=X,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %3,%1,-1\\;{aze.|addze.} %3,%2\n    #\"\n@@ -11843,7 +11864,7 @@\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (match_dup 3)\n \t\t   (plus:SI (lshiftrt:SI (neg:SI (abs:SI (match_dup 1)))\n \t\t\t\t\t (const_int 31))\n@@ -11863,7 +11884,7 @@\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addic %3,%1,-1\\;addze. %3,%2\n    #\"\n@@ -11879,7 +11900,7 @@\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 3)\n \t(plus:DI (lshiftrt:DI (neg:DI (abs:DI (match_dup 1)))\n \t\t   (const_int 63))\n@@ -11901,7 +11922,7 @@\n \t(plus:SI (lshiftrt:SI (neg:SI (abs:SI (match_dup 1))) (const_int 31))\n \t\t (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %3,%1,-1\\;{aze.|addze.} %0,%2\n    #\"\n@@ -11920,7 +11941,7 @@\n \t(plus:SI (lshiftrt:SI (neg:SI (abs:SI (match_dup 1))) (const_int 31))\n \t\t (match_dup 2)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t(plus:SI (lshiftrt:SI (neg:SI (abs:SI (match_dup 1))) (const_int 31))\n \t\t (match_dup 2)))\n@@ -11942,7 +11963,7 @@\n \t(plus:DI (lshiftrt:DI (neg:DI (abs:DI (match_dup 1))) (const_int 63))\n \t\t (match_dup 2)))\n    (clobber (match_scratch:DI 3 \"=&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addic %3,%1,-1\\;addze. %0,%2\n    #\"\n@@ -11961,7 +11982,7 @@\n \t(plus:DI (lshiftrt:DI (neg:DI (abs:DI (match_dup 1))) (const_int 63))\n \t\t (match_dup 2)))\n    (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(parallel [(set (match_dup 0)\n \t(plus:DI (lshiftrt:DI (neg:DI (abs:DI (match_dup 1))) (const_int 63))\n \t\t (match_dup 2)))\n@@ -12120,7 +12141,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(leu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"subf%I2c %0,%1,%2\\;li %0,0\\;adde %0,%0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -12132,7 +12153,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(leu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\n    #\"\n@@ -12147,7 +12168,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(leu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(leu:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -12163,7 +12184,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(leu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n    #\"\n@@ -12178,7 +12199,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(leu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(leu:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -12194,7 +12215,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(leu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subf%I2c %0,%1,%2\\;li %0,0\\;adde. %0,%0,%0\n    #\"\n@@ -12206,7 +12227,7 @@\n \t(plus:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{aze|addze} %0,%3\"\n   [(set_attr \"length\" \"8\")])\n \n@@ -12218,7 +12239,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %4,%1,%2\\;{aze.|addze.} %4,%3\n    #\"\n@@ -12233,7 +12254,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2))\n \t\t  (match_dup 3)))\n@@ -12251,7 +12272,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{aze.|addze.} %0,%3\n    #\"\n@@ -12267,7 +12288,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (leu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -12279,7 +12300,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\"\n    [(set_attr \"length\" \"12\")])\n \n@@ -12289,7 +12310,7 @@\n \t\t (leu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))\n \t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -12302,7 +12323,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n    #\"\n@@ -12318,7 +12339,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2)))\n \t\t(match_dup 3)))\n@@ -12337,7 +12358,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n    #\"\n@@ -12354,7 +12375,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(and:SI (neg:SI (leu:SI (match_dup 1) (match_dup 2)))\n \t\t(match_dup 3)))\n@@ -12488,7 +12509,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n@@ -12502,7 +12523,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ltu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n@@ -12519,7 +12540,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ltu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(ltu:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -12532,7 +12553,7 @@\n \t(plus:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n \t\t (match_operand:SI 3 \"reg_or_short_operand\" \"rI,rI\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n   {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\n   {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\"\n@@ -12546,7 +12567,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n@@ -12563,7 +12584,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2))\n \t\t (match_dup 3)))\n@@ -12581,7 +12602,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n@@ -12599,7 +12620,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (ltu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -12611,7 +12632,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(neg:SI (ltu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\"\n@@ -12746,7 +12767,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae|adde} %0,%0,%0\"\n@@ -12756,7 +12777,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t(match_operand:DI 2 \"reg_or_neg_short_operand\" \"r,P\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subfc %0,%2,%1\\;li %0,0\\;adde %0,%0,%0\n    addic %0,%1,%n2\\;li %0,0\\;adde %0,%0,%0\"\n@@ -12770,7 +12791,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(geu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n    {ai|addic} %0,%1,%n2\\;{cal %0,0(0)|li %0,0}\\;{ae.|adde.} %0,%0,%0\n@@ -12787,7 +12808,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(geu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(geu:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -12803,7 +12824,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(geu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subfc %0,%2,%1\\;li %0,0\\;adde. %0,%0,%0\n    addic %0,%1,%n2\\;li %0,0\\;adde. %0,%0,%0\n@@ -12820,7 +12841,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(geu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(geu:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -12833,7 +12854,7 @@\n \t(plus:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\"))\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{aze|addze} %0,%3\n    {ai|addic} %0,%1,%n2\\;{aze|addze} %0,%3\"\n@@ -12847,7 +12868,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{aze.|addze.} %4,%3\n    {ai|addic} %4,%1,%n2\\;{aze.|addze.} %4,%3\n@@ -12864,7 +12885,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2))\n \t\t  (match_dup 3)))\n@@ -12882,7 +12903,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{aze.|addze.} %0,%3\n    {ai|addic} %0,%1,%n2\\;{aze.|addze.} %0,%3\n@@ -12900,7 +12921,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (geu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -12912,7 +12933,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(neg:SI (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,I\"))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;nand %0,%0,%0\n    {sfi|subfic} %0,%1,-1\\;{a%I2|add%I2c} %0,%0,%2\\;{sfe|subfe} %0,%0,%0\"\n@@ -12924,7 +12945,7 @@\n \t\t (geu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_neg_short_operand\" \"r,P\")))\n \t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;andc %0,%3,%0\"\n@@ -12939,7 +12960,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %4,%2,%1\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n    {ai|addic} %4,%1,%n2\\;{sfe|subfe} %4,%4,%4\\;andc. %4,%3,%4\n@@ -12957,7 +12978,7 @@\n \t\t (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2)))\n \t\t(match_dup 3)))\n@@ -12976,7 +12997,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf|subfc} %0,%2,%1\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n    {ai|addic} %0,%1,%n2\\;{sfe|subfe} %0,%0,%0\\;andc. %0,%3,%0\n@@ -12995,7 +13016,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(and:SI (neg:SI (geu:SI (match_dup 1) (match_dup 2))) (match_dup 3)))\n    (set (match_dup 4)\n@@ -13007,15 +13028,15 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t       (const_int 0)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{sri|srwi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t       (const_int 0)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"subfic %0,%1,0\\;addme %0,%0\\;srdi %0,%0,63\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -13027,7 +13048,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(gt:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{sri.|srwi.} %0,%0,31\n    #\"\n@@ -13042,7 +13063,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(gt:SI (match_dup 1) (const_int 0)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(gt:SI (match_dup 1) (const_int 0)))\n    (set (match_dup 2)\n@@ -13058,7 +13079,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(gt:DI (match_dup 1) (const_int 0)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subfic %0,%1,0\\;addme %0,%0\\;srdi. %0,%0,63\n    #\"\n@@ -13073,7 +13094,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(gt:DI (match_dup 1) (const_int 0)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(gt:DI (match_dup 1) (const_int 0)))\n    (set (match_dup 2)\n@@ -13125,7 +13146,7 @@\n \t(plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{a|addc} %0,%1,%1\\;{sfe|subfe} %0,%1,%0\\;{aze|addze} %0,%2\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -13134,7 +13155,7 @@\n \t(plus:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(const_int 0))\n \t\t (match_operand:DI 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"addc %0,%1,%1\\;subfe %0,%1,%0\\;addze %0,%2\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -13146,7 +13167,7 @@\n \t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {a|addc} %3,%1,%1\\;{sfe|subfe} %3,%1,%3\\;{aze.|addze.} %3,%2\n    #\"\n@@ -13161,7 +13182,7 @@\n \t\t  (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 3)\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0))\n \t\t  (match_dup 2)))\n@@ -13178,7 +13199,7 @@\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"=&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addc %3,%1,%1\\;subfe %3,%1,%3\\;addze. %3,%2\n    #\"\n@@ -13193,7 +13214,7 @@\n \t\t  (match_operand:DI 2 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 3 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 3)\n \t(plus:DI (gt:DI (match_dup 1) (const_int 0))\n \t\t (match_dup 2)))\n@@ -13211,7 +13232,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0)) (match_dup 2)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {a|addc} %0,%1,%1\\;{sfe|subfe} %0,%1,%0\\;{aze.|addze.} %0,%2\n    #\"\n@@ -13227,7 +13248,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0)) (match_dup 2)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (gt:SI (match_dup 1) (const_int 0)) (match_dup 2)))\n    (set (match_dup 3)\n@@ -13244,7 +13265,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(plus:DI (gt:DI (match_dup 1) (const_int 0)) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addc %0,%1,%1\\;subfe %0,%1,%0\\;addze. %0,%2\n    #\"\n@@ -13260,7 +13281,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(plus:DI (gt:DI (match_dup 1) (const_int 0)) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:DI (gt:DI (match_dup 1) (const_int 0)) (match_dup 2)))\n    (set (match_dup 3)\n@@ -13345,15 +13366,15 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (const_int 0))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sfi|subfic} %0,%1,0\\;{ame|addme} %0,%0\\;{srai|srawi} %0,%0,31\"\n   [(set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:DI (gt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t       (const_int 0))))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"subfic %0,%1,0\\;addme %0,%0\\;sradi %0,%0,63\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -13369,15 +13390,15 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg %0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg %0,%0\"\n   [(set_attr \"length\" \"12\")])\n \n@@ -13389,7 +13410,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(gtu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;neg. %0,%0\n    #\"\n@@ -13404,7 +13425,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(gtu:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(gtu:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -13420,7 +13441,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(gtu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;neg. %0,%0\n    #\"\n@@ -13435,7 +13456,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(gtu:DI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(gtu:DI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -13448,7 +13469,7 @@\n \t(plus:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"I,rI\"))\n \t\t (match_operand:SI 3 \"reg_or_short_operand\" \"r,rI\")))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %0,%1,%k2\\;{aze|addze} %0,%3\n    {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf%I3|subf%I3c} %0,%0,%3\"\n@@ -13459,7 +13480,7 @@\n \t(plus:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t\t (match_operand:DI 2 \"reg_or_short_operand\" \"I,rI\"))\n \t\t (match_operand:DI 3 \"reg_or_short_operand\" \"r,rI\")))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addic %0,%1,%k2\\;addze %0,%3\n    subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subf%I3c %0,%0,%3\"\n@@ -13473,7 +13494,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %4,%1,%k2\\;{aze.|addze.} %4,%3\n    {sf%I2|subf%I2c} %4,%1,%2\\;{sfe|subfe} %4,%4,%4\\;{sf.|subfc.} %4,%4,%3\n@@ -13490,7 +13511,7 @@\n \t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:SI 4 \"\"))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:SI (gtu:SI (match_dup 1) (match_dup 2))\n \t\t (match_dup 3)))\n@@ -13507,7 +13528,7 @@\n \t\t  (match_operand:DI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 4 \"=&r,&r,&r,&r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addic %4,%1,%k2\\;addze. %4,%3\n    subf%I2c %4,%1,%2\\;subfe %4,%4,%4\\;subfc. %4,%4,%3\n@@ -13524,7 +13545,7 @@\n \t\t  (match_operand:DI 3 \"gpc_reg_operand\" \"\"))\n \t (const_int 0)))\n    (clobber (match_scratch:DI 4 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 4)\n \t(plus:DI (gtu:DI (match_dup 1) (match_dup 2))\n \t\t  (match_dup 3)))\n@@ -13542,7 +13563,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(plus:SI (gtu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"@\n    {ai|addic} %0,%1,%k2\\;{aze.|addze.} %0,%3\n    {sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\\;{sf.|subfc.} %0,%0,%3\n@@ -13560,7 +13581,7 @@\n \t (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (gtu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"! TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:SI (gtu:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -13577,7 +13598,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n \t(plus:DI (gtu:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"@\n    addic %0,%1,%k2\\;addze. %0,%3\n    subf%I2c %0,%1,%2\\;subfe %0,%0,%0\\;subfc. %0,%0,%3\n@@ -13595,7 +13616,7 @@\n \t (const_int 0)))\n    (set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(plus:DI (gtu:DI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(plus:DI (gtu:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n    (set (match_dup 4)\n@@ -13607,15 +13628,15 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:SI (gtu:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"{sf%I2|subf%I2c} %0,%1,%2\\;{sfe|subfe} %0,%0,%0\"\n   [(set_attr \"length\" \"8\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n \t(neg:DI (gtu:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r\")\n \t\t\t(match_operand:DI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"subf%I2c %0,%1,%2\\;subfe %0,%0,%0\"\n   [(set_attr \"length\" \"8\")])\n \f\n@@ -13923,7 +13944,7 @@\n   /* Only use this on innermost loops.  */\n   if (INTVAL (operands[3]) > 1)\n     FAIL;\n-  if (TARGET_POWERPC64)\n+  if (TARGET_64BIT)\n     {\n       if (GET_MODE (operands[0]) != DImode)\n \tFAIL;\n@@ -13949,7 +13970,7 @@\n \t\t\t    (const_int -1)))\n \t      (clobber (match_scratch:CC 2 \"\"))\n \t      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"\")\n \n (define_expand \"ctrdi\"\n@@ -13963,7 +13984,7 @@\n \t\t\t    (const_int -1)))\n \t      (clobber (match_scratch:CC 2 \"\"))\n \t      (clobber (match_scratch:DI 3 \"\"))])]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"\")\n \n ;; We need to be able to do this for any operand, including MEM, or we\n@@ -13983,7 +14004,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14007,7 +14028,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14031,7 +14052,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14055,7 +14076,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14081,7 +14102,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"TARGET_32BIT && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14105,7 +14126,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"TARGET_32BIT && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14129,7 +14150,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"TARGET_64BIT && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14153,7 +14174,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64 && find_reg_note (insn, REG_NONNEG, 0)\"\n+  \"TARGET_64BIT && find_reg_note (insn, REG_NONNEG, 0)\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14179,7 +14200,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14203,7 +14224,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:SI 4 \"=X,X,&r,r\"))]\n-  \"! TARGET_POWERPC64\"\n+  \"TARGET_32BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14227,7 +14248,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14251,7 +14272,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"=X,&x,&x,&x\"))\n    (clobber (match_scratch:DI 4 \"=X,X,&r,r\"))]\n-  \"TARGET_POWERPC64\"\n+  \"TARGET_64BIT\"\n   \"*\n {\n   if (which_alternative != 0)\n@@ -14333,7 +14354,7 @@\n \t\t (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:DI 4 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\"\n+  \"TARGET_64BIT && reload_completed\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 1)\n \t\t\t\t\t(const_int -1))\n@@ -14359,7 +14380,7 @@\n \t(plus:DI (match_dup 1) (const_int -1)))\n    (clobber (match_scratch:CC 3 \"\"))\n    (clobber (match_scratch:DI 4 \"\"))]\n-  \"TARGET_POWERPC64 && reload_completed\n+  \"TARGET_64BIT && reload_completed\n    && ! gpc_reg_operand (operands[0], DImode)\"\n   [(parallel [(set (match_dup 3)\n \t\t   (compare:CC (plus:DI (match_dup 1)\n@@ -14377,6 +14398,62 @@\n { operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n \t\t\t const0_rtx); }\")\n \n+; These two are for 64-bit hardware running 32-bit mode.\n+; We don't use the add. instruction in this mode.\n+(define_split\n+  [(set (pc)\n+        (if_then_else (match_operator 2 \"comparison_operator\"\n+                                      [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+                                       (const_int 1)])       \n+                      (match_operand 5 \"\" \"\")\n+                      (match_operand 6 \"\" \"\")))\n+   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n+        (plus:SI (match_dup 1)     \n+                 (const_int -1)))        \n+   (clobber (match_scratch:CC 3 \"\"))\n+   (clobber (match_scratch:SI 4 \"\"))]\n+  \"TARGET_POWERPC64 && TARGET_32BIT && reload_completed\"\n+  [(set (match_dup 0)\n+        (plus:SI (match_dup 1)          \n+                 (const_int -1)))  \n+   (set (match_dup 3)\n+        (compare:CC (match_dup 0)  \n+                    (const_int 0)))      \n+   (set (pc) (if_then_else (match_dup 7)\n+                           (match_dup 5)\n+                           (match_dup 6)))]\n+  \"\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+                         const0_rtx); }\")\n+\n+(define_split\n+  [(set (pc)\n+        (if_then_else (match_operator 2 \"comparison_operator\"\n+                                      [(match_operand:SI 1 \"gpc_reg_operand\" \"\")\n+                                       (const_int 1)])\n+                      (match_operand 5 \"\" \"\")\n+                      (match_operand 6 \"\" \"\")))\n+   (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+        (plus:SI (match_dup 1) (const_int -1)))\n+   (clobber (match_scratch:CC 3 \"\"))\n+   (clobber (match_scratch:SI 4 \"\"))]\n+  \"TARGET_POWERPC64 && TARGET_32BIT && reload_completed\n+   && ! gpc_reg_operand (operands[0], SImode)\"\n+  [(set (match_dup 4)\n+        (plus:SI (match_dup 1)\n+                 (const_int -1)))\n+   (set (match_dup 3)\n+        (compare:CC (match_dup 4)\n+                    (const_int 0)))\n+   (set (match_dup 0)\n+        (match_dup 4))\n+   (set (pc) (if_then_else (match_dup 7)\n+                           (match_dup 5)\n+                           (match_dup 6)))]\n+  \"\n+{ operands[7] = gen_rtx (GET_CODE (operands[2]), VOIDmode, operands[3],\n+                         const0_rtx); }\")\n+\n \f\n (define_insn \"trap\"\n   [(trap_if (const_int 1) (const_int 0))]"}]}