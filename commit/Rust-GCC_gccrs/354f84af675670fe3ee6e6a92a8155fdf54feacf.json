{"sha": "354f84af675670fe3ee6e6a92a8155fdf54feacf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU0Zjg0YWY2NzU2NzBmZTNlZTZlNmE5MmE4MTU1ZmRmNTRmZWFjZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2008-06-19T16:39:35Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-06-19T16:39:35Z"}, "message": "i386.h (ix86_tune_indices): New.\n\n\t* config/i386/i386.h (ix86_tune_indices)\n\t[X86_TUNE_FUSE_CMP_AND_BRANCH]: New.\n\t(TARGET_FUSE_CMP_AND_BRANCH): New define.\n\t* config/i386/i386.md (*jcc_fused_1): New insn pattern\n\t(*jcc_fused_2): Ditto.\n\t* config/i386/i386.c (ix86_tune_features): Add m_CORE2 to\n\tX86_TUNE_USE_VECTOR_COMPARES targets.\n\t(print operand): Handle 'E' and 'e' code.\n\nFrom-SVN: r136954", "tree": {"sha": "f14a19dd13be7b591a8e840371cbaa37d6c2b458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f14a19dd13be7b591a8e840371cbaa37d6c2b458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/354f84af675670fe3ee6e6a92a8155fdf54feacf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354f84af675670fe3ee6e6a92a8155fdf54feacf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/354f84af675670fe3ee6e6a92a8155fdf54feacf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/354f84af675670fe3ee6e6a92a8155fdf54feacf/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "720705d2339f8800c256ea9536e7a2fef3e81b19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720705d2339f8800c256ea9536e7a2fef3e81b19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/720705d2339f8800c256ea9536e7a2fef3e81b19"}], "stats": {"total": 77, "additions": 76, "deletions": 1}, "files": [{"sha": "50bb34bdddc4b4c0103e388a33d14f6ca16c1e51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=354f84af675670fe3ee6e6a92a8155fdf54feacf", "patch": "@@ -1,3 +1,14 @@\n+2008-06-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (ix86_tune_indices)\n+\t[X86_TUNE_FUSE_CMP_AND_BRANCH]: New.\n+\t(TARGET_FUSE_CMP_AND_BRANCH): New define.\n+\t* config/i386/i386.md (*jcc_fused_1): New insn pattern\n+\t(*jcc_fused_2): Ditto.\n+\t* config/i386/i386.c (ix86_tune_features): Add m_CORE2 to\n+\tX86_TUNE_USE_VECTOR_COMPARES targets.\n+\t(print operand): Handle 'E' and 'e' code.\n+\n 2008-06-19  Anatoly Sokolov  <aesok@post.ru>\n \n \t* config/avr/avr.c (avr_mcu_t): Add attiny13a."}, {"sha": "5ebb31c22d0e53e0425bb5670b2df2fbac8cabba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=354f84af675670fe3ee6e6a92a8155fdf54feacf", "patch": "@@ -1435,6 +1435,11 @@ unsigned int ix86_tune_features[X86_TUNE_LAST] = {\n   /* X86_TUNE_USE_VECTOR_CONVERTS: Prefer vector packed SSE conversion\n      from integer to FP. */\n   m_AMDFAM10,\n+\n+  /* X86_TUNE_FUSE_CMP_AND_BRANCH: Fuse a compare or test instruction\n+     with a subsequent conditional jump instruction into a single\n+     compare-and-branch uop.  */\n+  m_CORE2,\n };\n \n /* Feature tests against the various architecture variations.  */\n@@ -9020,6 +9025,7 @@ get_some_local_dynamic_name (void)\n    L,W,B,Q,S,T -- print the opcode suffix for specified size of operand.\n    C -- print opcode suffix for set/cmov insn.\n    c -- like C, but print reversed condition\n+   E,e -- likewise, but for compare-and-branch fused insn.\n    F,f -- likewise, but for floating-point.\n    O -- if HAVE_AS_IX86_CMOV_SUN_SYNTAX, expand to \"w.\", \"l.\" or \"q.\",\n         otherwise nothing\n@@ -9292,6 +9298,14 @@ print_operand (FILE *file, rtx x, int code)\n \t  put_condition_code (GET_CODE (x), GET_MODE (XEXP (x, 0)), 1, 1, file);\n \t  return;\n \n+\tcase 'E':\n+\t  put_condition_code (GET_CODE (x), CCmode, 0, 0, file);\n+\t  return;\n+\n+\tcase 'e':\n+\t  put_condition_code (GET_CODE (x), CCmode, 1, 0, file);\n+\t  return;\n+\n \tcase 'H':\n \t  /* It doesn't actually matter what mode we use here, as we're\n \t     only going to use this for printing.  */"}, {"sha": "b011885424a8699288499f2344625340ed070cb4", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=354f84af675670fe3ee6e6a92a8155fdf54feacf", "patch": "@@ -281,6 +281,7 @@ enum ix86_tune_indices {\n   X86_TUNE_NOT_UNPAIRABLE,\n   X86_TUNE_NOT_VECTORMODE,\n   X86_TUNE_USE_VECTOR_CONVERTS,\n+  X86_TUNE_FUSE_CMP_AND_BRANCH,\n \n   X86_TUNE_LAST\n };\n@@ -363,7 +364,10 @@ extern unsigned int ix86_tune_features[X86_TUNE_LAST];\n #define\tTARGET_MOVE_M1_VIA_OR\tix86_tune_features[X86_TUNE_MOVE_M1_VIA_OR]\n #define TARGET_NOT_UNPAIRABLE\tix86_tune_features[X86_TUNE_NOT_UNPAIRABLE]\n #define TARGET_NOT_VECTORMODE\tix86_tune_features[X86_TUNE_NOT_VECTORMODE]\n-#define TARGET_USE_VECTOR_CONVERTS ix86_tune_features[X86_TUNE_USE_VECTOR_CONVERTS]\n+#define TARGET_USE_VECTOR_CONVERTS \\\n+\tix86_tune_features[X86_TUNE_USE_VECTOR_CONVERTS]\n+#define TARGET_FUSE_CMP_AND_BRANCH \\\n+\tix86_tune_features[X86_TUNE_FUSE_CMP_AND_BRANCH]\n \n /* Feature tests against the various architecture variations.  */\n enum ix86_arch_indices {"}, {"sha": "48c8a326c578eb78b55397e4f50455bb112aac4d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/354f84af675670fe3ee6e6a92a8155fdf54feacf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=354f84af675670fe3ee6e6a92a8155fdf54feacf", "patch": "@@ -14032,6 +14032,52 @@\n \t     (const_int 2)\n \t     (const_int 6)))])\n \n+;; ??? Handle alignment requirements for compare and branch fused macro-op;\n+;; the branch instruction does not start at a 16-byte boundary or cross\n+;; a 16-byte boundary.\n+\n+(define_insn \"*jcc_fused_1\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 1 \"ix86_comparison_uns_operator\"\n+\t\t\t[(match_operand:SI 2 \"nonimmediate_operand\" \"r,m,r\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"ri,r,m\")])\n+\t (label_ref (match_operand 0 \"\" \"\"))\n+\t (pc)))]\n+  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\n+   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+{\n+  if (REG_P (operands[2])\n+      && operands[3] == CONST0_RTX (GET_MODE (operands[3])))\n+    output_asm_insn (\"test{l}\\t%2, %2\", operands);\n+  else\n+    output_asm_insn (\"cmp{l}\\t{%3, %2|%2, %3}\",operands);\n+\n+  return \"%+j%E1\\t%l0\\t# fused\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"*jcc_fused_2\"\n+  [(set (pc)\n+\t(if_then_else (match_operator 1 \"ix86_comparison_uns_operator\"\n+\t\t\t[(match_operand:SI 2 \"nonimmediate_operand\" \"r,m,r\")\n+\t\t\t (match_operand:SI 3 \"general_operand\" \"ri,r,m\")])\n+\t (pc)\n+\t (label_ref (match_operand 0 \"\" \"\"))))]\n+  \"TARGET_FUSE_CMP_AND_BRANCH && !TARGET_64BIT\n+   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+{\n+  if (REG_P (operands[2])\n+      && operands[3] == CONST0_RTX (GET_MODE (operands[3])))\n+    output_asm_insn (\"test{l}\\t%2, %2\", operands);\n+  else\n+    output_asm_insn (\"cmp{l}\\t{%3, %2|%2, %3}\",operands);\n+\n+  return \"%+j%e1\\t%l0\\t# fused\";\n+}\n+  [(set_attr \"type\" \"multi\")\n+   (set_attr \"mode\" \"SI\")])\n+\n ;; In general it is not safe to assume too much about CCmode registers,\n ;; so simplify-rtx stops when it sees a second one.  Under certain\n ;; conditions this is safe on x86, so help combine not create"}]}