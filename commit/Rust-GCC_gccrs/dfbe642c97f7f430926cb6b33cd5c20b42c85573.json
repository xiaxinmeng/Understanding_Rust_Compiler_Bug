{"sha": "dfbe642c97f7f430926cb6b33cd5c20b42c85573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZiZTY0MmM5N2Y3ZjQzMDkyNmNiNmIzM2NkNWMyMGI0MmM4NTU3Mw==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2020-12-11T16:27:21Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@synopsys.com", "date": "2020-12-11T16:29:56Z"}, "message": "arc: Refurbish adc/sbc patterns\n\nThe adc/sbc patterns were unecessary spliting, remove that and\nassociated functions.\n\ngcc/\n2020-12-11  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* config/arc/arc-protos.h (arc_scheduling_not_expected): Remove\n\tit.\n\t(arc_sets_cc_p): Likewise.\n\t(arc_need_delay): Likewise.\n\t* config/arc/arc.c (arc_sets_cc_p): Likewise.\n\t(arc_need_delay): Likewise.\n\t(arc_scheduling_not_expected): Likewise.\n\t* config/arc/arc.md: Convert adc/sbc patterns to simple\n\tinstruction definitions.\n\nSigned-off-by: Claudiu Zissulescu <claziss@synopsys.com>", "tree": {"sha": "e633bbba7f9eda9b709041cda10acba72dd8001f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e633bbba7f9eda9b709041cda10acba72dd8001f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfbe642c97f7f430926cb6b33cd5c20b42c85573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbe642c97f7f430926cb6b33cd5c20b42c85573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfbe642c97f7f430926cb6b33cd5c20b42c85573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfbe642c97f7f430926cb6b33cd5c20b42c85573/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c6b86b50d4624e2bb665378a424f99a67831693", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c6b86b50d4624e2bb665378a424f99a67831693", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c6b86b50d4624e2bb665378a424f99a67831693"}], "stats": {"total": 151, "additions": 29, "deletions": 122}, "files": [{"sha": "de4cf47c818b4f041ec008d4459248d401ed7a1e", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=dfbe642c97f7f430926cb6b33cd5c20b42c85573", "patch": "@@ -90,10 +90,7 @@ extern void split_subsi (rtx *);\n extern void arc_split_move (rtx *);\n extern const char *arc_short_long (rtx_insn *insn, const char *, const char *);\n extern rtx arc_regno_use_in (unsigned int, rtx);\n-extern bool arc_scheduling_not_expected (void);\n-extern bool arc_sets_cc_p (rtx_insn *insn);\n extern int arc_label_align (rtx_insn *label);\n-extern bool arc_need_delay (rtx_insn *insn);\n extern bool arc_text_label (rtx_insn *insn);\n \n extern bool arc_short_comparison_p (rtx, int);"}, {"sha": "b80bb9b63a591f4d5158e076e5dd986faeb580df", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=dfbe642c97f7f430926cb6b33cd5c20b42c85573", "patch": "@@ -10299,59 +10299,6 @@ arc_attr_type (rtx_insn *insn)\n   return get_attr_type (insn);\n }\n \n-/* Return true if insn sets the condition codes.  */\n-\n-bool\n-arc_sets_cc_p (rtx_insn *insn)\n-{\n-  if (NONJUMP_INSN_P (insn))\n-    if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n-      insn = seq->insn (seq->len () - 1);\n-  return arc_attr_type (insn) == TYPE_COMPARE;\n-}\n-\n-/* Return true if INSN is an instruction with a delay slot we may want\n-   to fill.  */\n-\n-bool\n-arc_need_delay (rtx_insn *insn)\n-{\n-  rtx_insn *next;\n-\n-  if (!flag_delayed_branch)\n-    return false;\n-  /* The return at the end of a function needs a delay slot.  */\n-  if (NONJUMP_INSN_P (insn) && GET_CODE (PATTERN (insn)) == USE\n-      && (!(next = next_active_insn (insn))\n-\t  || ((!NONJUMP_INSN_P (next) || GET_CODE (PATTERN (next)) != SEQUENCE)\n-\t      && arc_attr_type (next) == TYPE_RETURN))\n-      && (!TARGET_PAD_RETURN\n-\t  || (prev_active_insn (insn)\n-\t      && prev_active_insn (prev_active_insn (insn))\n-\t      && prev_active_insn (prev_active_insn (prev_active_insn (insn))))))\n-    return true;\n-  if (NONJUMP_INSN_P (insn)\n-      ? (GET_CODE (PATTERN (insn)) == USE\n-\t || GET_CODE (PATTERN (insn)) == CLOBBER\n-\t || GET_CODE (PATTERN (insn)) == SEQUENCE)\n-      : JUMP_P (insn)\n-      ? (GET_CODE (PATTERN (insn)) == ADDR_VEC\n-\t || GET_CODE (PATTERN (insn)) == ADDR_DIFF_VEC)\n-      : !CALL_P (insn))\n-    return false;\n-  return num_delay_slots (insn) != 0;\n-}\n-\n-/* Return true if the scheduling pass(es) has/have already run,\n-   i.e. where possible, we should try to mitigate high latencies\n-   by different instruction selection.  */\n-\n-bool\n-arc_scheduling_not_expected (void)\n-{\n-  return cfun->machine->arc_reorg_started;\n-}\n-\n /* Code has a minimum p2 alignment of 1, which we must restore after\n    an ADDR_DIFF_VEC.  */\n "}, {"sha": "ae08146bcafd455f379e28eba5c77702cf584ed4", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 29, "deletions": 66, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfbe642c97f7f430926cb6b33cd5c20b42c85573/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=dfbe642c97f7f430926cb6b33cd5c20b42c85573", "patch": "@@ -2842,43 +2842,25 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n    (set_attr \"type\" \"compare\")\n    (set_attr \"length\" \"4,4,8\")])\n \n-; w/c/c comes first (rather than w/0/C_0) to prevent the middle-end\n-; needlessly prioritizing the matching constraint.\n-; Rcw/0/C_0 comes before w/c/L so that the lower latency conditional\n-; execution is used where possible.\n-(define_insn_and_split \"adc\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=w,Rcw,w,Rcw,w\")\n-\t(plus:SI (plus:SI (ltu:SI (reg:CC_C CC_REG) (const_int 0))\n-\t\t\t  (match_operand:SI 1 \"nonmemory_operand\"\n-\t\t\t\t\t\t\t \"%c,0,c,0,cCal\"))\n-\t\t (match_operand:SI 2 \"nonmemory_operand\" \"c,C_0,L,I,cCal\")))]\n+(define_insn \"adc\"\n+  [(set (match_operand:SI 0 \"register_operand\"    \"=r,  r,r,r,  r,r\")\n+\t(plus:SI\n+\t (plus:SI\n+\t  (ltu:SI (reg:CC_C CC_REG) (const_int 0))\n+\t  (match_operand:SI 1 \"nonmemory_operand\" \"%r,  0,r,0,Cal,r\"))\n+\t (match_operand:SI 2 \"nonmemory_operand\"   \"r,C_0,L,I,  r,Cal\")))]\n   \"register_operand (operands[1], SImode)\n    || register_operand (operands[2], SImode)\"\n   \"@\n-\tadc %0,%1,%2\n-\tadd.cs %0,%1,1\n-\tadc %0,%1,%2\n-\tadc %0,%1,%2\n-\tadc %0,%1,%2\"\n-  ; if we have a bad schedule after sched2, split.\n-  \"reload_completed\n-   && !optimize_size && (!TARGET_ARC600_FAMILY)\n-   && arc_scheduling_not_expected ()\n-   && arc_sets_cc_p (prev_nonnote_insn (insn))\n-   /* If next comes a return or other insn that needs a delay slot,\n-      expect the adc to get into the delay slot.  */\n-   && next_nonnote_insn (insn)\n-   && !arc_need_delay (next_nonnote_insn (insn))\n-   /* Restore operands before emitting.  */\n-   && (extract_insn_cached (insn), 1)\"\n-  [(set (match_dup 0) (match_dup 3))\n-   (cond_exec\n-     (ltu (reg:CC_C CC_REG) (const_int 0))\n-     (set (match_dup 0) (plus:SI (match_dup 0) (const_int 1))))]\n-  \"operands[3] = simplify_gen_binary (PLUS, SImode, operands[1], operands[2]);\"\n+    adc\\\\t%0,%1,%2\n+    add.cs\\\\t%0,%1,1\n+    adc\\\\t%0,%1,%2\n+    adc\\\\t%0,%1,%2\n+    adc\\\\t%0,%1,%2\n+    adc\\\\t%0,%1,%2\"\n   [(set_attr \"cond\" \"use\")\n    (set_attr \"type\" \"cc_arith\")\n-   (set_attr \"length\" \"4,4,4,4,8\")])\n+   (set_attr \"length\" \"4,4,4,4,8,8\")])\n \n ; combiner-splitter cmp / scc -> cmp / adc\n (define_split\n@@ -3010,7 +2992,7 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n       DONE;\n     }\n   emit_insn (gen_sub_f (l0, l1, l2));\n-  emit_insn (gen_sbc (h0, h1, h2, gen_rtx_REG (CCmode, CC_REG)));\n+  emit_insn (gen_sbc (h0, h1, h2));\n   DONE;\n   \")\n \n@@ -3025,44 +3007,25 @@ core_3, archs4x, archs4xd, archs4xd_slow\"\n    (set_attr \"type\" \"cc_arith\")\n    (set_attr \"length\" \"4\")])\n \n-; w/c/c comes first (rather than Rcw/0/C_0) to prevent the middle-end\n-; needlessly prioritizing the matching constraint.\n-; Rcw/0/C_0 comes before w/c/L so that the lower latency conditional execution\n-; is used where possible.\n-(define_insn_and_split \"sbc\"\n-  [(set (match_operand:SI 0 \"dest_reg_operand\" \"=w,Rcw,w,Rcw,w\")\n-\t(minus:SI (minus:SI (match_operand:SI 1 \"nonmemory_operand\"\n-\t\t\t\t\t\t\"c,0,c,0,cCal\")\n-\t\t\t    (ltu:SI (match_operand:CC_C 3 \"cc_use_register\")\n-\t\t\t\t    (const_int 0)))\n-\t\t  (match_operand:SI 2 \"nonmemory_operand\" \"c,C_0,L,I,cCal\")))]\n+(define_insn \"sbc\"\n+  [(set (match_operand:SI 0 \"dest_reg_operand\"   \"=r,r,r,r,r,r\")\n+\t(minus:SI\n+\t (minus:SI\n+\t  (match_operand:SI 1 \"nonmemory_operand\" \"r,  0,r,0,  r,Cal\")\n+\t  (ltu:SI (reg:CC_C CC_REG) (const_int 0)))\n+\t (match_operand:SI 2 \"nonmemory_operand\"  \"r,C_0,L,I,Cal,r\")))]\n   \"register_operand (operands[1], SImode)\n    || register_operand (operands[2], SImode)\"\n   \"@\n-\tsbc %0,%1,%2\n-\tsub.cs %0,%1,1\n-\tsbc %0,%1,%2\n-\tsbc %0,%1,%2\n-\tsbc %0,%1,%2\"\n-  ; if we have a bad schedule after sched2, split.\n-  \"reload_completed\n-   && !optimize_size && (!TARGET_ARC600_FAMILY)\n-   && arc_scheduling_not_expected ()\n-   && arc_sets_cc_p (prev_nonnote_insn (insn))\n-   /* If next comes a return or other insn that needs a delay slot,\n-      expect the adc to get into the delay slot.  */\n-   && next_nonnote_insn (insn)\n-   && !arc_need_delay (next_nonnote_insn (insn))\n-   /* Restore operands before emitting.  */\n-   && (extract_insn_cached (insn), 1)\"\n-  [(set (match_dup 0) (match_dup 4))\n-   (cond_exec\n-     (ltu (reg:CC_C CC_REG) (const_int 0))\n-     (set (match_dup 0) (plus:SI (match_dup 0) (const_int -1))))]\n-  \"operands[4] = simplify_gen_binary (MINUS, SImode, operands[1], operands[2]);\"\n+    sbc\\\\t%0,%1,%2\n+    sub.cs\\\\t%0,%1,1\n+    sbc\\\\t%0,%1,%2\n+    sbc\\\\t%0,%1,%2\n+    sbc\\\\t%0,%1,%2\n+    sbc\\\\t%0,%1,%2\"\n   [(set_attr \"cond\" \"use\")\n    (set_attr \"type\" \"cc_arith\")\n-   (set_attr \"length\" \"4,4,4,4,8\")])\n+   (set_attr \"length\" \"4,4,4,4,8,8\")])\n \n (define_insn \"sub_f\"\n   [(set (reg:CC CC_REG)"}]}