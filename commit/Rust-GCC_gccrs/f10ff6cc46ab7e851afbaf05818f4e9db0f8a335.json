{"sha": "f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEwZmY2Y2M0NmFiN2U4NTFhZmJhZjA1ODE4ZjRlOWRiMGY4YTMzNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:54:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-04T10:54:14Z"}, "message": "[multiple changes]\n\n2014-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n\n        * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Component>: Deal with\n        renaming discriminants in tagged types first.\n        * gcc-interface/trans.c (gnat_to_gnu) <N_Selected_Component>: Test\n        the underlying type of the prefix.\n        (Pragma_to_gnu, case Pragma_Warning): Ignore Reason => \"...\"\n        (process_freeze_entity): Reset the nodes of\n        all the view of a type, if any.\n\n2014-08-04  Doug Rupp  <rupp@adacore.com>\n\t    Olivier Hainque  <hainque@adacore.com>\n\n        * gcc-interface/Makefile.in (x86 VxWorks): Add filter-out for vxworks7\n\tand remove incorrect EH_MECHANISM macros.\n        Add sigtramp.h to EXTRA_LIBGNAT_SRCS when we add sigtramp-vxworks.o to\n\tEXTRA_LIBGNAT_OBJS.\n\nFrom-SVN: r213569", "tree": {"sha": "722577bd2a66fb922752e6be27a55faa51a34339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/722577bd2a66fb922752e6be27a55faa51a34339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/comments", "author": null, "committer": null, "parents": [{"sha": "7401428337943079104e576e310bd0653dcf1d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7401428337943079104e576e310bd0653dcf1d2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7401428337943079104e576e310bd0653dcf1d2d"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "affb324903bf1a2c25e2f2fada4c849b365ed244", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "patch": "@@ -1,3 +1,21 @@\n+2014-08-04  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+        * gcc-interface/decl.c (gnat_to_gnu_entity) <E_Component>: Deal with\n+        renaming discriminants in tagged types first.\n+        * gcc-interface/trans.c (gnat_to_gnu) <N_Selected_Component>: Test\n+        the underlying type of the prefix.\n+        (Pragma_to_gnu, case Pragma_Warning): Ignore Reason => \"...\"\n+        (process_freeze_entity): Reset the nodes of\n+        all the view of a type, if any.\n+\n+2014-08-04  Doug Rupp  <rupp@adacore.com>\n+\t    Olivier Hainque  <hainque@adacore.com>\n+\n+        * gcc-interface/Makefile.in (x86 VxWorks): Add filter-out for vxworks7\n+\tand remove incorrect EH_MECHANISM macros.\n+        Add sigtramp.h to EXTRA_LIBGNAT_SRCS when we add sigtramp-vxworks.o to\n+\tEXTRA_LIBGNAT_OBJS.\n+\n 2014-08-04  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_attr.adb (Expand_N_Attribute_Reference): Make sure prefix"}, {"sha": "07d9828f775d07cb01cd81b7fee2b59ea244db2f", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "patch": "@@ -451,8 +451,10 @@ LIB_VERSION = $(strip $(shell grep ' Library_Version :' $(fsrcpfx)ada/gnatvsn.ad\n \n # Additionnal object files from C source to be added to libgnat.\n EXTRA_LIBGNAT_OBJS=\n-# Additionnal C source file to be added to libgnat without corresponding object\n-# file (included files).\n+\n+# Additionnal C source files to be added to libgnat without corresponding\n+# object file (#included files). This should include at least the GNAT\n+# specific header files required to rebuild the runtime library from sources.\n EXTRA_LIBGNAT_SRCS=\n \n # GCC spec files to be installed in $(libsubdir), so --specs=<spec-filename>\n@@ -588,6 +590,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n \n       EH_MECHANISM=-gcc\n       EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n+      EXTRA_LIBGNAT_SRCS+=sigtramp.h\n     else\n       ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n         LIBGNAT_TARGET_PAIRS += \\\n@@ -618,6 +621,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworks,$(target_cpu) $(target_vendor) $\n       endif\n       EXTRA_GNATRTL_NONTASKING_OBJS=i-vxwork.o i-vxwoio.o\n       EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n+      EXTRA_LIBGNAT_SRCS+=sigtramp.h\n     endif\n   endif\n \n@@ -672,6 +676,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksae,$(target_cpu) $(target_vendor)\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n+  EXTRA_LIBGNAT_SRCS+=sigtramp.h\n \n   # Extra pairs for the vthreads runtime\n   ifeq ($(strip $(filter-out vthreads,$(THREAD_KIND))),)\n@@ -736,6 +741,7 @@ ifeq ($(strip $(filter-out powerpc% wrs vxworksmils,$(target_cpu) $(target_vendo\n   EXTRA_GNATRTL_TASKING_OBJS=s-vxwork.o s-vxwext.o\n \n   EXTRA_LIBGNAT_OBJS+=vx_stack_info.o sigtramp-vxworks.o\n+  EXTRA_LIBGNAT_SRCS+=sigtramp.h\n   GNATRTL_SOCKETS_OBJS =\n \n   ifeq ($(strip $(filter-out yes,$(TRACE))),)\n@@ -864,7 +870,7 @@ ifeq ($(strip $(filter-out sparc% wrs vx%,$(target_cpu) $(target_vendor) $(targe\n endif\n \n # x86 VxWorks\n-ifeq ($(strip $(filter-out %86 wrs vxworks,$(target_cpu) $(target_vendor) $(target_os))),)\n+ifeq ($(strip $(filter-out %86 wrs vxworks vxworks7,$(target_cpu) $(target_vendor) $(target_os))),)\n   LIBGNAT_TARGET_PAIRS = \\\n   a-intnam.ads<a-intnam-vxworks.ads \\\n   i-vxwork.ads<i-vxwork-x86.ads \\\n@@ -920,8 +926,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(target_cpu) $(target_vendor) $(targ\n       EXTRA_LIBGNAT_OBJS+=affinity.o\n     else\n       ifeq ($(strip $(filter-out kernel-smp, $(THREAD_KIND))),)\n-        EH_MECHANISM=-gcc\n-\n         LIBGNAT_TARGET_PAIRS += \\\n         s-interr.adb<s-interr-hwint.adb \\\n         s-mudido.adb<s-mudido-affinity.adb \\\n@@ -936,8 +940,6 @@ ifeq ($(strip $(filter-out %86 wrs vxworks,$(target_cpu) $(target_vendor) $(targ\n         s-tpopsp.adb<s-tpopsp-vxworks.adb\n \n         ifeq ($(strip $(filter-out kernel,$(THREAD_KIND))),)\n-          EH_MECHANISM=-gcc\n-\n           LIBGNAT_TARGET_PAIRS += \\\n           s-vxwext.ads<s-vxwext-kernel.ads \\\n           s-vxwext.adb<s-vxwext-kernel.adb \\\n@@ -995,6 +997,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n     system.ads<system-vxworks-arm-rtp.ads\n \n     EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n+    EXTRA_LIBGNAT_SRCS+=sigtramp.h\n   else\n     ifeq ($(strip $(filter-out kernel-smp,$(THREAD_KIND))),)\n       EH_MECHANISM=-gcc\n@@ -1007,6 +1010,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n       system.ads<system-vxworks-arm.ads\n \n       EXTRA_LIBGNAT_OBJS+=affinity.o sigtramp-vxworks.o\n+      EXTRA_LIBGNAT_SRCS+=sigtramp.h\n     else\n       LIBGNAT_TARGET_PAIRS += \\\n       s-tpopsp.adb<s-tpopsp-vxworks.adb \\\n@@ -1020,6 +1024,7 @@ ifeq ($(strip $(filter-out arm% coff wrs vx%,$(target_cpu) $(target_vendor) $(ta\n         s-vxwext.adb<s-vxwext-kernel.adb\n \n         EXTRA_LIBGNAT_OBJS+=sigtramp-vxworks.o\n+        EXTRA_LIBGNAT_SRCS+=sigtramp.h\n       endif\n     endif\n   endif"}, {"sha": "8e3db64392e18aa1dafe43e6f4e08b33afe49301", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "patch": "@@ -497,33 +497,28 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t/* The GNAT record where the component was defined.  */\n \tEntity_Id gnat_record = Underlying_Type (Scope (gnat_entity));\n \n-\t/* If the entity is an inherited component (in the case of extended\n-\t   tagged record types), just return the original entity, which must\n-\t   be a FIELD_DECL.  Likewise for discriminants.  If the entity is a\n-\t   non-girder discriminant (in the case of derived untagged record\n-\t   types), return the stored discriminant it renames.  */\n-\tif (Present (Original_Record_Component (gnat_entity))\n-\t    && Original_Record_Component (gnat_entity) != gnat_entity)\n+\t/* If the entity is a discriminant of an extended tagged type used to\n+\t   rename a discriminant of the parent type, return the latter.  */\n+\tif (Is_Tagged_Type (gnat_record)\n+\t    && Present (Corresponding_Discriminant (gnat_entity)))\n \t  {\n \t    gnu_decl\n-\t      = gnat_to_gnu_entity (Original_Record_Component (gnat_entity),\n+\t      = gnat_to_gnu_entity (Corresponding_Discriminant (gnat_entity),\n \t\t\t\t    gnu_expr, definition);\n \t    saved = true;\n \t    break;\n \t  }\n \n-\t/* If this is a discriminant of an extended tagged type used to rename\n-\t   a discriminant of the parent type, return the latter.  */\n-\telse if (Present (Corresponding_Discriminant (gnat_entity)))\n+\t/* If the entity is an inherited component (in the case of extended\n+\t   tagged record types), just return the original entity, which must\n+\t   be a FIELD_DECL.  Likewise for discriminants.  If the entity is a\n+\t   non-girder discriminant (in the case of derived untagged record\n+\t   types), return the stored discriminant it renames.  */\n+\telse if (Present (Original_Record_Component (gnat_entity))\n+\t\t && Original_Record_Component (gnat_entity) != gnat_entity)\n \t  {\n-\t    /* If the derived type is untagged, then this is a non-girder\n-\t       discriminant and its Original_Record_Component must point to\n-\t       the stored discriminant it renames (i.e. we should have taken\n-\t       the previous branch).  */\n-\t    gcc_assert (Is_Tagged_Type (gnat_record));\n-\n \t    gnu_decl\n-\t      = gnat_to_gnu_entity (Corresponding_Discriminant (gnat_entity),\n+\t      = gnat_to_gnu_entity (Original_Record_Component (gnat_entity),\n \t\t\t\t    gnu_expr, definition);\n \t    saved = true;\n \t    break;\n@@ -2184,7 +2179,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tfor (index = ndim - 1; index >= 0; index--)\n \t  {\n \t    tem = build_nonshared_array_type (tem, gnu_index_types[index]);\n-\t    if (Reverse_Storage_Order (gnat_entity))\n+\t    if (Reverse_Storage_Order (gnat_entity) && !GNAT_Mode)\n \t      sorry (\"non-default Scalar_Storage_Order\");\n \t    TYPE_MULTI_ARRAY_P (tem) = (index > 0);\n \t    if (array_type_has_nonaliased_component (tem, gnat_entity))\n@@ -2916,7 +2911,6 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tgnu_type = make_node (tree_code_for_record_type (gnat_entity));\n \tTYPE_NAME (gnu_type) = gnu_entity_name;\n \tTYPE_PACKED (gnu_type) = (packed != 0) || has_rep;\n-\n \tif (Reverse_Storage_Order (gnat_entity) && !GNAT_Mode)\n \t  sorry (\"non-default Scalar_Storage_Order\");\n \tprocess_attributes (&gnu_type, &attr_list, true, gnat_entity);"}, {"sha": "8117ee8f5462debb245c2a0e30ce12854bc7e5cc", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f10ff6cc46ab7e851afbaf05818f4e9db0f8a335/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=f10ff6cc46ab7e851afbaf05818f4e9db0f8a335", "patch": "@@ -1417,7 +1417,8 @@ Pragma_to_gnu (Node_Id gnat_node)\n \t\t  gcc_unreachable ();\n \t      }\n \n-\t    if (Present (Next (gnat_temp)))\n+\t    /* Deal with optional pattern (but ignore Reason => \"...\").  */\n+\t    if (Present (Next (gnat_temp)) && No (Chars (Next (gnat_temp))))\n \t      {\n \t\t/* pragma Warnings (On | Off, Name) is handled differently.  */\n \t\tif (Nkind (Expression (Next (gnat_temp))) != N_String_Literal)\n@@ -5767,7 +5768,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \n \t/* For discriminant references in tagged types always substitute the\n \t   corresponding discriminant as the actual selected component.  */\n-\tif (Is_Tagged_Type (Etype (gnat_prefix)))\n+\tif (Is_Tagged_Type (Underlying_Type (Etype (gnat_prefix))))\n \t  while (Present (Corresponding_Discriminant (gnat_field)))\n \t    gnat_field = Corresponding_Discriminant (gnat_field);\n \n@@ -7910,12 +7911,14 @@ process_freeze_entity (Node_Id gnat_node)\n \t{\n \t  Entity_Id full_view = Full_View (gnat_entity);\n \n+\t  save_gnu_tree (full_view, NULL_TREE, false);\n+\n           if (IN (Ekind (full_view), Private_Kind)\n \t      && Present (Underlying_Full_View (full_view)))\n-\t    full_view = Underlying_Full_View (full_view);\n-\n-\t  if (present_gnu_tree (full_view))\n-\t    save_gnu_tree (full_view, NULL_TREE, false);\n+\t    {\n+\t      full_view = Underlying_Full_View (full_view);\n+\t      save_gnu_tree (full_view, NULL_TREE, false);\n+\t    }\n \t}\n \n       if (IN (kind, Type_Kind)"}]}