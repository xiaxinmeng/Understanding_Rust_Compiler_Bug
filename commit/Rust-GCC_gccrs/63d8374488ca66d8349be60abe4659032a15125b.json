{"sha": "63d8374488ca66d8349be60abe4659032a15125b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkODM3NDQ4OGNhNjZkODM0OWJlNjBhYmU0NjU5MDMyYTE1MTI1Yg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2003-10-21T13:21:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-10-21T13:21:33Z"}, "message": "Reported by M.Negovanovic\n\n2003-10-21  Mark Wielaard  <mark@klomp.org>\n\n\tReported by M.Negovanovic\n\t* java/beans/Introspector.java (getBeanInfo(ClassLoader, String)): New\n\tmethod.\n\t(reallyFindExplicitBeanInfo): Use new getBeanInfo() method.\n\nFrom-SVN: r72749", "tree": {"sha": "72dedae6e1c26f37d9435c4bb7cd31728552792e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72dedae6e1c26f37d9435c4bb7cd31728552792e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d8374488ca66d8349be60abe4659032a15125b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d8374488ca66d8349be60abe4659032a15125b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d8374488ca66d8349be60abe4659032a15125b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d8374488ca66d8349be60abe4659032a15125b/comments", "author": null, "committer": null, "parents": [{"sha": "e62e96e2ae03a8aaf0dfb7b412bc20f687a5b399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e62e96e2ae03a8aaf0dfb7b412bc20f687a5b399", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e62e96e2ae03a8aaf0dfb7b412bc20f687a5b399"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "67dc182232ecff8ff1d323c0587783db49d343f5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d8374488ca66d8349be60abe4659032a15125b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d8374488ca66d8349be60abe4659032a15125b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=63d8374488ca66d8349be60abe4659032a15125b", "patch": "@@ -1,3 +1,10 @@\n+2003-10-21  Mark Wielaard  <mark@klomp.org>\n+\n+\tReported by M.Negovanovic\n+\t* java/beans/Introspector.java (getBeanInfo(ClassLoader, String)): New\n+\tmethod.\n+\t(reallyFindExplicitBeanInfo): Use new getBeanInfo() method.\n+\n 2003-10-21  Sascha Brawer  <brawer@dandelis.ch>\n \n \tFix for Classpath bug #6076."}, {"sha": "b930b7469f58c4fa9db02cd23cc56eba374bccbc", "filename": "libjava/java/beans/Introspector.java", "status": "modified", "additions": 46, "deletions": 32, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d8374488ca66d8349be60abe4659032a15125b/libjava%2Fjava%2Fbeans%2FIntrospector.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d8374488ca66d8349be60abe4659032a15125b/libjava%2Fjava%2Fbeans%2FIntrospector.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FIntrospector.java?ref=63d8374488ca66d8349be60abe4659032a15125b", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.Introspector\n-   Copyright (C) 1998, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -518,40 +518,54 @@ else if(emptyBeanInfos.indexOf(beanClass) != -1)\n   \n   static BeanInfo reallyFindExplicitBeanInfo(Class beanClass) \n   {\n-    try \n+    ClassLoader beanClassLoader = beanClass.getClassLoader();\n+    BeanInfo beanInfo;\n+\n+    beanInfo = getBeanInfo(beanClassLoader, beanClass.getName() + \"BeanInfo\");\n+    if (beanInfo == null)\n       {\n-      try \n-\t{\n-\t  return (BeanInfo)Class.forName(beanClass.getName()+\"BeanInfo\").newInstance();\n-\t} \n-      catch(ClassNotFoundException E) \n-\t{\n-\t}\n-      String newName = ClassHelper.getTruncatedClassName(beanClass) + \"BeanInfo\";\n-      for(int i=0;i<Introspector.beanInfoSearchPath.length;i++) \n-\t{\n-\t  try \n-\t    {\n-\t      if(Introspector.beanInfoSearchPath[i].equals(\"\")) \n-\t\t{\n-\t\t  return (BeanInfo)Class.forName(newName).newInstance();\n-\t\t} \n-\t      else \n-\t\t{\n-\t\t  return (BeanInfo)Class.forName(Introspector.beanInfoSearchPath[i] + \".\" + newName).newInstance();\n-\t\t}\n-\t    } \n-\t  catch(ClassNotFoundException E) \n-\t    {\n-\t    }\n-\t}\n-      } \n-    catch(IllegalAccessException E) \n+\tString newName;\n+\tnewName = ClassHelper.getTruncatedClassName(beanClass) + \"BeanInfo\";\n+\n+\tfor(int i = 0; i < Introspector.beanInfoSearchPath.length; i++) \n+\t  {\n+\t    if (Introspector.beanInfoSearchPath[i].equals(\"\")) \n+\t      beanInfo = getBeanInfo(beanClassLoader, newName);\n+\t    else \n+\t      beanInfo = getBeanInfo(beanClassLoader,\n+\t\t\t\t     Introspector.beanInfoSearchPath[i] + \".\"\n+\t\t\t\t     + newName);\n+\n+\t    if (beanInfo != null)\n+\t      return beanInfo;\n+\t  } \n+      }\n+\n+    return beanInfo;\n+  }\n+\n+  /**\n+   * Returns an instance of the given class name when it can be loaded\n+   * through the given class loader, or null otherwise.\n+   */\n+  private static BeanInfo getBeanInfo(ClassLoader cl, String infoName)\n+  {\n+    try\n       {\n-      } \n-    catch(InstantiationException E) \n+\treturn (BeanInfo) Class.forName(infoName, true, cl).newInstance();\n+      }\n+    catch (ClassNotFoundException cnfe)\n       {\n+\treturn null;\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\treturn null;\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\treturn null;\n       }\n-    return null;\n   }\n+  \n }"}]}