{"sha": "69597e2f5d15e801cc4911e749a10b718c08fe9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1OTdlMmY1ZDE1ZTgwMWNjNDkxMWU3NDlhMTBiNzE4YzA4ZmU5ZA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-12-21T19:09:42Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2018-12-21T19:09:42Z"}, "message": "re PR fortran/87881 (gfortran.dg/inquiry_type_ref_(1.f08|3.f90) fail on darwin)\n\n2018-12-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87881\n\t* expr.c (find_inquiry_ref): Loop through the inquiry refs in\n\tcase there are two of them.\n\t(simplify_ref_chain): Return true after a successful call to\n\tfind_inquiry_ref.\n\n2018-12-21  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/87881\n\t* gfortran.dg/inquiry_part_ref_4.f90: New test.\n\nFrom-SVN: r267337", "tree": {"sha": "29fd384cdaa022660e4d7fb17905518dce3d8dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29fd384cdaa022660e4d7fb17905518dce3d8dc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69597e2f5d15e801cc4911e749a10b718c08fe9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69597e2f5d15e801cc4911e749a10b718c08fe9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69597e2f5d15e801cc4911e749a10b718c08fe9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69597e2f5d15e801cc4911e749a10b718c08fe9d/comments", "author": null, "committer": null, "parents": [{"sha": "2f8df14d379566091aed5fe278c5ee2d30490b51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f8df14d379566091aed5fe278c5ee2d30490b51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f8df14d379566091aed5fe278c5ee2d30490b51"}], "stats": {"total": 113, "additions": 73, "deletions": 40}, "files": [{"sha": "0ea79f3215e2a3385dfc8d4aa6325568e1ab4048", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=69597e2f5d15e801cc4911e749a10b718c08fe9d", "patch": "@@ -1,3 +1,11 @@\n+2018-12-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87881\n+\t* expr.c (find_inquiry_ref): Loop through the inquiry refs in\n+\tcase there are two of them.\n+\t(simplify_ref_chain): Return true after a successful call to\n+\tfind_inquiry_ref.\n+\n 2018-12-19  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/87992\n@@ -125,7 +133,7 @@\n 2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88357\n-\t* class.c (insert_component_ref): Check for NULL pointer and \n+\t* class.c (insert_component_ref): Check for NULL pointer and\n \tprevious error message issued.\n \t* parse.c (parse_associate): Check for NULL pointer.\n \t* resolve.c (resolve_assoc_var): Check for NULL pointer.\n@@ -2848,7 +2856,7 @@ notice and this notice are preserved.\n 2018-12-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/88357\n-\t* class.c (insert_component_ref): Check for NULL pointer and \n+\t* class.c (insert_component_ref): Check for NULL pointer and\n \tprevious error message issued.\n \t* parse.c (parse_associate): Check for NULL pointer.\n \t* resolve.c (resolve_assoc_var): Check for NULL pointer."}, {"sha": "f4880a4b8aeb711eea2799f10049faf01123b841", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 43, "deletions": 38, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=69597e2f5d15e801cc4911e749a10b718c08fe9d", "patch": "@@ -1730,56 +1730,61 @@ find_inquiry_ref (gfc_expr *p, gfc_expr **newp)\n \n   gfc_resolve_expr (tmp);\n \n-  switch (inquiry->u.i)\n+  /* In principle there can be more than one inquiry reference.  */\n+  for (; inquiry; inquiry = inquiry->next)\n     {\n-    case INQUIRY_LEN:\n-      if (tmp->ts.type != BT_CHARACTER)\n-\tgoto cleanup;\n+      switch (inquiry->u.i)\n+\t{\n+\tcase INQUIRY_LEN:\n+\t  if (tmp->ts.type != BT_CHARACTER)\n+\t    goto cleanup;\n \n-      if (!gfc_notify_std (GFC_STD_F2003, \"LEN part_ref at %C\"))\n-\tgoto cleanup;\n+\t  if (!gfc_notify_std (GFC_STD_F2003, \"LEN part_ref at %C\"))\n+\t    goto cleanup;\n \n-      if (!tmp->ts.u.cl->length\n-\t  || tmp->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n-\tgoto cleanup;\n+\t  if (!tmp->ts.u.cl->length\n+\t      || tmp->ts.u.cl->length->expr_type != EXPR_CONSTANT)\n+\t    goto cleanup;\n \n-      *newp = gfc_copy_expr (tmp->ts.u.cl->length);\n-      break;\n+\t  *newp = gfc_copy_expr (tmp->ts.u.cl->length);\n+\t  break;\n \n-    case INQUIRY_KIND:\n-      if (tmp->ts.type == BT_DERIVED || tmp->ts.type == BT_CLASS)\n-\tgoto cleanup;\n+\tcase INQUIRY_KIND:\n+\t  if (tmp->ts.type == BT_DERIVED || tmp->ts.type == BT_CLASS)\n+\t    goto cleanup;\n \n-      if (!gfc_notify_std (GFC_STD_F2003, \"KIND part_ref at %C\"))\n-\tgoto cleanup;\n+\t  if (!gfc_notify_std (GFC_STD_F2003, \"KIND part_ref at %C\"))\n+\t    goto cleanup;\n \n-      *newp = gfc_get_int_expr (gfc_default_integer_kind,\n-\t\t\t\tNULL, tmp->ts.kind);\n-      break;\n+\t  *newp = gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t\t    NULL, tmp->ts.kind);\n+\t  break;\n \n-    case INQUIRY_RE:\n-      if (tmp->ts.type != BT_COMPLEX || tmp->expr_type != EXPR_CONSTANT)\n-\tgoto cleanup;\n+\tcase INQUIRY_RE:\n+\t  if (tmp->ts.type != BT_COMPLEX || tmp->expr_type != EXPR_CONSTANT)\n+\t    goto cleanup;\n \n-      if (!gfc_notify_std (GFC_STD_F2008, \"RE part_ref at %C\"))\n-\tgoto cleanup;\n+\t  if (!gfc_notify_std (GFC_STD_F2008, \"RE part_ref at %C\"))\n+\t    goto cleanup;\n \n-      *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n-      mpfr_set ((*newp)->value.real,\n-\t\tmpc_realref (p->value.complex), GFC_RND_MODE);\n-      break;\n+\t  *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n+\t  mpfr_set ((*newp)->value.real,\n+\t\t    mpc_realref (p->value.complex), GFC_RND_MODE);\n+\t  break;\n \n-    case INQUIRY_IM:\n-      if (tmp->ts.type != BT_COMPLEX || tmp->expr_type != EXPR_CONSTANT)\n-\tgoto cleanup;\n+\tcase INQUIRY_IM:\n+\t  if (tmp->ts.type != BT_COMPLEX || tmp->expr_type != EXPR_CONSTANT)\n+\t    goto cleanup;\n \n-      if (!gfc_notify_std (GFC_STD_F2008, \"IM part_ref at %C\"))\n-\tgoto cleanup;\n+\t  if (!gfc_notify_std (GFC_STD_F2008, \"IM part_ref at %C\"))\n+\t    goto cleanup;\n \n-      *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n-      mpfr_set ((*newp)->value.real,\n-\t\tmpc_imagref (p->value.complex), GFC_RND_MODE);\n-      break;\n+\t  *newp = gfc_get_constant_expr (BT_REAL, tmp->ts.kind, &tmp->where);\n+\t  mpfr_set ((*newp)->value.real,\n+\t\t    mpc_imagref (p->value.complex), GFC_RND_MODE);\n+\t  break;\n+\t}\n+      tmp = gfc_copy_expr (*newp);\n     }\n \n   if (!(*newp))\n@@ -1970,7 +1975,7 @@ simplify_ref_chain (gfc_ref *ref, int type, gfc_expr **p)\n \t  gfc_replace_expr (*p, newp);\n \t  gfc_free_ref_list ((*p)->ref);\n \t  (*p)->ref = NULL;\n-\t  break;\n+\t  return true;;\n \n \tdefault:\n \t  break;"}, {"sha": "687d7006badd72e39d08e2cd9a9ad04ff853d8af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=69597e2f5d15e801cc4911e749a10b718c08fe9d", "patch": "@@ -1,3 +1,8 @@\n+2018-12-21  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/87881\n+\t* gfortran.dg/inquiry_part_ref_4.f90: New test.\n+\n 2018-12-21  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* gcc.target/s390/vector/fp-signedint-convert-1.c: New test."}, {"sha": "f0ae5e558e2d9b3185a5634d323b419ee029bada", "filename": "gcc/testsuite/gfortran.dg/inquiry_type_ref_4.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69597e2f5d15e801cc4911e749a10b718c08fe9d/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finquiry_type_ref_4.f90?ref=69597e2f5d15e801cc4911e749a10b718c08fe9d", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Check the fix for PR87881.\n+!\n+  complex(8) :: zi = (0,-1_8)\n+  character(2) :: chr ='ab'\n+  if (zi%re%kind .ne. kind (real (zi))) stop 1\n+  if (chr%len%kind .ne. kind (len (chr))) stop 2\n+\n+! After simplification there should only be the delarations for 'zi' and 'chr'\n+\n+! { dg-final { scan-tree-dump-times \"zi\" 1 \"original\" } }\n+! { dg-final { scan-tree-dump-times \"chr\" 1 \"original\" } }\n+end"}]}