{"sha": "92d4550991de7e0970a38939422b31e9dc07dd11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTJkNDU1MDk5MWRlN2UwOTcwYTM4OTM5NDIyYjMxZTlkYzA3ZGQxMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-21T00:16:54Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-21T00:16:54Z"}, "message": "Daily bump.", "tree": {"sha": "7f648bc125776d45104cafbc5f54cac5c33c910a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f648bc125776d45104cafbc5f54cac5c33c910a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92d4550991de7e0970a38939422b31e9dc07dd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d4550991de7e0970a38939422b31e9dc07dd11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d4550991de7e0970a38939422b31e9dc07dd11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d4550991de7e0970a38939422b31e9dc07dd11/comments", "author": null, "committer": null, "parents": [{"sha": "4eea703e7d87b1e0b116c93782cab82c9b1e842a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4eea703e7d87b1e0b116c93782cab82c9b1e842a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4eea703e7d87b1e0b116c93782cab82c9b1e842a"}], "stats": {"total": 376, "additions": 375, "deletions": 1}, "files": [{"sha": "46172cff9e987a27344579174b875f3bb94f7250", "filename": "ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,11 @@\n+2021-07-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* .dir-locals.el (bug-reference-url-format): Use https.\n+\n+2021-07-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* .dir-locals.el (c-mode): Change fill-column to 79.\n+\n 2021-07-15  Trevor Saunders  <tbsaunde@tbsaunde.org>\n \n \t* MAINTAINERS: Add myself to DCO section."}, {"sha": "4999204a344098759777fdecd875b7add99cc212", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,7 @@\n+2021-07-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* vimrc (textwidth): Change non-gitcommit length to 79.\n+\n 2021-07-02  Eugene Rozenfeld  <erozen@microsoft.com>\n \n \t* gen_autofdo_event.py: handle stepping, non-working PEBS"}, {"sha": "5755379e0bf291af88dbd1ecc3b0e3fef96f828d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 248, "deletions": 0, "changes": 248, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,251 @@\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101397\n+\t* builtins.c (gimple_call_return_array): Add argument.  Correct\n+\toffsets for memchr, mempcpy, stpcpy, and stpncpy.\n+\t(compute_objsize_r): Adjust offset computation for argument returning\n+\tbuilt-ins.\n+\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101300\n+\t* tree-ssa-uninit.c (check_defs): Handle UBSAN built-ins.\n+\n+2021-07-20  Jeff Law  <jlaw@localhost.localdomain>\n+\n+\t* function.c (assign_parm_setup_block): Use adjust_address instead\n+\tof change_address to preserve MEM_EXPR and friends.\n+\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\t* cfgloop.h (single_likely_exit): Adjust by-value argument to\n+\tby-const-reference.\n+\t* cfgloopanal.c (single_likely_exit): Same.\n+\t* cgraph.h (struct cgraph_node): Same.\n+\t* cgraphclones.c (cgraph_node::create_virtual_clone): Same.\n+\t* genautomata.c (merge_states): Same.\n+\t* genextract.c (VEC_char_to_string): Same.\n+\t* genmatch.c (dt_node::gen_kids_1): Same.\n+\t(walk_captures): Adjust by-value argument to by-reference.\n+\t* gimple-ssa-store-merging.c (check_no_overlap): Adjust by-value argument\n+\tto by-const-reference.\n+\t* gimple.c (gimple_build_call_vec): Same.\n+\t(gimple_build_call_internal_vec): Same.\n+\t(gimple_build_switch): Same.\n+\t(sort_case_labels): Same.\n+\t(preprocess_case_label_vec_for_gimple): Adjust by-value argument to\n+\tby-reference.\n+\t* gimple.h (gimple_build_call_vec): Adjust by-value argument to\n+\tby-const-reference.\n+\t(gimple_build_call_internal_vec): Same.\n+\t(gimple_build_switch): Same.\n+\t(sort_case_labels): Same.\n+\t(preprocess_case_label_vec_for_gimple): Adjust by-value argument to\n+\tby-reference.\n+\t* haifa-sched.c (calc_priorities): Adjust by-value argument to\n+\tby-const-reference.\n+\t(sched_init_luids): Same.\n+\t(haifa_init_h_i_d): Same.\n+\t* ipa-cp.c (ipa_get_indirect_edge_target_1): Same.\n+\t(adjust_callers_for_value_intersection): Adjust by-value argument to\n+\tby-reference.\n+\t(find_more_scalar_values_for_callers_subset): Adjust by-value argument to\n+\tby-const-reference.\n+\t(find_more_contexts_for_caller_subset): Same.\n+\t(find_aggregate_values_for_callers_subset): Same.\n+\t(copy_useful_known_contexts): Same.\n+\t* ipa-fnsummary.c (remap_edge_summaries): Same.\n+\t(remap_freqcounting_predicate): Same.\n+\t* ipa-inline.c (add_new_edges_to_heap): Adjust by-value argument to\n+\tby-reference.\n+\t* ipa-predicate.c (predicate::remap_after_inlining): Adjust by-value argument\n+\tto by-const-reference.\n+\t* ipa-predicate.h (predicate::remap_after_inlining): Same.\n+\t* ipa-prop.c (ipa_find_agg_cst_for_param): Same.\n+\t* ipa-prop.h (ipa_find_agg_cst_for_param): Same.\n+\t* ira-build.c (ira_loop_tree_body_rev_postorder): Same.\n+\t* read-rtl.c (add_overload_instance): Same.\n+\t* rtl.h (native_decode_rtx): Same.\n+\t(native_decode_vector_rtx): Same.\n+\t* sched-int.h (sched_init_luids): Same.\n+\t(haifa_init_h_i_d): Same.\n+\t* simplify-rtx.c (native_decode_vector_rtx): Same.\n+\t(native_decode_rtx): Same.\n+\t* tree-call-cdce.c (gen_shrink_wrap_conditions): Same.\n+\t(shrink_wrap_one_built_in_call_with_conds): Same.\n+\t(shrink_wrap_conditional_dead_built_in_calls): Same.\n+\t* tree-data-ref.c (create_runtime_alias_checks): Same.\n+\t(compute_all_dependences): Same.\n+\t* tree-data-ref.h (compute_all_dependences): Same.\n+\t(create_runtime_alias_checks): Same.\n+\t(index_in_loop_nest): Same.\n+\t* tree-if-conv.c (mask_exists): Same.\n+\t* tree-loop-distribution.c (class loop_distribution): Same.\n+\t(loop_distribution::create_rdg_vertices): Same.\n+\t(dump_rdg_partitions): Same.\n+\t(debug_rdg_partitions): Same.\n+\t(partition_contains_all_rw): Same.\n+\t(loop_distribution::distribute_loop): Same.\n+\t* tree-parloops.c (oacc_entry_exit_ok_1): Same.\n+\t(oacc_entry_exit_single_gang): Same.\n+\t* tree-ssa-loop-im.c (hoist_memory_references): Same.\n+\t(loop_suitable_for_sm): Same.\n+\t* tree-ssa-loop-niter.c (bound_index): Same.\n+\t* tree-ssa-reassoc.c (update_ops): Same.\n+\t(swap_ops_for_binary_stmt): Same.\n+\t(rewrite_expr_tree): Same.\n+\t(rewrite_expr_tree_parallel): Same.\n+\t* tree-ssa-sccvn.c (ao_ref_init_from_vn_reference): Same.\n+\t* tree-ssa-sccvn.h (ao_ref_init_from_vn_reference): Same.\n+\t* tree-ssa-structalias.c (process_all_all_constraints): Same.\n+\t(make_constraints_to): Same.\n+\t(handle_lhs_call): Same.\n+\t(find_func_aliases_for_builtin_call): Same.\n+\t(sort_fieldstack): Same.\n+\t(check_for_overlaps): Same.\n+\t* tree-vect-loop-manip.c (vect_create_cond_for_align_checks): Same.\n+\t(vect_create_cond_for_unequal_addrs): Same.\n+\t(vect_create_cond_for_lower_bounds): Same.\n+\t(vect_create_cond_for_alias_checks): Same.\n+\t* tree-vect-slp-patterns.c (vect_validate_multiplication): Same.\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Same.\n+\t(vect_make_slp_decision): Same.\n+\t(vect_slp_bbs): Same.\n+\t(duplicate_and_interleave): Same.\n+\t(vect_transform_slp_perm_load): Same.\n+\t(vect_schedule_slp): Same.\n+\t* tree-vectorizer.h (vect_transform_slp_perm_load): Same.\n+\t(vect_schedule_slp): Same.\n+\t(duplicate_and_interleave): Same.\n+\t* tree.c (build_vector_from_ctor): Same.\n+\t(build_vector): Same.\n+\t(check_vector_cst): Same.\n+\t(check_vector_cst_duplicate): Same.\n+\t(check_vector_cst_fill): Same.\n+\t(check_vector_cst_stepped): Same.\n+\t* tree.h (build_vector_from_ctor): Same.\n+\n+2021-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101384\n+\t* config/rs6000/rs6000-protos.h (easy_altivec_constant): Change return\n+\ttype from bool to int.\n+\t* config/rs6000/rs6000.c (vspltis_constant): Fix up handling the\n+\tEASY_VECTOR_MSB case if either step or copies is not 1.\n+\t(vspltis_shifted): Fix comment typo.\n+\t(easy_altivec_constant): Change return type from bool to int, instead\n+\tof returning true return byte size of the element mode that should be\n+\tused to synthetize the constant.\n+\t* config/rs6000/predicates.md (easy_vector_constant_msb): Require\n+\tthat vspltis_shifted is 0, handle the case where easy_altivec_constant\n+\tassumes using different vector mode from CONST_VECTOR's mode.\n+\t* config/rs6000/altivec.md (easy_vector_constant_msb splitter): Use\n+\teasy_altivec_constant to determine mode in which -1 >> -1 should be\n+\tperformed, use rs6000_expand_vector_init instead of gen_vec_initv4sisi.\n+\n+2021-07-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/101473\n+\t* dwarf2out.h (dwarf_file_data): Add key member.\n+\t* dwarf2out.c (dwarf_file_hasher::equal): Compare key.\n+\t(dwarf_file_hasher::hash): Hash key.\n+\t(lookup_filename): Remap the filename and store it in the\n+\tfilename member of dwarf_file_data when creating a new\n+\tdwarf_file_data.\n+\t(file_name_acquire): Do not remap the filename again.\n+\t(maybe_emit_file): Likewise.\n+\n+2021-07-20  Jonathan Wright  <jonathan.wright@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def: Use two variant\n+\tgenerators for all TBL/TBX intrinsics and rename to\n+\tconsistent forms: qtbl[1234] or qtbx[1234].\n+\t* config/aarch64/aarch64-simd.md (aarch64_tbl1<mode>):\n+\tRename to...\n+\t(aarch64_qtbl1<mode>): This.\n+\t(aarch64_tbx1<mode>): Rename to...\n+\t(aarch64_qtbx1<mode>): This.\n+\t(aarch64_tbl2v16qi): Delete.\n+\t(aarch64_tbl3<mode>): Rename to...\n+\t(aarch64_qtbl2<mode>): This.\n+\t(aarch64_tbx4<mode>): Rename to...\n+\t(aarch64_qtbx2<mode>): This.\n+\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm_1): Use\n+\trenamed qtbl1 and qtbl2 RTL patterns.\n+\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use renamed qtbl1\n+\tRTL pattern.\n+\t(vqtbl1_s8): Likewise.\n+\t(vqtbl1_u8): Likewise.\n+\t(vqtbl1q_p8): Likewise.\n+\t(vqtbl1q_s8): Likewise.\n+\t(vqtbl1q_u8): Likewise.\n+\t(vqtbx1_s8): Use renamed qtbx1 RTL pattern.\n+\t(vqtbx1_u8): Likewise.\n+\t(vqtbx1_p8): Likewise.\n+\t(vqtbx1q_s8): Likewise.\n+\t(vqtbx1q_u8): Likewise.\n+\t(vqtbx1q_p8): Likewise.\n+\t(vtbl1_s8): Use renamed qtbl1 RTL pattern.\n+\t(vtbl1_u8): Likewise.\n+\t(vtbl1_p8): Likewise.\n+\t(vtbl2_s8): Likewise\n+\t(vtbl2_u8): Likewise.\n+\t(vtbl2_p8): Likewise.\n+\t(vtbl3_s8): Use renamed qtbl2 RTL pattern.\n+\t(vtbl3_u8): Likewise.\n+\t(vtbl3_p8): Likewise.\n+\t(vtbl4_s8): Likewise.\n+\t(vtbl4_u8): Likewise.\n+\t(vtbl4_p8): Likewise.\n+\t(vtbx2_s8): Use renamed qtbx2 RTL pattern.\n+\t(vtbx2_u8): Likewise.\n+\t(vtbx2_p8): Likewise.\n+\t(vqtbl2_s8): Use renamed qtbl2 RTL pattern.\n+\t(vqtbl2_u8): Likewise.\n+\t(vqtbl2_p8): Likewise.\n+\t(vqtbl2q_s8): Likewise.\n+\t(vqtbl2q_u8): Likewise.\n+\t(vqtbl2q_p8): Likewise.\n+\t(vqtbx2_s8): Use renamed qtbx2 RTL pattern.\n+\t(vqtbx2_u8): Likewise.\n+\t(vqtbx2_p8): Likewise.\n+\t(vqtbx2q_s8): Likewise.\n+\t(vqtbx2q_u8): Likewise.\n+\t(vqtbx2q_p8): Likewise.\n+\t(vtbx4_s8): Likewise.\n+\t(vtbx4_u8): Likewise.\n+\t(vtbx4_p8): Likewise.\n+\n+2021-07-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100182\n+\t* config/i386/sync.md (define_peephole2 atomic_storedi_fpu):\n+\tRemove.\n+\t(define_peephole2 atomic_loaddi_fpu): Ditto.\n+\n+2021-07-20  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\t* config.gcc (riscv*-*-*): Detect which python is available.\n+\n+2021-07-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/vsx.md (mulhs_<mode>): Rename to...\n+\t(smul<mode>3_highpart): ... this.\n+\t(mulhu_<mode>): Rename to...\n+\t(umul<mode>3_highpart): ... this.\n+\t* config/rs6000/rs6000-builtin.def (MULHS_V2DI, MULHS_V4SI,\n+\tMULHU_V2DI, MULHU_V4SI): Adjust.\n+\n+2021-07-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/100696\n+\t* internal-fn.c (first_commutative_argument): Add info for IFN_MULH.\n+\t* internal-fn.def (IFN_MULH): New internal function.\n+\t* tree-vect-patterns.c (vect_recog_mulhs_pattern): Add support to\n+\trecog normal multiply highpart as IFN_MULH.\n+\t* config/i386/i386.c (ix86_add_stmt_cost): Adjust for combined\n+\tfunction CFN_MULH.\n+\n 2021-07-19  Indu Bhagat  <indu.bhagat@oracle.com>\n \n \t* config/elfos.h (CTF_DEBUGGING_INFO): New definition."}, {"sha": "4bc9d90e5df1996beae2734a4d16df40469ce8da", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1 +1 @@\n-20210720\n+20210721"}, {"sha": "87d658afb1b4a516384b2ce8efd440752e937882", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,9 @@\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-common.c (c_build_shufflevector): Adjust by-value argument to\n+\tby-const-reference.\n+\t* c-common.h (c_build_shufflevector): Same.\n+\n 2021-07-16  Andrew Pinski  <apinski@marvell.com>\n \n \tPR c/101453"}, {"sha": "9cd1dd65ba5a2a752f400f95c054ed18d5c24e6d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,9 @@\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-tree.h (c_build_function_call_vec): Adjust by-value argument to\n+\tby-const-reference.\n+\t* c-typeck.c (c_build_function_call_vec): Same.\n+\n 2021-07-15  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/101289"}, {"sha": "2a1f24b68d2f83306026705585fcba67b3a93128", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,57 @@\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101397\n+\t* gcc.dg/Warray-bounds-80.c: New test.\n+\t* gcc.dg/Warray-bounds-81.c: New test.\n+\t* gcc.dg/Warray-bounds-82.c: New test.\n+\t* gcc.dg/Warray-bounds-83.c: New test.\n+\t* gcc.dg/Warray-bounds-84.c: New test.\n+\t* gcc.dg/Wstringop-overflow-46.c: Adjust expected output.\n+\n+2021-07-20  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/101300\n+\t* gcc.dg/uninit-pr101300.c: New test.\n+\n+2021-07-20  Michael Meissner  <meissner@linux.ibm.com>\n+\n+\tPR testsuite/100167\n+\t* gcc.target/powerpc/fold-vec-div-longlong.c: Fix expected code\n+\tgeneration on power10.\n+\t* gcc.target/powerpc/fold-vec-mult-longlong.c: Likewise.\n+\n+2021-07-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/101384\n+\t* gcc.dg/pr101384.c: New test.\n+\t* gcc.target/powerpc/pr101384-1.c: New test.\n+\t* gcc.target/powerpc/pr101384-2.c: New test.\n+\n+2021-07-20  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR testsuite/101506\n+\t* gcc.target/aarch64/vect-vmaxv.c: Use an asm to hide the\n+\ttrue initial value of the reduction from the vectorizer.\n+\t* gcc.target/aarch64/vect-vaddv.c: Likewise.  Make the vector\n+\tloop operate on exactly LANES (rather than LANES-1) iterations.\n+\t* gcc.target/aarch64/vect-fmaxv-fminv.x: Likewise.\n+\n+2021-07-20  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/100182\n+\t* gcc.target/i386/pr71245-1.c: Remove.\n+\t* gcc.target/i386/pr71245-2.c: Ditto.\n+\n+2021-07-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.target/powerpc/mul-vectorize-3.c: New test.\n+\t* gcc.target/powerpc/mul-vectorize-4.c: New test.\n+\n+2021-07-20  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\tPR tree-optimization/100696\n+\t* gcc.target/i386/pr100637-3w.c: Adjust for mul_highpart recog.\n+\n 2021-07-19  Martin Sebor  <msebor@redhat.com>\n \n \t* gcc.target/powerpc/pr93658.c: Suppress valid warnings."}, {"sha": "d1daeb8898c86bf445e2d87facb1ed662efe210b", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,11 @@\n+2021-07-20  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/101484\n+\t* configure.tgt [amdgcn*-*-*] (XCFLAGS): Add\n+\t'-Wno-error=array-bounds'.\n+\t* config/gcn/team.c: Remove '-Werror=array-bounds' work-around.\n+\t* libgomp.h [__AMDGCN__]: Likewise.\n+\n 2021-07-19  Thomas Schwinge  <thomas@codesourcery.com>\n \n \tPR target/101484"}, {"sha": "f2256d94c6087d6e9bcf8676dd2df85088593117", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,12 @@\n+2021-07-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* asan/libtool-version: Bump version.\n+\t* tsan/libtool-version: Likewise.\n+\n+2021-07-20  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* LOCAL_PATCHES: Update to the corresponding revision.\n+\n 2021-05-21  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR sanitizer/100379"}, {"sha": "3267ea0e7613838a91f08e750191d649654ae084", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92d4550991de7e0970a38939422b31e9dc07dd11/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92d4550991de7e0970a38939422b31e9dc07dd11/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=92d4550991de7e0970a38939422b31e9dc07dd11", "patch": "@@ -1,3 +1,34 @@\n+2021-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101510\n+\t* src/c++17/fs_ops.cc (fs::create_directories): Use status\n+\tinstead of symlink_status.\n+\t* src/filesystem/ops.cc (fs::create_directories): Likewise.\n+\t* testsuite/27_io/filesystem/operations/create_directories.cc:\n+\t* testsuite/27_io/filesystem/operations/create_directory.cc: Do\n+\tnot test with symlinks on Windows.\n+\t* testsuite/experimental/filesystem/operations/create_directories.cc:\n+\t* testsuite/experimental/filesystem/operations/create_directory.cc:\n+\tDo not test with symlinks on Windows.\n+\n+2021-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/100863\n+\t* include/bits/hashtable.h (_Hashtable): Conditionally delete\n+\tdefault constructor by deriving from _Enable_special_members.\n+\t* testsuite/23_containers/unordered_map/cons/default.cc: New test.\n+\t* testsuite/23_containers/unordered_set/cons/default.cc: New test.\n+\n+2021-07-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/101510\n+\t* src/c++17/fs_ops.cc (create_dir): Adjust whitespace.\n+\t* testsuite/27_io/filesystem/operations/create_directory.cc:\n+\tTest creating directory with name of existing symlink to\n+\tdirectory.\n+\t* testsuite/experimental/filesystem/operations/create_directory.cc:\n+\tLikewise.\n+\n 2021-07-16  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/tuple (get<I>): Add deleted overload for bad"}]}