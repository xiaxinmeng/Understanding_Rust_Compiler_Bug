{"sha": "f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkwM2U3M2I4MGNjYjA3OGZiNGJiOGNmYjVjNGE0NGVhOTAxYTAwMg==", "commit": {"author": {"name": "Norbert Frese", "email": "postfach@nfrese.net", "date": "2004-03-20T20:30:56Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-20T20:30:56Z"}, "message": "RMIIncomingThread.java: New file.\n\n2004-03-20  Norbert Frese  <postfach@nfrese.net>\n\n\t* gnu/java/rmi/server/RMIIncomingThread.java: New file.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastConnection.java:\n\tCreate a new RMIObjectOuputStream/RMIObjectInputStream for every\n\trmi-message.\n\t(getObjectInputStream): Return object reference, throw IOException if null.\n\t(startObjectInputStream): Create new RMIObjectInputStream on top of 'din'.\n\t(getObjectOutputStream): Return object reference, throw IOException if null.\n\t(startObjectOutputStream): Create new RMIObjectOutputStream on top of 'dout'.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastConnectionManager.java:\n\t(UnicastConnectionManager): Throw RemoteException if port is not available.\n\t(getInstance): Throw RemoteException.\n\t(run): Lookup client host and attach it to new RMIIncomingThread for later retrieval.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastRef.java:\n\tStart a new RMIObjectInputStream/RMIObjectOutputStream for every rmi-message.\n\tCollect Exceptions which are returned by a rmi-call and fix void returns.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastRemoteCall.java:\n\tStart a new RMIObjectInputStream/RMIObjectOutputStream for every rmi-message.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastServer.java:\n\t(dispatch): Answer ping messages which are sent by other java implementions.\n\t(incomingMessageCall): Start a new RMIObjectInputStream/RMIObjectOutputStream\n\tfor every rmi-message and fix void return problems.\n\t* gcc/libjava/gnu/java/rmi/server/UnicastServerRef.java\n\t(UnicastServerRef): Throw RemoteException.\n\t(exportObject): Find the class up the class hierarchy which has a _Stub generated by rmic.\n\tIn some situations it is necessary to export a subclass of the class which has the _Stub.\n\tFor instance when the class with has the _Stub is abstract.\n\t(findStubSkelClass): New method which looks for the class which has the _Stub.\n\t(getClientHost): Implementated.\n\t* gcc/libjava/java/rmi/server/RemoteServer.java\n\t(getClientHost): Implementated.\n\t* gcc/libjava/Makefile.am (rmi_java_source_files):\n\tAdded gnu/java/rmi/server/RMIIncomingThread.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r79755", "tree": {"sha": "46489ab9dc40917ff9013121644478cc830a4a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46489ab9dc40917ff9013121644478cc830a4a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/comments", "author": {"login": "nfrese", "id": 16683582, "node_id": "MDQ6VXNlcjE2NjgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/16683582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nfrese", "html_url": "https://github.com/nfrese", "followers_url": "https://api.github.com/users/nfrese/followers", "following_url": "https://api.github.com/users/nfrese/following{/other_user}", "gists_url": "https://api.github.com/users/nfrese/gists{/gist_id}", "starred_url": "https://api.github.com/users/nfrese/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nfrese/subscriptions", "organizations_url": "https://api.github.com/users/nfrese/orgs", "repos_url": "https://api.github.com/users/nfrese/repos", "events_url": "https://api.github.com/users/nfrese/events{/privacy}", "received_events_url": "https://api.github.com/users/nfrese/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "079f946dad97b3def95bc6010e1a89f2058a69d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/079f946dad97b3def95bc6010e1a89f2058a69d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/079f946dad97b3def95bc6010e1a89f2058a69d5"}], "stats": {"total": 281, "additions": 247, "deletions": 34}, "files": [{"sha": "3fa4bcb6f06ef43371b51ea5ce8f9aaf49b8bcdd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -1,3 +1,39 @@\n+2004-03-20  Norbert Frese  <postfach@nfrese.net>\n+\n+\t* gnu/java/rmi/server/RMIIncomingThread.java: New file.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastConnection.java:\n+\tCreate a new RMIObjectOuputStream/RMIObjectInputStream for every\n+\trmi-message.\n+\t(getObjectInputStream): Return object reference, throw IOException if null.\n+\t(startObjectInputStream): Create new RMIObjectInputStream on top of 'din'.\n+\t(getObjectOutputStream): Return object reference, throw IOException if null.\n+\t(startObjectOutputStream): Create new RMIObjectOutputStream on top of 'dout'.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastConnectionManager.java:\n+\t(UnicastConnectionManager): Throw RemoteException if port is not available.\n+\t(getInstance): Throw RemoteException.\n+\t(run): Lookup client host and attach it to new RMIIncomingThread for later retrieval.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastRef.java:\n+\tStart a new RMIObjectInputStream/RMIObjectOutputStream for every rmi-message.\n+\tCollect Exceptions which are returned by a rmi-call and fix void returns.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastRemoteCall.java:\n+\tStart a new RMIObjectInputStream/RMIObjectOutputStream for every rmi-message.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastServer.java:\n+\t(dispatch): Answer ping messages which are sent by other java implementions.\n+\t(incomingMessageCall): Start a new RMIObjectInputStream/RMIObjectOutputStream\n+\tfor every rmi-message and fix void return problems.\n+\t* gcc/libjava/gnu/java/rmi/server/UnicastServerRef.java\n+\t(UnicastServerRef): Throw RemoteException.\n+\t(exportObject): Find the class up the class hierarchy which has a _Stub generated by rmic.\n+\tIn some situations it is necessary to export a subclass of the class which has the _Stub.\n+\tFor instance when the class with has the _Stub is abstract.\n+\t(findStubSkelClass): New method which looks for the class which has the _Stub.\n+\t(getClientHost): Implementated.\n+\t* gcc/libjava/java/rmi/server/RemoteServer.java\n+\t(getClientHost): Implementated.\n+\t* gcc/libjava/Makefile.am (rmi_java_source_files):\n+\tAdded gnu/java/rmi/server/RMIIncomingThread.java.\n+\t* Makefile.in: Regenerated.\n+\n 2004-03-20  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetAddress.java"}, {"sha": "ddec112c38c3359e71f98d2a7eb687aa2c22082e", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -1704,6 +1704,7 @@ gnu/java/rmi/server/ConnectionRunnerPool.java \\\n gnu/java/rmi/server/ProtocolConstants.java \\\n gnu/java/rmi/server/RMIDefaultSocketFactory.java \\\n gnu/java/rmi/server/RMIHashes.java \\\n+gnu/java/rmi/server/RMIIncomingThread.java \\\n gnu/java/rmi/server/RMIObjectInputStream.java \\\n gnu/java/rmi/server/RMIObjectOutputStream.java \\\n gnu/java/rmi/server/RMIVoidValue.java \\"}, {"sha": "c23863a1526b40250d8f066dbce3561cb32cc99b", "filename": "libjava/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -1387,6 +1387,7 @@ gnu/java/rmi/server/ConnectionRunnerPool.java \\\n gnu/java/rmi/server/ProtocolConstants.java \\\n gnu/java/rmi/server/RMIDefaultSocketFactory.java \\\n gnu/java/rmi/server/RMIHashes.java \\\n+gnu/java/rmi/server/RMIIncomingThread.java \\\n gnu/java/rmi/server/RMIObjectInputStream.java \\\n gnu/java/rmi/server/RMIObjectOutputStream.java \\\n gnu/java/rmi/server/RMIVoidValue.java \\\n@@ -3347,6 +3348,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/java/rmi/server/ProtocolConstants.P \\\n .deps/gnu/java/rmi/server/RMIDefaultSocketFactory.P \\\n .deps/gnu/java/rmi/server/RMIHashes.P \\\n+.deps/gnu/java/rmi/server/RMIIncomingThread.P \\\n .deps/gnu/java/rmi/server/RMIObjectInputStream.P \\\n .deps/gnu/java/rmi/server/RMIObjectOutputStream.P \\\n .deps/gnu/java/rmi/server/RMIVoidValue.P \\"}, {"sha": "2855c039e872b8e0e7cbae3b20b85648d3a20016", "filename": "libjava/gnu/java/rmi/server/RMIIncomingThread.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIIncomingThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIIncomingThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FRMIIncomingThread.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -0,0 +1,58 @@\n+/*\n+  Copyright (c) 1996, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.rmi.server; \n+\n+public class RMIIncomingThread extends Thread {  \n+\t\n+\tprivate String clientHost = null;\n+\t\n+\tpublic RMIIncomingThread(Runnable runnable, String s_clientHost) {\n+\t\tsuper(runnable);\n+\t\tclientHost = s_clientHost;\t\t\n+\t}\n+\t\n+\tpublic String toString() {\n+\t\treturn \"RMIIncoming from \" + clientHost + \" \" + super.toString();\n+\t}\n+\t\n+\tpublic String getClientHost() {\n+\t\treturn clientHost;\n+\t}\n+\t\n+\n+}"}, {"sha": "19e074a08602cbabaf4352287ff591782c7a5bf5", "filename": "libjava/gnu/java/rmi/server/UnicastConnection.java", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnection.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -104,6 +104,7 @@ void acceptConnection() throws IOException {\n void makeConnection(int protocol) throws IOException {\n     //Use BufferedXXXStream would be more efficient\n \tdin = new DataInputStream(new BufferedInputStream(sock.getInputStream()));\n+\n \tdout = new DataOutputStream(new BufferedOutputStream(sock.getOutputStream()));\n \n \t// Send header\n@@ -139,20 +140,48 @@ DataOutputStream getDataOutputStream() throws IOException {\n \treturn (dout);\n }\n \n+/*\n+*\n+* get ObjectInputStream for reading more objects\n+*\n+*/\n ObjectInputStream getObjectInputStream() throws IOException {\n \tif (oin == null) {\n-        oin = new RMIObjectInputStream(din);\n+\t\tthrow new IOException(\"no ObjectInputtream for reading more objects\");\n \t}\n \treturn (oin);\n }\n \n+/**\n+*\n+* starts ObjectInputStream.\n+*\n+*/\n+ObjectInputStream startObjectInputStream() throws IOException {\n+\treturn (oin = new RMIObjectInputStream(din));\n+}\n+\n+/**\n+*\n+* get ObjectOutputStream for sending more objects\n+*\n+*/\n ObjectOutputStream getObjectOutputStream() throws IOException {\n \tif (oout == null) {\n-\t\toout = new RMIObjectOutputStream(dout);\n-\t}\n+\t\tthrow new IOException(\"no ObjectOutputStream for sending more objects\");\n+\t} \n \treturn (oout);\n }\n \n+/**\n+*\n+* starts ObjectOutputStream.\n+*\n+*/\n+ObjectOutputStream startObjectOutputStream() throws IOException {\n+\treturn (oout = new RMIObjectOutputStream(dout));\n+} \n+\n void disconnect() {\n \ttry {\n \t    if(oout != null)\n@@ -200,4 +229,5 @@ public void run() {\n     }while(true);\n }\n \n+\n }"}, {"sha": "b7a505d20840ac8b765abe9083e057cbfe695cb9", "filename": "libjava/gnu/java/rmi/server/UnicastConnectionManager.java", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastConnectionManager.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -59,6 +59,7 @@\n import java.util.Iterator;\n \n import gnu.java.rmi.server.UnicastConnection;\n+import gnu.java.rmi.server.RMIIncomingThread;\n \n public class UnicastConnectionManager\n \timplements Runnable, ProtocolConstants {\n@@ -173,20 +174,16 @@ private UnicastConnectionManager(String host, int port, RMIClientSocketFactory c\n /**\n   * Server UnicastConnectionManager constructor\n   */\n-private UnicastConnectionManager(int port, RMIServerSocketFactory ssf) {\n+private UnicastConnectionManager(int port, RMIServerSocketFactory ssf) throws RemoteException {\n+\n \ttry {\n \t\tssock = ssf.createServerSocket(port);\n \t\tserverPort = ssock.getLocalPort();\n \t}\n-\tcatch (IOException _) {\n-\t\ttry {\n-\t\t\tssock = ssf.createServerSocket(0);\n-\t\t\tserverPort = ssock.getLocalPort();\n-\t\t}\n-\t\tcatch (IOException __) {\n-\t\t\tssock = null;\n-\t\t\tserverPort = 0;\n-\t\t}\n+\tcatch (IOException ioex) {\n+\t\tssock = null;\n+\t\tserverPort = 0;\n+\t\tthrow new java.rmi.server.ExportException(\"can not create Server Socket on port \" + port,ioex);\n \t}\n \tserverName = localhost;\n \tserverFactory = ssf;\n@@ -230,7 +227,7 @@ public static synchronized UnicastConnectionManager getInstance(String host, int\n  * Return a server connection manager which will accept connection on the\n  * given port.\n  */\n-public static synchronized UnicastConnectionManager getInstance(int port, RMIServerSocketFactory ssf) {\n+public static synchronized UnicastConnectionManager getInstance(int port, RMIServerSocketFactory ssf) throws RemoteException {\n //System.out.println(\"getInstance: \" + port + \",\" + ssf);\n \tif (ssf == null) {\n         ssf = defaultSocketFactory;\n@@ -376,9 +373,17 @@ public void run() {\n \t\ttry {\n //System.out.println(\"Waiting for connection on \" + serverPort);\n \t\t\tUnicastConnection conn = getServerConnection();\n+\n+\t\t\t// get address of remote host for the RMIIncomingThread object\n+\t\t\tString remoteHost = null;\n+\t\t\tif (conn.sock != null) {\n+\t\t\t\tremoteHost = conn.sock.getInetAddress().getHostAddress();\t\t\t\n+\t\t\t}\n+\n \t\t\t// use a thread pool to improve performance\n             //ConnectionRunnerPool.dispatchConnection(conn);\n-            (new Thread(conn)).start();\n+            (new RMIIncomingThread(conn, remoteHost)).start();\n+//\t   (new Thread(conn)).start();\n \t\t}\n \t\tcatch (Exception e) {\n             e.printStackTrace();"}, {"sha": "60a745e84f578cba9d30fc817ee0e10daf16b3bf", "filename": "libjava/gnu/java/rmi/server/UnicastRef.java", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRef.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -116,7 +116,7 @@ private Object invokeCommon(Remote obj, Method method, Object[] params, int opnu\n \t\tdout = conn.getDataOutputStream();\n \t\tdout.writeByte(MESSAGE_CALL);\n \n-\t\tout = conn.getObjectOutputStream();\n+\t\tout = conn.startObjectOutputStream(); // (re)start ObjectOutputStream\n \t\t\n \t\tobjid.write(out);\n \t\tout.writeInt(opnum);\n@@ -146,19 +146,22 @@ private Object invokeCommon(Remote obj, Method method, Object[] params, int opnu\n \t\t\tthrow new RemoteException(\"Call not acked:\" + returncode);\n \t\t}\n \n-\t\tin = conn.getObjectInputStream();\n+\t\tin = conn.startObjectInputStream(); // (re)start ObjectInputStream\n \t\treturncode = in.readUnsignedByte();\n \t\tack = UID.read(in);\n \n \t\tClass cls = method.getReturnType();\n-        if(cls == Void.TYPE){\n-            returnval = null;\n-            in.readObject();\n-        }else\n-            returnval = ((RMIObjectInputStream)in).readValue(cls);\n \n+\tif (returncode == RETURN_NACK) { \n+\t    returnval = in.readObject();  // get Exception\n+\n+        } else if(cls == Void.TYPE) { \n+            returnval = null;\n+            // in.readObject() // not required! returntype 'void' means no field is returned.\n+        } else {\n+            returnval = ((RMIObjectInputStream)in).readValue(cls); // get returnvalue\n \t}\n-\tcatch (IOException e3) {\n+\t} catch (IOException e3) {\n \t    //for debug: e3.printStackTrace();\n \t\tthrow new RemoteException(\"call return failed: \", e3);\n \t}\n@@ -174,7 +177,8 @@ private Object invokeCommon(Remote obj, Method method, Object[] params, int opnu\n \tmanager.discardConnection(conn);\n \n \tif (returncode != RETURN_ACK && returnval != null) {\n-\t\tthrow (Exception)returnval;\n+\t\tif (returncode == RETURN_NACK) throw (Exception)returnval;\n+\t\telse throw new RemoteException(\"unexpected returncode: \" + returncode);\n \t}\n \n \treturn (returnval);"}, {"sha": "76dd8e215b75d2194bffc34f5d2fc8e32d0a8288", "filename": "libjava/gnu/java/rmi/server/UnicastRemoteCall.java", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastRemoteCall.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -138,6 +138,21 @@ else if (data instanceof Long)\n       oout.flush();\n   }\n \n+  /**\n+  *\n+  * (re)starts ObjectInputStream\n+  *\n+  */ \n+  public ObjectInput startInputStream() throws IOException\n+  {\n+\tif (conn != null) {\n+\t\treturn (oin = conn.startObjectInputStream());\n+\t} else {\n+\t\treturn getInputStream(); // dummy Input Stream\n+\t}\n+\n+  }\n+\n   public ObjectInput getInputStream() throws IOException\n   {\n     if (conn != null)\n@@ -177,7 +192,7 @@ public void executeCall() throws Exception\n \tDataOutputStream dout = conn.getDataOutputStream();\n \tdout.write(MESSAGE_CALL);\n \t\n-\toout = conn.getObjectOutputStream();\n+\toout = conn.startObjectOutputStream(); // (re)start ObjectOutputStream\n \tobjid.write(oout);\n \toout.writeInt(opnum);\n \toout.writeLong(hash);\n@@ -194,7 +209,7 @@ public void executeCall() throws Exception\n         if (din.readByte() != MESSAGE_CALL_ACK)\n \t    throw new RemoteException(\"Call not acked\");\n \n-        oin = getInputStream();\n+        oin = startInputStream();\n         returncode = oin.readByte();\n         UID.read(oin);\n       }"}, {"sha": "ace43f0186166427b12a3845750deee17a145b57", "filename": "libjava/gnu/java/rmi/server/UnicastServer.java", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServer.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -99,13 +99,19 @@ public static void dispatch(UnicastConnection conn) throws Exception {\n \tcase MESSAGE_CALL:\n \t\tincomingMessageCall(conn);\n \t\tbreak;\n+\tcase MESSAGE_PING:  \n+\t\t// jdk sends a ping before each method call -> answer it!\n+\t\tDataOutputStream out = conn.getDataOutputStream();\n+\t\tout.writeByte(MESSAGE_PING_ACK);\n+\t\tout.flush();\n+\t\tbreak;\n \tdefault:\n \t\tthrow new Exception(\"bad method type\");\n \t}\n }\n \n private static void incomingMessageCall(UnicastConnection conn) throws IOException {\n-\tObjectInputStream in = conn.getObjectInputStream();\n+\tObjectInputStream in = conn.startObjectInputStream();  // (re)start ObjectInputStream\n \n \tObjID objid = ObjID.read(in);\n \tint method = in.readInt();\n@@ -138,13 +144,18 @@ private static void incomingMessageCall(UnicastConnection conn) throws IOExcepti\n \n \tconn.getDataOutputStream().writeByte(MESSAGE_CALL_ACK);\n \n-\tObjectOutputStream out = conn.getObjectOutputStream();\n+\tObjectOutputStream out = conn.startObjectOutputStream();   // (re)start ObjectOutputStream\n \n \tout.writeByte(returncode);\n \t(new UID()).write(out);\n+\n+\t//System.out.println(\"returnval=\" + returnval + \" returncls=\" + returncls);\n+\n \tif(returnval != null && returncls != null)\n \t    ((RMIObjectOutputStream)out).writeValue(returnval, returncls);\n-\telse if (!(returnval instanceof RMIVoidValue))\n+\n+\t// 1.1/1.2 void return type detection:\n+\telse if (!(returnval instanceof RMIVoidValue || returncls == Void.TYPE)) \n \t    out.writeObject(returnval);\n \n \tout.flush();"}, {"sha": "3e9529c598b3b56331863eb2a5d3a64114911b8f", "filename": "libjava/gnu/java/rmi/server/UnicastServerRef.java", "status": "modified", "additions": 47, "deletions": 4, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Frmi%2Fserver%2FUnicastServerRef.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -46,6 +46,7 @@\n import java.rmi.server.RemoteStub;\n import java.rmi.server.ObjID;\n import java.rmi.server.ServerRef;\n+import java.rmi.server.RemoteServer;\n import java.rmi.server.RemoteRef;\n import java.rmi.server.ServerNotActiveException;\n import java.rmi.server.RMIClientSocketFactory;\n@@ -85,7 +86,7 @@\n {\n }\n \n-public UnicastServerRef(ObjID id, int port, RMIServerSocketFactory ssf) {\n+public UnicastServerRef(ObjID id, int port, RMIServerSocketFactory ssf) throws RemoteException {\n \tsuper(id);\n \tmanager = UnicastConnectionManager.getInstance(port, ssf);\n }\n@@ -99,13 +100,21 @@ public RemoteStub exportObject(Remote obj) throws RemoteException {\n \n \t\t// Find and install the stub\n \t\tClass cls = obj.getClass();\n-\t\tstub = (RemoteStub)getHelperClass(cls, \"_Stub\");\n+\t\tClass expCls;\n+\t\ttry {\n+\t\t\t// where ist the _Stub? (check superclasses also)\n+\t\t\texpCls = findStubSkelClass(cls); \n+\t\t} catch (Exception ex) {\n+\t\t\tthrow new RemoteException(\"can not find stubs for class: \" + cls, ex);\n+\t\t}\n+\n+\t\tstub = (RemoteStub)getHelperClass(expCls, \"_Stub\");\n \t\tif (stub == null) {\n \t\t\tthrow new RemoteException(\"failed to export: \" + cls);\n \t\t}\n \n \t\t// Find and install the skeleton (if there is one)\n-\t\tskel = (Skeleton)getHelperClass(cls, \"_Skel\");\n+\t\tskel = (Skeleton)getHelperClass(expCls, \"_Skel\");\n \n \t\t// Build hash of methods which may be called.\n \t\tbuildMethodHash(obj.getClass(), true);\n@@ -135,6 +144,38 @@ public boolean unexportObject(Remote obj, boolean force) {\n     return UnicastServer.unexportObject(this, force);\n }\n \n+/**\n+*\n+*  The Subs/Skels might not there for the actual class, but maybe \n+*  for one of the superclasses.\n+*\n+*/\n+private Class findStubSkelClass(Class startCls) throws Exception {\n+\tClass cls = startCls;\n+\n+\twhile (true) {\n+\t\ttry {\n+\t\t\tString stubClassname = cls.getName() + \"_Stub\";\n+\t\t\tClassLoader cl = cls.getClassLoader();\n+\t\t\tClass scls = cl == null ? Class.forName(stubClassname)\n+\t\t\t\t\t\t: cl.loadClass(stubClassname);\n+\t\t\treturn cls; // found it\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tClass superCls = cls.getSuperclass();\n+\t\t\tif (superCls == null \n+\t\t\t\t|| superCls == java.rmi.server.UnicastRemoteObject.class) \n+\t\t\t{\n+\t\t\t\tthrow new Exception(\"Neither \" + startCls \n+\t\t\t\t\t+ \" nor one of their superclasses (like\" + cls + \")\" \n+\t\t\t\t\t+ \" has a _Stub\");\n+\t\t\t}\n+\t\t\tcls = superCls;\n+\t\t}\n+\t}\n+}\n+\n+\n+\n private Object getHelperClass(Class cls, String type) {\n \ttry {   \n \t    String classname = cls.getName();\n@@ -176,8 +217,10 @@ private Object getHelperClass(Class cls, String type) {\n \treturn (null);\n }\n \n+\n+\n public String getClientHost() throws ServerNotActiveException {\n-\tthrow new Error(\"Not implemented\");\n+\treturn RemoteServer.getClientHost();\n }\n \n private void buildMethodHash(Class cls, boolean build) {"}, {"sha": "85a2d955124978343ff9cc2f36e71cb8b75a0ba3", "filename": "libjava/java/rmi/server/RemoteServer.java", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f903e73b80ccb078fb4bb8cfb5c4a44ea901a002/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteServer.java?ref=f903e73b80ccb078fb4bb8cfb5c4a44ea901a002", "patch": "@@ -39,6 +39,7 @@\n \n import java.io.OutputStream;\n import java.io.PrintStream;\n+import gnu.java.rmi.server.RMIIncomingThread;\n \n public abstract class RemoteServer\n \textends RemoteObject {\n@@ -54,7 +55,14 @@ protected RemoteServer(RemoteRef ref) {\n }\n \n public static String getClientHost() throws ServerNotActiveException {\n-\tthrow new Error(\"Not implemented\");\n+\tThread currThread = Thread.currentThread();\n+\tif (currThread instanceof RMIIncomingThread) {\n+\t\tRMIIncomingThread incomingThread = (RMIIncomingThread) currThread;\n+\t\treturn incomingThread.getClientHost();\n+\t} else {\n+\t\tthrow new ServerNotActiveException(\n+\t\t\t\"Unknown client host - current thread not instance of 'RMIIncomingThread'\");\n+\t}\n }\n \n public static void setLog(OutputStream out) {"}]}