{"sha": "1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJlZjliMjM0MGU1NmJlZmZkMTJjNGZlODQ3NjE0ODdjYTVmMGNlOQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-10-30T14:22:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-10-30T14:22:01Z"}, "message": "re PR rtl-optimization/57100 (ICE: in pre_and_rev_post_order_compute, at cfganal.c:869 with -fdump-rtl-pro_and_epilogue-graph)\n\n2013-10-30  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/57100\n\t* basic-block.h (pre_and_rev_post_order_compute_fn): New function.\n\t* cfganal.c (pre_and_rev_post_order_compute_fn): New function\n\tas worker for ...\n\t(pre_and_rev_post_order_compute): ... which now wraps it.\n\t* graph.c (draw_cfg_nodes_no_loops): Use\n\tpre_and_rev_post_order_compute_fn to avoid ICEing and dependence\n\ton cfun.\n\nFrom-SVN: r204211", "tree": {"sha": "457fdcb67b1c577c541ea2d0bca4de7a96d2ed55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/457fdcb67b1c577c541ea2d0bca4de7a96d2ed55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "193ea7bc8c99e217072a11c733bb5f0d47eb72a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/193ea7bc8c99e217072a11c733bb5f0d47eb72a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/193ea7bc8c99e217072a11c733bb5f0d47eb72a0"}], "stats": {"total": 70, "additions": 51, "deletions": 19}, "files": [{"sha": "f560b26db3bad177de03503162c85b3c2e850af5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "patch": "@@ -1,3 +1,14 @@\n+2013-10-30  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/57100\n+\t* basic-block.h (pre_and_rev_post_order_compute_fn): New function.\n+\t* cfganal.c (pre_and_rev_post_order_compute_fn): New function\n+\tas worker for ...\n+\t(pre_and_rev_post_order_compute): ... which now wraps it.\n+\t* graph.c (draw_cfg_nodes_no_loops): Use\n+\tpre_and_rev_post_order_compute_fn to avoid ICEing and dependence\n+\ton cfun.\n+\n 2013-10-30  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc/config/sh/sh-mem.cc (sh_expand_cmpnstr): New function."}, {"sha": "c88a39de507f6550386f334ef2762b2f956597bc", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "patch": "@@ -795,6 +795,8 @@ extern void connect_infinite_loops_to_exit (void);\n extern int post_order_compute (int *, bool, bool);\n extern basic_block dfs_find_deadend (basic_block);\n extern int inverted_post_order_compute (int *);\n+extern int pre_and_rev_post_order_compute_fn (struct function *,\n+\t\t\t\t\t      int *, int *, bool);\n extern int pre_and_rev_post_order_compute (int *, int *, bool);\n extern int dfs_enumerate_from (basic_block, int,\n \t\t\t       bool (*)(const_basic_block, const void *),"}, {"sha": "b22161172271254be399bce55153f665931e0fc9", "filename": "gcc/cfganal.c", "status": "modified", "additions": 35, "deletions": 16, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fcfganal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fcfganal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfganal.c?ref=1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "patch": "@@ -878,20 +878,22 @@ inverted_post_order_compute (int *post_order)\n   return post_order_num;\n }\n \n-/* Compute the depth first search order and store in the array\n-  PRE_ORDER if nonzero, marking the nodes visited in VISITED.  If\n-  REV_POST_ORDER is nonzero, return the reverse completion number for each\n-  node.  Returns the number of nodes visited.  A depth first search\n-  tries to get as far away from the starting point as quickly as\n-  possible.\n+/* Compute the depth first search order of FN and store in the array\n+   PRE_ORDER if nonzero.  If REV_POST_ORDER is nonzero, return the\n+   reverse completion number for each node.  Returns the number of nodes\n+   visited.  A depth first search tries to get as far away from the starting\n+   point as quickly as possible.\n \n-  pre_order is a really a preorder numbering of the graph.\n-  rev_post_order is really a reverse postorder numbering of the graph.\n- */\n+   In case the function has unreachable blocks the number of nodes\n+   visited does not include them.\n+\n+   pre_order is a really a preorder numbering of the graph.\n+   rev_post_order is really a reverse postorder numbering of the graph.  */\n \n int\n-pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n-\t\t\t\tbool include_entry_exit)\n+pre_and_rev_post_order_compute_fn (struct function *fn,\n+\t\t\t\t   int *pre_order, int *rev_post_order,\n+\t\t\t\t   bool include_entry_exit)\n {\n   edge_iterator *stack;\n   int sp;\n@@ -921,7 +923,7 @@ pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n   bitmap_clear (visited);\n \n   /* Push the first edge on to the stack.  */\n-  stack[sp++] = ei_start (ENTRY_BLOCK_PTR->succs);\n+  stack[sp++] = ei_start (ENTRY_BLOCK_PTR_FOR_FUNCTION (fn)->succs);\n \n   while (sp)\n     {\n@@ -935,7 +937,8 @@ pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n       dest = ei_edge (ei)->dest;\n \n       /* Check if the edge destination has been visited yet.  */\n-      if (dest != EXIT_BLOCK_PTR && ! bitmap_bit_p (visited, dest->index))\n+      if (dest != EXIT_BLOCK_PTR_FOR_FUNCTION (fn)\n+\t  && ! bitmap_bit_p (visited, dest->index))\n \t{\n \t  /* Mark that we have visited the destination.  */\n \t  bitmap_set_bit (visited, dest->index);\n@@ -956,7 +959,8 @@ pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n \t}\n       else\n \t{\n-\t  if (ei_one_before_end_p (ei) && src != ENTRY_BLOCK_PTR\n+\t  if (ei_one_before_end_p (ei)\n+\t      && src != ENTRY_BLOCK_PTR_FOR_FUNCTION (fn)\n \t      && rev_post_order)\n \t    /* There are no more successors for the SRC node\n \t       so assign its reverse completion number.  */\n@@ -979,9 +983,24 @@ pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n       pre_order_num++;\n       if (rev_post_order)\n \trev_post_order[rev_post_order_num--] = EXIT_BLOCK;\n-      /* The number of nodes visited should be the number of blocks.  */\n-      gcc_assert (pre_order_num == n_basic_blocks);\n     }\n+\n+  return pre_order_num;\n+}\n+\n+/* Like pre_and_rev_post_order_compute_fn but operating on the\n+   current function and asserting that all nodes were visited.  */\n+\n+int\n+pre_and_rev_post_order_compute (int *pre_order, int *rev_post_order,\n+\t\t\t\tbool include_entry_exit)\n+{\n+  int pre_order_num\n+    = pre_and_rev_post_order_compute_fn (cfun, pre_order, rev_post_order,\n+\t\t\t\t\t include_entry_exit);\n+  if (include_entry_exit)\n+    /* The number of nodes visited should be the number of blocks.  */\n+    gcc_assert (pre_order_num == n_basic_blocks);\n   else\n     /* The number of nodes visited should be the number of blocks minus\n        the entry and exit blocks which are not visited here.  */"}, {"sha": "5c890e5956c5ceac0a48061cc8c5782f780282b2", "filename": "gcc/graph.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bef9b2340e56beffd12c4fe84761487ca5f0ce9/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=1bef9b2340e56beffd12c4fe84761487ca5f0ce9", "patch": "@@ -160,9 +160,9 @@ draw_cfg_nodes_no_loops (pretty_printer *pp, struct function *fun)\n   visited = sbitmap_alloc (last_basic_block);\n   bitmap_clear (visited);\n \n-  /* FIXME: pre_and_rev_post_order_compute only works if fun == cfun.  */\n-  n = pre_and_rev_post_order_compute (NULL, rpo, true);\n-  for (i = 0; i < n; i++)\n+  n = pre_and_rev_post_order_compute_fn (fun, NULL, rpo, true);\n+  for (i = n_basic_blocks_for_function (fun) - n;\n+       i < n_basic_blocks_for_function (fun); i++)\n     {\n       basic_block bb = BASIC_BLOCK (rpo[i]);\n       draw_cfg_node (pp, fun->funcdef_no, bb);"}]}