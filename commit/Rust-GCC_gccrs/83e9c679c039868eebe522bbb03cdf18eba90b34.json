{"sha": "83e9c679c039868eebe522bbb03cdf18eba90b34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODNlOWM2NzljMDM5ODY4ZWViZTUyMmJiYjAzY2RmMThlYmE5MGIzNA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-12T10:31:07Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-10-12T10:31:07Z"}, "message": "(gen_lowpart_common): Allow MODE_PARTIAL_INT where MODE_INT is\nallowed.\n\nFrom-SVN: r2407", "tree": {"sha": "dd41442db3b7b5e10606fc9bdade0dfe24591752", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd41442db3b7b5e10606fc9bdade0dfe24591752"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83e9c679c039868eebe522bbb03cdf18eba90b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e9c679c039868eebe522bbb03cdf18eba90b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83e9c679c039868eebe522bbb03cdf18eba90b34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83e9c679c039868eebe522bbb03cdf18eba90b34/comments", "author": null, "committer": null, "parents": [{"sha": "780ed3aef39fd57a827906fb90a23db89f8480e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780ed3aef39fd57a827906fb90a23db89f8480e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780ed3aef39fd57a827906fb90a23db89f8480e7"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "7e94419a335d56217a04cc8621f9b67b996aba6b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83e9c679c039868eebe522bbb03cdf18eba90b34/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83e9c679c039868eebe522bbb03cdf18eba90b34/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=83e9c679c039868eebe522bbb03cdf18eba90b34", "patch": "@@ -496,7 +496,8 @@ gen_lowpart_common (mode, x)\n \t    / UNITS_PER_WORD);\n \n   if ((GET_CODE (x) == ZERO_EXTEND || GET_CODE (x) == SIGN_EXTEND)\n-      && GET_MODE_CLASS (mode) == MODE_INT)\n+      && (GET_MODE_CLASS (mode) == MODE_INT\n+\t  || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT))\n     {\n       /* If we are getting the low-order part of something that has been\n \t sign- or zero-extended, we can either just use the object being\n@@ -544,7 +545,9 @@ gen_lowpart_common (mode, x)\n \n   /* If X is a CONST_INT or a CONST_DOUBLE, extract the appropriate bits\n      from the low-order part of the constant.  */\n-  else if (GET_MODE_CLASS (mode) == MODE_INT && GET_MODE (x) == VOIDmode\n+  else if ((GET_MODE_CLASS (mode) == MODE_INT\n+\t    || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n+\t   && GET_MODE (x) == VOIDmode\n \t   && (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE))\n     {\n       /* If MODE is twice the host word size, X is already the desired\n@@ -632,7 +635,8 @@ gen_lowpart_common (mode, x)\n   else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n \t     && HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n \t    || flag_pretend_float)\n-\t   && GET_MODE_CLASS (mode) == MODE_INT\n+\t   && (GET_MODE_CLASS (mode) == MODE_INT\n+\t       || GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n \t   && GET_CODE (x) == CONST_DOUBLE\n \t   && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n \t   && GET_MODE_BITSIZE (mode) == BITS_PER_WORD)\n@@ -646,7 +650,8 @@ gen_lowpart_common (mode, x)\n   else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n \t     && HOST_BITS_PER_WIDE_INT == BITS_PER_WORD)\n \t    || flag_pretend_float)\n-\t   && GET_MODE_CLASS (mode) == MODE_INT\n+\t   && (GET_MODE_CLASS (mode) == MODE_INT\n+\t       && GET_MODE_CLASS (mode) == MODE_PARTIAL_INT)\n \t   && GET_CODE (x) == CONST_DOUBLE\n \t   && GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT\n \t   && GET_MODE_BITSIZE (mode) == 2 * BITS_PER_WORD)"}]}