{"sha": "52786026fabb4b32e7232eafe1dfb78afba5443b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTI3ODYwMjZmYWJiNGIzMmU3MjMyZWFmZTFkZmI3OGFmYmE1NDQzYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T18:24:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-02T18:24:14Z"}, "message": "(synth_mult): Delay allocation of algorithm structures until they are needed.\n\n(synth_mult): Delay allocation of algorithm structures until they are\nneeded.  Reorder early-exit tests to avoid comparing value that is not\nyet set.\n\nFrom-SVN: r6464", "tree": {"sha": "de680a935cff8770c74f4c968a0c13a928e07f0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de680a935cff8770c74f4c968a0c13a928e07f0e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52786026fabb4b32e7232eafe1dfb78afba5443b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52786026fabb4b32e7232eafe1dfb78afba5443b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52786026fabb4b32e7232eafe1dfb78afba5443b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52786026fabb4b32e7232eafe1dfb78afba5443b/comments", "author": null, "committer": null, "parents": [{"sha": "09e3dd72329a140027254451c6af253b38689714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09e3dd72329a140027254451c6af253b38689714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09e3dd72329a140027254451c6af253b38689714"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "09e51adf23d9bc178b23133e521398188b70411c", "filename": "gcc/expmed.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52786026fabb4b32e7232eafe1dfb78afba5443b/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52786026fabb4b32e7232eafe1dfb78afba5443b/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=52786026fabb4b32e7232eafe1dfb78afba5443b", "patch": "@@ -1,6 +1,6 @@\n /* Medium-level subroutines: convert bit-field store and extract\n    and shifts, multiplies and divides to rtl instructions.\n-   Copyright (C) 1987, 1988, 1989, 1992, 1993 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -1851,10 +1851,7 @@ synth_mult (alg_out, t, cost_limit)\n      int cost_limit;\n {\n   int m;\n-  struct algorithm *best_alg\n-    = (struct algorithm *)alloca (sizeof (struct algorithm));\n-  struct algorithm *alg_in\n-    = (struct algorithm *)alloca (sizeof (struct algorithm));\n+  struct algorithm *alg_in, *best_alg;\n   unsigned int cost;\n   unsigned HOST_WIDE_INT q;\n \n@@ -1889,6 +1886,11 @@ synth_mult (alg_out, t, cost_limit)\n \t}\n     }\n \n+  /* We'll be needing a couple extra algorithm structures now.  */\n+\n+  alg_in = (struct algorithm *)alloca (sizeof (struct algorithm));\n+  best_alg = (struct algorithm *)alloca (sizeof (struct algorithm));\n+\n   /* If we have a group of zero bits at the low-order part of T, try\n      multiplying by the remaining bits and then doing a shift.  */\n \n@@ -2051,16 +2053,16 @@ synth_mult (alg_out, t, cost_limit)\n \t}\n     }\n \n-  /* If we are getting a too long sequence for `struct algorithm'\n-     to record, make this search fail.  */\n-  if (best_alg->ops == MAX_BITS_PER_WORD)\n-    return;\n-\n   /* If cost_limit has not decreased since we stored it in alg_out->cost,\n      we have not found any algorithm.  */\n   if (cost_limit == alg_out->cost)\n     return;\n \n+  /* If we are getting a too long sequence for `struct algorithm'\n+     to record, make this search fail.  */\n+  if (best_alg->ops == MAX_BITS_PER_WORD)\n+    return;\n+\n   /* Copy the algorithm from temporary space to the space at alg_out.\n      We avoid using structure assignment because the majority of\n      best_alg is normally undefined, and this is a critical function.  */"}]}