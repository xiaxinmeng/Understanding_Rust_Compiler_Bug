{"sha": "78c2855df612af45edb78426348296f43f2a8602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhjMjg1NWRmNjEyYWY0NWVkYjc4NDI2MzQ4Mjk2ZjQzZjJhODYwMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-05-14T15:25:01Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-05-14T15:25:01Z"}, "message": "Define std::__invoke_r for INVOKE<R>\n\n\t* include/bits/invoke.h (__invoke_r): Define new function implementing\n\tthe INVOKE<R> pseudo-function.\n\t* testsuite/20_util/function_objects/invoke/1.cc: Add more tests.\n\t* testsuite/20_util/function_objects/invoke/2.cc: New test.\n\nFrom-SVN: r271173", "tree": {"sha": "9ea7828eaefb76469113fbda0311e8f8bbc5b769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ea7828eaefb76469113fbda0311e8f8bbc5b769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78c2855df612af45edb78426348296f43f2a8602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c2855df612af45edb78426348296f43f2a8602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c2855df612af45edb78426348296f43f2a8602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c2855df612af45edb78426348296f43f2a8602/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac09ef2c611d3113665ec8c74e38b125217edb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac09ef2c611d3113665ec8c74e38b125217edb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac09ef2c611d3113665ec8c74e38b125217edb3"}], "stats": {"total": 148, "additions": 146, "deletions": 2}, "files": [{"sha": "8330ad1a3089def8edde93c6f5a0b30fd55335fc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78c2855df612af45edb78426348296f43f2a8602", "patch": "@@ -1,5 +1,10 @@\n 2019-05-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/invoke.h (__invoke_r): Define new function implementing\n+\tthe INVOKE<R> pseudo-function.\n+\t* testsuite/20_util/function_objects/invoke/1.cc: Add more tests.\n+\t* testsuite/20_util/function_objects/invoke/2.cc: New test.\n+\n \t* include/std/type_traits (__is_nt_convertible_helper): Define it\n \tunconditionally, not only for C++20.\n \t(__is_nothrow_convertible): Define internal trait for use in C++11."}, {"sha": "59e22da84d4dc0bf8c638c66b9c4b17dc3fd1658", "filename": "libstdc++-v3/include/bits/invoke.h", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Finvoke.h?ref=78c2855df612af45edb78426348296f43f2a8602", "patch": "@@ -96,6 +96,65 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t\tstd::forward<_Args>(__args)...);\n     }\n \n+#if __cplusplus >= 201703L\n+  // INVOKE<R>: Invoke a callable object and convert the result to R.\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>\n+    __invoke_r(_Callable&& __fn, _Args&&... __args)\n+    noexcept(is_nothrow_invocable_r_v<_Res, _Callable, _Args...>)\n+    {\n+      using __result = __invoke_result<_Callable, _Args...>;\n+      using __type = typename __result::type;\n+      using __tag = typename __result::__invoke_type;\n+      if constexpr (is_void_v<_Res>)\n+\tstd::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\n+\t\t\t\t\tstd::forward<_Args>(__args)...);\n+      else\n+\treturn std::__invoke_impl<__type>(__tag{},\n+\t\t\t\t\t  std::forward<_Callable>(__fn),\n+\t\t\t\t\t  std::forward<_Args>(__args)...);\n+    }\n+#else // C++11\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    using __can_invoke_as_void = __enable_if_t<\n+      __and_<is_void<_Res>, __is_invocable<_Callable, _Args...>>::value,\n+      _Res\n+    >;\n+\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    using __can_invoke_as_nonvoid = __enable_if_t<\n+      __and_<__not_<is_void<_Res>>,\n+\t     is_convertible<typename __invoke_result<_Callable, _Args...>::type,\n+\t\t\t    _Res>\n+      >::value,\n+      _Res\n+    >;\n+\n+  // INVOKE<R>: Invoke a callable object and convert the result to R.\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>\n+    __invoke_r(_Callable&& __fn, _Args&&... __args)\n+    {\n+      using __result = __invoke_result<_Callable, _Args...>;\n+      using __type = typename __result::type;\n+      using __tag = typename __result::__invoke_type;\n+      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\n+\t\t\t\t\tstd::forward<_Args>(__args)...);\n+    }\n+\n+  // INVOKE<R> when R is cv void\n+  template<typename _Res, typename _Callable, typename... _Args>\n+    constexpr __can_invoke_as_void<_Res, _Callable, _Args...>\n+    __invoke_r(_Callable&& __fn, _Args&&... __args)\n+    {\n+      using __result = __invoke_result<_Callable, _Args...>;\n+      using __type = typename __result::type;\n+      using __tag = typename __result::__invoke_type;\n+      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),\n+\t\t\t\t std::forward<_Args>(__args)...);\n+    }\n+#endif // C++11\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "9af7b294130bc48643a49630b7498d9388fd799d", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/1.cc", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F1.cc?ref=78c2855df612af45edb78426348296f43f2a8602", "patch": "@@ -24,7 +24,43 @@ struct abstract {\n   void operator()() noexcept;\n };\n \n-static_assert( noexcept(std::__invoke(std::declval<abstract>())), \"\" );\n+static_assert( noexcept(std::__invoke(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE\" );\n #if __cpp_lib_invoke\n-static_assert( noexcept(std::invoke(std::declval<abstract>())), \"\" );\n+// std::invoke is only defined since C++17.\n+static_assert( noexcept(std::invoke(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE\" );\n+\n+// The std::__invoke_r extension only has a noexcept-specifier for >= C++17.\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<abstract>())),\n+    \"It should be possible to use abstract types with INVOKE<R>\" );\n+#endif\n+\n+struct F {\n+  void operator()() &;\n+  void operator()() && noexcept;\n+  int operator()(int);\n+  double* operator()(int, int) noexcept;\n+};\n+struct D { D(void*); };\n+\n+static_assert( !noexcept(std::__invoke(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::__invoke(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::__invoke(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::__invoke(std::declval<F>(), 1, 2)), \"\" );\n+\n+#if __cpp_lib_invoke\n+static_assert( !noexcept(std::invoke(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::invoke(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::invoke(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::invoke(std::declval<F>(), 1, 2)), \"\" );\n+\n+static_assert( !noexcept(std::__invoke_r<void>(std::declval<F&>())), \"\" );\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<F>())), \"\" );\n+static_assert( !noexcept(std::__invoke_r<int>(std::declval<F>(), 1)), \"\" );\n+static_assert( !noexcept(std::__invoke_r<void>(std::declval<F>(), 1)), \"\" );\n+static_assert( !noexcept(std::__invoke_r<long>(std::declval<F>(), 1)), \"\" );\n+static_assert( noexcept(std::__invoke_r<void>(std::declval<F>(), 1, 2)), \"\" );\n+static_assert( noexcept(std::__invoke_r<void*>(std::declval<F>(), 1, 2)), \"\" );\n+static_assert( noexcept(std::__invoke_r<D>(std::declval<F>(), 1, 2)), \"\" );\n #endif"}, {"sha": "df239876004ae1192f11122d2091cddb576b1d3e", "filename": "libstdc++-v3/testsuite/20_util/function_objects/invoke/2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78c2855df612af45edb78426348296f43f2a8602/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction_objects%2Finvoke%2F2.cc?ref=78c2855df612af45edb78426348296f43f2a8602", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2019 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <functional>\n+#include <testsuite_hooks.h>\n+\n+constexpr int sq(int i) { return i * i; }\n+\n+template<typename Val, typename Expected>\n+bool chk(Val&& val, Expected&& exp)\n+{\n+  return std::is_same<Val, Expected>::value && val == exp;\n+}\n+\n+#define VERIFY_T(x,y) VERIFY(chk(x,y))\n+\n+void\n+test01()\n+{\n+  VERIFY_T( std::__invoke(sq, 2), 4 );\n+  VERIFY_T( std::__invoke_r<int>(sq, 3), 9 );\n+  VERIFY_T( std::__invoke_r<char>(sq, 4), '\\x10' );\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}