{"sha": "c9b236e5cafaea9d09ff8102140c72eb3d70e302", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliMjM2ZTVjYWZhZWE5ZDA5ZmY4MTAyMTQwYzcyZWIzZDcwZTMwMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T14:14:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-06-21T14:14:58Z"}, "message": "compiler: open code string slice expressions\n    \n    Currently a string slice expression is implemented with a runtime\n    call __go_string_slice. Change it to open code it, which is more\n    efficient, and allows the backend to further optimize it.\n    \n    Also omit the write barrier for length-only update (i.e.\n    s = s[:n]).\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/182540\n\nFrom-SVN: r272549", "tree": {"sha": "daa083891ba7e3c96f4ac7419562dc67146822a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/daa083891ba7e3c96f4ac7419562dc67146822a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9b236e5cafaea9d09ff8102140c72eb3d70e302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b236e5cafaea9d09ff8102140c72eb3d70e302", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9b236e5cafaea9d09ff8102140c72eb3d70e302", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9b236e5cafaea9d09ff8102140c72eb3d70e302/comments", "author": null, "committer": null, "parents": [{"sha": "050e182a757bdf227a7e2425f06f9e2fd4dff8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/050e182a757bdf227a7e2425f06f9e2fd4dff8cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/050e182a757bdf227a7e2425f06f9e2fd4dff8cb"}], "stats": {"total": 143, "additions": 80, "deletions": 63}, "files": [{"sha": "10104a78197c45e6d710291ed3cab24bf258fcbc", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -1,4 +1,4 @@\n-7822080a6e226b1e5872e2fcefac30f666f4cc1e\n+62e3a8cc0a862b0abd3d0b1ef6cf4b228992a137\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "a764d06509c2fecd5e68577e4e1d2793ff27a67c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 49, "deletions": 17, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -13082,11 +13082,6 @@ Bexpression*\n String_index_expression::do_get_backend(Translate_context* context)\n {\n   Location loc = this->location();\n-  Expression* string_arg = this->string_;\n-  if (this->string_->type()->points_to() != NULL)\n-    string_arg = Expression::make_dereference(this->string_,\n-                                              NIL_CHECK_NOT_NEEDED, loc);\n-\n   Expression* bad_index = Expression::check_bounds(this->start_, loc);\n \n   int code = (this->end_ == NULL\n@@ -13110,23 +13105,27 @@ String_index_expression::do_get_backend(Translate_context* context)\n       return context->backend()->error_expression();\n     }\n \n+  go_assert(this->string_->is_variable());\n+  go_assert(this->start_->is_variable());\n+\n   Expression* start = Expression::make_cast(int_type, this->start_, loc);\n   Bfunction* bfn = context->function()->func_value()->get_decl();\n \n+  Expression* length =\n+    Expression::make_string_info(this->string_, STRING_INFO_LENGTH, loc);\n+  Expression* bytes =\n+    Expression::make_string_info(this->string_, STRING_INFO_DATA, loc);\n+\n+  Bexpression* bstart = start->get_backend(context);\n+  Bexpression* ptr = bytes->get_backend(context);\n+\n   if (this->end_ == NULL)\n     {\n-      Expression* length =\n-          Expression::make_string_info(this->string_, STRING_INFO_LENGTH, loc);\n-\n       Expression* start_too_large =\n           Expression::make_binary(OPERATOR_GE, start, length, loc);\n       bad_index = Expression::make_binary(OPERATOR_OROR, start_too_large,\n                                           bad_index, loc);\n-      Expression* bytes =\n-\tExpression::make_string_info(this->string_, STRING_INFO_DATA, loc);\n \n-      Bexpression* bstart = start->get_backend(context);\n-      Bexpression* ptr = bytes->get_backend(context);\n       ptr = gogo->backend()->pointer_offset_expression(ptr, bstart, loc);\n       Btype* ubtype = Type::lookup_integer_type(\"uint8\")->get_backend(gogo);\n       Bexpression* index =\n@@ -13141,20 +13140,53 @@ String_index_expression::do_get_backend(Translate_context* context)\n \n   Expression* end = NULL;\n   if (this->end_->is_nil_expression())\n-    end = Expression::make_integer_sl(-1, int_type, loc);\n+    end = length;\n   else\n     {\n+      go_assert(this->end_->is_variable());\n       Expression* bounds_check = Expression::check_bounds(this->end_, loc);\n       bad_index =\n           Expression::make_binary(OPERATOR_OROR, bounds_check, bad_index, loc);\n       end = Expression::make_cast(int_type, this->end_, loc);\n+\n+      Expression* end_too_large =\n+        Expression::make_binary(OPERATOR_GT, end, length, loc);\n+      bad_index = Expression::make_binary(OPERATOR_OROR, end_too_large,\n+                                          bad_index, loc);\n     }\n+  Expression* start_too_large =\n+    Expression::make_binary(OPERATOR_GT, start->copy(), end->copy(), loc);\n+  bad_index = Expression::make_binary(OPERATOR_OROR, start_too_large,\n+                                      bad_index, loc);\n+\n+  end = end->copy();\n+  Bexpression* bend = end->get_backend(context);\n+  Bexpression* new_length =\n+    gogo->backend()->binary_expression(OPERATOR_MINUS, bend, bstart, loc);\n \n-  Expression* strslice = Runtime::make_call(Runtime::STRING_SLICE, loc, 3,\n-                                            string_arg, start, end);\n-  Bexpression* bstrslice = strslice->get_backend(context);\n+  // If the new length is zero, don't change pointer.  Otherwise we can\n+  // get a pointer to the next object in memory, keeping it live\n+  // unnecessarily.  When the length is zero, the actual pointer\n+  // value doesn't matter.\n+  Btype* int_btype = int_type->get_backend(gogo);\n+  Bexpression* zero =\n+    Expression::make_integer_ul(0, int_type, loc)->get_backend(context);\n+  Bexpression* cond =\n+    gogo->backend()->binary_expression(OPERATOR_EQEQ, new_length, zero,\n+                                       loc);\n+  Bexpression* offset =\n+    gogo->backend()->conditional_expression(bfn, int_btype, cond, zero,\n+                                            bstart, loc);\n+\n+  ptr = gogo->backend()->pointer_offset_expression(ptr, offset, loc);\n+\n+  Btype* str_btype = this->type()->get_backend(gogo);\n+  std::vector<Bexpression*> init;\n+  init.push_back(ptr);\n+  init.push_back(new_length);\n+  Bexpression* bstrslice =\n+    gogo->backend()->constructor_expression(str_btype, init, loc);\n \n-  Btype* str_btype = strslice->type()->get_backend(gogo);\n   Bexpression* index_error = bad_index->get_backend(context);\n   return gogo->backend()->conditional_expression(bfn, str_btype, index_error,\n \t\t\t\t\t\t crash, bstrslice, loc);"}, {"sha": "2c505a9743f61dd4f14c01f38be79f51d0eaea30", "filename": "gcc/go/gofrontend/expressions.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fexpressions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.h?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -3133,6 +3133,18 @@ class String_index_expression : public Expression\n   string() const\n   { return this->string_; }\n \n+  // Return the index of a simple index expression, or the start index\n+  // of a slice expression.\n+  Expression*\n+  start() const\n+  { return this->start_; }\n+\n+  // Return the end index of a slice expression.  This is NULL for a\n+  // simple index expression.\n+  Expression*\n+  end() const\n+  { return this->end_; }\n+\n  protected:\n   int\n   do_traverse(Traverse*);"}, {"sha": "ffc747bb575af0a758fa215c6923bd8985e5c927", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -45,10 +45,6 @@ DEF_GO_RUNTIME(EQSTRING, \"runtime.eqstring\", P2(STRING, STRING), R1(BOOL))\n // Compare two strings.\n DEF_GO_RUNTIME(CMPSTRING, \"runtime.cmpstring\", P2(STRING, STRING), R1(INT))\n \n-// Take a slice of a string.\n-DEF_GO_RUNTIME(STRING_SLICE, \"__go_string_slice\", P3(STRING, INT, INT),\n-\t       R1(STRING))\n-\n // Convert an integer to a string.\n DEF_GO_RUNTIME(INTSTRING, \"runtime.intstring\", P2(POINTER, INT64), R1(STRING))\n "}, {"sha": "e8380be0bb00fc69ad6f6ac15b62d0ace465f37e", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -1021,6 +1021,18 @@ Assignment_statement::do_lower(Gogo* gogo, Named_object*, Block* enclosing,\n \t  && ival == 0)\n \tthis->omit_write_barrier_ = true;\n     }\n+  String_index_expression* sie = this->rhs_->string_index_expression();\n+  if (sie != NULL\n+      && sie->end() != NULL\n+      && Expression::is_same_variable(this->lhs_, sie->string()))\n+    {\n+      Numeric_constant nc;\n+      unsigned long ival;\n+      if (sie->start()->numeric_constant_value(&nc)\n+\t  && nc.to_unsigned_long(&ival) == Numeric_constant::NC_UL_VALID\n+\t  && ival == 0)\n+        this->omit_write_barrier_ = true;\n+    }\n \n   return this;\n }"}, {"sha": "4bfed3facf75d792c8962fdd0a60ee8fdaa2823d", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -468,7 +468,6 @@ runtime_files = \\\n \truntime/go-runtime-error.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\\n-\truntime/go-strslice.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unsetenv.c \\\n \truntime/go-unwind.c \\"}, {"sha": "837e1e8a621f25e66ec4cdb799acaef37862eee5", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9b236e5cafaea9d09ff8102140c72eb3d70e302/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9b236e5cafaea9d09ff8102140c72eb3d70e302/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=c9b236e5cafaea9d09ff8102140c72eb3d70e302", "patch": "@@ -248,12 +248,12 @@ am__objects_3 = runtime/aeshash.lo runtime/go-assert.lo \\\n \truntime/go-nanotime.lo runtime/go-now.lo runtime/go-nosys.lo \\\n \truntime/go-reflect-call.lo runtime/go-runtime-error.lo \\\n \truntime/go-setenv.lo runtime/go-signal.lo \\\n-\truntime/go-strslice.lo runtime/go-unsafe-pointer.lo \\\n-\truntime/go-unsetenv.lo runtime/go-unwind.lo \\\n-\truntime/go-varargs.lo runtime/env_posix.lo runtime/panic.lo \\\n-\truntime/print.lo runtime/proc.lo runtime/runtime_c.lo \\\n-\truntime/stack.lo runtime/yield.lo runtime/go-context.lo \\\n-\t$(am__objects_1) $(am__objects_2)\n+\truntime/go-unsafe-pointer.lo runtime/go-unsetenv.lo \\\n+\truntime/go-unwind.lo runtime/go-varargs.lo \\\n+\truntime/env_posix.lo runtime/panic.lo runtime/print.lo \\\n+\truntime/proc.lo runtime/runtime_c.lo runtime/stack.lo \\\n+\truntime/yield.lo runtime/go-context.lo $(am__objects_1) \\\n+\t$(am__objects_2)\n am_libgo_llgo_la_OBJECTS = $(am__objects_3)\n libgo_llgo_la_OBJECTS = $(am_libgo_llgo_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n@@ -901,7 +901,6 @@ runtime_files = \\\n \truntime/go-runtime-error.c \\\n \truntime/go-setenv.c \\\n \truntime/go-signal.c \\\n-\truntime/go-strslice.c \\\n \truntime/go-unsafe-pointer.c \\\n \truntime/go-unsetenv.c \\\n \truntime/go-unwind.c \\\n@@ -1362,8 +1361,6 @@ runtime/go-setenv.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-signal.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n-runtime/go-strslice.lo: runtime/$(am__dirstamp) \\\n-\truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-unsafe-pointer.lo: runtime/$(am__dirstamp) \\\n \truntime/$(DEPDIR)/$(am__dirstamp)\n runtime/go-unsetenv.lo: runtime/$(am__dirstamp) \\\n@@ -1448,7 +1445,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-runtime-error.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-setenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-signal.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-strslice.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unsafe-pointer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unsetenv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@runtime/$(DEPDIR)/go-unwind.Plo@am__quote@"}, {"sha": "d51c24937811583a7fefafe22b2d2eb1396a0b11", "filename": "libgo/runtime/go-strslice.c", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/050e182a757bdf227a7e2425f06f9e2fd4dff8cb/libgo%2Fruntime%2Fgo-strslice.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/050e182a757bdf227a7e2425f06f9e2fd4dff8cb/libgo%2Fruntime%2Fgo-strslice.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-strslice.c?ref=050e182a757bdf227a7e2425f06f9e2fd4dff8cb", "patch": "@@ -1,30 +0,0 @@\n-/* go-strslice.c -- the go string slice function.\n-\n-   Copyright 2009 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"runtime.h\"\n-\n-String\n-__go_string_slice (String s, intgo start, intgo end)\n-{\n-  intgo len;\n-  String ret;\n-\n-  len = s.len;\n-  if (end == -1)\n-    end = len;\n-  if (start > len || end < start || end > len)\n-    runtime_panicstring (\"string index out of bounds\");\n-  ret.len = end - start;\n-  // If the length of the new string is zero, the str field doesn't\n-  // matter, so just set it to nil.  This avoids the problem of\n-  // s.str + start pointing just past the end of the string,\n-  // which may keep the next memory block alive unnecessarily.\n-  if (ret.len == 0)\n-    ret.str = nil;\n-  else\n-    ret.str = s.str + start;\n-  return ret;\n-}"}]}