{"sha": "319c61611e9a5a95ed7e05134f85f22113bc3b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5YzYxNjExZTlhNWE5NWVkN2UwNTEzNGY4NWYyMjExM2JjM2IyMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:59:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T11:59:22Z"}, "message": "[multiple changes]\n\n2015-10-20  Yannick Moy  <moy@adacore.com>\n\n\t* sem_warn.adb (Is_OK_Fully_Initialized): Consider types with DIC as\n\tfully default initialized.\n\t* sem_ch6.adb: minor style fix in comment\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* s-diflio.ads, s-diflio.adb (Image): New function for dimensioned\n\tquantities, to produce a string that includes the dimension\n\tsynbol for the quantity, or the vector of dimensions in standard\n\tnotation.\n\t* sem_dim.adb (Expand_Put_Call_With_Symbol): Process new function\n\tImage, to include dimension information in the generated string,\n\tidentical to the string produced by the Put procedure on a string\n\tfor a dimensioned quantity.\n\nFrom-SVN: r229053", "tree": {"sha": "d3fc257548e7fbf76f48d8050f8f28fe69976a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3fc257548e7fbf76f48d8050f8f28fe69976a00"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/319c61611e9a5a95ed7e05134f85f22113bc3b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319c61611e9a5a95ed7e05134f85f22113bc3b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/319c61611e9a5a95ed7e05134f85f22113bc3b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319c61611e9a5a95ed7e05134f85f22113bc3b23/comments", "author": null, "committer": null, "parents": [{"sha": "d29f68cf55fd41c19f10d789af9f92469f00f2da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d29f68cf55fd41c19f10d789af9f92469f00f2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d29f68cf55fd41c19f10d789af9f92469f00f2da"}], "stats": {"total": 120, "additions": 91, "deletions": 29}, "files": [{"sha": "54ec2ef2dc2548376c1e6a6ee6d75f0404c05105", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -1,3 +1,20 @@\n+2015-10-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* sem_warn.adb (Is_OK_Fully_Initialized): Consider types with DIC as\n+\tfully default initialized.\n+\t* sem_ch6.adb: minor style fix in comment\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* s-diflio.ads, s-diflio.adb (Image): New function for dimensioned\n+\tquantities, to produce a string that includes the dimension\n+\tsynbol for the quantity, or the vector of dimensions in standard\n+\tnotation.\n+\t* sem_dim.adb (Expand_Put_Call_With_Symbol): Process new function\n+\tImage, to include dimension information in the generated string,\n+\tidentical to the string produced by the Put procedure on a string\n+\tfor a dimensioned quantity.\n+\n 2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch7.adb (Process_Declarations): A loop"}, {"sha": "5c553a0912e64e2435e22501599b300e2fe18944", "filename": "gcc/ada/s-diflio.adb", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fs-diflio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fs-diflio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.adb?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -69,9 +69,11 @@ package body System.Dim.Float_IO is\n       Exp    : Field  := Default_Exp;\n       Symbol : String := \"\")\n    is\n+      Ptr : constant Natural := Symbol'Length;\n+\n    begin\n-      Num_Dim_Float_IO.Put (To, Item, Aft, Exp);\n-      To := To & Symbol;\n+      Num_Dim_Float_IO.Put (To (To'First .. To'Last - Ptr), Item, Aft, Exp);\n+      To (To'Last - Ptr + 1 .. To'Last) := Symbol;\n    end Put;\n \n    ----------------\n@@ -104,6 +106,27 @@ package body System.Dim.Float_IO is\n       Symbol : String := \"\")\n    is\n    begin\n-      To := Symbol;\n+      To (1 .. Symbol'Length) := Symbol;\n    end Put_Dim_Of;\n+\n+   -----------\n+   -- Image --\n+   -----------\n+\n+   function Image\n+     (Item : Num_Dim_Float;\n+      Aft    : Field  := Default_Aft;\n+      Exp    : Field  := Default_Exp;\n+      Symbol : String := \"\") return String\n+   is\n+      Buffer : String (1 .. 50);\n+\n+   begin\n+      Put (Buffer, Item, Aft, Exp);\n+      for I in Buffer'Range loop\n+         if Buffer (I) /= ' ' then\n+            return Buffer (I .. Buffer'Last) & Symbol;\n+         end if;\n+      end loop;\n+   end Image;\n end System.Dim.Float_IO;"}, {"sha": "df550929ea32942f5bf6fed9373d42065eba014e", "filename": "gcc/ada/s-diflio.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fs-diflio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fs-diflio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-diflio.ads?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -175,4 +175,10 @@ package System.Dim.Float_IO is\n    pragma Inline (Put);\n    pragma Inline (Put_Dim_Of);\n \n+   function Image\n+     (Item : Num_Dim_Float;\n+      Aft    : Field  := Default_Aft;\n+      Exp    : Field  := Default_Exp;\n+      Symbol : String := \"\") return String;\n+\n end System.Dim.Float_IO;"}, {"sha": "927a4762a89b4e693d8376e99d2a3799db6f0f00", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -4388,7 +4388,7 @@ package body Sem_Ch6 is\n \n       --  Flag Is_Inlined_Always is True by default, and reversed to False for\n       --  those subprograms which could be inlined in GNATprove mode (because\n-      --  Body_To_Inline is non-Empty) but cannot be inlined.\n+      --  Body_To_Inline is non-Empty) but should not be inlined.\n \n       if GNATprove_Mode then\n          Set_Is_Inlined_Always (Designator);"}, {"sha": "f9448343e28ad3264c770a76ca32a5a37936df54", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -2658,11 +2658,12 @@ package body Sem_Dim is\n    -- Expand_Put_Call_With_Symbol --\n    ---------------------------------\n \n-   --  For procedure Put (resp. Put_Dim_Of) defined in System.Dim.Float_IO\n-   --  (System.Dim.Integer_IO), the default string parameter must be rewritten\n-   --  to include the unit symbols (resp. dimension symbols) in the output\n-   --  of a dimensioned object. Note that if a value is already supplied for\n-   --  parameter Symbol, this routine doesn't do anything.\n+   --  For procedure Put (resp. Put_Dim_Of) and function Image, defined in\n+   --  System.Dim.Float_IO or System.Dim.Integer_IO, the default string\n+   --  parameter is rewritten to include the unit symbol (or the dimension\n+   --  symbols if not a defined quantity) in the output of a dimensioned\n+   --  object.  If a value is already supplied by the user for the parameter\n+   --  Symbol, it is used as is.\n \n    --  Case 1. Item is dimensionless\n \n@@ -2708,6 +2709,9 @@ package body Sem_Dim is\n    --      $5.0 m**3.cd**(-1)\n    --      $[l**3.J**(-1)]\n \n+   --      The function Image returns the string identical to that produced by\n+   --      a call to Put whose first parameter is a string.\n+\n    procedure Expand_Put_Call_With_Symbol (N : Node_Id) is\n       Actuals        : constant List_Id := Parameter_Associations (N);\n       Loc            : constant Source_Ptr := Sloc (N);\n@@ -2773,22 +2777,12 @@ package body Sem_Dim is\n             if Present (Actual_Str) then\n \n                --  Return True if the actual comes from source or if the string\n-               --  of symbols doesn't have the default value (i.e. it is \"\").\n+               --  of symbols doesn't have the default value (i.e. it is \"\"),\n+               --  in which case it is used as suffix of the generated string.\n \n                if Comes_From_Source (Actual)\n                  or else String_Length (Strval (Actual_Str)) /= 0\n                then\n-                  --  Complain only if the actual comes from source or if it\n-                  --  hasn't been fully analyzed yet.\n-\n-                  if Comes_From_Source (Actual)\n-                    or else not Analyzed (Actual)\n-                  then\n-                     Error_Msg_N (\"Symbol parameter should not be provided\",\n-                                  Actual);\n-                     Error_Msg_N (\"\\reserved for compiler use only\", Actual);\n-                  end if;\n-\n                   return True;\n \n                else\n@@ -2841,7 +2835,9 @@ package body Sem_Dim is\n                   Is_Put_Dim_Of := True;\n                   return True;\n \n-               elsif Chars (Ent) = Name_Put then\n+               elsif Chars (Ent) = Name_Put\n+                 or else Chars (Ent) = Name_Image\n+               then\n                   return True;\n                end if;\n             end if;\n@@ -2976,12 +2972,20 @@ package body Sem_Dim is\n \n             --  Rewrite and analyze the procedure call\n \n-            Rewrite (N,\n-              Make_Procedure_Call_Statement (Loc,\n-                Name =>                   New_Copy (Name_Call),\n-                Parameter_Associations => New_Actuals));\n+            if Chars (Name_Call) = Name_Image then\n+               Rewrite (N,\n+                 Make_Function_Call (Loc,\n+                   Name =>                   New_Copy (Name_Call),\n+                   Parameter_Associations => New_Actuals));\n+               Analyze_And_Resolve (N);\n+            else\n+               Rewrite (N,\n+                 Make_Procedure_Call_Statement (Loc,\n+                   Name =>                   New_Copy (Name_Call),\n+                   Parameter_Associations => New_Actuals));\n+               Analyze (N);\n+            end if;\n \n-            Analyze (N);\n          end if;\n       end if;\n    end Expand_Put_Call_With_Symbol;"}, {"sha": "3af69c9fbd0887dc9f16986db68c00226992196b", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319c61611e9a5a95ed7e05134f85f22113bc3b23/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=319c61611e9a5a95ed7e05134f85f22113bc3b23", "patch": "@@ -1697,6 +1697,18 @@ package body Sem_Warn is\n       begin\n          if Is_Access_Type (Typ) and then Is_Dereferenced (N) then\n             return False;\n+\n+         --  If a type has Default_Initial_Condition set, or it inherits it,\n+         --  DIC might be specified with a boolean value, meaning that the type\n+         --  is considered to be fully default initialized (SPARK RM 3.1 and\n+         --  SPARK RM 7.3.3). To avoid generating spurious warnings in this\n+         --  case, consider all types with DIC as fully initialized.\n+\n+         elsif Has_Default_Init_Cond (Typ)\n+           or else Has_Inherited_Default_Init_Cond (Typ)\n+         then\n+            return True;\n+\n          else\n             return Is_Fully_Initialized_Type (Typ);\n          end if;"}]}