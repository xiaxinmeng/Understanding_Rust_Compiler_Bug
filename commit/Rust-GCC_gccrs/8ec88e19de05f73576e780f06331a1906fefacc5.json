{"sha": "8ec88e19de05f73576e780f06331a1906fefacc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVjODhlMTlkZTA1ZjczNTc2ZTc4MGYwNjMzMWExOTA2ZmVmYWNjNQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-09-27T15:33:51Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-09-27T15:33:51Z"}, "message": "Add missing part of committed patch from 21st\n\nFrom-SVN: r104696", "tree": {"sha": "7316a4dd4832eb491970ec88bf5e6d47edf076fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7316a4dd4832eb491970ec88bf5e6d47edf076fa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ec88e19de05f73576e780f06331a1906fefacc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec88e19de05f73576e780f06331a1906fefacc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ec88e19de05f73576e780f06331a1906fefacc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ec88e19de05f73576e780f06331a1906fefacc5/comments", "author": null, "committer": null, "parents": [{"sha": "affbb54ac4dd5a14dcb3dec6a6faa4c407838879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/affbb54ac4dd5a14dcb3dec6a6faa4c407838879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/affbb54ac4dd5a14dcb3dec6a6faa4c407838879"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "6d8b5086de599982bedd9bf97b8cac5538aa9793", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ec88e19de05f73576e780f06331a1906fefacc5/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ec88e19de05f73576e780f06331a1906fefacc5/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=8ec88e19de05f73576e780f06331a1906fefacc5", "patch": "@@ -1437,10 +1437,12 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \n \t\t/* For each array access, analyze its access function\n \t\t   and record a bound on the loop iteration domain.  */\n-\t\tif (TREE_CODE (op1) == ARRAY_REF)\n+\t\tif (TREE_CODE (op1) == ARRAY_REF \n+\t\t    && !ref_contains_indirect_ref (op1))\n \t\t  estimate_iters_using_array (stmt, op1);\n \n-\t\tif (TREE_CODE (op0) == ARRAY_REF)\n+\t\tif (TREE_CODE (op0) == ARRAY_REF \n+\t\t    && !ref_contains_indirect_ref (op0))\n \t\t  estimate_iters_using_array (stmt, op0);\n \n \t\t/* For each signed type variable in LOOP, analyze its\n@@ -1491,7 +1493,8 @@ infer_loop_bounds_from_undefined (struct loop *loop)\n \n \t\tfor (args = TREE_OPERAND (stmt, 1); args;\n \t\t     args = TREE_CHAIN (args))\n-\t\t  if (TREE_CODE (TREE_VALUE (args)) == ARRAY_REF)\n+\t\t  if (TREE_CODE (TREE_VALUE (args)) == ARRAY_REF\n+\t\t      && !ref_contains_indirect_ref (TREE_VALUE (args)))\n \t\t    estimate_iters_using_array (stmt, TREE_VALUE (args));\n \n \t\tbreak;"}]}