{"sha": "621ad2de2165d7064518136d476befe0ca8dd9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjIxYWQyZGUyMTY1ZDcwNjQ1MTgxMzZkNDc2YmVmZTBjYThkZDlhZA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-04-22T16:18:49Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-22T16:18:49Z"}, "message": "[AArch64] Fix TLS for ILP32.\n\nFrom-SVN: r209645", "tree": {"sha": "b70bb0337b31a89e8ed676dae0ba65ab6e245157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b70bb0337b31a89e8ed676dae0ba65ab6e245157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/621ad2de2165d7064518136d476befe0ca8dd9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ad2de2165d7064518136d476befe0ca8dd9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621ad2de2165d7064518136d476befe0ca8dd9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621ad2de2165d7064518136d476befe0ca8dd9ad/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6918051675e3e7123a24917f0151c1b1e10db67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6918051675e3e7123a24917f0151c1b1e10db67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6918051675e3e7123a24917f0151c1b1e10db67"}], "stats": {"total": 111, "additions": 93, "deletions": 18}, "files": [{"sha": "85ec0edcc52068f77707bc3dca6df214b73ebff6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=621ad2de2165d7064518136d476befe0ca8dd9ad", "patch": "@@ -1,3 +1,15 @@\n+2014-04-22  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately):\n+\tHandle TLS for ILP32.\n+\t* config/aarch64/aarch64.md (tlsie_small): Rename to ...\n+\t(tlsie_small_<mode>): this and handle PTR.\n+\t(tlsie_small_sidi): New pattern.\n+\t(tlsle_small): Change to an expand to handle ILP32.\n+\t(tlsle_small_<mode>): New pattern.\n+\t(tlsdesc_small): Rename to ...\n+\t(tlsdesc_small_<mode>): this and handle PTR.\n+\n 2014-04-22  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* config/aarch64/aarch64.c (TARGET_FLAGS_REGNUM): Define."}, {"sha": "dacd7eebcf6ad000c43fbb86f74c343573b30615", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=621ad2de2165d7064518136d476befe0ca8dd9ad", "patch": "@@ -636,22 +636,58 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \n     case SYMBOL_SMALL_TLSDESC:\n       {\n-\trtx x0 = gen_rtx_REG (Pmode, R0_REGNUM);\n+\tenum machine_mode mode = GET_MODE (dest);\n+\trtx x0 = gen_rtx_REG (mode, R0_REGNUM);\n \trtx tp;\n \n-\temit_insn (gen_tlsdesc_small (imm));\n+\tgcc_assert (mode == Pmode || mode == ptr_mode);\n+\n+\t/* In ILP32, the got entry is always of SImode size.  Unlike\n+\t   small GOT, the dest is fixed at reg 0.  */\n+\tif (TARGET_ILP32)\n+\t  emit_insn (gen_tlsdesc_small_si (imm));\n+\telse\n+\t  emit_insn (gen_tlsdesc_small_di (imm));\n \ttp = aarch64_load_tp (NULL);\n-\temit_insn (gen_rtx_SET (Pmode, dest, gen_rtx_PLUS (Pmode, tp, x0)));\n+\n+\tif (mode != Pmode)\n+\t  tp = gen_lowpart (mode, tp);\n+\n+\temit_insn (gen_rtx_SET (mode, dest, gen_rtx_PLUS (mode, tp, x0)));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n \n     case SYMBOL_SMALL_GOTTPREL:\n       {\n-\trtx tmp_reg = gen_reg_rtx (Pmode);\n+\t/* In ILP32, the mode of dest can be either SImode or DImode,\n+\t   while the got entry is always of SImode size.  The mode of\n+\t   dest depends on how dest is used: if dest is assigned to a\n+\t   pointer (e.g. in the memory), it has SImode; it may have\n+\t   DImode if dest is dereferenced to access the memeory.\n+\t   This is why we have to handle three different tlsie_small\n+\t   patterns here (two patterns for ILP32).  */\n+\tenum machine_mode mode = GET_MODE (dest);\n+\trtx tmp_reg = gen_reg_rtx (mode);\n \trtx tp = aarch64_load_tp (NULL);\n-\temit_insn (gen_tlsie_small (tmp_reg, imm));\n-\temit_insn (gen_rtx_SET (Pmode, dest, gen_rtx_PLUS (Pmode, tp, tmp_reg)));\n+\n+\tif (mode == ptr_mode)\n+\t  {\n+\t    if (mode == DImode)\n+\t      emit_insn (gen_tlsie_small_di (tmp_reg, imm));\n+\t    else\n+\t      {\n+\t\temit_insn (gen_tlsie_small_si (tmp_reg, imm));\n+\t\ttp = gen_lowpart (mode, tp);\n+\t      }\n+\t  }\n+\telse\n+\t  {\n+\t    gcc_assert (mode == Pmode);\n+\t    emit_insn (gen_tlsie_small_sidi (tmp_reg, imm));\n+\t  }\n+\n+\temit_insn (gen_rtx_SET (mode, dest, gen_rtx_PLUS (mode, tp, tmp_reg)));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }"}, {"sha": "f0d1d188e986b0ad5a5427a802edd98ce5c3f8cb", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 39, "deletions": 12, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/621ad2de2165d7064518136d476befe0ca8dd9ad/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=621ad2de2165d7064518136d476befe0ca8dd9ad", "patch": "@@ -3586,35 +3586,62 @@\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n \n-(define_insn \"tlsie_small\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"aarch64_tls_ie_symref\" \"S\")]\n+(define_insn \"tlsie_small_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+        (unspec:PTR [(match_operand 1 \"aarch64_tls_ie_symref\" \"S\")]\n \t\t   UNSPEC_GOTSMALLTLS))]\n   \"\"\n-  \"adrp\\\\t%0, %A1\\;ldr\\\\t%0, [%0, #%L1]\"\n+  \"adrp\\\\t%0, %A1\\;ldr\\\\t%<w>0, [%0, #%L1]\"\n   [(set_attr \"type\" \"load1\")\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_insn \"tlsle_small\"\n+(define_insn \"tlsie_small_sidi\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"r\")\n-                   (match_operand:DI 2 \"aarch64_tls_le_symref\" \"S\")]\n+\t(zero_extend:DI\n+          (unspec:SI [(match_operand 1 \"aarch64_tls_ie_symref\" \"S\")]\n+\t\t      UNSPEC_GOTSMALLTLS)))]\n+  \"\"\n+  \"adrp\\\\t%0, %A1\\;ldr\\\\t%w0, [%0, #%L1]\"\n+  [(set_attr \"type\" \"load1\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_expand \"tlsle_small\"\n+  [(set (match_operand 0 \"register_operand\" \"=r\")\n+        (unspec [(match_operand 1 \"register_operand\" \"r\")\n+                   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n+                   UNSPEC_GOTSMALLTLS))]\n+  \"\"\n+{\n+  enum machine_mode mode = GET_MODE (operands[0]);\n+  emit_insn ((mode == DImode\n+\t      ? gen_tlsle_small_di\n+\t      : gen_tlsle_small_si) (operands[0],\n+\t\t\t\t     operands[1],\n+\t\t\t\t     operands[2]));\n+  DONE;\n+})\n+\n+(define_insn \"tlsle_small_<mode>\"\n+  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n+        (unspec:P [(match_operand:P 1 \"register_operand\" \"r\")\n+                   (match_operand 2 \"aarch64_tls_le_symref\" \"S\")]\n \t\t   UNSPEC_GOTSMALLTLS))]\n   \"\"\n-  \"add\\\\t%0, %1, #%G2\\;add\\\\t%0, %0, #%L2\"\n+  \"add\\\\t%<w>0, %<w>1, #%G2\\;add\\\\t%<w>0, %<w>0, #%L2\"\n   [(set_attr \"type\" \"alu_reg\")\n    (set_attr \"length\" \"8\")]\n )\n \n-(define_insn \"tlsdesc_small\"\n-  [(set (reg:DI R0_REGNUM)\n-        (unspec:DI [(match_operand:DI 0 \"aarch64_valid_symref\" \"S\")]\n+(define_insn \"tlsdesc_small_<mode>\"\n+  [(set (reg:PTR R0_REGNUM)\n+        (unspec:PTR [(match_operand 0 \"aarch64_valid_symref\" \"S\")]\n \t\t   UNSPEC_TLSDESC))\n    (clobber (reg:DI LR_REGNUM))\n    (clobber (match_scratch:DI 1 \"=r\"))]\n   \"TARGET_TLS_DESC\"\n-  \"adrp\\\\tx0, %A0\\;ldr\\\\t%1, [x0, #%L0]\\;add\\\\tx0, x0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n+  \"adrp\\\\tx0, %A0\\;ldr\\\\t%<w>1, [x0, #%L0]\\;add\\\\t<w>0, <w>0, %L0\\;.tlsdesccall\\\\t%0\\;blr\\\\t%1\"\n   [(set_attr \"type\" \"call\")\n    (set_attr \"length\" \"16\")])\n "}]}