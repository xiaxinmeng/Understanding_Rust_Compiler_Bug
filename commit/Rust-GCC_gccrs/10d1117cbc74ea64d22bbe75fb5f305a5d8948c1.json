{"sha": "10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTBkMTExN2NiYzc0ZWE2NGQyMmJiZTc1ZmI1ZjMwNWE1ZDg5NDhjMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-29T21:12:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-04-29T21:12:45Z"}, "message": "crtend.asm: Use C comments instead of #.\n\n        * config/alpha/crtend.asm: Use C comments instead of #.\n        * config/alpha/crtbegin.asm: Likewise.  Mark __dso_handle hidden.\n\n        * config/alpha/elf.h (SELECT_SECTION): Treat CONSTRUCTOR like VAR_DECL.\n\nFrom-SVN: r33537", "tree": {"sha": "92828785a03a792d468d0a8add0eac5c7b304cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92828785a03a792d468d0a8add0eac5c7b304cad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/comments", "author": null, "committer": null, "parents": [{"sha": "5cebbd8de37bec65562d047500b13d93c6ad839f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cebbd8de37bec65562d047500b13d93c6ad839f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cebbd8de37bec65562d047500b13d93c6ad839f"}], "stats": {"total": 249, "additions": 133, "deletions": 116}, "files": [{"sha": "cbeba99a281d1f3cec7b7cd607aaed14c662f09c", "filename": "gcc/config/alpha/crtbegin.asm", "status": "modified", "additions": 77, "deletions": 63, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtbegin.asm?ref=10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "patch": "@@ -1,42 +1,47 @@\n- # Copyright (C) 1996, 1998 Free Software Foundation, Inc.\n- #  Contributed by Richard Henderson (rth@tamu.edu)\n- #\n- # This file is free software; you can redistribute it and/or modify it\n- # under the terms of the GNU General Public License as published by the\n- # Free Software Foundation; either version 2, or (at your option) any\n- # later version.\n- # \n- # In addition to the permissions in the GNU General Public License, the\n- # Free Software Foundation gives you unlimited permission to link the\n- # compiled version of this file with other programs, and to distribute\n- # those programs without any restriction coming from the use of this\n- # file.  (The General Public License restrictions do apply in other\n- # respects; for example, they cover modification of the file, and\n- # distribution when not linked into another program.)\n- # \n- # This file is distributed in the hope that it will be useful, but\n- # WITHOUT ANY WARRANTY; without even the implied warranty of\n- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- # General Public License for more details.\n- # \n- # You should have received a copy of the GNU General Public License\n- # along with this program; see the file COPYING.  If not, write to\n- # the Free Software Foundation, 59 Temple Place - Suite 330,\n- # Boston, MA 02111-1307, USA.\n- # \n- #    As a special exception, if you link this library with files\n- #    compiled with GCC to produce an executable, this does not cause\n- #    the resulting executable to be covered by the GNU General Public License.\n- #    This exception does not however invalidate any other reasons why\n- #    the executable file might be covered by the GNU General Public License.\n-\n- #\n- # Heads of the constructor/destructor lists.\n- #\n-\n- # The __*TOR_LIST__ symbols are not global because when this file is used\n- # in a shared library, we do not want the symbol to fall over to the\n- # application's lists.\n+/*\n+ * Copyright (C) 1996, 1998, 2000 Free Software Foundation, Inc.\n+ *  Contributed by Richard Henderson (rth@tamu.edu)\n+ *\n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */\n+\n+#include \"auto-host.h\"\n+\n+\n+/*\n+ * Heads of the constructor/destructor lists.\n+ */\n+\n+/* The __*TOR_LIST__ symbols are not global because when this file is used\n+   in a shared library, we do not want the symbol to fall over to the\n+   application's lists.  */\n \n .section .ctors,\"aw\"\n \n@@ -53,49 +58,55 @@ __DTOR_LIST__:\n .section .eh_frame,\"aw\"\n __EH_FRAME_BEGIN__:\n \n- #\n- # Fragment of the ELF _fini routine that invokes our dtor cleanup.\n- #\n+/*\n+ * Fragment of the ELF _fini routine that invokes our dtor cleanup.\n+ */\n \n .section .fini,\"ax\"\n \n-\t# Since the bits of the _fini function are spread across many\n-\t# object files, each potentially with its own GP, we must\n-\t# assume we need to load ours.  Further, our .fini section\n-\t# can easily be more than 4MB away from our .text bits so we\n-\t# can't use bsr.\n+\t/* Since the bits of the _fini function are spread across many\n+\t   object files, each potentially with its own GP, we must\n+\t   assume we need to load ours.  Further, our .fini section\n+\t   can easily be more than 4MB away from our .text bits so we\n+\t   can't use bsr.  */\n \n \tbr      $29,1f\n 1:\tldgp    $29,0($29)\n \tjsr     $26,__do_global_dtors_aux\n \n-\t# Must match the alignment we got from crti.o else we get\n-\t# zero-filled holes in our _fini function and then SIGILL.\n+\t/* Must match the alignment we got from crti.o else we get\n+\t   zero-filled holes in our _fini function and then SIGILL.  */\n \t.align 3\n \n- #\n- # Fragment of the ELF _init routine that sets up the frame info.\n- #\n+/*\n+ * Fragment of the ELF _init routine that sets up the frame info.\n+ */\n \n .section .init,\"ax\"\n        br      $29,1f\n 1:     ldgp    $29,0($29)\n        jsr     $26,__do_frame_setup\n        .align 3\n \n- #\n- # Invoke our destructors in order.\n- #\n+/*\n+ * Invoke our destructors in order.\n+ */\n \n .section .sdata\n \n- # Support recursive calls to exit.\n+/* Support recursive calls to exit.  */\n \t.type dtor_ptr,@object\n \t.size dtor_ptr,8\n dtor_ptr:\n \t.quad\t__DTOR_LIST__ + 8\n \n- # A globally unique widget for c++ local destructors to hang off.\n+/* A globally unique widget for c++ local destructors to hang off.\n+\n+   This has a unique value in every dso; in the main program its\n+   value is zero.  The object should be protected.  This means the\n+   instance in any dso or the main program is not used in any other\n+   dso.  The dynamic linker takes care of this.  */\n+ \n \t.global __dso_handle\n \t.type __dso_handle,@object\n \t.size __dso_handle,8\n@@ -110,6 +121,9 @@ __dso_handle:\n __dso_handle:\n \t.zero 8\n #endif\n+#ifdef HAVE_GAS_HIDDEN\n+\t.hidden\t__dso_handle\n+#endif\n \n .text\n \n@@ -126,7 +140,7 @@ __do_global_dtors_aux:\n \t.prologue 1\n \n #ifdef SHARED\n-\t# Do c++ local destructors.\n+\t/* Do c++ local destructors.  */\n \tlda\t$1,__cxa_finalize\n \tbeq\t$1,0f\n \tlda\t$16,__dso_handle\n@@ -144,7 +158,7 @@ __do_global_dtors_aux:\n \taddq    $1,8,$1\n \tbne     $27,1b\n \n-\t# Remove our frame info.\n+\t/* Remove our frame info.  */\n \tlda\t$1,__deregister_frame_info\n \tbeq\t$1,3f\n \tlda\t$16,__EH_FRAME_BEGIN__\n@@ -158,11 +172,11 @@ __do_global_dtors_aux:\n \n \t.end __do_global_dtors_aux\n \n- #\n- # Install our frame info.\n- #\n+/*\n+ * Install our frame info.\n+ */\n \n- # ??? How can we rationally keep this size correct?\n+/* ??? How can we rationally keep this size correct?  */\n \n .section .bss\n \t.type frame_object,@object"}, {"sha": "662eb22de9cedb66d6a1c05fbbaf18844729cf00", "filename": "gcc/config/alpha/crtend.asm", "status": "modified", "additions": 54, "deletions": 52, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Fcrtend.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fcrtend.asm?ref=10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "patch": "@@ -1,42 +1,44 @@\n- # Copyright (C) 1996 Free Software Foundation, Inc.\n- #  Contributed by Richard Henderson (rth@tamu.edu)\n- #\n- # This file is free software; you can redistribute it and/or modify it\n- # under the terms of the GNU General Public License as published by the\n- # Free Software Foundation; either version 2, or (at your option) any\n- # later version.\n- # \n- # In addition to the permissions in the GNU General Public License, the\n- # Free Software Foundation gives you unlimited permission to link the\n- # compiled version of this file with other programs, and to distribute\n- # those programs without any restriction coming from the use of this\n- # file.  (The General Public License restrictions do apply in other\n- # respects; for example, they cover modification of the file, and\n- # distribution when not linked into another program.)\n- # \n- # This file is distributed in the hope that it will be useful, but\n- # WITHOUT ANY WARRANTY; without even the implied warranty of\n- # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n- # General Public License for more details.\n- # \n- # You should have received a copy of the GNU General Public License\n- # along with this program; see the file COPYING.  If not, write to\n- # the Free Software Foundation, 59 Temple Place - Suite 330,\n- # Boston, MA 02111-1307, USA.\n- # \n- #    As a special exception, if you link this library with files\n- #    compiled with GCC to produce an executable, this does not cause\n- #    the resulting executable to be covered by the GNU General Public License.\n- #    This exception does not however invalidate any other reasons why\n- #    the executable file might be covered by the GNU General Public License.\n-\n- #\n- # Tails of the constructor/destructor lists.\n- #\n-\n- # The __*TOR_END__ symbols are not global because when this file is used\n- # in a shared library, we do not want the symbol to fall over to the\n- # application's lists.\n+/*\n+ * Copyright (C) 1996, 2000 Free Software Foundation, Inc.\n+ *  Contributed by Richard Henderson (rth@tamu.edu)\n+ *\n+ * This file is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License as published by the\n+ * Free Software Foundation; either version 2, or (at your option) any\n+ * later version.\n+ * \n+ * In addition to the permissions in the GNU General Public License, the\n+ * Free Software Foundation gives you unlimited permission to link the\n+ * compiled version of this file with other programs, and to distribute\n+ * those programs without any restriction coming from the use of this\n+ * file.  (The General Public License restrictions do apply in other\n+ * respects; for example, they cover modification of the file, and\n+ * distribution when not linked into another program.)\n+ * \n+ * This file is distributed in the hope that it will be useful, but\n+ * WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * General Public License for more details.\n+ * \n+ * You should have received a copy of the GNU General Public License\n+ * along with this program; see the file COPYING.  If not, write to\n+ * the Free Software Foundation, 59 Temple Place - Suite 330,\n+ * Boston, MA 02111-1307, USA.\n+ * \n+ *    As a special exception, if you link this library with files\n+ *    compiled with GCC to produce an executable, this does not cause\n+ *    the resulting executable to be covered by the GNU General Public License.\n+ *    This exception does not however invalidate any other reasons why\n+ *    the executable file might be covered by the GNU General Public License.\n+ */\n+\n+/*\n+ * Tails of the constructor/destructor lists.\n+ */\n+\n+/* The __*TOR_END__ symbols are not global because when this file is used\n+   in a shared library, we do not want the symbol to fall over to the\n+   application's lists.  */\n \n .section .ctors,\"aw\"\n \n@@ -54,29 +56,29 @@ __DTOR_END__:\n __FRAME_END__:\n \t.quad\t0\n \n- #\n- # Fragment of the ELF _init routine that invokes our ctor startup\n- #\n+/*\n+ * Fragment of the ELF _init routine that invokes our ctor startup\n+ */\n \n .section .init,\"ax\"\n \n-\t# Since the bits of the _init function are spread across many\n-\t# object files, each potentially with its own GP, we must\n-\t# assume we need to load ours.  Further, our .init section\n-\t# can easily be more than 4MB away from our .text bits so we\n-\t# can't use bsr.\n+\t/* Since the bits of the _init function are spread across many\n+\t   object files, each potentially with its own GP, we must\n+\t   assume we need to load ours.  Further, our .init section\n+\t   can easily be more than 4MB away from our .text bits so we\n+\t   can't use bsr.  */\n \n \tbr      $29,1f\n 1:\tldgp    $29,0($29)\n \tjsr     $26,__do_global_ctors_aux\n \n-\t# Must match the alignment we got from crti.o else we get\n-\t# zero-filled holes in our _init function and thense SIGILL.\n+\t/* Must match the alignment we got from crti.o else we get\n+\t   zero-filled holes in our _init function and thense SIGILL.  */\n \t.align 3\n \n- #\n- # Invoke our destructors in order.\n- #\n+/*\n+ * Invoke our constructors in order.\n+ */\n \n .text\n "}, {"sha": "f67deca5c2744d640705b53cb78ed58569dac688", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/10d1117cbc74ea64d22bbe75fb5f305a5d8948c1/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=10d1117cbc74ea64d22bbe75fb5f305a5d8948c1", "patch": "@@ -338,7 +338,8 @@ void FN ()\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tdata_section ();\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n-  else if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n+  else if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\t\\\n+\t   || TREE_CODE (DECL) == CONSTRUCTOR)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((flag_pic && RELOC)\t\t\t\t\t\t\\\n \t  || !TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL)\t\t\\"}]}