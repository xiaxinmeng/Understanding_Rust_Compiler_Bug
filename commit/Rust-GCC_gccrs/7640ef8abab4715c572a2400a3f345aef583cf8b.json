{"sha": "7640ef8abab4715c572a2400a3f345aef583cf8b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY0MGVmOGFiYWI0NzE1YzU3MmEyNDAwYTNmMzQ1YWVmNTgzY2Y4Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T12:25:44Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T12:25:44Z"}, "message": "[multiple changes]\n\n2012-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* types.h (N_Return_Statement): Delete.\n\t* gcc-interface/trans.c (gnat_to_gnu): Replace N_Return_Statement with\n\tN_Simple_Return_Statement.\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): in a generic context, aspects must\n\tbe analyzed because they may be queried subsequently within the\n\tgeneric unit, even if no other freezing actions are generated\n\tfor an entity.\n\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): iterator\n\taspects must be analyzed because they are delayed aspects and\n\tthe corresponding attribute definition clause may not have been\n\tanalyzed yet.\n\n2012-10-02  Yannick Moy  <moy@adacore.com>\n\n\t* gnat_rm.texi: Minor editing.\n\nFrom-SVN: r191975", "tree": {"sha": "77aeeeec737fa9ac7586a32ebbc2d6daa51cf0b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77aeeeec737fa9ac7586a32ebbc2d6daa51cf0b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7640ef8abab4715c572a2400a3f345aef583cf8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7640ef8abab4715c572a2400a3f345aef583cf8b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7640ef8abab4715c572a2400a3f345aef583cf8b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7640ef8abab4715c572a2400a3f345aef583cf8b/comments", "author": null, "committer": null, "parents": [{"sha": "92a7cd469407ff52beb29b4855b11c102ccf6972", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92a7cd469407ff52beb29b4855b11c102ccf6972", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92a7cd469407ff52beb29b4855b11c102ccf6972"}], "stats": {"total": 69, "additions": 54, "deletions": 15}, "files": [{"sha": "436651cfe970dab4dbc6d9195bcaf596a3b07482", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -1,3 +1,24 @@\n+2012-10-02  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* types.h (N_Return_Statement): Delete.\n+\t* gcc-interface/trans.c (gnat_to_gnu): Replace N_Return_Statement with\n+\tN_Simple_Return_Statement.\n+\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): in a generic context, aspects must\n+\tbe analyzed because they may be queried subsequently within the\n+\tgeneric unit, even if no other freezing actions are generated\n+\tfor an entity.\n+\t* sem_ch13.adb (Analyze_Aspects_At_Freeze_Point): iterator\n+\taspects must be analyzed because they are delayed aspects and\n+\tthe corresponding attribute definition clause may not have been\n+\tanalyzed yet.\n+\n+2012-10-02  Yannick Moy  <moy@adacore.com>\n+\n+\t* gnat_rm.texi: Minor editing.\n+\n 2012-10-02  Robert Dewar  <dewar@adacore.com>\n \n \t* sinfo.adb, sinfo.ads, sem_util.adb, sem_util.ads, types.h,"}, {"sha": "039325afbcfd006d6767682b3664aaf333c5322a", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -2571,8 +2571,15 @@ package body Freeze is\n       --  It is improper to freeze an external entity within a generic because\n       --  its freeze node will appear in a non-valid context. The entity will\n       --  be frozen in the proper scope after the current generic is analyzed.\n+      --  However, aspects must be analyzed because they may be queried later\n+      --  within the generic itself, and the corresponding pragma or attribute\n+      --  definition has not been analyzed yet.\n \n       elsif Inside_A_Generic and then External_Ref_In_Generic (Test_E) then\n+         if Has_Delayed_Aspects (E) then\n+            Analyze_Aspects_At_Freeze_Point (E);\n+         end if;\n+\n          return No_List;\n \n       --  AI05-0213: A formal incomplete type does not freeze the actual. In"}, {"sha": "aac483cafaa759fcf6022894a87a620338ea4fdb", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -6241,7 +6241,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t\t   : VEC_last (loop_info, gnu_loop_stack)->label));\n       break;\n \n-    case N_Return_Statement:\n+    case N_Simple_Return_Statement:\n       {\n \ttree gnu_ret_obj, gnu_ret_val;\n "}, {"sha": "5f2270f164ec0117bf93f8e48070d6d45149264e", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -1921,7 +1921,7 @@ where @var{T} is a limited record type imported from C++ with pragma\n The first two forms import the default constructor, used when an object\n of type @var{T} is created on the Ada side with no explicit constructor.\n The latter two forms cover all the non-default constructors of the type.\n-See the GNAT users guide for details.\n+See the @value{EDITION} User's Guide for details.\n \n If no constructors are imported, it is impossible to create any objects\n on the Ada side and the type is implicitly declared abstract.\n@@ -3101,8 +3101,8 @@ initialize with invalid values (similar to Normalize_Scalars, though for\n Initialize_Scalars it is not always possible to determine the invalid\n values in complex cases like signed component fields with non-standard\n sizes). You can also initialize with high or\n-low values, or with a specified bit pattern.  See the users guide for binder\n-options for specifying these cases.\n+low values, or with a specified bit pattern.  See the @value{EDITION}\n+User's Guide for binder options for specifying these cases.\n \n This means that you can compile a program, and then without having to\n recompile the program, you can run it with different values being used\n@@ -3113,22 +3113,23 @@ uninitialized value.\n \n It is even possible to change the value at execution time eliminating even\n the need to rebind with a different switch using an environment variable.\n-See the GNAT users guide for details.\n+See the @value{EDITION} User's Guide for details.\n \n Note that pragma @code{Initialize_Scalars} is particularly useful in\n conjunction with the enhanced validity checking that is now provided\n in GNAT, which checks for invalid values under more conditions.\n Using this feature (see description of the @option{-gnatV} flag in the\n-users guide) in conjunction with pragma @code{Initialize_Scalars}\n+@value{EDITION} User's Guide) in conjunction with\n+pragma @code{Initialize_Scalars}\n provides a powerful new tool to assist in the detection of problems\n caused by uninitialized variables.\n \n Note: the use of @code{Initialize_Scalars} has a fairly extensive\n effect on the generated code. This may cause your code to be\n substantially larger. It may also cause an increase in the amount\n of stack required, so it is probably a good idea to turn on stack\n-checking (see description of stack checking in the GNAT users guide)\n-when using this pragma.\n+checking (see description of stack checking in the @value{EDITION}\n+User's Guide) when using this pragma.\n \n @node Pragma Inline_Always\n @unnumberedsec Pragma Inline_Always\n@@ -4147,8 +4148,8 @@ MODE ::= SUPPRESSED | CHECKED | MINIMIZED | ELIMINATED\n @noindent\n This pragma sets the current overflow mode to the given mode. For details\n of the meaning of these modes, see section on overflow checking in the\n-GNAT users guide. If only the @code{General} parameter is present, the\n-given mode applies to all expressions. If both parameters are present,\n+@value{EDITION} User's Guide. If only the @code{General} parameter is present,\n+the given mode applies to all expressions. If both parameters are present,\n the @code{General} mode applies to expressions outside assertions, and\n the @code{Eliminated} mode applies to expressions within assertions.\n \n@@ -4164,14 +4165,18 @@ remaining declarations and statements in that scope.\n \n The pragma @code{Suppress (Overflow_Check)} sets mode\n \n+@smallexample @c ada\n    General => Suppressed\n+@end smallexample\n \n suppressing all overflow checking within and outside\n assertions.\n \n The pragam @code{Unsuppress (Overflow_Check)} sets mode\n \n+@smallexample @c ada\n    General => Checked\n+@end smallexample\n \n which causes overflow checking of all intermediate overflows.\n This applies both inside and outside assertions.\n@@ -5787,8 +5792,8 @@ activated.  The validity checks are first set to include only the default\n reference manual settings, and then a string of letters in the string\n specifies the exact set of options required.  The form of this string\n is exactly as described for the @option{-gnatVx} compiler switch (see the\n-GNAT users guide for details).  For example the following two methods\n-can be used to enable validity checking for mode @code{in} and\n+@value{EDITION} User's Guide for details).  For example the following two\n+methods can be used to enable validity checking for mode @code{in} and\n @code{in out} subprogram parameters:\n \n @itemize @bullet"}, {"sha": "d75b70b68d23c92e1086b6c627a7574144b918d4", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -888,6 +888,15 @@ package body Sem_Ch13 is\n                     Aspect_Default_Component_Value =>\n                   Analyze_Aspect_Default_Value (ASN);\n \n+               --  Ditto for iterator aspects, because the corresponding\n+               --  attributes may not have been analyzed yet.\n+\n+               when Aspect_Constant_Indexing |\n+                    Aspect_Variable_Indexing |\n+                    Aspect_Default_Iterator  |\n+                    Aspect_Iterator_Element  =>\n+                  Analyze (Expression (ASN));\n+\n                when others =>\n                   null;\n             end case;"}, {"sha": "a0f28910d1139931df1ed4d2c6ae34a67cd4ea63", "filename": "gcc/ada/types.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7640ef8abab4715c572a2400a3f345aef583cf8b/gcc%2Fada%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftypes.h?ref=7640ef8abab4715c572a2400a3f345aef583cf8b", "patch": "@@ -384,6 +384,3 @@ typedef Int Mechanism_Type;\n #define SE_Object_Too_Large                34\n \n #define LAST_REASON_CODE                   34\n-\n-#define N_Return_Statement N_Simple_Return_Statement\n-/* temporary synonym for transition */"}]}