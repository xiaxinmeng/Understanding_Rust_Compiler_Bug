{"sha": "be71b673519ca207b2d8c1eeb5ec104587d55f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU3MWI2NzM1MTljYTIwN2IyZDhjMWVlYjVlYzEwNDU4N2Q1NWY5YQ==", "commit": {"author": {"name": "Michael Matz", "email": "matz@suse.de", "date": "2008-02-13T14:53:59Z"}, "committer": {"name": "Michael Matz", "email": "matz@gcc.gnu.org", "date": "2008-02-13T14:53:59Z"}, "message": "re PR debug/35065 (infinite loop while compiling VLC media player in vt_find_locations)\n\n        PR debug/35065\n        * var-tracking.c (clobber_variable_part): Correctly traverse the\n        list.\n\n        * gcc.dg/pr35065.c: New testcase.\n\nFrom-SVN: r132286", "tree": {"sha": "1fdac364a51261305c29a5bd9946e0b84bf80653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fdac364a51261305c29a5bd9946e0b84bf80653"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be71b673519ca207b2d8c1eeb5ec104587d55f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be71b673519ca207b2d8c1eeb5ec104587d55f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be71b673519ca207b2d8c1eeb5ec104587d55f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be71b673519ca207b2d8c1eeb5ec104587d55f9a/comments", "author": {"login": "susematz", "id": 4117296, "node_id": "MDQ6VXNlcjQxMTcyOTY=", "avatar_url": "https://avatars.githubusercontent.com/u/4117296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/susematz", "html_url": "https://github.com/susematz", "followers_url": "https://api.github.com/users/susematz/followers", "following_url": "https://api.github.com/users/susematz/following{/other_user}", "gists_url": "https://api.github.com/users/susematz/gists{/gist_id}", "starred_url": "https://api.github.com/users/susematz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/susematz/subscriptions", "organizations_url": "https://api.github.com/users/susematz/orgs", "repos_url": "https://api.github.com/users/susematz/repos", "events_url": "https://api.github.com/users/susematz/events{/privacy}", "received_events_url": "https://api.github.com/users/susematz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fed39e221156affff72a2a70a737028829b4269d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed39e221156affff72a2a70a737028829b4269d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed39e221156affff72a2a70a737028829b4269d"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "44ad62bcd6ad85b8d03fe8883c85ac7a3e18a685", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be71b673519ca207b2d8c1eeb5ec104587d55f9a", "patch": "@@ -1,3 +1,9 @@\n+2008-02-13  Michael Matz  <matz@suse.de>\n+\n+\tPR debug/35065\n+\t* var-tracking.c (clobber_variable_part): Correctly traverse the\n+\tlist.\n+\n 2008-02-13  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 29673"}, {"sha": "88299fa67d2772b33fac836db0bd2b18d96c1de1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be71b673519ca207b2d8c1eeb5ec104587d55f9a", "patch": "@@ -1,3 +1,8 @@\n+2008-02-13  Michael Matz  <matz@suse.de>\n+\n+\tPR debug/35065\n+\t* gcc.dg/pr35065.c: New testcase.\n+\n 2008-02-12  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/35171"}, {"sha": "d5cf14fbb6e02991c75406d0febef9cc349f6ed1", "filename": "gcc/testsuite/gcc.dg/pr35065.c", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35065.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35065.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr35065.c?ref=be71b673519ca207b2d8c1eeb5ec104587d55f9a", "patch": "@@ -0,0 +1,220 @@\n+/* PR debug/35065 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -funroll-loops\" } */\n+typedef int vlc_bool_t;\n+typedef __SIZE_TYPE__ size_t;\n+typedef struct vlc_object_t vlc_object_t;\n+typedef long long int64_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned char uint8_t;\n+typedef int64_t mtime_t;\n+typedef uint32_t vlc_fourcc_t;\n+typedef struct module_t module_t;\n+typedef struct es_format_t es_format_t;\n+typedef struct decoder_t decoder_t;\n+typedef struct decoder_sys_t decoder_sys_t;\n+typedef struct block_t block_t;\n+enum vlc_module_properties {\n+  VLC_MODULE_CB_OPEN, VLC_MODULE_CB_CLOSE, VLC_MODULE_NAME, };\n+struct es_format_t {\n+  vlc_fourcc_t i_codec;\n+  int i_extra;\n+  void *p_extra;\n+};\n+struct block_t {\n+  block_t *p_next;\n+  uint32_t i_flags;\n+  mtime_t i_pts;\n+  mtime_t i_dts;\n+  size_t i_buffer;\n+  uint8_t *p_buffer;\n+};\n+static inline block_t *block_Duplicate( block_t *p_block ) {\n+  block_t *p_dup = block_New( ((void *)0), p_block->i_buffer );\n+  p_dup->i_dts = p_block->i_dts;\n+  p_dup->i_pts = p_block->i_pts;\n+}\n+static inline void block_ChainAppend( block_t **pp_list, block_t *p_block ) {\n+  if( *pp_list == ((void *)0) ) {\n+  }\n+  else {\n+    block_t *p = *pp_list;\n+    while( p->p_next ) p = p->p_next;\n+    p->p_next = p_block;\n+  }\n+}\n+struct decoder_t {\n+  decoder_sys_t * p_sys;\n+  es_format_t fmt_in;\n+};\n+typedef struct bs_s {\n+  uint8_t *p;\n+  uint8_t *p_end;\n+  int i_left;\n+} bs_t;\n+static inline uint32_t bs_read( bs_t *s, int i_count ) {\n+  static uint32_t i_mask[33] = {\n+    0x00, 0x1fffffff,0x3fffffff,0x7fffffff,0xffffffff};\n+  int i_shr;\n+  uint32_t i_result = 0;\n+  while( i_count > 0 ) {\n+    if( s->p >= s->p_end ) {\n+      break;\n+    }\n+    if( ( i_shr = s->i_left - i_count ) >= 0 ) {\n+      i_result |= ( *s->p >> i_shr )&i_mask[i_count];\n+      s->i_left -= i_count;\n+      {\n+\ts->i_left = 8;\n+      }\n+      return( i_result );\n+    }\n+    {\n+      i_result |= (*s->p&i_mask[s->i_left]) << -i_shr;\n+      i_count -= s->i_left;\n+      s->p++;\n+    }\n+  }\n+}\n+static inline uint32_t bs_read1( bs_t *s ) {\n+  if( s->p < s->p_end ) {\n+    unsigned int i_result;\n+    s->i_left--;\n+    i_result = ( *s->p >> s->i_left )&0x01;\n+    if( s->i_left == 0 ) {\n+      s->p++;\n+    }\n+    return i_result;\n+  }\n+  return 0;\n+}\n+int Open ( vlc_object_t * );\n+static void Close( vlc_object_t * );\n+__attribute__((visibility(\"default\"))) int vlc_entry__0_9_0f ( module_t *p_module ) {\n+  {\n+    module_t *p_submodule = p_module;\n+    if (vlc_module_set (p_submodule, VLC_MODULE_CB_OPEN, (void *)(Open)) || vlc_module_set (p_submodule, VLC_MODULE_CB_CLOSE, (void *)(Close))) goto error;\n+  }\n+ error:\n+  return -666;\n+}\n+typedef struct {\n+  int i_nal_type;\n+  int i_nal_ref_idc;\n+  int i_frame_type;\n+  int i_frame_num;\n+  int i_bottom_field_flag;\n+  int i_idr_pic_id;\n+  int i_delta_pic_order_cnt0;\n+} slice_t;\n+struct decoder_sys_t {\n+  vlc_bool_t b_slice;\n+  block_t *p_frame;\n+  vlc_bool_t b_sps;\n+  vlc_bool_t b_pps;\n+  vlc_bool_t b_header;\n+  block_t *p_sps;\n+  block_t *p_pps;\n+  int i_pic_order_cnt_type;\n+  slice_t slice;\n+};\n+enum { NAL_SLICE = 1, NAL_SLICE_IDR = 5, NAL_SPS = 7, NAL_AU_DELIMITER= 9 };\n+static block_t *ParseNALBlock( decoder_t *, block_t * );\n+int Open( vlc_object_t *p_this ) {\n+  decoder_t *p_dec = (decoder_t*)p_this;\n+  decoder_sys_t *p_sys;\n+  if( p_dec->fmt_in.i_codec != ( ((uint32_t)'h') | ( ((uint32_t)'2') << 8 ) | ( ((uint32_t)'6') << 16 ) | ( ((uint32_t)'4') << 24 ) ) && ( p_dec->fmt_in.i_codec != ( ((uint32_t)'a') | ( ((uint32_t)'v') << 8 ) | ( ((uint32_t)'c') << 16 ) | ( ((uint32_t)'1') << 24 ) ) || p_dec->fmt_in.i_extra < 7 ) ) {\n+    return -666;\n+  }\n+  if( ( p_dec->p_sys = p_sys = malloc( sizeof(decoder_sys_t) ) ) == ((void *)0) ) {\n+    uint8_t *p = &((uint8_t*)p_dec->fmt_in.p_extra)[4];\n+    int i_sps, i_pps;\n+    int i;\n+    i_sps = (*p++)&0x1f;\n+    for( i = 0;\n+\t i < i_sps;\n+\t i++ ) {\n+      int i_length = U16_AT( p );\n+      block_t *p_sps = nal_get_annexeb( p_dec, p + 2, i_length );\n+      ParseNALBlock( p_dec, p_sps );\n+    }\n+  }\n+}\n+static inline int bs_read_ue( bs_t *s ) {\n+  int i = 0;\n+  while( bs_read1( s ) == 0 && s->p < s->p_end && i < 32 ) {\n+    i++;\n+  }\n+  return( ( 1 << i) - 1 + bs_read( s, i ) );\n+}\n+static inline int bs_read_se( bs_t *s ) {\n+  int val = bs_read_ue( s );\n+}\n+block_t *ParseNALBlock( decoder_t *p_dec, block_t *p_frag )\n+{\n+  decoder_sys_t *p_sys = p_dec->p_sys;\n+  block_t *p_pic = ((void *)0);\n+  const int i_nal_type = p_frag->p_buffer[4]&0x1f;\n+  if( ( !p_sys->b_sps || !p_sys->b_pps ) && i_nal_type >= NAL_SLICE && i_nal_type <= NAL_SLICE_IDR ) {\n+  }\n+  else if( i_nal_type >= NAL_SLICE && i_nal_type <= NAL_SLICE_IDR ) {\n+    int i_dec = 0, i_first_mb, i_slice_type;\n+    slice_t slice;\n+    bs_t s;\n+    i_first_mb = bs_read_ue( &s );\n+    switch( (i_slice_type = bs_read_ue( &s )) ) {\n+    }\n+    if( p_sys->i_pic_order_cnt_type == 0 ) {\n+      slice.i_delta_pic_order_cnt0 = bs_read_se( &s );\n+    }\n+    if( slice.i_frame_num != p_sys->slice.i_frame_num\n+\t|| slice.i_nal_ref_idc != p_sys->slice.i_nal_ref_idc )\n+      if( (slice.i_bottom_field_flag != -1)\n+\t  && (slice.i_bottom_field_flag != p_sys->slice.i_bottom_field_flag) )\n+\tif( p_sys->i_pic_order_cnt_type == 0 && ( slice.i_nal_type != p_sys->slice.i_nal_type || slice.i_idr_pic_id != p_sys->slice.i_idr_pic_id ) )\n+\t  do {\n+\t    if( !p_sys->b_header && p_sys->slice.i_frame_type != 0x0002)\n+\t      break;\n+\t    if( p_sys->slice.i_frame_type == 0x0002 && p_sys->p_sps && p_sys->p_pps ) {\n+\t      block_t *p_sps = block_Duplicate( p_sys->p_sps );\n+\t      block_t *p_pps = block_Duplicate( p_sys->p_pps );\n+\t      p_sps->i_pts = p_sys->p_frame->i_pts;\n+\t      block_ChainAppend( &p_sps, p_pps );\n+\t      block_ChainAppend( &p_sps, p_sys->p_frame );\n+\t      p_sys->b_header = 1;\n+\t      p_pic = block_ChainGather( p_sps );\n+\t    }\n+\t  } while(0);\n+  }\n+  else if( i_nal_type == NAL_SPS ) {\n+    bs_t s;\n+    if( p_sys->i_pic_order_cnt_type == 0 ) {\n+    }\n+    else if( p_sys->i_pic_order_cnt_type == 1 ) {\n+      int i_cycle;\n+      i_cycle = bs_read_ue( &s );\n+      while( i_cycle > 0 ) {\n+\tbs_read_se(&s );\n+      }\n+    }\n+    bs_read_ue( &s );\n+    if( p_sys->b_slice )\n+      do {\n+\tif( !p_sys->b_header && p_sys->slice.i_frame_type != 0x0002)\n+\t  break;\n+\tif( p_sys->slice.i_frame_type == 0x0002\n+\t    && p_sys->p_sps && p_sys->p_pps )\n+\t  {\n+\t    block_t *p_sps = block_Duplicate( p_sys->p_sps );\n+\t    block_t *p_pps = block_Duplicate( p_sys->p_pps );\n+\t    p_sps->i_dts = p_sys->p_frame->i_dts;\n+\t    p_sps->i_pts = p_sys->p_frame->i_pts;\n+\t    block_ChainAppend( &p_sps, p_pps );\n+\t    block_ChainAppend( &p_sps, p_sys->p_frame );\n+\t    p_pic = block_ChainGather( p_sps );\n+\t  }\n+\tp_pic->i_flags |= p_sys->slice.i_frame_type;\n+      } while(0);\n+  }\n+  block_ChainAppend( &p_sys->p_frame, p_frag );\n+}"}, {"sha": "b8db2692f3e86036653306c15a7f298fa74ec4dc", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be71b673519ca207b2d8c1eeb5ec104587d55f9a/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=be71b673519ca207b2d8c1eeb5ec104587d55f9a", "patch": "@@ -2595,6 +2595,8 @@ clobber_variable_part (dataflow_set *set, rtx loc, tree decl,\n \t\t\t      pool_free (attrs_pool, anode);\n \t\t\t      *anextp = anext;\n \t\t\t    }\n+\t\t\t  else\n+\t\t\t    anextp = &anode->next;\n \t\t\t}\n \t\t    }\n "}]}