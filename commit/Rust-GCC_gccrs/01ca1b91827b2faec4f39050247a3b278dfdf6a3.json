{"sha": "01ca1b91827b2faec4f39050247a3b278dfdf6a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFjYTFiOTE4MjdiMmZhZWM0ZjM5MDUwMjQ3YTNiMjc4ZGZkZjZhMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:24:25Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-23T23:24:25Z"}, "message": "(jump_optimize): Tighten up test for when we can't delete a set of CC0.\n\nDon't insert insns between set and use of CC0.\n\nFrom-SVN: r2217", "tree": {"sha": "545e05e713e1dda9184b5fdda5af2aa4a5f01838", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/545e05e713e1dda9184b5fdda5af2aa4a5f01838"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ca1b91827b2faec4f39050247a3b278dfdf6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ca1b91827b2faec4f39050247a3b278dfdf6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ca1b91827b2faec4f39050247a3b278dfdf6a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ca1b91827b2faec4f39050247a3b278dfdf6a3/comments", "author": null, "committer": null, "parents": [{"sha": "b6c9b49af96ef5a6bc00143b1a835a75a794e0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6c9b49af96ef5a6bc00143b1a835a75a794e0f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6c9b49af96ef5a6bc00143b1a835a75a794e0f1"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "f32e57ae2428493258936274994853216149bc01", "filename": "gcc/jump.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ca1b91827b2faec4f39050247a3b278dfdf6a3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ca1b91827b2faec4f39050247a3b278dfdf6a3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=01ca1b91827b2faec4f39050247a3b278dfdf6a3", "patch": "@@ -1040,7 +1040,9 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \n \t      && ! ((temp6 = prev_nonnote_insn (insn)) != 0\n \t\t    && GET_CODE (temp6) == INSN\n-\t\t    && sets_cc0_p (PATTERN (temp6)) == -1)\n+\t\t    && (sets_cc0_p (PATTERN (temp6)) == -1\n+\t\t\t|| (sets_cc0_p (PATTERN (temp6)) == 1\n+\t\t\t    && FIND_REG_INC_NOTE (temp6, NULL_RTX))))\n #endif\n \t      )\n \t    {\n@@ -1088,6 +1090,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t\t\t\tnormalizep);\n \t      if (target)\n \t\t{\n+\t\t  rtx before = insn;\n \t\t  rtx seq;\n \n \t\t  /* Put the store-flag insns in front of the first insn\n@@ -1143,7 +1146,15 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t  seq = get_insns ();\n \t\t  end_sequence ();\n \n-\t\t  emit_insns_before (seq, insn);\n+#ifdef HAVE_cc0\n+\t\t  /* If INSN uses CC0, we must not separate it from the\n+\t\t     insn that sets cc0.  */\n+\n+\t\t  if (reg_mentioned_p (cc0_rtx, PATTERN (before)))\n+\t\t    before = prev_nonnote_insn (before);\n+#endif\n+\n+\t\t  emit_insns_before (seq, before);\n \n \t\t  delete_insn (temp);\n \t\t  next = NEXT_INSN (insn);"}]}