{"sha": "2599b56f41927c9122e457bb811dc89a10164d2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU5OWI1NmY0MTkyN2M5MTIyZTQ1N2JiODExZGM4OWExMDE2NGQyYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-03-13T16:43:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-03-13T16:43:54Z"}, "message": "natClassLoader.cc (_Jv_RegisterInitiatingLoader): Check loading constraints.\n\n\t* java/lang/natClassLoader.cc (_Jv_RegisterInitiatingLoader):\n\tCheck loading constraints.\n\t(_Jv_CheckOrCreateLoadingConstraint): New function.\n\t* java/lang/ClassLoader.java (loadingConstraints): New field.\n\t* link.cc (_Jv_Linker::find_field): Use\n\t_Jv_CheckOrCreateLoadingConstraint.\n\t(_Jv_Linker::check_loading_constraints): New function.\n\t(_Jv_Linker::resolve_method_entry): Use\n\tcheck_loading_constraints.\n\t(_Jv_Linker::append_partial_itable): Likewise.\n\t(_Jv_Linker::layout_vtable_methods): Likewise.\n\t* include/jvm.h (_Jv_Linker::check_loading_constraints): Declare.\n\t(_Jv_CheckOrCreateLoadingConstraint): Declare.\n\nFrom-SVN: r133172", "tree": {"sha": "3e00c86cfe961bb8b754069406dbd928045c1a31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e00c86cfe961bb8b754069406dbd928045c1a31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2599b56f41927c9122e457bb811dc89a10164d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599b56f41927c9122e457bb811dc89a10164d2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2599b56f41927c9122e457bb811dc89a10164d2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2599b56f41927c9122e457bb811dc89a10164d2b/comments", "author": null, "committer": null, "parents": [{"sha": "5f5f0635f1921f40de45c6783fe0c4e9b4c0d1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f5f0635f1921f40de45c6783fe0c4e9b4c0d1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f5f0635f1921f40de45c6783fe0c4e9b4c0d1ba"}], "stats": {"total": 167, "additions": 123, "deletions": 44}, "files": [{"sha": "bd92959477bb78ee5e7b92ecb660c225d3416d59", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -1,3 +1,19 @@\n+2008-03-13  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/natClassLoader.cc (_Jv_RegisterInitiatingLoader):\n+\tCheck loading constraints.\n+\t(_Jv_CheckOrCreateLoadingConstraint): New function.\n+\t* java/lang/ClassLoader.java (loadingConstraints): New field.\n+\t* link.cc (_Jv_Linker::find_field): Use\n+\t_Jv_CheckOrCreateLoadingConstraint.\n+\t(_Jv_Linker::check_loading_constraints): New function.\n+\t(_Jv_Linker::resolve_method_entry): Use\n+\tcheck_loading_constraints.\n+\t(_Jv_Linker::append_partial_itable): Likewise.\n+\t(_Jv_Linker::layout_vtable_methods): Likewise.\n+\t* include/jvm.h (_Jv_Linker::check_loading_constraints): Declare.\n+\t(_Jv_CheckOrCreateLoadingConstraint): Declare.\n+\n 2008-03-10  Jim Meyering  <meyering@redhat.com>\n \n \tDon't leak upon failed realloc."}, {"sha": "02b44fe24aec5140d6befa45950951e6af53e733", "filename": "libjava/classpath/lib/java/lang/ClassLoader$AnnotationsKey.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader%24AnnotationsKey.class?ref=2599b56f41927c9122e457bb811dc89a10164d2b"}, {"sha": "694b514cc98be32d6bf989b6d8a22b36bff871cb", "filename": "libjava/classpath/lib/java/lang/ClassLoader.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjava%2Flang%2FClassLoader.class?ref=2599b56f41927c9122e457bb811dc89a10164d2b"}, {"sha": "64cd6b5d7f9ad47c5d515f47b39df67bf531d30b", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -1,6 +1,6 @@\n // jvm.h - Header file for private implementation information. -*- c++ -*-\n \n-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -265,6 +265,7 @@ class _Jv_Linker\n \t\t\t\t      jclass, jclass *);\n   static _Jv_Field *find_field(jclass, jclass, jclass *, _Jv_Utf8Const *,\n \t\t\t       _Jv_Utf8Const *);\n+  static void check_loading_constraints (_Jv_Method *, jclass, jclass);\n   static void prepare_constant_time_tables(jclass);\n   static jshort get_interfaces(jclass, _Jv_ifaces *);\n   static void link_symbol_table(jclass);\n@@ -557,6 +558,9 @@ extern void _Jv_CallAnyMethodA (jobject obj,\n \t\t\t\tjboolean is_jni_call = true,\n \t\t\t\tjclass iface = NULL);\n \n+extern void _Jv_CheckOrCreateLoadingConstraint (jclass,\n+\t\t\t\t\t\tjava::lang::ClassLoader *);\n+\n extern jobject _Jv_NewMultiArray (jclass, jint ndims, jint* dims)\n   __attribute__((__malloc__));\n "}, {"sha": "5112eab983e1e7c2b157b0de8a08743b93c3c5e9", "filename": "libjava/java/lang/ClassLoader.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FClassLoader.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FClassLoader.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.h?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -86,6 +86,7 @@ class java::lang::ClassLoader : public ::java::lang::Object\n   void checkInitialized();\n public: // actually package-private\n   ::java::util::HashMap * __attribute__((aligned(__alignof__( ::java::lang::Object)))) loadedClasses;\n+  ::java::util::HashMap * loadingConstraints;\n   ::java::util::HashMap * definedPackages;\n private:\n   ::java::lang::ClassLoader * parent;"}, {"sha": "e0463ac2af6bcac83cf04c9c401bc1112da484ab", "filename": "libjava/java/lang/ClassLoader.java", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FClassLoader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FClassLoader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClassLoader.java?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -1,5 +1,5 @@\n /* ClassLoader.java -- responsible for loading classes into the VM\n-   Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -45,6 +45,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.lang.ref.WeakReference;\n import java.net.URL;\n import java.nio.ByteBuffer;\n import java.security.CodeSource;\n@@ -129,6 +130,15 @@\n    */\n   final HashMap loadedClasses = new HashMap();\n \n+  /**\n+   * Loading constraints registered with this classloader.  This maps\n+   * a class name to a weak reference to a class.  When the reference\n+   * is non-null, it means that a reference to the name must resolve\n+   * to the indicated class.\n+   */\n+  final HashMap<String, WeakReference<Class>> loadingConstraints\n+    = new HashMap<String, WeakReference<Class>>();\n+\n   /**\n    * All packages defined by this classloader. It is not private in order to\n    * allow native code (and trusted subclasses) access to this field."}, {"sha": "fac1e4dede0c0ccdfc3616d4337def3ca7e3daf4", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -1,6 +1,6 @@\n // natClassLoader.cc - Implementation of java.lang.ClassLoader native methods.\n \n-/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation\n+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2008  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -41,6 +41,7 @@ details.  */\n #include <java/lang/StringBuffer.h>\n #include <java/io/Serializable.h>\n #include <java/lang/Cloneable.h>\n+#include <java/lang/ref/WeakReference.h>\n #include <java/util/HashMap.h>\n #include <gnu/gcj/runtime/BootClassLoader.h>\n #include <gnu/gcj/runtime/SystemClassLoader.h>\n@@ -143,7 +144,21 @@ _Jv_RegisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n       // them later.\n       return;\n     }\n-  loader->loadedClasses->put(klass->name->toString(), klass);\n+\n+  JvSynchronize sync (loader->loadingConstraints);\n+\n+  using namespace java::lang::ref;\n+\n+  jstring name = klass->getName();\n+  WeakReference *ref = (WeakReference *) loader->loadingConstraints->get (name);\n+  if (ref)\n+    {\n+      jclass constraint = (jclass) ref->get();\n+      if (constraint && constraint != klass)\n+\tthrow new java::lang::LinkageError(JvNewStringLatin1(\"loading constraint violated\"));\n+    }\n+  loader->loadingConstraints->put(name, new WeakReference(klass));\n+  loader->loadedClasses->put(name, klass);\n }\n \n // If we found an error while defining an interpreted class, we must\n@@ -156,6 +171,46 @@ _Jv_UnregisterInitiatingLoader (jclass klass, java::lang::ClassLoader *loader)\n   loader->loadedClasses->remove(klass->name->toString());\n }\n \n+// Check a loading constraint.  In particular check that, if there is\n+// a constraint for the name of KLASS in LOADER, that it maps to\n+// KLASS.  If there is no such constraint, make a new one.  If the\n+// constraint is violated, throw an exception.  Do nothing for\n+// primitive types.\n+void\n+_Jv_CheckOrCreateLoadingConstraint (jclass klass,\n+\t\t\t\t    java::lang::ClassLoader *loader)\n+{\n+  // Strip arrays.\n+  while (klass->isArray())\n+    klass = klass->getComponentType();\n+  // Ignore primitive types.\n+  if (klass->isPrimitive())\n+    return;\n+\n+  if (! loader)\n+    loader = java::lang::VMClassLoader::bootLoader;\n+  jstring name = klass->getName();\n+\n+  JvSynchronize sync (loader->loadingConstraints);\n+\n+  using namespace java::lang::ref;\n+\n+  WeakReference *ref = (WeakReference *) loader->loadingConstraints->get (name);\n+  if (ref)\n+    {\n+      jclass constraint = (jclass) ref->get();\n+      if (constraint)\n+\t{\n+\t  if (klass != constraint)\n+\t    throw new java::lang::LinkageError(JvNewStringLatin1(\"loading constraint violated\"));\n+\t  // Otherwise, all is ok.\n+\t  return;\n+\t}\n+    }\n+  // No constraint (or old constraint GC'd).  Make a new one.\n+  loader->loadingConstraints->put(name, new WeakReference(klass));\n+}\n+\n \n // Class registration.\n //"}, {"sha": "f995531e813ecf73ac16e600107307bb87fd37fb", "filename": "libjava/link.cc", "status": "modified", "additions": 33, "deletions": 40, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2599b56f41927c9122e457bb811dc89a10164d2b/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=2599b56f41927c9122e457bb811dc89a10164d2b", "patch": "@@ -246,13 +246,9 @@ _Jv_Linker::find_field (jclass klass, jclass owner,\n   if (_Jv_CheckAccess (klass, *found_class, the_field->flags))\n     {\n       // Note that the field returned by find_field_helper is always\n-      // resolved.  There's no point checking class loaders here,\n-      // since we already did the work to look up all the types.\n-      // FIXME: being lazy here would be nice.\n-      if (the_field->type != field_type)\n-\tthrow new java::lang::LinkageError\n-\t  (JvNewStringLatin1 \n-\t   (\"field type mismatch with different loaders\"));\n+      // resolved.  However, we still use the constraint mechanism\n+      // because this may affect other lookups.\n+      _Jv_CheckOrCreateLoadingConstraint (klass, (*found_class)->loader);\n     }\n   else\n     {\n@@ -269,6 +265,23 @@ _Jv_Linker::find_field (jclass klass, jclass owner,\n   return the_field;\n }\n \n+// Check loading constraints for method.\n+void\n+_Jv_Linker::check_loading_constraints (_Jv_Method *method, jclass self_class,\n+\t\t\t\t       jclass other_class)\n+{\n+  JArray<jclass> *klass_args;\n+  jclass klass_return;\n+\n+  _Jv_GetTypesFromSignature (method, self_class, &klass_args, &klass_return);\n+  jclass *klass_arg = elements (klass_args);\n+  java::lang::ClassLoader *found_loader = other_class->loader;\n+\n+  _Jv_CheckOrCreateLoadingConstraint (klass_return, found_loader);\n+  for (int i = 0; i < klass_args->length; i++)\n+    _Jv_CheckOrCreateLoadingConstraint (*(klass_arg++), found_loader);\n+}\n+\n _Jv_Method *\n _Jv_Linker::resolve_method_entry (jclass klass, jclass &found_class,\n \t\t\t\t  int class_index, int name_and_type_index,\n@@ -359,39 +372,10 @@ _Jv_Linker::resolve_method_entry (jclass klass, jclass &found_class,\n       throw new java::lang::NoSuchMethodError (sb->toString());\n     }\n \n-  // if (found_class->loader != klass->loader), then we\n-  // must actually check that the types of arguments\n-  // correspond.  That is, for each argument type, and\n-  // the return type, doing _Jv_FindClassFromSignature\n-  // with either loader should produce the same result,\n-  // i.e., exactly the same jclass object. JVMS 5.4.3.3\n+  // if (found_class->loader != klass->loader), then we must actually\n+  // check that the types of arguments correspond.  JVMS 5.4.3.3.\n   if (found_class->loader != klass->loader)\n-    {\n-      JArray<jclass> *found_args, *klass_args;\n-      jclass found_return, klass_return;\n-\n-      _Jv_GetTypesFromSignature (the_method,\n-\t\t\t\t found_class,\n-\t\t\t\t &found_args,\n-\t\t\t\t &found_return);\n-      _Jv_GetTypesFromSignature (the_method,\n-\t\t\t\t klass,\n-\t\t\t\t &klass_args,\n-\t\t\t\t &klass_return);\n-\n-      jclass *found_arg = elements (found_args);\n-      jclass *klass_arg = elements (klass_args);\n-\n-      for (int i = 0; i < found_args->length; i++)\n-\t{\n-\t  if (*(found_arg++) != *(klass_arg++))\n-\t    throw new java::lang::LinkageError (JvNewStringLatin1 \n-\t      (\"argument type mismatch with different loaders\"));\n-\t}\n-      if (found_return != klass_return)\n-\tthrow new java::lang::LinkageError (JvNewStringLatin1\n-\t  (\"return type mismatch with different loaders\"));\n-    }\n+    check_loading_constraints (the_method, klass, found_class);\n   \n   return the_method;\n }\n@@ -925,7 +909,8 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n \tcontinue;\n \n       meth = NULL;\n-      for (jclass cl = klass; cl; cl = cl->getSuperclass())\n+      jclass cl;\n+      for (cl = klass; cl; cl = cl->getSuperclass())\n         {\n \t  meth = _Jv_GetMethodLocal (cl, iface->methods[j].name,\n \t\t\t\t     iface->methods[j].signature);\n@@ -947,6 +932,9 @@ _Jv_Linker::append_partial_itable (jclass klass, jclass iface,\n \t    itable[pos] = (void *) &_Jv_ThrowAbstractMethodError;\n \t  else\n \t    itable[pos] = meth->ncode;\n+\n+\t  if (cl->loader != iface->loader)\n+\t    check_loading_constraints (meth, cl, iface);\n \t}\n       else\n         {\n@@ -1501,6 +1489,11 @@ _Jv_Linker::layout_vtable_methods (jclass klass)\n \t\t  sb->append(_Jv_GetMethodString(declarer, super_meth));\n \t\t  throw new VerifyError(sb->toString());\n \t\t}\n+\t      else if (declarer->loader != klass->loader)\n+\t\t{\n+\t\t  // JVMS 5.4.2.\n+\t\t  check_loading_constraints (meth, klass, declarer);\n+\t\t}\n \t    }\n \t}\n "}]}