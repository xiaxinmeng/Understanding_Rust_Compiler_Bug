{"sha": "1ebd2b2c9407796cd526137038b9b885f68ffb4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWViZDJiMmM5NDA3Nzk2Y2Q1MjYxMzcwMzhiOWI4ODVmNjhmZmI0ZA==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-24T21:35:20Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-25T01:23:43Z"}, "message": "c: add support for per-location warning groups.\n\ngcc/ChangeLog:\n\t* tree.h (warning_suppressed_at, copy_warning,\n\twarning_suppressed_p, suppress_warning): New functions.\n\ngcc/c/ChangeLog:\n\n\t* c-decl.c (pop_scope): Replace direct uses of TREE_NO_WARNING with\n\twarning_suppressed_p, suppress_warning, and copy_no_warning.\n\t(diagnose_mismatched_decls): Same.\n\t(duplicate_decls): Same.\n\t(grokdeclarator): Same.\n\t(finish_function): Same.\n\t(c_write_global_declarations_1): Same.\n\t* c-fold.c (c_fully_fold_internal): Same.\n\t* c-parser.c (c_parser_expr_no_commas): Same.\n\t(c_parser_postfix_expression): Same.\n\t* c-typeck.c (array_to_pointer_conversion): Same.\n\t(function_to_pointer_conversion): Same.\n\t(default_function_array_conversion): Same.\n\t(convert_lvalue_to_rvalue): Same.\n\t(default_conversion): Same.\n\t(build_indirect_ref): Same.\n\t(build_function_call_vec): Same.\n\t(build_atomic_assign): Same.\n\t(build_unary_op): Same.\n\t(c_finish_return): Same.\n\t(emit_side_effect_warnings): Same.\n\t(c_finish_stmt_expr): Same.\n\t(c_omp_clause_copy_ctor): Same.", "tree": {"sha": "3cad29c233769e764d045ba8383bcd16df07bb04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cad29c233769e764d045ba8383bcd16df07bb04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ebd2b2c9407796cd526137038b9b885f68ffb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebd2b2c9407796cd526137038b9b885f68ffb4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebd2b2c9407796cd526137038b9b885f68ffb4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebd2b2c9407796cd526137038b9b885f68ffb4d/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7036e9ef462fde8181bece4ac4e03f3aa27204dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7036e9ef462fde8181bece4ac4e03f3aa27204dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7036e9ef462fde8181bece4ac4e03f3aa27204dc"}], "stats": {"total": 94, "additions": 52, "deletions": 42}, "files": [{"sha": "983d65e930c276c17c99962b8245419dfe7247a0", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=1ebd2b2c9407796cd526137038b9b885f68ffb4d", "patch": "@@ -1295,7 +1295,7 @@ pop_scope (void)\n \tcase VAR_DECL:\n \t  /* Warnings for unused variables.  */\n \t  if ((!TREE_USED (p) || !DECL_READ_P (p))\n-\t      && !TREE_NO_WARNING (p)\n+\t      && !warning_suppressed_p (p, OPT_Wunused_but_set_variable)\n \t      && !DECL_IN_SYSTEM_HEADER (p)\n \t      && DECL_NAME (p)\n \t      && !DECL_ARTIFICIAL (p)\n@@ -2159,8 +2159,8 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n \n       if (DECL_IN_SYSTEM_HEADER (newdecl)\n \t  || DECL_IN_SYSTEM_HEADER (olddecl)\n-\t  || TREE_NO_WARNING (newdecl)\n-\t  || TREE_NO_WARNING (olddecl))\n+\t  || warning_suppressed_p (newdecl, OPT_Wpedantic)\n+\t  || warning_suppressed_p (olddecl, OPT_Wpedantic))\n \treturn true;  /* Allow OLDDECL to continue in use.  */\n \n       if (variably_modified_type_p (newtype, NULL))\n@@ -2956,7 +2956,7 @@ duplicate_decls (tree newdecl, tree olddecl)\n   if (!diagnose_mismatched_decls (newdecl, olddecl, &newtype, &oldtype))\n     {\n       /* Avoid `unused variable' and other warnings for OLDDECL.  */\n-      TREE_NO_WARNING (olddecl) = 1;\n+      suppress_warning (olddecl, OPT_Wunused);\n       return false;\n     }\n \n@@ -7543,10 +7543,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t   FIELD_DECL, declarator->u.id.id, type);\n \tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \tif (bitfield && !declarator->u.id.id)\n-\t  {\n-\t    TREE_NO_WARNING (decl) = 1;\n-\t    DECL_PADDING_P (decl) = 1;\n-\t  }\n+\t  DECL_PADDING_P (decl) = 1;\n \n \tif (size_varies)\n \t  C_DECL_VARIABLE_SIZE (decl) = 1;\n@@ -10244,7 +10241,7 @@ finish_function (location_t end_loc)\n       && targetm.warn_func_return (fndecl)\n       && warning (OPT_Wreturn_type,\n \t\t  \"no return statement in function returning non-void\"))\n-    TREE_NO_WARNING (fndecl) = 1;\n+    suppress_warning (fndecl, OPT_Wreturn_type);\n \n   /* Complain about parameters that are only set, but never otherwise used.  */\n   if (warn_unused_but_set_parameter)\n@@ -10259,7 +10256,7 @@ finish_function (location_t end_loc)\n \t    && !DECL_READ_P (decl)\n \t    && DECL_NAME (decl)\n \t    && !DECL_ARTIFICIAL (decl)\n-\t    && !TREE_NO_WARNING (decl))\n+\t    && !warning_suppressed_p (decl, OPT_Wunused_but_set_parameter))\n \t  warning_at (DECL_SOURCE_LOCATION (decl),\n \t\t      OPT_Wunused_but_set_parameter,\n \t\t      \"parameter %qD set but not used\", decl);\n@@ -12126,19 +12123,20 @@ c_write_global_declarations_1 (tree globals)\n \t{\n \t  if (C_DECL_USED (decl))\n \t    {\n+\t      /* TODO: Add OPT_Wundefined-inline.  */\n \t      if (pedwarn (input_location, 0, \"%q+F used but never defined\",\n \t\t\t   decl))\n-\t\tTREE_NO_WARNING (decl) = 1;\n+\t\tsuppress_warning (decl /* OPT_Wundefined-inline.  */);\n \t    }\n \t  /* For -Wunused-function warn about unused static prototypes.  */\n \t  else if (warn_unused_function\n \t\t   && ! DECL_ARTIFICIAL (decl)\n-\t\t   && ! TREE_NO_WARNING (decl))\n+\t\t   && ! warning_suppressed_p (decl, OPT_Wunused_function))\n \t    {\n \t      if (warning (OPT_Wunused_function,\n \t\t\t   \"%q+F declared %<static%> but never defined\",\n \t\t\t   decl))\n-\t\tTREE_NO_WARNING (decl) = 1;\n+\t\tsuppress_warning (decl, OPT_Wunused_function);\n \t    }\n \t}\n "}, {"sha": "0ebcb469d287e6b4254010b81282cb14fd7c51e6", "filename": "gcc/c/c-fold.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-fold.c?ref=1ebd2b2c9407796cd526137038b9b885f68ffb4d", "patch": "@@ -154,7 +154,7 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n   tree orig_op0, orig_op1, orig_op2;\n   bool op0_const = true, op1_const = true, op2_const = true;\n   bool op0_const_self = true, op1_const_self = true, op2_const_self = true;\n-  bool nowarning = TREE_NO_WARNING (expr);\n+  bool nowarning = warning_suppressed_p (expr, OPT_Woverflow);\n   bool unused_p;\n   bool op0_lval = false;\n   source_range old_range;\n@@ -670,13 +670,13 @@ c_fully_fold_internal (tree expr, bool in_init, bool *maybe_const_operands,\n  out:\n   /* Some folding may introduce NON_LVALUE_EXPRs; all lvalue checks\n      have been done by this point, so remove them again.  */\n-  nowarning |= TREE_NO_WARNING (ret);\n+  nowarning |= warning_suppressed_p (ret, OPT_Woverflow);\n   STRIP_TYPE_NOPS (ret);\n-  if (nowarning && !TREE_NO_WARNING (ret))\n+  if (nowarning && !warning_suppressed_p (ret, OPT_Woverflow))\n     {\n       if (!CAN_HAVE_LOCATION_P (ret))\n \tret = build1 (NOP_EXPR, TREE_TYPE (ret), ret);\n-      TREE_NO_WARNING (ret) = 1;\n+      suppress_warning (ret, OPT_Woverflow);\n     }\n   if (ret != expr)\n     {"}, {"sha": "3922b569c3a69444050dcc060fdb3dca33aa16a7", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=1ebd2b2c9407796cd526137038b9b885f68ffb4d", "patch": "@@ -7558,7 +7558,7 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after,\n     ret.original_code = MODIFY_EXPR;\n   else\n     {\n-      TREE_NO_WARNING (ret.value) = 1;\n+      suppress_warning (ret.value, OPT_Wparentheses);\n       ret.original_code = ERROR_MARK;\n     }\n   ret.original_type = NULL;\n@@ -9088,7 +9088,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t  c_parser_consume_token (parser);\n \t  expr = c_parser_expression (parser);\n \t  if (TREE_CODE (expr.value) == MODIFY_EXPR)\n-\t    TREE_NO_WARNING (expr.value) = 1;\n+\t    suppress_warning (expr.value, OPT_Wparentheses);\n \t  if (expr.original_code != C_MAYBE_CONST_EXPR\n \t      && expr.original_code != SIZEOF_EXPR)\n \t    expr.original_code = ERROR_MARK;"}, {"sha": "5349ef1f392cfba0bf183cee50fd4b0ffbd4ae62", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=1ebd2b2c9407796cd526137038b9b885f68ffb4d", "patch": "@@ -1911,8 +1911,7 @@ array_to_pointer_conversion (location_t loc, tree exp)\n \n   STRIP_TYPE_NOPS (exp);\n \n-  if (TREE_NO_WARNING (orig_exp))\n-    TREE_NO_WARNING (exp) = 1;\n+  copy_warning (exp, orig_exp);\n \n   ptrtype = build_pointer_type (restype);\n \n@@ -1945,8 +1944,7 @@ function_to_pointer_conversion (location_t loc, tree exp)\n \n   STRIP_TYPE_NOPS (exp);\n \n-  if (TREE_NO_WARNING (orig_exp))\n-    TREE_NO_WARNING (exp) = 1;\n+  copy_warning (exp, orig_exp);\n \n   return build_unary_op (loc, ADDR_EXPR, exp, false);\n }\n@@ -2055,8 +2053,7 @@ default_function_array_conversion (location_t loc, struct c_expr exp)\n \t    exp.value = TREE_OPERAND (exp.value, 0);\n \t  }\n \n-\tif (TREE_NO_WARNING (orig_exp))\n-\t  TREE_NO_WARNING (exp.value) = 1;\n+\tcopy_warning (exp.value, orig_exp);\n \n \tlvalue_array_p = !not_lvalue && lvalue_p (exp.value);\n \tif (!flag_isoc99 && !lvalue_array_p)\n@@ -2154,7 +2151,8 @@ convert_lvalue_to_rvalue (location_t loc, struct c_expr exp,\n       tmp = create_tmp_var_raw (nonatomic_type);\n       tmp_addr = build_unary_op (loc, ADDR_EXPR, tmp, false);\n       TREE_ADDRESSABLE (tmp) = 1;\n-      TREE_NO_WARNING (tmp) = 1;\n+      /* Do not disable warnings for TMP even though it's artificial.\n+\t -Winvalid-memory-model depends on it.  */\n \n       /* Issue __atomic_load (&expr, &tmp, SEQ_CST);  */\n       fndecl = builtin_decl_explicit (BUILT_IN_ATOMIC_LOAD);\n@@ -2251,8 +2249,7 @@ default_conversion (tree exp)\n   orig_exp = exp;\n   STRIP_TYPE_NOPS (exp);\n \n-  if (TREE_NO_WARNING (orig_exp))\n-    TREE_NO_WARNING (exp) = 1;\n+  copy_warning (exp, orig_exp);\n \n   if (code == VOID_TYPE)\n     {\n@@ -2616,7 +2613,7 @@ build_indirect_ref (location_t loc, tree ptr, ref_operator errstring)\n \t  if (warn_strict_aliasing > 2)\n \t    if (strict_aliasing_warning (EXPR_LOCATION (pointer),\n \t\t\t\t\t type, TREE_OPERAND (pointer, 0)))\n-\t      TREE_NO_WARNING (pointer) = 1;\n+\t      suppress_warning (pointer, OPT_Wstrict_aliasing_);\n \t}\n \n       if (TREE_CODE (pointer) == ADDR_EXPR\n@@ -3218,7 +3215,7 @@ build_function_call_vec (location_t loc, vec<location_t> arg_loc,\n   /* If -Wnonnull warning has been diagnosed, avoid diagnosing it again\n      later.  */\n   if (warned_p && TREE_CODE (result) == CALL_EXPR)\n-    TREE_NO_WARNING (result) = 1;\n+    suppress_warning (result, OPT_Wnonnull);\n \n   /* In this improbable scenario, a nested function returns a VM type.\n      Create a TARGET_EXPR so that the call always has a LHS, much as\n@@ -4167,7 +4164,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n \t\t\t\t\t\t      TYPE_UNQUALIFIED);\n   val = create_tmp_var_raw (nonatomic_rhs_type);\n   TREE_ADDRESSABLE (val) = 1;\n-  TREE_NO_WARNING (val) = 1;\n+  suppress_warning (val);\n   rhs = build4 (TARGET_EXPR, nonatomic_rhs_type, val, rhs, NULL_TREE,\n \t\tNULL_TREE);\n   TREE_SIDE_EFFECTS (rhs) = 1;\n@@ -4268,7 +4265,7 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n \n       newval = create_tmp_var_raw (nonatomic_lhs_type);\n       TREE_ADDRESSABLE (newval) = 1;\n-      TREE_NO_WARNING (newval) = 1;\n+      suppress_warning (newval);\n       rhs = build4 (TARGET_EXPR, nonatomic_lhs_type, newval, func_call,\n \t\t    NULL_TREE, NULL_TREE);\n       SET_EXPR_LOCATION (rhs, loc);\n@@ -4287,12 +4284,12 @@ build_atomic_assign (location_t loc, tree lhs, enum tree_code modifycode,\n   old = create_tmp_var_raw (nonatomic_lhs_type);\n   old_addr = build_unary_op (loc, ADDR_EXPR, old, false);\n   TREE_ADDRESSABLE (old) = 1;\n-  TREE_NO_WARNING (old) = 1;\n+  suppress_warning (old);\n \n   newval = create_tmp_var_raw (nonatomic_lhs_type);\n   newval_addr = build_unary_op (loc, ADDR_EXPR, newval, false);\n   TREE_ADDRESSABLE (newval) = 1;\n-  TREE_NO_WARNING (newval) = 1;\n+  suppress_warning (newval);\n \n   loop_decl = create_artificial_label (loc);\n   loop_label = build1 (LABEL_EXPR, void_type_node, loop_decl);\n@@ -4781,8 +4778,6 @@ build_unary_op (location_t location, enum tree_code code, tree xarg,\n \telse\n \t  val = build2 (code, TREE_TYPE (arg), arg, inc);\n \tTREE_SIDE_EFFECTS (val) = 1;\n-\tif (TREE_CODE (val) != code)\n-\t  TREE_NO_WARNING (val) = 1;\n \tret = val;\n \tgoto return_build_unary_op;\n       }\n@@ -10962,7 +10957,8 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n     }\n \n   ret_stmt = build_stmt (loc, RETURN_EXPR, retval);\n-  TREE_NO_WARNING (ret_stmt) |= no_warning;\n+  if (no_warning)\n+    suppress_warning (ret_stmt, OPT_Wreturn_type);\n   return add_stmt (ret_stmt);\n }\n \f\n@@ -11238,7 +11234,8 @@ emit_side_effect_warnings (location_t loc, tree expr)\n     ;\n   else if (!TREE_SIDE_EFFECTS (expr))\n     {\n-      if (!VOID_TYPE_P (TREE_TYPE (expr)) && !TREE_NO_WARNING (expr))\n+      if (!VOID_TYPE_P (TREE_TYPE (expr))\n+\t  && !warning_suppressed_p (expr, OPT_Wunused_value))\n \twarning_at (loc, OPT_Wunused_value, \"statement with no effect\");\n     }\n   else if (TREE_CODE (expr) == COMPOUND_EXPR)\n@@ -11254,8 +11251,8 @@ emit_side_effect_warnings (location_t loc, tree expr)\n       if (!TREE_SIDE_EFFECTS (r)\n \t  && !VOID_TYPE_P (TREE_TYPE (r))\n \t  && !CONVERT_EXPR_P (r)\n-\t  && !TREE_NO_WARNING (r)\n-\t  && !TREE_NO_WARNING (expr))\n+\t  && !warning_suppressed_p (r, OPT_Wunused_value)\n+\t  && !warning_suppressed_p (expr, OPT_Wunused_value))\n \twarning_at (cloc, OPT_Wunused_value,\n \t\t    \"right-hand operand of comma expression has no effect\");\n     }\n@@ -11424,7 +11421,7 @@ c_finish_stmt_expr (location_t loc, tree body)\n       last = c_wrap_maybe_const (last, true);\n       /* Do not warn if the return value of a statement expression is\n \t unused.  */\n-      TREE_NO_WARNING (last) = 1;\n+      suppress_warning (last, OPT_Wunused);\n       return last;\n     }\n \n@@ -15503,7 +15500,7 @@ c_omp_clause_copy_ctor (tree clause, tree dst, tree src)\n   tree tmp = create_tmp_var (nonatomic_type);\n   tree tmp_addr = build_fold_addr_expr (tmp);\n   TREE_ADDRESSABLE (tmp) = 1;\n-  TREE_NO_WARNING (tmp) = 1;\n+  suppress_warning (tmp);\n   tree src_addr = build_fold_addr_expr (src);\n   tree dst_addr = build_fold_addr_expr (dst);\n   tree seq_cst = build_int_cst (integer_type_node, MEMMODEL_SEQ_CST);"}, {"sha": "8bdf16d8b4ab18d3ddc7b91c81af711d1d6e0b1c", "filename": "gcc/tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ebd2b2c9407796cd526137038b9b885f68ffb4d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1ebd2b2c9407796cd526137038b9b885f68ffb4d", "patch": "@@ -6448,9 +6448,24 @@ constexpr opt_code no_warning = opt_code ();\n /* Wildcard code that refers to all warnings.  */\n constexpr opt_code all_warnings = N_OPTS;\n \n+/* Return the disposition for a warning (or all warnings by default)\n+   at a location.  */\n+extern bool warning_suppressed_at (location_t, opt_code = all_warnings);\n /* Set the disposition for a warning (or all warnings by default)\n    at a location to disabled by default.  */\n extern bool suppress_warning_at (location_t, opt_code = all_warnings,\n \t\t\t\t bool = true);\n+/* Copy warning disposition from one location to another.  */\n+extern void copy_warning (location_t, location_t);\n+\n+/* Return the disposition for a warning (or all warnings by default)\n+   for an expression.  */\n+extern bool warning_suppressed_p (const_tree, opt_code = all_warnings);\n+/* Set the disposition for a warning (or all warnings by default)\n+   at a location to disabled by default.  */\n+extern void suppress_warning (tree, opt_code = all_warnings, bool = true)\n+  ATTRIBUTE_NONNULL (1);\n+/* Copy warning disposition from one expression to another.  */\n+extern void copy_warning (tree, const_tree);\n \n #endif  /* GCC_TREE_H  */"}]}