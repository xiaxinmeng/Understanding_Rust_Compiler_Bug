{"sha": "4f8102dba53e66127cf93ca6bc209bb222d1afb6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY4MTAyZGJhNTNlNjYxMjdjZjkzY2E2YmMyMDliYjIyMmQxYWZiNg==", "commit": {"author": {"name": "Ramana Radhakrishnan", "email": "ramana.radhakrishnan@codito.com", "date": "2004-10-20T02:21:04Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-10-20T02:21:04Z"}, "message": "re PR target/17317 (Match Constraints for *movdf_insn fails)\n\n\t* config/arc/lib1funcs.asm (___umulsidi3): Correct usage of flags.\n\n\tPR target/17317\n\t* config/arc/arc.h (REGNO_OK_FOR_BASE_P,REGNO_OK_FOR_INDEX_P,\n\tREG_OK_FOR_BASE, REG_OK_FOR_INDEX): Consider blink(r31) as a valid\n\tbase and index register for loads.\n\n\t* config/arc/t-arc: Fix multilib handling.\n\nFrom-SVN: r89316", "tree": {"sha": "c0e18330c03b55c90c16e7020fbe47cb5df2ea6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0e18330c03b55c90c16e7020fbe47cb5df2ea6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f8102dba53e66127cf93ca6bc209bb222d1afb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8102dba53e66127cf93ca6bc209bb222d1afb6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f8102dba53e66127cf93ca6bc209bb222d1afb6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f8102dba53e66127cf93ca6bc209bb222d1afb6/comments", "author": null, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a59530dd4b65f59444d0adc1e50f7ca4de375a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a59530dd4b65f59444d0adc1e50f7ca4de375a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a59530dd4b65f59444d0adc1e50f7ca4de375a2"}], "stats": {"total": 73, "additions": 29, "deletions": 44}, "files": [{"sha": "93ff053fefd9a284be4608eef8a6620268c2c855", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f8102dba53e66127cf93ca6bc209bb222d1afb6", "patch": "@@ -1,3 +1,14 @@\n+2004-10-18  Ramana Radhakrishnan  <ramana.radhakrishnan@codito.com>\r\n+\r\n+\t* config/arc/lib1funcs.asm (___umulsidi3): Correct usage of flags.\r\n+\r\n+\tPR target/17317\r\n+\t* config/arc/arc.h (REGNO_OK_FOR_BASE_P,REGNO_OK_FOR_INDEX_P,\r\n+\tREG_OK_FOR_BASE, REG_OK_FOR_INDEX): Consider blink(r31) as a valid\r\n+\tbase and index register for loads.\r\n+\r\n+\t* config/arc/t-arc: Fix multilib handling.\n+\n 2004-10-20  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \t* cfgrtl.c (rtl_verify_flow_info_1): When checking insns in a bb,"}, {"sha": "0c48893d15b431cfbc9e0eeaffd233cab5406782", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=4f8102dba53e66127cf93ca6bc209bb222d1afb6", "patch": "@@ -456,9 +456,9 @@ extern enum reg_class arc_regno_reg_class[FIRST_PSEUDO_REGISTER];\n    Since they use reg_renumber, they are safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c.  */\n #define REGNO_OK_FOR_BASE_P(REGNO) \\\n-((REGNO) < 29 || (unsigned) reg_renumber[REGNO] < 29)\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32)\n #define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-((REGNO) < 29 || (unsigned) reg_renumber[REGNO] < 29)\n+((REGNO) < 32 || (unsigned) reg_renumber[REGNO] < 32)\n \n /* Given an rtx X being reloaded into a reg required to be\n    in class CLASS, return the class of reg to actually use.\n@@ -820,11 +820,11 @@ do { \\\n /* Nonzero if X is a hard reg that can be used as an index\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_INDEX_P(X) \\\n-((unsigned) REGNO (X) - 29 >= FIRST_PSEUDO_REGISTER - 29)\n+((unsigned) REGNO (X) - 32 >= FIRST_PSEUDO_REGISTER - 32)\n /* Nonzero if X is a hard reg that can be used as a base reg\n    or if it is a pseudo reg.  */\n #define REG_OK_FOR_BASE_P(X) \\\n-((unsigned) REGNO (X) - 29 >= FIRST_PSEUDO_REGISTER - 29)\n+((unsigned) REGNO (X) - 32 >= FIRST_PSEUDO_REGISTER - 32)\n \n #else\n "}, {"sha": "21ec4664ea733c11f549e3f552e015244c18662e", "filename": "gcc/config/arc/lib1funcs.asm", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flib1funcs.asm?ref=4f8102dba53e66127cf93ca6bc209bb222d1afb6", "patch": "@@ -1,6 +1,6 @@\n ; libgcc routines for ARC cpu.\n \n-/* Copyright (C) 1995, 1997 Free Software Foundation, Inc.\n+/* Copyright (C) 1995, 1997,2004 Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -89,8 +89,12 @@ ___umulsidi3:\n \tnop\n \tbeq.nd .Ldone\n \tand.f 0,r0,1\t\t; if (a & 1)\n-\tadd.nz r4,r4,r1\t\t; r += b\n-\tadc.nz r3,r3,r2\n+\tcmp r0,0\n+\tnop\n+\tbeq .Ldontadd\n+\tadd.f r4,r4,r1\t\t; r += b\n+\tadc   r3,r3,r2\n+L dontadd:\n \tlsr r0,r0\t\t; a >>= 1\n \tlsl.f r1,r1\t\t; b <<= 1\n \tb.d .Lloop"}, {"sha": "b39fb128e102f17c57e2b04fc97ef647c8bda1bb", "filename": "gcc/config/arc/t-arc", "status": "modified", "additions": 7, "deletions": 37, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Ft-arc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f8102dba53e66127cf93ca6bc209bb222d1afb6/gcc%2Fconfig%2Farc%2Ft-arc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Ft-arc?ref=4f8102dba53e66127cf93ca6bc209bb222d1afb6", "patch": "@@ -26,46 +26,16 @@ fp-bit.c: $(srcdir)/config/fp-bit.c\n \n # .init/.fini section routines\n \n-crtinit.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n+$(T)crtinit.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -DCRT_INIT -finhibit-size-directive -fno-inline-functions \\\n-\t  -g0 -c $(srcdir)/config/arc/initfini.c -o crtinit.o\n+\t $(MULTILIB_CFLAGS) -DCRT_INIT -finhibit-size-directive -fno-inline-functions \\\n+\t -g0 -c $(srcdir)/config/arc/initfini.c -o $(T)crtinit.o\n \n-crtfini.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n+$(T)crtfini.o: $(srcdir)/config/arc/initfini.c $(GCC_PASSES) $(CONFIG_H)\n \t$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(INCLUDES) $(CRTSTUFF_T_CFLAGS) \\\n-\t  -DCRT_FINI -finhibit-size-directive -fno-inline-functions \\\n-\t  -g0 -c $(srcdir)/config/arc/initfini.c -o crtfini.o\n+\t -DCRT_FINI $(MULTILIB_CFLAGS) -finhibit-size-directive -fno-inline-functions \\\n+\t -g0 -c $(srcdir)/config/arc/initfini.c -o $(T)crtfini.o\n \n MULTILIB_OPTIONS = EB\n MULTILIB_DIRNAMES = be\n-\n-# We need our own versions to build multiple copies of crt*.o.\n-# ??? Use new support in Makefile.\n-\n-LIBGCC = stmp-multilib-arc\n-INSTALL_LIBGCC = install-multilib-arc\n-\n-stmp-multilib-arc: stmp-multilib\n-\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n-\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n-\t  flags=`echo $$i | sed -e 's/^[^;]*;//' -e 's/@/ -/g'`; \\\n-\t  $(MAKE) GCC_FOR_TARGET=\"$(GCC_FOR_TARGET)\" \\\n-\t    CC=\"$(CC)\" CFLAGS=\"$(CFLAGS)\" \\\n-\t    BUILD_PREFIX=\"$(BUILD_PREFIX)\" BUILD_PREFIX_1=\"$(BUILD_PREFIX_1)\" \\\n-\t    GCC_CFLAGS=\"$(GCC_CFLAGS) $${flags}\" \\\n-\t    INCLUDES=\"$(INCLUDES)\" CRTSTUFF_T_CFLAGS=$(CRTSTUFF_T_CFLAGS) \\\n-\t    dir=\"$${dir}\" crtinit.o crtfini.o; \\\n-\t  if [ $$? -eq 0 ] ; then true; else exit 1; fi; \\\n-\tdone\n-\ttouch stmp-multilib-arc\n-\n-install-multilib-arc: install-multilib\n-\tfor i in `$(GCC_FOR_TARGET) --print-multi-lib`; do \\\n-\t  dir=`echo $$i | sed -e 's/;.*$$//'`; \\\n-\t  rm -f $(DESTDIR)$(libsubdir)/$${dir}/crtinit.o; \\\n-\t  $(INSTALL_DATA) $${dir}/crtinit.o $(DESTDIR)$(libsubdir)/$${dir}/crtinit.o; \\\n-\t  chmod a-x $(DESTDIR)$(libsubdir)/$${dir}/crtinit.o; \\\n-\t  rm -f $(DESTDIR)$(libsubdir)/$${dir}/crtfini.o; \\\n-\t  $(INSTALL_DATA) $${dir}/crtfini.o $(DESTDIR)$(libsubdir)/$${dir}/crtfini.o; \\\n-\t  chmod a-x $(DESTDIR)$(libsubdir)/$${dir}/crtfini.o; \\\n-\tdone\n+EXTRA_MULTILIB_PARTS = crtinit.o crtfini.o"}]}