{"sha": "fac009a816ef2045f260f38582d367fec16b5879", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmFjMDA5YTgxNmVmMjA0NWYyNjBmMzg1ODJkMzY3ZmVjMTZiNTg3OQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2011-05-29T16:35:33Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2011-05-29T16:35:33Z"}, "message": "lto-streamer-out.c (hash_string_slot_node): Hash string based on its length.\n\n\t* lto-streamer-out.c (hash_string_slot_node): Hash string based on its\n\tlength.\n\t(string_slot_free): Remove\n\t(create_output_block): Initialize obstack.\n\t(destroy_output_block): Free obstack.\n\t(lto_string_index): Add PERSISTENT parameter; do not duplicate\n\tthe string unless it needs to be added into the hash.\n\t(lto_output_string_with_length): Add persistent attribute;\n\thandle NULL strings.\n\t(lto_output_string): Add PERSISTENT parameter.\n\t(output_string_cst, output_identifier): Simplify.\n\t(lto_output_location_bitpack): Update.\n\t(lto_output_builtin_tree): Update.\n\t* lto-streamer.h (struct output_block): Add obstack.\n\t(lto_output_string, lto_output_string_with_length): Remove declarations;\n\tfunctions are static now.\n\nFrom-SVN: r174397", "tree": {"sha": "55488db88a4ef43a345e0a0421381d1495453b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55488db88a4ef43a345e0a0421381d1495453b7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fac009a816ef2045f260f38582d367fec16b5879", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac009a816ef2045f260f38582d367fec16b5879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fac009a816ef2045f260f38582d367fec16b5879", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fac009a816ef2045f260f38582d367fec16b5879/comments", "author": null, "committer": null, "parents": [{"sha": "8bea6ce4920cab0c065bcc6ae1eb0b26fc582ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bea6ce4920cab0c065bcc6ae1eb0b26fc582ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bea6ce4920cab0c065bcc6ae1eb0b26fc582ebe"}], "stats": {"total": 144, "additions": 87, "deletions": 57}, "files": [{"sha": "0dfe67a0f1d6e03f2e565b318755cbfb98b80f5b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac009a816ef2045f260f38582d367fec16b5879/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac009a816ef2045f260f38582d367fec16b5879/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fac009a816ef2045f260f38582d367fec16b5879", "patch": "@@ -1,3 +1,22 @@\n+2011-05-28  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-streamer-out.c (hash_string_slot_node): Hash string based on its\n+\tlength.\n+\t(string_slot_free): Remove\n+\t(create_output_block): Initialize obstack.\n+\t(destroy_output_block): Free obstack.\n+\t(lto_string_index): Add PERSISTENT parameter; do not duplicate\n+\tthe string unless it needs to be added into the hash.\n+\t(lto_output_string_with_length): Add persistent attribute;\n+\thandle NULL strings.\n+\t(lto_output_string): Add PERSISTENT parameter.\n+\t(output_string_cst, output_identifier): Simplify.\n+\t(lto_output_location_bitpack): Update.\n+\t(lto_output_builtin_tree): Update.\n+\t* lto-streamer.h (struct output_block): Add obstack.\n+\t(lto_output_string, lto_output_string_with_length): Remove declarations;\n+\tfunctions are static now.\n+\n 2011-05-28  Jan Hubicka  <jh@suse.cz>\n \n \t* lto-streamer-out.c (pack_ts_fixed_cst_value_fields,"}, {"sha": "b3b81bdf917039e54b55ad2c2c67ac4504f1b7ed", "filename": "gcc/lto-streamer-out.c", "status": "modified", "additions": 64, "deletions": 50, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac009a816ef2045f260f38582d367fec16b5879/gcc%2Flto-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac009a816ef2045f260f38582d367fec16b5879/gcc%2Flto-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-out.c?ref=fac009a816ef2045f260f38582d367fec16b5879", "patch": "@@ -51,13 +51,19 @@ struct string_slot\n };\n \n \n-/* Returns a hash code for P.  */\n+/* Returns a hash code for P.  \n+   Shamelessly stollen from libiberty.  */\n \n static hashval_t\n hash_string_slot_node (const void *p)\n {\n   const struct string_slot *ds = (const struct string_slot *) p;\n-  return (hashval_t) htab_hash_string (ds->s);\n+  hashval_t r = ds->len;\n+  int i;\n+\n+  for (i = 0; i < ds->len; i++)\n+     r = r * 67 + (unsigned)ds->s[i] - 113;\n+  return r;\n }\n \n \n@@ -76,17 +82,6 @@ eq_string_slot_node (const void *p1, const void *p2)\n }\n \n \n-/* Free the string slot pointed-to by P.  */\n-\n-static void\n-string_slot_free (void *p)\n-{\n-  struct string_slot *slot = (struct string_slot *) p;\n-  free (CONST_CAST (void *, (const void *) slot->s));\n-  free (slot);\n-}\n-\n-\n /* Clear the line info stored in DATA_IN.  */\n \n static void\n@@ -118,7 +113,8 @@ create_output_block (enum lto_section_type section_type)\n   clear_line_info (ob);\n \n   ob->string_hash_table = htab_create (37, hash_string_slot_node,\n-\t\t\t\t       eq_string_slot_node, string_slot_free);\n+\t\t\t\t       eq_string_slot_node, NULL);\n+  gcc_obstack_init (&ob->obstack);\n \n   return ob;\n }\n@@ -139,26 +135,27 @@ destroy_output_block (struct output_block *ob)\n     free (ob->cfg_stream);\n \n   lto_streamer_cache_delete (ob->writer_cache);\n+  obstack_free (&ob->obstack, NULL);\n \n   free (ob);\n }\n \n /* Return index used to reference STRING of LEN characters in the string table\n    in OB.  The string might or might not include a trailing '\\0'.\n-   Then put the index onto the INDEX_STREAM.  */\n+   Then put the index onto the INDEX_STREAM.  \n+   When PERSISTENT is set, the string S is supposed to not change during\n+   duration of the OB and thus OB can keep pointer into it.  */\n \n static unsigned\n lto_string_index (struct output_block *ob,\n \t\t  const char *s,\n-\t\t  unsigned int len)\n+\t\t  unsigned int len,\n+\t\t  bool persistent)\n {\n   struct string_slot **slot;\n   struct string_slot s_slot;\n-  char *string = (char *) xmalloc (len + 1);\n-  memcpy (string, s, len);\n-  string[len] = '\\0';\n \n-  s_slot.s = string;\n+  s_slot.s = s;\n   s_slot.len = len;\n   s_slot.slot_num = 0;\n \n@@ -169,7 +166,17 @@ lto_string_index (struct output_block *ob,\n       struct lto_output_stream *string_stream = ob->string_stream;\n       unsigned int start = string_stream->total_size;\n       struct string_slot *new_slot\n-\t= (struct string_slot *) xmalloc (sizeof (struct string_slot));\n+\t= XOBNEW (&ob->obstack, struct string_slot);\n+      const char *string;\n+\n+      if (!persistent)\n+\t{\n+\t  char *tmp;\n+\t  string = tmp = XOBNEWVEC (&ob->obstack, char, len);\n+          memcpy (tmp, s, len);\n+        }\n+      else\n+\tstring = s;\n \n       new_slot->s = string;\n       new_slot->len = len;\n@@ -182,37 +189,46 @@ lto_string_index (struct output_block *ob,\n   else\n     {\n       struct string_slot *old_slot = *slot;\n-      free (string);\n       return old_slot->slot_num + 1;\n     }\n }\n \n \n /* Output STRING of LEN characters to the string\n    table in OB. The string might or might not include a trailing '\\0'.\n-   Then put the index onto the INDEX_STREAM.  */\n+   Then put the index onto the INDEX_STREAM. \n+   When PERSISTENT is set, the string S is supposed to not change during\n+   duration of the OB and thus OB can keep pointer into it.  */\n \n-void\n+static void\n lto_output_string_with_length (struct output_block *ob,\n \t\t\t       struct lto_output_stream *index_stream,\n \t\t\t       const char *s,\n-\t\t\t       unsigned int len)\n+\t\t\t       unsigned int len,\n+\t\t\t       bool persistent)\n {\n-  lto_output_uleb128_stream (index_stream,\n-\t\t\t     lto_string_index (ob, s, len));\n+  if (s)\n+    lto_output_uleb128_stream (index_stream,\n+\t\t\t       lto_string_index (ob, s, len, persistent));\n+  else\n+    lto_output_1_stream (index_stream, 0);\n }\n \n /* Output the '\\0' terminated STRING to the string\n-   table in OB.  Then put the index onto the INDEX_STREAM.  */\n+   table in OB.  Then put the index onto the INDEX_STREAM.\n+   When PERSISTENT is set, the string S is supposed to not change during\n+   duration of the OB and thus OB can keep pointer into it.  */\n \n-void\n+static void\n lto_output_string (struct output_block *ob,\n \t           struct lto_output_stream *index_stream,\n-\t           const char *string)\n+\t           const char *string,\n+\t\t   bool persistent)\n {\n   if (string)\n     lto_output_string_with_length (ob, index_stream, string,\n-\t\t\t\t   strlen (string) + 1);\n+\t\t\t\t   strlen (string) + 1,\n+\t\t\t\t   persistent);\n   else\n     lto_output_1_stream (index_stream, 0);\n }\n@@ -226,12 +242,10 @@ output_string_cst (struct output_block *ob,\n \t\t   struct lto_output_stream *index_stream,\n \t\t   tree string)\n {\n-  if (string)\n-    lto_output_string_with_length (ob, index_stream,\n-\t\t\t\t   TREE_STRING_POINTER (string),\n-\t\t\t\t   TREE_STRING_LENGTH (string ));\n-  else\n-    lto_output_1_stream (index_stream, 0);\n+  lto_output_string_with_length (ob, index_stream,\n+\t\t\t\t TREE_STRING_POINTER (string),\n+\t\t\t\t TREE_STRING_LENGTH (string),\n+\t\t\t\t true);\n }\n \n \n@@ -243,12 +257,10 @@ output_identifier (struct output_block *ob,\n \t\t   struct lto_output_stream *index_stream,\n \t\t   tree id)\n {\n-  if (id)\n-    lto_output_string_with_length (ob, index_stream,\n-\t\t\t\t   IDENTIFIER_POINTER (id),\n-\t\t\t\t   IDENTIFIER_LENGTH (id));\n-  else\n-    lto_output_1_stream (index_stream, 0);\n+  lto_output_string_with_length (ob, index_stream,\n+\t\t\t\t IDENTIFIER_POINTER (id),\n+\t\t\t\t IDENTIFIER_LENGTH (id),\n+\t\t\t\t true);\n }\n \n \n@@ -620,8 +632,9 @@ lto_output_location_bitpack (struct bitpack_d *bp,\n   bp_pack_value (bp, ob->current_file != xloc.file, 1);\n   if (ob->current_file != xloc.file)\n     bp_pack_var_len_unsigned (bp, lto_string_index (ob,\n-\t\t\t\t\t          xloc.file,\n-\t\t\t\t\t\t  strlen (xloc.file) + 1));\n+\t\t\t\t\t            xloc.file,\n+\t\t\t\t\t\t    strlen (xloc.file) + 1,\n+\t\t\t\t\t\t    true));\n   ob->current_file = xloc.file;\n \n   bp_pack_value (bp, ob->current_line != xloc.line, 1);\n@@ -1186,7 +1199,8 @@ static void\n lto_output_ts_translation_unit_decl_tree_pointers (struct output_block *ob,\n \t\t\t\t\t\t   tree expr)\n {\n-  lto_output_string (ob, ob->main_stream, TRANSLATION_UNIT_LANGUAGE (expr));\n+  lto_output_string (ob, ob->main_stream,\n+\t\t     TRANSLATION_UNIT_LANGUAGE (expr), true);\n }\n \n /* Helper for lto_output_tree.  Write all pointer fields in EXPR to output\n@@ -1353,12 +1367,12 @@ lto_output_builtin_tree (struct output_block *ob, tree expr)\n \t reader side from adding a second '*', we omit it here.  */\n       const char *str = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (expr));\n       if (strlen (str) > 1 && str[0] == '*')\n-\tlto_output_string (ob, ob->main_stream, &str[1]);\n+\tlto_output_string (ob, ob->main_stream, &str[1], true);\n       else\n-\tlto_output_string (ob, ob->main_stream, NULL);\n+\tlto_output_string (ob, ob->main_stream, NULL, true);\n     }\n   else\n-    lto_output_string (ob, ob->main_stream, NULL);\n+    lto_output_string (ob, ob->main_stream, NULL, true);\n }\n \n \n@@ -1772,7 +1786,7 @@ output_gimple_stmt (struct output_block *ob, gimple stmt)\n       lto_output_uleb128_stream (ob->main_stream, gimple_asm_noutputs (stmt));\n       lto_output_uleb128_stream (ob->main_stream, gimple_asm_nclobbers (stmt));\n       lto_output_uleb128_stream (ob->main_stream, gimple_asm_nlabels (stmt));\n-      lto_output_string (ob, ob->main_stream, gimple_asm_string (stmt));\n+      lto_output_string (ob, ob->main_stream, gimple_asm_string (stmt), true);\n       /* Fallthru  */\n \n     case GIMPLE_ASSIGN:"}, {"sha": "e8410d4c70abb05203a8c05127608148674ae88f", "filename": "gcc/lto-streamer.h", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fac009a816ef2045f260f38582d367fec16b5879/gcc%2Flto-streamer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fac009a816ef2045f260f38582d367fec16b5879/gcc%2Flto-streamer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer.h?ref=fac009a816ef2045f260f38582d367fec16b5879", "patch": "@@ -700,6 +700,10 @@ struct output_block\n \n   /* Cache of nodes written in this section.  */\n   struct lto_streamer_cache_d *writer_cache;\n+\n+  /* All data persistent across whole duration of output block\n+     can go here.  */\n+  struct obstack obstack;\n };\n \n \n@@ -873,13 +877,6 @@ extern struct output_block *create_output_block (enum lto_section_type);\n extern void destroy_output_block (struct output_block *);\n extern void lto_output_tree (struct output_block *, tree, bool);\n extern void produce_asm (struct output_block *ob, tree fn);\n-extern void lto_output_string (struct output_block *,\n-\t\t\t       struct lto_output_stream *,\n-\t\t\t       const char *);\n-extern void lto_output_string_with_length (struct output_block *,\n-\t\t\t                   struct lto_output_stream *,\n-\t\t\t                   const char *,\n-\t\t\t                   unsigned int);\n void lto_output_decl_state_streams (struct output_block *,\n \t\t\t\t    struct lto_out_decl_state *);\n void lto_output_decl_state_refs (struct output_block *,"}]}