{"sha": "53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZWI4YjU0MjgxNmI3YjBhNDE3NWMxYzI1NzYxMDRlMWRjNTVjZQ==", "commit": {"author": {"name": "Cesar Philippidis", "email": "cesar@codesourcery.com", "date": "2018-09-05T22:27:31Z"}, "committer": {"name": "Cesar Philippidis", "email": "cesar@gcc.gnu.org", "date": "2018-09-05T22:27:31Z"}, "message": "[nvptx] Basic -misa support for nvptx\n\n\tgcc/\n\t* config/nvptx/nvptx-opts.h: New file.\n\t* config/nvptx/nvptx.c (nvptx_file_start): Print the correct .target.\n\t* config/nvptx/nvptx.h: Include \"nvptx-opts.h\".\n\t(ASM_SPEC): Define.\n\t(TARGET_SM35): New macro.\n\t* config/nvptx/nvptx.md (atomic_fetch_<logic><mode>): Enable with the\n\tcorrect predicate.\n\t* config/nvptx/nvptx.opt (ptx_isa, sm_30, sm_35): New enum and its\n\tvalues.\n\t(misa=): New option.\n\t* doc/invoke.texi (Nvidia PTX Options): Document -misa.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/atomic_fetch-1.c: New test.\n\t* gcc.target/nvptx/atomic_fetch-1.c: New test.\n\n\nCo-Authored-By: Bernd Schmidt <bernds_cb1@t-online.de>\n\nFrom-SVN: r264133", "tree": {"sha": "6abd01a2fd8382813052652c51a86a278a49c86e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6abd01a2fd8382813052652c51a86a278a49c86e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/comments", "author": {"login": "cesarjp", "id": 4576177, "node_id": "MDQ6VXNlcjQ1NzYxNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/4576177?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cesarjp", "html_url": "https://github.com/cesarjp", "followers_url": "https://api.github.com/users/cesarjp/followers", "following_url": "https://api.github.com/users/cesarjp/following{/other_user}", "gists_url": "https://api.github.com/users/cesarjp/gists{/gist_id}", "starred_url": "https://api.github.com/users/cesarjp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cesarjp/subscriptions", "organizations_url": "https://api.github.com/users/cesarjp/orgs", "repos_url": "https://api.github.com/users/cesarjp/repos", "events_url": "https://api.github.com/users/cesarjp/events{/privacy}", "received_events_url": "https://api.github.com/users/cesarjp/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62c21ceea64291317650258921c34dea79b1e96b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c21ceea64291317650258921c34dea79b1e96b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c21ceea64291317650258921c34dea79b1e96b"}], "stats": {"total": 135, "additions": 132, "deletions": 3}, "files": [{"sha": "9400a2ac97a472a4c8942fe81649cd4d05e844de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -1,3 +1,18 @@\n+2018-09-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Bernd Schmidt  <bernds_cb1@t-online.de>\n+\n+\t* config/nvptx/nvptx-opts.h: New file.\n+\t* config/nvptx/nvptx.c (nvptx_file_start): Print the correct .target.\n+\t* config/nvptx/nvptx.h: Include \"nvptx-opts.h\".\n+\t(ASM_SPEC): Define.\n+\t(TARGET_SM35): New macro.\n+\t* config/nvptx/nvptx.md (atomic_fetch_<logic><mode>): Enable with the\n+\tcorrect predicate.\n+\t* config/nvptx/nvptx.opt (ptx_isa, sm_30, sm_35): New enum and its\n+\tvalues.\n+\t(misa=): New option.\n+\t* doc/invoke.texi (Nvidia PTX Options): Document -misa.\n+\n 2018-09-05  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (truncdfsf2): Remove expander."}, {"sha": "55d9599917e380e433c3d966cec7e07476745972", "filename": "gcc/config/nvptx/nvptx-opts.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions for the NVPTX port needed for option handling.\n+   Copyright (C) 2015-2018 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef NVPTX_OPTS_H\n+#define NVPTX_OPTS_H\n+\n+enum ptx_isa\n+{\n+  PTX_ISA_SM30,\n+  PTX_ISA_SM35\n+};\n+\n+#endif\n+"}, {"sha": "9903a2738633806efa05e52cbe21e91290eee59a", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -4931,7 +4931,10 @@ nvptx_file_start (void)\n {\n   fputs (\"// BEGIN PREAMBLE\\n\", asm_out_file);\n   fputs (\"\\t.version\\t3.1\\n\", asm_out_file);\n-  fputs (\"\\t.target\\tsm_30\\n\", asm_out_file);\n+  if (TARGET_SM35)\n+    fputs (\"\\t.target\\tsm_35\\n\", asm_out_file);\n+  else\n+    fputs (\"\\t.target\\tsm_30\\n\", asm_out_file);\n   fprintf (asm_out_file, \"\\t.address_size %d\\n\", GET_MODE_BITSIZE (Pmode));\n   fputs (\"// END PREAMBLE\\n\", asm_out_file);\n }"}, {"sha": "a2fe8b68b222b7f65839b4ecd6f5f85f3c8d084c", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -21,10 +21,16 @@\n #ifndef GCC_NVPTX_H\n #define GCC_NVPTX_H\n \n+#ifndef NVPTX_OPTS_H\n+#include \"config/nvptx/nvptx-opts.h\"\n+#endif\n+\n /* Run-time Target.  */\n \n #define STARTFILE_SPEC \"%{mmainkernel:crt0.o}\"\n \n+#define ASM_SPEC \"%{misa=*:-m %*}\"\n+\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\\\n@@ -87,6 +93,8 @@\n #define Pmode (TARGET_ABI64 ? DImode : SImode)\n #define STACK_SIZE_MODE Pmode\n \n+#define TARGET_SM35 (ptx_isa_option >= PTX_ISA_SM35)\n+\n /* Registers.  Since ptx is a virtual target, we just define a few\n    hard registers for special purposes and leave pseudos unallocated.\n    We have to have some available hard registers, to keep gcc setup"}, {"sha": "dd6032d021bd4d6d80454c12bf2e1de28e3342fe", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -1440,7 +1440,6 @@\n (define_code_iterator any_logic [and ior xor])\n (define_code_attr logic [(and \"and\") (ior \"or\") (xor \"xor\")])\n \n-;; Currently disabled until we add better subtarget support - requires sm_32.\n (define_insn \"atomic_fetch_<logic><mode>\"\n   [(set (match_operand:SDIM 1 \"memory_operand\" \"+m\")\n \t(unspec_volatile:SDIM\n@@ -1450,7 +1449,7 @@\n \t  UNSPECV_LOCK))\n    (set (match_operand:SDIM 0 \"nvptx_register_operand\" \"=R\")\n \t(match_dup 1))]\n-  \"0\"\n+  \"TARGET_SM35\"\n   \"%.\\\\tatom%A1.b%T0.<logic>\\\\t%0, %1, %2;\"\n   [(set_attr \"atomic\" \"true\")])\n "}, {"sha": "8194c0324d64fa37675de77487166aaa691d8f5a", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -48,3 +48,17 @@ Generate code that can keep local state uniform across all lanes.\n mgomp\n Target Report Mask(GOMP)\n Generate code for OpenMP offloading: enables -msoft-stack and -muniform-simt.\n+\n+Enum\n+Name(ptx_isa) Type(int)\n+Known PTX ISA versions (for use with the -misa= option):\n+\n+EnumValue\n+Enum(ptx_isa) String(sm_30) Value(PTX_ISA_SM30)\n+\n+EnumValue\n+Enum(ptx_isa) String(sm_35) Value(PTX_ISA_SM35)\n+\n+misa=\n+Target RejectNegative ToLower Joined Enum(ptx_isa) Var(ptx_isa_option) Init(PTX_ISA_SM30)\n+Specify the version of the ptx ISA to use."}, {"sha": "8ac29fd48e144fcc07399d850b5e2f62b15149ba", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -22466,6 +22466,12 @@ These options are defined for Nvidia PTX:\n @opindex m64\n Generate code for 32-bit or 64-bit ABI.\n \n+@item -misa=@var{ISA-string}\n+@opindex march\n+Generate code for given the specified PTX ISA (e.g.@ @samp{sm_35}).  ISA\n+strings must be lower-case.  Valid ISA strings include @samp{sm_30} and\n+@samp{sm_35}.  The default ISA is sm_30.\n+\n @item -mmainkernel\n @opindex mmainkernel\n Link in code for a __main kernel.  This is for stand-alone instead of"}, {"sha": "5ccc2442c3e251c883ab1d2e27b8275529487c57", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -1,3 +1,9 @@\n+2018-09-05  Cesar Philippidis  <cesar@codesourcery.com>\n+\t    Bernd Schmidt  <bernds_cb1@t-online.de>\n+\n+\t* gcc.target/nvptx/atomic_fetch-1.c: New test.\n+\t* gcc.target/nvptx/atomic_fetch-1.c: New test.\n+\n 2018-09-05  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/87109, wrong overload with ref-qualifiers."}, {"sha": "1d35a176a6249c7c1a2bd028c5b282406d76ec1a", "filename": "gcc/testsuite/gcc.target/nvptx/atomic-fetch-2.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-fetch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-fetch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic-fetch-2.c?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -0,0 +1,24 @@\n+/* Test the nvptx atomic instructions for __atomic_fetch_OP for SM_30\n+   targets.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_30\" } */\n+\n+int\n+main()\n+{\n+  unsigned long long a = ~0;\n+  unsigned b = 0xa;\n+\n+  __atomic_fetch_add (&a, b, 0);\n+  __atomic_fetch_and (&a, b, 0);\n+  __atomic_fetch_or (&a, b, 0);\n+  __atomic_fetch_xor (&a, b, 0);\n+  \n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler-not \"atom.b64.add\" } } */\n+/* { dg-final { scan-assembler-not \"atom.b64.and\" } } */\n+/* { dg-final { scan-assembler-not \"atom.b64.or\" } } */\n+/* { dg-final { scan-assembler-not \"atom.b64.xor\" } } */"}, {"sha": "c637caa79a0f76029de59362e56fcf9f53e4ce32", "filename": "gcc/testsuite/gcc.target/nvptx/atomic_fetch-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53ceb8b542816b7b0a4175c1c2576104e1dc55ce/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fatomic_fetch-1.c?ref=53ceb8b542816b7b0a4175c1c2576104e1dc55ce", "patch": "@@ -0,0 +1,24 @@\n+/* Test the nvptx atomic instructions for __atomic_fetch_OP for SM_35\n+   targets.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_35\" } */\n+\n+int\n+main()\n+{\n+  unsigned long long a = ~0;\n+  unsigned b = 0xa;\n+\n+  __atomic_fetch_add (&a, b, 0);\n+  __atomic_fetch_and (&a, b, 0);\n+  __atomic_fetch_or (&a, b, 0);\n+  __atomic_fetch_xor (&a, b, 0);\n+  \n+  return a;\n+}\n+\n+/* { dg-final { scan-assembler \"atom.add.u64\" } } */\n+/* { dg-final { scan-assembler \"atom.b64.and\" } } */\n+/* { dg-final { scan-assembler \"atom.b64.or\" } } */\n+/* { dg-final { scan-assembler \"atom.b64.xor\" } } */"}]}