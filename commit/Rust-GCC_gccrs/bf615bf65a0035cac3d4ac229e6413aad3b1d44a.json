{"sha": "bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY2MTViZjY1YTAwMzVjYWMzZDRhYzIyOWU2NDEzYWFkM2IxZDQ0YQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-12-07T08:42:39Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2020-12-07T08:48:30Z"}, "message": "IBM Z: Change Pmode to word_mode for stack probes\n\nIn s390.c we are still using Pmode for the stack probes. This breaks\nwith -m31 -mzarch where Pmode != word_mode.\n\nThe patch also adds a new target check to s390.exp which allows us to\nimplement zarch specific checks in the testcases.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.c (s390_emit_stack_probe): Change Pmode to\n\tword_mode.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/s390.exp: New target check s390_zarch.\n\t* gcc.target/s390/stack-clash-1.c: Use s390_zarch instead of lp64.\n\t* gcc.target/s390/stack-clash-2.c: Likewise.\n\t* gcc.target/s390/stack-clash-3.c: Likewise.\n\t* gcc.target/s390/stack-clash-5.c: New test.", "tree": {"sha": "254a30305afa6e0dc2396c6a5b5f2fea8fc7ad2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/254a30305afa6e0dc2396c6a5b5f2fea8fc7ad2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad9c120a019ba4222bb062017da2db9711652dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad9c120a019ba4222bb062017da2db9711652dc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad9c120a019ba4222bb062017da2db9711652dc3"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "2f839882d968c0e2c65198b3e80a327276b5686e", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -11082,7 +11082,7 @@ s390_prologue_plus_offset (rtx target, rtx reg, rtx offset, bool frame_related_p\n static void\n s390_emit_stack_probe (rtx addr)\n {\n-  rtx mem = gen_rtx_MEM (Pmode, addr);\n+  rtx mem = gen_rtx_MEM (word_mode, addr);\n   MEM_VOLATILE_P (mem) = 1;\n   emit_insn (gen_probe_stack (mem));\n }"}, {"sha": "d76d80dd0f3b2c7d88f7573cc0634c5aefee1d96", "filename": "gcc/testsuite/gcc.target/s390/s390.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fs390.exp?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -202,6 +202,13 @@ proc check_effective_target_s390_z14_hw { } {\n \t}\n     }] \"-march=z14 -m64 -mzarch\" ] } { return 0 } else { return 1 }\n }\n+# Return 1 if the default compiler options enable z/Architecture mode\n+proc check_effective_target_s390_zarch { } {\n+    return [check_no_compiler_messages s390_zarch object {\n+\tint dummy[sizeof (int __attribute__((__mode__(__word__)))) == 8\n+\t\t  ? 1 : -1];\n+    }]\n+}\n \n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS"}, {"sha": "45221c4ef820a011c1b45df788239e70bc5bed14", "filename": "gcc/testsuite/gcc.target/s390/stack-clash-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-1.c?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -13,5 +13,5 @@ void large_stack() {\n \n /* We use a compare for the stack probe.  There needs to be one inside\n    a loop and another for the remaining bytes.  */\n-/* { dg-final { scan-assembler-times \"cg\\t\" 2 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"c\\t\" 2 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"cg\\t\" 2 { target s390_zarch } } } */\n+/* { dg-final { scan-assembler-times \"c\\t\" 2 { target { ! s390_zarch } } } } */"}, {"sha": "20f645de347884e4e7ceac2fbaa49318217b94bd", "filename": "gcc/testsuite/gcc.target/s390/stack-clash-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-2.c?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -13,5 +13,5 @@ foo ()\n /* For alloca a common code routine emits the probes.  Make sure the\n    \"probe_stack\" expander is used in that case. We want to use mem\n    compares instead of stores.  */\n-/* { dg-final { scan-assembler-times \"cg\\t\" 5 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"c\\t\" 5 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"cg\\t\" 5 { target s390_zarch } } } */\n+/* { dg-final { scan-assembler-times \"c\\t\" 5 { target { ! s390_zarch } } } } */"}, {"sha": "12a2d34cacf73f18a55a6582c6d7d7495a24a09d", "filename": "gcc/testsuite/gcc.target/s390/stack-clash-3.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-3.c?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -13,5 +13,5 @@ foo ()\n /* For alloca a common code routine emits the probes.  Make sure the\n    \"probe_stack\" expander is used in that case. We want to use mem\n    compares instead of stores.  */\n-/* { dg-final { scan-assembler-times \"cg\\t\" 5 { target lp64 } } } */\n-/* { dg-final { scan-assembler-times \"c\\t\" 5 { target { ! lp64 } } } } */\n+/* { dg-final { scan-assembler-times \"cg\\t\" 5 { target s390_zarch } } } */\n+/* { dg-final { scan-assembler-times \"c\\t\" 5 { target { ! s390_zarch } } } } */"}, {"sha": "81e202e2aab6c8119d13e1a48abb36bc02c2916a", "filename": "gcc/testsuite/gcc.target/s390/stack-clash-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf615bf65a0035cac3d4ac229e6413aad3b1d44a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fstack-clash-5.c?ref=bf615bf65a0035cac3d4ac229e6413aad3b1d44a", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -m31 -mzarch -fstack-clash-protection\" } */\n+\n+extern void bar (char*);\n+\n+void\n+foo() {\n+  char a[4000];\n+  bar (a) ;\n+}"}]}