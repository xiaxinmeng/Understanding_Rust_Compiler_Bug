{"sha": "445f9a500ddf8fd6673e87b525c8f38cd742af26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ1ZjlhNTAwZGRmOGZkNjY3M2U4N2I1MjVjOGYzOGNkNzQyYWYyNg==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-06-26T18:09:01Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-06-26T18:09:01Z"}, "message": "pa.c (pa_output_indirect_call): Rework to combine output_asm_insn calls and shorten long lines.\n\n\t* config/pa/pa.c (pa_output_indirect_call): Rework to combine\n\toutput_asm_insn calls and shorten long lines.  Output .CALL\n\targument descriptor using pa_output_arg_descriptor.  Add various\n\tinline $$dyncall and other optimizations.\n\t(pa_attr_length_indirect_call): Adjust ordering and lengths.\n\nFrom-SVN: r237790", "tree": {"sha": "f5ada84ba9de1dc2c58d40fd9c2a468a77596d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5ada84ba9de1dc2c58d40fd9c2a468a77596d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/445f9a500ddf8fd6673e87b525c8f38cd742af26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445f9a500ddf8fd6673e87b525c8f38cd742af26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/445f9a500ddf8fd6673e87b525c8f38cd742af26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/445f9a500ddf8fd6673e87b525c8f38cd742af26/comments", "author": null, "committer": null, "parents": [{"sha": "46db0fd456f0ecca6411c7b4de2a00c54d141fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46db0fd456f0ecca6411c7b4de2a00c54d141fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46db0fd456f0ecca6411c7b4de2a00c54d141fa0"}], "stats": {"total": 130, "additions": 107, "deletions": 23}, "files": [{"sha": "3088ed35691d232d5e2abcfd0596c357e8d33b44", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445f9a500ddf8fd6673e87b525c8f38cd742af26/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445f9a500ddf8fd6673e87b525c8f38cd742af26/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=445f9a500ddf8fd6673e87b525c8f38cd742af26", "patch": "@@ -1,3 +1,11 @@\n+2016-06-26  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/pa.c (pa_output_indirect_call): Rework to combine\n+\toutput_asm_insn calls and shorten long lines.  Output .CALL\n+\targument descriptor using pa_output_arg_descriptor.  Add various\n+\tinline $$dyncall and other optimizations.\n+\t(pa_attr_length_indirect_call): Adjust ordering and lengths.\n+\n 2016-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/71643"}, {"sha": "1047f3d61eb28cec5d128f16fc6f655078d9ddd7", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 99, "deletions": 23, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/445f9a500ddf8fd6673e87b525c8f38cd742af26/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/445f9a500ddf8fd6673e87b525c8f38cd742af26/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=445f9a500ddf8fd6673e87b525c8f38cd742af26", "patch": "@@ -8111,72 +8111,148 @@ pa_attr_length_indirect_call (rtx_insn *insn)\n   if (TARGET_64BIT)\n     return 12;\n \n-  if (TARGET_FAST_INDIRECT_CALLS\n-      || (!TARGET_LONG_CALLS\n-\t  && !TARGET_PORTABLE_RUNTIME\n-\t  && ((TARGET_PA_20 && !TARGET_SOM && distance < 7600000)\n-\t      || distance < MAX_PCREL17F_OFFSET)))\n+  if (TARGET_FAST_INDIRECT_CALLS)\n     return 8;\n \n-  if (flag_pic)\n-    return 20;\n-\n   if (TARGET_PORTABLE_RUNTIME)\n     return 16;\n \n+  /* Inline version of $$dyncall.  */\n+  if ((TARGET_NO_SPACE_REGS || TARGET_PA_20) && !optimize_size)\n+    return 20;\n+\n+  if (!TARGET_LONG_CALLS\n+      && ((TARGET_PA_20 && !TARGET_SOM && distance < 7600000)\n+\t  || distance < MAX_PCREL17F_OFFSET))\n+    return 8;\n+\n   /* Out of reach, can use ble.  */\n-  return 12;\n+  if (!flag_pic)\n+    return 12;\n+\n+  /* Inline version of $$dyncall.  */\n+  if (TARGET_NO_SPACE_REGS || TARGET_PA_20)\n+    return 20;\n+\n+  if (!optimize_size)\n+    return 36;\n+\n+  /* Long PIC pc-relative call.  */\n+  return 20;\n }\n \n const char *\n pa_output_indirect_call (rtx_insn *insn, rtx call_dest)\n {\n   rtx xoperands[4];\n+  int length;\n \n   if (TARGET_64BIT)\n     {\n       xoperands[0] = call_dest;\n-      output_asm_insn (\"ldd 16(%0),%%r2\", xoperands);\n-      output_asm_insn (\"bve,l (%%r2),%%r2\\n\\tldd 24(%0),%%r27\", xoperands);\n+      output_asm_insn (\"ldd 16(%0),%%r2\\n\\t\"\n+\t\t       \"bve,l (%%r2),%%r2\\n\\t\"\n+\t\t       \"ldd 24(%0),%%r27\", xoperands);\n       return \"\";\n     }\n \n   /* First the special case for kernels, level 0 systems, etc.  */\n   if (TARGET_FAST_INDIRECT_CALLS)\n-    return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\"; \n+    {\n+      pa_output_arg_descriptor (insn);\n+      if (TARGET_PA_20)\n+\treturn \"bve,l,n (%%r22),%%r2\\n\\tnop\";\n+      return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\"; \n+    }\n+\n+  if (TARGET_PORTABLE_RUNTIME)\n+    {\n+      output_asm_insn (\"ldil L'$$dyncall,%%r31\\n\\t\"\n+\t\t       \"ldo R'$$dyncall(%%r31),%%r31\", xoperands);\n+      pa_output_arg_descriptor (insn);\n+      return \"blr %%r0,%%r2\\n\\tbv,n %%r0(%%r31)\";\n+    }\n+\n+  /* Maybe emit a fast inline version of $$dyncall.  */\n+  if ((TARGET_NO_SPACE_REGS || TARGET_PA_20) && !optimize_size)\n+    {\n+      output_asm_insn (\"bb,>=,n %%r22,30,.+12\\n\\t\"\n+\t\t       \"ldw 2(%%r22),%%r19\\n\\t\"\n+\t\t       \"ldw -2(%%r22),%%r22\", xoperands);\n+      pa_output_arg_descriptor (insn);\n+      if (TARGET_NO_SPACE_REGS)\n+\t{\n+\t  if (TARGET_PA_20)\n+\t    return \"bve,l,n (%%r22),%%r2\\n\\tnop\";\n+\t  return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\";\n+\t}\n+      return \"bve,l (%%r22),%%r2\\n\\tstw %%r2,-24(%%sp)\";\n+    }\n \n   /* Now the normal case -- we can reach $$dyncall directly or\n      we're sure that we can get there via a long-branch stub. \n \n      No need to check target flags as the length uniquely identifies\n      the remaining cases.  */\n-  if (pa_attr_length_indirect_call (insn) == 8)\n+  length = pa_attr_length_indirect_call (insn);\n+  if (length == 8)\n     {\n+      pa_output_arg_descriptor (insn);\n+\n       /* The HP linker sometimes substitutes a BLE for BL/B,L calls to\n \t $$dyncall.  Since BLE uses %r31 as the link register, the 22-bit\n \t variant of the B,L instruction can't be used on the SOM target.  */\n       if (TARGET_PA_20 && !TARGET_SOM)\n-\treturn \".CALL\\tARGW0=GR\\n\\tb,l $$dyncall,%%r2\\n\\tcopy %%r2,%%r31\";\n+\treturn \"b,l,n $$dyncall,%%r2\\n\\tnop\";\n       else\n-\treturn \".CALL\\tARGW0=GR\\n\\tbl $$dyncall,%%r31\\n\\tcopy %%r31,%%r2\";\n+\treturn \"bl $$dyncall,%%r31\\n\\tcopy %%r31,%%r2\";\n     }\n \n   /* Long millicode call, but we are not generating PIC or portable runtime\n      code.  */\n-  if (pa_attr_length_indirect_call (insn) == 12)\n-    return \".CALL\\tARGW0=GR\\n\\tldil L'$$dyncall,%%r2\\n\\tble R'$$dyncall(%%sr4,%%r2)\\n\\tcopy %%r31,%%r2\";\n-\n-  /* Long millicode call for portable runtime.  */\n-  if (pa_attr_length_indirect_call (insn) == 16)\n-    return \"ldil L'$$dyncall,%%r31\\n\\tldo R'$$dyncall(%%r31),%%r31\\n\\tblr %%r0,%%r2\\n\\tbv,n %%r0(%%r31)\";\n+  if (length == 12)\n+    {\n+      output_asm_insn (\"ldil L'$$dyncall,%%r2\", xoperands);\n+      pa_output_arg_descriptor (insn);\n+      return \"ble R'$$dyncall(%%sr4,%%r2)\\n\\tcopy %%r31,%%r2\";\n+    }\n \n+  /* Maybe emit a fast inline version of $$dyncall.  The long PIC\n+     pc-relative call sequence is five instructions.  The inline PA 2.0\n+     version of $$dyncall is also five instructions.  The PA 1.X versions\n+     are longer but still an overall win.  */\n+  if (TARGET_NO_SPACE_REGS || TARGET_PA_20 || !optimize_size)\n+    {\n+      output_asm_insn (\"bb,>=,n %%r22,30,.+12\\n\\t\"\n+\t\t       \"ldw 2(%%r22),%%r19\\n\\t\"\n+\t\t       \"ldw -2(%%r22),%%r22\", xoperands);\n+      if (TARGET_NO_SPACE_REGS)\n+\t{\n+\t  pa_output_arg_descriptor (insn);\n+\t  if (TARGET_PA_20)\n+\t    return \"bve,l,n (%%r22),%%r2\\n\\tnop\";\n+\t  return \"ble 0(%%sr4,%%r22)\\n\\tcopy %%r31,%%r2\";\n+\t}\n+      if (TARGET_PA_20)\n+\t{\n+\t  pa_output_arg_descriptor (insn);\n+\t  return \"bve,l (%%r22),%%r2\\n\\tstw %%r2,-24(%%sp)\";\n+\t}\n+      output_asm_insn (\"bl .+8,%%r2\\n\\t\"\n+\t\t       \"ldo 16(%%r2),%%r2\\n\\t\"\n+\t\t       \"ldsid (%%r22),%%r1\\n\\t\"\n+\t\t       \"mtsp %%r1,%%sr0\", xoperands);\n+      pa_output_arg_descriptor (insn);\n+      return \"be 0(%%sr0,%%r22)\\n\\tstw %%r2,-24(%%sp)\";\n+    }\n+ \n   /* We need a long PIC call to $$dyncall.  */\n   xoperands[0] = gen_rtx_SYMBOL_REF (Pmode, \"$$dyncall\");\n   xoperands[1] = gen_rtx_REG (Pmode, 2);\n   xoperands[2] = gen_rtx_REG (Pmode, 1);\n   pa_output_pic_pcrel_sequence (xoperands);\n-  output_asm_insn (\"bv %%r0(%%r1)\", xoperands);\n-  return \"ldo {12|20}(%%r2),%%r2\";\n+  pa_output_arg_descriptor (insn);\n+  return \"bv %%r0(%%r1)\\n\\tldo {12|20}(%%r2),%%r2\";\n }\n \n /* In HPUX 8.0's shared library scheme, special relocations are needed"}]}