{"sha": "30af0edbf4637051e029063027052b843dbe8aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhZjBlZGJmNDYzNzA1MWUwMjkwNjMwMjcwNTJiODQzZGJlOGFhYw==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2009-01-07T18:31:27Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2009-01-07T18:31:27Z"}, "message": "target-supports-dg.exp (current_compiler_flags): New.\n\n\t* lib/target-supports-dg.exp (current_compiler_flags): New.\n\t(check-flags): Use it; do not access dg-test local variables.\n\t(dg-skip-if): Do not access dg-test local variables.\n\t(dg-xfail-run-if): Ditto.\n\t(dg-shouldfail): Ditto.\n\t* gcc.test-framework/test-framework.exp\n\t(check_effective_target_def_nocache): New.\n\t* gcc.test-framework/test-framework.awk: Handle scan tests.\n\t* gcc.test-framework/dg-do-run-xrif-nocache-exp-XF.c: New test.\n\t* gcc.test-framework/dg-error-nocache-exp-P.c: New test.\n\t* gcc.test-framework/dg-nocache-scanasm-exp-XF.c: New test.\n\t* gcc.test-framework/dg-warning-nocache-exp-P.c: New test.\n\t* gcc.test-framework/dg-nocache-sif-exp-P.c: New test.\n\t* gcc.test-framework/dg-nocache-sif-exp-U.c: New test.\n\t* gcc.test-framework/dg-nocache-xif-exp-P.c: New test.\n\t* gcc.test-framework/dg-do-run-sft-nocache-exp-P.c: New test.\n\t* gcc.test-framework/dg-nocache-xif-exp-XP.c: New test.\n\nFrom-SVN: r143165", "tree": {"sha": "68da84c270d2e72e9b06d0c45ebab9e948251a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68da84c270d2e72e9b06d0c45ebab9e948251a37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30af0edbf4637051e029063027052b843dbe8aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af0edbf4637051e029063027052b843dbe8aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30af0edbf4637051e029063027052b843dbe8aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30af0edbf4637051e029063027052b843dbe8aac/comments", "author": null, "committer": null, "parents": [{"sha": "301b6a4efe8b404c6e797ec71a74c1209cd446f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/301b6a4efe8b404c6e797ec71a74c1209cd446f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/301b6a4efe8b404c6e797ec71a74c1209cd446f1"}], "stats": {"total": 151, "additions": 132, "deletions": 19}, "files": [{"sha": "c3e22fc7a9e9fd5227e697e01cd9ab132dfdf753", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -1,5 +1,23 @@\n 2009-01-07  Janis Johnson  <janis187@us.ibm.com>\n \n+\t* lib/target-supports-dg.exp (current_compiler_flags): New.\n+\t(check-flags): Use it; do not access dg-test local variables.\n+\t(dg-skip-if): Do not access dg-test local variables.\n+\t(dg-xfail-run-if): Ditto.\n+\t(dg-shouldfail): Ditto.\n+\t* gcc.test-framework/test-framework.exp\n+\t(check_effective_target_def_nocache): New.\n+\t* gcc.test-framework/test-framework.awk: Handle scan tests.\n+\t* gcc.test-framework/dg-do-run-xrif-nocache-exp-XF.c: New test.\n+\t* gcc.test-framework/dg-error-nocache-exp-P.c: New test.\n+\t* gcc.test-framework/dg-nocache-scanasm-exp-XF.c: New test.\n+\t* gcc.test-framework/dg-warning-nocache-exp-P.c: New test.\n+\t* gcc.test-framework/dg-nocache-sif-exp-P.c: New test.\n+\t* gcc.test-framework/dg-nocache-sif-exp-U.c: New test.\n+\t* gcc.test-framework/dg-nocache-xif-exp-P.c: New test.\n+\t* gcc.test-framework/dg-do-run-sft-nocache-exp-P.c: New test.\n+\t* gcc.test-framework/dg-nocache-xif-exp-XP.c: New test.\n+\n \t* g++.dg/torture/pr38586.C: Ignore a possible warning.\n \n \t* lib/target-supports-dg.exp (check_test_flags): Delete."}, {"sha": "4ef0e7a99a5057279c8cf6d49b11ba2d7df9e387", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-sft-nocache-exp-P.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-nocache-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-nocache-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-sft-nocache-exp-P.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-options \"-DDEFINED\" } */\n+/* { dg-shouldfail \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+extern void abort (void);\n+\n+int\n+main ()\n+{\n+    abort ();  /* We expect nonzero exit, so this passes.  */\n+}"}, {"sha": "dfa1792a8b568ec68e8ae1ebdf54e869274eacff", "filename": "gcc/testsuite/gcc.test-framework/dg-do-run-xrif-nocache-exp-XF.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-xrif-nocache-exp-XF.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-xrif-nocache-exp-XF.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-do-run-xrif-nocache-exp-XF.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do run } */\n+/* { dg-options \"-DDEFINED\" } */\n+/* { dg-xfail-run-if \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+int\n+main ()\n+{\n+  return 1;\n+}"}, {"sha": "abec81ad5f0e27ad8cd483f993966015dbe4e640", "filename": "gcc/testsuite/gcc.test-framework/dg-error-nocache-exp-P.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-nocache-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-nocache-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-error-nocache-exp-P.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-options \"-DDEFINED\" } */\n+\n+int\n+main ()\n+{\n+  int\n+} /* { dg-error \"expected\" \"\" { target def_nocache } } */"}, {"sha": "183fbd051bd85762a96f2854d10ac4985998e0ef", "filename": "gcc/testsuite/gcc.test-framework/dg-nocache-scanasm-exp-XF.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-scanasm-exp-XF.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-scanasm-exp-XF.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-scanasm-exp-XF.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-DDEFINED\" } */\n+\n+int\n+foo ()\n+{\n+  return 0;\n+}\n+\n+/* A few examples from scanasm.exp.  */\n+\n+/* { dg-final { scan-assembler \"whatever\" { xfail def_nocache } } } */\n+/* { dg-final { scan-assembler-not \"foo\" { xfail def_nocache } } } */\n+/* { dg-final { scan-hidden \"whatever\" { xfail def_nocache } } } */"}, {"sha": "99392e341334d0c22ebb3cf28c944b872d7c0076", "filename": "gcc/testsuite/gcc.test-framework/dg-nocache-sif-exp-P.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-P.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-DNOT_THE_RIGHT_DEFINE\" } */\n+/* { dg-skip-if \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "ffaf49fdf6641e7110a006ba75d76db76cde2e56", "filename": "gcc/testsuite/gcc.test-framework/dg-nocache-sif-exp-U.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-U.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-U.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-sif-exp-U.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-DDEFINED\" } */\n+/* { dg-skip-if \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "21e833681dcb29b90fcbdb6ab2a3b489fa1735c5", "filename": "gcc/testsuite/gcc.test-framework/dg-nocache-xif-exp-P.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-P.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-DNOT_THE_RIGHT_DEFINE\" } */\n+/* { dg-xfail-if \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "07a55ef9189302a797facb3689cb0bd1a1f1044f", "filename": "gcc/testsuite/gcc.test-framework/dg-nocache-xif-exp-XP.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-XP.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-XP.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-nocache-xif-exp-XP.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-DDEFINED\" } */\n+/* { dg-xfail-if \"comment\" { def_nocache } { \"*\" } { \"\" } } */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"}, {"sha": "9e0ee2798864bb4defd5a364892948d09ce9d4a4", "filename": "gcc/testsuite/gcc.test-framework/dg-warning-nocache-exp-P.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-nocache-exp-P.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-nocache-exp-P.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Fdg-warning-nocache-exp-P.c?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-options \"-Wall -DDEFINED\" } */\n+\n+int\n+foo ()\n+{\n+}  /* { dg-warning \"control\" \"\" { target def_nocache } } */"}, {"sha": "02537e8efb062dd05064a01073efd067e058efe7", "filename": "gcc/testsuite/gcc.test-framework/test-framework.awk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.awk?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -53,6 +53,8 @@ BEGIN\t\t\t{ skip = 1; passes = 0; fails = 0; }\n /^PASS.*dox.*\\(test for excess errors\\)/ { ignore(); next }\n # The sf tests pass the compile step; ignore that message.\n /^PASS.*sf.*\\(test for excess errors\\)/ { ignore(); next }\n+# Ignore passing compile step for scan tests.\n+/^PASS.*scan.*\\(test for excess errors\\)/ { ignore(); next }\n # Ignore lines that begin with comma.\n /^,/\t\t\t{ ignore(); next }\n # For tests of dg-output, ignore successful compilation."}, {"sha": "722e09f78b6dac10ba90c6ba32d704ae93e8874e", "filename": "gcc/testsuite/gcc.test-framework/test-framework.exp", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.test-framework%2Ftest-framework.exp?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -42,6 +42,16 @@ proc check_effective_target_no { args } {\n     return 0\n }\n \n+proc check_effective_target_def_nocache { } {\n+    return [check_no_compiler_messages_nocache def_nocache object {\n+\t#ifdef DEFINED\n+\tint dummy;\n+\t#else\n+\t#error DEFINED is not defined\n+\t#endif\n+    } [current_compiler_flags]]\n+}\n+\n global dg-do-what-default\n set save-dg-do-what-default ${dg-do-what-default}\n set dg-do-what-default compile"}, {"sha": "321daac323906302c70f0421a64796da477129c7", "filename": "gcc/testsuite/lib/target-supports-dg.exp", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30af0edbf4637051e029063027052b843dbe8aac/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports-dg.exp?ref=30af0edbf4637051e029063027052b843dbe8aac", "patch": "@@ -1,4 +1,4 @@\n-#   Copyright (C) 1997, 1999, 2000, 2003, 2004, 2005, 2007\n+#   Copyright (C) 1997, 1999, 2000, 2003, 2004, 2005, 2007, 2009\n #   Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n@@ -15,6 +15,22 @@\n # along with GCC; see the file COPYING3.  If not see\n # <http://www.gnu.org/licenses/>.\n \n+# DejaGnu's dg-test defines extra flags that are used to compile a test.\n+# Access them for directives that need to examine all options that are\n+# used for a test, including checks for non-cached effective targets.\n+# We don't know how far up the call chain it is but we know we'll hit\n+# it eventually, and that we're at least 3 calls down.\n+\n+proc current_compiler_flags { } {\n+    set frames 2\n+    while { ![info exists flags1] } {\n+\tset frames [expr $frames + 1]\n+\tupvar $frames dg-extra-tool-flags flags1\n+    }\n+    upvar $frames tool_flags flags2\n+    return \"$flags1 $flags2\"\n+}\n+\n # If this target does not support weak symbols, skip this test.\n \n proc dg-require-weak { args } {\n@@ -189,18 +205,14 @@ proc dg-add-options { args } {\n proc check-flags { args } {\n     global compiler_flags\n     global TOOL_OPTIONS\n-    # These variables are from DejaGnu's dg-test.\n-    upvar dg-extra-tool-flags extra_tool_flags\n-    upvar tool_flags tool_flags\n \n     # The args are within another list; pull them out.\n     set args [lindex $args 0]\n \n     # Start the list with a dummy tool name so the list will match \"*\"\n     # if there are no flags.\n     set compiler_flags \" toolname \"\n-    append compiler_flags $extra_tool_flags\n-    append compiler_flags $tool_flags\n+    append compiler_flags [current_compiler_flags]\n     # If running a subset of the test suite, $TOOL_OPTIONS may not exist.\n     catch {append compiler_flags \" $TOOL_OPTIONS \"}\n     set dest [target_info name]\n@@ -239,10 +251,6 @@ proc dg-skip-if { args } {\n \n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n-\t# These are defined in DejaGnu's dg-test, needed by check-flags.\n-\tupvar dg-extra-tool-flags dg-extra-tool-flags\n-\tupvar tool_flags tool_flags\n-\n \tif [check-flags $args] {\n \t    upvar dg-do-what dg-do-what\n             set dg-do-what [list [lindex ${dg-do-what} 0] \"N\" \"P\"]\n@@ -280,10 +288,6 @@ proc dg-xfail-run-if { args } {\n \n     set selector [list target [lindex $args 1]]\n     if { [dg-process-target $selector] == \"S\" } {\n-\t# These are defined in DejaGnu's dg-test, needed by check-flags.\n-\tupvar dg-extra-tool-flags dg-extra-tool-flags\n-\tupvar tool_flags tool_flags\n-\n \tif [check-flags $args] {\n \t    upvar dg-do-what dg-do-what\n             set dg-do-what [list [lindex ${dg-do-what} 0] \"S\" \"F\"]\n@@ -308,11 +312,7 @@ proc dg-shouldfail { args } {\n     if { [llength $args] > 1 } {\n \tset selector [list target [lindex $args 1]]\n \tif { [dg-process-target $selector] == \"S\" } {\n-\t    # The target matches, now check the flags.  These variables\n-\t    # are defined in DejaGnu's dg-test, needed by check-flags.\n-\t    upvar dg-extra-tool-flags dg-extra-tool-flags\n-\t    upvar tool_flags tool_flags\n-\n+\t    # The target matches, now check the flags.\n \t    if [check-flags $args] {\n \t\tset shouldfail 1\n \t    }"}]}