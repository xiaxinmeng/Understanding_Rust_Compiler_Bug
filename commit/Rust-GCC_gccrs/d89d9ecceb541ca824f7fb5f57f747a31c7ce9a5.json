{"sha": "d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "node_id": "C_kwDOANBUbNoAKGQ4OWQ5ZWNjZWI1NDFjYTgyNGY3ZmI1ZjU3Zjc0N2EzMWM3Y2U5YTU", "commit": {"author": {"name": "Claire Dross", "email": "dross@adacore.com", "date": "2022-01-21T09:42:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-10T08:19:24Z"}, "message": "[Ada] Accept Structural in aspect Subprogram_Variant and pragma Loop_Variant\n\nAdd a new form of variants to ensure termination of loops or recursive\nsubprograms. Structural variants correspond to objects which designate a\npart of the data-structure they used to designate in the previous loop\niteration or recursive call. They only imply termination if the\ndata-structure is acyclic, which is the case in SPARK but not in Ada in\ngeneral. The fact that these variants are correct is only verified\nformally by the proof tool and not by the compiler or dynamically at\nexecution like other forms of variants.\n\ngcc/ada/\n\n\t* snames.ads-tmpl: Add \"Structural\" as a name.\n\t* sem_prag.adb: (Analyze_Pragma): Accept modifier \"Structural\"\n\tin pragmas Loop_Variant and Subprogram_Variant. Check that items\n\tassociated to Structural occur alone in the pragma associations.\n\t(Analyze_Subprogram_Variant_In_Decl_Part): Idem.\n\t* exp_prag.adb (Expand_Pragma_Loop_Variant): Discard structural\n\tvariants.\n\t(Expand_Pragma_Subprogram_Variant): Idem.\n\ngcc/testsuite/\n\n\t* gnat.dg/loopvar.adb: Update expected error message.", "tree": {"sha": "e08429eef085f4446200987fdfbfc9708d79d12d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e08429eef085f4446200987fdfbfc9708d79d12d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/comments", "author": {"login": "clairedross", "id": 8180017, "node_id": "MDQ6VXNlcjgxODAwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/8180017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clairedross", "html_url": "https://github.com/clairedross", "followers_url": "https://api.github.com/users/clairedross/followers", "following_url": "https://api.github.com/users/clairedross/following{/other_user}", "gists_url": "https://api.github.com/users/clairedross/gists{/gist_id}", "starred_url": "https://api.github.com/users/clairedross/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clairedross/subscriptions", "organizations_url": "https://api.github.com/users/clairedross/orgs", "repos_url": "https://api.github.com/users/clairedross/repos", "events_url": "https://api.github.com/users/clairedross/events{/privacy}", "received_events_url": "https://api.github.com/users/clairedross/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336ea8f2d6ef528db37212ac7517330274a4793a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/336ea8f2d6ef528db37212ac7517330274a4793a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/336ea8f2d6ef528db37212ac7517330274a4793a"}], "stats": {"total": 89, "additions": 64, "deletions": 25}, "files": [{"sha": "bf2d29744c41646edc8ab1c5740ee0f5967cbbb8", "filename": "gcc/ada/exp_prag.adb", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fexp_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fexp_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_prag.adb?ref=d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "patch": "@@ -2694,10 +2694,15 @@ package body Exp_Prag is\n       --  If pragma is not enabled, rewrite as Null statement. If pragma is\n       --  disabled, it has already been rewritten as a Null statement.\n       --\n-      --  Likewise, do this in CodePeer mode, because the expanded code is too\n+      --  Likewise, ignore structural variants for execution.\n+      --\n+      --  Also do this in CodePeer mode, because the expanded code is too\n       --  complicated for CodePeer to analyse.\n \n-      if Is_Ignored (N) or else CodePeer_Mode then\n+      if Is_Ignored (N)\n+        or else Chars (Last_Var) = Name_Structural\n+        or else CodePeer_Mode\n+      then\n          Rewrite (N, Make_Null_Statement (Loc));\n          Analyze (N);\n          return;\n@@ -3058,25 +3063,28 @@ package body Exp_Prag is\n \n       Loc : constant Source_Ptr := Sloc (Prag);\n \n-      Aggr         : Node_Id;\n+      Aggr         : constant Node_Id :=\n+        Expression (First (Pragma_Argument_Associations (Prag)));\n       Formal_Map   : Elist_Id;\n       Last         : Node_Id;\n-      Last_Variant : Node_Id;\n+      Last_Variant : constant Node_Id :=\n+        Nlists.Last (Component_Associations (Aggr));\n       Proc_Bod     : Node_Id;\n       Proc_Decl    : Node_Id;\n       Proc_Id      : Entity_Id;\n       Proc_Spec    : Node_Id;\n       Variant      : Node_Id;\n \n    begin\n-      --  Do nothing if pragma is not present or is disabled\n+      --  Do nothing if pragma is not present or is disabled.\n+      --  Also ignore structural variants for execution.\n \n-      if Is_Ignored (Prag) then\n+      if Is_Ignored (Prag)\n+        or else Chars (Nlists.Last (Choices (Last_Variant))) = Name_Structural\n+      then\n          return;\n       end if;\n \n-      Aggr := Expression (First (Pragma_Argument_Associations (Prag)));\n-\n       --  The expansion of Subprogram Variant is quite distributed as it\n       --  produces various statements to capture and compare the arguments.\n       --  To preserve the original context, set the Is_Assertion_Expr flag.\n@@ -3115,7 +3123,6 @@ package body Exp_Prag is\n \n       Last         := Proc_Decl;\n       Curr_Decls   := New_List;\n-      Last_Variant := Nlists.Last (Component_Associations (Aggr));\n \n       Variant := First (Component_Associations (Aggr));\n       while Present (Variant) loop"}, {"sha": "57a74db53baa5f74066c5d4450d6f5beef092dd7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "patch": "@@ -19423,7 +19423,8 @@ package body Sem_Prag is\n                if Chars (Variant) = No_Name then\n                   Error_Pragma_Arg_Ident (\"expect name `Increases`\", Variant);\n \n-               elsif Chars (Variant) not in Name_Decreases | Name_Increases\n+               elsif Chars (Variant) not in\n+                    Name_Decreases | Name_Increases | Name_Structural\n                then\n                   declare\n                      Name : String := Get_Name_String (Chars (Variant));\n@@ -19448,21 +19449,37 @@ package body Sem_Prag is\n                         Error_Pragma_Arg_Ident\n                           (\"expect name `Decreases`\", Variant);\n \n+                     elsif Name'Length >= 4\n+                       and then Name (1 .. 4) = \"stru\"\n+                     then\n+                        Error_Pragma_Arg_Ident\n+                          (\"expect name `Structural`\", Variant);\n+\n                      else\n                         Error_Pragma_Arg_Ident\n-                          (\"expect name `Increases` or `Decreases`\", Variant);\n+                          (\"expect name `Increases`, `Decreases`,\"\n+                           & \" or `Structural`\", Variant);\n                      end if;\n                   end;\n+\n+               elsif Chars (Variant) = Name_Structural\n+                 and then List_Length (Pragma_Argument_Associations (N)) > 1\n+               then\n+                  Error_Pragma_Arg_Ident\n+                    (\"Structural variant shall be the only variant\", Variant);\n                end if;\n \n                --  Preanalyze_Assert_Expression, but without enforcing any of\n                --  the two acceptable types.\n \n                Preanalyze_Assert_Expression (Expression (Variant));\n \n-               --  Expression of a discrete type is allowed\n+               --  Expression of a discrete type is allowed. Nothing to\n+               --  check for structural variants.\n \n-               if Is_Discrete_Type (Etype (Expression (Variant))) then\n+               if Chars (Variant) = Name_Structural\n+                 or else Is_Discrete_Type (Etype (Expression (Variant)))\n+               then\n                   null;\n \n                --  Expression of a Big_Integer type (or its ghost variant) is\n@@ -24227,13 +24244,16 @@ package body Sem_Prag is\n          -- Subprogram_Variant --\n          ------------------------\n \n-         --  pragma Subprogram_Variant ( SUBPROGRAM_VARIANT_ITEM\n-         --                           {, SUBPROGRAM_VARIANT_ITEM } );\n-\n-         --  SUBPROGRAM_VARIANT_ITEM ::=\n-         --    CHANGE_DIRECTION => discrete_EXPRESSION\n+         --  pragma Subprogram_Variant ( SUBPROGRAM_VARIANT_LIST );\n \n-         --  CHANGE_DIRECTION ::= Increases | Decreases\n+         --  SUBPROGRAM_VARIANT_LIST ::= STRUCTURAL_SUBPROGRAM_VARIANT_ITEM\n+         --                            | NUMERIC_SUBPROGRAM_VARIANT_ITEMS\n+         --  NUMERIC_SUBPROGRAM_VARIANT_ITEMS ::=\n+         --    NUMERIC_SUBPROGRAM_VARIANT_ITEM\n+         --      {, NUMERIC_SUBPROGRAM_VARIANT_ITEM}\n+         --  NUMERIC_SUBPROGRAM_VARIANT_ITEM ::= CHANGE_DIRECTION => EXPRESSION\n+         --  STRUCTURAL_SUBPROGRAM_VARIANT_ITEM ::= Structural => EXPRESSION\n+         --  CHANGE_DIRECTION        ::= Increases | Decreases\n \n          --  Characteristics:\n \n@@ -29435,9 +29455,9 @@ package body Sem_Prag is\n          --  Check placement of OTHERS if available (SPARK RM 6.1.3(1))\n \n          if Nkind (Direction) = N_Identifier then\n-            if Chars (Direction) /= Name_Decreases\n-                 and then\n-               Chars (Direction) /= Name_Increases\n+            if Chars (Direction) not in Name_Decreases\n+                                      | Name_Increases\n+                                      | Name_Structural\n             then\n                Error_Msg_N (\"wrong direction\", Direction);\n             end if;\n@@ -29452,9 +29472,12 @@ package body Sem_Prag is\n \n          Preanalyze_Assert_Expression (Expr);\n \n-         --  Expression of a discrete type is allowed\n+         --  Expression of a discrete type is allowed. Nothing more to check\n+         --  for structural variants.\n \n-         if Is_Discrete_Type (Etype (Expr)) then\n+         if Is_Discrete_Type (Etype (Expr))\n+              or else Chars (Direction) = Name_Structural\n+         then\n             null;\n \n          --  Expression of a Big_Integer type (or its ghost variant) is only\n@@ -29561,6 +29584,14 @@ package body Sem_Prag is\n          Variant := First (Component_Associations (Variants));\n          while Present (Variant) loop\n             Analyze_Variant (Variant);\n+\n+            if Chars (First (Choices (Variant))) = Name_Structural\n+              and then List_Length (Component_Associations (Variants)) > 1\n+            then\n+               Error_Msg_N\n+                 (\"Structural variant shall be the only variant\", Variant);\n+            end if;\n+\n             Next (Variant);\n          end loop;\n "}, {"sha": "5f7d6b7687b9684e4d865a2afe761a27981540be", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "patch": "@@ -875,6 +875,7 @@ package Snames is\n    Name_Static                         : constant Name_Id := N + $;\n    Name_Stack_Size                     : constant Name_Id := N + $;\n    Name_Strict                         : constant Name_Id := N + $;\n+   Name_Structural                     : constant Name_Id := N + $;\n    Name_Subunit_File_Name              : constant Name_Id := N + $;\n    Name_Suppressible                   : constant Name_Id := N + $;\n    Name_Synchronous                    : constant Name_Id := N + $;"}, {"sha": "e98d20d310d9e61ae00235594bf8ebafc14e4721", "filename": "gcc/testsuite/gnat.dg/loopvar.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Ftestsuite%2Fgnat.dg%2Floopvar.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5/gcc%2Ftestsuite%2Fgnat.dg%2Floopvar.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Floopvar.adb?ref=d89d9ecceb541ca824f7fb5f57f747a31c7ce9a5", "patch": "@@ -9,7 +9,7 @@ begin\n       pragma Loop_Variant (J + 1);           -- { dg-error \"expect name \\\"Increases\\\"\" }\n       pragma Loop_Variant (incr => -J + 1);  -- { dg-error \"expect name \\\"Increases\\\"\" }\n       pragma Loop_Variant (decr => -J + 1);  -- { dg-error \"expect name \\\"Decreases\\\"\" }\n-      pragma Loop_Variant (foof => -J + 1);  -- { dg-error \"expect name \\\"Increases\\\" or \\\"Decreases\\\"\" }\n+      pragma Loop_Variant (foof => -J + 1);  -- { dg-error \"expect name \\\"Increases\\\", \\\"Decreases\\\", or \\\"Structural\\\"\" }\n       J := J + 2;\n    end loop;\n end Loopvar;"}]}