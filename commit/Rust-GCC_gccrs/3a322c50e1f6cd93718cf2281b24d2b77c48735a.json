{"sha": "3a322c50e1f6cd93718cf2281b24d2b77c48735a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EzMjJjNTBlMWY2Y2Q5MzcxOGNmMjI4MWIyNGQyYjc3YzQ4NzM1YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-05T00:00:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-05T00:00:08Z"}, "message": "(find_reloads, case 'o'): A pseudo is not always an offsettable memref.\n\n(find_reloads): If we reload a constant into a register via memory, count it\nas two reloads.\n\nFrom-SVN: r6000", "tree": {"sha": "b76b24b22594b9bd8e9c2faab2fe3c3045ee7e7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b76b24b22594b9bd8e9c2faab2fe3c3045ee7e7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a322c50e1f6cd93718cf2281b24d2b77c48735a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a322c50e1f6cd93718cf2281b24d2b77c48735a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a322c50e1f6cd93718cf2281b24d2b77c48735a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a322c50e1f6cd93718cf2281b24d2b77c48735a/comments", "author": null, "committer": null, "parents": [{"sha": "fd28789a7a600be9db838f62e81bf8c86b4d5f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd28789a7a600be9db838f62e81bf8c86b4d5f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd28789a7a600be9db838f62e81bf8c86b4d5f34"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "af4ff981e261f6cd243c1d123012798ab3b31aa6", "filename": "gcc/reload.c", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a322c50e1f6cd93718cf2281b24d2b77c48735a/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a322c50e1f6cd93718cf2281b24d2b77c48735a/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=3a322c50e1f6cd93718cf2281b24d2b77c48735a", "patch": "@@ -2822,7 +2822,14 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t\t\t    || reg_equiv_address[REGNO (XEXP (operand, 0))] != 0))\n \t\t    || (GET_CODE (operand) == REG\n \t\t\t&& REGNO (operand) >= FIRST_PSEUDO_REGISTER\n-\t\t\t&& reg_renumber[REGNO (operand)] < 0))\n+\t\t\t&& reg_renumber[REGNO (operand)] < 0\n+\t\t\t/* If reg_equiv_address is nonzero, we will be\n+\t\t\t   loading it into a register; hence it will be\n+\t\t\t   offsettable, but we cannot say that reg_equiv_mem\n+\t\t\t   is offsettable without checking.  */\n+\t\t\t&& ((reg_equiv_mem[REGNO (operand)] != 0\n+\t\t\t     && offsettable_memref_p (reg_equiv_mem[REGNO (operand)]))\n+\t\t\t    || (reg_equiv_address[REGNO (operand)] != 0))))\n \t\t  win = 1;\n \t\tif (CONSTANT_P (operand) || GET_CODE (operand) == MEM)\n \t\t  badop = 0;\n@@ -2979,6 +2986,22 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t      else if (modified[i] != RELOAD_WRITE && no_input_reloads)\n \t\tbad = 1;\n \n+\t      /* If this is a constant that is reloaded into the desired\n+\t\t class by copying it to memory first, count that as another\n+\t\t reload.  This is consistent with other code and is\n+\t\t required to avoid chosing another alternative when\n+\t\t the constant is moved into memory by this function on\n+\t\t an early reload pass.  Note that the test here is \n+\t\t precisely the same as in the code below that calls\n+\t\t force_const_mem.  */\n+\t      if (CONSTANT_P (operand)\n+\t\t  && (PREFERRED_RELOAD_CLASS (operand,\n+\t\t\t\t\t      (enum reg_class) this_alternative[i])\n+\t\t      == NO_REGS)\n+\t\t  && this_alternative[i] != (int) NO_REGS\n+\t\t  && operand_mode[i] != VOIDmode)\n+\t\tlosers++;\n+\n \t      /* We prefer to reload pseudos over reloading other things,\n \t\t since such reloads may be able to be eliminated later.\n \t\t If we are reloading a SCRATCH, we won't be generating any\n@@ -3323,7 +3346,11 @@ find_reloads (insn, replace, ind_levels, live_known, reload_reg_p)\n \t  ;\n \t/* Handle an operand with a nonoffsettable address\n \t   appearing where an offsettable address will do\n-\t   by reloading the address into a base register.  */\n+\t   by reloading the address into a base register.\n+\n+\t   ??? We can also do this when the operand is a register and\n+\t   reg_equiv_mem is not offsettable, but this is a bit tricky,\n+\t   so we don't bother with it.  It may not be worth doing.  */\n \telse if (goal_alternative_matched[i] == -1\n \t\t && goal_alternative_offmemok[i]\n \t\t && GET_CODE (recog_operand[i]) == MEM)"}]}