{"sha": "a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJkNDI5YWM1ZTQ1MDg0NWYzZmViYmZiYTIxZDNiYjQ4NmZjZjdjZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-01-13T08:32:13Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-01-13T08:32:13Z"}, "message": "re PR middle-end/64568 (error: invalid reference prefix)\n\n2014-01-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64568\n\t* tree-ssa-forwprop.c (pass_forwprop::execute): Properly\n\trelease defs of removed stmts, avoid splitting TARGET_MEM_REFs.\n\n\t* g++.dg/torture/pr64568.C: New testcase.\n\nFrom-SVN: r219520", "tree": {"sha": "71d4302bbc8f858c29bcf76ecec98e40ee75f40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d4302bbc8f858c29bcf76ecec98e40ee75f40f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0d7a9dbdd23c58761a85f22e18982242e2dc9621", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d7a9dbdd23c58761a85f22e18982242e2dc9621", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d7a9dbdd23c58761a85f22e18982242e2dc9621"}], "stats": {"total": 129, "additions": 128, "deletions": 1}, "files": [{"sha": "a3126a73ce7cc9103c70f62fa6b531bfb1f9f081", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "patch": "@@ -1,3 +1,9 @@\n+2014-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64568\n+\t* tree-ssa-forwprop.c (pass_forwprop::execute): Properly\n+\trelease defs of removed stmts, avoid splitting TARGET_MEM_REFs.\n+\n 2015-01-13  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.c (nds32_legitimate_address_p): Consider"}, {"sha": "bd4d1d0bdd5de8603885e6efab34beba3ec69905", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "patch": "@@ -1,3 +1,8 @@\n+2014-01-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64568\n+\t* g++.dg/torture/pr64568.C: New testcase.\n+\n 2015-01-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* jit.dg/test-error-local-used-from-other-function.c: New test"}, {"sha": "15a89df449e2e4bfae2c5aba3eaf098efaf38168", "filename": "gcc/testsuite/g++.dg/torture/pr64568.C", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64568.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64568.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64568.C?ref=a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "patch": "@@ -0,0 +1,111 @@\n+// { dg-do compile }\n+// { dg-additional-options \"-std=c++11\" }\n+\n+namespace std\n+{\n+typedef long unsigned size_t;\n+template <typename> class complex;\n+template <typename _Tp> complex<_Tp> operator+(complex<_Tp>, complex<_Tp>)\n+{\n+  complex<_Tp> a = 0;\n+  a += 0;\n+  return a;\n+}\n+template <> struct complex<double>\n+{\n+  complex (int __i) : _M_value{ __i } {}\n+  int imag ();\n+  void operator+=(complex __z) { _M_value = __z.imag (); }\n+  _Complex double _M_value;\n+};\n+}\n+class A\n+{\n+public:\n+  A (int);\n+  std::complex<double> &operator[](int i) { return data_[i]; }\n+  std::complex<double> *data_;\n+};\n+struct B\n+{\n+  static std::complex<double>\n+  apply (std::complex<double> t1, std::complex<double> t2)\n+  {\n+    return t1 + t2;\n+  }\n+};\n+template <class T1, class> struct C\n+{\n+  static void\n+  apply (T1 t1, std::complex<double> t2)\n+  {\n+    t1 = t2;\n+  }\n+};\n+template <class E> class D\n+{\n+public:\n+  E operator()();\n+};\n+class G : public D<G>\n+{\n+public:\n+  typedef std::complex<double> value_type;\n+  value_type operator()(int) { return B::apply (0, 0); }\n+};\n+template <class E1, class E2> G operator+(D<E1>, D<E2>);\n+template <template <class, class> class F, class V, class E>\n+void\n+indexing_vector_assign (V v, D<E> e)\n+{\n+  for (int i;; ++i)\n+    F<typename V::reference, typename E::value_type>::apply (v (i), e ()(0));\n+}\n+template <template <class, class> class F, class V, class E>\n+void\n+vector_assign (V v, D<E> e, int)\n+{\n+  indexing_vector_assign<F> (v, e);\n+}\n+template <template <class, class> class F, class V, class E>\n+void\n+vector_assign (V v, D<E> e)\n+{\n+  vector_assign<F> (v, e, typename V::storage_category ());\n+}\n+class H : public D<int>\n+{\n+public:\n+  typedef std::complex<double> &reference;\n+  typedef int storage_category;\n+  H (int);\n+  template <class AE> H (D<AE> ae) : data_ (0)\n+  {\n+    vector_assign<C> (*this, ae);\n+  }\n+  A\n+  data ()\n+  {\n+    return data_;\n+  }\n+  reference operator()(int i) { return data ()[i]; }\n+  A data_;\n+};\n+template <class T1, class V1, class T2, class V2>\n+void\n+rot (T1, V1 v1, T2, V2 v2)\n+{\n+  H (v1 + v2);\n+}\n+template <class, unsigned long> struct F\n+{\n+  void test ();\n+};\n+template struct F<H, 3>;\n+template <class V, std::size_t N>\n+void\n+F<V, N>::test ()\n+{\n+  V b (0), c (0);\n+  rot (0, b, 0, c);\n+}"}, {"sha": "aa82ec07852a4a5c0c4cf9a06bcafaadee9b9546", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2d429ac5e450845f3febbfba21d3bb486fcf7ce/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=a2d429ac5e450845f3febbfba21d3bb486fcf7ce", "patch": "@@ -2267,6 +2267,8 @@ pass_forwprop::execute (function *fun)\n \n \t\t      gsi_insert_before (&gsi, new_stmt, GSI_SAME_STMT);\n \t\t    }\n+\n+\t\t  release_defs (stmt);\n \t\t  gsi_remove (&gsi, true);\n \t\t}\n \t      else\n@@ -2281,7 +2283,9 @@ pass_forwprop::execute (function *fun)\n \t      if (single_imm_use (lhs, &use_p, &use_stmt)\n \t\t  && gimple_store_p (use_stmt)\n \t\t  && !gimple_has_volatile_ops (use_stmt)\n-\t\t  && is_gimple_assign (use_stmt))\n+\t\t  && is_gimple_assign (use_stmt)\n+\t\t  && (TREE_CODE (gimple_assign_lhs (use_stmt))\n+\t\t      != TARGET_MEM_REF))\n \t\t{\n \t\t  tree use_lhs = gimple_assign_lhs (use_stmt);\n \t\t  tree new_lhs = build1 (REALPART_EXPR,\n@@ -2302,6 +2306,7 @@ pass_forwprop::execute (function *fun)\n \t\t  gimple_assign_set_rhs1 (use_stmt, gimple_assign_rhs2 (stmt));\n \t\t  update_stmt (use_stmt);\n \n+\t\t  release_defs (stmt);\n \t\t  gsi_remove (&gsi, true);\n \t\t}\n \t      else"}]}