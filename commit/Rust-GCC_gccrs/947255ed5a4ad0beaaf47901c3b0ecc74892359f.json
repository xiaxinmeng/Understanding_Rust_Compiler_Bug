{"sha": "947255ed5a4ad0beaaf47901c3b0ecc74892359f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ3MjU1ZWQ1YTRhZDBiZWFhZjQ3OTAxYzNiMGVjYzc0ODkyMzU5Zg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-25T23:06:36Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-25T23:06:36Z"}, "message": "* stmt.c (expand_asm_operands): Reload in-out reg-only memory operands.\n\nFrom-SVN: r26628", "tree": {"sha": "51cdda6e19a737cbccb3055ed8f95e56a3b43f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51cdda6e19a737cbccb3055ed8f95e56a3b43f51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/947255ed5a4ad0beaaf47901c3b0ecc74892359f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947255ed5a4ad0beaaf47901c3b0ecc74892359f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/947255ed5a4ad0beaaf47901c3b0ecc74892359f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/947255ed5a4ad0beaaf47901c3b0ecc74892359f/comments", "author": null, "committer": null, "parents": [{"sha": "7e4e2d26dc7d06fe1de81723049d7abfbe77732d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4e2d26dc7d06fe1de81723049d7abfbe77732d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4e2d26dc7d06fe1de81723049d7abfbe77732d"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "8a4eb262c6816c2c62d65d2fe38aa8d2075c916f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947255ed5a4ad0beaaf47901c3b0ecc74892359f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947255ed5a4ad0beaaf47901c3b0ecc74892359f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=947255ed5a4ad0beaaf47901c3b0ecc74892359f", "patch": "@@ -1,3 +1,7 @@\n+Sun Apr 25 23:03:32 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* stmt.c (expand_asm_operands): Reload in-out reg-only memory operands.\n+\n Sun Apr 25 13:06:13 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* function.c (assign_parms/STACK_BYTES): Revert last change,"}, {"sha": "f3780340cdaf38e1e52f3634d57bfd9c0a73a458", "filename": "gcc/stmt.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/947255ed5a4ad0beaaf47901c3b0ecc74892359f/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/947255ed5a4ad0beaaf47901c3b0ecc74892359f/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=947255ed5a4ad0beaaf47901c3b0ecc74892359f", "patch": "@@ -1183,6 +1183,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n   /* Vector of RTX's of evaluated output operands.  */\n   rtx *output_rtx = (rtx *) alloca (noutputs * sizeof (rtx));\n   int *inout_opnum = (int *) alloca (noutputs * sizeof (int));\n+  rtx *real_output_rtx = (rtx *) alloca (noutputs * sizeof (rtx));\n   enum machine_mode *inout_mode\n     = (enum machine_mode *) alloca (noutputs * sizeof (enum machine_mode));\n   /* The insn we have emitted.  */\n@@ -1360,6 +1361,7 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t Make the asm insn write into that, then our caller will copy it to\n \t the real output operand.  Likewise for promoted variables.  */\n \n+      real_output_rtx[i] = NULL_RTX;\n       if ((TREE_CODE (val) == INDIRECT_REF\n \t   && allows_mem)\n \t  || (TREE_CODE_CLASS (TREE_CODE (val)) == 'd'\n@@ -1379,7 +1381,12 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n \t  if (! allows_reg && GET_CODE (output_rtx[i]) != MEM)\n \t    error (\"output number %d not directly addressable\", i);\n \t  if (! allows_mem && GET_CODE (output_rtx[i]) == MEM)\n-\t    error (\"output number %d not restored to memory\", i);\n+\t    {\n+    \t      real_output_rtx[i] = protect_from_queue (output_rtx[i], 1);\n+\t      output_rtx[i] = gen_reg_rtx (GET_MODE (output_rtx[i]));\n+\t      if (is_inout)\n+\t\temit_move_insn (output_rtx[i], real_output_rtx[i]);\n+\t    }\n \t}\n       else\n \t{\n@@ -1662,6 +1669,12 @@ expand_asm_operands (string, outputs, inputs, clobbers, vol, filename, line)\n       insn = emit_insn (body);\n     }\n \n+  /* For any outputs that needed reloading into registers, spill them\n+     back to where they belong.  */\n+  for (i = 0; i < noutputs; ++i)\n+    if (real_output_rtx[i])\n+      emit_move_insn (real_output_rtx[i], output_rtx[i]);\n+\n   free_temp_slots ();\n }\n \f"}]}