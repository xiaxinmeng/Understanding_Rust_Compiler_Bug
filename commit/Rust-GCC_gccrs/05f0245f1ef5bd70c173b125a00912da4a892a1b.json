{"sha": "05f0245f1ef5bd70c173b125a00912da4a892a1b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmMDI0NWYxZWY1YmQ3MGMxNzNiMTI1YTAwOTEyZGE0YTg5MmExYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-11-09T00:05:05Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-09T00:05:05Z"}, "message": "go-test.exp (go-gc-tests): Handle runoutput test type with arguments.\n\n\t* go.test/go-test.exp (go-gc-tests): Handle runoutput test type\n\twith arguments.  Handle errorcheckoutput and rundir test types.\n\nFrom-SVN: r193344", "tree": {"sha": "ab22a1380cd600e94bb14e5a7383c490ac4a13bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab22a1380cd600e94bb14e5a7383c490ac4a13bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f0245f1ef5bd70c173b125a00912da4a892a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f0245f1ef5bd70c173b125a00912da4a892a1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f0245f1ef5bd70c173b125a00912da4a892a1b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f0245f1ef5bd70c173b125a00912da4a892a1b/comments", "author": null, "committer": null, "parents": [{"sha": "d7bd989c6d7af3c2c77c0022a1dc4c4438b8810d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7bd989c6d7af3c2c77c0022a1dc4c4438b8810d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7bd989c6d7af3c2c77c0022a1dc4c4438b8810d"}], "stats": {"total": 134, "additions": 109, "deletions": 25}, "files": [{"sha": "3d81982ea9360be8001dd46a27fd9d8a902215b5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -1,3 +1,8 @@\n+2012-11-08  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go.test/go-test.exp (go-gc-tests): Handle runoutput test type\n+\twith arguments.  Handle errorcheckoutput and rundir test types.\n+\n 2012-11-08  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR tree-optimization/55191"}, {"sha": "7451f396dcbe6fcecd93533f2f85379084d7d56e", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -449,15 +449,23 @@ proc go-gc-tests { } {\n \t    # This is a vanilla compile and link test.\n \t    set dg-do-what-default \"link\"\n \t    go-dg-runtest $test \"-w $DEFAULT_GOCFLAGS\"\n-\t} elseif { $test_line == \"// runoutput\" \\\n+\t} elseif { [string match \"// runoutput*\" $test_line] \\\n \t\t       || ($test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A &&\"\n \t\t\t   && $test_line2 == \"// ./\\$A.out >tmp.go && \\$G tmp.go && \\$L -o \\$A.out1 tmp.\\$A && ./\\$A.out1\") } {\n \t    # Run the test to get a .go program to run.\n \t    set go_execute_args \"\"\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\"\n+\t    set files [list]\n+\t    if { [string match \"// runoutput*\" $test_line] } {\n+\t\tset args \"\"\n+\t\tregsub \"// runoutput\\(.*\\)\" $test_line \"\\\\1\" args\n+\t\tforeach f $args {\n+\t\t    lappend files \"[file dirname $test]/$f\"\n+\t\t}\n+\t    }\n \t    set dg-do-what-default \"link\"\n-\t    dg-test -keep-output $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    dg-test -keep-output $test \"-O\" \"$files -w $DEFAULT_GOCFLAGS\"\n \t    set output_file \"./[file rootname [file tail $test]].exe\"\n \t    set base \"[file rootname [file tail $test]]\"\n \t    if [isnative] {\n@@ -507,6 +515,31 @@ proc go-gc-tests { } {\n \t    go-execute-xfail $test\n \t} elseif { $test_line == \"// errorcheck\" } {\n \t    errchk $test \"\"\n+\t} elseif { [string match \"// errorcheckoutput*\" $test_line] } {\n+\t    # Run the test to get a .go program to error check.\n+\t    set go_execute_args \"\"\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set files [list]\n+\t    regsub \"// errorcheckoutput\\(.*\\)\" $test_line \"\\\\1\" args\n+\t    foreach f $args {\n+\t\tlappend files \"[file dirname $test]/$f\"\n+\t    }\n+\t    set dg-do-what-default \"link\"\n+\t    dg-test -keep-output $test \"-O\" \"$files -w $DEFAULT_GOCFLAGS\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set base \"[file rootname [file tail $test]]\"\n+\t    if [isnative] {\n+\t\tif { [catch \"exec $output_file >$base-out.go\"] != 0 } {\n+\t\t    fail \"$name execution\"\n+\t\t} else {\n+\t\t    pass \"$name execution\"\n+\t\t    errchk \"$base-out.go\" \"\"\n+\t\t}\n+\t\tfile delete $base-out.go\n+\t    }\n+\t    file delete $output_file\n+\t    set runtests $hold_runtests\n \t} elseif { $test_line == \"// compiledir\" } {\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\"\n@@ -521,6 +554,26 @@ proc go-gc-tests { } {\n \t\tfile delete $f\n \t    }\n \t    set runtests $hold_runtests\n+\t} elseif { $test_line == \"// rundir\" } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"assemble\"\n+\t    set dir \"[file rootname $test].dir\"\n+\t    set del {}\n+\t    set files [lsort [glob \"$dir/*.go\"]]\n+\t    set last [lindex $files end]\n+\t    set files [lreplace $files end end]\n+\t    foreach f $files {\n+\t\tdg-test -keep-output $f \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t\tlappend del \"[file rootname [file tail $f]].o\"\n+\t    }\n+\t    set dg-do-what-default \"link\"\n+\t    set go_compile_args $del\n+\t    go-torture-execute $last\n+\t    foreach f $del {\n+\t\tfile delete $f\n+\t    }\n+\t    set runtests $hold_runtests\n \t} elseif { \"$test_line\" == \"\"\n \t\t   || [string match \"// true*\" $test_line]\n \t\t   || [string match \"// skip*\" $test_line] } {"}, {"sha": "daab45f7a17a8ed4b33f409c6dca5c0a76a0ad2f", "filename": "gcc/testsuite/go.test/test/index.go", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -1,27 +1,19 @@\n-// $G $D/$F.go && $L $F.$A &&\n-// ./$A.out -pass 0 >tmp.go && $G tmp.go && $L -o $A.out1 tmp.$A && ./$A.out1 &&\n-// ./$A.out -pass 1 >tmp.go && errchk $G -e tmp.go &&\n-// ./$A.out -pass 2 >tmp.go && errchk $G -e tmp.go\n-// rm -f tmp.go $A.out1\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// skip\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Generate test of index and slice bounds checks.\n-// The output is compiled and run.\n+// The actual tests are index0.go, index1.go, index2.go.\n \n package main\n \n import (\n \t\"bufio\"\n-\t\"flag\"\n \t\"fmt\"\n \t\"os\"\n-\t\"runtime\"\n+\t\"unsafe\"\n )\n \n const prolog = `\n@@ -155,14 +147,13 @@ func bug() {\n func main() {\n `\n \n-// Passes:\n+// pass variable set in index[012].go\n //\t0 - dynamic checks\n //\t1 - static checks of invalid constants (cannot assign to types)\n //\t2 - static checks of array bounds\n-var pass = flag.Int(\"pass\", 0, \"which test (0,1,2)\")\n \n func testExpr(b *bufio.Writer, expr string) {\n-\tif *pass == 0 {\n+\tif pass == 0 {\n \t\tfmt.Fprintf(b, \"\\ttest(func(){use(%s)}, %q)\\n\", expr, expr)\n \t} else {\n \t\tfmt.Fprintf(b, \"\\tuse(%s)  // ERROR \\\"index|overflow\\\"\\n\", expr)\n@@ -172,12 +163,10 @@ func testExpr(b *bufio.Writer, expr string) {\n func main() {\n \tb := bufio.NewWriter(os.Stdout)\n \n-\tflag.Parse()\n-\t\n-\tif *pass == 0 {\n-\t\tfmt.Fprint(b, \"// $G $D/$F.go && $L $F.$A && ./$A.out\\n\\n\")\n+\tif pass == 0 {\n+\t\tfmt.Fprint(b, \"// run\\n\\n\")\n \t} else {\n-\t\tfmt.Fprint(b, \"// errchk $G -e $D/$F.go\\n\\n\")\n+\t\tfmt.Fprint(b, \"// errorcheck\\n\\n\")\n \t}\n \tfmt.Fprint(b, prolog)\n \t\n@@ -225,9 +214,10 @@ func main() {\n \t\t\t\t// the next pass from running.\n \t\t\t\t// So run it as a separate check.\n \t\t\t\tthisPass = 1\n-\t\t\t} else if a == \"s\" && n == \"\" && (i == \"i64big\" || i == \"i64bigger\") && runtime.GOARCH == \"amd64\" {\n-\t\t\t\t// On amd64, these huge numbers do fit in an int, so they are not\n-\t\t\t\t// rejected at compile time.\n+\t\t\t} else if a == \"s\" && n == \"\" && (i == \"i64big\" || i == \"i64bigger\") && unsafe.Sizeof(int(0)) > 4 {\n+\t\t\t\t// If int is 64 bits, these huge\n+\t\t\t\t// numbers do fit in an int, so they\n+\t\t\t\t// are not rejected at compile time.\n \t\t\t\tthisPass = 0\n \t\t\t} else {\n \t\t\t\tthisPass = 2\n@@ -240,7 +230,7 @@ func main() {\n \t\t}\n \n \t\t// Only print the test case if it is appropriate for this pass.\n-\t\tif thisPass == *pass {\n+\t\tif thisPass == pass {\n \t\t\tpae := p+a+e+big\n \t\t\tcni := c+n+i\n \t\t\t"}, {"sha": "04a16198d2a88445ae4e4e21a773967f58d273ff", "filename": "gcc/testsuite/go.test/test/index0.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex0.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex0.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex0.go?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -0,0 +1,12 @@\n+// runoutput ./index.go\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Generate test of index and slice bounds checks.\n+// The output is compiled and run.\n+\n+package main\n+\n+const pass = 0"}, {"sha": "e28efa35f1df3db8b649ab7ce3ba8bf3ed985a51", "filename": "gcc/testsuite/go.test/test/index1.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex1.go?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -0,0 +1,12 @@\n+// errorcheckoutput ./index.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Generate test of index and slice bounds checks.\n+// The output is error checked.\n+\n+package main\n+\n+const pass = 1"}, {"sha": "a7107cc051066077b150359544d9a827eabdb1bf", "filename": "gcc/testsuite/go.test/test/index2.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f0245f1ef5bd70c173b125a00912da4a892a1b/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex2.go?ref=05f0245f1ef5bd70c173b125a00912da4a892a1b", "patch": "@@ -0,0 +1,12 @@\n+// errorcheckoutput ./index.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Generate test of index and slice bounds checks.\n+// The output is error checked.\n+\n+package main\n+\n+const pass = 2"}]}