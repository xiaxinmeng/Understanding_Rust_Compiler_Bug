{"sha": "d002d099b0107491a905b6d3e574ed0436fca3a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwMmQwOTliMDEwNzQ5MWE5MDViNmQzZTU3NGVkMDQzNmZjYTNhOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-21T16:29:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-21T16:29:37Z"}, "message": "re PR middle-end/79649 (Memset pattern in named address space crashes compiler or generates wrong code)\n\n\tPR tree-optimization/79649\n\t* tree-loop-distribution.c (classify_partition): Give up on\n\tnon-generic address space loads/stores.\n\n\t* gcc.target/i386/pr79649.c: New test.\n\nFrom-SVN: r245631", "tree": {"sha": "65d5e1ef559c4263d1cfca25d372616320531a05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65d5e1ef559c4263d1cfca25d372616320531a05"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d002d099b0107491a905b6d3e574ed0436fca3a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002d099b0107491a905b6d3e574ed0436fca3a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d002d099b0107491a905b6d3e574ed0436fca3a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002d099b0107491a905b6d3e574ed0436fca3a9/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5daaf2d5d971bdd3db733fc041bdd4bad674c65c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5daaf2d5d971bdd3db733fc041bdd4bad674c65c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5daaf2d5d971bdd3db733fc041bdd4bad674c65c"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "0697aeccb9eff88a86886df539cad3fdd6457809", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d002d099b0107491a905b6d3e574ed0436fca3a9", "patch": "@@ -1,3 +1,9 @@\n+2017-02-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79649\n+\t* tree-loop-distribution.c (classify_partition): Give up on\n+\tnon-generic address space loads/stores.\n+\n 2017-02-21  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* doc/loop.texi (Loop manipulation): Remove nonexistent"}, {"sha": "e35dd7c0cda0194804ccfcd8565653098dcb3311", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d002d099b0107491a905b6d3e574ed0436fca3a9", "patch": "@@ -1,5 +1,8 @@\n 2017-02-21  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/79649\n+\t* gcc.target/i386/pr79649.c: New test.\n+\n \tPR target/79494\n \t* gcc.dg/pr79494.c: New test.\n "}, {"sha": "e3d0110a1d014abc8abf9d6bcfc80a962074eb2d", "filename": "gcc/testsuite/gcc.target/i386/pr79649.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79649.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79649.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr79649.c?ref=d002d099b0107491a905b6d3e574ed0436fca3a9", "patch": "@@ -0,0 +1,53 @@\n+/* PR tree-optimization/79649 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_memset\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_memcpy\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"__builtin_memmove\" \"optimized\" } } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+void\n+f1 (unsigned char __seg_gs *s, size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    s[i] = 0;\n+}\n+\n+void\n+f2 (unsigned char __seg_gs *__restrict d, unsigned char __seg_gs *__restrict s, size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    d[i] = s[i];\n+}\n+\n+void\n+f3 (unsigned char __seg_gs *__restrict d, unsigned char *__restrict s, size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    d[i] = s[i];\n+}\n+\n+void\n+f4 (unsigned char *__restrict d, unsigned char __seg_gs *__restrict s, size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    d[i] = s[i];\n+}\n+\n+void\n+f5 (unsigned char __seg_gs *__restrict d, unsigned char __seg_fs *__restrict s, size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    d[i] = s[i];\n+}\n+\n+struct A { int a; char b[1024]; };\n+extern struct A __seg_gs a;\n+\n+void\n+f6 (size_t n)\n+{\n+  for (size_t i = 0; i < n; ++i)\n+    a.b[i] = 0;\n+}"}, {"sha": "4b94d0f9f8a52b5229b79c9414e8275f3064664f", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002d099b0107491a905b6d3e574ed0436fca3a9/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=d002d099b0107491a905b6d3e574ed0436fca3a9", "patch": "@@ -1072,6 +1072,13 @@ classify_partition (loop_p loop, struct graph *rdg, partition *partition)\n       /* But exactly one store and/or load.  */\n       for (j = 0; RDG_DATAREFS (rdg, i).iterate (j, &dr); ++j)\n \t{\n+\t  tree type = TREE_TYPE (DR_REF (dr));\n+\n+\t  /* The memset, memcpy and memmove library calls are only\n+\t     able to deal with generic address space.  */\n+\t  if (!ADDR_SPACE_GENERIC_P (TYPE_ADDR_SPACE (type)))\n+\t    return;\n+\n \t  if (DR_IS_READ (dr))\n \t    {\n \t      if (single_load != NULL)"}]}