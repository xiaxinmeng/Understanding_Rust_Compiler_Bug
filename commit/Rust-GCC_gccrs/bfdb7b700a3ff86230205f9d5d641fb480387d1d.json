{"sha": "bfdb7b700a3ff86230205f9d5d641fb480387d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZkYjdiNzAwYTNmZjg2MjMwMjA1ZjlkNWQ2NDFmYjQ4MDM4N2QxZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-17T17:26:28Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-17T17:26:28Z"}, "message": "tree.h (vec_member): Declare.\n\ngcc/\n\t* tree.h (vec_member): Declare.\n\t* tree.c (vec_member): Define.\n\ngcc/cp/\n\t* name-lookup.c (struct arg_lookup): Convert namespaces and\n\tclasses fields to VEC.\n\t(arg_assoc_namespace): Adjust for new type of namespaces.\n\t(arg_assoc_class): Adjust for new type of classes.\n\t(lookup_arg_dependent): Use make_tree_vector and\n\trelease_tree_vector.\n\t* typeck2.c (build_x_arrow): Use vec_member.\n\nFrom-SVN: r160936", "tree": {"sha": "2a8dc87125235ab53b2b22e782700dd34010cb61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a8dc87125235ab53b2b22e782700dd34010cb61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfdb7b700a3ff86230205f9d5d641fb480387d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdb7b700a3ff86230205f9d5d641fb480387d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfdb7b700a3ff86230205f9d5d641fb480387d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfdb7b700a3ff86230205f9d5d641fb480387d1d/comments", "author": null, "committer": null, "parents": [{"sha": "3a6206615ecc75936dfa4f548a9cdd8597173c4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a6206615ecc75936dfa4f548a9cdd8597173c4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a6206615ecc75936dfa4f548a9cdd8597173c4b"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "2f8c80ceb269245787fb7b18571a3b4fe5595395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -1,3 +1,8 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* tree.h (vec_member): Declare.\n+\t* tree.c (vec_member): Define.\n+\n 2010-06-17  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-flow-inline.h (array_ref_contains_indirect_ref): Remove."}, {"sha": "2d989016fd392f2e7955e9b87b903629c995e51f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -1,3 +1,13 @@\n+2010-06-17  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* name-lookup.c (struct arg_lookup): Convert namespaces and\n+\tclasses fields to VEC.\n+\t(arg_assoc_namespace): Adjust for new type of namespaces.\n+\t(arg_assoc_class): Adjust for new type of classes.\n+\t(lookup_arg_dependent): Use make_tree_vector and\n+\trelease_tree_vector.\n+\t* typeck2.c (build_x_arrow): Use vec_member.\n+\n 2010-06-17  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/44486"}, {"sha": "4e40e3b555ad50945075437e7a1d4f0f1d651d33", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -4588,8 +4588,8 @@ struct arg_lookup\n {\n   tree name;\n   VEC(tree,gc) *args;\n-  tree namespaces;\n-  tree classes;\n+  VEC(tree,gc) *namespaces;\n+  VEC(tree,gc) *classes;\n   tree functions;\n };\n \n@@ -4666,9 +4666,9 @@ arg_assoc_namespace (struct arg_lookup *k, tree scope)\n {\n   tree value;\n \n-  if (purpose_member (scope, k->namespaces))\n-    return 0;\n-  k->namespaces = tree_cons (scope, NULL_TREE, k->namespaces);\n+  if (vec_member (scope, k->namespaces))\n+    return false;\n+  VEC_safe_push (tree, gc, k->namespaces, scope);\n \n   /* Check out our super-users.  */\n   for (value = DECL_NAMESPACE_ASSOCIATIONS (scope); value;\n@@ -4849,9 +4849,9 @@ arg_assoc_class (struct arg_lookup *k, tree type)\n   if (!CLASS_TYPE_P (type))\n     return false;\n \n-  if (purpose_member (type, k->classes))\n+  if (vec_member (type, k->classes))\n     return false;\n-  k->classes = tree_cons (type, NULL_TREE, k->classes);\n+  VEC_safe_push (tree, gc, k->classes, type);\n \n   if (TYPE_CLASS_SCOPE_P (type)\n       && arg_assoc_class_only (k, TYPE_CONTEXT (type)))\n@@ -5048,14 +5048,14 @@ lookup_arg_dependent (tree name, tree fns, VEC(tree,gc) *args)\n   k.name = name;\n   k.args = args;\n   k.functions = fns;\n-  k.classes = NULL_TREE;\n+  k.classes = make_tree_vector ();\n \n   /* We previously performed an optimization here by setting\n      NAMESPACES to the current namespace when it was safe. However, DR\n      164 says that namespaces that were already searched in the first\n      stage of template processing are searched again (potentially\n      picking up later definitions) in the second stage. */\n-  k.namespaces = NULL_TREE;\n+  k.namespaces = make_tree_vector ();\n \n   arg_assoc_args_vec (&k, args);\n \n@@ -5069,6 +5069,9 @@ lookup_arg_dependent (tree name, tree fns, VEC(tree,gc) *args)\n       error (\"  in call to %qD\", name);\n       fns = error_mark_node;\n     }\n+\n+  release_tree_vector (k.classes);\n+  release_tree_vector (k.namespaces);\n     \n   POP_TIMEVAR_AND_RETURN (TV_NAME_LOOKUP, fns);\n }"}, {"sha": "3d48c22faab4575a3ee6358a5ad18498013ba2b4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -1418,18 +1418,14 @@ build_x_arrow (tree expr)\n \t\t\t\t   /*overloaded_p=*/NULL, \n \t\t\t\t   tf_warning_or_error)))\n \t{\n-\t  tree t;\n-\t  unsigned ix;\n-\n \t  if (expr == error_mark_node)\n \t    return error_mark_node;\n \n-\t  for (ix = 0; VEC_iterate (tree, types_memoized, ix, t); ix++)\n-\t    if (TREE_TYPE (expr) == t)\n-\t      {\n-\t\terror (\"circular pointer delegation detected\");\n-\t\treturn error_mark_node;\n-\t      }\n+\t  if (vec_member (TREE_TYPE (expr), types_memoized))\n+\t    {\n+\t      error (\"circular pointer delegation detected\");\n+\t      return error_mark_node;\n+\t    }\n \n \t  VEC_safe_push (tree, gc, types_memoized, TREE_TYPE (expr));\n \t  last_rval = expr;"}, {"sha": "0922ab5b915dcc259a6579cdaff9dc3d43f3c1be", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -1917,6 +1917,19 @@ purpose_member (const_tree elem, tree list)\n   return NULL_TREE;\n }\n \n+/* Return true if ELEM is in V.  */\n+\n+bool\n+vec_member (const_tree elem, VEC(tree,gc) *v)\n+{\n+  unsigned ix;\n+  tree t;\n+  for (ix = 0; VEC_iterate (tree, v, ix, t); ix++)\n+    if (elem == t)\n+      return true;\n+  return false;\n+}\n+\n /* Returns element number IDX (zero-origin) of chain CHAIN, or\n    NULL_TREE.  */\n "}, {"sha": "0d8eefaedef86fac5b6fa001a5327e56701c8f33", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfdb7b700a3ff86230205f9d5d641fb480387d1d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=bfdb7b700a3ff86230205f9d5d641fb480387d1d", "patch": "@@ -4094,6 +4094,7 @@ extern bool range_in_array_bounds_p (tree);\n \n extern tree value_member (tree, tree);\n extern tree purpose_member (const_tree, tree);\n+extern bool vec_member (const_tree, VEC(tree,gc) *);\n extern tree chain_index (int, tree);\n \n extern int attribute_list_equal (const_tree, const_tree);"}]}