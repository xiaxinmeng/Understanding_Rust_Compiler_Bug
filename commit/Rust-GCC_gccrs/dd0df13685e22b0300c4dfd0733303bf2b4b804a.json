{"sha": "dd0df13685e22b0300c4dfd0733303bf2b4b804a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQwZGYxMzY4NWUyMmIwMzAwYzRkZmQwNzMzMzAzYmYyYjRiODA0YQ==", "commit": {"author": {"name": "Ilya Leoshkevich", "email": "iii@linux.ibm.com", "date": "2019-02-12T14:51:39Z"}, "committer": {"name": "Ilya Leoshkevich", "email": "iii@gcc.gnu.org", "date": "2019-02-12T14:51:39Z"}, "message": "S/390: Reject invalid Q/R/S/T addresses after LRA\n\nThe following insn:\n\n(insn (set (reg:DI %r2)\n           (sign_extend:DI (mem:SI\n            (const:DI (plus:DI (symbol_ref:DI (\"*.LC0\"))\n                               (const_int 16)))))))\n\nis correctly recognized by LRA as RIL alternative of extendsidi2\ndefine_insn.  However, when recognition runs after LRA, it returns RXY\nalternative, which is incorrect, since the offset 16 points past the\nend of of *.LC0 literal pool entry.  Such addresses are normally\nrejected by s390_decompose_address ().\n\nThis inconsistency confuses annotate_constant_pool_refs: the selected\nalternative makes it proceed with annotation, only to find that the\nannotated address is invalid, causing ICE.\n\nThis patch fixes the root cause, namely, that s390_check_qrst_address ()\nbehaves differently during and after LRA.\n\ngcc/ChangeLog:\n\n2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/89233\n\t* config/s390/s390.c (s390_decompose_address): Update comment.\n\t(s390_check_qrst_address): Reject invalid address forms after\n\tLRA.\n\ngcc/testsuite/ChangeLog:\n\n2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n\n\tPR target/89233\n\t* gcc.target/s390/pr89233.c: New test.\n\nFrom-SVN: r268798", "tree": {"sha": "8a07a2f8f1f075a0d1e889ad7605018d576d6f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a07a2f8f1f075a0d1e889ad7605018d576d6f9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd0df13685e22b0300c4dfd0733303bf2b4b804a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0df13685e22b0300c4dfd0733303bf2b4b804a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd0df13685e22b0300c4dfd0733303bf2b4b804a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd0df13685e22b0300c4dfd0733303bf2b4b804a/comments", "author": {"login": "iii-i", "id": 45998171, "node_id": "MDQ6VXNlcjQ1OTk4MTcx", "avatar_url": "https://avatars.githubusercontent.com/u/45998171?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iii-i", "html_url": "https://github.com/iii-i", "followers_url": "https://api.github.com/users/iii-i/followers", "following_url": "https://api.github.com/users/iii-i/following{/other_user}", "gists_url": "https://api.github.com/users/iii-i/gists{/gist_id}", "starred_url": "https://api.github.com/users/iii-i/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iii-i/subscriptions", "organizations_url": "https://api.github.com/users/iii-i/orgs", "repos_url": "https://api.github.com/users/iii-i/repos", "events_url": "https://api.github.com/users/iii-i/events{/privacy}", "received_events_url": "https://api.github.com/users/iii-i/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ced066037201d2c193560bf7d9cd6e738e26e55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ced066037201d2c193560bf7d9cd6e738e26e55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ced066037201d2c193560bf7d9cd6e738e26e55"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "3c90ff8a9d0d61a414c44a8d9cf654760cb07adc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dd0df13685e22b0300c4dfd0733303bf2b4b804a", "patch": "@@ -1,3 +1,10 @@\n+2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/89233\n+\t* config/s390/s390.c (s390_decompose_address): Update comment.\n+\t(s390_check_qrst_address): Reject invalid address forms after\n+\tLRA.\n+\n 2019-02-12  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/88876"}, {"sha": "713973a3fd4a94e1516e1f0711b69d31bbc9c07d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=dd0df13685e22b0300c4dfd0733303bf2b4b804a", "patch": "@@ -3020,7 +3020,9 @@ s390_decompose_address (rtx addr, struct s390_address *out)\n \t  if (offset)\n \t    {\n \t      /* If we have an offset, make sure it does not\n-\t\t exceed the size of the constant pool entry.  */\n+\t\t exceed the size of the constant pool entry.\n+\t\t Otherwise we might generate an out-of-range\n+\t\t displacement for the base register form.  */\n \t      rtx sym = XVECEXP (disp, 0, 0);\n \t      if (offset >= GET_MODE_SIZE (get_pool_mode (sym)))\n \t\treturn false;\n@@ -3193,8 +3195,10 @@ s390_check_qrst_address (char c, rtx op, bool lit_pool_ok)\n      generic cases below ('R' or 'T'), since reload will in fact fix\n      them up.  LRA behaves differently here; we never see such forms,\n      but on the other hand, we need to strictly reject every invalid\n-     address form.  Perform this check right up front.  */\n-  if (lra_in_progress)\n+     address form.  After both reload and LRA invalid address forms\n+     must be rejected, because nothing will fix them up later.  Perform\n+     this check right up front.  */\n+  if (lra_in_progress || reload_completed)\n     {\n       if (!decomposed && !s390_decompose_address (op, &addr))\n \treturn 0;"}, {"sha": "7cb2c4144898c049b4f4bb52e600888c3dff6ee6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dd0df13685e22b0300c4dfd0733303bf2b4b804a", "patch": "@@ -1,3 +1,8 @@\n+2019-02-12  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\tPR target/89233\n+\t* gcc.target/s390/pr89233.c: New test.\n+\n 2018-01-12  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \t* gcc.target/powerpc/vec-sld-modulo.c: Require p8vector_hw."}, {"sha": "f572bfa08d8509d2db57b6ae06548adace50de88", "filename": "gcc/testsuite/gcc.target/s390/pr89233.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89233.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd0df13685e22b0300c4dfd0733303bf2b4b804a/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89233.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fpr89233.c?ref=dd0df13685e22b0300c4dfd0733303bf2b4b804a", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=z13 -O1\" } */\n+\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+int\n+f ()\n+{\n+  v4si x = {0, 1, 2, 3};\n+  return x[4];\n+}"}]}