{"sha": "d70bb61f7041926b516bd99cdebee756ed44cc40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwYmI2MWY3MDQxOTI2YjUxNmJkOTljZGViZWU3NTZlZDQ0Y2M0MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-09-04T13:18:16Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2004-09-04T13:18:16Z"}, "message": "Fix some too-long lines and move a comment.\n\nFrom-SVN: r87086", "tree": {"sha": "05b66a744368d3e0e720ad4d78170994935ecc01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05b66a744368d3e0e720ad4d78170994935ecc01"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d70bb61f7041926b516bd99cdebee756ed44cc40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70bb61f7041926b516bd99cdebee756ed44cc40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70bb61f7041926b516bd99cdebee756ed44cc40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70bb61f7041926b516bd99cdebee756ed44cc40/comments", "author": null, "committer": null, "parents": [{"sha": "eb1aef53088ad4689576e1216dad167974d7d8b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb1aef53088ad4689576e1216dad167974d7d8b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb1aef53088ad4689576e1216dad167974d7d8b4"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "3432332a06a08db40a8311d9b131a3f7fe9050ad", "filename": "gcc/lcm.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d70bb61f7041926b516bd99cdebee756ed44cc40/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d70bb61f7041926b516bd99cdebee756ed44cc40/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=d70bb61f7041926b516bd99cdebee756ed44cc40", "patch": "@@ -290,10 +290,11 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n       *qin++ = bb;\n       bb->aux = bb;\n     }\n-  qin = worklist;\n+\n   /* Note that we do not use the last allocated element for our queue,\n      as EXIT_BLOCK is never inserted into it. In fact the above allocation\n      of n_basic_blocks + 1 elements is not necessary.  */\n+  qin = worklist;\n   qend = &worklist[n_basic_blocks];\n   qlen = n_basic_blocks;\n \n@@ -310,7 +311,8 @@ compute_laterin (struct edge_list *edge_list, sbitmap *earliest,\n       /* Compute the intersection of LATERIN for each incoming edge to B.  */\n       sbitmap_ones (laterin[bb->index]);\n       for (e = bb->pred; e != NULL; e = e->pred_next)\n-\tsbitmap_a_and_b (laterin[bb->index], laterin[bb->index], later[(size_t)e->aux]);\n+\tsbitmap_a_and_b (laterin[bb->index], laterin[bb->index],\n+\t\t\t later[(size_t)e->aux]);\n \n       /* Calculate LATER for all outgoing edges.  */\n       for (e = bb->succ; e != NULL; e = e->succ_next)\n@@ -354,7 +356,8 @@ compute_insert_delete (struct edge_list *edge_list, sbitmap *antloc,\n   basic_block bb;\n \n   FOR_EACH_BB (bb)\n-    sbitmap_difference (delete[bb->index], antloc[bb->index], laterin[bb->index]);\n+    sbitmap_difference (delete[bb->index], antloc[bb->index],\n+\t\t\tlaterin[bb->index]);\n \n   for (x = 0; x < NUM_EDGES (edge_list); x++)\n     {\n@@ -526,7 +529,8 @@ compute_available (sbitmap *avloc, sbitmap *kill, sbitmap *avout,\n \t  sbitmap_intersection_of_preds (avin[bb->index], avout, bb->index);\n \t}\n \n-      if (sbitmap_union_of_diff_cg (avout[bb->index], avloc[bb->index], avin[bb->index], kill[bb->index]))\n+      if (sbitmap_union_of_diff_cg (avout[bb->index], avloc[bb->index],\n+\t\t\t\t    avin[bb->index], kill[bb->index]))\n \t/* If the out state of this block changed, then we need\n \t   to add the successors of this block to the worklist\n \t   if they are not already on the worklist.  */\n@@ -683,7 +687,8 @@ compute_rev_insert_delete (struct edge_list *edge_list, sbitmap *st_avloc,\n   basic_block bb;\n \n   FOR_EACH_BB (bb)\n-    sbitmap_difference (delete[bb->index], st_avloc[bb->index], nearerout[bb->index]);\n+    sbitmap_difference (delete[bb->index], st_avloc[bb->index],\n+\t\t\tnearerout[bb->index]);\n \n   for (x = 0; x < NUM_EDGES (edge_list); x++)\n     {"}]}