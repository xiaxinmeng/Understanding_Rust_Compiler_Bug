{"sha": "2635995aca3d2b67d9544622a371e91ea30b369b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNTk5NWFjYTNkMmI2N2Q5NTQ0NjIyYTM3MWU5MWVhMzBiMzY5Yg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2004-04-21T06:52:26Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-04-21T06:52:26Z"}, "message": "gnu_java_awt_peer_gtk_GtkCheckboxPeer.c: Changed C++ comments into C comments.\n\n2004-04-21  Mark Wielaard  <mark@klomp.org>\n\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c:\n\tChanged C++ comments into C comments. Removed commented out code.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c:\n\tLikewise.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c:\n\tLikewise.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c:\n\tLikewise.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c:\n\tLikewise.\n\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c:\n\tLikewise.\n\t* native/jni/gtk-peer/gthread-jni.c:\n\tLikewise.\n\nFrom-SVN: r80946", "tree": {"sha": "aa7388f90a289dbfcff3978c7c292d0ae55011f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7388f90a289dbfcff3978c7c292d0ae55011f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2635995aca3d2b67d9544622a371e91ea30b369b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2635995aca3d2b67d9544622a371e91ea30b369b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2635995aca3d2b67d9544622a371e91ea30b369b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2635995aca3d2b67d9544622a371e91ea30b369b/comments", "author": null, "committer": null, "parents": [{"sha": "1c3d6bb26fdfe129a7b087a1843ed4d0b051013b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c3d6bb26fdfe129a7b087a1843ed4d0b051013b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c3d6bb26fdfe129a7b087a1843ed4d0b051013b"}], "stats": {"total": 109, "additions": 61, "deletions": 48}, "files": [{"sha": "24f315164ab32c1a5e37818a6b94e8bf15a62097", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,3 +1,20 @@\n+2004-04-21  Mark Wielaard  <mark@klomp.org>\n+\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c:\n+\tChanged C++ comments into C comments. Removed commented out code.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c:\n+\tLikewise.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c:\n+\tLikewise.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c:\n+\tLikewise.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c:\n+\tLikewise.\n+\t* native/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c:\n+\tLikewise.\n+\t* native/jni/gtk-peer/gthread-jni.c:\n+\tLikewise.\n+\n 2004-04-21  Mark Wielaard  <mark@klomp.org>\n \n \t* javax/awt/JFrame.java: Implement WindowConstants. Remove final"}, {"sha": "88821ae9a487520c34bec9189bb409ff68c3546c", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkCheckboxPeer.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtkcheckboxpeer.c -- Native implementation of GtkCheckboxPeer\n-   Copyright (C) 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2003, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -230,7 +230,6 @@ Java_gnu_java_awt_peer_gtk_GtkCheckboxPeer_gtkSetLabel\n static void\n item_toggled (GtkToggleButton *item, jobject peer)\n {\n-  //g_print (\"toggled\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer,\n \t\t\t      postItemEventID,\n \t\t\t      peer,"}, {"sha": "99cd841386e0880ca6259b9a71e3d62130941416", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkComponentPeer.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtkcomponentpeer.c -- Native implementation of GtkComponentPeer\n-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -610,10 +610,12 @@ Java_gnu_java_awt_peer_gtk_GtkComponentPeer_set__Ljava_lang_String_2Ljava_lang_O\n gboolean\n filter_expose_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n {\n-  // Prevent the default event handler from getting this signal if applicable\n-  // FIXME: I came up with these filters by looking for patterns in the unwanted\n-  //        expose events that are fed back to us from gtk/X. Perhaps there is\n-  //        a way to prevent them from occuring in the first place.\n+  /*\n+   * Prevent the default event handler from getting this signal if applicable\n+   * FIXME: I came up with these filters by looking for patterns in the unwanted\n+   *        expose events that are fed back to us from gtk/X. Perhaps there is\n+   *        a way to prevent them from occuring in the first place.\n+   */\n   if (event->type == GDK_EXPOSE && (!GTK_IS_LAYOUT(widget)\n                                     || event->any.window != widget->window))\n     {\n@@ -622,8 +624,8 @@ filter_expose_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n     }\n   else\n     {\n-      // There may be non-expose events that are triggered while we're\n-      // painting a heavyweight peer.\n+      /* There may be non-expose events that are triggered while we're\n+        painting a heavyweight peer. */\n       return pre_event_handler(widget, event, peer);\n     }\n }\n@@ -641,8 +643,8 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_addExposeFilt\n \n   gdk_threads_enter ();\n \n-  // GtkFramePeer is built as a GtkLayout inside a GtkVBox inside a GtkWindow.\n-  // Events go to the GtkLayout layer, so we filter them there.\n+  /* GtkFramePeer is built as a GtkLayout inside a GtkVBox inside a GtkWindow.\n+     Events go to the GtkLayout layer, so we filter them there. */\n   if (GTK_IS_WINDOW(ptr))\n     {\n       children = gtk_container_get_children(GTK_CONTAINER(ptr));\n@@ -685,8 +687,8 @@ JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_GtkComponentPeer_removeExposeF\n \n   gdk_threads_enter ();\n \n-  // GtkFramePeer is built as a GtkLayout inside a GtkVBox inside a GtkWindow.\n-  // Events go to the GtkLayout layer, so we filter them there.\n+  /* GtkFramePeer is built as a GtkLayout inside a GtkVBox inside a GtkWindow.\n+     Events go to the GtkLayout layer, so we filter them there. */\n   if (GTK_IS_WINDOW(ptr))\n     {\n       children = gtk_container_get_children(GTK_CONTAINER(ptr));"}, {"sha": "efee7c8f1a2a877b718027f2188555025e8a781c", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtkevents.c -- GDK/GTK event handlers\n-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -934,9 +934,9 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n \t\t\t\t    click_count,\n \t\t\t\t    JNI_FALSE);\n \n-\t// Generate an AWT click event only if the release occured in the\n-\t// window it was pressed in, and the mouse has not been dragged since\n-\t// the last time it was pressed.\n+\t/* Generate an AWT click event only if the release occured in the\n+\t   window it was pressed in, and the mouse has not been dragged since\n+\t   the last time it was pressed. */\n \tgdk_window_get_size (event->any.window, &width, &height);\n \tif (! hasBeenDragged\n \t    && event->button.x >= 0\n@@ -1038,11 +1038,11 @@ pre_event_handler (GtkWidget *widget, GdkEvent *event, jobject peer)\n       break;\n     case GDK_EXPOSE:\n       {\n-        // This filters out unwanted feedback expose events from gtk/X\n-        // when we explictly invalidate and update heavyweight components,\n-        // thus avoiding an infinite loop.\n-        // FIXME: I'm not quite sure why we're getting these expose events. \n-        //        Maybe there is a way to avoid them?\n+        /* This filters out unwanted feedback expose events from gtk/X\n+           when we explictly invalidate and update heavyweight components,\n+           thus avoiding an infinite loop.\n+           FIXME: I'm not quite sure why we're getting these expose events. \n+                  Maybe there is a way to avoid them? */\n         if((event->any.window == widget->window && event->any.send_event)\n            || GTK_IS_LAYOUT(widget))\n           {\n@@ -1181,7 +1181,6 @@ attach_jobject (GdkWindow *window, jobject *obj)\n \t\t\t | GDK_KEY_PRESS_MASK\n \t\t\t | GDK_FOCUS_CHANGE_MASK);\n \n-  //  g_print(\"storing obj %p property on window %p\\n\", obj, window);\n   gdk_property_change (window,\n \t\t       addr_atom,\n \t\t       type_atom,\n@@ -1196,10 +1195,8 @@ connect_awt_hook (JNIEnv *env, jobject peer_obj, int nwindows, ...)\n {\n   va_list ap;\n   jobject *obj;\n-  //void *ptr = NSA_GET_PTR (env, peer_obj);\n \n   obj = NSA_GET_GLOBAL_REF (env, peer_obj);\n-  //g_print(\"Connection obj %s\\n\", gtk_widget_get_name (GTK_WIDGET (ptr)));\n   g_assert (obj);\n \n   va_start (ap, nwindows);"}, {"sha": "92e2de3320503973f9256c44b125b081443045cb", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkFileDialogPeer.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtkfiledialogpeer.c -- Native implementation of GtkFileDialogPeer\n-   Copyright (C) 1998, 1999, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -156,7 +156,7 @@ window_closed (GtkDialog *dialog __attribute__((unused)),\n   static jmethodID disposeID;\n   void *ptr;\n \n-  // We only need this for the case when the user closed the window\n+  /* We only need this for the case when the user closed the window. */\n   if (responseId != GTK_RESPONSE_DELETE_EVENT)\n     return;\n "}, {"sha": "87ecafce991c9d27d198ad196156ba54015ec903", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkListPeer.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtklistpeer.c -- Native implementation of GtkListPeer\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -324,7 +324,6 @@ item_select (GtkCList *list __attribute__((unused)),\n \t     GdkEventButton *event __attribute__((unused)), \n \t     jobject peer_obj)\n {\n-  //g_print (\"select_row\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,\n@@ -338,7 +337,6 @@ item_unselect (GtkCList *list __attribute__((unused)),\n \t       GdkEventButton *event __attribute__((unused)),\n \t       jobject peer_obj)\n {\n-  //g_print (\"unselect_row\\n\");\n   (*gdk_env)->CallVoidMethod (gdk_env, peer_obj,\n \t\t\t      postListItemEventID,\n \t\t\t      row,"}, {"sha": "0d7d55562c562e7610658cfbbdb3417eb6027f70", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gtktextcomponentpeer.c -- Native implementation of GtkTextComponentPeer\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -112,8 +112,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getCaretPosition\n {\n   void *ptr;\n   int pos = 0;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextMark *mark;\n   GtkTextIter iter;\n@@ -157,8 +157,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setCaretPosition\n   (JNIEnv *env, jobject obj, jint pos)\n {\n   void *ptr;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextIter iter;\n \n@@ -198,8 +198,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getSelectionStart\n {\n   void *ptr;\n   int pos = 0;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextIter start;\n   GtkTextIter end;\n@@ -255,8 +255,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getSelectionEnd\n {\n   void *ptr;\n   int pos = 0;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextIter start;\n   GtkTextIter end;\n@@ -311,8 +311,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_select\n   (JNIEnv *env, jobject obj, jint start, jint end)\n {\n   void *ptr;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextIter iter;\n \n@@ -357,8 +357,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setEditable\n   (JNIEnv *env, jobject obj, jboolean state)\n {\n   void *ptr;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n \n   ptr = NSA_GET_PTR (env, obj);\n \n@@ -396,8 +396,8 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_getText\n   void *ptr;\n   char *contents = NULL;\n   jstring jcontents;\n-  GtkEditable *editable;    // type of GtkEntry    (TextField)\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkEditable *editable;    /* type of GtkEntry    (TextField) */\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n   GtkTextIter start, end;\n \n@@ -444,7 +444,7 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setText\n {\n   void *ptr;\n   const char *str;\n-  GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n+  GtkWidget *text = NULL;   /* type of GtkTextView (TextArea) */\n   GtkTextBuffer *buf;\n \n   ptr = NSA_GET_PTR (env, obj);"}, {"sha": "cd37fe105af4fb18d28c81b54466bafcd60133c9", "filename": "libjava/jni/gtk-peer/gthread-jni.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2635995aca3d2b67d9544622a371e91ea30b369b/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgthread-jni.c?ref=2635995aca3d2b67d9544622a371e91ea30b369b", "patch": "@@ -1,5 +1,5 @@\n /* gthread-jni.c -- JNI threading routines for GLIB\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -204,7 +204,7 @@ static void g_mutex_lock_jni_impl (GMutex *mutex __attribute__((unused))) {\n static gboolean g_mutex_trylock_jni_impl\n   (GMutex *mutex __attribute__((unused)))\n {\n-  // Shall we implement this in a JikesRVM-specific way under a flag?\n+  /* XXX Shall we implement this in a VM-specific way under a flag? */\n   return FALSE;\n }\n "}]}