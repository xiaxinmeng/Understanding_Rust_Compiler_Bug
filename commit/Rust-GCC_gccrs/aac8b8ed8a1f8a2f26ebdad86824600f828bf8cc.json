{"sha": "aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFjOGI4ZWQ4YTFmOGEyZjI2ZWJkYWQ4NjgyNDYwMGY4MjhiZjhjYw==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-09-18T01:54:33Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-09-18T01:54:33Z"}, "message": "re PR tree-optimization/28887 (rejects valid code (bitfields and loops) with -O1 -fprefetch-loop-arrays)\n\n2006-09-17  Zdenek Dvorak <dvorakz@suse.cz>\n\n\tPR tree-optimization/28887\n\t* tree-ssa-loop-prefetch.c (analyze_ref): Strip nonaddressable\n\tcomponent parts from the reference.\n\t(gather_memory_references_ref): Record the reference without the\n\tnonaddressable component parts.\n\n\t* gcc.dg/prefetch-loop-arrays-1.c: New test case.\n\nFrom-SVN: r117012", "tree": {"sha": "75f098e9bc265156e2b16c0f13768b250a6693ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75f098e9bc265156e2b16c0f13768b250a6693ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/comments", "author": null, "committer": null, "parents": [{"sha": "8e77de24deed6692b43b91bc753d3d78895527cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e77de24deed6692b43b91bc753d3d78895527cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e77de24deed6692b43b91bc753d3d78895527cd"}], "stats": {"total": 61, "additions": 57, "deletions": 4}, "files": [{"sha": "0f89e1e9a9a8fe0b17be0d9d40df1bf1905b86f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "patch": "@@ -1,3 +1,11 @@\n+2006-09-17  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\tPR tree-optimization/28887\n+\t* tree-ssa-loop-prefetch.c (analyze_ref): Strip nonaddressable\n+\tcomponent parts from the reference.\n+\t(gather_memory_references_ref): Record the reference without the\n+\tnonaddressable component parts.\n+\n 2006-09-17  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR c/25993"}, {"sha": "ee17e1942461a7fdc95e06dd6ba298183a2ce4b8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "patch": "@@ -1,3 +1,8 @@\n+2006-09-17  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR tree-optimization/28887\n+\t* gcc.dg/prefetch-loop-arrays-1.c: New test case.\n+\n 2006-09-16  Steven Bosscher  <steven@gcc.gnu.org>\n \n \tPR c/25993"}, {"sha": "ba91d69650dc5723d145b20577268ba7850a5b39", "filename": "gcc/testsuite/gcc.dg/prefetch-loop-arrays-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftestsuite%2Fgcc.dg%2Fprefetch-loop-arrays-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftestsuite%2Fgcc.dg%2Fprefetch-loop-arrays-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprefetch-loop-arrays-1.c?ref=aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "patch": "@@ -0,0 +1,36 @@\n+/* PR tree-optimization/28887 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fprefetch-loop-arrays -w\" } */\n+/* { dg-options \"-O2 -fprefetch-loop-arrays -march=i686 -msse -w\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+typedef unsigned long size_t;\n+\n+struct re_pattern_buffer\n+{\n+  size_t re_nsub;\n+};\n+\n+typedef enum\n+{\n+  start_memory,\n+} re_opcode_t;\n+\n+typedef union\n+{\n+  struct\n+  {\n+    unsigned matched_something:1;\n+  } bits;\n+} byte_register_info_type;\n+\n+void byte_re_match_2_internal (struct re_pattern_buffer *bufp)\n+{\n+  int mcnt;\n+  size_t num_regs = bufp->re_nsub + 1;\n+  byte_register_info_type *reg_info;\n+  for (mcnt = 1; (unsigned) mcnt < num_regs; mcnt++)\n+    {\n+      ((reg_info[mcnt]).bits.matched_something) = 0;\n+    }\n+}\n+"}, {"sha": "f9fe2d30c8a97f41397159e940b0adf9ef07ddd5", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=aac8b8ed8a1f8a2f26ebdad86824600f828bf8cc", "patch": "@@ -387,18 +387,20 @@ idx_analyze_ref (tree base, tree *index, void *data)\n   return true;\n }\n \n-/* Tries to express REF in shape &BASE + STEP * iter + DELTA, where DELTA and\n+/* Tries to express REF_P in shape &BASE + STEP * iter + DELTA, where DELTA and\n    STEP are integer constants and iter is number of iterations of LOOP.  The\n-   reference occurs in statement STMT.  */\n+   reference occurs in statement STMT.  Strips nonaddressable component\n+   references from REF_P.  */\n \n static bool\n-analyze_ref (struct loop *loop, tree ref, tree *base,\n+analyze_ref (struct loop *loop, tree *ref_p, tree *base,\n \t     HOST_WIDE_INT *step, HOST_WIDE_INT *delta,\n \t     tree stmt)\n {\n   struct ar_data ar_data;\n   tree off;\n   HOST_WIDE_INT bit_offset;\n+  tree ref = *ref_p;\n \n   *step = 0;\n   *delta = 0;\n@@ -408,6 +410,8 @@ analyze_ref (struct loop *loop, tree ref, tree *base,\n       && DECL_NONADDRESSABLE_P (TREE_OPERAND (ref, 1)))\n     ref = TREE_OPERAND (ref, 0);\n \n+  *ref_p = ref;\n+\n   for (; TREE_CODE (ref) == COMPONENT_REF; ref = TREE_OPERAND (ref, 0))\n     {\n       off = DECL_FIELD_BIT_OFFSET (TREE_OPERAND (ref, 1));\n@@ -436,7 +440,7 @@ gather_memory_references_ref (struct loop *loop, struct mem_ref_group **refs,\n   HOST_WIDE_INT step, delta;\n   struct mem_ref_group *agrp;\n \n-  if (!analyze_ref (loop, ref, &base, &step, &delta, stmt))\n+  if (!analyze_ref (loop, &ref, &base, &step, &delta, stmt))\n     return;\n \n   /* Now we know that REF = &BASE + STEP * iter + DELTA, where DELTA and STEP"}]}