{"sha": "555456b175d649bfd04a906e4d32b9329f35db4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU1NDU2YjE3NWQ2NDliZmQwNGE5MDZlNGQzMmI5MzI5ZjM1ZGI0Yw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2003-04-29T21:28:41Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2003-04-29T21:28:41Z"}, "message": "re PR c++/10549 (ICE in store_bit_field on bitfields that exceed the precision of the declared type.)\n\n\tPR c++/10549\n\t* class.c (layout_class_type): Mark overlong bitfields as having\n\tthe maximum size permitted by their type, after layout.\n\n\tPR c++/10549\n\t* g++.dg/other/bitfield1.C: New test.\n\nFrom-SVN: r66257", "tree": {"sha": "bd8ac54fa0e75ebd131c2a5b7f7640db81897cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd8ac54fa0e75ebd131c2a5b7f7640db81897cd8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/555456b175d649bfd04a906e4d32b9329f35db4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555456b175d649bfd04a906e4d32b9329f35db4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/555456b175d649bfd04a906e4d32b9329f35db4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/555456b175d649bfd04a906e4d32b9329f35db4c/comments", "author": null, "committer": null, "parents": [{"sha": "f4ddb75bb3980dc9c331ddb0dbab5704920d3742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4ddb75bb3980dc9c331ddb0dbab5704920d3742", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4ddb75bb3980dc9c331ddb0dbab5704920d3742"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "3da06762f4bffef19a4010333e02e3fc8b48df5a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=555456b175d649bfd04a906e4d32b9329f35db4c", "patch": "@@ -1,5 +1,9 @@\n 2003-04-29  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10549\n+\t* class.c (layout_class_type): Mark overlong bitfields as having\n+\tthe maximum size permitted by their type, after layout.\n+\n \tPR c++/10527\n \t* error.c (dump_expr): Correctly handling of NEW_EXPR.4\n "}, {"sha": "7dbfa768edd8bbf45e1dc8ede8dfdb84c534d03d", "filename": "gcc/cp/class.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=555456b175d649bfd04a906e4d32b9329f35db4c", "patch": "@@ -4724,7 +4724,6 @@ layout_class_type (tree t, tree *virtuals_p)\n     {\n       tree type;\n       tree padding;\n-      bool was_unnamed_p = false;\n \n       /* We still pass things that aren't non-static data members to\n \t the back-end, in case it wants to do something with them.  */\n@@ -4758,6 +4757,7 @@ layout_class_type (tree t, tree *virtuals_p)\n \t{\n \t  integer_type_kind itk;\n \t  tree integer_type;\n+\t  bool was_unnamed_p = false;\n \t  /* We must allocate the bits as if suitably aligned for the\n \t     longest integer type that fits in this many bits.  type\n \t     of the field.  Then, we are supposed to use the left over\n@@ -4809,14 +4809,18 @@ layout_class_type (tree t, tree *virtuals_p)\n \t  DECL_SIZE (field) = TYPE_SIZE (integer_type);\n \t  DECL_ALIGN (field) = TYPE_ALIGN (integer_type);\n \t  DECL_USER_ALIGN (field) = TYPE_USER_ALIGN (integer_type);\n+\t  layout_nonempty_base_or_field (rli, field, NULL_TREE,\n+\t\t\t\t\t empty_base_offsets);\n+\t  if (was_unnamed_p)\n+\t    DECL_NAME (field) = NULL_TREE;\n+\t  /* Now that layout has been performed, set the size of the\n+\t     field to the size of its declared type; the rest of the\n+\t     field is effectively invisible.  */\n+\t  DECL_SIZE (field) = TYPE_SIZE (type);\n \t}\n-\n-      layout_nonempty_base_or_field (rli, field, NULL_TREE,\n-\t\t\t\t     empty_base_offsets);\n-      /* If the bit-field had no name originally, remove the name\n-\t now.  */\n-      if (was_unnamed_p)\n-\tDECL_NAME (field) = NULL_TREE;\n+      else\n+\tlayout_nonempty_base_or_field (rli, field, NULL_TREE,\n+\t\t\t\t       empty_base_offsets);\n \n       /* Remember the location of any empty classes in FIELD.  */\n       if (abi_version_at_least (2))"}, {"sha": "9fba7a37219f7d4c68d506bfa6b5814f29fe9ff7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=555456b175d649bfd04a906e4d32b9329f35db4c", "patch": "@@ -1,5 +1,8 @@\n 2003-04-29  Mark Mitchell  <mark@codesourcery.com>\n \n+\tPR c++/10549\n+\t* g++.dg/other/bitfield1.C: New test.\n+\n \tPR c++/10527\n \t* g++.dg/init/new7.C: New test.\n "}, {"sha": "896490fbafc64093d69d67fa7f0d842cc42b4bc5", "filename": "gcc/testsuite/g++.dg/other/bitfield1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/555456b175d649bfd04a906e4d32b9329f35db4c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fbitfield1.C?ref=555456b175d649bfd04a906e4d32b9329f35db4c", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-w\" }\n+\n+union u1 {\n+  char m1 : 16;\n+} x;\n+\n+int main () {\n+  x.m1 = 256;\n+}"}]}