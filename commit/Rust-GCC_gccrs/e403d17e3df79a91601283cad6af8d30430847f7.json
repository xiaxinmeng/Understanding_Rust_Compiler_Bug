{"sha": "e403d17e3df79a91601283cad6af8d30430847f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwM2QxN2UzZGY3OWE5MTYwMTI4M2NhZDZhZjhkMzA0MzA4NDdmNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-01-14T14:51:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-01-14T14:51:35Z"}, "message": "re PR tree-optimization/66856 (ICE in compute_live_loop_exits, at tree-ssa-loop-manip.c:234)\n\n2016-01-14  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66856\n\t* tree-vect-slp.c (vect_build_slp_tree): Refactor to build\n\tSLP node only if it built successfully.\n\t(vect_analyze_slp_instance): Adjust.\n\nFrom-SVN: r232364", "tree": {"sha": "e42a704930dffbe9410b9d8b560a41cc11df9a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e42a704930dffbe9410b9d8b560a41cc11df9a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e403d17e3df79a91601283cad6af8d30430847f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e403d17e3df79a91601283cad6af8d30430847f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e403d17e3df79a91601283cad6af8d30430847f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e403d17e3df79a91601283cad6af8d30430847f7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bab0ad3a30b79e086b55bdb5337a2e5cab0cf437", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bab0ad3a30b79e086b55bdb5337a2e5cab0cf437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bab0ad3a30b79e086b55bdb5337a2e5cab0cf437"}], "stats": {"total": 152, "additions": 74, "deletions": 78}, "files": [{"sha": "4cf1e815ce4ffc30283888f1dd7e7db6363bce4d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e403d17e3df79a91601283cad6af8d30430847f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e403d17e3df79a91601283cad6af8d30430847f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e403d17e3df79a91601283cad6af8d30430847f7", "patch": "@@ -1,3 +1,10 @@\n+2016-01-14  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66856\n+\t* tree-vect-slp.c (vect_build_slp_tree): Refactor to build\n+\tSLP node only if it built successfully.\n+\t(vect_analyze_slp_instance): Adjust.\n+\n 2016-01-14  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/69270"}, {"sha": "161655a084fa9d8f16472052944c4307cdb8e72e", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 67, "deletions": 78, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e403d17e3df79a91601283cad6af8d30430847f7/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e403d17e3df79a91601283cad6af8d30430847f7/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=e403d17e3df79a91601283cad6af8d30430847f7", "patch": "@@ -834,20 +834,21 @@ vect_build_slp_tree_1 (vec_info *vinfo,\n    The value returned is the depth in the SLP tree where a mismatch\n    was found.  */\n \n-static bool\n+static slp_tree\n vect_build_slp_tree (vec_info *vinfo,\n-                     slp_tree *node, unsigned int group_size,\n+                     vec<gimple *> stmts, unsigned int group_size,\n                      unsigned int *max_nunits,\n                      vec<slp_tree> *loads,\n \t\t     bool *matches, unsigned *npermutes, unsigned *tree_size,\n \t\t     unsigned max_tree_size)\n {\n-  unsigned nops, i, this_tree_size = 0;\n+  unsigned nops, i, this_tree_size = 0, this_max_nunits = *max_nunits;\n   gimple *stmt;\n+  slp_tree node;\n \n   matches[0] = false;\n \n-  stmt = SLP_TREE_SCALAR_STMTS (*node)[0];\n+  stmt = stmts[0];\n   if (is_gimple_call (stmt))\n     nops = gimple_call_num_args (stmt);\n   else if (is_gimple_assign (stmt))\n@@ -857,27 +858,28 @@ vect_build_slp_tree (vec_info *vinfo,\n \tnops++;\n     }\n   else\n-    return false;\n+    return NULL;\n \n   bool two_operators = false;\n   if (!vect_build_slp_tree_1 (vinfo,\n-\t\t\t      SLP_TREE_SCALAR_STMTS (*node), group_size, nops,\n-\t\t\t      max_nunits, matches, &two_operators))\n-    return false;\n-  SLP_TREE_TWO_OPERATORS (*node) = two_operators;\n+\t\t\t      stmts, group_size, nops,\n+\t\t\t      &this_max_nunits, matches, &two_operators))\n+    return NULL;\n \n   /* If the SLP node is a load, terminate the recursion.  */\n   if (STMT_VINFO_GROUPED_ACCESS (vinfo_for_stmt (stmt))\n       && DR_IS_READ (STMT_VINFO_DATA_REF (vinfo_for_stmt (stmt))))\n     {\n-      loads->safe_push (*node);\n-      return true;\n+      *max_nunits = this_max_nunits;\n+      node = vect_create_new_slp_node (stmts);\n+      loads->safe_push (node);\n+      return node;\n     }\n \n   /* Get at the operands, verifying they are compatible.  */\n   vec<slp_oprnd_info> oprnds_info = vect_create_oprnd_info (nops, group_size);\n   slp_oprnd_info oprnd_info;\n-  FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (*node), i, stmt)\n+  FOR_EACH_VEC_ELT (stmts, i, stmt)\n     {\n       switch (vect_get_and_check_slp_defs (vinfo, stmt, i, &oprnds_info))\n \t{\n@@ -886,7 +888,7 @@ vect_build_slp_tree (vec_info *vinfo,\n \tcase -1:\n \t  matches[0] = false;\n \t  vect_free_oprnd_info (oprnds_info);\n-\t  return false;\n+\t  return NULL;\n \tcase 1:\n \t  matches[i] = false;\n \t  break;\n@@ -896,43 +898,43 @@ vect_build_slp_tree (vec_info *vinfo,\n     if (!matches[i])\n       {\n \tvect_free_oprnd_info (oprnds_info);\n-\treturn false;\n+\treturn NULL;\n       }\n \n-  stmt = SLP_TREE_SCALAR_STMTS (*node)[0];\n+  auto_vec<slp_tree, 4> children;\n+  auto_vec<slp_tree> this_loads;\n+\n+  stmt = stmts[0];\n \n   /* Create SLP_TREE nodes for the definition node/s.  */\n   FOR_EACH_VEC_ELT (oprnds_info, i, oprnd_info)\n     {\n       slp_tree child;\n-      unsigned old_nloads = loads->length ();\n-      unsigned old_max_nunits = *max_nunits;\n+      unsigned old_nloads = this_loads.length ();\n+      unsigned old_tree_size = this_tree_size;\n+      unsigned int j;\n \n       if (oprnd_info->first_dt != vect_internal_def)\n         continue;\n \n       if (++this_tree_size > max_tree_size)\n \t{\n+\t  FOR_EACH_VEC_ELT (children, j, child)\n+\t    vect_free_slp_tree (child);\n \t  vect_free_oprnd_info (oprnds_info);\n-\t  return false;\n+\t  return NULL;\n \t}\n \n-      child = vect_create_new_slp_node (oprnd_info->def_stmts);\n-      if (!child)\n-\t{\n-\t  vect_free_oprnd_info (oprnds_info);\n-\t  return false;\n-\t}\n-\n-      if (vect_build_slp_tree (vinfo, &child,\n-\t\t\t       group_size, max_nunits, loads, matches,\n-\t\t\t       npermutes, &this_tree_size, max_tree_size))\n+      if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n+\t\t\t\t\tgroup_size, &this_max_nunits,\n+\t\t\t\t\t&this_loads, matches, npermutes,\n+\t\t\t\t\t&this_tree_size,\n+\t\t\t\t\tmax_tree_size)) != NULL)\n \t{\n \t  /* If we have all children of child built up from scalars then just\n \t     throw that away and build it up this node from scalars.  */\n \t  if (!SLP_TREE_CHILDREN (child).is_empty ())\n \t    {\n-\t      unsigned int j;\n \t      slp_tree grandchild;\n \n \t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n@@ -941,8 +943,8 @@ vect_build_slp_tree (vec_info *vinfo,\n \t      if (!grandchild)\n \t\t{\n \t\t  /* Roll back.  */\n-\t\t  *max_nunits = old_max_nunits;\n-\t\t  loads->truncate (old_nloads);\n+\t\t  this_loads.truncate (old_nloads);\n+\t\t  this_tree_size = old_tree_size;\n \t\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n \t\t    vect_free_slp_tree (grandchild);\n \t\t  SLP_TREE_CHILDREN (child).truncate (0);\n@@ -952,13 +954,13 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t\t\t   \"scalars instead\\n\");\n \t\t  oprnd_info->def_stmts = vNULL;\n \t\t  SLP_TREE_DEF_TYPE (child) = vect_external_def;\n-\t\t  SLP_TREE_CHILDREN (*node).quick_push (child);\n+\t\t  children.safe_push (child);\n \t\t  continue;\n \t\t}\n \t    }\n \n \t  oprnd_info->def_stmts = vNULL;\n-\t  SLP_TREE_CHILDREN (*node).quick_push (child);\n+\t  children.safe_push (child);\n \t  continue;\n \t}\n \n@@ -977,21 +979,12 @@ vect_build_slp_tree (vec_info *vinfo,\n \t     scalar version.  */\n \t  && !is_pattern_stmt_p (vinfo_for_stmt (stmt)))\n \t{\n-\t  unsigned int j;\n-\t  slp_tree grandchild;\n-\n-\t  /* Roll back.  */\n-\t  *max_nunits = old_max_nunits;\n-\t  loads->truncate (old_nloads);\n-\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n-\t    vect_free_slp_tree (grandchild);\n-\t  SLP_TREE_CHILDREN (child).truncate (0);\n-\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"Building vector operands from scalars\\n\");\n-\t  oprnd_info->def_stmts = vNULL;\n+\t  child = vect_create_new_slp_node (oprnd_info->def_stmts);\n \t  SLP_TREE_DEF_TYPE (child) = vect_external_def;\n-\t  SLP_TREE_CHILDREN (*node).quick_push (child);\n+\t  children.safe_push (child);\n+\t  oprnd_info->def_stmts = vNULL;\n \t  continue;\n \t}\n \n@@ -1007,23 +1000,13 @@ vect_build_slp_tree (vec_info *vinfo,\n \t  && oprnds_info[1]->first_dt == vect_internal_def\n \t  && is_gimple_assign (stmt)\n \t  && commutative_tree_code (gimple_assign_rhs_code (stmt))\n-\t  && !SLP_TREE_TWO_OPERATORS (*node)\n+\t  && ! two_operators\n \t  /* Do so only if the number of not successful permutes was nor more\n \t     than a cut-ff as re-trying the recursive match on\n \t     possibly each level of the tree would expose exponential\n \t     behavior.  */\n \t  && *npermutes < 4)\n \t{\n-\t  unsigned int j;\n-\t  slp_tree grandchild;\n-\n-\t  /* Roll back.  */\n-\t  *max_nunits = old_max_nunits;\n-\t  loads->truncate (old_nloads);\n-\t  FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n-\t    vect_free_slp_tree (grandchild);\n-\t  SLP_TREE_CHILDREN (child).truncate (0);\n-\n \t  /* Swap mismatched definition stmts.  */\n \t  dump_printf_loc (MSG_NOTE, vect_location,\n \t\t\t   \"Re-trying with swapped operands of stmts \");\n@@ -1037,10 +1020,11 @@ vect_build_slp_tree (vec_info *vinfo,\n \t  dump_printf (MSG_NOTE, \"\\n\");\n \t  /* And try again with scratch 'matches' ... */\n \t  bool *tem = XALLOCAVEC (bool, group_size);\n-\t  if (vect_build_slp_tree (vinfo, &child,\n-\t\t\t\t   group_size, max_nunits, loads,\n-\t\t\t\t   tem, npermutes, &this_tree_size,\n-\t\t\t\t   max_tree_size))\n+\t  if ((child = vect_build_slp_tree (vinfo, oprnd_info->def_stmts,\n+\t\t\t\t\t    group_size, &this_max_nunits,\n+\t\t\t\t\t    &this_loads, tem, npermutes,\n+\t\t\t\t\t    &this_tree_size,\n+\t\t\t\t\t    max_tree_size)) != NULL)\n \t    {\n \t      /* ... so if successful we can apply the operand swapping\n \t\t to the GIMPLE IL.  This is necessary because for example\n@@ -1050,12 +1034,12 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t we'll continue to process swapped operand two.  */\n \t      for (j = 0; j < group_size; ++j)\n \t\t{\n-\t\t  gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t  gimple *stmt = stmts[j];\n \t\t  gimple_set_plf (stmt, GF_PLF_1, false);\n \t\t}\n \t      for (j = 0; j < group_size; ++j)\n \t\t{\n-\t\t  gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t  gimple *stmt = stmts[j];\n \t\t  if (!matches[j])\n \t\t    {\n \t\t      /* Avoid swapping operands twice.  */\n@@ -1070,7 +1054,7 @@ vect_build_slp_tree (vec_info *vinfo,\n \t      if (flag_checking)\n \t\tfor (j = 0; j < group_size; ++j)\n \t\t  {\n-\t\t    gimple *stmt = SLP_TREE_SCALAR_STMTS (*node)[j];\n+\t\t    gimple *stmt = stmts[j];\n \t\t    gcc_assert (gimple_plf (stmt, GF_PLF_1) == ! matches[j]);\n \t\t  }\n \n@@ -1087,8 +1071,8 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t  if (!grandchild)\n \t\t    {\n \t\t      /* Roll back.  */\n-\t\t      *max_nunits = old_max_nunits;\n-\t\t      loads->truncate (old_nloads);\n+\t\t      this_loads.truncate (old_nloads);\n+\t\t      this_tree_size = old_tree_size;\n \t\t      FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (child), j, grandchild)\n \t\t\tvect_free_slp_tree (grandchild);\n \t\t      SLP_TREE_CHILDREN (child).truncate (0);\n@@ -1098,30 +1082,37 @@ vect_build_slp_tree (vec_info *vinfo,\n \t\t\t\t       \"scalars instead\\n\");\n \t\t      oprnd_info->def_stmts = vNULL;\n \t\t      SLP_TREE_DEF_TYPE (child) = vect_external_def;\n-\t\t      SLP_TREE_CHILDREN (*node).quick_push (child);\n+\t\t      children.safe_push (child);\n \t\t      continue;\n \t\t    }\n \t\t}\n \n \t      oprnd_info->def_stmts = vNULL;\n-\t      SLP_TREE_CHILDREN (*node).quick_push (child);\n+\t      children.safe_push (child);\n \t      continue;\n \t    }\n \n \t  ++*npermutes;\n \t}\n \n-      oprnd_info->def_stmts = vNULL;\n-      vect_free_slp_tree (child);\n+      gcc_assert (child == NULL);\n+      FOR_EACH_VEC_ELT (children, j, child)\n+\tvect_free_slp_tree (child);\n       vect_free_oprnd_info (oprnds_info);\n-      return false;\n+      return NULL;\n     }\n \n+  vect_free_oprnd_info (oprnds_info);\n+\n   if (tree_size)\n     *tree_size += this_tree_size;\n+  *max_nunits = this_max_nunits;\n+  loads->safe_splice (this_loads);\n \n-  vect_free_oprnd_info (oprnds_info);\n-  return true;\n+  node = vect_create_new_slp_node (stmts);\n+  SLP_TREE_TWO_OPERATORS (node) = two_operators;\n+  SLP_TREE_CHILDREN (node).splice (children);\n+  return node;\n }\n \n /* Dump a slp tree NODE using flags specified in DUMP_KIND.  */\n@@ -1733,16 +1724,14 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \tscalar_stmts.safe_push (next);\n     }\n \n-  node = vect_create_new_slp_node (scalar_stmts);\n-\n   loads.create (group_size);\n \n   /* Build the tree for the SLP instance.  */\n   bool *matches = XALLOCAVEC (bool, group_size);\n   unsigned npermutes = 0;\n-  if (vect_build_slp_tree (vinfo, &node, group_size,\n-\t\t\t   &max_nunits, &loads,\n-\t\t\t   matches, &npermutes, NULL, max_tree_size))\n+  if ((node = vect_build_slp_tree (vinfo, scalar_stmts, group_size,\n+\t\t\t\t   &max_nunits, &loads, matches, &npermutes,\n+\t\t\t\t   NULL, max_tree_size)) != NULL)\n     {\n       /* Calculate the unrolling factor based on the smallest type.  */\n       if (max_nunits > nunits)\n@@ -1864,7 +1853,7 @@ vect_analyze_slp_instance (vec_info *vinfo,\n \n   /* Failed to SLP.  */\n   /* Free the allocated memory.  */\n-  vect_free_slp_tree (node);\n+  scalar_stmts.release ();\n   loads.release ();\n \n   /* For basic block SLP, try to break the group up into multiples of the"}]}