{"sha": "ac7edc01e80616a8befedf7610d13ce28fb4fe24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM3ZWRjMDFlODA2MTZhOGJlZmVkZjc2MTBkMTNjZTI4ZmI0ZmUyNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2002-11-29T07:50:46Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2002-11-29T07:50:46Z"}, "message": "2002-11-29  Michael Koch <konqueror@gmx.de>\n\n\t* gnu/java/nio/ByteBufferImpl.java\n\t(ByteBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t* gnu/java/nio/CharBufferImpl.java:\n\tReformated.\n\t(endian): New member variable string endianess of buffer.\n\t(CharBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t(subSequence): Implemented.\n\t* gnu/java/nio/DoubleBufferImpl.java\n\t(DoubleBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t* gnu/java/nio/FloatBufferImpl.java\n\tReformated.\n\t(FloatBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t* gnu/java/nio/IntBufferImpl.java\n\tAdded needed imports, Reformated.\n\t(IntBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t* gnu/java/nio/LongBufferImpl.java\n\tReformated.\n\t(LongBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\t* gnu/java/nio/ShortBufferImpl.java\n\tReformated.\n\t(ShortBufferImpl): Moved position() after limit.\n\t(nio_*): Use native implementation.\n\nFrom-SVN: r59624", "tree": {"sha": "9e238d8385de3d8973f9f9fa98de825686c56c48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e238d8385de3d8973f9f9fa98de825686c56c48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac7edc01e80616a8befedf7610d13ce28fb4fe24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7edc01e80616a8befedf7610d13ce28fb4fe24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac7edc01e80616a8befedf7610d13ce28fb4fe24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac7edc01e80616a8befedf7610d13ce28fb4fe24/comments", "author": null, "committer": null, "parents": [{"sha": "3f7211f19e48def37bb62c8195499d62da22e46c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f7211f19e48def37bb62c8195499d62da22e46c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f7211f19e48def37bb62c8195499d62da22e46c"}], "stats": {"total": 837, "additions": 366, "deletions": 471}, "files": [{"sha": "f7843ad392da5876a3e9b08dfdcf28fa5392811b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -1,3 +1,34 @@\n+2002-11-29  Michael Koch <konqueror@gmx.de>\n+\n+\t* gnu/java/nio/ByteBufferImpl.java\n+\t(ByteBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t* gnu/java/nio/CharBufferImpl.java:\n+\tReformated.\n+\t(endian): New member variable string endianess of buffer.\n+\t(CharBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t(subSequence): Implemented.\n+\t* gnu/java/nio/DoubleBufferImpl.java\n+\t(DoubleBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t* gnu/java/nio/FloatBufferImpl.java\n+\tReformated.\n+\t(FloatBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t* gnu/java/nio/IntBufferImpl.java\n+\tAdded needed imports, Reformated.\n+\t(IntBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t* gnu/java/nio/LongBufferImpl.java\n+\tReformated.\n+\t(LongBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\t* gnu/java/nio/ShortBufferImpl.java\n+\tReformated.\n+\t(ShortBufferImpl): Moved position() after limit.\n+\t(nio_*): Use native implementation.\n+\n 2002-11-27  Julian Dolby  <dolby@us.ibm.com>\n \n \t* java/util/Locale.java (toString): Improve efficiency if country"}, {"sha": "54fba2492e1d9aad5d3a914e0222458afb932fd5", "filename": "libjava/gnu/java/nio/ByteBufferImpl.java", "status": "modified", "additions": 31, "deletions": 52, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FByteBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -54,24 +54,24 @@ public final class ByteBufferImpl extends ByteBuffer\n   public ByteBufferImpl (int cap, int off, int lim)\n   {\n     this.cap = cap;\n-    position (off);\n     limit (lim);\n+    position (off);\n     this.backing_buffer = new byte[cap];\n   }\n \n   public ByteBufferImpl (byte[] array, int off, int lim)\n   {\n     this.cap = array.length;\n-    position (off);\n     limit (lim);\n+    position (off);\n     this.backing_buffer = array;\n   }\n \n   public ByteBufferImpl (ByteBufferImpl copy)\n   {\n     this.cap = copy.capacity ();\n-    position (copy.position ());\n     limit (copy.limit ());\n+    position (copy.position ());\n     ro = copy.ro;\n     backing_buffer = copy.backing_buffer;\n   }\n@@ -81,71 +81,50 @@ void inc_pos (int toAdd)\n     position (position () + toAdd);\n   }\n \n-//   private static native byte[] nio_cast(byte[]copy);\n-//   private static native byte[] nio_cast(char[]copy);\n-//   private static native byte[] nio_cast(short[]copy);\n-//   private static native byte[] nio_cast(long[]copy);\n-//   private static native byte[] nio_cast(int[]copy);\n-//   private static native byte[] nio_cast(float[]copy);\n-//   private static native byte[] nio_cast(double[]copy);\n-\n-  private static byte[] nio_cast(byte[]copy) { return null; };\n-  private static byte[] nio_cast(char[]copy) { return null; };\n-  private static byte[] nio_cast(short[]copy) { return null; };\n-  private static byte[] nio_cast(long[]copy) { return null; };\n-  private static byte[] nio_cast(int[]copy) { return null; };\n-  private static byte[] nio_cast(float[]copy) { return null; };\n-  private static byte[] nio_cast(double[]copy) { return null; };\n+  private static native byte[] nio_cast(byte[]copy);\n+  private static native byte[] nio_cast(char[]copy);\n+  private static native byte[] nio_cast(short[]copy);\n+  private static native byte[] nio_cast(long[]copy);\n+  private static native byte[] nio_cast(int[]copy);\n+  private static native byte[] nio_cast(float[]copy);\n+  private static native byte[] nio_cast(double[]copy);\n+\n \n   ByteBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(ByteBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(ByteBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(ByteBufferImpl b, int index, int limit, byte value) { };\n+  private static native byte nio_get_Byte(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(ByteBufferImpl b, int index, int limit, byte value);\n   public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/1); return res; }\n \n   ByteBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(ByteBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(ByteBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(ByteBufferImpl b, int index, int limit, char value) { };\n+  private static native char nio_get_Char(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(ByteBufferImpl b, int index, int limit, char value);\n   public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/1); return res; }\n \n   ByteBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(ByteBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(ByteBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(ByteBufferImpl b, int index, int limit, short value) { };\n+  private static native short nio_get_Short(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(ByteBufferImpl b, int index, int limit, short value);\n   public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/1); return res; }\n \n   ByteBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(ByteBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(ByteBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(ByteBufferImpl b, int index, int limit, int value) { };\n+  private static native int nio_get_Int(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(ByteBufferImpl b, int index, int limit, int value);\n   public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/1); return res; }\n \n   ByteBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(ByteBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(ByteBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(ByteBufferImpl b, int index, int limit, long value) { };\n+  private static native long nio_get_Long(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(ByteBufferImpl b, int index, int limit, long value);\n   public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/1); return res; }\n \n   ByteBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(ByteBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(ByteBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(ByteBufferImpl b, int index, int limit, float value) { };\n+  private static native float nio_get_Float(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(ByteBufferImpl b, int index, int limit, float value);\n   public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/1); return res; }\n \n   ByteBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(ByteBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(ByteBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(ByteBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(ByteBufferImpl b, int index, int limit, double value) { };\n+  private static native double nio_get_Double(ByteBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(ByteBufferImpl b, int index, int limit, double value);\n   public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/1); return res; }\n-  \n+\n   public boolean isReadOnly()\n   {\n     return ro;\n@@ -157,19 +136,19 @@ public ByteBuffer slice()\n     A.array_offset = position();\n     return A;\n   }\n-  \n+\n   public ByteBuffer duplicate()\n   {\n     return new ByteBufferImpl(this);\n   }\n-  \n+\n   public ByteBuffer asReadOnlyBuffer()\n   {\n     ByteBufferImpl a = new ByteBufferImpl(this);\n     a.ro = true;\n     return a;\n   }\n-  \n+\n   public ByteBuffer compact()\n   {\n     return this;\n@@ -179,7 +158,7 @@ public boolean isDirect()\n   {\n     return backing_buffer != null;\n   }\n-\n+  \n   final public byte get()\n   {\n     byte e = backing_buffer[position()];\n@@ -198,7 +177,7 @@ final public byte get(int index)\n   {\n     return backing_buffer[index];\n   }\n-\n+  \n   final public ByteBuffer put(int index, byte b)\n   {\n     backing_buffer[index] = b;"}, {"sha": "399dd6096b836a6e6063845d339429c82d0c3925", "filename": "libjava/gnu/java/nio/CharBufferImpl.java", "status": "modified", "additions": 110, "deletions": 121, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FCharBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -48,176 +48,165 @@\n \n public final class CharBufferImpl extends CharBuffer\n {\n-  private int array_offset;\n   private boolean ro;\n+\n+  private ByteOrder endian = ByteOrder.BIG_ENDIAN;\n   \n   public CharBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new char[cap];\n     this.cap = cap;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n   \n   public CharBufferImpl(char[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n   \n   public CharBufferImpl (CharBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position (copy.position ());\n     limit (copy.limit());\n+    position (copy.position ());\n   }\n   \n   void inc_pos (int a)\n   {\n     position (position () + a);\n   }\n- \n-//   private static native char[] nio_cast(byte[]copy);\n-//   private static native char[] nio_cast(char[]copy);\n-//   private static native char[] nio_cast(short[]copy);\n-//   private static native char[] nio_cast(long[]copy);\n-//   private static native char[] nio_cast(int[]copy);\n-//   private static native char[] nio_cast(float[]copy);\n-//   private static native char[] nio_cast(double[]copy);\n-\n-  private static char[] nio_cast(byte[]copy) { return null; };\n-  private static char[] nio_cast(char[]copy) { return null; };\n-  private static char[] nio_cast(short[]copy) { return null; };\n-  private static char[] nio_cast(long[]copy) { return null; };\n-  private static char[] nio_cast(int[]copy) { return null; };\n-  private static char[] nio_cast(float[]copy) { return null; };\n-  private static char[] nio_cast(double[]copy) { return null; };\n \n   CharBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(CharBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(CharBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(CharBufferImpl b, int index, int limit, byte value) { };\n-  public java.nio. ByteBuffer asByteBuffer() { gnu.java.nio. ByteBufferImpl res = new gnu.java.nio. ByteBufferImpl(backing_buffer); res.limit((limit()*1)/2); return res; }\n+  private static native byte nio_get_Byte(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(CharBufferImpl b, int index, int limit, byte value);\n+  public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/2); return res; }\n \n   CharBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(CharBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(CharBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(CharBufferImpl b, int index, int limit, char value) { };\n-  public java.nio. CharBuffer asCharBuffer() { gnu.java.nio. CharBufferImpl res = new gnu.java.nio. CharBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n+  private static native char nio_get_Char(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(CharBufferImpl b, int index, int limit, char value);\n+  public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n \n   CharBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(CharBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(CharBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(CharBufferImpl b, int index, int limit, short value) { };\n-  public java.nio. ShortBuffer asShortBuffer() { gnu.java.nio. ShortBufferImpl res = new gnu.java.nio. ShortBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n+  private static native short nio_get_Short(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(CharBufferImpl b, int index, int limit, short value);\n+  public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n \n   CharBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(CharBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(CharBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(CharBufferImpl b, int index, int limit, int value) { };\n-  public java.nio. IntBuffer asIntBuffer() { gnu.java.nio. IntBufferImpl res = new gnu.java.nio. IntBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n+  private static native int nio_get_Int(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(CharBufferImpl b, int index, int limit, int value);\n+  public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n \n   CharBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(CharBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(CharBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(CharBufferImpl b, int index, int limit, long value) { };\n-  public java.nio. LongBuffer asLongBuffer() { gnu.java.nio. LongBufferImpl res = new gnu.java.nio. LongBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+  private static native long nio_get_Long(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(CharBufferImpl b, int index, int limit, long value);\n+  public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n \n   CharBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(CharBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(CharBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(CharBufferImpl b, int index, int limit, float value) { };\n-  public java.nio. FloatBuffer asFloatBuffer() { gnu.java.nio. FloatBufferImpl res = new gnu.java.nio. FloatBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n+  private static native float nio_get_Float(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(CharBufferImpl b, int index, int limit, float value);\n+  public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n \n   CharBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(CharBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(CharBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(CharBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(CharBufferImpl b, int index, int limit, double value) { };\n-  public java.nio. DoubleBuffer asDoubleBuffer() { gnu.java.nio. DoubleBufferImpl res = new gnu.java.nio. DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+  private static native double nio_get_Double(CharBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(CharBufferImpl b, int index, int limit, double value);\n+  public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+  \n+  private static native char[] nio_cast(byte[]copy);\n+  private static native char[] nio_cast(char[]copy);\n+  private static native char[] nio_cast(short[]copy);\n+  private static native char[] nio_cast(long[]copy);\n+  private static native char[] nio_cast(int[]copy);\n+  private static native char[] nio_cast(float[]copy);\n+  private static native char[] nio_cast(double[]copy);\n+\n   \n   public boolean isReadOnly()\n-    {\n-        return ro;\n-    }\n-    public CharBuffer slice()\n-    {\n-        CharBufferImpl A = new CharBufferImpl(this);\n-        A.array_offset = position();\n-        return A;\n-    }\n-    public CharBuffer duplicate()\n-    {\n-        return new CharBufferImpl(this);\n-    }\n-    public CharBuffer asReadOnlyBuffer()\n-    {\n-        CharBufferImpl a = new CharBufferImpl(this);\n-        a.ro = true;\n-        return a;\n-    }\n-    public CharBuffer compact()\n-    {\n-        return this;\n-    }\n-    public boolean isDirect()\n-    {\n-        return backing_buffer != null;\n-    }\n+  {\n+    return ro;\n+  }\n+  \n+  public CharBuffer slice()\n+  {\n+    CharBufferImpl buffer = new CharBufferImpl (this);\n+    buffer.array_offset = position ();\n+    return buffer;\n+  }\n+  \n+  public CharBuffer duplicate()\n+  {\n+    return new CharBufferImpl(this);\n+  }\n+  \n+  public CharBuffer asReadOnlyBuffer()\n+  {\n+    CharBufferImpl a = new CharBufferImpl(this);\n+    a.ro = true;\n+    return a;\n+  }\n+  \n+  public CharBuffer compact()\n+  {\n+    return this;\n+  }\n+  \n+  public boolean isDirect()\n+  {\n+    return backing_buffer != null;\n+  }\n+\n+  final public CharSequence subSequence (int start, int end)\n+  {\n+    if (start < 0 ||\n+        end > length () ||\n+        start > end)\n+      throw new IndexOutOfBoundsException ();\n+\n+    // No support for direct buffers yet.\n+    // assert array () != null;\n+    return new CharBufferImpl (array (), position () + start,\n+                               position () + end);\n+  }\n+  \n   final public char get()\n-    {\n-        char e = backing_buffer[position()];\n-        position(position()+1);\n-        return e;\n-    }\n+  {\n+    char e = backing_buffer[position()];\n+    position(position()+1);\n+    return e;\n+  }\n+  \n   final public CharBuffer put(char b)\n-    {\n-        backing_buffer[position()] = b;\n-        position(position()+1);\n-        return this;\n-    }\n-  final public char get(int index)\n-    {\n-        return backing_buffer[index];\n-    }\n-   final public java.nio. CharBuffer put(int index, char b)\n-    {\n-      backing_buffer[index] = b;\n-      return this;\n-    }\n-\n-  final public char getChar() { return get(); } final public java.nio. CharBuffer putChar(char value) { return put(value); } final public char getChar(int index) { return get(index); } final public java.nio. CharBuffer putChar(int index, char value) { return put(index, value); };\n-  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public java.nio. CharBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public java.nio. CharBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n-  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public java.nio. CharBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public java.nio. CharBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n-  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public java.nio. CharBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public java.nio. CharBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n-  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public java.nio. CharBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public java.nio. CharBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public java.nio. CharBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public java.nio. CharBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n-\n-    public String toString()\n-    {\n-      if (backing_buffer != null)\n-        {\n-          return new String(backing_buffer, position(), limit());\n-        }\n-      return super.toString();\n-    }\n+  {\n+    backing_buffer[position()] = b;\n+    position(position()+1);\n+    return this;\n+  }\n+  \n+  final public char getChar() { return get(); } final public CharBuffer putChar(char value) { return put(value); } final public char getChar(int index) { return get(index); } final public CharBuffer putChar(int index, char value) { return put(index, value); };\n+  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public CharBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public CharBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n+  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public CharBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public CharBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n+  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public CharBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public CharBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n+  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public CharBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public CharBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n+  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public CharBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public CharBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n \n-  public final ByteOrder order()\n+  final public char get(int index)\n   {\n-    return endian;\n+    return backing_buffer[index];\n   }\n+  \n+  final public CharBuffer put(int index, char b)\n+  {\n+    backing_buffer[index] = b;\n+    return this;\n+  }\n+\n \n-  public CharSequence subSequence(int a, int b)\n+  public final ByteOrder order()\n   {\n-    return null;\n+    return endian;\n   }\n }"}, {"sha": "de0e6717fd0e6298509e4aa8f57b0659bdfdab4f", "filename": "libjava/gnu/java/nio/DoubleBufferImpl.java", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FDoubleBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -54,96 +54,74 @@ public DoubleBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new double[cap];\n     this.cap = cap;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n   \n   public DoubleBufferImpl(double[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public DoubleBufferImpl(DoubleBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position(copy.position());\n     limit(copy.limit());\n+    position(copy.position());\n   }\n   \n   void inc_pos(int a)\n   {\n     position(position() + a);\n   }\n   \n-//   private static native double[] nio_cast(byte[]copy);\n-//   private static native double[] nio_cast(char[]copy);\n-//   private static native double[] nio_cast(short[]copy);\n-//   private static native double[] nio_cast(long[]copy);\n-//   private static native double[] nio_cast(int[]copy);\n-//   private static native double[] nio_cast(float[]copy);\n-//   private static native double[] nio_cast(double[]copy);\n-\n-  private static double[] nio_cast(byte[]copy) { return null; };\n-  private static double[] nio_cast(char[]copy) { return null; };\n-  private static double[] nio_cast(short[]copy) { return null; };\n-  private static double[] nio_cast(long[]copy) { return null; };\n-  private static double[] nio_cast(int[]copy) { return null; };\n-  private static double[] nio_cast(float[]copy) { return null; };\n-  private static double[] nio_cast(double[]copy) { return null; };\n-\n   DoubleBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(DoubleBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(DoubleBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(DoubleBufferImpl b, int index, int limit, byte value) { };\n+  private static native byte nio_get_Byte(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(DoubleBufferImpl b, int index, int limit, byte value);\n   public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/8); return res; }\n \n   DoubleBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(DoubleBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(DoubleBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(DoubleBufferImpl b, int index, int limit, char value) { };\n+  private static native char nio_get_Char(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(DoubleBufferImpl b, int index, int limit, char value);\n   public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n \n   DoubleBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(DoubleBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(DoubleBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(DoubleBufferImpl b, int index, int limit, short value) { };\n+  private static native short nio_get_Short(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(DoubleBufferImpl b, int index, int limit, short value);\n   public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n \n   DoubleBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(DoubleBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(DoubleBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(DoubleBufferImpl b, int index, int limit, int value) { };\n+  private static native int nio_get_Int(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(DoubleBufferImpl b, int index, int limit, int value);\n   public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n \n   DoubleBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(DoubleBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(DoubleBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(DoubleBufferImpl b, int index, int limit, long value) { };\n+  private static native long nio_get_Long(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(DoubleBufferImpl b, int index, int limit, long value);\n   public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n \n   DoubleBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(DoubleBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(DoubleBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(DoubleBufferImpl b, int index, int limit, float value) { };\n+  private static native float nio_get_Float(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(DoubleBufferImpl b, int index, int limit, float value);\n   public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n \n   DoubleBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(DoubleBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(DoubleBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(DoubleBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(DoubleBufferImpl b, int index, int limit, double value) { };\n+  private static native double nio_get_Double(DoubleBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(DoubleBufferImpl b, int index, int limit, double value);\n   public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n \n+  private static native double[] nio_cast(byte[]copy);\n+  private static native double[] nio_cast(char[]copy);\n+  private static native double[] nio_cast(short[]copy);\n+  private static native double[] nio_cast(long[]copy);\n+  private static native double[] nio_cast(int[]copy);\n+  private static native double[] nio_cast(float[]copy);\n+  private static native double[] nio_cast(double[]copy);\n+\n   public boolean isReadOnly()\n   {\n     return ro;"}, {"sha": "bab47425f1d678f1d57276c2e507c377f187b42d", "filename": "libjava/gnu/java/nio/FloatBufferImpl.java", "status": "modified", "additions": 37, "deletions": 59, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FFloatBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -54,52 +54,34 @@ public FloatBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new float[cap];\n     this.cap = cap;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n   \n   public FloatBufferImpl(float[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n   \n   public FloatBufferImpl(FloatBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position(copy.position());\n     limit(copy.limit());\n+    position(copy.position());\n   }\n   \n   void inc_pos(int a)\n   {\n     position(position() + a);\n   }\n   \n-//   private static native float[] nio_cast(byte[]copy);\n-//   private static native float[] nio_cast(char[]copy);\n-//   private static native float[] nio_cast(short[]copy);\n-//   private static native float[] nio_cast(long[]copy);\n-//   private static native float[] nio_cast(int[]copy);\n-//   private static native float[] nio_cast(float[]copy);\n-//   private static native float[] nio_cast(double[]copy);\n-  \n-  private static float[] nio_cast(byte[]copy) { return null; };\n-  private static float[] nio_cast(char[]copy) { return null; };\n-  private static float[] nio_cast(short[]copy) { return null; };\n-  private static float[] nio_cast(long[]copy) { return null; };\n-  private static float[] nio_cast(int[]copy) { return null; };\n-  private static float[] nio_cast(float[]copy) { return null; };\n-  private static float[] nio_cast(double[]copy) { return null; };\n-  \n   FloatBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast (copy) : null; }\n-//   private static native byte nio_get_Byte (FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte (FloatBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte (FloatBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte (FloatBufferImpl b, int index, int limit, byte value) { };\n+  private static native byte nio_get_Byte (FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte (FloatBufferImpl b, int index, int limit, byte value);\n \n   public ByteBuffer asByteBuffer()\n   {\n@@ -109,72 +91,68 @@ public ByteBuffer asByteBuffer()\n   }\n   \n   FloatBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(FloatBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(FloatBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(FloatBufferImpl b, int index, int limit, char value) { };\n+  private static native char nio_get_Char(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(FloatBufferImpl b, int index, int limit, char value);\n   public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n \n   FloatBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(FloatBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(FloatBufferImpl b, int index, int limit) { return 0;};\n-  private static void nio_put_Short(FloatBufferImpl b, int index, int limit, short value) { };\n+  private static native short nio_get_Short(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(FloatBufferImpl b, int index, int limit, short value);\n   public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n   \n   FloatBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(FloatBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(FloatBufferImpl b, int index, int limit) { return 0;};\n-  private static void nio_put_Int(FloatBufferImpl b, int index, int limit, int value) { };\n+  private static native int nio_get_Int(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(FloatBufferImpl b, int index, int limit, int value);\n   public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n   \n   FloatBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(FloatBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(FloatBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(FloatBufferImpl b, int index, int limit, long value) { };\n+  private static native long nio_get_Long(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(FloatBufferImpl b, int index, int limit, long value);\n   public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n \n   FloatBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(FloatBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(FloatBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(FloatBufferImpl b, int index, int limit, float value) { };\n+  private static native float nio_get_Float(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(FloatBufferImpl b, int index, int limit, float value);\n   public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n \n   FloatBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(FloatBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(FloatBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(FloatBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(FloatBufferImpl b, int index, int limit, double value) { };\n+  private static native double nio_get_Double(FloatBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(FloatBufferImpl b, int index, int limit, double value);\n   public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n+\n+  private static native float[] nio_cast(byte[]copy);\n+  private static native float[] nio_cast(char[]copy);\n+  private static native float[] nio_cast(short[]copy);\n+  private static native float[] nio_cast(long[]copy);\n+  private static native float[] nio_cast(int[]copy);\n+  private static native float[] nio_cast(float[]copy);\n+  private static native float[] nio_cast(double[]copy);\n   \n   public boolean isReadOnly()\n   {\n     return ro;\n   }\n   \n-  public java.nio. FloatBuffer slice()\n+  public FloatBuffer slice()\n   {\n     FloatBufferImpl A = new FloatBufferImpl(this);\n     A.array_offset = position();\n     return A;\n   }\n   \n-  public java.nio. FloatBuffer duplicate()\n+  public FloatBuffer duplicate()\n   {\n     return new FloatBufferImpl(this);\n   }\n   \n-  public java.nio. FloatBuffer asReadOnlyBuffer()\n+  public FloatBuffer asReadOnlyBuffer()\n   {\n     FloatBufferImpl a = new FloatBufferImpl(this);\n     a.ro = true;\n     return a;\n   }\n   \n-  public java.nio. FloatBuffer compact()\n+  public FloatBuffer compact()\n   {\n     return this;\n   }\n@@ -191,7 +169,7 @@ final public float get()\n     return e;\n   }\n   \n-  final public java.nio. FloatBuffer put(float b)\n+  final public FloatBuffer put(float b)\n   {\n     backing_buffer[position()] = b;\n     position(position()+1);\n@@ -203,16 +181,16 @@ final public float get(int index)\n     return backing_buffer[index];\n   }\n   \n-  final public java.nio. FloatBuffer put(int index, float b)\n+  final public FloatBuffer put(int index, float b)\n   {\n     backing_buffer[index] = b;\n     return this;\n   }\n   \n-  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public java.nio. FloatBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public java.nio. FloatBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n-  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public java.nio. FloatBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public java.nio. FloatBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n-  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public java.nio. FloatBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public java.nio. FloatBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n-  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public java.nio. FloatBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public java.nio. FloatBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n-  final public float getFloat() { return get(); } final public java.nio. FloatBuffer putFloat(float value) { return put(value); } final public float getFloat(int index) { return get(index); } final public java.nio. FloatBuffer putFloat(int index, float value) { return put(index, value); };\n-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public java.nio. FloatBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public java.nio. FloatBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n+  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public FloatBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public FloatBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n+  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public FloatBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public FloatBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n+  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public FloatBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public FloatBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n+  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public FloatBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public FloatBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n+  final public float getFloat() { return get(); } final public FloatBuffer putFloat(float value) { return put(value); } final public float getFloat(int index) { return get(index); } final public FloatBuffer putFloat(int index, float value) { return put(index, value); };\n+  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public FloatBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public FloatBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n }"}, {"sha": "cccc418487cd60fdaeff443ef000a4e0f83486f8", "filename": "libjava/gnu/java/nio/IntBufferImpl.java", "status": "modified", "additions": 50, "deletions": 66, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FIntBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -37,7 +37,13 @@\n \n package gnu.java.nio;\n \n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.DoubleBuffer;\n+import java.nio.FloatBuffer;\n import java.nio.IntBuffer;\n+import java.nio.LongBuffer;\n+import java.nio.ShortBuffer;\n \n public final class IntBufferImpl extends IntBuffer\n {\n@@ -48,121 +54,99 @@ public IntBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new int[cap];\n     this.cap = cap;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public IntBufferImpl(int[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public IntBufferImpl(IntBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position(copy.position());\n     limit(copy.limit());\n+    position(copy.position());\n   }\n \n   void inc_pos(int a)\n   {\n     position(position() + a);\n   }\n \n-//   private static native int[] nio_cast(byte[]copy);\n-//   private static native int[] nio_cast(char[]copy);\n-//   private static native int[] nio_cast(short[]copy);\n-//   private static native int[] nio_cast(long[]copy);\n-//   private static native int[] nio_cast(int[]copy);\n-//   private static native int[] nio_cast(float[]copy);\n-//   private static native int[] nio_cast(double[]copy);\n-\n-  private static int[] nio_cast(byte[]copy) { return null; };\n-  private static int[] nio_cast(char[]copy) { return null; };\n-  private static int[] nio_cast(short[]copy) { return null; };\n-  private static int[] nio_cast(long[]copy) { return null; };\n-  private static int[] nio_cast(int[]copy) { return null; };\n-  private static int[] nio_cast(float[]copy) { return null; };\n-  private static int[] nio_cast(double[]copy) { return null; };\n-\n   IntBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(IntBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(IntBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(IntBufferImpl b, int index, int limit, byte value) { };\n-  public java.nio. ByteBuffer asByteBuffer() { gnu.java.nio. ByteBufferImpl res = new gnu.java.nio. ByteBufferImpl(backing_buffer); res.limit((limit()*1)/4); return res; }\n+  private static native byte nio_get_Byte(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(IntBufferImpl b, int index, int limit, byte value);\n+  public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/4); return res; }\n \n   IntBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(IntBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(IntBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(IntBufferImpl b, int index, int limit, char value) { };\n-  public java.nio. CharBuffer asCharBuffer() { gnu.java.nio. CharBufferImpl res = new gnu.java.nio. CharBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n+  private static native char nio_get_Char(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(IntBufferImpl b, int index, int limit, char value);\n+  public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n \n   IntBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(IntBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(IntBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(IntBufferImpl b, int index, int limit, short value) { };\n-  public java.nio. ShortBuffer asShortBuffer() { gnu.java.nio. ShortBufferImpl res = new gnu.java.nio. ShortBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n+  private static native short nio_get_Short(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(IntBufferImpl b, int index, int limit, short value);\n+  public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/4); return res; }\n \n   IntBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(IntBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(IntBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(IntBufferImpl b, int index, int limit, int value) { };\n-  public java.nio. IntBuffer asIntBuffer() { gnu.java.nio. IntBufferImpl res = new gnu.java.nio. IntBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n+  private static native int nio_get_Int(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(IntBufferImpl b, int index, int limit, int value);\n+  public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n \n   IntBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(IntBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(IntBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(IntBufferImpl b, int index, int limit, long value) { };\n-  public java.nio. LongBuffer asLongBuffer() { gnu.java.nio. LongBufferImpl res = new gnu.java.nio. LongBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n+  private static native long nio_get_Long(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(IntBufferImpl b, int index, int limit, long value);\n+  public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n \n   IntBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(IntBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(IntBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(IntBufferImpl b, int index, int limit, float value) { };\n-  public java.nio. FloatBuffer asFloatBuffer() { gnu.java.nio. FloatBufferImpl res = new gnu.java.nio. FloatBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n+  private static native float nio_get_Float(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(IntBufferImpl b, int index, int limit, float value);\n+  public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/4); return res; }\n \n   IntBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(IntBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(IntBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(IntBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(IntBufferImpl b, int index, int limit, double value) { };\n-  public java.nio. DoubleBuffer asDoubleBuffer() { gnu.java.nio. DoubleBufferImpl res = new gnu.java.nio. DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n+  private static native double nio_get_Double(IntBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(IntBufferImpl b, int index, int limit, double value);\n+  public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/4); return res; }\n+\n+  private static native int[] nio_cast(byte[]copy);\n+  private static native int[] nio_cast(char[]copy);\n+  private static native int[] nio_cast(short[]copy);\n+  private static native int[] nio_cast(long[]copy);\n+  private static native int[] nio_cast(int[]copy);\n+  private static native int[] nio_cast(float[]copy);\n+  private static native int[] nio_cast(double[]copy);\n \n   public boolean isReadOnly()\n   {\n     return ro;\n   }\n \n-  public java.nio. IntBuffer slice()\n+  public IntBuffer slice()\n   {\n     IntBufferImpl A = new IntBufferImpl(this);\n     A.array_offset = position();\n     return A;\n   }\n \n-  public java.nio. IntBuffer duplicate()\n+  public IntBuffer duplicate()\n   {\n     return new IntBufferImpl(this);\n   }\n \n-  public java.nio. IntBuffer asReadOnlyBuffer()\n+  public IntBuffer asReadOnlyBuffer()\n   {\n     IntBufferImpl a = new IntBufferImpl(this);\n     a.ro = true;\n     return a;\n   }\n \n-  public java.nio. IntBuffer compact()\n+  public IntBuffer compact()\n   {\n     return this;\n   }\n@@ -179,7 +163,7 @@ final public int get()\n     return e;\n   }\n \n-  final public java.nio. IntBuffer put(int b)\n+  final public IntBuffer put(int b)\n   {\n     backing_buffer[position()] = b;\n     position(position()+1);\n@@ -191,16 +175,16 @@ final public int get(int index)\n     return backing_buffer[index];\n   }\n \n-  final public java.nio. IntBuffer put(int index, int b)\n+  final public IntBuffer put(int index, int b)\n   {\n     backing_buffer[index] = b;\n     return this;\n   }\n \n-  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public java.nio. IntBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public java.nio. IntBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n-  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public java.nio. IntBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public java.nio. IntBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n-  final public int getInt() { return get(); } final public java.nio. IntBuffer putInt(int value) { return put(value); } final public int getInt(int index) { return get(index); } final public java.nio. IntBuffer putInt(int index, int value) { return put(index, value); };\n-  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public java.nio. IntBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public java.nio. IntBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n-  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public java.nio. IntBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public java.nio. IntBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public java.nio. IntBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public java.nio. IntBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n+  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public IntBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public IntBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n+  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public IntBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public IntBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n+  final public int getInt() { return get(); } final public IntBuffer putInt(int value) { return put(value); } final public int getInt(int index) { return get(index); } final public IntBuffer putInt(int index, int value) { return put(index, value); };\n+  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public IntBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public IntBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n+  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public IntBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public IntBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n+  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public IntBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public IntBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n }"}, {"sha": "8f29b06939f3481691a72fb357cacb6ad85a4482", "filename": "libjava/gnu/java/nio/LongBufferImpl.java", "status": "modified", "additions": 44, "deletions": 66, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FLongBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -54,121 +54,99 @@ public LongBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new long[cap];\n     this.cap = cap ;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public LongBufferImpl(long[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public LongBufferImpl(LongBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position(copy.position());\n     limit(copy.limit());\n+    position(copy.position());\n   }\n \n   void inc_pos(int a)\n   {\n     position(position() + a);\n   }\n \n-//   private static native long[] nio_cast(byte[]copy);\n-//   private static native long[] nio_cast(char[]copy);\n-//   private static native long[] nio_cast(short[]copy);\n-//   private static native long[] nio_cast(long[]copy);\n-//   private static native long[] nio_cast(int[]copy);\n-//   private static native long[] nio_cast(float[]copy);\n-//   private static native long[] nio_cast(double[]copy);\n-\n-  private static long[] nio_cast(byte[]copy) { return null; };\n-  private static long[] nio_cast(char[]copy) { return null; };\n-  private static long[] nio_cast(short[]copy) { return null; };\n-  private static long[] nio_cast(long[]copy) { return null; };\n-  private static long[] nio_cast(int[]copy) { return null; };\n-  private static long[] nio_cast(float[]copy) { return null; };\n-  private static long[] nio_cast(double[]copy) { return null; };\n-\n   LongBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(LongBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(LongBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(LongBufferImpl b, int index, int limit, byte value) { };\n-  public java.nio. ByteBuffer asByteBuffer() { gnu.java.nio. ByteBufferImpl res = new gnu.java.nio. ByteBufferImpl(backing_buffer); res.limit((limit()*1)/8); return res; }\n+  private static native byte nio_get_Byte(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(LongBufferImpl b, int index, int limit, byte value);\n+  public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/8); return res; }\n \n   LongBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(LongBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(LongBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(LongBufferImpl b, int index, int limit, char value) { };\n-  public java.nio. CharBuffer asCharBuffer() { gnu.java.nio. CharBufferImpl res = new gnu.java.nio. CharBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n+  private static native char nio_get_Char(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(LongBufferImpl b, int index, int limit, char value);\n+  public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n \n   LongBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(LongBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(LongBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(LongBufferImpl b, int index, int limit, short value) { };\n-  public java.nio. ShortBuffer asShortBuffer() { gnu.java.nio. ShortBufferImpl res = new gnu.java.nio. ShortBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n+  private static native short nio_get_Short(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(LongBufferImpl b, int index, int limit, short value);\n+  public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/8); return res; }\n \n   LongBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(LongBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(LongBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(LongBufferImpl b, int index, int limit, int value) { };\n-  public java.nio. IntBuffer asIntBuffer() { gnu.java.nio. IntBufferImpl res = new gnu.java.nio. IntBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n+  private static native int nio_get_Int(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(LongBufferImpl b, int index, int limit, int value);\n+  public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n \n   LongBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(LongBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(LongBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(LongBufferImpl b, int index, int limit, long value) { };\n-  public java.nio. LongBuffer asLongBuffer() { gnu.java.nio. LongBufferImpl res = new gnu.java.nio. LongBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n+  private static native long nio_get_Long(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(LongBufferImpl b, int index, int limit, long value);\n+  public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n \n   LongBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(LongBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(LongBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(LongBufferImpl b, int index, int limit, float value) { };\n-  public java.nio. FloatBuffer asFloatBuffer() { gnu.java.nio. FloatBufferImpl res = new gnu.java.nio. FloatBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n+  private static native float nio_get_Float(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(LongBufferImpl b, int index, int limit, float value);\n+  public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/8); return res; }\n \n   LongBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(LongBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(LongBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(LongBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(LongBufferImpl b, int index, int limit, double value) { };\n-  public java.nio. DoubleBuffer asDoubleBuffer() { gnu.java.nio. DoubleBufferImpl res = new gnu.java.nio. DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n+  private static native double nio_get_Double(LongBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(LongBufferImpl b, int index, int limit, double value);\n+  public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/8); return res; }\n+\n+  private static native long[] nio_cast(byte[]copy);\n+  private static native long[] nio_cast(char[]copy);\n+  private static native long[] nio_cast(short[]copy);\n+  private static native long[] nio_cast(long[]copy);\n+  private static native long[] nio_cast(int[]copy);\n+  private static native long[] nio_cast(float[]copy);\n+  private static native long[] nio_cast(double[]copy);\n \n   public boolean isReadOnly()\n   {\n     return ro;\n   }\n \n-  public java.nio. LongBuffer slice()\n+  public LongBuffer slice()\n   {\n     LongBufferImpl A = new LongBufferImpl(this);\n     A.array_offset = position();\n     return A;\n   }\n \n-  public java.nio. LongBuffer duplicate()\n+  public LongBuffer duplicate()\n   {\n     return new LongBufferImpl(this);\n   }\n \n-  public java.nio. LongBuffer asReadOnlyBuffer()\n+  public LongBuffer asReadOnlyBuffer()\n   {\n     LongBufferImpl a = new LongBufferImpl(this);\n     a.ro = true;\n     return a;\n   }\n \n-  public java.nio. LongBuffer compact()\n+  public LongBuffer compact()\n   {\n     return this;\n   }\n@@ -185,7 +163,7 @@ final public long get()\n     return e;\n   }\n \n-  final public java.nio. LongBuffer put(long b)\n+  final public LongBuffer put(long b)\n   {\n     backing_buffer[position()] = b;\n     position(position()+1);\n@@ -197,16 +175,16 @@ final public long get(int index)\n     return backing_buffer[index];\n   }\n \n-  final public java.nio. LongBuffer put(int index, long b)\n+  final public LongBuffer put(int index, long b)\n   {\n     backing_buffer[index] = b;\n     return this;\n   }\n \n-  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public java.nio. LongBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public java.nio. LongBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n-  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public java.nio. LongBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public java.nio. LongBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n-  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public java.nio. LongBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public java.nio. LongBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n-  final public long getLong() { return get(); } final public java.nio. LongBuffer putLong(long value) { return put(value); } final public long getLong(int index) { return get(index); } final public java.nio. LongBuffer putLong(int index, long value) { return put(index, value); };\n-  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public java.nio. LongBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public java.nio. LongBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public java.nio. LongBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public java.nio. LongBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n+  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public LongBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public LongBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n+  final public short getShort() { short a = nio_get_Short(this, position(), limit()); inc_pos(2); return a; } final public LongBuffer putShort(short value) { nio_put_Short(this, position(), limit(), value); inc_pos(2); return this; } final public short getShort(int index) { short a = nio_get_Short(this, index, limit()); return a; } final public LongBuffer putShort(int index, short value) { nio_put_Short(this, index, limit(), value); return this; };\n+  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public LongBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public LongBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n+  final public long getLong() { return get(); } final public LongBuffer putLong(long value) { return put(value); } final public long getLong(int index) { return get(index); } final public LongBuffer putLong(int index, long value) { return put(index, value); };\n+  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public LongBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public LongBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n+  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public LongBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public LongBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n }"}, {"sha": "bccb2d0f65a95a292af5ed3333a167f50f66b3bd", "filename": "libjava/gnu/java/nio/ShortBufferImpl.java", "status": "modified", "additions": 38, "deletions": 60, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac7edc01e80616a8befedf7610d13ce28fb4fe24/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnio%2FShortBufferImpl.java?ref=ac7edc01e80616a8befedf7610d13ce28fb4fe24", "patch": "@@ -54,95 +54,73 @@ public ShortBufferImpl(int cap, int off, int lim)\n   {\n     this.backing_buffer = new short[cap];\n     this.cap = cap ;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public ShortBufferImpl(short[] array, int off, int lim)\n   {\n     this.backing_buffer = array;\n     this.cap = array.length;\n-    this.position(off);\n     this.limit(lim);\n+    this.position(off);\n   }\n \n   public ShortBufferImpl(ShortBufferImpl copy)\n   {\n     backing_buffer = copy.backing_buffer;\n     ro = copy.ro;\n-    position(copy.position());\n     limit(copy.limit());\n+    position(copy.position());\n   }\n \n   void inc_pos(int a)\n   {\n     position(position() + a);\n   }\n \n-//   private static native short[] nio_cast(byte[]copy);\n-//   private static native short[] nio_cast(char[]copy);\n-//   private static native short[] nio_cast(short[]copy);\n-//   private static native short[] nio_cast(long[]copy);\n-//   private static native short[] nio_cast(int[]copy);\n-//   private static native short[] nio_cast(float[]copy);\n-//   private static native short[] nio_cast(double[]copy);\n-\n-  private static short[] nio_cast(byte[]copy) { return null; };\n-  private static short[] nio_cast(char[]copy) { return null; };\n-  private static short[] nio_cast(short[]copy) { return null; };\n-  private static short[] nio_cast(long[]copy) { return null; };\n-  private static short[] nio_cast(int[]copy) { return null; };\n-  private static short[] nio_cast(float[]copy) { return null; };\n-  private static short[] nio_cast(double[]copy) { return null; };\n-\n   ShortBufferImpl(byte[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native byte nio_get_Byte(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Byte(ShortBufferImpl b, int index, int limit, byte value);\n-  private static byte nio_get_Byte(ShortBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Byte(ShortBufferImpl b, int index, int limit, byte value) { };\n-  public java.nio. ByteBuffer asByteBuffer() { gnu.java.nio. ByteBufferImpl res = new gnu.java.nio. ByteBufferImpl(backing_buffer); res.limit((limit()*1)/2); return res; }\n+  private static native byte nio_get_Byte(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Byte(ShortBufferImpl b, int index, int limit, byte value);\n+  public ByteBuffer asByteBuffer() { ByteBufferImpl res = new ByteBufferImpl(backing_buffer); res.limit((limit()*1)/2); return res; }\n \n   ShortBufferImpl(char[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native char nio_get_Char(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Char(ShortBufferImpl b, int index, int limit, char value);\n-  private static char nio_get_Char(ShortBufferImpl b, int index, int limit) { return ' '; };\n-  private static void nio_put_Char(ShortBufferImpl b, int index, int limit, char value) { };\n-  public java.nio. CharBuffer asCharBuffer() { gnu.java.nio. CharBufferImpl res = new gnu.java.nio. CharBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n+  private static native char nio_get_Char(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Char(ShortBufferImpl b, int index, int limit, char value);\n+  public CharBuffer asCharBuffer() { CharBufferImpl res = new CharBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n \n   ShortBufferImpl(short[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native short nio_get_Short(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Short(ShortBufferImpl b, int index, int limit, short value);\n-  private static short nio_get_Short(ShortBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Short(ShortBufferImpl b, int index, int limit, short value) { };\n-  public java.nio. ShortBuffer asShortBuffer() { gnu.java.nio. ShortBufferImpl res = new gnu.java.nio. ShortBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n+  private static native short nio_get_Short(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Short(ShortBufferImpl b, int index, int limit, short value);\n+  public ShortBuffer asShortBuffer() { ShortBufferImpl res = new ShortBufferImpl(backing_buffer); res.limit((limit()*2)/2); return res; }\n \n   ShortBufferImpl(int[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native int nio_get_Int(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Int(ShortBufferImpl b, int index, int limit, int value);\n-  private static int nio_get_Int(ShortBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Int(ShortBufferImpl b, int index, int limit, int value) { };\n-  public java.nio. IntBuffer asIntBuffer() { gnu.java.nio. IntBufferImpl res = new gnu.java.nio. IntBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n+  private static native int nio_get_Int(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Int(ShortBufferImpl b, int index, int limit, int value);\n+  public IntBuffer asIntBuffer() { IntBufferImpl res = new IntBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n \n   ShortBufferImpl(long[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native long nio_get_Long(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Long(ShortBufferImpl b, int index, int limit, long value);\n-  private static long nio_get_Long(ShortBufferImpl b, int index, int limit) { return 0; };\n-  private static void nio_put_Long(ShortBufferImpl b, int index, int limit, long value) { };\n-  public java.nio. LongBuffer asLongBuffer() { gnu.java.nio. LongBufferImpl res = new gnu.java.nio. LongBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+  private static native long nio_get_Long(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Long(ShortBufferImpl b, int index, int limit, long value);\n+  public LongBuffer asLongBuffer() { LongBufferImpl res = new LongBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n \n   ShortBufferImpl(float[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native float nio_get_Float(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Float(ShortBufferImpl b, int index, int limit, float value);\n-  private static float nio_get_Float(ShortBufferImpl b, int index, int limit) { return 0.0f; };\n-  private static void nio_put_Float(ShortBufferImpl b, int index, int limit, float value) { };\n-  public java.nio. FloatBuffer asFloatBuffer() { gnu.java.nio. FloatBufferImpl res = new gnu.java.nio. FloatBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n+  private static native float nio_get_Float(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Float(ShortBufferImpl b, int index, int limit, float value);\n+  public FloatBuffer asFloatBuffer() { FloatBufferImpl res = new FloatBufferImpl(backing_buffer); res.limit((limit()*4)/2); return res; }\n \n   ShortBufferImpl(double[] copy) { this.backing_buffer = copy != null ? nio_cast(copy) : null; }\n-//   private static native double nio_get_Double(ShortBufferImpl b, int index, int limit);\n-//   private static native void nio_put_Double(ShortBufferImpl b, int index, int limit, double value);\n-  private static double nio_get_Double(ShortBufferImpl b, int index, int limit) { return 0.0d; };\n-  private static void nio_put_Double(ShortBufferImpl b, int index, int limit, double value) { };\n-  public java.nio. DoubleBuffer asDoubleBuffer() { gnu.java.nio. DoubleBufferImpl res = new gnu.java.nio. DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+  private static native double nio_get_Double(ShortBufferImpl b, int index, int limit);\n+  private static native void nio_put_Double(ShortBufferImpl b, int index, int limit, double value);\n+  public DoubleBuffer asDoubleBuffer() { DoubleBufferImpl res = new DoubleBufferImpl(backing_buffer); res.limit((limit()*8)/2); return res; }\n+\n+  private static native short[] nio_cast(byte[]copy);\n+  private static native short[] nio_cast(char[]copy);\n+  private static native short[] nio_cast(short[]copy);\n+  private static native short[] nio_cast(long[]copy);\n+  private static native short[] nio_cast(int[]copy);\n+  private static native short[] nio_cast(float[]copy);\n+  private static native short[] nio_cast(double[]copy);\n \n   public boolean isReadOnly()\n   {\n@@ -203,10 +181,10 @@ final public ShortBuffer put(int index, short b)\n     return this;\n   }\n \n-  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public java.nio. ShortBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public java.nio. ShortBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n-  final public short getShort() { return get(); } final public java.nio. ShortBuffer putShort(short value) { return put(value); } final public short getShort(int index) { return get(index); } final public java.nio. ShortBuffer putShort(int index, short value) { return put(index, value); };\n-  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public java.nio. ShortBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public java.nio. ShortBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n-  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public java.nio. ShortBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public java.nio. ShortBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n-  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public java.nio. ShortBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public java.nio. ShortBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n-  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public java.nio. ShortBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public java.nio. ShortBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n+  final public char getChar() { char a = nio_get_Char(this, position(), limit()); inc_pos(2); return a; } final public ShortBuffer putChar(char value) { nio_put_Char(this, position(), limit(), value); inc_pos(2); return this; } final public char getChar(int index) { char a = nio_get_Char(this, index, limit()); return a; } final public ShortBuffer putChar(int index, char value) { nio_put_Char(this, index, limit(), value); return this; };\n+  final public short getShort() { return get(); } final public ShortBuffer putShort(short value) { return put(value); } final public short getShort(int index) { return get(index); } final public ShortBuffer putShort(int index, short value) { return put(index, value); };\n+  final public int getInt() { int a = nio_get_Int(this, position(), limit()); inc_pos(4); return a; } final public ShortBuffer putInt(int value) { nio_put_Int(this, position(), limit(), value); inc_pos(4); return this; } final public int getInt(int index) { int a = nio_get_Int(this, index, limit()); return a; } final public ShortBuffer putInt(int index, int value) { nio_put_Int(this, index, limit(), value); return this; };\n+  final public long getLong() { long a = nio_get_Long(this, position(), limit()); inc_pos(8); return a; } final public ShortBuffer putLong(long value) { nio_put_Long(this, position(), limit(), value); inc_pos(8); return this; } final public long getLong(int index) { long a = nio_get_Long(this, index, limit()); return a; } final public ShortBuffer putLong(int index, long value) { nio_put_Long(this, index, limit(), value); return this; };\n+  final public float getFloat() { float a = nio_get_Float(this, position(), limit()); inc_pos(4); return a; } final public ShortBuffer putFloat(float value) { nio_put_Float(this, position(), limit(), value); inc_pos(4); return this; } final public float getFloat(int index) { float a = nio_get_Float(this, index, limit()); return a; } final public ShortBuffer putFloat(int index, float value) { nio_put_Float(this, index, limit(), value); return this; };\n+  final public double getDouble() { double a = nio_get_Double(this, position(), limit()); inc_pos(8); return a; } final public ShortBuffer putDouble(double value) { nio_put_Double(this, position(), limit(), value); inc_pos(8); return this; } final public double getDouble(int index) { double a = nio_get_Double(this, index, limit()); return a; } final public ShortBuffer putDouble(int index, double value) { nio_put_Double(this, index, limit(), value); return this; };\n }"}]}