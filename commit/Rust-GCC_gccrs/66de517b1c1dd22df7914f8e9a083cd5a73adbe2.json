{"sha": "66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkZTUxN2IxYzFkZDIyZGY3OTE0ZjhlOWEwODNjZDVhNzNhZGJlMg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-06T03:35:56Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-06T03:35:56Z"}, "message": "c++: placeholder type constraint in structured binding [PR99899]\n\nIn this PR, we're crashing because the constraint handling inside\ndo_auto_deduction doesn't expect to see an adc_decomp_type context.\nThis patch fixes this by treating adc_decomp_type like adc_variable_type\nor adc_return_type during placeholder type constraint checking.\n\nMeanwhile, I noticed we weren't checking constraints at all when binding\nan array via a structured binding, since do_auto_deduction would exit\nearly and bypass the constraint check.  This patch fixes this by\nreplacing the early exit with an appropriate setup of the 'targs'\nvector.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99899\n\t* pt.c (do_auto_deduction): Don't exit early when deducing the\n\tarray type of a structured binding.  Also handle adc_decomp_type\n\tduring constraint checking.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99899\n\t* g++.dg/cpp2a/concepts-placeholder7.C: New test.\n\t* g++.dg/cpp2a/concepts-placeholder8.C: New test.", "tree": {"sha": "9539038f2e247bbf24d4c95d88d9e6eeb483bac1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9539038f2e247bbf24d4c95d88d9e6eeb483bac1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/comments", "author": null, "committer": null, "parents": [{"sha": "b1da991623341a2ecd97bf9034b93b0d63516517", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1da991623341a2ecd97bf9034b93b0d63516517", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1da991623341a2ecd97bf9034b93b0d63516517"}], "stats": {"total": 62, "additions": 54, "deletions": 8}, "files": [{"sha": "a08d08d28340ec92dbc4e86ce803ff6d3bc0658d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "patch": "@@ -29455,8 +29455,6 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n                    tsubst_flags_t complain, auto_deduction_context context,\n \t\t   tree outer_targs, int flags)\n {\n-  tree targs;\n-\n   if (init == error_mark_node)\n     return error_mark_node;\n \n@@ -29520,14 +29518,17 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n   else\n     init = resolve_nondeduced_context (init, complain);\n \n+  tree targs;\n   if (context == adc_decomp_type\n       && auto_node == type\n       && init != error_mark_node\n       && TREE_CODE (TREE_TYPE (init)) == ARRAY_TYPE)\n-    /* [dcl.decomp]/1 - if decomposition declaration has no ref-qualifiers\n-       and initializer has array type, deduce cv-qualified array type.  */\n-    return cp_build_qualified_type_real (TREE_TYPE (init), TYPE_QUALS (type),\n-\t\t\t\t\t complain);\n+    {\n+      /* [dcl.struct.bind]/1 - if decomposition declaration has no ref-qualifiers\n+\t and initializer has array type, deduce cv-qualified array type.  */\n+      targs = make_tree_vec (1);\n+      TREE_VEC_ELT (targs, 0) = TREE_TYPE (init);\n+    }\n   else if (AUTO_IS_DECLTYPE (auto_node))\n     {\n       tree stripped_init = tree_strip_any_location_wrapper (init);\n@@ -29613,15 +29614,18 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n       if (processing_template_decl)\n \t{\n \t  gcc_checking_assert (context == adc_variable_type\n-\t\t\t       || context == adc_return_type);\n+\t\t\t       || context == adc_return_type\n+\t\t\t       || context == adc_decomp_type);\n \t  gcc_checking_assert (!type_dependent_expression_p (init));\n \t  /* If the constraint is dependent, we need to wait until\n \t     instantiation time to resolve the placeholder.  */\n \t  if (placeholder_type_constraint_dependent_p (constr))\n \t    return type;\n \t}\n \n-      if ((context == adc_return_type || context == adc_variable_type)\n+      if ((context == adc_return_type\n+\t   || context == adc_variable_type\n+\t   || context == adc_decomp_type)\n \t  && current_function_decl\n \t  && DECL_TEMPLATE_INFO (current_function_decl))\n \touter_targs = DECL_TI_ARGS (current_function_decl);"}, {"sha": "93219ff4f0568d7d5480905e6531b47f840fe673", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder7.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder7.C?ref=66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/99899\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> concept C1 = sizeof(T) > sizeof(int[1]);\n+\n+template <class>\n+void f() {\n+  int x[] = {1,2};\n+  int y[] = {3};\n+  C1 auto [a,b] = x;\n+  C1 auto [c] = y; // { dg-error \"constraints\" }\n+}\n+\n+template <class T>\n+void g() {\n+  T x[] = {1,2};\n+  T y[] = {3};\n+  C1 auto [a,b] = x;\n+  C1 auto [c] = y; // { dg-error \"constraints\" }\n+}\n+template void g<int>();\n+\n+\n+template <class... Ts> concept C2 = sizeof...(Ts) > 1;\n+\n+struct S { int a, b; } s;\n+\n+template <class T>\n+void h() {\n+  const C2<T> auto& [a, b] = s;\n+}\n+template void h<int>();"}, {"sha": "e78659203ba41034ea9b894376ea6af14f95fc29", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-placeholder8.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66de517b1c1dd22df7914f8e9a083cd5a73adbe2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-placeholder8.C?ref=66de517b1c1dd22df7914f8e9a083cd5a73adbe2", "patch": "@@ -0,0 +1,10 @@\n+// { dg-do compile { target c++20 } }\n+\n+template <class T> concept is_const = __is_same(T, const T);\n+\n+void f() {\n+  int x[] = {1,2};\n+  const int y[] = {3};\n+  const is_const auto [a,b] = x; // { dg-error \"constraints\" }\n+  const is_const auto [c] = y;\n+}"}]}