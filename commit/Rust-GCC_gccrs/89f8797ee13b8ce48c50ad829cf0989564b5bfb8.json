{"sha": "89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlmODc5N2VlMTNiOGNlNDhjNTBhZDgyOWNmMDk4OTU2NGI1YmZiOA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-17T23:08:14Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2014-12-17T23:08:14Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\ngcc/\n\tPR target/51244\n\t* config/sh/sh_treg_combine.cc (is_conditional_insn): New function.\n\t(cbranch_trace): Add member rtx* condition_rtx_in_insn, initialize it\n\taccordingly in constructor.\n\t(cbranch_trace::branch_condition_rtx_ref): New function.\n\t(cbranch_trace::branch_condition_rtx): Use branch_condition_rtx_ref.\n\t(sh_treg_combine::try_invert_branch_condition): Invert condition rtx\n\tin insn using reversed_comparison_code and validate_change instead of\n\tinvert_jump_1.\n\t(sh_treg_combine::execute): Look for conditional insns in basic blocks\n\tin addition to conditional branches.\n\t* config/sh/sh.md (*movsicc_div0s): Remove combine patterns.\n\nFrom-SVN: r218850", "tree": {"sha": "0712f51fab9bdec89bec5432d03c151f3e270220", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0712f51fab9bdec89bec5432d03c151f3e270220"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/comments", "author": null, "committer": null, "parents": [{"sha": "ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff49a9ba7b528078691a9f4e811bcdd4e9f99cdd"}], "stats": {"total": 118, "additions": 69, "deletions": 49}, "files": [{"sha": "f9e1af53b42df68a2ae7f6d327741703abf01ae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "patch": "@@ -1,3 +1,18 @@\n+2014-12-17  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/sh_treg_combine.cc (is_conditional_insn): New function.\n+\t(cbranch_trace): Add member rtx* condition_rtx_in_insn, initialize it\n+\taccordingly in constructor.\n+\t(cbranch_trace::branch_condition_rtx_ref): New function.\n+\t(cbranch_trace::branch_condition_rtx): Use branch_condition_rtx_ref.\n+\t(sh_treg_combine::try_invert_branch_condition): Invert condition rtx\n+\tin insn using reversed_comparison_code and validate_change instead of\n+\tinvert_jump_1.\n+\t(sh_treg_combine::execute): Look for conditional insns in basic blocks\n+\tin addition to conditional branches.\n+\t* config/sh/sh.md (*movsicc_div0s): Remove combine patterns.\n+\n 2014-12-17  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "5aa50a25af9d0c39b8d47b806cd8fd582ff752c6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "patch": "@@ -1086,47 +1086,6 @@\n \t\t      (label_ref (match_dup 2))\n \t\t      (pc)))])\n \n-;; Conditional move combine pattern for div0s comparisons.\n-;; This is used when TARGET_PRETEND_CMOVE is in effect.\n-(define_insn_and_split \"*movsicc_div0s\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"\")\n-\t(if_then_else:SI (ge (xor:SI (match_operand:SI 1 \"arith_reg_operand\" \"\")\n-\t\t\t\t     (match_operand:SI 2 \"arith_reg_operand\" \"\"))\n-\t\t\t     (const_int 0))\n-\t\t\t (match_operand:SI 3 \"arith_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 4 \"general_movsrc_operand\" \"\")))\n-   (clobber (reg:SI T_REG))]\n-  \"TARGET_PRETEND_CMOVE\"\n-  \"#\"\n-  \"&& 1\"\n-  [(set (reg:SI T_REG) (lt:SI (xor:SI (match_dup 1) (match_dup 2))\n-\t\t\t      (const_int 0)))\n-   (set (match_dup 0)\n-\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n-\t\t      (match_dup 4)\n-\t\t      (match_dup 3)))])\n-\n-(define_insn_and_split \"*movsicc_div0s\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\")\n-\t(if_then_else:SI (eq (lshiftrt:SI\n-\t\t\t\t(match_operand:SI 1 \"arith_reg_operand\")\n-\t\t\t\t(const_int 31))\n-\t\t\t     (lshiftrt:SI\n-\t\t\t\t(match_operand:SI 2 \"arith_reg_operand\")\n-\t\t\t\t(const_int 31)))\n-\t\t\t (match_operand:SI 3 \"arith_reg_operand\")\n-\t\t\t (match_operand:SI 4 \"general_movsrc_operand\")))\n-   (clobber (reg:SI T_REG))]\n-   \"TARGET_PRETEND_CMOVE\"\n-   \"#\"\n-   \"&& 1\"\n-  [(set (reg:SI T_REG) (lt:SI (xor:SI (match_dup 1) (match_dup 2))\n-\t\t\t      (const_int 0)))\n-   (set (match_dup 0)\n-\t(if_then_else (ne (reg:SI T_REG) (const_int 0))\n-\t\t      (match_dup 4)\n-\t\t      (match_dup 3)))])\n-\n ;; -------------------------------------------------------------------------\n ;; SImode unsigned integer comparisons\n ;; -------------------------------------------------------------------------"}, {"sha": "97e677da50c57d6bbdedeb818c06d3adc9888962", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 54, "deletions": 8, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89f8797ee13b8ce48c50ad829cf0989564b5bfb8/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=89f8797ee13b8ce48c50ad829cf0989564b5bfb8", "patch": "@@ -432,6 +432,16 @@ trace_reg_uses (rtx reg, rtx_insn *start_insn, rtx abort_at_insn)\n   return count;\n }\n \n+static bool\n+is_conditional_insn (rtx_insn* i)\n+{\n+  if (! (INSN_P (i) && NONDEBUG_INSN_P (i)))\n+    return false;\n+\n+  rtx p = PATTERN (i);\n+  return GET_CODE (p) == SET && GET_CODE (XEXP (p, 1)) == IF_THEN_ELSE;\n+}\n+\n // FIXME: Remove dependency on SH predicate function somehow.\n extern int t_reg_operand (rtx, machine_mode);\n extern int negt_reg_operand (rtx, machine_mode);\n@@ -484,6 +494,7 @@ class sh_treg_combine : public rtl_opt_pass\n   struct cbranch_trace\n   {\n     rtx_insn *cbranch_insn;\n+    rtx* condition_rtx_in_insn;\n     branch_condition_type_t cbranch_type;\n \n     // The comparison against zero right before the conditional branch.\n@@ -495,18 +506,31 @@ class sh_treg_combine : public rtl_opt_pass\n \n     cbranch_trace (rtx_insn *insn)\n     : cbranch_insn (insn),\n+      condition_rtx_in_insn (NULL),\n       cbranch_type (unknown_branch_condition),\n       setcc ()\n     {\n+      if (is_conditional_insn (cbranch_insn))\n+\tcondition_rtx_in_insn = &XEXP (XEXP (PATTERN (cbranch_insn), 1), 0);\n+      else if (rtx x = pc_set (cbranch_insn))\n+\tcondition_rtx_in_insn = &XEXP (XEXP (x, 1), 0);\n     }\n \n     basic_block bb (void) const { return BLOCK_FOR_INSN (cbranch_insn); }\n \n     rtx\n     branch_condition_rtx (void) const\n     {\n-      rtx x = pc_set (cbranch_insn);\n-      return x == NULL_RTX ? NULL_RTX : XEXP (XEXP (x, 1), 0);\n+      return condition_rtx_in_insn != NULL ? *condition_rtx_in_insn : NULL;\n+    }\n+    rtx&\n+    branch_condition_rtx_ref (void) const\n+    {\n+      // Before anything gets to invoke this function, there are other checks\n+      // in place to make sure that we have a known branch condition and thus\n+      // the ref to the rtx in the insn.\n+      gcc_assert (condition_rtx_in_insn != NULL);\n+      return *condition_rtx_in_insn;\n     }\n \n     bool\n@@ -1033,8 +1057,18 @@ sh_treg_combine::try_invert_branch_condition (cbranch_trace& trace)\n {\n   log_msg (\"inverting branch condition\\n\");\n \n-  if (!invert_jump_1 (trace.cbranch_insn, JUMP_LABEL (trace.cbranch_insn)))\n-    log_return (false, \"invert_jump_1 failed\\n\");\n+  rtx& comp = trace.branch_condition_rtx_ref ();\n+\n+  rtx_code rev_cmp_code = reversed_comparison_code (comp, trace.cbranch_insn);\n+\n+  if (rev_cmp_code == UNKNOWN)\n+    log_return (false, \"reversed_comparison_code = UNKNOWN\\n\");\n+\n+  validate_change (trace.cbranch_insn, &comp,\n+\t\t   gen_rtx_fmt_ee (rev_cmp_code,\n+\t\t\t\t   GET_MODE (comp), XEXP (comp, 0),\n+\t\t\t\t   XEXP (comp, 1)),\n+\t\t   1);\n \n   if (verify_changes (num_validated_changes ()))\n     confirm_change_group ();\n@@ -1531,14 +1565,26 @@ sh_treg_combine::execute (function *fun)\n   log_rtx (m_ccreg);\n   log_msg (\"  STORE_FLAG_VALUE = %d\\n\", STORE_FLAG_VALUE);\n \n-  // Look for basic blocks that end with a conditional branch and try to\n-  // optimize them.\n+  // Look for basic blocks that end with a conditional branch or for\n+  // conditional insns and try to optimize them.\n   basic_block bb;\n   FOR_EACH_BB_FN (bb, fun)\n     {\n-      rtx_insn *i = BB_END (bb);\n+      rtx_insn* i = BB_END (bb);\n+      if (i == NULL || i == PREV_INSN (BB_HEAD (bb)))\n+\tcontinue;\n+\n+      // A conditional branch is always the last insn of a basic block.\n       if (any_condjump_p (i) && onlyjump_p (i))\n-\ttry_optimize_cbranch (i);\n+\t{\n+\t  try_optimize_cbranch (i);\n+\t  i = PREV_INSN (i);\n+\t}\n+\n+      // Check all insns in block for conditional insns.\n+      for (; i != NULL && i != PREV_INSN (BB_HEAD (bb)); i = PREV_INSN (i))\n+\tif (is_conditional_insn (i))\n+\t  try_optimize_cbranch (i);\n     }\n \n   log_msg (\"\\n\\n\");"}]}