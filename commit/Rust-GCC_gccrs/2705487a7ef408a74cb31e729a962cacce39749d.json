{"sha": "2705487a7ef408a74cb31e729a962cacce39749d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjcwNTQ4N2E3ZWY0MDhhNzRjYjMxZTcyOWE5NjJjYWNjZTM5NzQ5ZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-04-26T18:57:40Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-04-26T18:57:40Z"}, "message": "ParserDelegator.java (callBack, gnu): Now package-private.\n\n\t* javax/swing/text/html/parser/ParserDelegator.java (callBack,\n\tgnu): Now package-private.\n\t* javax/swing/text/html/parser/DocumentParser.java (parser,\n\tcallBack, gnu): Now package-private.\n\t* javax/swing/text/StringContent.java (content, setOffset,\n\tcheckLocation): Now package-private.\n\t* javax/swing/text/JTextComponent.java (doc): Now\n\tpackage-private.\n\t* javax/swing/plaf/basic/BasicToolBarUI.java (owner,\n\tlastGoodOrientation, origParent, borders, cachedBounds,\n\tcachedOrientation, DragWindow): Now package-private.\n\t* javax/swing/plaf/basic/BasicTabbedPaneUI.java (incrButton,\n\tdecrButton, viewport, panel, currentScrollLocation, layoutManager,\n\ttabAreaRect, contentRect, createIncreaseButton,\n\tcreateDecreaseButton, findPointForIndex): Now package-private.\n\t* javax/swing/plaf/basic/BasicSplitPaneDivider.java\n\t(currentDividerLocation, moveDividerTo): Now package-private.\n\t* javax/swing/plaf/basic/BasicSliderUI.java (findClosestTick): Now\n\tpackage-private.\n\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n\t(calculatePreferredSize, valueForYPosition, valueForXPosition):\n\tNow package-private.\n\t* javax/swing/plaf/basic/BasicPopupMenuUI.java\n\t(topWindowListener): Now package-private.\n\t* javax/swing/plaf/basic/BasicOptionPaneUI.java (iconSize,\n\tOK_STRING, YES_STRING, NO_STRING, CANCEL_STRING): Now constants.\n\t(messageAreaContainer, buttonContainer, resetSelectedValue): Now\n\tpackage-private.\n\t* javax/swing/plaf/basic/BasicListUI.java (damageLayout): Now\n\tpackage-private.\n\t* javax/swing/plaf/basic/BasicInternalFrameTitlePane.java (title):\n\tNow package-private.\n\t* javax/swing/plaf/basic/BasicDesktopIconUI.java (button): Now\n\tpackage-private.\n\t* javax/swing/plaf/basic/BasicComboBoxUI.java (largestItemSize,\n\tborderInsets): Now package-private.\n\t(arrowButtonWidth): Likewise.  Now a constant.\n\t* javax/swing/plaf/basic/BasicColorChooserUI.java (chooser, pane,\n\tmakeTabs, updatePreviewPanel): Now package-private.\n\t* javax/swing/plaf/basic/BasicArrowButton.java (shadow,\n\tdarkShadow, highlight): Now package-private.\n\t* javax/swing/colorchooser/DefaultSwatchChooserPanel.java\n\t(addColorToQueue): Now package-private.\n\t* javax/swing/colorchooser/DefaultRGBChooserPanel.java\n\t(spinnerChange, sliderChange, updateChange, R, G, B, RSpinner,\n\tGSpinner, BSpinner): Now package-private.\n\t* javax/swing/colorchooser/DefaultHSBChooserPanel.java\n\t(gradientImage, trackImage, slider, hRadio, sRadio, bRadio,\n\thSpinner, sSpinner, bSpinner, gradientPoint, internalChange,\n\tspinnerTrigger, locked, handlingMouse, updateImage, updateSlider,\n\tupdateTrack): Now package-private.\n\t* javax/swing/TransferHandler.java (clipboard): Now\n\tpackage-private.\n\t* javax/swing/ToolTipManager.java (showTip, hideTip): Now\n\tpackage-private.\n\t* javax/swing/Timer.java (drainEvents, queueEvent): Now\n\tpackage-private.\n\t* javax/swing/RepaintManager.java (globalManager): Now\n\tpackage-private.\n\t* javax/swing/JFormattedTextField.java (editValid): Now\n\tpackage-private.\n\t* javax/swing/JColorChooser.java (makeModal): Now\n\tpackage-private.\n\t* java/awt/geom/GeneralPath.java (rule, types, xpoints, ypoints,\n\tindex, path): Now package-private.\n\t* java/awt/geom/Area.java (solids, holes, cubicCubicIntersect,\n\tlineQuadIntersect, lineCubicIntersect, linesIntersect,\n\tpointEquals): Now package-private.\n\t* java/awt/geom/Arc2D.java (type): Now package-private.\n\t* java/awt/Window.java (windowFocusOwner): Now package-private.\n\t* java/awt/TextComponent.java (editable, selectionStart,\n\tselectionEnd, text, getIndexAtPoint, getCharacterBounds): Now\n\tpackage-private.\n\t* java/awt/MenuItem.java (actionCommand, enabled, label): Now\n\tpackage-private.\n\t* java/awt/MenuComponent.java (focusListener): Now\n\tpackage-private.\n\t* java/awt/Frame.java (state): Now package-private.\n\t* java/awt/Choice.java (pItems): Now package-private.\n\t* java/awt/Checkbox.java (state): Now package-private.\n\t* java/awt/Button.java (actionCommand, label): Now\n\tpackage-private.\n\t* gnu/javax/swing/text/html/parser/support/Parser.java\n\t(attributes, _handleEndTag_remaining, _handleStartTag): Now\n\tpackage-private.\n\t* gnu/java/beans/decoder/PersistenceParser.java (javaHandler): Now\n\tpackage-private.\n\t* gnu/java/awt/peer/gtk/GdkGraphics2D.java (paint, stroke, fg, bg,\n\tclip, transform, font, comp): Now package-private.\n\nFrom-SVN: r98786", "tree": {"sha": "cdc50879b1d5f698a9814aca6b254df8b707b56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdc50879b1d5f698a9814aca6b254df8b707b56c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2705487a7ef408a74cb31e729a962cacce39749d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2705487a7ef408a74cb31e729a962cacce39749d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2705487a7ef408a74cb31e729a962cacce39749d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2705487a7ef408a74cb31e729a962cacce39749d/comments", "author": null, "committer": null, "parents": [{"sha": "2500ada2ff5b66d2dbafc3f357047bb8d8363e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2500ada2ff5b66d2dbafc3f357047bb8d8363e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2500ada2ff5b66d2dbafc3f357047bb8d8363e37"}], "stats": {"total": 608, "additions": 416, "deletions": 192}, "files": [{"sha": "d32eb9e2d0a80547622ee732e3b9ab57af135350", "filename": "libjava/ChangeLog", "status": "modified", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,3 +1,95 @@\n+2005-04-26  Tom Tromey  <tromey@redhat.com>\n+\n+\t* javax/swing/text/html/parser/ParserDelegator.java (callBack,\n+\tgnu): Now package-private.\n+\t* javax/swing/text/html/parser/DocumentParser.java (parser,\n+\tcallBack, gnu): Now package-private.\n+\t* javax/swing/text/StringContent.java (content, setOffset,\n+\tcheckLocation): Now package-private.\n+\t* javax/swing/text/JTextComponent.java (doc): Now\n+\tpackage-private.\n+\t* javax/swing/plaf/basic/BasicToolBarUI.java (owner,\n+\tlastGoodOrientation, origParent, borders, cachedBounds,\n+\tcachedOrientation, DragWindow): Now package-private.\n+\t* javax/swing/plaf/basic/BasicTabbedPaneUI.java (incrButton,\n+\tdecrButton, viewport, panel, currentScrollLocation, layoutManager,\n+\ttabAreaRect, contentRect, createIncreaseButton,\n+\tcreateDecreaseButton, findPointForIndex): Now package-private.\n+\t* javax/swing/plaf/basic/BasicSplitPaneDivider.java\n+\t(currentDividerLocation, moveDividerTo): Now package-private.\n+\t* javax/swing/plaf/basic/BasicSliderUI.java (findClosestTick): Now\n+\tpackage-private.\n+\t* javax/swing/plaf/basic/BasicScrollBarUI.java\n+\t(calculatePreferredSize, valueForYPosition, valueForXPosition):\n+\tNow package-private.\n+\t* javax/swing/plaf/basic/BasicPopupMenuUI.java\n+\t(topWindowListener): Now package-private.\n+\t* javax/swing/plaf/basic/BasicOptionPaneUI.java (iconSize,\n+\tOK_STRING, YES_STRING, NO_STRING, CANCEL_STRING): Now constants.\n+\t(messageAreaContainer, buttonContainer, resetSelectedValue): Now\n+\tpackage-private.\n+\t* javax/swing/plaf/basic/BasicListUI.java (damageLayout): Now\n+\tpackage-private.\n+\t* javax/swing/plaf/basic/BasicInternalFrameTitlePane.java (title):\n+\tNow package-private.\n+\t* javax/swing/plaf/basic/BasicDesktopIconUI.java (button): Now\n+\tpackage-private.\n+\t* javax/swing/plaf/basic/BasicComboBoxUI.java (largestItemSize,\n+\tborderInsets): Now package-private.\n+\t(arrowButtonWidth): Likewise.  Now a constant.\n+\t* javax/swing/plaf/basic/BasicColorChooserUI.java (chooser, pane,\n+\tmakeTabs, updatePreviewPanel): Now package-private.\n+\t* javax/swing/plaf/basic/BasicArrowButton.java (shadow,\n+\tdarkShadow, highlight): Now package-private.\n+\t* javax/swing/colorchooser/DefaultSwatchChooserPanel.java\n+\t(addColorToQueue): Now package-private.\n+\t* javax/swing/colorchooser/DefaultRGBChooserPanel.java\n+\t(spinnerChange, sliderChange, updateChange, R, G, B, RSpinner,\n+\tGSpinner, BSpinner): Now package-private.\n+\t* javax/swing/colorchooser/DefaultHSBChooserPanel.java\n+\t(gradientImage, trackImage, slider, hRadio, sRadio, bRadio,\n+\thSpinner, sSpinner, bSpinner, gradientPoint, internalChange,\n+\tspinnerTrigger, locked, handlingMouse, updateImage, updateSlider,\n+\tupdateTrack): Now package-private.\n+\t* javax/swing/TransferHandler.java (clipboard): Now\n+\tpackage-private.\n+\t* javax/swing/ToolTipManager.java (showTip, hideTip): Now\n+\tpackage-private.\n+\t* javax/swing/Timer.java (drainEvents, queueEvent): Now\n+\tpackage-private.\n+\t* javax/swing/RepaintManager.java (globalManager): Now\n+\tpackage-private.\n+\t* javax/swing/JFormattedTextField.java (editValid): Now\n+\tpackage-private.\n+\t* javax/swing/JColorChooser.java (makeModal): Now\n+\tpackage-private.\n+\t* java/awt/geom/GeneralPath.java (rule, types, xpoints, ypoints,\n+\tindex, path): Now package-private.\n+\t* java/awt/geom/Area.java (solids, holes, cubicCubicIntersect,\n+\tlineQuadIntersect, lineCubicIntersect, linesIntersect,\n+\tpointEquals): Now package-private.\n+\t* java/awt/geom/Arc2D.java (type): Now package-private.\n+\t* java/awt/Window.java (windowFocusOwner): Now package-private.\n+\t* java/awt/TextComponent.java (editable, selectionStart,\n+\tselectionEnd, text, getIndexAtPoint, getCharacterBounds): Now\n+\tpackage-private.\n+\t* java/awt/MenuItem.java (actionCommand, enabled, label): Now\n+\tpackage-private.\n+\t* java/awt/MenuComponent.java (focusListener): Now\n+\tpackage-private.\n+\t* java/awt/Frame.java (state): Now package-private.\n+\t* java/awt/Choice.java (pItems): Now package-private.\n+\t* java/awt/Checkbox.java (state): Now package-private.\n+\t* java/awt/Button.java (actionCommand, label): Now\n+\tpackage-private.\n+\t* gnu/javax/swing/text/html/parser/support/Parser.java\n+\t(attributes, _handleEndTag_remaining, _handleStartTag): Now\n+\tpackage-private.\n+\t* gnu/java/beans/decoder/PersistenceParser.java (javaHandler): Now\n+\tpackage-private.\n+\t* gnu/java/awt/peer/gtk/GdkGraphics2D.java (paint, stroke, fg, bg,\n+\tclip, transform, font, comp): Now package-private.\n+\n 2005-04-26  Tom Tromey  <tromey@redhat.com>\n \n \t* java/awt/Robot.java (waitForIdle): Call invokeAndWait in a"}, {"sha": "65152472e5a6511088c812ea5b3de1c8b03f41a3", "filename": "libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGdkGraphics2D.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -110,19 +110,22 @@ public class GdkGraphics2D extends Graphics2D\n   \n   private final int native_state = GtkGenericPeer.getUniqueInteger();  \n \n-  private Paint paint;\n-  private Stroke stroke;\n-  private Color fg;\n-  private Color bg;\n-  private Shape clip;\n-  private AffineTransform transform;\n+  // These are package-private to avoid accessor methods.\n+  Paint paint;\n+  Stroke stroke;\n+  Color fg;\n+  Color bg;\n+  Shape clip;\n+  AffineTransform transform;\n   private GtkComponentPeer component;\n-  private Font font;\n+  // This is package-private to avoid an accessor method.\n+  Font font;\n   private RenderingHints hints;\n   private BufferedImage bimage;\n   private boolean pixelConversionRequired;\n   private int[] pixelBuffer;\n-  private Composite comp;\n+  // This is package-private to avoid an accessor method.\n+  Composite comp;\n   private Stack stateStack;\n \n   private native void initState(GtkComponentPeer component);"}, {"sha": "5bb4acfdf87be33f1cd9096b0f29875904026b2a", "filename": "libjava/gnu/java/beans/decoder/PersistenceParser.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* gnu.java.beans.PersistenceParser\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -83,8 +83,9 @@ public class PersistenceParser extends DefaultHandler implements Context\n \tprivate ElementHandler currentHandler;\n \n \t/** The real root element that stores all objects created during parsing.\n+\t * Package-private to avoid an accessor method.\n \t */\n-\tprivate JavaHandler javaHandler;\n+\tJavaHandler javaHandler;\n \n \t/** Stores the decoded objects. */\n \tprivate List objects = new LinkedList();"}, {"sha": "1e5147a4728fbc55ce24c233809d767bb1f98222", "filename": "libjava/gnu/javax/swing/text/html/parser/support/Parser.java", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2Fsupport%2FParser.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -157,8 +157,9 @@ public int compare(Object a, Object b)\n \n   /**\n    * The attributes of the current HTML element.\n+   * Package-private to avoid an accessor method.\n    */\n-  private htmlAttributeSet attributes =\n+  htmlAttributeSet attributes =\n     htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;\n \n   /**\n@@ -1154,9 +1155,10 @@ private void _handleEndTag(TagElement tag)\n \n   /**\n    * Actions that are also required if the closing action was\n-   * intiated by the tag validator.\n+   * initiated by the tag validator.\n+   * Package-private to avoid an accessor method.\n    */\n-  private void _handleEndTag_remaining(TagElement tag)\n+  void _handleEndTag_remaining(TagElement tag)\n   {\n     HTML.Tag h = tag.getHTMLTag();\n \n@@ -1183,9 +1185,10 @@ private void _handleEndTag_remaining(TagElement tag)\n    * A hooks for operations, preceeding call to handleStartTag().\n    * The method is called when the HTML opening tag ((like &lt;table&gt;)\n    * is found.\n+   * Package-private to avoid an accessor method.\n    * @param The tag\n    */\n-  private void _handleStartTag(TagElement tag)\n+  void _handleStartTag(TagElement tag)\n   {\n     validator.openTag(tag, attributes);\n     startingTag(tag);"}, {"sha": "a71a0d7eb0aaf12171828af250e07859dc07e56c", "filename": "libjava/java/awt/Button.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FButton.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -77,13 +77,15 @@ public class Button extends Component\n \n /**\n   * @serial The action command name for this button.\n+  * This is package-private to avoid an accessor method.\n   */\n-private String actionCommand;\n+String actionCommand;\n \n /**\n   * @serial The label for this button.\n+  * This is package-private to avoid an accessor method.\n   */\n-private String label;\n+String label;\n \n // List of ActionListeners for this class.\n private transient ActionListener action_listeners;"}, {"sha": "a0c86c1c87a1402ba0e28f79e643620942fff0f4", "filename": "libjava/java/awt/Checkbox.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FCheckbox.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FCheckbox.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FCheckbox.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -89,8 +89,9 @@ public class Checkbox extends Component\n \n /**\n   * @serial The state of this checkbox.\n+  * This is package-private to avoid an accessor method.\n   */\n-private boolean state;\n+boolean state;\n \n // The list of listeners for this object.\n private transient ItemListener item_listeners;"}, {"sha": "cdfd7042e8071c8e2c5384ba55bd1da0a2ff7cbc", "filename": "libjava/java/awt/Choice.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FChoice.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FChoice.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FChoice.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -74,8 +74,9 @@ public class Choice extends Component\n \n /**\n   * @serial A list of items for the choice box, which can be <code>null</code>.\n+  * This is package-private to avoid an accessor method.\n   */\n-private Vector pItems = new Vector();\n+Vector pItems = new Vector();\n \n /**\n   * @serial The index of the selected item in the choice box."}, {"sha": "77596ef81d4eef52a1b65307642b7eb7b57cb381", "filename": "libjava/java/awt/Frame.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FFrame.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FFrame.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFrame.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -186,8 +186,9 @@ public class Frame extends Window implements MenuContainer\n /**\n   * @serial The state of this frame.\n   * // FIXME: What are the values here?\n+  * This is package-private to avoid an accessor method.\n   */\n-private int state;\n+int state;\n \n /**\n   * @serial The title of the frame."}, {"sha": "3d41e40797f8473f358f7a439d3d6ccdf6a98b80", "filename": "libjava/java/awt/MenuComponent.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FMenuComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FMenuComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuComponent.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -161,8 +161,9 @@ public abstract class MenuComponent implements Serializable\n    *\n    * @see AccessibleAWTMenuComponent#addFocusListener(java.awt.event.FocusListener)\n    * @serial ignored.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient FocusListener focusListener;\n+  transient FocusListener focusListener;\n \n /*************************************************************************/\n "}, {"sha": "f40f4af11910c0421054b935587a045f5a503c56", "filename": "libjava/java/awt/MenuItem.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FMenuItem.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FMenuItem.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FMenuItem.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -75,13 +75,15 @@ public class MenuItem extends MenuComponent\n \n /**\n   * @serial The name of the action command generated by this item.\n+  * This is package-private to avoid an accessor method.\n   */\n-private String actionCommand;\n+String actionCommand;\n \n /**\n   * @serial Indicates whether or not this menu item is enabled.\n+  * This is package-private to avoid an accessor method.\n   */\n-private boolean enabled = true;\n+boolean enabled = true;\n \n /**\n   * @serial The mask of events that are enabled for this menu item.\n@@ -90,8 +92,9 @@ public class MenuItem extends MenuComponent\n \n /**\n   * @serial This menu item's label\n+  * This is package-private to avoid an accessor method.\n   */\n-private String label;\n+String label;\n \n /**\n   * @serial The shortcut for this menu item, if any"}, {"sha": "34ea698e32772206f47e521326190f88342dd25f", "filename": "libjava/java/awt/TextComponent.java", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FTextComponent.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -76,23 +76,27 @@ public class TextComponent extends Component\n \n /**\n   * @serial Indicates whether or not this component is editable.\n+  * This is package-private to avoid an accessor method.\n   */\n-private boolean editable;\n+boolean editable;\n \n /**\n   * @serial The starting position of the selected text region.\n+  * This is package-private to avoid an accessor method.\n   */\n-private int selectionStart;\n+int selectionStart;\n \n /**\n   * @serial The ending position of the selected text region.\n+  * This is package-private to avoid an accessor method.\n   */\n-private int selectionEnd;\n+int selectionEnd;\n \n /**\n   * @serial The text in the component\n+  * This is package-private to avoid an accessor method.\n   */\n-private String text;\n+String text;\n \n /**\n   * A list of listeners that will receive events from this object.\n@@ -708,8 +712,9 @@ public AccessibleContext getAccessibleContext()\n   \n   /*******************************/\n   // Provide AccessibleAWTTextComponent access to several peer functions that\n-  // aren't publicly exposed.\n-  private synchronized int\n+  // aren't publicly exposed.  This is package-private to avoid an accessor\n+  // method.\n+  synchronized int\n   getIndexAtPoint(Point p)\n   {\n     TextComponentPeer tcp = (TextComponentPeer)getPeer();\n@@ -718,7 +723,7 @@ public AccessibleContext getAccessibleContext()\n     return -1;\n   }\n   \n-  private synchronized Rectangle\n+  synchronized Rectangle\n   getCharacterBounds(int i)\n   {\n     TextComponentPeer tcp = (TextComponentPeer)getPeer();"}, {"sha": "e4e0a36002abecdbf958004a00a65ca7d569ef36", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -90,7 +90,8 @@ public class Window extends Container implements Accessible\n \n   private transient boolean shown;\n \n-  private transient Component windowFocusOwner;\n+  // This is package-private to avoid an accessor method.\n+  transient Component windowFocusOwner;\n   \n   /*\n    * The number used to generate the name returned by getName."}, {"sha": "2cdc17080db1e9de7bf14d4a5f95a55c37790326", "filename": "libjava/java/awt/geom/Arc2D.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FArc2D.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -73,8 +73,9 @@ public abstract class Arc2D extends RectangularShape\n    */\n   public static final int PIE = 2;\n \n-  /** The closure type of this arc. */\n-  private int type;\n+  /** The closure type of this arc.  This is package-private to avoid an\n+   * accessor method.  */\n+  int type;\n \n   /**\n    * Create a new arc, with the specified closure type."}, {"sha": "782552940f95f7d214aa9f26d0394f4905292348", "filename": "libjava/java/awt/geom/Area.java", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FArea.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FArea.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FArea.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -89,13 +89,15 @@ public class Area implements Shape, Cloneable\n \n   /**\n    * Segment vectors containing solid areas and holes\n+   * This is package-private to avoid an accessor method.\n    */\n-  private Vector solids;\n+  Vector solids;\n \n   /**\n    * Segment vectors containing solid areas and holes\n+   * This is package-private to avoid an accessor method.\n    */\n-  private Vector holes;\n+  Vector holes;\n \n   /**\n    * Vector (temporary) storing curve-curve intersections\n@@ -1315,9 +1317,10 @@ private void recursiveSubdivide(CubicCurve2D c1, CubicCurve2D c2,\n    * This is a reasonably accurate method, although the recursion depth\n    * is typically around 20, the bounding-box tests allow for significant\n    * pruning of the subdivision tree.\n+   * \n+   * This is package-private to avoid an accessor method.\n    */\n-  private Intersection[] cubicCubicIntersect(CubicSegment curve1,\n-                                             CubicSegment curve2)\n+  Intersection[] cubicCubicIntersect(CubicSegment curve1, CubicSegment curve2)\n   {\n     Rectangle2D r1 = curve1.getBounds();\n     Rectangle2D r2 = curve2.getBounds();\n@@ -1349,8 +1352,9 @@ private Intersection[] cubicCubicIntersect(CubicSegment curve1,\n    * Or null if no intersections are found1\n    * This is done through combining the line's equation with the\n    * parametric form of the Bezier and solving the resulting quadratic.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private Intersection[] lineQuadIntersect(LineSegment l, QuadSegment c)\n+  Intersection[] lineQuadIntersect(LineSegment l, QuadSegment c)\n   {\n     double[] y = new double[3];\n     double[] x = new double[3];\n@@ -1453,8 +1457,9 @@ private Intersection[] lineQuadIntersect(LineSegment l, QuadSegment c)\n    * Returns the intersections between a line and a cubic segment\n    * This is done through combining the line's equation with the\n    * parametric form of the Bezier and solving the resulting quadratic.\n+   * This is package-private to avoid an accessor method. \n    */\n-  private Intersection[] lineCubicIntersect(LineSegment l, CubicSegment c)\n+  Intersection[] lineCubicIntersect(LineSegment l, CubicSegment c)\n   {\n     double[] y = new double[4];\n     double[] x = new double[4];\n@@ -1560,8 +1565,9 @@ private Intersection[] lineCubicIntersect(LineSegment l, CubicSegment c)\n   /**\n    * Returns the intersection between two lines, or null if there is no\n    * intersection.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private Intersection linesIntersect(LineSegment a, LineSegment b)\n+  Intersection linesIntersect(LineSegment a, LineSegment b)\n   {\n     Point2D P1 = a.P1;\n     Point2D P2 = a.P2;\n@@ -1605,8 +1611,9 @@ private Intersection linesIntersect(LineSegment a, LineSegment b)\n   /**\n    * Determines if two points are equal, within an error margin\n    * 'snap distance'\n+   * This is package-private to avoid an accessor method.\n    */\n-  private boolean pointEquals(Point2D a, Point2D b)\n+  boolean pointEquals(Point2D a, Point2D b)\n   {\n     return (a.equals(b) || a.distance(b) < PE_EPSILON);\n   }"}, {"sha": "70f7de7dfc9011b6325ca4d61390c20444c12a0c", "filename": "libjava/java/awt/geom/GeneralPath.java", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fgeom%2FGeneralPath.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -88,31 +88,37 @@ public final class GeneralPath implements Shape, Cloneable\n   /** A big number, but not so big it can't survive a few float operations */\n   private static final double BIG_VALUE = java.lang.Double.MAX_VALUE / 10.0;\n \n-  /** The winding rule. */\n-  private int rule;\n+  /** The winding rule.\n+   * This is package-private to avoid an accessor method.\n+   */\n+  int rule;\n \n   /**\n    * The path type in points. Note that xpoints[index] and ypoints[index] maps\n    * to types[index]; the control points of quad and cubic paths map as\n    * well but are ignored.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private byte[] types;\n+  byte[] types;\n \n   /**\n    * The list of all points seen. Since you can only append floats, it makes\n    * sense for these to be float[]. I have no idea why Sun didn't choose to\n    * allow a general path of double precision points.\n    * Note: Storing x and y coords seperately makes for a slower transforms,\n    * But it speeds up and simplifies box-intersection checking a lot.\n+   * These are package-private to avoid accessor methods.\n    */\n-  private float[] xpoints;\n-  private float[] ypoints;\n+  float[] xpoints;\n+  float[] ypoints;\n \n   /** The index of the most recent moveto point, or null. */\n   private int subpath = -1;\n \n-  /** The next available index into points. */\n-  private int index;\n+  /** The next available index into points.\n+   * This is package-private to avoid an accessor method.\n+   */\n+  int index;\n \n   /**\n    * Constructs a GeneralPath with the default (NON_ZERO)\n@@ -534,8 +540,9 @@ private static class GeneralPathIterator implements PathIterator\n \n     /**\n      * The GeneralPath whose segments are being iterated.\n+     * This is package-private to avoid an accessor method.\n      */\n-    private final GeneralPath path;\n+    final GeneralPath path;\n \n     /**\n      * The affine transformation used to transform coordinates."}, {"sha": "1ae4ed195f211a571c9a12cdede438cc4a3f4e34", "filename": "libjava/javax/swing/JColorChooser.java", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FJColorChooser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FJColorChooser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJColorChooser.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -229,11 +229,11 @@ public static Color showDialog(Component component, String title,\n \n   /**\n    * This is a helper method to make the given JDialog block until it is\n-   * hidden.\n+   * hidden.  This is package-private to avoid an accessor method.\n    *\n    * @param dialog The JDialog to block.\n    */\n-  private static void makeModal(JDialog dialog)\n+  static void makeModal(JDialog dialog)\n   {\n     try\n       {"}, {"sha": "863ed204a1ef92f8797342e3dbcafacc48812d74", "filename": "libjava/javax/swing/JFormattedTextField.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FJFormattedTextField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FJFormattedTextField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FJFormattedTextField.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -155,7 +155,8 @@ public AbstractFormatter getFormatter(JFormattedTextField tf)\n   private Object value;\n   private int focusLostBehavior = COMMIT_OR_REVERT;\n   private AbstractFormatterFactory formatterFactory;\n-  private boolean editValid = true;\n+  // Package-private to avoid an accessor method.\n+  boolean editValid = true;\n   \n   public JFormattedTextField ()\n   {"}, {"sha": "8a9d4c8e8cf69ac80088b19f7c64de403ea51201", "filename": "libjava/javax/swing/RepaintManager.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FRepaintManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FRepaintManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FRepaintManager.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -176,12 +176,13 @@ public void run()\n \n   /**\n    * The global, shared RepaintManager instance. This is reused for all\n-   * components in all windows.\n+   * components in all windows.  This is package-private to avoid an accessor\n+   * method.\n    *\n    * @see #currentManager\n    * @see #setCurrentManager\n    */\n-  private static RepaintManager globalManager;\n+  static RepaintManager globalManager;\n \n   /**\n    * Create a new RepaintManager object."}, {"sha": "d1521af1058e77f26c99bcc0ca314301777e999c", "filename": "libjava/javax/swing/Timer.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FTimer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FTimer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FTimer.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -82,6 +82,7 @@ public void run()\n \n   /**\n    * DOCUMENT ME!\n+   * Package-private to avoid an accessor method.\n    */\n   private void queueEvent()\n   {\n@@ -95,8 +96,9 @@ private void queueEvent()\n \n   /**\n    * DOCUMENT ME!\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void drainEvents()\n+  void drainEvents()\n   {\n     synchronized (queueLock)\n       {"}, {"sha": "667e26094d476f8d7cc876bc47e8154876d094fa", "filename": "libjava/javax/swing/ToolTipManager.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FToolTipManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FToolTipManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FToolTipManager.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -466,9 +466,9 @@ public void mouseMoved(MouseEvent event)\n   /**\n    * This method displays the ToolTip. It can figure out the method needed to\n    * show it as well (whether to display it in heavyweight/lightweight panel\n-   * or a window.)\n+   * or a window.)  This is package-private to avoid an accessor method.\n    */\n-  private void showTip()\n+  void showTip()\n   {\n     if (! enabled || currentComponent == null)\n       return;\n@@ -535,8 +535,9 @@ private void showTip()\n \n   /**\n    * This method hides the ToolTip.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void hideTip()\n+  void hideTip()\n   {\n     if (currentTip == null || ! currentTip.isVisible() || ! enabled)\n       return;"}, {"sha": "62acbca58972861e86d8ef969ea96563d7b076d1", "filename": "libjava/javax/swing/TransferHandler.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FTransferHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2FTransferHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FTransferHandler.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -119,8 +119,9 @@ private static Clipboard getClipboard(JComponent component)\n   \n   /**\n    * Clipboard if system clipboard may not be used.\n+   * Package-private to avoid an accessor method.\n    */\n-  private static Clipboard clipboard;\n+  static Clipboard clipboard;\n   \n   private int sourceActions;\n   private Icon visualRepresentation;"}, {"sha": "ea18e4296e4e0bcd98e7a88b3c3f51856496eb23", "filename": "libjava/javax/swing/colorchooser/DefaultHSBChooserPanel.java", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultHSBChooserPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultHSBChooserPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultHSBChooserPanel.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* DefaultHSBChooserPanel.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -70,38 +70,47 @@\n  */\n class DefaultHSBChooserPanel extends AbstractColorChooserPanel\n {\n-  /** The gradient image displayed. */\n-  private transient Image gradientImage;\n+  /** The gradient image displayed.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Image gradientImage;\n \n   /** The Panel that holds the gradient image. */\n   private transient JPanel gradientPanel;\n \n-  /** The track gradient image. */\n-  private transient Image trackImage;\n+  /** The track gradient image.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Image trackImage;\n \n   /** The panel that holds the track. */\n   private transient JPanel trackPanel;\n \n-  /** The slider for the locked HSB value. */\n-  private transient JSlider slider;\n+  /** The slider for the locked HSB value.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSlider slider;\n \n-  /** The RadioButton that controls the Hue. */\n-  private transient JRadioButton hRadio;\n+  /** The RadioButton that controls the Hue.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JRadioButton hRadio;\n \n-  /** The RadioButton that controls the Saturation. */\n-  private transient JRadioButton sRadio;\n+  /** The RadioButton that controls the Saturation.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JRadioButton sRadio;\n \n-  /** The RadioButton that controls the Brightness. */\n-  private transient JRadioButton bRadio;\n+  /** The RadioButton that controls the Brightness.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JRadioButton bRadio;\n \n-  /** The JSpinner that controls the Hue. */\n-  private transient JSpinner hSpinner;\n+  /** The JSpinner that controls the Hue.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner hSpinner;\n \n-  /** The JSpinner that controls the Saturation. */\n-  private transient JSpinner sSpinner;\n+  /** The JSpinner that controls the Saturation.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner sSpinner;\n \n-  /** The JSpinner that controls the Brightness. */\n-  private transient JSpinner bSpinner;\n+  /** The JSpinner that controls the Brightness.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner bSpinner;\n \n   /** The default width of the gradient image. */\n   private static final int imgWidth = 200;\n@@ -132,20 +141,26 @@ class DefaultHSBChooserPanel extends AbstractColorChooserPanel\n   /** The JLabel that displays the value of Blue. */\n   private transient JLabel bFull;\n \n-  /** The point that is displayed in the gradient image. */\n-  private transient Point gradientPoint = new Point();\n+  /** The point that is displayed in the gradient image.\n+   * Package-private to avoid an accessor method.\n+   */\n+  transient Point gradientPoint = new Point();\n \n   /**\n    * This indicates that the change to the slider or point is triggered\n    * internally.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient boolean internalChange = false;\n+  transient boolean internalChange = false;\n \n-  /** This indicates that the change to the spinner is triggered internally. */\n-  private transient boolean spinnerTrigger = false;\n+  /** This indicates that the change to the spinner is triggered\n+   * internally.\n+   * This is package-private to avoid an accessor method.  */\n+  transient boolean spinnerTrigger = false;\n \n-  /** This int identifies which spinner is currently locked. */\n-  private transient int locked = -1;\n+  /** This int identifies which spinner is currently locked.\n+   * This is package-private to avoid an accessor method.  */\n+  transient int locked = -1;\n \n   /** This value indicates that the Hue spinner is locked. */\n   static final int HLOCKED = 0;\n@@ -159,8 +174,9 @@ class DefaultHSBChooserPanel extends AbstractColorChooserPanel\n   /**\n    * This method indicates that the mouse event is in the process of being\n    * handled.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient boolean handlingMouse;\n+  transient boolean handlingMouse;\n \n   /**\n    * This helper class handles mouse events on the gradient image.\n@@ -716,8 +732,9 @@ private void updateSLockImage()\n   /**\n    * This method calls the appropriate method to update the gradient image\n    * depending on which HSB value is constant.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void updateImage()\n+  void updateImage()\n   {\n     switch (locked)\n       {\n@@ -750,8 +767,9 @@ private void updateTextFields()\n   /**\n    * This method updates the slider in response to making a different HSB\n    * property the constant.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void updateSlider()\n+  void updateSlider()\n   {\n     if (slider == null)\n       return;\n@@ -779,8 +797,9 @@ private void updateSlider()\n   /**\n    * This method updates the track gradient image depending on which HSB\n    * property is constant.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void updateTrack()\n+  void updateTrack()\n   {\n     switch (locked)\n       {"}, {"sha": "7cd9bfe3a932c569f70fb4fd9c085b3c7d00c241", "filename": "libjava/javax/swing/colorchooser/DefaultRGBChooserPanel.java", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultRGBChooserPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultRGBChooserPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultRGBChooserPanel.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -109,32 +109,38 @@ public void stateChanged(ChangeEvent e)\n     }\n   }\n \n-  /** Whether the color change was initiated by the spinners. */\n-  private transient boolean spinnerChange = false;\n+  /** Whether the color change was initiated by the spinners.\n+   * This is package-private to avoid an accessor method.  */\n+  transient boolean spinnerChange = false;\n \n-  /** Whether the color change was initiated by the sliders. */\n-  private transient boolean sliderChange = false;\n+  /** Whether the color change was initiated by the sliders.\n+   * This is package-private to avoid an accessor method.  */\n+  transient boolean sliderChange = false;\n \n   /**\n    * Whether the change was forced by the chooser (meaning the color has\n    * already been changed).\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient boolean updateChange = false;\n+  transient boolean updateChange = false;\n \n   /** The ChangeListener for the sliders. */\n   private transient ChangeListener colorChanger;\n \n   /** The ChangeListener for the spinners. */\n   private transient ChangeListener spinnerHandler;\n \n-  /** The slider that handles the red values. */\n-  private transient JSlider R;\n+  /** The slider that handles the red values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSlider R;\n \n-  /** The slider that handles the green values. */\n-  private transient JSlider G;\n+  /** The slider that handles the green values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSlider G;\n \n-  /** The slider that handles the blue values. */\n-  private transient JSlider B;\n+  /** The slider that handles the blue values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSlider B;\n \n   /** The label for the red slider. */\n   private transient JLabel RLabel;\n@@ -145,14 +151,17 @@ public void stateChanged(ChangeEvent e)\n   /** The label for the blue slider. */\n   private transient JLabel BLabel;\n \n-  /** The spinner that handles the red values. */\n-  private transient JSpinner RSpinner;\n+  /** The spinner that handles the red values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner RSpinner;\n \n-  /** The spinner that handles the green values. */\n-  private transient JSpinner GSpinner;\n+  /** The spinner that handles the green values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner GSpinner;\n \n-  /** The spinner that handles the blue values. */\n-  private transient JSpinner BSpinner;\n+  /** The spinner that handles the blue values.\n+   * This is package-private to avoid an accessor method.  */\n+  transient JSpinner BSpinner;\n \n   /**\n    * Creates a new DefaultRGBChooserPanel object."}, {"sha": "505de95dce6474a72c72de27f930fb8ff62855d8", "filename": "libjava/javax/swing/colorchooser/DefaultSwatchChooserPanel.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultSwatchChooserPanel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultSwatchChooserPanel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fcolorchooser%2FDefaultSwatchChooserPanel.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -501,10 +501,11 @@ private int getIndexForCell(int row, int col)\n \n     /**\n      * This method adds the given color to the beginning of the swatch panel.\n+     * Package-private to avoid an accessor method.\n      *\n      * @param c The color to add.\n      */\n-    private void addColorToQueue(Color c)\n+    void addColorToQueue(Color c)\n     {\n       if (--start == -1)\n \tstart = numRows * numCols - 1;"}, {"sha": "0526961a9c913eaf93f122c76dac064b13185886", "filename": "libjava/javax/swing/plaf/basic/BasicArrowButton.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicArrowButton.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicArrowButton.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicArrowButton.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicArrowButton.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -80,17 +80,22 @@ public class BasicArrowButton extends JButton implements SwingConstants\n   /**\n    * The color the arrow is painted in if disabled and the bottom and right\n    * edges of the button.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient Color shadow = Color.GRAY;\n+  transient Color shadow = Color.GRAY;\n \n   /**\n    * The color the arrow is painted in if enabled and the bottom and right\n    * edges of the button.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient Color darkShadow = Color.DARK_GRAY;\n+  transient Color darkShadow = Color.DARK_GRAY;\n \n-  /** The top and left edges of the button. */\n-  private transient Color highlight = Color.WHITE;\n+  /**\n+   * The top and left edges of the button.\n+   * This is package-private to avoid an accessor method.\n+   */\n+  transient Color highlight = Color.WHITE;\n \n   /** The border around the ArrowButton. */\n   private transient Border buttonBorder = new Border()"}, {"sha": "5b876284c8b0f19a8b7a6cefbd23323900114a3e", "filename": "libjava/javax/swing/plaf/basic/BasicColorChooserUI.java", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicColorChooserUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicColorChooserUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicColorChooserUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicColorChooserUI.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -141,11 +141,14 @@ public void stateChanged(ChangeEvent e)\n   /** The PropertyChangeListener for the JColorChooser. */\n   protected PropertyChangeListener propertyChangeListener;\n \n-  /** The JColorChooser. */\n-  private JColorChooser chooser;\n+  /**\n+   * The JColorChooser.\n+   * This is package-private to avoid an accessor method.\n+   */\n+  JColorChooser chooser;\n \n   /** The JTabbedPane that is used. */\n-  private JTabbedPane pane;\n+  JTabbedPane pane;\n \n   /** The Container that holds the preview panel. */\n   private Container prevContainer;\n@@ -219,10 +222,11 @@ public void stateChanged(ChangeEvent e)\n   /**\n    * This method adds tabs to the JTabbedPane for the chooserPanels defined in\n    * the JColorChooser.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param panels The Panels that need tabs to be made for them.\n    */\n-  private void makeTabs(AbstractColorChooserPanel[] panels)\n+  void makeTabs(AbstractColorChooserPanel[] panels)\n   {\n     pane.removeAll();\n     for (int i = 0; i < panels.length; i++)\n@@ -255,10 +259,11 @@ protected void installPreviewPanel()\n   /**\n    * This is a helper method that swaps the existing preview panel with the\n    * given panel.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param preview The new preview panel.\n    */\n-  private void updatePreviewPanel(JComponent preview)\n+  void updatePreviewPanel(JComponent preview)\n   {\n     if (prevContainer == null)\n       {"}, {"sha": "21998868b0e0543050a440e51d5c396ca0790870", "filename": "libjava/javax/swing/plaf/basic/BasicComboBoxUI.java", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicComboBoxUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicComboBoxUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicComboBoxUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -160,17 +160,22 @@ public class BasicComboBoxUI extends ComboBoxUI\n   private Color highlight;\n   private Color lightHighlight;\n \n-  /* Size of the largest item in the comboBox */\n-  private Dimension largestItemSize;\n+  /* Size of the largest item in the comboBox\n+   * This is package-private to avoid an accessor method.\n+   */\n+  Dimension largestItemSize;\n \n   // It seems that JComboBox doesn't have a border set explicitely. So we just\n   // paint the border everytime combo box is displayed. \n \n-  /* border insets for this JComboBox*/\n-  private static final Insets borderInsets = new Insets(2, 2, 2, 2);\n+  /* border insets for this JComboBox\n+   * This is package-private to avoid an accessor method. */\n+  static final Insets borderInsets = new Insets(2, 2, 2, 2);\n \n   // Width of the arrow button  \n-  private static int arrowButtonWidth = 15;\n+  // This is package-private to avoid an accessor method.\n+  // FIXME: has wrong name for a constant.\n+  static final int arrowButtonWidth = 15;\n \n   // FIXME: This fields aren't used anywhere at this moment.\n   protected Dimension cachedMinimumSize;"}, {"sha": "2a87761eea7b0b4977565536a09fa61ba9791d8b", "filename": "libjava/javax/swing/plaf/basic/BasicDesktopIconUI.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDesktopIconUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDesktopIconUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicDesktopIconUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicDesktopIconUI.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -302,8 +302,9 @@ public void paintIcon(Component c, Graphics g, int x, int y)\n   /** The MouseListener responsible for reacting to MouseEvents on the JDesktopIcon. */\n   private transient MouseInputListener mouseHandler;\n \n-  /** The Button in the JDesktopIcon responsible for deiconifying it. */\n-  private transient BoundButton button;\n+  /** The Button in the JDesktopIcon responsible for deiconifying it.\n+   * This is package-private to avoid an accessor method. */\n+  transient BoundButton button;\n \n   /** The PropertyChangeListener listening to the JDesktopIcon. */\n   private transient PropertyChangeListener propertyHandler;"}, {"sha": "bc81887d7ee4fae2cc7701f0cfa9e3699fafdcb6", "filename": "libjava/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicInternalFrameTitlePane.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicInternalFrameTitlePane.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicInternalFrameTitlePane.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicInternalFrameTitlePane.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -644,8 +644,9 @@ public void paintIcon(Component c, Graphics g, int x, int y)\n   /**\n    * The label used to display the title. This label is not added to the\n    * TitlePane.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient JLabel title;\n+  transient JLabel title;\n \n   /**\n    * Creates a new BasicInternalFrameTitlePane object that is used in the"}, {"sha": "589ec9d4374ab718e590db89fe711da464b373f0", "filename": "libjava/javax/swing/plaf/basic/BasicListUI.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicListUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicListUI.java --\n-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -491,10 +491,11 @@ protected void updateLayoutState()\n   /**\n    * Marks the current layout as damaged and requests revalidation from the\n    * JList.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @see #updateLayoutStateNeeded\n    */\n-  private void damageLayout()\n+  void damageLayout()\n   {\n     updateLayoutStateNeeded = 1;\n     list.revalidate();"}, {"sha": "f86dd75e634beaa1050143b2ab8e750c698708af", "filename": "libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicOptionPaneUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicOptionPaneUI.java --\n-   Copyright (C) 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -439,7 +439,8 @@ else if (e.getPropertyName().equals(JOptionPane.MESSAGE_PROPERTY)\n   protected JOptionPane optionPane;\n \n   /** The size of the icons. */\n-  private static int iconSize = 36;\n+  // FIXME: wrong name for a constant.\n+  private static final int iconSize = 36;\n \n   /** The foreground color for the message area. */\n   private transient Color messageForeground;\n@@ -451,22 +452,28 @@ else if (e.getPropertyName().equals(JOptionPane.MESSAGE_PROPERTY)\n   private transient Border buttonBorder;\n \n   /** The string used to describe OK buttons. */\n-  private static String OK_STRING = \"OK\";\n+  // FIXME: wrong name for a constant.\n+  private static final String OK_STRING = \"OK\";\n \n   /** The string used to describe Yes buttons. */\n-  private static String YES_STRING = \"Yes\";\n+  // FIXME: wrong name for a constant.\n+  private static final String YES_STRING = \"Yes\";\n \n   /** The string used to describe No buttons. */\n-  private static String NO_STRING = \"No\";\n+  // FIXME: wrong name for a constant.\n+  private static final String NO_STRING = \"No\";\n \n   /** The string used to describe Cancel buttons. */\n-  private static String CANCEL_STRING = \"Cancel\";\n+  // FIXME: wrong name for a constant.\n+  private static final String CANCEL_STRING = \"Cancel\";\n \n-  /** The container for the message area. */\n-  private transient Container messageAreaContainer;\n+  /** The container for the message area.\n+   * This is package-private to avoid an accessor method. */\n+  transient Container messageAreaContainer;\n \n-  /** The container for the buttons. */\n-  private transient Container buttonContainer;\n+  /** The container for the buttons.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Container buttonContainer;\n \n   /**\n    * A helper class that implements Icon. This is used temporarily until\n@@ -1227,8 +1234,9 @@ public void selectInitialValue(JOptionPane op)\n   /**\n    * This method resets the value in the inputComponent to the\n    * initialSelectionValue property.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void resetSelectedValue()\n+  void resetSelectedValue()\n   {\n     if (inputComponent != null)\n       {"}, {"sha": "c131c86b1ddabfb4a0d90aa0c966856d04a6aa3f", "filename": "libjava/javax/swing/plaf/basic/BasicPopupMenuUI.java", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPopupMenuUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPopupMenuUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicPopupMenuUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicPopupMenuUI.java\n-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -73,8 +73,9 @@ public class BasicPopupMenuUI extends PopupMenuUI\n   /* PopupMenuListener listens to popup menu events fired by JPopupMenu*/\n   private transient PopupMenuListener popupMenuListener;\n \n-  /* ComponentListener listening to popupMenu's invoker. */\n-  private TopWindowListener topWindowListener;\n+  /* ComponentListener listening to popupMenu's invoker.\n+   * This is package-private to avoid an accessor method.  */\n+  TopWindowListener topWindowListener;\n \n   /**\n    * Creates a new BasicPopupMenuUI object."}, {"sha": "a7de70101dca717174e76927306948f712bd82e9", "filename": "libjava/javax/swing/plaf/basic/BasicScrollBarUI.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicScrollBarUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -645,8 +645,9 @@ protected Dimension getMinimumThumbSize()\n   /**\n    * This method calculates the preferred size since calling\n    * getPreferredSize() returns a cached value.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private void calculatePreferredSize()\n+  void calculatePreferredSize()\n   {\n     // System.err.println(this + \".calculatePreferredSize()\");\n     int height;\n@@ -1248,12 +1249,13 @@ public void uninstallUI(JComponent c)\n    * This method returns the value in the scrollbar's range given the y\n    * coordinate. If the value is out of range, it will return the closest\n    * legal value.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param yPos The y coordinate to calculate a value for.\n    *\n    * @return The value for the y coordinate.\n    */\n-  private int valueForYPosition(int yPos)\n+  int valueForYPosition(int yPos)\n   {\n     int min = scrollbar.getMinimum();\n     int max = scrollbar.getMaximum();\n@@ -1280,12 +1282,13 @@ else if (value < min)\n    * This method returns the value in the scrollbar's range given the x\n    * coordinate. If the value is out of range, it will return the closest\n    * legal value.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param xPos The x coordinate to calculate a value for.\n    *\n    * @return The value for the x coordinate.\n    */\n-  private int valueForXPosition(int xPos)\n+  int valueForXPosition(int xPos)\n   {\n     int min = scrollbar.getMinimum();\n     int max = scrollbar.getMaximum();"}, {"sha": "9879d8ddb96f661d98f34fff1c1c7552e80b6043", "filename": "libjava/javax/swing/plaf/basic/BasicSliderUI.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSliderUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSliderUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSliderUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -2158,12 +2158,13 @@ else if (value < min)\n \n   /**\n    * This method finds the closest value that has a tick associated with it.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param value The value to search from.\n    *\n    * @return The closest value that has a tick associated with it.\n    */\n-  private int findClosestTick(int value)\n+  int findClosestTick(int value)\n   {\n     int min = slider.getMinimum();\n     int max = slider.getMaximum();"}, {"sha": "3b8596e7e2d982aef64b315e08cfb7f6151151d3", "filename": "libjava/javax/swing/plaf/basic/BasicSplitPaneDivider.java", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSplitPaneDivider.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSplitPaneDivider.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicSplitPaneDivider.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1,5 +1,5 @@\n /* BasicSplitPaneDivider.java --\n-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -157,8 +157,9 @@ public class BasicSplitPaneDivider extends Container\n   /**\n    * Keeps track of where the divider should be placed when using one touch\n    * expand buttons.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private transient int currentDividerLocation = 1;\n+  transient int currentDividerLocation = 1;\n \n   /** DOCUMENT ME! */\n   private transient Border tmpBorder = new Border()\n@@ -493,10 +494,11 @@ protected void finishDraggingTo(int location)\n    * using one touch expand buttons. Location 0 is the left (or top) most\n    * location. Location 1 is the middle. Location 2 is the right (or bottom)\n    * most location.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param locationIndex The location to move to.\n    */\n-  private void moveDividerTo(int locationIndex)\n+  void moveDividerTo(int locationIndex)\n   {\n     Insets insets = splitPane.getInsets();\n     switch (locationIndex)"}, {"sha": "aca70498715ff73878304cea30b4418c5659a8ed", "filename": "libjava/javax/swing/plaf/basic/BasicTabbedPaneUI.java", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTabbedPaneUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTabbedPaneUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicTabbedPaneUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -1181,20 +1181,25 @@ public ScrollingButton(int dir)\n     }\n   }\n \n-  /** The button that increments the current scroll location. */\n-  private transient ScrollingButton incrButton;\n+  /** The button that increments the current scroll location.\n+   * This is package-private to avoid an accessor method.  */\n+  transient ScrollingButton incrButton;\n \n-  /** The button that decrements the current scroll location. */\n-  private transient ScrollingButton decrButton;\n+  /** The button that decrements the current scroll location.\n+   * This is package-private to avoid an accessor method.  */\n+  transient ScrollingButton decrButton;\n \n-  /** The viewport used to display the tabs. */\n-  private transient ScrollingViewport viewport;\n+  /** The viewport used to display the tabs.\n+   * This is package-private to avoid an accessor method.  */\n+  transient ScrollingViewport viewport;\n \n-  /** The panel inside the viewport that paints the tabs. */\n-  private transient ScrollingPanel panel;\n+  /** The panel inside the viewport that paints the tabs.\n+   * This is package-private to avoid an accessor method.  */\n+  transient ScrollingPanel panel;\n \n-  /** The starting visible tab in the run in SCROLL_TAB_MODE. */\n-  private transient int currentScrollLocation;\n+  /** The starting visible tab in the run in SCROLL_TAB_MODE.\n+   * This is package-private to avoid an accessor method.  */\n+  transient int currentScrollLocation;\n \n   /** A reusable rectangle. */\n   protected Rectangle calcRect;\n@@ -1305,14 +1310,17 @@ public ScrollingButton(int dir)\n   /** The tab pane that this UI paints. */\n   protected JTabbedPane tabPane;\n \n-  /** The current layout manager for the tabPane. */\n-  private transient LayoutManager layoutManager;\n+  /** The current layout manager for the tabPane.\n+   * This is package-private to avoid an accessor method.  */\n+  transient LayoutManager layoutManager;\n \n-  /** The rectangle that describes the tab area's position and size. */\n-  private transient Rectangle tabAreaRect;\n+  /** The rectangle that describes the tab area's position and size.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Rectangle tabAreaRect;\n \n-  /** The rectangle that describes the content area's position and size. */\n-  private transient Rectangle contentRect;\n+  /** The rectangle that describes the content area's position and\n+   * size.  This is package-private to avoid an accessor method.  */\n+  transient Rectangle contentRect;\n \n   /**\n    * Creates a new BasicTabbedPaneUI object.\n@@ -1325,10 +1333,11 @@ public BasicTabbedPaneUI()\n   /**\n    * This method creates a ScrollingButton that  points in the appropriate\n    * direction for an increasing button.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @return The increase ScrollingButton.\n    */\n-  private ScrollingButton createIncreaseButton()\n+  ScrollingButton createIncreaseButton()\n   {\n     if (incrButton == null)\n       incrButton = new ScrollingButton(SwingConstants.NORTH);\n@@ -1343,10 +1352,11 @@ private ScrollingButton createIncreaseButton()\n   /**\n    * This method creates a ScrollingButton that points in the appropriate\n    * direction for a decreasing button.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @return The decrease ScrollingButton.\n    */\n-  private ScrollingButton createDecreaseButton()\n+  ScrollingButton createDecreaseButton()\n   {\n     if (decrButton == null)\n       decrButton = new ScrollingButton(SwingConstants.SOUTH);\n@@ -1361,12 +1371,13 @@ private ScrollingButton createDecreaseButton()\n   /**\n    * This method finds the point to set the view  position at given the index\n    * of a tab. The tab will be the first visible tab in the run.\n+   * This is package-private to avoid an accessor method.\n    *\n    * @param index The index of the first visible tab.\n    *\n    * @return The position of the first visible tab.\n    */\n-  private Point findPointForIndex(int index)\n+  Point findPointForIndex(int index)\n   {\n     int tabPlacement = tabPane.getTabPlacement();\n     int selectedIndex = tabPane.getSelectedIndex();"}, {"sha": "18477c9dd754ba7453ed66d6d846f9a9c1b33ca7", "filename": "libjava/javax/swing/plaf/basic/BasicToolBarUI.java", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToolBarUI.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToolBarUI.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Fplaf%2Fbasic%2FBasicToolBarUI.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -82,8 +82,9 @@\n  */\n public class BasicToolBarUI extends ToolBarUI implements SwingConstants\n {\n-  /** Static owner of all DragWindows. */\n-  private static JFrame owner = new JFrame();\n+  /** Static owner of all DragWindows.\n+   * This is package-private to avoid an accessor method.  */\n+  static JFrame owner = new JFrame();\n \n   /** The border used when the JToolBar is in nonrollover mode. */\n   private static Border nonRolloverBorder;\n@@ -94,8 +95,9 @@ public class BasicToolBarUI extends ToolBarUI implements SwingConstants\n   /** The last known BorderLayout constraint before floating. */\n   protected String constraintBeforeFloating;\n \n-  /** The last known orientation of the JToolBar before floating. */\n-  private int lastGoodOrientation;\n+  /** The last known orientation of the JToolBar before floating.\n+   * This is package-private to avoid an accessor method.  */\n+  int lastGoodOrientation;\n \n   /** The color of the border when it is dockable. */\n   protected Color dockingBorderColor;\n@@ -136,20 +138,24 @@ public class BasicToolBarUI extends ToolBarUI implements SwingConstants\n    */\n   private transient Window floatFrame;\n \n-  /** The original parent of the JToolBar. */\n-  private transient Container origParent;\n+  /** The original parent of the JToolBar.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Container origParent;\n \n-  /** A hashtable of components and their original borders. */\n-  private transient Hashtable borders;\n+  /** A hashtable of components and their original borders.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Hashtable borders;\n \n   /** A window listener for the floatable frame. */\n   private transient WindowListener windowListener;\n \n-  /** A set of cached bounds of the JToolBar. */\n-  private transient Dimension cachedBounds;\n+  /** A set of cached bounds of the JToolBar.\n+   * This is package-private to avoid an accessor method.  */\n+  transient Dimension cachedBounds;\n \n-  /** The cached orientation of the JToolBar. */\n-  private transient int cachedOrientation;\n+  /** The cached orientation of the JToolBar.\n+   * This is package-private to avoid an accessor method.  */\n+  transient int cachedOrientation;\n \n   /**\n    * This method creates a new <code>BasicToolBarUI</code> object for the given JToolBar.\n@@ -1086,8 +1092,9 @@ protected class DragWindow extends Window\n \n     /**\n      * Creates a new DragWindow object.\n+     * This is package-private to avoid an accessor method.\n      */\n-    private DragWindow()\n+    DragWindow()\n     {\n       super(owner);\n     }"}, {"sha": "6b464b5def03b310b38e1ec5d0f8f9fa90781011", "filename": "libjava/javax/swing/text/JTextComponent.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FJTextComponent.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -883,7 +883,8 @@ public Action[] getActions()\n     return getUI().getEditorKit(this).getActions();\n   }\n     \n-  private Document doc;\n+  // This is package-private to avoid an accessor method.\n+  Document doc;\n   private Caret caret;\n   private Highlighter highlighter;\n   private Color caretColor;"}, {"sha": "c0e688a8dcf9210749e9409423fe92a6632c59d0", "filename": "libjava/javax/swing/text/StringContent.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2FStringContent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2FStringContent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2FStringContent.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -56,7 +56,8 @@\n  */\n public final class StringContent implements AbstractDocument.Content, Serializable\n {\n-  private char[] content;\n+  // This is package-private to avoid an accessor method.\n+  char[] content;\n \n   private int count;\n \n@@ -156,7 +157,8 @@ public StickyPosition(int offset)\n       this.offset = offset;\n     }\n \n-    private void setOffset(int offset)\n+    // This is package-private to avoid an accessor method.\n+    void setOffset(int offset)\n     {\n       this.offset = this.offset >= 0 ? offset : -1;\n     }\n@@ -290,7 +292,8 @@ public void getChars(int where, int len, Segment txt) throws BadLocationExceptio\n       }\n   }\n \n-  private void checkLocation(int where, int len) throws BadLocationException\n+  // This is package-private to avoid an accessor method.\n+  void checkLocation(int where, int len) throws BadLocationException\n   {\n     if (where < 0)\n       throw new BadLocationException(\"Invalid location\", 1);"}, {"sha": "f210d4f8804549c4bbc70be98e3f2c27d1bdc65a", "filename": "libjava/javax/swing/text/html/parser/DocumentParser.java", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FDocumentParser.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -144,19 +144,22 @@ DTD getDTD()\n   /**\n    * This field is used to access the identically named\n    * methods of the outer class.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private DocumentParser parser = this;\n+  DocumentParser parser = this;\n \n   /**\n    * The callback.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private HTMLEditorKit.ParserCallback callBack;\n+  HTMLEditorKit.ParserCallback callBack;\n \n   /**\n    * The reference to the working class of HTML parser that is\n    * actually used to parse the document.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private gnuParser gnu;\n+  gnuParser gnu;\n \n   /**\n    * Creates a new parser that uses the given DTD to access data on the"}, {"sha": "30f77ca7c670d0d700b1fcf9960bf1cd435c2d83", "filename": "libjava/javax/swing/text/html/parser/ParserDelegator.java", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2705487a7ef408a74cb31e729a962cacce39749d/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2Ftext%2Fhtml%2Fparser%2FParserDelegator.java?ref=2705487a7ef408a74cb31e729a962cacce39749d", "patch": "@@ -126,14 +126,16 @@ DTD getDTD()\n \n   /**\n    * The callback.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private HTMLEditorKit.ParserCallback callBack;\n+  HTMLEditorKit.ParserCallback callBack;\n \n   /**\n    * The reference to the working class of HTML parser that is\n    * actually used to parse the document.\n+   * This is package-private to avoid an accessor method.\n    */\n-  private gnuParser gnu;\n+  gnuParser gnu;\n \n   /**\n    * Parses the HTML document, calling methods of the provided"}]}