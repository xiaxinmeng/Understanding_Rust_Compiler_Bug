{"sha": "144499abeb7161ac622f294de3736ed5a3a1d99c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ0NDk5YWJlYjcxNjFhYzYyMmYyOTRkZTM3MzZlZDVhM2ExZDk5Yw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-21T17:38:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-08-21T17:38:33Z"}, "message": "(bcopy, bzero, bcmp): Remove #if VMS code--always use inline C loops.\n\nFrom-SVN: r1927", "tree": {"sha": "390d6b3809fb59997161f6bfe9a66e3f672a6b17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/390d6b3809fb59997161f6bfe9a66e3f672a6b17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/144499abeb7161ac622f294de3736ed5a3a1d99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144499abeb7161ac622f294de3736ed5a3a1d99c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/144499abeb7161ac622f294de3736ed5a3a1d99c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/144499abeb7161ac622f294de3736ed5a3a1d99c/comments", "author": null, "committer": null, "parents": [{"sha": "eeb43d32dbbddfdbccc863f6194093b64eef0f51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeb43d32dbbddfdbccc863f6194093b64eef0f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeb43d32dbbddfdbccc863f6194093b64eef0f51"}], "stats": {"total": 31, "additions": 0, "deletions": 31}, "files": [{"sha": "084af358a60c7c28c3ff0fca8d80b5e31a3c4472", "filename": "gcc/cccp.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/144499abeb7161ac622f294de3736ed5a3a1d99c/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/144499abeb7161ac622f294de3736ed5a3a1d99c/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=144499abeb7161ac622f294de3736ed5a3a1d99c", "patch": "@@ -8429,20 +8429,8 @@ bzero (b, length)\n      register char *b;\n      register unsigned length;\n {\n-#ifdef VMS\n-  short zero = 0;\n-  long max_str = 65535;\n-\n-  while (length > max_str) {\n-    (void) LIB$MOVC5 (&zero, &zero, &zero, &max_str, b);\n-    length -= max_str;\n-    b += max_str;\n-  }\n-  (void) LIB$MOVC5 (&zero, &zero, &zero, &length, b);\n-#else\n   while (length-- > 0)\n     *b++ = 0;\n-#endif /* not VMS */\n }\n \n void\n@@ -8451,20 +8439,8 @@ bcopy (b1, b2, length)\n      register char *b2;\n      register unsigned length;\n {\n-#ifdef VMS\n-  long max_str = 65535;\n-\n-  while (length > max_str) {\n-    (void) LIB$MOVC3 (&max_str, b1, b2);\n-    length -= max_str;\n-    b1 += max_str;\n-    b2 += max_str;\n-  }\n-  (void) LIB$MOVC3 (&length, b1, b2);\n-#else\n   while (length-- > 0)\n     *b2++ = *b1++;\n-#endif /* not VMS */\n }\n \n int\n@@ -8473,18 +8449,11 @@ bcmp (b1, b2, length)\t/* This could be a macro! */\n      register char *b2;\n      register unsigned length;\n {\n-#ifdef VMS\n-   struct dsc$descriptor_s src1 = {length, DSC$K_DTYPE_T, DSC$K_CLASS_S, b1};\n-   struct dsc$descriptor_s src2 = {length, DSC$K_DTYPE_T, DSC$K_CLASS_S, b2};\n-\n-   return STR$COMPARE (&src1, &src2);\n-#else\n    while (length-- > 0)\n      if (*b1++ != *b2++)\n        return 1;\n \n    return 0;\n-#endif /* not VMS */\n }\n #endif /* not BSTRING */\n #endif /* USG or VMS */"}]}