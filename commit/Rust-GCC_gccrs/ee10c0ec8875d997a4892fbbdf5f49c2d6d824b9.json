{"sha": "ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUxMGMwZWM4ODc1ZDk5N2E0ODkyZmJiZGY1ZjQ5YzJkNmQ4MjRiOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-17T06:40:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-17T06:40:45Z"}, "message": "gnat_rm.texi: Improve documentation of Unrestricted_Access.\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Improve documentation of Unrestricted_Access.\n\t* sinfo.ads: Document restriction on aggregates (must expand to\n\tassignments if one or more assignments needs expansion, e.g. for\n\tcontrolled types).\n\t* sem_ch13.adb: All warning messages regarding bit order should\n\tbe info: messages.\n\t* gnat_ugn.texi: Minor correction of missing @ on @code\n\n2014-07-17  Robert Dewar  <dewar@adacore.com>\n\n\t* restrict.ads (Implementation_Restriction): Add No_Long_Long_Integer.\n\t* s-rident.ads (Partition_Boolean_Restrictions): Add\n\tNo_Long_Long_Integer.\n\t* sem_ch3.adb (Modular_Type_Declaration): Size must be <=\n\tLong_Integer'Size if restriction No_Long_Long_Integer is active.\n\t(Signed_Integer_Type_Declaration): Do not allow Long_Long_Integer\n\tas the implicit base type for a signed integer type declaration\n\tif restriction No_Long_Long_Integer is active.\n\t* sem_util.ads, sem_util.adb (Set_Entity_With_Checks): Include check for\n\tNo_Long_Long_Integer.\n\nFrom-SVN: r212727", "tree": {"sha": "5ecbd6f1520903984be7143b54d55a2e4673f85a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5ecbd6f1520903984be7143b54d55a2e4673f85a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/comments", "author": null, "committer": null, "parents": [{"sha": "e80f0cb0b4c0313379c872ef4a8777313c809799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e80f0cb0b4c0313379c872ef4a8777313c809799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e80f0cb0b4c0313379c872ef4a8777313c809799"}], "stats": {"total": 131, "additions": 109, "deletions": 22}, "files": [{"sha": "f70dcf8e8f0b14b254b6f2d95993f3b160e9549f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -1,3 +1,26 @@\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Improve documentation of Unrestricted_Access.\n+\t* sinfo.ads: Document restriction on aggregates (must expand to\n+\tassignments if one or more assignments needs expansion, e.g. for\n+\tcontrolled types).\n+\t* sem_ch13.adb: All warning messages regarding bit order should\n+\tbe info: messages.\n+\t* gnat_ugn.texi: Minor correction of missing @ on @code\n+\n+2014-07-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* restrict.ads (Implementation_Restriction): Add No_Long_Long_Integer.\n+\t* s-rident.ads (Partition_Boolean_Restrictions): Add\n+\tNo_Long_Long_Integer.\n+\t* sem_ch3.adb (Modular_Type_Declaration): Size must be <=\n+\tLong_Integer'Size if restriction No_Long_Long_Integer is active.\n+\t(Signed_Integer_Type_Declaration): Do not allow Long_Long_Integer\n+\tas the implicit base type for a signed integer type declaration\n+\tif restriction No_Long_Long_Integer is active.\n+\t* sem_util.ads, sem_util.adb (Set_Entity_With_Checks): Include check for\n+\tNo_Long_Long_Integer.\n+\n 2014-07-17  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, a-ztexio.ads, exp_imgv.adb, casing.adb, casing.ads,"}, {"sha": "05b3cb44fe113ee8487a5696bc89be9fddd476e9", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -9672,6 +9672,41 @@ unconstrained array.  The use of thin pointers should be restricted to\n cases of porting legacy code which implicitly assumes the size of pointers,\n and such code should not in any case be using this attribute.\n \n+Another erroroneous situation arises if the attribute is\n+applied to a constant. The resulting pointer can be used to access the\n+constant, but the effect of trying to modify a constant in this manner\n+is not well-defined. Consider this example:\n+\n+@smallexample @c ada\n+P : constant Integer := 4;\n+type R is access all Integer;\n+RV : R := P'Unrestricted_Access;\n+..\n+RV.all := 3;\n+@end smallexample\n+\n+@noindent\n+Here we attempt to modify the constant P from 4 to 3, but the compiler may\n+or may not notice this attempt, and subsequent references to P may yield\n+either the value 3 or the value 4 or the assignment may blow up if the\n+compiler decides to put P in read-only memory. One particular case where\n+@code{Unrestricted_Access} can be used in this way is to modify the\n+value of an @code{IN} parameter:\n+\n+@smallexample @c ada\n+procedure K (S : in String) is\n+   type R is access all Character;\n+   RV : R := S (3)'Unrestricted_Access;\n+begin\n+   RV.all := 'a';\n+end;\n+@end smallexample\n+\n+@noindent\n+In general this is a risky approach. It may appear to \"work\" but such uses of\n+@code{Unrestricted_Access} are potentially non-portable, even from one version\n+of @code{GNAT} to another, so are best avoided if possible.\n+\n @node Attribute Update\n @unnumberedsec Attribute Update\n @findex Update"}, {"sha": "501b576caf0e2883129c4e9715d9ab4a519d8e7c", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -6827,7 +6827,7 @@ the Ada standard, the additional implementation defined checks\n @code{Alignment_Check},\n @code{Duplicated_Tag_Check}, @code{Predicate_Check}, and\n @code{Validity_Check}, as well as any checks introduced using\n-@code{pragma Check_Name}. Note that code{Atomic_Synchronization}\n+@code{pragma Check_Name}. Note that @code{Atomic_Synchronization}\n is not automatically suppressed by use of this option.\n \n If the code depends on certain checks being active, you can use"}, {"sha": "ef5c2c727cfa47260670cd54e8dc2566e84e3003", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -72,7 +72,7 @@ package Restrict is\n    --  restriction to the binder.\n \n    --  The following declarations establish a mapping between restriction\n-   --  identifiers, and the names of corresponding restriction library units.\n+   --  identifiers, and the names of corresponding restricted library units.\n \n    type Unit_Entry is record\n       Res_Id : Restriction_Id;\n@@ -129,6 +129,7 @@ package Restrict is\n       No_Implicit_Loops                  => True,\n       No_Initialize_Scalars              => True,\n       No_Local_Protected_Objects         => True,\n+      No_Long_Long_Integer               => True,\n       No_Protected_Type_Allocators       => True,\n       No_Relative_Delay                  => True,\n       No_Requeue_Statements              => True,"}, {"sha": "181530d117b8c8b37782c4ba5d81d4868a9126c6", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -124,6 +124,7 @@ package System.Rident is\n       No_Local_Allocators,                       -- (RM H.4(8))\n       No_Local_Timing_Events,                    -- (RM D.7(10.2/2))\n       No_Local_Protected_Objects,                -- Ada 2012 (D.7(10/1.3))\n+      No_Long_Long_Integer,                      -- GNAT\n       No_Nested_Finalization,                    -- (RM D.7(4))\n       No_Protected_Type_Allocators,              -- Ada 2012 (D.7 (10.3/2))\n       No_Protected_Types,                        -- (RM H.4(5))"}, {"sha": "da4252d6794456e786e152645f26886f4e08b6ee", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -302,17 +302,17 @@ package body Sem_Ch13 is\n                        and then CSZ mod System_Storage_Unit = 0\n                      then\n                         Error_Msg_N\n-                          (\"multi-byte field specified with non-standard\"\n-                           & \" Bit_Order??\", CLC);\n+                          (\"info: multi-byte field specified with \"\n+                           & \"non-standard Bit_Order?V?\", CLC);\n \n                         if Bytes_Big_Endian then\n                            Error_Msg_N\n-                             (\"bytes are not reversed \"\n-                              & \"(component is big-endian)??\", CLC);\n+                             (\"\\bytes are not reversed \"\n+                              & \"(component is big-endian)?V?\", CLC);\n                         else\n                            Error_Msg_N\n-                             (\"bytes are not reversed \"\n-                              & \"(component is little-endian)??\", CLC);\n+                             (\"\\bytes are not reversed \"\n+                              & \"(component is little-endian)?V?\", CLC);\n                         end if;\n \n                         --  Do not allow non-contiguous field\n@@ -338,13 +338,13 @@ package body Sem_Ch13 is\n                        and then Warn_On_Reverse_Bit_Order\n                      then\n                         Error_Msg_N\n-                          (\"Bit_Order clause does not affect \" &\n+                          (\"info: Bit_Order clause does not affect \" &\n                            \"byte ordering?V?\", Pos);\n                         Error_Msg_Uint_1 :=\n                           Intval (Pos) + Intval (FB) /\n                           System_Storage_Unit;\n                         Error_Msg_N\n-                          (\"position normalized to ^ before bit \" &\n+                          (\"info: position normalized to ^ before bit \" &\n                            \"order interpreted?V?\", Pos);\n                      end if;\n \n@@ -431,7 +431,7 @@ package body Sem_Ch13 is\n \n                            if Warn_On_Reverse_Bit_Order then\n                               Error_Msg_N\n-                                (\"multi-byte field specified with \"\n+                                (\"info: multi-byte field specified with \"\n                                  & \"  non-standard Bit_Order?V?\", CC);\n \n                               if Bytes_Big_Endian then\n@@ -661,14 +661,12 @@ package body Sem_Ch13 is\n \n                            if Bytes_Big_Endian then\n                               Error_Msg_NE\n-                                (\"\\big-endian range for \"\n-                                 & \"component & is ^ .. ^?V?\",\n-                                 First_Bit (CC), Comp);\n+                                (\"\\big-endian range for component \"\n+                                 & \"& is ^ .. ^?V?\", First_Bit (CC), Comp);\n                            else\n                               Error_Msg_NE\n-                                (\"\\little-endian range \"\n-                                 & \"for component & is ^ .. ^?V?\",\n-                                 First_Bit (CC), Comp);\n+                                (\"\\little-endian range for component\"\n+                                 & \"& is ^ .. ^?V?\", First_Bit (CC), Comp);\n                            end if;\n                         end if;\n "}, {"sha": "8c6747261241598f75b5d6f4b1a2ee5cbd612727", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -17445,6 +17445,10 @@ package body Sem_Ch3 is\n          M_Val := 2 ** System_Max_Binary_Modulus_Power;\n       end if;\n \n+      if M_Val > 2 ** Standard_Long_Integer_Size then\n+         Check_Restriction (No_Long_Long_Integer, Mod_Expr);\n+      end if;\n+\n       Set_Modulus (T, M_Val);\n \n       --   Create bounds for the modular type based on the modulus given in\n@@ -20622,6 +20626,7 @@ package body Sem_Ch3 is\n             Base_Typ := Base_Type (Standard_Long_Integer);\n \n          elsif Can_Derive_From (Standard_Long_Long_Integer) then\n+            Check_Restriction (No_Long_Long_Integer, Def);\n             Base_Typ := Base_Type (Standard_Long_Long_Integer);\n \n          else"}, {"sha": "d85e903419cad220d72973d062ede30683472acf", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -15980,6 +15980,10 @@ package body Sem_Util is\n          Check_Restriction (No_Abort_Statements, Post_Node);\n       end if;\n \n+      if Val = Standard_Long_Long_Integer then\n+         Check_Restriction (No_Long_Long_Integer, Post_Node);\n+      end if;\n+\n       --  Check for violation of No_Dynamic_Attachment\n \n       if Restriction_Check_Required (No_Dynamic_Attachment)"}, {"sha": "efaa63cac0c3f7e597c7c81efddd15fa0003527c", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -1796,6 +1796,9 @@ package Sem_Util is\n    --    If restriction No_Dynamic_Attachment is set, then it checks that the\n    --    entity is not one of the restricted names for this restriction.\n    --\n+   --    If restriction No_Long_Long_Integer is set, then it checks that the\n+   --    entity is not Standard.Long_Long_Integer.\n+   --\n    --    If restriction No_Implementation_Identifiers is set, then it checks\n    --    that the entity is not implementation defined.\n "}, {"sha": "4bb9d4f34fec132be647c478162bc042d7f3571f", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=ee10c0ec8875d997a4892fbbdf5f49c2d6d824b9", "patch": "@@ -3627,6 +3627,16 @@ package Sinfo is\n       --  references a subprogram that is a renaming, then the front end must\n       --  rewrite the attribute to refer directly to the renamed entity.\n \n+      --  Note: syntactically the prefix of an attribute reference must be a\n+      --  name, and this (somewhat artificial) requirement is enforced by the\n+      --  parser. However, for many attributes, such as 'Valid, it is quite\n+      --  reasonable to apply the attribute to any value, and hence to any\n+      --  expression. Internally in the tree, the prefix is an expression which\n+      --  does not have to be a name, and this is handled fine by the semantic\n+      --  analysis and expansion, and back ends. This arises for the case of\n+      --  attribute references built by the expander (e.g. 'Valid for the case\n+      --  of an implicit validity check).\n+\n       --  Note: In generated code, the Address and Unrestricted_Access\n       --  attributes can be applied to any expression, and the meaning is\n       --  to create an object containing the value (the object is in the\n@@ -3638,7 +3648,7 @@ package Sinfo is\n \n       --  N_Attribute_Reference\n       --  Sloc points to apostrophe\n-      --  Prefix (Node3)\n+      --  Prefix (Node3) (general expression, see note above)\n       --  Attribute_Name (Name2) identifier name from attribute designator\n       --  Expressions (List1) (set to No_List if no associated expressions)\n       --  Entity (Node4-Sem) used if the attribute yields a type\n@@ -3731,11 +3741,18 @@ package Sinfo is\n       --  are not met, then the front end must translate the aggregate into\n       --  an appropriate set of assignments into a temporary.\n \n-      --  Note: for the record aggregate case, gigi/gcc can handle all cases of\n-      --  record aggregates, including those for packed, and rep-claused\n+      --  Note: for the record aggregate case, gigi/gcc can handle most cases\n+      --  of record aggregates, including those for packed, and rep-claused\n       --  records, and also variant records, providing that there are no\n-      --  variable length fields whose size is not known at compile time, and\n-      --  providing that the aggregate is presented in fully named form.\n+      --  variable length fields whose size is not known at compile time,\n+      --  and providing that the aggregate is presented in fully named form.\n+\n+      --  The other situation in which array aggregates and record aggregates\n+      --  cannot be passed to the back end is if assignment to one or more\n+      --  components itself needs expansion, e.g. in the case of an assignment\n+      --  of an object of a controlled type. In such cases, the front end\n+      --  must expand the aggregate to a series of assignments, and apply\n+      --  the required expansion to the individual assignment statements.\n \n       ----------------------------------------------\n       -- 4.3.1  Record Component Association List --"}]}