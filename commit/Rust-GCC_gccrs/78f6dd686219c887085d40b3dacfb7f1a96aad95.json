{"sha": "78f6dd686219c887085d40b3dacfb7f1a96aad95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhmNmRkNjg2MjE5Yzg4NzA4NWQ0MGIzZGFjZmI3ZjFhOTZhYWQ5NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-08-06T09:22:16Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-08-06T09:22:16Z"}, "message": "re PR middle-end/58041 (Unaligned access to arrays in packed structure)\n\n2013-08-06  Martin Jambor  <mjambor@suse.cz>\n\n\tPR middle-end/58041\n\t* gimple-ssa-strength-reduction.c (replace_ref): Make sure built\n\tMEM_REF has proper alignment information.\n\ntestsuite/\n\t* gcc.dg/torture/pr58041.c: New test.\n\t* gcc.target/arm/pr58041.c: Likewise.\n\nFrom-SVN: r201523", "tree": {"sha": "730d33490774e04b2abb023fd8b3dd4ca868bf3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/730d33490774e04b2abb023fd8b3dd4ca868bf3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78f6dd686219c887085d40b3dacfb7f1a96aad95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f6dd686219c887085d40b3dacfb7f1a96aad95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78f6dd686219c887085d40b3dacfb7f1a96aad95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78f6dd686219c887085d40b3dacfb7f1a96aad95/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a3d4b3d7dba285bd194463dee6ab6d1e522f53bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3d4b3d7dba285bd194463dee6ab6d1e522f53bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3d4b3d7dba285bd194463dee6ab6d1e522f53bc"}], "stats": {"total": 99, "additions": 94, "deletions": 5}, "files": [{"sha": "6274c8bd56453af65c8b051df9cf1870d41dd1e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78f6dd686219c887085d40b3dacfb7f1a96aad95", "patch": "@@ -1,3 +1,9 @@\n+2013-08-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/58041\n+\t* gimple-ssa-strength-reduction.c (replace_ref): Make sure built\n+\tMEM_REF has proper alignment information.\n+\n 2013-08-05  Oleg Endo <olegendo@gcc.gnu.org>\n \n \tPR other/12081"}, {"sha": "e85e6293db412ec7e12fd0064333d6670c814a4b", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=78f6dd686219c887085d40b3dacfb7f1a96aad95", "patch": "@@ -1728,11 +1728,23 @@ dump_incr_vec (void)\n static void\n replace_ref (tree *expr, slsr_cand_t c)\n {\n-  tree add_expr = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (c->base_expr),\n-\t\t\t       c->base_expr, c->stride);\n-  tree mem_ref = fold_build2 (MEM_REF, TREE_TYPE (*expr), add_expr,\n-\t\t\t      double_int_to_tree (c->cand_type, c->index));\n-  \n+  tree add_expr, mem_ref, acc_type = TREE_TYPE (*expr);\n+  unsigned HOST_WIDE_INT misalign;\n+  unsigned align;\n+\n+  /* Ensure the memory reference carries the minimum alignment\n+     requirement for the data type.  See PR58041.  */\n+  get_object_alignment_1 (*expr, &align, &misalign);\n+  if (misalign != 0)\n+    align = (misalign & -misalign);\n+  if (align < TYPE_ALIGN (acc_type))\n+    acc_type = build_aligned_type (acc_type, align);\n+\n+  add_expr = fold_build2 (POINTER_PLUS_EXPR, TREE_TYPE (c->base_expr),\n+\t\t\t  c->base_expr, c->stride);\n+  mem_ref = fold_build2 (MEM_REF, acc_type, add_expr,\n+\t\t\t double_int_to_tree (c->cand_type, c->index));\n+\n   /* Gimplify the base addressing expression for the new MEM_REF tree.  */\n   gimple_stmt_iterator gsi = gsi_for_stmt (c->cand_stmt);\n   TREE_OPERAND (mem_ref, 0)"}, {"sha": "790c5568cdc23df765bd3539e4190b5348f54667", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=78f6dd686219c887085d40b3dacfb7f1a96aad95", "patch": "@@ -1,3 +1,9 @@\n+2013-08-06  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR middle-end/58041\n+\t* gcc.dg/torture/pr58041.c: New test.\n+\t* gcc.target/arm/pr58041.c: Likewise.\n+\n 2013-08-06  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/57306"}, {"sha": "e22ec3c86ab2dba2434a75854d34ea16b91817cb", "filename": "gcc/testsuite/gcc.dg/torture/pr58041.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58041.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58041.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr58041.c?ref=78f6dd686219c887085d40b3dacfb7f1a96aad95", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do run } */\n+\n+typedef long long V\n+  __attribute__ ((vector_size (2 * sizeof (long long)), may_alias));\n+\n+typedef struct S { V v; } P __attribute__((aligned (1)));\n+\n+struct s\n+{\n+  char u;\n+  V v[2];\n+} __attribute__((packed,aligned(1)));\n+\n+__attribute__((noinline, noclone))\n+long long foo(struct s *x, int y, V z)\n+{\n+  V a = x->v[y];\n+  x->v[y] = z;\n+  return a[1];\n+}\n+\n+struct s a = {0,{0,0}};\n+int main()\n+{\n+  V v1 = {0,1};\n+  V v2 = {0,2};\n+\n+  if (foo(&a,0,v1) != 0)\n+    __builtin_abort();\n+  if (foo(&a,0,v2) != 1)\n+    __builtin_abort();\n+  if (foo(&a,1,v1) != 0)\n+    __builtin_abort();\n+  return 0;\n+}"}, {"sha": "481a72b81c786ab532fc21b7e51598a7109b8e6c", "filename": "gcc/testsuite/gcc.target/arm/pr58041.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr58041.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78f6dd686219c887085d40b3dacfb7f1a96aad95/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr58041.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr58041.c?ref=78f6dd686219c887085d40b3dacfb7f1a96aad95", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -mno-unaligned-access\" } */\n+/* { dg-final { scan-assembler \"ldrb\" } } */\n+/* { dg-final { scan-assembler \"strb\" } } */\n+\n+struct s\n+{\n+  char u;\n+  long long v[2];\n+} __attribute__((packed,aligned(1)));\n+\n+__attribute__((noinline, noclone))\n+long long foo(struct s *x, int y, long long z)\n+{\n+  long long a = x->v[y];\n+  x->v[y] = z;\n+  return a;\n+}\n+\n+struct s a = {0,{0,0}};\n+int main()\n+{\n+  if (foo(&a,0,1) != 0)\n+    __builtin_abort();\n+  if (foo(&a,0,2) != 1)\n+    __builtin_abort();\n+  if (foo(&a,1,1) != 0)\n+    __builtin_abort();\n+  return 0;\n+}"}]}