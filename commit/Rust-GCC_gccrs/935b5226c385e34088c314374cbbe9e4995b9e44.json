{"sha": "935b5226c385e34088c314374cbbe9e4995b9e44", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM1YjUyMjZjMzg1ZTM0MDg4YzMxNDM3NGNiYmU5ZTQ5OTViOWU0NA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2017-06-28T07:03:35Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2017-06-28T07:03:35Z"}, "message": "S/390: New option -mpic-data-is-text-relative\n\nFor hotpatching it might be required to introduce new .text parts\nwhile keep using the existing .data/.bss sections.  To make this work\nthe backend needs to be prevented from using relative addressing\nbetween code and data.\nThis only works when already building PIC\nsince the addressing will then be handling via GOT.\n\ngcc/testsuite/ChangeLog:\n\n2017-06-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* gcc.target/s390/nodatarel-1.c: New test.\n\ngcc/ChangeLog:\n\n2017-06-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n\n\t* config/s390/predicates.md: Use s390_rel_address_ok_p.\n\t* config/s390/s390-protos.h: Add prototype of\n\ts390_rel_address_ok_p.\n\t* config/s390/s390.c (s390_got_symbol): New function.\n\t(s390_rel_address_ok_p): New function.\n\t(legitimize_pic_address): Use s390_rel_address_ok_p.\n\t(s390_load_got): Use s390_got_symbol.\n\t(s390_option_override): Issue error if\n\t-mno-pic-data-is-text-relative is used without -fpic/-fPIC.\n\t* config/s390/s390.h (TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE):\n\tNew macro.\n\t* config/s390/s390.opt: New option mpic-data-is-text-relative.\n\nFrom-SVN: r249720", "tree": {"sha": "23d3790403d00862b7e13222615a0f27eeb982cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23d3790403d00862b7e13222615a0f27eeb982cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/935b5226c385e34088c314374cbbe9e4995b9e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935b5226c385e34088c314374cbbe9e4995b9e44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/935b5226c385e34088c314374cbbe9e4995b9e44", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/935b5226c385e34088c314374cbbe9e4995b9e44/comments", "author": null, "committer": null, "parents": [{"sha": "8801653208ef13e4762d907971e3a6b83a8e721e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8801653208ef13e4762d907971e3a6b83a8e721e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8801653208ef13e4762d907971e3a6b83a8e721e"}], "stats": {"total": 173, "additions": 159, "deletions": 14}, "files": [{"sha": "48c81b3a9c2317fc2973666e8064a7b5b6785d90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -1,3 +1,18 @@\n+2017-06-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* config/s390/predicates.md: Use s390_rel_address_ok_p.\n+\t* config/s390/s390-protos.h: Add prototype of\n+\ts390_rel_address_ok_p.\n+\t* config/s390/s390.c (s390_got_symbol): New function.\n+\t(s390_rel_address_ok_p): New function.\n+\t(legitimize_pic_address): Use s390_rel_address_ok_p.\n+\t(s390_load_got): Use s390_got_symbol.\n+\t(s390_option_override): Issue error if\n+\t-mno-pic-data-is-text-relative is used without -fpic/-fPIC.\n+\t* config/s390/s390.h (TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE):\n+\tNew macro.\n+\t* config/s390/s390.opt: New option mpic-data-is-text-relative.\n+\n 2017-06-27  Andrew Pinski  <apinski@cavium.com>\n \n \t* match.pd (X >/>=/</<= 0 ? 1.0 : -1.0): New patterns."}, {"sha": "fc151ac1d2800e240f604851fe0d8b690a0124c4", "filename": "gcc/config/s390/predicates.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fpredicates.md?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -131,10 +131,10 @@\n   /* Allow labels and local symbols.  */\n   if (GET_CODE (op) == LABEL_REF)\n     return true;\n-  if (GET_CODE (op) == SYMBOL_REF)\n+  if (SYMBOL_REF_P (op))\n     return (!SYMBOL_FLAG_NOTALIGN2_P (op)\n \t    && SYMBOL_REF_TLS_MODEL (op) == 0\n-\t    && (!flag_pic || SYMBOL_REF_LOCAL_P (op)));\n+\t    && s390_rel_address_ok_p (op));\n \n   /* Everything else must have a CONST, so strip it.  */\n   if (GET_CODE (op) != CONST)\n@@ -156,10 +156,11 @@\n   /* Labels and local symbols allowed here as well.  */\n   if (GET_CODE (op) == LABEL_REF)\n     return true;\n-  if (GET_CODE (op) == SYMBOL_REF)\n+  if (SYMBOL_REF_P (op))\n     return (!SYMBOL_FLAG_NOTALIGN2_P (op)\n \t    && SYMBOL_REF_TLS_MODEL (op) == 0\n-\t    && (!flag_pic || SYMBOL_REF_LOCAL_P (op)));\n+\t    && s390_rel_address_ok_p (op));\n+\n \n   /* Now we must have a @GOTENT offset or @PLT stub\n      or an @INDNTPOFF TLS offset.  */"}, {"sha": "6df37ef9bf7b385987c153917c1a5e35b712f189", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -79,6 +79,7 @@ extern bool s390_bytemask_vector_p (rtx, unsigned *);\n extern bool s390_split_ok_p (rtx, rtx, machine_mode, int);\n extern bool s390_overlap_p (rtx, rtx, HOST_WIDE_INT);\n extern bool s390_offset_p (rtx, rtx, rtx);\n+extern bool s390_rel_address_ok_p (rtx);\n extern int tls_symbolic_operand (rtx);\n \n extern bool s390_match_ccmode (rtx_insn *, machine_mode);"}, {"sha": "bfc38db58f4ec812906bf1e719a074ef26db0fca", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -1179,6 +1179,23 @@ s390_label_align (rtx_insn *label)\n   return align_labels_log;\n }\n \n+static GTY(()) rtx got_symbol;\n+\n+/* Return the GOT table symbol.  The symbol will be created when the\n+   function is invoked for the first time.  */\n+\n+static rtx\n+s390_got_symbol (void)\n+{\n+  if (!got_symbol)\n+    {\n+      got_symbol = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n+      SYMBOL_REF_FLAGS (got_symbol) = SYMBOL_FLAG_LOCAL;\n+    }\n+\n+  return got_symbol;\n+}\n+\n static machine_mode\n s390_libgcc_cmp_return_mode (void)\n {\n@@ -4496,6 +4513,26 @@ s390_load_address (rtx dst, rtx src)\n     emit_insn (gen_force_la_31 (dst, src));\n }\n \n+/* Return true if it ok to use SYMBOL_REF in a relative address.  */\n+\n+bool\n+s390_rel_address_ok_p (rtx symbol_ref)\n+{\n+  tree decl;\n+\n+  if (symbol_ref == s390_got_symbol () || CONSTANT_POOL_ADDRESS_P (symbol_ref))\n+    return true;\n+\n+  decl = SYMBOL_REF_DECL (symbol_ref);\n+\n+  if (!flag_pic || SYMBOL_REF_LOCAL_P (symbol_ref))\n+    return (s390_pic_data_is_text_relative\n+\t    || (decl\n+\t\t&& TREE_CODE (decl) == FUNCTION_DECL));\n+\n+  return false;\n+}\n+\n /* Return a legitimate reference for ORIG (an address) using the\n    register REG.  If REG is 0, a new pseudo is generated.\n \n@@ -4533,7 +4570,7 @@ legitimize_pic_address (rtx orig, rtx reg)\n     }\n \n   if ((GET_CODE (addr) == LABEL_REF\n-       || (GET_CODE (addr) == SYMBOL_REF && SYMBOL_REF_LOCAL_P (addr))\n+       || (SYMBOL_REF_P (addr) && s390_rel_address_ok_p (addr))\n        || (GET_CODE (addr) == UNSPEC &&\n \t   (XINT (addr, 1) == UNSPEC_GOTENT\n \t    || (TARGET_CPU_ZARCH && XINT (addr, 1) == UNSPEC_PLT))))\n@@ -10791,7 +10828,6 @@ restore_gprs (rtx base, int offset, int first, int last)\n \n /* Return insn sequence to load the GOT register.  */\n \n-static GTY(()) rtx got_symbol;\n rtx_insn *\n s390_load_got (void)\n {\n@@ -10803,23 +10839,17 @@ s390_load_got (void)\n      aren't usable.  */\n   rtx got_rtx = gen_rtx_REG (Pmode, 12);\n \n-  if (!got_symbol)\n-    {\n-      got_symbol = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n-      SYMBOL_REF_FLAGS (got_symbol) = SYMBOL_FLAG_LOCAL;\n-    }\n-\n   start_sequence ();\n \n   if (TARGET_CPU_ZARCH)\n     {\n-      emit_move_insn (got_rtx, got_symbol);\n+      emit_move_insn (got_rtx, s390_got_symbol ());\n     }\n   else\n     {\n       rtx offset;\n \n-      offset = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, got_symbol),\n+      offset = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, s390_got_symbol ()),\n \t\t\t       UNSPEC_LTREL_OFFSET);\n       offset = gen_rtx_CONST (Pmode, offset);\n       offset = force_const_mem (Pmode, offset);\n@@ -14911,6 +14941,9 @@ s390_option_override (void)\n   if (flag_prefetch_loop_arrays < 0 && HAVE_prefetch && optimize >= 3)\n     flag_prefetch_loop_arrays = 1;\n \n+  if (!s390_pic_data_is_text_relative && !flag_pic)\n+    error (\"-mno-pic-data-is-text-relative cannot be used without -fpic/-fPIC\");\n+\n   if (TARGET_TPF)\n     {\n       /* Don't emit DWARF3/4 unless specifically selected.  The TPF"}, {"sha": "7847047d160d6b7df6c69b8bdf3bd4dd55e0c0ab", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -946,6 +946,10 @@ CUMULATIVE_ARGS;\n \n #define LEGITIMATE_PIC_OPERAND_P(X)  legitimate_pic_operand_p (X)\n \n+#ifndef TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE\n+#define TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE 1\n+#endif\n+\n \n /* Assembler file format.  */\n "}, {"sha": "f277ac55effac293578f83058807ed8e4e1a1521", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -226,3 +226,7 @@ values are small, non-negative integers.  The default branch cost is\n mlra\n Target Report Var(s390_lra_flag) Init(1) Save\n Use LRA instead of reload.\n+\n+mpic-data-is-text-relative\n+Target Report Var(s390_pic_data_is_text_relative) Init(TARGET_DEFAULT_PIC_DATA_IS_TEXT_RELATIVE)\n+Assume data segments are relative to text segment."}, {"sha": "4ed5542d4954287e808d30e7bcb5af83b75c0250", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -1,3 +1,7 @@\n+2017-06-28  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* gcc.target/s390/nodatarel-1.c: New test.\n+\n 2017-06-27  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/80164"}, {"sha": "1d589a109472292e57525d2da31720faebb743d2", "filename": "gcc/testsuite/gcc.target/s390/nodatarel-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/935b5226c385e34088c314374cbbe9e4995b9e44/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fnodatarel-1.c?ref=935b5226c385e34088c314374cbbe9e4995b9e44", "patch": "@@ -0,0 +1,83 @@\n+/* Test -mno-pic-data-is-text-relative option.  No relative addressing\n+   of elements in .data and .bss are allowed with that option.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-optimize-sibling-calls -fpic -mno-pic-data-is-text-relative -march=z10 -mtune=z9-109 -mzarch\" } */\n+\n+static int a = 3;\n+\n+/* With -mno-pic-data-is-text-relative these must be addressed via\n+   GOT.  */\n+\n+int __attribute__((noinline,noclone))\n+foo ()\n+{\n+  return a;\n+}\n+\n+static int __attribute__((noinline,noclone))\n+foostatic (void)\n+{\n+  return a;\n+}\n+\n+/* Just to make a potentially modified.  */\n+\n+void\n+bar (int b)\n+{\n+  a = b;\n+}\n+\n+/* { dg-final { scan-assembler-times \"a@GOTENT\" 3 } } */\n+\n+/* The exrl target is a label_ref which should not be affected at\n+   all.  */\n+\n+void\n+mymemcpy (char *dst, char *src, long size)\n+{\n+  __builtin_memcpy (dst, src, size);\n+}\n+\n+/* { dg-final { scan-assembler \"exrl\" } } */\n+\n+\n+/* PLT slots can still be addressed relatively.  */\n+\n+int\n+callfoo ()\n+{\n+  return foo ();\n+}\n+\n+/* { dg-final { scan-assembler-times \"foo@PLT\" 1 } } */\n+\n+\n+/* GOT entries can still be addressed relatively.  */\n+\n+void *\n+fooptr ()\n+{\n+  return &foo;\n+}\n+\n+/* { dg-final { scan-assembler-times \"foo@GOTENT\" 1 } } */\n+\n+\n+/* A static function can be addressed relatively.  */\n+\n+int\n+callfoostatic ()\n+{\n+  return foostatic ();\n+}\n+\n+void *\n+foostaticptr ()\n+{\n+  return &foostatic;\n+}\n+\n+\n+/* { dg-final { scan-assembler-not \"foostatic@\" } } */"}]}