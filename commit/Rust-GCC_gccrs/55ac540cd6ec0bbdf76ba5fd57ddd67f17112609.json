{"sha": "55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTVhYzU0MGNkNmVjMGJiZGY3NmJhNWZkNTdkZGQ2N2YxNzExMjYwOQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.vnet.ibm.com", "date": "2015-05-19T17:24:24Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-05-19T17:24:24Z"}, "message": "S/390 Add -march/-mtune=z13 option.\n\ngcc/\n\t* common/config/s390/s390-common.c (processor_flags_table): Add\n\tz13.\n\t* config.gcc: Add z13.\n\t* config/s390/s390-opts.h (enum processor_type): Add\n\tPROCESSOR_2964_Z13.\n\t* config/s390/s390.c (s390_adjust_priority): Check for\n\tPROCESSOR_2964_Z13.\n\t(s390_reorg): Likewise.\n\t(s390_sched_reorder): Likewise.\n\t(s390_sched_variable_issue): Likewise.\n\t(s390_loop_unroll_adjust): Likewise.\n\t(s390_option_override): Likewise. Default to -mvx when available.\n\t* config/s390/s390.h (enum processor_flags): Add PF_Z13 and PF_VX.\n\t(TARGET_CPU_Z13, TARGET_CPU_VX, TARGET_Z13, TARGET_VX)\n\t(TARGET_VX_ABI): Define macros.\n\tmacros.\n\t(TARGET_DEFAULT): Add MASK_OPT_VX.\n\t* config/s390/s390.md (\"cpu\" attribute): Add z13.\n\t(\"cpu_facility\" attribute): Add vec.\n\t* config/s390/s390.opt (processor_type): Add z13.\n\t(mvx): New options.\n\t* doc/invoke.texi: Add z13 option for -march.\n\nFrom-SVN: r223393", "tree": {"sha": "37b1d510d64aff5cb257564ddbec0ca293617e90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37b1d510d64aff5cb257564ddbec0ca293617e90"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/comments", "author": null, "committer": null, "parents": [{"sha": "9e8ea2fc165e50248f1c6b6b78bc8b365881a09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8ea2fc165e50248f1c6b6b78bc8b365881a09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8ea2fc165e50248f1c6b6b78bc8b365881a09b"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "7cc99e770e37fcb00134e4a8d21f3a5bcd95c16d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -1,3 +1,28 @@\n+2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n+\n+\t* common/config/s390/s390-common.c (processor_flags_table): Add\n+\tz13.\n+\t* config.gcc: Add z13.\n+\t* config/s390/s390-opts.h (enum processor_type): Add\n+\tPROCESSOR_2964_Z13.\n+\t* config/s390/s390.c (s390_adjust_priority): Check for\n+\tPROCESSOR_2964_Z13.\n+\t(s390_reorg): Likewise.\n+\t(s390_sched_reorder): Likewise.\n+\t(s390_sched_variable_issue): Likewise.\n+\t(s390_loop_unroll_adjust): Likewise.\n+\t(s390_option_override): Likewise. Default to -mvx when available.\n+\t* config/s390/s390.h (enum processor_flags): Add PF_Z13 and PF_VX.\n+\t(TARGET_CPU_Z13, TARGET_CPU_VX, TARGET_Z13, TARGET_VX)\n+\t(TARGET_VX_ABI): Define macros.\n+\tmacros.\n+\t(TARGET_DEFAULT): Add MASK_OPT_VX.\n+\t* config/s390/s390.md (\"cpu\" attribute): Add z13.\n+\t(\"cpu_facility\" attribute): Add vec.\n+\t* config/s390/s390.opt (processor_type): Add z13.\n+\t(mvx): New options.\n+\t* doc/invoke.texi: Add z13 option for -march.\n+\n 2015-05-19  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n \n \t* config/s390/predicates.md (shift_count_or_setmem_operand): Add"}, {"sha": "43459c890b64ba9f206e2bb8b9535c0b791e8dcd", "filename": "gcc/common/config/s390/s390-common.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fs390%2Fs390-common.c?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -42,7 +42,10 @@ EXPORTED_CONST int processor_flags_table[] =\n     /* z196 */   PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n                  | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196,\n     /* zEC12 */  PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n+                 | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX,\n+    /* z13 */    PF_IEEE_FLOAT | PF_ZARCH | PF_LONG_DISPLACEMENT\n                  | PF_EXTIMM | PF_DFP | PF_Z10 | PF_Z196 | PF_ZEC12 | PF_TX\n+                 | PF_Z13 | PF_VX\n   };\n \n /* Change optimizations to be performed, depending on the"}, {"sha": "eb08a1d2f097a069ff0ddf989f5111dd81cd9588", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -4090,7 +4090,7 @@ case \"${target}\" in\n \t\tfor which in arch tune; do\n \t\t\teval \"val=\\$with_$which\"\n \t\t\tcase ${val} in\n-\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12)\n+\t\t\t\"\" | g5 | g6 | z900 | z990 | z9-109 | z9-ec | z10 | z196 | zEC12 | z13)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "5bde33344d2cd20bc22c1ae1503f538ea274fb1c", "filename": "gcc/config/s390/s390-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-opts.h?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -35,6 +35,7 @@ enum processor_type\n   PROCESSOR_2097_Z10,\n   PROCESSOR_2817_Z196,\n   PROCESSOR_2827_ZEC12,\n+  PROCESSOR_2964_Z13,\n   PROCESSOR_max\n };\n "}, {"sha": "21aa62bd7147485d18cf5ac3b1be2a002a0369b4", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 29, "deletions": 6, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -5851,7 +5851,8 @@ s390_adjust_priority (rtx_insn *insn, int priority)\n       && s390_tune != PROCESSOR_2094_Z9_109\n       && s390_tune != PROCESSOR_2097_Z10\n       && s390_tune != PROCESSOR_2817_Z196\n-      && s390_tune != PROCESSOR_2827_ZEC12)\n+      && s390_tune != PROCESSOR_2827_ZEC12\n+      && s390_tune != PROCESSOR_2964_Z13)\n     return priority;\n \n   switch (s390_safe_attr_type (insn))\n@@ -11455,7 +11456,8 @@ s390_reorg (void)\n   /* Walk over the insns and do some >=z10 specific changes.  */\n   if (s390_tune == PROCESSOR_2097_Z10\n       || s390_tune == PROCESSOR_2817_Z196\n-      || s390_tune == PROCESSOR_2827_ZEC12)\n+      || s390_tune == PROCESSOR_2827_ZEC12\n+      || s390_tune == PROCESSOR_2964_Z13)\n     {\n       rtx_insn *insn;\n       bool insn_added_p = false;\n@@ -11704,7 +11706,8 @@ s390_sched_reorder (FILE *file, int verbose,\n     if (reload_completed && *nreadyp > 1)\n       s390_z10_prevent_earlyload_conflicts (ready, nreadyp);\n \n-  if (s390_tune == PROCESSOR_2827_ZEC12\n+  if ((s390_tune == PROCESSOR_2827_ZEC12\n+       || s390_tune == PROCESSOR_2964_Z13)\n       && reload_completed\n       && *nreadyp > 1)\n     {\n@@ -11787,7 +11790,8 @@ s390_sched_variable_issue (FILE *file, int verbose, rtx_insn *insn, int more)\n {\n   last_scheduled_insn = insn;\n \n-  if (s390_tune == PROCESSOR_2827_ZEC12\n+  if ((s390_tune == PROCESSOR_2827_ZEC12\n+       || s390_tune == PROCESSOR_2964_Z13)\n       && reload_completed\n       && recog_memoized (insn) >= 0)\n     {\n@@ -11867,7 +11871,8 @@ s390_loop_unroll_adjust (unsigned nunroll, struct loop *loop)\n \n   if (s390_tune != PROCESSOR_2097_Z10\n       && s390_tune != PROCESSOR_2817_Z196\n-      && s390_tune != PROCESSOR_2827_ZEC12)\n+      && s390_tune != PROCESSOR_2827_ZEC12\n+      && s390_tune != PROCESSOR_2964_Z13)\n     return nunroll;\n \n   /* Count the number of memory references within the loop body.  */\n@@ -11998,6 +12003,22 @@ s390_option_override (void)\n   if (!(target_flags_explicit & MASK_OPT_HTM) && TARGET_CPU_HTM && TARGET_ZARCH)\n     target_flags |= MASK_OPT_HTM;\n \n+  if (target_flags_explicit & MASK_OPT_VX)\n+    {\n+      if (TARGET_OPT_VX)\n+\t{\n+\t  if (!TARGET_CPU_VX)\n+\t    error (\"hardware vector support not available on %s\",\n+\t\t   s390_arch_string);\n+\t  if (TARGET_SOFT_FLOAT)\n+\t    error (\"hardware vector support not available with -msoft-float\");\n+\t}\n+    }\n+  else if (TARGET_CPU_VX)\n+    /* Enable vector support if available and not explicitly disabled\n+       by user.  E.g. with -m31 -march=z13 -mzarch */\n+    target_flags |= MASK_OPT_VX;\n+\n   if (TARGET_HARD_DFP && !TARGET_DFP)\n     {\n       if (target_flags_explicit & MASK_HARD_DFP)\n@@ -12037,6 +12058,7 @@ s390_option_override (void)\n       s390_cost = &z196_cost;\n       break;\n     case PROCESSOR_2827_ZEC12:\n+    case PROCESSOR_2964_Z13:\n       s390_cost = &zEC12_cost;\n       break;\n     default:\n@@ -12064,7 +12086,8 @@ s390_option_override (void)\n \n   if (s390_tune == PROCESSOR_2097_Z10\n       || s390_tune == PROCESSOR_2817_Z196\n-      || s390_tune == PROCESSOR_2827_ZEC12)\n+      || s390_tune == PROCESSOR_2827_ZEC12\n+      || s390_tune == PROCESSOR_2964_Z13)\n     {\n       maybe_set_param_value (PARAM_MAX_UNROLLED_INSNS, 100,\n \t\t\t     global_options.x_param_values,"}, {"sha": "ed9ed4ebc631d6b23e8d47536467d70dddfe2da1", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -35,7 +35,9 @@ enum processor_flags\n   PF_Z10 = 32,\n   PF_Z196 = 64,\n   PF_ZEC12 = 128,\n-  PF_TX = 256\n+  PF_TX = 256,\n+  PF_Z13 = 512,\n+  PF_VX = 1024\n };\n \n /* This is necessary to avoid a warning about comparing different enum\n@@ -64,6 +66,10 @@ enum processor_flags\n  \t(s390_arch_flags & PF_ZEC12)\n #define TARGET_CPU_HTM \\\n  \t(s390_arch_flags & PF_TX)\n+#define TARGET_CPU_Z13 \\\n+        (s390_arch_flags & PF_Z13)\n+#define TARGET_CPU_VX \\\n+        (s390_arch_flags & PF_VX)\n \n /* These flags indicate that the generated code should run on a cpu\n    providing the respective hardware facility when run in\n@@ -82,7 +88,15 @@ enum processor_flags\n #define TARGET_ZEC12 \\\n        (TARGET_ZARCH && TARGET_CPU_ZEC12)\n #define TARGET_HTM (TARGET_OPT_HTM)\n+#define TARGET_Z13 \\\n+       (TARGET_ZARCH && TARGET_CPU_Z13)\n+#define TARGET_VX \\\n+       (TARGET_ZARCH && TARGET_CPU_VX && TARGET_OPT_VX && TARGET_HARD_FLOAT)\n \n+/* Use the ABI introduced with IBM z13:\n+   - pass vector arguments <= 16 bytes in VRs\n+   - align *all* vector types to 8 bytes  */\n+#define TARGET_VX_ABI TARGET_VX\n \n #define TARGET_AVOID_CMP_AND_BRANCH (s390_tune == PROCESSOR_2817_Z196)\n \n@@ -115,7 +129,8 @@ enum processor_flags\n   while (0)\n \n #ifdef DEFAULT_TARGET_64BIT\n-#define TARGET_DEFAULT             (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP | MASK_OPT_HTM)\n+#define TARGET_DEFAULT     (MASK_64BIT | MASK_ZARCH | MASK_HARD_DFP\t\\\n+                            | MASK_OPT_HTM | MASK_OPT_VX)\n #else\n #define TARGET_DEFAULT             0\n #endif"}, {"sha": "e0cd3db16436784e1d388b0eb07b638e2bffa5fa", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -324,11 +324,11 @@\n ;; distinguish between g5 and g6, but there are differences between the two\n ;; CPUs could in theory be modeled.\n \n-(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12\"\n+(define_attr \"cpu\" \"g5,g6,z900,z990,z9_109,z9_ec,z10,z196,zEC12,z13\"\n   (const (symbol_ref \"s390_tune_attr\")))\n \n (define_attr \"cpu_facility\"\n-  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12\"\n+  \"standard,ieee,zarch,cpu_zarch,longdisp,extimm,dfp,z10,z196,zEC12,vec\"\n   (const_string \"standard\"))\n \n (define_attr \"enabled\" \"\"\n@@ -369,6 +369,10 @@\n \n          (and (eq_attr \"cpu_facility\" \"zEC12\")\n               (match_test \"TARGET_ZEC12\"))\n+\t (const_int 1)\n+\n+         (and (eq_attr \"cpu_facility\" \"vec\")\n+              (match_test \"TARGET_VX\"))\n \t (const_int 1)]\n \t(const_int 0)))\n "}, {"sha": "0ff897bf2fd45bbbc9de96d80f69c0d0003db988", "filename": "gcc/config/s390/s390.opt", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fconfig%2Fs390%2Fs390.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.opt?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -76,6 +76,9 @@ Enum(processor_type) String(z196) Value(PROCESSOR_2817_Z196)\n EnumValue\n Enum(processor_type) String(zEC12) Value(PROCESSOR_2827_ZEC12)\n \n+EnumValue\n+Enum(processor_type) String(z13) Value(PROCESSOR_2964_Z13)\n+\n mbackchain\n Target Report Mask(BACKCHAIN)\n Maintain backchain pointer\n@@ -118,6 +121,10 @@ mhtm\n Target Report Mask(OPT_HTM)\n Use hardware transactional execution instructions\n \n+mvx\n+Target Report Mask(OPT_VX)\n+Use hardware vector facility instructions and enable the vector ABI\n+\n mpacked-stack\n Target Report Mask(PACKED_STACK)\n Use packed stack layout"}, {"sha": "a4515376c00e3b96b9b7c123fd0e10f4dbd7f1ff", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55ac540cd6ec0bbdf76ba5fd57ddd67f17112609/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=55ac540cd6ec0bbdf76ba5fd57ddd67f17112609", "patch": "@@ -20450,7 +20450,8 @@ The default is to not print debug information.\n Generate code that runs on @var{cpu-type}, which is the name of a system\n representing a certain processor type.  Possible values for\n @var{cpu-type} are @samp{g5}, @samp{g6}, @samp{z900}, @samp{z990},\n-@samp{z9-109}, @samp{z9-ec}, @samp{z10},  @samp{z196}, and @samp{zEC12}.\n+@samp{z9-109}, @samp{z9-ec}, @samp{z10},  @samp{z196}, @samp{zEC12},\n+and @samp{z13}.\n When generating code using the instructions available on z/Architecture,\n the default is @option{-march=z900}.  Otherwise, the default is\n @option{-march=g5}."}]}