{"sha": "98449720f700d3460a6756f48c4870f3e9a3a6fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg0NDk3MjBmNzAwZDM0NjBhNjc1NmY0OGM0ODcwZjNlOWEzYTZmZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-06-27T21:30:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-27T21:30:51Z"}, "message": "Add MULT_HIGHPART_EXPR\n\n        * tree.def (MULT_HIGHPART_EXPR): New.\n        * cfgexpand.c (expand_debug_expr): Ignore it.\n        * expr.c (expand_expr_real_2): Handle it.\n        * fold-const.c (int_const_binop_1): Likewise.\n        * optabs.c (optab_for_tree_code): Likewise.\n        * tree-cfg.c (verify_gimple_assign_binary): Likewise.\n        * tree-inline.c (estimate_operator_cost): Likewise.\n        * tree-pretty-print.c (dump_generic_node): Likewise.\n        (op_code_prio, op_symbol_code): Likewise.\n        * tree.c (commutative_tree_code): Likewise.  Also handle\n        WIDEN_MULT_EXPR, VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR.\n\nFrom-SVN: r189027", "tree": {"sha": "0ff9298f4b499b29ab5996ba2f0360c7401e22d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ff9298f4b499b29ab5996ba2f0360c7401e22d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98449720f700d3460a6756f48c4870f3e9a3a6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98449720f700d3460a6756f48c4870f3e9a3a6fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98449720f700d3460a6756f48c4870f3e9a3a6fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98449720f700d3460a6756f48c4870f3e9a3a6fd/comments", "author": null, "committer": null, "parents": [{"sha": "ff4d1662c887e1c43fde5d14c7835210d3a37063", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff4d1662c887e1c43fde5d14c7835210d3a37063", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff4d1662c887e1c43fde5d14c7835210d3a37063"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "8720ec49d00c9d49cc307aea68086d59e85af491", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -1,3 +1,17 @@\n+2012-06-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* tree.def (MULT_HIGHPART_EXPR): New.\n+\t* cfgexpand.c (expand_debug_expr): Ignore it.\n+\t* expr.c (expand_expr_real_2): Handle it.\n+\t* fold-const.c (int_const_binop_1): Likewise.\n+\t* optabs.c (optab_for_tree_code): Likewise.\n+\t* tree-cfg.c (verify_gimple_assign_binary): Likewise.\n+\t* tree-inline.c (estimate_operator_cost): Likewise.\n+\t* tree-pretty-print.c (dump_generic_node): Likewise.\n+\t(op_code_prio, op_symbol_code): Likewise.\n+\t* tree.c (commutative_tree_code): Likewise.  Also handle\n+\tWIDEN_MULT_EXPR, VEC_WIDEN_MULT_HI_EXPR, VEC_WIDEN_MULT_LO_EXPR.\n+\n 2012-06-27  Richard Henderson  <rth@redhat.com>\n \n \tPR target/53749"}, {"sha": "ad2f66738cccbd1fd59c49d7f13f61a492f3dbc4", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -3415,7 +3415,7 @@ expand_debug_expr (tree exp)\n     case VEC_PERM_EXPR:\n       return NULL;\n \n-   /* Misc codes.  */\n+    /* Misc codes.  */\n     case ADDR_SPACE_CONVERT_EXPR:\n     case FIXED_CONVERT_EXPR:\n     case OBJ_TYPE_REF:\n@@ -3466,6 +3466,10 @@ expand_debug_expr (tree exp)\n \t}\n       return NULL;\n \n+    case MULT_HIGHPART_EXPR:\n+      /* ??? Similar to the above.  */\n+      return NULL;\n+\n     case WIDEN_SUM_EXPR:\n     case WIDEN_LSHIFT_EXPR:\n       if (SCALAR_INT_MODE_P (GET_MODE (op0))"}, {"sha": "5295da2149caebabe378079711b26c3274176197", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -8551,6 +8551,7 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n       return expand_divmod (0, code, mode, op0, op1, target, unsignedp);\n \n     case RDIV_EXPR:\n+    case MULT_HIGHPART_EXPR:\n       goto binop;\n \n     case TRUNC_MOD_EXPR:"}, {"sha": "702f4e06701d2fe8e4906d34df7634462fdd0e15", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -999,6 +999,16 @@ int_const_binop_1 (enum tree_code code, const_tree arg1, const_tree arg2,\n \t\t\t     &res.low, &res.high);\n       break;\n \n+    case MULT_HIGHPART_EXPR:\n+      /* ??? Need quad precision, or an additional shift operand\n+\t to the multiply primitive, to handle very large highparts.  */\n+      if (TYPE_PRECISION (type) > HOST_BITS_PER_WIDE_INT)\n+\treturn NULL_TREE;\n+      tmp = double_int_mul (op1, op2);\n+      res = double_int_rshift (tmp, TYPE_PRECISION (type),\n+\t\t\t       TYPE_PRECISION (type), !uns);\n+      break;\n+\n     case TRUNC_DIV_EXPR:\n     case FLOOR_DIV_EXPR: case CEIL_DIV_EXPR:\n     case EXACT_DIV_EXPR:"}, {"sha": "30944765e5f9b71203ecf5cd28caf44532a2ddb7", "filename": "gcc/optabs.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -367,6 +367,9 @@ optab_for_tree_code (enum tree_code code, const_tree type,\n     case BIT_XOR_EXPR:\n       return xor_optab;\n \n+    case MULT_HIGHPART_EXPR:\n+      return TYPE_UNSIGNED (type) ? umul_highpart_optab : smul_highpart_optab;\n+\n     case TRUNC_MOD_EXPR:\n     case CEIL_MOD_EXPR:\n     case FLOOR_MOD_EXPR:"}, {"sha": "fe5af704cf860bb965a035e5b86395927cbeb82d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -3731,6 +3731,7 @@ verify_gimple_assign_binary (gimple stmt)\n       return false;\n \n     case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:"}, {"sha": "c3d3fb6648600c4aac7fe4d096c6f5f86bd28da4", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -3379,6 +3379,7 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n     case POINTER_PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n     case FMA_EXPR:\n \n     case ADDR_SPACE_CONVERT_EXPR:"}, {"sha": "44d3c10b7d81a19b33195cd9e7f19ba8e5df0384", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -1612,6 +1612,7 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n     case WIDEN_SUM_EXPR:\n     case WIDEN_MULT_EXPR:\n     case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:\n     case MINUS_EXPR:\n@@ -2674,6 +2675,7 @@ op_code_prio (enum tree_code code)\n     case WIDEN_MULT_PLUS_EXPR:\n     case WIDEN_MULT_MINUS_EXPR:\n     case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n     case TRUNC_DIV_EXPR:\n     case CEIL_DIV_EXPR:\n     case FLOOR_DIV_EXPR:\n@@ -2852,6 +2854,9 @@ op_symbol_code (enum tree_code code)\n     case WIDEN_MULT_EXPR:\n       return \"w*\";\n \n+    case MULT_HIGHPART_EXPR:\n+      return \"h*\";\n+\n     case NEGATE_EXPR:\n     case MINUS_EXPR:\n       return \"-\";"}, {"sha": "1717d713698b44cad68542a2adee002dc169d3b9", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -6899,6 +6899,7 @@ commutative_tree_code (enum tree_code code)\n     {\n     case PLUS_EXPR:\n     case MULT_EXPR:\n+    case MULT_HIGHPART_EXPR:\n     case MIN_EXPR:\n     case MAX_EXPR:\n     case BIT_IOR_EXPR:\n@@ -6913,6 +6914,9 @@ commutative_tree_code (enum tree_code code)\n     case TRUTH_AND_EXPR:\n     case TRUTH_XOR_EXPR:\n     case TRUTH_OR_EXPR:\n+    case WIDEN_MULT_EXPR:\n+    case VEC_WIDEN_MULT_HI_EXPR:\n+    case VEC_WIDEN_MULT_LO_EXPR:\n       return true;\n \n     default:"}, {"sha": "b0d4aead470217507fd1effb29bc29f6ce83d9a2", "filename": "gcc/tree.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98449720f700d3460a6756f48c4870f3e9a3a6fd/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=98449720f700d3460a6756f48c4870f3e9a3a6fd", "patch": "@@ -639,6 +639,10 @@ DEFTREECODE (MULT_EXPR, \"mult_expr\", tcc_binary, 2)\n    second operand is an integer of type sizetype.  */\n DEFTREECODE (POINTER_PLUS_EXPR, \"pointer_plus_expr\", tcc_binary, 2)\n \n+/* Highpart multiplication.  For an integral type with precision B,\n+   returns bits [2B-1, B] of the full 2*B product.  */\n+DEFTREECODE (MULT_HIGHPART_EXPR, \"mult_highpart_expr\", tcc_binary, 2)\n+\n /* Division for integer result that rounds the quotient toward zero.  */\n DEFTREECODE (TRUNC_DIV_EXPR, \"trunc_div_expr\", tcc_binary, 2)\n "}]}