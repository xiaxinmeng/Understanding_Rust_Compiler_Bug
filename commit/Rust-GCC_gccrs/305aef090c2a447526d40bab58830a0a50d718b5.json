{"sha": "305aef090c2a447526d40bab58830a0a50d718b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1YWVmMDkwYzJhNDQ3NTI2ZDQwYmFiNTg4MzBhMGE1MGQ3MThiNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-26T08:44:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-26T08:44:16Z"}, "message": "sse.md (*ssse3_palignr<mode>_perm): Add avx512bw alternative.\n\n\t* config/i386/sse.md (*ssse3_palignr<mode>_perm): Add avx512bw\n\talternative.  Formatting fix.\n\n\t* gcc.target/i386/avx512bw-vpalignr-4.c: New test.\n\t* gcc.target/i386/avx512vl-vpalignr-4.c: New test.\n\nFrom-SVN: r236764", "tree": {"sha": "52fd9ff0cde4f19e0d953d8bd8dcd87a8a61c1bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52fd9ff0cde4f19e0d953d8bd8dcd87a8a61c1bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305aef090c2a447526d40bab58830a0a50d718b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305aef090c2a447526d40bab58830a0a50d718b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305aef090c2a447526d40bab58830a0a50d718b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305aef090c2a447526d40bab58830a0a50d718b5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c7501e00efae2c0150db641fd5184732f52e8b88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7501e00efae2c0150db641fd5184732f52e8b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7501e00efae2c0150db641fd5184732f52e8b88"}], "stats": {"total": 195, "additions": 187, "deletions": 8}, "files": [{"sha": "7b7c6a9a956794d51cab779c8f447827adac1500", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=305aef090c2a447526d40bab58830a0a50d718b5", "patch": "@@ -1,5 +1,8 @@\n 2016-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (*ssse3_palignr<mode>_perm): Add avx512bw\n+\talternative.  Formatting fix.\n+\n \t* config/i386/sse.md\n \t(<mask_codefor>avx512vl_shuf_<shuffletype>32x4_1<mask_name>): Rename\n \tto ..."}, {"sha": "93b65712aee54c6463a7dd65094f844a64b63c31", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=305aef090c2a447526d40bab58830a0a50d718b5", "patch": "@@ -17783,33 +17783,34 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*ssse3_palignr<mode>_perm\"\n-  [(set (match_operand:V_128 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V_128 0 \"register_operand\" \"=x,x,v\")\n       (vec_select:V_128\n-\t(match_operand:V_128 1 \"register_operand\" \"0,x\")\n+\t(match_operand:V_128 1 \"register_operand\" \"0,x,v\")\n \t(match_parallel 2 \"palignr_operand\"\n-\t  [(match_operand 3 \"const_int_operand\" \"n, n\")])))]\n+\t  [(match_operand 3 \"const_int_operand\" \"n,n,n\")])))]\n   \"TARGET_SSSE3\"\n {\n-  operands[2] =\n-   GEN_INT (INTVAL (operands[3]) * GET_MODE_UNIT_SIZE (GET_MODE (operands[0])));\n+  operands[2] = (GEN_INT (INTVAL (operands[3])\n+\t\t * GET_MODE_UNIT_SIZE (GET_MODE (operands[0]))));\n \n   switch (which_alternative)\n     {\n     case 0:\n       return \"palignr\\t{%2, %1, %0|%0, %1, %2}\";\n     case 1:\n+    case 2:\n       return \"vpalignr\\t{%2, %1, %1, %0|%0, %1, %1, %2}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,avx,avx512bw\")\n    (set_attr \"type\" \"sseishft\")\n    (set_attr \"atom_unit\" \"sishuf\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,*,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")])\n+   (set_attr \"prefix\" \"orig,vex,evex\")])\n \n (define_expand \"avx512vl_vinsert<mode>\"\n   [(match_operand:VI48F_256 0 \"register_operand\")"}, {"sha": "f89f81b66b23a914500c6c15a6e204651cd0bbd9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=305aef090c2a447526d40bab58830a0a50d718b5", "patch": "@@ -1,5 +1,8 @@\n 2016-05-26  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.target/i386/avx512bw-vpalignr-4.c: New test.\n+\t* gcc.target/i386/avx512vl-vpalignr-4.c: New test.\n+\n \t* gcc.target/i386/avx512vl-vbroadcast-3.c: New test.\n \n 2016-05-26  Jiong Wang  <jiong.wang@arm.com>"}, {"sha": "50a2a3522139ea27981de0beac60dd4d1db08508", "filename": "gcc/testsuite/gcc.target/i386/avx512bw-vpalignr-4.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512bw-vpalignr-4.c?ref=305aef090c2a447526d40bab58830a0a50d718b5", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -masm=att\" } */\n+\n+typedef char V1 __attribute__((vector_size (16)));\n+\n+void\n+f1 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V1) { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpalignr\\[^\\n\\r]*\\\\\\$6\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef short V2 __attribute__((vector_size (16)));\n+\n+void\n+f2 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V2) { 5, 6, 7, 0, 1, 2, 3, 4 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpalignr\\[^\\n\\r]*\\\\\\$10\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef int V3 __attribute__((vector_size (16)));\n+\n+void\n+f3 (V3 x)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V3) { 3, 0, 1, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpshufd\\[^\\n\\r]*\\\\\\$147\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef long long V4 __attribute__((vector_size (16)));\n+\n+void\n+f4 (V4 x)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 1, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpalignr\\[^\\n\\r]*\\\\\\$8\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef float V5 __attribute__((vector_size (16)));\n+\n+void\n+f5 (V5 x)\n+{\n+  register V5 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V3) { 3, 0, 1, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$147\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef double V6 __attribute__((vector_size (16)));\n+\n+void\n+f6 (V6 x)\n+{\n+  register V6 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 1, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermilpd\\[^\\n\\r]*\\\\\\$1\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */"}, {"sha": "4936d2f4c5b0a782ff2fbc603d897edfc783050b", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpalignr-4.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpalignr-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305aef090c2a447526d40bab58830a0a50d718b5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpalignr-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpalignr-4.c?ref=305aef090c2a447526d40bab58830a0a50d718b5", "patch": "@@ -0,0 +1,86 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512bw -masm=att\" } */\n+\n+typedef char V1 __attribute__((vector_size (16)));\n+\n+void\n+f1 (V1 x)\n+{\n+  register V1 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V1) { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpalignr\\[^\\n\\r]*\\\\\\$6\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" } } */\n+\n+typedef short V2 __attribute__((vector_size (16)));\n+\n+void\n+f2 (V2 x)\n+{\n+  register V2 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V2) { 5, 6, 7, 0, 1, 2, 3, 4 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpalignr\\[^\\n\\r]*\\\\\\$10\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" } } */\n+\n+typedef int V3 __attribute__((vector_size (16)));\n+\n+void\n+f3 (V3 x)\n+{\n+  register V3 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V3) { 3, 0, 1, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpshufd\\[^\\n\\r]*\\\\\\$147\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef long long V4 __attribute__((vector_size (16)));\n+\n+void\n+f4 (V4 x)\n+{\n+  register V4 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 1, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpalignr\\[^\\n\\r]*\\\\\\$8\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" } } */\n+\n+typedef float V5 __attribute__((vector_size (16)));\n+\n+void\n+f5 (V5 x)\n+{\n+  register V5 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V3) { 3, 0, 1, 2 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermilps\\[^\\n\\r]*\\\\\\$147\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */\n+\n+typedef double V6 __attribute__((vector_size (16)));\n+\n+void\n+f6 (V6 x)\n+{\n+  register V6 a __asm (\"xmm16\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  a = __builtin_shuffle (a, (V4) { 1, 0 });\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler-times \"vpermilpd\\[^\\n\\r]*\\\\\\$1\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm16\" 1 } } */"}]}