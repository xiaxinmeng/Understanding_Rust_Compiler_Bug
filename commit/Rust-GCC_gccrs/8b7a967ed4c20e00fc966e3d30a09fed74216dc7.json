{"sha": "8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3YTk2N2VkNGMyMGUwMGZjOTY2ZTNkMzBhMDlmZWQ3NDIxNmRjNw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-10-06T05:57:57Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-10-06T05:57:57Z"}, "message": "libgfortran.h (GFC_STD_F2015): Add.\n\n2014-10-06  Tobias Burnus  <burnus@net-b.de>\n\ngcc/fortran/\n        * libgfortran.h (GFC_STD_F2015): Add.\n        * decl.c (gfc_match_implicit_none): Handle spec list.\n        (gfc_match_implicit): Move double intrinsic warning here.\n        * gfortran.h (gfc_namespace): Add has_implicit_none_export:1.\n        (gfc_set_implicit_none): Update interface.\n        * interface.c (gfc_procedure_use): Add implicit-none external\n        error check.\n        * parse.c (accept_statement): Remove call.\n        (verify_st_order): Permit that external-implict-none follows\n        implicit statement.\n        * symbol.c (gfc_set_implicit_none): Handle external/type\n        implicit none.\n\ngcc/testsuite/\n        * gfortran.dg/implicit_14.f90: New.\n        * gfortran.dg/implicit_15.f90: New.\n        * gfortran.dg/implicit_4.f90: Update dg-error.\n\nFrom-SVN: r215914", "tree": {"sha": "3fd948e1c22f57c5745797415d9f60822a38992e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd948e1c22f57c5745797415d9f60822a38992e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "116886341f638b539387bc900bc513ebe5ad6696", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116886341f638b539387bc900bc513ebe5ad6696", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116886341f638b539387bc900bc513ebe5ad6696"}], "stats": {"total": 204, "additions": 187, "deletions": 17}, "files": [{"sha": "5e6ad8e48e4762ab261854b489d182236d2bc872", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -1,3 +1,18 @@\n+2014-10-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* libgfortran.h (GFC_STD_F2015): Add.\n+\t* decl.c (gfc_match_implicit_none): Handle spec list.\n+\t(gfc_match_implicit): Move double intrinsic warning here.\n+\t* gfortran.h (gfc_namespace): Add has_implicit_none_export:1.\n+\t(gfc_set_implicit_none): Update interface.\n+\t* interface.c (gfc_procedure_use): Add implicit-none external\n+\terror check.\n+\t* parse.c (accept_statement): Remove call.\n+\t(verify_st_order): Permit that external-implict-none follows\n+\timplicit statement.\n+\t* symbol.c (gfc_set_implicit_none): Handle external/type\n+\timplicit none.\n+\n 2014-10-04  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/36534"}, {"sha": "a089be481289a22c0a16e1ae7ef164b2a0f71f4c", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 51, "deletions": 1, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -2946,7 +2946,50 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n match\n gfc_match_implicit_none (void)\n {\n-  return (gfc_match_eos () == MATCH_YES) ? MATCH_YES : MATCH_NO;\n+  char c;\n+  match m;\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  bool type = false;\n+  bool external = false;\n+\n+  gfc_gobble_whitespace ();\n+  c = gfc_peek_ascii_char ();\n+  if (c == '(')\n+    {\n+      (void) gfc_next_ascii_char ();\n+      if (!gfc_notify_std (GFC_STD_F2015, \"IMPORT NONE with spec list at %C\"))\n+\treturn MATCH_ERROR;\n+      for(;;)\n+\t{\n+\t  m = gfc_match (\" %n\", name);\n+          if (m != MATCH_YES)\n+\t    return MATCH_ERROR;\n+\n+          if (strcmp (name, \"type\") == 0)\n+\t    type = true;\n+          else if (strcmp (name, \"external\") == 0)\n+\t    external = true;\n+          else\n+            return MATCH_ERROR;\n+\n+\t  gfc_gobble_whitespace ();\n+          c = gfc_next_ascii_char ();\n+          if (c == ',')\n+\t    continue;\n+\t  if (c == ')')\n+\t    break;\n+\t  return MATCH_ERROR;\n+\t}\n+    }\n+  else\n+    type = true;\n+\n+  if (gfc_match_eos () != MATCH_YES)\n+    return MATCH_ERROR;\n+\n+  gfc_set_implicit_none (type, external);\n+\n+  return MATCH_YES;\n }\n \n \n@@ -3062,6 +3105,13 @@ gfc_match_implicit (void)\n   char c;\n   match m;\n \n+  if (gfc_current_ns->seen_implicit_none)\n+    {\n+      gfc_error (\"IMPLICIT statement at %C following an IMPLICIT NONE (type) \"\n+\t\t \"statement\");\n+      return MATCH_ERROR;\n+    }\n+\n   gfc_clear_ts (&ts);\n \n   /* We don't allow empty implicit statements.  */"}, {"sha": "f6f95f8b8403a40ed61417202dd49ca97196704a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -1655,6 +1655,9 @@ typedef struct gfc_namespace\n   /* Set to 1 if namespace is an interface body with \"IMPORT\" used.  */\n   unsigned has_import_set:1;\n \n+  /* Set to 1 if the namespace uses \"IMPLICT NONE (export)\".  */\n+  unsigned has_implicit_none_export:1;\n+\n   /* Set to 1 if resolved has been called for this namespace.\n      Holds -1 during resolution.  */\n   signed resolved:2;\n@@ -2754,7 +2757,7 @@ extern int gfc_character_storage_size;\n void gfc_clear_new_implicit (void);\n bool gfc_add_new_implicit_range (int, int);\n bool gfc_merge_new_implicit (gfc_typespec *);\n-void gfc_set_implicit_none (void);\n+void gfc_set_implicit_none (bool, bool);\n void gfc_check_function_type (gfc_namespace *);\n bool gfc_is_intrinsic_typename (const char *);\n "}, {"sha": "1eb09ac250da8c195634c1abc610f7afea296d8d", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -3252,8 +3252,14 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n      for calling a ISO_C_BINDING because c_loc and c_funloc\n      are pseudo-unknown.  Additionally, warn about procedures not\n      explicitly declared at all if requested.  */\n-  if (sym->attr.if_source == IFSRC_UNKNOWN && ! sym->attr.is_iso_c)\n+  if (sym->attr.if_source == IFSRC_UNKNOWN && !sym->attr.is_iso_c)\n     {\n+      if (sym->ns->has_implicit_none_export && sym->attr.proc == PROC_UNKNOWN)\n+\t{\n+\t  gfc_error (\"Procedure '%s' called at %L is not explicitly declared\",\n+\t\t     sym->name, where);\n+\t  return false;\n+\t}\n       if (gfc_option.warn_implicit_interface)\n \tgfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n \t\t     sym->name, where);"}, {"sha": "4539beb19a2c88eb1a20c32a4702b50a3a2abc27", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -1950,9 +1950,6 @@ accept_statement (gfc_statement st)\n   switch (st)\n     {\n     case ST_IMPLICIT_NONE:\n-      gfc_set_implicit_none ();\n-      break;\n-\n     case ST_IMPLICIT:\n       break;\n \n@@ -2142,7 +2139,7 @@ verify_st_order (st_state *p, gfc_statement st, bool silent)\n       break;\n \n     case ST_IMPLICIT_NONE:\n-      if (p->state > ORDER_IMPLICIT_NONE)\n+      if (p->state > ORDER_IMPLICIT)\n \tgoto order;\n \n       /* The '>' sign cannot be a '>=', because a FORMAT or ENTRY"}, {"sha": "0ccbd1f204cf010047cc1ac5234565f3f3f1c08b", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -114,22 +114,34 @@ static int new_flag[GFC_LETTERS];\n /* Handle a correctly parsed IMPLICIT NONE.  */\n \n void\n-gfc_set_implicit_none (void)\n+gfc_set_implicit_none (bool type, bool external)\n {\n   int i;\n \n-  if (gfc_current_ns->seen_implicit_none)\n+  if (gfc_current_ns->seen_implicit_none\n+      || gfc_current_ns->has_implicit_none_export)\n     {\n-      gfc_error (\"Duplicate IMPLICIT NONE statement at %C\");\n+      gfc_error_now (\"Duplicate IMPLICIT NONE statement at %C\");\n       return;\n     }\n \n-  gfc_current_ns->seen_implicit_none = 1;\n+  if (external)\n+    gfc_current_ns->has_implicit_none_export = 1;\n \n-  for (i = 0; i < GFC_LETTERS; i++)\n+  if (type)\n     {\n-      gfc_clear_ts (&gfc_current_ns->default_type[i]);\n-      gfc_current_ns->set_flag[i] = 1;\n+      gfc_current_ns->seen_implicit_none = 1;\n+      for (i = 0; i < GFC_LETTERS; i++)\n+\t{\n+\t  if (gfc_current_ns->set_flag[i])\n+\t    {\n+\t      gfc_error_now (\"IMPLICIT NONE (type) statement at %C following an \"\n+\t\t\t     \"IMPLICIT statement\");\n+\t      return;\n+\t    }\n+\t  gfc_clear_ts (&gfc_current_ns->default_type[i]);\n+\t  gfc_current_ns->set_flag[i] = 1;\n+\t}\n     }\n }\n \n@@ -2383,6 +2395,9 @@ gfc_get_namespace (gfc_namespace *parent, int parent_types)\n \t}\n     }\n \n+  if (parent_types && ns->parent != NULL)\n+    ns->has_implicit_none_export = ns->parent->has_implicit_none_export;\n+\n   ns->refs = 1;\n \n   return ns;"}, {"sha": "2859377548127ff6e8ef55caeefc1ebb53ca75ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -1,3 +1,9 @@\n+2014-10-06  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/implicit_14.f90: New.\n+\t* gfortran.dg/implicit_15.f90: New.\n+\t* gfortran.dg/implicit_4.f90: Update dg-error.\n+\n 2014-10-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* g++.dg/ipa/devirt-42.C: Update template."}, {"sha": "5b1a3b6cd4de97f1251975fb1067aeee7def7763", "filename": "gcc/testsuite/gfortran.dg/implicit_14.f90", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_14.f90?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -0,0 +1,8 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008ts\" }\n+!\n+! Support Fortran 2015's IMPLICIT NONE with spec list\n+! (currently implemented as vendor extension)\n+\n+implicit none (type) ! { dg-error \"GNU Extension: IMPORT NONE with spec list at \\\\(1\\\\)\" }\n+end"}, {"sha": "02a5fefbda66d374c5c7c50c7f8754b3ab886f5a", "filename": "gcc/testsuite/gfortran.dg/implicit_15.f90", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_15.f90?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -0,0 +1,70 @@\n+! { dg-do compile }\n+! { dg-options \"\" }\n+!\n+! Support Fortran 2015's IMPLICIT NONE with spec list\n+!\n+\n+subroutine sub1\n+implicit none (type)\n+call test()\n+i = 1 ! { dg-error \"Symbol 'i' at .1. has no IMPLICIT type\" }\n+end subroutine sub1\n+\n+subroutine sub2\n+implicit none ( external )\n+call foo() ! { dg-error \"Procedure 'foo' called at .1. is not explicitly declared\" }\n+i = 2\n+end subroutine sub2\n+\n+subroutine sub3\n+implicit none ( external, type, external, type )\n+call foo() ! { dg-error \"Procedure 'foo' called at .1. is not explicitly declared\" }\n+i = 3 ! { dg-error \"Symbol 'i' at .1. has no IMPLICIT type\" }\n+end subroutine sub3\n+\n+subroutine sub4\n+implicit none ( external ,type)\n+external foo\n+call foo()\n+i = 4 ! { dg-error \"Symbol 'i' at .1. has no IMPLICIT type\" }\n+end subroutine sub4\n+\n+subroutine sub5  ! OK\n+implicit integer(a-z)\n+implicit none ( external )\n+procedure() :: foo\n+call foo()\n+i = 5\n+end subroutine sub5\n+\n+subroutine sub6  ! OK\n+implicit none ( external )\n+implicit integer(a-z)\n+procedure() :: foo\n+call foo()\n+i = 5\n+end subroutine sub6\n+\n+subroutine sub7\n+implicit none ( external )\n+implicit none ! { dg-error \"Duplicate IMPLICIT NONE statement\" }\n+end subroutine sub7\n+\n+subroutine sub8\n+implicit none\n+implicit none ( type ) ! { dg-error \"Duplicate IMPLICIT NONE statement\" }\n+end subroutine sub8\n+\n+subroutine sub9\n+implicit none ( external, type )\n+implicit integer(a-z) ! { dg-error \"IMPLICIT statement at .1. following an IMPLICIT NONE .type. statement\" }\n+procedure() :: foo\n+call foo()\n+end subroutine sub9\n+\n+subroutine sub10\n+implicit integer(a-z)\n+implicit none ( external, type ) ! { dg-error \"IMPLICIT NONE .type. statement at .1. following an IMPLICIT statement\" }\n+procedure() :: foo\n+call foo()\n+end subroutine sub10"}, {"sha": "a5dc89a4e9175ce2a325ec43abe5b58bbf9e9eee", "filename": "gcc/testsuite/gfortran.dg/implicit_4.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b7a967ed4c20e00fc966e3d30a09fed74216dc7/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimplicit_4.f90?ref=8b7a967ed4c20e00fc966e3d30a09fed74216dc7", "patch": "@@ -5,13 +5,13 @@\n END\n \n SUBROUTINE a\n-IMPLICIT REAL(b-j) ! { dg-error \"cannot follow\" }\n-implicit none      ! { dg-error \"cannot follow\" }\n+IMPLICIT REAL(b-j)\n+implicit none      ! { dg-error \"Type IMPLICIT NONE statement at .1. following an IMPLICIT statement\" }\n END SUBROUTINE a\n \n subroutine b\n implicit none\n-implicit real(g-k) ! { dg-error \"Cannot specify\" }\n+implicit real(g-k) ! { dg-error \"IMPLICIT statement at .1. following an IMPLICIT NONE .type. statement\" }\n end subroutine b\n \n subroutine c"}]}