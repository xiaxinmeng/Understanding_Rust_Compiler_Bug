{"sha": "a296d6d3bdd83a617e789641b828ff53f65a4ec6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5NmQ2ZDNiZGQ4M2E2MTdlNzg5NjQxYjgyOGZmNTNmNjVhNGVjNg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-09T13:04:00Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-09T13:04:00Z"}, "message": "tree-vect-slp.c (vect_bb_slp_scalar_cost): Fill a cost vector.\n\n2018-05-09  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Fill a cost\n\tvector.\n\t(vect_bb_vectorization_profitable_p): Adjust.  Compute\n\tactual scalar cost using the cost vector and the add_stmt_cost\n\tmachinery.\n\nFrom-SVN: r260078", "tree": {"sha": "45900db13bf502d1d1d1bd9a69f9fc3bb3b16148", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/45900db13bf502d1d1d1bd9a69f9fc3bb3b16148"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a296d6d3bdd83a617e789641b828ff53f65a4ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a296d6d3bdd83a617e789641b828ff53f65a4ec6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a296d6d3bdd83a617e789641b828ff53f65a4ec6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a296d6d3bdd83a617e789641b828ff53f65a4ec6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd9ba4ca3051a5ca411f9d333f2a4cc170136740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd9ba4ca3051a5ca411f9d333f2a4cc170136740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd9ba4ca3051a5ca411f9d333f2a4cc170136740"}], "stats": {"total": 51, "additions": 36, "deletions": 15}, "files": [{"sha": "50eaef9a2c5ed3e4772b6fe223af09ba7a7824e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a296d6d3bdd83a617e789641b828ff53f65a4ec6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a296d6d3bdd83a617e789641b828ff53f65a4ec6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a296d6d3bdd83a617e789641b828ff53f65a4ec6", "patch": "@@ -1,3 +1,11 @@\n+2018-05-09  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-slp.c (vect_bb_slp_scalar_cost): Fill a cost\n+\tvector.\n+\t(vect_bb_vectorization_profitable_p): Adjust.  Compute\n+\tactual scalar cost using the cost vector and the add_stmt_cost\n+\tmachinery.\n+\n 2018-05-09  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/85645"}, {"sha": "4639bfc87c8479dc6dc5c82726537794a34cfc1a", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a296d6d3bdd83a617e789641b828ff53f65a4ec6/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a296d6d3bdd83a617e789641b828ff53f65a4ec6/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a296d6d3bdd83a617e789641b828ff53f65a4ec6", "patch": "@@ -2886,18 +2886,17 @@ vect_slp_analyze_operations (vec_info *vinfo)\n    and return it.  Do not account defs that are marked in LIFE and\n    update LIFE according to uses of NODE.  */\n \n-static unsigned\n+static void \n vect_bb_slp_scalar_cost (basic_block bb,\n-\t\t\t slp_tree node, vec<bool, va_heap> *life)\n+\t\t\t slp_tree node, vec<bool, va_heap> *life,\n+\t\t\t stmt_vector_for_cost *cost_vec)\n {\n-  unsigned scalar_cost = 0;\n   unsigned i;\n   gimple *stmt;\n   slp_tree child;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_SCALAR_STMTS (node), i, stmt)\n     {\n-      unsigned stmt_cost;\n       ssa_op_iter op_iter;\n       def_operand_p def_p;\n       stmt_vec_info stmt_info;\n@@ -2933,17 +2932,17 @@ vect_bb_slp_scalar_cost (basic_block bb,\n       gimple_set_visited (stmt, true);\n \n       stmt_info = vinfo_for_stmt (stmt);\n+      vect_cost_for_stmt kind;\n       if (STMT_VINFO_DATA_REF (stmt_info))\n         {\n           if (DR_IS_READ (STMT_VINFO_DATA_REF (stmt_info)))\n-            stmt_cost = vect_get_stmt_cost (scalar_load);\n+\t    kind = scalar_load;\n           else\n-            stmt_cost = vect_get_stmt_cost (scalar_store);\n+\t    kind = scalar_store;\n         }\n       else\n-        stmt_cost = vect_get_stmt_cost (scalar_stmt);\n-\n-      scalar_cost += stmt_cost;\n+\tkind = scalar_stmt;\n+      record_stmt_cost (cost_vec, 1, kind, stmt_info, 0, vect_body);\n     }\n \n   auto_vec<bool, 20> subtree_life;\n@@ -2954,12 +2953,10 @@ vect_bb_slp_scalar_cost (basic_block bb,\n \t  /* Do not directly pass LIFE to the recursive call, copy it to\n \t     confine changes in the callee to the current child/subtree.  */\n \t  subtree_life.safe_splice (*life);\n-\t  scalar_cost += vect_bb_slp_scalar_cost (bb, child, &subtree_life);\n+\t  vect_bb_slp_scalar_cost (bb, child, &subtree_life, cost_vec);\n \t  subtree_life.truncate (0);\n \t}\n     }\n-\n-  return scalar_cost;\n }\n \n /* Check if vectorization of the basic block is profitable.  */\n@@ -2974,14 +2971,30 @@ vect_bb_vectorization_profitable_p (bb_vec_info bb_vinfo)\n   unsigned int vec_prologue_cost = 0, vec_epilogue_cost = 0;\n \n   /* Calculate scalar cost.  */\n+  stmt_vector_for_cost scalar_costs;\n+  scalar_costs.create (0);\n   FOR_EACH_VEC_ELT (slp_instances, i, instance)\n     {\n       auto_vec<bool, 20> life;\n       life.safe_grow_cleared (SLP_INSTANCE_GROUP_SIZE (instance));\n-      scalar_cost += vect_bb_slp_scalar_cost (BB_VINFO_BB (bb_vinfo),\n-\t\t\t\t\t      SLP_INSTANCE_TREE (instance),\n-\t\t\t\t\t      &life);\n+      vect_bb_slp_scalar_cost (BB_VINFO_BB (bb_vinfo),\n+\t\t\t       SLP_INSTANCE_TREE (instance),\n+\t\t\t       &life, &scalar_costs);\n+    }\n+  void *target_cost_data = init_cost (NULL);\n+  stmt_info_for_cost *si;\n+  FOR_EACH_VEC_ELT (scalar_costs, i, si)\n+    {\n+      struct _stmt_vec_info *stmt_info\n+\t  = si->stmt ? vinfo_for_stmt (si->stmt) : NULL;\n+      (void) add_stmt_cost (target_cost_data, si->count,\n+\t\t\t    si->kind, stmt_info, si->misalign,\n+\t\t\t    vect_body);\n     }\n+  scalar_costs.release ();\n+  unsigned dummy;\n+  finish_cost (target_cost_data, &dummy, &scalar_cost, &dummy);\n+  destroy_cost_data (target_cost_data);\n \n   /* Unset visited flag.  */\n   for (gimple_stmt_iterator gsi = bb_vinfo->region_begin;"}]}