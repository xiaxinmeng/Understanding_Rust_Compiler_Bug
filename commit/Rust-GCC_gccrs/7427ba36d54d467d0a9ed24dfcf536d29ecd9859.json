{"sha": "7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQyN2JhMzZkNTRkNDY3ZDBhOWVkMjRkZmNmNTM2ZDI5ZWNkOTg1OQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-07T14:22:27Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2010-10-07T14:22:27Z"}, "message": "vec-ify ObjC* build_objc_method_call()\n\ngcc/objc:\n\t* objc-act.c (build_objc_method_call): Replace calls to \n\tbuild_function_call () with the VEC equivalent.  Construct parameter\n\tlists as VECs.\n\nFrom-SVN: r165112", "tree": {"sha": "749b2b8820b69e0982409602f72b609e1da79928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/749b2b8820b69e0982409602f72b609e1da79928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7427ba36d54d467d0a9ed24dfcf536d29ecd9859/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6510698d56f7044737d56105f47faed2e715f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd6510698d56f7044737d56105f47faed2e715f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd6510698d56f7044737d56105f47faed2e715f6"}], "stats": {"total": 65, "additions": 39, "deletions": 26}, "files": [{"sha": "9109229da45e655356d0d62aa7a810ddec362300", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7427ba36d54d467d0a9ed24dfcf536d29ecd9859/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7427ba36d54d467d0a9ed24dfcf536d29ecd9859/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "patch": "@@ -1,7 +1,13 @@\n 2010-10-07  Iain Sandoe  <iains@gcc.gnu.org>\n \n-\t* objc-act.c (objc_build_message_expr):  Call mark_exp_read () to signal that\n-\tthe receiver has been used.\n+\t* objc-act.c (build_objc_method_call): Replace calls to \n+\tbuild_function_call () with the VEC equivalent.  Construct parameter\n+\tlists as VECs.\n+\n+2010-10-07  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* objc-act.c (objc_build_message_expr):  Call mark_exp_read () to \n+\tsignal that the receiver has been used.\n \n 2010-10-06  Nicola Pero  <nicola.pero@meta-innovation.com>\n "}, {"sha": "09fd3be0db3697ce0a2a7b0cdd2167b8f3683d56", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 31, "deletions": 24, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7427ba36d54d467d0a9ed24dfcf536d29ecd9859/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7427ba36d54d467d0a9ed24dfcf536d29ecd9859/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=7427ba36d54d467d0a9ed24dfcf536d29ecd9859", "patch": "@@ -6689,6 +6689,8 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n \t\t     : umsg_decl)\n \t\t  : umsg_nonnil_decl));\n   tree rcv_p = (super_flag ? objc_super_type : objc_object_type);\n+  VEC(tree, gc) *parms = NULL;\n+  unsigned nparm = (method_params ? list_length (method_params) : 0);\n \n   /* If a prototype for the method to be called exists, then cast\n      the sender's return type and arguments to match that of the method.\n@@ -6710,6 +6712,9 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n   /* Use SAVE_EXPR to avoid evaluating the receiver twice.  */\n   lookup_object = save_expr (lookup_object);\n \n+  /* Param list + 2 slots for object and selector.  */\n+  parms = VEC_alloc (tree, gc, nparm + 2);\n+\n   if (flag_next_runtime)\n     {\n       /* If we are returning a struct in memory, and the address\n@@ -6724,38 +6729,40 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n \tsender = (super_flag ? umsg_super_stret_decl :\n \t\tflag_nil_receivers ? umsg_stret_decl : umsg_nonnil_stret_decl);\n \n-      method_params = tree_cons (NULL_TREE, lookup_object,\n-\t\t\t\t tree_cons (NULL_TREE, selector,\n-\t\t\t\t\t    method_params));\n       method = build_fold_addr_expr_loc (input_location, sender);\n+      /* Pass the object to the method.  */\n+      VEC_quick_push (tree, parms, lookup_object);\n     }\n   else\n     {\n       /* This is the portable (GNU) way.  */\n-      tree object;\n-\n       /* First, call the lookup function to get a pointer to the method,\n \t then cast the pointer, then call it with the method arguments.  */\n-\n-      object = (super_flag ? self_decl : lookup_object);\n-\n-      t = tree_cons (NULL_TREE, selector, NULL_TREE);\n-      t = tree_cons (NULL_TREE, lookup_object, t);\n-      method = build_function_call (loc, sender, t);\n-\n-      /* Pass the object to the method.  */\n-      method_params = tree_cons (NULL_TREE, object,\n-\t\t\t\t tree_cons (NULL_TREE, selector,\n-\t\t\t\t\t    method_params));\n-    }\n-\n-  /* ??? Selector is not at this point something we can use inside\n-     the compiler itself.  Set it to garbage for the nonce.  */\n-  t = build3 (OBJ_TYPE_REF, sender_cast, method, lookup_object, size_zero_node);\n-  return build_function_call (loc,\n-\t\t\t      t, method_params);\n+      VEC(tree, gc) *tv = VEC_alloc (tree, gc, 2);\n+      VEC_quick_push (tree, tv, lookup_object);\n+      VEC_quick_push (tree, tv, selector);\n+      method = build_function_call_vec (loc, sender, tv, NULL);\n+      VEC_free (tree, gc, tv);\n+\n+      /* Pass the appropriate object to the method.  */\n+      VEC_quick_push (tree, parms, (super_flag ? self_decl : lookup_object));\n+    }\n+\n+  /* Pass the selector to the method.  */\n+  VEC_quick_push (tree, parms, selector);\n+  /* Now append the remainder of the parms.  */\n+  if (nparm)\n+    for (; method_params; method_params = TREE_CHAIN (method_params))\n+      VEC_quick_push (tree, parms, TREE_VALUE (method_params));\n+\n+  /* Build an obj_type_ref, with the correct cast for the method call.  */\n+  t = build3 (OBJ_TYPE_REF, sender_cast, method, \n+\t\t\t    lookup_object, size_zero_node);\n+  t = build_function_call_vec (loc, t, parms, NULL);\\\n+  VEC_free (tree, gc, parms);\n+  return t;\n }\n-\f\n+\n static void\n build_protocol_reference (tree p)\n {"}]}