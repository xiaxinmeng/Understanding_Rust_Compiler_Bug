{"sha": "00085092c5e78d076c4259e1f955ce1b98090624", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDAwODUwOTJjNWU3OGQwNzZjNDI1OWUxZjk1NWNlMWI5ODA5MDYyNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-24T11:04:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-24T11:04:29Z"}, "message": "call.c (magic_varargs_p): Return 3 for __builtin_*_overflow_p.\n\n\t* call.c (magic_varargs_p): Return 3 for __builtin_*_overflow_p.\n\t(build_over_call): For magic == 3, do no conversion only on 3rd\n\targument.\n\n\t* c-c++-common/torture/builtin-arith-overflow-p-19.c: Run for C++ too.\n\t* g++.dg/ext/builtin-arith-overflow-2.C: New test.\n\nFrom-SVN: r237755", "tree": {"sha": "a5be74dd1b38f05e395e46c9c539e60187f76173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5be74dd1b38f05e395e46c9c539e60187f76173"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00085092c5e78d076c4259e1f955ce1b98090624", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00085092c5e78d076c4259e1f955ce1b98090624", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00085092c5e78d076c4259e1f955ce1b98090624", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00085092c5e78d076c4259e1f955ce1b98090624/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a86451b9b20415805e6316638c349cce86252893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a86451b9b20415805e6316638c349cce86252893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a86451b9b20415805e6316638c349cce86252893"}], "stats": {"total": 76, "additions": 72, "deletions": 4}, "files": [{"sha": "78dd88f20b268b9793fb48e0483f454607fed867", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00085092c5e78d076c4259e1f955ce1b98090624", "patch": "@@ -1,3 +1,9 @@\n+2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* call.c (magic_varargs_p): Return 3 for __builtin_*_overflow_p.\n+\t(build_over_call): For magic == 3, do no conversion only on 3rd\n+\targument.\n+\n 2016-06-23  Andi Kleen  <ak@linux.intel.com>\n \n \t* Make-lang.in: Add support for autofdo."}, {"sha": "d77092b1ef51311880e5b072efc582124a455ab9", "filename": "gcc/cp/call.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=00085092c5e78d076c4259e1f955ce1b98090624", "patch": "@@ -7132,7 +7132,8 @@ convert_for_arg_passing (tree type, tree val, tsubst_flags_t complain)\n    which just decay_conversion or no conversions at all should be done.\n    This is true for some builtins which don't act like normal functions.\n    Return 2 if no conversions at all should be done, 1 if just\n-   decay_conversion.  */\n+   decay_conversion.  Return 3 for special treatment of the 3rd argument\n+   for __builtin_*_overflow_p.  */\n \n int\n magic_varargs_p (tree fn)\n@@ -7149,6 +7150,11 @@ magic_varargs_p (tree fn)\n       case BUILT_IN_VA_START:\n \treturn 1;\n \n+      case BUILT_IN_ADD_OVERFLOW_P:\n+      case BUILT_IN_SUB_OVERFLOW_P:\n+      case BUILT_IN_MUL_OVERFLOW_P:\n+\treturn 3;\n+\n       default:;\n \treturn lookup_attribute (\"type generic\",\n \t\t\t\t TYPE_ATTRIBUTES (TREE_TYPE (fn))) != 0;\n@@ -7606,14 +7612,14 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n   for (; arg_index < vec_safe_length (args); ++arg_index)\n     {\n       tree a = (*args)[arg_index];\n-      if (magic == 2)\n+      if ((magic == 3 && arg_index == 2) || magic == 2)\n \t{\n \t  /* Do no conversions for certain magic varargs.  */\n \t  a = mark_type_use (a);\n \t  if (TREE_CODE (a) == FUNCTION_DECL && reject_gcc_builtin (a))\n \t    return error_mark_node;\n \t}\n-      else if (magic == 1)\n+      else if (magic != 0)\n \t/* For other magic varargs only do decay_conversion.  */\n \ta = decay_conversion (a, complain);\n       else if (DECL_CONSTRUCTOR_P (fn)"}, {"sha": "589657bf2e91a23116130c99cd83feda4a9c7ee6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=00085092c5e78d076c4259e1f955ce1b98090624", "patch": "@@ -1,5 +1,8 @@\n 2016-06-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/torture/builtin-arith-overflow-p-19.c: Run for C++ too.\n+\t* g++.dg/ext/builtin-arith-overflow-2.C: New test.\n+\n \t* c-c++-common/builtin-arith-overflow-1.c (generic_wrong_type, f3,\n \tf4): Adjust expected diagnostics.\n \t* c-c++-common/torture/builtin-arith-overflow.h (TP): New macro."}, {"sha": "0fd8e69dd820a7441556d12415e24dd6cc8ff2af", "filename": "gcc/testsuite/c-c++-common/torture/builtin-arith-overflow-p-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Ftorture%2Fbuiltin-arith-overflow-p-19.c?ref=00085092c5e78d076c4259e1f955ce1b98090624", "patch": "@@ -1,5 +1,5 @@\n /* Test __builtin_{add,sub,mul}_overflow_p.  */\n-/* { dg-do run { target c } } */\n+/* { dg-do run } */\n /* { dg-skip-if \"\" { ! run_expensive_tests }  { \"*\" } { \"-O0\" \"-O2\" } } */\n \n #include \"builtin-arith-overflow.h\""}, {"sha": "340ab77b9d771fa8ced0b381c5794410daec1da4", "filename": "gcc/testsuite/g++.dg/ext/builtin-arith-overflow-2.C", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00085092c5e78d076c4259e1f955ce1b98090624/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fbuiltin-arith-overflow-2.C?ref=00085092c5e78d076c4259e1f955ce1b98090624", "patch": "@@ -0,0 +1,53 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+struct A { int i : 1; };\n+struct B { int j : 3; };\n+\n+template <typename S>\n+int\n+foo (int x, int y)\n+{\n+  A a = {};\n+  S s = {};\n+  return __builtin_add_overflow_p (x, y, a.i) + 2 * __builtin_mul_overflow_p (x, y, s.j);\n+}\n+\n+__attribute__((noinline, noclone)) int\n+bar (int x, int y)\n+{\n+  return foo <B> (x, y);\n+}\n+\n+#if __cplusplus >= 201402L\n+template <typename S>\n+constexpr int\n+baz (int x, int y)\n+{\n+  A a = {};\n+  S s = {};\n+  return __builtin_add_overflow_p (x, y, a.i) + 2 * __builtin_mul_overflow_p (x, y, s.j);\n+}\n+\n+constexpr int t1 = baz <B> (0, 0);\n+constexpr int t2 = baz <B> (1, -1);\n+constexpr int t3 = baz <B> (1, -4);\n+constexpr int t4 = baz <B> (-4, 4);\n+constexpr int t5 = baz <B> (4, 2);\n+static_assert (t1 == 0, \"\");\n+static_assert (t2 == 0, \"\");\n+static_assert (t3 == 1, \"\");\n+static_assert (t4 == 2, \"\");\n+static_assert (t5 == 3, \"\");\n+#endif\n+\n+int\n+main ()\n+{\n+  if (bar (0, 0) != 0\n+      || bar (-1, 1) != 0\n+      || bar (-4, 1) != 1\n+      || bar (4, -4) != 2\n+      || bar (2, 4) != 3)\n+    __builtin_abort ();\n+}"}]}