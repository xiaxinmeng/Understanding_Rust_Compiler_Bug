{"sha": "f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE2NTZhZTkyMzRkMWExY2FlZTc5MTgzNzg2ZDFmMGFjMmY4ZGJmNA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-05T19:27:27Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2020-05-05T19:27:27Z"}, "message": "coroutines: Replace extra checks for co_yield with asserts.\n\nThe lowering of co_yield to a promise method call and a co_await\nwas moved to the initial analysis phase with the intention of\navoiding the need to handle the two cases later.\n\nBefore removing the later checks entirely, this patch replaces\nthem with checking asserts.\n\ngcc/cp/Changelog:\n\n2020-05-05  Iain Sandoe  <iain@sandoe.co.uk>\n\n\t* coroutines.cc (transform_await_wrapper): Check that we have\n\tno unlowered co_yields.\n\t(captures_temporary): Likewise.\n\t(register_awaits): Likewise.", "tree": {"sha": "9489d7cf14f0b2c8f799a1ab5a10ded768d1654c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9489d7cf14f0b2c8f799a1ab5a10ded768d1654c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5185cc6be3da99435129cdc0c769d4081e82989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5185cc6be3da99435129cdc0c769d4081e82989", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5185cc6be3da99435129cdc0c769d4081e82989"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "17e24d269d2ced642ac63c8815a95abb641e95d9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "patch": "@@ -1,3 +1,10 @@\n+2020-05-05  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* coroutines.cc (transform_await_wrapper): Check that we have\n+\tno unlowered co_yields.\n+\t(captures_temporary): Likewise.\n+\t(register_awaits): Likewise.\n+\n 2020-05-05  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/94807"}, {"sha": "ed871e1bab155cdb467cdf03add36ade60c1b260", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1656ae9234d1a1caee79183786d1f0ac2f8dbf4/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=f1656ae9234d1a1caee79183786d1f0ac2f8dbf4", "patch": "@@ -1743,7 +1743,9 @@ transform_await_wrapper (tree *stmt, int *do_subtree, void *d)\n       && DECL_CONTEXT (*stmt) != xform->actor_fn)\n     DECL_CONTEXT (*stmt) = xform->actor_fn;\n \n-  if (TREE_CODE (*stmt) != CO_AWAIT_EXPR && TREE_CODE (*stmt) != CO_YIELD_EXPR)\n+  /* We should have already lowered co_yields to their co_await.  */\n+  gcc_checking_assert (TREE_CODE (*stmt) != CO_YIELD_EXPR);\n+  if (TREE_CODE (*stmt) != CO_AWAIT_EXPR)\n     return NULL_TREE;\n \n   tree await_expr = *stmt;\n@@ -2612,9 +2614,12 @@ struct susp_frame_data\n static tree\n captures_temporary (tree *stmt, int *do_subtree, void *d)\n {\n+  /* We should have already lowered co_yields to their co_await.  */\n+  gcc_checking_assert (TREE_CODE (*stmt) != CO_YIELD_EXPR);\n+\n   /* Stop recursing if we see an await expression, the subtrees\n      of that will be handled when it is processed.  */\n-  if (TREE_CODE (*stmt) == CO_AWAIT_EXPR || TREE_CODE (*stmt) == CO_YIELD_EXPR)\n+  if (TREE_CODE (*stmt) == CO_AWAIT_EXPR)\n     {\n       *do_subtree = 0;\n       return NULL_TREE;\n@@ -2732,17 +2737,14 @@ register_awaits (tree *stmt, int *do_subtree ATTRIBUTE_UNUSED, void *d)\n {\n   susp_frame_data *data = (susp_frame_data *) d;\n \n-  if (TREE_CODE (*stmt) != CO_AWAIT_EXPR && TREE_CODE (*stmt) != CO_YIELD_EXPR)\n+  /* We should have already lowered co_yields to their co_await.  */\n+  gcc_checking_assert (TREE_CODE (*stmt) != CO_YIELD_EXPR);\n+\n+  if (TREE_CODE (*stmt) != CO_AWAIT_EXPR)\n     return NULL_TREE;\n \n   tree aw_expr = *stmt;\n   location_t aw_loc = EXPR_LOCATION (aw_expr); /* location of the co_xxxx.  */\n-  /* co_yield is syntactic sugar, re-write it to co_await.  */\n-  if (TREE_CODE (aw_expr) == CO_YIELD_EXPR)\n-    {\n-      aw_expr = TREE_OPERAND (aw_expr, 1);\n-      *stmt = aw_expr;\n-    }\n \n   /* If the awaitable is a parm or a local variable, then we already have\n      a frame copy, so don't make a new one.  */"}]}