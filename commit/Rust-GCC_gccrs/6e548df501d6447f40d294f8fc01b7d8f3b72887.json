{"sha": "6e548df501d6447f40d294f8fc01b7d8f3b72887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmU1NDhkZjUwMWQ2NDQ3ZjQwZDI5NGY4ZmMwMWI3ZDhmM2I3Mjg4Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-09T10:05:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-09T10:05:49Z"}, "message": "re PR tree-optimization/37387 (ICE in extract_range_from_binary_expr, at tree-vrp.c:2145)\n\n2008-09-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/37387\n\t* tree-ssa-ifcombine.c (ifcombine_iforif): Convert the name\n\tand bits to a common type.\n\n\t* gcc.c-torture/compile/pr37387.c: New testcase.\n\nFrom-SVN: r140142", "tree": {"sha": "dfe54048f3cb5947e6b5139fc262812481df1e33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfe54048f3cb5947e6b5139fc262812481df1e33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e548df501d6447f40d294f8fc01b7d8f3b72887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e548df501d6447f40d294f8fc01b7d8f3b72887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e548df501d6447f40d294f8fc01b7d8f3b72887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e548df501d6447f40d294f8fc01b7d8f3b72887/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18b0679f097a3656acf82ebbb7a703bd4c0bb174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18b0679f097a3656acf82ebbb7a703bd4c0bb174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18b0679f097a3656acf82ebbb7a703bd4c0bb174"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "c7848ff20a445ee6f3b0a02f603a69f1069cb2b8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6e548df501d6447f40d294f8fc01b7d8f3b72887", "patch": "@@ -1,3 +1,9 @@\n+2008-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37387\n+\t* tree-ssa-ifcombine.c (ifcombine_iforif): Convert the name\n+\tand bits to a common type.\n+\n 2008-09-09  Nick Clifton  <nickc@redhat.com>\n \n \t* config/v850/v850.md (return): Restore frame size restriction."}, {"sha": "c83bb25f4026c18e975d0d4c88ebe894e04e31af", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e548df501d6447f40d294f8fc01b7d8f3b72887", "patch": "@@ -1,3 +1,8 @@\n+2008-09-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37387\n+\t* gcc.c-torture/compile/pr37387.c: New testcase.\n+\n 2008-09-09  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/37411"}, {"sha": "d338933e6ec134f164d17b23ed8e93fd05ac7b56", "filename": "gcc/testsuite/gcc.c-torture/compile/pr37387.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37387.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37387.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr37387.c?ref=6e548df501d6447f40d294f8fc01b7d8f3b72887", "patch": "@@ -0,0 +1,11 @@\n+typedef long int Int;\n+void FuncMakeConsequencesPres (long *objDefs1)\n+{\n+  long a = (long)objDefs1;\n+  int c = a & 0x01;\n+  int b = 0;\n+  if (!  ( 13 <= ( c ? 0 : (((int) objDefs1 & 0x02) ? 0 : *objDefs1  ))\n+           && b <= 0))\n+    ErrorQuit ();\n+}\n+"}, {"sha": "eedeb62938d592150c5605887504a450ebed7da6", "filename": "gcc/tree-ssa-ifcombine.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftree-ssa-ifcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e548df501d6447f40d294f8fc01b7d8f3b72887/gcc%2Ftree-ssa-ifcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ifcombine.c?ref=6e548df501d6447f40d294f8fc01b7d8f3b72887", "patch": "@@ -440,6 +440,25 @@ ifcombine_iforif (basic_block inner_cond_bb, basic_block outer_cond_bb)\n       else\n \treturn false;\n \n+      /* As we strip non-widening conversions in finding a common\n+         name that is tested make sure to end up with an integral\n+\t type for building the bit operations.  */\n+      if (TYPE_PRECISION (TREE_TYPE (bits1))\n+\t  >= TYPE_PRECISION (TREE_TYPE (bits2)))\n+\t{\n+\t  bits1 = fold_convert (unsigned_type_for (TREE_TYPE (bits1)), bits1);\n+\t  name1 = fold_convert (TREE_TYPE (bits1), name1);\n+\t  bits2 = fold_convert (unsigned_type_for (TREE_TYPE (bits2)), bits2);\n+\t  bits2 = fold_convert (TREE_TYPE (bits1), bits2);\n+\t}\n+      else\n+\t{\n+\t  bits2 = fold_convert (unsigned_type_for (TREE_TYPE (bits2)), bits2);\n+\t  name1 = fold_convert (TREE_TYPE (bits2), name1);\n+\t  bits1 = fold_convert (unsigned_type_for (TREE_TYPE (bits1)), bits1);\n+\t  bits1 = fold_convert (TREE_TYPE (bits2), bits1);\n+\t}\n+\n       /* Do it.  */\n       gsi = gsi_for_stmt (inner_cond);\n       t = fold_build2 (BIT_IOR_EXPR, TREE_TYPE (name1), bits1, bits2);"}]}