{"sha": "be6676286a0fad2d7fdb6a258befe9deb826690e", "node_id": "C_kwDOANBUbNoAKGJlNjY3NjI4NmEwZmFkMmQ3ZmRiNmEyNThiZWZlOWRlYjgyNjY5MGU", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-14T10:28:24Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-06-14T10:41:11Z"}, "message": "Restore bootstrap on ARM\n\nThe -Wuse-after-free warning is explicitly disabled for destructors on ARM\nbecause of the special ABI and the previous change to the warning machinery\nuncovered another case where the warning data would be incorrectly erased.\n\ngcc/\n\t* warning-control.cc (copy_warning) [generic version]: Do not erase\n\tthe warning data of the destination location when the no-warning\n\tbit is not set on the source.\n\t(copy_warning) [tree version]: Return early if TO is equal to FROM.\n\t(copy_warning) [gimple version]: Likewise.\ngcc/testsuite/\n\t* g++.dg/warn/Wuse-after-free5.C: New test.", "tree": {"sha": "e0204e62cc4018c51fdb889cbef7db9176408417", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0204e62cc4018c51fdb889cbef7db9176408417"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6676286a0fad2d7fdb6a258befe9deb826690e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6676286a0fad2d7fdb6a258befe9deb826690e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6676286a0fad2d7fdb6a258befe9deb826690e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6676286a0fad2d7fdb6a258befe9deb826690e/comments", "author": null, "committer": null, "parents": [{"sha": "f907cf4c07cf51863dadbe90894e2ae3382bada5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f907cf4c07cf51863dadbe90894e2ae3382bada5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f907cf4c07cf51863dadbe90894e2ae3382bada5"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "794cbfc44e722f065fd47f08595a407f13e37d2c", "filename": "gcc/testsuite/g++.dg/warn/Wuse-after-free5.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6676286a0fad2d7fdb6a258befe9deb826690e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6676286a0fad2d7fdb6a258befe9deb826690e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWuse-after-free5.C?ref=be6676286a0fad2d7fdb6a258befe9deb826690e", "patch": "@@ -0,0 +1,15 @@\n+// Check the suppression of -Wuse-after-free for destructors on ARM\n+// { dg-do compile }\n+// { dg-options \"-Wuse-after-free\" }\n+\n+struct range_label {\n+  virtual ~range_label();\n+};\n+\n+struct unpaired_bidi_rich_location {\n+  struct custom_range_label : range_label {};\n+  unpaired_bidi_rich_location(int);\n+  custom_range_label m_custom_label;\n+};\n+\n+void maybe_warn_bidi_on_close() { unpaired_bidi_rich_location(0); }"}, {"sha": "7e9e701cfbe75b693b57afd9fda16ef8f6472a39", "filename": "gcc/warning-control.cc", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6676286a0fad2d7fdb6a258befe9deb826690e/gcc%2Fwarning-control.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6676286a0fad2d7fdb6a258befe9deb826690e/gcc%2Fwarning-control.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwarning-control.cc?ref=be6676286a0fad2d7fdb6a258befe9deb826690e", "patch": "@@ -191,7 +191,7 @@ void copy_warning (ToType to, FromType from)\n {\n   const location_t to_loc = get_location (to);\n \n-  bool supp = get_no_warning_bit (from);\n+  const bool supp = get_no_warning_bit (from);\n \n   nowarn_spec_t *from_spec = get_nowarn_spec (from);\n   if (RESERVED_LOCATION_P (to_loc))\n@@ -209,7 +209,7 @@ void copy_warning (ToType to, FromType from)\n \t  nowarn_spec_t tem = *from_spec;\n \t  nowarn_map->put (to_loc, tem);\n \t}\n-      else\n+      else if (supp)\n \t{\n \t  if (nowarn_map)\n \t    nowarn_map->remove (to_loc);\n@@ -226,6 +226,8 @@ void copy_warning (ToType to, FromType from)\n void\n copy_warning (tree to, const_tree from)\n {\n+  if (to == from)\n+    return;\n   copy_warning<tree, const_tree>(to, from);\n }\n \n@@ -250,5 +252,7 @@ copy_warning (gimple *to, const_tree from)\n void\n copy_warning (gimple *to, const gimple *from)\n {\n+  if (to == from)\n+    return;\n   copy_warning<gimple *, const gimple *>(to, from);\n }"}]}