{"sha": "0b1dffa7f1351a87825d01136ed64575f3b0aae5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIxZGZmYTdmMTM1MWE4NzgyNWQwMTEzNmVkNjQ1NzVmM2IwYWFlNQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-13T20:29:47Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-04-13T20:29:47Z"}, "message": "(digest_init): Don't call default_conversion before convert_for_assignment.\n\n(parser_build_binary_op): Make NOP_EXPR, not NON_LVALUE_EXPR.\n\nFrom-SVN: r4129", "tree": {"sha": "b2ad321208d7852c293d24a91621812eb145debf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2ad321208d7852c293d24a91621812eb145debf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b1dffa7f1351a87825d01136ed64575f3b0aae5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1dffa7f1351a87825d01136ed64575f3b0aae5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b1dffa7f1351a87825d01136ed64575f3b0aae5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b1dffa7f1351a87825d01136ed64575f3b0aae5/comments", "author": null, "committer": null, "parents": [{"sha": "9a63e81decd44e0dbd794dc9dee22ee34302858a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a63e81decd44e0dbd794dc9dee22ee34302858a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a63e81decd44e0dbd794dc9dee22ee34302858a"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "f809b358ae976d345b0d76e1070d6f0d3f5785be", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b1dffa7f1351a87825d01136ed64575f3b0aae5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b1dffa7f1351a87825d01136ed64575f3b0aae5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0b1dffa7f1351a87825d01136ed64575f3b0aae5", "patch": "@@ -2218,7 +2218,10 @@ parser_build_binary_op (code, arg1, arg2)\n   else\n     {\n       int flag = TREE_CONSTANT (result);\n-      result = build1 (NON_LVALUE_EXPR, TREE_TYPE (result), result);\n+      /* We use NOP_EXPR rather than NON_LVALUE_EXPR\n+\t so that convert_for_assignment won't strip it.\n+\t That way, we get warnings for things like p = (1 - 1).  */\n+      result = build1 (NOP_EXPR, TREE_TYPE (result), result);\n       C_SET_EXP_ORIGINAL_CODE (result, code);\n       TREE_CONSTANT (result) = flag;\n     }\n@@ -5011,11 +5014,13 @@ digest_init (type, init, tail, require_constant, constructor_constant, ofwhat)\n \t({\n \t  if (ofwhat)\n \t    push_string (ofwhat);\n+\t  if (!raw_constructor)\n+\t    inside_init = init;\n+\t  /* Note that convert_for_assignment calls default_conversion\n+\t     for arrays and functions.  We must not call it in the\n+\t     case where inside_init is a null pointer constant.  */\n \t  inside_init\n-\t    = convert_for_assignment (type,\n-\t\t\t\t      default_conversion (raw_constructor\n-\t\t\t\t\t\t\t  ? inside_init\n-\t\t\t\t\t\t\t  : init),\n+\t    = convert_for_assignment (type, inside_init, \n \t\t\t\t      &initialization_message,\n \t\t\t\t      NULL_TREE, NULL_TREE, 0);\n \t});"}]}