{"sha": "6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZhZGQ5YmI4NjMxYjI2M2ExMzljZmM1ZTlhMTE1MDAzZDRjNzlhZA==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-08-31T13:12:14Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-08-31T13:12:14Z"}, "message": "m32r.h (FUNCTION_ARG, [...]): Move these...\n\n\t* config/m32r/m32r.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move\n\tthese...\n\t(ROUND_ADVANCE, ROUND_ADVANCE_ARG, ROUND_ADVANCE_CUM, PASS_IN_REG_P):\n\t...and these...\n\t* config/m32r/m32r.c (m32r_function_arg, m32r_function_arg_advance):\n\t..to here..\n\t(ROUND_ADVANCE, ROUND_ADVANCE_ARG, ROUND_ADVANCE_CUM, PASS_IN_REG_P):\n\t...and here.\n\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n\nFrom-SVN: r163672", "tree": {"sha": "a8606baf65ad2ff95201625d10199828488759eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8606baf65ad2ff95201625d10199828488759eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/comments", "author": null, "committer": null, "parents": [{"sha": "3968a1c0e623898767c2ecfa02312a07957f4677", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3968a1c0e623898767c2ecfa02312a07957f4677", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3968a1c0e623898767c2ecfa02312a07957f4677"}], "stats": {"total": 126, "additions": 78, "deletions": 48}, "files": [{"sha": "c61a41794dd50138f20a8edec7be814975e6379c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "patch": "@@ -1,3 +1,15 @@\n+2010-08-31  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/m32r/m32r.h (FUNCTION_ARG, FUNCTION_ARG_ADVANCE): Move\n+\tthese...\n+\t(ROUND_ADVANCE, ROUND_ADVANCE_ARG, ROUND_ADVANCE_CUM, PASS_IN_REG_P):\n+\t...and these...\n+\t* config/m32r/m32r.c (m32r_function_arg, m32r_function_arg_advance):\n+\t..to here..\n+\t(ROUND_ADVANCE, ROUND_ADVANCE_ARG, ROUND_ADVANCE_CUM, PASS_IN_REG_P):\n+\t...and here.\n+\t(TARGET_FUNCTION_ARG, TARGET_FUNCTION_ARG_ADVANCE): Define.\n+\n 2010-08-31  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config/rx/rx-protos.h (rx_function_arg, rx_function_arg_size):"}, {"sha": "3890da380f6ed4422364a9c7ab1422d8aa0fd99b", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "patch": "@@ -90,6 +90,10 @@ static bool m32r_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static int m32r_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n+static rtx m32r_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n+static void m32r_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t       const_tree, bool);\n static bool m32r_can_eliminate (const int, const int);\n static void m32r_trampoline_init (rtx, tree, rtx);\n \f\n@@ -162,6 +166,10 @@ static const struct attribute_spec m32r_attribute_table[] =\n #define TARGET_PASS_BY_REFERENCE m32r_pass_by_reference\n #undef  TARGET_ARG_PARTIAL_BYTES\n #define TARGET_ARG_PARTIAL_BYTES m32r_arg_partial_bytes\n+#undef  TARGET_FUNCTION_ARG\n+#define TARGET_FUNCTION_ARG m32r_function_arg\n+#undef  TARGET_FUNCTION_ARG_ADVANCE\n+#define TARGET_FUNCTION_ARG_ADVANCE m32r_function_arg_advance\n \n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE m32r_can_eliminate\n@@ -1172,6 +1180,64 @@ m32r_arg_partial_bytes (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n   return words * UNITS_PER_WORD;\n }\n \n+/* The ROUND_ADVANCE* macros are local to this file.  */\n+/* Round SIZE up to a word boundary.  */\n+#define ROUND_ADVANCE(SIZE) \\\n+  (((SIZE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n+\n+/* Round arg MODE/TYPE up to the next word boundary.  */\n+#define ROUND_ADVANCE_ARG(MODE, TYPE) \\\n+  ((MODE) == BLKmode\t\t\t\t\\\n+   ? ROUND_ADVANCE ((unsigned int) int_size_in_bytes (TYPE))\t\\\n+   : ROUND_ADVANCE ((unsigned int) GET_MODE_SIZE (MODE)))\n+\n+/* Round CUM up to the necessary point for argument MODE/TYPE.  */\n+#define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) (CUM)\n+\n+/* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n+   a reg.  This includes arguments that have to be passed by reference as the\n+   pointer to them is passed in a reg if one is available (and that is what\n+   we're given).\n+   This macro is only used in this file.  */\n+#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n+  (ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)) < M32R_MAX_PARM_REGS)\n+\n+/* Determine where to put an argument to a function.\n+   Value is zero to push the argument on the stack,\n+   or a hard register in which to store the argument.\n+\n+   MODE is the argument's machine mode.\n+   TYPE is the data type of the argument (as a tree).\n+    This is null for libcalls where that information may\n+    not be available.\n+   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n+    the preceding args and about the function being called.\n+   NAMED is nonzero if this argument is a named parameter\n+    (otherwise it is an extra parameter matching an ellipsis).  */\n+/* On the M32R the first M32R_MAX_PARM_REGS args are normally in registers\n+   and the rest are pushed.  */\n+\n+static rtx\n+m32r_function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  return (PASS_IN_REG_P (*cum, mode, type)\n+\t  ? gen_rtx_REG (mode, ROUND_ADVANCE_CUM (*cum, mode, type))\n+\t  : NULL_RTX);\n+}\n+\n+/* Update the data in CUM to advance over an argument\n+   of mode MODE and data type TYPE.\n+   (TYPE is null for libcalls where that information may not be available.)  */\n+\n+static void\n+m32r_function_arg_advance (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n+\t\t\t   const_tree type, bool named ATTRIBUTE_UNUSED)\n+{\n+  *cum = (ROUND_ADVANCE_CUM (*cum, mode, type)\n+\t  + ROUND_ADVANCE_ARG (mode, type));\n+}\n+\n /* Worker function for TARGET_RETURN_IN_MEMORY.  */\n \n static bool"}, {"sha": "81fc19b25642c5a58d7ece174d4d36987d450f18", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fadd9bb8631b263a139cfc5e9a115003d4c79ad/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=6fadd9bb8631b263a139cfc5e9a115003d4c79ad", "patch": "@@ -843,54 +843,6 @@ extern enum reg_class m32r_regno_reg_class[FIRST_PSEUDO_REGISTER];\n #define FUNCTION_ARG_REGNO_P(N) \\\n   ((unsigned) (N) < M32R_MAX_PARM_REGS)\n \n-/* The ROUND_ADVANCE* macros are local to this file.  */\n-/* Round SIZE up to a word boundary.  */\n-#define ROUND_ADVANCE(SIZE) \\\n-  (((SIZE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n-\n-/* Round arg MODE/TYPE up to the next word boundary.  */\n-#define ROUND_ADVANCE_ARG(MODE, TYPE) \\\n-  ((MODE) == BLKmode\t\t\t\t\\\n-   ? ROUND_ADVANCE ((unsigned int) int_size_in_bytes (TYPE))\t\\\n-   : ROUND_ADVANCE ((unsigned int) GET_MODE_SIZE (MODE)))\n-\n-/* Round CUM up to the necessary point for argument MODE/TYPE.  */\n-#define ROUND_ADVANCE_CUM(CUM, MODE, TYPE) (CUM)\n-\n-/* Return boolean indicating arg of type TYPE and mode MODE will be passed in\n-   a reg.  This includes arguments that have to be passed by reference as the\n-   pointer to them is passed in a reg if one is available (and that is what\n-   we're given).\n-   This macro is only used in this file.  */\n-#define PASS_IN_REG_P(CUM, MODE, TYPE) \\\n-  (ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)) < M32R_MAX_PARM_REGS)\n-\n-/* Determine where to put an argument to a function.\n-   Value is zero to push the argument on the stack,\n-   or a hard register in which to store the argument.\n-\n-   MODE is the argument's machine mode.\n-   TYPE is the data type of the argument (as a tree).\n-    This is null for libcalls where that information may\n-    not be available.\n-   CUM is a variable of type CUMULATIVE_ARGS which gives info about\n-    the preceding args and about the function being called.\n-   NAMED is nonzero if this argument is a named parameter\n-    (otherwise it is an extra parameter matching an ellipsis).  */\n-/* On the M32R the first M32R_MAX_PARM_REGS args are normally in registers\n-   and the rest are pushed.  */\n-#define FUNCTION_ARG(CUM, MODE, TYPE, NAMED) \\\n-  (PASS_IN_REG_P ((CUM), (MODE), (TYPE))\t\t\t\\\n-   ? gen_rtx_REG ((MODE), ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)))\t\\\n-   : 0)\n-\n-/* Update the data in CUM to advance over an argument\n-   of mode MODE and data type TYPE.\n-   (TYPE is null for libcalls where that information may not be available.)  */\n-#define FUNCTION_ARG_ADVANCE(CUM, MODE, TYPE, NAMED) \\\n-  ((CUM) = (ROUND_ADVANCE_CUM ((CUM), (MODE), (TYPE)) \\\n-\t  + ROUND_ADVANCE_ARG ((MODE), (TYPE))))\n-\n /* If defined, a C expression that gives the alignment boundary, in bits,\n    of an argument with the specified mode and type.  If it is not defined, \n    PARM_BOUNDARY is used for all arguments.  */"}]}