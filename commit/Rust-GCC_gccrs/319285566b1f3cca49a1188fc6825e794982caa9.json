{"sha": "319285566b1f3cca49a1188fc6825e794982caa9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzE5Mjg1NTY2YjFmM2NjYTQ5YTExODhmYzY4MjVlNzk0OTgyY2FhOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T02:00:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-08-24T02:00:27Z"}, "message": "lex.c (real_yylex): Don't warn about long long constants if we're allowing long long.\n\n        * lex.c (real_yylex): Don't warn about long long constants if\n        we're allowing long long.\n\t* decl.c (pushdecl): Use IDENTIFIER_NAMESPACE_VALUE instead of\n\taccessing bindings directly.\n\t* lang-specs.h: Remove __HONOR_STD.\n\t* inc/exception, inc/new, inc/new.h, inc/typeinfo: Likewise.\n\nFrom-SVN: r21926", "tree": {"sha": "a43d43e79841f8444f2ddf523b8c1e40d2635c69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43d43e79841f8444f2ddf523b8c1e40d2635c69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/319285566b1f3cca49a1188fc6825e794982caa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319285566b1f3cca49a1188fc6825e794982caa9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/319285566b1f3cca49a1188fc6825e794982caa9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319285566b1f3cca49a1188fc6825e794982caa9/comments", "author": null, "committer": null, "parents": [{"sha": "46fe53810a6cd815c8c34d9e233912f7642d0582", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fe53810a6cd815c8c34d9e233912f7642d0582", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fe53810a6cd815c8c34d9e233912f7642d0582"}], "stats": {"total": 66, "additions": 30, "deletions": 36}, "files": [{"sha": "3e511084efed7ed60b7baff89e069ab065c699cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -1,3 +1,16 @@\n+1998-08-24  Nathan Sidwell  <nathan@acm.org>\n+\n+        * lex.c (real_yylex): Don't warn about long long constants if\n+        we're allowing long long.\n+\n+1998-08-23  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* decl.c (pushdecl): Use IDENTIFIER_NAMESPACE_VALUE instead of\n+\taccessing bindings directly.\n+\n+\t* lang-specs.h: Remove __HONOR_STD.\n+\t* inc/exception, inc/new, inc/new.h, inc/typeinfo: Likewise.\n+\n 1998-08-23  Mark Mitchell  <mark@markmitchell.com>\n \n \t* decl.c (grokdeclarator): Complain about in-class initialization"}, {"sha": "4942b5d0f58fef1e173543690841c0bea86f9ee3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -3503,12 +3503,11 @@ pushdecl (x)\n       if (TREE_PUBLIC (x) && TREE_CODE (x) != FUNCTION_DECL)\n \t{\n \t  tree decl;\n-\t  tree bindings = binding_for_name (name, current_namespace);\n \n-\t  if (BINDING_VALUE (bindings) != NULL_TREE\n-\t      && (DECL_EXTERNAL (BINDING_VALUE (bindings))\n-\t\t  || TREE_PUBLIC (BINDING_VALUE (bindings))))\n-\t    decl = BINDING_VALUE (bindings);\n+\t  if (IDENTIFIER_NAMESPACE_VALUE (name) != NULL_TREE\n+\t      && (DECL_EXTERNAL (IDENTIFIER_NAMESPACE_VALUE (name))\n+\t\t  || TREE_PUBLIC (IDENTIFIER_NAMESPACE_VALUE (name))))\n+\t    decl = IDENTIFIER_NAMESPACE_VALUE (name);\n \t  else\n \t    decl = NULL_TREE;\n \n@@ -3527,11 +3526,10 @@ pushdecl (x)\n       if (namespace_bindings_p ())\n \t{\n \t  /* Install a global value.  */\n-\t  tree bindings = binding_for_name (name, current_namespace);\n \n \t  /* If the first global decl has external linkage,\n \t     warn if we later see static one.  */\n-\t  if (BINDING_VALUE (bindings) == NULL_TREE && TREE_PUBLIC (x))\n+\t  if (IDENTIFIER_GLOBAL_VALUE (name) == NULL_TREE && TREE_PUBLIC (x))\n \t    TREE_PUBLIC (name) = 1;\n \n \t  /* Don't install an artificial TYPE_DECL if we already have\n@@ -3541,9 +3539,10 @@ pushdecl (x)\n \t      || ! DECL_ARTIFICIAL (x))\n \t    {\n \t      if (TREE_CODE (x) == FUNCTION_DECL)\n-\t\tmy_friendly_assert ((BINDING_VALUE (bindings) == NULL_TREE)\n-\t\t                    || BINDING_VALUE (bindings) == x, 378);\n-\t      BINDING_VALUE (bindings) = x;\n+\t\tmy_friendly_assert \n+\t\t  ((IDENTIFIER_GLOBAL_VALUE (name) == NULL_TREE)\n+\t\t  || (IDENTIFIER_GLOBAL_VALUE (name) == x), 378);\n+\t      SET_IDENTIFIER_NAMESPACE_VALUE (name, x);\n \t    }\n \n \t  /* Don't forget if the function was used via an implicit decl.  */\n@@ -3573,7 +3572,7 @@ pushdecl (x)\n \t{\n \t  /* Here to install a non-global value.  */\n \t  tree oldlocal = IDENTIFIER_LOCAL_VALUE (name);\n-\t  tree oldglobal = binding_for_name (name, current_namespace);\n+\t  tree oldglobal = IDENTIFIER_NAMESPACE_VALUE (name);\n \n \t  /* Don't install an artificial TYPE_DECL if we already have\n \t     another _DECL with that name.  */\n@@ -3596,24 +3595,24 @@ pushdecl (x)\n \t     have a global definition or declaration for the function.  */\n \t  if (oldlocal == NULL_TREE\n \t      && DECL_EXTERNAL (x)\n-\t      && BINDING_VALUE (oldglobal) != NULL_TREE\n+\t      && oldglobal != NULL_TREE\n \t      && TREE_CODE (x) == FUNCTION_DECL\n-\t      && TREE_CODE (BINDING_VALUE (oldglobal)) == FUNCTION_DECL)\n+\t      && TREE_CODE (oldglobal) == FUNCTION_DECL)\n \t    {\n \t      /* We have one.  Their types must agree.  */\n-\t      if (decls_match (x, BINDING_VALUE (oldglobal)))\n+\t      if (decls_match (x, oldglobal))\n \t\t/* OK */;\n \t      else\n \t\t{\n \t\t  cp_warning (\"extern declaration of `%#D' doesn't match\", x);\n-\t\t  cp_warning_at (\"global declaration `%#D'\", BINDING_VALUE (oldglobal));\n+\t\t  cp_warning_at (\"global declaration `%#D'\", oldglobal);\n \t\t}\n \t    }\n \t  /* If we have a local external declaration,\n \t     and no file-scope declaration has yet been seen,\n \t     then if we later have a file-scope decl it must not be static.  */\n \t  if (oldlocal == NULL_TREE\n-\t      && BINDING_VALUE (oldglobal) == NULL_TREE\n+\t      && oldglobal == NULL_TREE\n \t      && DECL_EXTERNAL (x)\n \t      && TREE_PUBLIC (x))\n \t    {\n@@ -3663,7 +3662,7 @@ pushdecl (x)\n \t\twarnstring = \"declaration of `%s' shadows a member of `this'\";\n \t      else if (oldlocal != NULL_TREE)\n \t\twarnstring = \"declaration of `%s' shadows previous local\";\n-\t      else if (BINDING_VALUE (oldglobal) != NULL_TREE)\n+\t      else if (oldglobal != NULL_TREE)\n \t\t/* XXX shadow warnings in outer-more namespaces */\n \t\twarnstring = \"declaration of `%s' shadows global declaration\";\n \n@@ -4505,7 +4504,6 @@ lookup_tag (form, name, binding_level, thislevel_only)\n \t  }\n       else if (level->namespace_p)\n \t/* Do namespace lookup. */\n-\t/* XXX: is this a real lookup, considering using-directives etc. ??? */\n \tfor (tail = current_namespace; 1; tail = CP_DECL_CONTEXT (tail))\n \t  {\n \t    tree old = binding_for_name (name, tail);"}, {"sha": "b7aa1f42d40908b5a6166ec8592770e4eda5846a", "filename": "gcc/cp/inc/exception", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fexception", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fexception", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fexception?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -8,9 +8,7 @@\n \n extern \"C++\" {\n \n-#ifdef __HONOR_STD\n namespace std {\n-#endif\n \n class exception {\n public:\n@@ -34,9 +32,7 @@ unexpected_handler set_unexpected (unexpected_handler);\n void unexpected () __attribute__ ((__noreturn__));\n bool uncaught_exception ();\n \n-#ifdef __HONOR_STD\n } // namespace std\n-#endif\n \n } // extern \"C++\"\n "}, {"sha": "93a3231ab69fc1a6fd45e9493567746fef27df4b", "filename": "gcc/cp/inc/new", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fnew", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fnew", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fnew?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -10,9 +10,7 @@\n \n extern \"C++\" {\n \n-#ifdef __HONOR_STD\n namespace std {\n-#endif\n \n   class bad_alloc : public exception {\n   public:\n@@ -24,9 +22,7 @@ namespace std {\n   typedef void (*new_handler)();\n   new_handler set_new_handler (new_handler);\n \n-#ifdef __HONOR_STD\n } // namespace std\n-#endif\n \n // replaceable signatures\n void *operator new (size_t) throw (std::bad_alloc);"}, {"sha": "006be7efb07fac1ebb837480562745219b9f1c04", "filename": "gcc/cp/inc/new.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fnew.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Fnew.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fnew.h?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -5,9 +5,7 @@\n \n #include <new>\n \n-#ifdef __HONOR_STD\n using std::new_handler;\n using std::set_new_handler;\n-#endif\n \n #endif // __NEW_H__"}, {"sha": "a735525b7b88aec9c28175ef9364f70fda42a15c", "filename": "gcc/cp/inc/typeinfo", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Ftypeinfo", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Finc%2Ftypeinfo", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Ftypeinfo?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -8,9 +8,7 @@\n \n extern \"C++\" {\n \n-#ifdef __HONOR_STD\n namespace std {\n-#endif\n \n class type_info {\n private:\n@@ -63,9 +61,7 @@ class bad_typeid : public exception {\n   virtual ~bad_typeid () { }\n };\n \n-#ifdef __HONOR_STD\n } // namespace std\n-#endif\n \n } // extern \"C++\"\n #endif"}, {"sha": "8daebbc308a3ea1fc325d6b41600298c768c9e8a", "filename": "gcc/cp/lang-specs.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Flang-specs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Flang-specs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-specs.h?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -36,7 +36,6 @@ Boston, MA 02111-1307, USA.  */\n \t-undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus -D__GNUC_MINOR__=%v2\\\n \t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n \t%{!fno-exceptions:-D__EXCEPTIONS}\\\n-        %{fhonor-std:-D__HONOR_STD} %{fnew-abi:-D__HONOR_STD}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}}\\n}\\\n@@ -46,7 +45,6 @@ Boston, MA 02111-1307, USA.  */\n                             -D__GNUC_MINOR__=%v2\\\n                             %{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n                             %{!fno-exceptions:-D__EXCEPTIONS}\\\n-                            %{fhonor-std:-D__HONOR_STD} %{fnew-abi:-D__HONOR_STD}\\\n                             %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\\n                             %{trigraphs}\\\n \t\t\t    %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n@@ -66,7 +64,6 @@ Boston, MA 02111-1307, USA.  */\n \t-undef -D__GNUC__=%v1 -D__GNUG__=%v1 -D__cplusplus -D__GNUC_MINOR__=%v2\\\n \t%{ansi:-trigraphs -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n \t%{!fno-exceptions:-D__EXCEPTIONS}\\\n-        %{fhonor-std:-D__HONOR_STD} %{fnew-abi:-D__HONOR_STD}\\\n         %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}} %{trigraphs}\\\n \t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.ii}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\","}, {"sha": "36c5c74f4e82757fc01576d55b397aa1bb9a14b5", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/319285566b1f3cca49a1188fc6825e794982caa9/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=319285566b1f3cca49a1188fc6825e794982caa9", "patch": "@@ -3823,7 +3823,7 @@ real_yylex ()\n \t\t      {\n \t\t\tif (spec_long_long)\n \t\t\t  error (\"three `l's in integer constant\");\n-\t\t\telse if (pedantic)\n+\t\t\telse if (pedantic && ! in_system_header && warn_long_long)\n \t\t\t  pedwarn (\"ANSI C++ forbids long long integer constants\");\n \t\t\tspec_long_long = 1;\n \t\t      }"}]}