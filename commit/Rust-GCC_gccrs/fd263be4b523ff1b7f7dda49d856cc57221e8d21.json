{"sha": "fd263be4b523ff1b7f7dda49d856cc57221e8d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyNjNiZTRiNTIzZmYxYjdmN2RkYTQ5ZDg1NmNjNTcyMjFlOGQyMQ==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-09T20:52:59Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2020-07-09T20:58:36Z"}, "message": "rs6000: Allow MMA built-in initialization regardless of compiler options\n\nBuilt-in initialization occurs only once and fairly early, when the\ncommand line options are in force.  If the -mcpu=<CPU> is pre-power10,\nthen we fail to initialize the MMA built-ins, so they are not\navailable to call in a #pragma target/attribute target function.\nThe fix is to basically always (on server type cpus) initialize the MMA\nbuilt-ins so we can use them in #pragma target/attribute target functions.\n\n2020-07-09  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/96125\n\t* config/rs6000/rs6000-call.c (rs6000_init_builtins): Define the MMA\n\tspecific types __vector_quad and __vector_pair, and initialize the\n\tMMA built-ins if TARGET_EXTRA_BUILTINS is set.\n\t(mma_init_builtins): Don't test for mask set in rs6000_builtin_mask.\n\tRemove now unneeded mask variable.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Add the\n\tOPTION_MASK_MMA flag for power10 if not already set.\n\ngcc/testsuite/\n\tPR target/96125\n\t* gcc.target/powerpc/pr96125.c: New test.", "tree": {"sha": "85310a062d8323bc89b344b9c9e5701c2630087d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85310a062d8323bc89b344b9c9e5701c2630087d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd263be4b523ff1b7f7dda49d856cc57221e8d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd263be4b523ff1b7f7dda49d856cc57221e8d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd263be4b523ff1b7f7dda49d856cc57221e8d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd263be4b523ff1b7f7dda49d856cc57221e8d21/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ddea9306251b7d4e4fd1d67a5941ef7448b2e66"}], "stats": {"total": 72, "additions": 58, "deletions": 14}, "files": [{"sha": "4e840e260a6d5dde1a5da2a88db6d64ec5724c11", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=fd263be4b523ff1b7f7dda49d856cc57221e8d21", "patch": "@@ -12572,7 +12572,7 @@ rs6000_init_builtins (void)\n     ieee128_float_type_node = ibm128_float_type_node = long_double_type_node;\n \n   /* Vector pair and vector quad support.  */\n-  if (TARGET_MMA)\n+  if (TARGET_EXTRA_BUILTINS)\n     {\n       tree oi_uns_type = make_unsigned_type (256);\n       vector_pair_type_node = build_distinct_type_copy (oi_uns_type);\n@@ -12648,13 +12648,14 @@ rs6000_init_builtins (void)\n   pixel_V8HI_type_node = rs6000_vector_type (\"__vector __pixel\",\n \t\t\t\t\t     pixel_type_node, 8);\n \n-  /* Create Altivec and VSX builtins on machines with at least the\n+  /* Create Altivec, VSX and MMA builtins on machines with at least the\n      general purpose extensions (970 and newer) to allow the use of\n      the target attribute.  */\n   if (TARGET_EXTRA_BUILTINS)\n-    altivec_init_builtins ();\n-  if (TARGET_MMA)\n-    mma_init_builtins ();\n+    {\n+      altivec_init_builtins ();\n+      mma_init_builtins ();\n+    }\n   if (TARGET_HTM)\n     htm_init_builtins ();\n \n@@ -13388,20 +13389,12 @@ mma_init_builtins (void)\n   for (unsigned i = 0; i < ARRAY_SIZE (bdesc_mma); i++, d++)\n     {\n       tree op[MAX_MMA_OPERANDS], type;\n-      HOST_WIDE_INT mask = d->mask;\n       unsigned icode = (unsigned) d->icode;\n       unsigned attr = rs6000_builtin_info[d->code].attr;\n       int attr_args = (attr & RS6000_BTC_OPND_MASK);\n       bool gimple_func = (attr & RS6000_BTC_GIMPLE);\n       unsigned nopnds = 0;\n \n-      if ((mask & rs6000_builtin_mask) != mask)\n-\t{\n-\t  if (TARGET_DEBUG_BUILTIN)\n-\t    fprintf (stderr, \"mma_builtin, skip binary %s\\n\", d->name);\n-\t  continue;\n-\t}\n-\n       if (d->name == 0)\n \t{\n \t  if (TARGET_DEBUG_BUILTIN)"}, {"sha": "15af9b230e6e09e16955e5ae5ad92f890dd9416f", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fd263be4b523ff1b7f7dda49d856cc57221e8d21", "patch": "@@ -4264,8 +4264,12 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_isa_flags &= ~OPTION_MASK_PCREL;\n     }\n \n+  /* Enable -mmma by default on power10 systems.  */\n+  if (TARGET_POWER10 && (rs6000_isa_flags_explicit & OPTION_MASK_MMA) == 0)\n+    rs6000_isa_flags |= OPTION_MASK_MMA;\n+\n   /* Turn off vector pair/mma options on non-power10 systems.  */\n-  if (!TARGET_POWER10 && TARGET_MMA)\n+  else if (!TARGET_POWER10 && TARGET_MMA)\n     {\n       if ((rs6000_isa_flags_explicit & OPTION_MASK_MMA) != 0)\n \terror (\"%qs requires %qs\", \"-mmma\", \"-mcpu=power10\");"}, {"sha": "bd9487d73cbea8dae29d1c383c665b616a4574ce", "filename": "gcc/testsuite/gcc.target/powerpc/pr96125.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96125.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd263be4b523ff1b7f7dda49d856cc57221e8d21/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96125.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr96125.c?ref=fd263be4b523ff1b7f7dda49d856cc57221e8d21", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power7 -O2\" } */\n+\n+void\n+__attribute__((target(\"cpu=power10\")))\n+test0 (__vector_quad *dst)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_xxsetaccz (&acc);\n+  *dst = acc;\n+}\n+\n+void\n+test1 (__vector_quad *dst)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_xxsetaccz (&acc); /* { dg-error \"'__builtin_mma_xxsetaccz' requires the '-mmma' option\" } */\n+  *dst = acc;\n+}\n+\n+#pragma GCC target(\"cpu=power10\")\n+void\n+test2 (__vector_quad *dst)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_xxsetaccz (&acc);\n+  *dst = acc;\n+}\n+\n+void\n+test3 (__vector_quad *dst)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_xxsetaccz (&acc);\n+  *dst = acc;\n+}\n+\n+#pragma GCC reset_options\n+void\n+test4 (__vector_quad *dst)\n+{\n+  __vector_quad acc;\n+  __builtin_mma_xxmfacc (&acc); /* { dg-error \"'__builtin_mma_xxmfacc' requires the '-mmma' option\" } */\n+  *dst = acc;\n+}\n+"}]}