{"sha": "8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkYTJjMjc0YWM2NmQ2MGMxZGZjMTM0OWU5ZWZiNGU4YzJhMzU4MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-03T16:11:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-02-03T22:50:36Z"}, "message": "c++: Allow parm of empty class type in constexpr.\n\nSince copying a class object is defined in terms of the copy constructor,\ncopying an empty class is OK even if it would otherwise not be usable in a\nconstant expression.  Relatedly, using a parameter as an lvalue is no more\nproblematic than a local variable, and calling a member function uses the\nobject as an lvalue.\n\n\tPR c++/91953\n\t* constexpr.c (potential_constant_expression_1) [PARM_DECL]: Allow\n\tempty class type.\n\t[COMPONENT_REF]: A member function reference doesn't use the object\n\tas an rvalue.", "tree": {"sha": "9c5d0041838e29c8f570733b021348cd3effa683", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c5d0041838e29c8f570733b021348cd3effa683"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e43cbce353b63a05c3b7c39d83a2e32c9f911f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19e43cbce353b63a05c3b7c39d83a2e32c9f911f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19e43cbce353b63a05c3b7c39d83a2e32c9f911f"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "a8af79c77a7d4cc6ff8d56c2f734e90549590f66", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "patch": "@@ -1,3 +1,11 @@\n+2020-02-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91953\n+\t* constexpr.c (potential_constant_expression_1) [PARM_DECL]: Allow\n+\tempty class type.\n+\t[COMPONENT_REF]: A member function reference doesn't use the object\n+\tas an rvalue.\n+\n 2020-02-03  Iain Sandoe  <iain@sandoe.co.uk>\n \n \tPR c++/93458"}, {"sha": "a39ba413d687bfa388306949575e2a1de4bc818c", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "patch": "@@ -7013,8 +7013,13 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n       return true;\n \n     case PARM_DECL:\n-      if (now)\n+      if (now && want_rval)\n \t{\n+\t  tree type = TREE_TYPE (t);\n+\t  if (dependent_type_p (type)\n+\t      || is_really_empty_class (type, /*ignore_vptr*/false))\n+\t    /* An empty class has no data to read.  */\n+\t    return true;\n \t  if (flags & tf_error)\n \t    error (\"%qE is not a constant expression\", t);\n \t  return false;\n@@ -7270,10 +7275,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n #endif\n       return RECUR (t, any);\n \n-    case REALPART_EXPR:\n-    case IMAGPART_EXPR:\n     case COMPONENT_REF:\n-    case BIT_FIELD_REF:\n     case ARROW_EXPR:\n     case OFFSET_REF:\n       /* -- a class member access unless its postfix-expression is\n@@ -7282,6 +7284,15 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t postfix-expression being a potential constant expression.  */\n       if (type_unknown_p (t))\n \treturn true;\n+      if (is_overloaded_fn (t))\n+\t/* In a template, a COMPONENT_REF of a function expresses ob.fn(),\n+\t   which uses ob as an lvalue.  */\n+\twant_rval = false;\n+      gcc_fallthrough ();\n+\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+    case BIT_FIELD_REF:\n       return RECUR (TREE_OPERAND (t, 0), want_rval);\n \n     case EXPR_PACK_EXPANSION:"}, {"sha": "ca4f9a55e5f9686c02b1fcbda62cbfd9e1aac93d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-empty14.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-empty14.C?ref=8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/91953\n+// { dg-do compile { target c++11 } }\n+\n+struct S {};\n+\n+template <class T> void\n+foo (S s)\n+{\n+  constexpr S x = s;\n+}"}, {"sha": "005aa80fc093adf6394013c9122182094bcdbb9d", "filename": "gcc/testsuite/g++.dg/cpp1z/constexpr-if12.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fconstexpr-if12.C?ref=8fda2c274ac66d60c1dfc1349e9efb4e8c2a3580", "patch": "@@ -2,12 +2,13 @@\n // { dg-do compile { target c++17 } }\n \n struct T {\n+  int i;\n   constexpr auto foo() { return false; }\n };\n \n template <class MustBeTemplate>\n constexpr auto bf(T t) {\n-    if constexpr(t.foo()) {\t// { dg-error \"constant expression\" }\n+    if constexpr(t.foo()) {\n         return false;\n     }\n     return true;"}]}