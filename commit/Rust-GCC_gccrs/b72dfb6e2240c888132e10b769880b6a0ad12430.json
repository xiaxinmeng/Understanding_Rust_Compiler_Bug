{"sha": "b72dfb6e2240c888132e10b769880b6a0ad12430", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyZGZiNmUyMjQwYzg4ODEzMmUxMGI3Njk4ODBiNmEwYWQxMjQzMA==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2015-03-12T14:24:48Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2015-03-12T14:24:48Z"}, "message": "trans.c (Attribute_to_gnu): On targets where a function symbol designates a function descriptor...\n\n2015-03-12  Olivier Hainque  <hainque@adacore.com>\n\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Code_Address case>:\n\tOn targets where a function symbol designates a function descriptor,\n\tfetch the function code address from the descriptor.\n\nFrom-SVN: r221391", "tree": {"sha": "df8905e8b80a1654ac38cb2c45731e31b75f8a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df8905e8b80a1654ac38cb2c45731e31b75f8a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b72dfb6e2240c888132e10b769880b6a0ad12430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72dfb6e2240c888132e10b769880b6a0ad12430", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b72dfb6e2240c888132e10b769880b6a0ad12430", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b72dfb6e2240c888132e10b769880b6a0ad12430/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ad1cabfcc545a2074556368ce1e6e8923ce3b59f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad1cabfcc545a2074556368ce1e6e8923ce3b59f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad1cabfcc545a2074556368ce1e6e8923ce3b59f"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "848f84a82eb76bbfcf55e04d25bf800011888a8f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72dfb6e2240c888132e10b769880b6a0ad12430/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72dfb6e2240c888132e10b769880b6a0ad12430/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b72dfb6e2240c888132e10b769880b6a0ad12430", "patch": "@@ -1,3 +1,9 @@\n+2015-03-12  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Code_Address case>:\n+\tOn targets where a function symbol designates a function descriptor,\n+\tfetch the function code address from the descriptor.\n+\n 2015-03-04  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_warn.adb: Minor reformatting."}, {"sha": "2b5485f9c8e975a95ee6fa8ef88be1d09d9863e7", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b72dfb6e2240c888132e10b769880b6a0ad12430/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b72dfb6e2240c888132e10b769880b6a0ad12430/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=b72dfb6e2240c888132e10b769880b6a0ad12430", "patch": "@@ -155,6 +155,14 @@ struct GTY(()) language_function {\n #define f_gnat_ret \\\n   DECL_STRUCT_FUNCTION (current_function_decl)->language->gnat_ret\n \n+/* Expected to be defined from the tm headers, though not always available.\n+   0 indicates that function symbols designate function descriptors on the\n+   target so we don't need to use runtime descriptors of our own.  */\n+\n+#ifndef USE_RUNTIME_DESCRIPTORS\n+#define USE_RUNTIME_DESCRIPTORS (-1)\n+#endif\n+\n /* A structure used to gather together information about a statement group.\n    We use this to gather related statements, for example the \"then\" part\n    of a IF.  In the case where it represents a lexical scope, we may also\n@@ -1725,13 +1733,32 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t\t\t  gnu_result_type, gnu_prefix);\n \n       /* For 'Code_Address, find an inner ADDR_EXPR and mark it so that we\n-\t don't try to build a trampoline.  */\n+\t don't try to build a trampoline.  Then if the function address\n+\t denotes a function descriptor on this target, fetch the code address\n+\t from the descriptor.  */\n       if (attribute == Attr_Code_Address)\n \t{\n \t  gnu_expr = remove_conversions (gnu_result, false);\n \n \t  if (TREE_CODE (gnu_expr) == ADDR_EXPR)\n \t    TREE_NO_TRAMPOLINE (gnu_expr) = TREE_CONSTANT (gnu_expr) = 1;\n+\n+\t  /* On targets on which function symbols denote a function\n+\t     descriptor, the code address is always stored within the\n+\t     first slot of the descriptor.  */\n+\n+\t  if (USE_RUNTIME_DESCRIPTORS == 0)\n+\t    {\n+\t      /* result = * ((result_type *) result),\n+\t\t where we expect result to be of some pointer type already.  */\n+\n+\t      const tree result_ptr_type\n+\t\t= build_pointer_type (gnu_result_type);\n+\n+\t      gnu_result = build_unary_op\n+\t\t(INDIRECT_REF, gnu_result_type,\n+\t\t convert (result_ptr_type, gnu_result));\n+\t    }\n \t}\n \n       /* For 'Access, issue an error message if the prefix is a C++ method"}]}