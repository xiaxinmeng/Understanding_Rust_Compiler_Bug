{"sha": "d777856dc899138fa15029c6f7490614c176d765", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc3Nzg1NmRjODk5MTM4ZmExNTAyOWM2Zjc0OTA2MTRjMTc2ZDc2NQ==", "commit": {"author": {"name": "John David Anglin", "email": "dave@hiauly1.hia.nrc.ca", "date": "2001-07-09T22:55:21Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2001-07-09T22:55:21Z"}, "message": "pa.c (pa_init_machine_status, [...]): Delete.\n\n\t* pa.c (pa_init_machine_status, pa_mark_machine_status,\n\tpa_free_machine_status, hppa_init_pic_save): Delete.\n\t(hppa_pic_save_rtx): New.  Use get_hard_reg_initial_val.\n\t(hppa_profile_hook): Use hppa_pic_save_rtx.\n\t* pa.h (struct machine_function, PIC_OFFSET_TABLE_SAVE_RTX,\n\thppa_init_pic_save): Delete.\n\t(hppa_pic_save_rtx): Declare.\n\t* pa.md (call, call_value, sibcall, sibcall_value,\n\tbuiltin_setjmp_receiver): Use hppa_pic_save_rtx.\n\nFrom-SVN: r43883", "tree": {"sha": "e0324e52e885e3a9f0ba7cff2e37437c7de76130", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0324e52e885e3a9f0ba7cff2e37437c7de76130"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d777856dc899138fa15029c6f7490614c176d765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d777856dc899138fa15029c6f7490614c176d765", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d777856dc899138fa15029c6f7490614c176d765", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d777856dc899138fa15029c6f7490614c176d765/comments", "author": null, "committer": null, "parents": [{"sha": "aa3c0d5934c0246e8a95c0b34fbda41e320c5e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa3c0d5934c0246e8a95c0b34fbda41e320c5e3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa3c0d5934c0246e8a95c0b34fbda41e320c5e3a"}], "stats": {"total": 116, "additions": 25, "deletions": 91}, "files": [{"sha": "cd1ac54fd1dc74c5c22be2d233322e4c44fb2ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d777856dc899138fa15029c6f7490614c176d765/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d777856dc899138fa15029c6f7490614c176d765/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d777856dc899138fa15029c6f7490614c176d765", "patch": "@@ -1,3 +1,15 @@\n+2001-07-09  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n+\n+\t* pa.c (pa_init_machine_status, pa_mark_machine_status,\n+\tpa_free_machine_status, hppa_init_pic_save): Delete.\n+\t(hppa_pic_save_rtx): New.  Use get_hard_reg_initial_val.\n+\t(hppa_profile_hook): Use hppa_pic_save_rtx.\n+\t* pa.h (struct machine_function, PIC_OFFSET_TABLE_SAVE_RTX,\n+\thppa_init_pic_save): Delete.\n+\t(hppa_pic_save_rtx): Declare.\n+\t* pa.md (call, call_value, sibcall, sibcall_value,\n+\tbuiltin_setjmp_receiver): Use hppa_pic_save_rtx.\n+\n 2001-07-09  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/h8300/t-h8300 (LIB1ASMFUNCS): Add _floatdisf and _fixsfdi."}, {"sha": "05de6dd7eddf7772ec60c7540478b1872685da00", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=d777856dc899138fa15029c6f7490614c176d765", "patch": "@@ -35,6 +35,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"reload.h\"\n #include \"expr.h\"\n #include \"c-tree.h\"\n+#include \"integrate.h\"\n #include \"function.h\"\n #include \"obstack.h\"\n #include \"toplev.h\"\n@@ -52,9 +53,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n-static void pa_init_machine_status PARAMS ((struct function *));\n-static void pa_mark_machine_status PARAMS ((struct function *));\n-static void pa_free_machine_status PARAMS ((struct function *));\n static inline rtx force_mode PARAMS ((enum machine_mode, rtx));\n static void pa_combine_instructions PARAMS ((rtx));\n static int pa_can_combine_p PARAMS ((rtx, rtx, rtx, int, rtx, rtx, rtx));\n@@ -202,46 +200,8 @@ override_options ()\n \n   /* Register global variables with the garbage collector.  */\n   pa_add_gc_roots ();\n-\n-  /* Arrange to save and restore machine status around nested functions.  */\n-  init_machine_status = pa_init_machine_status;\n-  mark_machine_status = pa_mark_machine_status;\n-  free_machine_status = pa_free_machine_status;\n-}\n-\n-/* Functions to initialize pic_offset_table_save_rtx.\n-   These will be called, via pointer variables,\n-   from push_function_context and pop_function_context.  */\n-\n-static void\n-pa_init_machine_status (p)\n-     struct function *p;\n-{\n-  p->machine = (machine_function *) xmalloc (sizeof (machine_function));\n-\n-  p->machine->pic_offset_table_save_rtx = NULL_RTX;\n-}\n-\n-static void\n-pa_mark_machine_status (p)\n-     struct function *p;\n-{\n-  if (p->machine)\n-    ggc_mark_rtx (p->machine->pic_offset_table_save_rtx);\n-}\n-\n-static void\n-pa_free_machine_status (p)\n-     struct function *p;\n-{\n-  if (p->machine == NULL)\n-    return;\n-\n-  free (p->machine);\n-  p->machine = NULL;\n }\n \n-\n /* Return non-zero only if OP is a register of mode MODE,\n    or CONST0_RTX.  */\n int\n@@ -3397,23 +3357,10 @@ hppa_expand_epilogue ()\n     FRP (load_reg (2, ret_off, STACK_POINTER_REGNUM));\n }\n \n-/* Set up a callee saved register for the pic offset table register.  */\n-void\n-hppa_init_pic_save ()\n+rtx\n+hppa_pic_save_rtx ()\n {\n-  rtx insn, picreg;\n-\n-  picreg = gen_rtx_REG (word_mode, PIC_OFFSET_TABLE_REGNUM);\n-  PIC_OFFSET_TABLE_SAVE_RTX = gen_reg_rtx (Pmode);\n-  RTX_UNCHANGING_P (PIC_OFFSET_TABLE_SAVE_RTX) = 1;\n-  insn = gen_rtx_SET (VOIDmode, PIC_OFFSET_TABLE_SAVE_RTX, picreg);\n-\n-  /* Emit the insn at the beginning of the function after the prologue.  */\n-  if (tail_recursion_reentry)\n-    emit_insn_before (insn, tail_recursion_reentry);\n-  else\n-    /* We must have been called via PROFILE_HOOK.  */\n-    emit_insn (insn);\n+  return get_hard_reg_initial_val (word_mode, PIC_OFFSET_TABLE_REGNUM);\n }\n \n void\n@@ -3434,9 +3381,6 @@ hppa_profile_hook (label_no)\n \t\t    gen_rtx_PLUS (word_mode, virtual_outgoing_args_rtx,\n \t\t\t\t  GEN_INT (64)));\n \n-  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   emit_move_insn (gen_rtx_REG (word_mode, 26), gen_rtx_REG (word_mode, 2));\n \n #ifndef NO_PROFILE_COUNTERS\n@@ -3495,7 +3439,7 @@ hppa_profile_hook (label_no)\n       if (TARGET_64BIT)\n \tuse_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), arg_pointer_rtx);\n \n-      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n     }\n }\n "}, {"sha": "09d4e14bf8598e0eb5735be627b8355ba121df80", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=d777856dc899138fa15029c6f7490614c176d765", "patch": "@@ -71,12 +71,6 @@ enum architecture_type\n };\n \n struct rtx_def;\n-/* A C structure for machine-specific, per-function data.\n-   This is added to the cfun structure.  */\n-typedef struct machine_function\n-{\n-  struct rtx_def *pic_offset_table_save_rtx;\n-} machine_function;\n \n /* For -march= option.  */\n extern const char *pa_arch_string;\n@@ -517,10 +511,9 @@ extern int target_flags;\n #define PIC_OFFSET_TABLE_REGNUM (TARGET_64BIT ? 27 : 19)\n #define PIC_OFFSET_TABLE_REG_CALL_CLOBBERED 1\n \n-/* Register into which we save the PIC_OFFSET_TABLE_REGNUM so that it\n-   can be restored across function calls.  */\n-#define PIC_OFFSET_TABLE_SAVE_RTX (cfun->machine->pic_offset_table_save_rtx)\n-extern void hppa_init_pic_save PARAMS ((void));\n+/* Function to return the rtx used to save the pic offset table register\n+   across function calls.  */\n+extern struct rtx_def *hppa_pic_save_rtx PARAMS ((void));\n \n #define DEFAULT_PCC_STRUCT_RETURN 0\n "}, {"sha": "3e2efad05272a0cbb4784d2ccdb57184937c40be", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d777856dc899138fa15029c6f7490614c176d765/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=d777856dc899138fa15029c6f7490614c176d765", "patch": "@@ -5697,9 +5697,6 @@\n \t\t    gen_rtx_PLUS (word_mode, virtual_outgoing_args_rtx,\n \t\t\t\t  GEN_INT (64)));\n \n-  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -5728,7 +5725,7 @@\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.  */\n-      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n     }\n   DONE;\n }\")\n@@ -5869,9 +5866,6 @@\n \t\t    gen_rtx_PLUS (word_mode, virtual_outgoing_args_rtx,\n \t\t\t\t  GEN_INT (64)));\n \n-  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   /* Use two different patterns for calls to explicitly named functions\n      and calls through function pointers.  This is necessary as these two\n      types of calls use different calling conventions, and CSE might try\n@@ -5904,7 +5898,7 @@\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.  */\n-      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n     }\n   DONE;\n }\")\n@@ -6067,9 +6061,6 @@\n \n   op = XEXP (operands[0], 0);\n \n-  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_internal_symref (op, operands[1]));\n \n@@ -6079,7 +6070,7 @@\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.  */\n-      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n     }\n   DONE;\n }\")\n@@ -6125,9 +6116,6 @@\n \n   op = XEXP (operands[1], 0);\n \n-  if (flag_pic && PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   /* We do not allow indirect sibling calls.  */\n   call_insn = emit_call_insn (gen_sibcall_value_internal_symref (operands[0],\n \t\t\t\t\t\t\t\t op,\n@@ -6138,7 +6126,7 @@\n \n       /* After each call we must restore the PIC register, even if it\n \t doesn't appear to be used.  */\n-      emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+      emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n     }\n   DONE;\n }\")\n@@ -7135,12 +7123,9 @@\n   \"flag_pic\"\n   \"\n {\n-  if (PIC_OFFSET_TABLE_SAVE_RTX == NULL_RTX)\n-    hppa_init_pic_save ();\n-\n   /* Restore the PIC register.  Hopefully, this will always be from\n      a stack slot.  The only registers that are valid after a\n      builtin_longjmp are the stack and frame pointers.  */\n-  emit_move_insn (pic_offset_table_rtx, PIC_OFFSET_TABLE_SAVE_RTX);\n+  emit_move_insn (pic_offset_table_rtx, hppa_pic_save_rtx ());\n   DONE;\n }\")"}]}