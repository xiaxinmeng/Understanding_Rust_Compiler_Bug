{"sha": "11202768fe292f31b5c1b35e7a7369e6377bf5ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyMDI3NjhmZTI5MmYzMWI1YzFiMzVlN2E3MzY5ZTYzNzdiZjVmZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2007-04-10T10:38:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2007-04-10T10:38:50Z"}, "message": "PR libstdc++/28277 (partial: vstring bits)\n\n2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28277 (partial: vstring bits)\n\t* include/bits/ostream_insert.h: New.\n\t* include/Makefile.am: Add.\n\t* include/ext/vstring.h (operator<<(basic_ostream<>&,\n\tconst __versa_string<>&): Forward to __ostream_insert.\n\t* include/bits/basic_string.h (operator<<(basic_ostream<>&,\n\tconst string<>&)): Likewise.\n\t* include/std/ostream (operator<<(basic_ostream<>&, _CharT),\n\toperator<<(basic_ostream<char,>&, char), operator<<(basic_ostream<>&,\n\tconst _CharT*), operator<<(basic_ostream<char,>&, const char*)):\n\tLikewise.\n\t* include/ext/vstring.tcc (operator<<(basic_ostream<>&,\n\tconst __versa_string<>&)): Remove.\n\t(class basic_ostream): Remove friend declarations.\n\t(basic_ostream<>::_M_write(char_type, streamsize),\n\t_M_insert(const char_type*, streamsize)): Remove.\n\t* include/bits/ostream.tcc (_M_insert(const char_type*, streamsize)):\n\tRemove definition.\n\t(operator<<(basic_ostream<>&, const char*)): Use __ostream_insert.\n\t* config/abi/pre/gnu.ver: Adjust.\n\t* src/ostream-inst.cc: Add __ostream_insert instantiations.\n\t* include/bits/locale_facets.h (__pad<>::_S_pad): Remove __num\n\tparameter.\n\t* include/bits/locale_facets.tcc (__pad<>::_S_pad): Adjust.\n\t(num_put<>::_M_pad(_CharT, streamsize, ios_base&, _CharT*,\n\tconst _CharT*, int&)): Likewise.\n\t* include/Makefile.in: Rebuild.\n\t* testsuite/ext/vstring/inserters_extractors/char/28277.cc: New.\n\t* testsuite/ext/vstring/inserters_extractors/wchar_t/28277.cc: New.\n\n\t* include/ext/vstring_util.h: Do not include the whole <locale>.\n\t* include/ext/vstring.tcc (operator>>(basic_istream<>&,\n\t__versa_string<>&, getline(basic_istream<>&, __versa_string<>&,\n\t_CharT)): Tweak to refer to ios_base as a base of istream; do not\n\trefer to non-standard types of istream.\n\t* include/bits/istream.tcc (operator>>(basic_istream<>&, _CharT*),\n\tws(basic_istream<>&)): Do not refer to non-standard types of istream.\n\t* include/std/bitset (operator>>(std::basic_istream<>&, bitset<>&)):\n\tAvoid using basic_streambuf<>*.\n\n\t* include/bits/istream.tcc (operator>>(basic_istream<>&,\n\tbasic_string<>&), getline(basic_istream<>&, basic_string<>&, _CharT)):\n\tMove...\n\t* include/bits/basic_string.tcc: ... here; tweak to refer to ios_base\n\tas a base of istream; do not refer to non-standard types of istream.\n\t* include/std/string: Tweak includes.\n\n\t* include/ext/type_traits.h (__is_null_pointer): Add.\n\t* include/ext/rc_string_base.h: Use it.\n\t* include/ext/sso_string_base.h: Likewise.\n\t* include/bits/basic_string.tcc (__is_null_pointer): Remove, use\n\tthe above.\n\t* include/ext/vstring_util.h (__vstring_utility<>::_S_is_null_pointer):\n\tRemove.\n\nFrom-SVN: r123692", "tree": {"sha": "c2f36c400bda33a004dbc1bd37ecfae118cdf756", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2f36c400bda33a004dbc1bd37ecfae118cdf756"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11202768fe292f31b5c1b35e7a7369e6377bf5ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11202768fe292f31b5c1b35e7a7369e6377bf5ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11202768fe292f31b5c1b35e7a7369e6377bf5ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11202768fe292f31b5c1b35e7a7369e6377bf5ff/comments", "author": null, "committer": null, "parents": [{"sha": "3117d1b5093fcb25c3cae1853e510ccce57ba712", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3117d1b5093fcb25c3cae1853e510ccce57ba712", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3117d1b5093fcb25c3cae1853e510ccce57ba712"}], "stats": {"total": 801, "additions": 482, "deletions": 319}, "files": [{"sha": "410f4fc4817c294b8d2e572e77a47fe123b9c71d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -1,3 +1,60 @@\n+2007-04-10  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28277 (partial: vstring bits)\n+\t* include/bits/ostream_insert.h: New.\n+\t* include/Makefile.am: Add.\n+\t* include/ext/vstring.h (operator<<(basic_ostream<>&,\n+\tconst __versa_string<>&): Forward to __ostream_insert.\n+\t* include/bits/basic_string.h (operator<<(basic_ostream<>&,\n+\tconst string<>&)): Likewise.\n+\t* include/std/ostream (operator<<(basic_ostream<>&, _CharT),\n+\toperator<<(basic_ostream<char,>&, char), operator<<(basic_ostream<>&,\n+\tconst _CharT*), operator<<(basic_ostream<char,>&, const char*)):\n+\tLikewise.\n+\t* include/ext/vstring.tcc (operator<<(basic_ostream<>&,\n+\tconst __versa_string<>&)): Remove.\n+\t(class basic_ostream): Remove friend declarations.\n+\t(basic_ostream<>::_M_write(char_type, streamsize),\n+\t_M_insert(const char_type*, streamsize)): Remove.\n+\t* include/bits/ostream.tcc (_M_insert(const char_type*, streamsize)):\n+\tRemove definition.\n+\t(operator<<(basic_ostream<>&, const char*)): Use __ostream_insert.\n+\t* config/abi/pre/gnu.ver: Adjust.\n+\t* src/ostream-inst.cc: Add __ostream_insert instantiations.\n+\t* include/bits/locale_facets.h (__pad<>::_S_pad): Remove __num\n+\tparameter.\n+\t* include/bits/locale_facets.tcc (__pad<>::_S_pad): Adjust.\n+\t(num_put<>::_M_pad(_CharT, streamsize, ios_base&, _CharT*,\n+\tconst _CharT*, int&)): Likewise.\n+\t* include/Makefile.in: Rebuild.\n+\t* testsuite/ext/vstring/inserters_extractors/char/28277.cc: New.\n+\t* testsuite/ext/vstring/inserters_extractors/wchar_t/28277.cc: New.\n+\n+\t* include/ext/vstring_util.h: Do not include the whole <locale>.\n+\t* include/ext/vstring.tcc (operator>>(basic_istream<>&,\n+\t__versa_string<>&, getline(basic_istream<>&, __versa_string<>&,\n+\t_CharT)): Tweak to refer to ios_base as a base of istream; do not\n+\trefer to non-standard types of istream.\n+\t* include/bits/istream.tcc (operator>>(basic_istream<>&, _CharT*),\n+\tws(basic_istream<>&)): Do not refer to non-standard types of istream.\n+\t* include/std/bitset (operator>>(std::basic_istream<>&, bitset<>&)):\n+\tAvoid using basic_streambuf<>*.\n+\n+\t* include/bits/istream.tcc (operator>>(basic_istream<>&,\n+\tbasic_string<>&), getline(basic_istream<>&, basic_string<>&, _CharT)):\n+\tMove...\n+\t* include/bits/basic_string.tcc: ... here; tweak to refer to ios_base\n+\tas a base of istream; do not refer to non-standard types of istream.\n+\t* include/std/string: Tweak includes.\n+\n+\t* include/ext/type_traits.h (__is_null_pointer): Add.\n+\t* include/ext/rc_string_base.h: Use it.\n+\t* include/ext/sso_string_base.h: Likewise.\n+\t* include/bits/basic_string.tcc (__is_null_pointer): Remove, use\n+\tthe above.\n+\t* include/ext/vstring_util.h (__vstring_utility<>::_S_is_null_pointer):\n+\tRemove.\n+\n 2007-04-09  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/tr1/type_traits_fwd.h (__is_union_or_class): Remove."}, {"sha": "1748f3addb54f22d870d90b6057375efc8d3a3cf", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -694,8 +694,7 @@ GLIBCXX_3.4.9 {\n \n     _ZSt21__copy_streambufs_eofI[cw]St11char_traitsI[cw]EE[il]PSt15basic_streambuf*;\n \n-    _ZNSo9_M_insertEPKc[il];\n-    _ZNSt13basic_ostreamIwSt11char_traitsIwEE9_M_insertEPKw[il];\n+    _ZSt16__ostream_insert*;\n \n     _ZN11__gnu_debug19_Safe_sequence_base12_M_get_mutexEv;\n     _ZN11__gnu_debug19_Safe_iterator_base16_M_attach_singleEPNS_19_Safe_sequence_baseEb;"}, {"sha": "dd79459b14cc25feddfe8e73cd3f9118dfad24f7", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -94,6 +94,7 @@ bits_headers = \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\"}, {"sha": "e8290012458c28cf213985ff433ab915536a32cf", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -328,6 +328,7 @@ bits_headers = \\\n \t${bits_srcdir}/localefwd.h \\\n \t${bits_srcdir}/mask_array.h \\\n \t${bits_srcdir}/ostream.tcc \\\n+\t${bits_srcdir}/ostream_insert.h \\\n \t${bits_srcdir}/postypes.h \\\n \t${bits_srcdir}/stream_iterator.h \\\n \t${bits_srcdir}/streambuf_iterator.h \\"}, {"sha": "a42e290776c3b1337e9b1ad0ab4c0f1dd0bf5e06", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -2414,7 +2414,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 586. string inserter not a formatted function\n-      return __os._M_insert(__str.data(), __str.size());\n+      return __ostream_insert(__os, __str.data(), __str.size());\n     }\n \n   /**"}, {"sha": "7483371cfdb76652d1877d954252686f84fa1808", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 128, "deletions": 11, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -48,16 +48,6 @@\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n-  template<typename _Type>\n-    inline bool\n-    __is_null_pointer(_Type* __ptr)\n-    { return __ptr == 0; }\n-\n-  template<typename _Type>\n-    inline bool\n-    __is_null_pointer(_Type)\n-    { return false; }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc>\n     const typename basic_string<_CharT, _Traits, _Alloc>::size_type\n     basic_string<_CharT, _Traits, _Alloc>::\n@@ -142,7 +132,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  return _S_empty_rep()._M_refdata();\n #endif\n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n+\tif (__builtin_expect(__gnu_cxx::__is_null_pointer(__beg)\n+\t\t\t     && __beg != __end, 0))\n \t  __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n \n \tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n@@ -972,6 +963,132 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __r;\n     }\n \n+  // 21.3.7.9 basic_string::getline and operators\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_istream<_CharT, _Traits>&\n+    operator>>(basic_istream<_CharT, _Traits>& __in,\n+\t       basic_string<_CharT, _Traits, _Alloc>& __str)\n+    {\n+      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n+      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;\n+      typedef typename __istream_type::ios_base         __ios_base;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+      typedef ctype<_CharT>\t\t\t\t__ctype_type;\n+      typedef typename __ctype_type::ctype_base         __ctype_base;\n+\n+      __size_type __extracted = 0;\n+      typename __ios_base::iostate __err = __ios_base::goodbit;\n+      typename __istream_type::sentry __cerb(__in, false);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      // Avoid reallocation for common case.\n+\t      __str.erase();\n+\t      _CharT __buf[128];\n+\t      __size_type __len = 0;\t      \n+\t      const streamsize __w = __in.width();\n+\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n+\t\t                              : __str.max_size();\n+\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __int_type __c = __in.rdbuf()->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !_Traits::eq_int_type(__c, __eof)\n+\t\t     && !__ct.is(__ctype_base::space,\n+\t\t\t\t _Traits::to_char_type(__c)))\n+\t\t{\n+\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n+\t\t    {\n+\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n+\t\t      __len = 0;\n+\t\t    }\n+\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __in.rdbuf()->snextc();\n+\t\t}\n+\t      __str.append(__buf, __len);\n+\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__err |= __ios_base::eofbit;\n+\t      __in.width(0);\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(__ios_base::badbit);\n+\t    }\n+\t}\n+      // 211.  operator>>(istream&, string&) doesn't set failbit\n+      if (!__extracted)\n+\t__err |= __ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>& __in,\n+\t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\n+    {\n+      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n+      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;\n+      typedef typename __istream_type::ios_base         __ios_base;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n+      typedef typename __string_type::size_type\t\t__size_type;\n+\n+      __size_type __extracted = 0;\n+      const __size_type __n = __str.max_size();\n+      typename __ios_base::iostate __err = __ios_base::goodbit;\n+      typename __istream_type::sentry __cerb(__in, true);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      __str.erase();\n+\t      const __int_type __idelim = _Traits::to_int_type(__delim);\n+\t      const __int_type __eof = _Traits::eof();\n+\t      __int_type __c = __in.rdbuf()->sgetc();\n+\n+\t      while (__extracted < __n\n+\t\t     && !_Traits::eq_int_type(__c, __eof)\n+\t\t     && !_Traits::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  __str += _Traits::to_char_type(__c);\n+\t\t  ++__extracted;\n+\t\t  __c = __in.rdbuf()->snextc();\n+\t\t}\n+\n+\t      if (_Traits::eq_int_type(__c, __eof))\n+\t\t__err |= __ios_base::eofbit;\n+\t      else if (_Traits::eq_int_type(__c, __idelim))\n+\t\t{\n+\t\t  ++__extracted;\t\t  \n+\t\t  __in.rdbuf()->sbumpc();\n+\t\t}\n+\t      else\n+\t\t__err |= __ios_base::failbit;\n+\t    }\n+\t  catch(...)\n+\t    {\n+\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+\t      // 91. Description of operator>> and getline() for string<>\n+\t      // might cause endless loop\n+\t      __in._M_setstate(__ios_base::badbit);\n+\t    }\n+\t}\n+      if (!__extracted)\n+\t__err |= __ios_base::failbit;\n+      if (__err)\n+\t__in.setstate(__err);\n+      return __in;\n+    }\n+\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB: This syntax is a GNU extension."}, {"sha": "1ef3253cdbc9ccb34a92a3e2c5f2844241ab47c6", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 5, "deletions": 132, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -785,7 +785,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n     operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)\n     {\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n+      typedef basic_streambuf<_CharT, _Traits>          __streambuf_type;\n       typedef typename _Traits::int_type\t\tint_type;\n       typedef _CharT\t\t\t\t\tchar_type;\n       typedef ctype<_CharT>\t\t\t\t__ctype_type;\n@@ -837,13 +837,13 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   // 27.6.1.4 Standard basic_istream manipulators\n   template<typename _CharT, typename _Traits>\n-    basic_istream<_CharT,_Traits>&\n-    ws(basic_istream<_CharT,_Traits>& __in)\n+    basic_istream<_CharT, _Traits>&\n+    ws(basic_istream<_CharT, _Traits>& __in)\n     {\n       typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n-      typedef typename __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_streambuf<_CharT, _Traits>          __streambuf_type;\n       typedef typename __istream_type::int_type\t\t__int_type;\n+      typedef ctype<_CharT>\t\t\t\t__ctype_type;\n \n       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n       const __int_type __eof = _Traits::eof();\n@@ -859,133 +859,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return __in;\n     }\n \n-  // 21.3.7.9 basic_string::getline and operators\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_istream<_CharT, _Traits>&\n-    operator>>(basic_istream<_CharT, _Traits>& __in,\n-\t       basic_string<_CharT, _Traits, _Alloc>& __str)\n-    {\n-      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef typename __istream_type::int_type\t\t__int_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n-      typedef typename __istream_type::__ctype_type\t__ctype_type;\n-      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;\n-      typedef typename __string_type::size_type\t\t__size_type;\n-\n-      __size_type __extracted = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      typename __istream_type::sentry __cerb(__in, false);\n-      if (__cerb)\n-\t{\n-\t  try\n-\t    {\n-\t      // Avoid reallocation for common case.\n-\t      __str.erase();\n-\t      _CharT __buf[128];\n-\t      __size_type __len = 0;\t      \n-\t      const streamsize __w = __in.width();\n-\t      const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)\n-\t\t                              : __str.max_size();\n-\t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n-\t      const __int_type __eof = _Traits::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n-\n-\t      while (__extracted < __n\n-\t\t     && !_Traits::eq_int_type(__c, __eof)\n-\t\t     && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n-\t\t{\n-\t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n-\t\t    {\n-\t\t      __str.append(__buf, sizeof(__buf) / sizeof(_CharT));\n-\t\t      __len = 0;\n-\t\t    }\n-\t\t  __buf[__len++] = _Traits::to_char_type(__c);\n-\t\t  ++__extracted;\n-\t\t  __c = __sb->snextc();\n-\t\t}\n-\t      __str.append(__buf, __len);\n-\n-\t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      __in.width(0);\n-\t    }\n-\t  catch(...)\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 91. Description of operator>> and getline() for string<>\n-\t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      // 211.  operator>>(istream&, string&) doesn't set failbit\n-      if (!__extracted)\n-\t__err |= ios_base::failbit;\n-      if (__err)\n-\t__in.setstate(__err);\n-      return __in;\n-    }\n-\n-  template<typename _CharT, typename _Traits, typename _Alloc>\n-    basic_istream<_CharT, _Traits>&\n-    getline(basic_istream<_CharT, _Traits>& __in,\n-\t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\n-    {\n-      typedef basic_istream<_CharT, _Traits>\t\t__istream_type;\n-      typedef typename __istream_type::int_type\t\t__int_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n-      typedef typename __istream_type::__ctype_type\t__ctype_type;\n-      typedef basic_string<_CharT, _Traits, _Alloc>\t__string_type;\n-      typedef typename __string_type::size_type\t\t__size_type;\n-\n-      __size_type __extracted = 0;\n-      const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n-      typename __istream_type::sentry __cerb(__in, true);\n-      if (__cerb)\n-\t{\n-\t  try\n-\t    {\n-\t      __str.erase();\n-\t      const __int_type __idelim = _Traits::to_int_type(__delim);\n-\t      const __int_type __eof = _Traits::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n-\n-\t      while (__extracted < __n\n-\t\t     && !_Traits::eq_int_type(__c, __eof)\n-\t\t     && !_Traits::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  __str += _Traits::to_char_type(__c);\n-\t\t  ++__extracted;\n-\t\t  __c = __sb->snextc();\n-\t\t}\n-\n-\t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n-\t      else if (_Traits::eq_int_type(__c, __idelim))\n-\t\t{\n-\t\t  ++__extracted;\t\t  \n-\t\t  __sb->sbumpc();\n-\t\t}\n-\t      else\n-\t\t__err |= ios_base::failbit;\n-\t    }\n-\t  catch(...)\n-\t    {\n-\t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t      // 91. Description of operator>> and getline() for string<>\n-\t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n-\t    }\n-\t}\n-      if (!__extracted)\n-\t__err |= ios_base::failbit;\n-      if (__err)\n-\t__in.setstate(__err);\n-      return __in;\n-    }\n-\n   // Inhibit implicit instantiations for required instantiations,\n   // which are defined via explicit instantiations elsewhere.\n   // NB:  This syntax is a GNU extension."}, {"sha": "69500dc64d252cfb7a023f2444ef1733b147d6e5", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -93,7 +93,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       static void\n       _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,\n \t     const _CharT* __olds, const streamsize __newlen,\n-\t     const streamsize __oldlen, const bool __num);\n+\t     const streamsize __oldlen);\n     };\n \n   // Used by both numeric and monetary facets."}, {"sha": "fa3ce4e3b1401ccac8b84d7f76215e92ff58a87a", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -1,6 +1,7 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n+// 2006, 2007\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -910,8 +911,8 @@ _GLIBCXX_BEGIN_LDBL_NAMESPACE\n     {\n       // [22.2.2.2.2] Stage 3.\n       // If necessary, pad.\n-      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new, __cs,\n-\t\t\t\t\t\t  __w, __len, true);\n+      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,\n+\t\t\t\t\t\t  __cs, __w, __len);\n       __len = static_cast<int>(__w);\n     }\n \n@@ -2503,10 +2504,6 @@ _GLIBCXX_END_LDBL_NAMESPACE\n   // Assumes\n   // __newlen > __oldlen\n   // __news is allocated for __newlen size\n-  // Used by both num_put and ostream inserters: if __num,\n-  // internal-adjusted objects are padded according to the rules below\n-  // concerning 0[xX] and +-, otherwise, exactly as right-adjusted\n-  // ones are.\n \n   // NB: Of the two parameters, _CharT can be deduced from the\n   // function arguments. The other (_Traits) has to be explicitly specified.\n@@ -2515,7 +2512,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,\n \t\t\t\t   _CharT* __news, const _CharT* __olds,\n \t\t\t\t   const streamsize __newlen,\n-\t\t\t\t   const streamsize __oldlen, const bool __num)\n+\t\t\t\t   const streamsize __oldlen)\n     {\n       const size_t __plen = static_cast<size_t>(__newlen - __oldlen);\n       const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;\n@@ -2529,7 +2526,7 @@ _GLIBCXX_END_LDBL_NAMESPACE\n \t}\n \n       size_t __mod = 0;\n-      if (__adjust == ios_base::internal && __num)\n+      if (__adjust == ios_base::internal)\n \t{\n \t  // Pad after the sign, if there is one.\n \t  // Pad after 0[xX], if there is one."}, {"sha": "7788015158d7f16820d9b7326bb5c44ae606776a", "filename": "libstdc++-v3/include/bits/ostream.tcc", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream.tcc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -279,38 +279,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       return *this;\n     }\n \n-  template<typename _CharT, typename _Traits>\n-    basic_ostream<_CharT, _Traits>&\n-    basic_ostream<_CharT, _Traits>::\n-    _M_insert(const char_type* __s, streamsize __n)\n-    {\n-      sentry __cerb(*this);\n-      if (__cerb)\n-\t{\n-\t  try\n-\t    {\n-\t      const streamsize __w = this->width();\n-\t      if (__w > __n)\n-\t\t{\n-\t\t  const bool __left = ((this->flags() & ios_base::adjustfield)\n-\t\t\t\t       == ios_base::left);\n-\t\t  if (!__left)\n-\t\t    _M_write(this->fill(), __w - __n);\n-\t\t  if (this->good())\n-\t\t    _M_write(__s, __n);\n-\t\t  if (__left && this->good())\n-\t\t    _M_write(this->fill(), __w - __n);\n-\t\t}\n-\t      else\n-\t\t_M_write(__s, __n);\n-\t      this->width(0);\n-\t    }\n-\t  catch(...)\n-\t    { this->_M_setstate(ios_base::badbit); }\n-\t}\n-      return *this;\n-    }\n-\n   template<typename _CharT, typename _Traits>\n     basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)\n@@ -338,7 +306,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n \t  try\n \t    {\n-\t      __out._M_insert(__ws, __clen);\n+\t      __ostream_insert(__out, __ws, __clen);\n \t      delete [] __ws;\n \t    }\n \t  catch(...)\n@@ -364,6 +332,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template ostream& operator<<(ostream&, const char*);\n   extern template ostream& operator<<(ostream&, const unsigned char*);\n   extern template ostream& operator<<(ostream&, const signed char*);\n+  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);\n \n   extern template ostream& ostream::_M_insert(long);\n   extern template ostream& ostream::_M_insert(unsigned long);\n@@ -385,6 +354,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   extern template wostream& operator<<(wostream&, char);\n   extern template wostream& operator<<(wostream&, const wchar_t*);\n   extern template wostream& operator<<(wostream&, const char*);\n+  extern template wostream& __ostream_insert(wostream&, const wchar_t*,\n+\t\t\t\t\t     streamsize);\n \n   extern template wostream& wostream::_M_insert(long);\n   extern template wostream& wostream::_M_insert(unsigned long);"}, {"sha": "f3ed801bbc3d92d5d100abb335f361aa9170c58c", "filename": "libstdc++-v3/include/bits/ostream_insert.h", "status": "added", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fostream_insert.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -0,0 +1,114 @@\n+// Helpers for ostream inserters -*- C++ -*-\n+\n+// Copyright (C) 2007 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file ostream_insert.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _OSTREAM_INSERT_H\n+#define _OSTREAM_INSERT_H 1\n+\n+#pragma GCC system_header\n+\n+#include <iosfwd>\n+\n+_GLIBCXX_BEGIN_NAMESPACE(std)\n+\n+  template<typename _CharT, typename _Traits>\n+    inline void\n+    __ostream_write(basic_ostream<_CharT, _Traits>& __out,\n+\t\t    const _CharT* __s, streamsize __n)\n+    {\n+      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      \n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const streamsize __put = __out.rdbuf()->sputn(__s, __n);\n+      if (__put != __n)\n+\t__out.setstate(__ios_base::badbit);\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    inline void\n+    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)\n+    {\n+      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      \n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      const _CharT __c = __out.fill();\n+      for (; __n > 0; --__n)\n+\t{\n+\t  const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);\n+\t  if (_Traits::eq_int_type(__put, _Traits::eof()))\n+\t    {\n+\t      __out.setstate(__ios_base::badbit);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    basic_ostream<_CharT, _Traits>&\n+    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,\n+\t\t     const _CharT* __s, streamsize __n)\n+    {\n+      typedef basic_ostream<_CharT, _Traits>       __ostream_type;\n+      typedef typename __ostream_type::ios_base    __ios_base;\n+\n+      typename __ostream_type::sentry __cerb(__out);\n+      if (__cerb)\n+\t{\n+\t  try\n+\t    {\n+\t      const streamsize __w = __out.width();\n+\t      if (__w > __n)\n+\t\t{\n+\t\t  const bool __left = ((__out.flags()\n+\t\t\t\t\t& __ios_base::adjustfield)\n+\t\t\t\t       == __ios_base::left);\n+\t\t  if (!__left)\n+\t\t    __ostream_fill(__out, __w - __n);\n+\t\t  if (__out.good())\n+\t\t    __ostream_write(__out, __s, __n);\n+\t\t  if (__left && __out.good())\n+\t\t    __ostream_fill(__out, __w - __n);\n+\t\t}\n+\t      else\n+\t\t__ostream_write(__out, __s, __n);\n+\t      __out.width(0);\n+\t    }\n+\t  catch(...)\n+\t    { __out._M_setstate(__ios_base::badbit); }\n+\t}\n+      return __out;\n+    }\n+\n+_GLIBCXX_END_NAMESPACE\n+\n+#endif /* _OSTREAM_INSERT_H */"}, {"sha": "9a6c9a63ad62cbee227bd9f0d1c7449f1f8ed287", "filename": "libstdc++-v3/include/ext/rc_string_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frc_string_base.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -1,6 +1,6 @@\n // Reference-counted versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -545,7 +545,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  return _S_empty_rep._M_refcopy();\n \n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(_S_is_null_pointer(__beg) && __beg != __end, 0))\n+\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n \t  std::__throw_logic_error(__N(\"__rc_string_base::\"\n \t\t\t\t       \"_S_construct NULL not valid\"));\n "}, {"sha": "a97d1e111b64a9a93b4611fe034eea13be860cbd", "filename": "libstdc++-v3/include/ext/sso_string_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fsso_string_base.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -1,6 +1,6 @@\n // Short-string-optimized versatile string base -*- C++ -*-\n \n-// Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n+// Copyright (C) 2005, 2006, 2007 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -405,7 +405,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t\t   std::forward_iterator_tag)\n       {\n \t// NB: Not required, but considered best practice.\n-\tif (__builtin_expect(_S_is_null_pointer(__beg) && __beg != __end, 0))\n+\tif (__builtin_expect(__is_null_pointer(__beg) && __beg != __end, 0))\n \t  std::__throw_logic_error(__N(\"__sso_string_base::\"\n \t\t\t\t       \"_M_construct NULL not valid\"));\n "}, {"sha": "8a896fa00e664c9115ec6315f2ee132434f2d6a1", "filename": "libstdc++-v3/include/ext/type_traits.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Ftype_traits.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -147,6 +147,18 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n   template<>\n     struct __remove_unsigned<wchar_t>;\n \n+\n+  // For use in string and vstring.\n+  template<typename _Type>\n+    inline bool\n+    __is_null_pointer(_Type* __ptr)\n+    { return __ptr == 0; }\n+\n+  template<typename _Type>\n+    inline bool\n+    __is_null_pointer(_Type)\n+    { return false; }\n+\n _GLIBCXX_END_NAMESPACE\n \n #endif "}, {"sha": "b46a6bec607e3137d233e98dc9c5218f39c1f8a4", "filename": "libstdc++-v3/include/ext/vstring.h", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -2139,11 +2139,16 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n    *  writing a C string.\n    */\n   template<typename _CharT, typename _Traits, typename _Alloc,\n-           template <typename, typename, typename> class _Base>\n-    basic_ostream<_CharT, _Traits>&\n+\t   template <typename, typename, typename> class _Base>\n+    inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __os,\n-\t       const __gnu_cxx::__versa_string<_CharT, _Traits,\n-\t                                       _Alloc, _Base>& __str);\n+\t       const __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc,\n+\t       _Base>& __str)\n+    {\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // 586. string inserter not a formatted function\n+      return __ostream_insert(__os, __str.data(), __str.size());\n+    }\n \n   /**\n    *  @brief  Read a line from stream into a string."}, {"sha": "7d03017f80b01ff1ee230949da06b98a1349bcc6", "filename": "libstdc++-v3/include/ext/vstring.tcc", "status": "modified", "additions": 24, "deletions": 58, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring.tcc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -551,16 +551,17 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t       __gnu_cxx::__versa_string<_CharT, _Traits,\n \t                                 _Alloc, _Base>& __str)\n     {\n-      typedef basic_istream<_CharT, _Traits>\t        __istream_type;\n-      typedef typename __istream_type::int_type\t\t__int_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n-      typedef typename __istream_type::__ctype_type\t__ctype_type;\n+      typedef basic_istream<_CharT, _Traits>            __istream_type;\n+      typedef typename __istream_type::ios_base         __ios_base;\n       typedef __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>\n \t                                                __string_type;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n       typedef typename __string_type::size_type\t\t__size_type;\n+      typedef ctype<_CharT>\t\t\t\t__ctype_type;\n+      typedef typename __ctype_type::ctype_base         __ctype_base;\n \n       __size_type __extracted = 0;\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, false);\n       if (__cerb)\n \t{\n@@ -575,12 +576,12 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t                              : __str.max_size();\n \t      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());\n \t      const __int_type __eof = _Traits::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n+\t      __int_type __c = __in.rdbuf()->sgetc();\n \n \t      while (__extracted < __n\n \t\t     && !_Traits::eq_int_type(__c, __eof)\n-\t\t     && !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))\n+\t\t     && !__ct.is(__ctype_base::space,\n+\t\t\t\t _Traits::to_char_type(__c)))\n \t\t{\n \t\t  if (__len == sizeof(__buf) / sizeof(_CharT))\n \t\t    {\n@@ -589,63 +590,30 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    }\n \t\t  __buf[__len++] = _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n-\t\t  __c = __sb->snextc();\n+\t\t  __c = __in.rdbuf()->snextc();\n \t\t}\n \t      __str.append(__buf, __len);\n \n \t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n+\t\t__err |= __ios_base::eofbit;\n \t      __in.width(0);\n \t    }\n \t  catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n \t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n+\t      __in._M_setstate(__ios_base::badbit);\n \t    }\n \t}\n       // 211.  operator>>(istream&, string&) doesn't set failbit\n       if (!__extracted)\n-\t__err |= ios_base::failbit;\n+\t__err |= __ios_base::failbit;\n       if (__err)\n \t__in.setstate(__err);\n       return __in;\n     }      \n \n-  template<typename _CharT, typename _Traits, typename _Alloc,\n-           template <typename, typename, typename> class _Base>\n-    basic_ostream<_CharT, _Traits>&\n-    operator<<(basic_ostream<_CharT, _Traits>& __out,\n-\t       const __gnu_cxx::__versa_string<_CharT, _Traits,\n-\t                                       _Alloc, _Base>& __str)\n-    {\n-      typedef basic_ostream<_CharT, _Traits>            __ostream_type;\n-\n-      typename __ostream_type::sentry __cerb(__out);\n-      if (__cerb)\n-\t{\n-\t  const streamsize __w = __out.width();\n-\t  streamsize __len = static_cast<streamsize>(__str.size());\n-\t  const _CharT* __s = __str.data();\n-\n-\t  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-\t  // 25. String operator<< uses width() value wrong\n-\t  if (__w > __len)\n-\t    {\n-\t      _CharT* __cs = (static_cast<\n-\t\t\t      _CharT*>(__builtin_alloca(sizeof(_CharT) * __w)));\n-\t      __pad<_CharT, _Traits>::_S_pad(__out, __out.fill(), __cs,\n-\t\t\t\t\t     __s, __w, __len, false);\n-\t      __s = __cs;\n-\t      __len = __w;\n-\t    }\n-\t  __out._M_write(__s, __len);\n-\t  __out.width(0);\n-\t}\n-      return __out;\n-    }\n-\n   template<typename _CharT, typename _Traits, typename _Alloc,\n            template <typename, typename, typename> class _Base>\n     basic_istream<_CharT, _Traits>&\n@@ -654,16 +622,15 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _CharT __delim)\n     {\n       typedef basic_istream<_CharT, _Traits>\t        __istream_type;\n-      typedef typename __istream_type::int_type\t\t__int_type;\n-      typedef typename __istream_type::__streambuf_type __streambuf_type;\n-      typedef typename __istream_type::__ctype_type\t__ctype_type;\n+      typedef typename __istream_type::ios_base         __ios_base;\n       typedef __gnu_cxx::__versa_string<_CharT, _Traits, _Alloc, _Base>\n \t                                                __string_type;\n+      typedef typename __istream_type::int_type\t\t__int_type;\n       typedef typename __string_type::size_type\t\t__size_type;\n \n       __size_type __extracted = 0;\n       const __size_type __n = __str.max_size();\n-      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);\n+      typename __ios_base::iostate __err = __ios_base::goodbit;\n       typename __istream_type::sentry __cerb(__in, true);\n       if (__cerb)\n \t{\n@@ -675,8 +642,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t      __size_type __len = 0;\n \t      const __int_type __idelim = _Traits::to_int_type(__delim);\n \t      const __int_type __eof = _Traits::eof();\n-\t      __streambuf_type* __sb = __in.rdbuf();\n-\t      __int_type __c = __sb->sgetc();\n+\t      __int_type __c = __in.rdbuf()->sgetc();\n \n \t      while (__extracted < __n\n \t\t     && !_Traits::eq_int_type(__c, __eof)\n@@ -689,35 +655,35 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t    }\n \t\t  __buf[__len++] = _Traits::to_char_type(__c);\n \t\t  ++__extracted;\n-\t\t  __c = __sb->snextc();\n+\t\t  __c = __in.rdbuf()->snextc();\n \t\t}\n \t      __str.append(__buf, __len);\n \n \t      if (_Traits::eq_int_type(__c, __eof))\n-\t\t__err |= ios_base::eofbit;\n+\t\t__err |= __ios_base::eofbit;\n \t      else if (_Traits::eq_int_type(__c, __idelim))\n \t\t{\n \t\t  ++__extracted;\t\t  \n-\t\t  __sb->sbumpc();\n+\t\t  __in.rdbuf()->sbumpc();\n \t\t}\n \t      else\n-\t\t__err |= ios_base::failbit;\n+\t\t__err |= __ios_base::failbit;\n \t    }\n \t  catch(...)\n \t    {\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 91. Description of operator>> and getline() for string<>\n \t      // might cause endless loop\n-\t      __in._M_setstate(ios_base::badbit);\n+\t      __in._M_setstate(__ios_base::badbit);\n \t    }\n \t}\n       if (!__extracted)\n-\t__err |= ios_base::failbit;\n+\t__err |= __ios_base::failbit;\n       if (__err)\n \t__in.setstate(__err);\n       return __in;\n     }      \n-  \n+\n _GLIBCXX_END_NAMESPACE\n \n #endif // _VSTRING_TCC"}, {"sha": "bd50d7ff21dd1fe27c73a0b8bfd9a810aca985dc", "filename": "libstdc++-v3/include/ext/vstring_util.h", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fvstring_util.h?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -42,7 +42,8 @@\n #include <debug/debug.h>\n #include <bits/stl_function.h>  // For less\n #include <bits/functexcept.h>\n-#include <locale>\n+#include <bits/localefwd.h>\n+#include <bits/ostream_insert.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \n@@ -94,17 +95,6 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n \t  _CharT*  _M_p; // The actual data.\n \t};\n \n-      // For use in _M_construct (_S_construct) forward_iterator_tag.\n-      template<typename _Type>\n-        static bool\n-        _S_is_null_pointer(_Type* __ptr)\n-        { return __ptr == 0; }\n-\n-      template<typename _Type>\n-        static bool\n-        _S_is_null_pointer(_Type)\n-        { return false; }\n-\n       // When __n = 1 way faster than the general multichar\n       // traits_type::copy/move/assign.\n       static void"}, {"sha": "9c869bf555928a1a8bbd07a9c6e86e18e8d7ef7c", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -1240,7 +1240,6 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t{\n \t  try\n \t    {\n-\t      basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n \t      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n \t      // 303. Bitset input operator underspecified\n \t      const char_type __zero = __is.widen('0');\n@@ -1249,7 +1248,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t{\n \t\t  static typename _Traits::int_type __eof = _Traits::eof();\n \t\t  \n-\t\t  typename _Traits::int_type __c1 = __buf->sbumpc();\n+\t\t  typename _Traits::int_type __c1 = __is.rdbuf()->sbumpc();\n \t\t  if (_Traits::eq_int_type(__c1, __eof))\n \t\t    {\n \t\t      __state |= __ios_base::eofbit;\n@@ -1262,8 +1261,9 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD)\n \t\t\t__tmp.push_back('0');\n \t\t      else if (__c2 == __one)\n \t\t\t__tmp.push_back('1');\n-\t\t      else if (_Traits::eq_int_type(__buf->sputbackc(__c2),\n-\t\t\t\t\t\t    __eof))\n+\t\t      else if (_Traits::\n+\t\t\t       eq_int_type(__is.rdbuf()->sputbackc(__c2),\n+\t\t\t\t\t   __eof))\n \t\t\t{\n \t\t\t  __state |= __ios_base::failbit;\n \t\t\t  break;"}, {"sha": "dc859b13c1e99f5aef2ac06615bf199f49e8c39e", "filename": "libstdc++-v3/include/std/ostream", "status": "modified", "additions": 7, "deletions": 46, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fostream?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -44,6 +44,7 @@\n \n #include <ios>\n #include <locale>\n+#include <bits/ostream_insert.h>\n \n _GLIBCXX_BEGIN_NAMESPACE(std)\n \n@@ -74,31 +75,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       \t\t\t\t\t\t\t__num_put_type;\n       typedef ctype<_CharT>           \t\t\t__ctype_type;\n \n-      template<typename _CharT2, typename _Traits2>\n-        friend basic_ostream<_CharT2, _Traits2>&\n-        operator<<(basic_ostream<_CharT2, _Traits2>&, _CharT2);\n- \n-      template<typename _Traits2>\n-        friend basic_ostream<char, _Traits2>&\n-        operator<<(basic_ostream<char, _Traits2>&, char);\n- \n-      template<typename _CharT2, typename _Traits2>\n-        friend basic_ostream<_CharT2, _Traits2>&\n-        operator<<(basic_ostream<_CharT2, _Traits2>&, const _CharT2*);\n- \n-      template<typename _Traits2>\n-        friend basic_ostream<char, _Traits2>&\n-        operator<<(basic_ostream<char, _Traits2>&, const char*);\n- \n-      template<typename _CharT2, typename _Traits2>\n-        friend basic_ostream<_CharT2, _Traits2>&\n-        operator<<(basic_ostream<_CharT2, _Traits2>&, const char*);\n-\n-      template<typename _CharT2, typename _Traits2, typename _Alloc>\n-        friend basic_ostream<_CharT2, _Traits2>&\n-        operator<<(basic_ostream<_CharT2, _Traits2>&,\n-\t\t   const basic_string<_CharT2, _Traits2, _Alloc>&);\n-\n       // [27.6.2.2] constructor/destructor\n       /**\n        *  @brief  Base constructor.\n@@ -320,20 +296,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  this->setstate(ios_base::badbit);\n       }\n \n-      void\n-      _M_write(char_type __c, streamsize __n)\n-      {\n-\tfor (; __n > 0; --__n)\n-\t  {\n-\t    const int_type __put = this->rdbuf()->sputc(__c);\n-\t    if (traits_type::eq_int_type(__put, traits_type::eof()))\n-\t      {\n-\t\tthis->setstate(ios_base::badbit);\n-\t\tbreak;\n-\t      }\n-\t  }\n-      }\n-\n       /**\n        *  @brief  Character string insertion.\n        *  @param  s  The array to insert.\n@@ -407,9 +369,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       template<typename _ValueT>\n         __ostream_type&\n         _M_insert(_ValueT __v);\n-\n-      __ostream_type&\n-      _M_insert(const char_type* __s, streamsize __n);\n     };\n \n   /**\n@@ -493,7 +452,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n     operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)\n-    { return __out._M_insert(&__c, 1); }\n+    { return __ostream_insert(__out, &__c, 1); }\n \n   template<typename _CharT, typename _Traits>\n     inline basic_ostream<_CharT, _Traits>&\n@@ -504,7 +463,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template <class _Traits> \n     inline basic_ostream<char, _Traits>&\n     operator<<(basic_ostream<char, _Traits>& __out, char __c)\n-    { return __out._M_insert(&__c, 1); }\n+    { return __ostream_insert(__out, &__c, 1); }\n \n   // Signed and unsigned\n   template<class _Traits>\n@@ -539,7 +498,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (!__s)\n \t__out.setstate(ios_base::badbit);\n       else\n-\t__out._M_insert(__s, static_cast<streamsize>(_Traits::length(__s)));\n+\t__ostream_insert(__out, __s,\n+\t\t\t static_cast<streamsize>(_Traits::length(__s)));\n       return __out;\n     }\n \n@@ -555,7 +515,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       if (!__s)\n \t__out.setstate(ios_base::badbit);\n       else\n-\t__out._M_insert(__s, static_cast<streamsize>(_Traits::length(__s)));\n+\t__ostream_insert(__out, __s,\n+\t\t\t static_cast<streamsize>(_Traits::length(__s)));\n       return __out;\n     }\n "}, {"sha": "9bf779666c34aeb59218d0af35c53ff7b1760fc2", "filename": "libstdc++-v3/include/std/string", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -47,9 +47,10 @@\n #include <bits/char_traits.h>  // NB: In turn includes stl_algobase.h\n #include <bits/allocator.h>\n #include <bits/cpp_type_traits.h>\n-#include <iosfwd> \t// For operators >>, <<, and getline decls.\n+#include <bits/localefwd.h>    // For operators >>, <<, and getline.\n+#include <bits/ostream_insert.h>\n #include <bits/stl_iterator.h>\n-#include <bits/stl_function.h>  // For less\n+#include <bits/stl_function.h> // For less\n #include <bits/basic_string.h>\n \n #ifndef _GLIBCXX_EXPORT_TEMPLATE"}, {"sha": "33c68151f6cf2e9f2dddb91e33dcf26f720c4207", "filename": "libstdc++-v3/src/ostream-inst.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fostream-inst.cc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -55,6 +55,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template ostream& operator<<(ostream&, _Setbase);\n   template ostream& operator<<(ostream&, _Setprecision);\n   template ostream& operator<<(ostream&, _Setw);\n+  template ostream& __ostream_insert(ostream&, const char*, streamsize);\n \n   template ostream& ostream::_M_insert(long);\n   template ostream& ostream::_M_insert(unsigned long);\n@@ -83,6 +84,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template wostream& operator<<(wostream&, _Setbase);\n   template wostream& operator<<(wostream&, _Setprecision);\n   template wostream& operator<<(wostream&, _Setw);\n+  template wostream& __ostream_insert(wostream&, const wchar_t*, streamsize);\n \n   template wostream& wostream::_M_insert(long);\n   template wostream& wostream::_M_insert(unsigned long);"}, {"sha": "f76a2c4f62b846ab4d6416600d42353c05f7a8c0", "filename": "libstdc++-v3/testsuite/ext/vstring/inserters_extractors/char/28277.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fchar%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fchar%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fchar%2F28277.cc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -0,0 +1,48 @@\n+// 2007-04-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ostream>\n+#include <sstream>\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  ostringstream oss_01;\n+  const __gnu_cxx::__vstring str_01(50, 'a');\n+\n+  oss_01.width(20000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01;\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "405163d0bb912f1c500cc95f78e99cd4eadc51b5", "filename": "libstdc++-v3/testsuite/ext/vstring/inserters_extractors/wchar_t/28277.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fwchar_t%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11202768fe292f31b5c1b35e7a7369e6377bf5ff/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fwchar_t%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fvstring%2Finserters_extractors%2Fwchar_t%2F28277.cc?ref=11202768fe292f31b5c1b35e7a7369e6377bf5ff", "patch": "@@ -0,0 +1,48 @@\n+// 2007-04-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2007 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+#include <ostream>\n+#include <sstream>\n+#include <ext/vstring.h>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  bool test __attribute__((unused)) = true;\n+\n+  wostringstream oss_01;\n+  const __gnu_cxx::__wvstring str_01(50, L'a');\n+\n+  oss_01.width(5000000);\n+  const streamsize width = oss_01.width();\n+\n+  oss_01 << str_01;\n+\n+  VERIFY( oss_01.good() );\n+  VERIFY( oss_01.str().size() == width );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}