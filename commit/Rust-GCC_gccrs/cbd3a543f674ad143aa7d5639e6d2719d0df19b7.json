{"sha": "cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JkM2E1NDNmNjc0YWQxNDNhYTdkNTYzOWU2ZDI3MTlkMGRmMTliNw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2015-12-02T10:56:15Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2015-12-02T10:56:15Z"}, "message": "rs6000: Optimise SImode cstore on 64-bit\n\nOn 64-bit we can do comparisons of 32-bit values by extending those\nvalues to 64-bit, subtracting them, and then getting the high bit of\nthe result.  For registers this is always cheaper than using the carry\nbit sequence; and if the comparison involves a constant, this is cheaper\nthan the sequence we previously generated in half of the cases (and the\nsame cost in the other cases).\n\nAfter this, the only sequence left that is using the mfcr insn is the\none doing signed comparison of Pmode registers.\n\nFrom-SVN: r231165", "tree": {"sha": "91068602631c3d28713bc7e74bbf6d0319a4358c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91068602631c3d28713bc7e74bbf6d0319a4358c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbd3a543f674ad143aa7d5639e6d2719d0df19b7/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1a99e748a310e31176736ed34aab012c7464efd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a99e748a310e31176736ed34aab012c7464efd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a99e748a310e31176736ed34aab012c7464efd0"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "58c472868ed9c7d1b7d3ead40595cc72c57ca121", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd3a543f674ad143aa7d5639e6d2719d0df19b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd3a543f674ad143aa7d5639e6d2719d0df19b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "patch": "@@ -1,3 +1,8 @@\n+2015-12-02  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.md (cstore_si_as_di): New expander.\n+\t(cstore<mode>4): Use it.\n+\n 2015-12-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/68625"}, {"sha": "26b0962ae7d4c62a85121f17538497f3faa8cd1b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbd3a543f674ad143aa7d5639e6d2719d0df19b7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbd3a543f674ad143aa7d5639e6d2719d0df19b7/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cbd3a543f674ad143aa7d5639e6d2719d0df19b7", "patch": "@@ -10564,6 +10564,51 @@\n   DONE;\n })\n \n+(define_expand \"cstore_si_as_di\"\n+  [(use (match_operator 1 \"unsigned_comparison_operator\"\n+         [(match_operand:SI 2 \"gpc_reg_operand\")\n+          (match_operand:SI 3 \"reg_or_short_operand\")]))\n+   (clobber (match_operand:SI 0 \"register_operand\"))]\n+  \"\"\n+{\n+  int uns_flag = unsigned_comparison_operator (operands[1], VOIDmode) ? 1 : 0;\n+  enum rtx_code cond_code = signed_condition (GET_CODE (operands[1]));\n+\n+  rtx op1 = gen_reg_rtx (DImode);\n+  rtx op2 = gen_reg_rtx (DImode);\n+  convert_move (op1, operands[2], uns_flag);\n+  convert_move (op2, operands[3], uns_flag);\n+\n+  if (cond_code == GT || cond_code == LE)\n+    {\n+      cond_code = swap_condition (cond_code);\n+      std::swap (op1, op2);\n+    }\n+\n+  rtx tmp = gen_reg_rtx (DImode);\n+  rtx tmp2 = gen_reg_rtx (DImode);\n+  emit_insn (gen_subdi3 (tmp, op1, op2));\n+  emit_insn (gen_lshrdi3 (tmp2, tmp, GEN_INT (63)));\n+\n+  rtx tmp3;\n+  switch (cond_code)\n+    {\n+    default:\n+      gcc_unreachable ();\n+    case LT:\n+      tmp3 = tmp2;\n+      break;\n+    case GE:\n+      tmp3 = gen_reg_rtx (DImode);\n+      emit_insn (gen_xordi3 (tmp3, tmp2, const1_rtx));\n+      break;\n+    }\n+\n+  convert_move (operands[0], tmp3, 1);\n+\n+  DONE;\n+})\n+\n (define_expand \"cstore<mode>4_signed_imm\"\n   [(use (match_operator 1 \"signed_comparison_operator\"\n          [(match_operand:GPR 2 \"gpc_reg_operand\")\n@@ -10688,6 +10733,11 @@\n     emit_insn (gen_cstore<mode>4_unsigned (operands[0], operands[1],\n \t\t\t\t\t   operands[2], operands[3]));\n \n+  /* For comparisons smaller than Pmode we can cheaply do things in Pmode.  */\n+  else if (<MODE>mode == SImode && Pmode == DImode)\n+    emit_insn (gen_cstore_si_as_di (operands[0], operands[1],\n+\t\t\t\t    operands[2], operands[3]));\n+\n   /* For signed comparisons against a constant, we can do some simple\n      bit-twiddling.  */\n   else if (signed_comparison_operator (operands[1], VOIDmode)"}]}