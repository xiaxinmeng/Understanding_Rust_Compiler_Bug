{"sha": "a3f94870980063aac37a66443fa6a0a3b0f91706", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmOTQ4NzA5ODAwNjNhYWMzN2E2NjQ0M2ZhNmEwYTNiMGY5MTcwNg==", "commit": {"author": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2011-08-19T08:28:08Z"}, "committer": {"name": "Joey Ye", "email": "jye2@gcc.gnu.org", "date": "2011-08-19T08:28:08Z"}, "message": "re PR target/49437 (interrupt return pop sometimes corrupts sp)\n\n       PR target/49437\n       * config/arm/arm.c (arm_output_epilogue): Properly handle epilogue\n       when stack was realigned in interrupt handler prologue.\n\ntestsuite:\n\n       PR target/49437\n       * gcc.target/arm/handler-align.c: New test.\n       * lib/target-supports.exp (check_effective_target_arm_cortex_m):\n         New Function.\n\nFrom-SVN: r177891", "tree": {"sha": "8281e26538384c97a1c8906992dce3cbfd1ca615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8281e26538384c97a1c8906992dce3cbfd1ca615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f94870980063aac37a66443fa6a0a3b0f91706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f94870980063aac37a66443fa6a0a3b0f91706", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f94870980063aac37a66443fa6a0a3b0f91706", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f94870980063aac37a66443fa6a0a3b0f91706/comments", "author": null, "committer": null, "parents": [{"sha": "96332fd82cc1ec2f4162bf153e37a5b8c5fe9c3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96332fd82cc1ec2f4162bf153e37a5b8c5fe9c3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96332fd82cc1ec2f4162bf153e37a5b8c5fe9c3a"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "7c0c7b52be8555cd4b11286b1c9929161c4e0012", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f94870980063aac37a66443fa6a0a3b0f91706", "patch": "@@ -1,3 +1,9 @@\n+2011-08-19  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n+\n+\tPR target/49437\n+\t* config/arm/arm.c (arm_output_epilogue): Properly handle epilogue\n+\twhen stack was realigned in interrupt handler prologue.\n+\n 2011-08-18  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.c (shadow_tag_warned): Check for _Noreturn."}, {"sha": "3162b30582e772208d28e43261fa12673e277088", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a3f94870980063aac37a66443fa6a0a3b0f91706", "patch": "@@ -15230,6 +15230,7 @@ arm_output_epilogue (rtx sibling)\n \t\t  && !crtl->calls_eh_return\n \t\t  && bit_count(saved_regs_mask) * 4 == count\n \t\t  && !IS_INTERRUPT (func_type)\n+\t\t  && !IS_STACKALIGN (func_type)\n \t\t  && !crtl->tail_call_emit)\n \t\t{\n \t\t  unsigned long mask;"}, {"sha": "0cadc3ccb7d4fd1213f7676aed9ba6ddfc49232f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f94870980063aac37a66443fa6a0a3b0f91706", "patch": "@@ -1,3 +1,10 @@\n+2011-08-19  Joey Ye  <joey.ye@arm.com>\n+\n+\tPR target/49437\n+\t* gcc.target/arm/handler-align.c: New test.\n+\t* lib/target-supports.exp (check_effective_target_arm_cortex_m):\n+\tNew Function.\n+\n 2011-08-19  Joey Ye  <joey.ye@arm.com>\n \n \t* gcc.c-torture/execute/20101011-1.c (DO_TEST): Skip on ARM."}, {"sha": "6c5187b202849579277c1d6340bef9dd1178a7cc", "filename": "gcc/testsuite/gcc.target/arm/handler-align.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fhandler-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fhandler-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fhandler-align.c?ref=a3f94870980063aac37a66443fa6a0a3b0f91706", "patch": "@@ -0,0 +1,42 @@\n+/* Test epilogue of a realigned interrupt handler. */\n+/* { dg-do run } */\n+/* { dg-options \"-mthumb -Os\" } */\n+/* { dg-skip-if \"\" { ! { arm_thumb1_ok || arm_thumb2_ok } } } */\n+/* { dg-require-effective-target arm_cortex_m } */\n+/* { dg-require-effective-target arm_eabi } */\n+\n+extern __attribute__((noreturn)) void abort(void);\n+extern int snprintf(char *, int, const char *, ...);\n+\n+#define BUFF_LEN 256\n+char buff[BUFF_LEN];\n+\n+char *get_buffer(void)\n+{\n+\treturn buff;\n+}\n+\n+void __attribute__((interrupt)) foo(void)\n+{\n+        char *msg = get_buffer();\n+        snprintf(msg, BUFF_LEN, \"%d %p\", 1, buff+BUFF_LEN);\n+}\n+\n+volatile void * save_sp;\n+int main()\n+{\n+\tregister volatile void * sp asm(\"sp\");\n+\t/* Check stack pointer before/after calling the interrupt\n+         * handler. Not equal means that handler doesn't restore\n+         * stack correctly.  */\n+\tsave_sp = sp;\n+\tfoo();\n+\t/* Abort here instead of return non-zero. Due to wrong sp, lr value,\n+\t * returning from main may not work.  */\n+\tif (save_sp != sp)\n+\t{\n+\t\tsp = save_sp;\n+\t\tabort();\n+\t}\n+\treturn 0;\n+}"}, {"sha": "54dc6b60bd58a38462f15b1b9a6a47272aa30819", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f94870980063aac37a66443fa6a0a3b0f91706/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a3f94870980063aac37a66443fa6a0a3b0f91706", "patch": "@@ -2116,6 +2116,19 @@ proc check_effective_target_arm_thumb2 { } {\n     } \"\"]\n }\n \n+# Return 1 if this is an ARM cortex-M profile cpu\n+\n+proc check_effective_target_arm_cortex_m { } {\n+    return [check_no_compiler_messages arm_cortex_m assembly {\n+\t#if !defined(__ARM_ARCH_7M__) \\\n+            && !defined (__ARM_ARCH_7EM__) \\\n+            && !defined (__ARM_ARCH_6M__)\n+\t#error FOO\n+\t#endif\n+\tint i;\n+    } \"-mthumb\"]\n+}\n+\n # Return 1 if the target supports executing NEON instructions, 0\n # otherwise.  Cache the result.\n "}]}