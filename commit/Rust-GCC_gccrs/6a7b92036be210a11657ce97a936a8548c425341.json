{"sha": "6a7b92036be210a11657ce97a936a8548c425341", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE3YjkyMDM2YmUyMTBhMTE2NTdjZTk3YTkzNmE4NTQ4YzQyNTM0MQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-08-04T16:06:17Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-08-04T16:06:17Z"}, "message": "Rename TYPE_ANONYMOUS_P to TYPE_UNNAMED_P.\n\n\t* cp-tree.h (TYPE_UNNAMED_P): Rename from TYPE_ANONYMOUS_P.\n\t(TYPE_WAS_UNNAMED): Rename from TYPE_WAS_ANONYMOUS.\n\t* class.c, decl.c, decl2.c, error.c, lambda.c, mangle.c,\n\tname-lookup.c, parser.c, pt.c, semantics.c, tree.c: Adjust.\n\nFrom-SVN: r239137", "tree": {"sha": "79571d9ae93c399c9bb5811df44a004398233e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79571d9ae93c399c9bb5811df44a004398233e6c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a7b92036be210a11657ce97a936a8548c425341", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7b92036be210a11657ce97a936a8548c425341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a7b92036be210a11657ce97a936a8548c425341", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a7b92036be210a11657ce97a936a8548c425341/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "99676625e65ff23339115525f01a4a7a82e8ac3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99676625e65ff23339115525f01a4a7a82e8ac3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99676625e65ff23339115525f01a4a7a82e8ac3a"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "e7854f7505e2e3cac61c66910aa4496c9eb49410", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -1,5 +1,10 @@\n 2016-08-04  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-tree.h (TYPE_UNNAMED_P): Rename from TYPE_ANONYMOUS_P.\n+\t(TYPE_WAS_UNNAMED): Rename from TYPE_WAS_ANONYMOUS.\n+\t* class.c, decl.c, decl2.c, error.c, lambda.c, mangle.c,\n+\tname-lookup.c, parser.c, pt.c, semantics.c, tree.c: Adjust.\n+\n \tPR c++/72796\n \t* typeck.c (finish_class_member_access_expr): Avoid stripping\n \tSCOPE_REF to dependent base."}, {"sha": "f8349650fe6e4cf2a7eff0aed558887a4d113a37", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -3077,11 +3077,11 @@ finish_struct_anon_r (tree field, bool complain)\n \t the TYPE_DECL that we create implicitly.  You're\n \t allowed to put one anonymous union inside another,\n \t though, so we explicitly tolerate that.  We use\n-\t TYPE_ANONYMOUS_P rather than ANON_AGGR_TYPE_P so that\n+\t TYPE_UNNAMED_P rather than ANON_AGGR_TYPE_P so that\n \t we also allow unnamed types used for defining fields.  */\n       if (DECL_ARTIFICIAL (elt)\n \t  && (!DECL_IMPLICIT_TYPEDEF_P (elt)\n-\t      || TYPE_ANONYMOUS_P (TREE_TYPE (elt))))\n+\t      || TYPE_UNNAMED_P (TREE_TYPE (elt))))\n \tcontinue;\n \n       if (TREE_CODE (elt) != FIELD_DECL)\n@@ -6718,7 +6718,7 @@ find_flexarrays (tree t, flexmems_t *fmem)\n       tree fldtype = TREE_TYPE (fld);\n       if (TREE_CODE (fld) != TYPE_DECL\n \t  && RECORD_OR_UNION_TYPE_P (fldtype)\n-\t  && TYPE_ANONYMOUS_P (fldtype))\n+\t  && TYPE_UNNAMED_P (fldtype))\n \t{\n \t  /* Members of anonymous structs and unions are treated as if\n \t     they were members of the containing class.  Descend into\n@@ -6798,7 +6798,7 @@ diagnose_flexarrays (tree t, const flexmems_t *fmem)\n {\n   /* Members of anonymous structs and unions are considered to be members\n      of the containing struct or union.  */\n-  if (TYPE_ANONYMOUS_P (t) || !fmem->array)\n+  if (TYPE_UNNAMED_P (t) || !fmem->array)\n     return;\n \n   const char *msg = 0;"}, {"sha": "d6fb387aced995026ed0f7a79d10c62200392290", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -761,7 +761,7 @@ struct GTY (()) tree_trait_expr {\n   enum cp_trait_kind kind;\n };\n \n-/* Based off of TYPE_ANONYMOUS_P.  */\n+/* Based off of TYPE_UNNAMED_P.  */\n #define LAMBDA_TYPE_P(NODE) \\\n   (CLASS_TYPE_P (NODE) && CLASSTYPE_LAMBDA_EXPR (NODE))\n \n@@ -1553,7 +1553,7 @@ enum languages { lang_c, lang_cplusplus, lang_java };\n #define TYPE_NAME_LENGTH(NODE) (IDENTIFIER_LENGTH (TYPE_IDENTIFIER (NODE)))\n \n /* Nonzero if NODE has no name for linkage purposes.  */\n-#define TYPE_ANONYMOUS_P(NODE) \\\n+#define TYPE_UNNAMED_P(NODE) \\\n   (OVERLOAD_TYPE_P (NODE) && anon_aggrname_p (TYPE_LINKAGE_IDENTIFIER (NODE)))\n \n /* The _DECL for this _TYPE.  */\n@@ -4116,7 +4116,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n \n /* Define fields and accessors for nodes representing declared names.  */\n \n-#define TYPE_WAS_ANONYMOUS(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->was_anonymous)\n+/* Nonzero if TYPE is an unnamed class with a typedef for linkage purposes.  */\n+#define TYPE_WAS_UNNAMED(NODE) (LANG_TYPE_CLASS_CHECK (NODE)->was_anonymous)\n \n /* C++: all of these are overloaded!  These apply only to TYPE_DECLs.  */\n \n@@ -4270,8 +4271,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n    equivalent to `struct S {}; typedef struct S S;' in C.\n    DECL_IMPLICIT_TYPEDEF_P will hold for the typedef indicated in this\n    example.  In C++, there is a second implicit typedef for each\n-   class, in the scope of `S' itself, so that you can say `S::S'.\n-   DECL_SELF_REFERENCE_P will hold for that second typedef.  */\n+   class, called the injected-class-name, in the scope of `S' itself, so that\n+   you can say `S::S'.  DECL_SELF_REFERENCE_P will hold for that typedef.  */\n #define DECL_IMPLICIT_TYPEDEF_P(NODE) \\\n   (TREE_CODE (NODE) == TYPE_DECL && DECL_LANG_FLAG_2 (NODE))\n #define SET_DECL_IMPLICIT_TYPEDEF_P(NODE) \\"}, {"sha": "04a0df6414d99a3b8dc098aa428eddf3c8121e8b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -4614,7 +4614,7 @@ check_tag_decl (cp_decl_specifier_seq *declspecs,\n     }\n   /* Check for an anonymous union.  */\n   else if (declared_type && RECORD_OR_UNION_CODE_P (TREE_CODE (declared_type))\n-\t   && TYPE_ANONYMOUS_P (declared_type))\n+\t   && TYPE_UNNAMED_P (declared_type))\n     {\n       /* 7/3 In a simple-declaration, the optional init-declarator-list\n \t can be omitted only when declaring a class (clause 9) or\n@@ -10773,7 +10773,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && unqualified_id\n \t  && TYPE_NAME (type)\n \t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n-\t  && TYPE_ANONYMOUS_P (type)\n+\t  && TYPE_UNNAMED_P (type)\n \t  && declspecs->type_definition_p\n \t  && attributes_naming_typedef_ok (*attrlist)\n \t  && cp_type_quals (type) == TYPE_UNQUALIFIED)\n@@ -10785,15 +10785,15 @@ grokdeclarator (const cp_declarator *declarator,\n \t    {\n \t      if (anon_aggrname_p (TYPE_IDENTIFIER (t)))\n \t\t/* We do not rename the debug info representing the\n-\t\t   anonymous tagged type because the standard says in\n+\t\t   unnamed tagged type because the standard says in\n \t\t   [dcl.typedef] that the naming applies only for\n \t\t   linkage purposes.  */\n \t\t/*debug_hooks->set_name (t, decl);*/\n \t\tTYPE_NAME (t) = decl;\n   \t    }\n \n \t  if (TYPE_LANG_SPECIFIC (type))\n-\t    TYPE_WAS_ANONYMOUS (type) = 1;\n+\t    TYPE_WAS_UNNAMED (type) = 1;\n \n \t  /* If this is a typedef within a template class, the nested\n \t     type is a (non-primary) template.  The name for the\n@@ -10802,7 +10802,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type))\n \t      = TYPE_IDENTIFIER (type);\n \n-\t  /* Adjust linkage now that we aren't anonymous anymore.  */\n+\t  /* Adjust linkage now that we aren't unnamed anymore.  */\n \t  reset_type_linkage (type);\n \n \t  /* FIXME remangle member functions; member functions of a"}, {"sha": "1daa9f525d6acfc59c9951bbebb8c8824244b6b2", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -838,7 +838,7 @@ finish_static_data_member_decl (tree decl,\n   else\n     for (tree t = current_class_type; TYPE_P (t);\n \t t = CP_TYPE_CONTEXT (t))\n-      if (TYPE_ANONYMOUS_P (t))\n+      if (TYPE_UNNAMED_P (t))\n \t{\n \t  if (permerror (DECL_SOURCE_LOCATION (decl),\n \t\t\t \"static data member %qD in unnamed class\", decl))\n@@ -1306,7 +1306,7 @@ save_template_attributes (tree *attr_p, tree *decl_p)\n }\n \n /* Return true iff ATTRS are acceptable attributes to be applied in-place\n-   to a typedef which gives a previously anonymous class or enum a name for\n+   to a typedef which gives a previously unnamed class or enum a name for\n    linkage purposes.  */\n \n bool\n@@ -4257,24 +4257,24 @@ no_linkage_error (tree decl)\n   else if (CLASS_TYPE_P (t) && TYPE_BEING_DEFINED (t))\n     /* The type might end up having a typedef name for linkage purposes.  */\n     vec_safe_push (no_linkage_decls, decl);\n-  else if (TYPE_ANONYMOUS_P (t))\n+  else if (TYPE_UNNAMED_P (t))\n     {\n       bool d = false;\n       if (cxx_dialect >= cxx11)\n \td = permerror (DECL_SOURCE_LOCATION (decl), \"%q#D, declared using \"\n-\t\t       \"anonymous type, is used but never defined\", decl);\n+\t\t       \"unnamed type, is used but never defined\", decl);\n       else if (DECL_EXTERN_C_P (decl))\n \t/* Allow this; it's pretty common in C.  */;\n       else if (VAR_P (decl))\n \t/* DRs 132, 319 and 389 seem to indicate types with\n \t   no linkage can only be used to declare extern \"C\"\n \t   entities.  Since it's not always an error in the\n \t   ISO C++ 90 Standard, we only issue a warning.  */\n-\td = warning_at (DECL_SOURCE_LOCATION (decl), 0, \"anonymous type \"\n+\td = warning_at (DECL_SOURCE_LOCATION (decl), 0, \"unnamed type \"\n \t\t\t\"with no linkage used to declare variable %q#D with \"\n \t\t\t\"linkage\", decl);\n       else\n-\td = permerror (DECL_SOURCE_LOCATION (decl), \"anonymous type with no \"\n+\td = permerror (DECL_SOURCE_LOCATION (decl), \"unnamed type with no \"\n \t\t       \"linkage used to declare function %q#D with linkage\",\n \t\t       decl);\n       if (d && is_typedef_decl (TYPE_NAME (t)))"}, {"sha": "36e26cc1b1da407be0c52ad1f8549b9a1ff3453c", "filename": "gcc/cp/error.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -679,9 +679,9 @@ dump_aggr_type (cxx_pretty_printer *pp, tree t, int flags)\n   if (name == 0 || anon_aggrname_p (name))\n     {\n       if (flags & TFF_CLASS_KEY_OR_ENUM)\n-\tpp_string (pp, M_(\"<anonymous>\"));\n+\tpp_string (pp, M_(\"<unnamed>\"));\n       else\n-\tpp_printf (pp, M_(\"<anonymous %s>\"), variety);\n+\tpp_printf (pp, M_(\"<unnamed %s>\"), variety);\n     }\n   else if (LAMBDA_TYPE_P (t))\n     {\n@@ -1745,7 +1745,7 @@ dump_function_name (cxx_pretty_printer *pp, tree t, int flags)\n     {\n       if (LAMBDA_TYPE_P (DECL_CONTEXT (t)))\n \tname = get_identifier (\"<lambda>\");\n-      else if (TYPE_ANONYMOUS_P (DECL_CONTEXT (t)))\n+      else if (TYPE_UNNAMED_P (DECL_CONTEXT (t)))\n \tname = get_identifier (\"<constructor>\");\n       else\n \tname = constructor_name (DECL_CONTEXT (t));"}, {"sha": "abb967a9aaec983f8f41486510d6e552e4063f40", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -134,7 +134,7 @@ begin_lambda_type (tree lambda)\n \n   {\n     /* Unique name.  This is just like an unnamed class, but we cannot use\n-       make_anon_name because of certain checks against TYPE_ANONYMOUS_P.  */\n+       make_anon_name because of certain checks against TYPE_UNNAMED_P.  */\n     tree name;\n     name = make_lambda_name ();\n "}, {"sha": "b6c96283f4fee5ec62d58b100cfefcc7d7c12427", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -1320,7 +1320,7 @@ write_unqualified_name (tree decl)\n       tree type = TREE_TYPE (decl);\n \n       if (TREE_CODE (decl) == TYPE_DECL\n-          && TYPE_ANONYMOUS_P (type))\n+          && TYPE_UNNAMED_P (type))\n         write_unnamed_type_name (type);\n       else if (TREE_CODE (decl) == TYPE_DECL\n                && LAMBDA_TYPE_P (type))\n@@ -1449,7 +1449,7 @@ nested_anon_class_index (tree type)\n \ttree memtype = TREE_TYPE (member);\n \tif (memtype == type)\n \t  return index;\n-\telse if (TYPE_ANONYMOUS_P (memtype))\n+\telse if (TYPE_UNNAMED_P (memtype))\n \t  ++index;\n       }\n \n@@ -1734,7 +1734,7 @@ static int\n local_class_index (tree entity)\n {\n   int ix, discriminator = 0;\n-  tree name = (TYPE_ANONYMOUS_P (entity) ? NULL_TREE\n+  tree name = (TYPE_UNNAMED_P (entity) ? NULL_TREE\n \t       : TYPE_IDENTIFIER (entity));\n   tree ctx = TYPE_CONTEXT (entity);\n   for (ix = 0; ; ix++)\n@@ -1744,7 +1744,7 @@ local_class_index (tree entity)\n \treturn discriminator;\n       if (TYPE_CONTEXT (type) == ctx\n \t  && (name ? TYPE_IDENTIFIER (type) == name\n-\t      : TYPE_ANONYMOUS_P (type)))\n+\t      : TYPE_UNNAMED_P (type)))\n \t++discriminator;\n     }\n   gcc_unreachable ();\n@@ -1772,7 +1772,7 @@ discriminator_for_local_entity (tree entity)\n       entity = TREE_TYPE (entity);\n \n       /* Lambdas and unnamed types have their own discriminators.  */\n-      if (LAMBDA_TYPE_P (entity) || TYPE_ANONYMOUS_P (entity))\n+      if (LAMBDA_TYPE_P (entity) || TYPE_UNNAMED_P (entity))\n \treturn 0;\n \n       return local_class_index (entity);"}, {"sha": "11957fd28069c5437ce146d8a6e8d4141bad2cc0", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -2089,7 +2089,7 @@ constructor_name_p (tree name, tree type)\n static GTY(()) int anon_cnt;\n \n /* Return an IDENTIFIER which can be used as a name for\n-   anonymous structs and unions.  */\n+   unnamed structs and unions.  */\n \n tree\n make_anon_name (void)\n@@ -2103,7 +2103,7 @@ make_anon_name (void)\n /* This code is practically identical to that for creating\n    anonymous names, but is just used for lambdas instead.  This isn't really\n    necessary, but it's convenient to avoid treating lambdas like other\n-   anonymous types.  */\n+   unnamed types.  */\n \n static GTY(()) int lambda_cnt = 0;\n "}, {"sha": "72a494dae9e92313e5296c3a5fce3cf444951b55", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -17043,7 +17043,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n   bool nested_being_defined = false;\n   bool new_value_list = false;\n   bool is_new_type = false;\n-  bool is_anonymous = false;\n+  bool is_unnamed = false;\n   tree underlying_type = NULL_TREE;\n   cp_token *type_start_token = NULL;\n   bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;\n@@ -17137,10 +17137,10 @@ cp_parser_enum_specifier (cp_parser* parser)\n       else\n \t{\n \t  identifier = make_anon_name ();\n-\t  is_anonymous = true;\n+\t  is_unnamed = true;\n \t  if (scoped_enum_p)\n \t    error_at (type_start_token->location,\n-\t\t      \"anonymous scoped enum is not allowed\");\n+\t\t      \"unnamed scoped enum is not allowed\");\n \t}\n     }\n   pop_deferring_access_checks ();\n@@ -17321,9 +17321,9 @@ cp_parser_enum_specifier (cp_parser* parser)\n       /* If the next token is not '}', then there are some enumerators.  */\n       else if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))\n \t{\n-\t  if (is_anonymous && !scoped_enum_p)\n+\t  if (is_unnamed && !scoped_enum_p)\n \t    pedwarn (type_start_token->location, OPT_Wpedantic,\n-\t\t     \"ISO C++ forbids empty anonymous enum\");\n+\t\t     \"ISO C++ forbids empty unnamed enum\");\n \t}\n       else\n \tcp_parser_enumerator_list (parser, type);\n@@ -17341,7 +17341,7 @@ cp_parser_enum_specifier (cp_parser* parser)\n \tand additional restrictions apply.  */\n       if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n \t{\n-\t  if (is_anonymous)\n+\t  if (is_unnamed)\n \t    error_at (type_start_token->location,\n \t\t      \"opaque-enum-specifier without name\");\n \t  else if (nested_name_specifier)\n@@ -19347,9 +19347,9 @@ cp_parser_direct_declarator (cp_parser* parser,\n \t\t    else if (IDENTIFIER_TYPENAME_P (unqualified_name))\n \t\t      sfk = sfk_conversion;\n \t\t    else if (/* There's no way to declare a constructor\n-\t\t\t\tfor an anonymous type, even if the type\n+\t\t\t\tfor an unnamed type, even if the type\n \t\t\t\tgot a name for linkage purposes.  */\n-\t\t\t     !TYPE_WAS_ANONYMOUS (class_type)\n+\t\t\t     !TYPE_WAS_UNNAMED (class_type)\n \t\t\t     /* Handle correctly (c++/19200):\n \n \t\t\t\tstruct S {"}, {"sha": "bf729ea3107f7b7457c7fc2e843ac67e5e3acbe1", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -17340,8 +17340,8 @@ check_instantiated_arg (tree tmpl, tree t, tsubst_flags_t complain)\n \t     type deduction to fail.  */\n \t  if (complain & tf_error)\n \t    {\n-\t      if (TYPE_ANONYMOUS_P (nt))\n-\t\terror (\"%qT is/uses anonymous type\", t);\n+\t      if (TYPE_UNNAMED_P (nt))\n+\t\terror (\"%qT is/uses unnamed type\", t);\n \t      else\n \t\terror (\"template argument for %qD uses local type %qT\",\n \t\t       tmpl, t);"}, {"sha": "4bffe6dc8514c8c654fb913c2ab28c3fd89d4c22", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -2916,7 +2916,7 @@ begin_class_definition (tree t)\n   /* Reset the interface data, at the earliest possible\n      moment, as it might have been set via a class foo;\n      before.  */\n-  if (! TYPE_ANONYMOUS_P (t))\n+  if (! TYPE_UNNAMED_P (t))\n     {\n       struct c_fileinfo *finfo = \\\n \tget_fileinfo (LOCATION_FILE (input_location));"}, {"sha": "2e58615e1d721bfc5d45b91e9d3a4960d5cf0f64", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -2353,9 +2353,9 @@ no_linkage_check (tree t, bool relaxed_p)\n \treturn NULL_TREE;\n       /* Fall through.  */\n     case ENUMERAL_TYPE:\n-      /* Only treat anonymous types as having no linkage if they're at\n+      /* Only treat unnamed types as having no linkage if they're at\n \t namespace scope.  This is core issue 966.  */\n-      if (TYPE_ANONYMOUS_P (t) && TYPE_NAMESPACE_SCOPE_P (t))\n+      if (TYPE_UNNAMED_P (t) && TYPE_NAMESPACE_SCOPE_P (t))\n \treturn t;\n \n       for (r = CP_TYPE_CONTEXT (t); ; )"}, {"sha": "95e9c8bd272a272db286dd9a62099a9d04d2fc37", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -553,7 +553,7 @@ encode_aggregate_within (tree type, int curtype, int format, int left,\n      args as a composite struct tag name. */\n   if (name && TREE_CODE (name) == IDENTIFIER_NODE\n       /* Did this struct have a tag?  */\n-      && !TYPE_WAS_ANONYMOUS (type))\n+      && !TYPE_WAS_UNNAMED (type))\n     obstack_grow (&util_obstack,\n \t\t  decl_as_string (type, TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME),\n \t\t  strlen (decl_as_string (type, TFF_DECL_SPECIFIERS | TFF_UNQUALIFIED_NAME)));"}, {"sha": "3883da92afffb5dd5479b159218cd997a8b6945c", "filename": "gcc/testsuite/g++.dg/cpp0x/enum26.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fenum26.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -2,8 +2,8 @@\n // { dg-do compile { target c++11 } }\n // { dg-options \"-pedantic\" }\n \n-enum {};            // { dg-warning \"empty anonymous\" }\n+enum {};            // { dg-warning \"empty unnamed\" }\n \n-enum class {};      // { dg-error \"anonymous\" }\n+enum class {};      // { dg-error \"unnamed\" }\n \n-enum class { x };   // { dg-error \"anonymous\" }\n+enum class { x };   // { dg-error \"unnamed\" }"}, {"sha": "8eff728cc1194a74ad82631cf968df1ecb882f66", "filename": "gcc/testsuite/g++.dg/ext/anon-struct4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fanon-struct4.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -1,5 +1,5 @@\n // PR c++/14401\n \n struct { struct { int& i ; } bar ; } foo ; // { dg-error \"deleted|uninitialized\" \"uninit\" }\n-// { dg-warning \"anonymous\" \"anon\" { target { ! c++11 } } 3 }\n+// { dg-warning \"unnamed\" \"anon\" { target { ! c++11 } } 3 }\n // { dg-message \"should be initialized\" \"ref-uninit\" { target { ! c++11 } } 3 }"}, {"sha": "dbda79fefcf156b0972283846c4831202861a14c", "filename": "gcc/testsuite/g++.dg/lookup/anon2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fanon2.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -4,6 +4,6 @@\n // Make sure we issue a diagnostic if a type with no linkage is used\n // to declare a a variable that has linkage.\n \n-struct { int i; } a; // { dg-warning \"anonymous type\" }\n+struct { int i; } a; // { dg-warning \"unnamed type\" }\n \n void foo() { a.i; }"}, {"sha": "d33eb413ccfa53d8915faa3da4a36c8a7713e3a1", "filename": "gcc/testsuite/g++.dg/other/anon3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fanon3.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -4,4 +4,4 @@\n \n // { dg-do compile }\n \n-enum { a = 3 } x; // { dg-warning \"anonymous type\" \"\" { target { ! c++11 } } }\n+enum { a = 3 } x; // { dg-warning \"unnamed type\" \"\" { target { ! c++11 } } }"}, {"sha": "1ac77a6efe863af10b571fd05d9b1ec24441ca9b", "filename": "gcc/testsuite/g++.dg/spellcheck-fields.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fspellcheck-fields.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -59,7 +59,7 @@ struct has_anon\n \n int test7 (struct has_anon *ptr)\n {\n-  return ptr->s.colour; /* { dg-error \"'struct has_anon::<anonymous>' has no member named 'colour'; did you mean 'color'?\" } */\n+  return ptr->s.colour; /* { dg-error \"'struct has_anon::<unnamed>' has no member named 'colour'; did you mean 'color'?\" } */\n }\n \n int test8 (foo &ref)"}, {"sha": "159a8c71cd860179a5ec7d3fb6c35406436c05f4", "filename": "gcc/testsuite/g++.dg/warn/deprecated-6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated-6.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -68,7 +68,7 @@ int func2(S1 *p)\n   \n   p->u1.field5 = g1 + p->field7;\n   p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated: Please avoid u2\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<anonymous union>::field6' is deprecated: Please avoid field6\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated: Please avoid field6\" \"\" } */\n \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated: Please avoid field8\" \"field8\" { target *-*-* } 71 } */\n }\n "}, {"sha": "0c684efe29d9802ca609cd6d81ee0edadc834f9e", "filename": "gcc/testsuite/g++.dg/warn/deprecated.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a7b92036be210a11657ce97a936a8548c425341/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fdeprecated.C?ref=6a7b92036be210a11657ce97a936a8548c425341", "patch": "@@ -70,7 +70,7 @@ int func2(S1 *p)\n   \n   p->u1.field5 = g1 + p->field7;\n   p->u2.field9;\t\t\t\t/* { dg-warning \"'S1::u2' is deprecated\" \"\" } */\n-  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<anonymous union>::field6' is deprecated\" \"\" } */\n+  return p->u1.field6 + p->field8;\t/* { dg-warning \"'S1::<unnamed union>::field6' is deprecated\" \"\" } */\n   \t\t\t\t\t/* { dg-warning \"'S1::field8' is deprecated\" \"field8\" { target *-*-* } 73 } */\n }\n "}]}