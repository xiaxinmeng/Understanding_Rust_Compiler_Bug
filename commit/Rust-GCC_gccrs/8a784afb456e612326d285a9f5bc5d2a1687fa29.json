{"sha": "8a784afb456e612326d285a9f5bc5d2a1687fa29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE3ODRhZmI0NTZlNjEyMzI2ZDI4NWE5ZjViYzVkMmExNjg3ZmEyOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2011-03-22T22:39:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2011-03-22T22:39:54Z"}, "message": "m32r-opts.h: New.\n\n\t* config/m32r/m32r-opts.h: New.\n\t* config/m32r/m32r.c (m32r_model, m32r_sdata): Remove.\n\t(m32r_handle_option): Don't assert that global structures are in\n\tuse.  Access target_flags and m32r_cache_flush_func via opts\n\tpointer.  Don't handle OPT_mmodel_, OPT_msdata_ or\n\tOPT_mno_flush_trap here.\n\t* config/m32r/m32r.h (Code Models, Small Data Area): Replace by\n\tinclude of m32r-opts.h.\n\t* config/m32r/m32r.opt (config/m32r/m32r-opts.h): New\n\tHeaderInclude entry.\n\t(m32r_model_selected, m32r_sdata_selected): New Variable entries.\n\t(mmodel=): Use Enum and Var.\n\t(m32r_model): New Enum and EnumValue entries.\n\t(mno-flush-trap): Use Var.\n\t(msdata=): Use Enum and Var.\n\t(m32r_sdata): New Enum and EnumValue entries.\n\nFrom-SVN: r171321", "tree": {"sha": "d20d6a85fe62458ab93ac7e82137cd4f7f90cb4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d20d6a85fe62458ab93ac7e82137cd4f7f90cb4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a784afb456e612326d285a9f5bc5d2a1687fa29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a784afb456e612326d285a9f5bc5d2a1687fa29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a784afb456e612326d285a9f5bc5d2a1687fa29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a784afb456e612326d285a9f5bc5d2a1687fa29/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbfc9a8c88c1d941cde0fef79ad51cabff9e741d"}], "stats": {"total": 301, "additions": 173, "deletions": 128}, "files": [{"sha": "3f4cbb2b3a70dc3cfbf1307eb4951d9867fdade3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8a784afb456e612326d285a9f5bc5d2a1687fa29", "patch": "@@ -1,3 +1,22 @@\n+2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/m32r/m32r-opts.h: New.\n+\t* config/m32r/m32r.c (m32r_model, m32r_sdata): Remove.\n+\t(m32r_handle_option): Don't assert that global structures are in\n+\tuse.  Access target_flags and m32r_cache_flush_func via opts\n+\tpointer.  Don't handle OPT_mmodel_, OPT_msdata_ or\n+\tOPT_mno_flush_trap here.\n+\t* config/m32r/m32r.h (Code Models, Small Data Area): Replace by\n+\tinclude of m32r-opts.h.\n+\t* config/m32r/m32r.opt (config/m32r/m32r-opts.h): New\n+\tHeaderInclude entry.\n+\t(m32r_model_selected, m32r_sdata_selected): New Variable entries.\n+\t(mmodel=): Use Enum and Var.\n+\t(m32r_model): New Enum and EnumValue entries.\n+\t(mno-flush-trap): Use Var.\n+\t(msdata=): Use Enum and Var.\n+\t(m32r_sdata): New Enum and EnumValue entries.\n+\n 2011-03-22  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/m32c/m32c.c: Don't include opts.h."}, {"sha": "f8dc2289896a3447b0cdaf76f1413015f4937f08", "filename": "gcc/config/m32r/m32r-opts.h", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-opts.h?ref=8a784afb456e612326d285a9f5bc5d2a1687fa29", "patch": "@@ -0,0 +1,109 @@\n+/* Definitions for option handling for Renesas M32R cpu.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n+   2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef M32R_OPTS_H\n+#define M32R_OPTS_H\n+\n+/* Code Models\n+\n+   Code models are used to select between two choices of two separate\n+   possibilities (address space size, call insn to use):\n+\n+   small: addresses use 24 bits, use bl to make calls\n+   medium: addresses use 32 bits, use bl to make calls (*1)\n+   large: addresses use 32 bits, use seth/add3/jl to make calls (*2)\n+\n+   The fourth is \"addresses use 24 bits, use seth/add3/jl to make calls\" but\n+   using this one doesn't make much sense.\n+\n+   (*1) The linker may eventually be able to relax seth/add3 -> ld24.\n+   (*2) The linker may eventually be able to relax seth/add3/jl -> bl.\n+\n+   Internally these are recorded as TARGET_ADDR{24,32} and\n+   TARGET_CALL{26,32}.\n+\n+   The __model__ attribute can be used to select the code model to use when\n+   accessing particular objects.  */\n+\n+enum m32r_model { M32R_MODEL_SMALL, M32R_MODEL_MEDIUM, M32R_MODEL_LARGE };\n+\n+#define TARGET_MODEL_SMALL  (m32r_model_selected == M32R_MODEL_SMALL)\n+#define TARGET_MODEL_MEDIUM (m32r_model_selected == M32R_MODEL_MEDIUM)\n+#define TARGET_MODEL_LARGE  (m32r_model_selected == M32R_MODEL_LARGE)\n+#define TARGET_ADDR24       (m32r_model_selected == M32R_MODEL_SMALL)\n+#define TARGET_ADDR32       (! TARGET_ADDR24)\n+#define TARGET_CALL26       (! TARGET_CALL32)\n+#define TARGET_CALL32       (m32r_model_selected == M32R_MODEL_LARGE)\n+\n+/* The default is the small model.  */\n+#ifndef M32R_MODEL_DEFAULT\n+#define M32R_MODEL_DEFAULT M32R_MODEL_SMALL\n+#endif\n+\n+/* Small Data Area\n+\n+   The SDA consists of sections .sdata, .sbss, and .scommon.\n+   .scommon isn't a real section, symbols in it have their section index\n+   set to SHN_M32R_SCOMMON, though support for it exists in the linker script.\n+\n+   Two switches control the SDA:\n+\n+   -G NNN        - specifies the maximum size of variable to go in the SDA\n+\n+   -msdata=foo   - specifies how such variables are handled\n+\n+        -msdata=none  - small data area is disabled\n+\n+        -msdata=sdata - small data goes in the SDA, special code isn't\n+                        generated to use it, and special relocs aren't\n+                        generated\n+\n+        -msdata=use   - small data goes in the SDA, special code is generated\n+                        to use the SDA and special relocs are generated\n+\n+   The SDA is not multilib'd, it isn't necessary.\n+   MULTILIB_EXTRA_OPTS is set in tmake_file to -msdata=sdata so multilib'd\n+   libraries have small data in .sdata/SHN_M32R_SCOMMON so programs that use\n+   -msdata=use will successfully link with them (references in header files\n+   will cause the compiler to emit code that refers to library objects in\n+   .data).  ??? There can be a problem if the user passes a -G value greater\n+   than the default and a library object in a header file is that size.\n+   The default is 8 so this should be rare - if it occurs the user\n+   is required to rebuild the libraries or use a smaller value for -G.  */\n+\n+/* Maximum size of variables that go in .sdata/.sbss.\n+   The -msdata=foo switch also controls how small variables are handled.  */\n+#ifndef SDATA_DEFAULT_SIZE\n+#define SDATA_DEFAULT_SIZE 8\n+#endif\n+\n+enum m32r_sdata { M32R_SDATA_NONE, M32R_SDATA_SDATA, M32R_SDATA_USE };\n+\n+#define TARGET_SDATA_NONE  (m32r_sdata_selected == M32R_SDATA_NONE)\n+#define TARGET_SDATA_SDATA (m32r_sdata_selected == M32R_SDATA_SDATA)\n+#define TARGET_SDATA_USE   (m32r_sdata_selected == M32R_SDATA_USE)\n+\n+/* Default is to disable the SDA\n+   [for upward compatibility with previous toolchains].  */\n+#ifndef M32R_SDATA_DEFAULT\n+#define M32R_SDATA_DEFAULT M32R_SDATA_NONE\n+#endif\n+\n+#endif"}, {"sha": "86af3b3a8c979eb5392e25c56f0a46ae094d4be2", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=8a784afb456e612326d285a9f5bc5d2a1687fa29", "patch": "@@ -47,12 +47,6 @@\n /* Array of valid operand punctuation characters.  */\n static char m32r_punct_chars[256];\n \n-/* Selected code model.  */\n-enum m32r_model m32r_model = M32R_MODEL_DEFAULT;\n-\n-/* Selected SDA support.  */\n-enum m32r_sdata m32r_sdata = M32R_SDATA_DEFAULT;\n-\n /* Machine-specific symbol_ref flags.  */\n #define SYMBOL_FLAG_MODEL_SHIFT\t\tSYMBOL_FLAG_MACH_DEP_SHIFT\n #define SYMBOL_REF_MODEL(X) \\\n@@ -225,56 +219,27 @@ struct gcc_target targetm = TARGET_INITIALIZER;\n /* Implement TARGET_HANDLE_OPTION.  */\n \n static bool\n-m32r_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n+m32r_handle_option (struct gcc_options *opts,\n+\t\t    struct gcc_options *opts_set ATTRIBUTE_UNUSED,\n \t\t    const struct cl_decoded_option *decoded,\n \t\t    location_t loc ATTRIBUTE_UNUSED)\n {\n   size_t code = decoded->opt_index;\n-  const char *arg = decoded->arg;\n   int value = decoded->value;\n \n-  gcc_assert (opts == &global_options);\n-  gcc_assert (opts_set == &global_options_set);\n-\n   switch (code)\n     {\n     case OPT_m32r:\n-      target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n-      return true;\n-\n-    case OPT_mmodel_:\n-      if (strcmp (arg, \"small\") == 0)\n-\tm32r_model = M32R_MODEL_SMALL;\n-      else if (strcmp (arg, \"medium\") == 0)\n-\tm32r_model = M32R_MODEL_MEDIUM;\n-      else if (strcmp (arg, \"large\") == 0)\n-\tm32r_model = M32R_MODEL_LARGE;\n-      else\n-\treturn false;\n-      return true;\n-\n-    case OPT_msdata_:\n-      if (strcmp (arg, \"none\") == 0)\n-\tm32r_sdata = M32R_SDATA_NONE;\n-      else if (strcmp (arg, \"sdata\") == 0)\n-\tm32r_sdata = M32R_SDATA_SDATA;\n-      else if (strcmp (arg, \"use\") == 0)\n-\tm32r_sdata = M32R_SDATA_USE;\n-      else\n-\treturn false;\n+      opts->x_target_flags &= ~(MASK_M32R2 | MASK_M32RX);\n       return true;\n \n     case OPT_mno_flush_func:\n-      m32r_cache_flush_func = NULL;\n+      opts->x_m32r_cache_flush_func = NULL;\n       return true;\n \n     case OPT_mflush_trap_:\n       return value <= 15;\n \n-    case OPT_mno_flush_trap:\n-      m32r_cache_flush_trap = -1;\n-      return true;\n-\n     default:\n       return true;\n     }"}, {"sha": "a43e2956c94183c86f9d0304e6358768355da632", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 85, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=8a784afb456e612326d285a9f5bc5d2a1687fa29", "patch": "@@ -194,91 +194,8 @@\n #define TARGET_CPU_DEFAULT 0\n #endif\n \n-/* Code Models\n-\n-   Code models are used to select between two choices of two separate\n-   possibilities (address space size, call insn to use):\n-\n-   small: addresses use 24 bits, use bl to make calls\n-   medium: addresses use 32 bits, use bl to make calls (*1)\n-   large: addresses use 32 bits, use seth/add3/jl to make calls (*2)\n-\n-   The fourth is \"addresses use 24 bits, use seth/add3/jl to make calls\" but\n-   using this one doesn't make much sense.\n-\n-   (*1) The linker may eventually be able to relax seth/add3 -> ld24.\n-   (*2) The linker may eventually be able to relax seth/add3/jl -> bl.\n-\n-   Internally these are recorded as TARGET_ADDR{24,32} and\n-   TARGET_CALL{26,32}.\n-\n-   The __model__ attribute can be used to select the code model to use when\n-   accessing particular objects.  */\n-\n-enum m32r_model { M32R_MODEL_SMALL, M32R_MODEL_MEDIUM, M32R_MODEL_LARGE };\n-\n-extern enum m32r_model m32r_model;\n-#define TARGET_MODEL_SMALL  (m32r_model == M32R_MODEL_SMALL)\n-#define TARGET_MODEL_MEDIUM (m32r_model == M32R_MODEL_MEDIUM)\n-#define TARGET_MODEL_LARGE  (m32r_model == M32R_MODEL_LARGE)\n-#define TARGET_ADDR24       (m32r_model == M32R_MODEL_SMALL)\n-#define TARGET_ADDR32       (! TARGET_ADDR24)\n-#define TARGET_CALL26       (! TARGET_CALL32)\n-#define TARGET_CALL32       (m32r_model == M32R_MODEL_LARGE)\n-\n-/* The default is the small model.  */\n-#ifndef M32R_MODEL_DEFAULT\n-#define M32R_MODEL_DEFAULT M32R_MODEL_SMALL\n-#endif\n-\n-/* Small Data Area\n-\n-   The SDA consists of sections .sdata, .sbss, and .scommon.\n-   .scommon isn't a real section, symbols in it have their section index\n-   set to SHN_M32R_SCOMMON, though support for it exists in the linker script.\n-\n-   Two switches control the SDA:\n-\n-   -G NNN        - specifies the maximum size of variable to go in the SDA\n-\n-   -msdata=foo   - specifies how such variables are handled\n-\n-        -msdata=none  - small data area is disabled\n-\n-        -msdata=sdata - small data goes in the SDA, special code isn't\n-                        generated to use it, and special relocs aren't\n-                        generated\n-\n-        -msdata=use   - small data goes in the SDA, special code is generated\n-                        to use the SDA and special relocs are generated\n-\n-   The SDA is not multilib'd, it isn't necessary.\n-   MULTILIB_EXTRA_OPTS is set in tmake_file to -msdata=sdata so multilib'd\n-   libraries have small data in .sdata/SHN_M32R_SCOMMON so programs that use\n-   -msdata=use will successfully link with them (references in header files\n-   will cause the compiler to emit code that refers to library objects in\n-   .data).  ??? There can be a problem if the user passes a -G value greater\n-   than the default and a library object in a header file is that size.\n-   The default is 8 so this should be rare - if it occurs the user\n-   is required to rebuild the libraries or use a smaller value for -G.  */\n-\n-/* Maximum size of variables that go in .sdata/.sbss.\n-   The -msdata=foo switch also controls how small variables are handled.  */\n-#ifndef SDATA_DEFAULT_SIZE\n-#define SDATA_DEFAULT_SIZE 8\n-#endif\n-\n-enum m32r_sdata { M32R_SDATA_NONE, M32R_SDATA_SDATA, M32R_SDATA_USE };\n-\n-extern enum m32r_sdata m32r_sdata;\n-#define TARGET_SDATA_NONE  (m32r_sdata == M32R_SDATA_NONE)\n-#define TARGET_SDATA_SDATA (m32r_sdata == M32R_SDATA_SDATA)\n-#define TARGET_SDATA_USE   (m32r_sdata == M32R_SDATA_USE)\n-\n-/* Default is to disable the SDA\n-   [for upward compatibility with previous toolchains].  */\n-#ifndef M32R_SDATA_DEFAULT\n-#define M32R_SDATA_DEFAULT M32R_SDATA_NONE\n+#ifndef M32R_OPTS_H\n+#include \"config/m32r/m32r-opts.h\"\n #endif\n \n /* Define this macro as a C expression for the initializer of an array of"}, {"sha": "2f266c29b86d7de0d6f250144ec653a6c54009c4", "filename": "gcc/config/m32r/m32r.opt", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a784afb456e612326d285a9f5bc5d2a1687fa29/gcc%2Fconfig%2Fm32r%2Fm32r.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.opt?ref=8a784afb456e612326d285a9f5bc5d2a1687fa29", "patch": "@@ -1,6 +1,6 @@\n ; Options for the Renesas M32R port of the compiler.\n \n-; Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2007, 2011 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -18,6 +18,17 @@\n ; along with GCC; see the file COPYING3.  If not see\n ; <http://www.gnu.org/licenses/>.\n \n+HeaderInclude\n+config/m32r/m32r-opts.h\n+\n+; Selected code model.\n+Variable\n+enum m32r_model m32r_model_selected = M32R_MODEL_DEFAULT\n+\n+; Selected SDA support.\n+Variable\n+enum m32r_sdata m32r_sdata_selected = M32R_SDATA_DEFAULT\n+\n m32rx\n Target Report RejectNegative Mask(M32RX)\n Compile for the m32rx\n@@ -63,20 +74,44 @@ Target Report RejectNegative InverseMask(LOW_ISSUE_RATE)\n Allow two instructions to be issued per cycle\n \n mmodel=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(m32r_model) Var(m32r_model_selected)\n Code size: small, medium or large\n \n+Enum\n+Name(m32r_model) Type(enum m32r_model)\n+\n+EnumValue\n+Enum(m32r_model) String(small) Value(M32R_MODEL_SMALL)\n+\n+EnumValue\n+Enum(m32r_model) String(medium) Value(M32R_MODEL_MEDIUM)\n+\n+EnumValue\n+Enum(m32r_model) String(large) Value(M32R_MODEL_LARGE)\n+\n mno-flush-func\n Target RejectNegative\n Don't call any cache flush functions\n \n mno-flush-trap\n-Target RejectNegative\n+Target RejectNegative Var(m32r_cache_flush_trap, -1)\n Don't call any cache flush trap\n \n ; mrelax\n ; Target Mask(RELAX)\n \n msdata=\n-Target RejectNegative Joined\n+Target RejectNegative Joined Enum(m32r_sdata) Var(m32r_sdata_selected)\n Small data area: none, sdata, use\n+\n+Enum\n+Name(m32r_sdata) Type(enum m32r_sdata)\n+\n+EnumValue\n+Enum(m32r_sdata) String(none) Value(M32R_SDATA_NONE)\n+\n+EnumValue\n+Enum(m32r_sdata) String(sdata) Value(M32R_SDATA_SDATA)\n+\n+EnumValue\n+Enum(m32r_sdata) String(use) Value(M32R_SDATA_USE)"}]}