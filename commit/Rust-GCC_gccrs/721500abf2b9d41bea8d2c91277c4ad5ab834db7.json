{"sha": "721500abf2b9d41bea8d2c91277c4ad5ab834db7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIxNTAwYWJmMmI5ZDQxYmVhOGQyYzkxMjc3YzRhZDVhYjgzNGRiNw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2018-07-16T14:11:04Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-16T14:11:04Z"}, "message": "[Ada] Spurious possible contraint error warning with No_Exception_Propagation\n\nThis patch corrects an issue whereby spurious unhandled exception warnings on\ninteger literals within static if and case expressions would be emitted when\nthe restriction No_Exception_Propagation is enabled.\n\n------------\n-- Source --\n------------\n\n--  gnat.adc\n\npragma Restrictions (No_Exception_Propagation);\npragma SPARK_Mode (On);\n\n--  pack.ads\n\npackage Pack is\n   procedure Filter (Ret : out Integer);\nend Pack;\n\n--  pack.adb\n\npackage body Pack is\n\n   subtype Nat is Integer range 0 .. 10;\n\n   Default       : constant Nat := 1;\n   User_Override : constant Integer := -1;\n\n   procedure Filter (Ret : out Integer) is\n      Val : constant Nat :=\n              (if User_Override in Nat then\n                  User_Override\n               else\n                  Default);\n   begin\n      Ret := Val;\n   end Filter;\nend Pack;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n& gcc -c -gnatp -gnatwa pack.adb\n\n2018-07-16  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_eval.adb (Eval_Integer_Literal): Add exception for avoiding\n\tchecks on expanded literals within if and case expressions.\n\nFrom-SVN: r262714", "tree": {"sha": "670dcec511ad6f14a5966c391f8a720d3199771e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/670dcec511ad6f14a5966c391f8a720d3199771e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/721500abf2b9d41bea8d2c91277c4ad5ab834db7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721500abf2b9d41bea8d2c91277c4ad5ab834db7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/721500abf2b9d41bea8d2c91277c4ad5ab834db7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/721500abf2b9d41bea8d2c91277c4ad5ab834db7/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c820aca5548d850811e41f7aa85f4a7fb10d6ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c820aca5548d850811e41f7aa85f4a7fb10d6ed"}], "stats": {"total": 16, "additions": 14, "deletions": 2}, "files": [{"sha": "6d8572debd0525c47fbe655e7b6c61f68c3ebf0c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721500abf2b9d41bea8d2c91277c4ad5ab834db7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721500abf2b9d41bea8d2c91277c4ad5ab834db7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=721500abf2b9d41bea8d2c91277c4ad5ab834db7", "patch": "@@ -1,3 +1,8 @@\n+2018-07-16  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_eval.adb (Eval_Integer_Literal): Add exception for avoiding\n+\tchecks on expanded literals within if and case expressions.\n+\n 2018-07-16  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* libgnat/s-wchwts.adb (Wide_String_To_String): Use the appropriate"}, {"sha": "ab85879374ea2178747630f7913b5e2a71378ceb", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/721500abf2b9d41bea8d2c91277c4ad5ab834db7/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/721500abf2b9d41bea8d2c91277c4ad5ab834db7/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=721500abf2b9d41bea8d2c91277c4ad5ab834db7", "patch": "@@ -2720,16 +2720,23 @@ package body Sem_Eval is\n    --  Start of processing for Eval_Integer_Literal\n \n    begin\n-\n       --  If the literal appears in a non-expression context, then it is\n       --  certainly appearing in a non-static context, so check it. This is\n       --  actually a redundant check, since Check_Non_Static_Context would\n       --  check it, but it seems worthwhile to optimize out the call.\n \n-      --  An exception is made for a literal in an if or case expression\n+      --  Additionally, when the literal appears within an if or case\n+      --  expression it must be checked as well. However, due to the literal\n+      --  appearing within a conditional statement, expansion greatly changes\n+      --  the nature of its context and performing some of the checks within\n+      --  Check_Non_Static_Context on an expanded literal may lead to spurious\n+      --  and misleading warnings.\n \n       if (Nkind_In (Parent (N), N_If_Expression, N_Case_Expression_Alternative)\n            or else Nkind (Parent (N)) not in N_Subexpr)\n+        and then (not Nkind_In (Parent (N), N_If_Expression,\n+                                 N_Case_Expression_Alternative)\n+                   or else Comes_From_Source (N))\n         and then not In_Any_Integer_Context\n       then\n          Check_Non_Static_Context (N);"}]}