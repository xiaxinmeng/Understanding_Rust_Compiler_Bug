{"sha": "12a13f016fb663988db80b030c4ef8761dc9c2a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTJhMTNmMDE2ZmI2NjM5ODhkYjgwYjAzMGM0ZWY4NzYxZGM5YzJhOQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-04-13T17:25:22Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-04-13T17:25:22Z"}, "message": "s-secsta.adb, [...]: Fix comment typos.\n\ngcc/ada/\n\n\t* s-secsta.adb, s-sequio.ads, s-shasto.ads,\n\ts-soflin.ads, s-stalib.ads, s-stausa.adb,\n\ts-stausa.ads, s-strxdr.adb, s-taenca.adb, s-taenca.ads,\n\ts-taprob.adb, s-taprop-hpux-dce.adb, s-taprop-irix.adb,\n\ts-taprop-linux.adb, s-taprop-mingw.adb, s-taprop-posix.adb,\n\ts-taprop-solaris.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n\ts-taprop-vxworks.adb, s-taprop.ads, s-tarest.adb,\n\ts-tarest.ads, s-tasini.adb, s-tasini.ads, s-taskin.ads,\n\ts-tasque.ads, s-tassta.adb, s-tassta.ads, s-tasuti.ads,\n\ts-tpoben.adb, s-tpoben.ads, s-tpobop.adb,\n\ts-tpopsp-posix.adb, s-tpopsp-rtems.adb, s-tposen.adb,\n\ts-tposen.ads, s-traceb-hpux.adb, s-traces.ads,\n\ts-trafor-default.ads, s-unstyp.ads, s-utf_32.ads,\n\ts-vaflop.adb, s-vaflop.ads, s-valrea.adb, s-valuti.adb,\n\ts-wchstw.ads, s-wchwts.adb, s-wchwts.ads, scans.ads,\n\tscn.adb, scng.adb, seh_init.c, sem.ads, sem_aggr.adb,\n\tsem_attr.adb, sem_attr.ads, sem_case.adb, sem_case.ads,\n\tsem_cat.adb, sem_cat.ads: Fix comment typos.\n\nFrom-SVN: r134241", "tree": {"sha": "2e22d192c6479c5accd049be839cdb508473587f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e22d192c6479c5accd049be839cdb508473587f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12a13f016fb663988db80b030c4ef8761dc9c2a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a13f016fb663988db80b030c4ef8761dc9c2a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12a13f016fb663988db80b030c4ef8761dc9c2a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12a13f016fb663988db80b030c4ef8761dc9c2a9/comments", "author": null, "committer": null, "parents": [{"sha": "305da3ecc8b8f9c1e62204b73fad3d242276e91d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305da3ecc8b8f9c1e62204b73fad3d242276e91d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305da3ecc8b8f9c1e62204b73fad3d242276e91d"}], "stats": {"total": 359, "additions": 192, "deletions": 167}, "files": [{"sha": "3e4c64edc415b65a0bad367d4854db54e1f36d46", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -1,3 +1,24 @@\n+2008-04-13  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* s-secsta.adb, s-sequio.ads, s-shasto.ads,\n+\ts-soflin.ads, s-stalib.ads, s-stausa.adb,\n+\ts-stausa.ads, s-strxdr.adb, s-taenca.adb, s-taenca.ads,\n+\ts-taprob.adb, s-taprop-hpux-dce.adb, s-taprop-irix.adb,\n+\ts-taprop-linux.adb, s-taprop-mingw.adb, s-taprop-posix.adb,\n+\ts-taprop-solaris.adb, s-taprop-tru64.adb, s-taprop-vms.adb,\n+\ts-taprop-vxworks.adb, s-taprop.ads, s-tarest.adb,\n+\ts-tarest.ads, s-tasini.adb, s-tasini.ads, s-taskin.ads,\n+\ts-tasque.ads, s-tassta.adb, s-tassta.ads, s-tasuti.ads,\n+\ts-tpoben.adb, s-tpoben.ads, s-tpobop.adb,\n+\ts-tpopsp-posix.adb, s-tpopsp-rtems.adb, s-tposen.adb,\n+\ts-tposen.ads, s-traceb-hpux.adb, s-traces.ads,\n+\ts-trafor-default.ads, s-unstyp.ads, s-utf_32.ads,\n+\ts-vaflop.adb, s-vaflop.ads, s-valrea.adb, s-valuti.adb,\n+\ts-wchstw.ads, s-wchwts.adb, s-wchwts.ads, scans.ads,\n+\tscn.adb, scng.adb, seh_init.c, sem.ads, sem_aggr.adb,\n+\tsem_attr.adb, sem_attr.ads, sem_case.adb, sem_case.ads,\n+\tsem_cat.adb, sem_cat.ads: Fix comment typos.\n+\n 2008-04-12  Joel Sherrill  <joel@oarcorp.com>\n \n \tPR ada/35825"}, {"sha": "2b53f5959a413106e43f6947f5bb3e445a7f7ef1", "filename": "gcc/ada/s-secsta.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-secsta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-secsta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-secsta.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -135,7 +135,7 @@ package body System.Secondary_Stack is\n \n    --  For the static case, the secondary stack is a single contiguous\n    --  chunk of storage, carved out of the primary stack, and represented\n-   --  by the following data strcuture\n+   --  by the following data structure\n \n    type Fixed_Stack_Id is record\n       Top : SS_Ptr;\n@@ -237,7 +237,7 @@ package body System.Secondary_Stack is\n             end loop;\n \n             --  Find out if the available memory in the current chunk is\n-            --  sufficient, if not, go to the next one and eventally create\n+            --  sufficient, if not, go to the next one and eventually create\n             --  the necessary room.\n \n             while Chunk.Last - Stack.Top + 1 < Max_Size loop"}, {"sha": "1c8d217befad925103de23a6dd757de2cc09d9ee", "filename": "gcc/ada/s-sequio.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-sequio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-sequio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-sequio.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 1992-2006, Free Software Foundation, Inc.        --\n+--           Copyright (C) 1992-2008, Free Software Foundation, Inc.        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the declaration of the control block used for\n---  Seqential_IO. This must be declared at the outer library level. It also\n+--  Sequential_IO. This must be declared at the outer library level. It also\n --  contains code that is shared between instances of Sequential_IO.\n \n with System.File_Control_Block;"}, {"sha": "fc4055b982643f9a9e8f009a4938b7f2f3ac1947", "filename": "gcc/ada/s-shasto.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-shasto.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-shasto.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-shasto.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1998-2006, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1998-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -31,7 +31,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package manages the shared/persistant storage required for\n+--  This package manages the shared/persistent storage required for\n --  full implementation of variables in Shared_Passive packages, more\n --  precisely variables whose enclosing dynamic scope is a shared\n --  passive package. This implementation is specific to GNAT and GLADE\n@@ -134,7 +134,7 @@\n --    the same stream is used simultaneously, both operations can\n --    terminate abruptly by raising exception Mode_Error because the\n --    stream has been opened in read mode and then in write mode and at\n---    least used by the read opartion. To avoid this unexpected\n+--    least used by the read operation. To avoid this unexpected\n --    behaviour, we introduce a synchronization at the partition level.\n \n --  Note: a special circuit allows the use of stream attributes Read and\n@@ -214,7 +214,7 @@ package System.Shared_Storage is\n    --  the lock is busy.\n \n    procedure Shared_Var_Unlock (Var : String);\n-   --  This procedure releases the shared storage lock obtaind by a\n+   --  This procedure releases the shared storage lock obtained by a\n    --  prior call to the Shared_Mem_Lock procedure, and is to be\n    --  generated as the last operation in the body of a protected\n    --  subprogram."}, {"sha": "324308900ed2cf7bb51c86d5b3ab988439fc9a85", "filename": "gcc/ada/s-soflin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-soflin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-soflin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-soflin.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -107,7 +107,7 @@ package System.Soft_Links is\n      function return String;\n    pragma Favor_Top_Level (Task_Name_Call);\n \n-   --  Suppress checks on all these types, since we know the corrresponding\n+   --  Suppress checks on all these types, since we know the corresponding\n    --  values can never be null (the soft links are always initialized).\n \n    pragma Suppress (Access_Check, No_Param_Proc);"}, {"sha": "9b340ddc2b25f088d13f3d29f311a8e662cb7564", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -116,7 +116,7 @@ package System.Standard_Library is\n \n    --  The following record defines the underlying representation of exceptions\n \n-   --  WARNING! Any changes to this may need to be reflectd in the following\n+   --  WARNING! Any changes to this may need to be reflected in the following\n    --  locations in the compiler and runtime code:\n \n    --    1. The Internal_Exception routine in s-exctab.adb\n@@ -165,7 +165,7 @@ package System.Standard_Library is\n \n    --  Definitions for standard predefined exceptions defined in Standard,\n \n-   --  Why are the Nul's necessary here, seems like they should not be\n+   --  Why are the NULs necessary here, seems like they should not be\n    --  required, since Gigi is supposed to add a Nul to each name ???\n \n    Constraint_Error_Name : constant String := \"CONSTRAINT_ERROR\" & ASCII.NUL;"}, {"sha": "6eb8a0ca6effde7aaa32213fa3dcd462f628eb39", "filename": "gcc/ada/s-stausa.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stausa.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stausa.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---         Copyright (C) 2004-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2004-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -219,7 +219,7 @@ package body System.Stack_Usage is\n \n       --  If variable GNAT_STACK_LIMIT is set, then we will take care of the\n       --  environment task, using GNAT_STASK_LIMIT as the size of the stack.\n-      --  It doens't make sens to process the stack when no bound is set (e.g.\n+      --  It doesn't make sens to process the stack when no bound is set (e.g.\n       --  limit is typically up to 4 GB).\n \n       if Stack_Size_Chars /= Null_Address then"}, {"sha": "b309c3735e8009ebc5e18834bc5f7edeed648880", "filename": "gcc/ada/s-stausa.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stausa.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-stausa.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stausa.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---         Copyright (C) 2004-2007, Free Software Foundation, Inc.          --\n+--         Copyright (C) 2004-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -127,7 +127,7 @@ package System.Stack_Usage is\n    --      this point, it will increase the measured stack size.\n \n    --    Strategy: We could augment this stack frame and see if it changes the\n-   --      measure. However, this error should be negligeable.\n+   --      measure. However, this error should be negligible.\n \n    --   Pattern zone overflow:\n \n@@ -225,7 +225,7 @@ package System.Stack_Usage is\n    --  When this flag is true, then stack analysis is enabled\n \n    procedure Compute_Result (Analyzer : in out Stack_Analyzer);\n-   --  Read the patern zone and deduce the stack usage. It should be called\n+   --  Read the pattern zone and deduce the stack usage. It should be called\n    --  from the same frame as Fill_Stack. If Analyzer.Probe is not null, an\n    --  array of Unsigned_32 with Analyzer.Probe elements is allocated on\n    --  Compute_Result's stack frame. Probe can be used to detect  the error:\n@@ -249,7 +249,7 @@ package System.Stack_Usage is\n    procedure Report_Result (Analyzer : Stack_Analyzer);\n    --  Store the results of the computation in memory, at the address\n    --  corresponding to the symbol __gnat_stack_usage_results. This is not\n-   --  done inside Compute_Resuls in order to use as less stack as possible\n+   --  done inside Compute_Result in order to use as less stack as possible\n    --  within a task.\n \n    procedure Output_Results;\n@@ -281,7 +281,7 @@ private\n       --  Pattern used to recognize untouched memory\n \n       Bottom_Pattern_Mark : Stack_Address;\n-      --  Bound of the pattern area on the stack clostest to the bottom\n+      --  Bound of the pattern area on the stack closest to the bottom\n \n       Top_Pattern_Mark : Stack_Address;\n       --  Topmost bound of the pattern area on the stack\n@@ -334,7 +334,7 @@ private\n      (SP_Low  : Stack_Address;\n       SP_High : Stack_Address) return Natural;\n    pragma Inline (Stack_Size);\n-   --  Return the size of a portion of stack delimeted by SP_High and SP_Low\n+   --  Return the size of a portion of stack delimited by SP_High and SP_Low\n    --  (), i.e. the difference between SP_High and SP_Low. The storage element\n    --  pointed by SP_Low is not included in the size. Inlined to reduce the\n    --  size of the stack used by the instrumentation code."}, {"sha": "7732daadfb1e86269fa89a6ad159fec5eff1c4d5", "filename": "gcc/ada/s-strxdr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-strxdr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-strxdr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-strxdr.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -33,7 +33,7 @@\n \n --  This file is an alternate version of s-stratt.adb based on the XDR\n --  standard. It is especially useful for exchanging streams between two\n---  different systems with different basic type representations and endianess.\n+--  different systems with different basic type representations and endianness.\n \n with Ada.IO_Exceptions;\n with Ada.Streams;              use Ada.Streams;\n@@ -74,8 +74,8 @@ package body System.Stream_Attributes is\n          F_Size       : Integer; --  Fraction bit size\n          E_Last       : Integer; --  Max exponent value\n          F_Mask       : SE;      --  Mask to apply on first fraction byte\n-         E_Bytes      : SEO;     --  N. of exponent bytes completly used\n-         F_Bytes      : SEO;     --  N. of fraction bytes completly used\n+         E_Bytes      : SEO;     --  N. of exponent bytes completely used\n+         F_Bytes      : SEO;     --  N. of fraction bytes completely used\n          F_Bits       : Integer; --  N. of bits used on first fraction word\n       end record;\n "}, {"sha": "a37538b73086e29c4148f7e362d8fb34f4d36248", "filename": "gcc/ada/s-taenca.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taenca.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taenca.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -113,7 +113,7 @@ package body System.Tasking.Entry_Calls is\n    pragma Inline (Poll_Base_Priority_Change_At_Entry_Call);\n    --  A specialized version of Poll_Base_Priority_Change, that does the\n    --  optional entry queue reordering. Has to be called with the Self_ID's\n-   --  ATCB write-locked. May temporariliy release the lock.\n+   --  ATCB write-locked. May temporarily release the lock.\n \n    ---------------------\n    -- Check_Exception --"}, {"sha": "e4449707be0f607ec4622c6fc23c53bb38f5eb75", "filename": "gcc/ada/s-taenca.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taenca.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taenca.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taenca.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---         Copyright (C) 1992-2005, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -70,7 +70,7 @@ package System.Tasking.Entry_Calls is\n    pragma Inline (Try_To_Cancel_Entry_Call);\n    --  Try to cancel async. entry call.\n    --  Effect includes Abort_To_Level and Wait_For_Completion.\n-   --  Cancelled = True iff the cancelation was successful, i.e.,\n+   --  Cancelled = True iff the cancellation was successful, i.e.,\n    --  the call was not Done before this call.\n    --  On return, the call is off-queue and the ATC level is reduced by one.\n "}, {"sha": "ee06529d19e04ecbde8b860d09b218374b29d0f8", "filename": "gcc/ada/s-taprob.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprob.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprob.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprob.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -101,7 +101,7 @@ package body System.Tasking.Protected_Objects is\n       Ceiling_Violation : Boolean;\n \n    begin\n-      --  The lock is made without defering abort\n+      --  The lock is made without deferring abort\n \n       --  Therefore the abort has to be deferred before calling this routine.\n       --  This means that the compiler has to generate a Defer_Abort call\n@@ -171,7 +171,7 @@ package body System.Tasking.Protected_Objects is\n       --  read ownership of the protected object, so that this method of\n       --  storing the (single) protected object's owner does not work reliably\n       --  for read locks. However, this is the approach taken for two major\n-      --  reasosn: first, this function is not currently being used (it is\n+      --  reasons: first, this function is not currently being used (it is\n       --  provided for possible future use), and second, it largely simplifies\n       --  the implementation.\n "}, {"sha": "85c266ae32268d348fe23941e4f605834791ec78", "filename": "gcc/ada/s-taprop-hpux-dce.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-hpux-dce.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-hpux-dce.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -221,7 +221,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock\n@@ -859,7 +859,7 @@ package body System.Task_Primitives.Operations is\n       Succeeded := Result = 0;\n \n       pthread_detach (T.Common.LL.Thread'Access);\n-      --  Detach the thread using pthread_detach, sinc DCE threads do not have\n+      --  Detach the thread using pthread_detach, since DCE threads do not have\n       --  pthread_attr_set_detachstate.\n \n       Result := pthread_attr_destroy (Attributes'Access);"}, {"sha": "6f48dfddb8e356bd514b7296a94897b7885715f6", "filename": "gcc/ada/s-taprop-irix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-irix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-irix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-irix.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -219,7 +219,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock"}, {"sha": "56e94a96781306f972ea6c8bdc1b209acd7e93e4", "filename": "gcc/ada/s-taprop-linux.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-linux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-linux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-linux.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -250,7 +250,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock"}, {"sha": "33fb253e2aa631cccf3e940254a006f71c9cd202", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -391,7 +391,7 @@ package body System.Task_Primitives.Operations is\n    ---------------------\n \n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n-   --  in Intialize_TCB and the Storage_Error is handled. Other mutexes (such\n+   --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in the RTS is initialized before any\n    --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n@@ -788,7 +788,7 @@ package body System.Task_Primitives.Operations is\n \n    --  This is because the GetCurrentThread NT call does not return the real\n    --  thread handler but only a \"pseudo\" one. It is not possible to release\n-   --  the thread handle and free the system ressources from this \"pseudo\"\n+   --  the thread handle and free the system resources from this \"pseudo\"\n    --  handle. So we really want to keep the real thread handle set in\n    --  System.Task_Primitives.Operations.Create_Task during thread creation.\n \n@@ -992,7 +992,7 @@ package body System.Task_Primitives.Operations is\n       if Self_ID.Common.LL.Thread /= 0 then\n \n          --  This task has been activated. Wait for the thread to terminate\n-         --  then close it. this is needed to release system ressources.\n+         --  then close it. This is needed to release system resources.\n \n          Result := WaitForSingleObject (T.Common.LL.Thread, Wait_Infinite);\n          pragma Assert (Result /= WAIT_FAILED);"}, {"sha": "74ab07a0abb5e47d5f13b88d6061b39fce5777eb", "filename": "gcc/ada/s-taprop-posix.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-posix.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -271,10 +271,10 @@ package body System.Task_Primitives.Operations is\n    ---------------------\n \n    --  Note: mutexes and cond_variables needed per-task basis are\n-   --        initialized in Intialize_TCB and the Storage_Error is\n+   --        initialized in Initialize_TCB and the Storage_Error is\n    --        handled. Other mutexes (such as RTS_Lock, Memory_Lock...)\n    --        used in RTS is initialized before any status change of RTS.\n-   --        Therefore rasing Storage_Error in the following routines\n+   --        Therefore raising Storage_Error in the following routines\n    --        should be able to be handled safely.\n \n    procedure Initialize_Lock"}, {"sha": "2555eb8fee391c88f84b79f8ce26a8735a67402c", "filename": "gcc/ada/s-taprop-solaris.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-solaris.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-solaris.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-solaris.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -107,16 +107,16 @@ package body System.Task_Primitives.Operations is\n    --  controls whether we emulate priority ceiling locking\n \n    --  To get a scheduling close to annex D requirements, we use the real-time\n-   --  class provided for LWP's and map each task/thread to a specific and\n+   --  class provided for LWPs and map each task/thread to a specific and\n    --  unique LWP (there is 1 thread per LWP, and 1 LWP per thread).\n \n    --  The real time class can only be set when the process has root\n-   --  priviledges, so in the other cases, we use the normal thread scheduling\n+   --  privileges, so in the other cases, we use the normal thread scheduling\n    --  and priority handling.\n \n    Using_Real_Time_Class : Boolean := False;\n-   --  indicates wether the real time class is being used (i.e the process\n-   --  has root priviledges).\n+   --  indicates whether the real time class is being used (i.e the process\n+   --  has root privileges).\n \n    Prio_Param : aliased struct_pcparms;\n    --  Hold priority info (Real_Time) initialized during the package\n@@ -521,7 +521,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock\n@@ -1139,11 +1139,12 @@ package body System.Task_Primitives.Operations is\n       pragma Assert (Result = 0 or else Result = EINTR);\n    end Sleep;\n \n-   --  Note that we are relying heaviliy here on GNAT represting Calendar.Time,\n-   --  System.Real_Time.Time, Duration, System.Real_Time.Time_Span in the same\n-   --  way, i.e., as a 64-bit count of nanoseconds.\n+   --  Note that we are relying heavily here on GNAT representing\n+   --  Calendar.Time, System.Real_Time.Time, Duration,\n+   --  System.Real_Time.Time_Span in the same way, i.e., as a 64-bit count of\n+   --  nanoseconds.\n \n-   --  This allows us to always pass the timeout value as a Duration\n+   --  This allows us to always pass the timeout value as a Duration.\n \n    --  ???\n    --  We are taking liberties here with the semantics of the delays. That is,"}, {"sha": "232c138bae1c8bda3f6257f51cb5c402a9ccbf6d", "filename": "gcc/ada/s-taprop-tru64.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-tru64.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-tru64.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-tru64.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -226,7 +226,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock"}, {"sha": "92d1a187b7d41f73b10e11f39965d103480d21c1", "filename": "gcc/ada/s-taprop-vms.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vms.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -192,7 +192,7 @@ package body System.Task_Primitives.Operations is\n    --  Note: mutexes and cond_variables needed per-task basis are initialized\n    --  in Initialize_TCB and the Storage_Error is handled. Other mutexes (such\n    --  as RTS_Lock, Memory_Lock...) used in RTS is initialized before any\n-   --  status change of RTS. Therefore rasing Storage_Error in the following\n+   --  status change of RTS. Therefore raising Storage_Error in the following\n    --  routines should be able to be handled safely.\n \n    procedure Initialize_Lock"}, {"sha": "bbe2ae50d4810a5c557f70895c333d2a68c8b9c4", "filename": "gcc/ada/s-taprop-vxworks.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-vxworks.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -535,7 +535,7 @@ package body System.Task_Primitives.Operations is\n                else\n                   --  If Ticks = int'last, it was most probably truncated so\n                   --  let's make another round after recomputing Ticks from\n-                  --  the the absolute time.\n+                  --  the absolute time.\n \n                   if Ticks /= int'Last then\n                      Timedout := True;\n@@ -655,7 +655,7 @@ package body System.Task_Primitives.Operations is\n \n                --  If Ticks = int'last, it was most probably truncated\n                --  so let's make another round after recomputing Ticks\n-               --  from the the absolute time.\n+               --  from the absolute time.\n \n                if errno = S_objLib_OBJ_TIMEOUT and then Ticks /= int'Last then\n                   Timedout := True;"}, {"sha": "4f0a5408d9c3314a61aae52abc06375dc97da977", "filename": "gcc/ada/s-taprop.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taprop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -250,7 +250,7 @@ package System.Task_Primitives.Operations is\n \n    --  It is not clear what to do about ceiling violations due to RTS calls\n    --  done at interrupt priority. In general, it is not acceptable to give\n-   --  all RTS locks interrupt priority, since that whould give terrible\n+   --  all RTS locks interrupt priority, since that would give terrible\n    --  performance on systems where this has the effect of masking hardware\n    --  interrupts, though we could get away allowing Interrupt_Priority'last\n    --  where we are layered on an OS that does not allow us to mask interrupts.\n@@ -413,7 +413,7 @@ package System.Task_Primitives.Operations is\n    --  thread of control in the RTS. Since we intend these routines to be used\n    --  for implementing the Single_Lock RTS, Lock_RTS should follow the first\n    --  Defer_Abort operation entering RTS. In the same fashion Unlock_RTS\n-   --  should preceed the last Undefer_Abort exiting RTS.\n+   --  should precede the last Undefer_Abort exiting RTS.\n    --\n    --  These routines also replace the functions Lock/Unlock_All_Tasks_List\n "}, {"sha": "1a4c6b96f9773218a6f00f58fba26a278aa9adbc", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -200,7 +200,7 @@ package body System.Tasking.Restricted.Stages is\n       --  a task terminating due to completing the last statement of its body.\n       --  If the task terminates because of an exception raised by the\n       --  execution of its task body, then Cause is set to Unhandled_Exception.\n-      --  Aborts are not allowed in the restriced profile to which this file\n+      --  Aborts are not allowed in the restricted profile to which this file\n       --  belongs.\n \n       EO : Exception_Occurrence;"}, {"sha": "67583c9f75ee68500d2106aeb9c6663af1df59c3", "filename": "gcc/ada/s-tarest.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tarest.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tarest.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -158,7 +158,7 @@ package System.Tasking.Restricted.Stages is\n    --  single argument to State.\n    --\n    --  Elaborated is a pointer to a Boolean that must be set to true on exit\n-   --  if the task could be sucessfully elaborated.\n+   --  if the task could be successfully elaborated.\n    --\n    --  Chain is a linked list of task that needs to be created. On exit,\n    --  Created_Task.Activation_Link will be Chain.T_ID, and Chain.T_ID will be"}, {"sha": "6719cc0539546238b76a38de09f1e6f25e5c43a3", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -387,7 +387,7 @@ package body System.Tasking.Initialization is\n    --  should not be necessary here, if Abort_Task is implemented correctly,\n    --  since Abort_Task should include the effect of Wakeup. However, the\n    --  above call was in earlier versions of this file, and at least for\n-   --  some targets Abort_Task has not beek doing Wakeup. It should not\n+   --  some targets Abort_Task has not been doing Wakeup. It should not\n    --  hurt to uncomment the above call, until the error is corrected for\n    --  all targets.\n \n@@ -402,7 +402,7 @@ package body System.Tasking.Initialization is\n    --  and let it decide if it wants to complete the aborted construct\n    --  immediately.\n \n-   --  Note that the effect of the lowl-level Abort_Task is not persistent.\n+   --  Note that the effect of the low-level Abort_Task is not persistent.\n    --  If the target task is not blocked, this wakeup will be missed.\n \n    --  We don't bother calling Abort_Task if this task is aborting itself,\n@@ -413,7 +413,7 @@ package body System.Tasking.Initialization is\n \n    --  Note that an earlier version of this code had some false reasoning\n    --  about being able to reliably wake up a task that had suspended on\n-   --  a blocking system call that does not atomically relase the task's\n+   --  a blocking system call that does not atomically release the task's\n    --  lock (e.g., UNIX nanosleep, which we once thought could be used to\n    --  implement delays). That still left the possibility of missed\n    --  wakeups."}, {"sha": "020fd33255fb68de904d3d259575b4b213c00558", "filename": "gcc/ada/s-tasini.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -80,7 +80,7 @@ package System.Tasking.Initialization is\n    --  nested. The symptom of over-deferring abort is that an exception may\n    --  fail to be raised, or an abort may fail to take place.\n \n-   --  Therefore, there are two sets of the inlinable defer/undefer routines,\n+   --  Therefore, there are two sets of the inlineable defer/undefer routines,\n    --  which are the ones to be used inside GNARL. One set allows nesting. The\n    --  other does not. People who maintain the GNARL should try to avoid using\n    --  the nested versions, or at least look very critically at the places\n@@ -98,8 +98,8 @@ package System.Tasking.Initialization is\n    --  internal calls to the tasking runtime system assume abort is already\n    --  deferred, and do not modify the deferral level.\n \n-   --  There is also a set of non-linable defer/undefer routines, for direct\n-   --  call from the compiler. These are not in-lineable because they may need\n+   --  There is also a set of non-inlineable defer/undefer routines, for direct\n+   --  call from the compiler. These are not inlineable because they may need\n    --  to be called via pointers (\"soft links\"). For the sake of efficiency,\n    --  the version with Self_ID as parameter should used wherever possible.\n    --  These are all nestable.\n@@ -137,7 +137,7 @@ package System.Tasking.Initialization is\n \n    procedure Change_Base_Priority (T : Task_Id);\n    --  Change the base priority of T. Has to be called with the affected\n-   --  task's ATCB write-locked. May temporariliy release the lock.\n+   --  task's ATCB write-locked. May temporarily release the lock.\n \n    ----------------------\n    -- Task Lock/Unlock --"}, {"sha": "70e755da016b37c222feaf25e4acda78bd0c3151", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -60,7 +60,7 @@ package System.Tasking is\n    --  Never undefer abort while holding a lock\n \n    --  Overlapping critical sections must be properly nested, and locks must\n-   --  be released in LIFO order. e.g., the following is not allowed:\n+   --  be released in LIFO order. E.g., the following is not allowed:\n \n    --         Lock (X);\n    --         ..."}, {"sha": "858bd7ba98cea23d4bad1ad2602e281751c0a299", "filename": "gcc/ada/s-tasque.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasque.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasque.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasque.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---         Copyright (C) 1992-2006, Free Software Foundation, Inc.          --\n+--         Copyright (C) 1992-2008, Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -95,7 +95,7 @@ package System.Tasking.Queuing is\n    procedure Requeue_Call_With_New_Prio\n      (Entry_Call : Entry_Call_Link; Prio : System.Any_Priority);\n    --  Change Priority of the call and re insert to the queue when priority\n-   --  queueing is in effect. When FIFO is inforced, this routine\n+   --  queueing is in effect. When FIFO is enforced, this routine\n    --  should not have any effect.\n \n end System.Tasking.Queuing;"}, {"sha": "65cc80b24f75cb19b2ad685706ba04cd13b52586", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -56,7 +56,7 @@ with System.Stack_Usage;\n with System.Soft_Links;\n --  These are procedure pointers to non-tasking routines that use task\n --  specific data. In the absence of tasking, these routines refer to global\n---  data. In the presense of tasking, they must be replaced with pointers to\n+--  data. In the presence of tasking, they must be replaced with pointers to\n --  task-specific versions. Also used for Create_TSD, Destroy_TSD,\n --  Get_Current_Excep, Finalize_Global_List, Task_Termination, Handler.\n \n@@ -112,7 +112,7 @@ package body System.Tasking.Stages is\n    procedure Vulnerable_Complete_Task (Self_ID : Task_Id);\n    --  Complete the calling task. This procedure must be called with\n    --  abort deferred. It should only be called by Complete_Task and\n-   --  Finalizate_Global_Tasks (for the environment task).\n+   --  Finalize_Global_Tasks (for the environment task).\n \n    procedure Vulnerable_Complete_Master (Self_ID : Task_Id);\n    --  Complete the current master of the calling task. This procedure\n@@ -1883,7 +1883,7 @@ package body System.Tasking.Stages is\n --  Package elaboration code\n \n begin\n-   --  Establish the Adafinal softlink\n+   --  Establish the Adafinal oftlink\n \n    --  This is not done inside the central RTS initialization routine\n    --  to avoid with-ing this package from System.Tasking.Initialization."}, {"sha": "36f0fbfc3f2dff94395ac8eaf660ac233c7a8d64", "filename": "gcc/ada/s-tassta.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tassta.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tassta.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -196,7 +196,7 @@ package System.Tasking.Stages is\n    --   are those of the task to create. This parameter should be passed as\n    --   the single argument to State.\n    --  Elaborated is a pointer to a Boolean that must be set to true on exit\n-   --   if the task could be sucessfully elaborated.\n+   --   if the task could be successfully elaborated.\n    --  Chain is a linked list of task that needs to be created. On exit,\n    --   Created_Task.Activation_Link will be Chain.T_ID, and Chain.T_ID\n    --   will be Created_Task (e.g the created task will be linked at the front"}, {"sha": "83709f704b02472d9742729fb1f1a12da7b648a1", "filename": "gcc/ada/s-tasuti.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tasuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -95,7 +95,7 @@ package System.Tasking.Utilities is\n \n    procedure Abort_Tasks (Tasks : Task_List);\n    --  Abort_Tasks is called to initiate abort, however, the actual\n-   --  aborti is done by aborted task by means of Abort_Handler\n+   --  aborting is done by aborted task by means of Abort_Handler\n \n    procedure Make_Passive (Self_ID : Task_Id; Task_Completed : Boolean);\n    --  Update counts to indicate current task is either terminated or"}, {"sha": "986a30af9e82cecc8924cc9d87750bcfd66a292b", "filename": "gcc/ada/s-tpoben.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpoben.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpoben.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -239,7 +239,7 @@ package body System.Tasking.Protected_Objects.Entries is\n          raise Program_Error;\n       end if;\n \n-      --  The lock is made without defering abort\n+      --  The lock is made without deferring abort\n \n       --  Therefore the abort has to be deferred before calling this routine.\n       --  This means that the compiler has to generate a Defer_Abort call\n@@ -311,7 +311,7 @@ package body System.Tasking.Protected_Objects.Entries is\n       --  have read ownership of the protected object, so that this method of\n       --  storing the (single) protected object's owner does not work\n       --  reliably for read locks. However, this is the approach taken for two\n-      --  major reasosn: first, this function is not currently being used (it\n+      --  major reasons: first, this function is not currently being used (it\n       --  is provided for possible future use), and second, it largely\n       --  simplifies the implementation.\n "}, {"sha": "9feba091396d65130096069a8bf0eb37531ce97b", "filename": "gcc/ada/s-tpoben.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpoben.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpoben.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpoben.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -159,7 +159,7 @@ package System.Tasking.Protected_Objects.Entries is\n      (Object : Protection_Entries_Access) return Boolean;\n    --  Returns True if an Interrupt_Handler or Attach_Handler pragma applies\n    --  to the protected object. That is to say this primitive returns False for\n-   --  Protection, but is overriden to return True when interrupt handlers are\n+   --  Protection, but is overridden to return True when interrupt handlers are\n    --  declared so the check required by C.3.1(11) can be implemented in\n    --  System.Tasking.Protected_Objects.Initialize_Protection.\n "}, {"sha": "8ad468c7be82e9a756153da6a76df4aeb36be067", "filename": "gcc/ada/s-tpobop.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpobop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpobop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpobop.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -506,7 +506,7 @@ package body System.Tasking.Protected_Objects.Operations is\n    --  See also Cancel_Protected_Entry_Call for code expansion of asynchronous\n    --  entry call.\n \n-   --  The initial part of this procedure does not need to lock the the calling\n+   --  The initial part of this procedure does not need to lock the calling\n    --  task's ATCB, up to the point where the call record first may be queued\n    --  (PO_Do_Or_Queue), since before that no other task will have access to\n    --  the record.\n@@ -520,7 +520,7 @@ package body System.Tasking.Protected_Objects.Operations is\n    --  There are some heuristics here, just to save time for frequently\n    --  occurring cases. For example, we check Initially_Abortable to try to\n    --  avoid calling the procedure Wait_Until_Abortable, since the normal case\n-   --  for async.  entry calls is to be queued abortably.\n+   --  for async. entry calls is to be queued abortably.\n \n    --  Another heuristic uses the Block.Enqueued to try to avoid calling\n    --  Cancel_Protected_Entry_Call if the call can be served immediately."}, {"sha": "866a4054070b5ca8260106e2ccd6655b9cbad5e7", "filename": "gcc/ada/s-tpopsp-posix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpopsp-posix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpopsp-posix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-posix.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "81afc79cb7b5f0c0a96a86e9192c216dec65649c", "filename": "gcc/ada/s-tpopsp-rtems.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpopsp-rtems.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tpopsp-rtems.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tpopsp-rtems.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -10,6 +10,7 @@\n --                             $Revision: 1.2 $\n --                                                                          --\n --            Copyright (C) 1991-2003, Florida State University             --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -36,7 +37,7 @@\n ------------------------------------------------------------------------------\n \n --  This is a RTEMS version of this package which uses a special\n---  variable for Ada self which is contexted switch implicitly by RTEMS.\n+--  variable for Ada self which is context switched implicitly by RTEMS.\n --\n --  This is the same as the POSIX version except that an RTEMS variable\n --  is used instead of a POSIX key."}, {"sha": "dfa4c03beba23ed6cec24a981cf95071383439fe", "filename": "gcc/ada/s-tposen.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tposen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tposen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -407,7 +407,7 @@ package body System.Tasking.Protected_Objects.Single_Entry is\n       --  have read ownership of the protected object, so that this method of\n       --  storing the (single) protected object's owner does not work\n       --  reliably for read locks. However, this is the approach taken for two\n-      --  major reasosn: first, this function is not currently being used (it\n+      --  major reasons: first, this function is not currently being used (it\n       --  is provided for possible future use), and second, it largely\n       --  simplifies the implementation.\n "}, {"sha": "90e8bb3737458343c53b6973868f17057f1a98e8", "filename": "gcc/ada/s-tposen.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tposen.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-tposen.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tposen.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -204,7 +204,7 @@ package System.Tasking.Protected_Objects.Single_Entry is\n    --  Lock a protected object for read access.  Upon return, the caller\n    --  owns the lock for read access, and no other calls to Lock\n    --  with the same argument will return until the corresponding call\n-   --  to Unlock has been made by the caller.  Other cals to Lock_Read_Only\n+   --  to Unlock has been made by the caller.  Other calls to Lock_Read_Only\n    --  may (but need not) return before the call to Unlock, and the\n    --  corresponding callers will also own the lock for read access.\n "}, {"sha": "d8cf78726163877075ecadcd909e195c37287a77", "filename": "gcc/ada/s-traceb-hpux.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-traceb-hpux.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-traceb-hpux.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traceb-hpux.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -8,6 +8,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --                     Copyright (C) 1999-2006, AdaCore                     --\n+--            Copyright (C) 2008, Free Software Foundation, Inc.            --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -86,7 +87,7 @@ package body System.Traceback is\n    --  Frames with dynamic stack allocation are handled using the associated\n    --  frame pointer, but HP compilers and GCC setup this pointer differently.\n    --  HP compilers set it to point at the top (highest address) of the static\n-   --  part of the frame, wheras GCC sets it to point at the bottom of this\n+   --  part of the frame, whereas GCC sets it to point at the bottom of this\n    --  region. We have to fake the unwinder to compensate for this difference,\n    --  for which we'll need to access some subprograms unwind descriptors.\n "}, {"sha": "03897acff06dcc8f4411fd148678af445c6a5f0b", "filename": "gcc/ada/s-traces.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-traces.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-traces.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-traces.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -40,17 +40,17 @@\n \n --  A new primitive, Send_Trace_Info (Id : Trace_T; 'data') is introduced.\n --  Trace_T is an event identifier, 'data' are the informations to pass\n---  with the event. Thid procedure is used from within the Runtime to send\n+--  with the event. This procedure is used from within the Runtime to send\n --  debug informations.\n \n --  This primitive is overloaded in System.Traces.Tasking and this package\n \n---  Send_Trace_Info calls Send_Trace, in System.Traces.Send, which is trarget\n+--  Send_Trace_Info calls Send_Trace, in System.Traces.Send, which is target\n --  dependent, to send the debug informations to a debugger, stream ..\n \n --  To add a new event, just add them to the Trace_T type, and write the\n --  corresponding Send_Trace_Info procedure. It may be required for some\n---  target to modify Send_Trace (eg. VxWorks).\n+--  target to modify Send_Trace (e.g. VxWorks).\n \n --  To add a new target, just adapt System.Traces.Send to your own purposes\n "}, {"sha": "bc5b193e83f1667f0e48d007bea2a25babd5773a", "filename": "gcc/ada/s-trafor-default.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-trafor-default.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-trafor-default.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-trafor-default.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2001-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,7 +42,7 @@ package System.Traces.Format is\n    subtype String_Trace is String (1 .. Max_Size);\n    --  Specific type in which trace information is stored. An ASCII.NUL\n    --  character ends the string so that it is compatible with C strings\n-   --  which is useful on some targets (eg. VxWorks)\n+   --  which is useful on some targets (e.g. VxWorks)\n \n    --  These private functions handles String_Trace formatting\n "}, {"sha": "0609e0b0345b606f66e90a1480549dd1c0c97663", "filename": "gcc/ada/s-unstyp.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-unstyp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-unstyp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-unstyp.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -55,7 +55,7 @@ package System.Unsigned_Types is\n \n    type Packed_Byte is mod 2 ** 8;\n    for Packed_Byte'Size use 8;\n-   --  Component type for Packed_Butes array\n+   --  Component type for Packed_Bytes array\n \n    type Packed_Bytes1 is array (Natural range <>) of Packed_Byte;\n    for Packed_Bytes1'Alignment use 1;\n@@ -200,7 +200,7 @@ package System.Unsigned_Types is\n    pragma Import (Intrinsic, Rotate_Left);\n    pragma Import (Intrinsic, Rotate_Right);\n \n-   --  The following definitions are obsolsecent. They were needed by the\n+   --  The following definitions are obsolescent. They were needed by the\n    --  previous version of the compiler and runtime, but are not needed\n    --  by the current version. We retain them to help with bootstrap path\n    --  problems. Also they seem harmless, and if any user programs have"}, {"sha": "c189be4aaf7e13e8dc3b8cdf34b72a2f5c47272f", "filename": "gcc/ada/s-utf_32.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-utf_32.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-utf_32.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-utf_32.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2005-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2005-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -117,14 +117,14 @@ package System.UTF_32 is\n    function Is_UTF_32_Digit (U : UTF_32)   return Boolean;\n    function Is_UTF_32_Digit (C : Category) return Boolean;\n    pragma Inline (Is_UTF_32_Digit);\n-   --  Returns true iff U is a digit that can be used to extend an identifer,\n+   --  Returns true iff U is a digit that can be used to extend an identifier,\n    --  or if C is one of the corresponding categories, which are the following:\n    --    Number, Decimal_Digit (Nd)\n \n    function Is_UTF_32_Line_Terminator (U : UTF_32) return Boolean;\n    pragma Inline (Is_UTF_32_Line_Terminator);\n    --  Returns true iff U is an allowed line terminator for source programs,\n-   --  if U is in the category Zp (Separator, Paragaph), or Zs (Separator,\n+   --  if U is in the category Zp (Separator, Paragraph), or Zs (Separator,\n    --  Line), or if U is a conventional line terminator (CR, LF, VT, FF).\n    --  There is no category version for this function, since the set of\n    --  characters does not correspond to a set of Unicode categories.\n@@ -143,15 +143,15 @@ package System.UTF_32 is\n    pragma Inline (Is_UTF_32_Other);\n    --  Returns true iff U is an other format character, which means that it\n    --  can be used to extend an identifier, but is ignored for the purposes of\n-   --  matching of identiers, or if C is one of the corresponding categories,\n+   --  matching of identifiers, or if C is one of the corresponding categories,\n    --  which are the following:\n    --    Other, Format (Cf)\n \n    function Is_UTF_32_Punctuation (U : UTF_32)   return Boolean;\n    function Is_UTF_32_Punctuation (C : Category) return Boolean;\n    pragma Inline (Is_UTF_32_Punctuation);\n    --  Returns true iff U is a punctuation character that can be used to\n-   --  separate pices of an identifier, or if C is one of the corresponding\n+   --  separate pieces of an identifier, or if C is one of the corresponding\n    --  categories, which are the following:\n    --    Punctuation, Connector (Pc)\n \n@@ -177,7 +177,7 @@ package System.UTF_32 is\n    --  Note that the Ada category format effector is subsumed by the above\n    --  list of Unicode categories.\n    --\n-   --  Note that Other, Unassiged (Cn) is quite deliberately not included\n+   --  Note that Other, Unassigned (Cn) is quite deliberately not included\n    --  in the list of categories above. This means that should any of these\n    --  code positions be defined in future with graphic characters they will\n    --  be allowed without a need to change implementations or the standard."}, {"sha": "0741664082b8efa6f4c52f57a594ce8d6ffb8678", "filename": "gcc/ada/s-vaflop.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-vaflop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-vaflop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,7 +33,7 @@\n \n --  This is a dummy body for use on non-Alpha systems so that the library\n --  can compile. This dummy version uses ordinary conversions and other\n---  arithmetic operations. it is used only for testing purposes in the\n+--  arithmetic operations. It is used only for testing purposes in the\n --  case where the -gnatdm switch is used to force testing of VMS features\n --  on non-VMS systems.\n "}, {"sha": "47e991a3b33f706c8b8328c13e35dbbfd4c6cc75", "filename": "gcc/ada/s-vaflop.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-vaflop.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-vaflop.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1997-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -175,7 +175,7 @@ package System.Vax_Float_Operations is\n    --  These routines return a decimal C string image of their argument.\n    --  They are provided for implicit use by the debugger, in response to\n    --  the special encoding used for Vax floating-point types (see Exp_Dbug\n-   --  for details). They supercede the above Debug_Output_D/F/G routines\n+   --  for details). They supersede the above Debug_Output_D/F/G routines\n    --  which didn't work properly with GDBTK.\n \n    procedure pd (Arg : D);"}, {"sha": "f1d89052a0633634ba81ebc9d9a9cc28aff4c189", "filename": "gcc/ada/s-valrea.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-valrea.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-valrea.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valrea.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -82,7 +82,7 @@ package body System.Val_Real is\n \n       Num_Saved_Zeroes : Natural := 0;\n       --  This counts zeroes after the decimal point. A non-zero value means\n-      --  that this number of previously scanned digits are zero. if the end\n+      --  that this number of previously scanned digits are zero. If the end\n       --  of the number is reached, these zeroes are simply discarded, which\n       --  ensures that trailing zeroes after the point never affect the value\n       --  (which might otherwise happen as a result of rounding). With this"}, {"sha": "7683d3a9cb86724c8d9c69ebab8a74a04969671f", "filename": "gcc/ada/s-valuti.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-valuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-valuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valuti.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -294,8 +294,8 @@ package body System.Val_Util is\n       P := P + 1;\n \n       --  If underscore is at the end of string, then this is an error and\n-      --  we raise Constraint_Error, leaving the pointer past the undescore.\n-      --  This seems a bit strange. It means e,g, that if the field is:\n+      --  we raise Constraint_Error, leaving the pointer past the underscore.\n+      --  This seems a bit strange. It means e.g. that if the field is:\n \n       --    345_\n "}, {"sha": "bdc237c06acbf832323044a9d1cbc6e27bf49050", "filename": "gcc/ada/s-wchstw.ads", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchstw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchstw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchstw.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,17 +46,18 @@ package System.WCh_StW is\n       EM : System.WCh_Con.WC_Encoding_Method);\n    --  This routine simply takes its argument and converts it to wide string\n    --  format, storing the result in R (1 .. L), with L being set appropriately\n-   --  on return. The caller guarantees that R is long enough to accomodate the\n-   --  result. This is used in the context of the Wide_Image attribute, where\n-   --  the argument is the corresponding 'Image attribute. Any wide character\n-   --  escape sequences in the string are converted to the corresponding wide\n-   --  character value. No syntax checks are made, it is assumed that any such\n-   --  sequences are validly formed (this must be assured by the caller), and\n-   --  results from the fact that Wide_Image is only used on strings that have\n-   --  been built by the compiler, such as images of enumeration literals. If\n-   --  the method for encoding is a shift-in, shift-out convention, then it is\n-   --  assumed that normal (non-wide character) mode holds at the start and end\n-   --  of the argument string. EM indicates the wide character encoding method.\n+   --  on return. The caller guarantees that R is long enough to accommodate\n+   --  the result. This is used in the context of the Wide_Image attribute,\n+   --  where the argument is the corresponding 'Image attribute. Any wide\n+   --  character escape sequences in the string are converted to the\n+   --  corresponding wide character value. No syntax checks are made, it is\n+   --  assumed that any such sequences are validly formed (this must be assured\n+   --  by the caller), and results from the fact that Wide_Image is only used\n+   --  on strings that have been built by the compiler, such as images of\n+   --  enumeration literals. If the method for encoding is a shift-in,\n+   --  shift-out convention, then it is assumed that normal (non-wide\n+   --  character) mode holds at the start and end of the argument string. EM\n+   --  indicates the wide character encoding method.\n    --  Note: in the WCEM_Brackets case, the brackets escape sequence is used\n    --  only for codes greater than 16#FF#.\n "}, {"sha": "ed660fefc0f1b0f0b667c7cd238e8556e4fde857", "filename": "gcc/ada/s-wchwts.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchwts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchwts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchwts.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -101,7 +101,7 @@ package body System.WCh_WtS is\n    end Wide_String_To_String;\n \n    --------------------------------\n-   -- Wide_Wide_Sring_To_String --\n+   -- Wide_Wide_String_To_String --\n    --------------------------------\n \n    function Wide_Wide_String_To_String"}, {"sha": "691a322ea6ce250be1720b1ad977bd617c0287d8", "filename": "gcc/ada/s-wchwts.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchwts.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fs-wchwts.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchwts.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -32,7 +32,7 @@\n ------------------------------------------------------------------------------\n \n --  This package contains the routine used to convert wide strings and wide\n---  wide stringsto strings for use by wide and wide wide character attributes\n+--  wide strings to strings for use by wide and wide wide character attributes\n --  (value, image etc.) and also by the numeric IO subpackages of\n --  Ada.Text_IO.Wide_Text_IO and Ada.Text_IO.Wide_Wide_Text_IO.\n "}, {"sha": "83cc368dee463522c3db78068aa0e5d7925992f9", "filename": "gcc/ada/scans.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscans.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscans.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscans.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -45,7 +45,7 @@ package Scans is\n \n    --  The following type is used to identify token types returned by Scan.\n    --  The class column in this table indicates the token classes which\n-   --  apply to the token, as defined by subsquent subtype declarations.\n+   --  apply to the token, as defined by subsequent subtype declarations.\n \n    --  Note: Namet.Is_Keyword_Name depends on the fact that the first entry in\n    --  this type declaration is *not* for a reserved word. For details on why\n@@ -65,7 +65,7 @@ package Scans is\n \n       Tok_Operator_Symbol, -- op symbol    Name, Literal, Lit_Or_Name, Desig\n \n-      Tok_Identifier,      -- identifer    Name, Lit_Or_Name, Desig\n+      Tok_Identifier,      -- identifier   Name, Lit_Or_Name, Desig\n \n       Tok_Double_Asterisk, -- **\n \n@@ -206,7 +206,7 @@ package Scans is\n       Tok_End_Of_Line,\n       --  Represents an end of line. Not used during normal compilation scans\n       --  where end of line is ignored. Active for preprocessor scanning and\n-      --  also when scanning project files (where it is neede because of ???)\n+      --  also when scanning project files (where it is needed because of ???)\n \n       Tok_Special,\n       --  Used only in preprocessor scanning (to represent one of the"}, {"sha": "805caab574e698d012c038f2de9a8be534e9d8a8", "filename": "gcc/ada/scn.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscn.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -329,7 +329,7 @@ package body Scn is\n          Scan;\n       end if;\n \n-      --  Clear flags for reserved words used as indentifiers\n+      --  Clear flags for reserved words used as identifiers\n \n       for J in Token_Type loop\n          Used_As_Identifier (J) := False;"}, {"sha": "76f63f9353b2f5caba00add94e8d6d45f39e4714", "filename": "gcc/ada/scng.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscng.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fscng.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fscng.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -236,7 +236,7 @@ package body Scng is\n       --  Scan_Ptr points to the opening string quote (the checksum for this\n       --  character has not been accumulated yet). On return Scan_Ptr points\n       --  past the closing quote of the string literal, Token and Token_Node\n-      --  are set appropriately, and the checksum is upated.\n+      --  are set appropriately, and the checksum is updated.\n \n       -----------------------\n       -- Check_End_Of_Line --\n@@ -2066,7 +2066,7 @@ package body Scng is\n                Underline_Found := False;\n                goto Scan_Identifier;\n \n-            --  Mark character is an error (at start of identifer)\n+            --  Mark character is an error (at start of identifier)\n \n             elsif Is_UTF_32_Mark (Cat) then\n                Error_Msg\n@@ -2076,7 +2076,7 @@ package body Scng is\n                Underline_Found := False;\n                goto Scan_Identifier;\n \n-            --  Other format character is an error (at start of identifer)\n+            --  Other format character is an error (at start of identifier)\n \n             elsif Is_UTF_32_Other (Cat) then\n                Error_Msg\n@@ -2108,7 +2108,7 @@ package body Scng is\n \n       --  Routine to scan line terminator. On entry Scan_Ptr points to a\n       --  character which is one of FF,LR,CR,VT, or one of the wide characters\n-      --  that is treated as a line termiantor.\n+      --  that is treated as a line terminator.\n \n       <<Scan_Line_Terminator>>\n \n@@ -2151,7 +2151,7 @@ package body Scng is\n \n       --  Identifier scanning routine. On entry, some initial characters of\n       --  the identifier may have already been stored in Name_Buffer. If so,\n-      --  Name_Len has the number of characters stored. otherwise Name_Len is\n+      --  Name_Len has the number of characters stored, otherwise Name_Len is\n       --  set to zero on entry. Underline_Found is also set False on entry.\n \n       <<Scan_Identifier>>\n@@ -2324,7 +2324,7 @@ package body Scng is\n                            Underline_Found := True;\n                         end if;\n \n-                     --  Wide character in Unicode cateogory \"Other, Format\"\n+                     --  Wide character in Unicode category \"Other, Format\"\n                      --  is accepted in an identifier, but is ignored and not\n                      --  stored. It seems reasonable to exclude it from the\n                      --  checksum."}, {"sha": "44b0f60317511053701eb50469d1228cc7ff8fc0", "filename": "gcc/ada/seh_init.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fseh_init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fseh_init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fseh_init.c?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 2005, Free Software Foundation, Inc.           *\n+ *           Copyright (C) 2005-2008, Free Software Foundation, Inc.        *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -37,7 +37,7 @@\n #include \"tconfig.h\"\n #include \"tsystem.h\"\n \n-/* We don't have libiberty, so us malloc.  */\n+/* We don't have libiberty, so use malloc.  */\n #define xmalloc(S) malloc (S)\n \n #else"}, {"sha": "93f0780edf85acbf62f9afc76fd967db7145a314", "filename": "gcc/ada/sem.ads", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -27,8 +27,8 @@\n -- Semantic Analysis: General Model --\n --------------------------------------\n \n---  Semantic processing involves 3 phases which are highly interwined\n---  (ie mutually recursive):\n+--  Semantic processing involves 3 phases which are highly intertwined\n+--  (i.e. mutually recursive):\n \n --    Analysis     implements the bulk of semantic analysis such as\n --                 name analysis and type resolution for declarations,\n@@ -51,7 +51,7 @@\n --                 recursive calls to itself to resolve operands.\n \n --    Expansion    if we are not generating code this phase is a no-op.\n---                 otherwise this phase expands, ie transforms, original\n+--                 otherwise this phase expands, i.e. transforms, original\n --                 declaration, expressions or instructions into simpler\n --                 structures that can be handled by the back-end. This\n --                 phase is also in charge of generating code which is\n@@ -139,7 +139,7 @@\n --  it up without causing too much distortion to our basic model.\n \n --  A switch (In_Spec_Expression) is set to show that we are in the initial\n---  occurence of a default expression. The analyzer is then called on this\n+--  occurrence of a default expression. The analyzer is then called on this\n --  expression with the switch set true. Analysis and resolution proceed almost\n --  as usual, except that Freeze_Expression will not freeze non-static\n --  expressions if this switch is set, and the call to Expand at the end of\n@@ -174,10 +174,10 @@\n --  The normal Analysis-Resolution-Expansion mechanism where expansion of the\n --  children is performed before expansion of the parent does not work if the\n --  code generated for the children by the expander needs to be evaluated\n---  repeatdly (for instance in the above aggregate \"new Thing (Function_Call)\"\n+--  repeatedly (for instance in the above aggregate \"new Thing (Function_Call)\"\n --  needs to be called 100 times.)\n \n---  The reason why this mecanism does not work is that, the expanded code for\n+--  The reason why this mechanism does not work is that, the expanded code for\n --  the children is typically inserted above the parent and thus when the\n --  father gets expanded no re-evaluation takes place. For instance in the case\n --  of aggregates if \"new Thing (Function_Call)\" is expanded before of the\n@@ -186,7 +186,7 @@\n --  expanded code for \"new Thing (Function_Call)\".\n \n --  To remedy this situation we introduce a new flag which signals whether we\n---  want a full analysis (ie expansion is enabled) or a pre-analysis which\n+--  want a full analysis (i.e. expansion is enabled) or a pre-analysis which\n --  performs Analysis and Resolution but no expansion.\n \n --  After the complete pre-analysis of an expression has been carried out we\n@@ -227,7 +227,7 @@ package Sem is\n    --  expansion phase is skipped.\n    --\n    --  When this flag is False the flag Expander_Active is also False (the\n-   --  Expander_Activer flag defined in the spec of package Expander tells you\n+   --  Expander_Active flag defined in the spec of package Expander tells you\n    --  whether expansion is currently enabled). You should really regard this\n    --  as a read only flag.\n \n@@ -286,7 +286,7 @@ package Sem is\n \n    --  Scope based suppress checks for the predefined checks (from initial\n    --  command line arguments, or from Suppress pragmas not including an entity\n-   --  entity name) are recorded in the Sem.Supress variable, and all that is\n+   --  entity name) are recorded in the Sem.Suppress variable, and all that is\n    --  necessary is to save the state of this variable on scope entry, and\n    --  restore it on scope exit. This mechanism allows for fast checking of\n    --  the scope suppress state without needing complex data structures.\n@@ -441,7 +441,7 @@ package Sem is\n    --  It is clear in retrospect that all semantic processing and visibility\n    --  structures should have been fully recursive. The rtsfind mechanism,\n    --  and the complexities brought about by subunits and by generic child\n-   --  units and their instantitions, have led to a hybrid model that carries\n+   --  units and their instantiations, have led to a hybrid model that carries\n    --  more state than one would wish.\n \n    type Scope_Stack_Entry is record"}, {"sha": "f930ecbf14c4aadc172af413c363385f28d70bb2", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -202,7 +202,7 @@ package body Sem_Aggr is\n       Component     : Node_Id);\n    --  Give possible misspelling diagnostic if Component is likely to be\n    --  a misspelling of one of the components of the Assoc_List.\n-   --  This is called by Resolv_Aggr_Expr after producing\n+   --  This is called by Resolve_Aggr_Expr after producing\n    --  an invalid component error message.\n \n    procedure Check_Static_Discriminated_Subtype (T : Entity_Id; V : Node_Id);\n@@ -254,7 +254,7 @@ package body Sem_Aggr is\n    --     appears last in the sub-aggregate. Check that we do not have\n    --     positional and named components in the array sub-aggregate (unless\n    --     the named association is an others choice). Finally if an others\n-   --     choice is present, make sure it is allowed in the aggregate contex.\n+   --     choice is present, make sure it is allowed in the aggregate context.\n    --\n    --  2. If the array sub-aggregate contains discrete_choices:\n    --\n@@ -1143,7 +1143,7 @@ package body Sem_Aggr is\n       function Resolve_Aggr_Expr\n         (Expr        : Node_Id;\n          Single_Elmt : Boolean) return Boolean;\n-      --  Resolves aggregate expression Expr. Returs False if resolution\n+      --  Resolves aggregate expression Expr. Returns False if resolution\n       --  fails. If Single_Elmt is set to False, the expression Expr may be\n       --  used to initialize several array aggregate elements (this can\n       --  happen for discrete choices such as \"L .. H => Expr\" or the others\n@@ -1396,7 +1396,7 @@ package body Sem_Aggr is\n       is\n          Nxt_Ind        : constant Node_Id := Next_Index (Index);\n          Nxt_Ind_Constr : constant Node_Id := Next_Index (Index_Constr);\n-         --  Index is the current index corresponding to the expresion\n+         --  Index is the current index corresponding to the expression\n \n          Resolution_OK : Boolean := True;\n          --  Set to False if resolution of the expression failed\n@@ -2650,7 +2650,7 @@ package body Sem_Aggr is\n             Expr_Type := Etype (Component);\n \n          --  Otherwise we have to pick up the new type of the component from\n-         --  the new costrained subtype of the aggregate. In fact components\n+         --  the new constrained subtype of the aggregate. In fact components\n          --  which are of a composite type might be constrained by a\n          --  discriminant, and we want to resolve Expr against the subtype were\n          --  all discriminant occurrences are replaced with their actual value.\n@@ -2914,11 +2914,11 @@ package body Sem_Aggr is\n       --  in sem_ch3 and here rather than have a copy of the code which is a\n       --  maintenance nightmare.\n \n-      --  ??? Performace WARNING. The current implementation creates a new\n+      --  ??? Performance WARNING. The current implementation creates a new\n       --  itype for all aggregates whose base type is discriminated.\n       --  This means that for record aggregates nested inside an array\n       --  aggregate we will create a new itype for each record aggregate\n-      --  if the array cmponent type has discriminants. For large aggregates\n+      --  if the array component type has discriminants. For large aggregates\n       --  this may be a problem. What should be done in this case is\n       --  to reuse itypes as much as possible.\n "}, {"sha": "441b394058df16474c920a19808fc5869f790b7f", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -454,7 +454,7 @@ package body Sem_Attr is\n             --  Note: This fragment of the tree is temporarily malformed\n             --  because the correct tree requires an E_Subprogram_Type entity\n             --  as the designated type. In most cases this designated type is\n-            --  later overriden by the semantics with the type imposed by the\n+            --  later overridden by the semantics with the type imposed by the\n             --  context during the resolution phase. In the specific case of\n             --  the expression Address!(Prim'Unrestricted_Access), used to\n             --  initialize slots of dispatch tables, this work will be done by\n@@ -5544,7 +5544,7 @@ package body Sem_Attr is\n       -----------------\n \n       --  Constrained is never folded for now, there may be cases that\n-      --  could be handled at compile time. to be looked at later.\n+      --  could be handled at compile time. To be looked at later.\n \n       when Attribute_Constrained =>\n          null;\n@@ -6655,7 +6655,7 @@ package body Sem_Attr is\n \n       when Attribute_Small =>\n \n-         --  The floating-point case is present only for Ada 83 compatability.\n+         --  The floating-point case is present only for Ada 83 compatibility.\n          --  Note that strictly this is an illegal addition, since we are\n          --  extending an Ada 95 defined attribute, but we anticipate an\n          --  ARG ruling that will permit this.\n@@ -6781,7 +6781,7 @@ package body Sem_Attr is\n          --  We treat protected types like task types. It would make more\n          --  sense to have another enumeration value, but after all the\n          --  whole point of this feature is to be exactly DEC compatible,\n-         --  and changing the type Type_Clas would not meet this requirement.\n+         --  and changing the type Type_Class would not meet this requirement.\n \n          elsif Is_Protected_Type (Typ) then\n             Id := RE_Type_Class_Task;\n@@ -7503,7 +7503,7 @@ package body Sem_Attr is\n                   --  that generic unit. This includes any such attribute that\n                   --  occurs within the body of a generic unit that is a child\n                   --  of the generic unit where the subprogram is declared.\n-                  --  The rule also prohibits applying the attibute when the\n+                  --  The rule also prohibits applying the attribute when the\n                   --  access type is a generic formal access type (since the\n                   --  level of the actual type is not known). This restriction\n                   --  does not apply when the attribute type is an anonymous"}, {"sha": "30dda4304e1b7c28cf2f0d671132b2829d6b0252", "filename": "gcc/ada/sem_attr.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_attr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_attr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -326,7 +326,7 @@ package Sem_Attr is\n       --------------------\n \n       Attribute_Mechanism_Code => True,\n-      --  function'Mechanism_Code yeilds an integer code for the mechanism\n+      --  function'Mechanism_Code yields an integer code for the mechanism\n       --  used for the result of function, and subprogram'Mechanism_Code (n)\n       --  yields the mechanism used for formal parameter number n (a static\n       --  integer value, 1 = first parameter). The code returned is:\n@@ -350,7 +350,7 @@ package Sem_Attr is\n       --  A reference T'Null_Parameter denotes an (imaginary) object of type or\n       --  subtype T allocated at (machine) address zero. The attribute is\n       --  allowed only as the default expression of a formal parameter, or as\n-      --  an actual expression of a subporgram call. In either case, the\n+      --  an actual expression of a subprogram call. In either case, the\n       --  subprogram must be imported.\n       --\n       --  The identity of the object is represented by the address zero in the\n@@ -446,7 +446,7 @@ package Sem_Attr is\n       --  to convert this to an address using the same semantics as the\n       --  System.Storage_Elements.To_Address function. The important difference\n       --  is that this is a static attribute so it can be used in\n-      --  initializations in preealborate packages.\n+      --  initializations in preelaborate packages.\n \n       ----------------\n       -- Type_Class --"}, {"sha": "763144c296b9037f188a4cdf27d8d77fd6f2abd9", "filename": "gcc/ada/sem_case.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_case.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_case.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -52,7 +52,7 @@ package body Sem_Case is\n    type Sort_Choice_Table_Type is array (Nat range <>) of Choice_Bounds;\n    --  This new array type is used as the actual table type for sorting\n    --  discrete choices. The reason for not using Choice_Table_Type, is that\n-   --  in Sort_Choice_Table_Type we reserve entry 0 for the sorting algortim\n+   --  in Sort_Choice_Table_Type we reserve entry 0 for the sorting algorithm\n    --  (this is not absolutely necessary but it makes the code more\n    --  efficient).\n "}, {"sha": "dcc72931551d6157e4d9147c18f6a1764d460be1", "filename": "gcc/ada/sem_case.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_case.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_case.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_case.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1996-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1996-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -46,15 +46,15 @@ package Sem_Case is\n \n    procedure No_OP (C : Node_Id);\n    --  The no-operation routine. Does absolutely nothing. Can be used\n-   --  in the following generic for the parameter Proces_Empty_Choice.\n+   --  in the following generic for the parameter Process_Empty_Choice.\n \n    generic\n       with function Get_Alternatives (N : Node_Id) return List_Id;\n       --  Function needed to get to the actual list of case statement\n       --  alternatives, or array aggregate component associations or\n       --  record variants from which we can then access the actual lists\n       --  of discrete choices. N is the node for the original construct\n-      --  ie a case statement, an array aggregate or a record variant.\n+      --  i.e. a case statement, an array aggregate or a record variant.\n \n       with function Get_Choices (A : Node_Id) return List_Id;\n       --  Given a case statement alternative, array aggregate component"}, {"sha": "bbce51f7240826e5d7fcae9ed716cbf828194ebc", "filename": "gcc/ada/sem_cat.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_cat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_cat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.adb?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -151,7 +151,7 @@ package body Sem_Cat is\n          --  to apply to the same library unit, in which case the unit has\n          --  all associated categories, so we need to be careful here to\n          --  check pragmas in proper Categorization order in order to\n-         --  return the lowest appplicable value.\n+         --  return the lowest applicable value.\n \n          --  Ignore Pure specification if set by pragma Pure_Function\n \n@@ -194,7 +194,7 @@ package body Sem_Cat is\n       Unit_Category := Get_Categorization (Unit_Entity);\n       With_Category := Get_Categorization (Depended_Entity);\n \n-      --  These messages are wanings in GNAT mode, to allow it to be\n+      --  These messages are warnings in GNAT mode, to allow it to be\n       --  judiciously turned off. Otherwise it is a real error.\n \n       Error_Msg_Warn := GNAT_Mode;\n@@ -762,7 +762,7 @@ package body Sem_Cat is\n    -- Static_Discriminant_Expr --\n    ------------------------------\n \n-   --  We need to accomodate a Why_Not_Static call somehow here ???\n+   --  We need to accommodate a Why_Not_Static call somehow here ???\n \n    function Static_Discriminant_Expr (L : List_Id) return Boolean is\n       Discriminant_Spec : Node_Id;\n@@ -963,7 +963,7 @@ package body Sem_Cat is\n       end;\n \n       --  Child depends on parent; therefore parent should also be categorized\n-      --  and satify the dependency hierarchy.\n+      --  and satisfy the dependency hierarchy.\n \n       --  Check if N is a child spec\n "}, {"sha": "c86bb3c0cc1effadfc4ca9d3aba6062fdd09fc83", "filename": "gcc/ada/sem_cat.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_cat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12a13f016fb663988db80b030c4ef8761dc9c2a9/gcc%2Fada%2Fsem_cat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_cat.ads?ref=12a13f016fb663988db80b030c4ef8761dc9c2a9", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -47,7 +47,7 @@ package Sem_Cat is\n    --  True when there is a attribute definition clause specifying attribute\n    --  Nam for Typ. In Ada 2005 mode, returns True only when the attribute\n    --  definition clause is visible, unless At_Any_Place is True (in which case\n-   --  no visiblity test is made, and True is returned as long as an attribute\n+   --  no visibility test is made, and True is returned as long as an attribute\n    --  is visible at any place). Note that attribute definition clauses\n    --  inherited from parent types are taken into account by this predicate\n    --  (to test for presence of an attribute definition clause for one"}]}