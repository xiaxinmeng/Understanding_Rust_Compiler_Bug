{"sha": "aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE5NDBhYjVkNTZjN2E3Zjk4ZjZhMzllNzFjMWI4ZmMyNjgzOWM4OQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-05-02T11:00:26Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-05-02T11:00:26Z"}, "message": "type_traits (is_null_pointer): Add.\n\n2013-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/std/type_traits (is_null_pointer): Add.\n\t(__is_nullptr_t): Implement in terms of the latter.\n\t(is_fundamental, is_scalar): Adjust.\n\t* testsuite/20_util/is_null_pointer/requirements/\n\texplicit_instantiation.cc: New.\n\t* testsuite/20_util/is_null_pointer/requirements/typedefs.cc:\n\tLikewise.\n\t* testsuite/20_util/is_null_pointer/value.cc: Likewise.\n\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n\tline number.\n\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n\tLikewise.\n\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n\tLikewise.\n\nFrom-SVN: r198516", "tree": {"sha": "68543a79fb3702b37fd60ae9c575fc44dc782072", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68543a79fb3702b37fd60ae9c575fc44dc782072"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/comments", "author": null, "committer": null, "parents": [{"sha": "ff84dbcb4ebb604390c68a0563827192c30247c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff84dbcb4ebb604390c68a0563827192c30247c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff84dbcb4ebb604390c68a0563827192c30247c1"}], "stats": {"total": 172, "additions": 161, "deletions": 11}, "files": [{"sha": "b57163e5289b994b7bd6f06bf67fa5168b6ac2e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -1,3 +1,20 @@\n+2013-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/std/type_traits (is_null_pointer): Add.\n+\t(__is_nullptr_t): Implement in terms of the latter.\n+\t(is_fundamental, is_scalar): Adjust.\n+\t* testsuite/20_util/is_null_pointer/requirements/\n+\texplicit_instantiation.cc: New.\n+\t* testsuite/20_util/is_null_pointer/requirements/typedefs.cc:\n+\tLikewise.\n+\t* testsuite/20_util/is_null_pointer/value.cc: Likewise.\n+\t* testsuite/20_util/declval/requirements/1_neg.cc: Adjust dg-error\n+\tline number.\n+\t* testsuite/20_util/make_signed/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\t* testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc:\n+\tLikewise.\n+\n 2013-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/c_global/cstdio: Add comment about LWG 2249."}, {"sha": "a0a8327bec55879ce5c9879c55a05a6b76361bd5", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -402,17 +402,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public true_type { };\n \n   template<typename>\n-    struct __is_nullptr_t_helper\n+    struct __is_null_pointer_helper\n     : public false_type { };\n \n   template<>\n-    struct __is_nullptr_t_helper<std::nullptr_t>\n+    struct __is_null_pointer_helper<std::nullptr_t>\n     : public true_type { };\n \n-  // __is_nullptr_t (extension).\n+  /// is_null_pointer (LWG 2247).\n+  template<typename _Tp>\n+    struct is_null_pointer\n+    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type\n+    { };\n+\n+  /// __is_nullptr_t (extension).\n   template<typename _Tp>\n     struct __is_nullptr_t\n-    : public __is_nullptr_t_helper<typename remove_cv<_Tp>::type>::type\n+    : public is_null_pointer<_Tp>\n     { };\n \n   // Composite type categories.\n@@ -433,7 +439,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_fundamental\n   template<typename _Tp>\n     struct is_fundamental\n-    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>, __is_nullptr_t<_Tp>>::type\n+    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,\n+\t\t   is_null_pointer<_Tp>>::type\n     { };\n \n   /// is_object\n@@ -450,7 +457,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct is_scalar\n     : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,\n-                   is_member_pointer<_Tp>, __is_nullptr_t<_Tp>>::type\n+                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type\n     { };\n \n   /// is_compound"}, {"sha": "ad821905a063f3434b533a6debd1b6e75f84a9f5", "filename": "libstdc++-v3/testsuite/20_util/declval/requirements/1_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fdeclval%2Frequirements%2F1_neg.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1852 }\n+// { dg-error \"static assertion failed\" \"\" { target *-*-* } 1859 }\n \n #include <utility>\n "}, {"sha": "9df6719cf812549b8e8e4d42657fff1e430c175e", "filename": "libstdc++-v3/testsuite/20_util/is_null_pointer/requirements/explicit_instantiation.cc", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Fexplicit_instantiation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Fexplicit_instantiation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Fexplicit_instantiation.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -0,0 +1,30 @@\n+// { dg-options \"-std=gnu++11\" }\n+// { dg-do compile }\n+// 2013-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+namespace std\n+{\n+  typedef short test_type;\n+  template struct is_null_pointer<test_type>;\n+}"}, {"sha": "057d96485449718f2a5a73d08127809c562de5ab", "filename": "libstdc++-v3/testsuite/20_util/is_null_pointer/requirements/typedefs.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Frequirements%2Ftypedefs.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -0,0 +1,36 @@\n+// { dg-options \"-std=gnu++11\" }\n+// 2013-05-02  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// \n+// NB: This file is for testing type_traits with NO OTHER INCLUDES.\n+\n+#include <type_traits>\n+\n+// { dg-do compile }\n+\n+void test01()\n+{\n+  // Check for required typedefs\n+  typedef std::is_null_pointer<int>           test_type;\n+  typedef test_type::value_type               value_type;\n+  typedef test_type::type                     type;\n+  typedef test_type::type::value_type         type_value_type;\n+  typedef test_type::type::type               type_type;\n+}"}, {"sha": "2bee73a6a0b0baadf7b563d8d6108930e823dcff", "filename": "libstdc++-v3/testsuite/20_util/is_null_pointer/value.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_null_pointer%2Fvalue.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++11\" }\n+// 2013-05-02  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_null_pointer;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_null_pointer, std::nullptr_t>(true)) );\n+\n+  VERIFY( (test_category<is_null_pointer, int>(false)) );\n+  VERIFY( (test_category<is_null_pointer, float>(false)) );\n+  VERIFY( (test_category<is_null_pointer, EnumType>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int*>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int(*)(int)>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int (ClassType::*)>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int (ClassType::*) (int)>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int[2]>(false)) );\n+  VERIFY( (test_category<is_null_pointer, float[][3]>(false)) );\n+  VERIFY( (test_category<is_null_pointer, EnumType[2][3][4]>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int*[3]>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int(*[][2])(int)>(false)) );\n+  VERIFY( (test_category<is_null_pointer, int (ClassType::*[2][3])>(false)) );\n+  VERIFY( (test_category<is_null_pointer,\n+\t   int (ClassType::*[][2][3]) (int)>(false)) );\n+  VERIFY( (test_category<is_null_pointer, ClassType>(false)) );\n+  VERIFY( (test_category<is_null_pointer, PODType>(false)) );\n+  VERIFY( (test_category<is_null_pointer, void>(false)) );\n+  VERIFY( (test_category<is_null_pointer, NType>(false)) );\n+  VERIFY( (test_category<is_null_pointer, TType>(false)) );\n+  VERIFY( (test_category<is_null_pointer, SLType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "077e32797a66d1b5a555dcb8c13c8d83aad124fb", "filename": "libstdc++-v3/testsuite/20_util/make_signed/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_signed%2Frequirements%2Ftypedefs_neg.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1594 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1558 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1601 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1565 }"}, {"sha": "2bc1cbbad12d358dbd856bef4cb33cec2ef3c43c", "filename": "libstdc++-v3/testsuite/20_util/make_unsigned/requirements/typedefs_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fmake_unsigned%2Frequirements%2Ftypedefs_neg.cc?ref=aa940ab5d56c7a7f98f6a39e71c1b8fc26839c89", "patch": "@@ -48,5 +48,5 @@ void test01()\n // { dg-error \"required from here\" \"\" { target *-*-* } 40 }\n // { dg-error \"required from here\" \"\" { target *-*-* } 42 }\n \n-// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1512 }\n-// { dg-error \"declaration of\" \"\" { target *-*-* } 1476 }\n+// { dg-error \"invalid use of incomplete type\" \"\" { target *-*-* } 1519 }\n+// { dg-error \"declaration of\" \"\" { target *-*-* } 1483 }"}]}