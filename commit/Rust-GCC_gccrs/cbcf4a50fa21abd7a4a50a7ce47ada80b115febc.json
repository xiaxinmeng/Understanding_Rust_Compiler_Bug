{"sha": "cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "node_id": "C_kwDOANBUbNoAKGNiY2Y0YTUwZmEyMWFiZDdhNGE1MGE3Y2U0N2FkYTgwYjExNWZlYmM", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-01-10T07:39:31Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-01-23T22:17:59Z"}, "message": "[aarch64/64821]: Simplify __builtin_aarch64_sqrt* into internal function .SQRT.\n\nThis is a simple patch which simplifies the __builtin_aarch64_sqrt* builtins\ninto the internal function SQRT which allows for constant folding and other\noptimizations at the gimple level. It was originally suggested we do to\n__builtin_sqrt just for __builtin_aarch64_sqrtdf when -fno-math-errno\nbut since r6-4969-g686ee9719a4 we have the internal function SQRT which does\nthe same so it makes we don't need to check -fno-math-errno either now.\n\nApplied as approved after bootstrapped and tested on aarch64-linux-gnu with no regressions.\n\n\tPR target/64821\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_general_gimple_fold_builtin): Handle\n\t__builtin_aarch64_sqrt* and simplify into SQRT internal\n\tfunction.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vsqrt-1.c: New test.\n\t* gcc.target/aarch64/vsqrt-2.c: New test.", "tree": {"sha": "b12e35dc952601d083fbb9ece21f2ad46802fd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b12e35dc952601d083fbb9ece21f2ad46802fd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603a9ab41f4fd2748407fecf8b4ce2e5f9f71c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603a9ab41f4fd2748407fecf8b4ce2e5f9f71c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603a9ab41f4fd2748407fecf8b4ce2e5f9f71c23"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "5217dbdb2ac78bba0a669d22af6d769d1fe91a3d", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "patch": "@@ -2820,6 +2820,13 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n \tbreak;\n \n+      /* Lower sqrt builtins to gimple/internal function sqrt. */\n+      BUILTIN_VHSDF_DF (UNOP, sqrt, 2, FP)\n+\tnew_stmt = gimple_build_call_internal (IFN_SQRT,\n+\t\t\t\t\t       1, args[0]);\n+\tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n+\tbreak;\n+\n      /*lower store and load neon builtins to gimple.  */\n      BUILTIN_VALL_F16 (LOAD1, ld1, 0, LOAD)\n      BUILTIN_VDQ_I (LOAD1_U, ld1, 0, LOAD)"}, {"sha": "e614c7d5a0fd7243fbb62285577da413a247130e", "filename": "gcc/testsuite/gcc.target/aarch64/vsqrt-1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-1.c?ref=cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "patch": "@@ -0,0 +1,17 @@\n+/* PR target/64821 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* Check that we constant fold sqrt(4.0) into 2.0. */\n+/* { dg-final { scan-tree-dump-not \" \\\\\\.SQRT\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump \" 2\\\\\\.0e\\\\\\+0\" \"optimized\" } } */\n+/* { dg-final { scan-assembler-not \"fsqrt\" } } */\n+/* We should produce a fmov to d0 with 2.0 but currently don't, see PR 103959. */\n+/* { dg-final { scan-assembler-times \"\\n\\tfmov\\td0, 2.0e.0\" 1 { xfail *-*-* } } } */\n+\n+#include <arm_neon.h>\n+\n+float64x1_t f64(void)\n+{\n+   float64x1_t a = (float64x1_t){4.0};\n+   return vsqrt_f64 (a);\n+}"}, {"sha": "4dea4da7da6fba33c070460e1e9c63ca17a2f0cd", "filename": "gcc/testsuite/gcc.target/aarch64/vsqrt-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbcf4a50fa21abd7a4a50a7ce47ada80b115febc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvsqrt-2.c?ref=cbcf4a50fa21abd7a4a50a7ce47ada80b115febc", "patch": "@@ -0,0 +1,28 @@\n+/* PR target/64821 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-optimized\" } */\n+#include <arm_neon.h>\n+\n+/* Check that we lower __builtin_aarch64_sqrt* into the internal function SQRT. */\n+/* { dg-final { scan-tree-dump-times \" __builtin_aarch64_sqrt\" 0 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\.SQRT \" 4 \"optimized\" } } */\n+\n+float64x1_t f64(float64x1_t a)\n+{\n+      return vsqrt_f64 (a);\n+}\n+\n+float64x2_t f64q(float64x2_t a)\n+{\n+      return vsqrtq_f64 (a);\n+}\n+\n+float32x2_t f32(float32x2_t a)\n+{\n+      return vsqrt_f32 (a);\n+}\n+\n+float32x4_t f32q(float32x4_t a)\n+{\n+      return vsqrtq_f32 (a);\n+}"}]}