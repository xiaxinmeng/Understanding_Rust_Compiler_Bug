{"sha": "852993e3817924f37fdfa9d8c6b191cb30934cfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUyOTkzZTM4MTc5MjRmMzdmZGZhOWQ4YzZiMTkxY2IzMDkzNGNmYg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-09-06T16:01:31Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-06T16:01:31Z"}, "message": "re PR libgcj/23739 (JNI: IsAssignableFrom reverses arguments)\n\n\tPR libgcj/23739:\n\t* testsuite/libjava.jni/pr23739.c: New file.\n\t* testsuite/libjava.jni/pr23739.java: New file.\n\t* testsuite/libjava.jni/pr23739.out: New file.\n\t* jni.cc (_Jv_JNI_IsAssignableFrom): Reversed arguments.\n\t* java/lang/reflect/natMethod.cc (invoke): Updated.\n\t* java/lang/natClass.cc (isAssignableFrom): Updated.\n\t(isInstance): Likewise.\n\t(_Jv_IsAssignableFrom): Reversed arguments.\n\t(_Jv_IsInstanceOf): Updated.\n\t(_Jv_CheckCast): Likewise.\n\t(_Jv_CheckArrayStore): Likewise.\n\t(_Jv_IsAssignableFromSlow): Reversed arguments.\n\t(_Jv_InterfaceAssignableFrom): Likewise.\n\t* link.cc (verify_type_assertions): Updated.\n\t* prims.cc (_Jv_CheckAccess): Updated.\n\nFrom-SVN: r103953", "tree": {"sha": "3a53772caa4302c9e6c17a8f4d8ff1296f451bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a53772caa4302c9e6c17a8f4d8ff1296f451bb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/852993e3817924f37fdfa9d8c6b191cb30934cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852993e3817924f37fdfa9d8c6b191cb30934cfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/852993e3817924f37fdfa9d8c6b191cb30934cfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/852993e3817924f37fdfa9d8c6b191cb30934cfb/comments", "author": null, "committer": null, "parents": [{"sha": "3e248b831501dcc1b222a2f27e880eff0b54e523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e248b831501dcc1b222a2f27e880eff0b54e523", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e248b831501dcc1b222a2f27e880eff0b54e523"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "b8c11d90ee391167bcb652f04665b91b2d434620", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -1,3 +1,22 @@\n+2005-09-06  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/23739:\n+\t* testsuite/libjava.jni/pr23739.c: New file.\n+\t* testsuite/libjava.jni/pr23739.java: New file.\n+\t* testsuite/libjava.jni/pr23739.out: New file.\n+\t* jni.cc (_Jv_JNI_IsAssignableFrom): Reversed arguments.\n+\t* java/lang/reflect/natMethod.cc (invoke): Updated.\n+\t* java/lang/natClass.cc (isAssignableFrom): Updated.\n+\t(isInstance): Likewise.\n+\t(_Jv_IsAssignableFrom): Reversed arguments.\n+\t(_Jv_IsInstanceOf): Updated.\n+\t(_Jv_CheckCast): Likewise.\n+\t(_Jv_CheckArrayStore): Likewise.\n+\t(_Jv_IsAssignableFromSlow): Reversed arguments.\n+\t(_Jv_InterfaceAssignableFrom): Likewise.\n+\t* link.cc (verify_type_assertions): Updated.\n+\t* prims.cc (_Jv_CheckAccess): Updated.\n+\n 2005-09-05  Ranjit Mathew  <rmathew@hotmail.com>\n \n \tTestsuite changes for PR java/23431."}, {"sha": "fa52713cc36bd399087c3e469830aa5bdd33d612", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -623,7 +623,7 @@ java::lang::Class::isAssignableFrom (jclass klass)\n   // Arguments may not have been initialized, given \".class\" syntax.\n   _Jv_InitClass (this);\n   _Jv_InitClass (klass);\n-  return _Jv_IsAssignableFrom (this, klass);\n+  return _Jv_IsAssignableFrom (klass, this);\n }\n \n jboolean\n@@ -632,7 +632,7 @@ java::lang::Class::isInstance (jobject obj)\n   if (! obj)\n     return false;\n   _Jv_InitClass (this);\n-  return _Jv_IsAssignableFrom (this, JV_CLASS (obj));\n+  return _Jv_IsAssignableFrom (JV_CLASS (obj), this);\n }\n \n jobject\n@@ -964,7 +964,7 @@ _Jv_LookupInterfaceMethodIdx (jclass klass, jclass iface, int method_idx)\n }\n \n jboolean\n-_Jv_IsAssignableFrom (jclass target, jclass source)\n+_Jv_IsAssignableFrom (jclass source, jclass target)\n {\n   if (source == target)\n     return true;\n@@ -984,7 +984,7 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n       // two interfaces for assignability.\n       if (__builtin_expect \n           (source->idt == NULL || source->isInterface(), false))\n-        return _Jv_InterfaceAssignableFrom (target, source);\n+        return _Jv_InterfaceAssignableFrom (source, target);\n \n       _Jv_IDispatchTable *cl_idt = source->idt;\n       _Jv_IDispatchTable *if_idt = target->idt;\n@@ -1033,19 +1033,19 @@ _Jv_IsAssignableFrom (jclass target, jclass source)\n // superinterface of SOURCE. This is used when SOURCE is also an interface,\n // or a class with no interface dispatch table.\n jboolean\n-_Jv_InterfaceAssignableFrom (jclass iface, jclass source)\n+_Jv_InterfaceAssignableFrom (jclass source, jclass iface)\n {\n   for (int i = 0; i < source->interface_count; i++)\n     {\n       jclass interface = source->interfaces[i];\n       if (iface == interface\n-          || _Jv_InterfaceAssignableFrom (iface, interface))\n+          || _Jv_InterfaceAssignableFrom (interface, iface))\n         return true;      \n     }\n     \n   if (!source->isInterface()\n       && source->superclass \n-      && _Jv_InterfaceAssignableFrom (iface, source->superclass))\n+      && _Jv_InterfaceAssignableFrom (source->superclass, iface))\n     return true;\n         \n   return false;\n@@ -1056,14 +1056,14 @@ _Jv_IsInstanceOf(jobject obj, jclass cl)\n {\n   if (__builtin_expect (!obj, false))\n     return false;\n-  return (_Jv_IsAssignableFrom (cl, JV_CLASS (obj)));\n+  return _Jv_IsAssignableFrom (JV_CLASS (obj), cl);\n }\n \n void *\n _Jv_CheckCast (jclass c, jobject obj)\n {\n   if (__builtin_expect \n-       (obj != NULL && ! _Jv_IsAssignableFrom(c, JV_CLASS (obj)), false))\n+      (obj != NULL && ! _Jv_IsAssignableFrom(JV_CLASS (obj), c), false))\n     throw new java::lang::ClassCastException\n       ((new java::lang::StringBuffer\n \t(obj->getClass()->getName()))->append\n@@ -1084,7 +1084,7 @@ _Jv_CheckArrayStore (jobject arr, jobject obj)\n \treturn;\n       jclass obj_class = JV_CLASS (obj);\n       if (__builtin_expect \n-          (! _Jv_IsAssignableFrom (elt_class, obj_class), false))\n+          (! _Jv_IsAssignableFrom (obj_class, elt_class), false))\n \tthrow new java::lang::ArrayStoreException\n \t\t((new java::lang::StringBuffer\n \t\t (JvNewStringUTF(\"Cannot store \")))->append\n@@ -1095,7 +1095,7 @@ _Jv_CheckArrayStore (jobject arr, jobject obj)\n }\n \n jboolean\n-_Jv_IsAssignableFromSlow (jclass target, jclass source)\n+_Jv_IsAssignableFromSlow (jclass source, jclass target)\n {\n   // First, strip arrays.\n   while (target->isArray ())\n@@ -1129,7 +1129,7 @@ _Jv_IsAssignableFromSlow (jclass target, jclass source)\n            {\n              // We use a recursive call because we also need to\n              // check superinterfaces.\n-             if (_Jv_IsAssignableFromSlow (target, source->getInterface (i)))\n+             if (_Jv_IsAssignableFromSlow (source->getInterface (i), target))\n                return true;\n            }\n        }"}, {"sha": "94bc49be5482725034693836941888eb1ed1be28", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -163,7 +163,7 @@ java::lang::reflect::Method::invoke (jobject obj, jobjectArray args)\n   else\n     {\n       jclass objClass = JV_CLASS (obj);\n-      if (! _Jv_IsAssignableFrom (declaringClass, objClass))\n+      if (! _Jv_IsAssignableFrom (objClass, declaringClass))\n         throw new java::lang::IllegalArgumentException;\n     }\n "}, {"sha": "13bb12cf5dd5f0520f09ac66e6687fd30bae127a", "filename": "libjava/jni.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjni.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fjni.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni.cc?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -552,7 +552,7 @@ _Jv_JNI_GetSuperclass (JNIEnv *env, jclass clazz)\n static jboolean JNICALL\n _Jv_JNI_IsAssignableFrom (JNIEnv *, jclass clazz1, jclass clazz2)\n {\n-  return unwrap (clazz1)->isAssignableFrom (unwrap (clazz2));\n+  return unwrap (clazz2)->isAssignableFrom (unwrap (clazz1));\n }\n \n static jint JNICALL"}, {"sha": "7e51a2670e3e2a5c0d4db63163e3ea59563c9cf1", "filename": "libjava/link.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Flink.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Flink.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Flink.cc?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -1620,7 +1620,7 @@ _Jv_Linker::verify_type_assertions (jclass klass)\n \t  if (cl1 == NULL || cl2 == NULL)\n \t    continue;\n \n-          if (! _Jv_IsAssignableFromSlow (cl2, cl1))\n+          if (! _Jv_IsAssignableFromSlow (cl1, cl2))\n \t    {\n \t      jstring s = JvNewStringUTF (\"Incompatible types: In class \");\n \t      s = s->concat (klass->getName());"}, {"sha": "ba5c9efd260dcb20c6e807db34e89e8baa01ef27", "filename": "libjava/prims.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -1557,7 +1557,7 @@ _Jv_CheckAccess (jclass self_klass, jclass other_klass, jint flags)\n   return ((self_klass == other_klass)\n \t  || ((flags & Modifier::PUBLIC) != 0)\n \t  || (((flags & Modifier::PROTECTED) != 0)\n-\t      && _Jv_IsAssignableFromSlow (other_klass, self_klass))\n+\t      && _Jv_IsAssignableFromSlow (self_klass, other_klass))\n \t  || (((flags & Modifier::PRIVATE) == 0)\n \t      && _Jv_ClassNameSamePackage (self_klass->name,\n \t\t\t\t\t   other_klass->name)));"}, {"sha": "4a8ea65ca0a13448372033228ed3f3f84bc8ab53", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -1,4 +1,4 @@\n-# Makefile.in generated by automake 1.9.4 from Makefile.am.\n+# Makefile.in generated by automake 1.9.3 from Makefile.am.\n # @configure_input@\n \n # Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,"}, {"sha": "0f6bfbefe1690fdd43af68da52a461174258ae4f", "filename": "libjava/testsuite/libjava.jni/pr23739.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.c?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include \"pr23739.h\"\n+\n+JNIEXPORT void JNICALL\n+Java_pr23739_checkOrder (JNIEnv *env, jclass cls, jclass clazz1, jclass clazz2)\n+{\n+  printf (\"B extends A\\n\");\n+  printf (\"isAssignableFrom (A, B): %d\\n\",\n+          (*env)->IsAssignableFrom (env, clazz1, clazz2));\n+  printf (\"isAssignableFrom (B, A): %d\\n\",\n+          (*env)->IsAssignableFrom (env, clazz2, clazz1));\n+}"}, {"sha": "b2e54c5488bd93ac54e3fd72bb31853a863227ac", "filename": "libjava/testsuite/libjava.jni/pr23739.java", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.java?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -0,0 +1,22 @@\n+public class pr23739\n+{\n+  static\n+  {\n+    System.loadLibrary (\"pr23739\");\n+  }\n+\n+  public static class A\n+  {\n+  }\n+\n+  public static class B extends A\n+  {\n+  }\n+\n+  static native void checkOrder (Class clazz1, Class clazz2);\n+\n+  public static void main (String[] args)\n+  {\n+    checkOrder (A.class, B.class);\n+  }\n+}"}, {"sha": "3e94564c244a750f7cf512fcc041b7977a149ec1", "filename": "libjava/testsuite/libjava.jni/pr23739.out", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/852993e3817924f37fdfa9d8c6b191cb30934cfb/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fpr23739.out?ref=852993e3817924f37fdfa9d8c6b191cb30934cfb", "patch": "@@ -0,0 +1,3 @@\n+B extends A\n+isAssignableFrom (A, B): 0\n+isAssignableFrom (B, A): 1"}]}