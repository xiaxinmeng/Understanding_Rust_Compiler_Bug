{"sha": "eb23241ba81aace0c881ccee4643632809741953", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWIyMzI0MWJhODFhYWNlMGM4ODFjY2VlNDY0MzYzMjgwOTc0MTk1Mw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-16T10:43:52Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-16T10:43:52Z"}, "message": "[AArch64] Enable VECT_COMPARE_COSTS by default for SVE\n\nThis patch enables VECT_COMPARE_COSTS by default for SVE, both so\nthat we can compare SVE against Advanced SIMD and so that (with future\npatches) we can compare multiple SVE vectorisation approaches against\neach other.  It also adds a target-specific --param to control this.\n\n2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/aarch64.opt (--param=aarch64-sve-compare-costs):\n\tNew option.\n\t* doc/invoke.texi: Document it.\n\t* config/aarch64/aarch64.c (aarch64_autovectorize_vector_modes):\n\tBy default, return VECT_COMPARE_COSTS for SVE.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/reduc_3.c: Split multi-vector cases out\n\tinto...\n\t* gcc.target/aarch64/sve/reduc_3_costly.c: ...this new test,\n\tpassing -fno-vect-cost-model for them.\n\t* gcc.target/aarch64/sve/slp_6.c: Add -fno-vect-cost-model.\n\t* gcc.target/aarch64/sve/slp_7.c,\n\t* gcc.target/aarch64/sve/slp_7_run.c: Split multi-vector cases out\n\tinto...\n\t* gcc.target/aarch64/sve/slp_7_costly.c,\n\t* gcc.target/aarch64/sve/slp_7_costly_run.c: ...these new tests,\n\tpassing -fno-vect-cost-model for them.\n\t* gcc.target/aarch64/sve/while_7.c: Add -fno-vect-cost-model.\n\t* gcc.target/aarch64/sve/while_9.c: Likewise.\n\nFrom-SVN: r278337", "tree": {"sha": "7eec28a84e7f30c72a362aff3439e15219dcea7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eec28a84e7f30c72a362aff3439e15219dcea7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb23241ba81aace0c881ccee4643632809741953", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb23241ba81aace0c881ccee4643632809741953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb23241ba81aace0c881ccee4643632809741953", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb23241ba81aace0c881ccee4643632809741953/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcc7e346bf9b5dc77797ea949d6adc740deb30ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc7e346bf9b5dc77797ea949d6adc740deb30ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc7e346bf9b5dc77797ea949d6adc740deb30ca"}], "stats": {"total": 190, "additions": 154, "deletions": 36}, "files": [{"sha": "2eee46b4ebdee378198f757f83cfaef117c77535", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,3 +1,11 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.opt (--param=aarch64-sve-compare-costs):\n+\tNew option.\n+\t* doc/invoke.texi: Document it.\n+\t* config/aarch64/aarch64.c (aarch64_autovectorize_vector_modes):\n+\tBy default, return VECT_COMPARE_COSTS for SVE.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* target.h (VECT_COMPARE_COSTS): New constant."}, {"sha": "9ffe2138c639fa5dacfd3b0b6b9bfc16fed48064", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -15962,7 +15962,15 @@ aarch64_autovectorize_vector_modes (vector_modes *modes, bool)\n      for this case.  */\n   modes->safe_push (V2SImode);\n \n-  return 0;\n+  unsigned int flags = 0;\n+  /* Consider enabling VECT_COMPARE_COSTS for SVE, both so that we\n+     can compare SVE against Advanced SIMD and so that we can compare\n+     multiple SVE vectorization approaches against each other.  There's\n+     not really any point doing this for Advanced SIMD only, since the\n+     first mode that works should always be the best.  */\n+  if (TARGET_SVE && aarch64_sve_compare_costs)\n+    flags |= VECT_COMPARE_COSTS;\n+  return flags;\n }\n \n /* Implement TARGET_MANGLE_TYPE.  */"}, {"sha": "3b675e162592e683861c74f7ca9cd242d4ba55f8", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -258,3 +258,7 @@ long aarch64_stack_protector_guard_offset = 0\n moutline-atomics\n Target Report Mask(OUTLINE_ATOMICS) Save\n Generate local calls to out-of-line atomic operations.\n+\n+-param=aarch64-sve-compare-costs=\n+Target Joined UInteger Var(aarch64_sve_compare_costs) Init(1) IntegerRange(0, 1) Param\n+When vectorizing for SVE, consider using unpacked vectors for smaller elements and use the cost model to pick the cheapest approach.  Also use the cost model to choose between SVE and Advanced SIMD vectorization."}, {"sha": "7f19d6750882a1da8b464a987658c5634b1e1ac6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -11179,8 +11179,8 @@ without notice in future releases.\n In order to get minimal, maximal and default value of a parameter,\n one can use @option{--help=param -Q} options.\n \n-In each case, the @var{value} is an integer.  The allowable choices for\n-@var{name} are:\n+In each case, the @var{value} is an integer.  The following choices\n+of @var{name} are recognized for all targets:\n \n @table @gcctabopt\n @item predictable-branch-outcome\n@@ -12396,6 +12396,20 @@ statements or when determining their validity prior to issuing\n diagnostics.\n \n @end table\n+\n+The following choices of @var{name} are available on AArch64 targets:\n+\n+@table @gcctabopt\n+@item aarch64-sve-compare-costs\n+When vectorizing for SVE, consider using ``unpacked'' vectors for\n+smaller elements and use the cost model to pick the cheapest approach.\n+Also use the cost model to choose between SVE and Advanced SIMD vectorization.\n+\n+Using unpacked vectors includes storing smaller elements in larger\n+containers and accessing elements with extending loads and truncating\n+stores.\n+@end table\n+\n @end table\n \n @node Instrumentation Options"}, {"sha": "4274edd08468c1370b68530b528ce5925c9e1f91", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,3 +1,19 @@\n+2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/reduc_3.c: Split multi-vector cases out\n+\tinto...\n+\t* gcc.target/aarch64/sve/reduc_3_costly.c: ...this new test,\n+\tpassing -fno-vect-cost-model for them.\n+\t* gcc.target/aarch64/sve/slp_6.c: Add -fno-vect-cost-model.\n+\t* gcc.target/aarch64/sve/slp_7.c,\n+\t* gcc.target/aarch64/sve/slp_7_run.c: Split multi-vector cases out\n+\tinto...\n+\t* gcc.target/aarch64/sve/slp_7_costly.c,\n+\t* gcc.target/aarch64/sve/slp_7_costly_run.c: ...these new tests,\n+\tpassing -fno-vect-cost-model for them.\n+\t* gcc.target/aarch64/sve/while_7.c: Add -fno-vect-cost-model.\n+\t* gcc.target/aarch64/sve/while_9.c: Likewise.\n+\n 2019-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/bb-slp-4.c: Expect the block to be vectorized"}, {"sha": "0fc193b52e794c7b549a7571839ab5e79663c051", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_3.c", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -17,25 +17,13 @@ void reduc_ptr_##DSTTYPE##_##SRCTYPE (DSTTYPE *restrict sum,\t\\\n \n REDUC_PTR (int8_t, int8_t)\n REDUC_PTR (int16_t, int16_t)\n-\n REDUC_PTR (int32_t, int32_t)\n REDUC_PTR (int64_t, int64_t)\n \n REDUC_PTR (_Float16, _Float16)\n REDUC_PTR (float, float)\n REDUC_PTR (double, double)\n \n-/* Widening reductions.  */\n-REDUC_PTR (int32_t, int8_t)\n-REDUC_PTR (int32_t, int16_t)\n-\n-REDUC_PTR (int64_t, int8_t)\n-REDUC_PTR (int64_t, int16_t)\n-REDUC_PTR (int64_t, int32_t)\n-\n-REDUC_PTR (float, _Float16)\n-REDUC_PTR (double, float)\n-\n /* Float<>Int conversions */\n REDUC_PTR (_Float16, int16_t)\n REDUC_PTR (float, int32_t)\n@@ -45,8 +33,14 @@ REDUC_PTR (int16_t, _Float16)\n REDUC_PTR (int32_t, float)\n REDUC_PTR (int64_t, double)\n \n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 3 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 { xfail *-*-* } } } */\n+/* We don't yet vectorize the int<-float cases.  */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h\\n} 2 } } */\n-/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 3 } } */\n-/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 2 } } */"}, {"sha": "988459df8af9340d48531db586474ba9aa9675de", "filename": "gcc/testsuite/gcc.target/aarch64/sve/reduc_3_costly.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3_costly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3_costly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Freduc_3_costly.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fno-vect-cost-model\" } */\n+\n+#include <stdint.h>\n+\n+#define NUM_ELEMS(TYPE) (32 / sizeof (TYPE))\n+\n+#define REDUC_PTR(DSTTYPE, SRCTYPE)\t\t\t\t\\\n+void reduc_ptr_##DSTTYPE##_##SRCTYPE (DSTTYPE *restrict sum,\t\\\n+\t\t\t\t      SRCTYPE *restrict array,\t\\\n+\t\t\t\t      int count)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  *sum = 0;\t\t\t\t\t\t\t\\\n+  for (int i = 0; i < count; ++i)\t\t\t\t\\\n+    *sum += array[i];\t\t\t\t\t\t\\\n+}\n+\n+/* Widening reductions.  */\n+REDUC_PTR (int32_t, int8_t)\n+REDUC_PTR (int32_t, int16_t)\n+\n+REDUC_PTR (int64_t, int8_t)\n+REDUC_PTR (int64_t, int16_t)\n+REDUC_PTR (int64_t, int32_t)\n+\n+REDUC_PTR (float, _Float16)\n+REDUC_PTR (double, float)\n+\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "44d128477d27afc4f944cb3b788b4e70f633feef", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_6.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable -ffast-math\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable -ffast-math -fno-vect-cost-model\" } */\n \n #include <stdint.h>\n "}, {"sha": "19207207999454aab3d2e7da782229983a8765f8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_7.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -31,37 +31,27 @@ vec_slp_##TYPE (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n   T (uint16_t)\t\t\t\t\t\\\n   T (int32_t)\t\t\t\t\t\\\n   T (uint32_t)\t\t\t\t\t\\\n-  T (int64_t)\t\t\t\t\t\\\n-  T (uint64_t)\t\t\t\t\t\\\n   T (_Float16)\t\t\t\t\t\\\n-  T (float)\t\t\t\t\t\\\n-  T (double)\n+  T (float)\n \n TEST_ALL (VEC_PERM)\n \n-/* We can't use SLP for the 64-bit loops, since the number of reduction\n-   results might be greater than the number of elements in the vector.\n-   Otherwise we have two loads per loop, one for the initial vector\n-   and one for the loop body.  */\n+/* We have two loads per loop, one for the initial vector and one for\n+   the loop body.  */\n /* { dg-final { scan-assembler-times {\\tld1b\\t} 2 } } */\n /* { dg-final { scan-assembler-times {\\tld1h\\t} 3 } } */\n /* { dg-final { scan-assembler-times {\\tld1w\\t} 3 } } */\n-/* { dg-final { scan-assembler-times {\\tld4d\\t} 3 } } */\n /* { dg-final { scan-assembler-not {\\tld4b\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld4h\\t} } } */\n /* { dg-final { scan-assembler-not {\\tld4w\\t} } } */\n-/* { dg-final { scan-assembler-not {\\tld1d\\t} } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.b} 8 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.h} 8 } } */\n /* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.s} 8 } } */\n-/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 8 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\th[0-9]+, p[0-7], z[0-9]+\\.h} 4 } } */\n /* { dg-final { scan-assembler-times {\\tfaddv\\ts[0-9]+, p[0-7], z[0-9]+\\.s} 4 } } */\n-/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 4 } } */\n \n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.b} 4 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.h} 6 } } */\n /* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.s} 6 } } */\n-/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n \n /* { dg-final { scan-assembler-not {\\tuqdec} } } */"}, {"sha": "69c33192a7a47b703167c42a88313656bca37aab", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_7_costly.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable -ffast-math -fno-vect-cost-model\" } */\n+\n+#include <stdint.h>\n+\n+#define VEC_PERM(TYPE)\t\t\t\t\t\t\\\n+void __attribute__ ((noinline, noclone))\t\t\t\\\n+vec_slp_##TYPE (TYPE *restrict a, TYPE *restrict b, int n)\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE x0 = b[0];\t\t\t\t\t\t\\\n+  TYPE x1 = b[1];\t\t\t\t\t\t\\\n+  TYPE x2 = b[2];\t\t\t\t\t\t\\\n+  TYPE x3 = b[3];\t\t\t\t\t\t\\\n+  for (int i = 0; i < n; ++i)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      x0 += a[i * 4];\t\t\t\t\t\t\\\n+      x1 += a[i * 4 + 1];\t\t\t\t\t\\\n+      x2 += a[i * 4 + 2];\t\t\t\t\t\\\n+      x3 += a[i * 4 + 3];\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  b[0] = x0;\t\t\t\t\t\t\t\\\n+  b[1] = x1;\t\t\t\t\t\t\t\\\n+  b[2] = x2;\t\t\t\t\t\t\t\\\n+  b[3] = x3;\t\t\t\t\t\t\t\\\n+}\n+\n+#define TEST_ALL(T)\t\t\t\t\\\n+  T (int64_t)\t\t\t\t\t\\\n+  T (uint64_t)\t\t\t\t\t\\\n+  T (double)\n+\n+TEST_ALL (VEC_PERM)\n+\n+/* We can't use SLP for the 64-bit loops, since the number of reduction\n+   results might be greater than the number of elements in the vector.  */\n+/* { dg-final { scan-assembler-times {\\tld4d\\t} 3 } } */\n+/* { dg-final { scan-assembler-not {\\tld1d\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tuaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 8 } } */\n+/* { dg-final { scan-assembler-times {\\tfaddv\\td[0-9]+, p[0-7], z[0-9]+\\.d} 4 } } */\n+\n+/* { dg-final { scan-assembler-times {\\twhilelo\\tp[0-7]\\.d} 6 } } */\n+\n+/* { dg-final { scan-assembler-not {\\tuqdec} } } */"}, {"sha": "fbf943297595d4797a719fdedf6fa40c06f0f9cb", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_7_costly_run.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_costly_run.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target aarch64_sve_hw } } */\n+/* { dg-options \"-O2 -ftree-vectorize -ffast-math -fno-vect-cost-model\" } */\n+\n+#define FILENAME \"slp_7_costly.c\"\n+#include \"slp_7_run.c\""}, {"sha": "7c0aa62d8d877b55836b7560567c5217f5ba4ec3", "filename": "gcc/testsuite/gcc.target/aarch64/sve/slp_7_run.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fslp_7_run.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,7 +1,11 @@\n /* { dg-do run { target aarch64_sve_hw } } */\n /* { dg-options \"-O2 -ftree-vectorize -ffast-math\" } */\n \n-#include \"slp_7.c\"\n+#ifndef FILENAME\n+#define FILENAME \"slp_7.c\"\n+#endif\n+\n+#include FILENAME\n \n #define N (54 * 4)\n "}, {"sha": "a66a20d21f656644d5398544a0d2bae208a1a5dd", "filename": "gcc/testsuite/gcc.target/aarch64/sve/while_7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_7.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable -fno-vect-cost-model\" } */\n \n #include <stdint.h>\n "}, {"sha": "dd3f404ab396e35af9dcd5bd41aa97751571775e", "filename": "gcc/testsuite/gcc.target/aarch64/sve/while_9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb23241ba81aace0c881ccee4643632809741953/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fwhile_9.c?ref=eb23241ba81aace0c881ccee4643632809741953", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable\" } */\n+/* { dg-options \"-O2 -ftree-vectorize -msve-vector-bits=scalable -fno-vect-cost-model\" } */\n \n #include <stdint.h>\n "}]}