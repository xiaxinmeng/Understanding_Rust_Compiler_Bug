{"sha": "45a2f71a7840c52e69bdb86e2daeafcae3349d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDVhMmY3MWE3ODQwYzUyZTY5YmRiODZlMmRhZWFmY2FlMzM0OWQ5Yg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-22T13:14:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-22T13:14:21Z"}, "message": "Added peephole patterns for stack adjustments followed by QI/HI pushes.\n\n(movsi): Use output_move_dconst for TARGET_32532.\n(ffs): New patterns.\n\nFrom-SVN: r6607", "tree": {"sha": "f80305c4b1f1b8f6b619fb1a944c41112c2fa33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80305c4b1f1b8f6b619fb1a944c41112c2fa33c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45a2f71a7840c52e69bdb86e2daeafcae3349d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a2f71a7840c52e69bdb86e2daeafcae3349d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45a2f71a7840c52e69bdb86e2daeafcae3349d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45a2f71a7840c52e69bdb86e2daeafcae3349d9b/comments", "author": null, "committer": null, "parents": [{"sha": "bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb4efbc82f2fa269a3a10ab78d859a218890e6f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb4efbc82f2fa269a3a10ab78d859a218890e6f3"}], "stats": {"total": 158, "additions": 137, "deletions": 21}, "files": [{"sha": "fdff9af42485f752ff6c66422bc1f778f3dd0b48", "filename": "gcc/config/ns32k/ns32k.md", "status": "modified", "additions": 137, "deletions": 21, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45a2f71a7840c52e69bdb86e2daeafcae3349d9b/gcc%2Fconfig%2Fns32k%2Fns32k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45a2f71a7840c52e69bdb86e2daeafcae3349d9b/gcc%2Fconfig%2Fns32k%2Fns32k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.md?ref=45a2f71a7840c52e69bdb86e2daeafcae3349d9b", "patch": "@@ -1,14 +1,5 @@\n-; BUGS:\n-;; Insert no-op between an insn with memory read-write operands\n-;;   following by a scale-indexing operation.\n-;; The Sequent assembler does not allow addresses to be used\n-;;   except in insns which explicitly compute an effective address.\n-;;   I.e., one cannot say \"cmpd _p,@_x\"\n-;; Implement unsigned multiplication??\n-\n-;;- Machine description for GNU compiler\n-;;- ns32000 Version\n-;;   Copyright (C) 1988 Free Software Foundation, Inc.\n+;;- Machine description for GNU compiler, ns32000 Version\n+;;   Copyright (C) 1988, 1994 Free Software Foundation, Inc.\n ;;   Contributed by Michael Tiemann (tiemann@mcc.com)\n \n ;; This file is part of GNU CC.\n@@ -28,6 +19,14 @@\n ;; the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n \n \n+; BUGS:\n+;; Insert no-op between an insn with memory read-write operands\n+;;   following by a scale-indexing operation.\n+;; The Sequent assembler does not allow addresses to be used\n+;;   except in insns which explicitly compute an effective address.\n+;;   I.e., one cannot say \"cmpd _p,@_x\"\n+;; Implement unsigned multiplication??\n+\n ;;- Instruction patterns.  When multiple patterns apply,\n ;;- the first one in the file is chosen.\n ;;-\n@@ -341,15 +340,19 @@\n   if (GET_CODE (operands[1]) == CONST_INT)\n     {\n       int i = INTVAL (operands[1]);\n-      if (i <= 7 && i >= -8)\n-\treturn \\\"movqd %1,%0\\\";\n-      if (i < 0x4000 && i >= -0x4000 && ! TARGET_32532)\n+      if (! TARGET_32532)\n+\t{\n+\t  if (i <= 7 && i >= -8)\n+\t    return \\\"movqd %1,%0\\\";\n+\t  if (i < 0x4000 && i >= -0x4000)\n #if defined (GNX_V3) || defined (UTEK_ASM)\n-\treturn \\\"addr %c1,%0\\\";\n+\t    return \\\"addr %c1,%0\\\";\n #else\n-\treturn \\\"addr @%c1,%0\\\";\n+\t    return \\\"addr @%c1,%0\\\";\n #endif\n-      return \\\"movd %1,%0\\\";\n+\t}\n+      else\n+        return output_move_dconst(i, \\\"%$%1,%0\\\");\n     }\n   else if (GET_CODE (operands[1]) == REG)\n     {\n@@ -373,6 +376,7 @@\n     }\n   else if (GET_CODE (operands[1]) == MEM)\n     return \\\"movd %1,%0\\\";\n+\n   /* Check if this effective address can be\n      calculated faster by pulling it apart.  */\n   if (REG_P (operands[0])\n@@ -2590,7 +2594,104 @@\n   \"\"\n   \"slsb %0\")\n \f\n-;; Speed up stack adjust followed by a fullword fixedpoint push.\n+;; ffs instructions\n+\n+(define_insn \"ffsqi2\"\n+  [(set (match_operand:QI 0 \"general_operand\" \"=g\")\n+\t(ffs:QI (match_operand:SI 1 \"general_operand\" \"g\")))]\n+  \"\"\n+  \"*\n+{\n+  return \\\"movqb 0,%0; ffsd %1,%0; bfs 1f; addqb 1,%0; 1:\\\";\n+}\")\n+\n+(define_insn \"ffshi2\"\n+  [(set (match_operand:HI 0 \"general_operand\" \"=g\")\n+\t(ffs:HI (match_operand:SI 1 \"general_operand\" \"g\")))]\n+  \"\"\n+  \"*\n+{\n+  return \\\"movqw 0,%0; ffsd %1,%0; bfs 1f; addqw 1,%0; 1:\\\";\n+}\")\n+\n+(define_insn \"ffssi2\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g\")\n+\t(ffs:SI (match_operand:SI 1 \"general_operand\" \"g\")))]\n+  \"\"\n+  \"*\n+{\n+  return \\\"movqd 0,%0; ffsd %1,%0; bfs 1f; addqd 1,%0; 1:\\\";\n+}\")\n+\f\n+;; Speed up stack adjust followed by a HI fixedpoint push.\n+\n+(define_peephole\n+  [(set (reg:SI 17) (plus:SI (reg:SI 17) (const_int -2)))\n+   (set (match_operand:HI 0 \"push_operand\" \"=m\")\n+\t(match_operand:HI 1 \"general_operand\" \"g\"))]\n+  \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,tos\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movzwd %1,tos\\\", operands);\n+  return \\\"\\\";\n+}\")\n+\n+;; Speed up stack adjust followed by a zero_extend:HI(QI) fixedpoint push.\n+\n+(define_peephole\n+  [(set (reg:SI 17) (plus:SI (reg:SI 17) (const_int -2)))\n+   (set (match_operand:HI 0 \"push_operand\" \"=m\")\n+\t(zero_extend:HI (match_operand:QI 1 \"general_operand\" \"g\")))]\n+  \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,tos\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movzbd %1,tos\\\", operands);\n+  return \\\"\\\";\n+}\")\n+\n+;; Speed up stack adjust followed by a sign_extend:HI(QI) fixedpoint push.\n+\n+(define_peephole\n+  [(set (reg:SI 17) (plus:SI (reg:SI 17) (const_int -2)))\n+   (set (match_operand:HI 0 \"push_operand\" \"=m\")\n+\t(sign_extend:HI (match_operand:QI 1 \"general_operand\" \"g\")))]\n+  \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,tos\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movxbd %1,tos\\\", operands);\n+  return \\\"\\\";\n+}\")\n+\n+;; Speed up stack adjust followed by a QI fixedpoint push.\n+\n+(define_peephole\n+  [(set (reg:SI 17) (plus:SI (reg:SI 17) (const_int -3)))\n+   (set (match_operand:QI 0 \"push_operand\" \"=m\")\n+\t(match_operand:QI 1 \"general_operand\" \"g\"))]\n+  \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n+  \"*\n+{\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,tos\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movzbd %1,tos\\\", operands);\n+  return \\\"\\\";\n+}\")\n+\n+;; Speed up stack adjust followed by a SI fixedpoint push.\n \n (define_peephole\n   [(set (reg:SI 17) (plus:SI (reg:SI 17) (const_int 4)))\n@@ -2599,7 +2700,12 @@\n   \"! reg_mentioned_p (stack_pointer_rtx, operands[1])\"\n   \"*\n {\n-  return \\\"movd %1,0(sp)\\\";\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,0(sp)\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movd %1,0(sp)\\\", operands);\n+  return \\\"\\\";\n }\")\n \n ;; Speed up stack adjust followed by two fullword fixedpoint pushes.\n@@ -2614,6 +2720,16 @@\n    && ! reg_mentioned_p (stack_pointer_rtx, operands[3])\"\n   \"*\n {\n-  return \\\"movd %1,4(sp); movd %3,0(sp)\\\";\n-}\")\n+  if (GET_CODE (operands[1]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[1]), \\\"%$%1,4(sp)\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movd %1,4(sp)\\\", operands);\n \n+  if (GET_CODE (operands[3]) == CONST_INT)\n+\toutput_asm_insn (output_move_dconst (INTVAL (operands[3]), \\\"%$%3,0(sp)\\\"),\n+\t\t\t operands);\n+  else\n+\toutput_asm_insn (\\\"movd %3,0(sp)\\\", operands);\n+  return \\\"\\\";\n+}\")"}]}