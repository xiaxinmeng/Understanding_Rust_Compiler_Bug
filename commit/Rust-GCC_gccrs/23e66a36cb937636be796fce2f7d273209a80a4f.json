{"sha": "23e66a36cb937636be796fce2f7d273209a80a4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjNlNjZhMzZjYjkzNzYzNmJlNzk2ZmNlMmY3ZDI3MzIwOWE4MGE0Zg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-05-18T13:26:20Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-05-18T13:26:20Z"}, "message": "re PR tree-optimization/21407 (wrong code with downcast in C++)\n\n2005-05-18  Daniel Berlin  <dberlin@dberlin.org>\n\n\tFix PR tree-optimization/21407\n\n\t* tree-ssa-operands.c (note_addressable): Change\n\tCOMPONENT_REF handling in response to aliasing\n\tdiscussion.\n\nFrom-SVN: r99896", "tree": {"sha": "1daf09adb4495e7e47c5327a576a83c392ac1029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1daf09adb4495e7e47c5327a576a83c392ac1029"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23e66a36cb937636be796fce2f7d273209a80a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e66a36cb937636be796fce2f7d273209a80a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23e66a36cb937636be796fce2f7d273209a80a4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23e66a36cb937636be796fce2f7d273209a80a4f/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01063d48ed40614f1faad8c74207a2d64b1ab255", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01063d48ed40614f1faad8c74207a2d64b1ab255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01063d48ed40614f1faad8c74207a2d64b1ab255"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "11b9bc3ec4b46ff2b05fdb5bbe49394436937021", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23e66a36cb937636be796fce2f7d273209a80a4f", "patch": "@@ -1,3 +1,11 @@\n+2005-05-18  Daniel Berlin  <dberlin@dberlin.org>\n+\t\n+\tFix PR tree-optimization/21407\n+\n+\t* tree-ssa-operands.c (note_addressable): Change\n+\tCOMPONENT_REF handling in response to aliasing\n+\tdiscussion.\n+\n 2005-05-18  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sparc/sol2.h (TARGET_DEFAULT): Add back MASK_APP_REGS."}, {"sha": "561dc707ae66820dcad2e36ad1c3bce2c9353dbc", "filename": "gcc/testsuite/g++.dg/tree-ssa/pr21407.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21407.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21407.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Fpr21407.C?ref=23e66a36cb937636be796fce2f7d273209a80a4f", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+extern \"C\" void abort(void);\n+struct T1 {int a, b; virtual void f(){}};\n+struct T : T1 { struct T1 w;  int b; };\n+void foo (struct T1 *p) { struct T *q = dynamic_cast<T*>(p); if (q->b != 2) abort (); }\n+/* We shouldn't kill the store to c.b, because foo uses it.  */\n+int main () { struct T c; c.b = 2; foo (&c); return 0; }"}, {"sha": "e43b6030726a7893d73f2431f3f1655a5788b705", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23e66a36cb937636be796fce2f7d273209a80a4f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=23e66a36cb937636be796fce2f7d273209a80a4f", "patch": "@@ -1886,35 +1886,14 @@ add_stmt_operand (tree *var_p, stmt_ann_t s_ann, int flags)\n static void\n note_addressable (tree var, stmt_ann_t s_ann)\n {\n-  tree ref;\n   subvar_t svars;\n-  HOST_WIDE_INT offset;\n-  HOST_WIDE_INT size;\n \n   if (!s_ann)\n     return;\n   \n-  /* If this is a COMPONENT_REF, and we know exactly what it touches, we only\n-     take the address of the subvariables it will touch.\n-     Otherwise, we take the address of all the subvariables, plus the real\n-     ones.  */\n-\n-  if (var && TREE_CODE (var) == COMPONENT_REF \n-      && (ref = okay_component_ref_for_subvars (var, &offset, &size)))\n-    {\n-      subvar_t sv;\n-      svars = get_subvars_for_var (ref);\n-      \n-      if (s_ann->addresses_taken == NULL)\n-\ts_ann->addresses_taken = BITMAP_GGC_ALLOC ();      \n-      \n-      for (sv = svars; sv; sv = sv->next)\n-\t{\n-\t  if (overlap_subvar (offset, size, sv, NULL))\n-\t    bitmap_set_bit (s_ann->addresses_taken, var_ann (sv->var)->uid);\n-\t}\n-      return;\n-    }\n+  /* Note that it is *NOT OKAY* to use the target of a COMPONENT_REF\n+     as the only thing we take the address of.\n+     See PR 21407 and the ensuing mailing list discussion.  */\n   \n   var = get_base_address (var);\n   if (var && SSA_VAR_P (var))"}]}