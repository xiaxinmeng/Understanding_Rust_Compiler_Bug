{"sha": "b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "node_id": "C_kwDOANBUbNoAKGI4MzhhOWY2NWY2OGY5ZWJlODdkNGNiZDEwYWUxODkxMWEwNWI2ZWE", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2023-03-01T16:30:07Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2023-03-02T01:15:00Z"}, "message": "testsuite: Fix gcc.dg/attr-copy-6.c for user-label-prefixed targets\n\nThis fixes:\n Running /x/gcc/testsuite/gcc.dg/dg.exp ...\n ...\n FAIL: gcc.dg/attr-copy-6.c (test for excess errors)\nfor cris-elf, where gcc.log has:\nExcess errors:\n/x/gcc/testsuite/gcc.dg/attr-copy-6.c:91:3: error: 'fnoreturn_alias' aliased to undefined symbol 'fnoreturn_name'\n\nAsm-declared identifiers need to prepend __USER_LABEL_PREFIX__\nto the asm-name, something which is often overlooked because\nit's empty for most targets.  N.B: attribute-alias does not need\nthe same treatment.  The identical construct added here, is in\nseveral tests.\n\n\t* gcc.dg/attr-copy-6.c: Prefix asm-declared name with\n\t__USER_LABEL_PREFIX__.", "tree": {"sha": "b56b352166cf46637b4bd8c20ccb7f7d116fc3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b56b352166cf46637b4bd8c20ccb7f7d116fc3ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8590e4d096e4636c9384f7f885b979026861c29f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8590e4d096e4636c9384f7f885b979026861c29f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8590e4d096e4636c9384f7f885b979026861c29f"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "30a1317bf9286f062241c3cc2b0e97c494f7fb7b", "filename": "gcc/testsuite/gcc.dg/attr-copy-6.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-copy-6.c?ref=b838a9f65f68f9ebe87d4cbd10ae18911a05b6ea", "patch": "@@ -9,6 +9,10 @@\n #define ATTR(...)   __attribute__ ((__VA_ARGS__))\n #define ASRT(expr)   _Static_assert (expr, #expr)\n \n+#define ASMNAME(cname)  ASMNAME2 (__USER_LABEL_PREFIX__, cname)\n+#define ASMNAME2(prefix, cname) STRING (prefix) cname\n+#define STRING(x)    #x\n+\n /* Variable that is local to this translation unit but that can\n    be modified from other units by calling reset_unit_local().  */\n static int unit_local;\n@@ -79,7 +83,7 @@ extern _Noreturn void fnoreturn (void);\n \n extern __typeof (fnoreturn)\n   ATTR (visibility (\"hidden\"))\n-  fnoreturn __asm__ (\"fnoreturn_name\");\n+  fnoreturn __asm__ (ASMNAME (\"fnoreturn_name\"));\n \n void fnoreturn (void)\n {"}]}