{"sha": "1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ3YjI2NGVmMWE4MGNjNTI4MzlhNzQ3MmQyZDZhMWM5YjdlMmQ1OQ==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-01-30T00:41:03Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-01-30T00:41:03Z"}, "message": "invoke.texi: Make usage of \"compile time\" and \"run time\"/\"runtime\" consistent throughout the...\n\n2012-01-29  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi: Make usage of \"compile time\" and\n\t\"run time\"/\"runtime\" consistent throughout the file.\n\nFrom-SVN: r183693", "tree": {"sha": "4c09492616f719e5e1a476a1d12a3078ebf3fc51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c09492616f719e5e1a476a1d12a3078ebf3fc51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9c0ef3731cbdcca3a5e7b6c20c0c1d7d0993f941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0ef3731cbdcca3a5e7b6c20c0c1d7d0993f941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0ef3731cbdcca3a5e7b6c20c0c1d7d0993f941"}], "stats": {"total": 104, "additions": 55, "deletions": 49}, "files": [{"sha": "bf76019fcc319dbb15fd80eb486fc9d66a8f655b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "patch": "@@ -1,3 +1,8 @@\n+2012-01-29  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi: Make usage of \"compile time\" and\n+\t\"run time\"/\"runtime\" consistent throughout the file.\n+\n 2012-01-29  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/alpha/alpha.c (alpha_option_overrride): Default to"}, {"sha": "5de72f42b57032cdd312e738b5569a702a8cd625", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 50, "deletions": 49, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1d7b264ef1a80cc52839a7472d2d6a1c9b7e2d59", "patch": "@@ -1927,7 +1927,7 @@ exhaustion is signalled by throwing @code{std::bad_alloc}.  See also\n \n @item -fconserve-space\n @opindex fconserve-space\n-Put uninitialized or runtime-initialized global variables into the\n+Put uninitialized or run-time-initialized global variables into the\n common segment, as C does.  This saves space in the executable at the\n cost of not diagnosing duplicate definitions.  If you compile with this\n flag and your program mysteriously crashes after @code{main()} has\n@@ -1990,7 +1990,7 @@ call the copy constructor in all cases.\n @item -fno-enforce-eh-specs\n @opindex fno-enforce-eh-specs\n Don't generate code to check for violation of exception specifications\n-at runtime.  This option violates the C++ standard, but may be useful\n+at run time.  This option violates the C++ standard, but may be useful\n for reducing code size in production builds, much like defining\n @samp{NDEBUG}.  This does not give user code permission to throw\n exceptions in violation of the exception specifications; the compiler\n@@ -2100,12 +2100,12 @@ Instantiation}, for more information.\n @item -fno-rtti\n @opindex fno-rtti\n Disable generation of information about every class with virtual\n-functions for use by the C++ runtime type identification features\n+functions for use by the C++ run-time type identification features\n (@samp{dynamic_cast} and @samp{typeid}).  If you don't use those parts\n of the language, you can save some space by using this flag.  Note that\n exception handling uses the same information, but it will generate it as\n needed. The @samp{dynamic_cast} operator can still be used for casts that\n-do not require runtime type information, i.e.@: casts to @code{void *} or to\n+do not require run-time type information, i.e.@: casts to @code{void *} or to\n unambiguous base classes.\n \n @item -fstats\n@@ -3637,7 +3637,7 @@ For an automatic variable, if there exists a path from the function\n entry to a use of the variable that is initialized, but there exist\n some other paths the variable is not initialized, the compiler will\n emit a warning if it can not prove the uninitialized paths do not\n-happen at runtime. These warnings are made optional because GCC is\n+happen at run time. These warnings are made optional because GCC is\n not smart enough to see all the reasons why the code might be correct\n despite appearing to have an error.  Here is one example of how\n this can happen:\n@@ -5066,10 +5066,10 @@ The qualifier @code{dynamic} means that the function manipulates the stack\n dynamically: in addition to the static allocation described above, stack\n adjustments are made in the body of the function, for example to push/pop\n arguments around function calls.  If the qualifier @code{bounded} is also\n-present, the amount of these adjustments is bounded at compile-time and\n+present, the amount of these adjustments is bounded at compile time and\n the second field is an upper bound of the total amount of stack used by\n the function.  If it is not present, the amount of these adjustments is\n-not bounded at compile-time and the second field only represents the\n+not bounded at compile time and the second field only represents the\n bounded part.\n \n @item -fprofile-arcs\n@@ -6599,7 +6599,7 @@ Perform a global common subexpression elimination pass.\n This pass also performs global constant and copy propagation.\n \n @emph{Note:} When compiling a program using computed gotos, a GCC\n-extension, you may get better runtime performance if you disable\n+extension, you may get better run-time performance if you disable\n the global common subexpression elimination pass by adding\n @option{-fno-gcse} to the command line.\n \n@@ -7112,7 +7112,8 @@ at @option{-O2} and higher.\n @item -ftree-tail-merge\n Look for identical code sequences.  When found, replace one with a jump to the\n other.  This optimization is known as tail merging or cross jumping.  This flag\n-is enabled by default at @option{-O2} and higher.  The run time of this pass can\n+is enabled by default at @option{-O2} and higher.  The compilation time\n+in this pass can\n be limited using @option{max-tail-merge-comparisons} parameter and\n @option{max-tail-merge-iterations} parameter.\n \n@@ -7416,8 +7417,8 @@ Perform basic block vectorization on trees. This flag is enabled by default at\n @opindex ftree-vect-loop-version\n Perform loop versioning when doing loop vectorization on trees.  When a loop\n appears to be vectorizable except that data alignment or data dependence cannot\n-be determined at compile time then vectorized and non-vectorized versions of\n-the loop are generated along with runtime checks for alignment or dependence\n+be determined at compile time, then vectorized and non-vectorized versions of\n+the loop are generated along with run-time checks for alignment or dependence\n to control which version is executed.  This option is enabled by default\n except at level @option{-Os} where it is disabled.\n \n@@ -7862,7 +7863,7 @@ participating in the same link with the same options.\n If LTO encounters objects with C linkage declared with incompatible\n types in separate translation units to be linked together (undefined\n behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be\n-issued.  The behavior is still undefined at runtime.\n+issued.  The behavior is still undefined at run time.\n \n Another feature of LTO is that it is possible to apply interprocedural\n optimizations on files written in different languages.  This requires\n@@ -8501,7 +8502,7 @@ When branch is predicted to be taken with probability lower than this threshold\n The maximum number of incoming edges to consider for crossjumping.\n The algorithm used by @option{-fcrossjumping} is @math{O(N^2)} in\n the number of edges incoming to each block.  Increasing values mean\n-more aggressive optimization, making the compile time increase with\n+more aggressive optimization, making the compilation time increase with\n probably small improvement in executable size.\n \n @item min-crossjump-insns\n@@ -8528,14 +8529,14 @@ The maximum number of instructions to consider when looking for an\n instruction to fill a delay slot.  If more than this arbitrary number of\n instructions is searched, the time savings from filling the delay slot\n will be minimal so stop searching.  Increasing values mean more\n-aggressive optimization, making the compile time increase with probably\n-small improvement in executable run time.\n+aggressive optimization, making the compilation time increase with probably\n+small improvement in execution time.\n \n @item max-delay-slot-live-search\n When trying to fill delay slots, the maximum number of instructions to\n consider when searching for a block with valid live register\n information.  Increasing this arbitrarily chosen value means more\n-aggressive optimization, increasing the compile time.  This parameter\n+aggressive optimization, increasing the compilation time.  This parameter\n should be removed when the delay slot code is rewritten to maintain the\n control-flow graph.\n \n@@ -8559,7 +8560,7 @@ needlessly consume memory and resources.\n @item max-modulo-backtrack-attempts\n The maximum number of backtrack attempts the scheduler should make\n when modulo scheduling a loop.  Larger values can exponentially increase\n-compile time.\n+compilation time.\n \n @item max-inline-insns-single\n Several parameters control the tree inliner used in gcc.\n@@ -8703,7 +8704,7 @@ avoid quadratic behaviour in tree tail merging.  The default value is 10.\n \n @item max-tail-merge-iterations\n The maximum amount of iterations of the pass over the function.  This is used to\n-limit run time in tree tail merging.  The default value is 2.\n+limit compilation time in tree tail merging.  The default value is 2.\n \n @item max-unrolled-insns\n The maximum number of instructions that a loop should have if that loop\n@@ -8796,12 +8797,12 @@ When set to 1, use expensive methods to eliminate all redundant\n constraints.  The default value is 0.\n \n @item vect-max-version-for-alignment-checks\n-The maximum number of runtime checks that can be performed when\n+The maximum number of run-time checks that can be performed when\n doing loop versioning for alignment in the vectorizer.  See option\n ftree-vect-loop-version for more information.\n \n @item vect-max-version-for-alias-checks\n-The maximum number of runtime checks that can be performed when\n+The maximum number of run-time checks that can be performed when\n doing loop versioning for alias in the vectorizer.  See option\n ftree-vect-loop-version for more information.\n \n@@ -8912,12 +8913,12 @@ to occur at every opportunity.\n @item max-reload-search-insns\n The maximum number of instruction reload should look backward for equivalent\n register.  Increasing values mean more aggressive optimization, making the\n-compile time increase with probably slightly better performance.  The default\n-value is 100.\n+compilation time increase with probably slightly better performance.\n+The default value is 100.\n \n @item max-cselib-memory-locations\n The maximum number of memory locations cselib should take into account.\n-Increasing values mean more aggressive optimization, making the compile time\n+Increasing values mean more aggressive optimization, making the compilation time\n increase with probably slightly better performance.  The default value is 500.\n \n @item reorder-blocks-duplicate\n@@ -9110,8 +9111,8 @@ minimal number of registers needed for execution of typical\n instruction.  This value is the best found from numerous experiments.\n \n @item loop-invariant-max-bbs-in-loop\n-Loop invariant motion can be very expensive, both in compile time and\n-in amount of needed compile time memory, with very large loops.  Loops\n+Loop invariant motion can be very expensive, both in compilation time and\n+in amount of needed compile-time memory, with very large loops.  Loops\n with more basic blocks than this parameter won't have loop invariant\n motion optimization performed on them.  The default value of the\n parameter is 1000 for -O1 and 10000 for -O2 and above.\n@@ -9135,7 +9136,7 @@ the parameter to zero makes it unlimited.\n @item max-vartrack-expr-depth\n Sets a maximum number of recursion levels when attempting to map\n variable names or debug temporaries to value expressions.  This trades\n-compile time for more complete debug information.  If this is set too\n+compilation time for more complete debug information.  If this is set too\n low, value expressions that are available and could be represented in\n debug information may end up not being used; setting this higher may\n enable the compiler to find more complex debug expressions, but compile\n@@ -9164,7 +9165,7 @@ sequence pairs.  This option only applies when using\n To avoid exponential effects in the Graphite loop transforms, the\n number of parameters in a Static Control Part (SCoP) is bounded.  The\n default value is 10 parameters.  A variable whose value is unknown at\n-compile time and defined outside a SCoP is a parameter of the SCoP.\n+compilation time and defined outside a SCoP is a parameter of the SCoP.\n \n @item graphite-max-bbs-per-function\n To avoid exponential effects in the detection of SCoPs, the size of\n@@ -9633,7 +9634,7 @@ includes files in the preprocessor, because the compiler translates these\n options into @option{-isystem} options for the preprocessor.  In this case,\n the compiler appends @samp{include} to the prefix.\n \n-The run-time support file @file{libgcc.a} can also be searched for using\n+The runtime support file @file{libgcc.a} can also be searched for using\n the @option{-B} prefix, if needed.  If it is not found there, the two\n standard prefixes above are tried, and that is all.  The file is left\n out of the link if it is not found by those means.\n@@ -10534,7 +10535,7 @@ Generate code to check the amount of stack space available upon entry to\n every function (that actually uses some stack space).  If there is\n insufficient space available then either the function\n @samp{__rt_stkovf_split_small} or @samp{__rt_stkovf_split_big} will be\n-called, depending upon the amount of stack space required.  The run time\n+called, depending upon the amount of stack space required.  The runtime\n system is required to provide these functions.  The default is\n @option{-mno-apcs-stack-check}, since this produces smaller code.\n \n@@ -10776,7 +10777,7 @@ pointers.\n @item -msingle-pic-base\n @opindex msingle-pic-base\n Treat the register used for PIC addressing as read-only, rather than\n-loading it in the prologue for each function.  The run-time system is\n+loading it in the prologue for each function.  The runtime system is\n responsible for initializing this register with an appropriate value\n before execution begins.\n \n@@ -11448,7 +11449,7 @@ into SDRAM. This option defines @code{__BFIN_SDRAM}.\n \n @item -micplb\n @opindex micplb\n-Assume that ICPLBs are enabled at runtime.  This has an effect on certain\n+Assume that ICPLBs are enabled at run time.  This has an effect on certain\n anomaly workarounds.  For Linux targets, the default is to assume ICPLBs\n are enabled; for standalone applications the default is off.\n @end table\n@@ -12065,7 +12066,7 @@ IEEE-conformant math library routines will be linked in.\n Normally GCC examines a 32- or 64-bit integer constant to\n see if it can construct it from smaller constants in two or three\n instructions.  If it cannot, it will output the constant as a literal and\n-generate code to load it from the data segment at runtime.\n+generate code to load it from the data segment at run time.\n \n Use this option to require GCC to construct @emph{all} integer constants\n using code, even if it takes more instructions (the maximum is six).\n@@ -12271,7 +12272,7 @@ it does assume that all symbolic values and addresses will fit into a\n \n @item -mno-lsim\n @opindex mno-lsim\n-Assume that run-time support has been provided and so there is no need\n+Assume that runtime support has been provided and so there is no need\n to include the simulator library (@file{libsim.a}) on the linker\n command line.\n \n@@ -13283,7 +13284,7 @@ when this option is used to set the precision to less than extended precision.\n @opindex mstackrealign\n Realign the stack at entry.  On the Intel x86, the @option{-mstackrealign}\n option will generate an alternate prologue and epilogue that realigns the\n-runtime stack if necessary.  This supports mixing legacy codes that keep\n+run-time stack if necessary.  This supports mixing legacy codes that keep\n a 4-byte aligned stack with modern codes that keep a 16-byte stack for\n SSE compatibility.  See also the attribute @code{force_align_arg_pointer},\n applicable to individual functions.\n@@ -13399,7 +13400,7 @@ when needed.\n \n These options will enable GCC to use these extended instructions in\n generated code, even without @option{-mfpmath=sse}.  Applications which\n-perform runtime CPU detection must compile separate files for each\n+perform run-time CPU detection must compile separate files for each\n supported architecture, using the appropriate flags.  In particular,\n the file containing the CPU detection code should be compiled without\n these options.\n@@ -13572,8 +13573,8 @@ and memset for short lengths.\n \n @item -minline-stringops-dynamically\n @opindex minline-stringops-dynamically\n-For string operation of unknown size, inline runtime checks so for small\n-blocks inline code is used, while for large blocks library call is used.\n+For string operations of unknown size, use run-time checks with\n+inline code for small blocks and a library call for large blocks.\n \n @item -mstringop-strategy=@var{alg}\n @opindex mstringop-strategy=@var{alg}\n@@ -13619,11 +13620,11 @@ isn't possible at the moment for @option{-mfentry} and @option{-pg}.\n @item -m8bit-idiv\n @itemx -mno-8bit-idiv\n @opindex 8bit-idiv\n-On some processors, like Intel Atom, 8bit unsigned integer divide is\n-much faster than 32bit/64bit integer divide.  This option will generate a\n-runt-time check.  If both dividend and divisor are within range of 0\n-to 255, 8bit unsigned integer divide will be used instead of\n-32bit/64bit integer divide.\n+On some processors, like Intel Atom, 8-bit unsigned integer divide is\n+much faster than 32-bit/64-bit integer divide.  This option generates a\n+run-time check.  If both dividend and divisor are within range of 0\n+to 255, 8-bit unsigned integer divide is used instead of\n+32-bit/64-bit integer divide.\n \n @item -mavx256-split-unaligned-load\n @item -mavx256-split-unaligned-store\n@@ -14695,7 +14696,7 @@ Generate code for the 210 processor.\n \n @item -mno-lsim\n @opindex mno-lsim\n-Assume that run-time support has been provided and so omit the\n+Assume that runtime support has been provided and so omit the\n simulator library (@file{libsim.a)} from the linker command line.\n \n @item -mstack-increment=@var{size}\n@@ -16507,7 +16508,7 @@ with the @option{-mno-fp-in-toc} and @option{-mno-sum-in-toc} options.\n @option{-mno-fp-in-toc} prevents GCC from putting floating-point\n constants in the TOC and @option{-mno-sum-in-toc} forces GCC to\n generate code to calculate the sum of an address and a constant at\n-run-time instead of putting that sum into the TOC@.  You may specify one\n+run time instead of putting that sum into the TOC@.  You may specify one\n or both of these options.  Each causes GCC to produce very slightly\n slower and larger code at the expense of conserving TOC space.\n \n@@ -16705,7 +16706,7 @@ unaligned memory references will be handled by the system.\n @opindex mrelocatable\n @opindex mno-relocatable\n Generate code that allows (does not allow) a static executable to be\n-relocated to a different address at runtime.  A simple embedded\n+relocated to a different address at run time.  A simple embedded\n PowerPC system loader should relocate the entire contents of\n @code{.got2} and 4-byte locations listed in the @code{.fixup} section,\n a table of 32-bit addresses generated by this option.  For this to\n@@ -16719,7 +16720,7 @@ work, all objects linked together must be compiled with\n @opindex mno-relocatable-lib\n Like @option{-mrelocatable}, @option{-mrelocatable-lib} generates a\n @code{.fixup} section to allow static executables to be relocated at\n-runtime, but @option{-mrelocatable-lib} does not use the smaller stack\n+run time, but @option{-mrelocatable-lib} does not use the smaller stack\n alignment of @option{-mrelocatable}.  Objects compiled with\n @option{-mrelocatable-lib} may be linked with objects compiled with\n any combination of the @option{-mrelocatable} options.\n@@ -16758,7 +16759,7 @@ libraries.\n @item -msingle-pic-base\n @opindex msingle-pic-base\n Treat the register used for PIC addressing as read-only, rather than\n-loading it in the prologue for each function.  The run-time system is\n+loading it in the prologue for each function.  The runtime system is\n responsible for initializing this register with an appropriate value\n before execution begins.\n \n@@ -17298,7 +17299,7 @@ makes the interrupt handlers faster.\n Enables the generation of position independent data.  When enabled any\n access to constant data will done via an offset from a base address\n held in a register.  This allows the location of constant data to be\n-determined at run-time without requiring the executable to be\n+determined at run time without requiring the executable to be\n relocated, which is a benefit to embedded applications with tight\n memory constraints.  Data that can be modified is not affected by this\n option.\n@@ -17502,7 +17503,7 @@ hardware floating point is used.\n @item -mwarn-framesize=@var{framesize}\n @opindex mwarn-framesize\n Emit a warning if the current function exceeds the given frame size.  Because\n-this is a compile time check it doesn't need to be a real problem when the program\n+this is a compile-time check it doesn't need to be a real problem when the program\n runs.  It is intended to identify functions which most probably cause\n a stack overflow.  It is useful to be used in an environment with limited stack\n size e.g.@: the linux kernel."}]}