{"sha": "f14e02622f52850e6186887aea6c354f1a7d4b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE0ZTAyNjIyZjUyODUwZTYxODY4ODdhZWE2YzM1NGYxYTdkNGI0OQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2011-09-27T03:56:50Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2011-09-27T03:56:50Z"}, "message": "Add explicit VIS intrinsics for addition and subtraction.\n\ngcc/\n\n\t* config/sparc/sparc.c (sparc_vis_init_builtins): Add explicit\n\tbuiltins for VIS vector addition and subtraction.\n\t* config/sparc/visintrin.h (__vis_fpadd16, __vis_fpadd16s,\n\t__vis_fpadd32, __vis_fpadd32s, __vis_fpsub16, __vis_fpsub16s,\n\t__vis_fpsub32, __vis_fpsub32s): New.\n\t* doc/extend.texi: Document new VIS intrinsics.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/fpaddsubi.c: New test.\n\nFrom-SVN: r179235", "tree": {"sha": "441a2549171d7c28afe6ae704a69fba0da20b9f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/441a2549171d7c28afe6ae704a69fba0da20b9f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f14e02622f52850e6186887aea6c354f1a7d4b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14e02622f52850e6186887aea6c354f1a7d4b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f14e02622f52850e6186887aea6c354f1a7d4b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f14e02622f52850e6186887aea6c354f1a7d4b49/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7cee01d32cdbe912b32ad113b569b39a0e95445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7cee01d32cdbe912b32ad113b569b39a0e95445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7cee01d32cdbe912b32ad113b569b39a0e95445"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "a3dd8839836eda2e301dffc4ed72e96b318adc26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -24,6 +24,13 @@\n \t* config/sparc/sparc-protos.h (sparc_target_macros): Declare.\n \t* config/sparc/sparc.h (TARGE_CPU_CPP_BUILTINS): Call it.\n \n+\t* config/sparc/sparc.c (sparc_vis_init_builtins): Add explicit\n+\tbuiltins for VIS vector addition and subtraction.\n+\t* config/sparc/visintrin.h (__vis_fpadd16, __vis_fpadd16s,\n+\t__vis_fpadd32, __vis_fpadd32s, __vis_fpsub16, __vis_fpsub16s,\n+\t__vis_fpsub32, __vis_fpsub32s): New.\n+\t* doc/extend.texi: Document new VIS intrinsics.\n+\n 2011-09-26  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.md (peephole casesi+2): Use -1 instead of 65536."}, {"sha": "44d7f20c6643e7f7a11ff4729e5e82fb5ffe491d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -9173,6 +9173,7 @@ sparc_vis_init_builtins (void)\n   tree v4hi = build_vector_type (intHI_type_node, 4);\n   tree v2hi = build_vector_type (intHI_type_node, 2);\n   tree v2si = build_vector_type (intSI_type_node, 2);\n+  tree v1si = build_vector_type (intSI_type_node, 1);\n \n   tree v4qi_ftype_v4hi = build_function_type_list (v4qi, v4hi, 0);\n   tree v8qi_ftype_v2si_v8qi = build_function_type_list (v8qi, v2si, v8qi, 0);\n@@ -9186,6 +9187,8 @@ sparc_vis_init_builtins (void)\n   tree v4hi_ftype_v4hi_v4hi = build_function_type_list (v4hi, v4hi, v4hi, 0);\n   tree v2si_ftype_v2si_v2si = build_function_type_list (v2si, v2si, v2si, 0);\n   tree v8qi_ftype_v8qi_v8qi = build_function_type_list (v8qi, v8qi, v8qi, 0);\n+  tree v2hi_ftype_v2hi_v2hi = build_function_type_list (v2hi, v2hi, v2hi, 0);\n+  tree v1si_ftype_v1si_v1si = build_function_type_list (v1si, v1si, v1si, 0);\n   tree di_ftype_v8qi_v8qi_di = build_function_type_list (intDI_type_node,\n \t\t\t\t\t\t\t v8qi, v8qi,\n \t\t\t\t\t\t\t intDI_type_node, 0);\n@@ -9350,6 +9353,24 @@ sparc_vis_init_builtins (void)\n       def_builtin_const (\"__builtin_vis_fcmpeq32\", CODE_FOR_fcmpeq32si_vis,\n \t\t\t si_ftype_v2si_v2si);\n     }\n+\n+  /* Addition and subtraction.  */\n+  def_builtin_const (\"__builtin_vis_fpadd16\", CODE_FOR_addv4hi3,\n+\t\t     v4hi_ftype_v4hi_v4hi);\n+  def_builtin_const (\"__builtin_vis_fpadd16s\", CODE_FOR_addv2hi3,\n+\t\t     v2hi_ftype_v2hi_v2hi);\n+  def_builtin_const (\"__builtin_vis_fpadd32\", CODE_FOR_addv2si3,\n+\t\t     v2si_ftype_v2si_v2si);\n+  def_builtin_const (\"__builtin_vis_fpadd32s\", CODE_FOR_addsi3,\n+\t\t     v1si_ftype_v1si_v1si);\n+  def_builtin_const (\"__builtin_vis_fpsub16\", CODE_FOR_subv4hi3,\n+\t\t     v4hi_ftype_v4hi_v4hi);\n+  def_builtin_const (\"__builtin_vis_fpsub16s\", CODE_FOR_subv2hi3,\n+\t\t     v2hi_ftype_v2hi_v2hi);\n+  def_builtin_const (\"__builtin_vis_fpsub32\", CODE_FOR_subv2si3,\n+\t\t     v2si_ftype_v2si_v2si);\n+  def_builtin_const (\"__builtin_vis_fpsub32s\", CODE_FOR_subsi3,\n+\t\t     v1si_ftype_v1si_v1si);\n }\n \n /* Handle TARGET_EXPAND_BUILTIN target hook."}, {"sha": "eb2b4ec5ac4b8258827096f19fb9ec9b99b8b1cb", "filename": "gcc/config/sparc/visintrin.h", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fconfig%2Fsparc%2Fvisintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fvisintrin.h?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -25,6 +25,7 @@\n #define _VISINTRIN_H_INCLUDED\n \n typedef int __v2si __attribute__ ((__vector_size__ (8)));\n+typedef int __v1si __attribute__ ((__vector_size__ (4)));\n typedef short __v4hi __attribute__ ((__vector_size__ (8)));\n typedef short __v2hi __attribute__ ((__vector_size__ (4)));\n typedef unsigned char __v8qi __attribute__ ((__vector_size__ (8)));\n@@ -276,4 +277,60 @@ __vis_fcmpeq32 (__v2si __A, __v2si __B)\n   return __builtin_vis_fcmpeq32 (__A, __B);\n }\n \n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadd16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fpadd16 (__A, __B);\n+}\n+\n+extern __inline __v2hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadd16s (__v2hi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fpadd16s (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadd32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fpadd32 (__A, __B);\n+}\n+\n+extern __inline __v1si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpadd32s (__v1si __A, __v1si __B)\n+{\n+  return __builtin_vis_fpadd32s (__A, __B);\n+}\n+\n+extern __inline __v4hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsub16 (__v4hi __A, __v4hi __B)\n+{\n+  return __builtin_vis_fpsub16 (__A, __B);\n+}\n+\n+extern __inline __v2hi\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsub16s (__v2hi __A, __v2hi __B)\n+{\n+  return __builtin_vis_fpsub16s (__A, __B);\n+}\n+\n+extern __inline __v2si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsub32 (__v2si __A, __v2si __B)\n+{\n+  return __builtin_vis_fpsub32 (__A, __B);\n+}\n+\n+extern __inline __v1si\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+__vis_fpsub32s (__v1si __A, __v1si __B)\n+{\n+  return __builtin_vis_fpsub32s (__A, __B);\n+}\n+\n #endif  /* _VISINTRIN_H_INCLUDED */"}, {"sha": "195fa8ca3ae51d6e37b7ffe9cfb56f3ef43406cf", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -12929,6 +12929,7 @@ the SPARC Visual Instruction Set (VIS).  When you use the @option{-mvis}\n switch, the VIS extension is exposed as the following built-in functions:\n \n @smallexample\n+typedef int v1si __attribute__ ((vector_size (4)));\n typedef int v2si __attribute__ ((vector_size (8)));\n typedef short v4hi __attribute__ ((vector_size (8)));\n typedef short v2hi __attribute__ ((vector_size (4)));\n@@ -12977,6 +12978,15 @@ long __builtin_vis_fcmpgt16 (v4hi, v4hi);\n long __builtin_vis_fcmpgt32 (v2si, v2si);\n long __builtin_vis_fcmpeq16 (v4hi, v4hi);\n long __builtin_vis_fcmpeq32 (v2si, v2si);\n+\n+v4hi __builtin_vis_fpadd16 (v4hi, v4hi);\n+v2hi __builtin_vis_fpadd16s (v2hi, v2hi);\n+v2si __builtin_vis_fpadd32 (v2si, v2si);\n+v1si __builtin_vis_fpadd32s (v1si, v1si);\n+v4hi __builtin_vis_fpsub16 (v4hi, v4hi);\n+v2hi __builtin_vis_fpsub16s (v2hi, v2hi);\n+v2si __builtin_vis_fpsub32 (v2si, v2si);\n+v1si __builtin_vis_fpsub32s (v1si, v1si);\n @end smallexample\n \n @node SPU Built-in Functions"}, {"sha": "b5a73a3920fb9fbe36d90933268c88f05b464355", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -25,6 +25,8 @@\n \t* gcc.target/sparc/edge.c: Update for new return types.\n \t* gcc.target/sparc/fcmp.c: Likewise.\n \n+\t* gcc.target/sparc/fpaddsubi.c: New test.\n+\n 2011-09-26  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/50515"}, {"sha": "a36108e70af4fb2a53119776524d94dea9f869cf", "filename": "gcc/testsuite/gcc.target/sparc/fpaddsubi.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpaddsubi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f14e02622f52850e6186887aea6c354f1a7d4b49/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpaddsubi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Ffpaddsubi.c?ref=f14e02622f52850e6186887aea6c354f1a7d4b49", "patch": "@@ -0,0 +1,58 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mcpu=ultrasparc -mvis\" } */\n+typedef int __v2si __attribute__((vector_size(8)));\n+typedef int __v1si __attribute__((vector_size(4)));\n+typedef short __v4hi __attribute__((vector_size(8)));\n+typedef short __v2hi __attribute__((vector_size(4)));\n+\n+extern __v1si foo_x (void);\n+extern __v1si foo_y (void);\n+\n+__v4hi test_fpadd16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fpadd16 (x, y);\n+}\n+\n+__v2hi test_fpadd16s (__v2hi x, __v2hi y)\n+{\n+  return __builtin_vis_fpadd16s (x, y);\n+}\n+\n+__v4hi test_fpsub16 (__v4hi x, __v4hi y)\n+{\n+  return __builtin_vis_fpsub16 (x, y);\n+}\n+\n+__v2hi test_fpsub16s (__v2hi x, __v2hi y)\n+{\n+  return __builtin_vis_fpsub16s (x, y);\n+}\n+\n+__v2si test_fpadd32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fpadd32 (x, y);\n+}\n+\n+__v1si test_fpadd32s (void)\n+{\n+  return __builtin_vis_fpadd32s (foo_x (), foo_y ());\n+}\n+\n+__v2si test_fpsub32 (__v2si x, __v2si y)\n+{\n+  return __builtin_vis_fpsub32 (x, y);\n+}\n+\n+__v1si test_fpsub32s (__v1si x, __v1si y)\n+{\n+  return __builtin_vis_fpsub32s (foo_x (), foo_y ());\n+}\n+\n+/* { dg-final { scan-assembler \"fpadd16\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpadd16s\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpsub16\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpsub16s\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpadd32\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpadd32s\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpsub32\\t%\" }  } */\n+/* { dg-final { scan-assembler \"fpsub32s\\t%\" }  } */"}]}