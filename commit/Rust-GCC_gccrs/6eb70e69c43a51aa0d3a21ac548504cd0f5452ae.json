{"sha": "6eb70e69c43a51aa0d3a21ac548504cd0f5452ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViNzBlNjljNDNhNTFhYTBkM2EyMWFjNTQ4NTA0Y2QwZjU0NTJhZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:57:17Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-09-09T21:57:17Z"}, "message": "Add port done awhile ago for the ARC cpu.\n\n        * arc/arc.h: New file.\n        * arc/arc.c: New file.\n        * arc/arc.md: New file.\n        * arc/initfini.c: New file.\n        * arc/lib1funcs.asm: New file.\n        * arc/t-arc: New file.\n        * arc/xm-arc.h: New file.\n        * ginclude/va-arc.h: New file.\n        * ginclude/stdarg.h: Include va-arc.h ifdef __arc__.\n        * ginclude/varargs.h: Likewise.\n        * Makefile.in (USER_H): Add va-arc.h.\n        * configure.in (arc-*-elf*): Recognize.\n        * longlong.h: Add ARC support.\nMostly so I can test changes in snapshot scripts.\n\n        * expr.c (clear_storage): Use CONST0_RTX instead of const0_rtx.\n        when clearing non-BLKmode data.\nFixes sparc problem.\n\nFrom-SVN: r15189", "tree": {"sha": "8a734d9164b22e1f00b61ddb2c42a8d0be8a5675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a734d9164b22e1f00b61ddb2c42a8d0be8a5675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae/comments", "author": null, "committer": null, "parents": [{"sha": "81049807bab10e097d57fc5cdc772ac05fd96516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81049807bab10e097d57fc5cdc772ac05fd96516", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81049807bab10e097d57fc5cdc772ac05fd96516"}], "stats": {"total": 273, "additions": 273, "deletions": 0}, "files": [{"sha": "a2d509ac76578440d601a498b4bc227f453e22b9", "filename": "gcc/config/arc/lib1funcs.asm", "status": "added", "additions": 273, "deletions": 0, "changes": 273, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb70e69c43a51aa0d3a21ac548504cd0f5452ae/gcc%2Fconfig%2Farc%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Flib1funcs.asm?ref=6eb70e69c43a51aa0d3a21ac548504cd0f5452ae", "patch": "@@ -0,0 +1,273 @@\n+; libgcc1 routines for ARC cpu.\n+\n+/* Copyright (C) 1995, 1997 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file with other programs, and to distribute\n+those programs without any restriction coming from the use of this\n+file.  (The General Public License restrictions do apply in other\n+respects; for example, they cover modification of the file, and\n+distribution when not linked into another program.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* As a special exception, if you link this library with other files,\n+   some of which are compiled with GCC, to produce an executable,\n+   this library does not by itself cause the resulting executable\n+   to be covered by the GNU General Public License.\n+   This exception does not however invalidate any other reasons why\n+   the executable file might be covered by the GNU General Public License.  */\n+\n+#ifdef  L_mulsi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___mulsi3\n+___mulsi3:\n+\n+/* This the simple version.\n+\n+  while (a) \n+    {\n+      if (a & 1)\n+        r += b;\n+      a >>= 1;\n+      b <<= 1;\n+    }\n+*/\n+\tmov r2,0\t\t; Accumulate result here.\n+.Lloop:\n+\tsub.f 0,r0,0\t\t; while (a)\n+\tnop\n+\tbeq.nd .Ldone\n+\tand.f 0,r0,1\t\t; if (a & 1)\n+\tadd.nz r2,r2,r1\t\t; r += b\n+\tlsr r0,r0\t\t; a >>= 1\n+\tb.d .Lloop\n+\tlsl r1,r1\t\t; b <<= 1\n+.Ldone:\n+\tj.d blink\n+\tmov r0,r2\n+#endif\n+\n+#endif /* L_mulsi3 */\n+\n+#ifdef  L_umulsidi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___umulsidi3\n+___umulsidi3:\n+\n+/* This the simple version.\n+\n+  while (a) \n+    {\n+      if (a & 1)\n+        r += b;\n+      a >>= 1;\n+      b <<= 1;\n+    }\n+*/\n+\tmov r2,0\t\t; Top part of b.\n+\tmov r3,0\t\t; Accumulate result here.\n+\tmov r4,0\n+.Lloop:\n+\tsub.f 0,r0,0\t\t; while (a)\n+\tnop\n+\tbeq.nd .Ldone\n+\tand.f 0,r0,1\t\t; if (a & 1)\n+\tadd.nz r4,r4,r1\t\t; r += b\n+\tadc.nz r3,r3,r2\n+\tlsr r0,r0\t\t; a >>= 1\n+\tlsl.f r1,r1\t\t; b <<= 1\n+\tb.d .Lloop\n+\trlc r2,r2\n+.Ldone:\n+#ifdef __big_endian__\n+\tmov r1,r4\n+\tj.d blink\n+\tmov r0,r3\n+#else\n+\tmov r0,r4\n+\tj.d blink\n+\tmov r1,r3\n+#endif\n+#endif\n+\n+#endif /* L_umulsidi3 */\n+\n+#ifdef L_divmod_tools\n+\n+; Utilities used by all routines.\n+\n+\t.section .text\n+\t.align 4\n+\n+; inputs: r0 = numerator, r1 = denominator\n+; outputs: positive r0/r1,\n+;          r6.bit1 = sign of numerator, r6.bit0 = sign of result\n+\n+\t.global ___divnorm\n+___divnorm:\n+\tmov r6,0\t\t; keep sign in r6\n+\tsub.f 0,r0,0\t\t; is numerator -ve?\n+\tsub.lt r0,0,r0\t\t; negate numerator\n+\tmov.lt r6,3\t\t; sign is -ve\n+\tsub.f 0,r1,0\t\t; is denominator -ve?\n+\tsub.lt r1,0,r1\t\t; negate denominator\n+\txor.lt r6,r6,1\t\t; toggle sign\n+\tj.nd blink\n+\n+/*\n+unsigned long\n+udivmodsi4(int modwanted, unsigned long num, unsigned long den)\n+{\n+  unsigned long bit = 1;\n+  unsigned long res = 0;\n+\n+  while (den < num && bit && !(den & (1L<<31)))\n+    {\n+      den <<=1;\n+      bit <<=1;\n+    }\n+  while (bit)\n+    {\n+      if (num >= den)\n+\t{\n+\t  num -= den;\n+\t  res |= bit;\n+\t}\n+      bit >>=1;\n+      den >>=1;\n+    }\n+  if (modwanted) return num;\n+  return res;\n+}\n+*/\n+\n+; inputs: r0 = numerator, r1 = denominator\n+; outputs: r0 = quotient, r1 = remainder, r2/r3 trashed\n+\n+\t.global ___udivmodsi4\n+___udivmodsi4:\n+\tmov r2,1\t\t; bit = 1\n+\tmov r3,0\t\t; res = 0\n+.Lloop1:\n+\tsub.f 0,r1,r0\t\t; while (den < num\n+\tnop\n+\tbnc.nd .Lloop2\n+\tsub.f 0,r2,0\t\t; && bit\n+\tnop\n+\tbz.nd .Lloop2\n+\tlsl.f 0,r1\t\t; && !(den & (1<<31))\n+\tnop\n+\tbc.nd .Lloop2\n+\tlsl r1,r1\t\t; den <<= 1\n+\tb.d .Lloop1\n+\tlsl r2,r2\t\t; bit <<= 1\n+.Lloop2:\n+\tsub.f 0,r2,0\t\t; while (bit)\n+\tnop\n+\tbz.nd .Ldivmodend\n+\tsub.f 0,r0,r1\t\t; if (num >= den)\n+\tnop\n+\tbc.nd .Lshiftdown\n+\tsub r0,r0,r1\t\t; num -= den\n+\tor r3,r3,r2\t\t; res |= bit\n+.Lshiftdown:\n+\tlsr r2,r2\t\t; bit >>= 1\n+\tb.d .Lloop2\n+\tlsr r1,r1\t\t; den >>= 1\n+.Ldivmodend:\n+\tmov r1,r0\t\t; r1 = mod\n+\tj.d blink\n+\tmov r0,r3\t\t; r0 = res\n+\n+#endif\n+\n+#ifdef  L_udivsi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___udivsi3\n+___udivsi3:\n+\tmov r7,blink\n+\tbl.nd ___udivmodsi4\n+\tj.nd r7\n+#endif\n+\n+#endif /* L_udivsi3 */\n+\n+#ifdef  L_divsi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___divsi3\n+___divsi3:\n+\tmov r7,blink\n+\tbl.nd ___divnorm\n+\tbl.nd ___udivmodsi4\n+\tand.f 0,r6,1\n+\tsub.nz r0,0,r0\t\t; cannot go in delay slot, has limm value\n+\tj.nd r7\n+#endif\n+\n+#endif /* L_divsi3 */\n+\n+#ifdef  L_umodsi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___umodsi3\n+___umodsi3:\n+\tmov r7,blink\n+\tbl.nd ___udivmodsi4\n+\tj.d r7\n+\tmov r0,r1\n+#endif\n+\n+#endif /* L_umodsi3 */\n+\n+#ifdef  L_modsi3\n+\t.section .text\n+\t.align 4\n+\n+#ifdef __base__\n+\t.cpu base\n+\t.global ___modsi3\n+___modsi3:\n+\tmov r7,blink\n+\tbl.nd ___divnorm\n+\tbl.nd ___udivmodsi4\n+\tand.f 0,r6,2\n+\tsub.nz r1,0,r1\n+\tj.d r7\n+\tmov r0,r1\n+#endif\n+\n+#endif /* L_modsi3 */"}]}