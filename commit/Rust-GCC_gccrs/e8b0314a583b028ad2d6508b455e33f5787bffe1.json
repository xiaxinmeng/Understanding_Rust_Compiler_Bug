{"sha": "e8b0314a583b028ad2d6508b455e33f5787bffe1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiMDMxNGE1ODNiMDI4YWQyZDY1MDhiNDU1ZTMzZjU3ODdiZmZlMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-10T16:19:23Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-10T16:19:23Z"}, "message": "Make get_call_rtx_from take a const rtx_insn *\n\nOnly one caller (in dwarf2out.c) was preventing get_call_rtx_from\nfrom taking an rtx_insn *.  Since that caller just passes a PATTERN,\nit's a trivial change to make.\n\n2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* rtl.h (get_call_rtx_from): Take a const rtx_insn * instead of an rtx.\n\t* rtlanal.c (get_call_rtx_from): Likewise.\n\t* dwarf2out.c (dwarf2out_var_location): Pass the insn rather\n\tthan the pattern to get_call_rtx_from.\n\t* config/i386/i386-expand.h (ix86_notrack_prefixed_insn_p): Take\n\tan rtx_insn * instead of an rtx.\n\t* config/i386/i386-expand.c (ix86_notrack_prefixed_insn_p): Likewise.\n\nFrom-SVN: r275593", "tree": {"sha": "0a912d382c9a09330094df197632485b07733b76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a912d382c9a09330094df197632485b07733b76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b0314a583b028ad2d6508b455e33f5787bffe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b0314a583b028ad2d6508b455e33f5787bffe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b0314a583b028ad2d6508b455e33f5787bffe1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b0314a583b028ad2d6508b455e33f5787bffe1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68a57628f482c75003abfc77b5c2a3be029668fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68a57628f482c75003abfc77b5c2a3be029668fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68a57628f482c75003abfc77b5c2a3be029668fa"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "0ec847ca9d8db2071df2173472bf84bf85d8e2db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -1,3 +1,13 @@\n+2019-09-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (get_call_rtx_from): Take a const rtx_insn * instead of an rtx.\n+\t* rtlanal.c (get_call_rtx_from): Likewise.\n+\t* dwarf2out.c (dwarf2out_var_location): Pass the insn rather\n+\tthan the pattern to get_call_rtx_from.\n+\t* config/i386/i386-expand.h (ix86_notrack_prefixed_insn_p): Take\n+\tan rtx_insn * instead of an rtx.\n+\t* config/i386/i386-expand.c (ix86_notrack_prefixed_insn_p): Likewise.\n+\n 2019-09-10  Martin Liska  <mliska@suse.cz>\n \n \t* common.opt: Use newly added WarnRemoved."}, {"sha": "22c2823c549f7b0f5644c80536b0576228b09d11", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -19969,7 +19969,7 @@ ix86_expand_sse2_mulvxdi3 (rtx op0, rtx op1, rtx op2)\n    should be encoded with notrack prefix.  */\n \n bool\n-ix86_notrack_prefixed_insn_p (rtx insn)\n+ix86_notrack_prefixed_insn_p (rtx_insn *insn)\n {\n   if (!insn || !((flag_cf_protection & CF_BRANCH)))\n     return false;"}, {"sha": "70b6b280ebae01daf13a9b49fcc34c52cf315a27", "filename": "gcc/config/i386/i386-expand.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fconfig%2Fi386%2Fi386-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fconfig%2Fi386%2Fi386-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.h?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -50,7 +50,7 @@ rtx ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t\t machine_mode mode, int ignore);\n bool ix86_vectorize_vec_perm_const (machine_mode vmode, rtx target, rtx op0,\n \t\t\t\t    rtx op1, const vec_perm_indices &sel);\n-bool ix86_notrack_prefixed_insn_p (rtx insn);\n+bool ix86_notrack_prefixed_insn_p (rtx_insn *);\n machine_mode ix86_split_reduction (machine_mode mode);\n void ix86_expand_divmod_libfunc (rtx libfunc, machine_mode mode, rtx op0,\n \t\t\t\t rtx op1, rtx *quot_p, rtx *rem_p);"}, {"sha": "c359c2d4af981c930246f335fb5d8dcc05725abd", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -27505,7 +27505,7 @@ dwarf2out_var_location (rtx_insn *loc_note)\n       ca_loc->tail_call_p = SIBLING_CALL_P (prev);\n \n       /* Look for a SYMBOL_REF in the \"prev\" instruction.  */\n-      rtx x = get_call_rtx_from (PATTERN (prev));\n+      rtx x = get_call_rtx_from (prev);\n       if (x)\n \t{\n \t  /* Try to get the call symbol, if any.  */"}, {"sha": "c054861f896efc2d6165af958f006e8408c50178", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -3419,7 +3419,7 @@ extern bool nonzero_address_p (const_rtx);\n extern int rtx_unstable_p (const_rtx);\n extern bool rtx_varies_p (const_rtx, bool);\n extern bool rtx_addr_varies_p (const_rtx, bool);\n-extern rtx get_call_rtx_from (rtx);\n+extern rtx get_call_rtx_from (const rtx_insn *);\n extern HOST_WIDE_INT get_integer_term (const_rtx);\n extern rtx get_related_value (const_rtx);\n extern bool offset_within_block_p (const_rtx, HOST_WIDE_INT);"}, {"sha": "dfc6fe2aec8841d8b002163b449ef3bc39072914", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b0314a583b028ad2d6508b455e33f5787bffe1/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=e8b0314a583b028ad2d6508b455e33f5787bffe1", "patch": "@@ -811,10 +811,9 @@ rtx_addr_varies_p (const_rtx x, bool for_alias)\n /* Return the CALL in X if there is one.  */\n \n rtx\n-get_call_rtx_from (rtx x)\n+get_call_rtx_from (const rtx_insn *insn)\n {\n-  if (INSN_P (x))\n-    x = PATTERN (x);\n+  rtx x = PATTERN (insn);\n   if (GET_CODE (x) == PARALLEL)\n     x = XVECEXP (x, 0, 0);\n   if (GET_CODE (x) == SET)"}]}