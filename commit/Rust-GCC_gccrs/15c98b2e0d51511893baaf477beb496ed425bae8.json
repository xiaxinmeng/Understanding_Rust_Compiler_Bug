{"sha": "15c98b2e0d51511893baaf477beb496ed425bae8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjOThiMmUwZDUxNTExODkzYmFhZjQ3N2JlYjQ5NmVkNDI1YmFlOA==", "commit": {"author": {"name": "Eduard Sanou", "email": "dhole@openmailbox.org", "date": "2016-06-01T16:42:41Z"}, "committer": {"name": "Matthias Klose", "email": "doko@gcc.gnu.org", "date": "2016-06-01T16:42:41Z"}, "message": "c-common.c (get_source_date_epoch): Rename to cb_get_source_date_epoch.\n\ngcc/c-family/ChangeLog:\n\n2016-05-13  Eduard Sanou  <dhole@openmailbox.org>\n\n\t* c-common.c (get_source_date_epoch): Rename to\n\tcb_get_source_date_epoch.\n\t* c-common.c (cb_get_source_date_epoch): Use a single generic erorr\n\tmessage when the parsing fails.  Use error_at instead of fatal_error.\n\t* c-common.h (get_source_date_epoch): Rename to\n\tcb_get_source_date_epoch.\n\t* c-common.h (cb_get_source_date_epoch): Prototype.\n\t* c-common.h (MAX_SOURCE_DATE_EPOCH): Define.\n\t* c-common.h (c_omp_region_type): Remove trailing comma.\n\t* c-lex.c (init_c_lex): Set cb->get_source_date_epoch callback.\n\t* c-lex.c (c_lex_with_flags): Remove initialization of\n\tpfile->source_date_epoch.\n\ngcc/ChangeLog:\n\n2016-05-13  Eduard Sanou  <dhole@openmailbox.org>\n\n\t* doc/cppenv.texi: Note that the `%s` in `date` is a non-standard\n\textension.\n\t* gcc.c (driver_handle_option): Call set_source_date_epoch_envvar.\n\t* gcc.c (set_source_date_epoch_envvar): New function, sets\n\tthe SOURCE_DATE_EPOCH environment variable to the current time.\n\ngcc/testsuite/ChangeLog:\n\n2016-05-13  Eduard Sanou  <dhole@openmailbox.org>\n\n\t* gcc.dg/cpp/source_date_epoch-1.c: New file, test the proper\n\tbehaviour of the macros __DATE__ and __TIME__ when SOURCE_DATE_EPOCH\n\tenv var is set.\n\t* gcc.dg/cpp/source_date_epoch-2.c: New file, test the error output\n\twhen parsing the SOURCE_DATE_EPOCH env var, and make sure it is only\n\tshown once.\n\t* lib/gcc-dg.exp (dg-set-compiler-env-var): New function, set env vars\n\tduring compilation.\n\t* lib/gcc-dg.exp (restore-compiler-env-var): New function, restore env\n\tvars set by dg-set-compiler-env-var.\n\nlibcpp/ChangeLog:\n\n2016-05-13  Eduard Sanou  <dhole@openmailbox.org>\n\n\t* include/cpplib.h (cpp_callbacks): Add get_source_date_epoch\n\tcallback.\n\t* include/cpplib.h (cpp_init_source_date_epoch): Remove prototype.\n\t* init.c (cpp_init_source_date_epoch): Remove function.\n\t* init.c (cpp_create_reader): Initialize pfile->source_date_epoch.\n\t* internal.h (cpp_reader): Extend comment about source_date_epoch.\n\t* macro.c (_cpp_builtin_macro_text): Use get_source_date_epoch\n\tcallback only once, read pfile->source_date_epoch on future passes.\n\tCheck that get_source_date_epoch callback is not NULL.\n\nFrom-SVN: r237001", "tree": {"sha": "6111e9d43417c0a01997f03f171b4d3df5f399a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6111e9d43417c0a01997f03f171b4d3df5f399a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15c98b2e0d51511893baaf477beb496ed425bae8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c98b2e0d51511893baaf477beb496ed425bae8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15c98b2e0d51511893baaf477beb496ed425bae8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15c98b2e0d51511893baaf477beb496ed425bae8/comments", "author": null, "committer": null, "parents": [{"sha": "de482e91f177ea4f4b5dfbaeb1f6e77fb98aae29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de482e91f177ea4f4b5dfbaeb1f6e77fb98aae29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de482e91f177ea4f4b5dfbaeb1f6e77fb98aae29"}], "stats": {"total": 210, "additions": 171, "deletions": 39}, "files": [{"sha": "8eb0cd587e48bbfca5360609cbe79d71adb5fb3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -1,3 +1,11 @@\n+2016-06-01  Eduard Sanou  <dhole@openmailbox.org>\n+\n+\t* doc/cppenv.texi: Note that the `%s` in `date` is a non-standard\n+\textension.\n+\t* gcc.c (driver_handle_option): Call set_source_date_epoch_envvar.\n+\t* gcc.c (set_source_date_epoch_envvar): New function, sets\n+\tthe SOURCE_DATE_EPOCH environment variable to the current time.\n+\n 2016-06-01  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-vect-loop.c (vect_determine_vectorization_factor): Also compute"}, {"sha": "7c589acf20c8a9a531d2aaac5b8ad70c4a77fa3f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -1,3 +1,18 @@\n+2016-06-01  Eduard Sanou  <dhole@openmailbox.org>\n+\n+\t* c-common.c (get_source_date_epoch): Rename to\n+\tcb_get_source_date_epoch.\n+\t* c-common.c (cb_get_source_date_epoch): Use a single generic erorr\n+\tmessage when the parsing fails.  Use error_at instead of fatal_error.\n+\t* c-common.h (get_source_date_epoch): Rename to\n+\tcb_get_source_date_epoch.\n+\t* c-common.h (cb_get_source_date_epoch): Prototype.\n+\t* c-common.h (MAX_SOURCE_DATE_EPOCH): Define.\n+\t* c-common.h (c_omp_region_type): Remove trailing comma.\n+\t* c-lex.c (init_c_lex): Set cb->get_source_date_epoch callback.\n+\t* c-lex.c (c_lex_with_flags): Remove initialization of\n+\tpfile->source_date_epoch.\n+\n 2016-05-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/71349"}, {"sha": "93ca274e7c8d711c2b011b399ebad96fa1b91ce9", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -12762,8 +12762,9 @@ valid_array_size_p (location_t loc, tree type, tree name)\n /* Read SOURCE_DATE_EPOCH from environment to have a deterministic\n    timestamp to replace embedded current dates to get reproducible\n    results.  Returns -1 if SOURCE_DATE_EPOCH is not defined.  */\n+\n time_t\n-get_source_date_epoch ()\n+cb_get_source_date_epoch (cpp_reader *pfile ATTRIBUTE_UNUSED)\n {\n   char *source_date_epoch;\n   long long epoch;\n@@ -12775,19 +12776,14 @@ get_source_date_epoch ()\n \n   errno = 0;\n   epoch = strtoll (source_date_epoch, &endptr, 10);\n-  if ((errno == ERANGE && (epoch == LLONG_MAX || epoch == LLONG_MIN))\n-      || (errno != 0 && epoch == 0))\n-    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n-\t\t \"strtoll: %s\\n\", xstrerror(errno));\n-  if (endptr == source_date_epoch)\n-    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n-\t\t \"no digits were found: %s\\n\", endptr);\n-  if (*endptr != '\\0')\n-    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n-\t\t \"trailing garbage: %s\\n\", endptr);\n-  if (epoch < 0)\n-    fatal_error (UNKNOWN_LOCATION, \"environment variable $SOURCE_DATE_EPOCH: \"\n-\t\t \"value must be nonnegative: %lld \\n\", epoch);\n+  if (errno != 0 || endptr == source_date_epoch || *endptr != '\\0'\n+      || epoch < 0 || epoch > MAX_SOURCE_DATE_EPOCH)\n+    {\n+      error_at (input_location, \"environment variable SOURCE_DATE_EPOCH must \"\n+\t        \"expand to a non-negative integer less than or equal to %wd\",\n+\t\tMAX_SOURCE_DATE_EPOCH);\n+      return (time_t) -1;\n+    }\n \n   return (time_t) epoch;\n }"}, {"sha": "4e6aa0051fa23a3093f9012717f79578b8bbfb41", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -1088,6 +1088,16 @@ extern vec<tree, va_gc> *make_tree_vector_copy (const vec<tree, va_gc> *);\n    c_register_builtin_type.  */\n extern GTY(()) tree registered_builtin_types;\n \n+/* Read SOURCE_DATE_EPOCH from environment to have a deterministic\n+   timestamp to replace embedded current dates to get reproducible\n+   results.  Returns -1 if SOURCE_DATE_EPOCH is not defined.  */\n+extern time_t cb_get_source_date_epoch (cpp_reader *pfile);\n+\n+/* The value (as a unix timestamp) corresponds to date\n+   \"Dec 31 9999 23:59:59 UTC\", which is the latest date that __DATE__ and\n+   __TIME__ can store.  */\n+#define MAX_SOURCE_DATE_EPOCH HOST_WIDE_INT_C (253402300799)\n+\n /* In c-gimplify.c  */\n extern void c_genericize (tree);\n extern int c_gimplify_expr (tree *, gimple_seq *, gimple_seq *);\n@@ -1482,9 +1492,4 @@ extern bool valid_array_size_p (location_t, tree, tree);\n extern bool cilk_ignorable_spawn_rhs_op (tree);\n extern bool cilk_recognize_spawn (tree, tree *);\n \n-/* Read SOURCE_DATE_EPOCH from environment to have a deterministic\n-   timestamp to replace embedded current dates to get reproducible\n-   results.  Returns -1 if SOURCE_DATE_EPOCH is not defined.  */\n-extern time_t get_source_date_epoch (void);\n-\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "8f33d8616e38fd3a41bd4b5b403e76019cb89f1a", "filename": "gcc/c-family/c-lex.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fc-family%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-lex.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -80,6 +80,7 @@ init_c_lex (void)\n   cb->valid_pch = c_common_valid_pch;\n   cb->read_pch = c_common_read_pch;\n   cb->has_attribute = c_common_has_attribute;\n+  cb->get_source_date_epoch = cb_get_source_date_epoch;\n \n   /* Set the debug callbacks if we can use them.  */\n   if ((debug_info_level == DINFO_LEVEL_VERBOSE\n@@ -389,9 +390,6 @@ c_lex_with_flags (tree *value, location_t *loc, unsigned char *cpp_flags,\n   enum cpp_ttype type;\n   unsigned char add_flags = 0;\n   enum overflow_type overflow = OT_NONE;\n-  time_t source_date_epoch = get_source_date_epoch ();\n-\n-  cpp_init_source_date_epoch (parse_in, source_date_epoch);\n \n   timevar_push (TV_CPP);\n  retry:"}, {"sha": "8cefd529aa330634c55ce3f02b3952b7a41f44ad", "filename": "gcc/doc/cppenv.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fdoc%2Fcppenv.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fdoc%2Fcppenv.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcppenv.texi?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -81,16 +81,16 @@ main input file is omitted.\n @end ifclear\n \n @item SOURCE_DATE_EPOCH\n-\n If this variable is set, its value specifies a UNIX timestamp to be\n used in replacement of the current date and time in the @code{__DATE__}\n and @code{__TIME__} macros, so that the embedded timestamps become\n reproducible.\n \n The value of @env{SOURCE_DATE_EPOCH} must be a UNIX timestamp,\n defined as the number of seconds (excluding leap seconds) since\n-01 Jan 1970 00:00:00 represented in ASCII, identical to the output of\n-@samp{@command{date +%s}}.\n+01 Jan 1970 00:00:00 represented in ASCII; identical to the output of\n+@samp{@command{date +%s}} on GNU/Linux and other systems that support the\n+@code{%s} extension in the @code{date} command.\n \n The value should be a known timestamp such as the last modification\n time of the source or package and it should be set by the build"}, {"sha": "ab113102bc6605d123046a3df5134c405faa4a25", "filename": "gcc/gcc.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -3547,6 +3547,29 @@ save_switch (const char *opt, size_t n_args, const char *const *args,\n   n_switches++;\n }\n \n+/* Set the SOURCE_DATE_EPOCH environment variable to the current time if it is\n+   not set already.  */\n+\n+static void\n+set_source_date_epoch_envvar ()\n+{\n+  /* Array size is 21 = ceil(log_10(2^64)) + 1 to hold string representations\n+     of 64 bit integers.  */\n+  char source_date_epoch[21];\n+  time_t tt;\n+\n+  errno = 0;\n+  tt = time (NULL);\n+  if (tt < (time_t) 0 || errno != 0)\n+    tt = (time_t) 0;\n+\n+  snprintf (source_date_epoch, 21, \"%llu\", (unsigned long long) tt);\n+  /* Using setenv instead of xputenv because we want the variable to remain\n+     after finalizing so that it's still set in the second run when using\n+     -fcompare-debug.  */\n+  setenv (\"SOURCE_DATE_EPOCH\", source_date_epoch, 0);\n+}\n+\n /* Handle an option DECODED that is unknown to the option-processing\n    machinery.  */\n \n@@ -3846,6 +3869,7 @@ driver_handle_option (struct gcc_options *opts,\n       else\n \tcompare_debug_opt = arg;\n       save_switch (compare_debug_replacement_opt, 0, NULL, validated, true);\n+      set_source_date_epoch_envvar ();\n       return true;\n \n     case OPT_fdiagnostics_color_:"}, {"sha": "497a2151a13699c7ccc04aea3138b606b4cf13a8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -1,3 +1,16 @@\n+2016-06-01  Eduard Sanou  <dhole@openmailbox.org>\n+\n+\t* gcc.dg/cpp/source_date_epoch-1.c: New file, test the proper\n+\tbehaviour of the macros __DATE__ and __TIME__ when SOURCE_DATE_EPOCH\n+\tenv var is set.\n+\t* gcc.dg/cpp/source_date_epoch-2.c: New file, test the error output\n+\twhen parsing the SOURCE_DATE_EPOCH env var, and make sure it is only\n+\tshown once.\n+\t* lib/gcc-dg.exp (dg-set-compiler-env-var): New function, set env vars\n+\tduring compilation.\n+\t* lib/gcc-dg.exp (restore-compiler-env-var): New function, restore env\n+\tvars set by dg-set-compiler-env-var.\n+\n 2016-06-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/71156"}, {"sha": "f6aa1a360ffc5067020576a482a98517e5b63e86", "filename": "gcc/testsuite/gcc.dg/cpp/source_date_epoch-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-1.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do run } */\n+/* { dg-set-compiler-env-var SOURCE_DATE_EPOCH \"630333296\" } */\n+\n+int\n+main(void)\n+{\n+  __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__);\n+  return 0;\n+}\n+\n+/* { dg-output \"^Dec 22 1989 12:34:56\\n$\" } */"}, {"sha": "ae18362ae87d61dc35fee2b60a27b3d9aed8ac61", "filename": "gcc/testsuite/gcc.dg/cpp/source_date_epoch-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fsource_date_epoch-2.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-set-compiler-env-var SOURCE_DATE_EPOCH \"AAA\" } */\n+\n+/* Make sure that SOURCE_DATE_EPOCH is only parsed once */\n+\n+int\n+main(void)\n+{\n+  __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__); /* { dg-error \"SOURCE_DATE_EPOCH must expand\" } */\n+  __builtin_printf (\"%s %s\\n\", __DATE__, __TIME__);\n+  return 0;\n+}"}, {"sha": "2304740aa492f009762ffc161956d77808b2ce2e", "filename": "gcc/testsuite/lib/gcc-dg.exp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgcc-dg.exp?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -451,6 +451,38 @@ proc restore-target-env-var { } {\n     }\n }\n \n+proc dg-set-compiler-env-var { args } {\n+    global set_compiler_env_var\n+    global saved_compiler_env_var\n+    if { [llength $args] != 3 } {\n+\terror \"dg-set-compiler-env-var: need two arguments\"\n+\treturn\n+    }\n+    set var [lindex $args 1]\n+    set value [lindex $args 2]\n+    if [info exists ::env($var)] {\n+      lappend saved_compiler_env_var [list $var 1 $::env($var)]\n+    } else {\n+      lappend saved_compiler_env_var [list $var 0]\n+    }\n+    setenv $var $value\n+    lappend set_compiler_env_var [list $var $value]\n+}\n+\n+proc restore-compiler-env-var { } {\n+    global saved_compiler_env_var\n+    for { set env_vari [llength $saved_compiler_env_var] } {\n+          [incr env_vari -1] >= 0 } {} {\n+\tset env_var [lindex $saved_compiler_env_var $env_vari]\n+\tset var [lindex $env_var 0]\n+\tif [lindex $env_var 1] {\n+\t    setenv $var [lindex $env_var 2]\n+\t} else {\n+\t    unsetenv $var\n+\t}\n+    }\n+}\n+\n # Utility routines.\n \n #\n@@ -874,6 +906,11 @@ if { [info procs saved-dg-test] == [list] } {\n \tif [info exists set_target_env_var] {\n \t    unset set_target_env_var\n \t}\n+\tif [info exists set_compiler_env_var] {\n+\t    restore-compiler-env-var\n+\t    unset set_compiler_env_var\n+\t    unset saved_compiler_env_var\n+\t}\n \tif [info exists keep_saved_temps_suffixes] {\n \t    unset keep_saved_temps_suffixes\n \t}"}, {"sha": "5d18c0a3ea3505e73fcda3bd7c0726bf0a977798", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -1,3 +1,15 @@\n+2016-06-01  Eduard Sanou  <dhole@openmailbox.org>\n+\n+\t* include/cpplib.h (cpp_callbacks): Add get_source_date_epoch\n+\tcallback.\n+\t* include/cpplib.h (cpp_init_source_date_epoch): Remove prototype.\n+\t* init.c (cpp_init_source_date_epoch): Remove function.\n+\t* init.c (cpp_create_reader): Initialize pfile->source_date_epoch.\n+\t* internal.h (cpp_reader): Extend comment about source_date_epoch.\n+\t* macro.c (_cpp_builtin_macro_text): Use get_source_date_epoch\n+\tcallback only once, read pfile->source_date_epoch on future passes.\n+\tCheck that get_source_date_epoch callback is not NULL.\n+\n 2016-05-20  Martin Liska  <mliska@suse.cz>\n \n \t* config.in: Regenerated."}, {"sha": "9d70cc856effd7ad1cc8094ae137cc2e62a5b19c", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -594,6 +594,9 @@ struct cpp_callbacks\n \n   /* Callback that can change a user builtin into normal macro.  */\n   bool (*user_builtin_macro) (cpp_reader *, cpp_hashnode *);\n+\n+  /* Callback to parse SOURCE_DATE_EPOCH from environment.  */\n+  time_t (*get_source_date_epoch) (cpp_reader *);\n };\n \n #ifdef VMS\n@@ -784,9 +787,6 @@ extern void cpp_init_special_builtins (cpp_reader *);\n /* Set up built-ins like __FILE__.  */\n extern void cpp_init_builtins (cpp_reader *, int);\n \n-/* Initialize the source_date_epoch value.  */\n-extern void cpp_init_source_date_epoch (cpp_reader *, time_t);\n-\n /* This is called after options have been parsed, and partially\n    processed.  */\n extern void cpp_post_options (cpp_reader *);"}, {"sha": "e78b3206defa09c57e31e329cbed8eef4a27496f", "filename": "libcpp/init.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -257,6 +257,9 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   /* Do not force token locations by default.  */\n   pfile->forced_token_location_p = NULL;\n \n+  /* Initialize source_date_epoch to -2 (not yet set).  */\n+  pfile->source_date_epoch = (time_t) -2;\n+\n   /* The expression parser stack.  */\n   _cpp_expand_op_stack (pfile);\n \n@@ -533,13 +536,6 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n     _cpp_define_builtin (pfile, \"__OBJC__ 1\");\n }\n \n-/* Initialize the source_date_epoch value.  */\n-void\n-cpp_init_source_date_epoch (cpp_reader *pfile, time_t source_date_epoch)\n-{\n-  pfile->source_date_epoch = source_date_epoch; \n-}\n-\n /* Sanity-checks are dependent on command-line options, so it is\n    called as a subroutine of cpp_read_main_file.  */\n #if CHECKING_P"}, {"sha": "cea32ec73c62961b3d552a3e0c7b4fb8873638cf", "filename": "libcpp/internal.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -503,7 +503,8 @@ struct cpp_reader\n   const unsigned char *time;\n \n   /* Externally set timestamp to replace current date and time useful for\n-     reproducibility.  */\n+     reproducibility.  It should be initialized to -2 (not yet set) and\n+     set to -1 to disable it or to a non-negative value to enable it.  */\n   time_t source_date_epoch;\n \n   /* EOF token, and a token forcing paste avoidance.  */"}, {"sha": "a3b8348a23ff02913001b3491443bb25bb29ceef", "filename": "libcpp/macro.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15c98b2e0d51511893baaf477beb496ed425bae8/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=15c98b2e0d51511893baaf477beb496ed425bae8", "patch": "@@ -358,9 +358,13 @@ _cpp_builtin_macro_text (cpp_reader *pfile, cpp_hashnode *node,\n \t  struct tm *tb = NULL;\n \n \t  /* Set a reproducible timestamp for __DATE__ and __TIME__ macro\n-\t     usage if SOURCE_DATE_EPOCH is defined.  */\n-\t  if (pfile->source_date_epoch != (time_t) -1)\n-\t     tb = gmtime (&pfile->source_date_epoch);\n+\t     if SOURCE_DATE_EPOCH is defined.  */\n+\t  if (pfile->source_date_epoch == (time_t) -2\n+\t      && pfile->cb.get_source_date_epoch != NULL)\n+\t    pfile->source_date_epoch = pfile->cb.get_source_date_epoch (pfile);\n+\n+\t  if (pfile->source_date_epoch >= (time_t) 0)\n+\t    tb = gmtime (&pfile->source_date_epoch);\n \t  else\n \t    {\n \t      /* (time_t) -1 is a legitimate value for \"number of seconds"}]}