{"sha": "b77c32273b432db3f04175b95143b3ed5214f6f3", "node_id": "C_kwDOANBUbNoAKGI3N2MzMjI3M2I0MzJkYjNmMDQxNzViOTUxNDNiM2VkNTIxNGY2ZjM", "commit": {"author": {"name": "Christoph M\u00fcllner", "email": "christoph.muellner@vrull.eu", "date": "2022-12-05T11:55:16Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-03-15T08:56:38Z"}, "message": "riscv: thead: Add support for the XTheadBa ISA extension\n\nThis patch adds support for the XTheadBa ISA extension.\nThe new INSN pattern is defined in a new file to separate\nthis vendor extension from the standard extensions.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.md: Include thead.md\n\t* config/riscv/thead.md: New file.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/xtheadba-addsl.c: New test.\n\nSigned-off-by: Christoph M\u00fcllner <christoph.muellner@vrull.eu>", "tree": {"sha": "313aa7ee2d24523316b5011f1f331e9e1eda14d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/313aa7ee2d24523316b5011f1f331e9e1eda14d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b77c32273b432db3f04175b95143b3ed5214f6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77c32273b432db3f04175b95143b3ed5214f6f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b77c32273b432db3f04175b95143b3ed5214f6f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b77c32273b432db3f04175b95143b3ed5214f6f3/comments", "author": {"login": "cmuellner", "id": 92810, "node_id": "MDQ6VXNlcjkyODEw", "avatar_url": "https://avatars.githubusercontent.com/u/92810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmuellner", "html_url": "https://github.com/cmuellner", "followers_url": "https://api.github.com/users/cmuellner/followers", "following_url": "https://api.github.com/users/cmuellner/following{/other_user}", "gists_url": "https://api.github.com/users/cmuellner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmuellner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmuellner/subscriptions", "organizations_url": "https://api.github.com/users/cmuellner/orgs", "repos_url": "https://api.github.com/users/cmuellner/repos", "events_url": "https://api.github.com/users/cmuellner/events{/privacy}", "received_events_url": "https://api.github.com/users/cmuellner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c36fb3ca9eef56bc2f597e0fee577aca96ec3754", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c36fb3ca9eef56bc2f597e0fee577aca96ec3754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c36fb3ca9eef56bc2f597e0fee577aca96ec3754"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "6a9983384377ca88045a5f74f2b2f7021683cbc1", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=b77c32273b432db3f04175b95143b3ed5214f6f3", "patch": "@@ -3103,4 +3103,5 @@\n (include \"pic.md\")\n (include \"generic.md\")\n (include \"sifive-7.md\")\n+(include \"thead.md\")\n (include \"vector.md\")"}, {"sha": "2da5aaee94f9b433d94a3b67d35d27e42f064b95", "filename": "gcc/config/riscv/thead.md", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Fconfig%2Friscv%2Fthead.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Fconfig%2Friscv%2Fthead.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fthead.md?ref=b77c32273b432db3f04175b95143b3ed5214f6f3", "patch": "@@ -0,0 +1,31 @@\n+;; Machine description for T-Head vendor extensions\n+;; Copyright (C) 2021-2022 Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; XTheadBa\n+\n+(define_insn \"*th_addsl<mode>4\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t(plus:X (ashift:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t  (match_operand 2 \"const_int_operand\" \"n\"))\n+\t\t(match_operand:X 3 \"register_operand\" \"r\")))]\n+  \"TARGET_XTHEADBA\n+   && (INTVAL (operands[2]) >= 0) && (INTVAL (operands[2]) <= 3)\"\n+  \"th.addsl\\t%0,%3,%1,%2\"\n+  [(set_attr \"type\" \"bitmanip\")\n+   (set_attr \"mode\" \"<X:MODE>\")])"}, {"sha": "5004735a2468650f7331cb91de689e447a77a6ef", "filename": "gcc/testsuite/gcc.target/riscv/xtheadba-addsl.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadba-addsl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b77c32273b432db3f04175b95143b3ed5214f6f3/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadba-addsl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadba-addsl.c?ref=b77c32273b432db3f04175b95143b3ed5214f6f3", "patch": "@@ -0,0 +1,55 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadba\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadba\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" } } */\n+\n+long\n+test_1 (long a, long b)\n+{\n+  /* th.addsl aX, aX, 1  */\n+  return a + (b << 1);\n+}\n+\n+int\n+foos (short *x, int n)\n+{\n+  /* th.addsl aX, aX, 1  */\n+  return x[n];\n+}\n+\n+long\n+test_2 (long a, long b)\n+{\n+  /* th.addsl aX, aX, 2  */\n+  return a + (b << 2);\n+}\n+\n+int\n+fooi (int *x, int n)\n+{\n+  /* th.addsl aX, aX, 2  */\n+  return x[n];\n+}\n+\n+long\n+test_3 (long a, long b)\n+{\n+  /* th.addsl aX, aX, 3  */\n+  return a + (b << 3);\n+}\n+\n+long\n+fool (long *x, int n)\n+{\n+  /* th.addsl aX, aX, 2 (rv32)  */\n+  /* th.addsl aX, aX, 3 (rv64)  */\n+  return x[n];\n+}\n+\n+/* { dg-final { scan-assembler-times \"th.addsl\\[ \\t\\]*a\\[0-9\\]+,a\\[0-9\\]+,a\\[0-9\\]+,1\" 2 } } */\n+\n+/* { dg-final { scan-assembler-times \"th.addsl\\[ \\t\\]*a\\[0-9\\]+,a\\[0-9\\]+,a\\[0-9\\]+,2\" 3 { target { rv32 } } } } */\n+/* { dg-final { scan-assembler-times \"th.addsl\\[ \\t\\]*a\\[0-9\\]+,a\\[0-9\\]+,a\\[0-9\\]+,2\" 2 { target { rv64 } } } } */\n+\n+/* { dg-final { scan-assembler-times \"th.addsl\\[ \\t\\]*a\\[0-9\\]+,a\\[0-9\\]+,a\\[0-9\\]+,3\" 1 { target { rv32 } } } } */\n+/* { dg-final { scan-assembler-times \"th.addsl\\[ \\t\\]*a\\[0-9\\]+,a\\[0-9\\]+,a\\[0-9\\]+,3\" 2 { target { rv64 } } } } */"}]}