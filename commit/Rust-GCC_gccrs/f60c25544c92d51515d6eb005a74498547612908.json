{"sha": "f60c25544c92d51515d6eb005a74498547612908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYwYzI1NTQ0YzkyZDUxNTE1ZDZlYjAwNWE3NDQ5ODU0NzYxMjkwOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-18T19:48:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-18T19:48:09Z"}, "message": "i386.h (SSE_VEC_FLOAT_MODE_P): Remove.\n\n\t* config/i386/i386.h (SSE_VEC_FLOAT_MODE_P): Remove.\n\t(AVX_FLOAT_MODE_P): Ditto.\n\t(AVX128_VEC_FLOAT_MODE_P): Ditto.\n\t(AVX256_VEC_FLOAT_MODE_P): Ditto.\n\t(AVX_VEC_FLOAT_MODE_P): Ditto.\n\t* config/i386/i386.md (UNSPEC_MASKLOAD): Remove.\n\t(UNSPEC_MASKSTORE): Ditto.\n\t* config/i386/sse.md (<sse>_movmsk<ssemodesuffix><avxmodesuffix>):\n\tMerge from <sse>_movmsk<ssemodesuffix> and\n\tavx_movmsk<ssemodesuffix>256.  Use VF mode iterator.\n\t(*sse2_maskmovdqu): Merge with *sse2_maskmovdqu_rex64.  Use P mode\n\titerator.\n\t(avx_maskload<ssemodesuffix><avxmodesuffix>): New expander.\n\t(avx_maskstore<ssemodesuffix><avxmodesuffix>): Ditto.\n\t(*avx_maskmov<ssemodesuffix><avxmodesuffix>): New insn.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/i386/sse2-maskmovdqu.c: New test.\n\t* gcc.target/i386/avx-vmaskmovdqu.c: Ditto.\n\nFrom-SVN: r172669", "tree": {"sha": "7808b3601bef4427b90a5eb67e5725f71fc0343a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7808b3601bef4427b90a5eb67e5725f71fc0343a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f60c25544c92d51515d6eb005a74498547612908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60c25544c92d51515d6eb005a74498547612908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f60c25544c92d51515d6eb005a74498547612908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f60c25544c92d51515d6eb005a74498547612908/comments", "author": null, "committer": null, "parents": [{"sha": "d77c2e5b8639ab15c117f5d4763e451d313154e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d77c2e5b8639ab15c117f5d4763e451d313154e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d77c2e5b8639ab15c117f5d4763e451d313154e6"}], "stats": {"total": 207, "additions": 119, "deletions": 88}, "files": [{"sha": "9a56f9a1ce5425f3fa4a4898ee72f494641ac53e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 17, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -1,3 +1,21 @@\n+2011-04-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.h (SSE_VEC_FLOAT_MODE_P): Remove.\n+\t(AVX_FLOAT_MODE_P): Ditto.\n+\t(AVX128_VEC_FLOAT_MODE_P): Ditto.\n+\t(AVX256_VEC_FLOAT_MODE_P): Ditto.\n+\t(AVX_VEC_FLOAT_MODE_P): Ditto.\n+\t* config/i386/i386.md (UNSPEC_MASKLOAD): Remove.\n+\t(UNSPEC_MASKSTORE): Ditto.\n+\t* config/i386/sse.md (<sse>_movmsk<ssemodesuffix><avxmodesuffix>):\n+\tMerge from <sse>_movmsk<ssemodesuffix> and\n+\tavx_movmsk<ssemodesuffix>256.  Use VF mode iterator.\n+\t(*sse2_maskmovdqu): Merge with *sse2_maskmovdqu_rex64.  Use P mode\n+\titerator.\n+\t(avx_maskload<ssemodesuffix><avxmodesuffix>): New expander.\n+\t(avx_maskstore<ssemodesuffix><avxmodesuffix>): Ditto.\n+\t(*avx_maskmov<ssemodesuffix><avxmodesuffix>): New insn.\n+\n 2011-04-18  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline.c (inline_small_functions): Fix pasto in previous patch.\n@@ -10,8 +28,7 @@\n \t(inline_small_functions): Move program size estimates here;\n \tactually process whole queue even when unit growth has been\n \tmet. (to properly compute inline_failed reasons and for the\n-\tcase unit size decrease.) Revisit comments on recursive\n-\tinlining.\n+\tcase unit size decrease.) Revisit comments on recursive inlining.\n \t(ipa_inline): Remove unit summary code; first inline hot calls\n \tof functions called once, cold calls next.\n \t(order, nnodes): Remove unused variables.\n@@ -164,17 +181,16 @@\n \twant_inline_small_function_p.\n \t(cgraph_decide_recursive_inlining): Rename to...\n \t(recursive_inlining): Use can_inline_edge_p and\n-\twant_inline_self_recursive_call_p; simplify and\n-\tremove no longer valid FIXME.\n+\twant_inline_self_recursive_call_p; simplify and remove no longer\n+\tvalid FIXME.\n \t(cgraph_set_inline_failed): Remove.\n \t(add_new_edges_to_heap): Use can_inline_edge_p and\n \twant_inline_small_function_p.\n \t(cgraph_decide_inlining_of_small_functions): Rename to ...\n \t(inline_small_functions): ... this one; cleanup; use\n-\tcan/want predicates; cleanup debug ouput; work edges\n-\ttill fibheap is exhausted and do not stop once unit\n-\tgrowth is reached; remove later loop processing remaining\n-\tedges.\n+\tcan/want predicates; cleanup debug ouput; work edges till fibheap\n+\tis exhausted and do not stop once unit growth is reached; remove\n+\tlater loop processing remaining edges.\n \t(cgraph_flatten): Rename to ...\n \t(flatten_function): ... this one; use can_inline_edge_p\n \tand can_early_inline_edge_p predicates.\n@@ -183,8 +199,7 @@\n \tinlining functions called once; simplify the pass.\n \t(cgraph_perform_always_inlining): Rename to ...\n \t(inline_always_inline_functions): ... this one; use\n-\tDECL_DISREGARD_INLINE_LIMITS; use can_inline_edge_p\n-\tpredicate\n+\tDECL_DISREGARD_INLINE_LIMITS; use can_inline_edge_p predicate.\n \t(cgraph_decide_inlining_incrementally): Rename to ...\n \t(early_inline_small_functions): ... this one; simplify\n \tusing new predicates; cleanup; make dumps prettier.\n@@ -290,8 +305,8 @@\n \t(initialize_inline_failed): Move here from cgraph.c.\n \t* tree-sra.c: Include ipa-inline.h.\n \t(ipa_sra_preliminary_function_checks): Update.\n-\t* Makefile.in: (cgraph.o, cgraphbuild.o): Add dependency on\n-\tipa-inline.h\n+\t* Makefile.in (cgraph.o, cgraphbuild.o): Add dependency on\n+\tipa-inline.h.\n \n 2011-04-16  Uros Bizjak  <ubizjak@gmail.com>\n \n@@ -618,7 +633,7 @@\n \t    Eric Weddington  <eric.weddington@atmel.com>\n \t    Georg-Johann Lay <avr@gjlay.de>\n \n-\t* config/avr/avr.c: (\"insn-codes.h\", \"optabs.h\", \"langhooks.h\"):\n+\t* config/avr/avr.c (\"insn-codes.h\", \"optabs.h\", \"langhooks.h\"):\n \tNew Includes\n \t(avr_init_builtins, avr_expand_builtin,\n \tavr_expand_delay_cycles, avr_expand_unop_builtin,\n@@ -3256,7 +3271,7 @@\n \n \t2010-08-13  Vladimir Makarov  <vmakarov@redhat.com>\n \n-\t* ira-build.c: (ira_create_object): Remove initialization of\n+\t* ira-build.c (ira_create_object): Remove initialization of\n \tOBJECT_PROFITABLE_HARD_REGS.  Initialize OBJECT_ADD_DATA.\n \t(ira_create_allocno): Remove initialization of\n \tALLOCNO_MEM_OPTIMIZED_DEST, ALLOCNO_MEM_OPTIMIZED_DEST_P,\n@@ -3382,7 +3397,7 @@\n \tira_object_conflict_iter_cond.\n \t(FOR_EACH_OBJECT_CONFLICT): Don't use ira_object_conflict_iter_next.\n \n-\t* ira-live.c: (process_single_reg_class_operands): Call\n+\t* ira-live.c (process_single_reg_class_operands): Call\n \tira_init_register_move_cost_if_necessary.  Use\n \tira_register_move_cost instead of ira_get_register_move_cost.\n \n@@ -6172,7 +6187,7 @@\n \n 2011-03-14  Andreas Tobler  <andreast@fgznet.ch>\n \n-\t* config/rs6000/freebsd.h: (RELOCATABLE_NEEDS_FIXUP): Define in\n+\t* config/rs6000/freebsd.h (RELOCATABLE_NEEDS_FIXUP): Define in\n \tterms of target_flags_explicit. Adjust copyright year.\n \n \t* config.gcc: Add FreeBSD PowerPC soft-float libgcc bits.\n@@ -10408,7 +10423,7 @@\n \n 2011-01-07  Jan Hubicka  <jh@suse.cz>\n \n-\t* doc/invoke.texi: (-flto, -fuse-linker-plugin): Update defaults\n+\t* doc/invoke.texi (-flto, -fuse-linker-plugin): Update defaults\n \tand no longer claim that gold is required for linker plugin.\n \t* configure: Regenerate.\n \t* gcc.c (PLUGIN_COND): New macro."}, {"sha": "10fc1260b58be35a0fddbc89db7ab04d658a8933", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -1328,22 +1328,6 @@ enum reg_class\n #define SSE_FLOAT_MODE_P(MODE) \\\n   ((TARGET_SSE && (MODE) == SFmode) || (TARGET_SSE2 && (MODE) == DFmode))\n \n-#define SSE_VEC_FLOAT_MODE_P(MODE) \\\n-  ((TARGET_SSE && (MODE) == V4SFmode) || (TARGET_SSE2 && (MODE) == V2DFmode))\n-\n-#define AVX_FLOAT_MODE_P(MODE) \\\n-  (TARGET_AVX && ((MODE) == SFmode || (MODE) == DFmode))\n-\n-#define AVX128_VEC_FLOAT_MODE_P(MODE) \\\n-  (TARGET_AVX && ((MODE) == V4SFmode || (MODE) == V2DFmode))\n-\n-#define AVX256_VEC_FLOAT_MODE_P(MODE) \\\n-  (TARGET_AVX && ((MODE) == V8SFmode || (MODE) == V4DFmode))\n-\n-#define AVX_VEC_FLOAT_MODE_P(MODE) \\\n-  (TARGET_AVX && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n-\t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))\n-\n #define FMA4_VEC_FLOAT_MODE_P(MODE) \\\n   (TARGET_FMA4 && ((MODE) == V4SFmode || (MODE) == V2DFmode \\\n \t\t  || (MODE) == V8SFmode || (MODE) == V4DFmode))"}, {"sha": "0e0ceed4260b4391ec5e5543c8d22f4827abbc9e", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -224,8 +224,6 @@\n   UNSPEC_VPERMIL\n   UNSPEC_VPERMIL2\n   UNSPEC_VPERMIL2F128\n-  UNSPEC_MASKLOAD\n-  UNSPEC_MASKSTORE\n   UNSPEC_CAST\n   UNSPEC_VTESTP\n   UNSPEC_VCVTPH2PS"}, {"sha": "63da5dfe955105f83144098f8de637dab4ba7353", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 30, "deletions": 53, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -6893,23 +6893,12 @@\n    (set_attr \"prefix\" \"orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n-(define_insn \"avx_movmsk<ssemodesuffix>256\"\n+(define_insn \"<sse>_movmsk<ssemodesuffix><avxmodesuffix>\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n-\t  [(match_operand:AVX256MODEF2P 1 \"register_operand\" \"x\")]\n+\t  [(match_operand:VF 1 \"register_operand\" \"x\")]\n \t  UNSPEC_MOVMSK))]\n-  \"AVX256_VEC_FLOAT_MODE_P (<MODE>mode)\"\n-  \"vmovmsk<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"type\" \"ssecvt\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n-\n-(define_insn \"<sse>_movmsk<ssemodesuffix>\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI\n-\t  [(match_operand:SSEMODEF2P 1 \"register_operand\" \"x\")]\n-\t  UNSPEC_MOVMSK))]\n-  \"SSE_VEC_FLOAT_MODE_P (<MODE>mode)\"\n+  \"\"\n   \"%vmovmsk<ssemodesuffix>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"maybe_vex\")\n@@ -6935,35 +6924,18 @@\n   \"TARGET_SSE2\")\n \n (define_insn \"*sse2_maskmovdqu\"\n-  [(set (mem:V16QI (match_operand:SI 0 \"register_operand\" \"D\"))\n-\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"x\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"x\")\n-\t\t       (mem:V16QI (match_dup 0))]\n-\t\t      UNSPEC_MASKMOV))]\n-  \"TARGET_SSE2 && !TARGET_64BIT\"\n-  ;; @@@ check ordering of operands in intel/nonintel syntax\n-  \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   ;; The implicit %rdi operand confuses default length_vex computation.\n-   (set_attr \"length_vex\" \"3\")\n-   (set_attr \"prefix\" \"maybe_vex\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"*sse2_maskmovdqu_rex64\"\n-  [(set (mem:V16QI (match_operand:DI 0 \"register_operand\" \"D\"))\n+  [(set (mem:V16QI (match_operand:P 0 \"register_operand\" \"D\"))\n \t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"x\")\n \t\t       (match_operand:V16QI 2 \"register_operand\" \"x\")\n \t\t       (mem:V16QI (match_dup 0))]\n \t\t      UNSPEC_MASKMOV))]\n-  \"TARGET_SSE2 && TARGET_64BIT\"\n-  ;; @@@ check ordering of operands in intel/nonintel syntax\n+  \"TARGET_SSE2\"\n   \"%vmaskmovdqu\\t{%2, %1|%1, %2}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_data16\" \"1\")\n    ;; The implicit %rdi operand confuses default length_vex computation.\n    (set (attr \"length_vex\")\n-     (symbol_ref (\"REGNO (operands[2]) >= FIRST_REX_SSE_REG ? 3 + 1 : 2 + 1\")))\n+     (symbol_ref (\"3 + REX_SSE_REGNO_P (REGNO (operands[2]))\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set_attr \"mode\" \"TI\")])\n \n@@ -10349,28 +10321,33 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_insn \"avx_maskload<ssemodesuffix><avxmodesuffix>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"register_operand\" \"=x\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:AVXMODEF2P 1 \"memory_operand\" \"m\")\n-\t   (match_operand:<avxpermvecmode> 2 \"register_operand\" \"x\")\n+(define_expand \"avx_maskload<ssemodesuffix><avxmodesuffix>\"\n+  [(set (match_operand:VF 0 \"register_operand\" \"\")\n+\t(unspec:VF\n+\t  [(match_operand:<avxpermvecmode> 2 \"register_operand\" \"\")\n+\t   (match_operand:VF 1 \"memory_operand\" \"\")\n \t   (match_dup 0)]\n-\t  UNSPEC_MASKLOAD))]\n-  \"TARGET_AVX\"\n-  \"vmaskmov<ssemodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n-  [(set_attr \"type\" \"sselog1\")\n-   (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"mode\" \"<MODE>\")])\n+\t  UNSPEC_MASKMOV))]\n+  \"TARGET_AVX\")\n \n-(define_insn \"avx_maskstore<ssemodesuffix><avxmodesuffix>\"\n-  [(set (match_operand:AVXMODEF2P 0 \"memory_operand\" \"=m\")\n-\t(unspec:AVXMODEF2P\n-\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"x\")\n-\t   (match_operand:AVXMODEF2P 2 \"register_operand\" \"x\")\n+(define_expand \"avx_maskstore<ssemodesuffix><avxmodesuffix>\"\n+  [(set (match_operand:VF 0 \"memory_operand\" \"\")\n+\t(unspec:VF\n+\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"\")\n+\t   (match_operand:VF 2 \"register_operand\" \"\")\n \t   (match_dup 0)]\n-\t  UNSPEC_MASKSTORE))]\n-  \"TARGET_AVX\"\n+\t  UNSPEC_MASKMOV))]\n+  \"TARGET_AVX\")\n+\n+(define_insn \"*avx_maskmov<ssemodesuffix><avxmodesuffix>\"\n+  [(set (match_operand:VF 0 \"nonimmediate_operand\" \"=x,m\")\n+\t(unspec:VF\n+\t  [(match_operand:<avxpermvecmode> 1 \"register_operand\" \"x,x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \"m,x\")\n+\t   (match_dup 0)]\n+\t  UNSPEC_MASKMOV))]\n+  \"TARGET_AVX\n+   && (REG_P (operands[0]) == MEM_P (operands[2]))\"\n   \"vmaskmov<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n    (set_attr \"prefix_extra\" \"1\")"}, {"sha": "5295ec5809f72a70dd8b695a7493608832575244", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -1,3 +1,8 @@\n+2011-04-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* gcc.target/i386/sse2-maskmovdqu.c: New test.\n+\t* gcc.target/i386/avx-vmaskmovdqu.c: Ditto.\n+\n 2011-04-18  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/18918"}, {"sha": "24b5bba77d5a1d230eeafb318c9ae836bf0c7f3c", "filename": "gcc/testsuite/gcc.target/i386/avx-vmaskmovdqu.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovdqu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovdqu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vmaskmovdqu.c?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse2-maskmovdqu.c\""}, {"sha": "b401c85b3bb0a4de58f383d618369be7fd3e8459", "filename": "gcc/testsuite/gcc.target/i386/sse2-maskmovdqu.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-maskmovdqu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f60c25544c92d51515d6eb005a74498547612908/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-maskmovdqu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-maskmovdqu.c?ref=f60c25544c92d51515d6eb005a74498547612908", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse2 } */\n+/* { dg-options \"-O2 -msse2\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse2-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse2_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <emmintrin.h>\n+\n+#ifndef MASK\n+#define MASK 0x7986\n+#endif\n+\n+#define mask_v(pos) (((MASK & (0x1 << (pos))) >> (pos)) << 7)\n+\n+void static\n+TEST (void)\n+{\n+  __m128i src, mask;\n+  char s[16] = { 1,-2,3,-4,5,-6,7,-8,9,-10,11,-12,13,-14,15,-16 };\n+  char m[16];\n+\n+  char u[20] = { 0 };\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    m[i] = mask_v (i);\n+\n+  src = _mm_loadu_si128 ((__m128i *)s);\n+  mask = _mm_loadu_si128 ((__m128i *)m);\n+\n+  _mm_maskmoveu_si128 (src, mask, u+3);\n+\n+  for (i = 0; i < 16; i++)\n+    if (u[i+3] != (m[i] ? s[i] : 0))\n+      abort ();\n+}"}]}