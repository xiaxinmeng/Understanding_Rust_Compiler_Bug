{"sha": "18a94a2f75417b44551c1e0e02865a9d7632e564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThhOTRhMmY3NTQxN2I0NDU1MWMxZTBlMDI4NjVhOWQ3NjMyZTU2NA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-24T07:29:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-24T07:29:11Z"}, "message": "hashtab.h (hash_pointer): Declare.\n\n\t* hashtab.h (hash_pointer): Declare.\n\t(eq_pointer): Likewise.\n\n\t* hashtab.c (hash_pointer): New function.\n\t(eq_pointer): Likewise.\n\t(htab_hash_pointer): New variable.\n\t(htab_eq_pointer): Likewise.\n\nFrom-SVN: r33372", "tree": {"sha": "488af2866d01b416ccf20f74818935ec34822045", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/488af2866d01b416ccf20f74818935ec34822045"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18a94a2f75417b44551c1e0e02865a9d7632e564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a94a2f75417b44551c1e0e02865a9d7632e564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18a94a2f75417b44551c1e0e02865a9d7632e564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18a94a2f75417b44551c1e0e02865a9d7632e564/comments", "author": null, "committer": null, "parents": [{"sha": "7d78e330d1169ef4bf7a47a67c73001b9d0fac6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d78e330d1169ef4bf7a47a67c73001b9d0fac6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d78e330d1169ef4bf7a47a67c73001b9d0fac6c"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "f17e65d42a33ad0e23a6caa3e694d125c5069859", "filename": "include/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a94a2f75417b44551c1e0e02865a9d7632e564/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a94a2f75417b44551c1e0e02865a9d7632e564/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=18a94a2f75417b44551c1e0e02865a9d7632e564", "patch": "@@ -1,3 +1,8 @@\n+2000-04-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* hashtab.h (hash_pointer): Declare.\n+\t(eq_pointer): Likewise.\n+\n 2000-04-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* sort.h: New file."}, {"sha": "12f830ca5ec5286960057f9b889bf1cb25bf5f6c", "filename": "include/hashtab.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a94a2f75417b44551c1e0e02865a9d7632e564/include%2Fhashtab.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a94a2f75417b44551c1e0e02865a9d7632e564/include%2Fhashtab.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fhashtab.h?ref=18a94a2f75417b44551c1e0e02865a9d7632e564", "patch": "@@ -129,6 +129,12 @@ extern size_t\thtab_size\tPARAMS ((htab_t));\n extern size_t\thtab_elements\tPARAMS ((htab_t));\n extern double\thtab_collisions\tPARAMS ((htab_t));\n \n+/* A hash function for pointers.  */\n+extern htab_hash htab_hash_pointer;\n+\n+/* An equality function for pointers.  */\n+extern htab_eq htab_eq_pointer;\n+\n #ifdef __cplusplus\n }\n #endif /* __cplusplus */"}, {"sha": "25215d3ba9d2f6ceed170f7b0931e8c08f75eafb", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a94a2f75417b44551c1e0e02865a9d7632e564/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a94a2f75417b44551c1e0e02865a9d7632e564/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=18a94a2f75417b44551c1e0e02865a9d7632e564", "patch": "@@ -1,3 +1,10 @@\n+2000-04-24  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* hashtab.c (hash_pointer): New function.\n+\t(eq_pointer): Likewise.\n+\t(htab_hash_pointer): New variable.\n+\t(htab_eq_pointer): Likewise.\n+\n 2000-04-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* sort.c (sort_pointers): Fix endianness bugs."}, {"sha": "9cde177034904366f70aa3756e14b58897ec53fb", "filename": "libiberty/hashtab.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18a94a2f75417b44551c1e0e02865a9d7632e564/libiberty%2Fhashtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18a94a2f75417b44551c1e0e02865a9d7632e564/libiberty%2Fhashtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fhashtab.c?ref=18a94a2f75417b44551c1e0e02865a9d7632e564", "patch": "@@ -56,6 +56,14 @@ Boston, MA 02111-1307, USA.  */\n #define DELETED_ENTRY  ((void *) 1)\n \n static unsigned long higher_prime_number PARAMS ((unsigned long));\n+static hashval_t hash_pointer PARAMS ((const void *));\n+static int eq_pointer PARAMS ((const void *, const void *));\n+\n+/* At some point, we could make these be NULL, and modify the\n+   hash-table routines to handle NULL specially; that would avoid\n+   function-call overhead for the common case of hashing pointers.  */\n+htab_hash htab_hash_pointer = hash_pointer;\n+htab_eq htab_eq_pointer = eq_pointer;\n \n /* The following function returns the nearest prime number which is\n    greater than a given source number, N. */\n@@ -88,6 +96,25 @@ higher_prime_number (n)\n   return n;\n }\n \n+/* Returns a hash code for P.  */\n+\n+hashval_t\n+hash_pointer (p)\n+     const void *p;\n+{\n+  return (hashval_t) p;\n+}\n+\n+/* Returns non-zero if P1 and P2 are equal.  */\n+\n+int\n+eq_pointer (p1, p2)\n+     const void *p1;\n+     const void *p2;\n+{\n+  return p1 == p2;\n+}\n+\n /* This function creates table with length slightly longer than given\n    source length.  Created hash table is initiated as empty (all the\n    hash table entries are EMPTY_ENTRY).  The function returns the"}]}