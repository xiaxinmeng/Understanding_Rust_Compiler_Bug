{"sha": "c386239f4dc9ba15abed10f87d5e775ca509a1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM4NjIzOWY0ZGM5YmExNWFiZWQxMGY4N2Q1ZTc3NWNhNTA5YTFiYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:10:18Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T12:10:18Z"}, "message": "[multiple changes]\n\n2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Find_Actual): The routine is\n\tnow capable of operating on entry calls.\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb: Remove redundant check.\n\nFrom-SVN: r229059", "tree": {"sha": "b41f04c43fd193e94aaf3f9e91bd866985b5b2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b41f04c43fd193e94aaf3f9e91bd866985b5b2ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c386239f4dc9ba15abed10f87d5e775ca509a1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c386239f4dc9ba15abed10f87d5e775ca509a1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c386239f4dc9ba15abed10f87d5e775ca509a1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c386239f4dc9ba15abed10f87d5e775ca509a1bb/comments", "author": null, "committer": null, "parents": [{"sha": "c96c518f9de243e868f8f18c00819cae87fcdd2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c96c518f9de243e868f8f18c00819cae87fcdd2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c96c518f9de243e868f8f18c00819cae87fcdd2c"}], "stats": {"total": 109, "additions": 68, "deletions": 41}, "files": [{"sha": "e6c099a997b4d495cc63df584f2cc0e714460d36", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c386239f4dc9ba15abed10f87d5e775ca509a1bb", "patch": "@@ -1,3 +1,12 @@\n+2015-10-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Find_Actual): The routine is\n+\tnow capable of operating on entry calls.\n+\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb: Remove redundant check.\n+\n 2015-10-20  Jerome Lambourg  <lambourg@adacore.com>\n \n \t* init.c (__gnat_vxsim_error_handler): Completely disable on"}, {"sha": "479b5c50e0375fe86a73e3360358e0503a9a14f0", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=c386239f4dc9ba15abed10f87d5e775ca509a1bb", "patch": "@@ -9877,10 +9877,11 @@ package body Sem_Res is\n          T := Etype (P);\n       end if;\n \n-      --  Set flag for expander if discriminant check required\n+      --  Set flag for expander if discriminant check required on a component\n+      --  appearing within a variant.\n \n       if Has_Discriminants (T)\n-        and then Ekind_In (Entity (S), E_Component, E_Discriminant)\n+        and then Ekind (Entity (S)) =  E_Component\n         and then Present (Original_Record_Component (Entity (S)))\n         and then Ekind (Original_Record_Component (Entity (S))) = E_Component\n         and then"}, {"sha": "8f93bcdb32edc8396a8813cb19d2f0ce5bac0488", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 56, "deletions": 39, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c386239f4dc9ba15abed10f87d5e775ca509a1bb/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=c386239f4dc9ba15abed10f87d5e775ca509a1bb", "patch": "@@ -6557,23 +6557,27 @@ package body Sem_Util is\n       Formal   : out Entity_Id;\n       Call     : out Node_Id)\n    is\n-      Parnt  : constant Node_Id := Parent (N);\n-      Actual : Node_Id;\n+      Context  : constant Node_Id := Parent (N);\n+      Actual   : Node_Id;\n+      Call_Nam : Node_Id;\n \n    begin\n-      if Nkind_In (Parnt, N_Indexed_Component, N_Selected_Component)\n-        and then N = Prefix (Parnt)\n+      if Nkind_In (Context, N_Indexed_Component, N_Selected_Component)\n+        and then N = Prefix (Context)\n       then\n-         Find_Actual (Parnt, Formal, Call);\n+         Find_Actual (Context, Formal, Call);\n          return;\n \n-      elsif Nkind (Parnt) = N_Parameter_Association\n-        and then N = Explicit_Actual_Parameter (Parnt)\n+      elsif Nkind (Context) = N_Parameter_Association\n+        and then N = Explicit_Actual_Parameter (Context)\n       then\n-         Call := Parent (Parnt);\n+         Call := Parent (Context);\n \n-      elsif Nkind (Parnt) in N_Subprogram_Call then\n-         Call := Parnt;\n+      elsif Nkind_In (Context, N_Entry_Call_Statement,\n+                               N_Function_Call,\n+                               N_Procedure_Call_Statement)\n+      then\n+         Call := Context;\n \n       else\n          Formal := Empty;\n@@ -6585,44 +6589,57 @@ package body Sem_Util is\n       --  we exclude overloaded calls, since we don't know enough to be sure\n       --  of giving the right answer in this case.\n \n-      if Nkind_In (Call, N_Function_Call, N_Procedure_Call_Statement)\n-        and then Is_Entity_Name (Name (Call))\n-        and then Present (Entity (Name (Call)))\n-        and then Is_Overloadable (Entity (Name (Call)))\n-        and then not Is_Overloaded (Name (Call))\n+      if Nkind_In (Call, N_Entry_Call_Statement,\n+                         N_Function_Call,\n+                         N_Procedure_Call_Statement)\n       then\n-         --  If node is name in call it is not an actual\n+         Call_Nam := Name (Call);\n \n-         if N = Name (Call) then\n-            Call := Empty;\n-            Formal := Empty;\n-            return;\n+         --  A call to a protected or task entry appears as a selected\n+         --  component rather than an expanded name.\n+\n+         if Nkind (Call_Nam) = N_Selected_Component then\n+            Call_Nam := Selector_Name (Call_Nam);\n          end if;\n \n-         --  Fall here if we are definitely a parameter\n+         if Is_Entity_Name (Call_Nam)\n+           and then Present (Entity (Call_Nam))\n+           and then Is_Overloadable (Entity (Call_Nam))\n+           and then not Is_Overloaded (Call_Nam)\n+         then\n+            --  If node is name in call it is not an actual\n \n-         Actual := First_Actual (Call);\n-         Formal := First_Formal (Entity (Name (Call)));\n-         while Present (Formal) and then Present (Actual) loop\n-            if Actual = N then\n+            if N = Call_Nam then\n+               Formal := Empty;\n+               Call   := Empty;\n                return;\n+            end if;\n \n-            --  An actual that is the prefix in a prefixed call may have\n-            --  been rewritten in the call, after the deferred reference\n-            --  was collected. Check if sloc and kinds and names match.\n+            --  Fall here if we are definitely a parameter\n \n-            elsif Sloc (Actual) = Sloc (N)\n-              and then Nkind (Actual) = N_Identifier\n-              and then Nkind (Actual) = Nkind (N)\n-              and then Chars (Actual) = Chars (N)\n-            then\n-               return;\n+            Actual := First_Actual (Call);\n+            Formal := First_Formal (Entity (Call_Nam));\n+            while Present (Formal) and then Present (Actual) loop\n+               if Actual = N then\n+                  return;\n \n-            else\n-               Actual := Next_Actual (Actual);\n-               Formal := Next_Formal (Formal);\n-            end if;\n-         end loop;\n+               --  An actual that is the prefix in a prefixed call may have\n+               --  been rewritten in the call, after the deferred reference\n+               --  was collected. Check if sloc and kinds and names match.\n+\n+               elsif Sloc (Actual) = Sloc (N)\n+                 and then Nkind (Actual) = N_Identifier\n+                 and then Nkind (Actual) = Nkind (N)\n+                 and then Chars (Actual) = Chars (N)\n+               then\n+                  return;\n+\n+               else\n+                  Actual := Next_Actual (Actual);\n+                  Formal := Next_Formal (Formal);\n+               end if;\n+            end loop;\n+         end if;\n       end if;\n \n       --  Fall through here if we did not find matching actual"}]}