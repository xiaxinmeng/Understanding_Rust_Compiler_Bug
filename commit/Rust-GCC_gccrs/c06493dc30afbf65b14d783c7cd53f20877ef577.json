{"sha": "c06493dc30afbf65b14d783c7cd53f20877ef577", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzA2NDkzZGMzMGFmYmY2NWIxNGQ3ODNjN2NkNTNmMjA4NzdlZjU3Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-24T15:29:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-06-24T15:29:02Z"}, "message": "c++: requires-expression folding [PR101182]\n\nHere we're crashing because cp_fold_function walks into the (templated)\nrequirements of a requires-expression outside a template, but the\nfolding routines aren't prepared to handle templated trees.  This patch\nfixes this by making cp_fold use evaluate_requires_expr to fold a\nrequires-expression as a whole, which also means we no longer need to\nexplicitly do so during gimplification.  (Note that we delay folding\nof such requires-expressions for sake of better diagnostics when one is\nused as the condition of a failed static_assert.)\n\n\tPR c++/101182\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (evaluate_requires_expr): Adjust function comment.\n\t* cp-gimplify.c (cp_genericize_r) <case REQUIRES_EXPR>: Move to ...\n\t(cp_fold) <case REQUIRES_EXPR>: ... here.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-requires25.C: New test.", "tree": {"sha": "17b3570f8df2167fd37f638c0c66d9f190c1653e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17b3570f8df2167fd37f638c0c66d9f190c1653e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c06493dc30afbf65b14d783c7cd53f20877ef577", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06493dc30afbf65b14d783c7cd53f20877ef577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06493dc30afbf65b14d783c7cd53f20877ef577", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06493dc30afbf65b14d783c7cd53f20877ef577/comments", "author": null, "committer": null, "parents": [{"sha": "178fb8df9315f2f8f45b7fe5faf11a9c2912cc28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/178fb8df9315f2f8f45b7fe5faf11a9c2912cc28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/178fb8df9315f2f8f45b7fe5faf11a9c2912cc28"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "286332ba2a7cf56de3133997cd1310dd3f939004", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=c06493dc30afbf65b14d783c7cd53f20877ef577", "patch": "@@ -3340,7 +3340,7 @@ evaluate_concept_check (tree check)\n }\n \n /* Evaluate the requires-expression T, returning either boolean_true_node\n-   or boolean_false_node.  This is used during gimplification and constexpr\n+   or boolean_false_node.  This is used during folding and constexpr\n    evaluation.  */\n \n tree"}, {"sha": "33e10556e3263054c2cec6b7e1127e6efca0402c", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=c06493dc30afbf65b14d783c7cd53f20877ef577", "patch": "@@ -1465,12 +1465,6 @@ cp_genericize_r (tree *stmt_p, int *walk_subtrees, void *data)\n \tTARGET_EXPR_NO_ELIDE (stmt) = 1;\n       break;\n \n-    case REQUIRES_EXPR:\n-      /* Emit the value of the requires-expression.  */\n-      *stmt_p = evaluate_requires_expr (stmt);\n-      *walk_subtrees = 0;\n-      break;\n-\n     case TEMPLATE_ID_EXPR:\n       gcc_assert (concept_check_p (stmt));\n       /* Emit the value of the concept check.  */\n@@ -2708,6 +2702,10 @@ cp_fold (tree x)\n \tx = r;\n       break;\n \n+    case REQUIRES_EXPR:\n+      x = evaluate_requires_expr (x);\n+      break;\n+\n     default:\n       return org_x;\n     }"}, {"sha": "90cbedb51d41db4b78ed4c14a6f05df384d2c9bf", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-requires25.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c06493dc30afbf65b14d783c7cd53f20877ef577/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-requires25.C?ref=c06493dc30afbf65b14d783c7cd53f20877ef577", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/101182\n+// { dg-do compile { target concepts } }\n+\n+int a;\n+void g(bool);\n+\n+bool f() {\n+  g(requires { a++; });\n+  return requires { a++; };\n+}"}]}