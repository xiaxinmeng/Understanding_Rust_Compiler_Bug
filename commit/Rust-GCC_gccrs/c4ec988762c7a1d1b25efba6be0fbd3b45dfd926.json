{"sha": "c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlYzk4ODc2MmM3YTFkMWIyNWVmYmE2YmUwZmJkM2I0NWRmZDkyNg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-06-30T01:24:53Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-06-30T01:24:53Z"}, "message": "decl.c (struct named_label_entry): Change type of bad_decls field to a VEC.\n\n\t* decl.c (struct named_label_entry): Change type of bad_decls field\n\tto a VEC.\n\t(poplevel_named_label_1): Adjust for new type of bad_decls.\n\t(check_goto): Likewise.\n\nFrom-SVN: r161583", "tree": {"sha": "077f4ae1da8623043bc11d8288b91179b402d857", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/077f4ae1da8623043bc11d8288b91179b402d857"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926/comments", "author": null, "committer": null, "parents": [{"sha": "d758e847c4ce6eda350809463cd87307c7e9c19c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d758e847c4ce6eda350809463cd87307c7e9c19c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d758e847c4ce6eda350809463cd87307c7e9c19c"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "27ab92fe267b9d7ef99df1b7abeb41177244f136", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "patch": "@@ -1,3 +1,10 @@\n+2010-06-29  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* decl.c (struct named_label_entry): Change type of bad_decls field\n+\tto a VEC.\n+\t(poplevel_named_label_1): Adjust for new type of bad_decls.\n+\t(check_goto): Likewise.\n+\n 2010-06-29  Jason Merrill  <jason@redhat.com>\n \n \tEnable implicitly declared move constructor/operator= (N3053)."}, {"sha": "47d64ca3a5399e9654e49a74f42ff44c552474d3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4ec988762c7a1d1b25efba6be0fbd3b45dfd926/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c4ec988762c7a1d1b25efba6be0fbd3b45dfd926", "patch": "@@ -211,9 +211,9 @@ struct GTY(()) named_label_entry {\n      defined, or the inner scope popped.  These are the decls that will\n      be skipped when jumping to the label.  */\n   tree names_in_scope;\n-  /* A tree list of all decls from all binding levels that would be\n+  /* A vector of all decls from all binding levels that would be\n      crossed by a backward branch to the label.  */\n-  tree bad_decls;\n+  VEC(tree,gc) *bad_decls;\n \n   /* A list of uses of the label, before the label is defined.  */\n   struct named_label_use_entry *uses;\n@@ -470,7 +470,7 @@ poplevel_named_label_1 (void **slot, void *data)\n \n       for (decl = ent->names_in_scope; decl; decl = TREE_CHAIN (decl))\n \tif (decl_jump_unsafe (decl))\n-\t  ent->bad_decls = tree_cons (NULL, decl, ent->bad_decls);\n+\t  VEC_safe_push (tree, gc, ent->bad_decls, decl);\n \n       ent->binding_level = obl;\n       ent->names_in_scope = obl->names;\n@@ -2651,6 +2651,7 @@ check_goto (tree decl)\n   struct named_label_entry *ent, dummy;\n   bool saw_catch = false, identified = false;\n   tree bad;\n+  unsigned ix;\n \n   /* We can't know where a computed goto is jumping.\n      So we assume that it's OK.  */\n@@ -2689,29 +2690,28 @@ check_goto (tree decl)\n     }\n \n   if (ent->in_try_scope || ent->in_catch_scope\n-      || ent->in_omp_scope || ent->bad_decls)\n+      || ent->in_omp_scope || !VEC_empty (tree, ent->bad_decls))\n     {\n       permerror (input_location, \"jump to label %q+D\", decl);\n       permerror (input_location, \"  from here\");\n       identified = true;\n     }\n \n-  for (bad = ent->bad_decls; bad; bad = TREE_CHAIN (bad))\n+  for (ix = 0; VEC_iterate (tree, ent->bad_decls, ix, bad); ix++)\n     {\n-      tree b = TREE_VALUE (bad);\n-      int u = decl_jump_unsafe (b);\n+      int u = decl_jump_unsafe (bad);\n \n-      if (u > 1 && DECL_ARTIFICIAL (b))\n+      if (u > 1 && DECL_ARTIFICIAL (bad))\n \t{\n \t  /* Can't skip init of __exception_info.  */\n-\t  error_at (DECL_SOURCE_LOCATION (b), \"  enters catch block\");\n+\t  error_at (DECL_SOURCE_LOCATION (bad), \"  enters catch block\");\n \t  saw_catch = true;\n \t}\n       else if (u > 1)\n-\terror (\"  skips initialization of %q+#D\", b);\n+\terror (\"  skips initialization of %q+#D\", bad);\n       else\n \tpermerror (input_location, \"  enters scope of %q+#D which has \"\n-\t\t   \"non-trivial destructor\", b);\n+\t\t   \"non-trivial destructor\", bad);\n     }\n \n   if (ent->in_try_scope)"}]}