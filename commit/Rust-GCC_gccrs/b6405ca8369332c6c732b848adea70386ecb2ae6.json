{"sha": "b6405ca8369332c6c732b848adea70386ecb2ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY0MDVjYTgzNjkzMzJjNmM3MzJiODQ4YWRlYTcwMzg2ZWNiMmFlNg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2012-11-21T22:10:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-11-21T22:10:01Z"}, "message": "alpha: Update to new extv/insv patterns\n\n        * config/alpha/alpha.md (extvmisaligndi): Rename from extv; update\n        mode of operand 1; remove ancient extract_bit_field workaround.\n        (insvmisaligndi): Rename from insv and update similarly.\n        (extzvmisaligndi): Rename from extzv and update similarly; split out...\n        (extzvdi): New expander.\n\nFrom-SVN: r193710", "tree": {"sha": "e802260db236ac45a1cd12c26a4f32ff0aa247df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e802260db236ac45a1cd12c26a4f32ff0aa247df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6405ca8369332c6c732b848adea70386ecb2ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6405ca8369332c6c732b848adea70386ecb2ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6405ca8369332c6c732b848adea70386ecb2ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6405ca8369332c6c732b848adea70386ecb2ae6/comments", "author": null, "committer": null, "parents": [{"sha": "3196203294917e60746461b8146cfeb00d5c0a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3196203294917e60746461b8146cfeb00d5c0a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3196203294917e60746461b8146cfeb00d5c0a5b"}], "stats": {"total": 93, "additions": 43, "deletions": 50}, "files": [{"sha": "fc4e5bc3538196b0f48a88fa163957f82ecc8d59", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6405ca8369332c6c732b848adea70386ecb2ae6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6405ca8369332c6c732b848adea70386ecb2ae6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b6405ca8369332c6c732b848adea70386ecb2ae6", "patch": "@@ -1,3 +1,11 @@\n+2012-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/alpha/alpha.md (extvmisaligndi): Rename from extv; update\n+\tmode of operand 1; remove ancient extract_bit_field workaround.\n+\t(insvmisaligndi): Rename from insv and update similarly.\n+\t(extzvmisaligndi): Rename from extzv and update similarly; split out...\n+\t(extzvdi): New expander.\n+\n 2012-11-21  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* doc/cpp.texi: Document __SANITIZE_ADDRESS__."}, {"sha": "97bd25866f7ccf2d87b7c35f48cbc8db399a5f09", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6405ca8369332c6c732b848adea70386ecb2ae6/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6405ca8369332c6c732b848adea70386ecb2ae6/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=b6405ca8369332c6c732b848adea70386ecb2ae6", "patch": "@@ -4636,95 +4636,80 @@\n \f\n ;; Bit field extract patterns which use ext[wlq][lh]\n \n-(define_expand \"extv\"\n+(define_expand \"extvmisaligndi\"\n   [(set (match_operand:DI 0 \"register_operand\")\n-\t(sign_extract:DI (match_operand:QI 1 \"memory_operand\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\")\n-\t\t\t (match_operand:DI 3 \"immediate_operand\")))]\n+\t(sign_extract:DI (match_operand:BLK 1 \"memory_operand\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\")\n+\t\t\t (match_operand:DI 3 \"const_int_operand\")))]\n   \"\"\n {\n-  int ofs;\n-\n   /* We can do 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n   if (INTVAL (operands[3]) % 8 != 0\n       || (INTVAL (operands[2]) != 16\n \t  && INTVAL (operands[2]) != 32\n \t  && INTVAL (operands[2]) != 64))\n     FAIL;\n \n-  /* From mips.md: extract_bit_field doesn't verify that our source\n-     matches the predicate, so we force it to be a MEM here.  */\n-  if (!MEM_P (operands[1]))\n-    FAIL;\n-\n-  ofs = INTVAL (operands[3]);\n-  ofs = ofs / 8;\n-\n   alpha_expand_unaligned_load (operands[0], operands[1],\n \t\t\t       INTVAL (operands[2]) / 8,\n-\t\t\t       ofs, 1);\n+\t\t\t       INTVAL (operands[3]) / 8, 1);\n   DONE;\n })\n \n-(define_expand \"extzv\"\n+(define_expand \"extzvdi\"\n   [(set (match_operand:DI 0 \"register_operand\")\n-\t(zero_extract:DI (match_operand:DI 1 \"nonimmediate_operand\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\")\n-\t\t\t (match_operand:DI 3 \"immediate_operand\")))]\n+\t(zero_extract:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\")\n+\t\t\t (match_operand:DI 3 \"const_int_operand\")))]\n   \"\"\n {\n   /* We can do 8, 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n   if (INTVAL (operands[3]) % 8 != 0\n       || (INTVAL (operands[2]) != 8\n-\t  && INTVAL (operands[2]) != 16\n+          && INTVAL (operands[2]) != 16\n \t  && INTVAL (operands[2]) != 32\n \t  && INTVAL (operands[2]) != 64))\n     FAIL;\n+})\n \n-  if (MEM_P (operands[1]))\n-    {\n-      int ofs;\n-\n-      /* Fail 8-bit fields, falling back on a simple byte load.  */\n-      if (INTVAL (operands[2]) == 8)\n-\tFAIL;\n-\n-      ofs = INTVAL (operands[3]);\n-      ofs = ofs / 8;\n+(define_expand \"extzvmisaligndi\"\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extract:DI (match_operand:BLK 1 \"memory_operand\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\")\n+\t\t\t (match_operand:DI 3 \"const_int_operand\")))]\n+  \"\"\n+{\n+  /* We can do 16, 32 and 64 bit fields, if aligned on byte boundaries.\n+     We fail 8-bit fields, falling back on a simple byte load.  */\n+  if (INTVAL (operands[3]) % 8 != 0\n+      || (INTVAL (operands[2]) != 16\n+\t  && INTVAL (operands[2]) != 32\n+\t  && INTVAL (operands[2]) != 64))\n+    FAIL;\n \n-      alpha_expand_unaligned_load (operands[0], operands[1],\n-\t\t\t           INTVAL (operands[2]) / 8,\n-\t\t\t\t   ofs, 0);\n-      DONE;\n-    }\n+  alpha_expand_unaligned_load (operands[0], operands[1],\n+\t\t\t       INTVAL (operands[2]) / 8,\n+\t\t\t       INTVAL (operands[3]) / 8, 0);\n+  DONE;\n })\n \n-(define_expand \"insv\"\n-  [(set (zero_extract:DI (match_operand:QI 0 \"memory_operand\")\n-\t\t\t (match_operand:DI 1 \"immediate_operand\")\n-\t\t\t (match_operand:DI 2 \"immediate_operand\"))\n+(define_expand \"insvmisaligndi\"\n+  [(set (zero_extract:DI (match_operand:BLK 0 \"memory_operand\")\n+\t\t\t (match_operand:DI 1 \"const_int_operand\")\n+\t\t\t (match_operand:DI 2 \"const_int_operand\"))\n \t(match_operand:DI 3 \"register_operand\"))]\n   \"\"\n {\n-  int ofs;\n-\n   /* We can do 16, 32 and 64 bit fields, if aligned on byte boundaries.  */\n   if (INTVAL (operands[2]) % 8 != 0\n       || (INTVAL (operands[1]) != 16\n \t  && INTVAL (operands[1]) != 32\n \t  && INTVAL (operands[1]) != 64))\n     FAIL;\n \n-  /* From mips.md: store_bit_field doesn't verify that our source\n-     matches the predicate, so we force it to be a MEM here.  */\n-  if (!MEM_P (operands[0]))\n-    FAIL;\n-\n-  ofs = INTVAL (operands[2]);\n-  ofs = ofs / 8;\n-\n   alpha_expand_unaligned_store (operands[0], operands[3],\n-\t\t\t        INTVAL (operands[1]) / 8, ofs);\n+\t\t\t\tINTVAL (operands[1]) / 8,\n+\t\t\t\tINTVAL (operands[2]) / 8);\n   DONE;\n })\n "}]}