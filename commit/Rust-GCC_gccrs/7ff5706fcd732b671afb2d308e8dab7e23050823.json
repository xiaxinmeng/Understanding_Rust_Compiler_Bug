{"sha": "7ff5706fcd732b671afb2d308e8dab7e23050823", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2ZmNTcwNmZjZDczMmI2NzFhZmIyZDMwOGU4ZGFiN2UyMzA1MDgyMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-18T16:33:43Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-18T16:33:43Z"}, "message": "aarch64: Extend aarch64-autovec-preference==2 to 128-bit SVE\n\nWhen compiling with -msve-vector-bits=128, aarch64_preferred_simd_mode\nwould pass the same vector width to aarch64_simd_container_mode for\nboth SVE and Advanced SIMD, and so Advanced SIMD would always \u201cwin\u201d.\nThis patch instead makes it choose directly between SVE and Advanced\nSIMD modes, so that aarch64-autovec-preference==2 and\naarch64-autovec-preference==4 work for this configuration.\n\n(aarch64-autovec-preference shouldn't affect aarch64_simd_container_mode\nbecause that would have an ABI impact for things like GNU vectors.)\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_preferred_simd_mode): Use\n\taarch64_full_sve_mode and aarch64_vq_mode directly, instead of\n\tgoing via aarch64_simd_container_mode.", "tree": {"sha": "c5aa1c9925a4f035141da8066ddb32b813ad6285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5aa1c9925a4f035141da8066ddb32b813ad6285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ff5706fcd732b671afb2d308e8dab7e23050823", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff5706fcd732b671afb2d308e8dab7e23050823", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ff5706fcd732b671afb2d308e8dab7e23050823", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ff5706fcd732b671afb2d308e8dab7e23050823/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcac28716bbb74392a95d769f593a6b48b3330b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcac28716bbb74392a95d769f593a6b48b3330b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcac28716bbb74392a95d769f593a6b48b3330b1"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "70ddd70556fab93e08166bb55135517e6d65ccc0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ff5706fcd732b671afb2d308e8dab7e23050823/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ff5706fcd732b671afb2d308e8dab7e23050823/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=7ff5706fcd732b671afb2d308e8dab7e23050823", "patch": "@@ -17421,10 +17421,11 @@ aarch64_preferred_simd_mode (scalar_mode mode)\n {\n   /* Take into account explicit auto-vectorization ISA preferences through\n      aarch64_cmp_autovec_modes.  */\n-  poly_int64 bits\n-    = (TARGET_SVE && aarch64_cmp_autovec_modes (VNx16QImode, V16QImode))\n-       ? BITS_PER_SVE_VECTOR : 128;\n-  return aarch64_simd_container_mode (mode, bits);\n+  if (TARGET_SVE && aarch64_cmp_autovec_modes (VNx16QImode, V16QImode))\n+    return aarch64_full_sve_mode (mode).else_mode (word_mode);\n+  if (TARGET_SIMD)\n+    return aarch64_vq_mode (mode).else_mode (word_mode);\n+  return word_mode;\n }\n \n /* Return a list of possible vector sizes for the vectorizer"}]}