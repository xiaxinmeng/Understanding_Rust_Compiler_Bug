{"sha": "2a1d634643cc622fa6c03c3ade04a8994af692cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmExZDYzNDY0M2NjNjIyZmE2YzAzYzNhZGUwNGE4OTk0YWY2OTJjZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-29T19:02:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-29T19:02:31Z"}, "message": "cstdint: New.\n\n2006-01-29  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cstdint: New.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cstdint/types: New.\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <stdint.h> checks.\n\t* docs/html/ext/tr1.html: Update.\n\t* include/Makefile.in: Regenerate.\n\t* config.h.in: Likewise.\n\t* configure: Likewise.\n\n\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Cosmetic tweak.\n\nFrom-SVN: r110378", "tree": {"sha": "f6074c09a64bb192b0074d4a8deffecb3aba629d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6074c09a64bb192b0074d4a8deffecb3aba629d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a1d634643cc622fa6c03c3ade04a8994af692cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1d634643cc622fa6c03c3ade04a8994af692cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a1d634643cc622fa6c03c3ade04a8994af692cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a1d634643cc622fa6c03c3ade04a8994af692cd/comments", "author": null, "committer": null, "parents": [{"sha": "b31305861ad77328af5fde14aae0a970e8cebb1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b31305861ad77328af5fde14aae0a970e8cebb1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b31305861ad77328af5fde14aae0a970e8cebb1b"}], "stats": {"total": 318, "additions": 313, "deletions": 5}, "files": [{"sha": "498fd16c7da12b7da0d30a94f4b3503ce11e1d3f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -1,3 +1,16 @@\n+2006-01-29  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cstdint: New.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cstdint/types: New.\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): Add <stdint.h> checks.\n+\t* docs/html/ext/tr1.html: Update.\n+\t* include/Makefile.in: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* configure: Likewise.\n+\n+\t* testsuite/tr1/8_c_compatibility/cfenv/types.cc: Cosmetic tweak.\n+\n 2006-01-29  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/26006"}, {"sha": "d76dcebbeb299e2529f29578060428fd53b56877", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -1140,6 +1140,47 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t      <tr1/cfenv> in namespace std::tr1.])\n   fi\n \n+  # Check for the existence of <stdint.h> types.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <stdint.h>])\n+  AC_CACHE_VAL(ac_c99_stdint_tr1, [\n+  AC_TRY_COMPILE([#include <stdint.h>],\n+\t         [typedef int8_t          my_int8_t;\n+\t          typedef int16_t         my_int16_t;\n+\t          typedef int32_t         my_int32_t;\n+\t          typedef int64_t         my_int64_t;\n+\t          typedef int_fast8_t     my_int_fast8_t;\n+\t          typedef int_fast16_t    my_int_fast16_t;\n+\t          typedef int_fast32_t    my_int_fast32_t;\n+\t          typedef int_fast64_t    my_int_fast64_t;\t\n+\t          typedef int_least8_t    my_int_least8_t;\n+\t          typedef int_least16_t   my_int_least16_t;\n+\t          typedef int_least32_t   my_int_least32_t;\n+\t          typedef int_least64_t   my_int_least64_t;\n+\t\t  typedef intmax_t        my_intmax_t;\n+\t\t  typedef intptr_t        my_intptr_t;\n+\t          typedef uint8_t         my_uint8_t;\n+\t          typedef uint16_t        my_uint16_t;\n+\t          typedef uint32_t        my_uint32_t;\n+\t          typedef uint64_t        my_uint64_t;\n+\t          typedef uint_fast8_t    my_uint_fast8_t;\n+\t          typedef uint_fast16_t   my_uint_fast16_t;\n+\t          typedef uint_fast32_t   my_uint_fast32_t;\n+\t          typedef uint_fast64_t   my_uint_fast64_t;\t\n+\t          typedef uint_least8_t   my_uint_least8_t;\n+\t          typedef uint_least16_t  my_uint_least16_t;\n+\t          typedef uint_least32_t  my_uint_least32_t;\n+\t          typedef uint_least64_t  my_uint_least64_t;\n+\t\t  typedef uintmax_t       my_uintmax_t;\n+\t\t  typedef uintptr_t       my_uintptr_t;\n+\t\t ],[ac_c99_stdint_tr1=yes], [ac_c99_stdint_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_stdint_tr1)\n+  if test x\"$ac_c99_stdint_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_STDINT_TR1, 1,\n+              [Define if C99 types in <stdint.h> should be imported in\n+\t      <tr1/cstdint> in namespace std::tr1.])\n+  fi\n+\n   AC_LANG_RESTORE\n ])\n "}, {"sha": "15228d27be818bd2f24f7bb8c26decdc159331dc", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -711,6 +711,10 @@\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH\n \n+/* Define if C99 types in <stdint.h> should be imported in <tr1/cstdint> in\n+   namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_STDINT_TR1\n+\n /* Define if iconv and related functions exist and are usable. */\n #undef _GLIBCXX_USE_ICONV\n "}, {"sha": "4c80aad98cb91306bd895c582f0df6900417b834", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -30517,6 +30517,99 @@ _ACEOF\n \n   fi\n \n+  # Check for the existence of <stdint.h> types.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <stdint.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <stdint.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_stdint_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <stdint.h>\n+int\n+main ()\n+{\n+typedef int8_t          my_int8_t;\n+\t          typedef int16_t         my_int16_t;\n+\t          typedef int32_t         my_int32_t;\n+\t          typedef int64_t         my_int64_t;\n+\t          typedef int_fast8_t     my_int_fast8_t;\n+\t          typedef int_fast16_t    my_int_fast16_t;\n+\t          typedef int_fast32_t    my_int_fast32_t;\n+\t          typedef int_fast64_t    my_int_fast64_t;\n+\t          typedef int_least8_t    my_int_least8_t;\n+\t          typedef int_least16_t   my_int_least16_t;\n+\t          typedef int_least32_t   my_int_least32_t;\n+\t          typedef int_least64_t   my_int_least64_t;\n+\t\t  typedef intmax_t        my_intmax_t;\n+\t\t  typedef intptr_t        my_intptr_t;\n+\t          typedef uint8_t         my_uint8_t;\n+\t          typedef uint16_t        my_uint16_t;\n+\t          typedef uint32_t        my_uint32_t;\n+\t          typedef uint64_t        my_uint64_t;\n+\t          typedef uint_fast8_t    my_uint_fast8_t;\n+\t          typedef uint_fast16_t   my_uint_fast16_t;\n+\t          typedef uint_fast32_t   my_uint_fast32_t;\n+\t          typedef uint_fast64_t   my_uint_fast64_t;\n+\t          typedef uint_least8_t   my_uint_least8_t;\n+\t          typedef uint_least16_t  my_uint_least16_t;\n+\t          typedef uint_least32_t  my_uint_least32_t;\n+\t          typedef uint_least64_t  my_uint_least64_t;\n+\t\t  typedef uintmax_t       my_uintmax_t;\n+\t\t  typedef uintptr_t       my_uintptr_t;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_stdint_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_stdint_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_stdint_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_stdint_tr1\" >&6\n+  if test x\"$ac_c99_stdint_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_STDINT_TR1 1\n+_ACEOF\n+\n+  fi\n+\n   ac_ext=c\n ac_cpp='$CPP $CPPFLAGS'\n ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'"}, {"sha": "51a4843c162d5fcbe091291f36ca4bf695e0f177", "filename": "libstdc++-v3/docs/html/ext/tr1.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Ftr1.html?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -2043,25 +2043,25 @@ <h1 align=\"center\">\n     <tr>\n       <td>8.22</td>\n       <td>The header <code>&lt;cstdint&gt;</code></td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.22.1</td>\n       <td>Synopsis</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>\n       <td>8.22.2</td>\n       <td>Definitions</td>\n+      <td>done</td>\n       <td></td>\n       <td></td>\n-      <td>missing</td>\n       <td></td>\n     </tr>\n     <tr>"}, {"sha": "bbed68913ba0b1b2b6c13a667d67160b2bdd1b97", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -488,6 +488,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n+\t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/hashtable \\"}, {"sha": "703df7cfe97ea2c1f7ae94182e0331523e16c3c5", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -705,6 +705,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/cfenv \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n+\t${tr1_srcdir}/cstdint \\\n \t${tr1_srcdir}/functional \\\n \t${tr1_srcdir}/functional_iterate.h \\\n \t${tr1_srcdir}/hashtable \\"}, {"sha": "37a1550a5a2edc0fc3ddbd86f8b621e289e0485d", "filename": "libstdc++-v3/include/tr1/cstdint", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcstdint?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -0,0 +1,94 @@\n+// TR1 cstdint -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CSTDINT\n+#define _TR1_CSTDINT 1\n+\n+#include <bits/c++config.h>\n+\n+#if _GLIBCXX_HAVE_STDINT_H\n+// For 8.22.1/1 (see C99, Notes 219, 220, 222) \n+#define __STDC_LIMIT_MACROS\n+#define __STDC_CONSTANT_MACROS\n+#include <stdint.h>\n+#endif\n+\n+#if _GLIBCXX_USE_C99_STDINT_TR1\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  using ::int8_t;\n+  using ::int16_t;\n+  using ::int32_t;\n+  using ::int64_t;\n+\n+  using ::int_fast8_t;\n+  using ::int_fast16_t;\n+  using ::int_fast32_t;\n+  using ::int_fast64_t;\n+\n+  using ::int_least8_t;\n+  using ::int_least16_t;\n+  using ::int_least32_t;\n+  using ::int_least64_t;\n+\n+  using ::intmax_t;\n+  using ::intptr_t;\n+  \n+  using ::uint8_t;\n+  using ::uint16_t;\n+  using ::uint32_t;\n+  using ::uint64_t;\n+\n+  using ::uint_fast8_t;\n+  using ::uint_fast16_t;\n+  using ::uint_fast32_t;\n+  using ::uint_fast64_t;\n+\n+  using ::uint_least8_t;\n+  using ::uint_least16_t;\n+  using ::uint_least32_t;\n+  using ::uint_least64_t;\n+\n+  using ::uintmax_t;\n+  using ::uintptr_t;\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "db90b33f13e036da7db1a3d98d2a80c254a94c9a", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cfenv/types.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcfenv%2Ftypes.cc?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -29,8 +29,8 @@ void test01()\n #if _GLIBCXX_USE_C99_FENV_TR1\n \n   // Check for required typedefs\n-  typedef std::tr1::fenv_t    fenv_t_type;\n-  typedef std::tr1::fexcept_t fexcept_t_type;\n+  typedef std::tr1::fenv_t    my_fenv_t;\n+  typedef std::tr1::fexcept_t my_fexcept_t;\n   \n #endif\n }"}, {"sha": "55ce195dbb56f8f0d9148b3c1a4a1147b3243a0d", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cstdint/types.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a1d634643cc622fa6c03c3ade04a8994af692cd/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcstdint%2Ftypes.cc?ref=2a1d634643cc622fa6c03c3ade04a8994af692cd", "patch": "@@ -0,0 +1,61 @@\n+// { dg-do compile }\n+\n+// 2006-01-29  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.22 Header <cstdint>\n+\n+#include <tr1/cstdint>\n+\n+void test01()\n+{\n+#if _GLIBCXX_USE_C99_STDINT_TR1\n+\n+  typedef int8_t          my_int8_t;\n+  typedef int16_t         my_int16_t;\n+  typedef int32_t         my_int32_t;\n+  typedef int64_t         my_int64_t;\n+  typedef int_fast8_t     my_int_fast8_t;\n+  typedef int_fast16_t    my_int_fast16_t;\n+  typedef int_fast32_t    my_int_fast32_t;\n+  typedef int_fast64_t    my_int_fast64_t;\t\n+  typedef int_least8_t    my_int_least8_t;\n+  typedef int_least16_t   my_int_least16_t;\n+  typedef int_least32_t   my_int_least32_t;\n+  typedef int_least64_t   my_int_least64_t;\n+  typedef intmax_t        my_intmax_t;\n+  typedef intptr_t        my_intptr_t;\n+  typedef uint8_t         my_uint8_t;\n+  typedef uint16_t        my_uint16_t;\n+  typedef uint32_t        my_uint32_t;\n+  typedef uint64_t        my_uint64_t;\n+  typedef uint_fast8_t    my_uint_fast8_t;\n+  typedef uint_fast16_t   my_uint_fast16_t;\n+  typedef uint_fast32_t   my_uint_fast32_t;\n+  typedef uint_fast64_t   my_uint_fast64_t;\t\n+  typedef uint_least8_t   my_uint_least8_t;\n+  typedef uint_least16_t  my_uint_least16_t;\n+  typedef uint_least32_t  my_uint_least32_t;\n+  typedef uint_least64_t  my_uint_least64_t;\n+  typedef uintmax_t       my_uintmax_t;\n+  typedef uintptr_t       my_uintptr_t;\n+  \n+#endif\n+}"}]}