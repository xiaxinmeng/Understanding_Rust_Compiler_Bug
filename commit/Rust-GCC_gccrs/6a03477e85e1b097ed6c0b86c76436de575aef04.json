{"sha": "6a03477e85e1b097ed6c0b86c76436de575aef04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmEwMzQ3N2U4NWUxYjA5N2VkNmMwYjg2Yzc2NDM2ZGU1NzVhZWYwNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-05-17T10:01:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-05-17T10:01:33Z"}, "message": "re PR target/85323 (SSE/AVX/AVX512 shift by 0 not optimized away)\n\n\tPR target/85323\n\t* config/i386/i386.c (ix86_fold_builtin): Fold shift builtins by\n\tvector.\n\t(ix86_gimple_fold_builtin): Likewise.\n\n\t* gcc.target/i386/pr85323-4.c: New test.\n\t* gcc.target/i386/pr85323-5.c: New test.\n\t* gcc.target/i386/pr85323-6.c: New test.\n\nFrom-SVN: r260312", "tree": {"sha": "a877d05d5099bd2b766634559554ef01e36973e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a877d05d5099bd2b766634559554ef01e36973e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a03477e85e1b097ed6c0b86c76436de575aef04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a03477e85e1b097ed6c0b86c76436de575aef04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a03477e85e1b097ed6c0b86c76436de575aef04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a03477e85e1b097ed6c0b86c76436de575aef04/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "28a8a768ebef5e31f950013f1b48b14c008b4b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28a8a768ebef5e31f950013f1b48b14c008b4b3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28a8a768ebef5e31f950013f1b48b14c008b4b3b"}], "stats": {"total": 390, "additions": 382, "deletions": 8}, "files": [{"sha": "bf1e7219bd5d59e337e1363b94dd5196db76a574", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -1,5 +1,10 @@\n 2018-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85323\n+\t* config/i386/i386.c (ix86_fold_builtin): Fold shift builtins by\n+\tvector.\n+\t(ix86_gimple_fold_builtin): Likewise.\n+\n \tPR target/85323\n \t* config/i386/i386.c: Include tree-vector-builder.h.\n \t(ix86_vector_shift_count): New function."}, {"sha": "30f62ac8a0302e404bdf986765e59985f8f40a82", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 155, "deletions": 8, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -33397,6 +33397,7 @@ ix86_fold_builtin (tree fndecl, int n_args,\n       enum ix86_builtins fn_code = (enum ix86_builtins)\n \t\t\t\t   DECL_FUNCTION_CODE (fndecl);\n       enum rtx_code rcode;\n+      bool is_vshift;\n \n       switch (fn_code)\n \t{\n@@ -33615,6 +33616,7 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \tcase IX86_BUILTIN_PSLLWI256_MASK:\n \tcase IX86_BUILTIN_PSLLWI512_MASK:\n \t  rcode = ASHIFT;\n+\t  is_vshift = false;\n \t  goto do_shift;\n \tcase IX86_BUILTIN_PSRAD:\n \tcase IX86_BUILTIN_PSRAD128:\n@@ -33647,6 +33649,7 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \tcase IX86_BUILTIN_PSRAWI256_MASK:\n \tcase IX86_BUILTIN_PSRAWI512:\n \t  rcode = ASHIFTRT;\n+\t  is_vshift = false;\n \t  goto do_shift;\n \tcase IX86_BUILTIN_PSRLD:\n \tcase IX86_BUILTIN_PSRLD128:\n@@ -33685,6 +33688,53 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \tcase IX86_BUILTIN_PSRLWI256_MASK:\n \tcase IX86_BUILTIN_PSRLWI512:\n \t  rcode = LSHIFTRT;\n+\t  is_vshift = false;\n+\t  goto do_shift;\n+\tcase IX86_BUILTIN_PSLLVV16HI:\n+\tcase IX86_BUILTIN_PSLLVV16SI:\n+\tcase IX86_BUILTIN_PSLLVV2DI:\n+\tcase IX86_BUILTIN_PSLLVV2DI_MASK:\n+\tcase IX86_BUILTIN_PSLLVV32HI:\n+\tcase IX86_BUILTIN_PSLLVV4DI:\n+\tcase IX86_BUILTIN_PSLLVV4DI_MASK:\n+\tcase IX86_BUILTIN_PSLLVV4SI:\n+\tcase IX86_BUILTIN_PSLLVV4SI_MASK:\n+\tcase IX86_BUILTIN_PSLLVV8DI:\n+\tcase IX86_BUILTIN_PSLLVV8HI:\n+\tcase IX86_BUILTIN_PSLLVV8SI:\n+\tcase IX86_BUILTIN_PSLLVV8SI_MASK:\n+\t  rcode = ASHIFT;\n+\t  is_vshift = true;\n+\t  goto do_shift;\n+\tcase IX86_BUILTIN_PSRAVQ128:\n+\tcase IX86_BUILTIN_PSRAVQ256:\n+\tcase IX86_BUILTIN_PSRAVV16HI:\n+\tcase IX86_BUILTIN_PSRAVV16SI:\n+\tcase IX86_BUILTIN_PSRAVV32HI:\n+\tcase IX86_BUILTIN_PSRAVV4SI:\n+\tcase IX86_BUILTIN_PSRAVV4SI_MASK:\n+\tcase IX86_BUILTIN_PSRAVV8DI:\n+\tcase IX86_BUILTIN_PSRAVV8HI:\n+\tcase IX86_BUILTIN_PSRAVV8SI:\n+\tcase IX86_BUILTIN_PSRAVV8SI_MASK:\n+\t  rcode = ASHIFTRT;\n+\t  is_vshift = true;\n+\t  goto do_shift;\n+\tcase IX86_BUILTIN_PSRLVV16HI:\n+\tcase IX86_BUILTIN_PSRLVV16SI:\n+\tcase IX86_BUILTIN_PSRLVV2DI:\n+\tcase IX86_BUILTIN_PSRLVV2DI_MASK:\n+\tcase IX86_BUILTIN_PSRLVV32HI:\n+\tcase IX86_BUILTIN_PSRLVV4DI:\n+\tcase IX86_BUILTIN_PSRLVV4DI_MASK:\n+\tcase IX86_BUILTIN_PSRLVV4SI:\n+\tcase IX86_BUILTIN_PSRLVV4SI_MASK:\n+\tcase IX86_BUILTIN_PSRLVV8DI:\n+\tcase IX86_BUILTIN_PSRLVV8HI:\n+\tcase IX86_BUILTIN_PSRLVV8SI:\n+\tcase IX86_BUILTIN_PSRLVV8SI_MASK:\n+\t  rcode = LSHIFTRT;\n+\t  is_vshift = true;\n \t  goto do_shift;\n \n \tdo_shift:\n@@ -33703,7 +33753,10 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t      if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n \t\tbreak;\n \t    }\n-\t  if (tree tem = ix86_vector_shift_count (args[1]))\n+\t  if (is_vshift && TREE_CODE (args[1]) != VECTOR_CST)\n+\t    break;\n+\t  if (tree tem = (is_vshift ? integer_one_node\n+\t\t\t  : ix86_vector_shift_count (args[1])))\n \t    {\n \t      unsigned HOST_WIDE_INT count = tree_to_uhwi (tem);\n \t      if (count == 0)\n@@ -33714,7 +33767,9 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t\t    return build_zero_cst (TREE_TYPE (args[0]));\n \t\t  count = TYPE_PRECISION (TREE_TYPE (TREE_TYPE (args[0]))) - 1;\n \t\t}\n-\t      tree countt = build_int_cst (integer_type_node, count);\n+\t      tree countt = NULL_TREE;\n+\t      if (!is_vshift)\n+\t\tcountt = build_int_cst (integer_type_node, count);\n \t      tree_vector_builder builder;\n \t      builder.new_unary_operation (TREE_TYPE (args[0]), args[0],\n \t\t\t\t\t   false);\n@@ -33727,9 +33782,30 @@ ix86_fold_builtin (tree fndecl, int n_args,\n \t\t  tree type = TREE_TYPE (elt);\n \t\t  if (rcode == LSHIFTRT)\n \t\t    elt = fold_convert (unsigned_type_for (type), elt);\n+\t\t  if (is_vshift)\n+\t\t    {\n+\t\t      countt = VECTOR_CST_ELT (args[1], i);\n+\t\t      if (TREE_CODE (countt) != INTEGER_CST\n+\t\t\t  || TREE_OVERFLOW (countt))\n+\t\t\treturn NULL_TREE;\n+\t\t      int prec\n+\t\t\t= TYPE_PRECISION (TREE_TYPE (TREE_TYPE (args[0])));\n+\t\t      if (wi::neg_p (wi::to_wide (countt))\n+\t\t\t  || wi::to_widest (countt) >= prec)\n+\t\t\t{\n+\t\t\t  if (rcode == ASHIFTRT)\n+\t\t\t    countt = build_int_cst (TREE_TYPE (countt),\n+\t\t\t\t\t\t    prec - 1);\n+\t\t\t  else\n+\t\t\t    {\n+\t\t\t      elt = build_zero_cst (TREE_TYPE (elt));\n+\t\t\t      countt = build_zero_cst (TREE_TYPE (countt));\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n \t\t  elt = const_binop (rcode == ASHIFT\n-\t\t\t\t     ? LSHIFT_EXPR : RSHIFT_EXPR, TREE_TYPE (elt),\n-\t\t\t\t     elt, countt);\n+\t\t\t\t     ? LSHIFT_EXPR : RSHIFT_EXPR,\n+\t\t\t\t     TREE_TYPE (elt), elt, countt);\n \t\t  if (!elt || TREE_CODE (elt) != INTEGER_CST)\n \t\t    return NULL_TREE;\n \t\t  if (rcode == LSHIFTRT)\n@@ -33767,6 +33843,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n   tree arg0, arg1;\n   enum rtx_code rcode;\n   unsigned HOST_WIDE_INT count;\n+  bool is_vshift;\n \n   switch (fn_code)\n     {\n@@ -33883,6 +33960,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case IX86_BUILTIN_PSLLWI256_MASK:\n     case IX86_BUILTIN_PSLLWI512_MASK:\n       rcode = ASHIFT;\n+      is_vshift = false;\n       goto do_shift;\n     case IX86_BUILTIN_PSRAD:\n     case IX86_BUILTIN_PSRAD128:\n@@ -33915,6 +33993,7 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case IX86_BUILTIN_PSRAWI256_MASK:\n     case IX86_BUILTIN_PSRAWI512:\n       rcode = ASHIFTRT;\n+      is_vshift = false;\n       goto do_shift;\n     case IX86_BUILTIN_PSRLD:\n     case IX86_BUILTIN_PSRLD128:\n@@ -33953,6 +34032,53 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n     case IX86_BUILTIN_PSRLWI256_MASK:\n     case IX86_BUILTIN_PSRLWI512:\n       rcode = LSHIFTRT;\n+      is_vshift = false;\n+      goto do_shift;\n+    case IX86_BUILTIN_PSLLVV16HI:\n+    case IX86_BUILTIN_PSLLVV16SI:\n+    case IX86_BUILTIN_PSLLVV2DI:\n+    case IX86_BUILTIN_PSLLVV2DI_MASK:\n+    case IX86_BUILTIN_PSLLVV32HI:\n+    case IX86_BUILTIN_PSLLVV4DI:\n+    case IX86_BUILTIN_PSLLVV4DI_MASK:\n+    case IX86_BUILTIN_PSLLVV4SI:\n+    case IX86_BUILTIN_PSLLVV4SI_MASK:\n+    case IX86_BUILTIN_PSLLVV8DI:\n+    case IX86_BUILTIN_PSLLVV8HI:\n+    case IX86_BUILTIN_PSLLVV8SI:\n+    case IX86_BUILTIN_PSLLVV8SI_MASK:\n+      rcode = ASHIFT;\n+      is_vshift = true;\n+      goto do_shift;\n+    case IX86_BUILTIN_PSRAVQ128:\n+    case IX86_BUILTIN_PSRAVQ256:\n+    case IX86_BUILTIN_PSRAVV16HI:\n+    case IX86_BUILTIN_PSRAVV16SI:\n+    case IX86_BUILTIN_PSRAVV32HI:\n+    case IX86_BUILTIN_PSRAVV4SI:\n+    case IX86_BUILTIN_PSRAVV4SI_MASK:\n+    case IX86_BUILTIN_PSRAVV8DI:\n+    case IX86_BUILTIN_PSRAVV8HI:\n+    case IX86_BUILTIN_PSRAVV8SI:\n+    case IX86_BUILTIN_PSRAVV8SI_MASK:\n+      rcode = ASHIFTRT;\n+      is_vshift = true;\n+      goto do_shift;\n+    case IX86_BUILTIN_PSRLVV16HI:\n+    case IX86_BUILTIN_PSRLVV16SI:\n+    case IX86_BUILTIN_PSRLVV2DI:\n+    case IX86_BUILTIN_PSRLVV2DI_MASK:\n+    case IX86_BUILTIN_PSRLVV32HI:\n+    case IX86_BUILTIN_PSRLVV4DI:\n+    case IX86_BUILTIN_PSRLVV4DI_MASK:\n+    case IX86_BUILTIN_PSRLVV4SI:\n+    case IX86_BUILTIN_PSRLVV4SI_MASK:\n+    case IX86_BUILTIN_PSRLVV8DI:\n+    case IX86_BUILTIN_PSRLVV8HI:\n+    case IX86_BUILTIN_PSRLVV8SI:\n+    case IX86_BUILTIN_PSRLVV8SI_MASK:\n+      rcode = LSHIFTRT;\n+      is_vshift = true;\n       goto do_shift;\n \n     do_shift:\n@@ -33970,10 +34096,31 @@ ix86_gimple_fold_builtin (gimple_stmt_iterator *gsi)\n \t  if ((mask | (HOST_WIDE_INT_M1U << elems)) != HOST_WIDE_INT_M1U)\n \t    break;\n \t}\n-      arg1 = ix86_vector_shift_count (arg1);\n-      if (!arg1)\n-\tbreak;\n-      count = tree_to_uhwi (arg1);\n+      if (is_vshift)\n+\t{\n+\t  if (TREE_CODE (arg1) != VECTOR_CST)\n+\t    break;\n+\t  count = TYPE_PRECISION (TREE_TYPE (TREE_TYPE (arg0)));\n+\t  if (integer_zerop (arg1))\n+\t    count = 0;\n+\t  else if (rcode == ASHIFTRT)\n+\t    break;\n+\t  else\n+\t    for (unsigned int i = 0; i < VECTOR_CST_NELTS (arg1); ++i)\n+\t      {\n+\t\ttree elt = VECTOR_CST_ELT (arg1, i);\n+\t\tif (!wi::neg_p (wi::to_wide (elt))\n+\t\t    && wi::to_widest (elt) < count)\n+\t\t  return false;\n+\t      }\n+\t}\n+      else\n+\t{\n+\t  arg1 = ix86_vector_shift_count (arg1);\n+\t  if (!arg1)\n+\t    break;\n+\t  count = tree_to_uhwi (arg1);\n+\t}\n       if (count == 0)\n \t{\n \t  /* Just return the first argument for shift by 0.  */"}, {"sha": "f2ced03e430d1c088cd40b06f4cb4707c2becbbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -1,5 +1,10 @@\n 2018-05-17  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/85323\n+\t* gcc.target/i386/pr85323-4.c: New test.\n+\t* gcc.target/i386/pr85323-5.c: New test.\n+\t* gcc.target/i386/pr85323-6.c: New test.\n+\n \tPR target/85323\n \t* gcc.target/i386/pr85323-1.c: New test.\n \t* gcc.target/i386/pr85323-2.c: New test."}, {"sha": "e3102beed1a8977213391fd8d5dd9b31aab8e61d", "filename": "gcc/testsuite/gcc.target/i386/pr85323-4.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-4.c?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -0,0 +1,51 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"return x_\\[0-9]*.D.;\" 3 \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+__m128i\n+foo (__m128i x)\n+{\n+  x = _mm_sllv_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_sllv_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_sllv_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm_srlv_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_srlv_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_srlv_epi16 (x, _mm_set1_epi32 (0));\n+  x = _mm_srav_epi64 (x, _mm_set1_epi32 (0));\n+  x = _mm_srav_epi32 (x, _mm_set1_epi32 (0));\n+  x = _mm_srav_epi16 (x, _mm_set1_epi32 (0));\n+  return x;\n+}\n+\n+__m256i\n+bar (__m256i x)\n+{\n+  x = _mm256_sllv_epi64 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_sllv_epi32 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_sllv_epi16 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srlv_epi64 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srlv_epi32 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srlv_epi16 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srav_epi64 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srav_epi32 (x, _mm256_set1_epi32 (0));\n+  x = _mm256_srav_epi16 (x, _mm256_set1_epi32 (0));\n+  return x;\n+}\n+\n+__m512i\n+baz (__m512i x)\n+{\n+  x = _mm512_sllv_epi64 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_sllv_epi32 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_sllv_epi16 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srlv_epi64 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srlv_epi32 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srlv_epi16 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srav_epi64 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srav_epi32 (x, _mm512_setzero_epi32 ());\n+  x = _mm512_srav_epi16 (x, _mm512_setzero_epi32 ());\n+  return x;\n+}"}, {"sha": "2e662a881108601c7aacc837dc08111efded3778", "filename": "gcc/testsuite/gcc.target/i386/pr85323-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-5.c?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -0,0 +1,47 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0 \\};\" 6 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0, 0, 0 \\};\" 6 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"= \\{ 0, 0, 0, 0, 0, 0, 0, 0 \\};\" 6 \"optimized\" } } */\n+\n+#include <x86intrin.h>\n+\n+void\n+foo (__m128i x[6])\n+{\n+  x[0] = _mm_sllv_epi64 (x[0], _mm_set_epi64x (64, 65));\n+  x[1] = _mm_sllv_epi32 (x[1], _mm_set_epi32 (32, 33, 34, 32));\n+  x[2] = _mm_sllv_epi16 (x[2], _mm_set_epi16 (16, 18, -16, -1, 19, 16, 18, 20));\n+  x[3] = _mm_srlv_epi64 (x[3], _mm_set_epi64x (65, -1));\n+  x[4] = _mm_srlv_epi32 (x[4], _mm_set_epi32 (33, 32, 39, -5));\n+  x[5] = _mm_srlv_epi16 (x[5], _mm_set1_epi16 (17));\n+}\n+\n+void\n+bar (__m256i x[6])\n+{\n+  x[0] = _mm256_sllv_epi64 (x[0], _mm256_set_epi64x (64, 65, -2, 66));\n+  x[1] = _mm256_sllv_epi32 (x[1], _mm256_set_epi32 (32, 32, 39, -4, -32, 98, 2048, 32));\n+  x[2] = _mm256_sllv_epi16 (x[2], _mm256_set_epi16 (16, 32, 64, 128, 16, 16, 32, -5,\n+\t\t\t\t\t\t    -1, -2, -3, 16, 17, 18, 19, 200));\n+  x[3] = _mm256_srlv_epi64 (x[3], _mm256_set_epi64x (65, 64, -5, 64));\n+  x[4] = _mm256_srlv_epi32 (x[4], _mm256_set_epi32 (33, 49, 2048, 32, -1, 32, 37, 16384));\n+  x[5] = _mm256_srlv_epi16 (x[5], _mm256_set1_epi16 (17));\n+}\n+\n+void\n+baz (__m512i x[6])\n+{\n+  x[0] = _mm512_sllv_epi64 (x[0], _mm512_set_epi64 (64, 64, 69, -1, 2048, 64, 16348, -64));\n+  x[1] = _mm512_sllv_epi32 (x[1], _mm512_set_epi32 (32, 33, 34, 35, 36, -32, -33, -34,\n+\t\t\t\t\t\t    -1, -2, -3, -4, -5, -6, 32, 2048));\n+  x[2] = _mm512_sllv_epi16 (x[2], _mm512_set_epi16 (16, 32, 64, 128, 16, 16, 32, -5,\n+\t\t\t\t\t\t    -1, -2, -3, 16, 17, 18, 19, 200,\n+\t\t\t\t\t\t    16, 19, 2048, 16, -2, -8, -19, 16,\n+\t\t\t\t\t\t    -1, -2, -3, -4, -5, -6, -7, -8));\n+  x[3] = _mm512_srlv_epi64 (x[3], _mm512_set_epi64 (65, 64, 69, 68, 64, 79, 2048, -1));\n+  x[4] = _mm512_srlv_epi32 (x[4], _mm512_set_epi32 (32, 33, 34, 35, 36, -32, -33, -34,\n+\t\t\t\t\t\t    -1, -2, -3, -4, -5, -6, 32, 2048));\n+  x[5] = _mm512_srlv_epi16 (x[5], _mm512_set1_epi16 (17));\n+}"}, {"sha": "c110886f384c63dab52e11115a93cd3163002775", "filename": "gcc/testsuite/gcc.target/i386/pr85323-6.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a03477e85e1b097ed6c0b86c76436de575aef04/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85323-6.c?ref=6a03477e85e1b097ed6c0b86c76436de575aef04", "patch": "@@ -0,0 +1,119 @@\n+/* PR target/85323 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw -fdump-tree-optimized\" } */\n+\n+#include <x86intrin.h>\n+\n+struct S1 { __m128i a, b, c, d, e, f, g, h, i; } s1;\n+struct S2 { __m256i a, b, c, d, e, f, g, h, i; } s2;\n+struct S3 { __m512i a, b, c, d, e, f, g, h, i; } s3;\n+\n+/* { dg-final { scan-tree-dump-times \"s1.a = \\{ -4342213319840130048, -761680639942076944 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.b = \\{ 16777216, 149499221639168 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.c = \\{ 2623346860254860648, -763360136839241728 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.d = \\{ 35871495301330685, 2005711373062887255 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.e = \\{ 128, 1729384589077512192 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.f = \\{ 655836773112359254, 2005509209063424011 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.g = \\{ -157301717633283, -300131636150806697 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.h = \\{ -128, -576458420136181760 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s1.i = \\{ 655836777273157974, -300052325173559301 \\};\" 1 \"optimized\" } } */\n+\n+void\n+foo (void)\n+{\n+  __m128i a = _mm_set_epi64x (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL);\n+  __m128i b = _mm_set_epi64x (3, 9);\n+  __m128i c = _mm_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U);\n+  __m128i d = _mm_set_epi32 (3, 32, -6, 24);\n+  __m128i e = _mm_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t     0x1234, 0x0012, 0x8001, 0xa55a);\n+  __m128i f = _mm_set_epi16 (3, 16, -1, 12, 1, 0, 5, 2);\n+  s1.a = _mm_sllv_epi64 (a, b);\n+  s1.b = _mm_sllv_epi32 (c, d);\n+  s1.c = _mm_sllv_epi16 (e, f);\n+  s1.d = _mm_srlv_epi64 (a, b);\n+  s1.e = _mm_srlv_epi32 (c, d);\n+  s1.f = _mm_srlv_epi16 (e, f);\n+  s1.g = _mm_srav_epi64 (a, b);\n+  s1.h = _mm_srav_epi32 (c, d);\n+  s1.i = _mm_srav_epi16 (e, f);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"s2.a = \\{ 6722813395751927808, 0, 0, -1523361279884153888 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.b = \\{ 9177596069264525312, 1851607040, -81985531201716224, 76543602090093808 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.c = \\{ 1008895103428722688, -5985166321598332416, 2623346860254860648, -763360136839241728 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.d = \\{ 2189249818860, 0, 0, 1002855686531443627 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.e = \\{ 114276044520956448, 130489, -81985531201716224, 3377704168205116 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.f = \\{ 289076540546023424, 3115407575762206978, 655836773112359254, 2005509209063424011 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.g = \\{ 2189249818860, 0, -1, -150065818075403349 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.h = \\{ -29839143554899424, -4294836807, -81985526906748929, -1125895459165380 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s2.i = \\{ -287384211757400064, 3115618685752836354, 655836777273157974, -300052325173559301 \\};\" 1 \"optimized\" } } */\n+\n+void\n+bar (void)\n+{\n+  __m256i a = _mm256_set_epi64x (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL,\n+\t\t\t\t 0x123456789abcdef0ULL, 0x0fedcba987654321ULL);\n+  __m256i b = _mm256_set_epi64x (4, 65, -2, 19);\n+  __m256i c = _mm256_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0x0fedcba9U, 0xcafebabeU, 0x00111100U);\n+  __m256i d = _mm256_set_epi32 (12, 1, 0, -2, 32, 11, 7, 3);\n+  __m256i e = _mm256_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t\t0x1234, 0x0012, 0x8001, 0xa55a,\n+\t\t\t\t0x5678, 0x9abc, 0xdef0, 0x1020,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0);\n+  __m256i f = _mm256_set_epi16 (3, 16, -1, 12, 1, 0, 5, 2, 1, 2, 3, 4, 5, 6, 7, 8);\n+  s2.a = _mm256_sllv_epi64 (a, b);\n+  s2.b = _mm256_sllv_epi32 (c, d);\n+  s2.c = _mm256_sllv_epi16 (e, f);\n+  s2.d = _mm256_srlv_epi64 (a, b);\n+  s2.e = _mm256_srlv_epi32 (c, d);\n+  s2.f = _mm256_srlv_epi16 (e, f);\n+  s2.g = _mm256_srav_epi64 (a, b);\n+  s2.h = _mm256_srav_epi32 (c, d);\n+  s2.i = _mm256_srav_epi16 (e, f);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"s3.a = \\{ 6592671264835730432, 5247073869855161280, 1147797409030816545, -161076958856481380, 6722813395751927808, 0, 0, -1523361279884153888 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.b = \\{ -4611667331015735296, 6592669523180452796, 2541551364173987968, 1068969636, 9177596069264525312, 1851607040, -81985531201716224, 76543602090093808 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.c = \\{ 6233191819462621886, 8070591269736295416, 8610979175836155904, 40534596407293308, 1008895103428722688, -5985166321598332416, 2623346860254860648, -763360136839241728 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.d = \\{ 31339240204107613, 327942116865947580, 1147797409030816545, 9183102797140655463, 2189249818860, 0, 0, 1002855686531443627 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.e = \\{ -4611667331024543200, 31339239126560699, 81985526923526144, 66810602, 114276044520956448, 130489, -81985531201716224, 3377704168205116 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.f = \\{ 125466298768407230, 36028797018976959, 107269861939347456, 563225682730335, 289076540546023424, 3115407575762206978, 655836773112359254, 2005509209063424011 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.g = \\{ -4689556814856355, 327942116865947580, 1147797409030816545, -40269239714120345, 2189249818860, 0, -1, -150065818075403349 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.h = \\{ -4611667331024543200, -4689554671177797, 81985531184939008, 66810602, -29839143554899424, -4294836807, -81985526906748929, -1125895459165380 \\};\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-times \"s3.i = \\{ -18648885549352258, -36028797018901825, -36599031236919297, 844154124885343, -287384211757400064, 3115618685752836354, 655836777273157974, -300052325173559301 \\};\" 1 \"optimized\" } } */\n+\n+void\n+baz (void)\n+{\n+  __m512i a = _mm512_set_epi64 (0xdeadbeefcafebabeULL, 0xfee1deadfeedfaceULL,\n+\t\t\t\t0x123456789abcdef0ULL, 0x0fedcba987654321ULL,\n+\t\t\t\t0xfee1deadfeedfaceULL, 0x0fedcba987654321ULL,\n+\t\t\t\t0x123456789abcdef0ULL, 0xdeadbeefcafebabeULL);\n+  __m512i b = _mm512_set_epi64 (4, 65, -2, 19, 1, 0, 2, 9);\n+  __m512i c = _mm512_set_epi32 (0xc00010ffU, 0x12345678U, 0xfedcba98U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0x0fedcba9U, 0xcafebabeU, 0x00111100U,\n+\t\t\t\t0, 0x0fedcba9U, 0x12345678U, 0x80000001U,\n+\t\t\t\t0xdeadbeefU, 0xdeadbeefU, 0xc00010ffU, 0x00111100U);\n+  __m512i d = _mm512_set_epi32 (12, 1, 0, -2, 32, 11, 7, 3, 1, 2, 4, 7, 9, 2, 0, 3);\n+  __m512i e = _mm512_set_epi16 (0xdead, 0xbeef, 0xcafe, 0xbabe,\n+\t\t\t\t0x1234, 0x0012, 0x8001, 0xa55a,\n+\t\t\t\t0x5678, 0x9abc, 0xdef0, 0x1020,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0,\n+\t\t\t\t0x0012, 0x8001, 0xcafe, 0xbabe,\n+\t\t\t\t0xbeef, 0xcafe, 0x9abc, 0xdef0,\n+\t\t\t\t0x8070, 0x6543, 0x129f, 0xcafe,\n+\t\t\t\t0xdead, 0xbeef, 0xcafe, 0xbabe);\n+  __m512i f = _mm512_set_epi16 (3, 16, -1, 12, 1, 0, 5, 2, 1, 2, 3, 4, 5, 6, 7, 8,\n+\t\t\t\t3, 9, 2, 1, 7, 3, -12, 26, 8, 15, 17, 2, 7, 0, 3, 0);\n+  s3.a = _mm512_sllv_epi64 (a, b);\n+  s3.b = _mm512_sllv_epi32 (c, d);\n+  s3.c = _mm512_sllv_epi16 (e, f);\n+  s3.d = _mm512_srlv_epi64 (a, b);\n+  s3.e = _mm512_srlv_epi32 (c, d);\n+  s3.f = _mm512_srlv_epi16 (e, f);\n+  s3.g = _mm512_srav_epi64 (a, b);\n+  s3.h = _mm512_srav_epi32 (c, d);\n+  s3.i = _mm512_srav_epi16 (e, f);\n+}"}]}