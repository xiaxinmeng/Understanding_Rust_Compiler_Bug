{"sha": "d177c49cd31131c8cededb216da30877d8a3856d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE3N2M0OWNkMzExMzFjOGNlZGVkYjIxNmRhMzA4NzdkOGEzODU2ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-30T01:24:42Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-30T14:21:20Z"}, "message": "analyzer: avoid comparisons between uncomparable types (PR 93450)\n\nPR analyzer/93450 reports an ICE trying to fold an EQ_EXPR comparison\nof (int)0 with (float)Inf.\n\nMost comparisons inside the analyzer come from gimple conditions, for\nwhich the necessary casts have already been added.\n\nThis one is done inside constant_svalue::eval_condition as part of\npurging sm-state for an unknown function call, and fails to check\nthe types being compared, leading to the ICE.\n\nsm_state_map::set_state calls region_model::eval_condition_without_cm in\norder to handle pointer equality (so that e.g. (void *)&r and (foo *)&r\ntransition together), which leads to this code generating a bogus query\nto see if the two constants are equal.\n\nThis patch fixes the ICE in two ways:\n\n- It avoids generating comparisons within\n  constant_svalue::eval_condition unless the types are equal (thus for\n  constants, but not for pointer values, which are handled by\n  region_svalue).\n\n- It updates sm_state_map::set_state to bail immediately if the new\n  state is the same as the old one, thus avoiding the above for the\n  common case where an svalue_id has no sm-state (such as for the int\n  and float constants in the reproducer), for which the above becomes a\n  no-op.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93450\n\t* program-state.cc (sm_state_map::set_state): For the overload\n\ttaking an svalue_id, bail out if the set_state on the ec does\n\tnothing.  Convert the latter's return type from void to bool,\n\treturning true if anything changed.\n\t(sm_state_map::impl_set_state): Convert the return type from void\n\tto bool, returning true if the state changed.\n\t* program-state.h (sm_state_map::set_state): Convert return type\n\tfrom void to bool.\n\t(sm_state_map::impl_set_state): Likewise.\n\t* region-model.cc (constant_svalue::eval_condition): Only call\n\tfold_build2 if the types are the same.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93450\n\t* gcc.dg/analyzer/torture/pr93450.c: New test.", "tree": {"sha": "44202900181a2c828182ebd265561e0453e1f48b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44202900181a2c828182ebd265561e0453e1f48b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d177c49cd31131c8cededb216da30877d8a3856d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d177c49cd31131c8cededb216da30877d8a3856d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d177c49cd31131c8cededb216da30877d8a3856d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d177c49cd31131c8cededb216da30877d8a3856d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64464e5f369231d2998608138da760274f256581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64464e5f369231d2998608138da760274f256581", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64464e5f369231d2998608138da760274f256581"}], "stats": {"total": 88, "additions": 73, "deletions": 15}, "files": [{"sha": "f1ac6e6e63fb4e2a227e7b00ece29ebe1863c197", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -1,3 +1,18 @@\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93450\n+\t* program-state.cc (sm_state_map::set_state): For the overload\n+\ttaking an svalue_id, bail out if the set_state on the ec does\n+\tnothing.  Convert the latter's return type from void to bool,\n+\treturning true if anything changed.\n+\t(sm_state_map::impl_set_state): Convert the return type from void\n+\tto bool, returning true if the state changed.\n+\t* program-state.h (sm_state_map::set_state): Convert return type\n+\tfrom void to bool.\n+\t(sm_state_map::impl_set_state): Likewise.\n+\t* region-model.cc (constant_svalue::eval_condition): Only call\n+\tfold_build2 if the types are the same.\n+\n 2020-01-29  Jakub Jelinek  <jakub@redhat.com>\n \n \t* analyzer.h (PUSH_IGNORE_WFORMAT, POP_IGNORE_WFORMAT): Remove."}, {"sha": "f41f105ce6b06acf40741e090d41f61260100c31", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -259,7 +259,8 @@ sm_state_map::set_state (region_model *model,\n   if (model == NULL)\n     return;\n   equiv_class &ec = model->get_constraints ()->get_equiv_class (sid);\n-  set_state (ec, state, origin);\n+  if (!set_state (ec, state, origin))\n+    return;\n \n   /* Also do it for all svalues that are equal via non-cm, so that\n      e.g. (void *)&r and (foo *)&r transition together.  */\n@@ -276,34 +277,42 @@ sm_state_map::set_state (region_model *model,\n }\n \n /* Set the state of EC to STATE, recording that the state came from\n-   ORIGIN.  */\n+   ORIGIN.\n+   Return true if any states of svalue_ids within EC changed.  */\n \n-void\n+bool\n sm_state_map::set_state (const equiv_class &ec,\n \t\t\t state_machine::state_t state,\n \t\t\t svalue_id origin)\n {\n   int i;\n   svalue_id *sid;\n+  bool any_changed = false;\n   FOR_EACH_VEC_ELT (ec.m_vars, i, sid)\n-    impl_set_state (*sid, state, origin);\n+    any_changed |= impl_set_state (*sid, state, origin);\n+  return any_changed;\n }\n \n-/* Set state of PV to STATE, bypassing equivalence classes.  */\n+/* Set state of SID to STATE, bypassing equivalence classes.\n+   Return true if the state changed.  */\n \n-void\n+bool\n sm_state_map::impl_set_state (svalue_id sid, state_machine::state_t state,\n \t\t\t      svalue_id origin)\n {\n+  if (get_state (sid) == state)\n+    return false;\n+\n   /* Special-case state 0 as the default value.  */\n   if (state == 0)\n     {\n       if (m_map.get (sid))\n \tm_map.remove (sid);\n-      return;\n+      return true;\n     }\n   gcc_assert (!sid.null_p ());\n   m_map.put (sid, entry_t (state, origin));\n+  return true;\n }\n \n /* Set the \"global\" state within this state map to STATE.  */"}, {"sha": "0a4e35f3d5d34b01b7a8d136ec275f3767ffff25", "filename": "gcc/analyzer/program-state.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fprogram-state.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fprogram-state.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.h?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -161,10 +161,10 @@ class sm_state_map\n \t\t  svalue_id sid,\n \t\t  state_machine::state_t state,\n \t\t  svalue_id origin);\n-  void set_state (const equiv_class &ec,\n+  bool set_state (const equiv_class &ec,\n \t\t  state_machine::state_t state,\n \t\t  svalue_id origin);\n-  void impl_set_state (svalue_id sid,\n+  bool impl_set_state (svalue_id sid,\n \t\t       state_machine::state_t state,\n \t\t       svalue_id origin);\n "}, {"sha": "c838454a1ebcd6d72d0ed7bb9a088290e760e19f", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -666,12 +666,16 @@ constant_svalue::eval_condition (constant_svalue *lhs,\n   gcc_assert (CONSTANT_CLASS_P (lhs_const));\n   gcc_assert (CONSTANT_CLASS_P (rhs_const));\n \n-  tree comparison\n-    = fold_build2 (op, boolean_type_node, lhs_const, rhs_const);\n-  if (comparison == boolean_true_node)\n-    return tristate (tristate::TS_TRUE);\n-  if (comparison == boolean_false_node)\n-    return tristate (tristate::TS_FALSE);\n+  /* Check for comparable types.  */\n+  if (TREE_TYPE (lhs_const) == TREE_TYPE (rhs_const))\n+    {\n+      tree comparison\n+\t= fold_build2 (op, boolean_type_node, lhs_const, rhs_const);\n+      if (comparison == boolean_true_node)\n+\treturn tristate (tristate::TS_TRUE);\n+      if (comparison == boolean_false_node)\n+\treturn tristate (tristate::TS_FALSE);\n+    }\n   return tristate::TS_UNKNOWN;\n }\n "}, {"sha": "a97bf3250130f8350455e300e4287fcac44d3a96", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -1,3 +1,8 @@\n+2020-01-30  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93450\n+\t* gcc.dg/analyzer/torture/pr93450.c: New test.\n+\n 2020-01-30  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93494"}, {"sha": "7f6cba0db6d5d376668fe3fde549a5e7d764097e", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93450.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93450.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d177c49cd31131c8cededb216da30877d8a3856d/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93450.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93450.c?ref=d177c49cd31131c8cededb216da30877d8a3856d", "patch": "@@ -0,0 +1,25 @@\n+void\n+ed (int);\n+\n+double\n+bg (void)\n+{\n+  double kl = __builtin_huge_val ();\n+\n+  ed (0);\n+\n+  return kl;\n+}\n+\n+static double __attribute__((noinline))\n+get_hugeval (void)\n+{\n+  return __builtin_huge_val ();\n+}\n+\n+int test_2 (int i)\n+{\n+  if (i < get_hugeval ())\n+    return 42;\n+  return 0;\n+}"}]}