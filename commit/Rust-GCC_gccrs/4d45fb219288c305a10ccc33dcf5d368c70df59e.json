{"sha": "4d45fb219288c305a10ccc33dcf5d368c70df59e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ0NWZiMjE5Mjg4YzMwNWExMGNjYzMzZGNmNWQzNjhjNzBkZjU5ZQ==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-03-01T02:28:02Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-03-01T02:28:02Z"}, "message": "re PR libfortran/47567 (Wrong output for small absolute values with F editing)\n\n2011-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/47567\n\t* gfortran.dg/fmt_fw_d.f90: New test.\n\nFrom-SVN: r170586", "tree": {"sha": "cadbb782b0cf9231599be38aa41543355616ebb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cadbb782b0cf9231599be38aa41543355616ebb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d45fb219288c305a10ccc33dcf5d368c70df59e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d45fb219288c305a10ccc33dcf5d368c70df59e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d45fb219288c305a10ccc33dcf5d368c70df59e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d45fb219288c305a10ccc33dcf5d368c70df59e/comments", "author": null, "committer": null, "parents": [{"sha": "0eac6ca562274e0547e848d63835f6254bc724ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eac6ca562274e0547e848d63835f6254bc724ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eac6ca562274e0547e848d63835f6254bc724ce"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "984f0cfd23d164f149a9c5e8621a3d6545b4dfea", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d45fb219288c305a10ccc33dcf5d368c70df59e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d45fb219288c305a10ccc33dcf5d368c70df59e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d45fb219288c305a10ccc33dcf5d368c70df59e", "patch": "@@ -1,3 +1,8 @@\n+2011-02-28  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/47567\n+\t* gfortran.dg/fmt_fw_d.f90: New test.\n+\n 2011-02-28  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/inherit/covariant18.C: New."}, {"sha": "6d4c20374915f74d739948360a0eaa312c102429", "filename": "gcc/testsuite/gfortran.dg/fmt_fw_d.f90", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d45fb219288c305a10ccc33dcf5d368c70df59e/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_fw_d.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d45fb219288c305a10ccc33dcf5d368c70df59e/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_fw_d.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffmt_fw_d.f90?ref=4d45fb219288c305a10ccc33dcf5d368c70df59e", "patch": "@@ -0,0 +1,130 @@\n+! { dg-do run }\r\n+! PR47567 Wrong output for small absolute values with F editing\r\n+! Test case provided by Thomas Henlich \r\n+call verify_fmt(1.2)\r\n+call verify_fmt(-0.1)\r\n+call verify_fmt(1e-7)\r\n+call verify_fmt(1e-6)\r\n+call verify_fmt(1e-5)\r\n+call verify_fmt(1e-4)\r\n+call verify_fmt(1e-3)\r\n+call verify_fmt(1e-2)\r\n+call verify_fmt(-1e-7)\r\n+call verify_fmt(-1e-6)\r\n+call verify_fmt(-1e-5)\r\n+call verify_fmt(-1e-4)\r\n+call verify_fmt(-1e-3)\r\n+call verify_fmt(-1e-2)\r\n+call verify_fmt(tiny(0.0))\r\n+call verify_fmt(-tiny(0.0))\r\n+call verify_fmt(0.0)\r\n+call verify_fmt(-0.0)\r\n+call verify_fmt(100.0)\r\n+call verify_fmt(.12345)\r\n+call verify_fmt(1.2345)\r\n+call verify_fmt(12.345)\r\n+call verify_fmt(123.45)\r\n+call verify_fmt(1234.5)\r\n+call verify_fmt(12345.6)\r\n+call verify_fmt(123456.7)\r\n+call verify_fmt(99.999)\r\n+call verify_fmt(-100.0)\r\n+call verify_fmt(-99.999)\r\n+end\r\n+\r\n+! loop through values for w, d\r\n+subroutine verify_fmt(x)\r\n+    real, intent(in) :: x\r\n+    integer :: w, d\r\n+    character(len=80) :: str, str0\r\n+    integer :: len, len0\r\n+    character(len=80) :: fmt_w_d\r\n+    logical :: result, have_num, verify_fmt_w_d\r\n+    \r\n+    do d = 0, 10\r\n+        have_num = .false.\r\n+        do w = 1, 20\r\n+            str = fmt_w_d(x, w, d)\r\n+            len = len_trim(str)\r\n+            \r\n+            result = verify_fmt_w_d(x, str, len, w, d)\r\n+            if (.not. have_num .and. result) then\r\n+                have_num = .true.\r\n+                str0 = fmt_w_d(x, 0, d)\r\n+                len0 = len_trim(str0)\r\n+                if (len /= len0) then\r\n+                    call errormsg(x, str0, len0, 0, d, \"selected width is wrong\")\r\n+                else\r\n+                    if (str(:len) /= str0(:len0)) call errormsg(x, str0, len0, 0, d, \"output is wrong\")\r\n+                end if\r\n+            end if\r\n+        end do\r\n+    end do\r\n+\r\n+end subroutine\r\n+\r\n+! checks for standard-compliance, returns .true. if field contains number, .false. on overflow\r\n+function verify_fmt_w_d(x, str, len, w, d)\r\n+    real, intent(in) :: x\r\n+    character(len=80), intent(in) :: str\r\n+    integer, intent(in) :: len\r\n+    integer, intent(in) :: w, d\r\n+    logical :: verify_fmt_w_d\r\n+    integer :: pos\r\n+    character :: decimal_sep = \".\"\r\n+\r\n+    verify_fmt_w_d = .false.\r\n+    \r\n+    ! check if string is all asterisks\r\n+    pos = verify(str(:len), \"*\")\r\n+    if (pos == 0) return\r\n+    \r\n+    ! check if string contains a digit\r\n+    pos = scan(str(:len), \"0123456789\")\r\n+    if (pos == 0) call errormsg(x, str, len, w, d, \"no digits\")\r\n+\r\n+    ! contains decimal separator?\r\n+    pos = index(str(:len), decimal_sep)\r\n+    if (pos == 0) call errormsg(x, str, len, w, d, \"no decimal separator\")\r\n+    \r\n+    ! negative and starts with minus?\r\n+    if (sign(1., x) < 0.) then\r\n+        pos = verify(str, \" \")\r\n+        if (pos == 0) call errormsg(x, str, len, w, d, \"only spaces\")\r\n+        if (str(pos:pos) /= \"-\") call errormsg(x, str, len, w, d, \"no minus sign\")\r\n+    end if\r\n+    \r\n+    verify_fmt_w_d = .true.\r\n+end function\r\n+\r\n+function fmt_w_d(x, w, d)\r\n+    real, intent(in) :: x\r\n+    integer, intent(in) :: w, d\r\n+    character(len=*) :: fmt_w_d\r\n+    character(len=10) :: fmt, make_fmt\r\n+    \r\n+    fmt = make_fmt(w, d)\r\n+    write (fmt_w_d, fmt) x\r\n+end function\r\n+\r\n+function make_fmt(w, d)\r\n+    integer, intent(in) :: w, d\r\n+    character(len=10) :: make_fmt\r\n+    \r\n+    write (make_fmt,'(\"(f\",i0,\".\",i0,\")\")') w, d\r\n+end function\r\n+\r\n+subroutine errormsg(x, str, len, w, d, reason)\r\n+    real, intent(in) :: x\r\n+    character(len=80), intent(in) :: str\r\n+    integer, intent(in) :: len, w, d\r\n+    character(len=*), intent(in) :: reason\r\n+    integer :: fmt_len\r\n+    character(len=10) :: fmt, make_fmt\r\n+    \r\n+    fmt = make_fmt(w, d)\r\n+    fmt_len = len_trim(fmt)\r\n+    \r\n+    !print *, \"print '\", fmt(:fmt_len), \"', \", x, \" ! => \", str(:len), \": \", reason\r\n+    call abort\r\n+end subroutine\r"}]}