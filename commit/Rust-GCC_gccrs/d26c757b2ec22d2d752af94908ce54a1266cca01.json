{"sha": "d26c757b2ec22d2d752af94908ce54a1266cca01", "node_id": "C_kwDOANBUbNoAKGQyNmM3NTdiMmVjMjJkMmQ3NTJhZjk0OTA4Y2U1NGExMjY2Y2NhMDE", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-08T04:14:35Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-12T07:01:13Z"}, "message": "LoongArch: Add fscaleb.{s,d} instructions as ldexp{sf,df}3\n\nThis allows optimizing __builtin_ldexp{,f} and __builtin_scalbn{,f} with\n-fno-math-errno.\n\nIMODE is added because we can't hard code SI for operand 2: fscaleb.d\ninstruction always take the high half of both source registers into\naccount.  See my_ldexp_long in the test case.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FSCALEB): New unspec.\n\t(type): Add fscaleb.\n\t(IMODE): New mode attr.\n\t(ldexp<mode>3): New instruction template.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/fscaleb.c: New test.", "tree": {"sha": "975a8a0119a80e4550f7b35573e59b7aa0da5926", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/975a8a0119a80e4550f7b35573e59b7aa0da5926"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d26c757b2ec22d2d752af94908ce54a1266cca01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCY29EuQAKCRCsqtIOGecQ\n45YEAQCmbdRymaorPmRhEB2ov+U3Vpa0n5T18NdwZtcz+FFZ/AEAlylaRo8jhRzC\n03hoTPaDwDjxFcrM7exvINGgi8RY6AI=\n=OCY/\n-----END PGP SIGNATURE-----", "payload": "tree 975a8a0119a80e4550f7b35573e59b7aa0da5926\nparent 51a233b97cc9c51e63f03f2f5554e905f3f6c054\nauthor Xi Ruoyao <xry111@xry111.site> 1667880875 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1668236473 +0800\n\nLoongArch: Add fscaleb.{s,d} instructions as ldexp{sf,df}3\n\nThis allows optimizing __builtin_ldexp{,f} and __builtin_scalbn{,f} with\n-fno-math-errno.\n\nIMODE is added because we can't hard code SI for operand 2: fscaleb.d\ninstruction always take the high half of both source registers into\naccount.  See my_ldexp_long in the test case.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FSCALEB): New unspec.\n\t(type): Add fscaleb.\n\t(IMODE): New mode attr.\n\t(ldexp<mode>3): New instruction template.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/fscaleb.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26c757b2ec22d2d752af94908ce54a1266cca01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26c757b2ec22d2d752af94908ce54a1266cca01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26c757b2ec22d2d752af94908ce54a1266cca01/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51a233b97cc9c51e63f03f2f5554e905f3f6c054", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a233b97cc9c51e63f03f2f5554e905f3f6c054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a233b97cc9c51e63f03f2f5554e905f3f6c054"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "c141c9adde20f0efc8fdf456f36d8b3516f4c425", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26c757b2ec22d2d752af94908ce54a1266cca01/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26c757b2ec22d2d752af94908ce54a1266cca01/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=d26c757b2ec22d2d752af94908ce54a1266cca01", "patch": "@@ -41,6 +41,7 @@\n   UNSPEC_FTINT\n   UNSPEC_FTINTRM\n   UNSPEC_FTINTRP\n+  UNSPEC_FSCALEB\n \n   ;; Override return address for exception handling.\n   UNSPEC_EH_RETURN\n@@ -220,6 +221,7 @@\n ;; fcmp\t\tfloating point compare\n ;; fcopysign\tfloating point copysign\n ;; fcvt\t\tfloating point convert\n+;; fscaleb\tfloating point scale\n ;; fsqrt\tfloating point square root\n ;; frsqrt       floating point reciprocal square root\n ;; multi\tmultiword sequence (or user asm statements)\n@@ -231,8 +233,8 @@\n   \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,\n    prefetch,prefetchx,condmove,mgtf,mftg,const,arith,logical,\n    shift,slt,signext,clz,trap,imul,idiv,move,\n-   fmove,fadd,fmul,fmadd,fdiv,frdiv,fabs,fneg,fcmp,fcopysign,fcvt,fsqrt,\n-   frsqrt,accext,accmod,multi,atomic,syncloop,nop,ghost\"\n+   fmove,fadd,fmul,fmadd,fdiv,frdiv,fabs,fneg,fcmp,fcopysign,fcvt,fscaleb,\n+   fsqrt,frsqrt,accext,accmod,multi,atomic,syncloop,nop,ghost\"\n   (cond [(eq_attr \"jirl\" \"!unset\") (const_string \"call\")\n \t (eq_attr \"got\" \"load\") (const_string \"load\")\n \n@@ -418,6 +420,10 @@\n ;; the controlling mode.\n (define_mode_attr HALFMODE [(DF \"SI\") (DI \"SI\") (TF \"DI\")])\n \n+;; This attribute gives the integer mode that has the same size of a\n+;; floating-point mode.\n+(define_mode_attr IMODE [(SF \"SI\") (DF \"DI\")])\n+\n ;; This code iterator allows signed and unsigned widening multiplications\n ;; to use the same template.\n (define_code_iterator any_extend [sign_extend zero_extend])\n@@ -1014,7 +1020,23 @@\n   \"fcopysign.<fmt>\\t%0,%1,%2\"\n   [(set_attr \"type\" \"fcopysign\")\n    (set_attr \"mode\" \"<UNITMODE>\")])\n+\f\n+;;\n+;;  ....................\n+;;\n+;;\tFLOATING POINT SCALE\n+;;\n+;;  ....................\n \n+(define_insn \"ldexp<mode>3\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(unspec:ANYF [(match_operand:ANYF    1 \"register_operand\" \"f\")\n+\t\t      (match_operand:<IMODE> 2 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_FSCALEB))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"fscaleb.<fmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"fscaleb\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n \f\n ;;\n ;;  ..................."}, {"sha": "f18470fbb8fb0ba18596716a30280af1a0027721", "filename": "gcc/testsuite/gcc.target/loongarch/fscaleb.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d26c757b2ec22d2d752af94908ce54a1266cca01/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffscaleb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d26c757b2ec22d2d752af94908ce54a1266cca01/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffscaleb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Ffscaleb.c?ref=d26c757b2ec22d2d752af94908ce54a1266cca01", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mabi=lp64d -mdouble-float -fno-math-errno\" } */\n+/* { dg-final { scan-assembler-times \"fscaleb\\\\.s\" 3 } } */\n+/* { dg-final { scan-assembler-times \"fscaleb\\\\.d\" 4 } } */\n+/* { dg-final { scan-assembler-times \"slli\\\\.w\" 1 } } */\n+\n+double\n+my_scalbln (double a, long b)\n+{\n+  return __builtin_scalbln (a, b);\n+}\n+\n+double\n+my_scalbn (double a, int b)\n+{\n+  return __builtin_scalbn (a, b);\n+}\n+\n+double\n+my_ldexp (double a, int b)\n+{\n+  return __builtin_ldexp (a, b);\n+}\n+\n+float\n+my_scalblnf (float a, long b)\n+{\n+  return __builtin_scalblnf (a, b);\n+}\n+\n+float\n+my_scalbnf (float a, int b)\n+{\n+  return __builtin_scalbnf (a, b);\n+}\n+\n+float\n+my_ldexpf (float a, int b)\n+{\n+  return __builtin_ldexpf (a, b);\n+}\n+\n+/* b must be sign-extended */\n+double\n+my_ldexp_long (double a, long b)\n+{\n+  return __builtin_ldexp (a, b);\n+}"}]}