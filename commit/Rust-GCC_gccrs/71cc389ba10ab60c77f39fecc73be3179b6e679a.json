{"sha": "71cc389ba10ab60c77f39fecc73be3179b6e679a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFjYzM4OWJhMTBhYjYwYzc3ZjM5ZmVjYzczYmUzMTc5YjZlNjc5YQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-03-11T05:54:35Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-03-11T05:54:35Z"}, "message": "c-typeck.c, [...]: Fix comment typos and formatting.\n\n\t* c-typeck.c, combine.c, cse.c, dominance.c, et-forest.h,\n\tggc-page.c, var-tracking.c, config/fp-bit.c, config/c4x/c4x.c,\n\tconfig/cris/cris.c, config/i386/ppro.md, config/i860/i860.c,\n\tconfig/i860/i860.h, config/m32r/m32r.h, config/m32r/xm-m32r.h,\n\tconfig/m68hc11/m68hc11.h, config/m68hc11/m68hc11.md,\n\tconfig/mips/mips.c, config/mmix/mmix.c, config/ns32k/ns32k.h,\n\tconfig/pa/pa.c, config/pa/pa32-regs.h, config/pa/pa64-regs.h,\n\tconfig/pdp11/pdp11.h, config/rs6000/rs6000.c,\n\tconfig/stormy16/stormy16.c: Fix comment typos and formatting.\n\nFrom-SVN: r79303", "tree": {"sha": "89a9c30bd0acac2c00212347139e5c50102d1fce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89a9c30bd0acac2c00212347139e5c50102d1fce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71cc389ba10ab60c77f39fecc73be3179b6e679a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cc389ba10ab60c77f39fecc73be3179b6e679a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cc389ba10ab60c77f39fecc73be3179b6e679a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cc389ba10ab60c77f39fecc73be3179b6e679a/comments", "author": null, "committer": null, "parents": [{"sha": "f3c9f174d1fcbd42b23f2b9311bbb3dfac8148b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3c9f174d1fcbd42b23f2b9311bbb3dfac8148b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3c9f174d1fcbd42b23f2b9311bbb3dfac8148b5"}], "stats": {"total": 108, "additions": 60, "deletions": 48}, "files": [{"sha": "0eca03a925eb790050ade2fb121d311f6cce6399", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -1,3 +1,15 @@\n+2004-03-11  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-typeck.c, combine.c, cse.c, dominance.c, et-forest.h,\n+\tggc-page.c, var-tracking.c, config/fp-bit.c, config/c4x/c4x.c,\n+\tconfig/cris/cris.c, config/i386/ppro.md, config/i860/i860.c,\n+\tconfig/i860/i860.h, config/m32r/m32r.h, config/m32r/xm-m32r.h,\n+\tconfig/m68hc11/m68hc11.h, config/m68hc11/m68hc11.md,\n+\tconfig/mips/mips.c, config/mmix/mmix.c, config/ns32k/ns32k.h,\n+\tconfig/pa/pa.c, config/pa/pa32-regs.h, config/pa/pa64-regs.h,\n+\tconfig/pdp11/pdp11.h, config/rs6000/rs6000.c,\n+\tconfig/stormy16/stormy16.c: Fix comment typos and formatting.\n+\n 2004-03-11  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* configure: Regenerate, since I forgot to while committing Paolo's"}, {"sha": "20768cc48bcfb833e002b4ec21f5d71853894cd8", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -702,7 +702,7 @@ tagged_types_tu_compatible_p (tree t1, tree t2, int flags)\n     case ENUMERAL_TYPE:\n       {\n       \n-        /* Speed up the case where the type values are in the same order. */\n+        /* Speed up the case where the type values are in the same order.  */\n         tree tv1 = TYPE_VALUES (t1);\n         tree tv2 = TYPE_VALUES (t2);\n         "}, {"sha": "497e8263ad97efe568d2ec935821162b854576e3", "filename": "gcc/combine.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -6843,7 +6843,7 @@ force_to_mode (rtx x, enum machine_mode mode, unsigned HOST_WIDE_INT mask,\n \t      int width = GET_MODE_BITSIZE (GET_MODE (x));\n \t      rtx y;\n \n-\t      /* If MODE is narrower that HOST_WIDE_INT and CVAL is a negative\n+\t      /* If MODE is narrower than HOST_WIDE_INT and CVAL is a negative\n \t\t number, sign extend it.  */\n \t      if (width > 0 && width < HOST_BITS_PER_WIDE_INT\n \t\t  && (cval & ((HOST_WIDE_INT) 1 << (width - 1))) != 0)"}, {"sha": "7500526d4356b476a8f6280df62934e8820e40d0", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -766,7 +766,7 @@ c4x_leaf_function_p (void)\n      to save/restore the registers we actually use.\n      For the global variable leaf_function to be set, we need\n      to define LEAF_REGISTERS and all that it entails.\n-     Let's check ourselves...   */\n+     Let's check ourselves....  */\n \n   if (lookup_attribute (\"leaf_pretend\",\n \t\t\tTYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n@@ -929,7 +929,7 @@ c4x_expand_prologue (void)\n \t}\n       else\n \t{\n-\t  /* If we use ar3, we need to push it.   */\n+\t  /* If we use ar3, we need to push it.  */\n \t  dont_push_ar3 = 0;\n \t  if ((size != 0) || (current_function_args_size != 0))\n \t    {"}, {"sha": "86795af91ffb422e71ddfab2b043b30ceb40f373", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -462,7 +462,7 @@ cris_mem_call_operand (rtx op, enum machine_mode mode)\n   return cris_general_operand_or_symbol (xmem, GET_MODE (op));\n }\n \n-/* The CONDITIONAL_REGISTER_USAGE worker.   */\n+/* The CONDITIONAL_REGISTER_USAGE worker.  */\n \n void\n cris_conditional_register_usage (void)"}, {"sha": "748e24baa2efca16d4e1fc7262b4bc4c41a19cca", "filename": "gcc/config/fp-bit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Ffp-bit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Ffp-bit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffp-bit.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -915,7 +915,7 @@ _fpmul_parts ( fp_number_type *  a,\n \t{\n \t  /* We're a further than half way by a small amount corresponding\n \t     to the bits set in \"low\".  Knowing that, we round here and\n-\t     not in pack_d, because there we don't have \"low\" avaliable\n+\t     not in pack_d, because there we don't have \"low\" available\n \t     anymore.  */\n \t  high += GARDROUND + 1;\n \n@@ -1034,7 +1034,7 @@ _fpdiv_parts (fp_number_type * a,\n \t    /* We're a further than half way by the small amount\n \t       corresponding to the bits set in \"numerator\".  Knowing\n \t       that, we round here and not in pack_d, because there we\n-\t       don't have \"numerator\" avaliable anymore.  */\n+\t       don't have \"numerator\" available anymore.  */\n \t    quotient += GARDROUND + 1;\n \n \t    /* Avoid further rounding in pack_d.  */"}, {"sha": "c8bd5b45b728c2c12c3209e0efff05e95d7de647", "filename": "gcc/config/i386/ppro.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi386%2Fppro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi386%2Fppro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fppro.md?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -18,7 +18,7 @@\n ;; the Free Software Foundation, 59 Temple Place - Suite 330,\n ;; Boston, MA 02111-1307, USA.  */\n \n-;; The P6 familiy includes the Pentium Pro, Pentium II, Pentium III, Celeron\n+;; The P6 family includes the Pentium Pro, Pentium II, Pentium III, Celeron\n ;; and Xeon lines of CPUs.  The DFA scheduler description in this file is\n ;; based on information that can be found in the following three documents:\n ;;\n@@ -111,7 +111,7 @@\n ;; P3FPU\n ;;\n ;; (SAC=Store Address Calculation, SDA=Store Data Unit, P3FPU = SSE unit,\n-;;  JUE = Jump Execution Unit, AGU = Addres Generation Unit)\n+;;  JUE = Jump Execution Unit, AGU = Address Generation Unit)\n ;;\n (define_cpu_unit \"p0,p1\" \"ppro_core\")\n (define_cpu_unit \"p2\" \"ppro_load\")\n@@ -135,7 +135,7 @@\n ;; doesn't make sense because we don't know how these instructions are\n ;; executed in the core.  So we just model that they can only be decoded\n ;; on decoder 0, and say that it takes a little while before the result\n-;; is availale.\n+;; is available.\n (define_insn_reservation \"ppro_complex_insn\" 6\n \t\t\t (eq_attr \"type\" \"other,multi,call,callv,str\")\n \t\t\t \"decoder0\")\n@@ -200,14 +200,14 @@\n \t\t\t      (eq_attr \"type\" \"cld\"))\n \t\t\t \"decoder0,(p0+p1)*2\")\n \n-;; The P6 has a sophisticated branch prediction mechanism to miminize\n+;; The P6 has a sophisticated branch prediction mechanism to minimize\n ;; latencies due to branching.  In particular, it has a fast way to\n ;; execute branches that are taken multiple times (such as in loops).\n ;; Branches not taken suffer no penalty, and correctly predicted\n ;; branches cost only one fetch cycle.  Mispredicted branches are very\n ;; costly: typically 15 cycles and possibly as many as 26 cycles.\n ;;\n-;; Unfortunatetely all this makes it quite difficult to properly model\n+;; Unfortunately all this makes it quite difficult to properly model\n ;; the latencies for the compiler.  Here I've made the choice to be\n ;; optimistic and assume branches are often predicted correctly, so\n ;; they have latency 1, and the decoders are not blocked."}, {"sha": "7c455eb3d617afae5b278572a511332c5d6b8f4f", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -159,7 +159,7 @@ reg_clobbered_p (rtx reg, rtx in)\n \t  /* Anything that sets just part of the register\n \t     is considered using as well as setting it.\n \t     But note that a straight SUBREG of a single-word value\n-\t     clobbers the entire value.   */\n+\t     clobbers the entire value.  */\n \t  if (dest != SET_DEST (in)\n \t      && ! (GET_CODE (SET_DEST (in)) == SUBREG\n \t\t    || UNITS_PER_WORD >= GET_MODE_SIZE (GET_MODE (dest))))\n@@ -766,7 +766,7 @@ load_opcode (enum machine_mode mode, const char *args, rtx reg)\n /* Return a template for a store instruction with mode MODE and\n    arguments from the string ARGS.\n \n-   This string is in static storage.   */\n+   This string is in static storage.  */\n \n static const char *\n store_opcode (enum machine_mode mode, const char *args, rtx reg)"}, {"sha": "6e451e5da8d2185bfae4a48becca97b1e1079655", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -271,7 +271,7 @@ enum reg_class { NO_REGS, GENERAL_REGS, FP_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n  {\"NO_REGS\", \"GENERAL_REGS\", \"FP_REGS\", \"ALL_REGS\" }"}, {"sha": "f2574ac4dd33b7d821414cdbdcc6b0140ced5662", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -737,7 +737,7 @@ enum reg_class\n \n #define N_REG_CLASSES ((int) LIM_REG_CLASSES)\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n #define REG_CLASS_NAMES \\\n   { \"NO_REGS\", \"CARRY_REG\", \"ACCUM_REGS\", \"GENERAL_REGS\", \"ALL_REGS\" }\n \n@@ -1764,7 +1764,7 @@ extern char m32r_punct_chars[256];\n extern struct rtx_def * m32r_compare_op0;\n extern struct rtx_def * m32r_compare_op1;\n \n-/* M32R function types.   */\n+/* M32R function types.  */\n enum m32r_function_type\n {\n   M32R_FUNCTION_UNKNOWN, M32R_FUNCTION_NORMAL, M32R_FUNCTION_INTERRUPT"}, {"sha": "a06ad8afc5af39f586dcc9472d2a4f8a22015c05", "filename": "gcc/config/m32r/xm-m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -30,7 +30,7 @@\n #define HOST_WORDS_BIG_ENDIAN    1\n \n /* target machine dependencies.\n-   tm.h is a symbolic link to the actual target specific file.   */\n+   tm.h is a symbolic link to the actual target specific file.  */\n #include \"tm.h\"\n \n /* Arguments to use with `exit'.  */"}, {"sha": "8dfd83fcec91f1e2351bed65b3e4526fe27e936e", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -1599,7 +1599,7 @@ do {                                                                    \\\n    sections when it shrinks the code.  This results in invalid addresses\n    when debugging.  This does not bless too much the HC11/HC12 as most\n    applications are embedded and small, hence a reasonable debug info.\n-   This problem is known for binutils 2.13, 2.14 and mainline.   */\n+   This problem is known for binutils 2.13, 2.14 and mainline.  */\n #undef HAVE_AS_DWARF2_DEBUG_LINE\n \n /* The prefix for local labels.  You should be able to define this as"}, {"sha": "71c45ff597a4256bcd3f9a6bccd8bd8de2db66d6", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -7204,7 +7204,7 @@\n \n ;;\n ;; Remove one load when copying a value to/from memory and also\n-;; to a register.  Take care not cloberring a possible register used\n+;; to a register.  Take care not clobbering a possible register used\n ;; by operand 2.\n ;; Replace: \"ldd 0,y; std 2,y; ldx 0,y\" into \"ldx 0,y; stx 2,y\"\n ;;"}, {"sha": "c99053b40083c54cd6dc2580357f26f8e4f913fc", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -3904,7 +3904,7 @@ mips_setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n \t  int off, i;\n \n \t  /* Set OFF to the offset from virtual_incoming_args_rtx of\n-\t     the first float register.   The FP save area lies below\n+\t     the first float register.  The FP save area lies below\n \t     the integer one, and is aligned to UNITS_PER_FPVALUE bytes.  */\n \t  off = -gp_saved * UNITS_PER_WORD;\n \t  off &= ~(UNITS_PER_FPVALUE - 1);\n@@ -5976,7 +5976,7 @@ mips_output_aligned_decl_common (FILE *stream, tree decl, const char *name,\n \t\t\t\t unsigned int align)\n {\n   /* If the target wants uninitialized const declarations in\n-     .rdata then don't put them in .comm.   */\n+     .rdata then don't put them in .comm.  */\n   if (TARGET_EMBEDDED_DATA && TARGET_UNINIT_CONST_IN_RODATA\n       && TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl)\n       && (DECL_INITIAL (decl) == 0 || DECL_INITIAL (decl) == error_mark_node))\n@@ -7019,7 +7019,7 @@ mips_expand_epilogue (int sibcall_p)\n \t\t\t      stack_pointer_rtx,\n \t\t\t      GEN_INT (step2)));\n \n-  /* Add in the __builtin_eh_return stack adjustment.   We need to\n+  /* Add in the __builtin_eh_return stack adjustment.  We need to\n      use a temporary in mips16 code.  */\n   if (current_function_calls_eh_return)\n     {\n@@ -9189,7 +9189,7 @@ mips_output_conditional_branch (rtx insn, rtx *operands, int two_operands_p,\n    the division is not immediately followed by a shift[1][2].  We also\n    need to stop the division from being put into a branch delay slot[3].\n    The easiest way to avoid both problems is to add a nop after the\n-   division.  When a divide-by-zero check is neeeded, this nop can be\n+   division.  When a divide-by-zero check is needed, this nop can be\n    used to fill the branch delay slot.\n \n    [1] If a double-word or a variable shift executes immediately"}, {"sha": "8bf8e0eae5e78ee94b1e282da3ac8b26c9cbcc65", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -838,7 +838,7 @@ mmix_setup_incoming_varargs (CUMULATIVE_ARGS *args_so_farp,\n     *pretend_sizep = (MMIX_MAX_ARGS_IN_REGS - (args_so_farp->regs + 1)) * 8;\n \n   /* We assume that one argument takes up one register here.  That should\n-     be true until we start messing with multi-reg parameters.   */\n+     be true until we start messing with multi-reg parameters.  */\n   if ((7 + (MMIX_FUNCTION_ARG_SIZE (mode, vartype))) / 8 != 1)\n     internal_error (\"MMIX Internal: Last named vararg would not fit in a register\");\n }"}, {"sha": "0730a5f0e0eb47383d893dd0437a9887998c8d81", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -433,7 +433,7 @@ enum reg_class\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES\t\t\t\t\t\t\t    \\\n  {\"NO_REGS\", \"GENERAL_REGS\", \"FLOAT_REG0\", \"LONG_FLOAT_REG0\", \"FLOAT_REGS\", \\"}, {"sha": "d9dea93304d329055e6c07b514bc3dbf2da7a50b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -1508,7 +1508,7 @@ emit_move_sequence (rtx *operands, enum machine_mode mode, rtx scratch_reg)\n      We have to do this because the REG_POINTER flag is not correctly\n      carried through various optimization passes and CSE may substitute\n      a pseudo without the pointer set for one with the pointer set.  As\n-     a result, we loose various opportunites to create insns with\n+     a result, we loose various opportunities to create insns with\n      unscaled indexed addresses.  */\n   if (!TARGET_NO_SPACE_REGS\n       && !cse_not_expected\n@@ -2192,7 +2192,7 @@ read_only_operand (rtx operand, enum machine_mode mode ATTRIBUTE_UNUSED)\n \n \f\n /* Return the best assembler insn template\n-   for moving operands[1] into operands[0] as a fullword.   */\n+   for moving operands[1] into operands[0] as a fullword.  */\n const char *\n singlemove_string (rtx *operands)\n {\n@@ -2655,7 +2655,7 @@ find_addr_reg (rtx addr)\n    OPERANDS[3] is a register for temporary storage.\n    OPERANDS[4] is the size as a CONST_INT\n    OPERANDS[5] is the alignment safe to use, as a CONST_INT.\n-   OPERANDS[6] is another temporary register.   */\n+   OPERANDS[6] is another temporary register.  */\n \n const char *\n output_block_move (rtx *operands, int size_is_constant ATTRIBUTE_UNUSED)\n@@ -3142,7 +3142,7 @@ output_ascii (FILE *file, const char *p, int size)\n {\n   int i;\n   int chars_output;\n-  unsigned char partial_output[16];\t/* Max space 4 chars can occupy.   */\n+  unsigned char partial_output[16];\t/* Max space 4 chars can occupy.  */\n \n   /* The HP assembler can only take strings of 256 characters at one\n      time.  This is a limitation on input line length, *not* the\n@@ -6725,7 +6725,7 @@ output_dbra (rtx *operands, rtx insn, int which_alternative)\n   else\n     {\n       /* Reload loop counter from memory, the store back to memory\n-\t happens in the branch's delay slot.   */\n+\t happens in the branch's delay slot.  */\n       output_asm_insn (\"ldw %0,%4\", operands);\n       if (get_attr_length (insn) == 12)\n \treturn \"addib,%C2 %1,%4,%3\\n\\tstw %4,%0\";\n@@ -6828,7 +6828,7 @@ output_movb (rtx *operands, rtx insn, int which_alternative,\n   else if (which_alternative == 2)\n     {\n       /* Reload loop counter from memory, the store back to memory\n-\t happens in the branch's delay slot.   */\n+\t happens in the branch's delay slot.  */\n       if (get_attr_length (insn) == 8)\n \treturn \"{comb|cmpb},%S2 %%r0,%1,%3\\n\\tstw %1,%0\";\n       else"}, {"sha": "3a51324c8fc5b76db8c86183175c2b08ad99288b", "filename": "gcc/config/pa/pa32-regs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa32-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa32-regs.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -228,7 +228,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n   {\"NO_REGS\", \"R1_REGS\", \"GENERAL_REGS\", \"FPUPPER_REGS\", \"FP_REGS\", \\\n@@ -262,7 +262,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n    : SHIFT_REGS)\n \n /* Get reg_class from a letter such as appears in the machine description.  */\n-/* Keep 'x' for backward compatibility with user asm.   */\n+/* Keep 'x' for backward compatibility with user asm.  */\n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'f' ? FP_REGS :\t\t\t\t\t\\\n    (C) == 'y' ? FPUPPER_REGS :\t\t\t\t\t\\"}, {"sha": "b139777e5e5b52965c5b922a5b67635d1d62ecc9", "filename": "gcc/config/pa/pa64-regs.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpa%2Fpa64-regs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-regs.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -211,7 +211,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n \n #define N_REG_CLASSES (int) LIM_REG_CLASSES\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES \\\n   {\"NO_REGS\", \"R1_REGS\", \"GENERAL_REGS\", \"FPUPPER_REGS\", \"FP_REGS\", \\\n@@ -257,7 +257,7 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS,\n \n \n /* Get reg_class from a letter such as appears in the machine description.  */\n-/* Keep 'x' for backward compatibility with user asm.   */\n+/* Keep 'x' for backward compatibility with user asm.  */\n #define REG_CLASS_FROM_LETTER(C) \\\n   ((C) == 'f' ? FP_REGS :\t\t\t\t\t\\\n    (C) == 'y' ? FP_REGS :\t\t\t\t\t\\"}, {"sha": "5e360421e015b815efb40fe52d761e77a815210d", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -390,7 +390,7 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n \n /* #define GENERAL_REGS ALL_REGS */\n \n-/* Give names of register classes as strings for dump file.   */\n+/* Give names of register classes as strings for dump file.  */\n \n #define REG_CLASS_NAMES {\"NO_REGS\", \"MUL_REGS\", \"GENERAL_REGS\", \"LOAD_FPU_REGS\", \"NO_LOAD_FPU_REGS\", \"FPU_REGS\", \"ALL_REGS\" }\n "}, {"sha": "6ed984c5fa50d124961b7515863e897dd9dd8d3e", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -2349,7 +2349,7 @@ rs6000_special_round_type_align (tree type, int computed, int specified)\n   tree field = TYPE_FIELDS (type);\n \n   /* Skip all the static variables only if ABI is greater than\n-     1 or equal to 0.   */\n+     1 or equal to 0.  */\n   while (field != NULL && TREE_CODE (field) == VAR_DECL)\n     field = TREE_CHAIN (field);\n "}, {"sha": "9ba54c199535141ebc4f7441954715379914a0c7", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -1489,7 +1489,7 @@ xstormy16_asm_out_destructor (rtx symbol, int priority)\n   const char *section = \".dtors\";\n   char buf[16];\n \n-  /* ??? This only works reliably with the GNU linker.   */\n+  /* ??? This only works reliably with the GNU linker.  */\n   if (priority != DEFAULT_INIT_PRIORITY)\n     {\n       sprintf (buf, \".dtors.%.5u\",\n@@ -1511,7 +1511,7 @@ xstormy16_asm_out_constructor (rtx symbol, int priority)\n   const char *section = \".ctors\";\n   char buf[16];\n \n-  /* ??? This only works reliably with the GNU linker.   */\n+  /* ??? This only works reliably with the GNU linker.  */\n   if (priority != DEFAULT_INIT_PRIORITY)\n     {\n       sprintf (buf, \".ctors.%.5u\","}, {"sha": "d93fb84a0002d0850d3d1b412c944e0996247b59", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -5118,7 +5118,7 @@ cse_insn (rtx insn, rtx libcall_insn)\n       /* See if a MEM has already been loaded with a widening operation;\n \t if it has, we can use a subreg of that.  Many CISC machines\n \t also have such operations, but this is only likely to be\n-\t beneficial these machines.  */\n+\t beneficial on these machines.  */\n \n       if (flag_expensive_optimizations && src_related == 0\n \t  && (GET_MODE_SIZE (mode) < UNITS_PER_WORD)"}, {"sha": "793820557fed22d45f8e7aff1b07dabe63e68ca6", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -772,7 +772,7 @@ verify_dominators (enum cdi_direction dir)\n /* Determine immediate dominator (or postdominator, according to DIR) of BB,\n    assuming that dominators of other blocks are correct.  We also use it to\n    recompute the dominators in a restricted area, by iterating it until it\n-   reaches a fixpoint.  */\n+   reaches a fixed point.  */\n \n basic_block\n recount_dominator (enum cdi_direction dir, basic_block bb)"}, {"sha": "ca875d67d0f8529f5855756af365622da9c3ee22", "filename": "gcc/et-forest.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fet-forest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fet-forest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.h?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -67,8 +67,8 @@ struct et_node\n   struct et_node *left;\n   struct et_node *right;\t/* The brothers of the node.  */\n \n-  struct et_occ *rightmost_occ;\t/* The rightmost occurence.  */\n-  struct et_occ *parent_occ;\t/* The occurence of the parent node.  */\n+  struct et_occ *rightmost_occ;\t/* The rightmost occurrence.  */\n+  struct et_occ *parent_occ;\t/* The occurrence of the parent node.  */\n };\n \n struct et_node *et_new_tree (void *data);"}, {"sha": "a45c76a566a0c69638f18b716049fe29c4ddc55f", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -249,7 +249,7 @@ typedef struct page_entry\n \n   /* The previous page-entry with objects of the same size, or NULL if\n      this is the first page-entry.   The PREV pointer exists solely to\n-     keep the cost of ggc_free managable.  */\n+     keep the cost of ggc_free manageable.  */\n   struct page_entry *prev;\n \n   /* The number of bytes allocated.  (This will always be a multiple"}, {"sha": "2d2426272261f1a5ff403312b062310ab6460575", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71cc389ba10ab60c77f39fecc73be3179b6e679a/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=71cc389ba10ab60c77f39fecc73be3179b6e679a", "patch": "@@ -1226,15 +1226,15 @@ dataflow_set_different_1 (void **slot, void *data)\n     {\n       dataflow_set_different_value = true;\n \n-      /* Stop traversing the hash table.   */\n+      /* Stop traversing the hash table.  */\n       return 0;\n     }\n \n   if (variable_different_p (var1, var2))\n     {\n       dataflow_set_different_value = true;\n \n-      /* Stop traversing the hash table.   */\n+      /* Stop traversing the hash table.  */\n       return 0;\n     }\n \n@@ -1258,7 +1258,7 @@ dataflow_set_different_2 (void **slot, void *data)\n     {\n       dataflow_set_different_value = true;\n \n-      /* Stop traversing the hash table.   */\n+      /* Stop traversing the hash table.  */\n       return 0;\n     }\n "}]}