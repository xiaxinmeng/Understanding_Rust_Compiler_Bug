{"sha": "01177669b2eabfb1ddb3290c35bc110980b44d62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDExNzc2NjliMmVhYmZiMWRkYjMyOTBjMzViYzExMDk4MGI0NGQ2Mg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2015-03-09T18:26:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2015-03-09T18:26:52Z"}, "message": "re PR c/65120 (Wlogical-not-parentheses should not warn about double exclamation !!)\n\n\tPR c/65120\n\t* c-typeck.c (parser_build_binary_op): Don't warn for\n\t!!x == y or !b == y where b is _Bool.\n\n\t* parser.c (cp_parser_binary_expression): Don't warn for\n\t!!x == y or !b == y where b is bool.\n\n\t* c-c++-common/pr49706.c: Adjust tests for not warning\n\tabout !!x == y or !b == y where b is boolean, and add\n\tsome further tests.\n\t* c-c++-common/pr62199-2.c: Likewise.\n\nFrom-SVN: r221284", "tree": {"sha": "2111b63d7da0a0531f8135d1ab1f64662e3887af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2111b63d7da0a0531f8135d1ab1f64662e3887af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01177669b2eabfb1ddb3290c35bc110980b44d62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01177669b2eabfb1ddb3290c35bc110980b44d62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01177669b2eabfb1ddb3290c35bc110980b44d62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01177669b2eabfb1ddb3290c35bc110980b44d62/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ee876e59156337667c4945c3346c0c7876f3a98c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee876e59156337667c4945c3346c0c7876f3a98c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee876e59156337667c4945c3346c0c7876f3a98c"}], "stats": {"total": 162, "additions": 142, "deletions": 20}, "files": [{"sha": "7b81080a34f0d68ae14da6a27dd70a88806d9cbf", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -1,3 +1,9 @@\n+2015-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/65120\n+\t* c-typeck.c (parser_build_binary_op): Don't warn for\n+\t!!x == y or !b == y where b is _Bool.\n+\n 2015-03-09  Marek Polacek  <polacek@redhat.com>\n \n \t* c-convert.c (convert): Make use of do_ubsan_in_current_function."}, {"sha": "98bff32f17e3e8b229f3fc2b75a8ade79d098d45", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -3460,8 +3460,34 @@ parser_build_binary_op (location_t location, enum tree_code code,\n \n   if (warn_logical_not_paren\n       && code1 == TRUTH_NOT_EXPR\n-      && code2 != TRUTH_NOT_EXPR)\n-    warn_logical_not_parentheses (location, code, arg2.value);\n+      && code2 != TRUTH_NOT_EXPR\n+      /* Avoid warning for !!x == y.  */\n+      && (TREE_CODE (arg1.value) != NE_EXPR\n+\t  || !integer_zerop (TREE_OPERAND (arg1.value, 1))))\n+    {\n+      /* Avoid warning for !b == y where b has _Bool type.  */\n+      tree t = integer_zero_node;\n+      if (TREE_CODE (arg1.value) == EQ_EXPR\n+\t  && integer_zerop (TREE_OPERAND (arg1.value, 1))\n+\t  && TREE_TYPE (TREE_OPERAND (arg1.value, 0)) == integer_type_node)\n+\t{\n+\t  t = TREE_OPERAND (arg1.value, 0);\n+\t  do\n+\t    {\n+\t      if (TREE_TYPE (t) != integer_type_node)\n+\t\tbreak;\n+\t      if (TREE_CODE (t) == C_MAYBE_CONST_EXPR)\n+\t\tt = C_MAYBE_CONST_EXPR_EXPR (t);\n+\t      else if (CONVERT_EXPR_P (t))\n+\t\tt = TREE_OPERAND (t, 0);\n+\t      else\n+\t\tbreak;\n+\t    }\n+\t  while (1);\n+\t}\n+      if (TREE_CODE (TREE_TYPE (t)) != BOOLEAN_TYPE)\n+\twarn_logical_not_parentheses (location, code, arg2.value);\n+    }\n \n   /* Warn about comparisons against string literals, with the exception\n      of testing for equality or inequality of a string literal with NULL.  */"}, {"sha": "cd2d0765998bd412ddd2e116ebc2fedea386c5b4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -1,3 +1,9 @@\n+2015-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/65120\n+\t* parser.c (cp_parser_binary_expression): Don't warn for\n+\t!!x == y or !b == y where b is bool.\n+\n 2015-03-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* ptree.c (cxx_print_lambda_node): New."}, {"sha": "2a3578fee3c52d7552395c05dbd29ad9651db533", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -8270,7 +8270,20 @@ cp_parser_binary_expression (cp_parser* parser, bool cast_p,\n \tc_inhibit_evaluation_warnings -= current.lhs == truthvalue_true_node;\n \n       if (warn_logical_not_paren\n-\t  && current.lhs_type == TRUTH_NOT_EXPR)\n+\t  && current.lhs_type == TRUTH_NOT_EXPR\n+\t  /* Avoid warning for !!x == y.  */\n+\t  && (TREE_CODE (current.lhs) != NE_EXPR\n+\t      || !integer_zerop (TREE_OPERAND (current.lhs, 1)))\n+\t  && (TREE_CODE (current.lhs) != TRUTH_NOT_EXPR\n+\t      || (TREE_CODE (TREE_OPERAND (current.lhs, 0)) != TRUTH_NOT_EXPR\n+\t\t  /* Avoid warning for !b == y where b is boolean.  */\n+\t\t  && (TREE_TYPE (TREE_OPERAND (current.lhs, 0)) == NULL_TREE\n+\t\t      || (TREE_CODE (TREE_TYPE (TREE_OPERAND (current.lhs, 0)))\n+\t\t\t  != BOOLEAN_TYPE))))\n+\t  /* Avoid warning for !!b == y where b is boolean.  */\n+\t  && (!DECL_P (current.lhs)\n+\t      || TREE_TYPE (current.lhs) == NULL_TREE\n+\t      || TREE_CODE (TREE_TYPE (current.lhs)) != BOOLEAN_TYPE))\n \twarn_logical_not_parentheses (current.loc, current.tree_type, rhs);\n \n       overload = NULL;"}, {"sha": "2287409fb0a4f8f1a688088f79c561f3e0b677dd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -1,3 +1,11 @@\n+2015-03-09  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/65120\n+\t* c-c++-common/pr49706.c: Adjust tests for not warning\n+\tabout !!x == y or !b == y where b is boolean, and add\n+\tsome further tests.\n+\t* c-c++-common/pr62199-2.c: Likewise.\n+\n 2015-03-09  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/65270"}, {"sha": "f41fa8bb5ff9e3a0b91670b32914a1237174819e", "filename": "gcc/testsuite/c-c++-common/pr49706.c", "status": "modified", "additions": 74, "deletions": 11, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr49706.c?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -12,10 +12,13 @@ extern bool foo_b (void);\n extern int foo_i (void);\n \n #ifdef __cplusplus\n-template <class T, class U> bool f1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 15 } */\n-template <class T, class U> bool f2(T t, U u) { return ((!t) == u); }\n-template <class T, class U> bool f3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 17 } */\n-template <class T, class U> bool f4(T t, U u) { return ((!g(t)) == u); }\n+template <class T, class U> bool tfn1(T t, U u) { return (!t == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 15 } */\n+template <class T, class U> bool tfn2(T t, U u) { return ((!t) == u); }\n+template <class T, class U> bool tfn3(T t, U u) { return (!g(t) == u); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 17 } */\n+template <class T, class U> bool tfn4(T t, U u) { return ((!g(t)) == u); }\n+template <class T, class U> bool tfn5(T t, U u) { return (!!t == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+template <class T, class U> bool tfn6(T t, U u) { return (!!g(t) == u); } /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+template <int N> bool tfn7(int i1, int i2) { return (!i1 == i2); } /* { dg-warning \"logical not is only applied to the left hand side of comparison\" \"\" { target c++ } 21 } */\n #endif\n \n void\n@@ -58,23 +61,42 @@ fn1 (int i1, int i2, bool b1, bool b2)\n   b = !b1 <= b2;\n   b = !b1 >= b2;\n \n+  b = !b1 == i2;\n+  b = !b1 != i2;\n+  b = !b1 < i2;\n+  b = !b1 > i2;\n+  b = !b1 <= i2;\n+  b = !b1 >= i2;\n+\n   b = !foo_i () == i1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n   b = (!foo_i ()) == i1;\n   b = !foo_b () == b1;\n \n-  b = !!i1 == i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!i1 != i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!i1 < i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!i1 > i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!i1 <= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!i1 >= i2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  b = !!foo_i () == i1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 == i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 != i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 < i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 > i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 <= i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 >= i2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!foo_i () == i1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = !!b1 == i2;\n+  b = !!b1 != i2;\n+  b = !!b1 < i2;\n+  b = !!b1 > i2;\n+  b = !!b1 <= i2;\n+  b = !!b1 >= i2;\n \n   /* Be careful here.  */\n   b = (i1 == 0) != 0;\n   b = (i1 == 0) == 0;\n   b = (i1 != 0) != 0;\n   b = (i1 != 0) == 0;\n+\n+  b = !5 == 4; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!5 == 4; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" \"\" { xfail *-*-* } } */\n+  b = !1 == 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!1 == 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" \"\" { xfail *-*-* } } */\n }\n \n void\n@@ -100,3 +122,44 @@ fn2 (enum E e)\n   b = (!foo_e ()) == A;\n   b = (!foo_e ()) == foo_e ();\n }\n+\n+void\n+fn3 (int i1, float f2)\n+{\n+  b = !i1 == f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 != f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 < f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 > f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 <= f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !i1 >= f2; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = i1 == f2;\n+  b = i1 != f2;\n+  b = i1 < f2;\n+  b = i1 > f2;\n+  b = i1 <= f2;\n+  b = i1 >= f2;\n+\n+  /* Parens suppress the warning.  */\n+  b = (!i1) == f2;\n+  b = (!i1) != f2;\n+  b = (!i1) < f2;\n+  b = (!i1) > f2;\n+  b = (!i1) <= f2;\n+  b = (!i1) >= f2;\n+\n+  /* ...but not these parens.  */\n+  b = (!i1 == f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 != f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 < f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 > f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 <= f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  b = (!i1 >= f2); /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+\n+  b = !!i1 == f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 != f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 < f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 > f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 <= f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  b = !!i1 >= f2; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+}"}, {"sha": "5d25a0ac6d5a954713e1a824dc6ab4b9a25c58cb", "filename": "gcc/testsuite/c-c++-common/pr62199-2.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01177669b2eabfb1ddb3290c35bc110980b44d62/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr62199-2.c?ref=01177669b2eabfb1ddb3290c35bc110980b44d62", "patch": "@@ -11,10 +11,10 @@ bool r;\n void\n foo (bool b)\n {\n-  r = !b == 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  r = !b != 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  r = !b > 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  r = !b >= 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  r = !b < 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n-  r = !b <= 1; /* { dg-warning \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b == 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b != 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b > 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b >= 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b < 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n+  r = !b <= 1; /* { dg-bogus \"logical not is only applied to the left hand side of comparison\" } */\n }"}]}