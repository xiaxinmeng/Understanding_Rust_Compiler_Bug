{"sha": "a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "node_id": "C_kwDOANBUbNoAKGE5YzA2NDk1MDNmMTliYjIzOTliYjhkNGZlMmYyZDQ1ZGI2NTcyN2Q", "commit": {"author": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-04-13T10:00:54Z"}, "committer": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-04-14T21:31:32Z"}, "message": "Move cfg!() macro to builtins\n\nFixes #1039", "tree": {"sha": "dead9ef51792ed2b75af442b67d983c77da733bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dead9ef51792ed2b75af442b67d983c77da733bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/comments", "author": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36a3c5752cbffab5bc107bb3cf7710442a29f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36a3c5752cbffab5bc107bb3cf7710442a29f9e"}], "stats": {"total": 89, "additions": 40, "deletions": 49}, "files": [{"sha": "8c68a7d41ca6c8bbb1c6d172f6362da6dbc8e743", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "patch": "@@ -376,4 +376,40 @@ MacroBuiltin::env (Location invoc_locus, AST::MacroInvocData &invoc)\n   return AST::ASTFragment ({node});\n }\n \n+AST::ASTFragment\n+MacroBuiltin::cfg (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  // only parse if not already parsed\n+  if (!invoc.is_parsed ())\n+    {\n+      std::unique_ptr<AST::AttrInputMetaItemContainer> converted_input (\n+\tinvoc.get_delim_tok_tree ().parse_to_meta_item ());\n+\n+      if (converted_input == nullptr)\n+\t{\n+\t  rust_debug (\"DEBUG: failed to parse macro to meta item\");\n+\t  // TODO: do something now? is this an actual error?\n+\t}\n+      else\n+\t{\n+\t  std::vector<std::unique_ptr<AST::MetaItemInner>> meta_items (\n+\t    std::move (converted_input->get_items ()));\n+\t  invoc.set_meta_item_output (std::move (meta_items));\n+\t}\n+    }\n+\n+  /* TODO: assuming that cfg! macros can only have one meta item inner, like cfg\n+   * attributes */\n+  if (invoc.get_meta_items ().size () != 1)\n+    return AST::ASTFragment::create_error ();\n+\n+  bool result = invoc.get_meta_items ()[0]->check_cfg_predicate (\n+    Session::get_instance ());\n+  auto literal_exp = AST::SingleASTNode (std::unique_ptr<AST::Expr> (\n+    new AST::LiteralExpr (result ? \"true\" : \"false\", AST::Literal::BOOL,\n+\t\t\t  PrimitiveCoreType::CORETYPE_BOOL, {}, invoc_locus)));\n+\n+  return AST::ASTFragment ({literal_exp});\n+}\n+\n } // namespace Rust"}, {"sha": "e284c032e1d6b2823cc2ebbfea8d3f89fc8d4351", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "patch": "@@ -92,6 +92,9 @@ class MacroBuiltin\n \n   static AST::ASTFragment env (Location invoc_locus,\n \t\t\t       AST::MacroInvocData &invoc);\n+\n+  static AST::ASTFragment cfg (Location invoc_locus,\n+\t\t\t       AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n "}, {"sha": "6224b0c5e176c05c9b15d1973dd262aed1c04f0f", "filename": "gcc/rust/expand/rust-macro-expand.cc", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.cc?ref=a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "patch": "@@ -25,50 +25,6 @@\n #include \"rust-attribute-visitor.h\"\n \n namespace Rust {\n-void\n-MacroExpander::parse_macro_to_meta_item (AST::MacroInvocData &invoc)\n-{\n-  // only parse if not already parsed\n-  if (invoc.is_parsed ())\n-    return;\n-\n-  std::unique_ptr<AST::AttrInputMetaItemContainer> converted_input (\n-    invoc.get_delim_tok_tree ().parse_to_meta_item ());\n-\n-  if (converted_input == nullptr)\n-    {\n-      rust_debug (\"DEBUG: failed to parse macro to meta item\");\n-      // TODO: do something now? is this an actual error?\n-    }\n-  else\n-    {\n-      std::vector<std::unique_ptr<AST::MetaItemInner>> meta_items (\n-\tstd::move (converted_input->get_items ()));\n-      invoc.set_meta_item_output (std::move (meta_items));\n-    }\n-}\n-\n-AST::Literal\n-MacroExpander::expand_cfg_macro (AST::MacroInvocData &invoc)\n-{\n-  // only allow on cfg macros\n-  if (invoc.get_path () != \"cfg\")\n-    return AST::Literal::create_error ();\n-\n-  parse_macro_to_meta_item (invoc);\n-\n-  /* TODO: assuming that cfg! macros can only have one meta item inner, like cfg\n-   * attributes */\n-  if (invoc.get_meta_items ().size () != 1)\n-    return AST::Literal::create_error ();\n-\n-  bool result = invoc.get_meta_items ()[0]->check_cfg_predicate (session);\n-  if (result)\n-    return AST::Literal (\"true\", AST::Literal::BOOL, CORETYPE_BOOL);\n-  else\n-    return AST::Literal (\"false\", AST::Literal::BOOL, CORETYPE_BOOL);\n-}\n-\n AST::ASTFragment\n MacroExpander::expand_decl_macro (Location invoc_locus,\n \t\t\t\t  AST::MacroInvocData &invoc,"}, {"sha": "3c53d8d099f4555c30d39fd7e3bce9039b394080", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "patch": "@@ -226,11 +226,6 @@ struct MacroExpander\n   bool fails_cfg (const AST::AttrVec &attr) const;\n   bool fails_cfg_with_expand (AST::AttrVec &attrs) const;\n \n-  // Expand the data of a cfg! macro.\n-  void parse_macro_to_meta_item (AST::MacroInvocData &invoc);\n-  // Get the literal representation of a cfg! macro.\n-  AST::Literal expand_cfg_macro (AST::MacroInvocData &invoc);\n-\n   bool depth_exceeds_recursion_limit () const;\n \n   bool try_match_rule (AST::MacroRule &match_rule,"}, {"sha": "e9ad87c5560b41bc998faaabc4d661233f01b287", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9c0649503f19bb2399bb8d4fe2f2d45db65727d/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=a9c0649503f19bb2399bb8d4fe2f2d45db65727d", "patch": "@@ -756,6 +756,7 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n       {\"compile_error\", MacroBuiltin::compile_error},\n       {\"concat\", MacroBuiltin::concat},\n       {\"env\", MacroBuiltin::env},\n+      {\"cfg\", MacroBuiltin::cfg},\n     };\n \n   auto builtin = builtin_macros.find (macro->get_rule_name ());"}]}