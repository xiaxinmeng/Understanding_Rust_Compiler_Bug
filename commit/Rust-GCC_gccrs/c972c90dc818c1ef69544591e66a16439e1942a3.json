{"sha": "c972c90dc818c1ef69544591e66a16439e1942a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk3MmM5MGRjODE4YzFlZjY5NTQ0NTkxZTY2YTE2NDM5ZTE5NDJhMw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-21T22:07:19Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-21T22:07:19Z"}, "message": "rs6000: wl -> d+p6\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wl\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wl.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wl\" constraint by \"d\" with \"p6\".\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271487", "tree": {"sha": "826f3fc45ef8829b5f454c4093d88054cbde71f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/826f3fc45ef8829b5f454c4093d88054cbde71f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c972c90dc818c1ef69544591e66a16439e1942a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c972c90dc818c1ef69544591e66a16439e1942a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c972c90dc818c1ef69544591e66a16439e1942a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c972c90dc818c1ef69544591e66a16439e1942a3/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "66b54d88e9d333f2f451ad8733b922b4ca4b62df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66b54d88e9d333f2f451ad8733b922b4ca4b62df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66b54d88e9d333f2f451ad8733b922b4ca4b62df"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "ec57efc278ed91a7e451f9f3a4e3bba7a98ac9a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -1,3 +1,14 @@\n+2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wl\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wl.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wl\" constraint by \"d\" with \"p6\".\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-21  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wm\"):"}, {"sha": "802ce44ff20b764992a34fb8c2e121a701739696", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -74,9 +74,6 @@\n (define_register_constraint \"wi\" \"rs6000_constraints[RS6000_CONSTRAINT_wi]\"\n   \"FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\")\n \n-(define_register_constraint \"wl\" \"rs6000_constraints[RS6000_CONSTRAINT_wl]\"\n-  \"Floating point register if the LFIWAX instruction is enabled or NO_REGS.\")\n-\n ;; NO_REGs register constraint, used to merge mov{sd,sf}, since movsd can use\n ;; direct move directly, and movsf can't to move between the register sets.\n ;; There is a mode_attr that resolves to wa for SDmode and wn for SFmode"}, {"sha": "244fb5c7362269b5562841a5797a2b035b5b1148", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -2513,7 +2513,6 @@ rs6000_debug_reg_global (void)\n \t   \"wf reg_class = %s\\n\"\n \t   \"wg reg_class = %s\\n\"\n \t   \"wi reg_class = %s\\n\"\n-\t   \"wl reg_class = %s\\n\"\n \t   \"wp reg_class = %s\\n\"\n \t   \"wq reg_class = %s\\n\"\n \t   \"wr reg_class = %s\\n\"\n@@ -2534,7 +2533,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wf]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wg]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wi]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wl]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wp]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wq]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wr]],\n@@ -3156,7 +3154,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twf - Preferred register class for V4SFmode.\n \twg - Float register for power6x move insns.\n \twi - FP or VSX register to hold 64-bit integers for VSX insns.\n-\twl - Float register if we can do 32-bit signed int loads.\n \twn - always NO_REGS.\n \twr - GPR if 64-bit mode is permitted.\n \tws - Register class to do ISA 2.06 DF operations.\n@@ -3191,9 +3188,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n   if (TARGET_MFPGPR)\t\t\t\t\t\t/* DFmode  */\n     rs6000_constraints[RS6000_CONSTRAINT_wg] = FLOAT_REGS;\n \n-  if (TARGET_LFIWAX)\n-    rs6000_constraints[RS6000_CONSTRAINT_wl] = FLOAT_REGS;\t/* DImode  */\n-\n   if (TARGET_POWERPC64)\n     {\n       rs6000_constraints[RS6000_CONSTRAINT_wr] = GENERAL_REGS;"}, {"sha": "176f34d94d463a740668bdcea396f91009f184dc", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -1254,7 +1254,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wf,\t\t/* VSX register for V4SF */\n   RS6000_CONSTRAINT_wg,\t\t/* FPR register for -mmfpgpr */\n   RS6000_CONSTRAINT_wi,\t\t/* FPR/VSX register to hold DImode */\n-  RS6000_CONSTRAINT_wl,\t\t/* FPR register for LFIWAX */\n   RS6000_CONSTRAINT_wp,\t\t/* VSX reg for IEEE 128-bit fp TFmode. */\n   RS6000_CONSTRAINT_wq,\t\t/* VSX reg for IEEE 128-bit fp KFmode.  */\n   RS6000_CONSTRAINT_wr,\t\t/* GPR register if 64-bit  */"}, {"sha": "454518e7e043efd7f75719ea1559c7c709cd2a39", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -1019,7 +1019,7 @@\n \n (define_insn \"extendsi<mode>2\"\n   [(set (match_operand:EXTSI 0 \"gpc_reg_operand\"\n-\t\t     \"=r, r,   wl,    wa,    wi,    v,      v,     wr\")\n+\t\t     \"=r, r,   d,     wa,    wi,    v,      v,     wr\")\n \t(sign_extend:EXTSI (match_operand:SI 1 \"lwa_operand\"\n \t\t     \"YZ, r,   Z,     Z,     r,     v,      v,     ?wa\")))]\n   \"\"\n@@ -1035,7 +1035,7 @@\n   [(set_attr \"type\" \"load,exts,fpload,fpload,mffgpr,vecexts,vecperm,mftgpr\")\n    (set_attr \"sign_extend\" \"yes\")\n    (set_attr \"length\" \"4,4,4,4,4,4,8,8\")\n-   (set_attr \"isa\" \"*,*,*,p8v,p8v,p9v,p8v,p8v\")])\n+   (set_attr \"isa\" \"*,*,p6,p8v,p8v,p9v,p8v,p8v\")])\n \n (define_split\n   [(set (match_operand:EXTSI 0 \"int_reg_operand\")"}, {"sha": "2d531cc5a1535a5af58c9ae42a77bf417a6ecad3", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c972c90dc818c1ef69544591e66a16439e1942a3/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=c972c90dc818c1ef69544591e66a16439e1942a3", "patch": "@@ -3198,7 +3198,7 @@ Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n \n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wi},\n-@code{wl}, @code{wp}, @code{wq}, @code{ws},\n+@code{wp}, @code{wq}, @code{ws},\n @code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n@@ -3262,9 +3262,6 @@ If @option{-mmfpgpr} was used, a floating point register or NO_REGS.\n @item wi\n FP or VSX register to hold 64-bit integers for VSX insns or NO_REGS.\n \n-@item wl\n-Floating point register if the LFIWAX instruction is enabled or NO_REGS.\n-\n @item wn\n No register (NO_REGS).\n "}]}