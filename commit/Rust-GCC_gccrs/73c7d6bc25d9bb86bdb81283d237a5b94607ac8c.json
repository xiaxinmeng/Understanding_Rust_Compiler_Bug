{"sha": "73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzNjN2Q2YmMyNWQ5YmI4NmJkYjgxMjgzZDIzN2E1Yjk0NjA3YWM4Yw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-06-26T11:29:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-06-26T11:29:34Z"}, "message": "re PR tree-optimization/61607 (DOM missed jump threading and destroyed loops)\n\n2014-06-26  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/61607\n\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Adjust comment\n\texplaining why we restrict copies on loop depth.\n\t* tree-ssa-dom.c (cprop_operand): Remove restriction on\n\ton loop depth.\n\t(record_equivalences_from_phis): Instead add it here.\n\n\t* gcc.dg/tree-ssa/ssa-dom-thread-5.c: New testcase.\n\nFrom-SVN: r212026", "tree": {"sha": "1c939200ec3ae5f46afa0de763e00de9f4d4e65b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c939200ec3ae5f46afa0de763e00de9f4d4e65b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d805a56b6a5c2252baccd257e00a719a22ad143", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d805a56b6a5c2252baccd257e00a719a22ad143", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d805a56b6a5c2252baccd257e00a719a22ad143"}], "stats": {"total": 60, "additions": 46, "deletions": 14}, "files": [{"sha": "e7ced0c453254a05c7e3e16857d92dd054eed818", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "patch": "@@ -1,3 +1,12 @@\n+2014-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61607\n+\t* tree-ssa-copy.c (copy_prop_visit_phi_node): Adjust comment\n+\texplaining why we restrict copies on loop depth.\n+\t* tree-ssa-dom.c (cprop_operand): Remove restriction on\n+\ton loop depth.\n+\t(record_equivalences_from_phis): Instead add it here.\n+\n 2014-06-26  Bernd Schmidt  <bernds@codesourcery.com>\n \n         * Makefile.in (COLLECT2_OBJS): Add collect-utils.o."}, {"sha": "5266253595b017ebd574abc68b1fe94f23d72bfa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "patch": "@@ -1,3 +1,8 @@\n+2014-06-26  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/61607\n+\t* gcc.dg/tree-ssa/ssa-dom-thread-5.c: New testcase.\n+\n 2014-06-26  Vidya Praveen  <vidyapraveen@arm.com>\n \n \t* gcc.dg/inline-22.c: Add bind_pic_locally."}, {"sha": "9a984d4d558f7db829a67deae20294e8e9f0843f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dom-thread-5.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dom-thread-5.c?ref=73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Os -fno-tree-fre -fdump-tree-dom1-details\" } */\n+\n+void foo(int *);\n+void f2(int dst[3], int R)\n+{\n+  int i, inter[2];\n+  _Bool inter0p = 0;\n+  _Bool inter1p = 0;\n+  for (i = 1; i < R; i++)\n+    {\n+      inter0p = 1;\n+      inter1p = 1;\n+    }\n+  if (inter0p)\n+    inter[0] = 1;\n+  if (inter1p)\n+    inter[1] = 1;\n+  foo(inter);\n+}\n+\n+/* { dg-final { scan-tree-dump \"Threaded jump\" \"dom1\" } } */\n+/* { dg-final { cleanup-tree-dump \"dom1\" } } */"}, {"sha": "0ba665bbe9188dc8143c97587511b25a2bf59de1", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "patch": "@@ -401,11 +401,8 @@ copy_prop_visit_phi_node (gimple phi)\n \targ_value = valueize_val (arg);\n \n       /* Avoid copy propagation from an inner into an outer loop.\n-\t Otherwise, this may move loop variant variables outside of\n-\t their loops and prevent coalescing opportunities.  If the\n-\t value was loop invariant, it will be hoisted by LICM and\n-\t exposed for copy propagation.\n-\t ???  The value will be always loop invariant.\n+\t Otherwise, this may introduce uses of loop variant variables\n+\t outside of their loops and prevent coalescing opportunities.\n \t In loop-closed SSA form do not copy-propagate through\n \t PHI nodes in blocks with a loop exit edge predecessor.  */\n       if (TREE_CODE (arg_value) == SSA_NAME"}, {"sha": "795ed09ae86b0dd6e4adec66cad9410b6be53de3", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73c7d6bc25d9bb86bdb81283d237a5b94607ac8c/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=73c7d6bc25d9bb86bdb81283d237a5b94607ac8c", "patch": "@@ -1234,7 +1234,13 @@ record_equivalences_from_phis (basic_block bb)\n \t this, since this is a true assignment and not an equivalence\n \t inferred from a comparison.  All uses of this ssa name are dominated\n \t by this assignment, so unwinding just costs time and space.  */\n-      if (i == gimple_phi_num_args (phi) && may_propagate_copy (lhs, rhs))\n+      if (i == gimple_phi_num_args (phi)\n+\t  && may_propagate_copy (lhs, rhs)\n+\t  /* Do not propagate copies if the propagated value is at a deeper loop\n+\t     depth than the propagatee.  Otherwise, this may introduce uses\n+\t     of loop variant variables outside of their loops and prevent\n+\t     coalescing opportunities.  */\n+\t  && !(loop_depth_of_name (rhs) > loop_depth_of_name (lhs)))\n \tset_ssa_name_value (lhs, rhs);\n     }\n }\n@@ -2247,14 +2253,6 @@ cprop_operand (gimple stmt, use_operand_p op_p)\n       if (!may_propagate_copy (op, val))\n \treturn;\n \n-      /* Do not propagate copies if the propagated value is at a deeper loop\n-\t depth than the propagatee.  Otherwise, this may move loop variant\n-\t variables outside of their loops and prevent coalescing\n-\t opportunities.  If the value was loop invariant, it will be hoisted\n-\t by LICM and exposed for copy propagation.  */\n-      if (loop_depth_of_name (val) > loop_depth_of_name (op))\n-\treturn;\n-\n       /* Do not propagate copies into simple IV increment statements.\n          See PR23821 for how this can disturb IV analysis.  */\n       if (TREE_CODE (val) != INTEGER_CST"}]}