{"sha": "0c90837b164f284ac805b4db325080261457b24a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM5MDgzN2IxNjRmMjg0YWM4MDViNGRiMzI1MDgwMjYxNDU3YjI0YQ==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@redhat.com", "date": "2001-06-05T15:48:58Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "2001-06-05T15:48:58Z"}, "message": "expr.c (force_evaluation_order): Match wrapped ctor calls, locate arguments accordingly.\n\n2001-06-04  Alexandre Petit-Bianco  <apbianco@redhat.com>\n\n\t* expr.c (force_evaluation_order): Match wrapped ctor calls, locate\n\targuments accordingly.\n\n(http://gcc.gnu.org/ml/gcc-patches/2001-06/msg00214.html)\n\nFrom-SVN: r42910", "tree": {"sha": "c510c5ae08cb32951c451bef9b4102d7d25fbe67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c510c5ae08cb32951c451bef9b4102d7d25fbe67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c90837b164f284ac805b4db325080261457b24a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c90837b164f284ac805b4db325080261457b24a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c90837b164f284ac805b4db325080261457b24a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c90837b164f284ac805b4db325080261457b24a/comments", "author": null, "committer": null, "parents": [{"sha": "7f471801f0e1f0c7befbc6cc9377642d7e3a8ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f471801f0e1f0c7befbc6cc9377642d7e3a8ac6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f471801f0e1f0c7befbc6cc9377642d7e3a8ac6"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "39bd0117c131a3b19b815c074369868d07e9d955", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90837b164f284ac805b4db325080261457b24a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90837b164f284ac805b4db325080261457b24a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=0c90837b164f284ac805b4db325080261457b24a", "patch": "@@ -1,3 +1,8 @@\n+2001-06-04  Alexandre Petit-Bianco  <apbianco@redhat.com>\n+\n+\t* expr.c (force_evaluation_order): Match wrapped ctor calls, locate\n+\targuments accordingly.\n+\n 2001-06-02  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcj.texi: Move contents to just after title page."}, {"sha": "e9af7fcd455275694c46edd739153ca04ea7e4f6", "filename": "gcc/java/expr.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c90837b164f284ac805b4db325080261457b24a/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c90837b164f284ac805b4db325080261457b24a/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=0c90837b164f284ac805b4db325080261457b24a", "patch": "@@ -3263,16 +3263,31 @@ force_evaluation_order (node)\n       if (TREE_SIDE_EFFECTS (TREE_OPERAND (node, 1)))\n \tTREE_OPERAND (node, 0) = save_expr (TREE_OPERAND (node, 0));\n     }\n-  else if (TREE_CODE (node) == CALL_EXPR || TREE_CODE (node) == NEW_CLASS_EXPR)\n+  else if (TREE_CODE (node) == CALL_EXPR\n+           || TREE_CODE (node) == NEW_CLASS_EXPR\n+           || (TREE_CODE (node) == COMPOUND_EXPR\n+               && TREE_CODE (TREE_OPERAND (node, 0)) == CALL_EXPR\n+               && TREE_CODE (TREE_OPERAND (node, 1)) == SAVE_EXPR)) \n     {\n       tree arg, cmp;\n \n       if (!TREE_OPERAND (node, 1))\n \treturn node;\n \n+      arg = node;\n+      \n+      /* Position arg properly, account for wrapped around ctors. */\n+      if (TREE_CODE (node) == COMPOUND_EXPR)\n+        arg = TREE_OPERAND (node, 0);\n+      \n+      arg = TREE_OPERAND (arg, 1);\n+      \n+      /* Not having a list of argument here is an error. */ \n+      if (TREE_CODE (arg) != TREE_LIST)\n+        abort ();\n+\n       /* This reverses the evaluation order. This is a desired effect. */\n-      for (cmp = NULL_TREE, arg = TREE_OPERAND (node, 1); \n-\t   arg; arg = TREE_CHAIN (arg))\n+      for (cmp = NULL_TREE; arg; arg = TREE_CHAIN (arg))\n \t{\n \t  tree saved = save_expr (force_evaluation_order (TREE_VALUE (arg)));\n \t  cmp = (cmp == NULL_TREE ? saved :"}]}