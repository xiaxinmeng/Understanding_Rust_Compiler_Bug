{"sha": "a6ebc39a661502ac9ae1c14f11a41b05cb780896", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZlYmMzOWE2NjE1MDJhYzlhZTFjMTRmMTFhNDFiMDVjYjc4MDg5Ng==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2003-05-15T20:01:10Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-05-15T20:01:10Z"}, "message": "rs6000-protos.h (function_value): Protoize.\n\n2003-05-15  Aldy Hernandez  <aldyh@redhat.com>\n\n        * config/rs6000/rs6000-protos.h (function_value): Protoize.\n\n        * config/rs6000/rs6000.h (FUNCTION_VALUE): Call function.\n\n        * config/rs6000/rs6000.c (rs6000_function_value): New.\n\nFrom-SVN: r66841", "tree": {"sha": "983a8518c9508538d232b4edbaa0845c23b21587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/983a8518c9508538d232b4edbaa0845c23b21587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6ebc39a661502ac9ae1c14f11a41b05cb780896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ebc39a661502ac9ae1c14f11a41b05cb780896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6ebc39a661502ac9ae1c14f11a41b05cb780896", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6ebc39a661502ac9ae1c14f11a41b05cb780896/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49a19cfd34783bd7d261bb0caa4ffcda5aa44b96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a19cfd34783bd7d261bb0caa4ffcda5aa44b96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a19cfd34783bd7d261bb0caa4ffcda5aa44b96"}], "stats": {"total": 70, "additions": 50, "deletions": 20}, "files": [{"sha": "363ea14cfb4842896bb8af67da4a91d3f4584959", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a6ebc39a661502ac9ae1c14f11a41b05cb780896", "patch": "@@ -1,3 +1,11 @@\n+2003-05-15  Aldy Hernandez  <aldyh@redhat.com>\n+\n+        * config/rs6000/rs6000-protos.h (function_value): Protoize.\n+\n+        * config/rs6000/rs6000.h (FUNCTION_VALUE): Call function.\n+\n+        * config/rs6000/rs6000.c (rs6000_function_value): New.\n+\n 2003-05-15  Philip Blundell  <philb@gnu.org>\n \n \t* config/arm/arm.c (arm_is_xscale): Rename to arm_arch_xscale."}, {"sha": "da75516de376e234416b23e9ef3db05ad436c6de", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=a6ebc39a661502ac9ae1c14f11a41b05cb780896", "patch": "@@ -152,6 +152,7 @@ extern int function_arg_pass_by_reference PARAMS ((CUMULATIVE_ARGS *,\n extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    enum machine_mode, tree,\n \t\t\t\t\t    int *, int));\n+extern rtx rs6000_function_value (tree, tree);\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern int function_ok_for_sibcall PARAMS ((tree));\n #ifdef ARGS_SIZE_RTX"}, {"sha": "e451f20c0eeda1f9356edee7f8be98bc707e1735", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=a6ebc39a661502ac9ae1c14f11a41b05cb780896", "patch": "@@ -14396,6 +14396,44 @@ rs6000_memory_move_cost (mode, class, in)\n     return 4 + rs6000_register_move_cost (mode, class, GENERAL_REGS);\n }\n \n+/* Define how to find the value returned by a function.\n+   VALTYPE is the data type of the value (as a tree).\n+   If the precise function being called is known, FUNC is its FUNCTION_DECL;\n+   otherwise, FUNC is 0.\n+\n+   On the SPE, both FPs and vectors are returned in r3.\n+\n+   On RS/6000 an integer value is in r3 and a floating-point value is in\n+   fp1, unless -msoft-float.  */\n+\n+rtx\n+rs6000_function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n+{\n+  enum machine_mode mode;\n+  unsigned int regno = GP_ARG_RETURN;\n+\n+  if ((INTEGRAL_TYPE_P (valtype)\n+       && TYPE_PRECISION (valtype) < BITS_PER_WORD)\n+      || POINTER_TYPE_P (valtype))\n+    mode = word_mode;\n+  else\n+    mode = TYPE_MODE (valtype);\n+\n+  if (TREE_CODE (valtype) == REAL_TYPE)\n+    {\n+      if (TARGET_HARD_FLOAT && TARGET_FPRS)\n+\tregno = FP_ARG_RETURN;\n+      else if (TARGET_SPE_ABI && !TARGET_FPRS)\n+\tregno = GP_ARG_RETURN;\n+    }\n+  else if (TARGET_ALTIVEC && TREE_CODE (valtype) == VECTOR_TYPE)\n+    regno = ALTIVEC_ARG_RETURN;\n+  else\n+    regno = GP_ARG_RETURN;\n+\n+  return gen_rtx_REG (mode, regno);\n+}\n+\n /* Return true if TYPE is of type __ev64_opaque__.  */\n \n static bool"}, {"sha": "8cd28acb3746b0d7fd09301510c438eddae1402c", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6ebc39a661502ac9ae1c14f11a41b05cb780896/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a6ebc39a661502ac9ae1c14f11a41b05cb780896", "patch": "@@ -1555,26 +1555,9 @@ typedef struct rs6000_stack {\n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n-   otherwise, FUNC is 0.\n-\n-   On the SPE, both FPs and vectors are returned in r3.\n-\n-   On RS/6000 an integer value is in r3 and a floating-point value is in\n-   fp1, unless -msoft-float.  */\n-\n-#define FUNCTION_VALUE(VALTYPE, FUNC)\t\t\t\t\\\n-  gen_rtx_REG ((INTEGRAL_TYPE_P (VALTYPE)\t\t\t\\\n-\t\t&& TYPE_PRECISION (VALTYPE) < BITS_PER_WORD)\t\\\n-\t       || POINTER_TYPE_P (VALTYPE)\t\t\t\\\n-\t       ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n-\t       TREE_CODE (VALTYPE) == VECTOR_TYPE\t\t\\\n-\t       && TARGET_ALTIVEC ? ALTIVEC_ARG_RETURN\t\t\\\n-\t       : TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n-\t         && TARGET_SPE_ABI && !TARGET_FPRS\t\t\\\n-\t       ? GP_ARG_RETURN\t\t\t\t\t\\\n-\t       : TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n-\t\t && TARGET_HARD_FLOAT && TARGET_FPRS\t        \\\n-               ? FP_ARG_RETURN : GP_ARG_RETURN)\n+   otherwise, FUNC is 0.  */\n+\n+#define FUNCTION_VALUE(VALTYPE, FUNC) rs6000_function_value ((VALTYPE), (FUNC))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */"}]}