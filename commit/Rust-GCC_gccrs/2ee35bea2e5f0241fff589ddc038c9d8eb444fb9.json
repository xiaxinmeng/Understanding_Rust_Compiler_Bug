{"sha": "2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmVlMzViZWEyZTVmMDI0MWZmZjU4OWRkYzAzOGM5ZDhlYjQ0NGZiOQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-04-13T20:11:29Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-04-13T20:11:29Z"}, "message": "Warn about empty parameter ABI with -Wabi=9.\n\n\t* call.c (empty_class_msg, mark_for_abi_warning)\n\t(warn_empty_class_abi): New.\n\t(build_call_a): Use them.\n\t* decl.c (store_parm_decls): Use mark_for_abi_warning.\n\t* error.c (pp_format_to_string): New.\n\nFrom-SVN: r234960", "tree": {"sha": "f4446c9a372328e1c80530640ab77106661bfe34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4446c9a372328e1c80530640ab77106661bfe34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5655267ca161de13e553dbfc0b7e58962fbb2443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5655267ca161de13e553dbfc0b7e58962fbb2443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5655267ca161de13e553dbfc0b7e58962fbb2443"}], "stats": {"total": 891, "additions": 890, "deletions": 1}, "files": [{"sha": "e2ac9171a4d607065d27a050dba0168d2f9eb1fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -1,3 +1,8 @@\n+2016-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* cfgexpand.c (pass_expand::execute): Handle attribute \"abi warning\".\n+\t* expr.c (expand_expr_real_1): Likewise.\n+\n 2016-04-13  Ilya Enkovich  <ilya.enkovich@intel.com>\n \n \t* config/i386/i386.md (kunpckhi): Swap operands."}, {"sha": "4a5cf166869ce35f05128650e2ff624765ce6a34", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -73,6 +73,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"builtins.h\"\n #include \"tree-chkp.h\"\n #include \"rtl-chkp.h\"\n+#include \"langhooks.h\"\n \n /* Some systems use __main in a way incompatible with its use in gcc, in these\n    cases use the macros NAME__MAIN to give a quoted symbol and SYMBOL__MAIN to\n@@ -6221,6 +6222,15 @@ pass_expand::execute (function *fun)\n \t\t (int) PARAM_VALUE (PARAM_SSP_BUFFER_SIZE));\n     }\n \n+  if (warn_abi)\n+    if (tree attr = lookup_attribute (\"abi warning\",\n+\t\t\t\t      DECL_ATTRIBUTES (current_function_decl)))\n+      warning_at (DECL_SOURCE_LOCATION (current_function_decl),\n+\t\t  OPT_Wabi, \"definition of %qs: %s\",\n+\t\t  identifier_to_locale (lang_hooks.decl_printable_name\n+\t\t\t\t\t(current_function_decl, 1)),\n+\t\t  TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\n   /* Set up parameters and prepare for return, for the function.  */\n   expand_function_start (current_function_decl);\n "}, {"sha": "c9929b63b9c380d419cd05441dbca2ce806e81e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -1,5 +1,12 @@\n 2016-04-13  Jason Merrill  <jason@redhat.com>\n \n+\tWarn about empty parameter ABI with -Wabi=9.\n+\t* call.c (empty_class_msg, mark_for_abi_warning)\n+\t(warn_empty_class_abi): New.\n+\t(build_call_a): Use them.\n+\t* decl.c (store_parm_decls): Use mark_for_abi_warning.\n+\t* error.c (pp_format_to_string): New.\n+\n \tPass empty class parameters like C.\n \t* call.c (pass_as_empty_struct, empty_class_arg): New.\n \t(type_passed_as, build_x_va_arg): Use pass_as_empty_struct."}, {"sha": "687e7bd4dce7c6c11dda52b0c78b7ffc5359cf4e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -381,6 +381,11 @@ build_call_a (tree function, int n, tree *argarray)\n   /* Don't pass empty class objects by value.  This is useful\n      for tags in STL, which are used to control overload resolution.\n      We don't need to handle other cases of copying empty classes.  */\n+  bool warned = false;\n+  if (decl && !TREE_PUBLIC (decl))\n+    /* Don't warn about the ABI of a function local to this TU.  */\n+    warned = true;\n+  tree empty_arg = NULL_TREE;\n   if (! decl || ! DECL_BUILT_IN (decl))\n     for (i = 0; i < n; i++)\n       {\n@@ -389,8 +394,19 @@ build_call_a (tree function, int n, tree *argarray)\n \tif (is_really_empty_class (type)\n \t    && ! TREE_ADDRESSABLE (type))\n \t  {\n+\t    empty_arg = arg;\n \t    CALL_EXPR_ARG (function, i) = empty_class_arg (arg);\n \t  }\n+\t/* Warn about ABI changes for a non-final argument.  */\n+\telse if (!warned && empty_arg)\n+\t  {\n+\t    location_t loc = EXPR_LOC_OR_LOC (empty_arg, input_location);\n+\t    if (decl && !varargs_function_p (decl))\n+\t      mark_for_abi_warning (decl, empty_arg);\n+\t    else\n+\t      warn_empty_class_abi (empty_arg, loc);\n+\t    warned = true;\n+\t  }\n       }\n \n   return function;\n@@ -6878,6 +6894,7 @@ build_x_va_arg (source_location loc, tree expr, tree type)\n       /* Do the reverse of empty_class_arg.  */\n       tree etype = pass_as_empty_struct (type) ? empty_struct_type : type;\n       expr = build_va_arg (loc, expr, etype);\n+      warn_empty_class_abi (type, loc);\n       tree ec = build0 (EMPTY_CLASS_EXPR, type);\n       return build2 (COMPOUND_EXPR, type, expr, ec);\n     }\n@@ -7005,6 +7022,47 @@ empty_class_arg (tree val)\n   return build2 (COMPOUND_EXPR, etype, val, empty);\n }\n \n+/* Generate a message warning about the change in empty class parameter passing\n+   ABI.  */\n+\n+static tree\n+empty_class_msg (tree type)\n+{\n+  if (!TYPE_P (type))\n+    type = TREE_TYPE (type);\n+\n+  return pp_format_to_string (\"empty class %qT parameter passing ABI \"\n+\t\t\t      \"changes in -fabi-version=10 (GCC 6)\", type);\n+}\n+\n+/* Warn immediately about the change in empty class parameter ABI.  */\n+\n+void\n+warn_empty_class_abi (tree arg, location_t loc)\n+{\n+  if (!warn_abi || !abi_version_crosses (10))\n+    return;\n+\n+  warning_at (loc, OPT_Wabi, \"%E\", empty_class_msg (arg));\n+}\n+\n+/* Tack a warning about the change in empty class parameter ABI onto FN, so\n+   that we get a warning if a definition or call is emitted.  */\n+\n+void\n+mark_for_abi_warning (tree fn, tree type)\n+{\n+  if (!warn_abi || !abi_version_crosses (10))\n+    return;\n+  if (lookup_attribute (\"abi warning\", DECL_ATTRIBUTES (fn)))\n+    return;\n+\n+  tree msg = empty_class_msg (type);\n+  msg = build_tree_list (NULL_TREE, msg);\n+  DECL_ATTRIBUTES (fn) = tree_cons (get_identifier (\"abi warning\"), msg,\n+\t\t\t\t    DECL_ATTRIBUTES (fn));\n+}\n+\n /* Returns the type which will really be used for passing an argument of\n    type TYPE.  */\n "}, {"sha": "8d721c75849b96c7e26ad582553d5f14fa890660", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -5540,6 +5540,8 @@ extern tree build_addr_func\t\t\t(tree, tsubst_flags_t);\n extern void set_flags_from_callee\t\t(tree);\n extern tree build_call_a\t\t\t(tree, int, tree*);\n extern tree build_call_n\t\t\t(tree, int, ...);\n+extern void mark_for_abi_warning\t\t(tree, tree);\n+extern void warn_empty_class_abi\t\t(tree, location_t);\n extern bool null_ptr_cst_p\t\t\t(tree);\n extern bool null_member_pointer_value_p\t\t(tree);\n extern bool sufficient_parms_p\t\t\t(const_tree);\n@@ -5894,6 +5896,7 @@ extern bool pedwarn_cxx98                       (location_t, int, const char *,\n extern location_t location_of                   (tree);\n extern void qualified_name_lookup_error\t\t(tree, tree, tree,\n \t\t\t\t\t\t location_t);\n+extern tree pp_format_to_string\t\t\t(const char *, ...);\n \n /* in except.c */\n extern void init_exception_processing\t\t(void);"}, {"sha": "7099199dea32f0d89c497d3e5ff88329ba634ecf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -14332,16 +14332,34 @@ store_parm_decls (tree current_function_parms)\n \t     they end in the correct forward order.  */\n       specparms = nreverse (specparms);\n \n+      /* Don't warn about the ABI of a function local to this TU.  */\n+      bool warned = !TREE_PUBLIC (current_function_decl);\n+      bool saw_nonempty = false;\n       for (parm = specparms; parm; parm = next)\n \t{\n \t  next = DECL_CHAIN (parm);\n \t  if (TREE_CODE (parm) == PARM_DECL)\n \t    {\n+\t      tree type = TREE_TYPE (parm);\n \t      if (DECL_NAME (parm) == NULL_TREE\n-\t\t  || !VOID_TYPE_P (parm))\n+\t\t  || !VOID_TYPE_P (type))\n \t\tpushdecl (parm);\n \t      else\n \t\terror (\"parameter %qD declared void\", parm);\n+\t      /* If this isn't the last parameter, maybe warn about ABI change\n+\t\t in passing empty classes.  */\n+\t      if (processing_template_decl)\n+\t\tcontinue;\n+\t      if (TREE_ADDRESSABLE (type)\n+\t\t  || !is_really_empty_class (type))\n+\t\tsaw_nonempty = true;\n+\t      else if (!warned\n+\t\t       && (saw_nonempty\n+\t\t\t   || varargs_function_p (current_function_decl)))\n+\t\t{\n+\t\t  mark_for_abi_warning (current_function_decl, type);\n+\t\t  warned = true;\n+\t\t}\n \t    }\n \t  else\n \t    {"}, {"sha": "5aaa1773bca721042bd204b37a086e16612f41e0", "filename": "gcc/cp/error.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -3718,3 +3718,25 @@ qualified_name_lookup_error (tree scope, tree name,\n       suggest_alternatives_for (location, name);\n     }\n }\n+\n+/* Like error et al, but return the formatted message as a STRING_CST.  */\n+\n+tree\n+pp_format_to_string (const char *msg, ...)\n+{\n+  pretty_printer *pp = global_dc->printer;\n+  text_info text;\n+  va_list ap;\n+\n+  va_start (ap, msg);\n+  text.err_no = errno;\n+  text.args_ptr = &ap;\n+  text.format_spec = msg;\n+  pp_format (pp, &text);\n+  pp_output_formatted_text (pp);\n+  va_end (ap);\n+  const char *fmt = pp_formatted_text (pp);\n+  tree str = build_string (strlen (fmt) + 1, fmt);\n+  pp_clear_output_area (pp);\n+  return str;\n+}"}, {"sha": "5f1118c4f7b34d56cb145a259c5b22ddaa36a7c2", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -10579,6 +10579,13 @@ expand_expr_real_1 (tree exp, rtx target, machine_mode tmode,\n \t\t      0, \"%Kcall to %qs declared with attribute warning: %s\",\n \t\t      exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n \t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n+\tif (warn_abi && fndecl\n+\t    && (attr = lookup_attribute (\"abi warning\",\n+\t\t\t\t\t DECL_ATTRIBUTES (fndecl))) != NULL)\n+\t  warning_at (tree_nonartificial_location (exp),\n+\t\t      OPT_Wabi, \"%Kcall to %qs: %s\",\n+\t\t      exp, identifier_to_locale (lang_hooks.decl_printable_name (fndecl, 1)),\n+\t\t      TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n \t/* Check for a built-in function.  */\n \tif (fndecl && DECL_BUILT_IN (fndecl))"}, {"sha": "ce1f6f2ae9c8918ca235ed324e1e9a87243ea8ea", "filename": "gcc/testsuite/g++.dg/abi/empty12.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty12a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty12.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty12.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "34a25bad75dcf9bd9f92ce2cb0bc914dcd561e74", "filename": "gcc/testsuite/g++.dg/abi/empty12a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty12a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty12.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "d1e094685dee9c4f92dd50f54071f4b63082ab5b", "filename": "gcc/testsuite/g++.dg/abi/empty13.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-x c -fabi-version=9\" }\n+// { dg-additional-sources \"empty13a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty13.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f);\n+  return 0;\n+}"}, {"sha": "c61afcda0fbd8046987337912cf8b43aabe1fcfa", "filename": "gcc/testsuite/g++.dg/abi/empty13.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "b4303a6382606e13f1d8054b26f158558abe9650", "filename": "gcc/testsuite/g++.dg/abi/empty13a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty13a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty13.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 == -1)\n+    __builtin_abort();\n+}"}, {"sha": "1b9c3975753f89c30bcfdb7624527135c044b088", "filename": "gcc/testsuite/g++.dg/abi/empty14.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty14a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty14.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "5842279cf370763df124ae8bf5a7639424d9b7fd", "filename": "gcc/testsuite/g++.dg/abi/empty14.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,10 @@\n+struct dummy0 { };\n+struct dummy { struct dummy0 d[140]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "8b3d7800c36566b43a0d78f74e1264e02ca7a44e", "filename": "gcc/testsuite/g++.dg/abi/empty14a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty14a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty14.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "ac0a8681dc99a7c3947386c9914c1f12a799580a", "filename": "gcc/testsuite/g++.dg/abi/empty15.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty15a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty15.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "1c6f26f5ae811583d08ec1077668e71c82c1f0f8", "filename": "gcc/testsuite/g++.dg/abi/empty15.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,30 @@\n+struct A1 {};\n+struct A2 {};\n+struct B1 { struct A1 a; struct A2 b; };\n+struct B2 { struct A1 a; struct A2 b; };\n+struct C1 { struct B1 a; struct B2 b; };\n+struct C2 { struct B1 a; struct B2 b; };\n+struct D1 { struct C1 a; struct C2 b; };\n+struct D2 { struct C1 a; struct C2 b; };\n+struct E1 { struct D1 a; struct D2 b; };\n+struct E2 { struct D1 a; struct D2 b; };\n+struct F1 { struct E1 a; struct E2 b; };\n+struct F2 { struct E1 a; struct E2 b; };\n+struct G1 { struct F1 a; struct F2 b; };\n+struct G2 { struct F1 a; struct F2 b; };\n+struct H1 { struct G1 a; struct G2 b; };\n+struct H2 { struct G1 a; struct G2 b; };\n+struct I1 { struct H1 a; struct H2 b; };\n+struct I2 { struct H1 a; struct H2 b; };\n+struct J1 { struct I1 a; struct I2 b; };\n+struct J2 { struct I1 a; struct I2 b; };\n+struct dummy { struct J1 a; struct J2 b; };\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "325b2c5ba09e0ee9e3db17362f3187610e8d2e48", "filename": "gcc/testsuite/g++.dg/abi/empty15a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty15a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty15.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "de2bf5cd51d8654f40433dedc8c3ab335d57eef6", "filename": "gcc/testsuite/g++.dg/abi/empty16.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty16a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty16.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "7552ae06576bc70e23fc986c559d6028965a71c2", "filename": "gcc/testsuite/g++.dg/abi/empty16.h", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,16 @@\n+#ifdef __cplusplus\n+struct A1 {};\n+struct A2 {};\n+struct dummy : A1, A2 {} ;\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "6cb7fbccecc4d59ecb949319db12320224e17333", "filename": "gcc/testsuite/g++.dg/abi/empty16a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty16a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty16.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "c7a37c093d997f8d0d5f80fe289931fefc15e2c4", "filename": "gcc/testsuite/g++.dg/abi/empty17.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty17a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty17.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "9cf72baca2e1a2f3e632ac6398b0ec1fd61daa9f", "filename": "gcc/testsuite/g++.dg/abi/empty17.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,27 @@\n+#ifdef __cplusplus\n+struct A1\n+{\n+  void foo (void);\n+  unsigned int : 15;\n+};\n+struct A2\n+{\n+  void bar (void);\n+  unsigned int : 15;\n+};\n+struct dummy : A1, A2\n+{\n+  unsigned int : 15;\n+};\n+#else\n+struct dummy {};\n+#endif\n+\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "24408fde09cb20017c486a9600dbe5bac034a765", "filename": "gcc/testsuite/g++.dg/abi/empty17a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty17a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty17.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "6cad33c8dd3c9ac982541b9811f054f2eb148d60", "filename": "gcc/testsuite/g++.dg/abi/empty18.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty18a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty18.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f);\t\t\t// { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "86e7ecdd211174e8150d64e11ba4eb7c7b185e00", "filename": "gcc/testsuite/g++.dg/abi/empty18.h", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,9 @@\n+struct dummy { int d[0]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "902860bdc01e72c50ea6505a5a42ab48dc363c2e", "filename": "gcc/testsuite/g++.dg/abi/empty18a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty18a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty18.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "e3e855a99bb8448f52b56ead4a7f59d1e74087cb", "filename": "gcc/testsuite/g++.dg/abi/empty19.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/60336\n+// { dg-do run }\n+// { dg-options \"-Wabi=9 -x c\" }\n+// { dg-additional-sources \"empty19a.c\" }\n+// { dg-prune-output \"command line option\" }\n+\n+#include \"empty19.h\"\n+extern \"C\" void fun(struct dummy, struct foo);\n+\n+int main()\n+{\n+  struct dummy d;\n+  struct foo f = { -1, -2, -3, -4, -5 };\n+\n+  fun(d, f); // { dg-warning \"empty\" }\n+  return 0;\n+}"}, {"sha": "616b87bdd933f4b4ec3fa5f048dd7dc096bc7bb2", "filename": "gcc/testsuite/g++.dg/abi/empty19.h", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19.h?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,10 @@\n+struct dummy0 { };\n+struct dummy { struct dummy0 d[0]; };\n+struct foo\n+{\n+  int i1;\n+  int i2;\n+  int i3;\n+  int i4;\n+  int i5;\n+};"}, {"sha": "767b1eb73200be8b1e2312a740a71ba18b3eda80", "filename": "gcc/testsuite/g++.dg/abi/empty19a.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty19a.c?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,6 @@\n+#include \"empty19.h\"\n+void fun(struct dummy d, struct foo f)\n+{\n+  if (f.i1 != -1)\n+    __builtin_abort();\n+}"}, {"sha": "be1e826c838f1d655eba839f0740701978866ea2", "filename": "gcc/testsuite/g++.dg/abi/empty20.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty20.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,25 @@\n+// { dg-options \"-Wabi=9 -O0\" }\n+\n+struct A { };\n+\n+void f(A, A) { }\t\t// No warning, trailing parms all empty\n+void f(A, A, int) { }\t\t// { dg-warning \"ABI\" }\n+__attribute__ ((always_inline))\n+inline void f(A a, int i) { }\t// No warning, always inlined\n+__attribute__ ((always_inline))\n+inline void f2(A a, int i)\t// But the call within the fn gets a warning\n+{\t\t\t\t// when it's inlined into main\n+  f(a,a,i);\t\t\t// { dg-warning \"ABI\" }\n+}\n+inline void f3(A a, int i)\t// This one is never called\n+{\n+  f(a,a,i);\n+}\n+int main()\n+{\n+  A a;\n+  f(a,a);\n+  f(a,a,42);\t\t\t// { dg-warning \"ABI\" }\n+  f(a,42);\n+  f2(a,42);\n+}"}, {"sha": "7538dd80c32b20738ce760f52d10050f7391e530", "filename": "gcc/testsuite/g++.dg/abi/empty21.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fempty21.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-Wabi=9\" }\n+\n+#include <stdarg.h>\n+\n+struct A { };\n+\n+void f(int i, ...)\n+{\n+  va_list ap;\n+  va_start (ap, i);\n+  if (i >= 1)\n+    va_arg (ap, A);\t\t// { dg-warning \"ABI\" }\n+  if (i >= 2)\n+    va_arg (ap, int);\n+}\n+\n+int main()\n+{\n+  f(0);\n+  f(2, A(), 42);\t\t// { dg-warning \"ABI\" }\n+}"}, {"sha": "af0863887a04b380d6f22a89539f77f82d24d89c", "filename": "gcc/testsuite/g++.dg/abi/pr60336-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-1.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "6c9c990dad6e62b60f793f4fadb4cd098dbb286f", "filename": "gcc/testsuite/g++.dg/abi/pr60336-10.C", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-10.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,50 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0 { };\n+struct dummy1 { };\n+struct dummy : dummy0, dummy1 { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "c92f3d43a5b0c317c5193a296bca391f8f012099", "filename": "gcc/testsuite/g++.dg/abi/pr60336-11.C", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-11.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,56 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0\n+{\n+  void bar (void);\n+};\n+struct dummy1\n+{\n+  void foo (void);\n+};\n+struct dummy : dummy0, dummy1 { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "83a7bb0cfa00ab10a72ab49c5238c0e584b061fc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-12.C", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-12.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,57 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy0\n+{\n+};\n+struct dummy1\n+{\n+  unsigned : 15;\n+};\n+struct dummy : dummy0, dummy1\n+{\n+};\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "32eecb32a675aede05095273a8ac3fad22f8cc93", "filename": "gcc/testsuite/g++.dg/abi/pr60336-2.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-2.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run }\n+// { dg-options \"-O2 -Wabi=9\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy { };\n+\n+void\n+test (struct dummy a, int m, ...) // { dg-message \"empty\" }\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count != 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6); // { dg-message \"empty\" }\n+  return 0;\n+}"}, {"sha": "8ebd4dda0e24e8f7adca7558f12216f7f110fd4f", "filename": "gcc/testsuite/g++.dg/abi/pr60336-3.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-3.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wabi=9\" }\n+\n+struct dummy { struct{}__attribute__((aligned (4))) a[7]; };\n+\n+extern void test1 (struct dummy, ...);\n+extern void (*test2) (struct dummy, ...);\n+\n+void\n+foo ()\n+{\n+  struct dummy a0;\n+  test1 (a0, 42); // { dg-message \"empty\" }\n+  test2 (a0, 42); // { dg-message \"empty\" }\n+}"}, {"sha": "8790a663d2bc29bd2f5479640ad43b07e16c0bda", "filename": "gcc/testsuite/g++.dg/abi/pr60336-4.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-4.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,48 @@\n+// { dg-do run { target { { i?86-*-* x86_64-*-* } && { ! { ia32 } } } } }\n+// { dg-options \"-O2 -fabi-version=9\" }\n+\n+#include <stdarg.h>\n+\n+struct dummy { };\n+\n+void\n+test (struct dummy a, int m, ...)\n+{\n+  va_list va_arglist;\n+  int i;\n+  int count = 0;\n+\n+  if (m == 0)\n+    count++;\n+  va_start (va_arglist, m);\n+  i = va_arg (va_arglist, int);\n+  if (i == 1)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 2)\n+  i = va_arg (va_arglist, int);\n+    count++;\n+  if (i == 3)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 4)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 5)\n+    count++;\n+  i = va_arg (va_arglist, int);\n+  if (i == 6)\n+    count++;\n+  va_end (va_arglist);\n+  if (count == 7)\n+    __builtin_abort ();\n+}\n+\n+struct dummy a0;\n+\n+int\n+main ()\n+{\n+  test (a0, 0, 1, 2, 3, 4, 5, 6);\n+  return 0;\n+}"}, {"sha": "b0c76ad5aa2e0f2f4d06f2201654811d6b9903cc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-5.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i; struct dummy j; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "58796519334a99b86b72a7ce93099dc53cc77ba2", "filename": "gcc/testsuite/g++.dg/abi/pr60336-6.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-6.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i1; struct dummy i2; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "0e5d2ef2f11e5ee88c315cba35318f7ceb42d1fc", "filename": "gcc/testsuite/g++.dg/abi/pr60336-7.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-7.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,17 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct dummy { };\n+struct true_type { struct dummy i[120]; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "fdfc924bfc54a084b4969855191c2753397082b2", "filename": "gcc/testsuite/g++.dg/abi/pr60336-8.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-8.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,15 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -Wabi=9\" }\n+\n+struct dummy { struct{} a[7][3]; };\n+\n+extern void test1 (struct dummy, ...);\n+extern void (*test2) (struct dummy, ...);\n+\n+void\n+foo ()\n+{\n+  struct dummy a0;\n+  test1 (a0, 42); // { dg-message \"empty\" }\n+  test2 (a0, 42); // { dg-message \"empty\" }\n+}"}, {"sha": "4ad333f6b9caf1f7d297617ae4b0f17708ea0fcd", "filename": "gcc/testsuite/g++.dg/abi/pr60336-9.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr60336-9.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+struct A1 {}; struct A2 {};\n+struct B1 { A1 a; A2 b; }; struct B2 { A1 a; A2 b; };\n+struct C1 { B1 a; B2 b; }; struct C2 { B1 a; B2 b; };\n+struct D1 { C1 a; C2 b; }; struct D2 { C1 a; C2 b; };\n+struct E1 { D1 a; D2 b; }; struct E2 { D1 a; D2 b; };\n+struct F1 { E1 a; E2 b; }; struct F2 { E1 a; E2 b; };\n+struct G1 { F1 a; F2 b; }; struct G2 { F1 a; F2 b; };\n+struct H1 { G1 a; G2 b; }; struct H2 { G1 a; G2 b; };\n+struct I1 { H1 a; H2 b; }; struct I2 { H1 a; H2 b; };\n+struct J1 { I1 a; I2 b; }; struct J2 { I1 a; I2 b; };\n+struct dummy { J1 a; J2 b; };\n+\n+struct true_type { struct dummy i; };\n+\n+extern true_type y;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx9true_type\" { target i?86-*-* x86_64-*-* } } }"}, {"sha": "1354fc497b55b9db41d3d9f6a735dfc52ff8a0be", "filename": "gcc/testsuite/g++.dg/abi/pr68355.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ee35bea2e5f0241fff589ddc038c9d8eb444fb9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr68355.C?ref=2ee35bea2e5f0241fff589ddc038c9d8eb444fb9", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-O2 -std=c++11 -fno-pic\" }\n+// { dg-require-effective-target fpic }\n+\n+template<typename _Tp, _Tp __v>\n+struct integral_constant\n+{\n+  static constexpr _Tp value = __v;\n+  typedef _Tp value_type;\n+  typedef integral_constant<_Tp, __v> type;\n+  constexpr operator value_type() const { return value; }\n+};\n+\n+typedef integral_constant<bool, true> true_type;\n+extern void xxx (true_type c);\n+\n+void\n+yyy (void)\n+{\n+  true_type y;\n+  xxx (y);\n+}\n+\n+// { dg-final { scan-assembler \"jmp\\[\\t \\]+\\[^\\$\\]*?_Z3xxx17integral_constantIbLb1EE\" { target i?86-*-* x86_64-*-* } } }"}]}