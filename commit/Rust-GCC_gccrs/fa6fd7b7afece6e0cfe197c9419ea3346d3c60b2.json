{"sha": "fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmE2ZmQ3YjdhZmVjZTZlMGNmZTE5N2M5NDE5ZWEzMzQ2ZDNjNjBiMg==", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2018-07-31T21:19:13Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2018-07-31T21:19:13Z"}, "message": "Introduce instance discriminators\n\nWith -gnateS, the Ada compiler sets itself up to output discriminators\nfor different instantiations of generics, but the middle and back ends\nhave lacked support for that.  This patch introduces the missing bits,\ntranslating the GNAT-internal representation of the per-file instance\nmap to an instance_table that maps decls to instance discriminators.\n\n\nFrom: Alexandre Oliva  <oliva@adacore.com>, Olivier Hainque  <hainque@adacore.com>\nfor  gcc/ChangeLog\n\n\t* debug.h (decl_to_instance_map_t): New type.\n\t(decl_to_instance_map): Declare.\n\t(maybe_create_decl_to_instance_map): New inline function.\n    \t* final.c (bb_discriminator, last_bb_discriminator): New statics,\n    \tto track basic block discriminators.\n    \t(final_start_function_1): Initialize them.\n    \t(final_scan_insn_1): On NOTE_INSN_BASIC_BLOCK, track\n\tbb_discriminator.\n\t(decl_to_instance_map): New variable.\n\t(map_decl_to_instance, maybe_set_discriminator): New functions.\n    \t(notice_source_line): Set discriminator.\n\nfor  gcc/ada/ChangeLog\n\n\t* trans.c: Include debug.h.\n\t(file_map): New static variable.\n\t(gigi): Set it.  Create decl_to_instance_map when needed.\n\t(Subprogram_Body_to_gnu): Pass gnu_subprog_decl to...\n\t(Sloc_to_locus): ... this.  Add decl parm, map it to instance.\n\t* gigi.h (Sloc_to_locus): Adjust declaration.\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gnat.dg/dinst.adb: New.\n\t* gnat.dg/dinst_pkg.ads, gnat.dg/dinst_pkg.adb: New.\n\nCo-Authored-By: Olivier Hainque <hainque@adacore.com>\n\nFrom-SVN: r263182", "tree": {"sha": "f227c6802b9656b6bc7d3b3f090e9b9d78f1bb4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f227c6802b9656b6bc7d3b3f090e9b9d78f1bb4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/comments", "author": null, "committer": null, "parents": [{"sha": "e540ccc0e281a6e30c14e55b39334db27e55b3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e540ccc0e281a6e30c14e55b39334db27e55b3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e540ccc0e281a6e30c14e55b39334db27e55b3bf"}], "stats": {"total": 178, "additions": 168, "deletions": 10}, "files": [{"sha": "4eda71bca0faa484ebcc8fa197989adaabe86332", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -1,3 +1,18 @@\n+2018-07-31  Alexandre Oliva  <oliva@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* debug.h (decl_to_instance_map_t): New type.\n+\t(decl_to_instance_map): Declare.\n+\t(maybe_create_decl_to_instance_map): New inline function.\n+\t* final.c (bb_discriminator, last_bb_discriminator): New statics,\n+\tto track basic block discriminators.\n+\t(final_start_function_1): Initialize them.\n+\t(final_scan_insn_1): On NOTE_INSN_BASIC_BLOCK, track\n+\tbb_discriminator.\n+\t(decl_to_instance_map): New variable.\n+\t(map_decl_to_instance, maybe_set_discriminator): New functions.\n+\t(notice_source_line): Set discriminator.\n+\n 2018-07-31  Ian Lance Taylor  <iant@golang.org>\n \n \t* targhooks.c (default_have_speculation_safe_value): Add"}, {"sha": "8b1de0c95539f5846a9dc6f3eda104880ac6430a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -1,3 +1,13 @@\n+2018-07-31  Alexandre Oliva  <oliva@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* trans.c: Include debug.h.\n+\t(file_map): New static variable.\n+\t(gigi): Set it.  Create decl_to_instance_map when needed.\n+\t(Subprogram_Body_to_gnu): Pass gnu_subprog_decl to...\n+\t(Sloc_to_locus): ... this.  Add decl parm, map it to instance.\n+\t* gigi.h (Sloc_to_locus): Adjust declaration.\n+\n 2018-07-31  Arnaud Charlet  <charlet@adacore.com>\n \n \t* clean.adb, gnatchop.adb, gnatfind.adb, gnatls.adb,"}, {"sha": "b890195cefc3ae031772b9524b02ec3bd06e2d1a", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -285,7 +285,7 @@ extern void process_type (Entity_Id gnat_entity);\n    location and false if it doesn't.  If CLEAR_COLUMN is true, set the column\n    information to 0.  */\n extern bool Sloc_to_locus (Source_Ptr Sloc, location_t *locus,\n-\t\t\t   bool clear_column = false);\n+\t\t\t   bool clear_column = false, const_tree decl = 0);\n \n /* Post an error message.  MSG is the error message, properly annotated.\n    NODE is the node at which to post the error and the node to use for the"}, {"sha": "0371d00fce18910acd8e3f4a09c997d9a3b9bcca", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -41,6 +41,7 @@\n #include \"stmt.h\"\n #include \"varasm.h\"\n #include \"output.h\"\n+#include \"debug.h\"\n #include \"libfuncs.h\"\t/* For set_stack_check_libfunc.  */\n #include \"tree-iterator.h\"\n #include \"gimplify.h\"\n@@ -255,6 +256,12 @@ static tree create_init_temporary (const char *, tree, tree *, Node_Id);\n static const char *extract_encoding (const char *) ATTRIBUTE_UNUSED;\n static const char *decode_name (const char *) ATTRIBUTE_UNUSED;\n \f\n+/* This makes gigi's file_info_ptr visible in this translation unit,\n+   so that Sloc_to_locus can look it up when deciding whether to map\n+   decls to instances.  */\n+\n+static struct File_Info_Type *file_map;\n+\n /* This is the main program of the back-end.  It sets up all the table\n    structures and then generates code.  */\n \n@@ -300,6 +307,12 @@ gigi (Node_Id gnat_root,\n \n   type_annotate_only = (gigi_operating_mode == 1);\n \n+  if (Generate_SCO_Instance_Table != 0)\n+    {\n+      file_map = file_info_ptr;\n+      maybe_create_decl_to_instance_map (number_file);\n+    }\n+\n   for (i = 0; i < number_file; i++)\n     {\n       /* Use the identifier table to make a permanent copy of the filename as\n@@ -701,6 +714,7 @@ gigi (Node_Id gnat_root,\n     }\n \n   /* Destroy ourselves.  */\n+  file_map = NULL;\n   destroy_gnat_decl ();\n   destroy_gnat_utils ();\n \n@@ -3771,7 +3785,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n     }\n \n   /* Set the line number in the decl to correspond to that of the body.  */\n-  if (!Sloc_to_locus (Sloc (gnat_node), &locus))\n+  if (!Sloc_to_locus (Sloc (gnat_node), &locus, false, gnu_subprog_decl))\n     locus = input_location;\n   DECL_SOURCE_LOCATION (gnu_subprog_decl) = locus;\n \n@@ -9970,12 +9984,14 @@ maybe_implicit_deref (tree exp)\n   return exp;\n }\n \f\n-/* Convert SLOC into LOCUS.  Return true if SLOC corresponds to a source code\n-   location and false if it doesn't.  If CLEAR_COLUMN is true, set the column\n-   information to 0.  */\n+/* Convert SLOC into LOCUS.  Return true if SLOC corresponds to a\n+   source code location and false if it doesn't.  If CLEAR_COLUMN is\n+   true, set the column information to 0.  If DECL is given and SLOC\n+   refers to a File with an instance, map DECL to that instance.  */\n \n bool\n-Sloc_to_locus (Source_Ptr Sloc, location_t *locus, bool clear_column)\n+Sloc_to_locus (Source_Ptr Sloc, location_t *locus, bool clear_column,\n+\t       const_tree decl)\n {\n   if (Sloc == No_Location)\n     return false;\n@@ -9999,6 +10015,9 @@ Sloc_to_locus (Source_Ptr Sloc, location_t *locus, bool clear_column)\n   *locus\n     = linemap_position_for_line_and_column (line_table, map, line, column);\n \n+  if (file_map && file_map[file - 1].Instance)\n+    decl_to_instance_map->put (decl, file_map[file - 1].Instance);\n+\n   return true;\n }\n "}, {"sha": "3f78d06022527e328f374003e86dedab5113f1ae", "filename": "gcc/debug.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -256,4 +256,19 @@ extern bool dwarf2out_default_as_locview_support (void);\n extern const struct gcc_debug_hooks *\n dump_go_spec_init (const char *, const struct gcc_debug_hooks *);\n \n+/* Instance discriminator mapping table.  See final.c.  */\n+typedef hash_map<const_tree, int> decl_to_instance_map_t;\n+extern decl_to_instance_map_t *decl_to_instance_map;\n+\n+/* Allocate decl_to_instance_map with COUNT slots to begin wtih, if it\n+ * hasn't been allocated yet.  */\n+\n+static inline decl_to_instance_map_t *\n+maybe_create_decl_to_instance_map (int count = 13)\n+{\n+  if (!decl_to_instance_map)\n+    decl_to_instance_map = new decl_to_instance_map_t (count);\n+  return decl_to_instance_map;\n+}\n+\n #endif /* !GCC_DEBUG_H  */"}, {"sha": "a8338e0394c1d62aa01a414da22aabbee48d3242", "filename": "gcc/final.c", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -122,12 +122,20 @@ static int last_linenum;\n /* Column number of last NOTE.  */\n static int last_columnnum;\n \n-/* Last discriminator written to assembly.  */\n+/* Discriminator written to assembly.  */\n static int last_discriminator;\n \n-/* Discriminator of current block.  */\n+/* Discriminator to be written to assembly for current instruction.\n+   Note: actual usage depends on loc_discriminator_kind setting.  */\n static int discriminator;\n \n+/* Discriminator identifying current basic block among others sharing\n+   the same locus.  */\n+static int bb_discriminator;\n+\n+/* Basic block discriminator for previous instruction.  */\n+static int last_bb_discriminator;\n+\n /* Highest line number in current block.  */\n static int high_block_linenum;\n \n@@ -1701,6 +1709,7 @@ final_start_function_1 (rtx_insn **firstp, FILE *file, int *seen,\n   last_linenum = LOCATION_LINE (prologue_location);\n   last_columnnum = LOCATION_COLUMN (prologue_location);\n   last_discriminator = discriminator = 0;\n+  last_bb_discriminator = bb_discriminator = 0;\n \n   high_block_linenum = high_function_linenum = last_linenum;\n \n@@ -2236,8 +2245,7 @@ final_scan_insn_1 (rtx_insn *insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t  if (targetm.asm_out.unwind_emit)\n \t    targetm.asm_out.unwind_emit (asm_out_file, insn);\n \n-          discriminator = NOTE_BASIC_BLOCK (insn)->discriminator;\n-\n+\t  bb_discriminator = NOTE_BASIC_BLOCK (insn)->discriminator;\n \t  break;\n \n \tcase NOTE_INSN_EH_REGION_BEG:\n@@ -3144,6 +3152,58 @@ final_scan_insn (rtx_insn *insn, FILE *file, int optimize_p,\n }\n \n \f\n+\n+/* Map DECLs to instance discriminators.  This is allocated and\n+   defined in ada/gcc-interfaces/trans.c, when compiling with -gnateS.  */\n+\n+decl_to_instance_map_t *decl_to_instance_map;\n+\n+/* Return the instance number assigned to DECL.  */\n+\n+static inline int\n+map_decl_to_instance (const_tree decl)\n+{\n+  int *inst;\n+\n+  if (!decl_to_instance_map || !decl || !DECL_P (decl))\n+    return 0;\n+\n+  inst = decl_to_instance_map->get (decl);\n+\n+  if (!inst)\n+    return 0;\n+\n+  return *inst;\n+}\n+\n+/* Set DISCRIMINATOR to the appropriate value, possibly derived from LOC.  */\n+\n+static inline void\n+maybe_set_discriminator (location_t loc)\n+{\n+  if (!decl_to_instance_map)\n+    discriminator = bb_discriminator;\n+  else\n+    {\n+      tree block = LOCATION_BLOCK (loc);\n+\n+      while (block && TREE_CODE (block) == BLOCK\n+\t     && !inlined_function_outer_scope_p (block))\n+\tblock = BLOCK_SUPERCONTEXT (block);\n+\n+      tree decl;\n+\n+      if (!block)\n+\tdecl = current_function_decl;\n+      else if (DECL_P (block))\n+\tdecl = block;\n+      else\n+\tdecl = block_ultimate_origin (block);\n+\n+      discriminator = map_decl_to_instance (decl);\n+    }\n+}\n+\n /* Return whether a source line note needs to be emitted before INSN.\n    Sets IS_STMT to TRUE if the line should be marked as a possible\n    breakpoint location.  */\n@@ -3178,6 +3238,7 @@ notice_source_line (rtx_insn *insn, bool *is_stmt)\n       filename = xloc.file;\n       linenum = xloc.line;\n       columnnum = xloc.column;\n+      maybe_set_discriminator (loc);\n       force_source_line = true;\n     }\n   else if (override_filename)\n@@ -3192,6 +3253,7 @@ notice_source_line (rtx_insn *insn, bool *is_stmt)\n       filename = xloc.file;\n       linenum = xloc.line;\n       columnnum = xloc.column;\n+      maybe_set_discriminator (INSN_LOCATION (insn));\n     }\n   else\n     {"}, {"sha": "d6e0a62f5fedc7bb45d1048c3ddd0a651f28a789", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -1,3 +1,9 @@\n+2018-07-31  Alexandre Oliva  <oliva@adacore.com>\n+            Olivier Hainque  <hainque@adacore.com>\n+\n+\t* gnat.dg/dinst.adb: New.\n+\t* gnat.dg/dinst_pkg.ads, gnat.dg/dinst_pkg.adb: New.\n+\n 2018-07-31  David Malcolm  <dmalcolm@redhat.com>\n \n \t* gcc.dg/format/gcc_diag-1.c (foo): Update the %v tests for"}, {"sha": "460e6c5f914f434b87b5f2e8b655b4f2c9c4e59d", "filename": "gcc/testsuite/gnat.dg/dinst.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst.adb?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile { target *-*-gnu* } }\n+-- { dg-options \"-gnateS -gdwarf -g -O -gno-column-info\" }\n+-- { dg-final { scan-assembler \"loc \\[0-9] 5 \\[0-9]( is_stmt \\[0-9])? discriminator 1\\n\" } } */\n+-- { dg-final { scan-assembler-not \"loc \\[0-9] 5 \\[0-9]( is_stmt \\[0-9])? discriminator 2\\n\" } } */\n+-- { dg-final { scan-assembler \"loc \\[0-9] 5 \\[0-9]( is_stmt \\[0-9])? discriminator 3\\n\" } } */\n+-- { dg-final { scan-assembler \"loc \\[0-9] 5 \\[0-9]( is_stmt \\[0-9])? discriminator 4\\n\" } } */\n+\n+\n+with DInst_Pkg;\n+procedure DInst is\n+   package I1 is new DInst_Pkg; -- instance 1 \n+   package I2 is new DInst_Pkg; -- instance 2\n+   package I3 is new DInst_Pkg; -- instance 3\n+   package I4 is new DInst_Pkg; -- instance 4\n+begin\n+   I1.Foo;\n+   -- I2.Foo;\n+   I3.Foo;\n+   I4.Foo;\n+end;"}, {"sha": "09a9baea1e4e247abe1de2afacb70ff4eaf27184", "filename": "gcc/testsuite/gnat.dg/dinst_pkg.adb", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.adb?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -0,0 +1,7 @@\n+with Ada.Text_IO; use Ada.Text_IO;\n+package body DInst_Pkg is\n+   procedure Foo is\n+   begin\n+      Put_Line (\"hello there\");\n+   end;\n+end;"}, {"sha": "d22afdbcd6af54ccff1c744085e328647af5009d", "filename": "gcc/testsuite/gnat.dg/dinst_pkg.ads", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdinst_pkg.ads?ref=fa6fd7b7afece6e0cfe197c9419ea3346d3c60b2", "patch": "@@ -0,0 +1,4 @@\n+generic\n+package DInst_Pkg is\n+   procedure Foo;\n+end;"}]}