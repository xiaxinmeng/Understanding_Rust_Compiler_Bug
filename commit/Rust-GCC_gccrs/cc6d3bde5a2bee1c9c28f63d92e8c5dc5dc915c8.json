{"sha": "cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M2ZDNiZGU1YTJiZWUxYzljMjhmNjNkOTJlOGM1ZGM1ZGM5MTVjOA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-10-09T20:55:29Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-10-09T20:55:29Z"}, "message": "re PR fortran/15441 (RRSPACING broken for denormals)\n\n2006-10-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n\t* gfortran.h: Define GFC_MPFR_TOO_OLD via mpfr version info.\n\t* arith.c (arctangent, gfc_check_real_range): Use it.\t\n\t* simplify.c (gfc_simplify_atan2, gfc_simplify_exponent,\n\tgfc_simplify_log, gfc_simplify_nearest): Use it.\n\n\tPR fortran/15441\n\tPR fortran/29312\n\t* iresolve.c (gfc_resolve_rrspacing): Give rrspacing library\n\troutine hidden precision argument.\n\t(gfc_resolve_spacing): Give spacing library routine hidden\n\tprecision, emin - 1, and tiny(x) arguments.\n\t* simplify.c (gfc_simplify_nearest): Remove explicit subnormalization.\n\t(gfc_simplify_rrspacing): Implement formula from Fortran 95 standard.\n\t(gfc_simplify_spacing): Implement formula from Fortran 2003 standard.\n\t* trans-intrinsic.c (gfc_intrinsic_map_t) Declare rrspacing and\n\tspacing via LIBF_FUNCTION\n\t(prepare_arg_info, call_builtin_clz, gfc_conv_intrinsic_spacing,\n\tgfc_conv_intrinsic_rrspacing): Remove functions.\n\t(gfc_conv_intrinsic_function): Remove calls to\n\tgfc_conv_intrinsic_spacing and gfc_conv_intrinsic_rrspacing.\n\t* f95-lang.c (gfc_init_builtin_functions): Remove __builtin_clz,\n\t__builtin_clzl and __builtin_clzll\n\n\n2006-10-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n\n\tPR fortran/15441\n\tPR fortran/29312\n\t* configure.ac: Add HAVE_LDEXPF, HAVE_LDEXP, and HAVE_LDEXPL\n\t* m4/spacing.m4: New file.  Use new HAVE_* defines.\n\t* m4/rrspacing.m4: Ditto.\n\t* Makefile.am: Handle new files.\n\t* configure: Regenerated.\n\t* Makefile.in: Ditto.\n\t* config.h.in: Ditto.\n\t* generated/spacing_r4.c: Generated.\n\t* generated/spacing_r8.c: Ditto.\n\t* generated/spacing_r10.c: Ditto.\n\t* generated/spacing_r16.c: Ditto.\n\t* generated/rrspacing_r4.c: Ditto.\n\t* generated/rrspacing_r8.c: Ditto.\n\t* generated/rrspacing_r10.c: Ditto.\n\t* generated/rrspacing_r16.c: Ditto.\n\nFrom-SVN: r117584", "tree": {"sha": "4cbf25139d75eee4bfd766806bf95bf90eef965d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4cbf25139d75eee4bfd766806bf95bf90eef965d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/comments", "author": null, "committer": null, "parents": [{"sha": "a484326f89cb7e5b71f67959d86a9de69309839a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a484326f89cb7e5b71f67959d86a9de69309839a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a484326f89cb7e5b71f67959d86a9de69309839a"}], "stats": {"total": 1303, "additions": 1035, "deletions": 268}, "files": [{"sha": "16672af41d3fa67c283957cfc6f630f5034ee44b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -1,3 +1,28 @@\n+2006-10-09  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\t* gfortran.h: Define GFC_MPFR_TOO_OLD via mpfr version info.\n+\t* arith.c (arctangent, gfc_check_real_range): Use it.\t\n+\t* simplify.c (gfc_simplify_atan2, gfc_simplify_exponent,\n+\tgfc_simplify_log, gfc_simplify_nearest): Use it.\n+\n+\tPR fortran/15441\n+\tPR fortran/29312\n+\t* iresolve.c (gfc_resolve_rrspacing): Give rrspacing library\n+\troutine hidden precision argument.\n+\t(gfc_resolve_spacing): Give spacing library routine hidden\n+\tprecision, emin - 1, and tiny(x) arguments.\n+\t* simplify.c (gfc_simplify_nearest): Remove explicit subnormalization.\n+\t(gfc_simplify_rrspacing): Implement formula from Fortran 95 standard.\n+\t(gfc_simplify_spacing): Implement formula from Fortran 2003 standard.\n+\t* trans-intrinsic.c (gfc_intrinsic_map_t) Declare rrspacing and\n+\tspacing via LIBF_FUNCTION\n+\t(prepare_arg_info, call_builtin_clz, gfc_conv_intrinsic_spacing,\n+\tgfc_conv_intrinsic_rrspacing): Remove functions.\n+\t(gfc_conv_intrinsic_function): Remove calls to\n+\tgfc_conv_intrinsic_spacing and gfc_conv_intrinsic_rrspacing.\n+\t* f95-lang.c (gfc_init_builtin_functions): Remove __builtin_clz,\n+\t__builtin_clzl and __builtin_clzll\n+\n 2006-10-09  Richard Henderson  <rth@redhat.com>\n \n \tRevert emutls patch."}, {"sha": "d4c527fb356cbb3da4a721ff705d5615c17e7198", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -75,7 +75,7 @@ gfc_set_model (mpfr_t x)\n   mpfr_set_default_prec (mpfr_get_prec (x));\n }\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n /* Calculate atan2 (y, x)\n \n atan2(y, x) = atan(y/x)\t\t\t\tif x > 0,\n@@ -412,7 +412,7 @@ gfc_check_real_range (mpfr_t p, int kind)\n     }\n   else if (mpfr_cmp (q, gfc_real_kinds[i].tiny) < 0)\n     {\n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n       /* MPFR operates on a number with a given precision and enormous\n \texponential range.  To represent subnormal numbers, the exponent is\n \tallowed to become smaller than emin, but always retains the full"}, {"sha": "fb626f7044648f950c922105c07efeef2b3184c5", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -937,21 +937,6 @@ gfc_init_builtin_functions (void)\n \n   /* Other builtin functions we use.  */\n \n-  tmp = tree_cons (NULL_TREE, integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clz\", ftype, BUILT_IN_CLZ,\n-\t\t      \"__builtin_clz\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzl\", ftype, BUILT_IN_CLZL,\n-\t\t      \"__builtin_clzl\", true);\n-\n-  tmp = tree_cons (NULL_TREE, long_long_integer_type_node, void_list_node);\n-  ftype = build_function_type (integer_type_node, tmp);\n-  gfc_define_builtin (\"__builtin_clzll\", ftype, BUILT_IN_CLZLL,\n-\t\t      \"__builtin_clzll\", true);\n-\n   tmp = tree_cons (NULL_TREE, long_integer_type_node, void_list_node);\n   tmp = tree_cons (NULL_TREE, long_integer_type_node, tmp);\n   ftype = build_function_type (long_integer_type_node, tmp);"}, {"sha": "7b624b077118be0970cf748a0860ae1c1a0b4e88", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -1224,6 +1224,10 @@ gfc_intrinsic_sym;\n #include <gmp.h>\n #include <mpfr.h>\n #define GFC_RND_MODE GMP_RNDN\n+#undef GFC_MPFR_TOO_OLD\n+#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#define GFC_MPFR_TOO_OLD 1\n+#endif\n \n typedef struct gfc_expr\n {"}, {"sha": "c702294fc82049f97171684d562e146839921633", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -1754,8 +1754,19 @@ gfc_resolve_reshape (gfc_expr * f, gfc_expr * source, gfc_expr * shape,\n void\n gfc_resolve_rrspacing (gfc_expr * f, gfc_expr * x)\n {\n+  int k;\n+  gfc_actual_arglist *prec;\n+\n   f->ts = x->ts;\n   f->value.function.name = gfc_get_string (\"__rrspacing_%d\", x->ts.kind);\n+\n+  /* Create a hidden argument to the library routines for rrspacing.  This\n+     hidden argument is the precision of x.  */\n+  k = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n+  prec = gfc_get_actual_arglist ();\n+  prec->name = \"p\";\n+  prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n+  f->value.function.actual->next = prec;\n }\n \n \n@@ -1885,8 +1896,40 @@ gfc_resolve_sinh (gfc_expr * f, gfc_expr * x)\n void\n gfc_resolve_spacing (gfc_expr * f, gfc_expr * x)\n {\n+  int k; \n+  gfc_actual_arglist *prec, *tiny, *emin_1;\n+ \n   f->ts = x->ts;\n   f->value.function.name = gfc_get_string (\"__spacing_%d\", x->ts.kind);\n+\n+  /* Create hidden arguments to the library routine for spacing.  These\n+     hidden arguments are tiny(x), min_exponent - 1,  and the precision\n+     of x.  */\n+\n+  k = gfc_validate_kind (BT_REAL, x->ts.kind, false);\n+\n+  tiny = gfc_get_actual_arglist ();\n+  tiny->name = \"tiny\";\n+  tiny->expr = gfc_get_expr ();\n+  tiny->expr->expr_type = EXPR_CONSTANT;\n+  tiny->expr->where = gfc_current_locus;\n+  tiny->expr->ts.type = x->ts.type;\n+  tiny->expr->ts.kind = x->ts.kind;\n+  mpfr_init (tiny->expr->value.real);\n+  mpfr_set (tiny->expr->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n+\n+  emin_1 = gfc_get_actual_arglist ();\n+  emin_1->name = \"emin\";\n+  emin_1->expr = gfc_int_expr (gfc_real_kinds[k].min_exponent - 1);\n+  emin_1->next = tiny;\n+\n+  prec = gfc_get_actual_arglist ();\n+  prec->name = \"prec\";\n+  prec->expr = gfc_int_expr (gfc_real_kinds[k].digits);\n+  prec->next = emin_1;\n+\n+  f->value.function.actual->next = prec;\n+\n }\n \n "}, {"sha": "1b04e6e4a91c5bfc5e34b005c9696bf542c9bfe3", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 83, "deletions": 30, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -607,7 +607,7 @@ gfc_simplify_atan2 (gfc_expr * y, gfc_expr * x)\n       return &gfc_bad_expr;\n     }\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n   arctangent2 (y->value.real, x->value.real, result->value.real);\n #else\n   mpfr_atan2 (result->value.real, y->value.real, x->value.real, GFC_RND_MODE);\n@@ -1060,7 +1060,7 @@ gfc_simplify_exponent (gfc_expr * x)\n   int i;\n   gfc_expr *result;\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n   mpfr_t tmp;\n #endif\n \n@@ -1078,7 +1078,7 @@ gfc_simplify_exponent (gfc_expr * x)\n       return result;\n     }\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n   /* PR fortran/28276 suffers from a buggy MPFR, and this block of code\n      does not function correctly.  */\n   mpfr_init (tmp);\n@@ -1096,7 +1096,6 @@ gfc_simplify_exponent (gfc_expr * x)\n \n   mpfr_clear (tmp);\n #else\n-  /* Requires MPFR 2.2.0 or newer.  */\n   i = (int) mpfr_get_exp (x->value.real);\n   mpz_set_si (result->value.integer, i);\n #endif\n@@ -2161,7 +2160,7 @@ gfc_simplify_log (gfc_expr * x)\n       mpfr_init (xr);\n       mpfr_init (xi);\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n       arctangent2 (x->value.complex.i, x->value.complex.r, result->value.complex.i);\n #else\n       mpfr_atan2 (result->value.complex.i, x->value.complex.i, x->value.complex.r,\n@@ -2495,10 +2494,8 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n   gfc_expr *result;\n   mpfr_t tmp;\n   int sgn;\n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n   int direction;\n-#else\n-  mp_exp_t emin, emax;\n #endif\n \n   if (x->expr_type != EXPR_CONSTANT || s->expr_type != EXPR_CONSTANT)\n@@ -2513,7 +2510,7 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n   gfc_set_model_kind (x->ts.kind);\n   result = gfc_copy_expr (x);\n \n-#if MPFR_VERSION_MAJOR < 2 || (MPFR_VERSION_MAJOR == 2 && MPFR_VERSION_MINOR < 2)\n+#if defined(GFC_MPFR_TOO_OLD)\n \n   direction = mpfr_sgn (s->value.real);\n   sgn = mpfr_sgn (x->value.real);\n@@ -2561,25 +2558,10 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n \tmpfr_neg (result->value.real, result->value.real, GFC_RND_MODE);\n     }\n #else\n-\n-  /* Save current values of emin and emax.  */\n-  emin = mpfr_get_emin ();\n-  emax = mpfr_get_emax ();\n-\n-  /* Set emin and emax for the current model number.  */\n-  sgn = gfc_validate_kind (BT_REAL, x->ts.kind, 0);\n-  mpfr_set_emin ((mp_exp_t) gfc_real_kinds[sgn].min_exponent - 1);\n-  mpfr_set_emax ((mp_exp_t) gfc_real_kinds[sgn].max_exponent - 1);\n-\n   sgn = mpfr_sgn (s->value.real); \n   mpfr_init (tmp);\n   mpfr_set_inf (tmp, sgn);\n   mpfr_nexttoward (result->value.real, tmp);\n-  mpfr_subnormalize (result->value.real, 0, GFC_RND_MODE);\n- \n-  mpfr_set_emin (emin);\n-  mpfr_set_emax (emax);\n- \n   mpfr_clear(tmp);\n #endif\n \n@@ -3130,6 +3112,7 @@ gfc_simplify_reshape (gfc_expr * source, gfc_expr * shape_exp,\n }\n \n \n+#if defined(GFC_MPFR_TOO_OLD)\n gfc_expr *\n gfc_simplify_rrspacing (gfc_expr * x)\n {\n@@ -3150,7 +3133,7 @@ gfc_simplify_rrspacing (gfc_expr * x)\n \n   if (mpfr_sgn (x->value.real) == 0)\n     {\n-      mpfr_ui_div (result->value.real, 1, gfc_real_kinds[i].tiny, GFC_RND_MODE);\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n       return result;\n     }\n \n@@ -3179,7 +3162,40 @@ gfc_simplify_rrspacing (gfc_expr * x)\n \n   return range_check (result, \"RRSPACING\");\n }\n+#else\n+gfc_expr *\n+gfc_simplify_rrspacing (gfc_expr * x)\n+{\n+  gfc_expr *result;\n+  int i;\n+  long int e, p;\n+\n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n \n+  i = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n+\n+  result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n+\n+  mpfr_abs (result->value.real, x->value.real, GFC_RND_MODE);\n+\n+  /* Special case x = 0 and 0.  */\n+  if (mpfr_sgn (result->value.real) == 0)\n+    {\n+      mpfr_set_ui (result->value.real, 0, GFC_RND_MODE);\n+      return result;\n+    }\n+\n+  /* | x * 2**(-e) | * 2**p.  */\n+  e = - (long int) mpfr_get_exp (x->value.real);\n+  mpfr_mul_2si (result->value.real, result->value.real, e, GFC_RND_MODE);\n+\n+  p = (long int) gfc_real_kinds[i].digits;\n+  mpfr_mul_2si (result->value.real, result->value.real, p, GFC_RND_MODE);\n+\n+  return range_check (result, \"RRSPACING\");\n+}\n+#endif\n \n gfc_expr *\n gfc_simplify_scale (gfc_expr * x, gfc_expr * i)\n@@ -3623,7 +3639,7 @@ gfc_simplify_sngl (gfc_expr * a)\n   return range_check (result, \"SNGL\");\n }\n \n-\n+#if defined(GFC_MPFR_TOO_OLD)\n gfc_expr *\n gfc_simplify_spacing (gfc_expr * x)\n {\n@@ -3643,16 +3659,16 @@ gfc_simplify_spacing (gfc_expr * x)\n \n   gfc_set_model_kind (x->ts.kind);\n \n-  if (mpfr_sgn (x->value.real) == 0)\n+  /* Special case x = 0 and -0.  */\n+  mpfr_init (absv);\n+  mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n+  if (mpfr_sgn (absv) == 0)\n     {\n       mpfr_set (result->value.real, gfc_real_kinds[i].tiny, GFC_RND_MODE);\n       return result;\n     }\n \n   mpfr_init (log2);\n-  mpfr_init (absv);\n-\n-  mpfr_abs (absv, x->value.real, GFC_RND_MODE);\n   mpfr_log2 (log2, absv, GFC_RND_MODE);\n   mpfr_trunc (log2, log2);\n \n@@ -3674,7 +3690,44 @@ gfc_simplify_spacing (gfc_expr * x)\n \n   return range_check (result, \"SPACING\");\n }\n+#else\n+gfc_expr *\n+gfc_simplify_spacing (gfc_expr * x)\n+{\n+  gfc_expr *result;\n+  int i;\n+  long int en, ep;\n \n+  if (x->expr_type != EXPR_CONSTANT)\n+    return NULL;\n+\n+  i = gfc_validate_kind (x->ts.type, x->ts.kind, false);\n+\n+  result = gfc_constant_result (BT_REAL, x->ts.kind, &x->where);\n+\n+  /* Special case x = 0 and -0.  */\n+  mpfr_abs (result->value.real, x->value.real, GFC_RND_MODE);\n+  if (mpfr_sgn (result->value.real) == 0)\n+    {\n+      mpfr_set (result->value.real, gfc_real_kinds[i].tiny, GFC_RND_MODE);\n+      return result;\n+    }\n+\n+  /* In the Fortran 95 standard, the result is b**(e - p) where b, e, and p\n+     are the radix, exponent of x, and precision.  This excludes the \n+     possibility of subnormal numbers.  Fortran 2003 states the result is\n+     b**max(e - p, emin - 1).  */\n+\n+  ep = (long int) mpfr_get_exp (x->value.real) - gfc_real_kinds[i].digits;\n+  en = (long int) gfc_real_kinds[i].min_exponent - 1;\n+  en = en > ep ? en : ep;\n+\n+  mpfr_set_ui (result->value.real, 1, GFC_RND_MODE);\n+  mpfr_mul_2si (result->value.real, result->value.real, en, GFC_RND_MODE);\n+\n+  return range_check (result, \"SPACING\");\n+}\n+#endif\n \n gfc_expr *\n gfc_simplify_sqrt (gfc_expr * e)"}, {"sha": "811555d37cab3756d34100569237d49ac59a87d4", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 2, "deletions": 205, "changes": 207, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -129,7 +129,9 @@ static GTY(()) gfc_intrinsic_map_t gfc_intrinsic_map[] =\n   /* Functions in libgfortran.  */\n   LIBF_FUNCTION (FRACTION, \"fraction\", false),\n   LIBF_FUNCTION (NEAREST, \"nearest\", false),\n+  LIBF_FUNCTION (RRSPACING, \"rrspacing\", false),\n   LIBF_FUNCTION (SET_EXPONENT, \"set_exponent\", false),\n+  LIBF_FUNCTION (SPACING, \"spacing\", false),\n \n   /* End the list.  */\n   LIBF_FUNCTION (NONE, NULL, false)\n@@ -3003,203 +3005,6 @@ gfc_conv_intrinsic_verify (gfc_se * se, gfc_expr * expr)\n   se->expr = convert (type, se->expr);\n }\n \n-/* Prepare components and related information of a real number which is\n-   the first argument of a elemental functions to manipulate reals.  */\n-\n-static void\n-prepare_arg_info (gfc_se * se, gfc_expr * expr,\n-\t\t  real_compnt_info * rcs, int all)\n-{\n-   tree arg;\n-   tree masktype;\n-   tree tmp;\n-   tree wbits;\n-   tree one;\n-   tree exponent, fraction;\n-   int n;\n-   gfc_expr *a1;\n-\n-   if (TARGET_FLOAT_FORMAT != IEEE_FLOAT_FORMAT)\n-     gfc_todo_error (\"Non-IEEE floating format\");\n-\n-   gcc_assert (expr->expr_type == EXPR_FUNCTION);\n-\n-   arg = gfc_conv_intrinsic_function_args (se, expr);\n-   arg = TREE_VALUE (arg);\n-   rcs->type = TREE_TYPE (arg);\n-\n-   /* Force arg'type to integer by unaffected convert  */\n-   a1 = expr->value.function.actual->expr;\n-   masktype = gfc_get_int_type (a1->ts.kind);\n-   rcs->mtype = masktype;\n-   tmp = build1 (VIEW_CONVERT_EXPR, masktype, arg);\n-   arg = gfc_create_var (masktype, \"arg\");\n-   gfc_add_modify_expr(&se->pre, arg, tmp);\n-   rcs->arg = arg;\n-\n-   /* Calculate the numbers of bits of exponent, fraction and word  */\n-   n = gfc_validate_kind (a1->ts.type, a1->ts.kind, false);\n-   tmp = build_int_cst (NULL_TREE, gfc_real_kinds[n].digits - 1);\n-   rcs->fdigits = convert (masktype, tmp);\n-   wbits = build_int_cst (NULL_TREE, TYPE_PRECISION (rcs->type) - 1);\n-   wbits = convert (masktype, wbits);\n-   rcs->edigits = fold_build2 (MINUS_EXPR, masktype, wbits, tmp);\n-\n-   /* Form masks for exponent/fraction/sign  */\n-   one = gfc_build_const (masktype, integer_one_node);\n-   rcs->smask = fold_build2 (LSHIFT_EXPR, masktype, one, wbits);\n-   rcs->f1 = fold_build2 (LSHIFT_EXPR, masktype, one, rcs->fdigits);\n-   rcs->emask = fold_build2 (MINUS_EXPR, masktype, rcs->smask, rcs->f1);\n-   rcs->fmask = fold_build2 (MINUS_EXPR, masktype, rcs->f1, one);\n-   /* Form bias.  */\n-   tmp = fold_build2 (MINUS_EXPR, masktype, rcs->edigits, one);\n-   tmp = fold_build2 (LSHIFT_EXPR, masktype, one, tmp);\n-   rcs->bias = fold_build2 (MINUS_EXPR, masktype, tmp ,one);\n-\n-   if (all)\n-     {\n-       /* exponent, and fraction  */\n-       tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->emask);\n-       tmp = build2 (RSHIFT_EXPR, masktype, tmp, rcs->fdigits);\n-       exponent = gfc_create_var (masktype, \"exponent\");\n-       gfc_add_modify_expr(&se->pre, exponent, tmp);\n-       rcs->expn = exponent;\n-\n-       tmp = build2 (BIT_AND_EXPR, masktype, arg, rcs->fmask);\n-       fraction = gfc_create_var (masktype, \"fraction\");\n-       gfc_add_modify_expr(&se->pre, fraction, tmp);\n-       rcs->frac = fraction;\n-     }\n-}\n-\n-/* Build a call to __builtin_clz.  */\n-\n-static tree\n-call_builtin_clz (tree result_type, tree op0)\n-{\n-  tree fn, parms, call;\n-  enum machine_mode op0_mode = TYPE_MODE (TREE_TYPE (op0));\n-\n-  if (op0_mode == TYPE_MODE (integer_type_node))\n-    fn = built_in_decls[BUILT_IN_CLZ];\n-  else if (op0_mode == TYPE_MODE (long_integer_type_node))\n-    fn = built_in_decls[BUILT_IN_CLZL];\n-  else if (op0_mode == TYPE_MODE (long_long_integer_type_node))\n-    fn = built_in_decls[BUILT_IN_CLZLL];\n-  else\n-    gcc_unreachable ();\n-\n-  parms = tree_cons (NULL, op0, NULL);\n-  call = build_function_call_expr (fn, parms);\n-\n-  return convert (result_type, call);\n-}\n-\n-\n-/* Generate code for SPACING (X) intrinsic function.\n-   SPACING (X) = POW (2, e-p)\n-\n-   We generate:\n-\n-    t = expn - fdigits // e - p.\n-    res = t << fdigits // Form the exponent. Fraction is zero.\n-    if (t < 0) // The result is out of range. Denormalized case.\n-      res = tiny(X)\n- */\n-\n-static void\n-gfc_conv_intrinsic_spacing (gfc_se * se, gfc_expr * expr)\n-{\n-   tree arg;\n-   tree masktype;\n-   tree tmp, t1, cond;\n-   tree tiny, zero;\n-   tree fdigits;\n-   real_compnt_info rcs;\n-\n-   prepare_arg_info (se, expr, &rcs, 0);\n-   arg = rcs.arg;\n-   masktype = rcs.mtype;\n-   fdigits = rcs.fdigits;\n-   tiny = rcs.f1;\n-   zero = gfc_build_const (masktype, integer_zero_node);\n-   tmp = build2 (BIT_AND_EXPR, masktype, rcs.emask, arg);\n-   tmp = build2 (RSHIFT_EXPR, masktype, tmp, fdigits);\n-   tmp = build2 (MINUS_EXPR, masktype, tmp, fdigits);\n-   cond = build2 (LE_EXPR, boolean_type_node, tmp, zero);\n-   t1 = build2 (LSHIFT_EXPR, masktype, tmp, fdigits);\n-   tmp = build3 (COND_EXPR, masktype, cond, tiny, t1);\n-   tmp = build1 (VIEW_CONVERT_EXPR, rcs.type, tmp);\n-\n-   se->expr = tmp;\n-}\n-\n-/* Generate code for RRSPACING (X) intrinsic function.\n-   RRSPACING (X) = |X * POW (2, -e)| * POW (2, p) = |FRACTION (X)| * POW (2, p)\n-\n-   So the result's exponent is p. And if X is normalized, X's fraction part\n-   is the result's fraction. If X is denormalized, to get the X's fraction we\n-   shift X's fraction part to left until the first '1' is removed.\n-\n-   We generate:\n-\n-    if (expn == 0 && frac == 0)\n-       res = 0;\n-    else\n-    {\n-       // edigits is the number of exponent bits. Add the sign bit.\n-       sedigits = edigits + 1;\n-\n-       if (expn == 0) // Denormalized case.\n-       {\n-         t1 = leadzero (frac);\n-         frac = frac << (t1 + 1); //Remove the first '1'.\n-         frac = frac >> (sedigits); //Form the fraction.\n-       }\n-\n-       //fdigits is the number of fraction bits. Form the exponent.\n-       t = bias + fdigits;\n-\n-       res = (t << fdigits) | frac;\n-    }\n-*/\n-\n-static void\n-gfc_conv_intrinsic_rrspacing (gfc_se * se, gfc_expr * expr)\n-{\n-   tree masktype;\n-   tree tmp, t1, t2, cond, cond2;\n-   tree one, zero;\n-   tree fdigits, fraction;\n-   real_compnt_info rcs;\n-\n-   prepare_arg_info (se, expr, &rcs, 1);\n-   masktype = rcs.mtype;\n-   fdigits = rcs.fdigits;\n-   fraction = rcs.frac;\n-   one = gfc_build_const (masktype, integer_one_node);\n-   zero = gfc_build_const (masktype, integer_zero_node);\n-   t2 = fold_build2 (PLUS_EXPR, masktype, rcs.edigits, one);\n-\n-   t1 = call_builtin_clz (masktype, fraction);\n-   tmp = build2 (PLUS_EXPR, masktype, t1, one);\n-   tmp = build2 (LSHIFT_EXPR, masktype, fraction, tmp);\n-   tmp = build2 (RSHIFT_EXPR, masktype, tmp, t2);\n-   cond = build2 (EQ_EXPR, boolean_type_node, rcs.expn, zero);\n-   fraction = build3 (COND_EXPR, masktype, cond, tmp, fraction);\n-\n-   tmp = fold_build2 (PLUS_EXPR, masktype, rcs.bias, fdigits);\n-   tmp = fold_build2 (LSHIFT_EXPR, masktype, tmp, fdigits);\n-   tmp = build2 (BIT_IOR_EXPR, masktype, tmp, fraction);\n-\n-   cond2 = build2 (EQ_EXPR, boolean_type_node, rcs.frac, zero);\n-   cond = build2 (TRUTH_ANDIF_EXPR, boolean_type_node, cond, cond2);\n-   tmp = build3 (COND_EXPR, masktype, cond,\n-\t\t build_int_cst (masktype, 0), tmp);\n-\n-   tmp = build1 (VIEW_CONVERT_EXPR, rcs.type, tmp);\n-   se->expr = tmp;\n-}\n \n /* Generate code for SELECTED_INT_KIND (R) intrinsic function.  */\n \n@@ -3420,14 +3225,6 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_intrinsic_exponent (se, expr);\n       break;\n \n-    case GFC_ISYM_SPACING:\n-      gfc_conv_intrinsic_spacing (se, expr);\n-      break;\n-\n-    case GFC_ISYM_RRSPACING:\n-      gfc_conv_intrinsic_rrspacing (se, expr);\n-      break;\n-\n     case GFC_ISYM_SCAN:\n       gfc_conv_intrinsic_scan (se, expr);\n       break;"}, {"sha": "9adf768d96dc9e10de6a50c48bcbbf25af066947", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -1,3 +1,23 @@\n+2006-10-06  Steven G. Kargl  <kargl@gcc.gnu.org>\n+\n+\tPR fortran/15441\n+\tPR fortran/29312\n+\t* configure.ac: Add HAVE_LDEXPF, HAVE_LDEXP, and HAVE_LDEXPL\n+\t* m4/spacing.m4: New file.  Use new HAVE_* defines.\n+\t* m4/rrspacing.m4: Ditto.\n+\t* Makefile.am: Handle new files.\n+\t* configure: Regenerated.\n+\t* Makefile.in: Ditto.\n+\t* config.h.in: Ditto.\n+\t* generated/spacing_r4.c: Generated.\n+\t* generated/spacing_r8.c: Ditto.\n+\t* generated/spacing_r10.c: Ditto.\n+\t* generated/spacing_r16.c: Ditto.\n+\t* generated/rrspacing_r4.c: Ditto.\n+\t* generated/rrspacing_r8.c: Ditto.\n+\t* generated/rrspacing_r10.c: Ditto.\n+\t* generated/rrspacing_r16.c: Ditto.\n+\n 2006-10-08  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \t* intrinsics/hyper.c: Remove file."}, {"sha": "258366943f4c9b975e5a47429530edcafe7fa2fd", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -359,6 +359,18 @@ generated/exponent_r8.c \\\n generated/exponent_r10.c \\\n generated/exponent_r16.c\n \n+i_spacing_c = \\\n+generated/spacing_r4.c \\\n+generated/spacing_r8.c \\\n+generated/spacing_r10.c \\\n+generated/spacing_r16.c\n+\n+i_rrspacing_c = \\\n+generated/rrspacing_r4.c \\\n+generated/rrspacing_r8.c \\\n+generated/rrspacing_r10.c \\\n+generated/rrspacing_r16.c\n+\n i_fraction_c = \\\n generated/fraction_r4.c \\\n generated/fraction_r8.c \\\n@@ -420,15 +432,15 @@ m4_files= m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n-    m4/misc_specifics.m4\n+    m4/misc_specifics.m4 m4/rrspacing.m4 m4/spacing.m4\n \n gfor_built_src= $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n     $(i_product_c) $(i_sum_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n-    $(i_pow_c) \\\n+    $(i_pow_c) $(i_rrspacing_c) $(i_spacing_c) \\\n     selected_int_kind.inc selected_real_kind.inc kinds.h \\\n     kinds.inc c99_protos.inc fpu-target.h\n \n@@ -688,6 +700,12 @@ $(in_unpack_c): m4/in_unpack.m4 $(I_M4_DEPS)\n $(i_exponent_c): m4/exponent.m4 m4/mtype.m4\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 exponent.m4 > $(srcdir)/$@\n \n+$(i_rrspacing_c): m4/rrspacing.m4 m4/mtype.m4\n+\t$(M4) -Dfile=$@ -I$(srcdir)/m4 rrspacing.m4 > $(srcdir)/$@\n+\n+$(i_spacing_c): m4/spacing.m4 m4/mtype.m4\n+\t$(M4) -Dfile=$@ -I$(srcdir)/m4 spacing.m4 > $(srcdir)/$@\n+\n $(i_fraction_c): m4/fraction.m4 m4/mtype.m4\n \t$(M4) -Dfile=$@ -I$(srcdir)/m4 fraction.m4 > $(srcdir)/$@\n "}, {"sha": "313e5cff14bca3f01956c5c1192cb01e1719f581", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 61, "deletions": 14, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -151,19 +151,24 @@ am__objects_27 = pow_i4_i4.lo pow_i8_i4.lo pow_i16_i4.lo pow_r4_i4.lo \\\n \tpow_i16_i16.lo pow_r4_i16.lo pow_r8_i16.lo pow_r10_i16.lo \\\n \tpow_r16_i16.lo pow_c4_i16.lo pow_c8_i16.lo pow_c10_i16.lo \\\n \tpow_c16_i16.lo\n-am__objects_28 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n+am__objects_28 = rrspacing_r4.lo rrspacing_r8.lo rrspacing_r10.lo \\\n+\trrspacing_r16.lo\n+am__objects_29 = spacing_r4.lo spacing_r8.lo spacing_r10.lo \\\n+\tspacing_r16.lo\n+am__objects_30 = $(am__objects_2) $(am__objects_3) $(am__objects_4) \\\n \t$(am__objects_5) $(am__objects_6) $(am__objects_7) \\\n \t$(am__objects_8) $(am__objects_9) $(am__objects_10) \\\n \t$(am__objects_11) $(am__objects_12) $(am__objects_13) \\\n \t$(am__objects_14) $(am__objects_15) $(am__objects_16) \\\n \t$(am__objects_17) $(am__objects_18) $(am__objects_19) \\\n \t$(am__objects_20) $(am__objects_21) $(am__objects_22) \\\n \t$(am__objects_23) $(am__objects_24) $(am__objects_25) \\\n-\t$(am__objects_26) $(am__objects_27)\n-am__objects_29 = close.lo file_pos.lo format.lo inquire.lo \\\n+\t$(am__objects_26) $(am__objects_27) $(am__objects_28) \\\n+\t$(am__objects_29)\n+am__objects_31 = close.lo file_pos.lo format.lo inquire.lo \\\n \tlist_read.lo lock.lo open.lo read.lo size_from_kind.lo \\\n \ttransfer.lo unit.lo unix.lo write.lo\n-am__objects_30 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n+am__objects_32 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n \tc99_functions.lo chdir.lo chmod.lo clock.lo cpu_time.lo \\\n \tcshift0.lo ctime.lo date_and_time.lo env.lo erf.lo eoshift0.lo \\\n \teoshift2.lo etime.lo exit.lo fget.lo flush.lo fnum.lo ftell.lo \\\n@@ -176,8 +181,8 @@ am__objects_30 = associated.lo abort.lo access.lo args.lo bessel.lo \\\n \tsystem_clock.lo time.lo transpose_generic.lo tty.lo umask.lo \\\n \tunlink.lo unpack_generic.lo in_pack_generic.lo \\\n \tin_unpack_generic.lo\n-am__objects_31 =\n-am__objects_32 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n+am__objects_33 =\n+am__objects_34 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_abs_i4.lo _abs_i8.lo _abs_i16.lo _abs_r4.lo _abs_r8.lo \\\n \t_abs_r10.lo _abs_r16.lo _aimag_c4.lo _aimag_c8.lo \\\n \t_aimag_c10.lo _aimag_c16.lo _exp_r4.lo _exp_r8.lo _exp_r10.lo \\\n@@ -201,18 +206,18 @@ am__objects_32 = _abs_c4.lo _abs_c8.lo _abs_c10.lo _abs_c16.lo \\\n \t_conjg_c4.lo _conjg_c8.lo _conjg_c10.lo _conjg_c16.lo \\\n \t_aint_r4.lo _aint_r8.lo _aint_r10.lo _aint_r16.lo _anint_r4.lo \\\n \t_anint_r8.lo _anint_r10.lo _anint_r16.lo\n-am__objects_33 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n+am__objects_35 = _sign_i4.lo _sign_i8.lo _sign_i16.lo _sign_r4.lo \\\n \t_sign_r8.lo _sign_r10.lo _sign_r16.lo _dim_i4.lo _dim_i8.lo \\\n \t_dim_i16.lo _dim_r4.lo _dim_r8.lo _dim_r10.lo _dim_r16.lo \\\n \t_atan2_r4.lo _atan2_r8.lo _atan2_r10.lo _atan2_r16.lo \\\n \t_mod_i4.lo _mod_i8.lo _mod_i16.lo _mod_r4.lo _mod_r8.lo \\\n \t_mod_r10.lo _mod_r16.lo\n-am__objects_34 = misc_specifics.lo\n-am__objects_35 = $(am__objects_32) $(am__objects_33) $(am__objects_34) \\\n+am__objects_36 = misc_specifics.lo\n+am__objects_37 = $(am__objects_34) $(am__objects_35) $(am__objects_36) \\\n \tdprod_r8.lo f2c_specifics.lo\n-am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_28) \\\n-\t$(am__objects_29) $(am__objects_30) $(am__objects_31) \\\n-\t$(am__objects_35)\n+am_libgfortran_la_OBJECTS = $(am__objects_1) $(am__objects_30) \\\n+\t$(am__objects_31) $(am__objects_32) $(am__objects_33) \\\n+\t$(am__objects_37)\n libgfortran_la_OBJECTS = $(am_libgfortran_la_OBJECTS)\n libgfortranbegin_la_LIBADD =\n am_libgfortranbegin_la_OBJECTS = fmain.lo\n@@ -712,6 +717,18 @@ generated/exponent_r8.c \\\n generated/exponent_r10.c \\\n generated/exponent_r16.c\n \n+i_spacing_c = \\\n+generated/spacing_r4.c \\\n+generated/spacing_r8.c \\\n+generated/spacing_r10.c \\\n+generated/spacing_r16.c\n+\n+i_rrspacing_c = \\\n+generated/rrspacing_r4.c \\\n+generated/rrspacing_r8.c \\\n+generated/rrspacing_r10.c \\\n+generated/rrspacing_r16.c\n+\n i_fraction_c = \\\n generated/fraction_r4.c \\\n generated/fraction_r8.c \\\n@@ -773,15 +790,15 @@ m4_files = m4/iparm.m4 m4/ifunction.m4 m4/iforeach.m4 m4/all.m4 \\\n     m4/specific.m4 m4/specific2.m4 m4/head.m4 m4/shape.m4 m4/reshape.m4 \\\n     m4/transpose.m4 m4/eoshift1.m4 m4/eoshift3.m4 m4/exponent.m4 \\\n     m4/fraction.m4 m4/nearest.m4 m4/set_exponent.m4 m4/pow.m4 \\\n-    m4/misc_specifics.m4\n+    m4/misc_specifics.m4 m4/rrspacing.m4 m4/spacing.m4\n \n gfor_built_src = $(i_all_c) $(i_any_c) $(i_count_c) $(i_maxloc0_c) \\\n     $(i_maxloc1_c) $(i_maxval_c) $(i_minloc0_c) $(i_minloc1_c) $(i_minval_c) \\\n     $(i_product_c) $(i_sum_c) \\\n     $(i_matmul_c) $(i_matmull_c) $(i_transpose_c) $(i_shape_c) $(i_eoshift1_c) \\\n     $(i_eoshift3_c) $(i_cshift1_c) $(i_reshape_c) $(in_pack_c) $(in_unpack_c) \\\n     $(i_exponent_c) $(i_fraction_c) $(i_nearest_c) $(i_set_exponent_c) \\\n-    $(i_pow_c) \\\n+    $(i_pow_c) $(i_rrspacing_c) $(i_spacing_c) \\\n     selected_int_kind.inc selected_real_kind.inc kinds.h \\\n     kinds.inc c99_protos.inc fpu-target.h\n \n@@ -2265,6 +2282,30 @@ pow_c10_i16.lo: generated/pow_c10_i16.c\n pow_c16_i16.lo: generated/pow_c16_i16.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o pow_c16_i16.lo `test -f 'generated/pow_c16_i16.c' || echo '$(srcdir)/'`generated/pow_c16_i16.c\n \n+rrspacing_r4.lo: generated/rrspacing_r4.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rrspacing_r4.lo `test -f 'generated/rrspacing_r4.c' || echo '$(srcdir)/'`generated/rrspacing_r4.c\n+\n+rrspacing_r8.lo: generated/rrspacing_r8.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rrspacing_r8.lo `test -f 'generated/rrspacing_r8.c' || echo '$(srcdir)/'`generated/rrspacing_r8.c\n+\n+rrspacing_r10.lo: generated/rrspacing_r10.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rrspacing_r10.lo `test -f 'generated/rrspacing_r10.c' || echo '$(srcdir)/'`generated/rrspacing_r10.c\n+\n+rrspacing_r16.lo: generated/rrspacing_r16.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o rrspacing_r16.lo `test -f 'generated/rrspacing_r16.c' || echo '$(srcdir)/'`generated/rrspacing_r16.c\n+\n+spacing_r4.lo: generated/spacing_r4.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spacing_r4.lo `test -f 'generated/spacing_r4.c' || echo '$(srcdir)/'`generated/spacing_r4.c\n+\n+spacing_r8.lo: generated/spacing_r8.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spacing_r8.lo `test -f 'generated/spacing_r8.c' || echo '$(srcdir)/'`generated/spacing_r8.c\n+\n+spacing_r10.lo: generated/spacing_r10.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spacing_r10.lo `test -f 'generated/spacing_r10.c' || echo '$(srcdir)/'`generated/spacing_r10.c\n+\n+spacing_r16.lo: generated/spacing_r16.c\n+\t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spacing_r16.lo `test -f 'generated/spacing_r16.c' || echo '$(srcdir)/'`generated/spacing_r16.c\n+\n close.lo: io/close.c\n \t$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o close.lo `test -f 'io/close.c' || echo '$(srcdir)/'`io/close.c\n \n@@ -2902,6 +2943,12 @@ fpu-target.h: $(srcdir)/$(FPU_HOST_HEADER)\n @MAINTAINER_MODE_TRUE@$(i_exponent_c): m4/exponent.m4 m4/mtype.m4\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 exponent.m4 > $(srcdir)/$@\n \n+@MAINTAINER_MODE_TRUE@$(i_rrspacing_c): m4/rrspacing.m4 m4/mtype.m4\n+@MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 rrspacing.m4 > $(srcdir)/$@\n+\n+@MAINTAINER_MODE_TRUE@$(i_spacing_c): m4/spacing.m4 m4/mtype.m4\n+@MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 spacing.m4 > $(srcdir)/$@\n+\n @MAINTAINER_MODE_TRUE@$(i_fraction_c): m4/fraction.m4 m4/mtype.m4\n @MAINTAINER_MODE_TRUE@\t$(M4) -Dfile=$@ -I$(srcdir)/m4 fraction.m4 > $(srcdir)/$@\n "}, {"sha": "a198d42c7bb21182963d01b94748fdf612e30664", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -426,6 +426,15 @@\n /* Define to 1 if you have the `kill' function. */\n #undef HAVE_KILL\n \n+/* libm includes ldexp */\n+#undef HAVE_LDEXP\n+\n+/* libm includes ldexpf */\n+#undef HAVE_LDEXPF\n+\n+/* libm includes ldexpl */\n+#undef HAVE_LDEXPL\n+\n /* Define to 1 if you have the `link' function. */\n #undef HAVE_LINK\n "}, {"sha": "6b767eb1fd3d60efcf2e240fed195853c710a297", "filename": "libgfortran/configure", "status": "modified", "additions": 231, "deletions": 0, "changes": 231, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -15348,6 +15348,237 @@ _ACEOF\n \n fi\n \n+echo \"$as_me:$LINENO: checking for ldexpf in -lm\" >&5\n+echo $ECHO_N \"checking for ldexpf in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_ldexpf+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char ldexpf ();\n+int\n+main ()\n+{\n+ldexpf ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_ldexpf=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_ldexpf=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_ldexpf\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_ldexpf\" >&6\n+if test $ac_cv_lib_m_ldexpf = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LDEXPF 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for ldexp in -lm\" >&5\n+echo $ECHO_N \"checking for ldexp in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_ldexp+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char ldexp ();\n+int\n+main ()\n+{\n+ldexp ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_ldexp=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_ldexp=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_ldexp\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_ldexp\" >&6\n+if test $ac_cv_lib_m_ldexp = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LDEXP 1\n+_ACEOF\n+\n+fi\n+\n+echo \"$as_me:$LINENO: checking for ldexpl in -lm\" >&5\n+echo $ECHO_N \"checking for ldexpl in -lm... $ECHO_C\" >&6\n+if test \"${ac_cv_lib_m_ldexpl+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-lm  $LIBS\"\n+if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+/* Override any gcc2 internal prototype to avoid an error.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+/* We use char because int might match the return type of a gcc2\n+   builtin and then its argument prototype would still apply.  */\n+char ldexpl ();\n+int\n+main ()\n+{\n+ldexpl ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_cv_lib_m_ldexpl=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_cv_lib_m_ldexpl=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+echo \"$as_me:$LINENO: result: $ac_cv_lib_m_ldexpl\" >&5\n+echo \"${ECHO_T}$ac_cv_lib_m_ldexpl\" >&6\n+if test $ac_cv_lib_m_ldexpl = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_LDEXPL 1\n+_ACEOF\n+\n+fi\n+\n echo \"$as_me:$LINENO: checking for logf in -lm\" >&5\n echo $ECHO_N \"checking for logf in -lm... $ECHO_C\" >&6\n if test \"${ac_cv_lib_m_logf+set}\" = set; then"}, {"sha": "f8f1d3e93c52b3c994e54965af75ad9fcdd36de1", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -247,6 +247,9 @@ AC_CHECK_LIB([m],[frexpl],[AC_DEFINE([HAVE_FREXPL],[1],[libm includes frexpl])])\n AC_CHECK_LIB([m],[hypotf],[AC_DEFINE([HAVE_HYPOTF],[1],[libm includes hypotf])])\n AC_CHECK_LIB([m],[hypot],[AC_DEFINE([HAVE_HYPOT],[1],[libm includes hypot])])\n AC_CHECK_LIB([m],[hypotl],[AC_DEFINE([HAVE_HYPOTL],[1],[libm includes hypotl])])\n+AC_CHECK_LIB([m],[ldexpf],[AC_DEFINE([HAVE_LDEXPF],[1],[libm includes ldexpf])])\n+AC_CHECK_LIB([m],[ldexp],[AC_DEFINE([HAVE_LDEXP],[1],[libm includes ldexp])])\n+AC_CHECK_LIB([m],[ldexpl],[AC_DEFINE([HAVE_LDEXPL],[1],[libm includes ldexpl])])\n AC_CHECK_LIB([m],[logf],[AC_DEFINE([HAVE_LOGF],[1],[libm includes logf])])\n AC_CHECK_LIB([m],[log],[AC_DEFINE([HAVE_LOG],[1],[libm includes log])])\n AC_CHECK_LIB([m],[logl],[AC_DEFINE([HAVE_LOGL],[1],[libm includes logl])])"}, {"sha": "315fb1ba26c6746472895f834f9ca9a01b809c3f", "filename": "libgfortran/generated/rrspacing_r10.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Frrspacing_r10.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the RRSPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_FABSL) && defined (HAVE_FREXPL) && defined (HAVE_LDEXPL)\n+\n+extern GFC_REAL_10 rrspacing_r10 (GFC_REAL_10 s, int p);\n+export_proto(rrspacing_r10);\n+\n+GFC_REAL_10\n+rrspacing_r10 (GFC_REAL_10 s, int p)\n+{\n+  int e;\n+  GFC_REAL_10 x;\n+  x = fabsl (s);\n+  if (x == 0.)\n+    return 0.;\n+  frexpl (s, &e);\n+  return ldexpl (x, p - e);\n+}\n+\n+#endif"}, {"sha": "d18a9c3fea4cd84e10fe25a1d72e6d853d472e1e", "filename": "libgfortran/generated/rrspacing_r16.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Frrspacing_r16.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the RRSPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_FABSL) && defined (HAVE_FREXPL) && defined (HAVE_LDEXPL)\n+\n+extern GFC_REAL_16 rrspacing_r16 (GFC_REAL_16 s, int p);\n+export_proto(rrspacing_r16);\n+\n+GFC_REAL_16\n+rrspacing_r16 (GFC_REAL_16 s, int p)\n+{\n+  int e;\n+  GFC_REAL_16 x;\n+  x = fabsl (s);\n+  if (x == 0.)\n+    return 0.;\n+  frexpl (s, &e);\n+  return ldexpl (x, p - e);\n+}\n+\n+#endif"}, {"sha": "0c7d1828e6d0c5285567282697a11d8b8f52d090", "filename": "libgfortran/generated/rrspacing_r4.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Frrspacing_r4.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the RRSPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_FABSF) && defined (HAVE_FREXPF) && defined (HAVE_LDEXPF)\n+\n+extern GFC_REAL_4 rrspacing_r4 (GFC_REAL_4 s, int p);\n+export_proto(rrspacing_r4);\n+\n+GFC_REAL_4\n+rrspacing_r4 (GFC_REAL_4 s, int p)\n+{\n+  int e;\n+  GFC_REAL_4 x;\n+  x = fabsf (s);\n+  if (x == 0.)\n+    return 0.;\n+  frexpf (s, &e);\n+  return ldexpf (x, p - e);\n+}\n+\n+#endif"}, {"sha": "3969f66941cf6412d6fae357c36d5da6105d9231", "filename": "libgfortran/generated/rrspacing_r8.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Frrspacing_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Frrspacing_r8.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the RRSPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_FABS) && defined (HAVE_FREXP) && defined (HAVE_LDEXP)\n+\n+extern GFC_REAL_8 rrspacing_r8 (GFC_REAL_8 s, int p);\n+export_proto(rrspacing_r8);\n+\n+GFC_REAL_8\n+rrspacing_r8 (GFC_REAL_8 s, int p)\n+{\n+  int e;\n+  GFC_REAL_8 x;\n+  x = fabs (s);\n+  if (x == 0.)\n+    return 0.;\n+  frexp (s, &e);\n+  return ldexp (x, p - e);\n+}\n+\n+#endif"}, {"sha": "fd11ab65964e8e83e4f8625409385edf2fe3b180", "filename": "libgfortran/generated/spacing_r10.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspacing_r10.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the SPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_10) && defined (HAVE_FREXPL) && defined (HAVE_LDEXPL)\n+\n+extern GFC_REAL_10 spacing_r10 (GFC_REAL_10 s, int p, int emin, GFC_REAL_10 tiny);\n+export_proto(spacing_r10);\n+\n+GFC_REAL_10\n+spacing_r10 (GFC_REAL_10 s, int p, int emin, GFC_REAL_10 tiny)\n+{\n+  int e;\n+  if (s == 0.)\n+    return tiny;\n+  frexpl (s, &e);\n+  e = e - p;\n+  e = e > emin ? e : emin;\n+  return ldexpl (1., e);\n+}\n+\n+#endif"}, {"sha": "333221a4b2ebcc3177bd53ff402cfe09563c0253", "filename": "libgfortran/generated/spacing_r16.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspacing_r16.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the SPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_16) && defined (HAVE_FREXPL) && defined (HAVE_LDEXPL)\n+\n+extern GFC_REAL_16 spacing_r16 (GFC_REAL_16 s, int p, int emin, GFC_REAL_16 tiny);\n+export_proto(spacing_r16);\n+\n+GFC_REAL_16\n+spacing_r16 (GFC_REAL_16 s, int p, int emin, GFC_REAL_16 tiny)\n+{\n+  int e;\n+  if (s == 0.)\n+    return tiny;\n+  frexpl (s, &e);\n+  e = e - p;\n+  e = e > emin ? e : emin;\n+  return ldexpl (1., e);\n+}\n+\n+#endif"}, {"sha": "41cc72e9b2d4fc1a9880bdd6fad6c5eae909db94", "filename": "libgfortran/generated/spacing_r4.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspacing_r4.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the SPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_4) && defined (HAVE_FREXPF) && defined (HAVE_LDEXPF)\n+\n+extern GFC_REAL_4 spacing_r4 (GFC_REAL_4 s, int p, int emin, GFC_REAL_4 tiny);\n+export_proto(spacing_r4);\n+\n+GFC_REAL_4\n+spacing_r4 (GFC_REAL_4 s, int p, int emin, GFC_REAL_4 tiny)\n+{\n+  int e;\n+  if (s == 0.)\n+    return tiny;\n+  frexpf (s, &e);\n+  e = e - p;\n+  e = e > emin ? e : emin;\n+  return ldexpf (1., e);\n+}\n+\n+#endif"}, {"sha": "0f925217e4232d9b594dbe1ed1949a0198e37adf", "filename": "libgfortran/generated/spacing_r8.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fgenerated%2Fspacing_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fspacing_r8.c?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,53 @@\n+/* Implementation of the SPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"\n+\n+\n+#if defined (HAVE_GFC_REAL_8) && defined (HAVE_FREXP) && defined (HAVE_LDEXP)\n+\n+extern GFC_REAL_8 spacing_r8 (GFC_REAL_8 s, int p, int emin, GFC_REAL_8 tiny);\n+export_proto(spacing_r8);\n+\n+GFC_REAL_8\n+spacing_r8 (GFC_REAL_8 s, int p, int emin, GFC_REAL_8 tiny)\n+{\n+  int e;\n+  if (s == 0.)\n+    return tiny;\n+  frexp (s, &e);\n+  e = e - p;\n+  e = e > emin ? e : emin;\n+  return ldexp (1., e);\n+}\n+\n+#endif"}, {"sha": "6b3ccd55ec1540adc36b9ec80a601a872e1f4cf9", "filename": "libgfortran/m4/rrspacing.m4", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fm4%2Frrspacing.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fm4%2Frrspacing.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Frrspacing.m4?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,54 @@\n+`/* Implementation of the RRSPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"'\n+\n+include(`mtype.m4')dnl\n+\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FABS'Q`) && defined (HAVE_FREXP'Q`) && defined (HAVE_LDEXP'Q`)'\n+\n+extern real_type rrspacing_r`'kind (real_type s, int p);\n+export_proto(rrspacing_r`'kind);\n+\n+real_type\n+rrspacing_r`'kind (real_type s, int p)\n+{\n+  int e;\n+  real_type x;\n+  x = fabs`'q (s);\n+  if (x == 0.)\n+    return 0.;\n+  frexp`'q (s, &e);\n+  return ldexp`'q (x, p - e);\n+}\n+\n+#endif"}, {"sha": "4aa4e19250f9997920d9a9f6eeb76f6af2db968d", "filename": "libgfortran/m4/spacing.m4", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fm4%2Fspacing.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8/libgfortran%2Fm4%2Fspacing.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fspacing.m4?ref=cc6d3bde5a2bee1c9c28f63d92e8c5dc5dc915c8", "patch": "@@ -0,0 +1,54 @@\n+`/* Implementation of the SPACING intrinsic\n+   Copyright 2006 Free Software Foundation, Inc.\n+   Contributed by Steven G. Kargl <kargl@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran 95 runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public\n+License along with libgfortran; see the file COPYING.  If not,\n+write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n+Boston, MA 02110-1301, USA.  */\n+\n+#include \"config.h\"\n+#include <math.h>\n+#include \"libgfortran.h\"'\n+\n+include(`mtype.m4')dnl\n+\n+`#if defined (HAVE_'real_type`) && defined (HAVE_FREXP'Q`) && defined (HAVE_LDEXP'Q`)'\n+\n+extern real_type spacing_r`'kind (real_type s, int p, int emin, real_type tiny);\n+export_proto(spacing_r`'kind);\n+\n+real_type\n+spacing_r`'kind (real_type s, int p, int emin, real_type tiny)\n+{\n+  int e;\n+  if (s == 0.)\n+    return tiny;\n+  frexp`'q (s, &e);\n+  e = e - p;\n+  e = e > emin ? e : emin;\n+  return ldexp`'q (1., e);\n+}\n+\n+#endif"}]}