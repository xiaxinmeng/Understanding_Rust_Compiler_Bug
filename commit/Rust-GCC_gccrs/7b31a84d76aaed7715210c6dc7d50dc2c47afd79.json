{"sha": "7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IzMWE4NGQ3NmFhZWQ3NzE1MjEwYzZkYzdkNTBkYzJjNDdhZmQ3OQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-11T23:43:46Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-11T23:43:46Z"}, "message": "compiler: Permit type B byte; type S []B; var v = S(\"x\").\n\nFrom-SVN: r183112", "tree": {"sha": "bacee98cbc87e04c247259edae85e2dc36a2e675", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bacee98cbc87e04c247259edae85e2dc36a2e675"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/comments", "author": null, "committer": null, "parents": [{"sha": "319638ed5cd91621c8164eca42bd96bbd8139f02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/319638ed5cd91621c8164eca42bd96bbd8139f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/319638ed5cd91621c8164eca42bd96bbd8139f02"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "5e66645c8d7d95988f0de86d6a9e5dfb4ab2a57b", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "patch": "@@ -3382,9 +3382,11 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n   if (type->is_slice_type())\n     {\n       Type* element_type = type->array_type()->element_type()->forwarded();\n-      bool is_byte = element_type == Type::lookup_integer_type(\"uint8\");\n-      bool is_int = element_type == Type::lookup_integer_type(\"int\");\n-      if (is_byte || is_int)\n+      bool is_byte = (element_type->integer_type() != NULL\n+\t\t      && element_type->integer_type()->is_byte());\n+      bool is_rune = (element_type->integer_type() != NULL\n+\t\t      && element_type->integer_type()->is_rune());\n+      if (is_byte || is_rune)\n \t{\n \t  std::string s;\n \t  if (val->string_constant_value(&s))\n@@ -3690,8 +3692,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n       tree len = a->length_tree(gogo, expr_tree);\n       len = fold_convert_loc(this->location().gcc_location(), integer_type_node,\n                              len);\n-      if (e->integer_type()->is_unsigned()\n-\t  && e->integer_type()->bits() == 8)\n+      if (e->integer_type()->is_byte())\n \t{\n \t  static tree byte_array_to_string_fndecl;\n \t  ret = Gogo::call_builtin(&byte_array_to_string_fndecl,\n@@ -3706,7 +3707,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t}\n       else\n \t{\n-\t  go_assert(e == Type::lookup_integer_type(\"int\"));\n+\t  go_assert(e->integer_type()->is_rune());\n \t  static tree int_array_to_string_fndecl;\n \t  ret = Gogo::call_builtin(&int_array_to_string_fndecl,\n \t\t\t\t   this->location(),\n@@ -3723,8 +3724,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n     {\n       Type* e = type->array_type()->element_type()->forwarded();\n       go_assert(e->integer_type() != NULL);\n-      if (e->integer_type()->is_unsigned()\n-\t  && e->integer_type()->bits() == 8)\n+      if (e->integer_type()->is_byte())\n \t{\n \t  tree string_to_byte_array_fndecl = NULL_TREE;\n \t  ret = Gogo::call_builtin(&string_to_byte_array_fndecl,\n@@ -3737,7 +3737,7 @@ Type_conversion_expression::do_get_tree(Translate_context* context)\n \t}\n       else\n \t{\n-\t  go_assert(e == Type::lookup_integer_type(\"int\"));\n+\t  go_assert(e->integer_type()->is_rune());\n \t  tree string_to_int_array_fndecl = NULL_TREE;\n \t  ret = Gogo::call_builtin(&string_to_int_array_fndecl,\n \t\t\t\t   this->location(),\n@@ -8506,19 +8506,19 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t    break;\n \t  }\n \n-\tType* e2;\n \tif (arg2_type->is_slice_type())\n-\t  e2 = arg2_type->array_type()->element_type();\n+\t  {\n+\t    Type* e2 = arg2_type->array_type()->element_type();\n+\t    if (!Type::are_identical(e1, e2, true, NULL))\n+\t      this->report_error(_(\"element types must be the same\"));\n+\t  }\n \telse if (arg2_type->is_string_type())\n-\t  e2 = Type::lookup_integer_type(\"uint8\");\n-\telse\n \t  {\n-\t    this->report_error(_(\"right argument must be a slice or a string\"));\n-\t    break;\n+\t    if (e1->integer_type() == NULL || !e1->integer_type()->is_byte())\n+\t      this->report_error(_(\"first argument must be []byte\"));\n \t  }\n-\n-\tif (!Type::are_identical(e1, e2, true, NULL))\n-\t  this->report_error(_(\"element types must be the same\"));\n+\telse\n+\t    this->report_error(_(\"second argument must be slice or string\"));\n       }\n       break;\n \n@@ -8542,7 +8542,7 @@ Builtin_call_expression::do_check_types(Gogo*)\n \t  {\n \t    const Array_type* at = args->front()->type()->array_type();\n \t    const Type* e = at->element_type()->forwarded();\n-\t    if (e == Type::lookup_integer_type(\"uint8\"))\n+\t    if (e->integer_type() != NULL && e->integer_type()->is_byte())\n \t      break;\n \t  }\n \n@@ -9100,7 +9100,8 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n \ttree arg2_len;\n \ttree element_size;\n \tif (arg2->type()->is_string_type()\n-\t    && element_type == Type::lookup_integer_type(\"uint8\"))\n+\t    && element_type->integer_type() != NULL\n+\t    && element_type->integer_type()->is_byte())\n \t  {\n \t    arg2_tree = save_expr(arg2_tree);\n \t    arg2_val = String_type::bytes_tree(gogo, arg2_tree);"}, {"sha": "a5de1750f436ff19f6edc0ea16a802885ba5ea38", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "patch": "@@ -88,10 +88,12 @@ Gogo::Gogo(Backend* backend, Linemap* linemap, int int_type_size,\n   // to the same Named_object.\n   Named_object* byte_type = this->declare_type(\"byte\", loc);\n   byte_type->set_type_value(uint8_type);\n+  uint8_type->integer_type()->set_is_byte();\n \n   // \"rune\" is an alias for \"int\".\n   Named_object* rune_type = this->declare_type(\"rune\", loc);\n   rune_type->set_type_value(int_type);\n+  int_type->integer_type()->set_is_rune();\n \n   this->add_named_type(Type::make_integer_type(\"uintptr\", true,\n \t\t\t\t\t       pointer_size,"}, {"sha": "055bd67863d4896e57df60be834418903fe5fca8", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "patch": "@@ -767,7 +767,7 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n   if (lhs->complex_type() != NULL && rhs->complex_type() != NULL)\n     return true;\n \n-  // An integer, or []byte, or []int, may be converted to a string.\n+  // An integer, or []byte, or []rune, may be converted to a string.\n   if (lhs->is_string_type())\n     {\n       if (rhs->integer_type() != NULL)\n@@ -776,19 +776,18 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n \t{\n \t  const Type* e = rhs->array_type()->element_type()->forwarded();\n \t  if (e->integer_type() != NULL\n-\t      && (e == Type::lookup_integer_type(\"uint8\")\n-\t\t  || e == Type::lookup_integer_type(\"int\")))\n+\t      && (e->integer_type()->is_byte()\n+\t\t  || e->integer_type()->is_rune()))\n \t    return true;\n \t}\n     }\n \n-  // A string may be converted to []byte or []int.\n+  // A string may be converted to []byte or []rune.\n   if (rhs->is_string_type() && lhs->is_slice_type())\n     {\n       const Type* e = lhs->array_type()->element_type()->forwarded();\n       if (e->integer_type() != NULL\n-\t  && (e == Type::lookup_integer_type(\"uint8\")\n-\t      || e == Type::lookup_integer_type(\"int\")))\n+\t  && (e->integer_type()->is_byte() || e->integer_type()->is_rune()))\n \treturn true;\n     }\n "}, {"sha": "afb8a415564bd66b9f214f683c3fde45de0f1bdf", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b31a84d76aaed7715210c6dc7d50dc2c47afd79/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=7b31a84d76aaed7715210c6dc7d50dc2c47afd79", "patch": "@@ -1386,7 +1386,27 @@ class Integer_type : public Type\n   bool\n   is_identical(const Integer_type* t) const;\n \n- protected:\n+  // Whether this is the type \"byte\" or another name for \"byte\".\n+  bool\n+  is_byte() const\n+  { return this->is_byte_; }\n+\n+  // Mark this as the \"byte\" type.\n+  void\n+  set_is_byte()\n+  { this->is_byte_ = true; }\n+\n+  // Whether this is the type \"rune\" or another name for \"rune\".\n+  bool\n+  is_rune() const\n+  { return this->is_rune_; }\n+\n+  // Mark this as the \"rune\" type.\n+  void\n+  set_is_rune()\n+  { this->is_rune_ = true; }\n+\n+protected:\n   bool\n   do_compare_is_identity(Gogo*) const\n   { return true; }\n@@ -1410,8 +1430,8 @@ class Integer_type : public Type\n   Integer_type(bool is_abstract, bool is_unsigned, int bits,\n \t       int runtime_type_kind)\n     : Type(TYPE_INTEGER),\n-      is_abstract_(is_abstract), is_unsigned_(is_unsigned), bits_(bits),\n-      runtime_type_kind_(runtime_type_kind)\n+      is_abstract_(is_abstract), is_unsigned_(is_unsigned), is_byte_(false),\n+      is_rune_(false), bits_(bits), runtime_type_kind_(runtime_type_kind)\n   { }\n \n   // Map names of integer types to the types themselves.\n@@ -1422,6 +1442,10 @@ class Integer_type : public Type\n   bool is_abstract_;\n   // True if this is an unsigned type.\n   bool is_unsigned_;\n+  // True if this is the byte type.\n+  bool is_byte_;\n+  // True if this is the rune type.\n+  bool is_rune_;\n   // The number of bits.\n   int bits_;\n   // The runtime type code used in the type descriptor for this type."}]}