{"sha": "73292fcf29ebad0ff753d0d57d7bef3677187b0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMyOTJmY2YyOWViYWQwZmY3NTNkMGQ1N2Q3YmVmMzY3NzE4N2IwZQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2012-05-04T02:52:27Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2012-05-04T02:52:27Z"}, "message": "re PR rtl-optimization/52804 (IRA/RELOAD allocate wrong register on ARM for cortex-m0)\n\n\n\tPR rtl-optimization/52804\n\t* reload1.c (reload_reg_reaches_end_p): Check whether successor\n\treload with type RELOAD_FOR_INPUT_ADDRESS kills reload register\n\tof current one with type RELOAD_FOR_INPADDR_ADDRESS.\n\tSame stands for reloads with type RELOAD_FOR_OUTPUT_ADDRESS and\n\tRELOAD_FOR_OUTADDR_ADDRESS.\n\nFrom-SVN: r187139", "tree": {"sha": "b353a2df6244bb00d33f5acdd7a5bbea679cfe7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b353a2df6244bb00d33f5acdd7a5bbea679cfe7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73292fcf29ebad0ff753d0d57d7bef3677187b0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73292fcf29ebad0ff753d0d57d7bef3677187b0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73292fcf29ebad0ff753d0d57d7bef3677187b0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73292fcf29ebad0ff753d0d57d7bef3677187b0e/comments", "author": null, "committer": null, "parents": [{"sha": "244541410209602edc266168fdb1adba099eee88", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/244541410209602edc266168fdb1adba099eee88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/244541410209602edc266168fdb1adba099eee88"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "746087a0aae5c93a577d2fe1ed0354c4d85211b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73292fcf29ebad0ff753d0d57d7bef3677187b0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73292fcf29ebad0ff753d0d57d7bef3677187b0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73292fcf29ebad0ff753d0d57d7bef3677187b0e", "patch": "@@ -1,3 +1,12 @@\n+2012-05-04  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR rtl-optimization/52804\n+\t* reload1.c (reload_reg_reaches_end_p): Check whether successor\n+\treload with type RELOAD_FOR_INPUT_ADDRESS kills reload register\n+\tof current one with type RELOAD_FOR_INPADDR_ADDRESS.\n+\tSame stands for reloads with type RELOAD_FOR_OUTPUT_ADDRESS and\n+\tRELOAD_FOR_OUTADDR_ADDRESS.\n+\n 2012-05-04  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \tPR c++/24985"}, {"sha": "359a89313f090ec487246bbc2fc9a6122b0dbd71", "filename": "gcc/reload1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73292fcf29ebad0ff753d0d57d7bef3677187b0e/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73292fcf29ebad0ff753d0d57d7bef3677187b0e/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=73292fcf29ebad0ff753d0d57d7bef3677187b0e", "patch": "@@ -5429,6 +5429,13 @@ reload_reg_reaches_end_p (unsigned int regno, int reloadnum)\n \tif (TEST_HARD_REG_BIT (reload_reg_used_in_input[i], regno))\n \t  return 0;\n \n+      /* Reload register of reload with type RELOAD_FOR_INPADDR_ADDRESS\n+\t could be killed if the register is also used by reload with type\n+\t RELOAD_FOR_INPUT_ADDRESS, so check it.  */\n+      if (type == RELOAD_FOR_INPADDR_ADDRESS\n+\t  && TEST_HARD_REG_BIT (reload_reg_used_in_input_addr[opnum], regno))\n+\treturn 0;\n+\n       for (i = opnum + 1; i < reload_n_operands; i++)\n \tif (TEST_HARD_REG_BIT (reload_reg_used_in_input_addr[i], regno)\n \t    || TEST_HARD_REG_BIT (reload_reg_used_in_inpaddr_addr[i], regno))\n@@ -5503,6 +5510,13 @@ reload_reg_reaches_end_p (unsigned int regno, int reloadnum)\n \t    || TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[i], regno))\n \t  return 0;\n \n+      /* Reload register of reload with type RELOAD_FOR_OUTADDR_ADDRESS\n+\t could be killed if the register is also used by reload with type\n+\t RELOAD_FOR_OUTPUT_ADDRESS, so check it.  */\n+      if (type == RELOAD_FOR_OUTADDR_ADDRESS\n+\t  && TEST_HARD_REG_BIT (reload_reg_used_in_outaddr_addr[opnum], regno))\n+\treturn 0;\n+\n       return 1;\n \n     default:"}]}