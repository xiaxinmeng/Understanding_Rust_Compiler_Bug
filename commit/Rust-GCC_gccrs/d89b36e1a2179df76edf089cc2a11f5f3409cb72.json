{"sha": "d89b36e1a2179df76edf089cc2a11f5f3409cb72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDg5YjM2ZTFhMjE3OWRmNzZlZGYwODljYzJhMTFmNWYzNDA5Y2I3Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-01-26T02:48:01Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-01-26T02:48:01Z"}, "message": "re PR rtl-optimization/25703 (ACATS cxa4024 failure)\n\n\n\tPR rtl-optimization/25703\n\t* combine.c (try_combine): Handle zero_extract and strict_low_part\n\tof non-lowpart SUBREGs for constant reg_subword_p set optimization.\n\n\t* gcc.target/i386/20060125-1.c: New test case.\n\t* gcc.target/i386/20060125-2.c: New test case.\n\nFrom-SVN: r110242", "tree": {"sha": "8f729514e4450856c50071a4d4fd1e43842ed815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f729514e4450856c50071a4d4fd1e43842ed815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d89b36e1a2179df76edf089cc2a11f5f3409cb72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89b36e1a2179df76edf089cc2a11f5f3409cb72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89b36e1a2179df76edf089cc2a11f5f3409cb72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89b36e1a2179df76edf089cc2a11f5f3409cb72/comments", "author": null, "committer": null, "parents": [{"sha": "51302a4168aced438d184aa0dce95c9766aefd97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51302a4168aced438d184aa0dce95c9766aefd97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51302a4168aced438d184aa0dce95c9766aefd97"}], "stats": {"total": 111, "additions": 91, "deletions": 20}, "files": [{"sha": "df995ab680450e1418d40933a8be7ba80b7ad01e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d89b36e1a2179df76edf089cc2a11f5f3409cb72", "patch": "@@ -1,3 +1,9 @@\n+2006-01-25  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/25703\n+\t* combine.c (try_combine): Handle zero_extract and strict_low_part\n+\tof non-lowpart SUBREGs for constant reg_subword_p set optimization.\n+\n 2006-01-25  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* global.c: Fix comment typos."}, {"sha": "2c90be5a2e41cb780ad1438aa27ddfce4d6aa161", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=d89b36e1a2179df76edf089cc2a11f5f3409cb72", "patch": "@@ -1951,40 +1951,38 @@ try_combine (rtx i3, rtx i2, rtx i1, int *new_direct_jump_p)\n       int offset = -1;\n       int width = 0;\n \n-      if (GET_CODE (dest) == STRICT_LOW_PART)\n-\t{\n-\t  width = GET_MODE_BITSIZE (GET_MODE (XEXP (dest, 0)));\n-\t  offset = 0;\n-\t}\n-      else if (GET_CODE (dest) == ZERO_EXTRACT)\n+      if (GET_CODE (dest) == ZERO_EXTRACT)\n \t{\n \t  if (GET_CODE (XEXP (dest, 1)) == CONST_INT\n \t      && GET_CODE (XEXP (dest, 2)) == CONST_INT)\n \t    {\n \t      width = INTVAL (XEXP (dest, 1));\n \t      offset = INTVAL (XEXP (dest, 2));\n-\n+\t      dest = XEXP (dest, 0);\n \t      if (BITS_BIG_ENDIAN)\n-\t\toffset = GET_MODE_BITSIZE (GET_MODE (XEXP (dest, 0)))\n-\t\t\t - width - offset;\n+\t\toffset = GET_MODE_BITSIZE (GET_MODE (dest)) - width - offset;\n \t    }\n \t}\n-      else if (subreg_lowpart_p (dest))\n+      else\n \t{\n+\t  if (GET_CODE (dest) == STRICT_LOW_PART)\n+\t    dest = XEXP (dest, 0);\n \t  width = GET_MODE_BITSIZE (GET_MODE (dest));\n \t  offset = 0;\n \t}\n-      /* ??? Preserve the original logic to handle setting the high word\n-\t of double-word pseudos, where inner is half the size of outer\n-\t but not the lowpart.  This could be generalized by handling\n-\t SUBREG_BYTE, WORDS_BIG_ENDIAN and BYTES_BIG_ENDIAN ourselves.\n-\t Unfortunately this logic is tricky to get right and probably\n-\t not worth the effort.  */\n-      else if (GET_MODE_BITSIZE (GET_MODE (SET_DEST (temp)))\n-\t       == 2 * GET_MODE_BITSIZE (GET_MODE (dest)))\n+\n+      if (offset >= 0)\n \t{\n-\t  width = GET_MODE_BITSIZE (GET_MODE (dest));\n-\t  offset = width;\n+\t  /* If this is the low part, we're done.  */\n+\t  if (subreg_lowpart_p (dest))\n+\t    ;\n+\t  /* Handle the case where inner is twice the size of outer.  */\n+\t  else if (GET_MODE_BITSIZE (GET_MODE (SET_DEST (temp)))\n+\t\t   == 2 * GET_MODE_BITSIZE (GET_MODE (dest)))\n+\t    offset += GET_MODE_BITSIZE (GET_MODE (dest));\n+\t  /* Otherwise give up for now.  */\n+\t  else\n+\t    offset = -1;\n \t}\n \n       if (offset >= 0)"}, {"sha": "075def5ca25f4cd2840228e56e1624fbefbb5738", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d89b36e1a2179df76edf089cc2a11f5f3409cb72", "patch": "@@ -1,3 +1,10 @@\n+2006-01-25  Jan Hubicka  <jh@suse.cz>\n+\t    Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR rtl-optimization/25703\n+\t* gcc.target/i386/20060125-1.c: New test case.\n+\t* gcc.target/i386/20060125-2.c: New test case.\n+\n 2006-01-25  Tobias Schl\ufffdter  <tobias.schlueter@physik.uni-muenchen.de>\n \n \tPR fortran/18540"}, {"sha": "cbb4e65d06fc6b95bc8644beb9bc56a1ed3d09bc", "filename": "gcc/testsuite/gcc.target/i386/20060125-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-1.c?ref=d89b36e1a2179df76edf089cc2a11f5f3409cb72", "patch": "@@ -0,0 +1,30 @@\n+/* PR rtl-optimization/25703 */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mtune=i486\" } */\n+\n+extern void abort (void);\n+\n+struct a\n+{\n+        int a;\n+        char b,c,d,e;\n+};\n+\n+__attribute__ ((noinline))\n+__attribute__ ((regparm(1))) t(struct a a)\n+{\n+        if (a.a!=1 || a.b!=1 || a.c!=1)\n+                        abort();\n+}\n+\n+int main()\n+{\n+        struct a a;\n+        a.c=1;\n+        a.a=1;\n+        a.b=1;\n+        t(a);\n+        return 0;\n+}\n+"}, {"sha": "7964ca1cc86f9896a7844b9f0884962922a24f60", "filename": "gcc/testsuite/gcc.target/i386/20060125-2.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d89b36e1a2179df76edf089cc2a11f5f3409cb72/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F20060125-2.c?ref=d89b36e1a2179df76edf089cc2a11f5f3409cb72", "patch": "@@ -0,0 +1,30 @@\n+/* PR rtl-optimization/25703 */\n+/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-O2 -mtune=pentiumpro\" } */\n+\n+extern void abort (void);\n+\n+struct a\n+{\n+        int a;\n+        char b,c,d,e;\n+};\n+\n+__attribute__ ((noinline))\n+__attribute__ ((regparm(1))) t(struct a a)\n+{\n+        if (a.a!=1 || a.b!=1 || a.c!=1)\n+                        abort();\n+}\n+\n+int main()\n+{\n+        struct a a;\n+        a.c=1;\n+        a.a=1;\n+        a.b=1;\n+        t(a);\n+        return 0;\n+}\n+"}]}