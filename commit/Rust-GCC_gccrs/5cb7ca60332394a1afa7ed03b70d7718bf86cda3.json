{"sha": "5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiN2NhNjAzMzIzOTRhMWFmYTdlZDAzYjcwZDc3MThiZjg2Y2RhMw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-12-08T08:05:33Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-12-08T08:05:33Z"}, "message": "Enable VNNI support [4/5]\n\ngcc/\n\t* config/i386/avx512vnniintrin.h (_mm512_dpwssd_epi32,\n\t_mm512_mask_dpwssd_epi32, _mm512_maskz_dpwssd_epi32): New intrinsics.\n\t* config/i386/avx512vnnivlintrin.h (_mm256_dpwssd_epi32,\n\t_mm256_mask_dpwssd_epi32, _mm256_maskz_dpwssd_epi32, _mm_dpwssd_epi32,\n\t_mm_mask_dpwssd_epi32, _mm_maskz_dpwssd_epi32): Ditto.\n\ngcc/testsuite/\n\t* gcc.target/i386/avx512f-vnni-1.c: Add vdpwssd checks.\n\t* gcc.target/i386/avx512vl-vnni-1.c: Ditto.\n\t* gcc.target/i386/avx512f-vpdpwssd-2.c: New.\n\t* gcc.target/i386/avx512vl-vpdpwssd-2.c: Ditto.\n\nFrom-SVN: r255496", "tree": {"sha": "699c470185b0b40bbfdeabb957c8b3dbe55d724a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/699c470185b0b40bbfdeabb957c8b3dbe55d724a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17ecc36ec4753ff04791ee660217fd62b092b3eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17ecc36ec4753ff04791ee660217fd62b092b3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17ecc36ec4753ff04791ee660217fd62b092b3eb"}], "stats": {"total": 218, "additions": 204, "deletions": 14}, "files": [{"sha": "1d20dc5234c74390c2a153a8ffda2dbbb1399c23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -1,14 +1,19 @@\n 2017-12-08  Julia Koval  <julia.koval@intel.com>\n \n-\t* config.gcc: Add vaesintrin.h.\n-\t* config/i386/i386-builtin-types.def (V64QI_FTYPE_V64QI_V64QI): New type.\n-\t* config/i386/i386-builtin.def (__builtin_ia32_vaesdec_v16qi,\n-\t__builtin_ia32_vaesdec_v32qi, __builtin_ia32_vaesdec_v64qi): New builtins.\n-\t* config/i386/i386.c (ix86_expand_args_builtin): Handle new type.\n-\t* config/i386/immintrin.h: Include vaesintrin.h.\n-\t* config/i386/sse.md (vaesdec_<mode>): New pattern.\n-\t* config/i386/vaesintrin.h (_mm256_aesdec_epi128, _mm512_aesdec_epi128,\n-\t_mm_aesdec_epi128): New intrinsics.\n+\t* config/i386/avx512vnniintrin.h (_mm512_dpwssd_epi32,\n+\t_mm512_mask_dpwssd_epi32, _mm512_maskz_dpwssd_epi32): New intrinsics.\n+\t* config/i386/avx512vnnivlintrin.h (_mm256_dpwssd_epi32,\n+\t_mm256_mask_dpwssd_epi32, _mm256_maskz_dpwssd_epi32, _mm_dpwssd_epi32,\n+\t_mm_mask_dpwssd_epi32, _mm_maskz_dpwssd_epi32): Ditto.\n+\n+2017-12-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* config/i386/avx512vnniintrin.h (_mm512_dpbusds_epi32,\n+\t_mm512_mask_dpbusds_epi32, _mm512_maskz_dpbusds_epi32): New.\n+\t* config/i386/avx512vnnivlintrin.h (_mm256_dpbusds_epi32,\n+\t_mm256_mask_dpbusds_epi32, _mm256_maskz_dpbusds_epi32,\n+\t_mm_dpbusds_epi32, _mm_mask_dpbusds_epi32,\n+\t_mm_maskz_dpbusds_epi32): New intrinsics.\n \n 2017-12-07  Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "c435dc14a85184423ada77d8dbe3298c4f7c0aae", "filename": "gcc/config/i386/avx512vnniintrin.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnniintrin.h?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -85,6 +85,31 @@ _mm512_maskz_dpbusds_epi32 (__mmask16 __A, __m512i __B, __m512i __C,\n \t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n }\n \n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_dpwssd_epi32 (__m512i __A, __m512i __B, __m512i __C)\n+{\n+  return (__m512i) __builtin_ia32_vpdpwssd_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t(__v16si) __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_dpwssd_epi32 (__m512i __A, __mmask16 __B, __m512i __C, __m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpwssd_v16si_mask ((__v16si)__A,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_dpwssd_epi32 (__mmask16 __A, __m512i __B, __m512i __C,\n+\t\t\t\t\t\t\t__m512i __D)\n+{\n+  return (__m512i)__builtin_ia32_vpdpwssd_v16si_maskz ((__v16si)__B,\n+\t\t\t\t(__v16si) __C, (__v16si) __D, (__mmask16)__A);\n+}\n+\n #ifdef __DISABLE_AVX512VNNI__\n #undef __DISABLE_AVX512VNNI__\n #pragma GCC pop_options"}, {"sha": "d87feaa3815beabdf0adcfd93b2eaacff82c83f5", "filename": "gcc/config/i386/avx512vnnivlintrin.h", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vnnivlintrin.h?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -131,6 +131,54 @@ _mm_maskz_dpbusds_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n \t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n }\n \n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_dpwssd_epi32 (__m256i __A, __m256i __B, __m256i __C)\n+{\n+  return (__m256i) __builtin_ia32_vpdpwssd_v8si ((__v8si)__A, (__v8si) __B,\n+\t\t\t\t\t\t\t\t(__v8si) __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_dpwssd_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpwssd_v8si_mask ((__v8si)__A, (__v8si) __C,\n+\t\t\t\t\t\t(__v8si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_dpwssd_epi32 (__mmask8 __A, __m256i __B, __m256i __C, __m256i __D)\n+{\n+  return (__m256i)__builtin_ia32_vpdpwssd_v8si_maskz ((__v8si)__B,\n+\t\t\t\t(__v8si) __C, (__v8si) __D, (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_dpwssd_epi32 (__m128i __A, __m128i __B, __m128i __C)\n+{\n+  return (__m128i) __builtin_ia32_vpdpwssd_v4si ((__v4si)__A, (__v4si) __B,\n+\t\t\t\t\t\t\t\t(__v4si) __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_dpwssd_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpwssd_v4si_mask ((__v4si)__A, (__v4si) __C,\n+\t\t\t\t\t\t(__v4si) __D, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_dpwssd_epi32 (__mmask8 __A, __m128i __B, __m128i __C, __m128i __D)\n+{\n+  return (__m128i)__builtin_ia32_vpdpwssd_v4si_maskz ((__v4si)__B,\n+\t\t\t\t(__v4si) __C, (__v4si) __D, (__mmask8)__A);\n+}\n+\n #ifdef __DISABLE_AVX512VNNIVL__\n #undef __DISABLE_AVX512VNNIVL__\n #pragma GCC pop_options"}, {"sha": "b13130d445415b0800895faadcf5cfcca0899445", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -1,10 +1,16 @@\n 2017-12-08  Julia Koval  <julia.koval@intel.com>\n \n-\t* gcc.target/i386/avx512-check.h: Handle bit_VAES.\n-\t* gcc.target/i386/avx512f-aesdec-2.c: New test.\n-\t* gcc.target/i386/avx512fvl-vaes-1.c: Ditto.\n-\t* gcc.target/i386/avx512vl-aesdec-2.c: Ditto.\n-\t* gcc.target/i386/i386.exp (check_effective_target_avx512vaes): New.\n+\t* gcc.target/i386/avx512f-vnni-1.c: Add vdpwssd checks.\n+\t* gcc.target/i386/avx512vl-vnni-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpdpwssd-2.c: New.\n+\t* gcc.target/i386/avx512vl-vpdpwssd-2.c: Ditto.\n+\n+2017-12-08  Julia Koval  <julia.koval@intel.com>\n+\n+\t* gcc.target/i386/avx512f-vnni-1.c: Add vpdpbusds check.\n+\t* gcc.target/i386/avx512vl-vnni-1.c: Ditto.\n+\t* gcc.target/i386/avx512f-vpdpbusds-2.c: New.\n+\t* gcc.target/i386/avx512vl-vpdpbusds-2.c: Ditto.\n \n 2017-12-07  Sandra Loosemore  <sandra@codesourcery.com>\n "}, {"sha": "d6c319b8007aa97f1d9d6e1688d3b4601b11c2b7", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vnni-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vnni-1.c?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -6,6 +6,9 @@\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n #include <immintrin.h>\n \n@@ -25,4 +28,8 @@ avx512f_test (void)\n   x = _mm512_mask_dpbusds_epi32 (x, m16, y, z);\n   x = _mm512_maskz_dpbusds_epi32 (m16, x, y, z);\n \n+  x = _mm512_dpwssd_epi32 (x, y, z);\n+  x = _mm512_mask_dpwssd_epi32 (x, m16, y, z);\n+  x = _mm512_maskz_dpwssd_epi32 (m16, x, y, z);\n+\n }"}, {"sha": "d8488e8251fc1465dc62b99f75ce2ff6b3476e2d", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpdpwssd-2.c", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpdpwssd-2.c?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -0,0 +1,69 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vnni\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512F\n+\n+#define AVX512VNNI\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 16)\n+#define SIZE_RES (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, short *s1, short *s2)\n+{\n+  short tempres[SIZE];\n+  for (int i = 0; i < SIZE; i++) {\n+    tempres[i] = ((int)(s1[i]) * (int)(s2[i]));\n+  }\n+  for (int i = 0; i < SIZE_RES; i++) {\n+    long long test = (long long)dst[i] + tempres[i*2] + tempres[i*2 + 1];\n+    r[i] = test;\n+  }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3;\n+  UNION_TYPE (AVX512F_LEN, i_w) src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE_RES];\n+  int res_ref2[SIZE_RES];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE_RES; i++)\n+    {\n+      res1.a[i] = 0x7fffffff;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a);\n+  CALC (res_ref2, res2.a, src1.a, src2.a);\n+\n+  res1.x = INTRINSIC (_dpwssd_epi32) (res1.x, src1.x, src2.x);\n+  res2.x = INTRINSIC (_mask_dpwssd_epi32) (res2.x, mask, src1.x, src2.x);\n+  res3.x = INTRINSIC (_maskz_dpwssd_epi32) (mask, res3.x, src1.x, src2.x);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref2))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref2, mask, SIZE_RES);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref2))\n+    abort ();\n+}"}, {"sha": "aba98979021d922b3c3862a21166262940781bdb", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vnni-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vnni-1.c?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -12,6 +12,12 @@\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n /* { dg-final { scan-assembler-times \"vpdpbusds\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpdpwssd\\[ \\\\t\\]+\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n \n \n #include <immintrin.h>\n@@ -39,4 +45,12 @@ avx512f_test (void)\n   x_ = _mm_mask_dpbusds_epi32 (x_, m, y_, z_);\n   x_ = _mm_maskz_dpbusds_epi32 (m, x_, y_, z_);\n \n+  x = _mm256_dpwssd_epi32 (x, y, z);\n+  x = _mm256_mask_dpwssd_epi32 (x, m, y, z);\n+  x = _mm256_maskz_dpwssd_epi32 (m, x, y, z);\n+\n+  x_ = _mm_dpwssd_epi32 (x_, y_, z_);\n+  x_ = _mm_mask_dpwssd_epi32 (x_, m, y_, z_);\n+  x_ = _mm_maskz_dpwssd_epi32 (m, x_, y_, z_);\n+\n }"}, {"sha": "023f06f93c5bc3bf1baeb2ef2ceb7096f9f76c99", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpdpwssd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb7ca60332394a1afa7ed03b70d7718bf86cda3/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpdpwssd-2.c?ref=5cb7ca60332394a1afa7ed03b70d7718bf86cda3", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vnni -mavx512vl\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vnni } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpwssd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpdpwssd-2.c\""}]}