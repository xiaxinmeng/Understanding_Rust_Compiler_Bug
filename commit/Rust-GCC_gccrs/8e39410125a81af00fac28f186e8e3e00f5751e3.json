{"sha": "8e39410125a81af00fac28f186e8e3e00f5751e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGUzOTQxMDEyNWE4MWFmMDBmYWMyOGYxODZlOGUzZTAwZjU3NTFlMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-20T10:06:48Z"}, "committer": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2020-11-20T10:06:48Z"}, "message": "Fix comparsion of {CLOBBER} in icf\n\nafter fixing few issues I gotto stage where 1.4M icf mismatches are due to\ncomparing two gimple clobber.  The problem is that operand_equal_p match\nclobber\n\ncase CONSTRUCTOR:\n /* In GIMPLE empty constructors are allowed in initializers of\n    aggregates.  */\n return !CONSTRUCTOR_NELTS (arg0) && !CONSTRUCTOR_NELTS (arg1);\n\nBut this happens too late after comparing its types (that are not very relevant\nfor memory store).\n\nIn the context of ipa-icf we do not really need to match RHS of gimple clobbers:\nit is enough to know that the LHS stores can be considered equivalent.\n\nI this added logic to hash them all the same way and compare using\nTREE_CLOBBER_P flag.  I see other option in extending operand_equal_p\nin fold-const to handle them more generously or making stmt hash and compare\nto skip comparing/hashing RHS of gimple_clobber_p.\n\n\t* ipa-icf-gimple.c (func_checker::hash_operand): Hash gimple clobber.\n\t(func_checker::operand_equal_p): Special case gimple clobber.", "tree": {"sha": "ff93b686a1130dab90fddedda7f08f3bc1a2ce68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff93b686a1130dab90fddedda7f08f3bc1a2ce68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8e39410125a81af00fac28f186e8e3e00f5751e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e39410125a81af00fac28f186e8e3e00f5751e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e39410125a81af00fac28f186e8e3e00f5751e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e39410125a81af00fac28f186e8e3e00f5751e3/comments", "author": null, "committer": null, "parents": [{"sha": "fdace7584056de2f63bde2e3087f26beb6b0f97d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdace7584056de2f63bde2e3087f26beb6b0f97d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdace7584056de2f63bde2e3087f26beb6b0f97d"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "69bc9ab5b3440550be2cee48486f1d75f7c636b3", "filename": "gcc/ipa-icf-gimple.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8e39410125a81af00fac28f186e8e3e00f5751e3/gcc%2Fipa-icf-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8e39410125a81af00fac28f186e8e3e00f5751e3/gcc%2Fipa-icf-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf-gimple.c?ref=8e39410125a81af00fac28f186e8e3e00f5751e3", "patch": "@@ -245,6 +245,14 @@ func_checker::hash_operand (const_tree arg, inchash::hash &hstate,\n       break;\n     }\n \n+  /* In gimple all clobbers can be considered equal: while comparaing two\n+     gimple clobbers we match the left hand memory accesses.  */\n+  if (TREE_CLOBBER_P (arg))\n+    {\n+      hstate.add_int (0xc10bbe5);\n+      return;\n+    }\n+\n   return operand_compare::hash_operand (arg, hstate, flags);\n }\n \n@@ -306,6 +314,10 @@ func_checker::operand_equal_p (const_tree t1, const_tree t2,\n     default:\n       break;\n     }\n+  /* In gimple all clobbers can be considered equal.  We match the right hand\n+     memory accesses.  */\n+  if (TREE_CLOBBER_P (t1) || TREE_CLOBBER_P (t2))\n+    return TREE_CLOBBER_P (t1) == TREE_CLOBBER_P (t2);\n \n   return operand_compare::operand_equal_p (t1, t2, flags);\n }"}]}