{"sha": "c642d91957c82c4a1db50e17f62dc0aa70b8765e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzY0MmQ5MTk1N2M4MmM0YTFkYjUwZTE3ZjYyZGMwYWE3MGI4NzY1ZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-05-31T17:17:29Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2016-05-31T17:17:29Z"}, "message": "re PR c++/71248 (crash on in-class initializer of array of pointer to member)\n\n/cp\n2016-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71248\n\t* decl.c (check_static_variable_definition): Use DECL_SOURCE_LOCATION\n\tto obtain correct locations; avoid redundant diagnostics on\n\tout-of-class definitions.\n\n/testsuite\n2016-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/71248\n\t* g++.dg/cpp0x/pr71248.C: New.\n\t* g++.dg/cpp0x/auto7.C: Test column numbers too.\n\t* g++.dg/cpp0x/constexpr-static8.C: Likewise.\n\t* g++.dg/init/new37.C: Likewise.\n\t* g++.dg/template/static1.C: Likewise.\n\t* g++.dg/template/static2.C: Likewise.\n\nFrom-SVN: r236931", "tree": {"sha": "14aab8875329d71e895c769273607c53e4fadfe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14aab8875329d71e895c769273607c53e4fadfe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c642d91957c82c4a1db50e17f62dc0aa70b8765e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c642d91957c82c4a1db50e17f62dc0aa70b8765e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c642d91957c82c4a1db50e17f62dc0aa70b8765e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c642d91957c82c4a1db50e17f62dc0aa70b8765e/comments", "author": null, "committer": null, "parents": [{"sha": "1ac1bb0cccdba65e0fc1c4f28e92d1fb2f593ac2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ac1bb0cccdba65e0fc1c4f28e92d1fb2f593ac2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ac1bb0cccdba65e0fc1c4f28e92d1fb2f593ac2"}], "stats": {"total": 78, "additions": 59, "deletions": 19}, "files": [{"sha": "0401255dad7c81a40d946f57b863fa92729e8fa3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -1,4 +1,11 @@\n-2016-05-27  Martin Sebor  <msebor@redhat.com>\n+2016-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71248\n+\t* decl.c (check_static_variable_definition): Use DECL_SOURCE_LOCATION\n+\tto obtain correct locations; avoid redundant diagnostics on\n+\tout-of-class definitions.\n+\n+2016-05-30  Martin Sebor  <msebor@redhat.com>\n \n \tPR c++/71306\n \t* init.c (warn_placement_new_too_small): Handle placement new arguments"}, {"sha": "cbbb84b9d0c18a0ef6d1d56cd538ca7015a8abbd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -8581,6 +8581,9 @@ build_ptrmem_type (tree class_type, tree member_type)\n static int\n check_static_variable_definition (tree decl, tree type)\n {\n+  /* Avoid redundant diagnostics on out-of-class definitions.  */\n+  if (!current_class_type || !TYPE_BEING_DEFINED (current_class_type))\n+    return 0;\n   /* Can't check yet if we don't know the type.  */\n   if (dependent_type_p (type))\n     return 0;\n@@ -8591,15 +8594,17 @@ check_static_variable_definition (tree decl, tree type)\n   else if (cxx_dialect >= cxx11 && !INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n     {\n       if (!COMPLETE_TYPE_P (type))\n-\terror (\"in-class initialization of static data member %q#D of \"\n-\t       \"incomplete type\", decl);\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"in-class initialization of static data member %q#D of \"\n+\t\t  \"incomplete type\", decl);\n       else if (literal_type_p (type))\n-\tpermerror (input_location,\n+\tpermerror (DECL_SOURCE_LOCATION (decl),\n \t\t   \"%<constexpr%> needed for in-class initialization of \"\n \t\t   \"static data member %q#D of non-integral type\", decl);\n       else\n-\terror (\"in-class initialization of static data member %q#D of \"\n-\t       \"non-literal type\", decl);\n+\terror_at (DECL_SOURCE_LOCATION (decl),\n+\t\t  \"in-class initialization of static data member %q#D of \"\n+\t\t  \"non-literal type\", decl);\n       return 1;\n     }\n \n@@ -8611,17 +8616,20 @@ check_static_variable_definition (tree decl, tree type)\n      required.  */\n   if (!ARITHMETIC_TYPE_P (type) && TREE_CODE (type) != ENUMERAL_TYPE)\n     {\n-      error (\"invalid in-class initialization of static data member \"\n-\t     \"of non-integral type %qT\",\n-\t     type);\n+      error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t\"invalid in-class initialization of static data member \"\n+\t\t\"of non-integral type %qT\",\n+\t\ttype);\n       return 1;\n     }\n   else if (!CP_TYPE_CONST_P (type))\n-    error (\"ISO C++ forbids in-class initialization of non-const \"\n-\t   \"static member %qD\",\n-\t   decl);\n+    error_at (DECL_SOURCE_LOCATION (decl),\n+\t      \"ISO C++ forbids in-class initialization of non-const \"\n+\t      \"static member %qD\",\n+\t      decl);\n   else if (!INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n-    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids initialization of member constant \"\n+    pedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wpedantic,\n+\t     \"ISO C++ forbids initialization of member constant \"\n \t     \"%qD of non-integral type %qT\", decl, type);\n \n   return 0;"}, {"sha": "cc1624fc366b5953aea03e553686b93062096807", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -1,3 +1,13 @@\n+2016-05-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/71248\n+\t* g++.dg/cpp0x/pr71248.C: New.\n+\t* g++.dg/cpp0x/auto7.C: Test column numbers too.\n+\t* g++.dg/cpp0x/constexpr-static8.C: Likewise.\n+\t* g++.dg/init/new37.C: Likewise.\n+\t* g++.dg/template/static1.C: Likewise.\n+\t* g++.dg/template/static2.C: Likewise.\n+\n 2016-05-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx512vl-vbroadcast-3.c: Scan %\\[re\\]di"}, {"sha": "99685d33375e4f7bda5fe79ee0184bf0103b498b", "filename": "gcc/testsuite/g++.dg/cpp0x/auto7.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fauto7.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -7,7 +7,7 @@ auto j;\t\t\t// { dg-error \"has no initializer\" }\n \n template<int> struct A\n {\n-  static auto k = 7;\t// { dg-error \"non-const\" }\n+  static auto k = 7;\t// { dg-error \"15:ISO C\\\\+\\\\+ forbids\" }\n   static auto l;\t// { dg-error \"has no initializer\" }\n   auto m;\t\t// { dg-error \"non-static data member declared\" }\n };"}, {"sha": "9facd0fe33d1be26883fe0e6634926d80dc0d8a9", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-static8.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-static8.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -3,6 +3,6 @@\n // { dg-options \"-fpermissive\" }\n \n struct Foo {\n-  static const double d = 3.14; // { dg-warning \"constexpr\" }\n+  static const double d = 3.14; // { dg-warning \"23:'constexpr' needed\" }\n };\n-const double Foo::d;            // { dg-warning \"constexpr\" }\n+const double Foo::d;"}, {"sha": "e996351a348951e67bf4a1ae0bfc8ad05671d49f", "filename": "gcc/testsuite/g++.dg/cpp0x/pr71248.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71248.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71248.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr71248.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/71248\n+// { dg-do compile { target c++11 } }\n+\n+struct S\n+{\n+    int a;\n+    static int S::*typeMembers[] = {  // { dg-error \"20:in-class initialization\" }\n+        &S::a,\n+    };\n+};"}, {"sha": "734b1419128e64503124d9d3cc13718c764fdbdc", "filename": "gcc/testsuite/g++.dg/init/new37.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -40,7 +40,8 @@ struct T1 {\n };\n \n struct T2 {\n-  static const double n = 2; // { dg-error \"non-integral type\" }\n+  static const double n = 2; // { dg-error \"23:'constexpr' needed\" \"\" { target c++11 } }\n+  // { dg-error \"23:ISO C\\\\+\\\\+ forbids\" \"\" { target c++98_only } 43 }\n };\n \n struct T3 {"}, {"sha": "76736acdb21ed67fa14b17956e03b35a72735d8b", "filename": "gcc/testsuite/g++.dg/template/static1.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic1.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -1,4 +1,6 @@\n template <typename T> struct A\n {\n-  static const int t[1][1]={{0}}; // { dg-error \"brace-enclosed|in-class\" }\n+  static const int t[1][1]={{0}}; // { dg-error \"20:'constexpr' needed\" \"\" { target c++11 } }\n+  // { dg-error \"20:invalid in-class\" \"\" { target c++98_only } 3 }\n+  // { dg-error \"28:a brace-enclosed\" \"\" { target c++98_only } 3 }\n };"}, {"sha": "d8ce087d229d42f980a1703dc733f7ff5ba44244", "filename": "gcc/testsuite/g++.dg/template/static2.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c642d91957c82c4a1db50e17f62dc0aa70b8765e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic2.C?ref=c642d91957c82c4a1db50e17f62dc0aa70b8765e", "patch": "@@ -4,7 +4,9 @@ template<int A::* P>\n class B\n {\n public:\n-  static int A::* const p = P; // { dg-error \"\" }\n+  static int A::* const p = P; // { dg-error \"25:'constexpr' needed\" \"\" { target c++11 } }\n+  // { dg-error \"25:invalid in-class\" \"\" { target c++98_only } 7 }\n+  // { dg-error \"29:template parameter\" \"\" { target c++98_only } 7 }\n };\n \n class A"}]}