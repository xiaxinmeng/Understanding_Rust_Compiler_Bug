{"sha": "0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYxNmM1NzI5YmZjNGE5OTM5NTc4ZmViN2UzMTlmNDFjN2RkOWI0MQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-10-21T20:34:47Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-10-21T20:34:47Z"}, "message": "Relax ADDR_SPACE_GENERIC_P checks for default address space hooks\n\nIf all address spaces use the same modes and forms, we would\nbe forced to replicate these hooks in the backend.  Which would\nthen require the creation of a new hook to replace\ntarget_default_pointer_address_modes_p.\n\n\t* targhooks.c (default_addr_space_pointer_mode): Remove check\n\tfor generic address space.\n\t(default_addr_space_address_mode): Likewise.\n\t(default_addr_space_valid_pointer_mode): Likewise.\n\t(default_addr_space_legitimate_address_p): Likewise.\n\t(default_addr_space_legitimize_address): Likewise.\n\nFrom-SVN: r229143", "tree": {"sha": "1d760d175ded09b634db1ebadfcfa055214ca9bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d760d175ded09b634db1ebadfcfa055214ca9bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f16c5729bfc4a9939578feb7e319f41c7dd9b41/comments", "author": null, "committer": null, "parents": [{"sha": "2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e44cd8b00ffeabf4a8ec8683ef97802bf9a9345"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "d5d304dcbf99a37955c3265f1a055dd4338e2971", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f16c5729bfc4a9939578feb7e319f41c7dd9b41/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f16c5729bfc4a9939578feb7e319f41c7dd9b41/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "patch": "@@ -1,5 +1,12 @@\n 2015-10-21  Richard Henderson  <rth@redhat.com>\n \n+\t* targhooks.c (default_addr_space_pointer_mode): Remove check\n+\tfor generic address space.\n+\t(default_addr_space_address_mode): Likewise.\n+\t(default_addr_space_valid_pointer_mode): Likewise.\n+\t(default_addr_space_legitimate_address_p): Likewise.\n+\t(default_addr_space_legitimize_address): Likewise.\n+\n \t* expr.c (expand_expr_real_2): Use convert_modes on disjoint\n \taddress spaces.\n "}, {"sha": "c39f266f21ca2deb8affb8cef58a6f854e9c40e2", "filename": "gcc/targhooks.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f16c5729bfc4a9939578feb7e319f41c7dd9b41/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f16c5729bfc4a9939578feb7e319f41c7dd9b41/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=0f16c5729bfc4a9939578feb7e319f41c7dd9b41", "patch": "@@ -1195,35 +1195,31 @@ default_ref_may_alias_errno (ao_ref *ref)\n   return false;\n }\n \n-/* Return the mode for a pointer to a given ADDRSPACE, defaulting to ptr_mode\n-   for the generic address space only.  */\n+/* Return the mode for a pointer to a given ADDRSPACE,\n+   defaulting to ptr_mode for all address spaces.  */\n \n machine_mode\n default_addr_space_pointer_mode (addr_space_t addrspace ATTRIBUTE_UNUSED)\n {\n-  gcc_assert (ADDR_SPACE_GENERIC_P (addrspace));\n   return ptr_mode;\n }\n \n-/* Return the mode for an address in a given ADDRSPACE, defaulting to Pmode\n-   for the generic address space only.  */\n+/* Return the mode for an address in a given ADDRSPACE,\n+   defaulting to Pmode for all address spaces.  */\n \n machine_mode\n default_addr_space_address_mode (addr_space_t addrspace ATTRIBUTE_UNUSED)\n {\n-  gcc_assert (ADDR_SPACE_GENERIC_P (addrspace));\n   return Pmode;\n }\n \n-/* Named address space version of valid_pointer_mode.  */\n+/* Named address space version of valid_pointer_mode.\n+   To match the above, the same modes apply to all address spaces.  */\n \n bool\n-default_addr_space_valid_pointer_mode (machine_mode mode, addr_space_t as)\n+default_addr_space_valid_pointer_mode (machine_mode mode,\n+\t\t\t\t       addr_space_t as ATTRIBUTE_UNUSED)\n {\n-  if (!ADDR_SPACE_GENERIC_P (as))\n-    return (mode == targetm.addr_space.pointer_mode (as)\n-\t    || mode == targetm.addr_space.address_mode (as));\n-\n   return targetm.valid_pointer_mode (mode);\n }\n \n@@ -1243,27 +1239,24 @@ target_default_pointer_address_modes_p (void)\n   return true;\n }\n \n-/* Named address space version of legitimate_address_p.  */\n+/* Named address space version of legitimate_address_p.\n+   By default, all address spaces have the same form.  */\n \n bool\n default_addr_space_legitimate_address_p (machine_mode mode, rtx mem,\n-\t\t\t\t\t bool strict, addr_space_t as)\n+\t\t\t\t\t bool strict,\n+\t\t\t\t\t addr_space_t as ATTRIBUTE_UNUSED)\n {\n-  if (!ADDR_SPACE_GENERIC_P (as))\n-    gcc_unreachable ();\n-\n   return targetm.legitimate_address_p (mode, mem, strict);\n }\n \n-/* Named address space version of LEGITIMIZE_ADDRESS.  */\n+/* Named address space version of LEGITIMIZE_ADDRESS.\n+   By default, all address spaces have the same form.  */\n \n rtx\n-default_addr_space_legitimize_address (rtx x, rtx oldx,\n-\t\t\t\t       machine_mode mode, addr_space_t as)\n+default_addr_space_legitimize_address (rtx x, rtx oldx, machine_mode mode,\n+\t\t\t\t       addr_space_t as ATTRIBUTE_UNUSED)\n {\n-  if (!ADDR_SPACE_GENERIC_P (as))\n-    return x;\n-\n   return targetm.legitimize_address (x, oldx, mode);\n }\n "}]}