{"sha": "13a6dfe3a1268265006628e58ec94d7d4222328d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTNhNmRmZTNhMTI2ODI2NTAwNjYyOGU1OGVjOTRkN2Q0MjIyMzI4ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-12-11T11:08:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-12-11T11:08:45Z"}, "message": "[Ada] Almost always inline init. procedure of small and simple records\n\n2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* fe.h (Debug_Generated_Code): Declare.\n\t* gcc-interface/gigi.h (enum inline_status_t): Rename\n\tis_disabled to is_default, is_enabled to is_requested and add\n\tis_prescribed.\n\t* gcc-interface/decl.c (inline_status_for_subprog): New function.\n\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Use it to get the\n\tinlining status of the subprogram.\n\t* gcc-interface/trans.c (gigi): Adjust to above renaming.\n\t(build_raise_check): Likewise.\n\t(Compilation_Unit_to_gnu): Likewise.\n\t(gnat_to_gnu): Likewise.\n\t* gcc-interface/utils.c (create_subprog_decl): Likewise.  Deal\n\twith is_prescribed status by setting\n\tDECL_DISREGARD_INLINE_LIMITS.  Do not set the\n\tDECL_NO_INLINE_WARNING_P flag if Debug_Generated_Code is true.\n\nFrom-SVN: r266976", "tree": {"sha": "e7a7cc44e293595fed209fd469dc146c46db4b6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7a7cc44e293595fed209fd469dc146c46db4b6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13a6dfe3a1268265006628e58ec94d7d4222328d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a6dfe3a1268265006628e58ec94d7d4222328d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13a6dfe3a1268265006628e58ec94d7d4222328d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13a6dfe3a1268265006628e58ec94d7d4222328d/comments", "author": null, "committer": null, "parents": [{"sha": "d6a73cc353b90dbb253985aa6aba95c0d98680e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6a73cc353b90dbb253985aa6aba95c0d98680e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6a73cc353b90dbb253985aa6aba95c0d98680e6"}], "stats": {"total": 130, "additions": 95, "deletions": 35}, "files": [{"sha": "b2e6e142ef35ccba8e30a19fcebb8e50e73872b8", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -1,3 +1,21 @@\n+2018-12-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Debug_Generated_Code): Declare.\n+\t* gcc-interface/gigi.h (enum inline_status_t): Rename\n+\tis_disabled to is_default, is_enabled to is_requested and add\n+\tis_prescribed.\n+\t* gcc-interface/decl.c (inline_status_for_subprog): New function.\n+\t(gnat_to_gnu_entity) <E_Subprogram_Type>: Use it to get the\n+\tinlining status of the subprogram.\n+\t* gcc-interface/trans.c (gigi): Adjust to above renaming.\n+\t(build_raise_check): Likewise.\n+\t(Compilation_Unit_to_gnu): Likewise.\n+\t(gnat_to_gnu): Likewise.\n+\t* gcc-interface/utils.c (create_subprog_decl): Likewise.  Deal\n+\twith is_prescribed status by setting\n+\tDECL_DISREGARD_INLINE_LIMITS.  Do not set the\n+\tDECL_NO_INLINE_WARNING_P flag if Debug_Generated_Code is true.\n+\n 2018-12-03  Gary Dismukes  <dismukes@adacore.com>\n \n \t* sem_aux.adb (Object_Type_Has_Constrained_Partial_View): Return"}, {"sha": "c85d69c5825e8af349138bd565de52c1edc45436", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -185,6 +185,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n /* opt: */\n \n #define Back_End_Inlining              opt__back_end_inlining\n+#define Debug_Generated_Code           opt__debug_generated_code\n #define Exception_Extra_Info           opt__exception_extra_info\n #define Exception_Locations_Suppressed opt__exception_locations_suppressed\n #define Exception_Mechanism            opt__exception_mechanism\n@@ -200,6 +201,7 @@ typedef enum {\n } Exception_Mechanism_Type;\n \n extern Boolean Back_End_Inlining;\n+extern Boolean Debug_Generated_Code;\n extern Boolean Exception_Extra_Info;\n extern Boolean Exception_Locations_Suppressed;\n extern Exception_Mechanism_Type Exception_Mechanism;"}, {"sha": "758f2c3733d5eff269514044b858df8e68818de4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -205,6 +205,7 @@ static tree gnat_to_gnu_component_type (Entity_Id, bool, bool);\n static tree gnat_to_gnu_subprog_type (Entity_Id, bool, bool, tree *);\n static int adjust_packed (tree, tree, int);\n static tree gnat_to_gnu_field (Entity_Id, tree, int, bool, bool);\n+static enum inline_status_t inline_status_for_subprog (Entity_Id);\n static tree gnu_ext_name_for_subprog (Entity_Id, tree);\n static void set_nonaliased_component_on_array_type (tree);\n static void set_reverse_storage_order_on_array_type (tree);\n@@ -3883,12 +3884,8 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n       {\n \ttree gnu_ext_name\n \t  = gnu_ext_name_for_subprog (gnat_entity, gnu_entity_name);\n-\tenum inline_status_t inline_status\n-\t  = Has_Pragma_No_Inline (gnat_entity)\n-\t    ? is_suppressed\n-\t    : Has_Pragma_Inline_Always (gnat_entity)\n-\t      ? is_required\n-\t      : (Is_Inlined (gnat_entity) ? is_enabled : is_disabled);\n+\tconst enum inline_status_t inline_status\n+\t  = inline_status_for_subprog (gnat_entity);\n \tbool public_flag = Is_Public (gnat_entity) || imported_p;\n \t/* Subprograms marked both Intrinsic and Always_Inline need not\n \t   have a body of their own.  */\n@@ -4934,6 +4931,44 @@ is_cplusplus_method (Entity_Id gnat_entity)\n   return false;\n }\n \n+/* Return the inlining status of the GNAT subprogram SUBPROG.  */\n+\n+static enum inline_status_t\n+inline_status_for_subprog (Entity_Id subprog)\n+{\n+  if (Has_Pragma_No_Inline (subprog))\n+    return is_suppressed;\n+\n+  if (Has_Pragma_Inline_Always (subprog))\n+    return is_required;\n+\n+  if (Is_Inlined (subprog))\n+    {\n+      tree gnu_type;\n+\n+      /* This is a kludge to work around a pass ordering issue: for small\n+\t record types with many components, i.e. typically bit-fields, the\n+\t initialization routine can contain many assignments that will be\n+\t merged by the GIMPLE store merging pass.  But this pass runs very\n+\t late in the pipeline, in particular after the inlining decisions\n+\t are made, so the inlining heuristics cannot take its outcome into\n+\t account.  Therefore, we optimistically override the heuristics for\n+\t the initialization routine in this case.  */\n+      if (Is_Init_Proc (subprog)\n+\t  && flag_store_merging\n+\t  && Is_Record_Type (Etype (First_Formal (subprog)))\n+\t  && (gnu_type = gnat_to_gnu_type (Etype (First_Formal (subprog))))\n+\t  && !TYPE_IS_BY_REFERENCE_P (gnu_type)\n+\t  && tree_fits_uhwi_p (TYPE_SIZE (gnu_type))\n+\t  && compare_tree_int (TYPE_SIZE (gnu_type), MAX_FIXED_MODE_SIZE) <= 0)\n+\treturn is_prescribed;\n+\n+      return is_requested;\n+    }\n+\n+  return is_default;\n+}\n+\n /* Finalize the processing of From_Limited_With incomplete types.  */\n \n void"}, {"sha": "f25c32879a30008a0e27bff20b23430e19a16439", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -439,9 +439,11 @@ enum inline_status_t\n   /* Inlining is suppressed for the subprogram.  */\n   is_suppressed,\n   /* No inlining is requested for the subprogram.  */\n-  is_disabled,\n+  is_default,\n   /* Inlining is requested for the subprogram.  */\n-  is_enabled,\n+  is_requested,\n+  /* Inlining is strongly requested for the subprogram.  */\n+  is_prescribed,\n   /* Inlining is required for the subprogram.  */\n   is_required\n };"}, {"sha": "db9223ef4a6bc10145432705d814dfe7047c3a0f", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -412,23 +412,23 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl (get_identifier (\"__gnat_malloc\"), NULL_TREE,\n \t\t\t   build_function_type_list (ptr_type_node, sizetype,\n \t\t\t\t\t\t     NULL_TREE),\n-\t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n+\t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n   DECL_IS_MALLOC (malloc_decl) = 1;\n \n   free_decl\n     = create_subprog_decl (get_identifier (\"__gnat_free\"), NULL_TREE,\n \t\t\t   build_function_type_list (void_type_node,\n \t\t\t\t\t\t     ptr_type_node, NULL_TREE),\n-\t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n+\t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n \n   realloc_decl\n     = create_subprog_decl (get_identifier (\"__gnat_realloc\"), NULL_TREE,\n \t\t\t   build_function_type_list (ptr_type_node,\n \t\t\t\t\t\t     ptr_type_node, sizetype,\n \t\t\t\t\t\t     NULL_TREE),\n-\t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n+\t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n \n   /* This is used for 64-bit multiplication with overflow checking.  */\n@@ -437,7 +437,7 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl (get_identifier (\"__gnat_mulv64\"), NULL_TREE,\n \t\t\t   build_function_type_list (int64_type, int64_type,\n \t\t\t\t\t\t     int64_type, NULL_TREE),\n-\t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n+\t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n \n   /* Name of the _Parent field in tagged record types.  */\n@@ -461,21 +461,21 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__get_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n   set_jmpbuf_decl\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__set_jmpbuf_address_soft\"),\n        NULL_TREE, build_function_type_list (void_type_node, jmpbuf_ptr_type,\n \t\t\t\t\t    NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n   get_excptr_decl\n     = create_subprog_decl\n       (get_identifier (\"system__soft_links__get_gnat_exception\"), NULL_TREE,\n        build_function_type_list (build_pointer_type (except_type_node),\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n   not_handled_by_others_decl = get_identifier (\"not_handled_by_others\");\n   for (t = TYPE_FIELDS (except_type_node); t; t = DECL_CHAIN (t))\n@@ -493,7 +493,7 @@ gigi (Node_Id gnat_root,\n       (get_identifier (\"__builtin_setjmp\"), NULL_TREE,\n        build_function_type_list (integer_type_node, jmpbuf_ptr_type,\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n@@ -503,7 +503,7 @@ gigi (Node_Id gnat_root,\n     = create_subprog_decl\n       (get_identifier (\"__builtin_update_setjmp_buf\"), NULL_TREE,\n        build_function_type_list (void_type_node, jmpbuf_ptr_type, NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n   DECL_BUILT_IN_CLASS (update_setjmp_buf_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (update_setjmp_buf_decl) = BUILT_IN_UPDATE_SETJMP_BUF;\n \n@@ -515,44 +515,44 @@ gigi (Node_Id gnat_root,\n   raise_nodefer_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_raise_nodefer_with_msg\"), NULL_TREE, ftype,\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n   set_exception_parameter_decl\n     = create_subprog_decl\n       (get_identifier (\"__gnat_set_exception_parameter\"), NULL_TREE,\n        build_function_type_list (void_type_node, ptr_type_node, ptr_type_node,\n \t\t\t\t NULL_TREE),\n-       NULL_TREE, is_disabled, true, true, true, false, false, NULL, Empty);\n+       NULL_TREE, is_default, true, true, true, false, false, NULL, Empty);\n \n   /* Hooks to call when entering/leaving an exception handler.  */\n   ftype = build_function_type_list (void_type_node, ptr_type_node, NULL_TREE);\n \n   begin_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_begin_handler\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   is_default, true, true, true, false, false, NULL,\n \t\t\t   Empty);\n   /* __gnat_begin_handler is a dummy procedure.  */\n   TREE_NOTHROW (begin_handler_decl) = 1;\n \n   end_handler_decl\n     = create_subprog_decl (get_identifier (\"__gnat_end_handler\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   is_default, true, true, true, false, false, NULL,\n \t\t\t   Empty);\n \n   unhandled_except_decl\n     = create_subprog_decl (get_identifier (\"__gnat_unhandled_except_handler\"),\n \t\t\t   NULL_TREE, ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   is_default, true, true, true, false, false, NULL,\n \t\t\t   Empty);\n \n   /* Indicate that it never returns.  */\n   ftype = build_qualified_type (ftype, TYPE_QUAL_VOLATILE);\n   reraise_zcx_decl\n     = create_subprog_decl (get_identifier (\"__gnat_reraise_zcx\"), NULL_TREE,\n \t\t\t   ftype, NULL_TREE,\n-\t\t\t   is_disabled, true, true, true, false, false, NULL,\n+\t\t\t   is_default, true, true, true, false, false, NULL,\n \t\t\t   Empty);\n \n   /* Dummy objects to materialize \"others\" and \"all others\" in the exception\n@@ -592,7 +592,7 @@ gigi (Node_Id gnat_root,\n       tree decl\n \t= create_subprog_decl\n \t  (get_identifier (\"__gnat_last_chance_handler\"), NULL_TREE, ftype,\n-\t   NULL_TREE, is_disabled, true, true, true, false, false, NULL,\n+\t   NULL_TREE, is_default, true, true, true, false, false, NULL,\n \t   Empty);\n       for (i = 0; i < (int) ARRAY_SIZE (gnat_raise_decls); i++)\n \tgnat_raise_decls[i] = decl;\n@@ -756,7 +756,7 @@ build_raise_check (int check, enum exception_info_kind kind)\n   ftype = build_qualified_type (ftype, TYPE_QUAL_VOLATILE);\n   result\n     = create_subprog_decl (get_identifier (Name_Buffer), NULL_TREE, ftype,\n-\t\t\t   NULL_TREE, is_disabled, true, true, true, false,\n+\t\t\t   NULL_TREE, is_default, true, true, true, false,\n \t\t\t   false, NULL, Empty);\n \n   return result;\n@@ -6134,7 +6134,7 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n     = create_subprog_decl\n       (create_concat_name (gnat_unit_entity, body_p ? \"elabb\" : \"elabs\"),\n        NULL_TREE, void_ftype, NULL_TREE,\n-       is_disabled, true, false, true, true, false, NULL, gnat_unit);\n+       is_default, true, false, true, true, false, NULL, gnat_unit);\n   struct elab_info *info;\n \n   vec_safe_push (gnu_elab_proc_stack, gnu_elab_proc_decl);\n@@ -7144,7 +7144,7 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    create_subprog_decl (create_concat_name\n \t\t\t\t (Entity (Prefix (gnat_node)),\n \t\t\t\t  attr == Attr_Elab_Body ? \"elabb\" : \"elabs\"),\n-\t\t\t\t NULL_TREE, void_ftype, NULL_TREE, is_disabled,\n+\t\t\t\t NULL_TREE, void_ftype, NULL_TREE, is_default,\n \t\t\t\t true, true, true, true, false, NULL,\n \t\t\t\t gnat_node);\n "}, {"sha": "5646051b4dc0d9a854e55ac1249a938015978c9a", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13a6dfe3a1268265006628e58ec94d7d4222328d/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=13a6dfe3a1268265006628e58ec94d7d4222328d", "patch": "@@ -3235,20 +3235,17 @@ create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n \n   DECL_ARTIFICIAL (subprog_decl) = artificial_p;\n   DECL_EXTERNAL (subprog_decl) = extern_flag;\n+  DECL_FUNCTION_IS_DEF (subprog_decl) = definition;\n+  DECL_IGNORED_P (subprog_decl) = !debug_info_p;\n   TREE_PUBLIC (subprog_decl) = public_flag;\n \n-  if (!debug_info_p)\n-    DECL_IGNORED_P (subprog_decl) = 1;\n-  if (definition)\n-    DECL_FUNCTION_IS_DEF (subprog_decl) = 1;\n-\n   switch (inline_status)\n     {\n     case is_suppressed:\n       DECL_UNINLINABLE (subprog_decl) = 1;\n       break;\n \n-    case is_disabled:\n+    case is_default:\n       break;\n \n     case is_required:\n@@ -3269,9 +3266,15 @@ create_subprog_decl (tree name, tree asm_name, tree type, tree param_decl_list,\n \n       /* ... fall through ... */\n \n-    case is_enabled:\n+    case is_prescribed:\n+      DECL_DISREGARD_INLINE_LIMITS (subprog_decl) = 1;\n+\n+      /* ... fall through ... */\n+\n+    case is_requested:\n       DECL_DECLARED_INLINE_P (subprog_decl) = 1;\n-      DECL_NO_INLINE_WARNING_P (subprog_decl) = artificial_p;\n+      if (!Debug_Generated_Code)\n+\tDECL_NO_INLINE_WARNING_P (subprog_decl) = artificial_p;\n       break;\n \n     default:"}]}