{"sha": "ddf98a96d0112377361258068a167ba7e51ed345", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGRmOThhOTZkMDExMjM3NzM2MTI1ODA2OGExNjdiYTdlNTFlZDM0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2018-07-31T14:26:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-07-31T14:26:40Z"}, "message": "[46/46] Turn stmt_vec_info back into a typedef\n\nThis patch removes the stmt_vec_info wrapper class added near the\nbeginning of the series and turns stmt_vec_info back into a typedef.\n\n2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* tree-vectorizer.h (stmt_vec_info): Turn back into a typedef.\n\t(NULL_STMT_VEC_INFO): Delete.\n\t(stmt_vec_info::operator*): Likewise.\n\t(stmt_vec_info::operator gimple *): Likewise.\n\t* tree-vect-loop.c (vectorizable_reduction): Use NULL instead\n\tof NULL_STMT_VEC_INFO.\n\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n\t(vect_reassociating_reduction_p): Likewise.\n\t* tree-vect-stmts.c (vect_build_gather_load_calls): Likewise.\n\t(vectorizable_store): Likewise.\n\t* tree-vectorizer.c (vec_info::set_vinfo_for_stmt): Likewise.\n\t(vec_info::free_stmt_vec_infos): Likewise.\n\nFrom-SVN: r263161", "tree": {"sha": "8ba16671a7bd4b577e839b67b6e68dbd88bcf98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba16671a7bd4b577e839b67b6e68dbd88bcf98b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ddf98a96d0112377361258068a167ba7e51ed345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf98a96d0112377361258068a167ba7e51ed345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ddf98a96d0112377361258068a167ba7e51ed345", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ddf98a96d0112377361258068a167ba7e51ed345/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dddecc5c01a0cdeb06704ed98eac881ead550664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dddecc5c01a0cdeb06704ed98eac881ead550664", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dddecc5c01a0cdeb06704ed98eac881ead550664"}], "stats": {"total": 61, "additions": 23, "deletions": 38}, "files": [{"sha": "133eaf39cdb195e9e9e16ec98f6e6ee2a96f0d31", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -1,3 +1,18 @@\n+2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* tree-vectorizer.h (stmt_vec_info): Turn back into a typedef.\n+\t(NULL_STMT_VEC_INFO): Delete.\n+\t(stmt_vec_info::operator*): Likewise.\n+\t(stmt_vec_info::operator gimple *): Likewise.\n+\t* tree-vect-loop.c (vectorizable_reduction): Use NULL instead\n+\tof NULL_STMT_VEC_INFO.\n+\t* tree-vect-patterns.c (vect_init_pattern_stmt): Likewise.\n+\t(vect_reassociating_reduction_p): Likewise.\n+\t* tree-vect-stmts.c (vect_build_gather_load_calls): Likewise.\n+\t(vectorizable_store): Likewise.\n+\t* tree-vectorizer.c (vec_info::set_vinfo_for_stmt): Likewise.\n+\t(vec_info::free_stmt_vec_infos): Likewise.\n+\n 2018-07-31  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* tree-vectorizer.h (vect_stmt_in_region_p): Delete."}, {"sha": "b1c8277e33b55ddfe7d2d78576253ad257f99f0b", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -6755,7 +6755,7 @@ vectorizable_reduction (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n   if (slp_node)\n     neutral_op = neutral_op_for_slp_reduction\n       (slp_node_instance->reduc_phis, code,\n-       REDUC_GROUP_FIRST_ELEMENT (stmt_info) != NULL_STMT_VEC_INFO);\n+       REDUC_GROUP_FIRST_ELEMENT (stmt_info) != NULL);\n \n   if (double_reduc && reduction_type == FOLD_LEFT_REDUCTION)\n     {"}, {"sha": "eb0e296b4849388e202153d342a9dfb1d193ab47", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -104,7 +104,7 @@ vect_init_pattern_stmt (gimple *pattern_stmt, stmt_vec_info orig_stmt_info,\n {\n   vec_info *vinfo = orig_stmt_info->vinfo;\n   stmt_vec_info pattern_stmt_info = vinfo->lookup_stmt (pattern_stmt);\n-  if (pattern_stmt_info == NULL_STMT_VEC_INFO)\n+  if (pattern_stmt_info == NULL)\n     pattern_stmt_info = orig_stmt_info->vinfo->add_stmt (pattern_stmt);\n   gimple_set_bb (pattern_stmt, gimple_bb (orig_stmt_info->stmt));\n \n@@ -819,7 +819,7 @@ vect_reassociating_reduction_p (stmt_vec_info stmt_vinfo)\n {\n   return (STMT_VINFO_DEF_TYPE (stmt_vinfo) == vect_reduction_def\n \t  ? STMT_VINFO_REDUC_TYPE (stmt_vinfo) != FOLD_LEFT_REDUCTION\n-\t  : REDUC_GROUP_FIRST_ELEMENT (stmt_vinfo) != NULL_STMT_VEC_INFO);\n+\t  : REDUC_GROUP_FIRST_ELEMENT (stmt_vinfo) != NULL);\n }\n \n /* As above, but also require it to have code CODE and to be a reduction"}, {"sha": "4869b634a609395f28c5b6411bf4259bf89355cc", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -2847,7 +2847,7 @@ vect_build_gather_load_calls (stmt_vec_info stmt_info,\n \t  new_stmt_info = loop_vinfo->lookup_def (var);\n \t}\n \n-      if (prev_stmt_info == NULL_STMT_VEC_INFO)\n+      if (prev_stmt_info == NULL)\n \tSTMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt_info;\n       else\n \tSTMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt_info;\n@@ -6578,7 +6578,7 @@ vectorizable_store (stmt_vec_info stmt_info, gimple_stmt_iterator *gsi,\n \t  stmt_vec_info new_stmt_info\n \t    = vect_finish_stmt_generation (stmt_info, new_stmt, gsi);\n \n-\t  if (prev_stmt_info == NULL_STMT_VEC_INFO)\n+\t  if (prev_stmt_info == NULL)\n \t    STMT_VINFO_VEC_STMT (stmt_info) = *vec_stmt = new_stmt_info;\n \t  else\n \t    STMT_VINFO_RELATED_STMT (prev_stmt_info) = new_stmt_info;"}, {"sha": "d58729be246b149e44f0a64a0d33ee6ebb36093c", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -660,7 +660,7 @@ vec_info::set_vinfo_for_stmt (gimple *stmt, stmt_vec_info info)\n     }\n   else\n     {\n-      gcc_checking_assert (info == NULL_STMT_VEC_INFO);\n+      gcc_checking_assert (info == NULL);\n       stmt_vec_infos[uid - 1] = info;\n     }\n }\n@@ -673,7 +673,7 @@ vec_info::free_stmt_vec_infos (void)\n   unsigned int i;\n   stmt_vec_info info;\n   FOR_EACH_VEC_ELT (stmt_vec_infos, i, info)\n-    if (info != NULL_STMT_VEC_INFO)\n+    if (info != NULL)\n       free_stmt_vec_info (info);\n   stmt_vec_infos.release ();\n }"}, {"sha": "47a459bbc47dd2e6b4e1c19684936764f8847cae", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ddf98a96d0112377361258068a167ba7e51ed345/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=ddf98a96d0112377361258068a167ba7e51ed345", "patch": "@@ -21,26 +21,7 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_TREE_VECTORIZER_H\n #define GCC_TREE_VECTORIZER_H\n \n-class stmt_vec_info {\n-public:\n-  stmt_vec_info () {}\n-  stmt_vec_info (struct _stmt_vec_info *ptr) : m_ptr (ptr) {}\n-  struct _stmt_vec_info *operator-> () const { return m_ptr; }\n-  struct _stmt_vec_info &operator* () const;\n-  operator struct _stmt_vec_info * () const { return m_ptr; }\n-  operator gimple * () const;\n-  operator void * () const { return m_ptr; }\n-  operator bool () const { return m_ptr; }\n-  bool operator == (const stmt_vec_info &x) { return x.m_ptr == m_ptr; }\n-  bool operator == (_stmt_vec_info *x) { return x == m_ptr; }\n-  bool operator != (const stmt_vec_info &x) { return x.m_ptr != m_ptr; }\n-  bool operator != (_stmt_vec_info *x) { return x != m_ptr; }\n-\n-private:\n-  struct _stmt_vec_info *m_ptr;\n-};\n-\n-#define NULL_STMT_VEC_INFO (stmt_vec_info (NULL))\n+typedef struct _stmt_vec_info *stmt_vec_info;\n \n #include \"tree-data-ref.h\"\n #include \"tree-hash-traits.h\"\n@@ -1091,17 +1072,6 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n        && TYPE_PRECISION (TYPE) == 1\t\t\\\n        && TYPE_UNSIGNED (TYPE)))\n \n-inline _stmt_vec_info &\n-stmt_vec_info::operator* () const\n-{\n-  return *m_ptr;\n-}\n-\n-inline stmt_vec_info::operator gimple * () const\n-{\n-  return m_ptr ? m_ptr->stmt : NULL;\n-}\n-\n static inline bool\n nested_in_vect_loop_p (struct loop *loop, stmt_vec_info stmt_info)\n {"}]}