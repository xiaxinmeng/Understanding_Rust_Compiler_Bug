{"sha": "a7c084ac63c6578610e90b0a89659f7101542646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdjMDg0YWM2M2M2NTc4NjEwZTkwYjBhODk2NTlmNzEwMTU0MjY0Ng==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-11-26T11:45:31Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-11-26T11:45:31Z"}, "message": "2003-11-26  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/URL.java\n\t(URL): Fixed documentation to be HTML compliant.\n\t(getContent): Completed documentation.\n\t(getFile): Likewise.\n\t(getPath): Likewise.\n\t(getAuthority): Likewise.\n\t(getHost): Likewise.\n\t(getDefaultPort): Likewise.\n\t(getProtocol): Likewise.\n\t(hashCode): Likewise.\n\t(openConnection): Likewise.\n\t(openStream): Likewise.\n\t(set): Likewise.\n\t(getURLStreamHandler): Wrapped lines to fit into our 79 chars rule.\n\nFrom-SVN: r73947", "tree": {"sha": "78f2de15def9b917c5004f8c1151e6a8502f753e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78f2de15def9b917c5004f8c1151e6a8502f753e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7c084ac63c6578610e90b0a89659f7101542646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c084ac63c6578610e90b0a89659f7101542646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c084ac63c6578610e90b0a89659f7101542646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c084ac63c6578610e90b0a89659f7101542646/comments", "author": null, "committer": null, "parents": [{"sha": "57a5c93b1f6991368e1fc7458cbaf4c5ef301d8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a5c93b1f6991368e1fc7458cbaf4c5ef301d8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a5c93b1f6991368e1fc7458cbaf4c5ef301d8f"}], "stats": {"total": 69, "additions": 60, "deletions": 9}, "files": [{"sha": "a0aa4e120ddf69372982ed6543e69bb66e8b25a8", "filename": "libjava/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c084ac63c6578610e90b0a89659f7101542646/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c084ac63c6578610e90b0a89659f7101542646/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a7c084ac63c6578610e90b0a89659f7101542646", "patch": "@@ -1,3 +1,20 @@\n+2003-11-26  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/URL.java\n+\t(URL): Fixed documentation to be HTML compliant.\n+\t(getContent): Completed documentation.\n+\t(getFile): Likewise.\n+\t(getPath): Likewise.\n+\t(getAuthority): Likewise.\n+\t(getHost): Likewise.\n+\t(getDefaultPort): Likewise.\n+\t(getProtocol): Likewise.\n+\t(hashCode): Likewise.\n+\t(openConnection): Likewise.\n+\t(openStream): Likewise.\n+\t(set): Likewise.\n+\t(getURLStreamHandler): Wrapped lines to fit into our 79 chars rule.\n+\n 2003-11-26  Michael Koch  <konqueror@gmx.de>\n \n \t* java/net/InetSocketAddress.java"}, {"sha": "35b3c797c7fff2c4134a9eb3ffe4f403ec2c7529", "filename": "libjava/java/net/URL.java", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7c084ac63c6578610e90b0a89659f7101542646/libjava%2Fjava%2Fnet%2FURL.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7c084ac63c6578610e90b0a89659f7101542646/libjava%2Fjava%2Fnet%2FURL.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURL.java?ref=a7c084ac63c6578610e90b0a89659f7101542646", "patch": "@@ -56,7 +56,8 @@\n   * This final class represents an Internet Uniform Resource Locator (URL).\n   * For details on the syntax of URL's and what they can be used for,\n   * refer to RFC 1738, available from <a \n-  * href=\"http://ds.internic.net/rfcs/rfc1738.txt\">http://ds.internic.net/rfcs/rfc1738.txt</a>\n+  * href=\"http://ds.internic.net/rfcs/rfc1738.txt\">\n+  * http://ds.internic.net/rfcs/rfc1738.txt</a>\n   * <p>\n   * There are a great many protocols supported by URL's such as \"http\",\n   * \"ftp\", and \"file\".  This object can handle any arbitrary URL for which\n@@ -73,10 +74,10 @@\n   * If this property is set, it is assumed to be a \"|\" separated list of\n   * package names in which to attempt locating protocol handlers.  The\n   * protocol handler is searched for by appending the string \n-  * \".<protocol>.Handler\" to each packed in the list until a hander is found.\n-  * If a protocol handler is not found in this list of packages, or if the\n-  * property does not exist, then the default protocol handler of\n-  * \"gnu.java.net.<protocol>.Handler\" is tried.  If this is\n+  * \".&lt;protocol&gt;.Handler\" to each packed in the list until a hander is\n+  * found. If a protocol handler is not found in this list of packages, or if\n+  * the property does not exist, then the default protocol handler of\n+  * \"gnu.java.net.&lt;protocol&gt;.Handler\" is tried.  If this is\n   * unsuccessful, a MalformedURLException is thrown.\n   * <p>\n   * All of the constructor methods of URL attempt to load a protocol\n@@ -310,7 +311,7 @@ public URL(String spec) throws MalformedURLException\n     this((URL) null, spec, (URLStreamHandler) null);\n   }\n \n-  /*\n+  /**\n    * This method parses a String representation of a URL within the\n    * context of an existing URL.  Principally this means that any\n    * fields not present the URL are inheritied from the context URL.\n@@ -475,6 +476,10 @@ public final Object getContent() throws IOException\n   /**\n    * Gets the contents of this URL\n    *\n+   * @param classes The allow classes for the content object.\n+   *\n+   * @return a context object for this URL.\n+   *\n    * @exception IOException If an error occurs\n    */\n   public final Object getContent (Class[] classes) throws IOException\n@@ -487,6 +492,8 @@ public final Object getContent (Class[] classes) throws IOException\n    * Returns the file portion of the URL.\n    * Defined as <code>path[?query]</code>.\n    * Returns the empty string if there is no file portion.\n+   *\n+   * @return The filename specified in this URL.\n    */\n   public String getFile()\n   {\n@@ -497,6 +504,8 @@ public String getFile()\n    * Returns the path of the URL. This is the part of the file before any '?'\n    * character.\n    *\n+   * @return The path specified in this URL.\n+   * \n    * @since 1.3\n    */\n   public String getPath()\n@@ -507,6 +516,8 @@ public String getPath()\n \n   /**\n    * Returns the authority of the URL\n+   *\n+   * @return The authority specified in this URL.\n    * \n    * @since 1.3\n    */\n@@ -517,6 +528,8 @@ public String getAuthority()\n \n   /**\n    * Returns the host of the URL\n+   *\n+   * @return The host specified in this URL.\n    */\n   public String getHost()\n   {\n@@ -540,6 +553,8 @@ public int getPort()\n   /**\n    * Returns the default port of the URL. If the StreamHandler for the URL\n    * protocol does not define a default port it returns -1.\n+   *\n+   * @return The default port of the current protocol.\n    */\n   public int getDefaultPort()\n   {\n@@ -548,6 +563,8 @@ public int getDefaultPort()\n \n   /**\n    * Returns the protocol of the URL\n+   *\n+   * @return The specified protocol.\n    */\n   public String getProtocol()\n   {\n@@ -591,6 +608,8 @@ public String getQuery ()\n \n   /**\n    * Returns a hashcode computed by the URLStreamHandler of this URL\n+   *\n+   * @return The hashcode for this URL.\n    */\n   public int hashCode()\n   {\n@@ -606,6 +625,7 @@ public int hashCode()\n    * openConnection() method of the protocol handler\n    *\n    * @return A URLConnection for this URL\n+   *\n    * @exception IOException If an error occurs\n    */\n   public URLConnection openConnection() throws IOException\n@@ -617,6 +637,8 @@ public URLConnection openConnection() throws IOException\n    * Opens a connection to this URL and returns an InputStream for reading\n    * from that connection\n    *\n+   * @return An <code>InputStream</code> for this URL.\n+   * \n    * @exception IOException If an error occurs\n    */\n   public final InputStream openStream() throws IOException\n@@ -673,6 +695,15 @@ protected void set(String protocol, String host, int port, String file,\n    * that only URLStreamHandlers can modify URL fields. URLs are otherwise\n    * constant.\n    *\n+   * @param protocol The protocol name for this URL.\n+   * @param host The hostname or IP address for this URL.\n+   * @param port The port number of this URL.\n+   * @param authority The authority of this URL.\n+   * @param userInfo The user and password (if needed) of this URL.\n+   * @param path The \"path\" portion of this URL.\n+   * @param query The query of this URL.\n+   * @param ref The anchor portion of this URL.\n+   *\n    * @since 1.3\n    */\n   protected void set(String protocol, String host, int port,\n@@ -800,7 +831,8 @@ else if (protocol.equals (\"file\"))\n \t// to it, along with the JDK specified default as a last resort.\n \t// Except in very unusual environments the JDK specified one shouldn't\n \t// ever be needed (or available).\n-\tString ph_search_path = System.getProperty (\"java.protocol.handler.pkgs\");\n+\tString ph_search_path =\n+\t  System.getProperty(\"java.protocol.handler.pkgs\");\n \n \t// Tack our default package on at the ends.\n \tif (ph_search_path != null)\n@@ -813,7 +845,8 @@ else if (protocol.equals (\"file\"))\n         \n \tdo\n           {\n-            String clsName = pkgPrefix.nextToken() + \".\" + protocol + \".Handler\";\n+            String clsName = (pkgPrefix.nextToken() + \".\"\n+\t\t\t      + protocol + \".Handler\");\n          \n             try\n               {\n@@ -826,7 +859,8 @@ else if (protocol.equals (\"file\"))\n               }\n             catch (Exception e)\n               {\n-                // Can't instantiate; handler still null, go on to next element.\n+                // Can't instantiate; handler still null,\n+\t\t// go on to next element.\n               }\n           }\n \twhile ((! (ph instanceof URLStreamHandler))"}]}