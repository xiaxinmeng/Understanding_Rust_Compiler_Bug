{"sha": "b368d6b8dff358b7f6b197ba4c95477a41645c23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM2OGQ2YjhkZmYzNThiN2Y2YjE5N2JhNGM5NTQ3N2E0MTY0NWMyMw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@st.com", "date": "2006-03-23T21:39:32Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2006-03-23T21:39:32Z"}, "message": "divtab-sh4.c, [...]: New files.\n\n2006-03-23  J\"orn Rennecke <joern.rennecke@st.com>\n\n\t* config/sh/divtab-sh4.c, config/sh/divcost-analysis: New files.\n\t* config/sh/lib1funcs.asm (div_table): Add !__SH5__ variant.\n\t* config/sh/t-sh (LIB1ASMFUNCS): Add _div_table.\n\t* config/sh/sh.opt (mdiv=): Amend description.\n\t* config/sh/sh.h (TARGET_DIVIDE_CALL_DIV1): New macro.\n\t(TARGET_DIVIDE_CALL_FP, TARGET_DIVIDE_CALL_TABLE): Likewise.\n\t(sh_divide_strategy_e): Add new members SH_DIV_CALL_DIV1,\n\tSH_DIV_CALL_FP, SH_DIV_CALL_TABLE and SH_DIV_INTRINSIC.\n\t(OVERRIDE_OPTIONS): Also process sh_div_str for TARGET_SH1.\n\tCalculate sh_divsi3_libfunc using TARGET_DIVIDE_* macros.\n\t* config/sh/sh.md (udivsi3_i4_int, divsi3_i4_int): New patterns.\n\t(udivsi3, divsi3): Use them.  Check TARGET_DIVIDE_CALL_TABLE /\n\tTARGET_DIVIDE_CALL_FP.\n\nFrom-SVN: r112331", "tree": {"sha": "6eb8d5d19c35a219b954adb42735d22b79b838cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6eb8d5d19c35a219b954adb42735d22b79b838cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b368d6b8dff358b7f6b197ba4c95477a41645c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b368d6b8dff358b7f6b197ba4c95477a41645c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b368d6b8dff358b7f6b197ba4c95477a41645c23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b368d6b8dff358b7f6b197ba4c95477a41645c23/comments", "author": null, "committer": null, "parents": [{"sha": "a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a57aee2ab63245bf7678a0cb18997ceb78da8ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a57aee2ab63245bf7678a0cb18997ceb78da8ffc"}], "stats": {"total": 919, "additions": 902, "deletions": 17}, "files": [{"sha": "9079462731f8c7d0fdaa20962d0673d0594fdf68", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -1,3 +1,19 @@\n+2006-03-23  J\"orn Rennecke <joern.rennecke@st.com>\n+\n+\t* config/sh/divtab-sh4.c, config/sh/divcost-analysis: New files.\n+\t* config/sh/lib1funcs.asm (div_table): Add !__SH5__ variant.\n+\t* config/sh/t-sh (LIB1ASMFUNCS): Add _div_table.\n+\t* config/sh/sh.opt (mdiv=): Amend description.\n+\t* config/sh/sh.h (TARGET_DIVIDE_CALL_DIV1): New macro.\n+\t(TARGET_DIVIDE_CALL_FP, TARGET_DIVIDE_CALL_TABLE): Likewise.\n+\t(sh_divide_strategy_e): Add new members SH_DIV_CALL_DIV1,\n+\tSH_DIV_CALL_FP, SH_DIV_CALL_TABLE and SH_DIV_INTRINSIC.\n+\t(OVERRIDE_OPTIONS): Also process sh_div_str for TARGET_SH1.\n+\tCalculate sh_divsi3_libfunc using TARGET_DIVIDE_* macros.\n+\t* config/sh/sh.md (udivsi3_i4_int, divsi3_i4_int): New patterns.\n+\t(udivsi3, divsi3): Use them.  Check TARGET_DIVIDE_CALL_TABLE /\n+\tTARGET_DIVIDE_CALL_FP.\n+\n 2006-03-23  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n \n \t* haifa-sched.c (choose_ready): Fix type of the local variable."}, {"sha": "541e31324b329f49d250cda97320c6aa47e0d3ae", "filename": "gcc/config/sh/divcost-analysis", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fdivcost-analysis", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fdivcost-analysis", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fdivcost-analysis?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -0,0 +1,76 @@\n+Analysis of cycle costs for SH4:\n+\n+-> udiv_le128:            5\n+-> udiv_ge64k:            6\n+-> udiv udiv_25:         10\n+-> pos_divisor:           3\n+-> pos_result linear:     5\n+-> pos_result - -:        5\n+-> div_le128:             7\n+-> div_ge64k:             9\n+sdivsi3 -> udiv_25             13\n+udiv25 -> div_ge64k_end:       15\n+div_ge64k_end -> rts:          13\n+div_le128 -> div_le128_2:       2, r1 latency 3\n+udiv_le128 -> div_le128_2:      2, r1 latency 3\n+(u)div_le128 -> div_by_1:       9\n+(u)div_le128 -> rts:           17\n+div_by_1(_neg) -> rts:          4\n+div_ge64k -> div_r8:            2\n+div_ge64k -> div_ge64k_2:       3\n+udiv_ge64k -> udiv_r8:          3\n+udiv_ge64k -> div_ge64k_2:      3 + LS\n+(u)div_ge64k -> div_ge64k_end: 13\n+div_r8 -> div_r8_2:             2\n+udiv_r8 -> div_r8_2:            2 + LS\n+(u)div_r8 -> rts:              21\n+\n+-> - + neg_result:             5\n+-> + - neg_result:             5\n+-> div_le128_neg:              7\n+-> div_ge64k_neg:              9\n+-> div_r8_neg:                11\n+-> <64k div_ge64k_neg_end:    28\n+-> >=64k div_ge64k_neg_end:   22\n+div_ge64k_neg_end ft -> rts:  14\n+div_r8_neg_end -> rts:         4\n+div_r8_neg -> div_r8_neg_end: 18\n+div_le128_neg -> div_by_1_neg: 4\n+div_le128_neg -> rts          18\n+\n+                    absolute divisor range:\n+            1  [2..128]  [129..64K) [64K..|divident|/256] >=64K,>|divident/256|\n+udiv       18     22         38            32                   30\n+sdiv pos:  20     24         41            35                   32\n+sdiv neg:  15     25         42            36                   33\n+\n+\n+fp-based:\n+\n+unsigned: 42 + 3 + 3 (lingering ftrc latency + sts fpul,rx) at caller's site\n+signed: 33 + 3 + 3 (lingering ftrc latency + sts fpul,rx) at caller's site\n+\n+call-div1:    divisor range:\n+              [1..64K)  >= 64K\n+unsigned:       63        58\n+signed:         76        76\n+\n+SFUNC_STATIC call overhead:\n+mov.l 0f,r1\n+bsrf r1\n+\n+SFUNC_GOT call overhead - current:\n+mov.l 0f,r1\n+mova 0f,r0\n+mov.l 1f,r2\n+add r1,r0\n+mov.l @(r0,r2),r0\n+jmp @r0\n+; 3 cycles worse than SFUNC_STATIC\n+\n+SFUNC_GOT call overhead - improved assembler:\n+mov.l 0f,r1\n+mova 0f,r0\n+mov.l @(r0,r1),r0\n+jmp @r0\n+; 2 cycles worse than SFUNC_STATIC"}, {"sha": "e7de6c49a7411cfbb8fb83e54fa751e37e320a24", "filename": "gcc/config/sh/divtab-sh4.c", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fdivtab-sh4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fdivtab-sh4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fdivtab-sh4.c?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -0,0 +1,90 @@\n+/* Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+In addition to the permissions in the GNU General Public License, the\n+Free Software Foundation gives you unlimited permission to link the\n+compiled version of this file into combinations with other programs,\n+and to distribute those combinations without any restriction coming\n+from the use of this file.  (The General Public License restrictions\n+do apply in other respects; for example, they cover modification of\n+the file, and distribution when not linked into a combine\n+executable.)\n+\n+This file is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* Calculate division table for SH2..4 integer division\n+   Contributed by Joern Rernnecke\n+   joern.rennecke@superh.com  */\n+\n+#include <stdio.h>\n+#include <math.h>\n+\n+int\n+main ()\n+{\n+  int i, j;\n+  double q, r, err, max_err = 0, max_s_err = 0;\n+\n+  puts(\"/* This table has been generated by divtab-sh4.c.  */\");\n+  puts (\"\\t.balign 4\");\n+  puts (\"LOCAL(div_table_clz):\");\n+  /* output some dummy number for 1/0.  */\n+  printf (\"\\t.byte\\t%d\\n\", 0);\n+  for (i = 1; i <= 128; i++)\n+    {\n+      int n = 0;\n+      if (i == 128)\n+\tputs (\"\\\n+/* Lookup table translating positive divisor to index into table of\\n\\\n+   normalized inverse.  N.B. the '0' entry is also the last entry of the\\n\\\n+ previous table, and causes an unaligned access for division by zero.  */\\n\\\n+LOCAL(div_table_ix):\");\n+      for (j = i; j <= 128; j += j)\n+\tn++;\n+      printf (\"\\t.byte\\t%d\\n\", n - 7);\n+    }\n+  for (i = 1; i <= 128; i++)\n+    {\n+      j = i < 0 ? -i : i;\n+      while (j < 128)\n+\tj += j;\n+      printf (\"\\t.byte\\t%d\\n\", j * 2 - 96*4);\n+    }\n+  puts(\"\\\n+/* 1/64 .. 1/127, normalized.  There is an implicit leading 1 in bit 32.  */\\n\\\n+\t.balign 4\\n\\\n+LOCAL(zero_l):\");\n+  for (i = 64; i < 128; i++)\n+    {\n+      if (i == 96)\n+\tputs (\"LOCAL(div_table):\");\n+      q = 4.*(1<<30)*128/i;\n+      r = ceil (q);\n+      /* The value for 64 is actually differently scaled that it would\n+\t appear from this calculation.  The implicit part is %01, not 10.\n+\t Still, since the value in the table is 0 either way, this\n+\t doesn't matter here.  Still, the 1/64 entry is effectively a 1/128\n+\t entry.  */\n+      printf (\"\\t.long\\t0x%X\\n\", (unsigned) r);\n+      err = r - q;\n+      if (err > max_err)\n+\tmax_err = err;\n+      err = err * i / 128;\n+      if (err > max_s_err)\n+\tmax_s_err = err;\n+    }\n+  printf (\"\\t/* maximum error: %f scaled: %f*/\\n\", max_err, max_s_err);\n+  exit (0);\n+}"}, {"sha": "7dfe73ed78326a97635236685f6cdd956b7ed3be", "filename": "gcc/config/sh/lib1funcs.asm", "status": "modified", "additions": 630, "deletions": 3, "changes": 633, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Flib1funcs.asm?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -1,5 +1,5 @@\n /* Copyright (C) 1994, 1995, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005\n+   2004, 2005, 2006\n    Free Software Foundation, Inc.\n \n This file is free software; you can redistribute it and/or modify it\n@@ -3019,8 +3019,8 @@ GLOBAL(GCC_pop_shmedia_regs_nofpu):\n #endif /* __SH5__ == 32 */\n #endif /* L_push_pop_shmedia_regs */\n \n-#if __SH5__\n #ifdef L_div_table\n+#if __SH5__\n #if defined(__pic__) && defined(__SHMEDIA__)\n \t.global\tGLOBAL(sdivsi3)\n \tFUNC(GLOBAL(sdivsi3))\n@@ -3247,5 +3247,632 @@ GLOBAL(div_table):\n \t.word\t17738\n \t.word\t17136\n \t.word\t16639\n+\n+#elif defined (__SH3__) || defined (__SH3E__) || defined (__SH4__) || defined (__SH4_SINGLE__) || defined (__SH4_SINGLE_ONLY__) || defined (__SH4_NOFPU__)\n+/* This code used shld, thus is not suitable for SH1 / SH2.  */\n+\n+/* Signed / unsigned division without use of FPU, optimized for SH4.\n+   Uses a lookup table for divisors in the range -128 .. +128, and\n+   div1 with case distinction for larger divisors in three more ranges.\n+   The code is lumped together with the table to allow the use of mova.  */\n+#ifdef __LITTLE_ENDIAN__\n+#define L_LSB 0\n+#define L_LSWMSB 1\n+#define L_MSWLSB 2\n+#else\n+#define L_LSB 3\n+#define L_LSWMSB 2\n+#define L_MSWLSB 1\n+#endif\n+\n+\t.balign 4\n+\t.global\tGLOBAL(udivsi3_i4i)\n+\tFUNC(GLOBAL(udivsi3_i4i))\n+GLOBAL(udivsi3_i4i):\n+\tmov.w LOCAL(c128_w), r1\n+\tdiv0u\n+\tmov r4,r0\n+\tshlr8 r0\n+\tcmp/hi r1,r5\n+\textu.w r5,r1\n+\tbf LOCAL(udiv_le128)\n+\tcmp/eq r5,r1\n+\tbf LOCAL(udiv_ge64k)\n+\tshlr r0\n+\tmov r5,r1\n+\tshll16 r5\n+\tmov.l r4,@-r15\n+\tdiv1 r5,r0\n+\tmov.l r1,@-r15\n+\tdiv1 r5,r0\n+\tdiv1 r5,r0\n+\tbra LOCAL(udiv_25)\n+\tdiv1 r5,r0\n+\n+LOCAL(div_le128):\n+\tmova LOCAL(div_table_ix),r0\n+\tbra LOCAL(div_le128_2)\n+\tmov.b @(r0,r5),r1\n+LOCAL(udiv_le128):\n+\tmov.l r4,@-r15\n+\tmova LOCAL(div_table_ix),r0\n+\tmov.b @(r0,r5),r1\n+\tmov.l r5,@-r15\n+LOCAL(div_le128_2):\n+\tmova LOCAL(div_table_inv),r0\n+\tmov.l @(r0,r1),r1\n+\tmov r5,r0\n+\ttst #0xfe,r0\n+\tmova LOCAL(div_table_clz),r0\n+\tdmulu.l r1,r4\n+\tmov.b @(r0,r5),r1\n+\tbt/s LOCAL(div_by_1)\n+\tmov r4,r0\n+\tmov.l @r15+,r5\n+\tsts mach,r0\n+\t/* clrt */\n+\taddc r4,r0\n+\tmov.l @r15+,r4\n+\trotcr r0\n+\trts\n+\tshld r1,r0\n+\n+LOCAL(div_by_1_neg):\n+\tneg r4,r0\n+LOCAL(div_by_1):\n+\tmov.l @r15+,r5\n+\trts\n+\tmov.l @r15+,r4\n+\n+LOCAL(div_ge64k):\n+\tbt/s LOCAL(div_r8)\n+\tdiv0u\n+\tshll8 r5\n+\tbra LOCAL(div_ge64k_2)\n+\tdiv1 r5,r0\n+LOCAL(udiv_ge64k):\n+\tcmp/hi r0,r5\n+\tmov r5,r1\n+\tbt LOCAL(udiv_r8)\n+\tshll8 r5\n+\tmov.l r4,@-r15\n+\tdiv1 r5,r0\n+\tmov.l r1,@-r15\n+LOCAL(div_ge64k_2):\n+\tdiv1 r5,r0\n+\tmov.l LOCAL(zero_l),r1\n+\t.rept 4\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.l r1,@-r15\n+\tdiv1 r5,r0\n+\tmov.w LOCAL(m256_w),r1\n+\tdiv1 r5,r0\n+\tmov.b r0,@(L_LSWMSB,r15)\n+\txor r4,r0\n+\tand r1,r0\n+\tbra LOCAL(div_ge64k_end)\n+\txor r4,r0\n+\t\n+LOCAL(div_r8):\n+\tshll16 r4\n+\tbra LOCAL(div_r8_2)\n+\tshll8 r4\n+LOCAL(udiv_r8):\n+\tmov.l r4,@-r15\n+\tshll16 r4\n+\tclrt\n+\tshll8 r4\n+\tmov.l r5,@-r15\n+LOCAL(div_r8_2):\n+\trotcl r4\n+\tmov r0,r1\n+\tdiv1 r5,r1\n+\tmov r4,r0\n+\trotcl r0\n+\tmov r5,r4\n+\tdiv1 r5,r1\n+\t.rept 5\n+\trotcl r0; div1 r5,r1\n+\t.endr\n+\trotcl r0\n+\tmov.l @r15+,r5\n+\tdiv1 r4,r1\n+\tmov.l @r15+,r4\n+\trts\n+\trotcl r0\n+\n+\tENDFUNC(GLOBAL(udivsi3_i4i))\n+\n+\t.global\tGLOBAL(sdivsi3_i4i)\n+\tFUNC(GLOBAL(sdivsi3_i4i))\n+\t/* This is link-compatible with a GLOBAL(sdivsi3) call,\n+\t   but we effectively clobber only r1.  */\n+GLOBAL(sdivsi3_i4i):\n+\tmov.l r4,@-r15\n+\tcmp/pz r5\n+\tmov.w LOCAL(c128_w), r1\n+\tbt/s LOCAL(pos_divisor)\n+\tcmp/pz r4\n+\tmov.l r5,@-r15\n+\tneg r5,r5\n+\tbt/s LOCAL(neg_result)\n+\tcmp/hi r1,r5\n+\tneg r4,r4\n+LOCAL(pos_result):\n+\textu.w r5,r0\n+\tbf LOCAL(div_le128)\n+\tcmp/eq r5,r0\n+\tmov r4,r0\n+\tshlr8 r0\n+\tbf/s LOCAL(div_ge64k)\n+\tcmp/hi r0,r5\n+\tdiv0u\n+\tshll16 r5\n+\tdiv1 r5,r0\n+\tdiv1 r5,r0\n+\tdiv1 r5,r0\n+LOCAL(udiv_25):\n+\tmov.l LOCAL(zero_l),r1\n+\tdiv1 r5,r0\n+\tdiv1 r5,r0\n+\tmov.l r1,@-r15\n+\t.rept 3\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.b r0,@(L_MSWLSB,r15)\n+\txtrct r4,r0\n+\tswap.w r0,r0\n+\t.rept 8\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.b r0,@(L_LSWMSB,r15)\n+LOCAL(div_ge64k_end):\n+\t.rept 8\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.l @r15+,r4 ! zero-extension and swap using LS unit.\n+\textu.b r0,r0\n+\tmov.l @r15+,r5\n+\tor r4,r0\n+\tmov.l @r15+,r4\n+\trts\n+\trotcl r0\n+\n+LOCAL(div_le128_neg):\n+\ttst #0xfe,r0\n+\tmova LOCAL(div_table_ix),r0\n+\tmov.b @(r0,r5),r1\n+\tmova LOCAL(div_table_inv),r0\n+\tbt/s LOCAL(div_by_1_neg)\n+\tmov.l @(r0,r1),r1\n+\tmova LOCAL(div_table_clz),r0\n+\tdmulu.l r1,r4\n+\tmov.b @(r0,r5),r1\n+\tmov.l @r15+,r5\n+\tsts mach,r0\n+\t/* clrt */\n+\taddc r4,r0\n+\tmov.l @r15+,r4\n+\trotcr r0\n+\tshld r1,r0\n+\trts\n+\tneg r0,r0\n+\n+LOCAL(pos_divisor):\n+\tmov.l r5,@-r15\n+\tbt/s LOCAL(pos_result)\n+\tcmp/hi r1,r5\n+\tneg r4,r4\n+LOCAL(neg_result):\n+\textu.w r5,r0\n+\tbf LOCAL(div_le128_neg)\n+\tcmp/eq r5,r0\n+\tmov r4,r0\n+\tshlr8 r0\n+\tbf/s LOCAL(div_ge64k_neg)\n+\tcmp/hi r0,r5\n+\tdiv0u\n+\tmov.l LOCAL(zero_l),r1\n+\tshll16 r5\n+\tdiv1 r5,r0\n+\tmov.l r1,@-r15\n+\t.rept 7\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.b r0,@(L_MSWLSB,r15)\n+\txtrct r4,r0\n+\tswap.w r0,r0\n+\t.rept 8\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.b r0,@(L_LSWMSB,r15)\n+LOCAL(div_ge64k_neg_end):\n+\t.rept 8\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.l @r15+,r4 ! zero-extension and swap using LS unit.\n+\textu.b r0,r1\n+\tmov.l @r15+,r5\n+\tor r4,r1\n+LOCAL(div_r8_neg_end):\n+\tmov.l @r15+,r4\n+\trotcl r1\n+\trts\n+\tneg r1,r0\n+\n+LOCAL(div_ge64k_neg):\n+\tbt/s LOCAL(div_r8_neg)\n+\tdiv0u\n+\tshll8 r5\n+\tmov.l LOCAL(zero_l),r1\n+\t.rept 6\n+\tdiv1 r5,r0\n+\t.endr\n+\tmov.l r1,@-r15\n+\tdiv1 r5,r0\n+\tmov.w LOCAL(m256_w),r1\n+\tdiv1 r5,r0\n+\tmov.b r0,@(L_LSWMSB,r15)\n+\txor r4,r0\n+\tand r1,r0\n+\tbra LOCAL(div_ge64k_neg_end)\n+\txor r4,r0\n+\n+LOCAL(c128_w):\n+\t.word 128\n+\n+LOCAL(div_r8_neg):\n+\tclrt\n+\tshll16 r4\n+\tmov r4,r1\n+\tshll8 r1\n+\tmov r5,r4\n+\t.rept 7\n+\trotcl r1; div1 r5,r0\n+\t.endr\n+\tmov.l @r15+,r5\n+\trotcl r1\n+\tbra LOCAL(div_r8_neg_end)\n+\tdiv1 r4,r0\n+\n+LOCAL(m256_w):\n+\t.word 0xff00\n+/* This table has been generated by divtab-sh4.c.  */\n+\t.balign 4\n+LOCAL(div_table_clz):\n+\t.byte\t0\n+\t.byte\t1\n+\t.byte\t0\n+\t.byte\t-1\n+\t.byte\t-1\n+\t.byte\t-2\n+\t.byte\t-2\n+\t.byte\t-2\n+\t.byte\t-2\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-3\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-4\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-5\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+\t.byte\t-6\n+/* Lookup table translating positive divisor to index into table of\n+   normalized inverse.  N.B. the '0' entry is also the last entry of the\n+ previous table, and causes an unaligned access for division by zero.  */\n+LOCAL(div_table_ix):\n+\t.byte\t-6\n+\t.byte\t-128\n+\t.byte\t-128\n+\t.byte\t0\n+\t.byte\t-128\n+\t.byte\t-64\n+\t.byte\t0\n+\t.byte\t64\n+\t.byte\t-128\n+\t.byte\t-96\n+\t.byte\t-64\n+\t.byte\t-32\n+\t.byte\t0\n+\t.byte\t32\n+\t.byte\t64\n+\t.byte\t96\n+\t.byte\t-128\n+\t.byte\t-112\n+\t.byte\t-96\n+\t.byte\t-80\n+\t.byte\t-64\n+\t.byte\t-48\n+\t.byte\t-32\n+\t.byte\t-16\n+\t.byte\t0\n+\t.byte\t16\n+\t.byte\t32\n+\t.byte\t48\n+\t.byte\t64\n+\t.byte\t80\n+\t.byte\t96\n+\t.byte\t112\n+\t.byte\t-128\n+\t.byte\t-120\n+\t.byte\t-112\n+\t.byte\t-104\n+\t.byte\t-96\n+\t.byte\t-88\n+\t.byte\t-80\n+\t.byte\t-72\n+\t.byte\t-64\n+\t.byte\t-56\n+\t.byte\t-48\n+\t.byte\t-40\n+\t.byte\t-32\n+\t.byte\t-24\n+\t.byte\t-16\n+\t.byte\t-8\n+\t.byte\t0\n+\t.byte\t8\n+\t.byte\t16\n+\t.byte\t24\n+\t.byte\t32\n+\t.byte\t40\n+\t.byte\t48\n+\t.byte\t56\n+\t.byte\t64\n+\t.byte\t72\n+\t.byte\t80\n+\t.byte\t88\n+\t.byte\t96\n+\t.byte\t104\n+\t.byte\t112\n+\t.byte\t120\n+\t.byte\t-128\n+\t.byte\t-124\n+\t.byte\t-120\n+\t.byte\t-116\n+\t.byte\t-112\n+\t.byte\t-108\n+\t.byte\t-104\n+\t.byte\t-100\n+\t.byte\t-96\n+\t.byte\t-92\n+\t.byte\t-88\n+\t.byte\t-84\n+\t.byte\t-80\n+\t.byte\t-76\n+\t.byte\t-72\n+\t.byte\t-68\n+\t.byte\t-64\n+\t.byte\t-60\n+\t.byte\t-56\n+\t.byte\t-52\n+\t.byte\t-48\n+\t.byte\t-44\n+\t.byte\t-40\n+\t.byte\t-36\n+\t.byte\t-32\n+\t.byte\t-28\n+\t.byte\t-24\n+\t.byte\t-20\n+\t.byte\t-16\n+\t.byte\t-12\n+\t.byte\t-8\n+\t.byte\t-4\n+\t.byte\t0\n+\t.byte\t4\n+\t.byte\t8\n+\t.byte\t12\n+\t.byte\t16\n+\t.byte\t20\n+\t.byte\t24\n+\t.byte\t28\n+\t.byte\t32\n+\t.byte\t36\n+\t.byte\t40\n+\t.byte\t44\n+\t.byte\t48\n+\t.byte\t52\n+\t.byte\t56\n+\t.byte\t60\n+\t.byte\t64\n+\t.byte\t68\n+\t.byte\t72\n+\t.byte\t76\n+\t.byte\t80\n+\t.byte\t84\n+\t.byte\t88\n+\t.byte\t92\n+\t.byte\t96\n+\t.byte\t100\n+\t.byte\t104\n+\t.byte\t108\n+\t.byte\t112\n+\t.byte\t116\n+\t.byte\t120\n+\t.byte\t124\n+\t.byte\t-128\n+/* 1/64 .. 1/127, normalized.  There is an implicit leading 1 in bit 32.  */\n+\t.balign 4\n+LOCAL(zero_l):\n+\t.long\t0x0\n+\t.long\t0xF81F81F9\n+\t.long\t0xF07C1F08\n+\t.long\t0xE9131AC0\n+\t.long\t0xE1E1E1E2\n+\t.long\t0xDAE6076C\n+\t.long\t0xD41D41D5\n+\t.long\t0xCD856891\n+\t.long\t0xC71C71C8\n+\t.long\t0xC0E07039\n+\t.long\t0xBACF914D\n+\t.long\t0xB4E81B4F\n+\t.long\t0xAF286BCB\n+\t.long\t0xA98EF607\n+\t.long\t0xA41A41A5\n+\t.long\t0x9EC8E952\n+\t.long\t0x9999999A\n+\t.long\t0x948B0FCE\n+\t.long\t0x8F9C18FA\n+\t.long\t0x8ACB90F7\n+\t.long\t0x86186187\n+\t.long\t0x81818182\n+\t.long\t0x7D05F418\n+\t.long\t0x78A4C818\n+\t.long\t0x745D1746\n+\t.long\t0x702E05C1\n+\t.long\t0x6C16C16D\n+\t.long\t0x68168169\n+\t.long\t0x642C8591\n+\t.long\t0x60581606\n+\t.long\t0x5C9882BA\n+\t.long\t0x58ED2309\n+LOCAL(div_table_inv):\n+\t.long\t0x55555556\n+\t.long\t0x51D07EAF\n+\t.long\t0x4E5E0A73\n+\t.long\t0x4AFD6A06\n+\t.long\t0x47AE147B\n+\t.long\t0x446F8657\n+\t.long\t0x41414142\n+\t.long\t0x3E22CBCF\n+\t.long\t0x3B13B13C\n+\t.long\t0x38138139\n+\t.long\t0x3521CFB3\n+\t.long\t0x323E34A3\n+\t.long\t0x2F684BDB\n+\t.long\t0x2C9FB4D9\n+\t.long\t0x29E4129F\n+\t.long\t0x27350B89\n+\t.long\t0x24924925\n+\t.long\t0x21FB7813\n+\t.long\t0x1F7047DD\n+\t.long\t0x1CF06ADB\n+\t.long\t0x1A7B9612\n+\t.long\t0x18118119\n+\t.long\t0x15B1E5F8\n+\t.long\t0x135C8114\n+\t.long\t0x11111112\n+\t.long\t0xECF56BF\n+\t.long\t0xC9714FC\n+\t.long\t0xA6810A7\n+\t.long\t0x8421085\n+\t.long\t0x624DD30\n+\t.long\t0x4104105\n+\t.long\t0x2040811\n+\t/* maximum error: 0.987342 scaled: 0.921875*/\n+\n+\tENDFUNC(GLOBAL(sdivsi3_i4i))\n+#endif /* SH3 / SH4 */\n+\n #endif /* L_div_table */\n-#endif /* __SH5__ */"}, {"sha": "1b7ff5dbe2c19ca55c02d15a5d2d0e49f7964a31", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -234,6 +234,9 @@ do { \\\n #define TARGET_DIVIDE_INV20L (sh_div_strategy == SH_DIV_INV20L)\n #define TARGET_DIVIDE_INV_CALL (sh_div_strategy == SH_DIV_INV_CALL)\n #define TARGET_DIVIDE_INV_CALL2 (sh_div_strategy == SH_DIV_INV_CALL2)\n+#define TARGET_DIVIDE_CALL_DIV1 (sh_div_strategy == SH_DIV_CALL_DIV1)\n+#define TARGET_DIVIDE_CALL_FP (sh_div_strategy == SH_DIV_CALL_FP)\n+#define TARGET_DIVIDE_CALL_TABLE (sh_div_strategy == SH_DIV_CALL_TABLE)\n \n #define SELECT_SH1               (MASK_SH1)\n #define SELECT_SH2               (MASK_SH2 | SELECT_SH1)\n@@ -467,7 +470,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n       sh_div_str = SH_DIV_STR_FOR_SIZE ;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   /* We can't meaningfully test TARGET_SHMEDIA here, because -m options\t\\\n-     haven't been parsed yet, hence we';d read only the default.\t\\\n+     haven't been parsed yet, hence we'd read only the default.\t\\\n      sh_target_reg_class will return NO_REGS if this is not SHMEDIA, so\t\\\n      it's OK to always set flag_branch_target_load_optimize.  */\t\\\n   if (LEVEL > 1)\t\t\t\t\t\t\t\\\n@@ -492,16 +495,24 @@ do {\t\t\t\t\t\t\t\t\t\\\n extern int assembler_dialect;\n \n enum sh_divide_strategy_e {\n+  /* SH5 strategies.  */\n   SH_DIV_CALL,\n   SH_DIV_CALL2,\n-  SH_DIV_FP,\n+  SH_DIV_FP, /* We could do this also for SH4.  */\n   SH_DIV_INV,\n   SH_DIV_INV_MINLAT,\n   SH_DIV_INV20U,\n   SH_DIV_INV20L,\n   SH_DIV_INV_CALL,\n   SH_DIV_INV_CALL2,\n-  SH_DIV_INV_FP\n+  SH_DIV_INV_FP,\n+  /* SH1 .. SH4 strategies.  Because of the small number of registers\n+     available, the compiler uses knowledge of the actual et of registers\n+     being clobbed by the different functions called.  */\n+  SH_DIV_CALL_DIV1, /* No FPU, medium size, highest latency.  */\n+  SH_DIV_CALL_FP,     /* FPU needed, small size, high latency.  */\n+  SH_DIV_CALL_TABLE,  /* No FPU, large size, medium latency. */\n+  SH_DIV_INTRINSIC\n };\n \n extern enum sh_divide_strategy_e sh_div_strategy;\n@@ -611,17 +622,46 @@ do {\t\t\t\t\t\t\t\t\t\\\n        targetm.asm_out.aligned_op.di = NULL;\t\t\t\t\\\n        targetm.asm_out.unaligned_op.di = NULL;\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n+  if (TARGET_SH1)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (! strcmp (sh_div_str, \"call-div1\"))\t\t\t\t\\\n+\tsh_div_strategy = SH_DIV_CALL_DIV1;\t\t\t\t\\\n+      else if (! strcmp (sh_div_str, \"call-fp\")\t\t\t\t\\\n+\t       && (TARGET_FPU_DOUBLE\t\t\t\t\t\\\n+\t\t   || (TARGET_HARD_SH4 && TARGET_SH2E)\t\t\t\\\n+\t\t   || (TARGET_SHCOMPACT && TARGET_FPU_ANY)))\t\t\\\n+\tsh_div_strategy = SH_DIV_CALL_FP;\t\t\t\t\\\n+      else if (! strcmp (sh_div_str, \"call-table\") && TARGET_SH3)\t\\\n+\tsh_div_strategy = SH_DIV_CALL_TABLE;\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t/* Pick one that makes most sense for the target in general.\t\\\n+\t   It is not much good to use different functions depending\t\\\n+\t   on -Os, since then we'll end up with two different functions\t\\\n+\t   when some of the code is compiled for size, and some for\t\\\n+\t   speed.  */\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t/* SH4 tends to emphasize speed.  */\t\t\t\t\\\n+\tif (TARGET_HARD_SH4)\t\t\t\t\t\t\\\n+\t  sh_div_strategy = SH_DIV_CALL_TABLE;\t\t\t\t\\\n+\t/* These have their own way of doing things.  */\t\t\\\n+\telse if (TARGET_SH2A)\t\t\t\t\t\t\\\n+\t  sh_div_strategy = SH_DIV_INTRINSIC;\t\t\t\t\\\n+\t/* ??? Should we use the integer SHmedia function instead?  */\t\\\n+\telse if (TARGET_SHCOMPACT && TARGET_FPU_ANY)\t\t\t\\\n+\t  sh_div_strategy = SH_DIV_CALL_FP;\t\t\t\t\\\n+        /* SH1 .. SH3 cores often go into small-footprint systems, so\t\\\n+\t   default to the smallest implementation available.  */\t\\\n+\telse\t\t\t\t\t\t\t\t\\\n+\t  sh_div_strategy = SH_DIV_CALL_DIV1;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   if (sh_divsi3_libfunc[0])\t\t\t\t\t\t\\\n     ; /* User supplied - leave it alone.  */\t\t\t\t\\\n-  else if (TARGET_HARD_SH4 && TARGET_SH2E)\t\t\t\t\\\n+  else if (TARGET_DIVIDE_CALL_FP)\t\t\t\t\t\\\n     sh_divsi3_libfunc = \"__sdivsi3_i4\";\t\t\t\t\t\\\n+  else if (TARGET_DIVIDE_CALL_TABLE)\t\t\t\t\t\\\n+    sh_divsi3_libfunc = \"__sdivsi3_i4i\";\t\t\t\t\\\n   else if (TARGET_SH5)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TARGET_FPU_ANY && TARGET_SH1)\t\t\t\t\t\\\n-\tsh_divsi3_libfunc = \"__sdivsi3_i4\";\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tsh_divsi3_libfunc = \"__sdivsi3_1\";\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n+    sh_divsi3_libfunc = \"__sdivsi3_1\";\t\t\t\t\t\\\n   else\t\t\t\t\t\t\t\t\t\\\n     sh_divsi3_libfunc = \"__sdivsi3\";\t\t\t\t\t\\\n   if (TARGET_FMOVD)\t\t\t\t\t\t\t\\"}, {"sha": "1c1357e03095666fb850b5a58003c7b2b236f6a6", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 37, "deletions": 2, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -1739,6 +1739,19 @@\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n+(define_insn \"udivsi3_i4_int\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+\t(udiv:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI R1_REG))\n+   (clobber (reg:SI PR_REG))\n+   (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH1\"\n+  \"jsr\t@%1%#\"\n+  [(set_attr \"type\" \"sfunc\")\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n+\n (define_expand \"udivsi3\"\n   [(set (match_dup 3) (symbol_ref:SI \"__udivsi3\"))\n    (set (reg:SI R4_REG) (match_operand:SI 1 \"general_operand\" \"\"))\n@@ -1757,7 +1770,12 @@\n \n   operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n-  if (TARGET_HARD_SH4 && TARGET_SH2E)\n+  if (TARGET_DIVIDE_CALL_TABLE)\n+    {\n+      function_symbol (operands[3], \\\"__udivsi3_i4i\\\", SFUNC_GOT);\n+      last = gen_udivsi3_i4_int (operands[0], operands[3]);\n+    }\n+  else if (TARGET_DIVIDE_CALL_FP)\n     {\n       function_symbol (operands[3], \\\"__udivsi3_i4\\\", SFUNC_STATIC);\n       if (TARGET_FPU_SINGLE)\n@@ -1975,6 +1993,18 @@\n   [(set_attr \"type\" \"sfunc\")\n    (set_attr \"needs_delay_slot\" \"yes\")])\n \n+(define_insn \"divsi3_i4_int\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=z\")\n+\t(div:SI (reg:SI R4_REG) (reg:SI R5_REG)))\n+   (clobber (reg:SI T_REG))\n+   (clobber (reg:SI PR_REG))\n+   (clobber (reg:SI R1_REG))\n+   (use (match_operand:SI 1 \"arith_reg_operand\" \"r\"))]\n+  \"TARGET_SH1\"\n+  \"jsr\t@%1%#\"\n+  [(set_attr \"type\" \"sfunc\")\n+   (set_attr \"needs_delay_slot\" \"yes\")])\n+\n (define_expand \"divsi3\"\n   [(set (match_dup 3) (symbol_ref:SI \"__sdivsi3\"))\n    (set (reg:SI R4_REG) (match_operand:SI 1 \"general_operand\" \"\"))\n@@ -1995,7 +2025,12 @@\n \n   operands[3] = gen_reg_rtx (Pmode);\n   /* Emit the move of the address to a pseudo outside of the libcall.  */\n-  if (TARGET_HARD_SH4 && TARGET_SH2E)\n+  if (TARGET_DIVIDE_CALL_TABLE)\n+    {\n+      function_symbol (operands[3], sh_divsi3_libfunc, SFUNC_GOT);\n+      last = gen_divsi3_i4_int (operands[0], operands[3]);\n+    }\n+  else if (TARGET_DIVIDE_CALL_FP)\n     {\n       function_symbol (operands[3], sh_divsi3_libfunc, SFUNC_STATIC);\n       if (TARGET_FPU_SINGLE)"}, {"sha": "9b072fef7cb9dca202bbe2a6048e9bb693973d35", "filename": "gcc/config/sh/sh.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Fsh.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.opt?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -1,6 +1,6 @@\n ; Options for the SH port of the compiler.\n \n-; Copyright (C) 2005 Free Software Foundation, Inc.\n+; Copyright (C) 2005, 2006 Free Software Foundation, Inc.\n ;\n ; This file is part of GCC.\n ;\n@@ -158,7 +158,7 @@ Align doubles at 64-bit boundaries\n \n mdiv=\n Target RejectNegative Joined Var(sh_div_str) Init(\"\")\n-Division strategy, one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp\n+Division strategy, one of: call, call2, fp, inv, inv:minlat, inv20u, inv20l, inv:call, inv:call2, inv:fp call-div1 call-fp call-table\n \n mdivsi3_libfunc=\n Target RejectNegative Joined Var(sh_divsi3_libfunc) Init(\"\")"}, {"sha": "65cc1ec53e9d399626ae823e1ac80da4bd345bd6", "filename": "gcc/config/sh/t-sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Ft-sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b368d6b8dff358b7f6b197ba4c95477a41645c23/gcc%2Fconfig%2Fsh%2Ft-sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Ft-sh?ref=b368d6b8dff358b7f6b197ba4c95477a41645c23", "patch": "@@ -5,6 +5,7 @@ sh-c.o: $(srcdir)/config/sh/sh-c.c \\\n LIB1ASMSRC = sh/lib1funcs.asm\n LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movmem \\\n   _movmem_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \\\n+  _div_table \\\n   $(LIB1ASMFUNCS_CACHE)\n \n # We want fine grained libraries, so use the new code to build the"}]}