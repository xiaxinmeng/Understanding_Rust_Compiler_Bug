{"sha": "66c78aa97aaa90b76b7532a30b67ef5b996d0408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZjNzhhYTk3YWFhOTBiNzZiNzUzMmEzMGI2N2VmNWI5OTZkMDQwOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-12-08T20:31:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-12-08T20:31:05Z"}, "message": "Support namespaces in DWARF 2 output.\n\n        * dwarf2out.c (gen_namespace_die): New function.\n        (force_namespace_die, setup_namespace_context): New fns.\n        (declare_in_namespace): New fn.\n        (gen_decl_die): Call declare_in_namespace.  Handle namespaces.\n        (dwarf2out_decl): Handle namespaces.\n        (scope_die_for): Pass through a namespace scope.\n        (class_scope_p): Rename to class_or_namespace_scope_p.\n        (gen_subprogram_die, gen_variable_die): Adjust.\n        (gen_struct_or_union_die): Always emit a declaration\n        if context_die is a namespace.\n\nCo-Authored-By: Daniel Berlin <dberlin@dberlin.org>\n\nFrom-SVN: r74436", "tree": {"sha": "8ba3c9c71f44a781dc9f262cfbf1d23b30e71223", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8ba3c9c71f44a781dc9f262cfbf1d23b30e71223"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66c78aa97aaa90b76b7532a30b67ef5b996d0408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c78aa97aaa90b76b7532a30b67ef5b996d0408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66c78aa97aaa90b76b7532a30b67ef5b996d0408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66c78aa97aaa90b76b7532a30b67ef5b996d0408/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed36980c2256c731fd348fbe13c61a52bd7c32a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed36980c2256c731fd348fbe13c61a52bd7c32a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed36980c2256c731fd348fbe13c61a52bd7c32a2"}], "stats": {"total": 168, "additions": 153, "deletions": 15}, "files": [{"sha": "f1efa1c768908918be43878e26a756e17f5d2783", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c78aa97aaa90b76b7532a30b67ef5b996d0408/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c78aa97aaa90b76b7532a30b67ef5b996d0408/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=66c78aa97aaa90b76b7532a30b67ef5b996d0408", "patch": "@@ -1,3 +1,18 @@\n+2003-12-08  Jason Merrill <jason@redhat.com>\n+\t    Daniel Berlin  <dberlin@dberlin.org>\n+\n+\tSupport namespaces in DWARF 2 output.\n+\t* dwarf2out.c (gen_namespace_die): New function.\n+\t(force_namespace_die, setup_namespace_context): New fns.\n+\t(declare_in_namespace): New fn.\n+\t(gen_decl_die): Call declare_in_namespace.  Handle namespaces.\n+\t(dwarf2out_decl): Handle namespaces.\n+\t(scope_die_for): Pass through a namespace scope.\n+\t(class_scope_p): Rename to class_or_namespace_scope_p.\n+\t(gen_subprogram_die, gen_variable_die): Adjust.\n+\t(gen_struct_or_union_die): Always emit a declaration\n+\tif context_die is a namespace.\n+\n 2003-12-08  Jan Hubicka  <jh@suse.cz>\n \n \t* unwind-pe.h (read_uleb128): Fix handling of large values"}, {"sha": "9b064b77cb0a389689ae8cb14cac5ef5e693fcc2", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 138, "deletions": 15, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66c78aa97aaa90b76b7532a30b67ef5b996d0408/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66c78aa97aaa90b76b7532a30b67ef5b996d0408/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=66c78aa97aaa90b76b7532a30b67ef5b996d0408", "patch": "@@ -3740,7 +3740,7 @@ static void push_decl_scope (tree);\n static void pop_decl_scope (void);\n static dw_die_ref scope_die_for (tree, dw_die_ref);\n static inline int local_scope_p (dw_die_ref);\n-static inline int class_scope_p (dw_die_ref);\n+static inline int class_or_namespace_scope_p (dw_die_ref);\n static void add_type_attribute (dw_die_ref, tree, int, int, dw_die_ref);\n static const char *type_tag (tree);\n static tree member_declared_type (tree);\n@@ -3778,7 +3778,11 @@ static void gen_tagged_type_instantiation_die (tree, dw_die_ref);\n static void gen_block_die (tree, dw_die_ref, int);\n static void decls_for_scope (tree, dw_die_ref, int);\n static int is_redundant_typedef (tree);\n+static void gen_namespace_die (tree);\n static void gen_decl_die (tree, dw_die_ref);\n+static dw_die_ref force_namespace_die (tree);\n+static dw_die_ref setup_namespace_context (tree, dw_die_ref);\n+static void declare_in_namespace (tree, dw_die_ref);\n static unsigned lookup_filename (const char *);\n static void init_file_table (void);\n static void retry_incomplete_types (void);\n@@ -4034,6 +4038,8 @@ dwarf_tag_name (unsigned int tag)\n       return \"DW_TAG_namelist\";\n     case DW_TAG_namelist_item:\n       return \"DW_TAG_namelist_item\";\n+    case DW_TAG_namespace:\n+      return \"DW_TAG_namespace\";\n     case DW_TAG_packed_type:\n       return \"DW_TAG_packed_type\";\n     case DW_TAG_subprogram:\n@@ -10020,9 +10026,14 @@ scope_die_for (tree t, dw_die_ref context_die)\n \n   containing_scope = TYPE_CONTEXT (t);\n \n-  /* Ignore namespaces for the moment.  */\n+  /* Use the containing namespace if it was passed in (for a declaration).  */\n   if (containing_scope && TREE_CODE (containing_scope) == NAMESPACE_DECL)\n-    containing_scope = NULL_TREE;\n+    {\n+      if (context_die == lookup_decl_die (containing_scope))\n+\t/* OK */;\n+      else\n+\tcontaining_scope = NULL_TREE;\n+    }\n \n   /* Ignore function type \"scopes\" from the C frontend.  They mean that\n      a tagged type is local to a parmlist of a function declarator, but\n@@ -10072,14 +10083,16 @@ local_scope_p (dw_die_ref context_die)\n   return 0;\n }\n \n-/* Returns nonzero if CONTEXT_DIE is a class.  */\n+/* Returns nonzero if CONTEXT_DIE is a class or namespace, for deciding\n+   whether or not to treat a DIE in this context as a declaration.  */\n \n static inline int\n-class_scope_p (dw_die_ref context_die)\n+class_or_namespace_scope_p (dw_die_ref context_die)\n {\n   return (context_die\n \t  && (context_die->die_tag == DW_TAG_structure_type\n-\t      || context_die->die_tag == DW_TAG_union_type));\n+\t      || context_die->die_tag == DW_TAG_union_type\n+\t      || context_die->die_tag == DW_TAG_namespace));\n }\n \n /* Many forms of DIEs require a \"type description\" attribute.  This\n@@ -10599,7 +10612,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n   tree outer_scope;\n   dw_die_ref old_die = lookup_decl_die (decl);\n   int declaration = (current_function_decl != decl\n-\t\t     || class_scope_p (context_die));\n+\t\t     || class_or_namespace_scope_p (context_die));\n \n   /* It is possible to have both DECL_ABSTRACT and DECLARATION be true if we\n      started to generate the abstract instance of an inline, decided to output\n@@ -10608,7 +10621,7 @@ gen_subprogram_die (tree decl, dw_die_ref context_die)\n      we'll get back to the abstract instance when done with the class.  */\n \n   /* The class-scope declaration DIE must be the primary DIE.  */\n-  if (origin && declaration && class_scope_p (context_die))\n+  if (origin && declaration && class_or_namespace_scope_p (context_die))\n     {\n       origin = NULL;\n       if (old_die)\n@@ -10873,7 +10886,7 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n \n   dw_die_ref old_die = lookup_decl_die (decl);\n   int declaration = (DECL_EXTERNAL (decl)\n-\t\t     || class_scope_p (context_die));\n+\t\t     || class_or_namespace_scope_p (context_die));\n \n   if (origin != NULL)\n     add_abstract_origin_attribute (var_die, origin);\n@@ -10926,7 +10939,7 @@ gen_variable_die (tree decl, dw_die_ref context_die)\n   if (declaration)\n     add_AT_flag (var_die, DW_AT_declaration, 1);\n \n-  if (class_scope_p (context_die) || DECL_ABSTRACT (decl))\n+  if (class_or_namespace_scope_p (context_die) || DECL_ABSTRACT (decl))\n     equate_decl_number_to_die (decl, var_die);\n \n   if (! declaration && ! DECL_ABSTRACT (decl))\n@@ -11316,12 +11329,14 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die)\n   int complete = (TYPE_SIZE (type)\n \t\t  && (! TYPE_STUB_DECL (type)\n \t\t      || ! TYPE_DECL_SUPPRESS_DEBUG (TYPE_STUB_DECL (type))));\n+  int ns_decl = (context_die && context_die->die_tag == DW_TAG_namespace);\n \n   if (type_die && ! complete)\n     return;\n \n   if (TYPE_CONTEXT (type) != NULL_TREE\n-      && AGGREGATE_TYPE_P (TYPE_CONTEXT (type)))\n+      && (AGGREGATE_TYPE_P (TYPE_CONTEXT (type))\n+\t  || TREE_CODE (TYPE_CONTEXT (type)) == NAMESPACE_DECL))\n     nested = 1;\n \n   scope_die = scope_die_for (type, context_die);\n@@ -11345,7 +11360,7 @@ gen_struct_or_union_type_die (tree type, dw_die_ref context_die)\n \n   /* If this type has been completed, then give it a byte_size attribute and\n      then give a list of members.  */\n-  if (complete)\n+  if (complete && !ns_decl)\n     {\n       /* Prevent infinite recursion in cases where the type of some member of\n \t this type is expressed in terms of this type itself.  */\n@@ -11570,7 +11585,10 @@ gen_type_die (tree type, dw_die_ref context_die)\n \t  need_pop = 1;\n \t}\n       else\n-\tneed_pop = 0;\n+\t{\n+\t  declare_in_namespace (type, context_die);\n+\t  need_pop = 0;\n+\t}\n \n       if (TREE_CODE (type) == ENUMERAL_TYPE)\n \tgen_enumeration_type_die (type, context_die);\n@@ -11803,6 +11821,98 @@ is_redundant_typedef (tree decl)\n   return 0;\n }\n \n+/* Returns the DIE for namespace NS or aborts.\n+\n+   Note that namespaces don't really have a lexical context, so there's no\n+   need to pass in a context_die.  They always go inside their containing\n+   namespace, or comp_unit_die if none.  */\n+\n+static dw_die_ref\n+force_namespace_die (tree ns)\n+{\n+  dw_die_ref ns_die;\n+\n+  dwarf2out_decl (ns);\n+  ns_die = lookup_decl_die (ns);\n+  if (!ns_die)\n+    abort();\n+\n+  return ns_die;\n+}\n+\n+/* Force out any required namespaces to be able to output DECL,\n+   and return the new context_die for it, if it's changed.  */\n+\n+static dw_die_ref\n+setup_namespace_context (tree thing, dw_die_ref context_die)\n+{\n+  tree context = DECL_P (thing) ? DECL_CONTEXT (thing) : TYPE_CONTEXT (thing);\n+  if (context && TREE_CODE (context) == NAMESPACE_DECL)\n+    /* Force out the namespace. */\n+    context_die = force_namespace_die (context);\n+\n+  return context_die;\n+}\n+\n+/* Emit a declaration DIE for THING (which is either a DECL or a tagged\n+   type) within its namespace, if appropriate.\n+\n+   For compatibility with older debuggers, namespace DIEs only contain\n+   declarations; all definitions are emitted at CU scope.  */\n+\n+static void\n+declare_in_namespace (tree thing, dw_die_ref context_die)\n+{\n+  dw_die_ref ns_context;\n+\n+  if (debug_info_level <= DINFO_LEVEL_TERSE)\n+    return;\n+\n+  ns_context = setup_namespace_context (thing, context_die);\n+\n+  if (ns_context != context_die)\n+    {\n+      if (DECL_P (thing))\n+\tgen_decl_die (thing, ns_context);\n+      else\n+\tgen_type_die (thing, ns_context);\n+    }\n+}\n+\n+/* Generate a DIE for a namespace or namespace alias */\n+\n+static void\n+gen_namespace_die (tree decl)\n+{\n+  dw_die_ref context_die = setup_namespace_context (decl, comp_unit_die);\n+\n+  /* Namespace aliases have a DECL_ABSTRACT_ORIGIN of the namespace\n+     they are an alias of.*/\n+  if (DECL_ABSTRACT_ORIGIN (decl) == NULL)\n+    {\n+      /* Output a real namespace */\n+      dw_die_ref namespace_die\n+\t= new_die (DW_TAG_namespace, context_die, decl);\n+      add_name_and_src_coords_attributes (namespace_die, decl);\n+      equate_decl_number_to_die (decl, namespace_die);\n+    }\n+  else\n+    {\n+      /* Output a namespace alias */\n+\n+      /* Force out the namespace we are an alias of, if necessary */\n+      dw_die_ref origin_die\n+\t= force_namespace_die (DECL_ABSTRACT_ORIGIN (decl));\n+\n+      /* Now create the namespace alias DIE. */\n+      dw_die_ref namespace_die\n+\t= new_die (DW_TAG_imported_declaration, context_die, decl);\n+      add_name_and_src_coords_attributes (namespace_die, decl);\n+      add_AT_die_ref (namespace_die, DW_AT_import, origin_die);\n+      equate_decl_number_to_die (decl, namespace_die);\n+    }\n+}\n+\n /* Generate Dwarf debug information for a decl described by DECL.  */\n \n static void\n@@ -11838,7 +11948,7 @@ gen_decl_die (tree decl, dw_die_ref context_die)\n \t emit info for the abstract instance and set up to refer to it.  */\n       else if (cgraph_function_possibly_inlined_p (decl)\n \t       && ! DECL_ABSTRACT (decl)\n-\t       && ! class_scope_p (context_die)\n+\t       && ! class_or_namespace_scope_p (context_die)\n \t       /* dwarf2out_abstract_function won't emit a die if this is just\n \t\t  a declaration.  We must avoid setting DECL_ABSTRACT_ORIGIN in\n \t\t  that case, because that works only if we have a die.  */\n@@ -11863,6 +11973,9 @@ gen_decl_die (tree decl, dw_die_ref context_die)\n \t  origin = decl_class_context (decl);\n \t  if (origin != NULL_TREE)\n \t    gen_type_die_for_member (origin, decl, context_die);\n+\n+\t  /* And its containing namespace.  */\n+\t  declare_in_namespace (decl, context_die);\n \t}\n \n       /* Now output a DIE to represent the function itself.  */\n@@ -11914,6 +12027,9 @@ gen_decl_die (tree decl, dw_die_ref context_die)\n       if (origin != NULL_TREE)\n \tgen_type_die_for_member (origin, decl, context_die);\n \n+      /* And its containing namespace.  */\n+      declare_in_namespace (decl, context_die);\n+\n       /* Now output the DIE to represent the data object itself.  This gets\n \t complicated because of the possibility that the VAR_DECL really\n \t represents an inlined instance of a formal parameter for an inline\n@@ -11942,7 +12058,7 @@ gen_decl_die (tree decl, dw_die_ref context_die)\n       break;\n \n     case NAMESPACE_DECL:\n-      /* Ignore for now.  */\n+      gen_namespace_die (decl);\n       break;\n \n     default:\n@@ -12065,6 +12181,13 @@ dwarf2out_decl (tree decl)\n \treturn;\n       break;\n \n+    case NAMESPACE_DECL:\n+      if (debug_info_level <= DINFO_LEVEL_TERSE)\n+\treturn;\n+      if (lookup_decl_die (decl) != NULL)\n+        return;\n+      break;\n+\n     case TYPE_DECL:\n       /* Don't emit stubs for types unless they are needed by other DIEs.  */\n       if (TYPE_DECL_SUPPRESS_DEBUG (decl))"}]}