{"sha": "7745730ff608b57fd28e81f97db75d00c3a405e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc0NTczMGZmNjA4YjU3ZmQyOGU4MWY5N2RiNzVkMDBjM2E0MDVlOA==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2014-10-15T00:39:16Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2014-10-15T00:39:16Z"}, "message": "explow.c (convert_memory_address_addr_space): Rename to ...\n\n2014-10-14  Andrew Pinski  <apinski@cavium.com>\n\n\t* explow.c (convert_memory_address_addr_space): Rename to ...\n\t(convert_memory_address_addr_space_1): This.  Add in_const argument.\n\tInside a CONST RTL, permute the conversion and addition of constant\n\tfor zero and sign extended pointers.\n\t(convert_memory_address_addr_space): New function.\n\nFrom-SVN: r216230", "tree": {"sha": "da3e84ad2ca54a9cbeccb4a9efa9b75db5f72342", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3e84ad2ca54a9cbeccb4a9efa9b75db5f72342"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7745730ff608b57fd28e81f97db75d00c3a405e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7745730ff608b57fd28e81f97db75d00c3a405e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7745730ff608b57fd28e81f97db75d00c3a405e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7745730ff608b57fd28e81f97db75d00c3a405e8/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceeb2cbc4f3717ad6eb58e8e931dc6bff3f96fa0"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "6edd51af2904c4d9cd2e20f64ebfa2517faf85a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7745730ff608b57fd28e81f97db75d00c3a405e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7745730ff608b57fd28e81f97db75d00c3a405e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7745730ff608b57fd28e81f97db75d00c3a405e8", "patch": "@@ -1,3 +1,11 @@\n+2014-10-14  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* explow.c (convert_memory_address_addr_space): Rename to ...\n+\t(convert_memory_address_addr_space_1): This.  Add in_const argument.\n+\tInside a CONST RTL, permute the conversion and addition of constant\n+\tfor zero and sign extended pointers.\n+\t(convert_memory_address_addr_space): New function.\n+\n 2014-10-14  Andrew Pinski  <apinski@cavium.com>\n \n \tRevert:"}, {"sha": "4f6465bef7a6a0064189d1b283fbcde94f89fc98", "filename": "gcc/explow.c", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7745730ff608b57fd28e81f97db75d00c3a405e8/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7745730ff608b57fd28e81f97db75d00c3a405e8/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=7745730ff608b57fd28e81f97db75d00c3a405e8", "patch": "@@ -310,11 +310,13 @@ break_out_memory_refs (rtx x)\n    an address in the address space's address mode, or vice versa (TO_MODE says\n    which way).  We take advantage of the fact that pointers are not allowed to\n    overflow by commuting arithmetic operations over conversions so that address\n-   arithmetic insns can be used.  */\n+   arithmetic insns can be used. IN_CONST is true if this conversion is inside\n+   a CONST.  */\n \n-rtx\n-convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n-\t\t\t\t   rtx x, addr_space_t as ATTRIBUTE_UNUSED)\n+static rtx\n+convert_memory_address_addr_space_1 (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n+\t\t\t\t     rtx x, addr_space_t as ATTRIBUTE_UNUSED,\n+\t\t\t\t     bool in_const)\n {\n #ifndef POINTERS_EXTEND_UNSIGNED\n   gcc_assert (GET_MODE (x) == to_mode || GET_MODE (x) == VOIDmode);\n@@ -370,8 +372,8 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \n     case CONST:\n       return gen_rtx_CONST (to_mode,\n-\t\t\t    convert_memory_address_addr_space\n-\t\t\t      (to_mode, XEXP (x, 0), as));\n+\t\t\t    convert_memory_address_addr_space_1\n+\t\t\t      (to_mode, XEXP (x, 0), as, true));\n       break;\n \n     case PLUS:\n@@ -381,16 +383,18 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \t does not change it or if one operand is a constant and we are\n \t using a ptr_extend instruction  (POINTERS_EXTEND_UNSIGNED < 0).\n \t We can always safely permute them if we are making the address\n-\t narrower.  */\n+\t narrower. Inside a CONST RTL, this is safe for both pointers\n+\t zero or sign extended as pointers cannot wrap. */\n       if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n \t  || (GET_CODE (x) == PLUS\n \t      && CONST_INT_P (XEXP (x, 1))\n-\t      && (XEXP (x, 1) == convert_memory_address_addr_space\n-\t\t\t\t   (to_mode, XEXP (x, 1), as)\n-                 || POINTERS_EXTEND_UNSIGNED < 0)))\n+\t      && ((in_const && POINTERS_EXTEND_UNSIGNED != 0)\n+\t\t  || XEXP (x, 1) == convert_memory_address_addr_space_1\n+\t\t\t\t     (to_mode, XEXP (x, 1), as, in_const)\n+                  || POINTERS_EXTEND_UNSIGNED < 0)))\n \treturn gen_rtx_fmt_ee (GET_CODE (x), to_mode,\n-\t\t\t       convert_memory_address_addr_space\n-\t\t\t\t (to_mode, XEXP (x, 0), as),\n+\t\t\t       convert_memory_address_addr_space_1\n+\t\t\t\t (to_mode, XEXP (x, 0), as, in_const),\n \t\t\t       XEXP (x, 1));\n       break;\n \n@@ -402,6 +406,18 @@ convert_memory_address_addr_space (enum machine_mode to_mode ATTRIBUTE_UNUSED,\n \t\t\tx, POINTERS_EXTEND_UNSIGNED);\n #endif /* defined(POINTERS_EXTEND_UNSIGNED) */\n }\n+\n+/* Given X, a memory address in address space AS' pointer mode, convert it to\n+   an address in the address space's address mode, or vice versa (TO_MODE says\n+   which way).  We take advantage of the fact that pointers are not allowed to\n+   overflow by commuting arithmetic operations over conversions so that address\n+   arithmetic insns can be used.  */\n+\n+rtx\n+convert_memory_address_addr_space (enum machine_mode to_mode, rtx x, addr_space_t as)\n+{\n+  return convert_memory_address_addr_space_1 (to_mode, x, as, false);\n+}\n \f\n /* Return something equivalent to X but valid as a memory address for something\n    of mode MODE in the named address space AS.  When X is not itself valid,"}]}