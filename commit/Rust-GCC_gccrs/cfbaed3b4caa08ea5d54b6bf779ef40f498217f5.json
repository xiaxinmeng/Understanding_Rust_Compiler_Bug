{"sha": "cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZiYWVkM2I0Y2FhMDhlYTVkNTRiNmJmNzc5ZWY0MGY0OTgyMTdmNQ==", "commit": {"author": {"name": "Denis Chertykov", "email": "chertykov@gmail.com", "date": "2012-01-14T18:11:29Z"}, "committer": {"name": "Denis Chertykov", "email": "denisc@gcc.gnu.org", "date": "2012-01-14T18:11:29Z"}, "message": "re PR other/50925 ([avr] ICE at spill_failure, at reload1.c:2118)\n\n\tPR target/50925\n\t* config/avr/avr-protos.h: Revert change of 2012-01-09.\n\t* config/avr/avr.c: Likewise.\n\t* config/avr/avr.h: Likewise.\n\nFrom-SVN: r183183", "tree": {"sha": "6853db8f39a9820444a0706ebc1d7d0000047d85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6853db8f39a9820444a0706ebc1d7d0000047d85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/comments", "author": {"login": "chertykov", "id": 329586, "node_id": "MDQ6VXNlcjMyOTU4Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/329586?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chertykov", "html_url": "https://github.com/chertykov", "followers_url": "https://api.github.com/users/chertykov/followers", "following_url": "https://api.github.com/users/chertykov/following{/other_user}", "gists_url": "https://api.github.com/users/chertykov/gists{/gist_id}", "starred_url": "https://api.github.com/users/chertykov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chertykov/subscriptions", "organizations_url": "https://api.github.com/users/chertykov/orgs", "repos_url": "https://api.github.com/users/chertykov/repos", "events_url": "https://api.github.com/users/chertykov/events{/privacy}", "received_events_url": "https://api.github.com/users/chertykov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af7b9e82d00bc5488538a583fe717e0b7d8d49c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af7b9e82d00bc5488538a583fe717e0b7d8d49c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af7b9e82d00bc5488538a583fe717e0b7d8d49c3"}], "stats": {"total": 212, "additions": 114, "deletions": 98}, "files": [{"sha": "601daeed74fd29c61d5794b1c611e85689776ed0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "patch": "@@ -1,3 +1,10 @@\n+2012-01-14  Denis Chertykov  <chertykov@gmail.com>\n+\n+\tPR target/50925\n+\t* config/avr/avr-protos.h: Revert change of 2012-01-09.\n+\t* config/avr/avr.c: Likewise.\n+\t* config/avr/avr.h: Likewise.\n+\n 2012-01-13  Ian Lance Taylor  <iant@google.com>\n \n \tPR c++/50012"}, {"sha": "09f82718ae87a234b9d881791086d4e7cd55d282", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "patch": "@@ -109,7 +109,6 @@ extern int avr_jump_mode (rtx x, rtx insn);\n extern int test_hard_reg_class (enum reg_class rclass, rtx x);\n extern int jump_over_one_insn_p (rtx insn, rtx dest);\n \n-extern int avr_hard_regno_nregs (int regno, enum machine_mode mode);\n extern int avr_hard_regno_mode_ok (int regno, enum machine_mode mode);\n extern void final_prescan_insn (rtx insn, rtx *operand, int num_operands);\n extern int avr_simplify_comparison_p (enum machine_mode mode,"}, {"sha": "846c796e8ad10d013d42a924c12e1f6a4f639000", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 59, "deletions": 45, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "patch": "@@ -686,28 +686,31 @@ avr_regs_to_save (HARD_REG_SET *set)\n /* Return true if register FROM can be eliminated via register TO.  */\n \n static bool\n-avr_can_eliminate (int from ATTRIBUTE_UNUSED, int to)\n+avr_can_eliminate (const int from, const int to)\n {\n-  return to == HARD_FRAME_POINTER_REGNUM;\n+  return ((from == ARG_POINTER_REGNUM && to == FRAME_POINTER_REGNUM)\n+          || (frame_pointer_needed && to == FRAME_POINTER_REGNUM)\n+          || ((from == FRAME_POINTER_REGNUM \n+               || from == FRAME_POINTER_REGNUM + 1)\n+              && !frame_pointer_needed));\n }\n \n /* Compute offset between arg_pointer and frame_pointer.  */\n \n int\n-avr_initial_elimination_offset (int from, int to ATTRIBUTE_UNUSED)\n+avr_initial_elimination_offset (int from, int to)\n {\n-  int offset = 0;\n-\n-  if (from == ARG_POINTER_REGNUM)\n+  if (from == FRAME_POINTER_REGNUM && to == STACK_POINTER_REGNUM)\n+    return 0;\n+  else\n     {\n-      offset += AVR_HAVE_EIJMP_EICALL ? 3 : 2;\n-      offset += frame_pointer_needed ? 2 : 0;\n+      int offset = frame_pointer_needed ? 2 : 0;\n+      int avr_pc_size = AVR_HAVE_EIJMP_EICALL ? 3 : 2;\n+      \n       offset += avr_regs_to_save (NULL);\n-      offset += get_frame_size ();\n-      offset += 1; /* post-dec stack space */\n+      return (get_frame_size () + avr_outgoing_args_size()\n+              + avr_pc_size + 1 + offset);\n     }\n-\n-  return offset;\n }\n \n /* Actual start of frame is virtual_stack_vars_rtx this is offset from \n@@ -899,12 +902,12 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n          notes to the front.  Thus we build them in the reverse order of\n          how we want dwarf2out to process them.  */\n \n-      /* The function does always set hard_frame_pointer_rtx, but whether that\n+      /* The function does always set frame_pointer_rtx, but whether that\n          is going to be permanent in the function is frame_pointer_needed.  */\n \n       add_reg_note (insn, REG_CFA_ADJUST_CFA,\n                     gen_rtx_SET (VOIDmode, (frame_pointer_needed\n-                                            ? hard_frame_pointer_rtx\n+                                            ? frame_pointer_rtx\n                                             : stack_pointer_rtx),\n                                  plus_constant (stack_pointer_rtx,\n                                                 -(size + live_seq))));\n@@ -949,7 +952,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n       if (frame_pointer_needed\n           && size == 0)\n         {\n-          insn = emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+          insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n           RTX_FRAME_RELATED_P (insn) = 1;\n         }\n       \n@@ -984,15 +987,15 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n                       || !current_function_is_leaf);\n           \n           fp = my_fp = (frame_pointer_needed\n-                        ? hard_frame_pointer_rtx\n+                        ? frame_pointer_rtx\n                         : gen_rtx_REG (Pmode, REG_X));\n           \n           if (AVR_HAVE_8BIT_SP)\n             {\n               /* The high byte (r29) does not change:\n                  Prefer SUBI (1 cycle) over ABIW (2 cycles, same size).  */\n \n-              my_fp = all_regs_rtx[HARD_FRAME_POINTER_REGNUM];\n+              my_fp = all_regs_rtx[FRAME_POINTER_REGNUM];\n             }\n \n           /************  Method 1: Adjust frame pointer  ************/\n@@ -1257,13 +1260,13 @@ expand_epilogue (bool sibcall_p)\n       \n       if (!frame_pointer_needed)\n         {\n-          emit_move_insn (hard_frame_pointer_rtx, stack_pointer_rtx);\n+          emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n         }\n \n       if (size)\n         {\n-          emit_move_insn (hard_frame_pointer_rtx,\n-                          plus_constant (hard_frame_pointer_rtx, size));\n+          emit_move_insn (frame_pointer_rtx,\n+                          plus_constant (frame_pointer_rtx, size));\n         }\n         \n       emit_insn (gen_epilogue_restores (gen_int_mode (live_seq, HImode)));\n@@ -1282,15 +1285,15 @@ expand_epilogue (bool sibcall_p)\n                   || !current_function_is_leaf);\n       \n       fp = my_fp = (frame_pointer_needed\n-                    ? hard_frame_pointer_rtx\n+                    ? frame_pointer_rtx\n                     : gen_rtx_REG (Pmode, REG_X));\n \n       if (AVR_HAVE_8BIT_SP)\n         {\n           /* The high byte (r29) does not change:\n              Prefer SUBI (1 cycle) over SBIW (2 cycles).  */\n                   \n-          my_fp = all_regs_rtx[HARD_FRAME_POINTER_REGNUM];\n+          my_fp = all_regs_rtx[FRAME_POINTER_REGNUM];\n         }\n               \n       /********** Method 1: Adjust fp register  **********/\n@@ -1531,8 +1534,37 @@ avr_legitimate_address_p (enum machine_mode mode, rtx x, bool strict)\n    memory address for an operand of mode MODE  */\n \n static rtx\n-avr_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED, enum machine_mode mode)\n+avr_legitimize_address (rtx x, rtx oldx, enum machine_mode mode)\n {\n+  bool big_offset_p = false;\n+  \n+  x = oldx;\n+  \n+  if (GET_CODE (oldx) == PLUS\n+      && REG_P (XEXP (oldx, 0)))\n+    {\n+      if (REG_P (XEXP (oldx, 1)))\n+        x = force_reg (GET_MODE (oldx), oldx);\n+      else if (CONST_INT_P (XEXP (oldx, 1)))\n+        {\n+\t  int offs = INTVAL (XEXP (oldx, 1));\n+          if (frame_pointer_rtx != XEXP (oldx, 0)\n+              && offs > MAX_LD_OFFSET (mode))\n+            {\n+              big_offset_p = true;\n+              x = force_reg (GET_MODE (oldx), oldx);\n+            }\n+        }\n+    }\n+  \n+  if (avr_log.legitimize_address)\n+    {\n+      avr_edump (\"\\n%?: mode=%m\\n %r\\n\", mode, oldx);\n+\n+      if (x != oldx)\n+        avr_edump (\" %s --> %r\\n\", big_offset_p ? \"(big offset)\" : \"\", x);\n+    }\n+\n   return x;\n }\n \n@@ -1602,7 +1634,7 @@ avr_legitimize_reload_address (rtx *px, enum machine_mode mode,\n             }\n         }\n       else if (! (frame_pointer_needed\n-                  && XEXP (x, 0) == hard_frame_pointer_rtx))\n+                  && XEXP (x, 0) == frame_pointer_rtx))\n         {\n           push_reload (x, NULL_RTX, px, NULL,\n                        POINTER_REGS, GET_MODE (x), VOIDmode, 0, 0,\n@@ -8334,19 +8366,6 @@ extra_constraint_Q (rtx x)\n   return ok;\n }\n \n-/* Returns the number of registers required to hold a value of MODE.  */\n-\n-int\n-avr_hard_regno_nregs (int regno, enum machine_mode mode)\n-{\n-  /* The fake registers are designed to hold exactly a pointer.  */\n-  if (regno == ARG_POINTER_REGNUM || regno == FRAME_POINTER_REGNUM)\n-    return 1;\n-\n-  return (GET_MODE_SIZE (mode) + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-}\n-\n-\n /* Convert condition code CONDITION to the valid AVR condition code.  */\n \n RTX_CODE\n@@ -8770,10 +8789,6 @@ jump_over_one_insn_p (rtx insn, rtx dest)\n int\n avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n {\n-  /* The fake registers are designed to hold exactly a pointer.  */\n-  if (regno == ARG_POINTER_REGNUM || regno == FRAME_POINTER_REGNUM)\n-    return mode == Pmode;\n-\n   /* NOTE: 8-bit values must not be disallowed for R28 or R29.\n         Disallowing QI et al. in these regs might lead to code like\n             (set (subreg:QI (reg:HI 28) n) ...)\n@@ -8797,6 +8812,7 @@ avr_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     return 0;\n \n   /* All modes larger than 8 bits should start in an even register.  */\n+  \n   return !(regno & 1);\n }\n \n@@ -8856,8 +8872,7 @@ avr_regno_mode_code_ok_for_base_p (int regno,\n       && (regno == REG_X\n           || regno == REG_Y\n           || regno == REG_Z\n-          || regno == ARG_POINTER_REGNUM\n-\t  || regno == FRAME_POINTER_REGNUM))\n+          || regno == ARG_POINTER_REGNUM))\n     {\n       ok = true;\n     }\n@@ -8868,8 +8883,7 @@ avr_regno_mode_code_ok_for_base_p (int regno,\n       if (regno == REG_X\n           || regno == REG_Y\n           || regno == REG_Z\n-          || regno == ARG_POINTER_REGNUM\n-\t  || regno == FRAME_POINTER_REGNUM)\n+          || regno == ARG_POINTER_REGNUM)\n         {\n           ok = true;\n         }"}, {"sha": "33017ba74bd25a9b88e5e2e39d8e2600f3b152c7", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 48, "deletions": 52, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfbaed3b4caa08ea5d54b6bf779ef40f498217f5/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=cfbaed3b4caa08ea5d54b6bf779ef40f498217f5", "patch": "@@ -231,47 +231,45 @@ enum\n \n #define FIRST_PSEUDO_REGISTER 36\n \n-#define FIXED_REGISTERS {\t\t\t\\\n-  1,1,/* r0 r1 */\t\t\t\t\\\n-  0,0,/* r2 r3 */\t\t\t\t\\\n-  0,0,/* r4 r5 */\t\t\t\t\\\n-  0,0,/* r6 r7 */\t\t\t\t\\\n-  0,0,/* r8 r9 */\t\t\t\t\\\n-  0,0,/* r10 r11 */\t\t\t\t\\\n-  0,0,/* r12 r13 */\t\t\t\t\\\n-  0,0,/* r14 r15 */\t\t\t\t\\\n-  0,0,/* r16 r17 */\t\t\t\t\\\n-  0,0,/* r18 r19 */\t\t\t\t\\\n-  0,0,/* r20 r21 */\t\t\t\t\\\n-  0,0,/* r22 r23 */\t\t\t\t\\\n-  0,0,/* r24 r25 */\t\t\t\t\\\n-  0,0,/* r26 r27 */\t\t\t\t\\\n-  0,0,/* r28 r29 */\t\t\t\t\\\n-  0,0,/* r30 r31 */\t\t\t\t\\\n-  1,1,/*  STACK */\t\t\t\t\\\n-  1,  /* arg pointer */\t\t\t\t\\\n-  1   /* frame pointer */ }\n+#define FIXED_REGISTERS {\\\n+  1,1,/* r0 r1 */\\\n+  0,0,/* r2 r3 */\\\n+  0,0,/* r4 r5 */\\\n+  0,0,/* r6 r7 */\\\n+  0,0,/* r8 r9 */\\\n+  0,0,/* r10 r11 */\\\n+  0,0,/* r12 r13 */\\\n+  0,0,/* r14 r15 */\\\n+  0,0,/* r16 r17 */\\\n+  0,0,/* r18 r19 */\\\n+  0,0,/* r20 r21 */\\\n+  0,0,/* r22 r23 */\\\n+  0,0,/* r24 r25 */\\\n+  0,0,/* r26 r27 */\\\n+  0,0,/* r28 r29 */\\\n+  0,0,/* r30 r31 */\\\n+  1,1,/*  STACK */\\\n+  1,1 /* arg pointer */  }\n \n #define CALL_USED_REGISTERS {\t\t\t\\\n   1,1,/* r0 r1 */\t\t\t\t\\\n-  0,0,/* r2 r3 */\t\t\t\t\\\n-  0,0,/* r4 r5 */\t\t\t\t\\\n-  0,0,/* r6 r7 */\t\t\t\t\\\n-  0,0,/* r8 r9 */\t\t\t\t\\\n-  0,0,/* r10 r11 */\t\t\t\t\\\n-  0,0,/* r12 r13 */\t\t\t\t\\\n-  0,0,/* r14 r15 */\t\t\t\t\\\n-  0,0,/* r16 r17 */\t\t\t\t\\\n-  1,1,/* r18 r19 */\t\t\t\t\\\n-  1,1,/* r20 r21 */\t\t\t\t\\\n-  1,1,/* r22 r23 */\t\t\t\t\\\n-  1,1,/* r24 r25 */\t\t\t\t\\\n-  1,1,/* r26 r27 */\t\t\t\t\\\n-  0,0,/* r28 r29 */\t\t\t\t\\\n-  1,1,/* r30 r31 */\t\t\t\t\\\n-  1,1,/*  STACK */\t\t\t\t\\\n-  1,  /* arg pointer */\t\t\t\t\\\n-  1   /* frame pointer */ }\n+    0,0,/* r2 r3 */\t\t\t\t\\\n+    0,0,/* r4 r5 */\t\t\t\t\\\n+    0,0,/* r6 r7 */\t\t\t\t\\\n+    0,0,/* r8 r9 */\t\t\t\t\\\n+    0,0,/* r10 r11 */\t\t\t\t\\\n+    0,0,/* r12 r13 */\t\t\t\t\\\n+    0,0,/* r14 r15 */\t\t\t\t\\\n+    0,0,/* r16 r17 */\t\t\t\t\\\n+    1,1,/* r18 r19 */\t\t\t\t\\\n+    1,1,/* r20 r21 */\t\t\t\t\\\n+    1,1,/* r22 r23 */\t\t\t\t\\\n+    1,1,/* r24 r25 */\t\t\t\t\\\n+    1,1,/* r26 r27 */\t\t\t\t\\\n+    0,0,/* r28 r29 */\t\t\t\t\\\n+    1,1,/* r30 r31 */\t\t\t\t\\\n+    1,1,/*  STACK */\t\t\t\t\\\n+    1,1 /* arg pointer */  }\n \n #define REG_ALLOC_ORDER {\t\t\t\\\n     24,25,\t\t\t\t\t\\\n@@ -289,7 +287,7 @@ enum\n #define ADJUST_REG_ALLOC_ORDER order_regs_for_local_alloc ()\n \n \n-#define HARD_REGNO_NREGS(REGNO, MODE) avr_hard_regno_nregs(REGNO, MODE)\n+#define HARD_REGNO_NREGS(REGNO, MODE) ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD)\n \n #define HARD_REGNO_MODE_OK(REGNO, MODE) avr_hard_regno_mode_ok(REGNO, MODE)\n \n@@ -339,17 +337,17 @@ enum reg_class {\n   {3 << REG_Z,0x00000000},      /* POINTER_Z_REGS, r30 - r31 */\t\t\\\n   {0x00000000,0x00000003},\t/* STACK_REG, STACK */\t\t\t\\\n   {(3 << REG_Y) | (3 << REG_Z),\t\t\t\t\t\t\\\n-     0x0000000c},\t\t/* BASE_POINTER_REGS, r28 - r31,ap,fp */ \\\n+     0x00000000},\t\t/* BASE_POINTER_REGS, r28 - r31 */\t\\\n   {(3 << REG_X) | (3 << REG_Y) | (3 << REG_Z),\t\t\t\t\\\n-     0x0000000c},\t\t/* POINTER_REGS, r26 - r31 */\t\t\\\n+     0x00000000},\t\t/* POINTER_REGS, r26 - r31 */\t\t\\\n   {(3 << REG_X) | (3 << REG_Y) | (3 << REG_Z) | (3 << REG_W),\t\t\\\n      0x00000000},\t\t/* ADDW_REGS, r24 - r31 */\t\t\\\n   {0x00ff0000,0x00000000},\t/* SIMPLE_LD_REGS r16 - r23 */          \\\n   {(3 << REG_X)|(3 << REG_Y)|(3 << REG_Z)|(3 << REG_W)|(0xff << 16),\t\\\n-     0x0000000c},\t/* LD_REGS, r16 - r31 */\t\t\t\\\n+     0x00000000},\t/* LD_REGS, r16 - r31 */\t\t\t\\\n   {0x0000ffff,0x00000000},\t/* NO_LD_REGS  r0 - r15 */              \\\n-  {0xffffffff,0x0000000c},\t/* GENERAL_REGS, r0 - r31 */\t\t\\\n-  {0xffffffff,0x0000000f}\t/* ALL_REGS */\t\t\t\t\\\n+  {0xffffffff,0x00000000},\t/* GENERAL_REGS, r0 - r31 */\t\t\\\n+  {0xffffffff,0x00000003}\t/* ALL_REGS */\t\t\t\t\\\n }\n \n #define REGNO_REG_CLASS(R) avr_regno_reg_class(R)\n@@ -380,20 +378,18 @@ enum reg_class {\n \n #define STACK_POINTER_REGNUM 32\n \n-#define HARD_FRAME_POINTER_REGNUM REG_Y\n+#define FRAME_POINTER_REGNUM REG_Y\n \n #define ARG_POINTER_REGNUM 34\n-#define FRAME_POINTER_REGNUM 35\n \n #define STATIC_CHAIN_REGNUM 2\n \n #define ELIMINABLE_REGS {\t\t\t\t\t\\\n-     { ARG_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\\\n-     { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM },\t\t\\\n-     { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM },\t\t\\\n-     { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM }}\n+      {ARG_POINTER_REGNUM, FRAME_POINTER_REGNUM},\t\t\\\n+\t{FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM}\t\t\\\n+       ,{FRAME_POINTER_REGNUM+1,STACK_POINTER_REGNUM+1}}\n \n-#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\\\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET)\t\t\t\\\n   OFFSET = avr_initial_elimination_offset (FROM, TO)\n \n #define RETURN_ADDR_RTX(count, tem) avr_return_addr_rtx (count, tem)\n@@ -497,7 +493,7 @@ typedef struct avr_args {\n     \"r8\",\"r9\",\"r10\",\"r11\",\"r12\",\"r13\",\"r14\",\"r15\",\t\\\n     \"r16\",\"r17\",\"r18\",\"r19\",\"r20\",\"r21\",\"r22\",\"r23\",\t\\\n     \"r24\",\"r25\",\"r26\",\"r27\",\"r28\",\"r29\",\"r30\",\"r31\",\t\\\n-    \"__SP_L__\",\"__SP_H__\",\"ap\",\"fp\"}\n+    \"__SP_L__\",\"__SP_H__\",\"argL\",\"argH\"}\n \n #define FINAL_PRESCAN_INSN(insn, operand, nop) final_prescan_insn (insn, operand,nop)\n "}]}