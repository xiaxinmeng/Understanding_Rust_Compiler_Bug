{"sha": "889d84651c1630468bcc810551c26753acd24782", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODg5ZDg0NjUxYzE2MzA0NjhiY2M4MTA1NTFjMjY3NTNhY2QyNDc4Mg==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2005-07-21T08:08:17Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2005-07-21T08:08:17Z"}, "message": "Replace C++ style line comments with C style line comments.\n\n(symbian_add_attribute): Do not use a ? operator on the LHS of an assignment.\n(sh_symbian_handle_dll_attribute): Change the type of the method vector to\n  \"VEC(tree,gc)*\" and use vector accessor macros to walk over the elements.\n(symbian_export_vtable_and_rtti_p): Likewise.\n(symbian_class_needs_attribute_p): Likewise.\n\nFrom-SVN: r102228", "tree": {"sha": "b0a943f255bfc663c961a8a69df677a471d9b3ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0a943f255bfc663c961a8a69df677a471d9b3ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/889d84651c1630468bcc810551c26753acd24782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889d84651c1630468bcc810551c26753acd24782", "html_url": "https://github.com/Rust-GCC/gccrs/commit/889d84651c1630468bcc810551c26753acd24782", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/889d84651c1630468bcc810551c26753acd24782/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8eb9df78b19968f4b0b4bae40d3f9b58749eddbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8eb9df78b19968f4b0b4bae40d3f9b58749eddbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8eb9df78b19968f4b0b4bae40d3f9b58749eddbe"}], "stats": {"total": 53, "additions": 36, "deletions": 17}, "files": [{"sha": "e79da098bb5ab252dd406d53ed425185dcdf678f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889d84651c1630468bcc810551c26753acd24782/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889d84651c1630468bcc810551c26753acd24782/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=889d84651c1630468bcc810551c26753acd24782", "patch": "@@ -1,3 +1,15 @@\n+2005-07-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* config/sh/symbian.c: Replace C++ style line comments with C\n+\tstyle line comments.\n+        (symbian_add_attribute): Do not use a ? operator on the LHS of\n+\tan assignment.\n+        (sh_symbian_handle_dll_attribute): Change the type of the\n+\tmethod vector to \"VEC(tree,gc)*\" and use vector accessor\n+\tmacros to walk over the elements.\n+        (symbian_export_vtable_and_rtti_p): Likewise.\n+        (symbian_class_needs_attribute_p): Likewise.\n+\n 2005-07-21  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR target/22085"}, {"sha": "8568f32f72d43d1649bc77aafe41f79418454845", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/889d84651c1630468bcc810551c26753acd24782/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/889d84651c1630468bcc810551c26753acd24782/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=889d84651c1630468bcc810551c26753acd24782", "patch": "@@ -38,8 +38,8 @@\n    1 for informative messages about decisions to add attributes\n    2 for verbose information about what is being done.  */\n #define SYMBIAN_DEBUG 0\n-//#define SYMBIAN_DEBUG 1\n-//#define SYMBIAN_DEBUG 2\n+/* #define SYMBIAN_DEBUG 1 */\n+/* #define SYMBIAN_DEBUG 2 */\n \n /* A unique character to encode declspec encoded objects.  */\n #define SH_SYMBIAN_FLAG_CHAR \"$\"\n@@ -375,8 +375,10 @@ symbian_add_attribute (tree node, const char *attr_name)\n \n   attr = get_identifier (attr_name);\n \n-  (DECL_P (node) ? DECL_ATTRIBUTES (node) : TYPE_ATTRIBUTES (node))\n-    = tree_cons (attr, NULL_TREE, attrs);\n+  if (DECL_P (node))\n+    DECL_ATTRIBUTES (node) = tree_cons (attr, NULL_TREE, attrs);\n+  else\n+    TYPE_ATTRIBUTES (node) = tree_cons (attr, NULL_TREE, attrs);\n \n #if SYMBIAN_DEBUG\n   fprintf (stderr, \"propogate %s attribute\", attr_name);\n@@ -549,18 +551,18 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n static void\n symbian_possibly_export_base_class (tree base_class)\n {\n-  tree methods;\n+  VEC(tree,gc) *method_vec;\n   int len;\n \n   if (! (TYPE_CONTAINS_VPTR_P (base_class)))\n     return;\n \n-  methods = CLASSTYPE_METHOD_VEC (base_class);\n-  len = methods ? TREE_VEC_LENGTH (methods) : 0;\n+  method_vec = CLASSTYPE_METHOD_VEC (base_class);\n+  len = method_vec ? VEC_length (tree, method_vec) : 0;\n \n   for (;len --;)\n     {\n-      tree member = TREE_VEC_ELT (methods, len);\n+      tree member = VEC_index (tree, method_vec, len);\n \n       if (! member)\n \tcontinue;\n@@ -611,7 +613,7 @@ symbian_export_vtable_and_rtti_p (tree ctype)\n   bool dllimport_ctor_dtor;\n   bool dllimport_member;\n   tree binfo, base_binfo;\n-  tree methods;\n+  VEC(tree,gc) *method_vec;\n   tree key;\n   int i;\n   int len;\n@@ -653,12 +655,12 @@ symbian_export_vtable_and_rtti_p (tree ctype)\n   dllimport_ctor_dtor = false;\n   dllimport_member = false;\n \n-  methods = CLASSTYPE_METHOD_VEC (ctype);\n-  len = methods ? TREE_VEC_LENGTH (methods) : 0;\n+  method_vec = CLASSTYPE_METHOD_VEC (ctype);\n+  len = method_vec ? VEC_length (tree, method_vec) : 0;\n \n   for (;len --;)\n     {\n-      tree member = TREE_VEC_ELT (methods, len);\n+      tree member = VEC_index (tree, method_vec, len);\n \n       if (! member)\n \tcontinue;\n@@ -754,22 +756,27 @@ symbian_add_attribute_to_class_vtable_and_rtti (tree ctype, const char *attr_nam\n static bool\n symbian_class_needs_attribute_p (tree ctype, const char *attribute_name)\n {\n+  VEC(tree,gc) *method_vec;\n+\n+  method_vec = CLASSTYPE_METHOD_VEC (ctype);\n+\n   /* If the key function has the attribute then the class needs it too.  */\n   if (TYPE_POLYMORPHIC_P (ctype)\n-      && CLASSTYPE_KEY_METHOD (ctype)\n+      && method_vec\n       && lookup_attribute (attribute_name,\n-\t\t\t   DECL_ATTRIBUTES (CLASSTYPE_KEY_METHOD (ctype))))\n+\t\t\t   DECL_ATTRIBUTES (VEC_index (tree, method_vec, 0))))\n     return true;\n \n   /* Check the class's member functions.  */\n   if (TREE_CODE (ctype) == RECORD_TYPE)\n     {\n-      tree methods = CLASSTYPE_METHOD_VEC (ctype);\n-      unsigned int len = methods ? TREE_VEC_LENGTH (methods) : 0;\n+      unsigned int len;\n+\n+      len = method_vec ? VEC_length (tree, method_vec) : 0;\n \n       for (;len --;)\n \t{\n-\t  tree member = TREE_VEC_ELT (methods, len);\n+\t  tree member = VEC_index (tree, method_vec, len);\n \n \t  if (! member)\n \t    continue;"}]}