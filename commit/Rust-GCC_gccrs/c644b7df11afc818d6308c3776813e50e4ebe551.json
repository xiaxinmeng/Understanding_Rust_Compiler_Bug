{"sha": "c644b7df11afc818d6308c3776813e50e4ebe551", "node_id": "C_kwDOANBUbNoAKGM2NDRiN2RmMTFhZmM4MThkNjMwOGMzNzc2ODEzZTUwZTRlYmU1NTE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-13T13:09:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-04-20T12:54:57Z"}, "message": "libstdc++: Use LTLIBICONV when linking libstdc++.so [PR93602]\n\nThis fixes missing libiconv symbols when libstdc++ is built on a system\nthat has libiconv installed. If the libiconv headers are found then\nlibstdc++ depends on libiconv_open etc instead of libc's iconv_open. But\nwithout this fix libstdc++ is not linked to the libiconv library that\nprovides the definitions of those symbols.\n\nAs discussed in PR 93602 this changed means that libstdc++.so.6 might\nhave an rpath pointing to the location of the libiconv.so library. If\nthat is not desired, then GCC must be configured to link to a static\nlibiconv.a instead, using either --with-libiconv-type=static or an\nin-tree build of libiconv.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/93602\n\t* doc/xml/manual/prerequisites.xml: Document libiconv\n\tworkarounds.\n\t* doc/html/manual/setup.html: Regenerate.\n\t* src/Makefile.am (CXXLINK): Add $(LTLIBICONV).\n\t* src/Makefile.in: Regenerate.", "tree": {"sha": "ce0877355aee3a36bc2823d551d6517e1c4d35a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0877355aee3a36bc2823d551d6517e1c4d35a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c644b7df11afc818d6308c3776813e50e4ebe551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c644b7df11afc818d6308c3776813e50e4ebe551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c644b7df11afc818d6308c3776813e50e4ebe551", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c644b7df11afc818d6308c3776813e50e4ebe551/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4eaa77a7d27bf7b220c3be79615410c873fcf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d4eaa77a7d27bf7b220c3be79615410c873fcf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d4eaa77a7d27bf7b220c3be79615410c873fcf1"}], "stats": {"total": 91, "additions": 89, "deletions": 2}, "files": [{"sha": "069354b8ce0ef2bcee817a0fbd4bc33e6d7bbcc1", "filename": "libstdc++-v3/doc/html/manual/setup.html", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsetup.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsetup.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fsetup.html?ref=c644b7df11afc818d6308c3776813e50e4ebe551", "patch": "@@ -42,6 +42,39 @@\n    </p><p>\n    Finally, a few system-specific requirements:\n    </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\">linux</span></dt><dd><p>\n+\t  The 'gnu' locale model makes use of <code class=\"function\">iconv</code>\n+\t  for character set conversions. The relevant functions are provided\n+\t  by Glibc and so are always available, however they can also be\n+\t  provided by the separate GNU libiconv library. If GNU libiconv is\n+\t  found when GCC is built (e.g., because its headers are installed\n+\t  in <code class=\"filename\">/usr/local/include</code>)\n+\t  then the <code class=\"filename\">libstdc++.so.6</code> library will have a\n+\t  run-time dependency on <code class=\"filename\">libiconv.so.2</code>.\n+\t  If you do not want that run-time dependency then you should do\n+\t  one of the following:\n+\t</p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>\n+\t      Uninstall the libiconv headers before building GCC.\n+\t      Glibc already provides <code class=\"function\">iconv</code> so you should\n+\t      not need libiconv anyway.\n+\t    </p></li><li class=\"listitem\"><p>\n+\t    <a class=\"link\" href=\"../\">\n+\t    Download</a> the libiconv sources and extract them into the\n+\t    top level of the GCC source tree, e.g.,\n+\t    </p><pre class=\"programlisting\">\n+wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz\n+tar xf libiconv-1.16.tar.gz\n+ln -s libiconv-1.16 libiconv\n+</pre><p>\n+\t      This will build libiconv as part of building GCC and link to\n+\t      it statically, so there is no <code class=\"filename\">libiconv.so.2</code>\n+\t      dependency.\n+\t    </p></li><li class=\"listitem\"><p>\n+\t      Configure GCC with <code class=\"option\">--with-libiconv-type=static</code>.\n+\t      This requires the static <code class=\"filename\">libiconv.a</code> library,\n+\t      which is not installed by default. You might need to reinstall\n+\t      libiconv using the <code class=\"option\">--enable-static</code> configure\n+\t      option to get the static library.\n+\t    </p></li></ul></div><p>\n \t  If GCC 3.1.0 or later on is being used on GNU/Linux, an attempt\n \t  will be made to use \"C\" library functionality necessary for\n \t  C++ named locale support.  For GCC 4.6.0 and later, this"}, {"sha": "8799487c821945b1ee7766b4b7a8af3c6345ef3d", "filename": "libstdc++-v3/doc/xml/manual/prerequisites.xml", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprerequisites.xml?ref=c644b7df11afc818d6308c3776813e50e4ebe551", "patch": "@@ -48,6 +48,56 @@\n       <varlistentry>\n \t<term>linux</term>\n \n+\t<listitem>\n+\t<para>\n+\t  The 'gnu' locale model makes use of <function>iconv</function>\n+\t  for character set conversions. The relevant functions are provided\n+\t  by Glibc and so are always available, however they can also be\n+\t  provided by the separate GNU libiconv library. If GNU libiconv is\n+\t  found when GCC is built (e.g., because its headers are installed\n+\t  in <filename class=\"directory\">/usr/local/include</filename>)\n+\t  then the <filename>libstdc++.so.6</filename> library will have a\n+\t  run-time dependency on <filename>libiconv.so.2</filename>.\n+\t  If you do not want that run-time dependency then you should do\n+\t  one of the following:\n+\t</para>\n+\t<itemizedlist>\n+\t  <listitem>\n+\t    <para>\n+\t      Uninstall the libiconv headers before building GCC.\n+\t      Glibc already provides <function>iconv</function> so you should\n+\t      not need libiconv anyway.\n+\t    </para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>\n+\t    <link linkend=\"https://www.gnu.org/software/libiconv/#downloading\">\n+\t    Download</link> the libiconv sources and extract them into the\n+\t    top level of the GCC source tree, e.g.,\n+\t    </para>\n+<programlisting>\n+wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz\n+tar xf libiconv-1.16.tar.gz\n+ln -s libiconv-1.16 libiconv\n+</programlisting>\n+\t    <para>\n+\t      This will build libiconv as part of building GCC and link to\n+\t      it statically, so there is no <filename>libiconv.so.2</filename>\n+\t      dependency.\n+\t    </para>\n+\t  </listitem>\n+\t  <listitem>\n+\t    <para>\n+\t      Configure GCC with <option>--with-libiconv-type=static</option>.\n+\t      This requires the static <filename>libiconv.a</filename> library,\n+\t      which is not installed by default. You might need to reinstall\n+\t      libiconv using the <option>--enable-static</option> configure\n+\t      option to get the static library.\n+\t    </para>\n+\t  </listitem>\n+\t</itemizedlist>\n+\t</listitem>\n+\n \t<listitem>\n \t<para>\n \t  If GCC 3.1.0 or later on is being used on GNU/Linux, an attempt"}, {"sha": "9c3f4aca65584664bdaa3774189f766af59de133", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=c644b7df11afc818d6308c3776813e50e4ebe551", "patch": "@@ -278,7 +278,9 @@ CXXLINK = \\\n \t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CXX) \\\n \t$(VTV_CXXLINKFLAGS) \\\n-\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) \\\n+\t$(LTLDFLAGS) $(LTLIBICONV) \\\n+\t-o $@\n \n # Symbol versioning for shared libraries.\n if ENABLE_SYMVERS"}, {"sha": "4a06f6cfec18c6a91d93a48a595c8ec88489b97c", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c644b7df11afc818d6308c3776813e50e4ebe551/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=c644b7df11afc818d6308c3776813e50e4ebe551", "patch": "@@ -643,7 +643,9 @@ CXXLINK = \\\n \t$(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \\\n \t--mode=link $(CXX) \\\n \t$(VTV_CXXLINKFLAGS) \\\n-\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) $(LTLDFLAGS) -o $@\n+\t$(OPT_LDFLAGS) $(SECTION_LDFLAGS) $(AM_CXXFLAGS) \\\n+\t$(LTLDFLAGS) $(LTLIBICONV) \\\n+\t-o $@\n \n @ENABLE_SYMVERS_TRUE@CLEANFILES = libstdc++-symbols.ver $(version_dep)\n @ENABLE_SYMVERS_DARWIN_TRUE@@ENABLE_SYMVERS_TRUE@version_arg = -Wl,-exported_symbols_list,libstdc++-symbols.explist"}]}