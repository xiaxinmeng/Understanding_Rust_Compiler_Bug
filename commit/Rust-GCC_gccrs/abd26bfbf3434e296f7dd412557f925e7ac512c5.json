{"sha": "abd26bfbf3434e296f7dd412557f925e7ac512c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWJkMjZiZmJmMzQzNGUyOTZmN2RkNDEyNTU3ZjkyNWU3YWM1MTJjNQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-10-17T15:27:53Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-10-17T15:27:53Z"}, "message": "target.def (preferred_output_reload_class): New hook.\n\n\t* target.def (preferred_output_reload_class): New hook.\n\t* doc/tm.texi.in (TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Document.\n\t* doc/tm.texi: Regenerate.\n\t* targhooks.c (default_preferred_output_reload_class): New function.\n\t* targhooks.h (default_preferred_output_reload_class): Declare.\n\t* reload.c (find_dummy_reload): Change rclass argument type from \n\tenum reg_class to reg_class_t. Change this_alternative array type\n\tfrom enum reg_class to reg_class_t.\n\tUse TARGET_PREFERRED_OUTPUT_RELOAD_CLASS target hook.\n\t(push_reload): Change preferred_class variable type to reg_class_t.\n\tUse TARGET_PREFERRED_OUTPUT_RELOAD_CLASS target hook.\n\t* recog.c (reg_fits_class_p): Change result type to bool. Change cl\n\targument type from enum reg_class to reg_class_t. Use\n\tHARD_REGISTER_NUM_P predicate.\n\t* recog.h (reg_fits_class_p): Update prototype.\n\n\t* config/i386/i386.h (PREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n\t* config/i386/i386-protos.h (ix86_preferred_output_reload_class): Remove.\n\t* config/i386/i386.c (ix86_preferred_output_reload_class): Make\n\tstatic. Change regclass argument and result types from enum reg_class\n\tto reg_class_t.\n\t(TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Define.\n\nFrom-SVN: r165588", "tree": {"sha": "8353f8418ac7a3898efaae0ba10e35c172004549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8353f8418ac7a3898efaae0ba10e35c172004549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/abd26bfbf3434e296f7dd412557f925e7ac512c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd26bfbf3434e296f7dd412557f925e7ac512c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abd26bfbf3434e296f7dd412557f925e7ac512c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abd26bfbf3434e296f7dd412557f925e7ac512c5/comments", "author": null, "committer": null, "parents": [{"sha": "88c87359fa92a1869402a4f0b45517e071570174", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c87359fa92a1869402a4f0b45517e071570174", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c87359fa92a1869402a4f0b45517e071570174"}], "stats": {"total": 124, "additions": 93, "deletions": 31}, "files": [{"sha": "9e3642408bdbe293e67f4986085adcb6a5f2b9fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -1,3 +1,28 @@\n+2010-10-17  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* target.def (preferred_output_reload_class): New hook.\n+\t* doc/tm.texi.in (TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Document.\n+\t* doc/tm.texi: Regenerate.\n+\t* targhooks.c (default_preferred_output_reload_class): New function.\n+\t* targhooks.h (default_preferred_output_reload_class): Declare.\n+\t* reload.c (find_dummy_reload): Change rclass argument type from \n+\tenum reg_class to reg_class_t. Change this_alternative array type\n+\tfrom enum reg_class to reg_class_t.\n+\tUse TARGET_PREFERRED_OUTPUT_RELOAD_CLASS target hook.\n+\t(push_reload): Change preferred_class variable type to reg_class_t.\n+\tUse TARGET_PREFERRED_OUTPUT_RELOAD_CLASS target hook.\n+\t* recog.c (reg_fits_class_p): Change result type to bool. Change cl\n+\targument type from enum reg_class to reg_class_t. Use\n+\tHARD_REGISTER_NUM_P predicate.\n+\t* recog.h (reg_fits_class_p): Update prototype.\n+\n+\t* config/i386/i386.h (PREFERRED_OUTPUT_RELOAD_CLASS): Remove.\n+\t* config/i386/i386-protos.h (ix86_preferred_output_reload_class): Remove.\n+\t* config/i386/i386.c (ix86_preferred_output_reload_class): Make\n+\tstatic. Change regclass argument and result types from enum reg_class\n+\tto reg_class_t.\n+\t(TARGET_PREFERRED_OUTPUT_RELOAD_CLASS): Define.\n+\n 2010-10-17  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* c-parser.c (c_parser_objc_class_instance_variables): Update to use "}, {"sha": "9c10103114aff5d926965d1a0fd1cb28ca274f63", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -153,7 +153,6 @@ extern bool ix86_secondary_memory_needed (enum reg_class, enum reg_class,\n \t\t\t\t\t  enum machine_mode, int);\n extern bool ix86_cannot_change_mode_class (enum machine_mode,\n \t\t\t\t\t   enum machine_mode, enum reg_class);\n-extern enum reg_class ix86_preferred_output_reload_class (rtx, enum reg_class);\n extern int ix86_mode_needed (int, rtx);\n extern void emit_i387_cw_initialization (int);\n extern void x86_order_regs_for_local_alloc (void);"}, {"sha": "60b4dff8cc54ec2744fa21fbd8ad214322305942", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -26788,8 +26788,8 @@ ix86_preferred_reload_class (rtx x, reg_class_t regclass)\n \n /* Discourage putting floating-point values in SSE registers unless\n    SSE math is being used, and likewise for the 387 registers.  */\n-enum reg_class\n-ix86_preferred_output_reload_class (rtx x, enum reg_class regclass)\n+static reg_class_t\n+ix86_preferred_output_reload_class (rtx x, reg_class_t regclass)\n {\n   enum machine_mode mode = GET_MODE (x);\n \n@@ -33374,6 +33374,8 @@ ix86_autovectorize_vector_sizes (void)\n \n #undef TARGET_PREFERRED_RELOAD_CLASS\n #define TARGET_PREFERRED_RELOAD_CLASS ix86_preferred_reload_class\n+#undef TARGET_PREFERRED_OUTPUT_RELOAD_CLASS\n+#define TARGET_PREFERRED_OUTPUT_RELOAD_CLASS ix86_preferred_output_reload_class\n #undef TARGET_CLASS_LIKELY_SPILLED_P\n #define TARGET_CLASS_LIKELY_SPILLED_P ix86_class_likely_spilled_p\n "}, {"sha": "25463a5ed4bc13e9adae954cebf85ae715c57d1f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -1373,12 +1373,6 @@ enum reg_class\n        || (CLASS) == LEGACY_REGS || (CLASS) == INDEX_REGS)\t\\\n    ? Q_REGS : (CLASS))\n \n-/* Discourage putting floating-point values in SSE registers unless\n-   SSE math is being used, and likewise for the 387 registers.  */\n-\n-#define PREFERRED_OUTPUT_RELOAD_CLASS(X, CLASS) \\\n-   ix86_preferred_output_reload_class ((X), (CLASS))\n-\n /* If we are copying between general and FP registers, we need a memory\n    location. The same is true for SSE and MMX registers.  */\n #define SECONDARY_MEMORY_NEEDED(CLASS1, CLASS2, MODE) \\"}, {"sha": "941e2e1a492c4852a46a6dc9f5bbc364b6ed04f2", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -2669,6 +2669,17 @@ You can also use @code{PREFERRED_OUTPUT_RELOAD_CLASS} to discourage\n reload from using some alternatives, like @code{PREFERRED_RELOAD_CLASS}.\n @end defmac\n \n+@deftypefn {Target Hook} reg_class_t TARGET_PREFERRED_OUTPUT_RELOAD_CLASS (rtx @var{x}, reg_class_t @var{rclass})\n+Like @code{TARGET_PREFERRED_RELOAD_CLASS}, but for output reloads instead of\n+input reloads.\n+\n+The default version of this hook always returns value of @code{rclass}\n+argument.\n+\n+You can also use @code{TARGET_PREFERRED_OUTPUT_RELOAD_CLASS} to discourage\n+reload from using some alternatives, like @code{TARGET_PREFERRED_RELOAD_CLASS}.\n+@end deftypefn\n+\n @defmac LIMIT_RELOAD_CLASS (@var{mode}, @var{class})\n A C expression that places additional restrictions on the register class\n to use when it is necessary to be able to hold a value of mode"}, {"sha": "604802bea0e2a4eca7dcff45d7b565daeb2db1bf", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -2665,6 +2665,17 @@ You can also use @code{PREFERRED_OUTPUT_RELOAD_CLASS} to discourage\n reload from using some alternatives, like @code{PREFERRED_RELOAD_CLASS}.\n @end defmac\n \n+@hook TARGET_PREFERRED_OUTPUT_RELOAD_CLASS\n+Like @code{TARGET_PREFERRED_RELOAD_CLASS}, but for output reloads instead of\n+input reloads.\n+\n+The default version of this hook always returns value of @code{rclass}\n+argument.\n+\n+You can also use @code{TARGET_PREFERRED_OUTPUT_RELOAD_CLASS} to discourage\n+reload from using some alternatives, like @code{TARGET_PREFERRED_RELOAD_CLASS}.\n+@end deftypefn\n+\n @defmac LIMIT_RELOAD_CLASS (@var{mode}, @var{class})\n A C expression that places additional restrictions on the register class\n to use when it is necessary to be able to hold a value of mode"}, {"sha": "3ab72f10dd31d3449959657fe201217750eae969", "filename": "gcc/recog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -2751,21 +2751,21 @@ constrain_operands (int strict)\n     return 0;\n }\n \n-/* Return 1 iff OPERAND (assumed to be a REG rtx)\n+/* Return true iff OPERAND (assumed to be a REG rtx)\n    is a hard reg in class CLASS when its regno is offset by OFFSET\n    and changed to mode MODE.\n    If REG occupies multiple hard regs, all of them must be in CLASS.  */\n \n-int\n-reg_fits_class_p (rtx operand, enum reg_class cl, int offset,\n+bool\n+reg_fits_class_p (const_rtx operand, reg_class_t cl, int offset,\n \t\t  enum machine_mode mode)\n {\n   int regno = REGNO (operand);\n \n   if (cl == NO_REGS)\n-    return 0;\n+    return false;\n \n-  return (regno < FIRST_PSEUDO_REGISTER\n+  return (HARD_REGISTER_NUM_P (regno)\n \t  && in_hard_reg_set_p (reg_class_contents[(int) cl],\n \t\t\t\tmode, regno + offset));\n }"}, {"sha": "217c6e56c86fe4ec633a5a44243899e960ec248b", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -102,7 +102,7 @@ extern int num_changes_pending (void);\n #ifdef HAVE_cc0\n extern int next_insn_tests_no_inequality (rtx);\n #endif\n-extern int reg_fits_class_p (rtx, enum reg_class, int, enum machine_mode);\n+extern bool reg_fits_class_p (const_rtx, reg_class_t, int, enum machine_mode);\n \n extern int offsettable_memref_p (rtx);\n extern int offsettable_nonstrict_memref_p (rtx);"}, {"sha": "b1f94b27a0bd15a4cc68432cc577da2af04e691a", "filename": "gcc/reload.c", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -264,7 +264,7 @@ static void combine_reloads (void);\n static int find_reusable_reload (rtx *, rtx, enum reg_class,\n \t\t\t\t enum reload_type, int, int);\n static rtx find_dummy_reload (rtx, rtx, rtx *, rtx *, enum machine_mode,\n-\t\t\t      enum machine_mode, enum reg_class, int, int);\n+\t\t\t      enum machine_mode, reg_class_t, int, int);\n static int hard_reg_set_here_p (unsigned int, unsigned int, rtx);\n static struct decomposition decompose (rtx);\n static int immune_p (rtx, rtx, struct decomposition);\n@@ -1224,21 +1224,20 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n   /* Narrow down the class of register wanted if that is\n      desirable on this machine for efficiency.  */\n   {\n-    enum reg_class preferred_class = rclass;\n+    reg_class_t preferred_class = rclass;\n \n     if (in != 0)\n-      preferred_class = (enum reg_class) targetm.preferred_reload_class (in, rclass);\n+      preferred_class = targetm.preferred_reload_class (in, rclass);\n \n-  /* Output reloads may need analogous treatment, different in detail.  */\n-#ifdef PREFERRED_OUTPUT_RELOAD_CLASS\n+    /* Output reloads may need analogous treatment, different in detail.  */\n     if (out != 0)\n-      preferred_class = PREFERRED_OUTPUT_RELOAD_CLASS (out, preferred_class);\n-#endif\n+      preferred_class\n+\t= targetm.preferred_output_reload_class (out, preferred_class);\n \n     /* Discard what the target said if we cannot do it.  */\n     if (preferred_class != NO_REGS\n \t|| (optional && type == RELOAD_FOR_OUTPUT))\n-      rclass = preferred_class;\n+      rclass = (enum reg_class) preferred_class;\n   }\n \n   /* Make sure we use a class that can handle the actual pseudo\n@@ -1920,7 +1919,7 @@ combine_reloads (void)\n static rtx\n find_dummy_reload (rtx real_in, rtx real_out, rtx *inloc, rtx *outloc,\n \t\t   enum machine_mode inmode, enum machine_mode outmode,\n-\t\t   enum reg_class rclass, int for_real, int earlyclobber)\n+\t\t   reg_class_t rclass, int for_real, int earlyclobber)\n {\n   rtx in = real_in;\n   rtx out = real_out;\n@@ -2588,7 +2587,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n   enum reload_usage { RELOAD_READ, RELOAD_READ_WRITE, RELOAD_WRITE } modified[MAX_RECOG_OPERANDS];\n   int no_input_reloads = 0, no_output_reloads = 0;\n   int n_alternatives;\n-  enum reg_class this_alternative[MAX_RECOG_OPERANDS];\n+  reg_class_t this_alternative[MAX_RECOG_OPERANDS];\n   char this_alternative_match_win[MAX_RECOG_OPERANDS];\n   char this_alternative_win[MAX_RECOG_OPERANDS];\n   char this_alternative_offmemok[MAX_RECOG_OPERANDS];\n@@ -3539,13 +3538,11 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t\t      == NO_REGS)\n \t\t    reject = 600;\n \n-#ifdef PREFERRED_OUTPUT_RELOAD_CLASS\n \t\t  if (operand_type[i] == RELOAD_FOR_OUTPUT\n-\t\t      && (PREFERRED_OUTPUT_RELOAD_CLASS (operand,\n-\t\t\t\t\t\t\tthis_alternative[i])\n+\t\t      && (targetm.preferred_output_reload_class (operand,\n+\t\t\t\t\t\t\t\t this_alternative[i])\n \t\t\t  == NO_REGS))\n \t\t    reject = 600;\n-#endif\n \t\t}\n \n \t      /* We prefer to reload pseudos over reloading other things,\n@@ -3696,7 +3693,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t    {\n \t      goal_alternative_win[i] = this_alternative_win[i];\n \t      goal_alternative_match_win[i] = this_alternative_match_win[i];\n-\t      goal_alternative[i] = (reg_class_t) this_alternative[i];\n+\t      goal_alternative[i] = this_alternative[i];\n \t      goal_alternative_offmemok[i] = this_alternative_offmemok[i];\n \t      goal_alternative_matches[i] = this_alternative_matches[i];\n \t      goal_alternative_earlyclobber[i]\n@@ -3723,7 +3720,7 @@ find_reloads (rtx insn, int replace, int ind_levels, int live_known,\n \t    {\n \t      for (i = 0; i < noperands; i++)\n \t\t{\n-\t\t  goal_alternative[i] = (reg_class_t) this_alternative[i];\n+\t\t  goal_alternative[i] = this_alternative[i];\n \t\t  goal_alternative_win[i] = this_alternative_win[i];\n \t\t  goal_alternative_match_win[i]\n \t\t    = this_alternative_match_win[i];"}, {"sha": "cdfa903cd6e09578ad309c2a8b6e7fa89a3931d3", "filename": "gcc/target.def", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -2042,6 +2042,15 @@ DEFHOOK\n  (rtx x, reg_class_t rclass),\n  default_preferred_reload_class)\n \n+/* Like TARGET_PREFERRED_RELOAD_CLASS, but for output reloads instead of\n+   input reloads.  */\n+DEFHOOK\n+(preferred_output_reload_class,\n+ \"\",\n+ reg_class_t,\n+ (rtx x, reg_class_t rclass),\n+ default_preferred_output_reload_class)\n+\n DEFHOOK\n (class_likely_spilled_p,\n  \"\","}, {"sha": "5948e3fcba45b3e10774f9e4efbfeae751ea1ac4", "filename": "gcc/targhooks.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -1243,6 +1243,19 @@ default_preferred_reload_class (rtx x ATTRIBUTE_UNUSED,\n #endif\n }\n \n+/* The default implementation of TARGET_OUTPUT_PREFERRED_RELOAD_CLASS.  */\n+\n+reg_class_t\n+default_preferred_output_reload_class (rtx x ATTRIBUTE_UNUSED,\n+\t\t\t\t       reg_class_t rclass)\n+{\n+#ifdef PREFERRED_OUTPUT_RELOAD_CLASS\n+  return PREFERRED_OUTPUT_RELOAD_CLASS (x, (enum reg_class) rclass);\n+#else\n+  return rclass;\n+#endif\n+}\n+\n /* The default implementation of TARGET_CLASS_LIKELY_SPILLED_P.  */\n \n bool"}, {"sha": "f59467904ce057bdb145aff6afd6119231980d48", "filename": "gcc/targhooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/abd26bfbf3434e296f7dd412557f925e7ac512c5/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=abd26bfbf3434e296f7dd412557f925e7ac512c5", "patch": "@@ -155,6 +155,7 @@ extern int default_register_move_cost (enum machine_mode, reg_class_t,\n \n extern bool default_profile_before_prologue (void);\n extern reg_class_t default_preferred_reload_class (rtx, reg_class_t);\n+extern reg_class_t default_preferred_output_reload_class (rtx, reg_class_t);\n extern bool default_class_likely_spilled_p (reg_class_t);\n \n extern enum unwind_info_type default_debug_unwind_info (void);"}]}