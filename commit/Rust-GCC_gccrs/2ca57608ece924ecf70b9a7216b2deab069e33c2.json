{"sha": "2ca57608ece924ecf70b9a7216b2deab069e33c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNhNTc2MDhlY2U5MjRlY2Y3MGI5YTcyMTZiMmRlYWIwNjllMzNjMg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-06-27T16:43:28Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-06-27T16:43:28Z"}, "message": "re PR target/40489 (gcc.dg/builtin-unreachable-3.c doesn't work on ia64)\n\n2009-06-27  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR target/40489\n\t* config/ia64/ia64.c (ia64_reorg): Check NULL insn.\n\nFrom-SVN: r149014", "tree": {"sha": "840732f49456407fe8300cf2e0a30a24819d5a6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/840732f49456407fe8300cf2e0a30a24819d5a6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2ca57608ece924ecf70b9a7216b2deab069e33c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca57608ece924ecf70b9a7216b2deab069e33c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ca57608ece924ecf70b9a7216b2deab069e33c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ca57608ece924ecf70b9a7216b2deab069e33c2/comments", "author": null, "committer": null, "parents": [{"sha": "8122ccf175f39e9db97f39d4bd700845bd28f714", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8122ccf175f39e9db97f39d4bd700845bd28f714", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8122ccf175f39e9db97f39d4bd700845bd28f714"}], "stats": {"total": 217, "additions": 113, "deletions": 104}, "files": [{"sha": "5abc31892dc745d001ec4fdc866ff95ed665a8b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 96, "deletions": 91, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca57608ece924ecf70b9a7216b2deab069e33c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca57608ece924ecf70b9a7216b2deab069e33c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2ca57608ece924ecf70b9a7216b2deab069e33c2", "patch": "@@ -1,3 +1,8 @@\n+2009-06-27  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/40489\n+\t* config/ia64/ia64.c (ia64_reorg): Check NULL insn.\n+\n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* tree-ssa-alias.c: Fix unintentional commit.\n@@ -8,43 +13,43 @@\n \n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * df-problems.c (df_set_seen, df_unset_seen): Delete.\n-        (df_rd_local_compute, df_md_local_compute): Inline them.\n+\t* df-problems.c (df_set_seen, df_unset_seen): Delete.\n+\t(df_rd_local_compute, df_md_local_compute): Inline them.\n \n-        (df_md_scratch): New.\n-        (df_md_alloc, df_md_free): Allocate/free it.\n-        (df_md_local_compute): Only include live registers in init.\n-        (df_md_transfer_function): Prune the in-set computed by\n-        the confluence function, and the gen-set too.\n+\t(df_md_scratch): New.\n+\t(df_md_alloc, df_md_free): Allocate/free it.\n+\t(df_md_local_compute): Only include live registers in init.\n+\t(df_md_transfer_function): Prune the in-set computed by\n+\tthe confluence function, and the gen-set too.\n \n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \tPR rtl-optimization/26854\n-        * timevar.def: Remove TV_DF_RU, add TV_DF_MD.\n-        * df-problems.c (df_rd_add_problem): Fix comment.\n-        (df_md_set_bb_info, df_md_free_bb_info, df_md_alloc,\n-        df_md_simulate_artificial_defs_at_top,\n-        df_md_simulate_one_insn, df_md_bb_local_compute_process_def,\n-        df_md_bb_local_compute, df_md_local_compute, df_md_reset,\n-        df_md_transfer_function, df_md_init, df_md_confluence_0,\n-        df_md_confluence_n, df_md_free, df_md_top_dump, df_md_bottom_dump,\n-        problem_MD, df_md_add_problem): New.\n-        * df.h (DF_MD, DF_MD_BB_INFO, struct df_md_bb_info, df_md,\n-        df_md_get_bb_info): New.\n-        DF_LAST_PROBLEM_PLUS1): Adjust.\n-\n-        * Makefile.in (fwprop.o): Include domwalk.h.\n-        * fwprop.c: Include domwalk.h.\n-        (reg_defs, reg_defs_stack): New.\n-        (bitmap_only_bit_between): Remove.\n-        (process_defs): New.\n-        (process_uses): Use reg_defs and local_md instead of\n-        bitmap_only_bit_between and local_rd.\n-        (single_def_use_enter_block): New, from build_single_def_use_links.\n-        (single_def_use_leave_block): New.\n-        (build_single_def_use_links): Remove code moved to\n-        single_def_use_enter_block, invoke domwalk.\n-        (use_killed_between): Adjust comment.\n+\t* timevar.def: Remove TV_DF_RU, add TV_DF_MD.\n+\t* df-problems.c (df_rd_add_problem): Fix comment.\n+\t(df_md_set_bb_info, df_md_free_bb_info, df_md_alloc,\n+\tdf_md_simulate_artificial_defs_at_top,\n+\tdf_md_simulate_one_insn, df_md_bb_local_compute_process_def,\n+\tdf_md_bb_local_compute, df_md_local_compute, df_md_reset,\n+\tdf_md_transfer_function, df_md_init, df_md_confluence_0,\n+\tdf_md_confluence_n, df_md_free, df_md_top_dump, df_md_bottom_dump,\n+\tproblem_MD, df_md_add_problem): New.\n+\t* df.h (DF_MD, DF_MD_BB_INFO, struct df_md_bb_info, df_md,\n+\tdf_md_get_bb_info): New.\n+\tDF_LAST_PROBLEM_PLUS1): Adjust.\n+\n+\t* Makefile.in (fwprop.o): Include domwalk.h.\n+\t* fwprop.c: Include domwalk.h.\n+\t(reg_defs, reg_defs_stack): New.\n+\t(bitmap_only_bit_between): Remove.\n+\t(process_defs): New.\n+\t(process_uses): Use reg_defs and local_md instead of\n+\tbitmap_only_bit_between and local_rd.\n+\t(single_def_use_enter_block): New, from build_single_def_use_links.\n+\t(single_def_use_leave_block): New.\n+\t(build_single_def_use_links): Remove code moved to\n+\tsingle_def_use_enter_block, invoke domwalk.\n+\t(use_killed_between): Adjust comment.\n \n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n@@ -53,65 +58,65 @@\n \n 2009-06-27  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * domwalk.h (struct dom_walk_data): Remove all callbacks except\n-        before_dom_children_before_stmts and after_dom_children_after_stmts.\n-        Rename the two remaining callbacks to just before_dom_children and \n-        after_dom_children. Remove other GIMPLE statement walking bits.\n-        * domwalk.c (walk_dominator_tree): Remove now unsupported features.\n-        * graphite.c: Do not include domwalk.h.\n-        * tree-into-ssa.c (interesting_blocks): New global.\n-        (struct mark_def_sites_global_data): Remove it and names_to_rename.\n-        (mark_def_sites, rewrite_stmt, rewrite_add_phi_arguments,\n-        rewrite_update_stmt, rewrite_update_phi_arguments): Simplify\n-        now that they're not domwalk callbacks.\n-        (rewrite_initialize_block): Rename to...\n-        (rewrite_enter_block): ... this, place after called functions.  Test\n-        interesting_blocks, call rewrite_stmt and rewrite_add_phi_arguments.\n-        (rewrite_finalize_block): Rename to...\n-        (rewrite_leave_block): ... this, place after called functions.\n-        (rewrite_update_init_block): Rename to...\n-        (rewrite_update_enter_block): ... this, place after called functions.\n-        Test interesting_blocks, call rewrite_update_stmt and \n-        rewrite_update_phi_arguments.\n-        (rewrite_update_fini_block): Rename to...\n-        (rewrite_leave_block): ... this, place after called functions.\n-        (rewrite_blocks): Remove last argument, simplify initialization of\n-        walk_data.\n-        (mark_def_sites_initialize_block): Rename to...\n-        (mark_def_sites_block): ... this, call mark_def_sites.\n-        (mark_def_sites_blocks): Remove argument, simplify initialization of\n-        walk_data.\n-        (rewrite_into_ssa): Adjust for interesting_blocks_being a global.\n-        (update_ssa): Likewise.\n-        * tree-ssa-dom.c (optimize_stmt): Simplify now that it's not a domwalk\n-        callback.\n-        (tree_ssa_dominator_optimize): Simplify initialization of walk_data.\n-        (dom_opt_initialize_block): Rename to...\n-        (dom_opt_enter_block): ... this, place after called functions.  Walk\n-        statements here, inline propagate_to_outgoing_edges.\n-        (dom_opt_finalize_block): Rename to...\n-        (dom_opt_leave_block): ... this, place after called functions.\n-        * tree-ssa-dse.c (dse_optimize_stmt): Simplify now that it's not a\n-        domwalk callback.\n-        (dse_enter_block, dse_record_phi): New.\n-        (dse_record_phis): Delete.\n-        (dse_finalize_block): Rename to...\n-        (dse_leave_block): ... this.\n-        (tree_ssa_dse): Simplify initialization of walk_data.\n-        * tree-ssa-loop-im.c (determine_invariantness, move_computations):\n-        Adjust initialization of walk_data.\n-        * tree-ssa-loop-unswitch.c: Do not include domwalk.h.\n-        * tree-ssa-loop-phiopt.c (get_non_trapping):\n-        Adjust initialization of walk_data.\n-        * tree-ssa-loop-threadedge.c: Do not include domwalk.h.\n-        * tree-ssa-uncprop.c (uncprop_into_successor_phis): Simplify now that\n-        it's not a domwalk callback.\n-        (uncprop_initialize_block): Rename to...\n-        (dse_enter_block): ... this, call uncprop_into_successor_phis.\n-        (dse_finalize_block): Rename to...\n-        (dse_leave_block): ... this.\n-        (tree_ssa_uncprop): Simplify initialization of walk_data.\n-        * Makefile.in: Adjust dependencies.\n+\t* domwalk.h (struct dom_walk_data): Remove all callbacks except\n+\tbefore_dom_children_before_stmts and after_dom_children_after_stmts.\n+\tRename the two remaining callbacks to just before_dom_children and \n+\tafter_dom_children. Remove other GIMPLE statement walking bits.\n+\t* domwalk.c (walk_dominator_tree): Remove now unsupported features.\n+\t* graphite.c: Do not include domwalk.h.\n+\t* tree-into-ssa.c (interesting_blocks): New global.\n+\t(struct mark_def_sites_global_data): Remove it and names_to_rename.\n+\t(mark_def_sites, rewrite_stmt, rewrite_add_phi_arguments,\n+\trewrite_update_stmt, rewrite_update_phi_arguments): Simplify\n+\tnow that they're not domwalk callbacks.\n+\t(rewrite_initialize_block): Rename to...\n+\t(rewrite_enter_block): ... this, place after called functions.  Test\n+\tinteresting_blocks, call rewrite_stmt and rewrite_add_phi_arguments.\n+\t(rewrite_finalize_block): Rename to...\n+\t(rewrite_leave_block): ... this, place after called functions.\n+\t(rewrite_update_init_block): Rename to...\n+\t(rewrite_update_enter_block): ... this, place after called functions.\n+\tTest interesting_blocks, call rewrite_update_stmt and \n+\trewrite_update_phi_arguments.\n+\t(rewrite_update_fini_block): Rename to...\n+\t(rewrite_leave_block): ... this, place after called functions.\n+\t(rewrite_blocks): Remove last argument, simplify initialization of\n+\twalk_data.\n+\t(mark_def_sites_initialize_block): Rename to...\n+\t(mark_def_sites_block): ... this, call mark_def_sites.\n+\t(mark_def_sites_blocks): Remove argument, simplify initialization of\n+\twalk_data.\n+\t(rewrite_into_ssa): Adjust for interesting_blocks_being a global.\n+\t(update_ssa): Likewise.\n+\t* tree-ssa-dom.c (optimize_stmt): Simplify now that it's not a domwalk\n+\tcallback.\n+\t(tree_ssa_dominator_optimize): Simplify initialization of walk_data.\n+\t(dom_opt_initialize_block): Rename to...\n+\t(dom_opt_enter_block): ... this, place after called functions.  Walk\n+\tstatements here, inline propagate_to_outgoing_edges.\n+\t(dom_opt_finalize_block): Rename to...\n+\t(dom_opt_leave_block): ... this, place after called functions.\n+\t* tree-ssa-dse.c (dse_optimize_stmt): Simplify now that it's not a\n+\tdomwalk callback.\n+\t(dse_enter_block, dse_record_phi): New.\n+\t(dse_record_phis): Delete.\n+\t(dse_finalize_block): Rename to...\n+\t(dse_leave_block): ... this.\n+\t(tree_ssa_dse): Simplify initialization of walk_data.\n+\t* tree-ssa-loop-im.c (determine_invariantness, move_computations):\n+\tAdjust initialization of walk_data.\n+\t* tree-ssa-loop-unswitch.c: Do not include domwalk.h.\n+\t* tree-ssa-loop-phiopt.c (get_non_trapping):\n+\tAdjust initialization of walk_data.\n+\t* tree-ssa-loop-threadedge.c: Do not include domwalk.h.\n+\t* tree-ssa-uncprop.c (uncprop_into_successor_phis): Simplify now that\n+\tit's not a domwalk callback.\n+\t(uncprop_initialize_block): Rename to...\n+\t(dse_enter_block): ... this, call uncprop_into_successor_phis.\n+\t(dse_finalize_block): Rename to...\n+\t(dse_leave_block): ... this.\n+\t(tree_ssa_uncprop): Simplify initialization of walk_data.\n+\t* Makefile.in: Adjust dependencies.\n \n 2009-06-27  Richard Earnshaw  <rearnsha@arm.com>\n "}, {"sha": "939ed547b61d64893183ca0850886fc4754e2250", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2ca57608ece924ecf70b9a7216b2deab069e33c2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2ca57608ece924ecf70b9a7216b2deab069e33c2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=2ca57608ece924ecf70b9a7216b2deab069e33c2", "patch": "@@ -9239,20 +9239,24 @@ ia64_reorg (void)\n       insn = get_last_insn ();\n       if (! INSN_P (insn))\n         insn = prev_active_insn (insn);\n-      /* Skip over insns that expand to nothing.  */\n-      while (GET_CODE (insn) == INSN && get_attr_empty (insn) == EMPTY_YES)\n-        {\n-\t  if (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n-\t      && XINT (PATTERN (insn), 1) == UNSPECV_INSN_GROUP_BARRIER)\n-\t    saw_stop = 1;\n-\t  insn = prev_active_insn (insn);\n-\t}\n-      if (GET_CODE (insn) == CALL_INSN)\n+      if (insn)\n \t{\n-\t  if (! saw_stop)\n-\t    emit_insn (gen_insn_group_barrier (GEN_INT (3)));\n-\t  emit_insn (gen_break_f ());\n-\t  emit_insn (gen_insn_group_barrier (GEN_INT (3)));\n+\t  /* Skip over insns that expand to nothing.  */\n+\t  while (GET_CODE (insn) == INSN\n+\t\t && get_attr_empty (insn) == EMPTY_YES)\n+\t    {\n+\t      if (GET_CODE (PATTERN (insn)) == UNSPEC_VOLATILE\n+\t\t  && XINT (PATTERN (insn), 1) == UNSPECV_INSN_GROUP_BARRIER)\n+\t\tsaw_stop = 1;\n+\t      insn = prev_active_insn (insn);\n+\t    }\n+\t  if (GET_CODE (insn) == CALL_INSN)\n+\t    {\n+\t      if (! saw_stop)\n+\t\temit_insn (gen_insn_group_barrier (GEN_INT (3)));\n+\t      emit_insn (gen_break_f ());\n+\t      emit_insn (gen_insn_group_barrier (GEN_INT (3)));\n+\t    }\n \t}\n     }\n "}]}