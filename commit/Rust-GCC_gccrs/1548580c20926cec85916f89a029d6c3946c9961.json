{"sha": "1548580c20926cec85916f89a029d6c3946c9961", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0ODU4MGMyMDkyNmNlYzg1OTE2Zjg5YTAyOWQ2YzM5NDZjOTk2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-04-23T22:01:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-04-23T22:01:35Z"}, "message": "re PR rtl-optimization/13985 (ICE in gcc.c-torture/compile/930621-1.c)\n\n\tPR optimization/13985\n\t* cfgloopmanip.c (fix_loop_placements): New prototype.\n\tCall fix_bb_placements on the preheader of loops that have\n\tbeen reparented.\n\t(remove_path): Adjust call to fix_loop_placements.\n\nFrom-SVN: r81112", "tree": {"sha": "23910f8a83c06830e31193db62701766afc5624d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23910f8a83c06830e31193db62701766afc5624d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1548580c20926cec85916f89a029d6c3946c9961", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1548580c20926cec85916f89a029d6c3946c9961", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1548580c20926cec85916f89a029d6c3946c9961", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1548580c20926cec85916f89a029d6c3946c9961/comments", "author": null, "committer": null, "parents": [{"sha": "5a944040b849f4834d7b07f9025e8aee5c6ff7c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a944040b849f4834d7b07f9025e8aee5c6ff7c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a944040b849f4834d7b07f9025e8aee5c6ff7c4"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "9c99787c34cd5d6d0283d2a1d6ee62d926970237", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548580c20926cec85916f89a029d6c3946c9961/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548580c20926cec85916f89a029d6c3946c9961/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1548580c20926cec85916f89a029d6c3946c9961", "patch": "@@ -1,3 +1,11 @@\n+2004-04-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR optimization/13985\n+\t* cfgloopmanip.c (fix_loop_placements): New prototype.\n+\tCall fix_bb_placements on the preheader of loops that have\n+\tbeen reparented.\n+\t(remove_path): Adjust call to fix_loop_placements.\n+\n 2004-04-23  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/darwin7.h: New file.\n@@ -241,7 +249,7 @@\n \tto \"Not triggered by any -O level\" section.  Adjust commentary\n \taccordingly.\n \n-2004-04-20  Anil Paranjpe\u00a0\u00a0\u00a0<anilp1@kpitcummins.com>\n+2004-04-20  Anil Paranjpe <anilp1@kpitcummins.com>\n \n \t* toplev.c (compile_file): Move targetm.asm_out.file_end call to end.\n "}, {"sha": "e3807801d23eae6e3b0c2dd78d2039115925d7c2", "filename": "gcc/cfgloopmanip.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Fcfgloopmanip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Fcfgloopmanip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopmanip.c?ref=1548580c20926cec85916f89a029d6c3946c9961", "patch": "@@ -41,7 +41,7 @@ static bool rpe_enum_p (basic_block, void *);\n static int find_path (edge, basic_block **);\n static bool alp_enum_p (basic_block, void *);\n static void add_loop (struct loops *, struct loop *);\n-static void fix_loop_placements (struct loop *);\n+static void fix_loop_placements (struct loops *, struct loop *);\n static bool fix_bb_placement (struct loops *, basic_block);\n static void fix_bb_placements (struct loops *, basic_block);\n static void place_new_loop (struct loops *, struct loop *);\n@@ -413,7 +413,7 @@ remove_path (struct loops *loops, edge e)\n   /* Fix placements of basic blocks inside loops and the placement of\n      loops in the loop tree.  */\n   fix_bb_placements (loops, from);\n-  fix_loop_placements (from->loop_father);\n+  fix_loop_placements (loops, from->loop_father);\n \n   return true;\n }\n@@ -668,7 +668,7 @@ fix_loop_placement (struct loop *loop)\n    It is used in case when we removed some edges coming out of LOOP, which\n    may cause the right placement of LOOP inside loop tree to change.  */\n static void\n-fix_loop_placements (struct loop *loop)\n+fix_loop_placements (struct loops *loops, struct loop *loop)\n {\n   struct loop *outer;\n \n@@ -677,6 +677,13 @@ fix_loop_placements (struct loop *loop)\n       outer = loop->outer;\n       if (!fix_loop_placement (loop))\n         break;\n+\n+      /* Changing the placement of a loop in the loop tree may alter the\n+\t validity of condition 2) of the description of fix_bb_placement\n+\t for its preheader, because the successor is the header and belongs\n+\t to the loop.  So call fix_bb_placements to fix up the placement\n+\t of the preheader and (possibly) of its predecessors.  */\n+      fix_bb_placements (loops, loop_preheader_edge (loop)->src);\n       loop = outer;\n     }\n }"}, {"sha": "82a4936e89ecdb17cab3660f76bb77c1312d430d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1548580c20926cec85916f89a029d6c3946c9961", "patch": "@@ -1,3 +1,7 @@\n+2004-04-23  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/loop-3.c: New test.\n+\n 2004-04-23  Daniel Jacobowitz  <drow@mvista.com>\n \n \t* gcc.c-torture/execute/simd-5.c: New test."}, {"sha": "ba6fe5563158d3e958b4a5364327eb9f8d76e8ec", "filename": "gcc/testsuite/gcc.dg/loop-3.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Ftestsuite%2Fgcc.dg%2Floop-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1548580c20926cec85916f89a029d6c3946c9961/gcc%2Ftestsuite%2Fgcc.dg%2Floop-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-3.c?ref=1548580c20926cec85916f89a029d6c3946c9961", "patch": "@@ -0,0 +1,45 @@\n+/* PR optimization/13985 */\n+/* Copied from gcc.c-torture/compile/930621-1.c */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+/* { dg-options \"-O3 -mtune=i386\" { target i?86-*-* x86_64-*-* } } */\n+\n+#if defined(STACK_SIZE) && (STACK_SIZE < 65536)\n+# define BYTEMEM_SIZE 10000L\n+#endif\n+\n+#ifndef BYTEMEM_SIZE\n+# define BYTEMEM_SIZE 45000L\n+#endif\n+\n+int bytestart[5000 + 1];\n+unsigned char modtext[400 + 1];\n+unsigned char bytemem[2][BYTEMEM_SIZE + 1];\n+\n+long\n+modlookup (int l)\n+{\n+  signed char c;\n+  long j;\n+  long k;\n+  signed char w;\n+  long p;\n+  while (p != 0)\n+    {\n+      while ((k < bytestart[p + 2]) && (j <= l) && (modtext[j] == bytemem[w][k]))\n+\t{\n+\t  k = k + 1;\n+\t  j = j + 1;\n+\t}\n+      if (k == bytestart[p + 2])\n+\tif (j > l)\n+\t  c = 1;\n+\telse c = 4;\n+      else if (j > l)\n+\tc = 3;\n+      else if (modtext[j] < bytemem[w][k])\n+\tc = 0;\n+      else c = 2;\n+    }\n+}"}]}