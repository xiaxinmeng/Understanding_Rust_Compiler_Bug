{"sha": "88e861655b3e59bc982ba22cd6e2e7348efae866", "node_id": "C_kwDOANBUbNoAKDg4ZTg2MTY1NWIzZTU5YmM5ODJiYTIyY2Q2ZTJlNzM0OGVmYWU4NjY", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T14:49:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-01-04T15:51:53Z"}, "message": "tree-optimization/103800 - sanity check more PHI vectorization\n\nBool pattern detection doesn't really handle PHIs well so we have\nto be prepared for mismatched vector types in more cases than\noriginally thought.\n\n2022-01-04  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/103800\n\t* tree-vect-loop.c (vectorizable_phi): Remove assert and\n\texpand comment.\n\n\t* gcc.dg/vect/bb-slp-pr103800.c: New testcase.", "tree": {"sha": "3ab2468ca51be098bd4a4791facfb02ccf68f725", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ab2468ca51be098bd4a4791facfb02ccf68f725"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e861655b3e59bc982ba22cd6e2e7348efae866", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e861655b3e59bc982ba22cd6e2e7348efae866", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e861655b3e59bc982ba22cd6e2e7348efae866", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e861655b3e59bc982ba22cd6e2e7348efae866/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "790854ea7670f11c14d431c102a49181d2915965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790854ea7670f11c14d431c102a49181d2915965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790854ea7670f11c14d431c102a49181d2915965"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "33c2d2081cf799c5737ba8f11d57e193283c07ea", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-pr103800.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e861655b3e59bc982ba22cd6e2e7348efae866/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr103800.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e861655b3e59bc982ba22cd6e2e7348efae866/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr103800.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-pr103800.c?ref=88e861655b3e59bc982ba22cd6e2e7348efae866", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+int a;\n+long b;\n+extern int c[], d[];\n+extern _Bool e[];\n+void f() {\n+  if (a)\n+    ;\n+  for (;;) {\n+    for (int g = 2; g; g = a)\n+      d[g] = 0;\n+    for (int h = 1; h < 13; h++)\n+      e[h] = b ? (short)c[4 + h - 1] : c[4 + h - 1];\n+  }\n+}"}, {"sha": "77f1cc0f788b72820c2afb4f8964eb6f1e85bbbb", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e861655b3e59bc982ba22cd6e2e7348efae866/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e861655b3e59bc982ba22cd6e2e7348efae866/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=88e861655b3e59bc982ba22cd6e2e7348efae866", "patch": "@@ -7850,17 +7850,15 @@ vectorizable_phi (vec_info *,\n \t\t && !useless_type_conversion_p (vectype,\n \t\t\t\t\t\tSLP_TREE_VECTYPE (child)))\n \t  {\n-\t    /* With bools we can have mask and non-mask precision vectors,\n-\t       while pattern recog is supposed to guarantee consistency here\n-\t       bugs in it can cause mismatches (PR103489 for example).\n+\t    /* With bools we can have mask and non-mask precision vectors\n+\t       or different non-mask precisions.  while pattern recog is\n+\t       supposed to guarantee consistency here bugs in it can cause\n+\t       mismatches (PR103489 and PR103800 for example).\n \t       Deal with them here instead of ICEing later.  */\n \t    if (dump_enabled_p ())\n \t      dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n \t\t\t       \"incompatible vector type setup from \"\n \t\t\t       \"bool pattern detection\\n\");\n-\t    gcc_checking_assert\n-\t      (VECTOR_BOOLEAN_TYPE_P (SLP_TREE_VECTYPE (child))\n-\t       != VECTOR_BOOLEAN_TYPE_P (vectype));\n \t    return false;\n \t  }\n "}]}