{"sha": "9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWY2YWFhNWNjN2YyYWU1N2FhMjdlYThkZGM4YjhhM2IxZDBlMGEzYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T08:35:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T08:35:16Z"}, "message": "[multiple changes]\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Minor fix to Loop_Variant doc (Loop_Entry allowed).\n\t* s-tarest.adb: Minor reformatting.\n\n2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.ads, aspects.adb: Remove aspect Ghost from all relevant\n\ttables.\n\t* einfo.adb: Remove with and use clause for Aspects.\n\t(Is_Ghost_Function): Removed.\n\t(Is_Ghost_Entity): New routine.\n\t(Is_Ghost_Subprogram): New routine.\n\t* einfo.ads: Remove synthesized attribute Is_Ghost_Function\n\talong with its uses in entities.  Add synthesized attributes\n\tIs_Ghost_Entity and Is_Ghost_Subprogram along with uses in related\n\tentities.\n\t(Is_Ghost_Function): Removed.\n\t(Is_Ghost_Entity): New routine.\n\t(Is_Ghost_Subprogram): New routine.\n\t* par-prag.adb: Remove pragma Ghost from the processing machinery.\n\t* repinfo.adb (List_Mechanisms): Add a value for convention Ghost.\n\t* sem_attr.adb (Analyze_Access_Attribute): Update the check\n\tfor ghost subprograms.\n\t* sem_ch4.adb (Analyze_Call): Update the check for calls\n\tto ghost subprograms.\n\t(Check_Ghost_Function_Call): Removed.\n\t(Check_Ghost_Subprogram_Call): New routine.\n\t* sem_ch6.adb (Check_Convention): Rewritten.\n\t(Check_Overriding_Indicator): Remove the check for overriding\n\tghost functions.\n\t(Convention_Of): New routine.\n\t* sem_ch12.adb (Preanalyze_Actuals): Update the check for ghost\n\tgeneric actual subprograms.\n\t* sem_mech.adb (Set_Mechanisms): Add an entry for convention Ghost.\n\t* sem_prag.adb: Remove the value for pragma Ghost from\n\ttable Sig_Flags.\n\t(Analyze_Pragma): Remove the processing for pragma Ghost.\n\t(Process_Convention): Emit an error when a ghost\n\tsubprogram attempts to override.\n\t(Set_Convention_From_Pragma): Emit an error when a ghost subprogram\n\tattempts to override.\n\t* sinfo.ads: Clarify the usage of field Label_Construct.\n\t* snames.adb-tmpl (Get_Convention_Id): Add an entry for\n\tpredefined name Ghost.\n\t(Get_Convention_Name): Add an entry for convention Ghost.\n\t* snames.ads-tmpl: Move predefined name Ghost to the sublist\n\tdenoting conventions. Add convention id Ghost. Remove pragma\n\tid Ghost.\n\n2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch7.adb (Swap_Private_Dependents): Do no recurse on child\n\tunits if within a generic hierarchy.\n\nFrom-SVN: r198275", "tree": {"sha": "875bece5d69b206fb74a8bb9c08d7d0a7c4f9913", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/875bece5d69b206fb74a8bb9c08d7d0a7c4f9913"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/comments", "author": null, "committer": null, "parents": [{"sha": "41c34e94ff45983dbb12e1ee76290e3343bf9e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41c34e94ff45983dbb12e1ee76290e3343bf9e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41c34e94ff45983dbb12e1ee76290e3343bf9e9a"}], "stats": {"total": 322, "additions": 205, "deletions": 117}, "files": [{"sha": "ce32cbc0ebfe3ca24b8408d2251e52b23fac5e40", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -1,3 +1,58 @@\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Minor fix to Loop_Variant doc (Loop_Entry allowed).\n+\t* s-tarest.adb: Minor reformatting.\n+\n+2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.ads, aspects.adb: Remove aspect Ghost from all relevant\n+\ttables.\n+\t* einfo.adb: Remove with and use clause for Aspects.\n+\t(Is_Ghost_Function): Removed.\n+\t(Is_Ghost_Entity): New routine.\n+\t(Is_Ghost_Subprogram): New routine.\n+\t* einfo.ads: Remove synthesized attribute Is_Ghost_Function\n+\talong with its uses in entities.  Add synthesized attributes\n+\tIs_Ghost_Entity and Is_Ghost_Subprogram along with uses in related\n+\tentities.\n+\t(Is_Ghost_Function): Removed.\n+\t(Is_Ghost_Entity): New routine.\n+\t(Is_Ghost_Subprogram): New routine.\n+\t* par-prag.adb: Remove pragma Ghost from the processing machinery.\n+\t* repinfo.adb (List_Mechanisms): Add a value for convention Ghost.\n+\t* sem_attr.adb (Analyze_Access_Attribute): Update the check\n+\tfor ghost subprograms.\n+\t* sem_ch4.adb (Analyze_Call): Update the check for calls\n+\tto ghost subprograms.\n+\t(Check_Ghost_Function_Call): Removed.\n+\t(Check_Ghost_Subprogram_Call): New routine.\n+\t* sem_ch6.adb (Check_Convention): Rewritten.\n+\t(Check_Overriding_Indicator): Remove the check for overriding\n+\tghost functions.\n+\t(Convention_Of): New routine.\n+\t* sem_ch12.adb (Preanalyze_Actuals): Update the check for ghost\n+\tgeneric actual subprograms.\n+\t* sem_mech.adb (Set_Mechanisms): Add an entry for convention Ghost.\n+\t* sem_prag.adb: Remove the value for pragma Ghost from\n+\ttable Sig_Flags.\n+\t(Analyze_Pragma): Remove the processing for pragma Ghost.\n+\t(Process_Convention): Emit an error when a ghost\n+\tsubprogram attempts to override.\n+\t(Set_Convention_From_Pragma): Emit an error when a ghost subprogram\n+\tattempts to override.\n+\t* sinfo.ads: Clarify the usage of field Label_Construct.\n+\t* snames.adb-tmpl (Get_Convention_Id): Add an entry for\n+\tpredefined name Ghost.\n+\t(Get_Convention_Name): Add an entry for convention Ghost.\n+\t* snames.ads-tmpl: Move predefined name Ghost to the sublist\n+\tdenoting conventions. Add convention id Ghost. Remove pragma\n+\tid Ghost.\n+\n+2013-04-25  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch7.adb (Swap_Private_Dependents): Do no recurse on child\n+\tunits if within a generic hierarchy.\n+\n 2013-04-24  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch6.adb (Expand_Actuals): Add a predicate check on an"}, {"sha": "71f74939ca4cc61f1e14f7ca4c5cf9d020d1c477", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -358,7 +358,6 @@ package body Aspects is\n     Aspect_External_Name                => Aspect_External_Name,\n     Aspect_External_Tag                 => Aspect_External_Tag,\n     Aspect_Favor_Top_Level              => Aspect_Favor_Top_Level,\n-    Aspect_Ghost                        => Aspect_Ghost,\n     Aspect_Global                       => Aspect_Global,\n     Aspect_Implicit_Dereference         => Aspect_Implicit_Dereference,\n     Aspect_Import                       => Aspect_Import,"}, {"sha": "c9560b8a69e2c209f13bd377d5fdabf57df577f5", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -160,7 +160,6 @@ package Aspects is\n       Aspect_Discard_Names,\n       Aspect_Export,\n       Aspect_Favor_Top_Level,               -- GNAT\n-      Aspect_Ghost,                         -- GNAT\n       Aspect_Independent,\n       Aspect_Independent_Components,\n       Aspect_Import,\n@@ -215,7 +214,6 @@ package Aspects is\n       Aspect_Dimension                => True,\n       Aspect_Dimension_System         => True,\n       Aspect_Favor_Top_Level          => True,\n-      Aspect_Ghost                    => True,\n       Aspect_Global                   => True,\n       Aspect_Inline_Always            => True,\n       Aspect_Invariant                => True,\n@@ -380,7 +378,6 @@ package Aspects is\n       Aspect_External_Tag                 => Name_External_Tag,\n       Aspect_Export                       => Name_Export,\n       Aspect_Favor_Top_Level              => Name_Favor_Top_Level,\n-      Aspect_Ghost                        => Name_Ghost,\n       Aspect_Global                       => Name_Global,\n       Aspect_Implicit_Dereference         => Name_Implicit_Dereference,\n       Aspect_Import                       => Name_Import,"}, {"sha": "50735a3049ce978298f15d1678aa9d6bd28a4322", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -32,7 +32,6 @@\n pragma Style_Checks (All_Checks);\n --  Turn off subprogram ordering, not used for this unit\n \n-with Aspects; use Aspects;\n with Atree;   use Atree;\n with Namet;   use Namet;\n with Nlists;  use Nlists;\n@@ -6575,27 +6574,41 @@ package body Einfo is\n       return Ekind (Id) = E_Procedure and then Chars (Id) = Name_uFinalizer;\n    end Is_Finalizer;\n \n-   -----------------------\n-   -- Is_Ghost_Function --\n-   -----------------------\n+   ---------------------\n+   -- Is_Ghost_Entity --\n+   ---------------------\n \n-   function Is_Ghost_Function (Id : E) return B is\n+   function Is_Ghost_Entity (Id : E) return B is\n+   begin\n+      if Present (Id) and then Ekind (Id) = E_Variable then\n+         return Convention (Id) = Convention_Ghost;\n+      else\n+         return Is_Ghost_Subprogram (Id);\n+      end if;\n+   end Is_Ghost_Entity;\n+\n+   -------------------------\n+   -- Is_Ghost_Subprogram --\n+   -------------------------\n+\n+   function Is_Ghost_Subprogram (Id : E) return B is\n       Subp_Id : Entity_Id := Id;\n \n    begin\n-      if Present (Subp_Id) and then Ekind (Subp_Id) = E_Function then\n-\n-         --  Handle renamings of functions\n+      if Present (Subp_Id)\n+        and then Ekind_In (Subp_Id, E_Function, E_Procedure)\n+      then\n+         --  Handle subprogram renamings\n \n          if Present (Alias (Subp_Id)) then\n             Subp_Id := Alias (Subp_Id);\n          end if;\n \n-         return Has_Aspect (Subp_Id, Aspect_Ghost);\n+         return Convention (Subp_Id) = Convention_Ghost;\n       end if;\n \n       return False;\n-   end Is_Ghost_Function;\n+   end Is_Ghost_Subprogram;\n \n    --------------------\n    -- Is_Input_State --"}, {"sha": "fd38a1fdea1fbe16634cf192e5de68b755671f2d", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -2314,9 +2314,13 @@ package Einfo is\n --       package, generic function, generic procedure), and False for all\n --       other entities.\n \n---    Is_Ghost_Function (synthesized)\n---       Applies to all entities. Yields True for a function marked by aspect\n---       Ghost.\n+--    Is_Ghost_Entity (synthesized)\n+--       Applies to all entities. Yields True for a subprogram or a whole\n+--       object that has convention Ghost.\n+\n+--    Is_Ghost_Subprogram (synthesized)\n+--       Applies to all entities. Yields True for a subprogram that has a Ghost\n+--       convention.\n \n --    Is_Hidden (Flag57)\n --       Defined in all entities. Set true for all entities declared in the\n@@ -4219,6 +4223,7 @@ package Einfo is\n       --  floating point subtype created by a floating point type declaration.\n \n       E_Floating_Point_Subtype,\n+\n       --  Floating point subtype, created by either a floating point subtype\n       --  or floating point type declaration (in the latter case a floating\n       --  point type is created for the base type, and this is the first\n@@ -5428,7 +5433,8 @@ package Einfo is\n    --    Address_Clause                      (synth)\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n-   --    Is_Ghost_Function                   (synth)    (non-generic case only)\n+   --    Is_Ghost_Entity                     (synth)    (non-generic case only)\n+   --    Is_Ghost_Subprogram                 (synth)    (non-generic case only)\n    --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n    --    Scope_Depth                         (synth)\n@@ -5701,6 +5707,8 @@ package Einfo is\n    --    First_Formal                        (synth)\n    --    First_Formal_With_Extras            (synth)\n    --    Is_Finalizer                        (synth)\n+   --    Is_Ghost_Entity                     (synth)    (non-generic case only)\n+   --    Is_Ghost_Subprogram                 (synth)    (non-generic case only)\n    --    Last_Formal                         (synth)\n    --    Number_Formals                      (synth)\n \n@@ -5907,6 +5915,7 @@ package Einfo is\n    --    Treat_As_Volatile                   (Flag41)\n    --    Address_Clause                      (synth)\n    --    Alignment_Clause                    (synth)\n+   --    Is_Ghost_Entity                     (synth)\n    --    Size_Clause                         (synth)\n \n    --  E_Void\n@@ -6638,7 +6647,8 @@ package Einfo is\n    function Is_Discriminal                      (Id : E) return B;\n    function Is_Dynamic_Scope                    (Id : E) return B;\n    function Is_Finalizer                        (Id : E) return B;\n-   function Is_Ghost_Function                   (Id : E) return B;\n+   function Is_Ghost_Entity                     (Id : E) return B;\n+   function Is_Ghost_Subprogram                 (Id : E) return B;\n    function Is_Input_State                      (Id : E) return B;\n    function Is_Null_State                       (Id : E) return B;\n    function Is_Output_State                     (Id : E) return B;"}, {"sha": "05e938fe68744b93e7d88d2c22f07c5e74d1ef13", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -4112,6 +4112,9 @@ to ignore the check (in which case the pragma has no effect on the program),\n or @code{Disable} in which case the pragma is not even checked for correct\n syntax.\n \n+The @code{Loop_Entry} attribute may be used within the expressions of the\n+@code{Loop_Variant} pragma to refer to values on entry to the loop.\n+\n @node Pragma Machine_Attribute\n @unnumberedsec Pragma Machine_Attribute\n @findex Machine_Attribute"}, {"sha": "4910cd7ef12a450f938ac04eb6033a0df2836d45", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -1163,7 +1163,6 @@ begin\n            Pragma_Fast_Math                      |\n            Pragma_Finalize_Storage_Only          |\n            Pragma_Float_Representation           |\n-           Pragma_Ghost                          |\n            Pragma_Global                         |\n            Pragma_Ident                          |\n            Pragma_Implementation_Defined         |"}, {"sha": "1c0222f0848caf616f59b3f27aa138b23596fd8e", "filename": "gcc/ada/repinfo.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Frepinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Frepinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frepinfo.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -684,6 +684,8 @@ package body Repinfo is\n             Write_Line (\"Intrinsic\");\n          when Convention_Entry                 =>\n             Write_Line (\"Entry\");\n+         when Convention_Ghost                 =>\n+            Write_Line (\"Ghost\");\n          when Convention_Protected             =>\n             Write_Line (\"Protected\");\n          when Convention_Assembler             =>"}, {"sha": "71b116cd06a540e6b9511ab64db75c27a0191b94", "filename": "gcc/ada/s-tarest.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fs-tarest.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fs-tarest.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tarest.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -268,7 +268,7 @@ package body System.Tasking.Restricted.Stages is\n             Save_Occurrence (EO, E);\n       end;\n \n-      --  Look for a fall-back handler.\n+      --  Look for a fall-back handler\n \n       --  This package is part of the restricted run time which supports\n       --  neither task hierarchies (No_Task_Hierarchy) nor specific task"}, {"sha": "59c83bbdd06482cbfd2799360b6be31080c5a907", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -602,9 +602,9 @@ package body Sem_Attr is\n             elsif Aname = Name_Unchecked_Access then\n                Error_Attr (\"attribute% cannot be applied to a subprogram\", P);\n \n-            elsif Is_Ghost_Function (Entity (P)) then\n+            elsif Is_Ghost_Subprogram (Entity (P)) then\n                Error_Attr_P\n-                 (\"prefix of % attribute cannot be a ghost function\");\n+                 (\"prefix of % attribute cannot be a ghost subprogram\");\n             end if;\n \n             --  Issue an error if the prefix denotes an eliminated subprogram"}, {"sha": "5e1da8a2aaf64a49d0a4eb5dfa84c510ac17f4f7", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -12401,13 +12401,13 @@ package body Sem_Ch12 is\n                Analyze (Act);\n             end if;\n \n-            --  Ensure that a ghost function does not act as generic actual\n+            --  Ensure that a ghost subprogram does not act as generic actual\n \n             if Is_Entity_Name (Act)\n-              and then Is_Ghost_Function (Entity (Act))\n+              and then Is_Ghost_Subprogram (Entity (Act))\n             then\n                Error_Msg_N\n-                 (\"ghost function & cannot act as generic actual\", Act);\n+                 (\"ghost subprogram & cannot act as generic actual\", Act);\n                Abandon_Instantiation (Act);\n \n             elsif Errs /= Serious_Errors_Detected then"}, {"sha": "eb3659768c8ff8ceacb7ee82fca915c731137fe3", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -854,10 +854,10 @@ package body Sem_Ch4 is\n       --  Flag indicates whether an interpretation of the prefix is a\n       --  parameterless call that returns an access_to_subprogram.\n \n-      procedure Check_Ghost_Function_Call;\n-      --  Verify the legality of a call to a ghost function. Such calls can\n+      procedure Check_Ghost_Subprogram_Call;\n+      --  Verify the legality of a call to a ghost subprogram. Such calls can\n       --  appear only in assertion expressions except subtype predicates or\n-      --  from within another ghost function.\n+      --  from within another ghost subprogram.\n \n       procedure Check_Mixed_Parameter_And_Named_Associations;\n       --  Check that parameter and named associations are not mixed. This is\n@@ -873,15 +873,15 @@ package body Sem_Ch4 is\n       procedure No_Interpretation;\n       --  Output error message when no valid interpretation exists\n \n-      -------------------------------\n-      -- Check_Ghost_Function_Call --\n-      -------------------------------\n+      ---------------------------------\n+      -- Check_Ghost_Subprogram_Call --\n+      ---------------------------------\n \n-      procedure Check_Ghost_Function_Call is\n+      procedure Check_Ghost_Subprogram_Call is\n          S : Entity_Id;\n \n       begin\n-         --  The ghost function appears inside an assertion expression\n+         --  The ghost subprogram appears inside an assertion expression\n \n          if In_Assertion_Expression (N) then\n             return;\n@@ -890,9 +890,9 @@ package body Sem_Ch4 is\n             S := Current_Scope;\n             while Present (S) and then S /= Standard_Standard loop\n \n-               --  The call appears inside another ghost function\n+               --  The call appears inside another ghost subprogram\n \n-               if Is_Ghost_Function (S) then\n+               if Is_Ghost_Subprogram (S) then\n                   return;\n                end if;\n \n@@ -901,9 +901,9 @@ package body Sem_Ch4 is\n          end if;\n \n          Error_Msg_N\n-           (\"call to ghost function must appear in assertion expression or \"\n-            & \"another ghost function\", N);\n-      end Check_Ghost_Function_Call;\n+           (\"call to ghost subprogram must appear in assertion expression or \"\n+            & \"another ghost subprogram\", N);\n+      end Check_Ghost_Subprogram_Call;\n \n       --------------------------------------------------\n       -- Check_Mixed_Parameter_And_Named_Associations --\n@@ -1275,11 +1275,11 @@ package body Sem_Ch4 is\n          End_Interp_List;\n       end if;\n \n-      --  A call to a ghost function is allowed only in assertion expressions,\n-      --  excluding subtype predicates, or from within another ghost function.\n+      --  A call to a ghost subprogram is allowed only in assertion expressions\n+      --  excluding subtype predicates or from within another ghost subprogram.\n \n-      if Is_Ghost_Function (Get_Subprogram_Entity (N)) then\n-         Check_Ghost_Function_Call;\n+      if Is_Ghost_Subprogram (Get_Subprogram_Entity (N)) then\n+         Check_Ghost_Subprogram_Call;\n       end if;\n    end Analyze_Call;\n "}, {"sha": "2ca1310754c74c5f9d5121ae37e155d52d26cee8", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -6292,26 +6292,51 @@ package body Sem_Ch6 is\n       ----------------------\n \n       procedure Check_Convention (Op : Entity_Id) is\n+         function Convention_Of (Id : Entity_Id) return Convention_Id;\n+         --  Given an entity, return its convention. The function treats Ghost\n+         --  as convention Ada because the two have the same dynamic semantics.\n+\n+         -------------------\n+         -- Convention_Of --\n+         -------------------\n+\n+         function Convention_Of (Id : Entity_Id) return Convention_Id is\n+            Conv : constant Convention_Id := Convention (Id);\n+         begin\n+            if Conv = Convention_Ghost then\n+               return Convention_Ada;\n+            else\n+               return Conv;\n+            end if;\n+         end Convention_Of;\n+\n+         --  Local variables\n+\n+         Op_Conv         : constant Convention_Id := Convention_Of (Op);\n+         Iface_Conv      : Convention_Id;\n          Iface_Elmt      : Elmt_Id;\n          Iface_Prim_Elmt : Elmt_Id;\n          Iface_Prim      : Entity_Id;\n \n+      --  Start of processing for Check_Convention\n+\n       begin\n          Iface_Elmt := First_Elmt (Ifaces_List);\n          while Present (Iface_Elmt) loop\n             Iface_Prim_Elmt :=\n-               First_Elmt (Primitive_Operations (Node (Iface_Elmt)));\n+              First_Elmt (Primitive_Operations (Node (Iface_Elmt)));\n             while Present (Iface_Prim_Elmt) loop\n                Iface_Prim := Node (Iface_Prim_Elmt);\n+               Iface_Conv := Convention_Of (Iface_Prim);\n \n                if Is_Interface_Conformant (Typ, Iface_Prim, Op)\n-                 and then Convention (Iface_Prim) /= Convention (Op)\n+                 and then Iface_Conv /= Op_Conv\n                then\n                   Error_Msg_N\n                     (\"inconsistent conventions in primitive operations\", Typ);\n \n                   Error_Msg_Name_1 := Chars (Op);\n-                  Error_Msg_Name_2 := Get_Convention_Name (Convention (Op));\n+                  Error_Msg_Name_2 := Get_Convention_Name (Op_Conv);\n                   Error_Msg_Sloc   := Sloc (Op);\n \n                   if Comes_From_Source (Op) or else No (Alias (Op)) then\n@@ -6331,9 +6356,8 @@ package body Sem_Ch6 is\n                   end if;\n \n                   Error_Msg_Name_1 := Chars (Op);\n-                  Error_Msg_Name_2 :=\n-                    Get_Convention_Name (Convention (Iface_Prim));\n-                  Error_Msg_Sloc := Sloc (Iface_Prim);\n+                  Error_Msg_Name_2 := Get_Convention_Name (Iface_Conv);\n+                  Error_Msg_Sloc   := Sloc (Iface_Prim);\n                   Error_Msg_N\n                     (\"\\\\overridden operation % with \" &\n                      \"convention % defined #\", Typ);\n@@ -6829,11 +6853,6 @@ package body Sem_Ch6 is\n                else\n                   Set_Overridden_Operation (Subp, Overridden_Subp);\n                end if;\n-\n-            --  Ensure that a ghost function is not overriding another routine\n-\n-            elsif Is_Ghost_Function (Subp) then\n-               Error_Msg_N (\"ghost function & cannot be overriding\", Subp);\n             end if;\n          end if;\n \n@@ -12245,6 +12264,7 @@ package body Sem_Ch6 is\n \n       if Ekind (Designator) /= E_Procedure\n         and then Expander_Active\n+        --  Check of Assertions_Enabled is certainly wrong ???\n         and then Assertions_Enabled\n       then\n          Func_Typ := Etype (Designator);\n@@ -12286,6 +12306,7 @@ package body Sem_Ch6 is\n       --  IN OUT args.\n \n       if Expander_Active and then Assertions_Enabled then\n+         --  Check of Assertions_Enabled is certainly wrong ???\n          Formal := First_Formal (Designator);\n          while Present (Formal) loop\n             if Ekind (Formal) /= E_In_Parameter"}, {"sha": "fa80d682505525013d7c1abf98296231b60c9e72", "filename": "gcc/ada/sem_ch7.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch7.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -1860,10 +1860,14 @@ package body Sem_Ch7 is\n                Set_Is_Potentially_Use_Visible\n                  (Priv, Is_Potentially_Use_Visible (Node (Priv_Elmt)));\n \n-               --  Within a child unit, recurse\n+               --  Within a child unit, recurse, except in generic child\n+               --  unit, which (unfortunately) handle private_dependents\n+               --  separately.\n \n                if Is_Priv\n                  and then Is_Child_Unit (Cunit_Entity (Current_Sem_Unit))\n+                 and then not Is_Empty_Elmt_List (Deps)\n+                 and then not Inside_A_Generic\n                then\n                   Swap_Private_Dependents (Deps);\n                end if;"}, {"sha": "f71a477bf2c05d7278054b6d9648d8162181e313", "filename": "gcc/ada/sem_mech.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_mech.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_mech.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_mech.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -300,12 +300,14 @@ package body Sem_Mech is\n                -- Ada --\n                ---------\n \n-               --  Note: all RM defined conventions are treated the same\n-               --  from the point of view of parameter passing mechanism\n+               --  Note: all RM defined conventions are treated the same from\n+               --  the point of view of parameter passing mechanism. Convention\n+               --  Ghost has the same dynamic semantics as convention Ada.\n \n                when Convention_Ada       |\n                     Convention_Intrinsic |\n                     Convention_Entry     |\n+                    Convention_Ghost     |\n                     Convention_Protected |\n                     Convention_Stubbed   =>\n \n@@ -486,7 +488,6 @@ package body Sem_Mech is\n                   else\n                      Set_Mechanism (Formal, By_Reference);\n                   end if;\n-\n             end case;\n          end if;\n "}, {"sha": "040d7f81f6faddb74f5d8a376dc22ef79178e659", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 30, "deletions": 48, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -4975,9 +4975,16 @@ package body Sem_Prag is\n               and then Present (Overridden_Operation (E))\n               and then C /= Convention (Overridden_Operation (E))\n             then\n-               Error_Pragma_Arg\n-                 (\"cannot change convention for overridden dispatching \"\n-                  & \"operation\", Arg1);\n+               --  An attempt to override a subprogram with a ghost subprogram\n+               --  appears as a mismatch in conventions.\n+\n+               if C = Convention_Ghost then\n+                  Error_Msg_N (\"ghost subprogram & cannot be overriding\", E);\n+               else\n+                  Error_Pragma_Arg\n+                    (\"cannot change convention for overridden dispatching \"\n+                     & \"operation\", Arg1);\n+               end if;\n             end if;\n \n             --  Special checks for Convention_Stdcall\n@@ -5136,14 +5143,14 @@ package body Sem_Prag is\n          if C = Convention_Ada_Pass_By_Copy then\n             if not Is_First_Subtype (E) then\n                Error_Pragma_Arg\n-                 (\"convention `Ada_Pass_By_Copy` only \"\n-                  & \"allowed for types\", Arg2);\n+                 (\"convention `Ada_Pass_By_Copy` only allowed for types\",\n+                  Arg2);\n             end if;\n \n             if Is_By_Reference_Type (E) then\n                Error_Pragma_Arg\n-                 (\"convention `Ada_Pass_By_Copy` not allowed for \"\n-                  & \"by-reference type\", Arg1);\n+                 (\"convention `Ada_Pass_By_Copy` not allowed for by-reference \"\n+                  & \"type\", Arg1);\n             end if;\n          end if;\n \n@@ -5152,17 +5159,25 @@ package body Sem_Prag is\n          if C = Convention_Ada_Pass_By_Reference then\n             if not Is_First_Subtype (E) then\n                Error_Pragma_Arg\n-                 (\"convention `Ada_Pass_By_Reference` only \"\n-                  & \"allowed for types\", Arg2);\n+                 (\"convention `Ada_Pass_By_Reference` only allowed for types\",\n+                  Arg2);\n             end if;\n \n             if Is_By_Copy_Type (E) then\n                Error_Pragma_Arg\n-                 (\"convention `Ada_Pass_By_Reference` not allowed for \"\n-                  & \"by-copy type\", Arg1);\n+                 (\"convention `Ada_Pass_By_Reference` not allowed for by-copy \"\n+                  & \"type\", Arg1);\n             end if;\n          end if;\n \n+         --  Ghost special checking\n+\n+         if Is_Ghost_Subprogram (E)\n+           and then Present (Overridden_Operation (E))\n+         then\n+            Error_Msg_N (\"ghost subprogram & cannot be overriding\", E);\n+         end if;\n+\n          --  Go to renamed subprogram if present, since convention applies to\n          --  the actual renamed entity, not to the renaming entity. If the\n          --  subprogram is inherited, go to parent subprogram.\n@@ -5299,8 +5314,8 @@ package body Sem_Prag is\n                Generate_Reference (E, Id, 'i');\n             end if;\n \n-            --  If the pragma comes from from an aspect, it only applies\n-            --   to the given entity, not its homonyms.\n+            --  If the pragma comes from from an aspect, it only applies to the\n+            --  given entity, not its homonyms.\n \n             if From_Aspect_Specification (N) then\n                return;\n@@ -11842,39 +11857,6 @@ package body Sem_Prag is\n             end if;\n          end Float_Representation;\n \n-         -----------\n-         -- Ghost --\n-         -----------\n-\n-         --  pragma GHOST (function_LOCAL_NAME);\n-\n-         when Pragma_Ghost => Ghost : declare\n-            Subp    : Node_Id;\n-            Subp_Id : Entity_Id;\n-\n-         begin\n-            GNAT_Pragma;\n-            S14_Pragma;\n-            Check_Arg_Count (1);\n-            Check_Arg_Is_Local_Name (Arg1);\n-\n-            --  Ensure the proper placement of the pragma. Ghost must be\n-            --  associated with a subprogram declaration.\n-\n-            Subp := Parent (Corresponding_Aspect (N));\n-\n-            if Nkind (Subp) /= N_Subprogram_Declaration then\n-               Pragma_Misplaced;\n-               return;\n-            end if;\n-\n-            Subp_Id := Defining_Unit_Name (Specification (Subp));\n-\n-            if Ekind (Subp_Id) /= E_Function then\n-               Error_Pragma (\"pragma % must be applied to a function\");\n-            end if;\n-         end Ghost;\n-\n          ------------\n          -- Global --\n          ------------\n@@ -13120,6 +13102,7 @@ package body Sem_Prag is\n             --  before the body is built (e.g. within an expression function).\n \n             PDecl := Build_Invariant_Procedure_Declaration (Typ);\n+\n             Insert_After (N, PDecl);\n             Analyze (PDecl);\n \n@@ -17993,7 +17976,7 @@ package body Sem_Prag is\n                      Set_Is_Ignored (N, True);\n \n                   when Name_Disable =>\n-                     Set_Is_Ignored (N, True);\n+                     Set_Is_Ignored  (N, True);\n                      Set_Is_Disabled (N, True);\n \n                   when others =>\n@@ -18277,7 +18260,6 @@ package body Sem_Prag is\n       Pragma_Fast_Math                      => -1,\n       Pragma_Finalize_Storage_Only          =>  0,\n       Pragma_Float_Representation           =>  0,\n-      Pragma_Ghost                          =>  0,\n       Pragma_Global                         => -1,\n       Pragma_Ident                          => -1,\n       Pragma_Implementation_Defined         => -1,"}, {"sha": "830a2afb0d68cd17cac9317496330aa6890629f8", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -1414,10 +1414,10 @@ package Sinfo is\n    --  Label_Construct (Node2-Sem)\n    --    Used in an N_Implicit_Label_Declaration node. Refers to an N_Label,\n    --    N_Block_Statement or N_Loop_Statement node to which the label\n-   --    declaration applies. This is not currently used in the compiler\n-   --    itself, but it is useful in the implementation of ASIS queries.\n-   --    This field is left empty for the special labels generated as part\n-   --    of expanding raise statements with a local exception handler.\n+   --    declaration applies. This attribute is used both in the compiler and\n+   --    in the implementation of ASIS queries. The field is left empty for the\n+   --    special labels generated as part of expanding raise statements with a\n+   --    local exception handler.\n \n    --  Library_Unit (Node4-Sem)\n    --    In a stub node, Library_Unit points to the compilation unit node of"}, {"sha": "f79e48119012d410cf410e18aff5491ad8ccb1f5", "filename": "gcc/ada/snames.adb-tmpl", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsnames.adb-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsnames.adb-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.adb-tmpl?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -155,6 +155,7 @@ package body Snames is\n          when Name_COBOL                 => return Convention_COBOL;\n          when Name_CPP                   => return Convention_CPP;\n          when Name_Fortran               => return Convention_Fortran;\n+         when Name_Ghost                 => return Convention_Ghost;\n          when Name_Intrinsic             => return Convention_Intrinsic;\n          when Name_Java                  => return Convention_Java;\n          when Name_Stdcall               => return Convention_Stdcall;\n@@ -192,6 +193,7 @@ package body Snames is\n          when Convention_CPP                   => return Name_CPP;\n          when Convention_Entry                 => return Name_Entry;\n          when Convention_Fortran               => return Name_Fortran;\n+         when Convention_Ghost                 => return Name_Ghost;\n          when Convention_Intrinsic             => return Name_Intrinsic;\n          when Convention_Java                  => return Name_Java;\n          when Convention_Protected             => return Name_Protected;\n@@ -293,14 +295,14 @@ package body Snames is\n          exit when Preset_Names (P_Index) = '#';\n       end loop;\n \n-      --  Make sure that number of names in standard table is correct. If\n-      --  this check fails, run utility program XSNAMES to construct a new\n-      --  properly matching version of the body.\n+      --  Make sure that number of names in standard table is correct. If this\n+      --  check fails, run utility program XSNAMES to construct a new properly\n+      --  matching version of the body.\n \n       pragma Assert (Discard_Name = Last_Predefined_Name);\n \n-      --  Initialize the convention identifiers table with the standard\n-      --  set of synonyms that we recognize for conventions.\n+      --  Initialize the convention identifiers table with the standard set of\n+      --  synonyms that we recognize for conventions.\n \n       Convention_Identifiers.Init;\n "}, {"sha": "2ddae4d052b30062accb981b0ce014426234568d", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=9f6aaa5cc7f2ae57aa27ea8ddc8b8a3b1d0e0a3c", "patch": "@@ -499,7 +499,6 @@ package Snames is\n    Name_Export_Valued_Procedure        : constant Name_Id := N + $; -- GNAT\n    Name_External                       : constant Name_Id := N + $; -- GNAT\n    Name_Finalize_Storage_Only          : constant Name_Id := N + $; -- GNAT\n-   Name_Ghost                          : constant Name_Id := N + $; -- GNAT\n    Name_Global                         : constant Name_Id := N + $; -- GNAT\n    Name_Ident                          : constant Name_Id := N + $; -- VMS\n    Name_Implementation_Defined         : constant Name_Id := N + $; -- GNAT\n@@ -642,6 +641,7 @@ package Snames is\n    Name_COBOL                          : constant Name_Id := N + $;\n    Name_CPP                            : constant Name_Id := N + $;\n    Name_Fortran                        : constant Name_Id := N + $;\n+   Name_Ghost                          : constant Name_Id := N + $;\n    Name_Intrinsic                      : constant Name_Id := N + $;\n    Name_Java                           : constant Name_Id := N + $;\n    Name_Stdcall                        : constant Name_Id := N + $;\n@@ -1630,6 +1630,7 @@ package Snames is\n       Convention_Ada,\n       Convention_Intrinsic,\n       Convention_Entry,\n+      Convention_Ghost,\n       Convention_Protected,\n       Convention_Stubbed,\n \n@@ -1795,7 +1796,6 @@ package Snames is\n       Pragma_Export_Valued_Procedure,\n       Pragma_External,\n       Pragma_Finalize_Storage_Only,\n-      Pragma_Ghost,\n       Pragma_Global,\n       Pragma_Ident,\n       Pragma_Implementation_Defined,"}]}