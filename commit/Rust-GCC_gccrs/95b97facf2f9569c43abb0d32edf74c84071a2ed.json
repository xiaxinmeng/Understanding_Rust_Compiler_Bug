{"sha": "95b97facf2f9569c43abb0d32edf74c84071a2ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTViOTdmYWNmMmY5NTY5YzQzYWJiMGQzMmVkZjc0Yzg0MDcxYTJlZA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-07-22T10:47:26Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-07-22T10:47:26Z"}, "message": "predicates.md (shiftable_operator_strict_it): New predicate.\n\n2013-07-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* config/arm/predicates.md (shiftable_operator_strict_it):\n\tNew predicate.\n\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si):\n\tDisable cond_exec version for arm_restrict_it.\n\t(thumb2_smaxsi3): Convert to generate cond_exec.\n\t(thumb2_sminsi3): Likewise.\n\t(thumb32_umaxsi3): Likewise.\n\t(thumb2_uminsi3): Likewise.\n\t(thumb2_abssi2): Adjust constraints for arm_restrict_it.\n\t(thumb2_neg_abssi2): Likewise.\n\t(thumb2_mov_scc): Add alternative for 16-bit encoding.\n\t(thumb2_movsicc_insn): Adjust alternatives.\n\t(thumb2_mov_negscc): Disable for arm_restrict_it.\n\t(thumb2_mov_negscc_strict_it): New pattern.\n\t(thumb2_mov_notscc_strict_it): New pattern.\n\t(thumb2_mov_notscc): Disable for arm_restrict_it.\n\t(thumb2_ior_scc): Likewise.\n\t(thumb2_ior_scc_strict_it): New pattern.\n\t(thumb2_cond_move): Adjust for arm_restrict_it.\n\t(thumb2_cond_arith): Disable for arm_restrict_it.\n\t(thumb2_cond_arith_strict_it): New pattern.\n\t(thumb2_cond_sub): Adjust for arm_restrict_it.\n\t(thumb2_movcond): Likewise.\n\t(thumb2_extendqisi_v6): Disable cond_exec variant for arm_restrict_it.\n\t(thumb2_zero_extendhisi2_v6): Likewise.\n\t(thumb2_zero_extendqisi2_v6): Likewise.\n\t(orsi_notsi_si): Likewise.\n\t(orsi_not_shiftsi_si): Likewise.\n\nFrom-SVN: r201122", "tree": {"sha": "f72bb2d49b5ba1af7f1591058fceda16849a74fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f72bb2d49b5ba1af7f1591058fceda16849a74fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95b97facf2f9569c43abb0d32edf74c84071a2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b97facf2f9569c43abb0d32edf74c84071a2ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95b97facf2f9569c43abb0d32edf74c84071a2ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95b97facf2f9569c43abb0d32edf74c84071a2ed/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5a6ef827fe40c01e6284b5bbf3c2e987987445c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5a6ef827fe40c01e6284b5bbf3c2e987987445c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5a6ef827fe40c01e6284b5bbf3c2e987987445c"}], "stats": {"total": 371, "additions": 281, "deletions": 90}, "files": [{"sha": "b07b09a3cdcf45b7ffaa8feb6bbcd6eec70e0395", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95b97facf2f9569c43abb0d32edf74c84071a2ed", "patch": "@@ -1,3 +1,34 @@\n+2013-07-22  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/predicates.md (shiftable_operator_strict_it):\n+\tNew predicate.\n+\t* config/arm/thumb2.md (thumb_andsi_not_shiftsi_si):\n+\tDisable cond_exec version for arm_restrict_it.\n+\t(thumb2_smaxsi3): Convert to generate cond_exec.\n+\t(thumb2_sminsi3): Likewise.\n+\t(thumb32_umaxsi3): Likewise.\n+\t(thumb2_uminsi3): Likewise.\n+\t(thumb2_abssi2): Adjust constraints for arm_restrict_it.\n+\t(thumb2_neg_abssi2): Likewise.\n+\t(thumb2_mov_scc): Add alternative for 16-bit encoding.\n+\t(thumb2_movsicc_insn): Adjust alternatives.\n+\t(thumb2_mov_negscc): Disable for arm_restrict_it.\n+\t(thumb2_mov_negscc_strict_it): New pattern.\n+\t(thumb2_mov_notscc_strict_it): New pattern.\n+\t(thumb2_mov_notscc): Disable for arm_restrict_it.\n+\t(thumb2_ior_scc): Likewise.\n+\t(thumb2_ior_scc_strict_it): New pattern.\n+\t(thumb2_cond_move): Adjust for arm_restrict_it.\n+\t(thumb2_cond_arith): Disable for arm_restrict_it.\n+\t(thumb2_cond_arith_strict_it): New pattern.\n+\t(thumb2_cond_sub): Adjust for arm_restrict_it.\n+\t(thumb2_movcond): Likewise.\n+\t(thumb2_extendqisi_v6): Disable cond_exec variant for arm_restrict_it.\n+\t(thumb2_zero_extendhisi2_v6): Likewise.\n+\t(thumb2_zero_extendqisi2_v6): Likewise.\n+\t(orsi_notsi_si): Likewise.\n+\t(orsi_not_shiftsi_si): Likewise.\n+\n 2013-07-22  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_out_xload): No SBIS around LPM so that"}, {"sha": "29e1e5c827618d13e9e755fe69d5f7253e0cf1eb", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=95b97facf2f9569c43abb0d32edf74c84071a2ed", "patch": "@@ -246,6 +246,10 @@\n   (and (match_code \"plus,minus,ior,xor,and\")\n        (match_test \"mode == GET_MODE (op)\")))\n \n+(define_special_predicate \"shiftable_operator_strict_it\"\n+  (and (match_code \"plus,and\")\n+       (match_test \"mode == GET_MODE (op)\")))\n+\n ;; True for logical binary operators.\n (define_special_predicate \"logical_binary_operator\"\n   (and (match_code \"ior,xor,and\")"}, {"sha": "8b184a80c2ea3d2c0b596924364a4ca6aea0f686", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 246, "deletions": 90, "changes": 336, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95b97facf2f9569c43abb0d32edf74c84071a2ed/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=95b97facf2f9569c43abb0d32edf74c84071a2ed", "patch": "@@ -34,96 +34,91 @@\n   \"TARGET_THUMB2\"\n   \"bic%?\\\\t%0, %1, %2%S4\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"type\" \"arlo_shift\")]\n )\n \n+;; We use the '0' constraint for operand 1 because reload should\n+;; be smart enough to generate an appropriate move for the r/r/r case.\n (define_insn_and_split \"*thumb2_smaxsi3\"\n-  [(set (match_operand:SI          0 \"s_register_operand\" \"=r,r,r\")\n-\t(smax:SI (match_operand:SI 1 \"s_register_operand\"  \"0,r,?r\")\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\"    \"rI,0,rI\")))\n+  [(set (match_operand:SI          0 \"s_register_operand\" \"=r,l,r\")\n+\t(smax:SI (match_operand:SI 1 \"s_register_operand\" \"%0,0,0\")\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\"    \"r,Py,I\")))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2\"\n-  \"#\"\n-  ; cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %2\n-  ; cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %1\n-  ; cmp\\\\t%1, %2\\;ite\\\\tge\\;movge\\\\t%0, %1\\;movlt\\\\t%0, %2\n-  \"TARGET_THUMB2\"\n+   \"TARGET_THUMB2\"\n+   \"#\"\n+   ; cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %2\n+  \"TARGET_THUMB2 && reload_completed\"\n   [(set (reg:CC CC_REGNUM)\n         (compare:CC (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-        (if_then_else:SI (ge:SI (reg:CC CC_REGNUM) (const_int 0))\n-                         (match_dup 1)\n-                         (match_dup 2)))]\n+   (cond_exec (lt:SI (reg:CC CC_REGNUM) (const_int 0))\n+              (set (match_dup 0)\n+                   (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,10,14\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"length\" \"6,6,10\")]\n )\n \n (define_insn_and_split \"*thumb2_sminsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(smin:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,l,r\")\n+\t(smin:SI (match_operand:SI 1 \"s_register_operand\" \"%0,0,0\")\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"r,Py,I\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"#\"\n-   ; cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %2\n-   ; cmp\\\\t%1, %2\\;it\\\\tlt\\;movlt\\\\t%0, %1\n-   ; cmp\\\\t%1, %2\\;ite\\\\tlt\\;movlt\\\\t%0, %1\\;movge\\\\t%0, %2\"\n-  \"TARGET_THUMB2\"\n+  ; cmp\\\\t%1, %2\\;it\\\\tge\\;movge\\\\t%0, %2\n+  \"TARGET_THUMB2 && reload_completed\"\n   [(set (reg:CC CC_REGNUM)\n         (compare:CC (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-        (if_then_else:SI (lt:SI (reg:CC CC_REGNUM) (const_int 0))\n-                         (match_dup 1)\n-                         (match_dup 2)))]\n+   (cond_exec (ge:SI (reg:CC CC_REGNUM) (const_int 0))\n+              (set (match_dup 0)\n+                   (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,10,14\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"length\" \"6,6,10\")]\n )\n \n (define_insn_and_split \"*thumb32_umaxsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(umax:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n-   (clobber (reg:CC CC_REGNUM))]\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,l,r\")\n+\t(umax:SI (match_operand:SI 1 \"s_register_operand\" \"%0,0,0\")\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"r,Py,I\")))\n+  (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"#\"\n-   ; cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %2\n-   ; cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %1\n-   ; cmp\\\\t%1, %2\\;ite\\\\tcs\\;movcs\\\\t%0, %1\\;movcc\\\\t%0, %2\"\n-  \"TARGET_THUMB2\"\n+  ; cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %2\n+  \"TARGET_THUMB2 && reload_completed\"\n   [(set (reg:CC CC_REGNUM)\n         (compare:CC (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-        (if_then_else:SI (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n-                         (match_dup 1)\n-                         (match_dup 2)))]\n+   (cond_exec (ltu:SI (reg:CC CC_REGNUM) (const_int 0))\n+              (set (match_dup 0)\n+                   (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,10,14\")]\n+   (set_attr \"length\" \"6,6,10\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")]\n )\n \n (define_insn_and_split \"*thumb2_uminsi3\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n-\t(umin:SI (match_operand:SI 1 \"s_register_operand\" \"0,r,?r\")\n-\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,l,r\")\n+\t(umin:SI (match_operand:SI 1 \"s_register_operand\" \"%0,0,0\")\n+\t\t (match_operand:SI 2 \"arm_rhs_operand\" \"r,Py,I\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"#\"\n-   ; cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %2\n-   ; cmp\\\\t%1, %2\\;it\\\\tcc\\;movcc\\\\t%0, %1\n-   ; cmp\\\\t%1, %2\\;ite\\\\tcc\\;movcc\\\\t%0, %1\\;movcs\\\\t%0, %2\"\n-  \"TARGET_THUMB2\"\n+  ; cmp\\\\t%1, %2\\;it\\\\tcs\\;movcs\\\\t%0, %2\n+  \"TARGET_THUMB2 && reload_completed\"\n   [(set (reg:CC CC_REGNUM)\n         (compare:CC (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-        (if_then_else:SI (ltu:SI (reg:CC CC_REGNUM) (const_int 0))\n-                         (match_dup 1)\n-                         (match_dup 2)))]\n+   (cond_exec (geu:SI (reg:CC CC_REGNUM) (const_int 0))\n+              (set (match_dup 0)\n+                   (match_dup 2)))]\n   \"\"\n   [(set_attr \"conds\" \"clob\")\n-   (set_attr \"length\" \"10,10,14\")]\n+   (set_attr \"length\" \"6,6,10\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")]\n )\n \n ;; Thumb-2 does not have rsc, so use a clever trick with shifter operands.\n@@ -152,17 +147,17 @@\n )\n \n (define_insn_and_split \"*thumb2_abssi2\"\n-  [(set (match_operand:SI         0 \"s_register_operand\" \"=r,&r\")\n-\t(abs:SI (match_operand:SI 1 \"s_register_operand\" \"0,r\")))\n+  [(set (match_operand:SI         0 \"s_register_operand\" \"=&r,l,r\")\n+\t(abs:SI (match_operand:SI 1 \"s_register_operand\" \"r,0,0\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"#\"\n-   ; cmp\\\\t%0, #0\\;it\\tlt\\;rsblt\\\\t%0, %0, #0\n    ; eor%?\\\\t%0, %1, %1, asr #31\\;sub%?\\\\t%0, %0, %1, asr #31\n+   ; cmp\\\\t%0, #0\\;it\\tlt\\;rsblt\\\\t%0, %0, #0\n+   ; cmp\\\\t%0, #0\\;it\\tlt\\;rsblt\\\\t%0, %0, #0\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-    /* if (which_alternative == 0) */\n     if (REGNO(operands[0]) == REGNO(operands[1]))\n       {\n        rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n@@ -199,25 +194,27 @@\n       }\n     DONE;\n   }\n-  [(set_attr \"conds\" \"clob,*\")\n+  [(set_attr \"conds\" \"*,clob,clob\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"predicable\" \"no, yes\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n    (set_attr \"ce_count\" \"2\")\n-   (set_attr \"length\" \"10,8\")]\n+   (set_attr \"length\" \"8,6,10\")]\n )\n \n (define_insn_and_split \"*thumb2_neg_abssi2\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,&r\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"s_register_operand\" \"0,r\"))))\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=&r,l,r\")\n+\t(neg:SI (abs:SI (match_operand:SI 1 \"s_register_operand\" \"r,0,0\"))))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"#\"\n+   ; eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\n+   ; cmp\\\\t%0, #0\\;it\\\\tgt\\;rsbgt\\\\t%0, %0, #0\n    ; cmp\\\\t%0, #0\\;it\\\\tgt\\;rsbgt\\\\t%0, %0, #0\n-   ; eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n-    /* if (which_alternative == 0) */\n     if (REGNO(operands[0]) == REGNO(operands[1]))\n       {\n        rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n@@ -254,11 +251,13 @@\n       }\n     DONE;\n   }\n-  [(set_attr \"conds\" \"clob,*\")\n+  [(set_attr \"conds\" \"*,clob,clob\")\n    (set_attr \"shift\" \"1\")\n-   (set_attr \"predicable\" \"no, yes\")\n+   (set_attr \"predicable\" \"yes,no,no\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"ce_count\" \"2\")\n-   (set_attr \"length\" \"10,8\")]\n+   (set_attr \"length\" \"8,6,10\")]\n )\n \n ;; We have two alternatives here for memory loads (and similarly for stores)\n@@ -340,7 +339,7 @@\n )\n \n (define_insn_and_split \"*thumb2_mov_scc\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,r\")\n \t(match_operator:SI 1 \"arm_comparison_operator\"\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n   \"TARGET_THUMB2\"\n@@ -352,14 +351,15 @@\n                          (const_int 0)))]\n   \"\"\n   [(set_attr \"conds\" \"use\")\n-   (set_attr \"length\" \"10\")]\n+   (set_attr \"enabled_for_depr_it\" \"yes,no\")\n+   (set_attr \"length\" \"8,10\")]\n )\n \n (define_insn_and_split \"*thumb2_mov_negscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(neg:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n-  \"TARGET_THUMB2\"\n+  \"TARGET_THUMB2 && !arm_restrict_it\"\n   \"#\"   ; \"ite\\\\t%D1\\;mov%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #0\"\n   \"TARGET_THUMB2\"\n   [(set (match_dup 0)\n@@ -373,11 +373,39 @@\n    (set_attr \"length\" \"10\")]\n )\n \n+(define_insn_and_split \"*thumb2_mov_negscc_strict_it\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+\t(neg:SI (match_operator:SI 1 \"arm_comparison_operator\"\n+\t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n+  \"TARGET_THUMB2 && arm_restrict_it\"\n+  \"#\"   ; \";mvn\\\\t%0, #0 ;it\\\\t%D1\\;mov%D1\\\\t%0, #0\\\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+        (match_dup 3))\n+   (cond_exec (match_dup 4)\n+              (set (match_dup 0)\n+                   (const_int 0)))]\n+  {\n+    operands[3] = GEN_INT (~0);\n+    enum machine_mode mode = GET_MODE (operands[2]);\n+    enum rtx_code rc = GET_CODE (operands[1]);\n+\n+    if (mode == CCFPmode || mode == CCFPEmode)\n+      rc = reverse_condition_maybe_unordered (rc);\n+    else\n+      rc = reverse_condition (rc);\n+    operands[4] = gen_rtx_fmt_ee (rc, VOIDmode, operands[2], const0_rtx);\n+\n+  }\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n (define_insn_and_split \"*thumb2_mov_notscc\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(not:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n-  \"TARGET_THUMB2\"\n+  \"TARGET_THUMB2 && !arm_restrict_it\"\n   \"#\"   ; \"ite\\\\t%D1\\;mvn%D1\\\\t%0, #0\\;mvn%d1\\\\t%0, #1\"\n   \"TARGET_THUMB2\"\n   [(set (match_dup 0)\n@@ -392,13 +420,35 @@\n    (set_attr \"length\" \"10\")]\n )\n \n+(define_insn_and_split \"*thumb2_mov_notscc_strict_it\"\n+  [(set (match_operand:SI 0 \"low_register_operand\" \"=l\")\n+        (not:SI (match_operator:SI 1 \"arm_comparison_operator\"\n+                 [(match_operand 2 \"cc_register\" \"\") (const_int 0)])))]\n+  \"TARGET_THUMB2 && arm_restrict_it\"\n+  \"#\"   ; \"mvn %0, #0 ; it%d1 ; lsl%d1 %0, %0, #1\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0)\n+        (match_dup 3))\n+   (cond_exec (match_dup 4)\n+              (set (match_dup 0)\n+                   (ashift:SI (match_dup 0)\n+                              (const_int 1))))]\n+  {\n+    operands[3] = GEN_INT (~0);\n+    operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[1]),\n+                                  VOIDmode, operands[2], const0_rtx);\n+  }\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n (define_insn_and_split \"*thumb2_movsicc_insn\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r,r,r,r,r,r,r,r,r,l\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l,r,r,r,r,r,r,r,r,r\")\n \t(if_then_else:SI\n \t (match_operator 3 \"arm_comparison_operator\"\n \t  [(match_operand 4 \"cc_register\" \"\") (const_int 0)])\n-\t (match_operand:SI 1 \"arm_not_operand\" \"0 ,Py,0 ,0,rI,K,rI,rI,K ,K,r,lPy\")\n-\t (match_operand:SI 2 \"arm_not_operand\" \"Py,0 ,rI,K,0 ,0,rI,K ,rI,K,r,lPy\")))]\n+\t (match_operand:SI 1 \"arm_not_operand\" \"0 ,lPy,0 ,0,rI,K,rI,rI,K ,K,r\")\n+\t (match_operand:SI 2 \"arm_not_operand\" \"lPy,0 ,rI,K,0 ,0,rI,K ,rI,K,r\")))]\n   \"TARGET_THUMB2\"\n   \"@\n    it\\\\t%D3\\;mov%D3\\\\t%0, %2\n@@ -411,14 +461,12 @@\n    #\n    #\n    #\n-   #\n    #\"\n    ; alt 6: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n    ; alt 7: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mvn%D3\\\\t%0, #%B2\n    ; alt 8: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mov%D3\\\\t%0, %2\n    ; alt 9: ite\\\\t%d3\\;mvn%d3\\\\t%0, #%B1\\;mvn%D3\\\\t%0, #%B2\n    ; alt 10: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\n-   ; alt 11: ite\\\\t%d3\\;mov%d3\\\\t%0, %1\\;mov%D3\\\\t%0, %2\"\n   \"&& reload_completed\"\n   [(const_int 0)]\n   {\n@@ -449,8 +497,8 @@\n                                                operands[2])));\n     DONE;\n   }\n-  [(set_attr \"length\" \"4,4,6,6,6,6,10,10,10,10,6,6\")\n-   (set_attr \"enabled_for_depr_it\" \"yes,yes,no,no,no,no,no,no,no,no,yes,yes\")\n+  [(set_attr \"length\" \"4,4,6,6,6,6,10,10,10,10,6\")\n+   (set_attr \"enabled_for_depr_it\" \"yes,yes,no,no,no,no,no,no,no,no,yes\")\n    (set_attr \"conds\" \"use\")]\n )\n \n@@ -532,7 +580,7 @@\n \t(ior:SI (match_operator:SI 1 \"arm_comparison_operator\"\n \t\t [(match_operand 2 \"cc_register\" \"\") (const_int 0)])\n \t\t(match_operand:SI 3 \"s_register_operand\" \"0,?r\")))]\n-  \"TARGET_THUMB2\"\n+  \"TARGET_THUMB2 && !arm_restrict_it\"\n   \"@\n    it\\\\t%d1\\;orr%d1\\\\t%0, %3, #1\n    #\"\n@@ -557,6 +605,19 @@\n    (set_attr \"length\" \"6,10\")]\n )\n \n+(define_insn \"*thumb2_ior_scc_strict_it\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l,l\")\n+\t(ior:SI (match_operator:SI 2 \"arm_comparison_operator\"\n+\t\t [(match_operand 3 \"cc_register\" \"\") (const_int 0)])\n+\t\t(match_operand:SI 1 \"s_register_operand\" \"0,?l\")))]\n+  \"TARGET_THUMB2 && arm_restrict_it\"\n+  \"@\n+   it\\\\t%d2\\;mov%d2\\\\t%0, #1\\;it\\\\t%d2\\;orr%d2\\\\t%0, %1\n+   mov\\\\t%0, #1\\;orr\\\\t%0, %1\\;it\\\\t%D2\\;mov%D2\\\\t%0, %1\"\n+  [(set_attr \"conds\" \"use\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n (define_insn \"*thumb2_cond_move\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n \t(if_then_else:SI (match_operator 3 \"equality_operator\"\n@@ -584,13 +645,20 @@\n \toutput_asm_insn (\\\"it\\\\t%D4\\\", operands);\n \tbreak;\n       case 2:\n-\toutput_asm_insn (\\\"ite\\\\t%D4\\\", operands);\n+\tif (arm_restrict_it)\n+\t  output_asm_insn (\\\"it\\\\t%D4\\\", operands);\n+\telse\n+\t  output_asm_insn (\\\"ite\\\\t%D4\\\", operands);\n \tbreak;\n       default:\n \tabort();\n       }\n     if (which_alternative != 0)\n-      output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+      {\n+        output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+        if (arm_restrict_it && which_alternative == 2)\n+          output_asm_insn (\\\"it\\\\t%d4\\\", operands);\n+      }\n     if (which_alternative != 1)\n       output_asm_insn (\\\"mov%d4\\\\t%0, %2\\\", operands);\n     return \\\"\\\";\n@@ -607,7 +675,7 @@\n \t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])\n           (match_operand:SI 1 \"s_register_operand\" \"0,?r\")]))\n    (clobber (reg:CC CC_REGNUM))]\n-  \"TARGET_THUMB2\"\n+  \"TARGET_THUMB2 && !arm_restrict_it\"\n   \"*\n     if (GET_CODE (operands[4]) == LT && operands[3] == const0_rtx)\n       return \\\"%i5\\\\t%0, %1, %2, lsr #31\\\";\n@@ -636,9 +704,78 @@\n    (set_attr \"length\" \"14\")]\n )\n \n+(define_insn_and_split \"*thumb2_cond_arith_strict_it\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=l\")\n+        (match_operator:SI 5 \"shiftable_operator_strict_it\"\n+\t [(match_operator:SI 4 \"arm_comparison_operator\"\n+           [(match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI\")])\n+          (match_operand:SI 1 \"s_register_operand\" \"0\")]))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_THUMB2 && arm_restrict_it\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+  {\n+    if (GET_CODE (operands[4]) == LT && operands[3] == const0_rtx)\n+      {\n+        /*  %i5 %0, %1, %2, lsr #31  */\n+        rtx shifted_op = gen_rtx_LSHIFTRT (SImode, operands[2], GEN_INT (31));\n+        rtx op = NULL_RTX;\n+\n+        switch (GET_CODE (operands[5]))\n+          {\n+          case AND:\n+            op = gen_rtx_AND (SImode, shifted_op, operands[1]);\n+            break;\n+           case PLUS:\n+            op = gen_rtx_PLUS (SImode, shifted_op, operands[1]);\n+            break;\n+          default: gcc_unreachable ();\n+          }\n+        emit_insn (gen_rtx_SET (VOIDmode, operands[0], op));\n+        DONE;\n+      }\n+\n+    /*  \"cmp  %2, %3\"  */\n+    emit_insn (gen_rtx_SET (VOIDmode,\n+                               gen_rtx_REG (CCmode, CC_REGNUM),\n+                               gen_rtx_COMPARE (CCmode, operands[2], operands[3])));\n+\n+    if (GET_CODE (operands[5]) == AND)\n+      {\n+        /*  %i5  %0, %1, #1\n+            it%D4\n+            mov%D4  %0, #0  */\n+        enum rtx_code rc = reverse_condition (GET_CODE (operands[4]));\n+        emit_insn (gen_rtx_SET (VOIDmode, operands[0], gen_rtx_AND (SImode, operands[1], GEN_INT (1))));\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n+                                      gen_rtx_fmt_ee (rc, VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM), const0_rtx),\n+                                      gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+        DONE;\n+      }\n+    else\n+      {\n+        /*  it\\\\t%d4\n+            %i5%d4\\\\t%0, %1, #1   */\n+        emit_insn (gen_rtx_COND_EXEC (VOIDmode, gen_rtx_fmt_ee (GET_CODE (operands[4]),\n+                                                                VOIDmode,\n+                                                                gen_rtx_REG (CCmode, CC_REGNUM), const0_rtx),\n+                                                gen_rtx_SET(VOIDmode, operands[0],\n+                                                            gen_rtx_PLUS (SImode,\n+                                                                          operands[1],\n+                                                                          GEN_INT (1)))));\n+        DONE;\n+      }\n+     FAIL;\n+  }\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"12\")]\n+)\n+\n (define_insn \"*thumb2_cond_sub\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n-        (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0,?r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts,Ts\")\n+        (minus:SI (match_operand:SI 1 \"s_register_operand\" \"0,?Ts\")\n \t\t  (match_operator:SI 4 \"arm_comparison_operator\"\n                    [(match_operand:SI 2 \"s_register_operand\" \"r,r\")\n \t\t    (match_operand:SI 3 \"arm_rhs_operand\" \"rI,rI\")])))\n@@ -648,8 +785,16 @@\n     output_asm_insn (\\\"cmp\\\\t%2, %3\\\", operands);\n     if (which_alternative != 0)\n       {\n-\toutput_asm_insn (\\\"ite\\\\t%D4\\\", operands);\n-\toutput_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+\tif (arm_restrict_it)\n+\t  {\n+\t    output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n+\t    output_asm_insn (\\\"it\\\\t%d4\\\", operands);\n+\t  }\n+\telse\n+\t{\n+\t  output_asm_insn (\\\"ite\\\\t%D4\\\", operands);\n+\t  output_asm_insn (\\\"mov%D4\\\\t%0, %1\\\", operands);\n+\t}\n       }\n     else\n       output_asm_insn (\\\"it\\\\t%d4\\\", operands);\n@@ -728,13 +873,13 @@\n )\n \n (define_insn \"*thumb2_movcond\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=Ts,Ts,Ts\")\n \t(if_then_else:SI\n \t (match_operator 5 \"arm_comparison_operator\"\n \t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n \t   (match_operand:SI 4 \"arm_add_operand\" \"rIL,rIL,rIL\")])\n-\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,rI,?rI\")\n-\t (match_operand:SI 2 \"arm_rhs_operand\" \"rI,0,rI\")))\n+\t (match_operand:SI 1 \"arm_rhs_operand\" \"0,TsI,?TsI\")\n+\t (match_operand:SI 2 \"arm_rhs_operand\" \"TsI,0,TsI\")))\n    (clobber (reg:CC CC_REGNUM))]\n   \"TARGET_THUMB2\"\n   \"*\n@@ -789,12 +934,18 @@\n       output_asm_insn (\\\"it\\\\t%d5\\\", operands);\n       break;\n     case 2:\n-      output_asm_insn (\\\"ite\\\\t%d5\\\", operands);\n+      if (arm_restrict_it)\n+        {\n+          output_asm_insn (\\\"mov\\\\t%0, %1\\\", operands);\n+          output_asm_insn (\\\"it\\\\t%D5\\\", operands);\n+        }\n+      else\n+        output_asm_insn (\\\"ite\\\\t%d5\\\", operands);\n       break;\n     default:\n       abort();\n     }\n-  if (which_alternative != 0)\n+  if (which_alternative != 0 && !(arm_restrict_it && which_alternative == 2))\n     output_asm_insn (\\\"mov%d5\\\\t%0, %1\\\", operands);\n   if (which_alternative != 1)\n     output_asm_insn (\\\"mov%D5\\\\t%0, %2\\\", operands);\n@@ -817,6 +968,7 @@\n    ldr%(sb%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n )\n@@ -830,6 +982,7 @@\n    ldr%(h%)\\\\t%0, %1\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n )\n@@ -843,6 +996,7 @@\n    ldr%(b%)\\\\t%0, %1\\\\t%@ zero_extendqisi2\"\n   [(set_attr \"type\" \"extend,load_byte\")\n    (set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"pool_range\" \"*,4094\")\n    (set_attr \"neg_pool_range\" \"*,250\")]\n )\n@@ -1167,7 +1321,8 @@\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_THUMB2\"\n   \"orn%?\\\\t%0, %1, %2\"\n-  [(set_attr \"predicable\" \"yes\")]\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")]\n )\n \n (define_insn \"*orsi_not_shiftsi_si\"\n@@ -1179,6 +1334,7 @@\n   \"TARGET_THUMB2\"\n   \"orn%?\\\\t%0, %1, %2%S4\"\n   [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"2\")\n    (set_attr \"type\" \"arlo_shift\")]\n )"}]}