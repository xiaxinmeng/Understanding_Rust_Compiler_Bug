{"sha": "6bed14c7a6d6b480d344380d21dc63664957a91b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJlZDE0YzdhNmQ2YjQ4MGQzNDQzODBkMjFkYzYzNjY0OTU3YTkxYg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "2000-05-03T22:45:31Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-05-03T22:45:31Z"}, "message": "Makefile.in (WARN_CFLAGS): Add -pedantic -Wno-long-long.\n\n        * Makefile.in (WARN_CFLAGS): Add -pedantic -Wno-long-long.\n        (LOOSE_CFLAGS): New: CFLAGS without -pedantic and -Wtraditional.\n        (GCC_CFLAGS): Use it.\n        (LANG_FLAGS_TO_PASS): New: SUBDIR_FLAGS_TO_PASS with LOOSE_CFLAGS.\n        * cp/Make-lang.in, java/Make-lang.in, f/Make-lang.in, ch/Make-lang.in,\n        objc/Make-lang.in: Use it.\n\nFrom-SVN: r33648", "tree": {"sha": "d03dceac052a0402839be40b751698b8f2c5ffd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d03dceac052a0402839be40b751698b8f2c5ffd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bed14c7a6d6b480d344380d21dc63664957a91b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bed14c7a6d6b480d344380d21dc63664957a91b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bed14c7a6d6b480d344380d21dc63664957a91b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bed14c7a6d6b480d344380d21dc63664957a91b/comments", "author": null, "committer": null, "parents": [{"sha": "eb68cb58219314b2df94efec3b9dc711b830f7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb68cb58219314b2df94efec3b9dc711b830f7e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb68cb58219314b2df94efec3b9dc711b830f7e3"}], "stats": {"total": 56, "additions": 32, "deletions": 24}, "files": [{"sha": "e8ac8f38165729a21b8b47e44a7605355ac64b24", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -1,3 +1,12 @@\n+2000-05-03  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* Makefile.in (WARN_CFLAGS): Add -pedantic -Wno-long-long.\n+\t(LOOSE_CFLAGS): New: CFLAGS without -pedantic and -Wtraditional.\n+\t(GCC_CFLAGS): Use it.\n+\t(LANG_FLAGS_TO_PASS): New: SUBDIR_FLAGS_TO_PASS with LOOSE_CFLAGS.\n+\t* cp/Make-lang.in, java/Make-lang.in, f/Make-lang.in, ch/Make-lang.in,\n+\tobjc/Make-lang.in: Use it.\n+\n 2000-05-03  Jason R Thorpe  <thorpej@zembu.com>\n \n \t* config/i386/i386.md (lshrqi2_cmpno): Use q not r in constraint.\n@@ -204,13 +213,6 @@ Tue May  2 17:06:53 2000  Jason Eckhardt  <jle@cygnus.com>\n \n 2000-05-02  Jason Merrill  <jason@casey.cygnus.com>\n \n-\t* Makefile.in (WARN_CFLAGS): Add -pedantic -Wno-long-long.\n-\t(LOOSE_CFLAGS): New: CFLAGS without -pedantic and -Wtraditional.\n-\t(GCC_CFLAGS): Use it.\n-\t(LANG_FLAGS_TO_PASS): New: SUBDIR_FLAGS_TO_PASS with LOOSE_CFLAGS.\n-\t* cp/Make-lang.in, java/Make-lang.in, f/Make-lang.in, ch/Make-lang.in,\n-\tobjc/Make-lang.in: Use it.\n-\n \t* toplev.c (debug_ignore_block): Return int.\n \t* dwarf2out.c (dwarf2out_ignore_block): Likewise.\n \t* toplev.h, dwarf2out.h: Adjust."}, {"sha": "b0a94443db905dd577f13930c3ff8d2172b87395", "filename": "gcc/Makefile.in", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -68,13 +68,16 @@ ALLOCA_FINISH = true\n # separate from BOOT_CFLAGS because people tend to override optimization\n # flags and we'd like them to still have warnings turned on.  They are free\n # to explicitly turn warnings off if they wish.\n+# LOOSE_CFLAGS are the CFLAGS to use when compiling something which is only\n+# compiled with gcc, such as libgcc and the frontends other than C.\n # XCFLAGS is used for most compilations but not when using the GCC just built.\n # TCFLAGS is used for compilations with the GCC just built.\n XCFLAGS =\n TCFLAGS =\n CFLAGS = -g @stage1_warn_cflags@\n BOOT_CFLAGS = -O2 $(CFLAGS)\n-WARN_CFLAGS = -W -Wall -Wtraditional\n+WARN_CFLAGS = -pipe -W -Wall -Wtraditional -pedantic -Wno-long-long\n+LOOSE_CFLAGS = `echo $(CFLAGS) | sed -e 's/-pedantic//' -e 's/-Wtraditional//'`\n # These exists to be overridden by the x-* and t-* files, respectively.\n X_CFLAGS =\n T_CFLAGS =\n@@ -164,7 +167,7 @@ GCC_FOR_TARGET = ./xgcc -B$(build_tooldir)/bin/ -B./ -isystem $(build_tooldir)/i\n # This is used instead of ALL_CFLAGS when compiling with GCC_FOR_TARGET.\n # It omits XCFLAGS, and specifies -B./.\n # It also specifies -isystem ./include to find, e.g., stddef.h.\n-GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(CFLAGS) -isystem ./include $(TCFLAGS)\n+GCC_CFLAGS=$(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) $(LOOSE_CFLAGS) -isystem ./include $(TCFLAGS)\n \n # Specify the abi to use when building the c++ runtime\n GXX_ABI_FLAG=@GXX_ABI_FLAG@\n@@ -664,7 +667,10 @@ PREPEND_DOTDOT_TO_RELATIVE_PATHS = sed \\\n \t-e 's|%% *|../|g' \\\n \t-e 's|%||g'\n SUBDIR_FLAGS_TO_PASS = $(ORDINARY_FLAGS_TO_PASS) \\\n-  \"CC=`echo @quoted_cc_set_by_configure@ | $(PREPEND_DOTDOT_TO_RELATIVE_PATHS)`\"\n+\t\"CC=`echo @quoted_cc_set_by_configure@ | $(PREPEND_DOTDOT_TO_RELATIVE_PATHS)`\"\n+# Flags to pass when recursing into a frontend subdirectory.\n+LANG_FLAGS_TO_PASS = $(SUBDIR_FLAGS_TO_PASS) \\\n+\t\"CFLAGS=$(LOOSE_CFLAGS)\"\n #\f\n # Lists of files for various purposes.\n "}, {"sha": "f9641256cdb6147b93b8bb9a410438513797018a", "filename": "gcc/ch/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fch%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fch%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fch%2FMake-lang.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -97,7 +97,7 @@ cc1chill$(exeext): $(P) $(CHILL_SRCS) $(LIBDEPS) stamp-objlist \\\n \tinsn-config.h insn-flags.h insn-attr.h insn-codes.h \\\n \tc-typeck.o c-aux-info.o c-common.o c-iterate.o \\\n         ggc-callbacks.o\n-\tcd ch; $(MAKE) $(FLAGS_TO_PASS) $(CHILL_FLAGS_TO_PASS) ../cc1chill$(exeext)\n+\tcd ch; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CHILL_FLAGS_TO_PASS) ../cc1chill$(exeext)\n \n #\f\n # Build hooks:\n@@ -191,7 +191,7 @@ CHILL.stage4: stage4-start\n # distribution anyway.  It then copies the files to the distdir directory.\n CHILL.distdir:\n \tmkdir tmp/ch\n-\tcd ch ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) hash.h\n+\tcd ch ; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) hash.h\n \tcd ch; \\\n \tfor file in *[0-9a-zA-Z+]; do \\\n \t  ln $$file ../tmp/ch >/dev/null 2>&1 || cp $$file ../tmp/ch; \\"}, {"sha": "b25d6e2a1d9e31078571e3f472c92e24602debae", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -84,7 +84,7 @@ $(srcdir)/cp/parse.c: $(srcdir)/cp/parse.y\n \t@cp_srcdir=`sed -n 's/^srcdir[ \t]*=[\t ]*//p' cp/Makefile` && \\\n \techo \"cd cp && $(MAKE) $$cp_srcdir/parse.c\" && \\\n \tcd cp && \\\n-\t  $(MAKE) $(SUBDIR_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) \\\n+\t  $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) \\\n \t    $$cp_srcdir/parse.c\n \n # Create the compiler driver for g++.\n@@ -124,7 +124,7 @@ CXX_SRCS = $(srcdir)/cp/call.c $(srcdir)/cp/class.c $(srcdir)/cp/cp-tree.def \\\n cc1plus$(exeext): $(P) $(CXX_SRCS) $(LIBDEPS) stamp-objlist c-common.o \\\n         c-pragma.o $(srcdir)/cp/cp-tree.h $(srcdir)/cp/cp-tree.def \\\n \t$(srcdir)/cp/gxx.gperf $(srcdir)/cp/cfns.gperf hash.o\n-\tcd cp; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)\n+\tcd cp; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) ../cc1plus$(exeext)\n #\f\n # Build hooks:\n \n@@ -304,7 +304,7 @@ c++.stage4: stage4-start\n c++.distdir:\n \tmkdir tmp/cp\n \tmkdir tmp/cp/inc\n-\tcd cp ; $(MAKE) $(FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h\n+\tcd cp ; $(MAKE) $(LANG_FLAGS_TO_PASS) $(CXX_FLAGS_TO_PASS) parse.c hash.h\n \tcd cp; \\\n \tfor file in *[0-9a-zA-Z+]; do \\\n \t  $(LN) $$file ../tmp/cp; \\"}, {"sha": "f46793c107f6b18411817507c0076a3442fe66c5", "filename": "gcc/f/Make-lang.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Ff%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Ff%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FMake-lang.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -1,5 +1,5 @@\n # Top level makefile fragment for GNU Fortran.           -*-makefile-*-\n-#   Copyright (C) 1995, 1996, 1997, 1998 Free Software Foundation, Inc.\n+#   Copyright (C) 1995, 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n \n #This file is part of GNU Fortran.\n \n@@ -202,7 +202,7 @@ F77_SRCS = \\\n \n f771$(exeext): $(P) $(F77_SRCS) $(LIBDEPS) stamp-objlist\n \ttouch lang-f77\n-\tcd f; $(MAKE) $(FLAGS_TO_PASS) \\\n+\tcd f; $(MAKE) $(LANG_FLAGS_TO_PASS) \\\n \t  HOST_CC=\"`case '$(HOST_CC)' in stage*) echo '$(HOST_CC)' | sed -e 's|stage|../stage|g';; *) echo '$(HOST_CC)';; esac`\" \\\n \t  HOST_CFLAGS=\"$(HOST_CFLAGS)\" HOST_CPPFLAGS=\"$(HOST_CPPFLAGS)\" \\\n \t  ../f771$(exeext)"}, {"sha": "7e72c9e2d7516f29ac14f942c5e53df44d818a13", "filename": "gcc/java/Make-lang.in", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fjava%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fjava%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FMake-lang.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -78,7 +78,7 @@ JAVA_SRCS = $(srcdir)/java/parse.y $(srcdir)/java/class.c \\\n   $(srcdir)/java/jcf-depend.c  $(srcdir)/java/jcf-path.c\n \n jc1$(exeext): $(P) $(JAVA_SRCS) $(LIBDEPS) stamp-objlist ggc-callbacks.o\n-\tcd java; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)\n+\tcd java; $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jc1$(exeext)\n \n jvspec.o: $(srcdir)/java/jvspec.c system.h $(GCC_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) \\\n@@ -98,7 +98,7 @@ $(GCJ)-cross$(exeext): $(GCJ)$(exeext)\n # Dependencies here must be kept in sync with dependencies in Makefile.in.\n jvgenmain$(exeext): $(srcdir)/java/jvgenmain.c $(srcdir)/java/mangle.c \\\n \t\t$(LIBDEPS) $(TREE_H)\n-\tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jvgenmain$(exeext)\n+\tcd java && $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jvgenmain$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in.\n GCJH_SOURCES = $(srcdir)/java/gjavah.c $(srcdir)/java/jcf-io.c \\\n@@ -108,21 +108,21 @@ GCJH_SOURCES = $(srcdir)/java/gjavah.c $(srcdir)/java/jcf-io.c \\\n \t$(srcdir)/java/jcf-path.c\n \n gcjh$(exeext): $(GCJH_SOURCES) $(LIBDEPS) $(TREE_H)\n-\tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../gcjh$(exeext)\n+\tcd java && $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../gcjh$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in.\n JV_SCAN_SOURCES = $(srcdir)/java/parse-scan.y $(srcdir)/java/lex.c \\\n        $(srcdir)/java/parse.h $(srcdir)/java/lex.h $(srcdir)/java/jv-scan.c\n \n jv-scan$(exeext): $(JV_SCAN_SOURCES) stamp-objlist $(LIBDEPS)\n-\tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jv-scan$(exeext)\n+\tcd java && $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jv-scan$(exeext)\n \n # This must be kept in sync with dependencies in Makefile.in.\n JCF_DUMP_SOURCES = $(srcdir)/java/jcf-dump.c $(srcdir)/java/jcf-io.c \\\n        $(srcdir)/java/zextract.c $(TREE_H)\n \n jcf-dump$(exeext): $(JCF_DUMP_SOURCES)\n-\tcd java && $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jcf-dump$(exeext)\n+\tcd java && $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) ../jcf-dump$(exeext)\n \n #\f\n # Build hooks:\n@@ -203,7 +203,7 @@ java.stage4: stage4-start\n # distribution anyway.  It then copies the files to the distdir directory.\n java.distdir:\n \tmkdir tmp/java\n-\tcd java ; $(MAKE) $(FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) parse.c hash.h\n+\tcd java ; $(MAKE) $(LANG_FLAGS_TO_PASS) $(JAVA_FLAGS_TO_PASS) parse.c hash.h\n \tcd java; \\\n \tfor file in *[0-9a-zA-Z+]; do \\\n \t  ln $$file ../tmp/java >/dev/null 2>&1 || cp $$file ../tmp/java; \\"}, {"sha": "089f71470b6adb2d7c523d52fc825c8798af47d6", "filename": "gcc/objc/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fobjc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bed14c7a6d6b480d344380d21dc63664957a91b/gcc%2Fobjc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FMake-lang.in?ref=6bed14c7a6d6b480d344380d21dc63664957a91b", "patch": "@@ -160,7 +160,7 @@ objc.stage4: stage4-start\n # the build in the inner directory.\n objc.distdir: $(srcdir)/objc/objc-parse.c\n \tmkdir tmp/objc\n-#\tcd objc ; $(MAKE) $(FLAGS_TO_PASS) objc-parse.c\n+#\tcd objc ; $(MAKE) $(LANG_FLAGS_TO_PASS) objc-parse.c\n \tcd objc; \\\n \tfor file in *[0-9a-zA-Z+]; do \\\n \t  ln $$file ../tmp/objc >/dev/null 2>&1 || cp $$file ../tmp/objc; \\"}]}