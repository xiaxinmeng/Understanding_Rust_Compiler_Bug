{"sha": "3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "node_id": "C_kwDOANBUbNoAKDNkNGIxODcxOTEwZTRkN2I0ZWYxNzFmM2ZkZWFiNWVjMGU3OGExNjc", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-03-15T20:35:47Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-03-17T16:31:54Z"}, "message": "Unify HIR::IfExprConseqIf{,Let} into HIR::IfExprConseqElse\n\nThis should simplify 'if' expression handling to match\nfuture simplifications to 'if let' expression handling.\n\ngcc/rust/ChangeLog:\n\n\t* typecheck/rust-hir-type-check-expr.cc\n\t(TypeCheckExpr::visit): Remove IfExprConseqIf visitor.\n\t* typecheck/rust-hir-type-check-expr.h\n\t(TypeCheckExpr::visit): Remove IfExprConseqIf{,Let} visitor.\n\t* backend/rust-compile-block.cc\n\t(CompileConditionalBlocks::visit): Remove IfExprConseqIf visitor.\n\t* backend/rust-compile-block.h\n\t(CompileConditionalBlocks::visit): Remove IfExprConseqIf{,Let} visitors.\n\t(CompileExprWithBlock::visit):\n\tRemove IfExprConseqIf{,Let} visitors, implement BlockExpr visitor.\n\t* backend/rust-compile-expr.cc\n\t(CompileExpr::visit): Remove IfExprConseqIf visitor.\n\t* backend/rust-compile-expr.h\n\t(CompileExpr::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/lints/rust-lint-marklive.h\n\t(MarkLive::visit): Remove IfExprConseqIf visitor.\n\t* checks/errors/rust-const-checker.cc\n\t(ConstChecker::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-const-checker.h\n\t(ConstChecker::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-unsafe-checker.cc\n\t(UnsafeChecker::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/errors/rust-unsafe-checker.h\n\t(UnsafeChecker::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/errors/privacy/rust-privacy-reporter.cc\n\t(PrivacyReporter::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* checks/errors/privacy/rust-privacy-reporter.h\n\t(PrivacyReporter::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* hir/tree/rust-hir-expr.h\n\t(class IfExprConseqElse): Make else_block ExprWithBlock.\n\t(class IfExprConseqIf): Remove.\n\t(class IfExprConseqIfLet): Remove.\n\t* hir/tree/rust-hir-full-decls.h\n\t(class IfExprConseqIf): Remove.\n\t(class IfExprConseqIfLet): Remove.\n\t* hir/tree/rust-hir.cc\n\t(IfExprConseqElse::as_string): Adjust output.\n\t(IfExprConseqIf::as_string): Remove.\n\t(IfExprConseqIfLet::as_string): Remove.\n\t(IfExprConseqIf::accept_vis): Remove.\n\t(IfExprConseqIfLet::accept_vis): Remove.\n\t* hir/tree/rust-hir-visitor.h\n\t(HIRFullVisitor::visit): Remove IfExprConseqIf{,Let} visitors.\n\t(HIRFullVisitorBase::visit): Remove IfExprConseqIf{,Let} visitors.\n\t(HIRExpressionVisitor::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* hir/rust-hir-dump.cc\n\t(Dump::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* hir/rust-hir-dump.h\n\t(Dump::visit): Remove IfExprConseqIf{,Let} visitors.\n\t* hir/rust-ast-lower.cc\n\t(ASTLoweringIfBlock::visit): Replace HIR::IfExprConseqIf with HIR::IfExprConseqElse.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "8f81adecf100bc4f6a4b9e5091c943b907eea0f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f81adecf100bc4f6a4b9e5091c943b907eea0f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4038083ef08ce8e8456261389d4b26f5dd7ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4038083ef08ce8e8456261389d4b26f5dd7ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4038083ef08ce8e8456261389d4b26f5dd7ace"}], "stats": {"total": 375, "additions": 16, "deletions": 359}, "files": [{"sha": "74b6f9a92f7c05c4d3fc644b4fa7b80b607d1ab2", "filename": "gcc/rust/backend/rust-compile-block.cc", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-block.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-block.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -113,20 +113,6 @@ CompileConditionalBlocks::visit (HIR::IfExpr &expr)\n \n void\n CompileConditionalBlocks::visit (HIR::IfExprConseqElse &expr)\n-{\n-  fncontext fnctx = ctx->peek_fn ();\n-  tree fndecl = fnctx.fndecl;\n-  tree condition_expr = CompileExpr::Compile (expr.get_if_condition (), ctx);\n-  tree then_block = CompileBlock::compile (expr.get_if_block (), ctx, result);\n-  tree else_block = CompileBlock::compile (expr.get_else_block (), ctx, result);\n-\n-  translated\n-    = ctx->get_backend ()->if_statement (fndecl, condition_expr, then_block,\n-\t\t\t\t\t else_block, expr.get_locus ());\n-}\n-\n-void\n-CompileConditionalBlocks::visit (HIR::IfExprConseqIf &expr)\n {\n   fncontext fnctx = ctx->peek_fn ();\n   tree fndecl = fnctx.fndecl;\n@@ -135,16 +121,16 @@ CompileConditionalBlocks::visit (HIR::IfExprConseqIf &expr)\n \n   // else block\n   std::vector<Bvariable *> locals;\n-  Location start_location = expr.get_conseq_if_expr ()->get_locus ();\n-  Location end_location = expr.get_conseq_if_expr ()->get_locus (); // FIXME\n+  Location start_location = expr.get_else_block ()->get_locus ();\n+  Location end_location = expr.get_else_block ()->get_locus (); // FIXME\n   tree enclosing_scope = ctx->peek_enclosing_scope ();\n   tree else_block = ctx->get_backend ()->block (fndecl, enclosing_scope, locals,\n \t\t\t\t\t\tstart_location, end_location);\n   ctx->push_block (else_block);\n \n   tree else_stmt_decl\n-    = CompileConditionalBlocks::compile (expr.get_conseq_if_expr (), ctx,\n-\t\t\t\t\t result);\n+    = CompileExprWithBlock::compile (expr.get_else_block (), ctx, result);\n+\n   ctx->add_statement (else_stmt_decl);\n \n   ctx->pop_block ();"}, {"sha": "666eb0915b7d8faefcb8baf8b771e86328b45ee6", "filename": "gcc/rust/backend/rust-compile-block.h", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-block.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -52,7 +52,6 @@ class CompileConditionalBlocks : public HIRCompileBase,\n \n   void visit (HIR::IfExpr &expr) override;\n   void visit (HIR::IfExprConseqElse &expr) override;\n-  void visit (HIR::IfExprConseqIf &expr) override;\n \n   // Empty visit for unused Expression HIR nodes.\n   void visit (HIR::PathInExpression &) override {}\n@@ -97,7 +96,6 @@ class CompileConditionalBlocks : public HIRCompileBase,\n   void visit (HIR::WhileLoopExpr &) override {}\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}\n-  void visit (HIR::IfExprConseqIfLet &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n   void visit (HIR::IfLetExprConseqIf &) override {}\n@@ -137,9 +135,9 @@ class CompileExprWithBlock : public HIRCompileBase,\n     translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n   }\n \n-  void visit (HIR::IfExprConseqIf &expr) override\n+  void visit (HIR::BlockExpr &expr) override\n   {\n-    translated = CompileConditionalBlocks::compile (&expr, ctx, result);\n+    translated = CompileBlock::compile (&expr, ctx, result);\n   }\n \n   // Empty visit for unused Expression HIR nodes.\n@@ -170,7 +168,6 @@ class CompileExprWithBlock : public HIRCompileBase,\n   void visit (HIR::CallExpr &) override {}\n   void visit (HIR::MethodCallExpr &) override {}\n   void visit (HIR::FieldAccessExpr &) override {}\n-  void visit (HIR::BlockExpr &) override {}\n   void visit (HIR::ContinueExpr &) override {}\n   void visit (HIR::BreakExpr &) override {}\n   void visit (HIR::RangeFromToExpr &) override {}\n@@ -185,7 +182,6 @@ class CompileExprWithBlock : public HIRCompileBase,\n   void visit (HIR::WhileLoopExpr &) override {}\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}\n-  void visit (HIR::IfExprConseqIfLet &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n   void visit (HIR::IfLetExprConseqIf &) override {}"}, {"sha": "6a7b2eb1394e43287b93a9cbe14ad9ac9ee759e7", "filename": "gcc/rust/backend/rust-compile-expr.cc", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -344,43 +344,6 @@ CompileExpr::visit (HIR::IfExprConseqElse &expr)\n     }\n }\n \n-void\n-CompileExpr::visit (HIR::IfExprConseqIf &expr)\n-{\n-  TyTy::BaseType *if_type = nullptr;\n-  if (!ctx->get_tyctx ()->lookup_type (expr.get_mappings ().get_hirid (),\n-\t\t\t\t       &if_type))\n-    {\n-      rust_error_at (expr.get_locus (),\n-\t\t     \"failed to lookup type of IfExprConseqElse\");\n-      return;\n-    }\n-\n-  Bvariable *tmp = NULL;\n-  bool needs_temp = !if_type->is_unit ();\n-  if (needs_temp)\n-    {\n-      fncontext fnctx = ctx->peek_fn ();\n-      tree enclosing_scope = ctx->peek_enclosing_scope ();\n-      tree block_type = TyTyResolveCompile::compile (ctx, if_type);\n-\n-      bool is_address_taken = false;\n-      tree ret_var_stmt = nullptr;\n-      tmp = ctx->get_backend ()->temporary_variable (\n-\tfnctx.fndecl, enclosing_scope, block_type, NULL, is_address_taken,\n-\texpr.get_locus (), &ret_var_stmt);\n-      ctx->add_statement (ret_var_stmt);\n-    }\n-\n-  auto stmt = CompileConditionalBlocks::compile (&expr, ctx, tmp);\n-  ctx->add_statement (stmt);\n-\n-  if (tmp != NULL)\n-    {\n-      translated = ctx->get_backend ()->var_expression (tmp, expr.get_locus ());\n-    }\n-}\n-\n void\n CompileExpr::visit (HIR::BlockExpr &expr)\n {"}, {"sha": "d23d1d1d515048973a8dc89e44c25365f224dc55", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -45,7 +45,6 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n   void visit (HIR::NegationExpr &expr) override;\n   void visit (HIR::TypeCastExpr &expr) override;\n   void visit (HIR::IfExpr &expr) override;\n-  void visit (HIR::IfExprConseqIf &expr) override;\n   void visit (HIR::IfExprConseqElse &expr) override;\n   void visit (HIR::BlockExpr &expr) override;\n   void visit (HIR::UnsafeBlockExpr &expr) override;\n@@ -77,7 +76,6 @@ class CompileExpr : private HIRCompileBase, protected HIR::HIRExpressionVisitor\n   // TODO\n   // these need to be sugared in the HIR to if statements and a match\n   void visit (HIR::WhileLetLoopExpr &) override {}\n-  void visit (HIR::IfExprConseqIfLet &) override {}\n   void visit (HIR::IfLetExpr &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n   void visit (HIR::IfLetExprConseqIf &) override {}"}, {"sha": "06bd4284fa673b2488f2eb38e537ab6f2ad1c9b1", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -546,23 +546,6 @@ PrivacyReporter::visit (HIR::IfExprConseqElse &expr)\n   expr.get_else_block ()->accept_vis (*this);\n }\n \n-void\n-PrivacyReporter::visit (HIR::IfExprConseqIf &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_expr ()->accept_vis (*this);\n-}\n-\n-void\n-PrivacyReporter::visit (HIR::IfExprConseqIfLet &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-\n-  // TODO: We need to visit the if_let_expr as well\n-}\n-\n void\n PrivacyReporter::visit (HIR::IfLetExpr &)\n {"}, {"sha": "d12d3a7bc3318e319c1bbe0ac3279e29193ca64c", "filename": "gcc/rust/checks/errors/privacy/rust-privacy-reporter.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Fprivacy%2Frust-privacy-reporter.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -122,8 +122,6 @@ types\n   virtual void visit (HIR::ForLoopExpr &expr);\n   virtual void visit (HIR::IfExpr &expr);\n   virtual void visit (HIR::IfExprConseqElse &expr);\n-  virtual void visit (HIR::IfExprConseqIf &expr);\n-  virtual void visit (HIR::IfExprConseqIfLet &expr);\n   virtual void visit (HIR::IfLetExpr &expr);\n   virtual void visit (HIR::IfLetExprConseqElse &expr);\n   virtual void visit (HIR::IfLetExprConseqIf &expr);"}, {"sha": "4f6987ff56de5f3b589941e16dd33114ed8b8622", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -499,23 +499,6 @@ ConstChecker::visit (IfExprConseqElse &expr)\n   expr.get_else_block ()->accept_vis (*this);\n }\n \n-void\n-ConstChecker::visit (IfExprConseqIf &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_expr ()->accept_vis (*this);\n-}\n-\n-void\n-ConstChecker::visit (IfExprConseqIfLet &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-\n-  // TODO: Visit conseq if let expression\n-}\n-\n void\n ConstChecker::visit (IfLetExpr &expr)\n {"}, {"sha": "04130b444a081121abb3593024a37f790e9399a1", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -129,8 +129,6 @@ class ConstChecker : public HIRFullVisitor\n   virtual void visit (ForLoopExpr &expr) override;\n   virtual void visit (IfExpr &expr) override;\n   virtual void visit (IfExprConseqElse &expr) override;\n-  virtual void visit (IfExprConseqIf &expr) override;\n-  virtual void visit (IfExprConseqIfLet &expr) override;\n   virtual void visit (IfLetExpr &expr) override;\n   virtual void visit (IfLetExprConseqElse &expr) override;\n   virtual void visit (IfLetExprConseqIf &expr) override;"}, {"sha": "f00df0b96717a1530d07a2f6ef753bc3f2b8a3aa", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -601,23 +601,6 @@ UnsafeChecker::visit (IfExprConseqElse &expr)\n   expr.get_else_block ()->accept_vis (*this);\n }\n \n-void\n-UnsafeChecker::visit (IfExprConseqIf &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-  expr.get_conseq_if_expr ()->accept_vis (*this);\n-}\n-\n-void\n-UnsafeChecker::visit (IfExprConseqIfLet &expr)\n-{\n-  expr.get_if_condition ()->accept_vis (*this);\n-  expr.get_if_block ()->accept_vis (*this);\n-\n-  // TODO: Visit conseq if let expression\n-}\n-\n void\n UnsafeChecker::visit (IfLetExpr &expr)\n {"}, {"sha": "ce33c95fb02301f792e56f4aa81f11b80912529d", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -111,8 +111,6 @@ class UnsafeChecker : public HIRFullVisitor\n   virtual void visit (ForLoopExpr &expr) override;\n   virtual void visit (IfExpr &expr) override;\n   virtual void visit (IfExprConseqElse &expr) override;\n-  virtual void visit (IfExprConseqIf &expr) override;\n-  virtual void visit (IfExprConseqIfLet &expr) override;\n   virtual void visit (IfLetExpr &expr) override;\n   virtual void visit (IfLetExprConseqElse &expr) override;\n   virtual void visit (IfLetExprConseqIf &expr) override;"}, {"sha": "be634a7e80c6ce3294e1d26920334119553864d0", "filename": "gcc/rust/checks/lints/rust-lint-marklive.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Flints%2Frust-lint-marklive.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -222,13 +222,6 @@ class MarkLive : public MarkLiveBase\n       }\n   }\n \n-  void visit (HIR::IfExprConseqIf &expr) override\n-  {\n-    expr.get_if_condition ()->accept_vis (*this);\n-    expr.get_if_block ()->accept_vis (*this);\n-    expr.get_conseq_if_expr ()->accept_vis (*this);\n-  }\n-\n   void visit (HIR::TraitItemFunc &item) override\n   {\n     item.get_block_expr ()->accept_vis (*this);"}, {"sha": "36dd1a9d8e67883409da698a06a2062784e2f445", "filename": "gcc/rust/hir/rust-ast-lower.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-ast-lower.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-ast-lower.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -221,11 +221,10 @@ ASTLoweringIfBlock::visit (AST::IfExprConseqIf &expr)\n \t\t\t\t mappings->get_next_hir_id (crate_num),\n \t\t\t\t UNKNOWN_LOCAL_DEFID);\n \n-  translated\n-    = new HIR::IfExprConseqIf (mapping, std::unique_ptr<HIR::Expr> (condition),\n-\t\t\t       std::unique_ptr<HIR::BlockExpr> (block),\n-\t\t\t       std::unique_ptr<HIR::IfExpr> (conseq_if_expr),\n-\t\t\t       expr.get_locus ());\n+  translated = new HIR::IfExprConseqElse (\n+    mapping, std::unique_ptr<HIR::Expr> (condition),\n+    std::unique_ptr<HIR::BlockExpr> (block),\n+    std::unique_ptr<HIR::ExprWithBlock> (conseq_if_expr), expr.get_locus ());\n }\n \n void"}, {"sha": "f823e869fa8492b82cf4b4df11fef1a8f6f9febe", "filename": "gcc/rust/hir/rust-hir-dump.cc", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-hir-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -309,12 +309,6 @@ void\n Dump::visit (IfExprConseqElse &)\n {}\n void\n-Dump::visit (IfExprConseqIf &)\n-{}\n-void\n-Dump::visit (IfExprConseqIfLet &)\n-{}\n-void\n Dump::visit (IfLetExpr &)\n {}\n void"}, {"sha": "7aefb9e9a8dd5813f904d4c0c908af93d2577bba", "filename": "gcc/rust/hir/rust-hir-dump.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Frust-hir-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Frust-hir-dump.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -96,8 +96,6 @@ class Dump : public HIRFullVisitor\n   virtual void visit (ForLoopExpr &) override;\n   virtual void visit (IfExpr &) override;\n   virtual void visit (IfExprConseqElse &) override;\n-  virtual void visit (IfExprConseqIf &) override;\n-  virtual void visit (IfExprConseqIfLet &) override;\n   virtual void visit (IfLetExpr &) override;\n   virtual void visit (IfLetExprConseqElse &) override;\n   virtual void visit (IfLetExprConseqIf &) override;"}, {"sha": "9b54b24146b42b467648aafdfc6035fad2d28546", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 5, "deletions": 141, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -3276,15 +3276,15 @@ class IfExpr : public ExprWithBlock\n // If expression with an ending \"else\" expression HIR node (trailing)\n class IfExprConseqElse : public IfExpr\n {\n-  std::unique_ptr<BlockExpr> else_block;\n+  std::unique_ptr<ExprWithBlock> else_block;\n \n public:\n   std::string as_string () const override;\n \n   IfExprConseqElse (Analysis::NodeMapping mappings,\n \t\t    std::unique_ptr<Expr> condition,\n \t\t    std::unique_ptr<BlockExpr> if_block,\n-\t\t    std::unique_ptr<BlockExpr> else_block, Location locus)\n+\t\t    std::unique_ptr<ExprWithBlock> else_block, Location locus)\n     : IfExpr (std::move (mappings), std::move (condition), std::move (if_block),\n \t      locus),\n       else_block (std::move (else_block))\n@@ -3293,7 +3293,7 @@ class IfExprConseqElse : public IfExpr\n \n   // Copy constructor with clone\n   IfExprConseqElse (IfExprConseqElse const &other)\n-    : IfExpr (other), else_block (other.else_block->clone_block_expr ())\n+    : IfExpr (other), else_block (other.else_block->clone_expr_with_block ())\n   {}\n \n   // Overloaded assignment operator with cloning\n@@ -3302,7 +3302,7 @@ class IfExprConseqElse : public IfExpr\n     IfExpr::operator= (other);\n     // condition = other.condition->clone_expr();\n     // if_block = other.if_block->clone_block_expr();\n-    else_block = other.else_block->clone_block_expr ();\n+    else_block = other.else_block->clone_expr_with_block ();\n \n     return *this;\n   }\n@@ -3316,7 +3316,7 @@ class IfExprConseqElse : public IfExpr\n \n   void vis_else_block (HIRFullVisitor &vis) { else_block->accept_vis (vis); }\n \n-  BlockExpr *get_else_block () { return else_block.get (); }\n+  ExprWithBlock *get_else_block () { return else_block.get (); }\n \n protected:\n   /* Use covariance to implement clone function as returning this object rather\n@@ -3341,77 +3341,6 @@ class IfExprConseqElse : public IfExpr\n   }\n };\n \n-// If expression with an ending \"else if\" expression HIR node\n-class IfExprConseqIf : public IfExpr\n-{\n-  std::unique_ptr<IfExpr> conseq_if_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfExprConseqIf (Analysis::NodeMapping mappings,\n-\t\t  std::unique_ptr<Expr> condition,\n-\t\t  std::unique_ptr<BlockExpr> if_block,\n-\t\t  std::unique_ptr<IfExpr> conseq_if_expr, Location locus)\n-    : IfExpr (std::move (mappings), std::move (condition), std::move (if_block),\n-\t      locus),\n-      conseq_if_expr (std::move (conseq_if_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // Copy constructor with clone\n-  IfExprConseqIf (IfExprConseqIf const &other)\n-    : IfExpr (other), conseq_if_expr (other.conseq_if_expr->clone_if_expr ())\n-  {}\n-\n-  // Overloaded assignment operator to use clone\n-  IfExprConseqIf &operator= (IfExprConseqIf const &other)\n-  {\n-    IfExpr::operator= (other);\n-    // condition = other.condition->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    conseq_if_expr = other.conseq_if_expr->clone_if_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfExprConseqIf (IfExprConseqIf &&other) = default;\n-  IfExprConseqIf &operator= (IfExprConseqIf &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-  void vis_conseq_if_expr (HIRFullVisitor &vis)\n-  {\n-    conseq_if_expr->accept_vis (vis);\n-  }\n-\n-  IfExpr *get_conseq_if_expr () { return conseq_if_expr.get (); }\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIf *clone_expr_impl () const override\n-  {\n-    return new IfExprConseqIf (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIf *clone_expr_with_block_impl () const override\n-  {\n-    return new IfExprConseqIf (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIf *clone_if_expr_impl () const override\n-  {\n-    return new IfExprConseqIf (*this);\n-  }\n-};\n-\n // Basic \"if let\" expression HIR node with no else\n class IfLetExpr : public ExprWithBlock\n {\n@@ -3515,71 +3444,6 @@ class IfLetExpr : public ExprWithBlock\n   }\n };\n \n-// If expression with an ending \"else if let\" expression HIR node\n-class IfExprConseqIfLet : public IfExpr\n-{\n-  std::unique_ptr<IfLetExpr> if_let_expr;\n-\n-public:\n-  std::string as_string () const override;\n-\n-  IfExprConseqIfLet (Analysis::NodeMapping mappings,\n-\t\t     std::unique_ptr<Expr> condition,\n-\t\t     std::unique_ptr<BlockExpr> if_block,\n-\t\t     std::unique_ptr<IfLetExpr> conseq_if_let_expr,\n-\t\t     Location locus)\n-    : IfExpr (std::move (mappings), std::move (condition), std::move (if_block),\n-\t      locus),\n-      if_let_expr (std::move (conseq_if_let_expr))\n-  {}\n-  // outer attributes not allowed\n-\n-  // Copy constructor with clone\n-  IfExprConseqIfLet (IfExprConseqIfLet const &other)\n-    : IfExpr (other), if_let_expr (other.if_let_expr->clone_if_let_expr ())\n-  {}\n-\n-  // Overloaded assignment operator to use clone\n-  IfExprConseqIfLet &operator= (IfExprConseqIfLet const &other)\n-  {\n-    IfExpr::operator= (other);\n-    // condition = other.condition->clone_expr();\n-    // if_block = other.if_block->clone_block_expr();\n-    if_let_expr = other.if_let_expr->clone_if_let_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  IfExprConseqIfLet (IfExprConseqIfLet &&other) = default;\n-  IfExprConseqIfLet &operator= (IfExprConseqIfLet &&other) = default;\n-\n-  void accept_vis (HIRFullVisitor &vis) override;\n-  void accept_vis (HIRExpressionVisitor &vis) override;\n-\n-protected:\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIfLet *clone_expr_impl () const override\n-  {\n-    return new IfExprConseqIfLet (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIfLet *clone_expr_with_block_impl () const override\n-  {\n-    return new IfExprConseqIfLet (*this);\n-  }\n-\n-  /* Use covariance to implement clone function as returning this object rather\n-   * than base */\n-  IfExprConseqIfLet *clone_if_expr_impl () const override\n-  {\n-    return new IfExprConseqIfLet (*this);\n-  }\n-};\n-\n /* HIR node representing \"if let\" expression with an \"else\" expression at the\n  * end */\n class IfLetExprConseqElse : public IfLetExpr"}, {"sha": "058e62088c42b00c1f9edf5bed7bed6d378410f0", "filename": "gcc/rust/hir/tree/rust-hir-full-decls.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-full-decls.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -117,9 +117,7 @@ class WhileLetLoopExpr;\n class ForLoopExpr;\n class IfExpr;\n class IfExprConseqElse;\n-class IfExprConseqIf;\n class IfLetExpr;\n-class IfExprConseqIfLet;\n class IfLetExprConseqElse;\n class IfLetExprConseqIf;\n class IfLetExprConseqIfLet;"}, {"sha": "494365e1231cc1ceab146006e5c0f30cab2930f1", "filename": "gcc/rust/hir/tree/rust-hir-visitor.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-visitor.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -81,8 +81,6 @@ class HIRFullVisitor\n   virtual void visit (ForLoopExpr &expr) = 0;\n   virtual void visit (IfExpr &expr) = 0;\n   virtual void visit (IfExprConseqElse &expr) = 0;\n-  virtual void visit (IfExprConseqIf &expr) = 0;\n-  virtual void visit (IfExprConseqIfLet &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExprConseqIf &expr) = 0;\n@@ -224,8 +222,6 @@ class HIRFullVisitorBase : public HIRFullVisitor\n   virtual void visit (ForLoopExpr &) override {}\n   virtual void visit (IfExpr &) override {}\n   virtual void visit (IfExprConseqElse &) override {}\n-  virtual void visit (IfExprConseqIf &) override {}\n-  virtual void visit (IfExprConseqIfLet &) override {}\n   virtual void visit (IfLetExpr &) override {}\n   virtual void visit (IfLetExprConseqElse &) override {}\n   virtual void visit (IfLetExprConseqIf &) override {}\n@@ -460,8 +456,6 @@ class HIRExpressionVisitor\n   virtual void visit (ForLoopExpr &expr) = 0;\n   virtual void visit (IfExpr &expr) = 0;\n   virtual void visit (IfExprConseqElse &expr) = 0;\n-  virtual void visit (IfExprConseqIf &expr) = 0;\n-  virtual void visit (IfExprConseqIfLet &expr) = 0;\n   virtual void visit (IfLetExpr &expr) = 0;\n   virtual void visit (IfLetExprConseqElse &expr) = 0;\n   virtual void visit (IfLetExprConseqIf &expr) = 0;"}, {"sha": "c0532d8886077b8fec9c1de2614349b1c16b7c26", "filename": "gcc/rust/hir/tree/rust-hir.cc", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -1525,27 +1525,7 @@ IfExprConseqElse::as_string () const\n {\n   std::string str = IfExpr::as_string ();\n \n-  str += \"\\n Else block expr: \" + else_block->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfExprConseqIf::as_string () const\n-{\n-  std::string str = IfExpr::as_string ();\n-\n-  str += \"\\n Else if expr: \\n  \" + conseq_if_expr->as_string ();\n-\n-  return str;\n-}\n-\n-std::string\n-IfExprConseqIfLet::as_string () const\n-{\n-  std::string str = IfExpr::as_string ();\n-\n-  str += \"\\n Else if let expr: \\n  \" + if_let_expr->as_string ();\n+  str += \"\\n Else expr: \" + else_block->as_string ();\n \n   return str;\n }\n@@ -4137,18 +4117,6 @@ IfExprConseqElse::accept_vis (HIRFullVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfExprConseqIf::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfExprConseqIfLet::accept_vis (HIRFullVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n IfLetExpr::accept_vis (HIRFullVisitor &vis)\n {\n@@ -4947,18 +4915,6 @@ IfLetExpr::accept_vis (HIRExpressionVisitor &vis)\n   vis.visit (*this);\n }\n \n-void\n-IfExprConseqIfLet::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n-void\n-IfExprConseqIf::accept_vis (HIRExpressionVisitor &vis)\n-{\n-  vis.visit (*this);\n-}\n-\n void\n IfExprConseqElse::accept_vis (HIRExpressionVisitor &vis)\n {"}, {"sha": "117682b8a6bf58b9afcf0630a82cd3a107287539", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.cc", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.cc?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -469,29 +469,6 @@ TypeCheckExpr::visit (HIR::IfExprConseqElse &expr)\n     }\n }\n \n-void\n-TypeCheckExpr::visit (HIR::IfExprConseqIf &expr)\n-{\n-  TypeCheckExpr::Resolve (expr.get_if_condition ());\n-  auto if_blk_resolved = TypeCheckExpr::Resolve (expr.get_if_block ());\n-  auto else_blk_resolved = TypeCheckExpr::Resolve (expr.get_conseq_if_expr ());\n-\n-  if (if_blk_resolved->get_kind () == TyTy::NEVER)\n-    infered = else_blk_resolved;\n-  else if (else_blk_resolved->get_kind () == TyTy::NEVER)\n-    infered = if_blk_resolved;\n-  else\n-    {\n-      infered = unify_site (\n-\texpr.get_mappings ().get_hirid (),\n-\tTyTy::TyWithLocation (if_blk_resolved,\n-\t\t\t      expr.get_if_block ()->get_locus ()),\n-\tTyTy::TyWithLocation (else_blk_resolved,\n-\t\t\t      expr.get_conseq_if_expr ()->get_locus ()),\n-\texpr.get_locus ());\n-    }\n-}\n-\n void\n TypeCheckExpr::visit (HIR::IfLetExpr &expr)\n {"}, {"sha": "1d4ce4a29280653f9e129876a8df5e3384ab402e", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=3d4b1871910e4d7b4ef171f3fdeab5ec0e78a167", "patch": "@@ -44,7 +44,6 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::NegationExpr &expr) override;\n   void visit (HIR::IfExpr &expr) override;\n   void visit (HIR::IfExprConseqElse &expr) override;\n-  void visit (HIR::IfExprConseqIf &expr) override;\n   void visit (HIR::IfLetExpr &expr) override;\n   void visit (HIR::BlockExpr &expr) override;\n   void visit (HIR::UnsafeBlockExpr &expr) override;\n@@ -76,7 +75,6 @@ class TypeCheckExpr : private TypeCheckBase, private HIR::HIRExpressionVisitor\n   void visit (HIR::RangeToInclExpr &) override {}\n   void visit (HIR::WhileLetLoopExpr &) override {}\n   void visit (HIR::ForLoopExpr &) override {}\n-  void visit (HIR::IfExprConseqIfLet &) override {}\n   void visit (HIR::IfLetExprConseqElse &) override {}\n   void visit (HIR::IfLetExprConseqIf &) override {}\n   void visit (HIR::IfLetExprConseqIfLet &) override {}"}]}