{"sha": "9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIzMzZmYTQ0NzVmODUzNmQyZDc3YmM5NjU4YjE4ZjY0NjViZDlmNA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-11-25T12:57:02Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-11-25T12:57:02Z"}, "message": "re PR target/24998 (Build failure: undefined symbol __floatunsitf)\n\n\tPR middle-end/24998\n\t* config/sparc/sparc.c (sparc_init_libfuncs): Use _Q_utoq and\n\t_Q_ulltoq for unsigned conversions from SImode and DImode to\n\tTFmode.\n\ntestsuite:\n\t* gcc.dg/torture/fp-int-convert-float.c,\n\tgcc.dg/torture/fp-int-convert-double.c,\n\tgcc.dg/torture/fp-int-convert-long-double.c,\n\tgcc.dg/torture/fp-int-convert-timode.c,\n\tgcc.dg/torture/fp-int-convert-float80.c,\n\tgcc.dg/torture/fp-int-convert-float80-timode.c,\n\tgcc.dg/torture/fp-int-convert-float128.c,\n\tgcc.dg/torture/fp-int-convert-float128-timode.c,\n\tgcc.dg/torture/fp-int-convert.h: New files.\n\nFrom-SVN: r107502", "tree": {"sha": "f028a285e56c08a2bdd4279d3e51e5869f0d94eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f028a285e56c08a2bdd4279d3e51e5869f0d94eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdfc2f2b34c477a3058ccab70eba247f0ad08e95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfc2f2b34c477a3058ccab70eba247f0ad08e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfc2f2b34c477a3058ccab70eba247f0ad08e95"}], "stats": {"total": 259, "additions": 259, "deletions": 0}, "files": [{"sha": "1f679b13dbafe58c7ea45d497fe96c6b88bc17c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -1,3 +1,10 @@\n+2005-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/24998\n+\t* config/sparc/sparc.c (sparc_init_libfuncs): Use _Q_utoq and\n+\t_Q_ulltoq for unsigned conversions from SImode and DImode to\n+\tTFmode.\n+\n 2005-11-25  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/ppc64-fp.c (__floatunditf): New function."}, {"sha": "e0ca3979d40da3c8b12ce87646070430f85840bd", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -7707,12 +7707,14 @@ sparc_init_libfuncs (void)\n       set_conv_libfunc (sfix_optab,   SImode, TFmode, \"_Q_qtoi\");\n       set_conv_libfunc (ufix_optab,   SImode, TFmode, \"_Q_qtou\");\n       set_conv_libfunc (sfloat_optab, TFmode, SImode, \"_Q_itoq\");\n+      set_conv_libfunc (ufloat_optab, TFmode, SImode, \"_Q_utoq\");\n \n       if (DITF_CONVERSION_LIBFUNCS)\n \t{\n \t  set_conv_libfunc (sfix_optab,   DImode, TFmode, \"_Q_qtoll\");\n \t  set_conv_libfunc (ufix_optab,   DImode, TFmode, \"_Q_qtoull\");\n \t  set_conv_libfunc (sfloat_optab, TFmode, DImode, \"_Q_lltoq\");\n+\t  set_conv_libfunc (ufloat_optab, TFmode, DImode, \"_Q_ulltoq\");\n \t}\n \n       if (SUN_CONVERSION_LIBFUNCS)"}, {"sha": "10263032a91e2d30ea9739a05fbad4e32d351291", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -1,3 +1,16 @@\n+2005-11-25  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR middle-end/24998\n+\t* gcc.dg/torture/fp-int-convert-float.c,\n+\tgcc.dg/torture/fp-int-convert-double.c,\n+\tgcc.dg/torture/fp-int-convert-long-double.c,\n+\tgcc.dg/torture/fp-int-convert-timode.c,\n+\tgcc.dg/torture/fp-int-convert-float80.c,\n+\tgcc.dg/torture/fp-int-convert-float80-timode.c,\n+\tgcc.dg/torture/fp-int-convert-float128.c,\n+\tgcc.dg/torture/fp-int-convert-float128-timode.c,\n+\tgcc.dg/torture/fp-int-convert.h: New files.\n+\n 2005-11-24  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR middle-end/24989"}, {"sha": "39ec3cde1104988e82b69d493756d9fae8ae7223", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-double.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-double.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,18 @@\n+/* Test floating-point conversions.  Standard types and double.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+#include <float.h>\n+#include \"fp-int-convert.h\"\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, double, DBL_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, double, DBL_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, double, DBL_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, double, DBL_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, double, DBL_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "7fca1df7adf2479b55093c9b579a738410fa0a2a", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,18 @@\n+/* Test floating-point conversions.  Standard types and float.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+#include <float.h>\n+#include \"fp-int-convert.h\"\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, float, FLT_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, float, FLT_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, float, FLT_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, float, FLT_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, float, FLT_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "30250d86d9e8e93360c3ce4dddfc93b790cf4836", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128-timode.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128-timode.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,18 @@\n+/* Test floating-point conversions.  __float128 type with TImode.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-xfail-if \"\" { i?86-*-* x86_64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mmmx\" { target { i?86-*-* && ilp32 } } } */\n+/* { dg-options \"-mmmx\" { target { x86_64-*-* && ilp32 } } } */\n+\n+#include \"fp-int-convert.h\"\n+\n+#define FLOAT128_MANT_DIG 113\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(TItype, UTItype, __float128, FLOAT128_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "a78f6862e69501f0f2169ea8f08b76d7762944bc", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float128.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float128.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,22 @@\n+/* Test floating-point conversions.  __float128 type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-xfail-if \"\" { i?86-*-* x86_64-*-* } { \"*\" } { \"\" } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mmmx\" { target { i?86-*-* && ilp32 } } } */\n+/* { dg-options \"-mmmx\" { target { x86_64-*-* && ilp32 } } } */\n+\n+#include \"fp-int-convert.h\"\n+\n+#define FLOAT128_MANT_DIG 113\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, __float128, FLOAT128_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, __float128, FLOAT128_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, __float128, FLOAT128_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, __float128, FLOAT128_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, __float128, FLOAT128_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "e9436ba5ed476b8f36fd82cc206f5678de3cd5e1", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float80-timode.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80-timode.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,17 @@\n+/* Test floating-point conversions.  __float80 type with TImode.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mmmx\" { target { i?86-*-* && ilp32 } } } */\n+/* { dg-options \"-mmmx\" { target { x86_64-*-* && ilp32 } } } */\n+\n+#include \"fp-int-convert.h\"\n+\n+#define FLOAT80_MANT_DIG 64\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(TItype, UTItype, __float80, FLOAT80_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "13a924332634ea6ac300266f20fcf88b567d9c89", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-float80.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-float80.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,21 @@\n+/* Test floating-point conversions.  __float80 type.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-options \"\" } */\n+/* { dg-options \"-mmmx\" { target { i?86-*-* && ilp32 } } } */\n+/* { dg-options \"-mmmx\" { target { x86_64-*-* && ilp32 } } } */\n+\n+#include \"fp-int-convert.h\"\n+\n+#define FLOAT80_MANT_DIG 64\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, __float80, FLOAT80_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, __float80, FLOAT80_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, __float80, FLOAT80_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, __float80, FLOAT80_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, __float80, FLOAT80_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "bb189a34c323e6554b8eca99435a38a39c3eee05", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-long-double.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-long-double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-long-double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-long-double.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,18 @@\n+/* Test floating-point conversions.  Standard types and long double.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run } */\n+/* { dg-options \"\" } */\n+\n+#include <float.h>\n+#include \"fp-int-convert.h\"\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(signed char, unsigned char, long double, LDBL_MANT_DIG);\n+  TEST_I_F(signed short, unsigned short, long double, LDBL_MANT_DIG);\n+  TEST_I_F(signed int, unsigned int, long double, LDBL_MANT_DIG);\n+  TEST_I_F(signed long, unsigned long, long double, LDBL_MANT_DIG);\n+  TEST_I_F(signed long long, unsigned long long, long double, LDBL_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "11c02a321cab08de53f84810c21e23db8ac352fd", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert-timode.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert-timode.c?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,16 @@\n+/* Test floating-point conversions.  TImode types.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do run { xfail *-*-* } } */\n+/* { dg-options \"\" } */\n+\n+#include <float.h>\n+#include \"fp-int-convert.h\"\n+\n+int\n+main (void)\n+{\n+  TEST_I_F(TItype, UTItype, float, FLT_MANT_DIG);\n+  TEST_I_F(TItype, UTItype, double, DBL_MANT_DIG);\n+  TEST_I_F(TItype, UTItype, long double, LDBL_MANT_DIG);\n+  exit (0);\n+}"}, {"sha": "c4cb5fbb2d35eba85d4359b9c696572a895bbab8", "filename": "gcc/testsuite/gcc.dg/torture/fp-int-convert.h", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b336fa4475f8536d2d77bc9658b18f6465bd9f4/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Ffp-int-convert.h?ref=9b336fa4475f8536d2d77bc9658b18f6465bd9f4", "patch": "@@ -0,0 +1,89 @@\n+/* Test floating-point conversions.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+\n+#include <limits.h>\n+extern void abort (void);\n+extern void exit (int);\n+\n+/* Not all platforms support TImode integers; logic as in\n+   gcc.dg/titype-1.c.  */\n+#if defined(__LP64__) && !defined(__hppa__)\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+#else\n+typedef long TItype;\n+typedef unsigned long UTItype;\n+#endif\n+\n+/* TEST_I_F(I, U, F, P) tests conversions between the pair of signed\n+   and unsigned integer types I and U and the floating-point type F,\n+   where P is the binary precision of the floating point type.  We\n+   test conversions of the values 0, 1, 0x7...f, 0x8...0, 0xf...f.  We\n+   also test conversions of values half way inbetween two\n+   representable values (rounding both ways), just above half way, and\n+   just below half way.  */\n+#define TEST_I_F(I, U, F, P)\t\t\t\t\t\\\n+do {\t\t\t\t\t\t\t\t\\\n+  TEST_I_F_VAL (I, F, (I)0, 1);\t\t\t\t\t\\\n+  TEST_I_F_VAL (I, F, (I)1, 1);\t\t\t\t\t\\\n+  TEST_I_F_VAL (I, F, (I)(((U)~(U)0) >> 1), P_OK1 (P, I));\t\\\n+  TEST_I_F_VAL (I, F, (I)(U)~(((U)~(U)0) >> 1), 1);\t\t\\\n+  TEST_I_F_VAL (I, F, (I)(U)~(U)0, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL0S (P, I), P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL0S (P, I) + 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL0S (P, I) - 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL1S (P, I), P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL1S (P, I) + 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, HVAL1S (P, I) - 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL0S (P, I), P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL0S (P, I) + 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL0S (P, I) - 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL1S (P, I), P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL1S (P, I) + 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (I, F, -HVAL1S (P, I) - 1, P_OK (P, I));\t\t\\\n+  TEST_I_F_VAL (U, F, (U)0, 1);\t\t\t\t\t\\\n+  TEST_I_F_VAL (U, F, (U)1, 1);\t\t\t\t\t\\\n+  TEST_I_F_VAL (U, F, (U)(((U)~(U)0) >> 1), P_OK1 (P, U));\t\\\n+  TEST_I_F_VAL (U, F, (U)~(((U)~(U)0) >> 1), 1);\t\t\\\n+  TEST_I_F_VAL (U, F, (U)~(U)0, P_OK (P, U));\t\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL0U (P, U), P_OK (P, U));\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL0U (P, U) + 1, P_OK (P, U));\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL0U (P, U) - 1, P_OK (P, U));\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL1U (P, U), P_OK (P, U));\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL1U (P, U) + 1, P_OK (P, U));\t\t\\\n+  TEST_I_F_VAL (U, F, HVAL1U (P, U) - 1, P_OK (P, U));\t\t\\\n+} while (0)\n+\n+#define P_OK(P, T) ((P) >= sizeof(T) * CHAR_BIT)\n+#define P_OK1(P, T) ((P) >= sizeof(T) * CHAR_BIT - 1)\n+#define HVAL0U(P, U) (U)(P_OK (P, U)\t\t\t\t\t \\\n+\t\t\t ? (U)1\t\t\t\t\t\t \\\n+\t\t\t : (((U)1 << (sizeof(U) * CHAR_BIT - 1))\t \\\n+\t\t\t    + ((U)1 << (sizeof(U) * CHAR_BIT - 1 - P))))\n+#define HVAL1U(P, U) (U)(P_OK (P, U)\t\t\t\t\t \\\n+\t\t\t ? (U)1\t\t\t\t\t\t \\\n+\t\t\t : (((U)1 << (sizeof(U) * CHAR_BIT - 1))\t \\\n+\t\t\t    + ((U)3 << (sizeof(U) * CHAR_BIT - 1 - P))))\n+#define HVAL0S(P, S) (S)(P_OK1 (P, S)\t\t\t\t\t \\\n+\t\t\t ? (S)1\t\t\t\t\t\t \\\n+\t\t\t : (((S)1 << (sizeof(S) * CHAR_BIT - 2))\t \\\n+\t\t\t    + ((S)1 << (sizeof(S) * CHAR_BIT - 2 - P))))\n+#define HVAL1S(P, S) (S)(P_OK1 (P, S)\t\t\t\t\t \\\n+\t\t\t ? (S)1\t\t\t\t\t\t \\\n+\t\t\t : (((S)1 << (sizeof(S) * CHAR_BIT - 2))\t \\\n+\t\t\t    + ((S)3 << (sizeof(S) * CHAR_BIT - 2 - P))))\n+\n+#define TEST_I_F_VAL(IT, FT, VAL, PREC_OK)\t\t\\\n+do {\t\t\t\t\t\t\t\\\n+  static volatile IT ivin, ivout;\t\t\t\\\n+  static volatile FT fv1, fv2;\t\t\t\t\\\n+  ivin = (VAL);\t\t\t\t\t\t\\\n+  fv1 = (VAL);\t\t\t\t\t\t\\\n+  fv2 = ivin;\t\t\t\t\t\t\\\n+  ivout = fv2;\t\t\t\t\t\t\\\n+  if (ivin != (VAL)\t\t\t\t\t\\\n+      || ((PREC_OK) && ivout != ivin)\t\t\t\\\n+      || ((PREC_OK) && ivout != (VAL))\t\t\t\\\n+      || fv1 != (VAL) || fv2 != (VAL) || fv1 != fv2)\t\\\n+    abort ();\t\t\t\t\t\t\\\n+} while (0)"}]}