{"sha": "5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNiMjVjOWM3YjY1ODFmNjIxNTE3NDFlM2NlYjJjNWU1N2RlZjMwZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2012-08-31T02:49:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2012-08-31T02:49:52Z"}, "message": "pt.c (get_class_bindings): Call coerce_template_parms.\n\n\t* pt.c (get_class_bindings): Call coerce_template_parms.  Add\n\tmain_tmpl parameter.\n\t(more_specialized_class): Add main_tmpl parameter.\n\t(most_specialized_class): Adjust calls.\n\nFrom-SVN: r190827", "tree": {"sha": "e27c031735360cf1baf70bce53a07cdd94813a70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e27c031735360cf1baf70bce53a07cdd94813a70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cb25c9c7b6581f62151741e3ceb2c5e57def30e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fdf565deae60707c7484c3d9226ff2ca5622b263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdf565deae60707c7484c3d9226ff2ca5622b263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdf565deae60707c7484c3d9226ff2ca5622b263"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "f334778cfbecbeb0c941ec04237eba18e8452e8d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb25c9c7b6581f62151741e3ceb2c5e57def30e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb25c9c7b6581f62151741e3ceb2c5e57def30e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "patch": "@@ -1,5 +1,10 @@\n 2012-08-30  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (get_class_bindings): Call coerce_template_parms.  Add\n+\tmain_tmpl parameter.\n+\t(more_specialized_class): Add main_tmpl parameter.\n+\t(most_specialized_class): Adjust calls.\n+\n \t* decl.c (cp_finish_decl): Check for invalid multiple initializers\n \teven if the initializer is dependent.\n "}, {"sha": "792e9d131e7c764b6a2a3da904cb58ec8565a808", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cb25c9c7b6581f62151741e3ceb2c5e57def30e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cb25c9c7b6581f62151741e3ceb2c5e57def30e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=5cb25c9c7b6581f62151741e3ceb2c5e57def30e", "patch": "@@ -128,7 +128,7 @@ static int unify (tree, tree, tree, tree, int, bool);\n static void add_pending_template (tree);\n static tree reopen_tinst_level (struct tinst_level *);\n static tree tsubst_initializer_list (tree, tree);\n-static tree get_class_bindings (tree, tree, tree);\n+static tree get_class_bindings (tree, tree, tree, tree);\n static tree coerce_template_parms (tree, tree, tree, tsubst_flags_t,\n \t\t\t\t   bool, bool);\n static void tsubst_enum\t(tree, tree, tree);\n@@ -17087,7 +17087,8 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n     return -1;\n }\n \n-/* Determine which of two partial specializations is more specialized.\n+/* Determine which of two partial specializations of MAIN_TMPL is more\n+   specialized.\n \n    PAT1 is a TREE_LIST whose TREE_TYPE is the _TYPE node corresponding\n    to the first partial specialization.  The TREE_VALUE is the\n@@ -17102,7 +17103,7 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n    two templates is more specialized.  */\n \n static int\n-more_specialized_class (tree pat1, tree pat2)\n+more_specialized_class (tree main_tmpl, tree pat1, tree pat2)\n {\n   tree targs;\n   tree tmpl1, tmpl2;\n@@ -17117,7 +17118,7 @@ more_specialized_class (tree pat1, tree pat2)\n      types in the arguments, and we need our dependency check functions\n      to behave correctly.  */\n   ++processing_template_decl;\n-  targs = get_class_bindings (TREE_VALUE (pat1),\n+  targs = get_class_bindings (main_tmpl, TREE_VALUE (pat1),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl1),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl2));\n   if (targs)\n@@ -17126,7 +17127,7 @@ more_specialized_class (tree pat1, tree pat2)\n       any_deductions = true;\n     }\n \n-  targs = get_class_bindings (TREE_VALUE (pat2),\n+  targs = get_class_bindings (main_tmpl, TREE_VALUE (pat2),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl2),\n \t\t\t      CLASSTYPE_TI_ARGS (tmpl1));\n   if (targs)\n@@ -17205,8 +17206,8 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n   return targs;\n }\n \n-/* Return the innermost template arguments that, when applied to a\n-   template specialization whose innermost template parameters are\n+/* Return the innermost template arguments that, when applied to a partial\n+   specialization of MAIN_TMPL whose innermost template parameters are\n    TPARMS, and whose specialization arguments are SPEC_ARGS, yield the\n    ARGS.\n \n@@ -17221,7 +17222,7 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n    is bound to `double'.  */\n \n static tree\n-get_class_bindings (tree tparms, tree spec_args, tree args)\n+get_class_bindings (tree main_tmpl, tree tparms, tree spec_args, tree args)\n {\n   int i, ntparms = TREE_VEC_LENGTH (tparms);\n   tree deduced_args;\n@@ -17261,6 +17262,9 @@ get_class_bindings (tree tparms, tree spec_args, tree args)\n      `T' is `A' but unify () does not check whether `typename T::X'\n      is `int'.  */\n   spec_args = tsubst (spec_args, deduced_args, tf_none, NULL_TREE);\n+  spec_args = coerce_template_parms (DECL_INNERMOST_TEMPLATE_PARMS (main_tmpl),\n+\t\t\t\t     spec_args, main_tmpl,\n+\t\t\t\t     tf_none, false, false);\n   if (spec_args == error_mark_node\n       /* We only need to check the innermost arguments; the other\n \t arguments will always agree.  */\n@@ -17485,7 +17489,7 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n       if (partial_spec_args == error_mark_node)\n \treturn error_mark_node;\n \n-      spec_args = get_class_bindings (parms,\n+      spec_args = get_class_bindings (tmpl, parms,\n \t\t\t\t      partial_spec_args,\n \t\t\t\t      args);\n       if (spec_args)\n@@ -17506,7 +17510,7 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n   t = TREE_CHAIN (t);\n   for (; t; t = TREE_CHAIN (t))\n     {\n-      fate = more_specialized_class (champ, t);\n+      fate = more_specialized_class (tmpl, champ, t);\n       if (fate == 1)\n \t;\n       else\n@@ -17527,7 +17531,7 @@ most_specialized_class (tree type, tree tmpl, tsubst_flags_t complain)\n   if (!ambiguous_p)\n     for (t = list; t && t != champ; t = TREE_CHAIN (t))\n       {\n-\tfate = more_specialized_class (champ, t);\n+\tfate = more_specialized_class (tmpl, champ, t);\n \tif (fate != 1)\n \t  {\n \t    ambiguous_p = true;"}]}