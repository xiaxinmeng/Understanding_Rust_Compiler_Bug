{"sha": "bf8f12c2a6b7c557031b431909fc831a6f6d7763", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY4ZjEyYzJhNmI3YzU1NzAzMWI0MzE5MDlmYzgzMWE2ZjZkNzc2Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:40:50Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-23T12:40:50Z"}, "message": "[multiple changes]\n\n2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* debug.adb: Switch -gnatd.5 is no longer in use, remove the\n\tassociated documentation.\n\t* exp_dbug.adb (Get_External_Name): Do not add a special prefix\n\tfor ignored Ghost entities or when switch -gnatd.5 is enabled.\n\t* exp_dbug.ads Remove the documentation concerning the encoding\n\tof ignored Ghost entities.\n\n2015-10-23  Bob Duff  <duff@adacore.com>\n\n\t* a-exextr.adb (Notify_Exception): For Unhandled_Raise_In_Main,\n\tmimic the output from Ada.Exceptions.Last_Chance_Handler; don't\n\tprint \"Exception raised\".\n\t* s-stalib.ads, s-exctra.ads, s-exctra.adb: Add\n\tUnhandled_Raise_In_Main to types Exception_Trace_Kind/Trace_Kind.\n\nFrom-SVN: r229246", "tree": {"sha": "a452c80d9e404fbb92084ad2d5151b3dd861fd1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a452c80d9e404fbb92084ad2d5151b3dd861fd1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf8f12c2a6b7c557031b431909fc831a6f6d7763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8f12c2a6b7c557031b431909fc831a6f6d7763", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8f12c2a6b7c557031b431909fc831a6f6d7763", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8f12c2a6b7c557031b431909fc831a6f6d7763/comments", "author": null, "committer": null, "parents": [{"sha": "af29617a50b430ad3e9f2842fe31335d4488d1d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af29617a50b430ad3e9f2842fe31335d4488d1d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af29617a50b430ad3e9f2842fe31335d4488d1d3"}], "stats": {"total": 109, "additions": 58, "deletions": 51}, "files": [{"sha": "bf8ad25c85b906b4957614b19fd8a4f9aede661c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -1,3 +1,20 @@\n+2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* debug.adb: Switch -gnatd.5 is no longer in use, remove the\n+\tassociated documentation.\n+\t* exp_dbug.adb (Get_External_Name): Do not add a special prefix\n+\tfor ignored Ghost entities or when switch -gnatd.5 is enabled.\n+\t* exp_dbug.ads Remove the documentation concerning the encoding\n+\tof ignored Ghost entities.\n+\n+2015-10-23  Bob Duff  <duff@adacore.com>\n+\n+\t* a-exextr.adb (Notify_Exception): For Unhandled_Raise_In_Main,\n+\tmimic the output from Ada.Exceptions.Last_Chance_Handler; don't\n+\tprint \"Exception raised\".\n+\t* s-stalib.ads, s-exctra.ads, s-exctra.adb: Add\n+\tUnhandled_Raise_In_Main to types Exception_Trace_Kind/Trace_Kind.\n+\n 2015-10-23  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_attr.adb, freeze.adb, sem_attr.adb, exp_aggr.adb,"}, {"sha": "1284efa690803a53095f267fbab3d25da3594e96", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -85,20 +85,25 @@ package body Exception_Traces is\n       if not Excep.Id.Not_Handled_By_Others\n         and then\n           (Exception_Trace = Every_Raise\n-            or else (Exception_Trace = Unhandled_Raise and then Is_Unhandled))\n+            or else (Is_Unhandled\n+                       and then (Exception_Trace = Unhandled_Raise\n+                         or else Exception_Trace = Unhandled_Raise_In_Main)))\n       then\n          --  Exception trace messages need to be protected when several tasks\n          --  can issue them at the same time.\n \n          Lock_Task.all;\n          To_Stderr (Nline);\n \n-         if Is_Unhandled then\n-            To_Stderr (\"Unhandled \");\n+         if Exception_Trace /= Unhandled_Raise_In_Main then\n+            if Is_Unhandled then\n+               To_Stderr (\"Unhandled \");\n+            end if;\n+\n+            To_Stderr (\"Exception raised\");\n+            To_Stderr (Nline);\n          end if;\n \n-         To_Stderr (\"Exception raised\");\n-         To_Stderr (Nline);\n          To_Stderr (Exception_Information (Excep.all));\n          Unlock_Task.all;\n       end if;\n@@ -170,8 +175,8 @@ package body Exception_Traces is\n    --  The bulk of exception traces output is centralized in Notify_Exception,\n    --  for both the Handled and Unhandled cases. Extra task specific output is\n    --  triggered in the task wrapper for unhandled occurrences in tasks. It is\n-   --  not performed in this unit to avoid dragging dependencies against the\n-   --  tasking units here.\n+   --  not performed in this unit to avoid dependencies on the tasking units\n+   --  here.\n \n    --  We used to rely on the output performed by Unhanded_Exception_Terminate\n    --  for the case of an unhandled occurrence in the environment thread, and\n@@ -191,12 +196,4 @@ package body Exception_Traces is\n    --  Today's solution has the advantage of simplicity and better isolates\n    --  the Exception_Traces machinery.\n \n-   --  It currently outputs the information about unhandled exceptions twice\n-   --  in the environment thread, once in the notification routine and once in\n-   --  the termination routine. Avoiding the second output is possible but so\n-   --  far has been considered undesirable. It would mean changing the order\n-   --  of outputs between the two runs with or without exception traces, while\n-   --  it seems preferable to only have additional outputs in the former\n-   --  case.\n-\n end Exception_Traces;"}, {"sha": "29872b630a068f6df109dfa22b19148adcc73f90", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -159,7 +159,7 @@ package body Debug is\n    --  d.2  Allow statements in declarative part\n    --  d.3  Output debugging information from Exp_Unst\n    --  d.4\n-   --  d.5  Generate Ghost external sumbols regardless of Ghost policy\n+   --  d.5\n    --  d.6\n    --  d.7\n    --  d.8\n@@ -762,12 +762,6 @@ package body Debug is\n    --  d.3  Output debugging information from Exp_Unst, including the name of\n    --       any unreachable subprograms that get deleted.\n \n-   --  d.5  Generate specialized external symbols for Ghost entities where the\n-   --       name of the entity is prefixed by \"_ghost_\" regardless of whether\n-   --       the Ghost policy is Check or Ignore. WARNING: This switch may cause\n-   --       linking issues related to Ghost entities declared with Ghost policy\n-   --       Check.\n-\n    ------------------------------------------\n    -- Documentation for Binder Debug Flags --\n    ------------------------------------------"}, {"sha": "2c1d5180faac0f4e1ba92ec836592344d2720925", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -776,18 +776,6 @@ package body Exp_Dbug is\n          E := Defining_Identifier (Entity);\n       end if;\n \n-      --  Add a special prefix to distinguish ignored Ghost entities. These\n-      --  entities should not leak in the \"living\" space and they should be\n-      --  removed by the compiler in a post-processing pass. The prefix is\n-      --  also added to any kind of Ghost entity when switch -gnatd.5 is\n-      --  enabled.\n-\n-      if Is_Ignored_Ghost_Entity (E)\n-        or else (Debug_Flag_Dot_5 and Is_Ghost_Entity (E))\n-      then\n-         Add_Str_To_Name_Buffer (\"___ghost_\");\n-      end if;\n-\n       --  Case of interface name being used\n \n       if Ekind_In (E, E_Constant,"}, {"sha": "827f149f705d64521912e843c239a6d90cdd2c3f", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -76,12 +76,6 @@ package Exp_Dbug is\n    --  qualification for such entities. In particular this means that direct\n    --  local variables of a procedure are not qualified.\n \n-   --  For ignored Ghost entities, the encoding adds a prefix \"___ghost_\" to\n-   --  aid the detection of leaks in the \"living\" space. Ignored Ghost entities\n-   --  and any code associated with them should be removed by the compiler in a\n-   --  post-processing pass. As a result, object files should not contain any\n-   --  occurrences of this prefix.\n-\n    --  As an example of the local name convention, consider a procedure V.W\n    --  with a local variable X, and a nested block Y containing an entity Z.\n    --  The fully qualified names of the entities X and Z are:"}, {"sha": "1d6cabfcc82ae0fa1e3c9d8f36319b6a123f997a", "filename": "gcc/ada/s-exctra.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-exctra.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-exctra.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctra.adb?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -114,6 +114,8 @@ package body System.Exception_Traces is\n             Exception_Trace := Every_Raise;\n          when Unhandled_Raise =>\n             Exception_Trace := Unhandled_Raise;\n+         when Unhandled_Raise_In_Main =>\n+            Exception_Trace := Unhandled_Raise_In_Main;\n       end case;\n    end Trace_On;\n "}, {"sha": "25c2f729dbc2511628a290ce23ccc8555027765a", "filename": "gcc/ada/s-exctra.ads", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-exctra.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-exctra.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-exctra.ads?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2014, AdaCore                     --\n+--                     Copyright (C) 2000-2015, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -61,10 +61,14 @@ package System.Exception_Traces is\n       --  explicit or due to a specific language rule, within the context of a\n       --  task or not.\n \n-      Unhandled_Raise\n+      Unhandled_Raise,\n       --  Denotes the raise events corresponding to exceptions for which there\n-      --  is no user defined handler, in particular, when a task dies due to an\n-      --  unhandled exception.\n+      --  is no user defined handler. This includes unhandled exceptions in\n+      --  task bodies.\n+\n+      Unhandled_Raise_In_Main\n+      --  Same as Unhandled_Raise, except exceptions in task bodies are not\n+      --  included.\n      );\n \n    --  The following procedures can be used to activate and deactivate"}, {"sha": "5cfd6b37e0386ef029d80c2d872a8eac7b7f3cb8", "filename": "gcc/ada/s-stalib.ads", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-stalib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf8f12c2a6b7c557031b431909fc831a6f6d7763/gcc%2Fada%2Fs-stalib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-stalib.ads?ref=bf8f12c2a6b7c557031b431909fc831a6f6d7763", "patch": "@@ -220,12 +220,23 @@ package System.Standard_Library is\n       --  This is the default behavior.\n \n       Every_Raise,\n-      --  Denotes every possible raise event, either explicit or due to\n-      --  a specific language rule, within the context of a task or not.\n-\n-      Unhandled_Raise\n-      --  Denotes the raise events corresponding to exceptions for which\n-      --  there is no user defined handler.\n+      --  Denotes the initial raise event for any exception occurrence, either\n+      --  explicit or due to a specific language rule, within the context of a\n+      --  task or not.\n+\n+      Unhandled_Raise,\n+      --  Denotes the raise events corresponding to exceptions for which there\n+      --  is no user defined handler. This includes unhandled exceptions in\n+      --  task bodies.\n+\n+      Unhandled_Raise_In_Main\n+      --  Same as Unhandled_Raise, except exceptions in task bodies are not\n+      --  included. Same as RM_Convention, except (1) the message is printed as\n+      --  soon as the environment task completes due to an unhandled exception\n+      --  (before awaiting the termination of dependent tasks, and before\n+      --  library-level finalization), and (2) a symbolic traceback is given\n+      --  if possible. This is the default behavior if the binder switch -E is\n+      --  used.\n      );\n    --  Provide a way to denote different kinds of automatic traces related\n    --  to exceptions that can be requested."}]}