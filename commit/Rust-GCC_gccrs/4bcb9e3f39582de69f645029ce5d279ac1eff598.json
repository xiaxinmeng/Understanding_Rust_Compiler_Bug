{"sha": "4bcb9e3f39582de69f645029ce5d279ac1eff598", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGJjYjllM2YzOTU4MmRlNjlmNjQ1MDI5Y2U1ZDI3OWFjMWVmZjU5OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-06-08T21:20:21Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-06-08T21:20:21Z"}, "message": "pa.md (conditional branch insns): Get length right for branches to targets which can not be reached with a \"bl\"...\n\n        * pa.md (conditional branch insns): Get length right for branches\n        to targets which can not be reached with a \"bl\" instruction.\n        * pa.c (output_cbranch): Handle branches to targets which can not\n        be reached with a \"bl\" instruction.\n\nFrom-SVN: r14172", "tree": {"sha": "5dd3a034af8c98f23f65255b614429d6c1807bcc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dd3a034af8c98f23f65255b614429d6c1807bcc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4bcb9e3f39582de69f645029ce5d279ac1eff598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcb9e3f39582de69f645029ce5d279ac1eff598", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bcb9e3f39582de69f645029ce5d279ac1eff598", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bcb9e3f39582de69f645029ce5d279ac1eff598/comments", "author": null, "committer": null, "parents": [{"sha": "359255a957150238a4517312232c6bd491b9c4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/359255a957150238a4517312232c6bd491b9c4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/359255a957150238a4517312232c6bd491b9c4a1"}], "stats": {"total": 88, "additions": 80, "deletions": 8}, "files": [{"sha": "75c10212917b38d558fdb8cff4fadaadab5b4385", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcb9e3f39582de69f645029ce5d279ac1eff598/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcb9e3f39582de69f645029ce5d279ac1eff598/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4bcb9e3f39582de69f645029ce5d279ac1eff598", "patch": "@@ -4390,6 +4390,68 @@ output_cbranch (operands, nullify, length, negated, insn)\n \t  }\n \tbreak;\n \n+      case 20:\n+\t/* Very long branch.  Right now we only handle these when not\n+\t   optimizing.  See \"jump\" pattern in pa.md for details.  */\n+\tif (optimize)\n+\t  abort ();\n+\n+\t/* Create a reversed conditional branch which branches around\n+\t   the following insns.  */\n+\tif (negated)\n+\t  strcpy (buf, \"com%I2b,%S3,n %2,%1,.+20\");\n+\telse\n+\t  strcpy (buf, \"com%I2b,%B3,n %2,%1,.+20\");\n+\toutput_asm_insn (buf, operands);\n+\n+\t/* Output an insn to save %r1.  */\n+\toutput_asm_insn (\"stw %%r1,-16(%%r30)\", operands);\n+\n+\t/* Now output a very long branch to the original target.  */\n+\toutput_asm_insn (\"ldil L'%l0,%%r1\\n\\tbe R'%l0(%%sr4,%%r1)\", operands);\n+\n+\t/* Now restore the value of %r1 in the delay slot.  We're not\n+\t   optimizing so we know nothing else can be in the delay slot.  */\n+\treturn \"ldw -16(%%r30),%%r1\";\n+\n+      case 28:\n+\t/* Very long branch when generating PIC code.  Right now we only\n+\t   handle these when not optimizing.  See \"jump\" pattern in pa.md\n+\t   for details.  */\n+\tif (optimize)\n+\t  abort ();\n+\n+\t/* Create a reversed conditional branch which branches around\n+\t   the following insns.  */\n+\tif (negated)\n+\t  strcpy (buf, \"com%I2b,%S3,n %2,%1,.+28\");\n+\telse\n+\t  strcpy (buf, \"com%I2b,%B3,n %2,%1,.+28\");\n+\toutput_asm_insn (buf, operands);\n+\n+\t/* Output an insn to save %r1.  */\n+\toutput_asm_insn (\"stw %%r1,-16(%%r30)\", operands);\n+\n+\t/* Now output a very long PIC branch to the original target.  */\n+\t{\n+\t  rtx xoperands[5];\n+\n+\t  xoperands[0] = operands[0];\n+\t  xoperands[1] = operands[1];\n+\t  xoperands[2] = operands[2];\n+\t  xoperands[3] = operands[3];\n+\t  xoperands[4] = gen_label_rtx ();\n+\n+\t  output_asm_insn (\"bl .+8,%%r1\\n\\taddil L'%l0-%l4,%%r1\", xoperands);\n+\t  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\",\n+\t\t\t\t     CODE_LABEL_NUMBER (xoperands[4]));\n+\t  output_asm_insn (\"ldo R'%l0-%l4(%%r1),%%r1\\n\\tbv 0(%%r1)\", xoperands);\n+\t}\n+\n+\t/* Now restore the value of %r1 in the delay slot.  We're not\n+\t   optimizing so we know nothing else can be in the delay slot.  */\n+\treturn \"ldw -16(%%r30),%%r1\";\n+\t\n       default:\n \tabort();\n     }"}, {"sha": "35519740ba439031bb924cbe20f93cbc2f92bea8", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4bcb9e3f39582de69f645029ce5d279ac1eff598/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4bcb9e3f39582de69f645029ce5d279ac1eff598/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=4bcb9e3f39582de69f645029ce5d279ac1eff598", "patch": "@@ -1034,10 +1034,15 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\")\n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n-\t\t      (const_int 8184))\n-           (const_int 4)\n-\t   (const_int 8)))])\n+    (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t       (const_int 8184))\n+\t   (const_int 4)\n+\t   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t       (const_int 262100))\n+\t   (const_int 8)\n+\t   (eq (symbol_ref \"flag_pic\") (const_int 0))\n+\t   (const_int 20)]\n+\t  (const_int 28)))])\n \n ;; Match the negated branch.\n \n@@ -1057,10 +1062,15 @@\n }\"\n [(set_attr \"type\" \"cbranch\")\n  (set (attr \"length\")\n-    (if_then_else (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n-\t\t      (const_int 8184))\n-           (const_int 4)\n-\t   (const_int 8)))])\n+    (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t       (const_int 8184))\n+\t   (const_int 4)\n+\t   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))\n+\t       (const_int 262100))\n+\t   (const_int 8)\n+\t   (eq (symbol_ref \"flag_pic\") (const_int 0))\n+\t   (const_int 20)]\n+\t  (const_int 28)))])\n \n ;; Branch on Bit patterns.\n (define_insn \"\""}]}