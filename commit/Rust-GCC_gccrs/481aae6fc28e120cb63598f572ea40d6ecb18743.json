{"sha": "481aae6fc28e120cb63598f572ea40d6ecb18743", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxYWFlNmZjMjhlMTIwY2I2MzU5OGY1NzJlYTQwZDZlY2IxODc0Mw==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2001-10-09T21:44:54Z"}, "committer": {"name": "Mark Wielaard", "email": "mark@gcc.gnu.org", "date": "2001-10-09T21:44:54Z"}, "message": "* java/net/SocketImpl.java: Merge with Classpath\n\nFrom-SVN: r46129", "tree": {"sha": "d008bd9b826e51b4d63df044fda4e417a68c8f0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d008bd9b826e51b4d63df044fda4e417a68c8f0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/481aae6fc28e120cb63598f572ea40d6ecb18743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481aae6fc28e120cb63598f572ea40d6ecb18743", "html_url": "https://github.com/Rust-GCC/gccrs/commit/481aae6fc28e120cb63598f572ea40d6ecb18743", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/481aae6fc28e120cb63598f572ea40d6ecb18743/comments", "author": null, "committer": null, "parents": [{"sha": "0435269a764312008a34152f04254fa5024fba72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0435269a764312008a34152f04254fa5024fba72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0435269a764312008a34152f04254fa5024fba72"}], "stats": {"total": 194, "additions": 174, "deletions": 20}, "files": [{"sha": "7027fa9b0bc39c087adefa3a6422b7c00c0cc6b1", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481aae6fc28e120cb63598f572ea40d6ecb18743/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481aae6fc28e120cb63598f572ea40d6ecb18743/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=481aae6fc28e120cb63598f572ea40d6ecb18743", "patch": "@@ -1,3 +1,7 @@\n+2001-10-09  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/net/SocketImpl.java: Merge with Classpath\n+\n 2001-10-08  Mark Wielaard  <mark@klomp.org>\n \n \t* java/net/DatagramSocketImpl.java: Merge with Classpath"}, {"sha": "4419422a8ba50fbbfc62afc3fed60cb48f944083", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 170, "deletions": 20, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/481aae6fc28e120cb63598f572ea40d6ecb18743/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/481aae6fc28e120cb63598f572ea40d6ecb18743/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=481aae6fc28e120cb63598f572ea40d6ecb18743", "patch": "@@ -1,73 +1,223 @@\n-// SocketImpl.java - Abstract socket implementation.\n-\n-/* Copyright (C) 1999  Free Software Foundation\n-\n-   This file is part of libgcj.\n-\n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n+/* SocketImpl.java -- Abstract socket implementation class\n+   Copyright (C) 1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n package java.net;\n-import java.io.*;\n \n-/**\n-  * @author Per Bothner <bothner@cygnus.com>\n-  * @date January 6, 1999.\n-  */\n+import java.io.*;\n \n-/** Written using on-line Java Platform 1.2 API Specification.\n+ /* Written using on-line Java Platform 1.2 API Specification.\n   * Believed complete and correct.\n   */\n \n+  /**\n+   * This abstract class serves as the parent class for socket implementations.\n+   * The implementation class serves an intermediary to native routines that\n+   * perform system specific socket operations.\n+   * <p>\n+   * A default implementation is provided by the system, but this can be\n+   * changed via installing a <code>SocketImplFactory</code> (through a call \n+   * to the static method <code>Socket.setSocketImplFactory</code>).  A \n+   * subclass of <code>Socket</code> can also pass in a <code>SocketImpl</code>\n+   * to the <code>Socket(SocketImpl)</code> constructor to use an \n+   * implementation different from the system default without installing\n+   * a factory.\n+   *\n+   * @author Aaron M. Renn (arenn@urbanophile.com)\n+   * @author Per Bothner <bothner@cygnus.com>\n+   */\n public abstract class SocketImpl implements SocketOptions\n {\n+\n+\n+  /**\n+   * The address of the remote end of the socket connection\n+   */\n   protected InetAddress address;\n \n+  /**\n+   * A FileDescriptor object representing this socket connection.  \n+   */\n   protected FileDescriptor fd;\n \n+  /**\n+   * The port number the socket is bound to locally\n+   */\n   protected int localport;\n \n+  /**\n+   * The port number of the remote end of the socket connection\n+   */\n   protected int port;\n \n+  /**\n+   * Default, no-argument constructor for use by subclasses.\n+   */\n   public SocketImpl ()\n   {\n   }\n \n+  /**\n+   * Creates a new socket that is not bound to any local address/port and\n+   * is not connected to any remote address/port.  This will be created as\n+   * a stream socket if the stream parameter is true, or a datagram socket\n+   * if the stream parameter is false.\n+   *\n+   * @param stream true for a stream socket, false for a datagram socket\n+   */\n   protected abstract void create (boolean stream) throws IOException;\n \n+  /**\n+   * Connects to the remote hostname and port specified as arguments.\n+   *\n+   * @param host The remote hostname to connect to\n+   * @param port The remote port to connect to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void connect (String host, int port) throws IOException;\n \n+  /**\n+   * Connects to the remote address and port specified as arguments.\n+   *\n+   * @param host The remote address to connect to\n+   * @param port The remote port to connect to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void connect (InetAddress host, int port)\n     throws IOException;\n \n+  /**\n+   * Binds to the specified port on the specified addr.  Note that this addr\n+   * must represent a local IP address.\n+   * <p>\n+   * Note that it is unspecified how to bind to all interfaces on the localhost\n+   * (INADDR_ANY).\n+   *\n+   * @param host The address to bind to\n+   * @param port The port number to bind to\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void bind (InetAddress host, int port) throws IOException;\n \n+  /**\n+   * Starts listening for connections on a socket. The backlog parameter\n+   * is how many pending connections will queue up waiting to be serviced\n+   * before being accept'ed.  If the queue of pending requests exceeds this\n+   * number, additional connections will be refused.\n+   *\n+   * @param backlog The length of the pending connection queue\n+   * \n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void listen (int backlog) throws IOException;\n \n+  /**\n+   * Accepts a connection on this socket.\n+   *\n+   * @param s The implementation object for the accepted connection.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void accept (SocketImpl s) throws IOException;\n \n+  /**\n+   * Returns an <code>InputStream</code> object for reading from this socket.\n+   *\n+   * @return An <code>InputStream</code> for reading from this socket.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract InputStream getInputStream() throws IOException;\n \n+  /**\n+   * Returns an <code>OutputStream</code> object for writing to this socket\n+   * \n+   * @return An <code>OutputStream</code> for writing to this socket.\n+   *\n+   * @exception IOException If an error occurs.\n+   */\n   protected abstract OutputStream getOutputStream() throws IOException;\n \n+  /**\n+   * Returns the number of bytes that the caller can read from this socket\n+   * without blocking.\n+   *\n+   * @return The number of readable bytes before blocking\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract int available () throws IOException;\n \n+  /**\n+   * Closes the socket.  This will normally cause any resources, such as the\n+   * InputStream, OutputStream and associated file descriptors  to be freed.\n+   * <p>\n+   * Note that if the SO_LINGER option is set on this socket, then the\n+   * operation could block.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   protected abstract void close () throws IOException;\n \n+  /**\n+   * Returns the FileDescriptor objects for this socket.\n+   *\n+   * @return A FileDescriptor for this socket.\n+   */\n   protected FileDescriptor getFileDescriptor () { return fd; }\n \n+  /**\n+   * Returns the remote address this socket is connected to\n+   *\n+   * @return The remote address\n+   */\n   protected InetAddress getInetAddress () { return address; }\n \n+  /**\n+   * Returns the remote port this socket is connected to\n+   *\n+   * @return The remote port\n+   */\n   protected int getPort () { return port; }\n \n+  /**\n+   * Returns the local port this socket is bound to\n+   *\n+   * @return The local port\n+   */\n   protected int getLocalPort () { return localport; }\n \n-  public abstract Object getOption(int optID) throws SocketException;\n-\n-  public abstract void setOption(int optID, Object value)\n-    throws SocketException;\n-\n+  /**\n+   * Returns a <code>String</code> representing the remote host and port of this\n+   * socket.\n+   *\n+   * @return A <code>String</code> for this socket.\n+   */\n   public String toString ()\n   {\n     return \"[addr=\" + address.toString() + \",port=\" + Integer.toString(port) +"}]}