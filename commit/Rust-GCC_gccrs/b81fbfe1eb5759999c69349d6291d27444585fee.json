{"sha": "b81fbfe1eb5759999c69349d6291d27444585fee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjgxZmJmZTFlYjU3NTk5OTljNjkzNDlkNjI5MWQyNzQ0NDU4NWZlZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:20Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-01-11T18:03:20Z"}, "message": "aarch64: Add support for unpacked SVE shifts\n\nThis patch adds support for unpacked SVE LSL, ASR and LSR.\nFor right shifts, the type suffix needs to be taken from the\nelement size rather than the container size.\n\ngcc/\n\t* config/aarch64/aarch64-sve.md (<ASHIFT:optab><mode>3)\n\t(v<ASHIFT:optab><mode>3, @aarch64_pred_<optab><mode>)\n\t(*post_ra_v<ASHIFT:optab><mode>3): Extend from SVE_FULL_I to SVE_I.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/shift_2.c: New test.", "tree": {"sha": "b5e7ed6af8fe0b341d1af10a82437c166ce19303", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5e7ed6af8fe0b341d1af10a82437c166ce19303"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b81fbfe1eb5759999c69349d6291d27444585fee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81fbfe1eb5759999c69349d6291d27444585fee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b81fbfe1eb5759999c69349d6291d27444585fee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b81fbfe1eb5759999c69349d6291d27444585fee/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbe9758ff494d55d558a2a0c5e8702c50fcebdf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbe9758ff494d55d558a2a0c5e8702c50fcebdf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbe9758ff494d55d558a2a0c5e8702c50fcebdf0"}], "stats": {"total": 117, "additions": 99, "deletions": 18}, "files": [{"sha": "a58324da869a3da7c8a9b0457f5b9332369b3dcd", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81fbfe1eb5759999c69349d6291d27444585fee/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81fbfe1eb5759999c69349d6291d27444585fee/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=b81fbfe1eb5759999c69349d6291d27444585fee", "patch": "@@ -4500,9 +4500,9 @@\n ;; Unpredicated shift by a scalar, which expands into one of the vector\n ;; shifts below.\n (define_expand \"<ASHIFT:optab><mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(ASHIFT:SVE_FULL_I\n-\t  (match_operand:SVE_FULL_I 1 \"register_operand\")\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(ASHIFT:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\")\n \t  (match_operand:<VEL> 2 \"general_operand\")))]\n   \"TARGET_SVE\"\n   {\n@@ -4527,12 +4527,12 @@\n \n ;; Unpredicated shift by a vector.\n (define_expand \"v<optab><mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\")\n+\t(unspec:SVE_I\n \t  [(match_dup 3)\n-\t   (ASHIFT:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 1 \"register_operand\")\n-\t     (match_operand:SVE_FULL_I 2 \"aarch64_sve_<lr>shift_operand\"))]\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 1 \"register_operand\")\n+\t     (match_operand:SVE_I 2 \"aarch64_sve_<lr>shift_operand\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   {\n@@ -4545,12 +4545,12 @@\n ;; likely to gain much and would make the instruction seem less uniform\n ;; to the register allocator.\n (define_insn_and_split \"@aarch64_pred_<optab><mode>\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n-\t(unspec:SVE_FULL_I\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w, w, w, ?&w\")\n+\t(unspec:SVE_I\n \t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n-\t   (ASHIFT:SVE_FULL_I\n-\t     (match_operand:SVE_FULL_I 2 \"register_operand\" \"w, 0, w, w\")\n-\t     (match_operand:SVE_FULL_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, 0, w\"))]\n+\t   (ASHIFT:SVE_I\n+\t     (match_operand:SVE_I 2 \"register_operand\" \"w, 0, w, w\")\n+\t     (match_operand:SVE_I 3 \"aarch64_sve_<lr>shift_operand\" \"D<lr>, w, 0, w\"))]\n \t  UNSPEC_PRED_X))]\n   \"TARGET_SVE\"\n   \"@\n@@ -4560,7 +4560,7 @@\n    movprfx\\t%0, %2\\;<shift>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n   \"&& reload_completed\n    && !register_operand (operands[3], <MODE>mode)\"\n-  [(set (match_dup 0) (ASHIFT:SVE_FULL_I (match_dup 2) (match_dup 3)))]\n+  [(set (match_dup 0) (ASHIFT:SVE_I (match_dup 2) (match_dup 3)))]\n   \"\"\n   [(set_attr \"movprfx\" \"*,*,*,yes\")]\n )\n@@ -4569,10 +4569,10 @@\n ;; These are generated by splitting a predicated instruction whose\n ;; predicate is unused.\n (define_insn \"*post_ra_v<optab><mode>3\"\n-  [(set (match_operand:SVE_FULL_I 0 \"register_operand\" \"=w\")\n-\t(ASHIFT:SVE_FULL_I\n-\t  (match_operand:SVE_FULL_I 1 \"register_operand\" \"w\")\n-\t  (match_operand:SVE_FULL_I 2 \"aarch64_simd_<lr>shift_imm\")))]\n+  [(set (match_operand:SVE_I 0 \"register_operand\" \"=w\")\n+\t(ASHIFT:SVE_I\n+\t  (match_operand:SVE_I 1 \"register_operand\" \"w\")\n+\t  (match_operand:SVE_I 2 \"aarch64_simd_<lr>shift_imm\")))]\n   \"TARGET_SVE && reload_completed\"\n   \"<shift>\\t%0.<Vetype>, %1.<Vetype>, #%2\"\n )"}, {"sha": "b7462c47db93f50552ecb0f284bd75066ca94360", "filename": "gcc/testsuite/gcc.target/aarch64/sve/shift_2.c", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b81fbfe1eb5759999c69349d6291d27444585fee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b81fbfe1eb5759999c69349d6291d27444585fee/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fshift_2.c?ref=b81fbfe1eb5759999c69349d6291d27444585fee", "patch": "@@ -0,0 +1,81 @@\n+/* { dg-do assemble { target aarch64_asm_sve_ok } } */\n+/* { dg-options \"-O -msve-vector-bits=2048 -save-temps\" } */\n+\n+#include <stdint.h>\n+\n+#define TEST_SHIFT_IMM(TYPE, NAME, OP, AMT) \\\n+  TYPE NAME##_##TYPE##_##AMT (TYPE a) { return a OP AMT; }\n+\n+#define TEST_SHIFT(TYPE, NAME, OP, LIMIT) \\\n+  TYPE NAME##_##TYPE##_reg (TYPE a, TYPE b) { return a OP b; } \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 1) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, 5) \\\n+  TEST_SHIFT_IMM (TYPE, NAME, OP, LIMIT)\n+\n+#define TEST_TYPE(TYPE, SIZE, LIMIT) \\\n+  typedef TYPE TYPE##SIZE __attribute__((vector_size(SIZE))); \\\n+  TEST_SHIFT (TYPE##SIZE, shl, <<, LIMIT) \\\n+  TEST_SHIFT (TYPE##SIZE, shr, >>, LIMIT) \\\n+\n+TEST_TYPE (int8_t, 32, 7)\n+TEST_TYPE (uint8_t, 32, 7)\n+\n+TEST_TYPE (int8_t, 64, 7)\n+TEST_TYPE (uint8_t, 64, 7)\n+TEST_TYPE (int16_t, 64, 15)\n+TEST_TYPE (uint16_t, 64, 15)\n+\n+TEST_TYPE (int8_t, 128, 7)\n+TEST_TYPE (uint8_t, 128, 7)\n+TEST_TYPE (int16_t, 128, 15)\n+TEST_TYPE (uint16_t, 128, 15)\n+TEST_TYPE (int32_t, 128, 31)\n+TEST_TYPE (uint32_t, 128, 31)\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, p[0-7]/m, z[0-9]+\\.b, z[0-9]+\\.b\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #1\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, z[0-9]+\\.h, #1\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, z[0-9]+\\.s, #1\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #5\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, z[0-9]+\\.h, #5\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, z[0-9]+\\.s, #5\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 6 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 4 } } */\n+/* { dg-final { scan-assembler-times {\\tlsl\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 2 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tlsr\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.b, z[0-9]+\\.b, #7\\n} 3 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.h, z[0-9]+\\.h, #15\\n} 2 } } */\n+/* { dg-final { scan-assembler-times {\\tasr\\tz[0-9]+\\.s, z[0-9]+\\.s, #31\\n} 1 } } */"}]}