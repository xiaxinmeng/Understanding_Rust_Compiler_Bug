{"sha": "8101c928db65dcda3f1406c4cbbe92537ad2711e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwMWM5MjhkYjY1ZGNkYTNmMTQwNmM0Y2JiZTkyNTM3YWQyNzExZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-09T09:55:52Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-09T09:55:52Z"}, "message": "pa-protos.h (hppa_va_arg): Remove.\n\n        * config/pa/pa-protos.h (hppa_va_arg): Remove.\n        * config/pa/pa.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n        (hppa_gimplify_va_arg_expr): Rewrite from hppa_va_arg.\n        * config/pa/pa.h (EXPAND_BUILTIN_VA_ARG): Remove.\n\nFrom-SVN: r84354", "tree": {"sha": "e15489d0836b659f4688f3e4303fc0b42fbaad34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e15489d0836b659f4688f3e4303fc0b42fbaad34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8101c928db65dcda3f1406c4cbbe92537ad2711e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8101c928db65dcda3f1406c4cbbe92537ad2711e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8101c928db65dcda3f1406c4cbbe92537ad2711e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8101c928db65dcda3f1406c4cbbe92537ad2711e/comments", "author": null, "committer": null, "parents": [{"sha": "634cbdb330b7c0aa7c40a2fc5f95eb816e4fe66d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634cbdb330b7c0aa7c40a2fc5f95eb816e4fe66d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634cbdb330b7c0aa7c40a2fc5f95eb816e4fe66d"}], "stats": {"total": 126, "additions": 48, "deletions": 78}, "files": [{"sha": "419cd3c32c2ae0fb3a8577e86cfd47c8184c02b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8101c928db65dcda3f1406c4cbbe92537ad2711e", "patch": "@@ -1,5 +1,10 @@\n 2004-07-09  Richard Henderson  <rth@redhat.com>\n \n+\t* config/pa/pa-protos.h (hppa_va_arg): Remove.\n+\t* config/pa/pa.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n+\t(hppa_gimplify_va_arg_expr): Rewrite from hppa_va_arg.\n+\t* config/pa/pa.h (EXPAND_BUILTIN_VA_ARG): Remove.\n+\n \t* config/mn10300/mn10300-protos.h (mn10300_va_arg): Remove.\n \t* config/mn10300/mn10300.c (TARGET_GIMPLIFY_VA_ARG_EXPR): New.\n \t(mn10300_gimplify_va_arg_expr): Rewrite from mn10300_va_arg."}, {"sha": "0e0dc74d5b4ab69933926b85456c97ce6da172b6", "filename": "gcc/config/pa/pa-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=8101c928db65dcda3f1406c4cbbe92537ad2711e", "patch": "@@ -29,7 +29,6 @@ extern int lhs_lshift_cint_operand (rtx, enum machine_mode);\n \n #ifdef TREE_CODE\n extern void hppa_va_start (tree, rtx);\n-extern rtx hppa_va_arg (tree, tree);\n #endif /* TREE_CODE */\n extern rtx hppa_legitimize_address (rtx, rtx, enum machine_mode);\n "}, {"sha": "cf7da9c1faa0d84d692829a650314b780834b5e5", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 43, "deletions": 72, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=8101c928db65dcda3f1406c4cbbe92537ad2711e", "patch": "@@ -124,6 +124,7 @@ static void pa_asm_out_destructor (rtx, int);\n #endif\n static void pa_init_builtins (void);\n static rtx hppa_builtin_saveregs (void);\n+static tree hppa_gimplify_va_arg_expr (tree, tree, tree *, tree *);\n static void copy_fp_args (rtx) ATTRIBUTE_UNUSED;\n static int length_fp_args (rtx) ATTRIBUTE_UNUSED;\n static struct deferred_plabel *get_plabel (const char *)\n@@ -267,6 +268,8 @@ static size_t n_deferred_plabels = 0;\n \n #undef TARGET_EXPAND_BUILTIN_SAVEREGS\n #define TARGET_EXPAND_BUILTIN_SAVEREGS hppa_builtin_saveregs\n+#undef TARGET_GIMPLIFY_VA_ARG_EXPR\n+#define TARGET_GIMPLIFY_VA_ARG_EXPR hppa_gimplify_va_arg_expr\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -5948,12 +5951,12 @@ hppa_va_start (tree valist, rtx nextarg)\n   std_expand_builtin_va_start (valist, nextarg);\n }\n \n-rtx\n-hppa_va_arg (tree valist, tree type)\n+static tree\n+hppa_gimplify_va_arg_expr (tree valist, tree type, tree *pre_p, tree *post_p)\n {\n-  HOST_WIDE_INT size = int_size_in_bytes (type);\n-  HOST_WIDE_INT ofs;\n-  tree t, ptr, pptr;\n+  bool indirect;\n+\n+  indirect = FUNCTION_ARG_PASS_BY_REFERENCE (dummy, TYPE_MODE (type), type, 0);\n \n   if (TARGET_64BIT)\n     {\n@@ -5965,89 +5968,57 @@ hppa_va_arg (tree valist, tree type)\n \t to conflict with the ABI.  For variable sized arguments,\n \t GCC doesn't have the infrastructure to allocate these to\n \t registers.  */\n+      /* Args grow upward.  We can use the generic routines.  */\n \n-      /* Arguments with a size greater than 8 must be aligned 0 MOD 16.  */\n-\n-      if (size > UNITS_PER_WORD)\n-        {\n-          t = build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-                     build_int_2 (2 * UNITS_PER_WORD - 1, 0));\n-          t = build (BIT_AND_EXPR, TREE_TYPE (t), t,\n-                     build_int_2 (-2 * UNITS_PER_WORD, -1));\n-          t = build (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n-          TREE_SIDE_EFFECTS (t) = 1;\n-\t  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n-        }\n-\n-      if (size > 0)\n-\treturn std_expand_builtin_va_arg (valist, type);\n+      if (indirect)\n+\treturn ind_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n       else\n-\t{\n-\t  ptr = build_pointer_type (type);\n-\n-\t  /* Args grow upward.  */\n-\t  t = build (POSTINCREMENT_EXPR, TREE_TYPE (valist), valist,\n-\t\t     build_int_2 (POINTER_SIZE / BITS_PER_UNIT, 0));\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\n-\t  pptr = build_pointer_type (ptr);\n-\t  t = build1 (NOP_EXPR, pptr, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\n-\t  t = build1 (INDIRECT_REF, ptr, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\t}\n+\treturn std_gimplify_va_arg_expr (valist, type, pre_p, post_p);\n     }\n   else /* !TARGET_64BIT */\n     {\n-      ptr = build_pointer_type (type);\n+      tree ptr = build_pointer_type (type);\n+      tree valist_type;\n+      tree t, u;\n+      unsigned int size, ofs;\n \n-      /* \"Large\" and variable sized types are passed by reference.  */\n-      if (size > 8 || size <= 0)\n+      if (indirect)\n \t{\n-\t  /* Args grow downward.  */\n-\t  t = build (PREDECREMENT_EXPR, TREE_TYPE (valist), valist,\n-\t\t     build_int_2 (POINTER_SIZE / BITS_PER_UNIT, 0));\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\n-\t  pptr = build_pointer_type (ptr);\n-\t  t = build1 (NOP_EXPR, pptr, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n-\n-\t  t = build1 (INDIRECT_REF, ptr, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n+\t  type = ptr;\n+\t  ptr = build_pointer_type (type);\n \t}\n-      else\n-\t{\n-\t  t = build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t     build_int_2 (-size, -1));\n+      size = int_size_in_bytes (type);\n+      valist_type = TREE_TYPE (valist);\n \n-\t  /* Copied from va-pa.h, but we probably don't need to align to\n-\t     word size, since we generate and preserve that invariant.  */\n-\t  t = build (BIT_AND_EXPR, TREE_TYPE (valist), t,\n-\t\t     build_int_2 ((size > 4 ? -8 : -4), -1));\n+      /* Args grow down.  Not handled by generic routines.  */\n \n-\t  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n+      u = fold_convert (valist_type, size_in_bytes (type));\n+      t = build (MINUS_EXPR, valist_type, valist, u);\n \n-\t  ofs = (8 - size) % 4;\n-\t  if (ofs)\n-\t    {\n-\t      t = build (PLUS_EXPR, TREE_TYPE (valist), t,\n-\t\t\t build_int_2 (ofs, 0));\n-\t      TREE_SIDE_EFFECTS (t) = 1;\n-\t    }\n+      /* Copied from va-pa.h, but we probably don't need to align to\n+\t word size, since we generate and preserve that invariant.  */\n+      u = build_int_2 ((size > 4 ? -8 : -4), -1);\n+      u = fold_convert (valist_type, u);\n+      t = build (BIT_AND_EXPR, valist_type, t, u);\n+\n+      t = build (MODIFY_EXPR, valist_type, valist, t);\n \n-\t  t = build1 (NOP_EXPR, ptr, t);\n-\t  TREE_SIDE_EFFECTS (t) = 1;\n+      ofs = (8 - size) % 4;\n+      if (ofs != 0)\n+\t{\n+\t  u = fold_convert (valist_type, size_int (ofs));\n+\t  t = build (PLUS_EXPR, valist_type, t, u);\n \t}\n-    }\n \n-  /* Calculate!  */\n-  return expand_expr (t, NULL_RTX, VOIDmode, EXPAND_NORMAL);\n-}\n+      t = fold_convert (ptr, t);\n+      t = build_fold_indirect_ref (t);\n \n+      if (indirect)\n+\tt = build_fold_indirect_ref (t);\n \n+      return t;\n+    }\n+}\n \n /* This routine handles all the normal conditional branch sequences we\n    might need to generate.  It handles compare immediate vs compare"}, {"sha": "a7f82c3a484d96487602103f4371cc61f0386d22", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8101c928db65dcda3f1406c4cbbe92537ad2711e/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=8101c928db65dcda3f1406c4cbbe92537ad2711e", "patch": "@@ -1140,11 +1140,6 @@ extern int may_call_alloca;\n \n #define EXPAND_BUILTIN_VA_START(valist, nextarg) \\\n   hppa_va_start (valist, nextarg)\n-\n-/* Implement `va_arg'.  */\n-\n-#define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n-  hppa_va_arg (valist, type)\n \f\n /* Addressing modes, and classification of registers for them. \n "}]}