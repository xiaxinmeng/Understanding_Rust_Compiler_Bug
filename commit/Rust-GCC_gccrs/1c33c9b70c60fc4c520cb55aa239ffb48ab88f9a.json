{"sha": "1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMzM2M5YjcwYzYwZmM0YzUyMGNiNTVhYTIzOWZmYjQ4YWI4OGY5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-04-23T08:20:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-04-23T08:20:12Z"}, "message": "re PR sanitizer/60275 ([UBSAN] Add -f[no-]sanitize-recover/-fsanitize-undefined-trap-on-error to make UBSAN's runtime errors fatal)\n\n\tPR sanitizer/60275\n\t* common.opt (fsanitize-recover, fsanitize-undefined-trap-on-error):\n\tNew options.\n\t* gcc.c (sanitize_spec_function): Don't return \"\" for \"undefined\"\n\tif flag_sanitize_undefined_trap_on_error.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,\n\tBUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT): New builtins.\n\t* ubsan.c (ubsan_instrument_unreachable): Return\n\t__builtin_trap () if flag_sanitize_undefined_trap_on_error.\n\t(ubsan_expand_null_ifn): Emit __builtin_trap ()\n\tif flag_sanitize_undefined_trap_on_error and\n\t__ubsan_handle_type_mismatch_abort if !flag_sanitize_recover.\n\t(ubsan_expand_null_ifn, ubsan_build_overflow_builtin,\n\tinstrument_bool_enum_load): Emit __builtin_trap () if\n\tflag_sanitize_undefined_trap_on_error and\n\t__builtin_handle_*_abort () if !flag_sanitize_recover.\n\t* doc/invoke.texi (-fsanitize-recover,\n\t-fsanitize-undefined-trap-on-error): Document.\nc-family/\n\t* c-ubsan.c (ubsan_instrument_return): Return __builtin_trap ()\n\tif flag_sanitize_undefined_trap_on_error.\n\t(ubsan_instrument_division, ubsan_instrument_shift,\n\tubsan_instrument_vla): Likewise.  Use __ubsan_handle_*_abort ()\n\tif !flag_sanitize_recover.\ntestsuite/\n\t* g++.dg/ubsan/return-2.C: Revert 2014-03-24 changes, add\n\t-fno-sanitize-recover to dg-options.\n\t* g++.dg/ubsan/cxx11-shift-1.C: Remove c++11 target restriction,\n\tadd -std=c++11 to dg-options.\n\t* g++.dg/ubsan/cxx11-shift-2.C: Likewise.\n\t* g++.dg/ubsan/cxx1y-vla.C: Remove c++1y target restriction,\n\tadd -std=c++1y to dg-options.\n\t* c-c++-common/ubsan/undefined-1.c: Revert 2014-03-24 changes, add\n\t-fno-sanitize-recover to dg-options.\n\t* c-c++-common/ubsan/overflow-sub-1.c: Likewise.\n\t* c-c++-common/ubsan/vla-4.c: Likewise.\n\t* c-c++-common/ubsan/pr59503.c: Likewise.\n\t* c-c++-common/ubsan/vla-3.c: Likewise.\n\t* c-c++-common/ubsan/save-expr-1.c: Likewise.\n\t* c-c++-common/ubsan/overflow-add-1.c: Likewise.\n\t* c-c++-common/ubsan/shift-3.c: Likewise.\n\t* c-c++-common/ubsan/overflow-1.c: Likewise.\n\t* c-c++-common/ubsan/overflow-negate-2.c: Likewise.\n\t* c-c++-common/ubsan/vla-2.c: Likewise.\n\t* c-c++-common/ubsan/overflow-mul-1.c: Likewise.\n\t* c-c++-common/ubsan/pr60613-1.c: Likewise.\n\t* c-c++-common/ubsan/shift-6.c: Likewise.\n\t* c-c++-common/ubsan/overflow-mul-3.c: Likewise.\n\t* c-c++-common/ubsan/overflow-add-3.c: New test.\n\t* c-c++-common/ubsan/overflow-add-4.c: New test.\n\t* c-c++-common/ubsan/div-by-zero-6.c: New test.\n\t* c-c++-common/ubsan/div-by-zero-7.c: New test.\n\nFrom-SVN: r209672", "tree": {"sha": "63757a4be556a608b41730e5646da6118aa415c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63757a4be556a608b41730e5646da6118aa415c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e66b2e564ad79ab783f86733ad31ce34865b0e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e66b2e564ad79ab783f86733ad31ce34865b0e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e66b2e564ad79ab783f86733ad31ce34865b0e9"}], "stats": {"total": 599, "additions": 389, "deletions": 210}, "files": [{"sha": "109808960608d083fd424c66880d6f4ab0351a01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,3 +1,31 @@\n+2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/60275\n+\t* common.opt (fsanitize-recover, fsanitize-undefined-trap-on-error):\n+\tNew options.\n+\t* gcc.c (sanitize_spec_function): Don't return \"\" for \"undefined\"\n+\tif flag_sanitize_undefined_trap_on_error.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,\n+\tBUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT): New builtins.\n+\t* ubsan.c (ubsan_instrument_unreachable): Return\n+\t__builtin_trap () if flag_sanitize_undefined_trap_on_error.\n+\t(ubsan_expand_null_ifn): Emit __builtin_trap ()\n+\tif flag_sanitize_undefined_trap_on_error and\n+\t__ubsan_handle_type_mismatch_abort if !flag_sanitize_recover.\n+\t(ubsan_expand_null_ifn, ubsan_build_overflow_builtin,\n+\tinstrument_bool_enum_load): Emit __builtin_trap () if\n+\tflag_sanitize_undefined_trap_on_error and\n+\t__builtin_handle_*_abort () if !flag_sanitize_recover.\n+\t* doc/invoke.texi (-fsanitize-recover,\n+\t-fsanitize-undefined-trap-on-error): Document.\n+\n 2014-04-22  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh.md (mov<mode>): Replace movQIHI."}, {"sha": "11b4bc437eaec93fdfe3c3768982c4b5fbb521f6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,3 +1,12 @@\n+2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/60275\n+\t* c-ubsan.c (ubsan_instrument_return): Return __builtin_trap ()\n+\tif flag_sanitize_undefined_trap_on_error.\n+\t(ubsan_instrument_division, ubsan_instrument_shift,\n+\tubsan_instrument_vla): Likewise.  Use __ubsan_handle_*_abort ()\n+\tif !flag_sanitize_recover.\n+\n 2014-04-22  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR libstdc++/43622"}, {"sha": "e4f6f327277b69b61516978d67794c8b80f95692", "filename": "gcc/c-family/c-ubsan.c", "status": "modified", "additions": 53, "deletions": 26, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fc-family%2Fc-ubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fc-family%2Fc-ubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ubsan.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -73,14 +73,22 @@ ubsan_instrument_division (location_t loc, tree op0, tree op1)\n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n-  tree data = ubsan_create_data (\"__ubsan_overflow_data\",\n-\t\t\t\t &loc, NULL,\n-\t\t\t\t ubsan_type_descriptor (type, false),\n-\t\t\t\t NULL_TREE);\n-  data = build_fold_addr_expr_loc (loc, data);\n-  tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW);\n-  tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n-\t\t\t    ubsan_encode_value (op1));\n+  if (flag_sanitize_undefined_trap_on_error)\n+    tt = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      tree data = ubsan_create_data (\"__ubsan_overflow_data\", &loc, NULL,\n+\t\t\t\t     ubsan_type_descriptor (type, false),\n+\t\t\t\t     NULL_TREE);\n+      data = build_fold_addr_expr_loc (loc, data);\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW\n+\t  : BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT;\n+      tt = builtin_decl_explicit (bcode);\n+      tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n+\t\t\t\tubsan_encode_value (op1));\n+    }\n   t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n \n   return t;\n@@ -142,19 +150,28 @@ ubsan_instrument_shift (location_t loc, enum tree_code code,\n   /* In case we have a SAVE_EXPR in a conditional context, we need to\n      make sure it gets evaluated before the condition.  */\n   t = fold_build2 (COMPOUND_EXPR, TREE_TYPE (t), op0, t);\n-  tree data = ubsan_create_data (\"__ubsan_shift_data\",\n-\t\t\t\t &loc, NULL,\n-\t\t\t\t ubsan_type_descriptor (type0, false),\n-\t\t\t\t ubsan_type_descriptor (type1, false),\n-\t\t\t\t NULL_TREE);\n-\n-  data = build_fold_addr_expr_loc (loc, data);\n-\n   t = fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t,\n \t\t   tt ? tt : integer_zero_node);\n-  tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS);\n-  tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n-\t\t\t    ubsan_encode_value (op1));\n+\n+  if (flag_sanitize_undefined_trap_on_error)\n+    tt = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      tree data = ubsan_create_data (\"__ubsan_shift_data\", &loc, NULL,\n+\t\t\t\t     ubsan_type_descriptor (type0, false),\n+\t\t\t\t     ubsan_type_descriptor (type1, false),\n+\t\t\t\t     NULL_TREE);\n+\n+      data = build_fold_addr_expr_loc (loc, data);\n+\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS\n+\t  : BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT;\n+      tt = builtin_decl_explicit (bcode);\n+      tt = build_call_expr_loc (loc, tt, 3, data, ubsan_encode_value (op0),\n+\t\t\t\tubsan_encode_value (op1));\n+    }\n   t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n \n   return t;\n@@ -169,13 +186,21 @@ ubsan_instrument_vla (location_t loc, tree size)\n   tree t, tt;\n \n   t = fold_build2 (LE_EXPR, boolean_type_node, size, build_int_cst (type, 0));\n-  tree data = ubsan_create_data (\"__ubsan_vla_data\",\n-\t\t\t\t &loc, NULL,\n-\t\t\t\t ubsan_type_descriptor (type, false),\n-\t\t\t\t NULL_TREE);\n-  data = build_fold_addr_expr_loc (loc, data);\n-  tt = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE);\n-  tt = build_call_expr_loc (loc, tt, 2, data, ubsan_encode_value (size));\n+  if (flag_sanitize_undefined_trap_on_error)\n+    tt = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      tree data = ubsan_create_data (\"__ubsan_vla_data\", &loc, NULL,\n+\t\t\t\t     ubsan_type_descriptor (type, false),\n+\t\t\t\t     NULL_TREE);\n+      data = build_fold_addr_expr_loc (loc, data);\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE\n+\t  : BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT;\n+      tt = builtin_decl_explicit (bcode);\n+      tt = build_call_expr_loc (loc, tt, 2, data, ubsan_encode_value (size));\n+    }\n   t = fold_build3 (COND_EXPR, void_type_node, t, tt, void_zero_node);\n \n   return t;\n@@ -186,6 +211,8 @@ ubsan_instrument_vla (location_t loc, tree size)\n tree\n ubsan_instrument_return (location_t loc)\n {\n+  if (flag_sanitize_undefined_trap_on_error)\n+    return build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n   /* It is possible that PCH zapped table with definitions of sanitizer\n      builtins.  Reinitialize them if needed.  */\n   initialize_sanitizer_builtins ();"}, {"sha": "d46d4c7e70a244451d117ca843859b6020f0a033", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -862,6 +862,14 @@ fsanitize=\n Common Driver Report Joined\n Select what to sanitize\n \n+fsanitize-recover\n+Common Report Var(flag_sanitize_recover) Init(1)\n+After diagnosing undefined behavior attempt to continue execution\n+\n+fsanitize-undefined-trap-on-error\n+Common Report Var(flag_sanitize_undefined_trap_on_error) Init(0)\n+Use trap instead of a library function for undefined behavior sanitization\n+\n fasynchronous-unwind-tables\n Common Report Var(flag_asynchronous_unwind_tables) Optimization\n Generate unwind tables that are exact at each instruction boundary"}, {"sha": "c5572b6fea3797bd17f1880f33e5044e9b6817be", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -288,7 +288,8 @@ Objective-C and Objective-C++ Dialects}.\n @item Debugging Options\n @xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n @gccoptlist{-d@var{letters}  -dumpspecs  -dumpmachine  -dumpversion @gol\n--fsanitize=@var{style} @gol\n+-fsanitize=@var{style} -fsanitize-recover @gol\n+-fsanitize-undefined-trap-on-error @gol\n -fdbg-cnt-list -fdbg-cnt=@var{counter-value-list} @gol\n -fdisable-ipa-@var{pass_name} @gol\n -fdisable-rtl-@var{pass_name} @gol\n@@ -5380,6 +5381,26 @@ While @option{-ftrapv} causes traps for signed overflows to be emitted,\n @option{-fsanitize=undefined} gives a diagnostic message.\n This currently works only for the C family of languages.\n \n+@item -fsanitize-recover\n+@opindex fsanitize-recover\n+By default @option{-fsanitize=undefined} sanitization (and its suboptions\n+except for @option{-fsanitize=unreachable} and @option{-fsanitize=return})\n+after reporting undefined behavior attempts to continue running the\n+program as if no undefined behavior happened.  This means multiple undefined\n+behavior runtime errors can be reported in a single program run, and the exit\n+code of the program may indicate success even when undefined behavior\n+has been reported.  The @option{-fno-sanitize-recover} can be used to alter\n+this behavior, only the first detected undefined behavior will be reported\n+and program will exit after that with non-zero exit code.\n+\n+@item -fsanitize-undefined-trap-on-error\n+@opindex fsanitize-undefined-trap-on-error\n+The @option{-fsanitize-undefined-trap-on-error} instructs the compiler to\n+report undefined behavior using @code{__builtin_trap ()} rather than\n+a @code{libubsan} library routine.  The advantage of this is that the\n+@code{libubsan} library is not needed and will not be linked in, so this\n+is usable even for use in freestanding environments.\n+\n @item -fdump-final-insns@r{[}=@var{file}@r{]}\n @opindex fdump-final-insns\n Dump the final internal representation (RTL) to @var{file}.  If the"}, {"sha": "e5130d13535604a1e852434925fbe734440d2996", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -8170,7 +8170,8 @@ sanitize_spec_function (int argc, const char **argv)\n   if (strcmp (argv[0], \"thread\") == 0)\n     return (flag_sanitize & SANITIZE_THREAD) ? \"\" : NULL;\n   if (strcmp (argv[0], \"undefined\") == 0)\n-    return (flag_sanitize & SANITIZE_UNDEFINED) ? \"\" : NULL;\n+    return ((flag_sanitize & SANITIZE_UNDEFINED)\n+\t    && !flag_sanitize_undefined_trap_on_error) ? \"\" : NULL;\n   if (strcmp (argv[0], \"leak\") == 0)\n     return ((flag_sanitize\n \t     & (SANITIZE_ADDRESS | SANITIZE_LEAK | SANITIZE_THREAD))"}, {"sha": "6184b5ad58bdd79aaa81b56c42a93a705ed117f0", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -335,3 +335,39 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE,\n \t\t      \"__ubsan_handle_load_invalid_value\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_divrem_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,\n+\t\t      \"__ubsan_handle_shift_out_of_bounds_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,\n+\t\t      \"__ubsan_handle_vla_bound_not_positive_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT,\n+\t\t      \"__ubsan_handle_type_mismatch_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_add_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_sub_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_mul_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_negate_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT,\n+\t\t      \"__ubsan_handle_load_invalid_value_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "abbd1cfee87a1b625efbeea719a4fe8e1bbb75fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,3 +1,34 @@\n+2014-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/60275\n+\t* g++.dg/ubsan/return-2.C: Revert 2014-03-24 changes, add\n+\t-fno-sanitize-recover to dg-options.\n+\t* g++.dg/ubsan/cxx11-shift-1.C: Remove c++11 target restriction,\n+\tadd -std=c++11 to dg-options.\n+\t* g++.dg/ubsan/cxx11-shift-2.C: Likewise.\n+\t* g++.dg/ubsan/cxx1y-vla.C: Remove c++1y target restriction,\n+\tadd -std=c++1y to dg-options.\n+\t* c-c++-common/ubsan/undefined-1.c: Revert 2014-03-24 changes, add\n+\t-fno-sanitize-recover to dg-options.\n+\t* c-c++-common/ubsan/overflow-sub-1.c: Likewise.\n+\t* c-c++-common/ubsan/vla-4.c: Likewise.\n+\t* c-c++-common/ubsan/pr59503.c: Likewise.\n+\t* c-c++-common/ubsan/vla-3.c: Likewise.\n+\t* c-c++-common/ubsan/save-expr-1.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-add-1.c: Likewise.\n+\t* c-c++-common/ubsan/shift-3.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-1.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-negate-2.c: Likewise.\n+\t* c-c++-common/ubsan/vla-2.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-mul-1.c: Likewise.\n+\t* c-c++-common/ubsan/pr60613-1.c: Likewise.\n+\t* c-c++-common/ubsan/shift-6.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-mul-3.c: Likewise.\n+\t* c-c++-common/ubsan/overflow-add-3.c: New test.\n+\t* c-c++-common/ubsan/overflow-add-4.c: New test.\n+\t* c-c++-common/ubsan/div-by-zero-6.c: New test.\n+\t* c-c++-common/ubsan/div-by-zero-7.c: New test.\n+\n 2014-04-22  Christian Bruel  <christian.bruel@st.com>\n \n \t* gcc.target/sh/hiconst.c: New test."}, {"sha": "27a18bb096e56307b1965fbb77983c1a95a23fb9", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-6.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-6.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero\" } */\n+\n+#include <stdio.h>\n+\n+int x;\n+\n+__attribute__((noinline, noclone))\n+void\n+barrier (void)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  if (x)\n+    __builtin_exit (1);\n+}\n+\n+int\n+main (void)\n+{\n+  volatile int a = 0;\n+  volatile long long int b = 0;\n+  volatile unsigned int c = 1;\n+\n+  barrier (); fputs (\"1st\\n\", stderr); barrier ();\n+  a / b;\n+  barrier (); fputs (\"2nd\\n\", stderr); barrier ();\n+  0 / 0;\n+  barrier (); fputs (\"3rd\\n\", stderr); barrier ();\n+  a / 0;\n+  barrier (); fputs (\"4th\\n\", stderr); barrier ();\n+  0 / b;\n+  barrier (); fputs (\"5th\\n\", stderr); barrier ();\n+  2 / --c;\n+  barrier (); fputs (\"6th\\n\", stderr); barrier ();\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"1st(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"2nd(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"3rd(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"4th(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"5th(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"6th\" } */"}, {"sha": "b65a0bc125f418e25e59957ed9a3a92c199f8354", "filename": "gcc/testsuite/c-c++-common/ubsan/div-by-zero-7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fdiv-by-zero-7.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=integer-divide-by-zero -Wno-div-by-zero -fno-sanitize-recover\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+#include <stdio.h>\n+\n+int x;\n+\n+__attribute__((noinline, noclone))\n+void\n+barrier (void)\n+{\n+  asm volatile (\"\" : : : \"memory\");\n+  if (++x == 3)\n+    __builtin_exit (0);\n+}\n+\n+int\n+main (void)\n+{\n+  volatile int a = 0;\n+  volatile long long int b = 0;\n+  volatile unsigned int c = 1;\n+\n+  barrier (); fputs (\"1st\\n\", stderr); barrier ();\n+  a / b;\n+  barrier (); fputs (\"2nd\\n\", stderr); barrier ();\n+  0 / 0;\n+  barrier (); fputs (\"3rd\\n\", stderr); barrier ();\n+  a / 0;\n+  barrier (); fputs (\"4th\\n\", stderr); barrier ();\n+  0 / b;\n+  barrier (); fputs (\"5th\\n\", stderr); barrier ();\n+  2 / --c;\n+  barrier (); fputs (\"6th\\n\", stderr); barrier ();\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"1st(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*division by zero\" } */"}, {"sha": "b0ef25924e8db82a2605c0b7dc350ca2dcbdf036", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n \n #ifndef ASM1\n # define ASM1(a) /* Nothing */\n@@ -53,8 +51,6 @@\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   CHECK (FN1 (char, char, +), 23);\n   CHECK (FN1 (char, char, -), 5);\n   CHECK (FN1 (char, char, *), 126);\n@@ -261,9 +257,5 @@ main (void)\n   CHECK (FN5 (unsigned long int), -77);\n   CHECK (FN5 (long long int), -77);\n   CHECK (FN5 (unsigned long long int), -77);\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "b009f5bb18614a4c0b5852d55053fda2a0aa1823", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SHRT_MAX __SHRT_MAX__\n@@ -18,8 +16,6 @@ check (int i, int j)\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n #if __INT_MAX__ == 2147483647\n   /* Here, nothing should fail.  */\n   volatile int j = INT_MAX;\n@@ -59,9 +55,5 @@ main (void)\n   d++;\n   check (d, -32768);\n #endif\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "6475d10469e944a8566ea3f9e4fd3c6501d914c4", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-3.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-3.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+#define INT_MAX __INT_MAX__\n+#define INT_MIN (-__INT_MAX__ - 1)\n+\n+int\n+main (void)\n+{\n+  volatile int j = INT_MAX;\n+  volatile int i = 1;\n+  volatile int k = j + i;\n+  return 0;\n+}\n+\n+/* { dg-output \"signed integer overflow: 2147483647 \\\\+ 1 cannot be represented in type 'int'\" } */"}, {"sha": "3f6f6bd089508776dfac3a11c175e53840a8550f", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-add-4.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-add-4.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fsanitize-undefined-trap-on-error\" } */\n+/* { dg-shouldfail \"ubsan\" } */\n+\n+#define INT_MAX __INT_MAX__\n+#define INT_MIN (-__INT_MAX__ - 1)\n+\n+int\n+main (void)\n+{\n+  volatile int j = INT_MAX;\n+  volatile int i = 1;\n+  volatile int k = j + i;\n+  return 0;\n+}"}, {"sha": "22ea6398752b19eff795558b8d8b161189873b2b", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-mul-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SHRT_MAX __SHRT_MAX__\n@@ -18,8 +16,6 @@ check (int i, int j)\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   /* Test integer promotion.  */\n #if __SCHAR_MAX__ == 127\n   volatile signed char a = -2;\n@@ -45,9 +41,5 @@ main (void)\n   o = m * n;\n   check (o, INT_MIN);\n #endif\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "896c0bc0279548baa8a48d88ac7640a9232edaf1", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-mul-3.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-mul-3.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n \n __attribute__((noinline, noclone)) long long\n mul (long long x, long long y)\n@@ -31,16 +29,10 @@ long long tab[] = {\n int\n main ()\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   unsigned int i;\n   for (i = 0; i < sizeof (tab) / sizeof (long long); i += 3)\n     if (mul (tab[i], tab[i + 1]) != tab[i + 2]\n         || mul (tab[i + 1], tab[i]) != tab[i + 2])\n       __builtin_abort ();\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "8b5ffa5893a8bb5c1bab92de4b42f9249294ac3a", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-negate-2.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-negate-2.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n \n #define SCHAR_MIN (-__SCHAR_MAX__ - 1)\n #define SHRT_MIN (-__SHRT_MAX__ - 1)\n@@ -14,8 +12,6 @@\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   volatile signed char c = -SCHAR_MIN;\n   CHECK (c, -128);\n \n@@ -37,9 +33,5 @@ main (void)\n   volatile long long lli = LLONG_MIN;\n   lli = -(unsigned long long) lli;\n   CHECK (lli, -0x8000000000000000L);\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "2b10f9e5905c885dff2e0cd68299aaba01aa3719", "filename": "gcc/testsuite/c-c++-common/ubsan/overflow-sub-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Foverflow-sub-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -Wno-unused-variable -fno-sanitize-recover\" } */\n \n #define SCHAR_MAX __SCHAR_MAX__\n #define SCHAR_MIN (-__SCHAR_MAX__ - 1)\n@@ -20,8 +18,6 @@ check (int i, int j)\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n #if __INT_MAX__ == 2147483647\n   /* Here, nothing should fail.  */\n   volatile int i = -1;\n@@ -61,9 +57,5 @@ main (void)\n   d--;\n   check (d, 32767);\n #endif\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "81447d7e16b7c118bc7cb52ae075e32ebaf0c8a3", "filename": "gcc/testsuite/c-c++-common/ubsan/pr59503.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr59503.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,21 +1,13 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=signed-integer-overflow\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=signed-integer-overflow -fno-sanitize-recover\" } */\n \n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   long long int a = 14;\n   long int b = 9;\n   asm volatile (\"\" : \"+r\" (a), \"+r\" (b));\n   if ((a - b) != 5)\n     __builtin_abort ();\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "4c0810b5de2b972c79bf97355799bf751e654c77", "filename": "gcc/testsuite/c-c++-common/ubsan/pr60613-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fpr60613-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,8 +1,6 @@\n /* PR sanitizer/60613 */\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n \n long long y;\n \n@@ -26,16 +24,10 @@ bar (long long x)\n int\n main ()\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   y = 1;\n   if (foo (8 - 2040) != 8 - 1)\n     __builtin_abort ();\n   if (bar (1) != 8 - 1)\n     __builtin_abort ();\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "89ac58c281e4e9b8af10bf91ace8eedd7d1e8eba", "filename": "gcc/testsuite/c-c++-common/ubsan/save-expr-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fsave-expr-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,19 +1,11 @@\n /* { dg-do compile } */\n-/* { dg-options \"-fsanitize=shift -Wall -Werror -O\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=shift -Wall -Werror -O -fno-sanitize-recover\" } */\n \n static int x;\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   int o = 1;\n   int y = x << o;\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return y;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "67f1b6961776bd3eefb26f60ba45597e1db5f8c3", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-3.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-3.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,19 +1,11 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=shift -w\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover\" } */\n \n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   unsigned int a = 1;\n   a <<= 31;\n   a <<= 1;\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "e26e6846ca769e867e986dfafd7f862e73e6d391", "filename": "gcc/testsuite/c-c++-common/ubsan/shift-6.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fshift-6.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,15 +1,11 @@\n /* PR sanitizer/58413 */\n /* { dg-do run { target int32plus } } */\n-/* { dg-options \"-fsanitize=shift -w\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover\" } */\n \n int x = 7;\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   /* All of the following should pass.  */\n   int A[128 >> 5] = {};\n   int B[128 << 5] = {};\n@@ -30,9 +26,5 @@ main (void)\n     case 128 >> (4 + 1):\n       return 1;\n     }\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "201818ddd7f371d49eb5e2a8c4a0d1020bf8ef34", "filename": "gcc/testsuite/c-c++-common/ubsan/undefined-1.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fundefined-1.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=undefined\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=undefined -fno-sanitize-recover\" } */\n \n int\n foo (int x, int y)\n@@ -21,13 +19,7 @@ bar (int x, int y)\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   foo (3, 2);\n   bar (12, 42);\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "c7670423baba075368c75030b247b3f945515f29", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-2.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-2.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,22 +1,14 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -fno-sanitize-recover\" } */\n \n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   const int t = 0;\n   struct s {\n     int x;\n     /* Don't instrument this one.  */\n     int g[t];\n   };\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "06c69393e7e48cece6f0a6fe3440863dca224daf", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-3.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-3.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover\" } */\n \n /* Don't instrument the arrays here.  */\n int\n@@ -13,13 +11,7 @@ foo (int n, int a[])\n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   int a[6] = { };\n   int ret = foo (3, a);\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return ret;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "d47f26bf37f81a42d8192d9ef6ab0865eaff895a", "filename": "gcc/testsuite/c-c++-common/ubsan/vla-4.c", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Fvla-4.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,21 +1,13 @@\n /* { dg-do run } */\n-/* { dg-options \"-fsanitize=vla-bound\" } */\n-\n-#include <stdio.h>\n+/* { dg-options \"-fsanitize=vla-bound -fno-sanitize-recover\" } */\n \n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   int x = 1;\n   /* Check that the size of an array is evaluated only once.  */\n   int a[++x];\n   if (x != 2)\n     __builtin_abort ();\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "23a7b154d00f15c64f8ee088f73ab1c508db26bb", "filename": "gcc/testsuite/g++.dg/ubsan/cxx11-shift-1.C", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-1.C?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,18 +1,10 @@\n-/* { dg-do run { target c++11 } } */\n-/* { dg-options \"-fsanitize=shift -w\" } */\n-\n-#include <stdio.h>\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift -w -fno-sanitize-recover -std=c++11\" } */\n \n int\n main (void)\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   int a = 1;\n   a <<= 31;\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n   return 0;\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "fbc16dfd3d8d1f27c5a128e1c4db6c7fe281d035", "filename": "gcc/testsuite/g++.dg/ubsan/cxx11-shift-2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx11-shift-2.C?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do run { target c++11 } } */\n-/* { dg-options \"-fsanitize=shift -w\" } */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=shift -w -std=c++11\" } */\n \n int\n main (void)"}, {"sha": "7023c70cea0dfa51c484b3260fbef5dc3569ee47", "filename": "gcc/testsuite/g++.dg/ubsan/cxx1y-vla.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fcxx1y-vla.C?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,5 +1,5 @@\n-/* { dg-do run { target c++1y } } */\n-/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable\" } */\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=vla-bound -Wall -Wno-unused-variable -std=c++1y\" } */\n /* { dg-shouldfail \"ubsan\" } */\n \n int"}, {"sha": "a1829990a811120558ddc085aa30b875a762fdfb", "filename": "gcc/testsuite/g++.dg/ubsan/return-2.C", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Freturn-2.C?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -1,7 +1,5 @@\n // { dg-do run }\n-// { dg-options \"-fsanitize=return\" }\n-\n-#include <stdio.h>\n+// { dg-options \"-fsanitize=return -fno-sanitize-recover\" }\n \n struct S { S (); ~S (); };\n \n@@ -22,12 +20,6 @@ foo (int x)\n int\n main ()\n {\n-  fputs (\"UBSAN TEST START\\n\", stderr);\n-\n   foo (1);\n   foo (14);\n-\n-  fputs (\"UBSAN TEST END\\n\", stderr);\n }\n-\n-/* { dg-output \"UBSAN TEST START(\\n|\\r\\n|\\r)UBSAN TEST END\" } */"}, {"sha": "d9d740c7cd37b6bc2b8b4de69eafff75d01eb3e5", "filename": "gcc/ubsan.c", "status": "modified", "additions": 56, "deletions": 24, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=1c33c9b70c60fc4c520cb55aa239ffb48ab88f9a", "patch": "@@ -516,6 +516,9 @@ ubsan_create_data (const char *name, const location_t *ploc,\n tree\n ubsan_instrument_unreachable (location_t loc)\n {\n+  if (flag_sanitize_undefined_trap_on_error)\n+    return build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\n   initialize_sanitizer_builtins ();\n   tree data = ubsan_create_data (\"__ubsan_unreachable_data\", &loc, NULL,\n \t\t\t\t NULL_TREE);\n@@ -583,16 +586,25 @@ ubsan_expand_null_ifn (gimple_stmt_iterator gsi)\n     set_immediate_dominator (CDI_DOMINATORS, then_bb, cond_bb);\n \n   /* Put the ubsan builtin call into the newly created BB.  */\n-  tree fn = builtin_decl_implicit (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH);\n-  const struct ubsan_mismatch_data m\n-    = { build_zero_cst (pointer_sized_int_node), ckind };\n-  tree data = ubsan_create_data (\"__ubsan_null_data\",\n-\t\t\t\t &loc, &m,\n-\t\t\t\t ubsan_type_descriptor (TREE_TYPE (ptr), true),\n-\t\t\t\t NULL_TREE);\n-  data = build_fold_addr_expr_loc (loc, data);\n-  gimple g = gimple_build_call (fn, 2, data,\n-\t\t\t\tbuild_zero_cst (pointer_sized_int_node));\n+  gimple g;\n+  if (flag_sanitize_undefined_trap_on_error)\n+    g = gimple_build_call (builtin_decl_implicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH\n+\t  : BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_ABORT;\n+      tree fn = builtin_decl_implicit (bcode);\n+      const struct ubsan_mismatch_data m\n+\t= { build_zero_cst (pointer_sized_int_node), ckind };\n+      tree data = ubsan_create_data (\"__ubsan_null_data\", &loc, &m,\n+\t\t\t\t     ubsan_type_descriptor (TREE_TYPE (ptr),\n+\t\t\t\t\t\t\t    true), NULL_TREE);\n+      data = build_fold_addr_expr_loc (loc, data);\n+      g = gimple_build_call (fn, 2, data,\n+\t\t\t     build_zero_cst (pointer_sized_int_node));\n+    }\n   gimple_set_location (g, loc);\n   gimple_stmt_iterator gsi2 = gsi_start_bb (then_bb);\n   gsi_insert_after (&gsi2, g, GSI_NEW_STMT);\n@@ -662,6 +674,9 @@ tree\n ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n \t\t\t      tree op0, tree op1)\n {\n+  if (flag_sanitize_undefined_trap_on_error)\n+    return build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+\n   tree data = ubsan_create_data (\"__ubsan_overflow_data\", &loc, NULL,\n \t\t\t\t ubsan_type_descriptor (lhstype, false),\n \t\t\t\t NULL_TREE);\n@@ -670,16 +685,24 @@ ubsan_build_overflow_builtin (tree_code code, location_t loc, tree lhstype,\n   switch (code)\n     {\n     case PLUS_EXPR:\n-      fn_code = BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW;\n+      fn_code = flag_sanitize_recover\n+\t\t? BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW\n+\t\t: BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT;\n       break;\n     case MINUS_EXPR:\n-      fn_code = BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW;\n+      fn_code = flag_sanitize_recover\n+\t\t? BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW\n+\t\t: BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT;\n       break;\n     case MULT_EXPR:\n-      fn_code = BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW;\n+      fn_code = flag_sanitize_recover\n+\t\t? BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW\n+\t\t: BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT;\n       break;\n     case NEGATE_EXPR:\n-      fn_code = BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW;\n+      fn_code = flag_sanitize_recover\n+\t\t? BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW\n+\t\t: BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT;\n       break;\n     default:\n       gcc_unreachable ();\n@@ -844,17 +867,26 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   gimple_assign_set_rhs_with_ops (&gsi2, NOP_EXPR, urhs, NULL_TREE);\n   update_stmt (stmt);\n \n-  tree data = ubsan_create_data (\"__ubsan_invalid_value_data\",\n-\t\t\t\t &loc, NULL,\n-\t\t\t\t ubsan_type_descriptor (type, false),\n-\t\t\t\t NULL_TREE);\n-  data = build_fold_addr_expr_loc (loc, data);\n-  tree fn = builtin_decl_explicit (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE);\n-\n   gsi2 = gsi_after_labels (then_bb);\n-  tree val = force_gimple_operand_gsi (&gsi2, ubsan_encode_value (urhs),\n-\t\t\t\t       true, NULL_TREE, true, GSI_SAME_STMT);\n-  g = gimple_build_call (fn, 2, data, val);\n+  if (flag_sanitize_undefined_trap_on_error)\n+    g = gimple_build_call (builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      tree data = ubsan_create_data (\"__ubsan_invalid_value_data\", &loc, NULL,\n+\t\t\t\t     ubsan_type_descriptor (type, false),\n+\t\t\t\t     NULL_TREE);\n+      data = build_fold_addr_expr_loc (loc, data);\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE\n+\t  : BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT;\n+      tree fn = builtin_decl_explicit (bcode);\n+\n+      tree val = force_gimple_operand_gsi (&gsi2, ubsan_encode_value (urhs),\n+\t\t\t\t\t   true, NULL_TREE, true,\n+\t\t\t\t\t   GSI_SAME_STMT);\n+      g = gimple_build_call (fn, 2, data, val);\n+    }\n   gimple_set_location (g, loc);\n   gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n }"}]}