{"sha": "8813ac2634a24b3c3a144b2f925033faf3c8e359", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxM2FjMjYzNGEyNGIzYzNhMTQ0YjJmOTI1MDMzZmFmM2M4ZTM1OQ==", "commit": {"author": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-15T03:10:31Z"}, "committer": {"name": "Keith Seitz", "email": "kseitz@gcc.gnu.org", "date": "2005-06-15T03:10:31Z"}, "message": "JdwpIdFactory.java: New file.\n\n        * gnu/classpath/jdwp/id/JdwpIdFactory.java: New file.\n        * gnu/classpath/jdwp/processor/PacketProcessor.java: New file.\n\nFrom-SVN: r100970", "tree": {"sha": "eee83ff7625f84834b4327f77a0206348726ed3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eee83ff7625f84834b4327f77a0206348726ed3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8813ac2634a24b3c3a144b2f925033faf3c8e359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813ac2634a24b3c3a144b2f925033faf3c8e359", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8813ac2634a24b3c3a144b2f925033faf3c8e359", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8813ac2634a24b3c3a144b2f925033faf3c8e359/comments", "author": null, "committer": null, "parents": [{"sha": "b41f0c7b894737de1e2d6809b4f64ddc11f7c18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b41f0c7b894737de1e2d6809b4f64ddc11f7c18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b41f0c7b894737de1e2d6809b4f64ddc11f7c18d"}], "stats": {"total": 316, "additions": 312, "deletions": 4}, "files": [{"sha": "3f64814cc2a9f5f07124d886918a491a6b616ebd", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8813ac2634a24b3c3a144b2f925033faf3c8e359", "patch": "@@ -1,3 +1,12 @@\n+2005-06-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n+\n+\t* configure.host: Handle Solaris 10/x86.\n+\n+2005-06-14  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gnu/classpath/jdwp/id/JdwpIdFactory.java: New file.\n+\t* gnu/classpath/jdwp/processor/PacketProcessor.java: New file.\n+\n 2005-06-14  Keith Seitz  <keiths@redhat.com>\n \n \t* gnu/classpath/jdwp/id/ArrayId.java: New file.\n@@ -13,10 +22,6 @@\n \t* gnu/classpath/jdwp/id/ThreadGroupId.java: New file.\n \t* gnu/classpath/jdwp/id/ThreadId.java: New file.\n \n-2005-06-15  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n-\n-\t* configure.host: Handle Solaris 10/x86.\n-\n 2005-06-14  Tom Tromey  <tromey@redhat.com>\n \n \tPR libgcj/19877:"}, {"sha": "5a26cf888b00dd6ff4c3432743b9e3ee706ab233", "filename": "libjava/gnu/classpath/jdwp/id/JdwpIdFactory.java", "status": "added", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FJdwpIdFactory.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FJdwpIdFactory.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fid%2FJdwpIdFactory.java?ref=8813ac2634a24b3c3a144b2f925033faf3c8e359", "patch": "@@ -0,0 +1,165 @@\n+/* JdwpIdFactory.java -- factory for generating type and object IDs\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.id;\n+\n+import java.util.HashMap;\n+\n+/**\n+ * This factory generates ids for objects and types that may\n+ * be sent to a debugger.\n+ *\n+ * @author Keith Seitz  (keiths@redhat.com)\n+ */\n+public class JdwpIdFactory\n+{\n+  // ID of last object / referencetype\n+  private static Object _idLock = new Object ();\n+  private static Object _ridLock = new Object ();\n+  private static long _lastId = 0;\n+  private static long _lastRid = 0;\n+\n+  // A list of all ID types\n+  private static HashMap _idList = new HashMap ();\n+\n+  // Initialize the id list with known types\n+  static\n+  {\n+    // ObjectId and ArrayId are special cases. See newId.\n+    _idList.put (ClassLoaderId.typeClass, ClassLoaderId.class);\n+    _idList.put (ClassObjectId.typeClass, ClassObjectId.class);\n+    //_idList.put (FieldId.typeClass, FieldId.class);\n+    //_idList.put (FrameId.typeClass, FrameId.class);\n+    //_idList.put (MethodId.typeClass, MethodId.class);\n+    _idList.put (StringId.typeClass, StringId.class);\n+    _idList.put (ThreadId.typeClass, ThreadId.class);\n+    _idList.put (ThreadGroupId.typeClass, ThreadGroupId.class);\n+  }\n+\n+  /**\n+   * Returns a new id for the given object\n+   *\n+   * @param object  the object for which an id is desired\n+   * @returns a suitable object id\n+   */\n+  public static JdwpId newId (Object object)\n+  {\n+    JdwpId id = null;\n+    \n+    // Special case: arrays\n+    if (object.getClass ().isArray ())\n+\tid = new ArrayId ();\n+    else\n+      {\n+\t// Loop through all classes until we hit baseclass\n+\tClass myClass;\n+\tfor (myClass = object.getClass (); myClass != null;\n+\t     myClass = myClass.getSuperclass ())\n+\t  {\n+\t    Class clz = (Class) _idList.get (myClass);\n+\t    if (clz != null)\n+\t      {\n+\t\ttry\n+\t\t  {\n+\t\t    id = (JdwpId) clz.newInstance ();\n+\t\t    synchronized (_idLock)\n+\t\t      {\n+\t\t\tid.setId (++_lastId);\n+\t\t      }\n+\t\t    return id;\n+\t\t  }\n+\t\tcatch (InstantiationException ie)\n+\t\t  {\n+\t\t    // This really should not happen\n+\t\t    throw new RuntimeException (\"cannot create new ID\", ie);\n+\t\t  }\n+\t\tcatch (IllegalAccessException iae)\n+\t\t  {\n+\t\t    // This really should not happen\n+\t\t    throw new RuntimeException (\"illegal access of ID\", iae);\n+\t\t  }\n+\t      }\n+\t  }\n+\n+\t/* getSuperclass returned null and no matching ID type found.\n+\t   So it must derive from Object. */\n+\tid = new ObjectId ();\n+      }\n+\n+    synchronized (_idLock)\n+      {\n+\tid.setId (++_lastId);\n+      }\n+\n+    return id;\n+  }\n+\n+  /**\n+   * Returns a new reference type id for the given class\n+   *\n+   * @param clazz  the <code>Class</code> for which an id is desired\n+   * @returns a suitable reference type id or <code>null</code>\n+   */\n+  public static ReferenceTypeId newReferenceTypeId (Class clazz)\n+  {\n+    ReferenceTypeId id = null;\n+    try\n+      {\n+\tif (clazz.isArray ())\n+\t  id = new ArrayReferenceTypeId ();\n+\telse if (clazz.isInterface ())\n+\t  id = new InterfaceReferenceTypeId ();\n+\telse\n+\t  id = new ClassReferenceTypeId ();\n+\tsynchronized (_ridLock)\n+\t  {\n+\t    id.setId (++_lastRid);\n+\t  }\n+\treturn id;\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\treturn null;\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\treturn null;\n+      }\n+  }\n+}"}, {"sha": "8195cbbdee2cff86c4dd2673ed61cd77457a54ff", "filename": "libjava/gnu/classpath/jdwp/processor/PacketProcessor.java", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8813ac2634a24b3c3a144b2f925033faf3c8e359/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fclasspath%2Fjdwp%2Fprocessor%2FPacketProcessor.java?ref=8813ac2634a24b3c3a144b2f925033faf3c8e359", "patch": "@@ -0,0 +1,138 @@\n+/* PacketProcessor.java -- a thread which processes command packets\n+   from the debugger\n+   Copyright (C) 2005 Free Software Foundation\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.classpath.jdwp.processor;\n+\n+import gnu.classpath.jdwp.Jdwp;\n+import gnu.classpath.jdwp.event.Event;\n+import gnu.classpath.jdwp.exception.JdwpException;\n+import gnu.classpath.jdwp.transport.JdwpConnection;\n+import gnu.classpath.jdwp.transport.JdwpCommandPacket;\n+import gnu.classpath.jdwp.transport.JdwpPacket;\n+import gnu.classpath.jdwp.transport.JdwpReplyPacket;\n+\n+import java.io.IOException;\n+\n+/**\n+ * This class is responsible for processing packets from the\n+ * debugger. It waits for an available packet from the connection\n+ * ({@link gnu.classpath.jdwp.transport.JdwpConnection}) and then\n+ * processes the packet and any reply.\n+ *\n+ * @author Keith Seitz (keiths@redhat.com)\n+ */\n+public class PacketProcessor\n+  extends Thread\n+{\n+  // The connection to the debugger\n+  private JdwpConnection _connection;\n+  \n+  // Shutdown this thread?\n+  private boolean _shutdown;\n+\n+  /**\n+   * Constructs a new <code>PacketProcessor</code> object\n+   * Connection must be validated before getting here!\n+   *\n+   * @param con  the connection\n+   */\n+  public PacketProcessor (JdwpConnection con)\n+  {\n+    _connection = con;\n+    _shutdown = false;\n+  }\n+\n+  /**\n+   * Main run routine for this thread. Will loop getting packets\n+   * from the connection and processing them.\n+   */\n+  public void run ()\n+  {\n+    while (!_shutdown)\n+      {\n+\t_processOnePacket ();\n+      }\n+  }\n+\n+  /**\n+   * Shutdown the packet processor\n+   */\n+  public void shutdown ()\n+  {\n+    _shutdown = true;\n+    interrupt ();\n+  }\n+\n+  // Helper function which actually does all the work of waiting\n+  // for a packet and getting it processed.\n+  private void _processOnePacket ()\n+  {\n+    JdwpPacket pkt = _connection.getPacket ();\n+    if (pkt instanceof JdwpReplyPacket)\n+      {\n+\t// We're not supposed to get these from the debugger!\n+\t// Drop it on the floor\n+\treturn;\n+      }\n+\n+    if (pkt != null)\n+      {\n+\tJdwpReplyPacket reply;\n+\ttry\n+\t  {\n+\t    // !! process packet here !!\n+\t    reply = new JdwpReplyPacket (pkt, (short) 0);\n+\t  }\n+\tcatch (JdwpException ex)\n+\t  {\n+\t    reply = new JdwpReplyPacket (pkt, ex.getErrorCode ());\n+\t  }\n+\n+\ttry\n+\t  {\n+\t    _connection.sendPacket (reply);\n+\t  }\n+\tcatch (IOException ioe)\n+\t  {\n+\t    // Not much we can do...\n+\t  }\n+      }\n+  }\n+}"}]}