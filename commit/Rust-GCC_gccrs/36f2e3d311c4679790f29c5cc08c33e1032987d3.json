{"sha": "36f2e3d311c4679790f29c5cc08c33e1032987d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZmMmUzZDMxMWM0Njc5NzkwZjI5YzVjYzA4YzMzZTEwMzI5ODdkMw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:10:20Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-20T10:10:20Z"}, "message": "[multiple changes]\n\n2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Generate freeze\n\tnode for subprogram in Compile_Only mode.\n\n2015-10-20  Dmitriy Anisimkov  <anisimko@adacore.com>\n\n\t* s-atocou.adb, s-atocou.ads, a-contai.adb, a-contai.ads,\n\ts-atocou-x86.adb, s-atocou-builtin.adb: Task safe over container\n\titerations.\n\nFrom-SVN: r229037", "tree": {"sha": "8a0e7a1ee76baa52b9b19a3cf2f42f7f3861784b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a0e7a1ee76baa52b9b19a3cf2f42f7f3861784b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36f2e3d311c4679790f29c5cc08c33e1032987d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f2e3d311c4679790f29c5cc08c33e1032987d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36f2e3d311c4679790f29c5cc08c33e1032987d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36f2e3d311c4679790f29c5cc08c33e1032987d3/comments", "author": null, "committer": null, "parents": [{"sha": "be7e4a402a2c350e685e3af144ae10fcc03c08ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be7e4a402a2c350e685e3af144ae10fcc03c08ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be7e4a402a2c350e685e3af144ae10fcc03c08ac"}], "stats": {"total": 179, "additions": 127, "deletions": 52}, "files": [{"sha": "948230a72ed5a37dcab89c76663760bd35fdb7f5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -1,3 +1,14 @@\n+2015-10-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Generate freeze\n+\tnode for subprogram in Compile_Only mode.\n+\n+2015-10-20  Dmitriy Anisimkov  <anisimko@adacore.com>\n+\n+\t* s-atocou.adb, s-atocou.ads, a-contai.adb, a-contai.ads,\n+\ts-atocou-x86.adb, s-atocou-builtin.adb: Task safe over container\n+\titerations.\n+\n 2015-10-20  Philippe Gil  <gil@adacore.com>\n \n \t* g-debpoo.ads (Dump): NEW print Debug_Pool statistics & main"}, {"sha": "43b9473950ee81e970b774cc88904d4eebed475f", "filename": "gcc/ada/a-contai.adb", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fa-contai.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fa-contai.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-contai.adb?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -29,6 +29,8 @@ package body Ada.Containers is\n \n    package body Generic_Implementation is\n \n+      use SAC;\n+\n       ------------\n       -- Adjust --\n       ------------\n@@ -50,11 +52,7 @@ package body Ada.Containers is\n       procedure Busy (T_Counts : in out Tamper_Counts) is\n       begin\n          if T_Check then\n-            declare\n-               B : Natural renames T_Counts.Busy;\n-            begin\n-               B := B + 1;\n-            end;\n+            Increment (T_Counts.Busy);\n          end if;\n       end Busy;\n \n@@ -119,13 +117,8 @@ package body Ada.Containers is\n       procedure Lock (T_Counts : in out Tamper_Counts) is\n       begin\n          if T_Check then\n-            declare\n-               B : Natural renames T_Counts.Busy;\n-               L : Natural renames T_Counts.Lock;\n-            begin\n-               L := L + 1;\n-               B := B + 1;\n-            end;\n+            Increment (T_Counts.Lock);\n+            Increment (T_Counts.Busy);\n          end if;\n       end Lock;\n \n@@ -160,11 +153,7 @@ package body Ada.Containers is\n       procedure Unbusy (T_Counts : in out Tamper_Counts) is\n       begin\n          if T_Check then\n-            declare\n-               B : Natural renames T_Counts.Busy;\n-            begin\n-               B := B - 1;\n-            end;\n+            Decrement (T_Counts.Busy);\n          end if;\n       end Unbusy;\n \n@@ -175,13 +164,8 @@ package body Ada.Containers is\n       procedure Unlock (T_Counts : in out Tamper_Counts) is\n       begin\n          if T_Check then\n-            declare\n-               B : Natural renames T_Counts.Busy;\n-               L : Natural renames T_Counts.Lock;\n-            begin\n-               L := L - 1;\n-               B := B - 1;\n-            end;\n+            Decrement (T_Counts.Lock);\n+            Decrement (T_Counts.Busy);\n          end if;\n       end Unlock;\n "}, {"sha": "4b0b7953141893b5564b74ea58507eeb540eb9a9", "filename": "gcc/ada/a-contai.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fa-contai.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fa-contai.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-contai.ads?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -23,6 +23,7 @@ pragma Check_Name (Tampering_Check);\n --  checks.\n \n private with Ada.Finalization;\n+with System.Atomic_Counters;\n \n package Ada.Containers is\n    pragma Pure;\n@@ -34,13 +35,15 @@ package Ada.Containers is\n \n private\n \n+   package SAC renames System.Atomic_Counters;\n+\n    Count_Type_Last : constant := Count_Type'Last;\n    --  Count_Type'Last as a universal_integer, so we can compare Index_Type\n    --  values against this without type conversions that might overflow.\n \n    type Tamper_Counts is record\n-      Busy : Natural := 0;\n-      Lock : Natural := 0;\n+      Busy : aliased SAC.Atomic_Unsigned := 0;\n+      Lock : aliased SAC.Atomic_Unsigned := 0;\n    end record;\n \n    --  Busy is positive when tampering with cursors is prohibited. Busy and"}, {"sha": "1df1c07b25840cc928b173721338fec74217e737", "filename": "gcc/ada/s-atocou-builtin.adb", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou-builtin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou-builtin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou-builtin.adb?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -35,19 +35,31 @@\n package body System.Atomic_Counters is\n \n    procedure Sync_Add_And_Fetch\n-     (Ptr   : access Unsigned_32;\n-      Value : Unsigned_32);\n+     (Ptr   : access Atomic_Unsigned;\n+      Value : Atomic_Unsigned);\n    pragma Import (Intrinsic, Sync_Add_And_Fetch, \"__sync_add_and_fetch_4\");\n \n    function Sync_Sub_And_Fetch\n-     (Ptr   : access Unsigned_32;\n-      Value : Unsigned_32) return Unsigned_32;\n+     (Ptr   : access Atomic_Unsigned;\n+      Value : Atomic_Unsigned) return Atomic_Unsigned;\n    pragma Import (Intrinsic, Sync_Sub_And_Fetch, \"__sync_sub_and_fetch_4\");\n \n    ---------------\n    -- Decrement --\n    ---------------\n \n+   procedure Decrement (Item : aliased in out Atomic_Unsigned) is\n+   begin\n+      if Sync_Sub_And_Fetch (Item'Unrestricted_Access, 1) = 0 then\n+         null;\n+      end if;\n+   end Decrement;\n+\n+   function Decrement (Item : aliased in out Atomic_Unsigned) return Boolean is\n+   begin\n+      return Sync_Sub_And_Fetch (Item'Unrestricted_Access, 1) = 0;\n+   end Decrement;\n+\n    function Decrement (Item : in out Atomic_Counter) return Boolean is\n    begin\n       --  Note: the use of Unrestricted_Access here is required because we\n@@ -62,6 +74,11 @@ package body System.Atomic_Counters is\n    -- Increment --\n    ---------------\n \n+   procedure Increment (Item : aliased in out Atomic_Unsigned) is\n+   begin\n+      Sync_Add_And_Fetch (Item'Unrestricted_Access, 1);\n+   end Increment;\n+\n    procedure Increment (Item : in out Atomic_Counter) is\n    begin\n       --  Note: the use of Unrestricted_Access here is required because we are"}, {"sha": "bee6755485b3083fd97aea1a4bb6953d6c978839", "filename": "gcc/ada/s-atocou-x86.adb", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou-x86.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou-x86.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou-x86.adb?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -44,7 +44,7 @@ package body System.Atomic_Counters is\n    -- Decrement --\n    ---------------\n \n-   function Decrement (Item : in out Atomic_Counter) return Boolean is\n+   function Decrement (Item : aliased in out Atomic_Unsigned) return Boolean is\n       Aux : Boolean;\n \n    begin\n@@ -53,27 +53,44 @@ package body System.Atomic_Counters is\n            \"lock%; decl\" & ASCII.HT & \"%0\" & ASCII.LF & ASCII.HT\n              & \"sete %1\",\n          Outputs  =>\n-           (Unsigned_32'Asm_Output (\"=m\", Item.Value),\n+           (Atomic_Unsigned'Asm_Output (\"=m\", Item),\n             Boolean'Asm_Output (\"=qm\", Aux)),\n-         Inputs   => Unsigned_32'Asm_Input (\"m\", Item.Value),\n+         Inputs   => Atomic_Unsigned'Asm_Input (\"m\", Item),\n          Volatile => True);\n \n       return Aux;\n    end Decrement;\n \n+   procedure Decrement (Item : aliased in out Atomic_Unsigned) is\n+   begin\n+      if Decrement (Item) then\n+         null;\n+      end if;\n+   end Decrement;\n+\n+   function Decrement (Item : in out Atomic_Counter) return Boolean is\n+   begin\n+      return Decrement (Item.Value);\n+   end Decrement;\n+\n    ---------------\n    -- Increment --\n    ---------------\n \n-   procedure Increment (Item : in out Atomic_Counter) is\n+   procedure Increment (Item : aliased in out Atomic_Unsigned) is\n    begin\n       System.Machine_Code.Asm\n         (Template => \"lock%; incl\" & ASCII.HT & \"%0\",\n-         Outputs  => Unsigned_32'Asm_Output (\"=m\", Item.Value),\n-         Inputs   => Unsigned_32'Asm_Input (\"m\", Item.Value),\n+         Outputs  => Atomic_Unsigned'Asm_Output (\"=m\", Item),\n+         Inputs   => Atomic_Unsigned'Asm_Input (\"m\", Item),\n          Volatile => True);\n    end Increment;\n \n+   procedure Increment (Item : in out Atomic_Counter) is\n+   begin\n+      Increment (Item.Value);\n+   end Increment;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "87e7818b820898aa89ddd73cfff08cbb195e3e66", "filename": "gcc/ada/s-atocou.adb", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou.adb?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -48,6 +48,18 @@ package body System.Atomic_Counters is\n       return False;\n    end Decrement;\n \n+   function Decrement (Item : aliased in out Atomic_Unsigned) return Boolean is\n+   begin\n+      --  Could not use Item := Item - 1; because it is disabled in spec.\n+      Item := Atomic_Unsigned'Pred (Item);\n+      return Item = 0;\n+   end Decrement;\n+\n+   procedure Decrement (Item : aliased in out Atomic_Unsigned) is\n+   begin\n+      Item := Atomic_Unsigned'Pred (Item);\n+   end Decrement;\n+\n    ---------------\n    -- Increment --\n    ---------------\n@@ -57,6 +69,11 @@ package body System.Atomic_Counters is\n       raise Program_Error;\n    end Increment;\n \n+   procedure Increment (Item : aliased in out Atomic_Unsigned) is\n+   begin\n+      Item := Atomic_Unsigned'Succ (Item);\n+   end Increment;\n+\n    ----------------\n    -- Initialize --\n    ----------------"}, {"sha": "1147de7b45ff1a325fc6632b69795c09e85b1265", "filename": "gcc/ada/s-atocou.ads", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fs-atocou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-atocou.ads?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2014, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2015, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -39,6 +39,7 @@\n \n package System.Atomic_Counters is\n \n+   pragma Pure;\n    pragma Preelaborate;\n \n    type Atomic_Counter is limited private;\n@@ -50,6 +51,8 @@ package System.Atomic_Counters is\n    --  Atomic_Counter is declared as private limited type to provide highest\n    --  level of protection from unexpected use. All available operations are\n    --  declared below, and this set should be as small as possible.\n+   --  Increment/Decrement operations for this type raise Program_Error on\n+   --  platforms not supporting the atomic primitives.\n \n    procedure Increment (Item : in out Atomic_Counter);\n    pragma Inline_Always (Increment);\n@@ -69,11 +72,35 @@ package System.Atomic_Counters is\n    --  intended to be used in special cases when the counter object cannot be\n    --  initialized in standard way.\n \n+   type Atomic_Unsigned is mod 2 ** 32 with Default_Value => 0, Atomic;\n+   --  Modular compatible atomic unsigned type.\n+   --  Increment/Decrement operations for this type are atomic only on\n+   --  supported platforms. See top of the file.\n+\n+   procedure Increment\n+     (Item : aliased in out Atomic_Unsigned) with Inline_Always;\n+   --  Increments value of atomic counter\n+\n+   function Decrement\n+     (Item : aliased in out Atomic_Unsigned) return Boolean with Inline_Always;\n+\n+   procedure Decrement\n+     (Item : aliased in out Atomic_Unsigned) with Inline_Always;\n+   --  Decrements value of atomic counter\n+\n+   --  The \"+\" and \"-\" abstract routine provided below to disable BT := BT + 1\n+   --  constructions.\n+\n+   function \"+\"\n+     (Left, Right : Atomic_Unsigned) return Atomic_Unsigned is abstract;\n+\n+   function \"-\"\n+     (Left, Right : Atomic_Unsigned) return Atomic_Unsigned is abstract;\n+\n private\n-   type Unsigned_32 is mod 2 ** 32;\n \n-   type Atomic_Counter is limited record\n-      Value : aliased Unsigned_32 := 1;\n+   type Atomic_Counter is record\n+      Value : aliased Atomic_Unsigned := 1;\n       pragma Atomic (Value);\n    end record;\n "}, {"sha": "0d61181840dbc8c7b9e5539de4ed6f6582e297d7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36f2e3d311c4679790f29c5cc08c33e1032987d3/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=36f2e3d311c4679790f29c5cc08c33e1032987d3", "patch": "@@ -3215,18 +3215,17 @@ package body Sem_Ch6 is\n          --  the freeze actions that include the bodies. In particular, extra\n          --  formals for accessibility or for return-in-place may need to be\n          --  generated. Freeze nodes, if any, are inserted before the current\n-         --  body. These freeze actions are also needed in ASIS mode to enable\n-         --  the proper back-annotations.\n+         --  body. These freeze actions are also needed in ASIS mode and in\n+         --  Compile_Only mode to enable the proper back-end type annotations.\n+         --  They are necessary in any case to insure order of elaboration\n+         --  in gigi.\n \n          if not Is_Frozen (Spec_Id)\n-           and then (Expander_Active or ASIS_Mode)\n+           and then (Expander_Active\n+                       or else ASIS_Mode\n+                       or else (Operating_Mode = Check_Semantics\n+                                  and then Serious_Errors_Detected = 0))\n          then\n-            --  Force the generation of its freezing node to ensure proper\n-            --  management of access types in the backend.\n-\n-            --  This is definitely needed for some cases, but it is not clear\n-            --  why, to be investigated further???\n-\n             Set_Has_Delayed_Freeze (Spec_Id);\n             Freeze_Before (N, Spec_Id);\n          end if;"}]}