{"sha": "0b7a11874d4eb428c18a91f38786032ce0e77a96", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI3YTExODc0ZDRlYjQyOGMxOGE5MWYzODc4NjAzMmNlMGU3N2E5Ng==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-14T21:10:49Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-07-15T03:18:14Z"}, "message": "c++: fix tree_contains_struct for C++ types [PR101095]\n\nMany of the types from cp-tree.def were only marked as having tree_common,\nwhen actually most of them have type_non_common.  This broke\ng++.dg/modules/xtreme-header-2, as the modules code relies on\ntree_contains_struct to know what bits it needs to stream.\n\nWe don't seem to use type_non_common for TYPE_ARGUMENT_PACK, so I bumped it\ndown to TS_TYPE_COMMON.  I tried doing the same in cp_tree_size, but that\nbreaks without more extensive changes to tree_node_structure.\n\nWhy do we need the init_ts function anyway?  It seems redundant with\ntree_node_structure.\n\n\tPR c++/101095\n\ngcc/cp/ChangeLog:\n\n\t* cp-objcp-common.c (cp_common_init_ts): Mark types as types.\n\t(cp_tree_size): Remove redundant entries.", "tree": {"sha": "34b25cf91bee6adb5daf5cb844918e1d9b5be905", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34b25cf91bee6adb5daf5cb844918e1d9b5be905"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b7a11874d4eb428c18a91f38786032ce0e77a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7a11874d4eb428c18a91f38786032ce0e77a96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b7a11874d4eb428c18a91f38786032ce0e77a96", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b7a11874d4eb428c18a91f38786032ce0e77a96/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4fee1c646d52a9001a53fa0d4072db86b9be791", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4fee1c646d52a9001a53fa0d4072db86b9be791", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4fee1c646d52a9001a53fa0d4072db86b9be791"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "ee255732d5a953fb339255fe7ee49d2a02c60427", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b7a11874d4eb428c18a91f38786032ce0e77a96/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b7a11874d4eb428c18a91f38786032ce0e77a96/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=0b7a11874d4eb428c18a91f38786032ce0e77a96", "patch": "@@ -72,10 +72,13 @@ cp_tree_size (enum tree_code code)\n     case DEFERRED_NOEXCEPT:\treturn sizeof (tree_deferred_noexcept);\n     case OVERLOAD:\t\treturn sizeof (tree_overload);\n     case STATIC_ASSERT:         return sizeof (tree_static_assert);\n-    case TYPE_ARGUMENT_PACK:\n-    case TYPE_PACK_EXPANSION:\treturn sizeof (tree_type_non_common);\n-    case NONTYPE_ARGUMENT_PACK:\n-    case EXPR_PACK_EXPANSION:\treturn sizeof (tree_exp);\n+#if 0\n+      /* This would match cp_common_init_ts, but breaks GC because\n+\t tree_node_structure_for_code returns TS_TYPE_NON_COMMON for all\n+\t types.  */\n+    case UNBOUND_CLASS_TEMPLATE:\n+    case TYPE_ARGUMENT_PACK:\treturn sizeof (tree_type_common);\n+#endif\n     case ARGUMENT_PACK_SELECT:\treturn sizeof (tree_argument_pack_select);\n     case TRAIT_EXPR:\t\treturn sizeof (tree_trait_expr);\n     case LAMBDA_EXPR:           return sizeof (tree_lambda_expr);\n@@ -456,13 +459,8 @@ cp_common_init_ts (void)\n \n   /* Random new trees.  */\n   MARK_TS_COMMON (BASELINK);\n-  MARK_TS_COMMON (DECLTYPE_TYPE);\n   MARK_TS_COMMON (OVERLOAD);\n   MARK_TS_COMMON (TEMPLATE_PARM_INDEX);\n-  MARK_TS_COMMON (TYPENAME_TYPE);\n-  MARK_TS_COMMON (TYPEOF_TYPE);\n-  MARK_TS_COMMON (UNBOUND_CLASS_TEMPLATE);\n-  MARK_TS_COMMON (UNDERLYING_TYPE);\n \n   /* New decls.  */\n   MARK_TS_DECL_COMMON (TEMPLATE_DECL);\n@@ -472,10 +470,16 @@ cp_common_init_ts (void)\n   MARK_TS_DECL_NON_COMMON (USING_DECL);\n \n   /* New Types.  */\n+  MARK_TS_TYPE_COMMON (UNBOUND_CLASS_TEMPLATE);\n+  MARK_TS_TYPE_COMMON (TYPE_ARGUMENT_PACK);\n+\n+  MARK_TS_TYPE_NON_COMMON (DECLTYPE_TYPE);\n+  MARK_TS_TYPE_NON_COMMON (TYPENAME_TYPE);\n+  MARK_TS_TYPE_NON_COMMON (TYPEOF_TYPE);\n+  MARK_TS_TYPE_NON_COMMON (UNDERLYING_TYPE);\n   MARK_TS_TYPE_NON_COMMON (BOUND_TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_TYPE_NON_COMMON (TEMPLATE_TEMPLATE_PARM);\n   MARK_TS_TYPE_NON_COMMON (TEMPLATE_TYPE_PARM);\n-  MARK_TS_TYPE_NON_COMMON (TYPE_ARGUMENT_PACK);\n   MARK_TS_TYPE_NON_COMMON (TYPE_PACK_EXPANSION);\n \n   /* Statements.  */"}]}