{"sha": "95a866badb5c78bf48476a92f5909cdf5f7fc088", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVhODY2YmFkYjVjNzhiZjQ4NDc2YTkyZjU5MDljZGY1ZjdmYzA4OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-09-14T08:05:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-14T08:05:42Z"}, "message": "* combine.c (make_compound_operation_int): Formatting fixes.\n\nFrom-SVN: r252751", "tree": {"sha": "54caa63a85ae6563511c85a92b44b2a43e9f74a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54caa63a85ae6563511c85a92b44b2a43e9f74a9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95a866badb5c78bf48476a92f5909cdf5f7fc088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a866badb5c78bf48476a92f5909cdf5f7fc088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95a866badb5c78bf48476a92f5909cdf5f7fc088", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95a866badb5c78bf48476a92f5909cdf5f7fc088/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c6562e12bf7d1406474cbba832073a4afe5687c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6562e12bf7d1406474cbba832073a4afe5687c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6562e12bf7d1406474cbba832073a4afe5687c"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "7d8272912784f6a6578e65d7c4f88e438bf9dada", "filename": "gcc/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a866badb5c78bf48476a92f5909cdf5f7fc088/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a866badb5c78bf48476a92f5909cdf5f7fc088/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95a866badb5c78bf48476a92f5909cdf5f7fc088", "patch": "@@ -1,5 +1,7 @@\n 2017-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* combine.c (make_compound_operation_int): Formatting fixes.\n+\n \t* config/alpha/elf.h (LINK_EH_SPEC): Add -static-pie support.\n \t* config/alpha/linux.h (LINK_GCC_C_SEQUENCE_SPEC): Likewise.\n \t* config/netbsd.h (LINK_EH_SPEC): Likewise."}, {"sha": "1832c3cb2bca0c1caa115a9761263090efccf538", "filename": "gcc/combine.c", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95a866badb5c78bf48476a92f5909cdf5f7fc088/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95a866badb5c78bf48476a92f5909cdf5f7fc088/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=95a866badb5c78bf48476a92f5909cdf5f7fc088", "patch": "@@ -7976,8 +7976,8 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t  && (i = exact_log2 (UINTVAL (XEXP (x, 1)) + 1)) >= 0)\n \t{\n \t  new_rtx = make_compound_operation (XEXP (XEXP (x, 0), 0), next_code);\n-\t  new_rtx = make_extraction (mode, new_rtx, 0, XEXP (XEXP (x, 0), 1), i, 1,\n-\t\t\t\t 0, in_code == COMPARE);\n+\t  new_rtx = make_extraction (mode, new_rtx, 0, XEXP (XEXP (x, 0), 1),\n+\t\t\t\t     i, 1, 0, in_code == COMPARE);\n \t}\n \n       /* Same as previous, but for (subreg (lshiftrt ...)) in first op.  */\n@@ -8016,10 +8016,10 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t{\n \t  /* Apply the distributive law, and then try to make extractions.  */\n \t  new_rtx = gen_rtx_fmt_ee (GET_CODE (XEXP (x, 0)), mode,\n-\t\t\t\tgen_rtx_AND (mode, XEXP (XEXP (x, 0), 0),\n-\t\t\t\t\t     XEXP (x, 1)),\n-\t\t\t\tgen_rtx_AND (mode, XEXP (XEXP (x, 0), 1),\n-\t\t\t\t\t     XEXP (x, 1)));\n+\t\t\t\t    gen_rtx_AND (mode, XEXP (XEXP (x, 0), 0),\n+\t\t\t\t\t\t XEXP (x, 1)),\n+\t\t\t\t    gen_rtx_AND (mode, XEXP (XEXP (x, 0), 1),\n+\t\t\t\t\t\t XEXP (x, 1)));\n \t  new_rtx = make_compound_operation (new_rtx, in_code);\n \t}\n \n@@ -8033,9 +8033,9 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t{\n \t  new_rtx = make_compound_operation (XEXP (XEXP (x, 0), 0), next_code);\n \t  new_rtx = make_extraction (mode, new_rtx,\n-\t\t\t\t (GET_MODE_PRECISION (mode)\n-\t\t\t\t  - INTVAL (XEXP (XEXP (x, 0), 1))),\n-\t\t\t\t NULL_RTX, i, 1, 0, in_code == COMPARE);\n+\t\t\t\t     (GET_MODE_PRECISION (mode)\n+\t\t\t\t      - INTVAL (XEXP (XEXP (x, 0), 1))),\n+\t\t\t\t     NULL_RTX, i, 1, 0, in_code == COMPARE);\n \t}\n \n       /* On machines without logical shifts, if the operand of the AND is\n@@ -8055,8 +8055,10 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t  if ((INTVAL (XEXP (x, 1)) & ~mask) == 0)\n \t    SUBST (XEXP (x, 0),\n \t\t   gen_rtx_ASHIFTRT (mode,\n-\t\t\t\t     make_compound_operation\n-\t\t\t\t     (XEXP (XEXP (x, 0), 0), next_code),\n+\t\t\t\t     make_compound_operation (XEXP (XEXP (x,\n+\t\t\t\t\t\t\t\t\t  0),\n+\t\t\t\t\t\t\t\t    0),\n+\t\t\t\t\t\t\t      next_code),\n \t\t\t\t     XEXP (XEXP (x, 0), 1)));\n \t}\n \n@@ -8066,9 +8068,9 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t we are in a COMPARE.  */\n       else if ((i = exact_log2 (UINTVAL (XEXP (x, 1)) + 1)) >= 0)\n \tnew_rtx = make_extraction (mode,\n-\t\t\t       make_compound_operation (XEXP (x, 0),\n-\t\t\t\t\t\t\tnext_code),\n-\t\t\t       0, NULL_RTX, i, 1, 0, in_code == COMPARE);\n+\t\t\t\t   make_compound_operation (XEXP (x, 0),\n+\t\t\t\t\t\t\t    next_code),\n+\t\t\t\t   0, NULL_RTX, i, 1, 0, in_code == COMPARE);\n \n       /* If we are in a comparison and this is an AND with a power of two,\n \t convert this into the appropriate bit extract.  */\n@@ -8119,9 +8121,9 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t  && (nonzero_bits (XEXP (x, 0), mode) & (1 << (mode_width - 1))) == 0)\n \t{\n \t  new_rtx = gen_rtx_ASHIFTRT (mode,\n-\t\t\t\t  make_compound_operation (XEXP (x, 0),\n-\t\t\t\t\t\t\t   next_code),\n-\t\t\t\t  XEXP (x, 1));\n+\t\t\t\t      make_compound_operation (XEXP (x, 0),\n+\t\t\t\t\t\t\t       next_code),\n+\t\t\t\t      XEXP (x, 1));\n \t  break;\n \t}\n \n@@ -8142,9 +8144,9 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t{\n \t  new_rtx = make_compound_operation (XEXP (lhs, 0), next_code);\n \t  new_rtx = make_extraction (mode, new_rtx,\n-\t\t\t\t INTVAL (rhs) - INTVAL (XEXP (lhs, 1)),\n-\t\t\t\t NULL_RTX, mode_width - INTVAL (rhs),\n-\t\t\t\t code == LSHIFTRT, 0, in_code == COMPARE);\n+\t\t\t\t     INTVAL (rhs) - INTVAL (XEXP (lhs, 1)),\n+\t\t\t\t     NULL_RTX, mode_width - INTVAL (rhs),\n+\t\t\t\t     code == LSHIFTRT, 0, in_code == COMPARE);\n \t  break;\n \t}\n \n@@ -8161,9 +8163,10 @@ make_compound_operation_int (scalar_int_mode mode, rtx *x_ptr,\n \t  && INTVAL (rhs) < HOST_BITS_PER_WIDE_INT\n \t  && INTVAL (rhs) < mode_width\n \t  && (new_rtx = extract_left_shift (mode, lhs, INTVAL (rhs))) != 0)\n-\tnew_rtx = make_extraction (mode, make_compound_operation (new_rtx, next_code),\n-\t\t\t       0, NULL_RTX, mode_width - INTVAL (rhs),\n-\t\t\t       code == LSHIFTRT, 0, in_code == COMPARE);\n+\tnew_rtx = make_extraction (mode, make_compound_operation (new_rtx,\n+\t\t\t\t\t\t\t\t  next_code),\n+\t\t\t\t   0, NULL_RTX, mode_width - INTVAL (rhs),\n+\t\t\t\t   code == LSHIFTRT, 0, in_code == COMPARE);\n \n       break;\n "}]}