{"sha": "9d50112acfc01f85fe0fb6d88b329e6122e817b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1MDExMmFjZmMwMWY4NWZlMGZiNmQ4OGIzMjllNjEyMmU4MTdiMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-02T09:03:33Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-02T09:03:33Z"}, "message": "openmp: Diagnose non-rectangular loops with invalid steps\n\nTHe OpenMP 5 standard requires that if some loop in OpenMP loop nest refers\nto some outer loop's iterator variable, then the subtraction of the multiplication\nfactors for the outer iterator multiplied by the outer increment modulo the\ninner increment is 0.  For loops with non-constants in any of these we can't\ndiagnose it, it would be a task for something like -fsanitize=openmp,\nbut if all these are constant, we can diagnose it.\n\n2020-07-02  Jakub Jelinek  <jakub@redhat.com>\n\n\t* omp-expand.c (expand_omp_for): Diagnose non-rectangular loops with\n\tinvalid steps - ((m2 - m1) * incr_outer) % incr must be 0 in valid\n\tOpenMP non-rectangular loops.  Use XALLOCAVEC.\n\n\t* c-c++-common/gomp/loop-7.c: New test.", "tree": {"sha": "3f58021fee5ef016001d29f0db4c6589e57553e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f58021fee5ef016001d29f0db4c6589e57553e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d50112acfc01f85fe0fb6d88b329e6122e817b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d50112acfc01f85fe0fb6d88b329e6122e817b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d50112acfc01f85fe0fb6d88b329e6122e817b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d50112acfc01f85fe0fb6d88b329e6122e817b3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6153cfd7a342f131d347de1aea87f352f3ccd4e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6153cfd7a342f131d347de1aea87f352f3ccd4e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6153cfd7a342f131d347de1aea87f352f3ccd4e7"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "b1349d8f0887c7d6529c612c583f8d1b4a604b84", "filename": "gcc/omp-expand.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d50112acfc01f85fe0fb6d88b329e6122e817b3/gcc%2Fomp-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d50112acfc01f85fe0fb6d88b329e6122e817b3/gcc%2Fomp-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-expand.c?ref=9d50112acfc01f85fe0fb6d88b329e6122e817b3", "patch": "@@ -7122,15 +7122,55 @@ expand_omp_for (struct omp_region *region, gimple *inner_stmt)\n   struct omp_for_data fd;\n   struct omp_for_data_loop *loops;\n \n-  loops\n-    = (struct omp_for_data_loop *)\n-      alloca (gimple_omp_for_collapse (last_stmt (region->entry))\n-\t      * sizeof (struct omp_for_data_loop));\n+  loops = XALLOCAVEC (struct omp_for_data_loop,\n+\t\t      gimple_omp_for_collapse (last_stmt (region->entry)));\n   omp_extract_for_data (as_a <gomp_for *> (last_stmt (region->entry)),\n \t\t\t&fd, loops);\n   region->sched_kind = fd.sched_kind;\n   region->sched_modifiers = fd.sched_modifiers;\n   region->has_lastprivate_conditional = fd.lastprivate_conditional != 0;\n+  if (fd.non_rect && !gimple_omp_for_combined_into_p (fd.for_stmt))\n+    {\n+      for (int i = fd.first_nonrect; i <= fd.last_nonrect; i++)\n+\tif ((loops[i].m1 || loops[i].m2)\n+\t    && (loops[i].m1 == NULL_TREE\n+\t\t|| TREE_CODE (loops[i].m1) == INTEGER_CST)\n+\t    && (loops[i].m2 == NULL_TREE\n+\t\t|| TREE_CODE (loops[i].m2) == INTEGER_CST)\n+\t    && TREE_CODE (loops[i].step) == INTEGER_CST\n+\t    && TREE_CODE (loops[i - loops[i].outer].step) == INTEGER_CST)\n+\t  {\n+\t    tree t;\n+\t    tree itype = TREE_TYPE (loops[i].v);\n+\t    if (loops[i].m1 && loops[i].m2)\n+\t      t = fold_build2 (MINUS_EXPR, itype, loops[i].m2, loops[i].m1);\n+\t    else if (loops[i].m1)\n+\t      t = fold_build1 (NEGATE_EXPR, itype, loops[i].m1);\n+\t    else\n+\t      t = loops[i].m2;\n+\t    t = fold_build2 (MULT_EXPR, itype, t,\n+\t\t\t     fold_convert (itype,\n+\t\t\t\t\t   loops[i - loops[i].outer].step));\n+\t    if (TYPE_UNSIGNED (itype) && loops[i].cond_code == GT_EXPR)\n+\t      t = fold_build2 (TRUNC_MOD_EXPR, itype,\n+\t\t\t       fold_build1 (NEGATE_EXPR, itype, t),\n+\t\t\t       fold_build1 (NEGATE_EXPR, itype,\n+\t\t\t\t\t    fold_convert (itype,\n+\t\t\t\t\t\t\t  loops[i].step)));\n+\t    else\n+\t      t = fold_build2 (TRUNC_MOD_EXPR, itype, t,\n+\t\t\t       fold_convert (itype, loops[i].step));\n+\t    if (integer_nonzerop (t))\n+\t      error_at (gimple_location (fd.for_stmt),\n+\t\t\t\"invalid OpenMP non-rectangular loop step; \"\n+\t\t\t\"%<(%E - %E) * %E%> is not a multiple of loop %d \"\n+\t\t\t\"step %qE\",\n+\t\t\tloops[i].m2 ? loops[i].m2 : integer_zero_node,\n+\t\t\tloops[i].m1 ? loops[i].m1 : integer_zero_node,\n+\t\t\tloops[i - loops[i].outer].step, i + 1,\n+\t\t\tloops[i].step);\n+\t  }\n+    }\n \n   gcc_assert (EDGE_COUNT (region->entry->succs) == 2);\n   BRANCH_EDGE (region->entry)->flags &= ~EDGE_ABNORMAL;"}, {"sha": "4c8f27e76a54ed638cd5bd5128a43aa75e79cd5d", "filename": "gcc/testsuite/c-c++-common/gomp/loop-7.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d50112acfc01f85fe0fb6d88b329e6122e817b3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d50112acfc01f85fe0fb6d88b329e6122e817b3/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Floop-7.c?ref=9d50112acfc01f85fe0fb6d88b329e6122e817b3", "patch": "@@ -0,0 +1,24 @@\n+void\n+foo (void)\n+{\n+  #pragma omp for collapse(2)\t/* { dg-error \"invalid OpenMP non-rectangular loop step\" } */\n+  for (int i = 0; i < 6; i++)\n+    for (int j = 4 * i; j < 7 * i; j += 2)\n+      ;\n+  #pragma omp for collapse(2)\t/* { dg-error \"invalid OpenMP non-rectangular loop step\" } */\n+  for (int i = 0; i < 32; i += 7)\n+    for (int j = 3 * i; j < 7 * i; j += 30)\n+      ;\n+  #pragma omp for collapse(2)\n+  for (int i = 0; i < 6; i++)\n+    for (int j = 4 * i; j < 6 * i; j += 2)\n+      ;\n+  #pragma omp for collapse(2)\n+  for (int i = 0; i < 6; i += 2)\n+    for (int j = 4 * i; j < 7 * i; j += 2)\n+      ;\n+  #pragma omp for collapse(2)\n+  for (int i = 0; i < 6; i += 5)\n+    for (int j = 4 * i; j < 7 * i; j += 15)\n+      ;\n+}"}]}