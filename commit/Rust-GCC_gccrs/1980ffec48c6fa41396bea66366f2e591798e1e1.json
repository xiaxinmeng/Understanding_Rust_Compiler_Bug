{"sha": "1980ffec48c6fa41396bea66366f2e591798e1e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk4MGZmZWM0OGM2ZmE0MTM5NmJlYTY2MzY2ZjJlNTkxNzk4ZTFlMQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-06-04T15:03:27Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2020-06-04T15:03:27Z"}, "message": "ipa-sra: Do not remove statements necessary because of non-call EH (PR 95113)\n\nPR 95113 revealed that when reasoning about which parameters are dead,\nIPA-SRA does not perform the same check related to non-call exceptions\nas tree DCE.  It most certainly should and so this patch moves the\ncondition used in tree-ssa-dce.c into a separate predicate (in\ntree-eh.c) and uses it from both places.\n\ngcc/ChangeLog:\n\n2020-05-27  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/95113\n\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Move non-call\n\texceptions check to...\n\t* tree-eh.c (stmt_unremovable_because_of_non_call_eh_p): ...this\n\tnew function.\n\t* tree-eh.h (stmt_unremovable_because_of_non_call_eh_p): Declare it.\n\t* ipa-sra.c (isra_track_scalar_value_uses): Use it.  New parameter\n\tfun.\n\ngcc/testsuite/ChangeLog:\n\n2020-05-27  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/95113\n\t* gcc.dg/ipa/pr95113.c: New test.", "tree": {"sha": "6d6a02b3b314205c6b1dd91fb644dafd4ee94753", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d6a02b3b314205c6b1dd91fb644dafd4ee94753"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1980ffec48c6fa41396bea66366f2e591798e1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1980ffec48c6fa41396bea66366f2e591798e1e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1980ffec48c6fa41396bea66366f2e591798e1e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1980ffec48c6fa41396bea66366f2e591798e1e1/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a810e57c4e6af54d29c325a013f451ade2b85e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a810e57c4e6af54d29c325a013f451ade2b85e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a810e57c4e6af54d29c325a013f451ade2b85e8"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "c81e8869e7a273b5c750d6f22ef404038f3bc5ed", "filename": "gcc/ipa-sra.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Fipa-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Fipa-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-sra.c?ref=1980ffec48c6fa41396bea66366f2e591798e1e1", "patch": "@@ -795,17 +795,17 @@ get_single_param_flow_source (const isra_param_flow *param_flow)\n }\n \n /* Inspect all uses of NAME and simple arithmetic calculations involving NAME\n-   in NODE and return a negative number if any of them is used for something\n-   else than either an actual call argument, simple arithmetic operation or\n-   debug statement.  If there are no such uses, return the number of actual\n-   arguments that this parameter eventually feeds to (or zero if there is none).\n-   For any such parameter, mark PARM_NUM as one of its sources.  ANALYZED is a\n-   bitmap that tracks which SSA names we have already started\n-   investigating.  */\n+   in FUN represented with NODE and return a negative number if any of them is\n+   used for something else than either an actual call argument, simple\n+   arithmetic operation or debug statement.  If there are no such uses, return\n+   the number of actual arguments that this parameter eventually feeds to (or\n+   zero if there is none).  For any such parameter, mark PARM_NUM as one of its\n+   sources.  ANALYZED is a bitmap that tracks which SSA names we have already\n+   started investigating.  */\n \n static int\n-isra_track_scalar_value_uses (cgraph_node *node, tree name, int parm_num,\n-\t\t\t      bitmap analyzed)\n+isra_track_scalar_value_uses (function *fun, cgraph_node *node, tree name,\n+\t\t\t      int parm_num, bitmap analyzed)\n {\n   int res = 0;\n   imm_use_iterator imm_iter;\n@@ -859,8 +859,9 @@ isra_track_scalar_value_uses (cgraph_node *node, tree name, int parm_num,\n \t    }\n \t  res += all_uses;\n \t}\n-      else if ((is_gimple_assign (stmt) && !gimple_has_volatile_ops (stmt))\n-\t       || gimple_code (stmt) == GIMPLE_PHI)\n+      else if (!stmt_unremovable_because_of_non_call_eh_p (fun, stmt)\n+\t       && ((is_gimple_assign (stmt) && !gimple_has_volatile_ops (stmt))\n+\t\t   || gimple_code (stmt) == GIMPLE_PHI))\n \t{\n \t  tree lhs;\n \t  if (gimple_code (stmt) == GIMPLE_PHI)\n@@ -876,7 +877,7 @@ isra_track_scalar_value_uses (cgraph_node *node, tree name, int parm_num,\n \t  gcc_assert (!gimple_vdef (stmt));\n \t  if (bitmap_set_bit (analyzed, SSA_NAME_VERSION (lhs)))\n \t    {\n-\t      int tmp = isra_track_scalar_value_uses (node, lhs, parm_num,\n+\t      int tmp = isra_track_scalar_value_uses (fun, node, lhs, parm_num,\n \t\t\t\t\t\t      analyzed);\n \t      if (tmp < 0)\n \t\t{\n@@ -927,7 +928,8 @@ isra_track_scalar_param_local_uses (function *fun, cgraph_node *node, tree parm,\n     return true;\n \n   bitmap analyzed = BITMAP_ALLOC (NULL);\n-  int call_uses = isra_track_scalar_value_uses (node, name, parm_num, analyzed);\n+  int call_uses = isra_track_scalar_value_uses (fun, node, name, parm_num,\n+\t\t\t\t\t\tanalyzed);\n   BITMAP_FREE (analyzed);\n   if (call_uses < 0)\n     return true;"}, {"sha": "a8f8c901ebeec1329a267a5165f73f5cf7c01bd8", "filename": "gcc/testsuite/gcc.dg/ipa/pr95113.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr95113.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr95113.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr95113.c?ref=1980ffec48c6fa41396bea66366f2e591798e1e1", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fexceptions -fnon-call-exceptions\" } */\n+/* { dg-require-effective-target exceptions } */\n+\n+int a, b;\n+\n+static inline long int\n+foo (long int x, int y)\n+{\n+  if (y == 0)\n+    return 0;\n+\n+  if (x == -1 && y == -1)\n+    return 0;\n+\n+  return x / y;\n+}\n+\n+static inline int\n+bar (int *p)\n+{\n+  int c = foo (a, 1) + *p;\n+  return b;\n+}\n+\n+int\n+main ()\n+{\n+  int d = 0;\n+  b = foo (1, 1);\n+  bar (&d);\n+  return 0;\n+}"}, {"sha": "4246dca8806b2f39417ffb086df5827e56e36d0c", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=1980ffec48c6fa41396bea66366f2e591798e1e1", "patch": "@@ -2936,6 +2936,16 @@ stmt_could_throw_p (function *fun, gimple *stmt)\n     }\n }\n \n+/* Return true if STMT in function FUN must be assumed necessary because of\n+   non-call exceptions.  */\n+\n+bool\n+stmt_unremovable_because_of_non_call_eh_p (function *fun, gimple *stmt)\n+{\n+  return (fun->can_throw_non_call_exceptions\n+\t  && !fun->can_delete_dead_exceptions\n+\t  && stmt_could_throw_p (fun, stmt));\n+}\n \n /* Return true if expression T could throw an exception.  */\n "}, {"sha": "ba911cadbe797beab0317b45245cf881ef8642c5", "filename": "gcc/tree-eh.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-eh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-eh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.h?ref=1980ffec48c6fa41396bea66366f2e591798e1e1", "patch": "@@ -39,6 +39,7 @@ extern bool operation_could_trap_p (enum tree_code, bool, bool, tree);\n extern bool tree_could_trap_p (tree);\n extern tree rewrite_to_non_trapping_overflow (tree);\n extern bool stmt_could_throw_p (function *, gimple *);\n+extern bool stmt_unremovable_because_of_non_call_eh_p (function *, gimple *);\n extern bool tree_could_throw_p (tree);\n extern bool stmt_can_throw_external (function *, gimple *);\n extern bool stmt_can_throw_internal (function *, gimple *);"}, {"sha": "fae5ae7234034f8b768f4b26d331f7204159924f", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1980ffec48c6fa41396bea66366f2e591798e1e1/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=1980ffec48c6fa41396bea66366f2e591798e1e1", "patch": "@@ -201,9 +201,7 @@ mark_stmt_if_obviously_necessary (gimple *stmt, bool aggressive)\n {\n   /* With non-call exceptions, we have to assume that all statements could\n      throw.  If a statement could throw, it can be deemed necessary.  */\n-  if (cfun->can_throw_non_call_exceptions\n-      && !cfun->can_delete_dead_exceptions\n-      && stmt_could_throw_p (cfun, stmt))\n+  if (stmt_unremovable_because_of_non_call_eh_p (cfun, stmt))\n     {\n       mark_stmt_necessary (stmt, true);\n       return;"}]}