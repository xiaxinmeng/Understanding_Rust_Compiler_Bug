{"sha": "2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQyMmRiMWYyYTRjMGU5OGRjM2JlM2JiZTI1MTIyNTJkNTMwYjU5OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2005-10-16T23:17:53Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2005-10-16T23:17:53Z"}, "message": "re PR c++/24389 (template variable not getting marked as weak)\n\n\tPR c++/24389\n\t* decl2.c (mark_used): Use uses_template_parms instead of\n\tdependent_type_p.\n\t* init.c (constant_value_1): Handle uninstantiated templates\n\tspecially.\n\t* pt.c (instantiate_decl): Add sanity check.\n\tPR c++/24389\n\t* g++.dg/template/static21.C: New test.\n\t* g++.dg/template/static21-a.cc: Likewise.\n\nFrom-SVN: r105474", "tree": {"sha": "3618dcffe2507c601f8aff3bb13ef29ad2ae0551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3618dcffe2507c601f8aff3bb13ef29ad2ae0551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/comments", "author": null, "committer": null, "parents": [{"sha": "1165f3777b417e44c617b916f1373332c9f10cac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1165f3777b417e44c617b916f1373332c9f10cac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1165f3777b417e44c617b916f1373332c9f10cac"}], "stats": {"total": 121, "additions": 96, "deletions": 25}, "files": [{"sha": "9305e1624587a0bcbb34a4c842ecf656ffadd12f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -1,3 +1,12 @@\n+2005-10-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24389\n+\t* decl2.c (mark_used): Use uses_template_parms instead of\n+\tdependent_type_p.\n+\t* init.c (constant_value_1): Handle uninstantiated templates\n+\tspecially.\n+\t* pt.c (instantiate_decl): Add sanity check.\n+\n 2005-10-16  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22173"}, {"sha": "70ca017d9e448b1f39e65e1be05d3c4ced04a216", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -3253,22 +3253,26 @@ mark_used (tree decl)\n      DECL.  However, if DECL is a static data member initialized with\n      a constant, we need the value right now because a reference to\n      such a data member is not value-dependent.  */\n-  if (processing_template_decl)\n-    {\n-      if (TREE_CODE (decl) == VAR_DECL\n-\t  && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)\n-\t  && DECL_CLASS_SCOPE_P (decl)\n-\t  && !dependent_type_p (DECL_CONTEXT (decl)))\n-\t{\n-\t  /* Pretend that we are not in a template so that the\n-\t     initializer for the static data member will be full\n-\t     simplified.  */\n-\t  saved_processing_template_decl = processing_template_decl;\n-\t  processing_template_decl = 0;\n-\t}\n-      else\n-\treturn;  \n+  if (TREE_CODE (decl) == VAR_DECL\n+      && DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl)\n+      && DECL_CLASS_SCOPE_P (decl))\n+    {\n+      /* Don't try to instantiate members of dependent types.  We\n+\t cannot just use dependent_type_p here because this function\n+\t may be called from fold_non_dependent_expr, and then we may\n+\t see dependent types, even though processing_template_decl\n+\t will not be set.  */\n+      if (CLASSTYPE_TEMPLATE_INFO ((DECL_CONTEXT (decl)))\n+\t  && uses_template_parms (CLASSTYPE_TI_ARGS (DECL_CONTEXT (decl))))\n+\treturn;\n+      /* Pretend that we are not in a template, even if we are, so\n+\t that the static data member initializer will be processed.  */\n+      saved_processing_template_decl = processing_template_decl;\n+      processing_template_decl = 0;\n     }\n+  \n+  if (processing_template_decl)\n+    return;  \n \n   if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl)\n       && !TREE_ASM_WRITTEN (decl))"}, {"sha": "44cfc440628afdaf9260cd4643ebec792b9cfd9b", "filename": "gcc/cp/init.c", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -1576,16 +1576,27 @@ constant_value_1 (tree decl, bool integral_p)\n \t\t&& CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (decl)))))\n     {\n       tree init;\n-      /* If DECL is a static data member in a template class, we must\n-\t instantiate it here.  The initializer for the static data\n-\t member is not processed until needed; we need it now.  */ \n-      mark_used (decl);\n-      init = DECL_INITIAL (decl);\n-      /* If we are currently processing a template, the\n-\t initializer for a static data member may not be dependent,\n-\t but it is not folded until instantiation time.  */\n-      if (init)\n-\tinit = fold_non_dependent_expr (init);\n+      /* Static data members in template classes may have\n+\t non-dependent initializers.  References to such non-static\n+\t data members are no value-dependent, so we must retrieve the\n+\t initializer here.  The DECL_INITIAL will have the right type,\n+\t but will not have been folded because that would prevent us\n+\t from performing all appropriate semantic checks at\n+\t instantiation time.  */\n+      if (DECL_CLASS_SCOPE_P (decl)\n+\t  && CLASSTYPE_TEMPLATE_INFO (DECL_CONTEXT (decl))\n+\t  && uses_template_parms (CLASSTYPE_TI_ARGS \n+\t\t\t\t  (DECL_CONTEXT (decl))))\n+\tinit = fold_non_dependent_expr (DECL_INITIAL (decl));\n+      else\n+\t{\n+\t  /* If DECL is a static data member in a template\n+\t     specialization, we must instantiate it here.  The\n+\t     initializer for the static data member is not processed\n+\t     until needed; we need it now.  */\n+\t  mark_used (decl);\n+\t  init = DECL_INITIAL (decl);\n+\t}\n       if (!(init || init == error_mark_node)\n \t  || !TREE_TYPE (init)\n \t  || (integral_p"}, {"sha": "3de54a4e3778ef05820ebc13c87ce5e287cc624e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -11502,6 +11502,10 @@ instantiate_decl (tree d, int defer_ok,\n   td = template_for_substitution (d);\n   code_pattern = DECL_TEMPLATE_RESULT (td);\n \n+  /* We should never be trying to instantiate a member of a class\n+     template or partial specialization.  */ \n+  gcc_assert (d != code_pattern);\n+ \n   if ((DECL_NAMESPACE_SCOPE_P (d) && !DECL_INITIALIZED_IN_CLASS_P (d))\n       || DECL_TEMPLATE_SPECIALIZATION (td))\n     /* In the case of a friend template whose definition is provided"}, {"sha": "373a7977a25b527fc52461d41f9ef3737d0396e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -1,3 +1,9 @@\n+2005-10-16  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/24389\n+\t* g++.dg/template/static21.C: New test.\n+\t* g++.dg/template/static21-a.cc: Likewise.\n+\n 2005-10-16  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \tPR c++/23959"}, {"sha": "9489ae7d0b84b89b76d713c2e88772579c062a15", "filename": "gcc/testsuite/g++.dg/template/static21-a.cc", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21-a.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21-a.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21-a.cc?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -0,0 +1,17 @@\n+template<int dummy>\n+    struct X\n+    {\n+      static const int n_primes = 256;\n+      static const unsigned long primes[n_primes + 1];\n+    };\n+\n+  template<int dummy>\n+  const int X<dummy>::n_primes;\n+\n+  template<int dummy>\n+  const unsigned long X<dummy>::primes[n_primes + 1] =\n+    { 0 };\n+\n+\n+const unsigned long  *f1(void){return &X<0>::primes[0];}\n+int main(){}"}, {"sha": "66b045087fa7738751acdd9f4ecab18b9c81f24e", "filename": "gcc/testsuite/g++.dg/template/static21.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d22db1f2a4c0e98dc3be3bbe2512252d530b599/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fstatic21.C?ref=2d22db1f2a4c0e98dc3be3bbe2512252d530b599", "patch": "@@ -0,0 +1,20 @@\n+// PR c++/24389\n+// { dg-additional-sources \"static21-a.cc\" }\n+// { dg-do link }\n+\n+template<int dummy>\n+struct X\n+{\n+  static const int n_primes = 256;\n+  static const unsigned long primes[n_primes + 1];\n+};\n+\n+template<int dummy>\n+const int X<dummy>::n_primes;\n+\n+template<int dummy>\n+const unsigned long X<dummy>::primes[n_primes + 1] =\n+  { 0 };\n+\n+const unsigned long  *f(void){return &X<0>::primes[0];}\n+"}]}