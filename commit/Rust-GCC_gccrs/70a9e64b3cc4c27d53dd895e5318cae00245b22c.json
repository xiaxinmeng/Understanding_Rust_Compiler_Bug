{"sha": "70a9e64b3cc4c27d53dd895e5318cae00245b22c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBhOWU2NGIzY2M0YzI3ZDUzZGQ4OTVlNTMxOGNhZTAwMjQ1YjIyYw==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2005-07-02T16:24:31Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2005-07-02T16:24:31Z"}, "message": "re PR tree-optimization/14490 ([tree-ssa] Simplify \"a - 10 > 150\" into \"a > 160\")\n\n2005-07-02  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        PR middle-end/14490\n        * fold-const.c (fold_binary): Handle the return value of\n        fold_to_nonsharp_ineq_using_bound if we get back the same operand back.\n        Implement \"X +- C1 CMP C2\" folding to \"X CMP C2 -+ C1\".\n\nFrom-SVN: r101535", "tree": {"sha": "6727f44f38b7555600e9d6975c1b06de203f7e6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6727f44f38b7555600e9d6975c1b06de203f7e6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70a9e64b3cc4c27d53dd895e5318cae00245b22c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a9e64b3cc4c27d53dd895e5318cae00245b22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70a9e64b3cc4c27d53dd895e5318cae00245b22c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70a9e64b3cc4c27d53dd895e5318cae00245b22c/comments", "author": null, "committer": null, "parents": [{"sha": "2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0dab7f2bb2acbc9a9fffc7278be44c9a1dcd43"}], "stats": {"total": 100, "additions": 98, "deletions": 2}, "files": [{"sha": "4b3d554d3f11cd2b4691342b168e8ebe73131c0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -1,3 +1,10 @@\n+2005-07-02  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR middle-end/14490\n+\t* fold-const.c (fold_binary): Handle the return value of\n+\tfold_to_nonsharp_ineq_using_bound if we get back the same operand back.\n+\tImplement \"X +- C1 CMP C2\" folding to \"X CMP C2 -+ C1\".\n+\n 2005-07-02  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-dom.c (find_equivalent_equality_comparison): Do not"}, {"sha": "682ae00a08cf45602f833c1831133fb537055b1b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -8575,11 +8575,11 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t  && !TREE_SIDE_EFFECTS (arg1))\n \t{\n \t  tem = fold_to_nonsharp_ineq_using_bound (arg0, arg1);\n-\t  if (tem)\n+\t  if (tem && !operand_equal_p (tem, arg0, 0))\n \t    return fold_build2 (code, type, tem, arg1);\n \n \t  tem = fold_to_nonsharp_ineq_using_bound (arg1, arg0);\n-\t  if (tem)\n+\t  if (tem && !operand_equal_p (tem, arg1, 0))\n \t    return fold_build2 (code, type, arg0, tem);\n \t}\n \n@@ -8865,6 +8865,30 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t    }\n \t}\n \n+      /* Transform comparisons of the form X +- C1 CMP C2 to X CMP C2 +- C1.  */\n+      if ((TREE_CODE (arg0) == PLUS_EXPR || TREE_CODE (arg0) == MINUS_EXPR)\n+\t  && (TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST\n+\t      && !TREE_OVERFLOW (TREE_OPERAND (arg0, 1))\n+\t      && !TYPE_UNSIGNED (TREE_TYPE (arg1))\n+\t      && !(flag_wrapv || flag_trapv))\n+\t  && (TREE_CODE (arg1) == INTEGER_CST\n+\t      && !TREE_OVERFLOW (arg1)))\n+\t{\n+\t  tree const1 = TREE_OPERAND (arg0, 1);\n+\t  tree const2 = arg1;\n+\t  tree variable = TREE_OPERAND (arg0, 0);\n+\t  tree lhs;\n+\t  int lhs_add;\n+\t  lhs_add = TREE_CODE (arg0) != PLUS_EXPR;\n+\t  \n+\t  lhs = fold_build2 (lhs_add ? PLUS_EXPR : MINUS_EXPR,\n+\t\t\t     TREE_TYPE (arg1), const2, const1);\n+\t  if (TREE_CODE (lhs) == TREE_CODE (arg1)\n+\t      && (TREE_CODE (lhs) != INTEGER_CST\n+\t          || !TREE_OVERFLOW (lhs)))\n+\t    return fold_build2 (code, type, variable, lhs);\n+\t}\n+\n       if (FLOAT_TYPE_P (TREE_TYPE (arg0)))\n \t{\n \t  tree targ0 = strip_float_extensions (arg0);"}, {"sha": "ce151d36131a73023213ac962377e81b3870169d", "filename": "gcc/testsuite/gcc.dg/20050702-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2F20050702-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2F20050702-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050702-1.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* We going into an infinite loop in fold because we\n+    were mishandling the return value of \n+    fold_to_nonsharp_ineq_using_bound. */\n+_Bool f();\n+void g(int);\n+void h (int old_size)\n+{\n+   int new_size = old_size, i;\n+   g(old_size - 1);\n+   i = 0;\n+   while (i < old_size - 1)\n+   {\n+     if (f())\n+     {\n+       i++;\n+       continue;\n+     }\n+     while (i < old_size - 1)\n+       i++;\n+   }\n+   g(new_size);\n+}"}, {"sha": "733367b214cd48fc132c61e1804b9646ecc12cbf", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14490-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-1.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+int g(int x)\n+{\n+   return (x - 10) < 0;\n+}\n+/* There should be only x >= 9 and no x - 10. */\n+/* { dg-final { scan-tree-dump-times \">= 9\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"- 10\" 0 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+"}, {"sha": "eaa0f1368f733d60d8782a4630c93c3fc5f6b642", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14490-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-2.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple -fwrapv\" } */\n+int g(int x)\n+{\n+   return (x - 10) < 0;\n+}\n+/* There should be no x >= 9 and one x - 10. */\n+/* { dg-final { scan-tree-dump-times \">= 9\" 0 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"- 10\" 1 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "0e6873b831d63a13e967ce6bbde258fe55675d59", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14490-3.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-3.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple\" } */\n+int g(int x)\n+{\n+   return (x + 10) < 0;\n+}\n+/* There should be only x >= -9 and no x + 10. */\n+/* { dg-final { scan-tree-dump-times \">= 9\" 1 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"- 10\" 0 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}, {"sha": "365ab7771c06cf9127855148c13af6fcbd45dce8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr14490-4.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70a9e64b3cc4c27d53dd895e5318cae00245b22c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr14490-4.c?ref=70a9e64b3cc4c27d53dd895e5318cae00245b22c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-gimple -fwrapv\" } */\n+int g(int x)\n+{\n+   return (x + 10) < 0;\n+}\n+/* There should be no x >= -9 and one x + 10. */\n+/* { dg-final { scan-tree-dump-times \">= 9\" 0 \"gimple\"} } */\n+/* { dg-final { scan-tree-dump-times \"- 10\" 1 \"gimple\"} } */\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */"}]}