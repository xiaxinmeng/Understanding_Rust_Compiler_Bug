{"sha": "2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYyZWJmOTUxYmEyZjVmODVjNTMyMTNlMDc1Njc1NmNlNDViZDU4Zg==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-05-13T06:52:02Z"}, "committer": {"name": "Chung-Ju Wu", "email": "jasonwucj@gcc.gnu.org", "date": "2018-05-13T06:52:02Z"}, "message": "[NDS32] Implment n10 pipeline.\n\ngcc/\n\t* config.gcc (nds32*-*-*): Check that n10/d10 are valid to --with-cpu.\n\t* config/nds32/nds32-n10.md: New file.\n\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N10.\n\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n10\n\tpipeline.\n\t* config/nds32/nds32-protos.h: More declarations for n10 pipeline.\n\t* config/nds32/nds32-utils.c: More implementations for n10 pipeline.\n\t* config/nds32/nds32.md (pipeline_model): Add n10.\n\t* config/nds32/nds32.opt (mcpu): Support n10 pipeline cpus.\n\t* config/nds32/pipelines.md: Include n10 settings.\n\nCo-Authored-By: Chung-Ju Wu <jasonwucj@gmail.com>\n\nFrom-SVN: r260207", "tree": {"sha": "3722423bf0cde444bffc92cb2c0f7ea0c66aa91d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3722423bf0cde444bffc92cb2c0f7ea0c66aa91d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c32ef413a661d53de9a90d29b5253bf98e6af82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c32ef413a661d53de9a90d29b5253bf98e6af82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c32ef413a661d53de9a90d29b5253bf98e6af82"}], "stats": {"total": 797, "additions": 780, "deletions": 17}, "files": [{"sha": "f39ff635c3c0e4258993c9a89483b3932c277027", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -1,3 +1,17 @@\n+2018-05-13  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Chung-Ju Wu  <jasonwucj@gmail.com>\n+\n+\t* config.gcc (nds32*-*-*): Check that n10/d10 are valid to --with-cpu.\n+\t* config/nds32/nds32-n10.md: New file.\n+\t* config/nds32/nds32-opts.h (nds32_cpu_type): Add CPU_N10.\n+\t* config/nds32/nds32-pipelines-auxiliary.c: Implementation for n10\n+\tpipeline.\n+\t* config/nds32/nds32-protos.h: More declarations for n10 pipeline.\n+\t* config/nds32/nds32-utils.c: More implementations for n10 pipeline.\n+\t* config/nds32/nds32.md (pipeline_model): Add n10.\n+\t* config/nds32/nds32.opt (mcpu): Support n10 pipeline cpus.\n+\t* config/nds32/pipelines.md: Include n10 settings.\n+\n 2018-05-13  Monk Chiang  <sh.chiang04@gmail.com>\n \t    Kito Cheng  <kito.cheng@gmail.com>\n \t    Chung-Ju Wu  <jasonwucj@gmail.com>"}, {"sha": "b729f3b0c93f4c2c607450f9fcc49725c8524151", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -4367,11 +4367,11 @@ case \"${target}\" in\n \t\t\"\")\n \t\t\twith_cpu=n9\n \t\t\t;;\n-\t\tn6 | n7 | n8 | e8 | s8 | n9)\n+\t\tn6 | n7 |n8 | e8 | s8 | n9 | n10 | d10)\n \t\t\t# OK\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9\" 1>&2\n+\t\t\techo \"Cannot accept --with-cpu=$with_cpu, available values are: n6 n7 n8 e8 s8 n9 n10 d10\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac"}, {"sha": "0dd76da1ef84522e4694c6ab2e9d2869769a1152", "filename": "gcc/config/nds32/nds32-n10.md", "status": "added", "additions": 439, "deletions": 0, "changes": 439, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-n10.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-n10.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-n10.md?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -0,0 +1,439 @@\n+;; Pipeline descriptions of Andes NDS32 cpu for GNU compiler\n+;; Copyright (C) 2012-2018 Free Software Foundation, Inc.\n+;; Contributed by Andes Technology Corporation.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+\n+;; ------------------------------------------------------------------------\n+;; Define N10 pipeline settings.\n+;; ------------------------------------------------------------------------\n+\n+(define_automaton \"nds32_n10_machine\")\n+\n+;; ------------------------------------------------------------------------\n+;; Pipeline Stages\n+;; ------------------------------------------------------------------------\n+;; IF - Instruction Fetch\n+;; II - Instruction Issue / Instruction Decode\n+;; EX - Instruction Execution\n+;; MM - Memory Execution\n+;; WB - Instruction Retire / Result Write-Back\n+\n+(define_cpu_unit \"n10_ii\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10_ex\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10_mm\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10_wb\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_iq\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_rf\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_e1\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_e2\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_e3\" \"nds32_n10_machine\")\n+(define_cpu_unit \"n10f_e4\" \"nds32_n10_machine\")\n+\n+(define_insn_reservation \"nds_n10_unknown\" 1\n+  (and (eq_attr \"type\" \"unknown\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_misc\" 1\n+  (and (eq_attr \"type\" \"misc\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_mmu\" 1\n+  (and (eq_attr \"type\" \"mmu\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_alu\" 1\n+  (and (eq_attr \"type\" \"alu\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_alu_shift\" 1\n+  (and (eq_attr \"type\" \"alu_shift\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ii+n10_ex, n10_ex+n10_mm, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_pbsad\" 1\n+  (and (eq_attr \"type\" \"pbsad\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex*3, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_pbsada\" 1\n+  (and (eq_attr \"type\" \"pbsada\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex*3, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load\" 1\n+  (and (match_test \"nds32::load_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store\" 1\n+  (and (match_test \"nds32::store_single_p (insn)\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_1\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"1\")))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_2\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (ior (and (eq_attr \"type\" \"load_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+\t    (match_test \"nds32::load_double_p (insn)\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ex+n10_mm, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_3\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"3\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_4\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"4\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, n10_ii+n10_ex+n10_mm+n10_wb, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_5\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"5\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*2, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_6\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"6\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*3, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_7\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (eq_attr \"combo\" \"7\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*4, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_load_multiple_N\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"load_multiple\")\n+\t    (match_test \"get_attr_combo (insn) >= 8\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*5, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_1\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"1\")))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_2\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (ior (and (eq_attr \"type\" \"store_multiple\")\n+\t\t (eq_attr \"combo\" \"2\"))\n+       (match_test \"nds32::store_double_p (insn)\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ex+n10_mm, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_3\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"3\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_4\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"4\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, n10_ii+n10_ex+n10_mm+n10_wb, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_5\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"5\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*2, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_6\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"6\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*3, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_7\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (eq_attr \"combo\" \"7\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*4, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_store_multiple_N\" 1\n+  (and (eq_attr \"pipeline_model\" \"n10\")\n+       (and (eq_attr \"type\" \"store_multiple\")\n+\t    (match_test \"get_attr_combo (insn) >= 8\")))\n+  \"n10_ii, n10_ii+n10_ex, n10_ii+n10_ex+n10_mm, (n10_ii+n10_ex+n10_mm+n10_wb)*5, n10_ex+n10_mm+n10_wb, n10_mm+n10_wb, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_mul\" 1\n+  (and (eq_attr \"type\" \"mul\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_mac\" 1\n+       (and (eq_attr \"type\" \"mac\")\n+\t    (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_div\" 1\n+  (and (eq_attr \"type\" \"div\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex*34, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_branch\" 1\n+  (and (eq_attr \"type\" \"branch\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_alu\" 1\n+  (and (eq_attr \"type\" \"dalu\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_alu64\" 1\n+  (and (eq_attr \"type\" \"dalu64\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_alu_round\" 1\n+  (and (eq_attr \"type\" \"daluround\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_cmp\" 1\n+  (and (eq_attr \"type\" \"dcmp\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_clip\" 1\n+  (and (eq_attr \"type\" \"dclip\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_mul\" 1\n+  (and (eq_attr \"type\" \"dmul\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_mac\" 1\n+  (and (eq_attr \"type\" \"dmac\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_insb\" 1\n+  (and (eq_attr \"type\" \"dinsb\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_pack\" 1\n+  (and (eq_attr \"type\" \"dpack\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_bpick\" 1\n+  (and (eq_attr \"type\" \"dbpick\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_dsp_wext\" 1\n+  (and (eq_attr \"type\" \"dwext\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ex, n10_mm, n10_wb\")\n+\n+(define_insn_reservation \"nds_n10_fpu_alu\" 4\n+  (and (eq_attr \"type\" \"falu\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_muls\" 4\n+  (and (eq_attr \"type\" \"fmuls\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_muld\" 4\n+  (and (eq_attr \"type\" \"fmuld\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2*2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_macs\" 4\n+  (and (eq_attr \"type\" \"fmacs\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2*3, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_macd\" 4\n+  (and (eq_attr \"type\" \"fmacd\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2*4, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_divs\" 4\n+  (and (ior (eq_attr \"type\" \"fdivs\")\n+\t    (eq_attr \"type\" \"fsqrts\"))\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2*14, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_divd\" 4\n+  (and (ior (eq_attr \"type\" \"fdivd\")\n+\t    (eq_attr \"type\" \"fsqrtd\"))\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2*28, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_fast_alu\" 2\n+  (and (ior (eq_attr \"type\" \"fcmp\")\n+\t    (ior (eq_attr \"type\" \"fabs\")\n+\t\t (ior (eq_attr \"type\" \"fcpy\")\n+\t\t      (eq_attr \"type\" \"fcmov\"))))\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_fmtsr\" 4\n+  (and (eq_attr \"type\" \"fmtsr\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_fmtdr\" 4\n+  (and (eq_attr \"type\" \"fmtdr\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ii+n10f_iq, n10f_iq+n10f_rf, n10f_rf+n10f_e1, n10f_e1+n10f_e2, n10f_e2+n10f_e3, n10f_e3+n10f_e4, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_fmfsr\" 2\n+  (and (eq_attr \"type\" \"fmfsr\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_fmfdr\" 2\n+  (and (eq_attr \"type\" \"fmfdr\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10_ii+n10f_iq, n10f_iq+n10f_rf, n10f_rf+n10f_e1, n10f_e1+n10f_e2, n10f_e2+n10f_e3, n10f_e3+n10f_e4, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_load\" 3\n+  (and (eq_attr \"type\" \"fload\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+(define_insn_reservation \"nds_n10_fpu_store\" 1\n+  (and (eq_attr \"type\" \"fstore\")\n+       (eq_attr \"pipeline_model\" \"n10\"))\n+  \"n10_ii, n10f_iq, n10f_rf, n10f_e1, n10f_e2, n10f_e3, n10f_e4\")\n+\n+;; ------------------------------------------------------------------------\n+;; Comment Notations and Bypass Rules\n+;; ------------------------------------------------------------------------\n+;; Producers (LHS)\n+;;   LD\n+;;     Load data from the memory and produce the loaded data. The result is\n+;;     ready at MM.\n+;;   LMW(N, M)\n+;;     There are N micro-operations within an instruction that loads multiple\n+;;     words. The result produced by the M-th micro-operation is sent to\n+;;     consumers. The result is ready at MM.\n+;;   MUL, MAC\n+;;     Compute data in the multiply-adder and produce the data. The result\n+;;     is ready at MM.\n+;;   DIV\n+;;     Compute data in the divider and produce the data. The result is ready\n+;;     at MM.\n+;;\n+;; Consumers (RHS)\n+;;   ALU, MOVD44, PBSAD, PBSADA_RaRb, MUL, MAC, DIV, MMU\n+;;     Require operands at EX.\n+;;   ALU_SHIFT_Rb\n+;;     An ALU-SHIFT instruction consists of a shift micro-operation followed\n+;;     by an arithmetic micro-operation. The operand Rb is used by the first\n+;;     micro-operation, and there are some latencies if data dependency occurs.\n+;;   MAC_RaRb\n+;;     A MAC instruction does multiplication at EX and does accumulation at MM,\n+;;     so the operand Rt is required at MM, and operands Ra and Rb are required\n+;;     at EX.\n+;;   ADDR_IN\n+;;     If an instruction requires an address as its input operand, the address\n+;;     is required at EX.\n+;;   ST\n+;;     A store instruction requires its data at MM.\n+;;   SMW(N, M)\n+;;     There are N micro-operations within an instruction that stores multiple\n+;;     words. Each M-th micro-operation requires its data at MM.\n+;;   BR\n+;;     If a branch instruction is conditional, its input data is required at EX.\n+\n+;; FPU_ADDR_OUT -> FPU_ADDR_IN\n+;; Main pipeline rules don't need this because those default latency is 1.\n+(define_bypass 1\n+  \"nds_n10_fpu_load, nds_n10_fpu_store\"\n+  \"nds_n10_fpu_load, nds_n10_fpu_store\"\n+  \"nds32_n10_ex_to_ex_p\"\n+)\n+\n+;; LD, MUL, MAC, DIV, DALU64, DMUL, DMAC, DALUROUND, DBPICK, DWEXT\n+;;   -> ALU, ALU_SHIFT_Rb, PBSAD, PBSADA_RaRb, MOVD44, MUL, MAC_RaRb, DIV, ADDR_IN, BR, MMU,\n+;;      DALU, DALUROUND, DMUL, DMAC_RaRb, DPACK, DINSB, DCMP, DCLIP, WEXT_O, BPICK_RaRb\n+(define_bypass 2\n+  \"nds_n10_load, nds_n10_mul, nds_n10_mac, nds_n10_div,\\\n+   nds_n10_dsp_alu64, nds_n10_dsp_mul, nds_n10_dsp_mac,\\\n+   nds_n10_dsp_alu_round, nds_n10_dsp_bpick, nds_n10_dsp_wext\"\n+  \"nds_n10_alu, nds_n10_alu_shift,\\\n+   nds_n10_pbsad, nds_n10_pbsada,\\\n+   nds_n10_mul, nds_n10_mac, nds_n10_div,\\\n+   nds_n10_branch,\\\n+   nds_n10_load, nds_n10_store,\\\n+   nds_n10_load_multiple_1, nds_n10_load_multiple_2, nds_n10_load_multiple_3,\\\n+   nds_n10_load_multiple_4, nds_n10_load_multiple_5, nds_n10_load_multiple_6,\\\n+   nds_n10_load_multiple_7, nds_n10_load_multiple_N,\\\n+   nds_n10_store_multiple_1, nds_n10_store_multiple_2, nds_n10_store_multiple_3,\\\n+   nds_n10_store_multiple_4, nds_n10_store_multiple_5, nds_n10_store_multiple_6,\\\n+   nds_n10_store_multiple_7, nds_n10_store_multiple_N,\\\n+   nds_n10_mmu,\\\n+   nds_n10_dsp_alu, nds_n10_dsp_alu_round,\\\n+   nds_n10_dsp_mul, nds_n10_dsp_mac, nds_n10_dsp_pack,\\\n+   nds_n10_dsp_insb, nds_n10_dsp_cmp, nds_n10_dsp_clip,\\\n+   nds_n10_dsp_wext, nds_n10_dsp_bpick\"\n+  \"nds32_n10_mm_to_ex_p\"\n+)\n+\n+;; LMW(N, N)\n+;;   -> ALU, ALU_SHIFT_Rb, PBSAD, PBSADA_RaRb, MOVD44, MUL, MAC_RaRb, DIV, ADDR_IN, BR, MMU\n+;;      DALU, DALUROUND, DMUL, DMAC_RaRb, DPACK, DINSB, DCMP, DCLIP, WEXT_O, BPICK_RaRb\n+(define_bypass 2\n+  \"nds_n10_load_multiple_1, nds_n10_load_multiple_2, nds_n10_load_multiple_3,\\\n+   nds_n10_load_multiple_4, nds_n10_load_multiple_5, nds_n10_load_multiple_6,\\\n+   nds_n10_load_multiple_7, nds_n10_load_multiple_N\"\n+  \"nds_n10_alu, nds_n10_alu_shift,\\\n+   nds_n10_pbsad, nds_n10_pbsada,\\\n+   nds_n10_mul, nds_n10_mac, nds_n10_div,\\\n+   nds_n10_branch,\\\n+   nds_n10_load, nds_n10_store,\\\n+   nds_n10_load_multiple_1, nds_n10_load_multiple_2, nds_n10_load_multiple_3,\\\n+   nds_n10_load_multiple_4, nds_n10_load_multiple_5, nds_n10_load_multiple_6,\\\n+   nds_n10_load_multiple_7, nds_n10_load_multiple_N,\\\n+   nds_n10_store_multiple_1, nds_n10_store_multiple_2, nds_n10_store_multiple_3,\\\n+   nds_n10_store_multiple_4, nds_n10_store_multiple_5, nds_n10_store_multiple_6,\\\n+   nds_n10_store_multiple_7, nds_n10_store_multiple_N,\\\n+   nds_n10_mmu,\\\n+   nds_n10_dsp_alu, nds_n10_dsp_alu_round,\\\n+   nds_n10_dsp_mul, nds_n10_dsp_mac, nds_n10_dsp_pack,\\\n+   nds_n10_dsp_insb, nds_n10_dsp_cmp, nds_n10_dsp_clip,\\\n+   nds_n10_dsp_wext, nds_n10_dsp_bpick\"\n+  \"nds32_n10_last_load_to_ex_p\"\n+)"}, {"sha": "61e95f91310801b90048a74320989a4d789fd3f4", "filename": "gcc/config/nds32/nds32-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-opts.h?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -42,6 +42,7 @@ enum nds32_cpu_type\n   CPU_N8,\n   CPU_E8,\n   CPU_N9,\n+  CPU_N10,\n   CPU_SIMPLE\n };\n "}, {"sha": "7ab5539deaa99163679ac02dab994be08cb5ef94", "filename": "gcc/config/nds32/nds32-pipelines-auxiliary.c", "status": "modified", "additions": 253, "deletions": 14, "changes": 267, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-pipelines-auxiliary.c?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -335,6 +335,103 @@ movd44_even_dep_p (rtx_insn *insn, rtx def_reg)\n   return false;\n }\n \n+/* Check if INSN is a wext insn consuming DEF_REG.  */\n+bool\n+wext_odd_dep_p (rtx insn, rtx def_reg)\n+{\n+  rtx shift_rtx = XEXP (SET_SRC (PATTERN (insn)), 0);\n+  rtx use_reg = XEXP (shift_rtx, 0);\n+  rtx pos_rtx = XEXP (shift_rtx, 1);\n+\n+  if (REG_P (pos_rtx) && reg_overlap_p (def_reg, pos_rtx))\n+    return true;\n+\n+  if (GET_MODE (def_reg) == DImode)\n+    return reg_overlap_p (def_reg, use_reg);\n+\n+  gcc_assert (REG_P (def_reg) || GET_CODE (def_reg) == SUBREG);\n+  gcc_assert (REG_P (use_reg));\n+\n+  if (REG_P (def_reg))\n+    {\n+      if (!TARGET_BIG_ENDIAN)\n+\treturn REGNO (def_reg) == REGNO (use_reg) + 1;\n+      else\n+\treturn  REGNO (def_reg) == REGNO (use_reg);\n+    }\n+\n+  if (GET_CODE (def_reg) == SUBREG)\n+    {\n+      if (!reg_overlap_p (def_reg, use_reg))\n+\treturn false;\n+\n+      if (!TARGET_BIG_ENDIAN)\n+\treturn SUBREG_BYTE (def_reg) == 4;\n+      else\n+\treturn SUBREG_BYTE (def_reg) == 0;\n+    }\n+\n+  return false;\n+}\n+\n+/* Check if INSN is a bpick insn consuming DEF_REG.  */\n+bool\n+bpick_ra_rb_dep_p (rtx insn, rtx def_reg)\n+{\n+  rtx ior_rtx = SET_SRC (PATTERN (insn));\n+  rtx and1_rtx = XEXP (ior_rtx, 0);\n+  rtx and2_rtx = XEXP (ior_rtx, 1);\n+  rtx reg1_0 = XEXP (and1_rtx, 0);\n+  rtx reg1_1 = XEXP (and1_rtx, 1);\n+  rtx reg2_0 = XEXP (and2_rtx, 0);\n+  rtx reg2_1 = XEXP (and2_rtx, 1);\n+\n+  if (GET_CODE (reg1_0) == NOT)\n+    {\n+      if (rtx_equal_p (reg1_0, reg2_0))\n+\treturn reg_overlap_p (def_reg, reg1_1)\n+\t       || reg_overlap_p (def_reg, reg2_1);\n+\n+      if (rtx_equal_p (reg1_0, reg2_1))\n+\treturn reg_overlap_p (def_reg, reg1_1)\n+\t       || reg_overlap_p (def_reg, reg2_0);\n+    }\n+\n+  if (GET_CODE (reg1_1) == NOT)\n+    {\n+      if (rtx_equal_p (reg1_1, reg2_0))\n+\treturn reg_overlap_p (def_reg, reg1_0)\n+\t       || reg_overlap_p (def_reg, reg2_1);\n+\n+      if (rtx_equal_p (reg1_1, reg2_1))\n+\treturn reg_overlap_p (def_reg, reg1_0)\n+\t       || reg_overlap_p (def_reg, reg2_0);\n+    }\n+\n+  if (GET_CODE (reg2_0) == NOT)\n+    {\n+      if (rtx_equal_p (reg2_0, reg1_0))\n+\treturn reg_overlap_p (def_reg, reg2_1)\n+\t       || reg_overlap_p (def_reg, reg1_1);\n+\n+      if (rtx_equal_p (reg2_0, reg1_1))\n+\treturn reg_overlap_p (def_reg, reg2_1)\n+\t       || reg_overlap_p (def_reg, reg1_0);\n+    }\n+\n+  if (GET_CODE (reg2_1) == NOT)\n+    {\n+      if (rtx_equal_p (reg2_1, reg1_0))\n+\treturn reg_overlap_p (def_reg, reg2_0)\n+\t       || reg_overlap_p (def_reg, reg1_1);\n+\n+      if (rtx_equal_p (reg2_1, reg1_1))\n+\treturn reg_overlap_p (def_reg, reg2_0)\n+\t       || reg_overlap_p (def_reg, reg1_0);\n+    }\n+\n+  gcc_unreachable ();\n+}\n } // namespace scheduling\n } // namespace nds32\n \n@@ -375,8 +472,7 @@ n7_consumed_by_ii_dep_p (rtx_insn *consumer, rtx def_reg)\n       operations in order to write two registers. We have to check the\n       dependency from the producer to the first micro-operation.  */\n     case TYPE_DIV:\n-      if (INSN_CODE (consumer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (consumer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (consumer))\n \tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n       else\n \tuse_rtx = SET_SRC (PATTERN (consumer));\n@@ -506,8 +602,7 @@ n8_consumed_by_ex_p (rtx_insn *consumer, rtx def_reg)\n       operations in order to write two registers. We have to check the\n       dependency from the producer to the first micro-operation.  */\n     case TYPE_DIV:\n-      if (INSN_CODE (consumer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (consumer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (consumer))\n \tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n       else\n \tuse_rtx = SET_SRC (PATTERN (consumer));\n@@ -606,8 +701,7 @@ n9_2r1w_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n       break;\n \n     case TYPE_DIV:\n-      if (INSN_CODE (consumer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (consumer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (consumer))\n \tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n       else\n \tuse_rtx = SET_SRC (PATTERN (consumer));\n@@ -706,8 +800,7 @@ n9_3r2w_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n       We have to check the dependency from the producer to the first\n       micro-operation.  */\n     case TYPE_DIV:\n-      if (INSN_CODE (consumer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (consumer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (consumer))\n \tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n       else\n \tuse_rtx = SET_SRC (PATTERN (consumer));\n@@ -744,6 +837,86 @@ n9_3r2w_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n   return false;\n }\n \n+/* Check the dependency between the producer defining DEF_REG and CONSUMER\n+   requiring input operand at EX.  */\n+bool\n+n10_consumed_by_ex_dep_p (rtx_insn *consumer, rtx def_reg)\n+{\n+  rtx use_rtx;\n+\n+  switch (get_attr_type (consumer))\n+    {\n+    case TYPE_ALU:\n+    case TYPE_PBSAD:\n+    case TYPE_MUL:\n+    case TYPE_DALU:\n+    case TYPE_DALU64:\n+    case TYPE_DMUL:\n+    case TYPE_DPACK:\n+    case TYPE_DINSB:\n+    case TYPE_DCMP:\n+    case TYPE_DCLIP:\n+    case TYPE_DALUROUND:\n+      use_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_ALU_SHIFT:\n+      use_rtx = extract_shift_reg (consumer);\n+      break;\n+\n+    case TYPE_PBSADA:\n+      return pbsada_insn_ra_rb_dep_reg_p (consumer, def_reg);\n+\n+    case TYPE_MAC:\n+    case TYPE_DMAC:\n+      use_rtx = extract_mac_non_acc_rtx (consumer);\n+      break;\n+\n+   /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+      results, the quotient and the remainder.  */\n+    case TYPE_DIV:\n+      if (divmod_p (consumer))\n+\tuse_rtx = SET_SRC (parallel_element (consumer, 0));\n+      else\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      break;\n+\n+    case TYPE_DWEXT:\n+      return wext_odd_dep_p (consumer, def_reg);\n+\n+    case TYPE_DBPICK:\n+      return bpick_ra_rb_dep_p (consumer, def_reg);\n+\n+    case TYPE_MMU:\n+      if (GET_CODE (PATTERN (consumer)) == SET)\n+\tuse_rtx = SET_SRC (PATTERN (consumer));\n+      else\n+\treturn true;\n+      break;\n+\n+    case TYPE_LOAD:\n+    case TYPE_STORE:\n+      use_rtx = extract_mem_rtx (consumer);\n+      break;\n+\n+    case TYPE_LOAD_MULTIPLE:\n+    case TYPE_STORE_MULTIPLE:\n+      use_rtx = extract_base_reg (consumer);\n+      break;\n+\n+    case TYPE_BRANCH:\n+      use_rtx = PATTERN (consumer);\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+  if (reg_overlap_p (def_reg, use_rtx))\n+    return true;\n+\n+  return false;\n+}\n \n } // anonymous namespace\n \n@@ -837,8 +1010,7 @@ nds32_n8_ex_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n       break;\n \n     case TYPE_DIV:\n-      if (INSN_CODE (producer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (producer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (producer))\n \tdef_reg = SET_DEST (parallel_element (producer, 1));\n       else\n \tdef_reg = SET_DEST (PATTERN (producer));\n@@ -969,8 +1141,7 @@ nds32_e8_ex_to_ii_p (rtx_insn *producer, rtx_insn *consumer)\n       break;\n \n     case TYPE_DIV:\n-      if (INSN_CODE (producer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (producer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (producer))\n \t{\n \t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n \t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n@@ -1073,8 +1244,7 @@ nds32_n9_3r2w_mm_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n       results, the quotient and the remainder.  We have to handle them\n       individually.  */\n     case TYPE_DIV:\n-      if (INSN_CODE (producer) == CODE_FOR_divmodsi4\n-\t  || INSN_CODE (producer) == CODE_FOR_udivmodsi4)\n+      if (divmod_p (producer))\n \t{\n \t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n \t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n@@ -1132,4 +1302,73 @@ nds32_n9_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n     return n9_3r2w_consumed_by_ex_dep_p (consumer, last_def_reg);\n }\n \n+/* Guard functions for N10 cores.  */\n+\n+/* Check dependencies from EX to EX (ADDR_OUT -> ADDR_IN).  */\n+bool\n+nds32_n10_ex_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  gcc_assert (get_attr_type (producer) == TYPE_FLOAD\n+\t      || get_attr_type (producer) == TYPE_FSTORE);\n+  gcc_assert (get_attr_type (consumer) == TYPE_FLOAD\n+\t      || get_attr_type (consumer) == TYPE_FSTORE);\n+\n+  if (!post_update_insn_p (producer))\n+    return false;\n+\n+  return reg_overlap_p (extract_base_reg (producer),\n+\t\t\textract_mem_rtx (consumer));\n+}\n+\n+/* Check dependencies from MM to EX.  */\n+bool\n+nds32_n10_mm_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx def_reg;\n+\n+  switch (get_attr_type (producer))\n+    {\n+    case TYPE_LOAD:\n+    case TYPE_MUL:\n+    case TYPE_MAC:\n+    case TYPE_DALU64:\n+    case TYPE_DMUL:\n+    case TYPE_DMAC:\n+    case TYPE_DALUROUND:\n+    case TYPE_DBPICK:\n+    case TYPE_DWEXT:\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+   /* Some special instructions, divmodsi4 and udivmodsi4, produce two\n+      results, the quotient and the remainder.  We have to handle them\n+      individually.  */\n+    case TYPE_DIV:\n+      if (divmod_p (producer))\n+\t{\n+\t  rtx def_reg1 = SET_DEST (parallel_element (producer, 0));\n+\t  rtx def_reg2 = SET_DEST (parallel_element (producer, 1));\n+\n+\t  return (n10_consumed_by_ex_dep_p (consumer, def_reg1)\n+\t\t  || n10_consumed_by_ex_dep_p (consumer, def_reg2));\n+\t}\n+\n+      def_reg = SET_DEST (PATTERN (producer));\n+      break;\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+\n+    return n10_consumed_by_ex_dep_p (consumer, def_reg);\n+}\n+\n+/* Check dependencies from LMW(N, N) to EX.  */\n+bool\n+nds32_n10_last_load_to_ex_p (rtx_insn *producer, rtx_insn *consumer)\n+{\n+  rtx last_def_reg = extract_nth_access_reg (producer, -1);\n+\n+  return n10_consumed_by_ex_dep_p (consumer, last_def_reg);\n+}\n /* ------------------------------------------------------------------------ */"}, {"sha": "8e6652232af46eb598087984798371cd9b190220", "filename": "gcc/config/nds32/nds32-protos.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-protos.h?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -121,6 +121,9 @@ extern bool nds32_n9_2r1w_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n9_3r2w_mm_to_ex_p (rtx_insn *, rtx_insn *);\n extern bool nds32_n9_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n \n+extern bool nds32_n10_ex_to_ex_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n10_mm_to_ex_p (rtx_insn *, rtx_insn *);\n+extern bool nds32_n10_last_load_to_ex_p (rtx_insn *, rtx_insn *);\n \n /* Auxiliary functions for stack operation predicate checking.  */\n \n@@ -300,6 +303,8 @@ rtx extract_movd44_odd_reg (rtx_insn *);\n \n rtx extract_mac_non_acc_rtx (rtx_insn *);\n \n+bool divmod_p (rtx_insn *);\n+\n rtx extract_branch_target_rtx (rtx_insn *);\n rtx extract_branch_condition_rtx (rtx_insn *);\n } // namespace nds32"}, {"sha": "6c93774c453ce5a01b195ed1a977e27fa9395ebd", "filename": "gcc/config/nds32/nds32-utils.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-utils.c?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -424,6 +424,19 @@ extract_mac_non_acc_rtx (rtx_insn *insn)\n     }\n }\n \n+/* Check if the DIV insn needs two write ports.  */\n+bool\n+divmod_p (rtx_insn *insn)\n+{\n+  gcc_assert (get_attr_type (insn) == TYPE_DIV);\n+\n+  if (INSN_CODE (insn) == CODE_FOR_divmodsi4\n+      || INSN_CODE (insn) == CODE_FOR_udivmodsi4)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Extract the rtx representing the branch target to help recognize\n    data hazards.  */\n rtx"}, {"sha": "d6c35157e11fd25445497cbabd3d62fa2d077f25", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -56,12 +56,13 @@\n ;; ------------------------------------------------------------------------\n \n ;; CPU pipeline model.\n-(define_attr \"pipeline_model\" \"n7,n8,e8,n9,simple\"\n+(define_attr \"pipeline_model\" \"n7,n8,e8,n9,n10,simple\"\n   (const\n     (cond [(match_test \"nds32_cpu_option == CPU_N7\")  (const_string \"n7\")\n \t   (match_test \"nds32_cpu_option == CPU_E8\")  (const_string \"e8\")\n \t   (match_test \"nds32_cpu_option == CPU_N6 || nds32_cpu_option == CPU_N8\")  (const_string \"n8\")\n \t   (match_test \"nds32_cpu_option == CPU_N9\")  (const_string \"n9\")\n+\t   (match_test \"nds32_cpu_option == CPU_N10\") (const_string \"n10\")\n \t   (match_test \"nds32_cpu_option == CPU_SIMPLE\") (const_string \"simple\")]\n \t  (const_string \"n9\"))))\n "}, {"sha": "4111278c0a841ef47e49bb64c8a4895a8e372451", "filename": "gcc/config/nds32/nds32.opt", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fnds32.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.opt?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -242,6 +242,51 @@ Enum(nds32_cpu_type) String(n968) Value(CPU_N9)\n EnumValue\n Enum(nds32_cpu_type) String(n968a) Value(CPU_N9)\n \n+EnumValue\n+Enum(nds32_cpu_type) String(n10) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1033) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1033a) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1033-fpu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1033-spu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068a) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068-fpu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068a-fpu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068-spu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(n1068a-spu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d10) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d1088) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d1088-fpu) Value(CPU_N10)\n+\n+EnumValue\n+Enum(nds32_cpu_type) String(d1088-spu) Value(CPU_N10)\n+\n EnumValue\n Enum(nds32_cpu_type) String(simple) Value(CPU_SIMPLE)\n "}, {"sha": "a382c75e07760813c8fd4438117134f7f49c07a0", "filename": "gcc/config/nds32/pipelines.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f2ebf951ba2f5f85c53213e0756756ce45bd58f/gcc%2Fconfig%2Fnds32%2Fpipelines.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fpipelines.md?ref=2f2ebf951ba2f5f85c53213e0756756ce45bd58f", "patch": "@@ -43,6 +43,12 @@\n (include \"nds32-n9-2r1w.md\")\n \n \n+;; ------------------------------------------------------------------------\n+;; Include N10 pipeline settings.\n+;; ------------------------------------------------------------------------\n+(include \"nds32-n10.md\")\n+\n+\n ;; ------------------------------------------------------------------------\n ;; Define simple pipeline settings.\n ;; ------------------------------------------------------------------------"}]}