{"sha": "dc8263bc05741ee03ec9246de58467555011af04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM4MjYzYmMwNTc0MWVlMDNlYzkyNDZkZTU4NDY3NTU1MDExYWYwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-07-07T11:25:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-07-07T11:25:01Z"}, "message": "decl.c (xref_tag): Handle attributes between 'class' and name.\n\n\t* decl.c (xref_tag): Handle attributes between 'class' and name.\n\t* parse.y (aggr): Likewise.\n\t* semantics.c (finish_class_definition): Likewise.\n\t* Makefile.in (EXPECTED): Adjust.\n\t* cp-tree.h: Declare flag_optional_diags and warn_multichar.\n\t* decl2.c: Define them.\n\t(lang_decode_option): Handle them.\n\t* lang-options.h: Add -foptional-diags.\n\t* class.c (finish_struct): Don't complain about multiple meanings of\n\tname if -fno-optional-diags.\n\t* decl.c (pushdecl_class_level): Likewise.\n\t* lex.c (real_yylex): Check warn_multichar.\n\nFrom-SVN: r20994", "tree": {"sha": "eca7a2113c77bbfa295d838dbd2ffc640e028da5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eca7a2113c77bbfa295d838dbd2ffc640e028da5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc8263bc05741ee03ec9246de58467555011af04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8263bc05741ee03ec9246de58467555011af04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc8263bc05741ee03ec9246de58467555011af04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc8263bc05741ee03ec9246de58467555011af04/comments", "author": null, "committer": null, "parents": [{"sha": "c8fbcc35aeb2a8336d0d85c7cd4b5dd30769f311", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8fbcc35aeb2a8336d0d85c7cd4b5dd30769f311", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8fbcc35aeb2a8336d0d85c7cd4b5dd30769f311"}], "stats": {"total": 6429, "additions": 3253, "deletions": 3176}, "files": [{"sha": "6ad5d3f345cc275bcbdb2b763bf24d53902ebda5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -1,3 +1,19 @@\n+1998-07-07  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (xref_tag): Handle attributes between 'class' and name.\n+\t* parse.y (aggr): Likewise.\n+\t* semantics.c (finish_class_definition): Likewise.\n+\t* Makefile.in (EXPECTED): Adjust.\n+\n+\t* cp-tree.h: Declare flag_optional_diags and warn_multichar.\n+\t* decl2.c: Define them.\n+\t(lang_decode_option): Handle them.\n+\t* lang-options.h: Add -foptional-diags.\n+\t* class.c (finish_struct): Don't complain about multiple meanings of \n+\tname if -fno-optional-diags.\n+\t* decl.c (pushdecl_class_level): Likewise.\n+\t* lex.c (real_yylex): Check warn_multichar.\n+\n 1998-07-06  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (lookup_tag): Use CP_DECL_CONTEXT."}, {"sha": "b1c28253dee1a9d9917be85119e542afa8490c4c", "filename": "gcc/cp/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMakefile.in?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -215,7 +215,7 @@ parse.o : $(PARSE_C) $(CONFIG_H) $(CXX_TREE_H) $(srcdir)/../flags.h lex.h \\\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $(BIG_SWITCHFLAG) \\\n   `echo $(PARSE_C) | sed 's,^\\./,,'`\n \n-CONFLICTS = expect 21 shift/reduce conflicts and 42 reduce/reduce conflicts.\n+CONFLICTS = expect 22 shift/reduce conflicts and 42 reduce/reduce conflicts.\n $(PARSE_H) : $(PARSE_C)\n $(PARSE_C) : $(srcdir)/parse.y\n \t@echo $(CONFLICTS)"}, {"sha": "f9b99f061dc1a259898d7f80b82b73a19c3d78b2", "filename": "gcc/cp/class.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -4319,6 +4319,7 @@ finish_struct (t, list_of_fieldlists, attributes, warn_anon)\n \t\ticv = NULL_TREE;\n \n \t      if (icv\n+\t\t  && flag_optional_diags\n \t\t  /* Don't complain about constructors.  */\n \t\t  && name != constructor_name (current_class_type)\n \t\t  /* Or inherited names.  */"}, {"sha": "8d05b783948e2d58cb37c80f6bc916636ac8b6c3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -465,6 +465,9 @@ extern int flag_guiding_decls;\n    and class qualifiers.       */\n extern int flag_do_squangling;\n \n+/* Nonzero if we want to issue diagnostics that the standard says are not\n+   required.  */\n+extern int flag_optional_diags;\n \f\n /* C++ language-specific tree codes.  */\n #define DEFTREECODE(SYM, NAME, TYPE, LENGTH) SYM,\n@@ -1707,6 +1710,9 @@ extern int flag_detailed_statistics;\n    type signature of any virtual function in the base class.  */\n extern int warn_overloaded_virtual;\n \n+/* Nonzero means warn about use of multicharacter literals.  */\n+extern int warn_multichar;\n+\n /* in c-common.c */\n extern void declare_function_name               PROTO((void));\n extern void decl_attributes                     PROTO((tree, tree, tree));"}, {"sha": "ec43758781bd84206e5d048b92d5beaccb6c4c1e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -3740,6 +3740,7 @@ pushdecl_class_level (x)\n \t  tree icv = IDENTIFIER_CLASS_VALUE (name);\n \n \t  if (icv && icv != x\n+\t      && flag_optional_diags\n \t      /* Don't complain about inherited names.  */\n \t      && id_in_current_class (name)\n \t      /* Or shadowed tags.  */\n@@ -11074,6 +11075,17 @@ xref_tag (code_type_node, name, binfo, globalize)\n   register tree ref, t;\n   struct binding_level *b = inner_binding_level;\n   int got_type = 0;\n+  tree attributes = NULL_TREE;\n+\n+  /* If we are called from the parser, code_type_node will sometimes be a\n+     TREE_LIST.  This indicates that the user wrote\n+     \"class __attribute__ ((foo)) bar\".  Extract the attributes so we can\n+     use them later.  */\n+  if (TREE_CODE (code_type_node) == TREE_LIST)\n+    {\n+      attributes = TREE_PURPOSE (code_type_node);\n+      code_type_node = TREE_VALUE (code_type_node);\n+    }\n \n   tag_code = (enum tag_types) TREE_INT_CST_LOW (code_type_node);\n   switch (tag_code)\n@@ -11249,6 +11261,8 @@ xref_tag (code_type_node, name, binfo, globalize)\n \n   pop_obstacks ();\n \n+  TREE_TYPE (ref) = attributes;\n+\n   return ref;\n }\n \n@@ -12500,7 +12514,7 @@ finish_function (lineno, call_poplevel, nested)\n \t\t\t{\n \t\t\t  tree vb = get_vbase\n \t\t\t    (BINFO_TYPE (vbases),\n-\t\t\t     TYPE_BINFO (current_class_type));\n+\t\t\t     TYPE_BINFO (current_class_type), 0);\n \t\t\t  expand_expr_stmt\n \t\t\t    (build_scoped_method_call\n \t\t\t     (current_class_ref, vb, dtor_identifier,"}, {"sha": "fd6167cb2af0986bd922cb2b72167d83c9509d62", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -195,6 +195,11 @@ int flag_vtable_thunks = DEFAULT_VTABLE_THUNKS;\n \n int flag_use_repository;\n \n+/* Nonzero if we want to issue diagnostics that the standard says are not\n+   required.  */\n+\n+int flag_optional_diags = 1;\n+\n /* Nonzero means give string constants the type `const char *'\n    to get extra warnings from them.  These warnings will be too numerous\n    to be useful, except in thoroughly ANSIfied programs.  */\n@@ -281,7 +286,11 @@ int warn_old_style_cast;\n \n /* Warn about #pragma directives that are not recognised.  */      \n \n-int warn_unknown_pragmas = 0; /* Tri state variable.  */  \n+int warn_unknown_pragmas; /* Tri state variable.  */  \n+\n+/* Nonzero means warn about use of multicharacter literals.  */\n+\n+int warn_multichar = 1;\n \n /* Nonzero means `$' can be in an identifier.  */\n \n@@ -487,6 +496,7 @@ static struct { char *string; int *variable; int on_value;} lang_f_options[] =\n   {\"nonansi-builtins\", &flag_no_nonansi_builtin, 0},\n   {\"gnu-keywords\", &flag_no_gnu_keywords, 0},\n   {\"operator-names\", &flag_operator_names, 1},\n+  {\"optional-diags\", &flag_optional_diags, 1},\n   {\"check-new\", &flag_check_new, 1},\n   {\"repo\", &flag_use_repository, 1},\n   {\"for-scope\", &flag_new_for_scope, 2},\n@@ -718,6 +728,10 @@ lang_decode_option (argc, argv)\n \twarn_sign_promo = setting;\n       else if (!strcmp (p, \"old-style-cast\"))\n \twarn_old_style_cast = setting;\n+      else if (!strcmp (p, \"overloaded-virtual\"))\n+\twarn_overloaded_virtual = setting;\n+      else if (!strcmp (p, \"multichar\"))\n+\twarn_multichar = setting;\n       else if (!strcmp (p, \"unknown-pragmas\"))\n \t/* Set to greater than 1, so that even unknown pragmas in\n \t   system headers will be warned about.  */  \n@@ -743,6 +757,7 @@ lang_decode_option (argc, argv)\n \t  warn_sign_compare = setting;\n \t  warn_extern_inline = setting;\n \t  warn_nonvdtor = setting;\n+\t  warn_multichar = setting;\n \t  /* We save the value of warn_uninitialized, since if they put\n \t     -Wuninitialized on the command line, we need to generate a\n \t     warning about not using it without also specifying -O.  */\n@@ -754,9 +769,6 @@ lang_decode_option (argc, argv)\n \t     headers.  */                                        \n \t  warn_unknown_pragmas = 1;                  \n \t}\n-\n-      else if (!strcmp (p, \"overloaded-virtual\"))\n-\twarn_overloaded_virtual = setting;\n       else return strings_processed;\n     }\n   else if (!strcmp (p, \"-ansi\"))"}, {"sha": "ded63ceb1f321bd432e8f603044348093678ebdb", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -75,6 +75,8 @@ Boston, MA 02111-1307, USA.  */\n   \"-fno-nonnull-objects\",\n   \"-foperator-names\",\n   \"-fno-operator-names\",\n+  \"-foptional-diags\",\n+  \"-fno-optional-diags\",\n   \"-frepo\",\n   \"-fno-repo\",\n   \"-fsave-memoized\","}, {"sha": "04bc9208486a4df704dd767c9a73800506f83b1a", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -3971,7 +3971,7 @@ real_yylex ()\n \t    num_chars = max_chars;\n \t    error (\"character constant too long\");\n \t  }\n-\telse if (num_chars != 1)\n+\telse if (num_chars != 1 && warn_multichar)\n \t  warning (\"multi-character character constant\");\n \n \t/* If char type is signed, sign-extend the constant.  */"}, {"sha": "652043489b3ce6332031674be5edaf34eee80740", "filename": "gcc/cp/parse.c", "status": "modified", "additions": 3188, "deletions": 3169, "changes": 6357, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.c?ref=dc8263bc05741ee03ec9246de58467555011af04"}, {"sha": "99a7b7a408f89c5b0635d093802c6244d94e45c7", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -2085,6 +2085,8 @@ aggr:\n \t\t{ error (\"type qualifier `%s' not allowed after struct or class\", IDENTIFIER_POINTER ($2)); }\n \t| aggr AGGR\n \t\t{ error (\"no body nor ';' separates two class, struct or union declarations\"); }\n+\t| aggr attributes\n+\t\t{ $$ = build_decl_list ($2, $1); }\n \t;\n \n named_class_head_sans_basetype:"}, {"sha": "91e93f01c7f9a405df34b466534b1a6b04acb3be", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc8263bc05741ee03ec9246de58467555011af04/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=dc8263bc05741ee03ec9246de58467555011af04", "patch": "@@ -1299,6 +1299,11 @@ finish_class_definition (t, components, attributes, semi)\n   if (semi)\n     note_got_semicolon (t);\n \n+  /* If we got any attributes in class_head, xref_tag will stick them in\n+     TREE_TYPE of the type.  Grab them now.  */\n+  attributes = chainon (TREE_TYPE (t), attributes);\n+  TREE_TYPE (t) = NULL_TREE;\n+\n   if (TREE_CODE (t) == ENUMERAL_TYPE)\n     ;\n   else"}]}