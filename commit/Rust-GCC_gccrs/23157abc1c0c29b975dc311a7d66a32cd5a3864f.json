{"sha": "23157abc1c0c29b975dc311a7d66a32cd5a3864f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxNTdhYmMxYzBjMjliOTc1ZGMzMTFhN2Q2NmEzMmNkNWEzODY0Zg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-10-31T17:12:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-10-31T17:12:56Z"}, "message": "dwarf2out.c (dwarf_op): New function.\n\n\t* dwarf2out.c (dwarf_op): New function.\n\t(size_of_loc_descr): Handle DW_OP_{implicit_pointer,entry_value},\n\tDW_OP_{const,regval,deref}_type and DW_OP_{convert,reinterpret}.\n\t(output_loc_operands, output_loc_operands_raw): Likewise.\n\t(resolve_args_picking_1, prune_unused_types_walk_loc_descr,\n\tmark_base_types, hash_loc_operands, compare_loc_operands): Likewise.\n\t(resolve_addr_in_expr): Likewise.  Only punt for !dwarf_strict\n\tif dwarf_version < 5.\n\t(convert_descriptor_to_mode): Use dwarf_op (DW_OP_xxx) instead of\n\tDW_OP_GNU_xxx.\n\t(scompare_loc_descriptor, ucompare_loc_descriptor,\n\tminmax_loc_descriptor, typed_binop, mem_loc_descriptor,\n\timplicit_ptr_descriptor, optimize_one_addr_into_implicit_ptr,\n\toptimize_location_into_implicit_ptr): Likewise.  Only punt for\n\t!dwarf_strict if dwarf_version < 5.\n\t(string_cst_pool_decl): Adjust comment.\n\t(non_dwarf_expression): Handle DW_OP_implicit_pointer.\n\nFrom-SVN: r241712", "tree": {"sha": "e831ef37e9dcbd6cf20624cffe497e4f9663410e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e831ef37e9dcbd6cf20624cffe497e4f9663410e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/23157abc1c0c29b975dc311a7d66a32cd5a3864f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23157abc1c0c29b975dc311a7d66a32cd5a3864f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23157abc1c0c29b975dc311a7d66a32cd5a3864f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23157abc1c0c29b975dc311a7d66a32cd5a3864f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9782e1ec0aaf2e578ebaf83fc0fa70d67e0fe939", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9782e1ec0aaf2e578ebaf83fc0fa70d67e0fe939", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9782e1ec0aaf2e578ebaf83fc0fa70d67e0fe939"}], "stats": {"total": 248, "additions": 194, "deletions": 54}, "files": [{"sha": "b7605287cac765012cfdf17e65ea1ba861541916", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23157abc1c0c29b975dc311a7d66a32cd5a3864f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23157abc1c0c29b975dc311a7d66a32cd5a3864f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=23157abc1c0c29b975dc311a7d66a32cd5a3864f", "patch": "@@ -1,5 +1,23 @@\n 2016-10-31  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* dwarf2out.c (dwarf_op): New function.\n+\t(size_of_loc_descr): Handle DW_OP_{implicit_pointer,entry_value},\n+\tDW_OP_{const,regval,deref}_type and DW_OP_{convert,reinterpret}.\n+\t(output_loc_operands, output_loc_operands_raw): Likewise.\n+\t(resolve_args_picking_1, prune_unused_types_walk_loc_descr,\n+\tmark_base_types, hash_loc_operands, compare_loc_operands): Likewise.\n+\t(resolve_addr_in_expr): Likewise.  Only punt for !dwarf_strict\n+\tif dwarf_version < 5.\n+\t(convert_descriptor_to_mode): Use dwarf_op (DW_OP_xxx) instead of\n+\tDW_OP_GNU_xxx.\n+\t(scompare_loc_descriptor, ucompare_loc_descriptor,\n+\tminmax_loc_descriptor, typed_binop, mem_loc_descriptor,\n+\timplicit_ptr_descriptor, optimize_one_addr_into_implicit_ptr,\n+\toptimize_location_into_implicit_ptr): Likewise.  Only punt for\n+\t!dwarf_strict if dwarf_version < 5.\n+\t(string_cst_pool_decl): Adjust comment.\n+\t(non_dwarf_expression): Handle DW_OP_implicit_pointer.\n+\n \t* dwarf2out.h (enum dw_val_class): Add dw_val_class_const_implicit,\n \tdw_val_class_unsigned_const_implicit and dw_val_class_file_implicit.\n \t(struct dw_val_node): Add val_file_implicit field."}, {"sha": "8cb4309dc81627444963cfd7622e4b65d0c159c0", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 176, "deletions": 54, "changes": 230, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/23157abc1c0c29b975dc311a7d66a32cd5a3864f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/23157abc1c0c29b975dc311a7d66a32cd5a3864f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=23157abc1c0c29b975dc311a7d66a32cd5a3864f", "patch": "@@ -1517,6 +1517,54 @@ loc_list_plus_const (dw_loc_list_ref list_head, HOST_WIDE_INT offset)\n #define DWARF_REF_SIZE\t\\\n   (dwarf_version == 2 ? DWARF2_ADDR_SIZE : DWARF_OFFSET_SIZE)\n \n+/* Utility inline function for construction of ops that were GNU extension\n+   before DWARF 5.  */\n+static inline enum dwarf_location_atom\n+dwarf_op (enum dwarf_location_atom op)\n+{\n+  switch (op)\n+    {\n+    case DW_OP_implicit_pointer:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_implicit_pointer;\n+      break;\n+\n+    case DW_OP_entry_value:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_entry_value;\n+      break;\n+\n+    case DW_OP_const_type:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_const_type;\n+      break;\n+\n+    case DW_OP_regval_type:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_regval_type;\n+      break;\n+\n+    case DW_OP_deref_type:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_deref_type;\n+      break;\n+\n+    case DW_OP_convert:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_convert;\n+      break;\n+\n+    case DW_OP_reinterpret:\n+      if (dwarf_version < 5)\n+\treturn DW_OP_GNU_reinterpret;\n+      break;\n+\n+    default:\n+      break;\n+    }\n+  return op;\n+}\n+\n static unsigned long int get_base_type_offset (dw_die_ref);\n \n /* Return the size of a location descriptor.  */\n@@ -1636,15 +1684,18 @@ size_of_loc_descr (dw_loc_descr_ref loc)\n       size += size_of_uleb128 (loc->dw_loc_oprnd1.v.val_unsigned)\n \t      + loc->dw_loc_oprnd1.v.val_unsigned;\n       break;\n+    case DW_OP_implicit_pointer:\n     case DW_OP_GNU_implicit_pointer:\n       size += DWARF_REF_SIZE + size_of_sleb128 (loc->dw_loc_oprnd2.v.val_int);\n       break;\n+    case DW_OP_entry_value:\n     case DW_OP_GNU_entry_value:\n       {\n \tunsigned long op_size = size_of_locs (loc->dw_loc_oprnd1.v.val_loc);\n \tsize += size_of_uleb128 (op_size) + op_size;\n \tbreak;\n       }\n+    case DW_OP_const_type:\n     case DW_OP_GNU_const_type:\n       {\n \tunsigned long o\n@@ -1671,6 +1722,7 @@ size_of_loc_descr (dw_loc_descr_ref loc)\n \t  }\n \tbreak;\n       }\n+    case DW_OP_regval_type:\n     case DW_OP_GNU_regval_type:\n       {\n \tunsigned long o\n@@ -1679,13 +1731,16 @@ size_of_loc_descr (dw_loc_descr_ref loc)\n \t\t+ size_of_uleb128 (o);\n       }\n       break;\n+    case DW_OP_deref_type:\n     case DW_OP_GNU_deref_type:\n       {\n \tunsigned long o\n \t  = get_base_type_offset (loc->dw_loc_oprnd2.v.val_die_ref.die);\n \tsize += 1 + size_of_uleb128 (o);\n       }\n       break;\n+    case DW_OP_convert:\n+    case DW_OP_reinterpret:\n     case DW_OP_GNU_convert:\n     case DW_OP_GNU_reinterpret:\n       if (loc->dw_loc_oprnd1.val_class == dw_val_class_unsigned_const)\n@@ -2046,6 +2101,7 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n       }\n       break;\n \n+    case DW_OP_implicit_pointer:\n     case DW_OP_GNU_implicit_pointer:\n       {\n \tchar label[MAX_ARTIFICIAL_LABEL_BYTES\n@@ -2057,11 +2113,13 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n       }\n       break;\n \n+    case DW_OP_entry_value:\n     case DW_OP_GNU_entry_value:\n       dw2_asm_output_data_uleb128 (size_of_locs (val1->v.val_loc), NULL);\n       output_loc_sequence (val1->v.val_loc, for_eh_or_skip);\n       break;\n \n+    case DW_OP_const_type:\n     case DW_OP_GNU_const_type:\n       {\n \tunsigned long o = get_base_type_offset (val1->v.val_die_ref.die), l;\n@@ -2135,6 +2193,7 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n \t  }\n       }\n       break;\n+    case DW_OP_regval_type:\n     case DW_OP_GNU_regval_type:\n       {\n \tunsigned r = val1->v.val_unsigned;\n@@ -2150,6 +2209,7 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n \tdw2_asm_output_data_uleb128 (o, NULL);\n       }\n       break;\n+    case DW_OP_deref_type:\n     case DW_OP_GNU_deref_type:\n       {\n \tunsigned long o = get_base_type_offset (val2->v.val_die_ref.die);\n@@ -2158,6 +2218,8 @@ output_loc_operands (dw_loc_descr_ref loc, int for_eh_or_skip)\n \tdw2_asm_output_data_uleb128 (o, NULL);\n       }\n       break;\n+    case DW_OP_convert:\n+    case DW_OP_reinterpret:\n     case DW_OP_GNU_convert:\n     case DW_OP_GNU_reinterpret:\n       if (loc->dw_loc_oprnd1.val_class == dw_val_class_unsigned_const)\n@@ -2356,6 +2418,13 @@ output_loc_operands_raw (dw_loc_descr_ref loc)\n       }\n       break;\n \n+    case DW_OP_implicit_pointer:\n+    case DW_OP_entry_value:\n+    case DW_OP_const_type:\n+    case DW_OP_regval_type:\n+    case DW_OP_deref_type:\n+    case DW_OP_convert:\n+    case DW_OP_reinterpret:\n     case DW_OP_GNU_implicit_pointer:\n     case DW_OP_GNU_entry_value:\n     case DW_OP_GNU_const_type:\n@@ -12815,13 +12884,13 @@ convert_descriptor_to_mode (machine_mode mode, dw_loc_descr_ref op)\n \n   if (GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE)\n     {\n-      add_loc_descr (&op, new_loc_descr (DW_OP_GNU_convert, 0, 0));\n+      add_loc_descr (&op, new_loc_descr (dwarf_op (DW_OP_convert), 0, 0));\n       return op;\n     }\n   type_die = base_type_for_mode (outer_mode, 1);\n   if (type_die == NULL)\n     return NULL;\n-  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -12862,6 +12931,7 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n     return NULL;\n \n   if (dwarf_strict\n+      && dwarf_version < 5\n       && (!SCALAR_INT_MODE_P (op_mode)\n \t  || GET_MODE_SIZE (op_mode) > DWARF2_ADDR_SIZE))\n     return NULL;\n@@ -12885,12 +12955,12 @@ scompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n \n       if (type_die == NULL)\n \treturn NULL;\n-      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n       add_loc_descr (&op0, cvt);\n-      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -12972,7 +13042,9 @@ ucompare_loc_descriptor (enum dwarf_location_atom op, rtx rtl,\n   if (!SCALAR_INT_MODE_P (op_mode))\n     return NULL;\n \n-  if (dwarf_strict && GET_MODE_SIZE (op_mode) > DWARF2_ADDR_SIZE)\n+  if (dwarf_strict\n+      && dwarf_version < 5\n+      && GET_MODE_SIZE (op_mode) > DWARF2_ADDR_SIZE)\n     return NULL;\n \n   op0 = mem_loc_descriptor (XEXP (rtl, 0), op_mode, mem_mode,\n@@ -13036,6 +13108,7 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n   dw_loc_descr_ref bra_node, drop_node;\n \n   if (dwarf_strict\n+      && dwarf_version < 5\n       && (!SCALAR_INT_MODE_P (mode)\n \t  || GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE))\n     return NULL;\n@@ -13085,12 +13158,12 @@ minmax_loc_descriptor (rtx rtl, machine_mode mode,\n       dw_loc_descr_ref cvt;\n       if (type_die == NULL)\n \treturn NULL;\n-      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n       add_loc_descr (&op0, cvt);\n-      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n       cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n       cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13136,12 +13209,12 @@ typed_binop (enum dwarf_location_atom op, rtx rtl, dw_die_ref type_die,\n \t\t\t    VAR_INIT_STATUS_INITIALIZED);\n   if (op0 == NULL || op1 == NULL)\n     return NULL;\n-  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n   add_loc_descr (&op0, cvt);\n-  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n   cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n   cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n   cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13609,7 +13682,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t\t       mem_mode, initialized);\n \t  break;\n \t}\n-      if (dwarf_strict)\n+      if (dwarf_strict && dwarf_version < 5)\n \tbreak;\n       if (GET_MODE_SIZE (mode) > GET_MODE_SIZE (GET_MODE (inner)))\n \tbreak;\n@@ -13635,9 +13708,9 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t    }\n \t  if (GET_MODE_SIZE (mode)\n \t      != GET_MODE_SIZE (GET_MODE (inner)))\n-\t    cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t    cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t  else\n-\t    cvt = new_loc_descr (DW_OP_GNU_reinterpret, 0, 0);\n+\t    cvt = new_loc_descr (dwarf_op (DW_OP_reinterpret), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13646,7 +13719,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t      && GET_MODE_SIZE (mode) <= DWARF2_ADDR_SIZE)\n \t    {\n \t      /* Convert it to untyped afterwards.  */\n-\t      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t      add_loc_descr (&mem_loc_result, cvt);\n \t    }\n \t}\n@@ -13665,7 +13738,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  dw_die_ref type_die;\n \t  unsigned int dbx_regnum;\n \n-\t  if (dwarf_strict)\n+\t  if (dwarf_strict && dwarf_version < 5)\n \t    break;\n \t  if (REGNO (rtl) > FIRST_PSEUDO_REGISTER)\n \t    break;\n@@ -13676,7 +13749,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  dbx_regnum = dbx_reg_number (rtl);\n \t  if (dbx_regnum == IGNORED_DWARF_REGNUM)\n \t    break;\n-          mem_loc_result = new_loc_descr (DW_OP_GNU_regval_type,\n+\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_regval_type),\n \t\t\t\t\t  dbx_regnum, 0);\n \t  mem_loc_result->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n@@ -13748,7 +13821,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  add_loc_descr (&mem_loc_result, int_loc_descriptor (shift));\n \t  add_loc_descr (&mem_loc_result, new_loc_descr (op, 0, 0));\n \t}\n-      else if (!dwarf_strict)\n+      else if (!dwarf_strict || dwarf_version >= 5)\n \t{\n \t  dw_die_ref type_die1, type_die2;\n \t  dw_loc_descr_ref cvt;\n@@ -13761,12 +13834,12 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  if (type_die2 == NULL)\n \t    break;\n \t  mem_loc_result = op0;\n-\t  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die1;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  add_loc_descr (&mem_loc_result, cvt);\n-\t  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die2;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -13798,13 +13871,13 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t      dw_die_ref type_die;\n \t      dw_loc_descr_ref deref;\n \n-\t      if (dwarf_strict)\n+\t      if (dwarf_strict && dwarf_version < 5)\n \t\treturn NULL;\n \t      type_die\n \t\t= base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t      if (type_die == NULL)\n \t\treturn NULL;\n-\t      deref = new_loc_descr (DW_OP_GNU_deref_type,\n+\t      deref = new_loc_descr (dwarf_op (DW_OP_deref_type),\n \t\t\t\t     GET_MODE_SIZE (mode), 0);\n \t      deref->dw_loc_oprnd2.val_class = dw_val_class_die_ref;\n \t      deref->dw_loc_oprnd2.v.val_die_ref.die = type_die;\n@@ -13875,7 +13948,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       return 0;\n \n     case ENTRY_VALUE:\n-      if (dwarf_strict)\n+      if (dwarf_strict && dwarf_version < 5)\n \treturn NULL;\n       if (REG_P (ENTRY_VALUE_EXP (rtl)))\n \t{\n@@ -13904,7 +13977,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \tgcc_unreachable ();\n       if (op0 == NULL)\n \treturn NULL;\n-      mem_loc_result = new_loc_descr (DW_OP_GNU_entry_value, 0, 0);\n+      mem_loc_result = new_loc_descr (dwarf_op (DW_OP_entry_value), 0, 0);\n       mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_loc;\n       mem_loc_result->dw_loc_oprnd1.v.val_loc = op0;\n       break;\n@@ -13975,7 +14048,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       goto do_binop;\n \n     case DIV:\n-      if (!dwarf_strict\n+      if ((!dwarf_strict || dwarf_version >= 5)\n \t  && SCALAR_INT_MODE_P (mode)\n \t  && GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE)\n \t{\n@@ -14053,7 +14126,8 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case MOD:\n-      if (GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE && !dwarf_strict)\n+      if (GET_MODE_SIZE (mode) > DWARF2_ADDR_SIZE\n+\t  && (!dwarf_strict || dwarf_version >= 5))\n \t{\n \t  mem_loc_result = typed_binop (DW_OP_mod, rtl,\n \t\t\t\t\tbase_type_for_mode (mode, 0),\n@@ -14079,7 +14153,8 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case UDIV:\n-      if (!dwarf_strict && SCALAR_INT_MODE_P (mode))\n+      if ((!dwarf_strict || dwarf_version >= 5)\n+\t  && SCALAR_INT_MODE_P (mode))\n \t{\n \t  if (GET_MODE_CLASS (mode) > DWARF2_ADDR_SIZE)\n \t    {\n@@ -14127,7 +14202,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  mem_loc_result = int_loc_descriptor (INTVAL (rtl));\n \t  break;\n \t}\n-      if (!dwarf_strict\n+      if ((!dwarf_strict || dwarf_version >= 5)\n \t  && (GET_MODE_BITSIZE (mode) == HOST_BITS_PER_WIDE_INT\n \t      || GET_MODE_BITSIZE (mode) == HOST_BITS_PER_DOUBLE_INT))\n \t{\n@@ -14140,20 +14215,20 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  if (INTVAL (rtl) >= 0\n \t      && amode != BLKmode\n \t      && trunc_int_for_mode (INTVAL (rtl), amode) == INTVAL (rtl)\n-\t      /* const DW_OP_GNU_convert <XXX> vs.\n-\t\t DW_OP_GNU_const_type <XXX, 1, const>.  */\n+\t      /* const DW_OP_convert <XXX> vs.\n+\t\t DW_OP_const_type <XXX, 1, const>.  */\n \t      && size_of_int_loc_descriptor (INTVAL (rtl)) + 1 + 1\n \t\t < (unsigned long) 1 + 1 + 1 + GET_MODE_SIZE (mode))\n \t    {\n \t      mem_loc_result = int_loc_descriptor (INTVAL (rtl));\n-\t      op0 = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t      op0 = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t      op0->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      op0->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t      op0->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t      add_loc_descr (&mem_loc_result, op0);\n \t      return mem_loc_result;\n \t    }\n-\t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0,\n+\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0,\n \t\t\t\t\t  INTVAL (rtl));\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n@@ -14171,7 +14246,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case CONST_DOUBLE:\n-      if (!dwarf_strict)\n+      if (!dwarf_strict || dwarf_version >= 5)\n \t{\n \t  dw_die_ref type_die;\n \n@@ -14190,7 +14265,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n-\t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0, 0);\n+\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0, 0);\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14218,14 +14293,14 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n       break;\n \n     case CONST_WIDE_INT:\n-      if (!dwarf_strict)\n+      if (!dwarf_strict || dwarf_version >= 5)\n \t{\n \t  dw_die_ref type_die;\n \n \t  type_die = base_type_for_mode (mode, SCALAR_INT_MODE_P (mode));\n \t  if (type_die == NULL)\n \t    return NULL;\n-\t  mem_loc_result = new_loc_descr (DW_OP_GNU_const_type, 0, 0);\n+\t  mem_loc_result = new_loc_descr (dwarf_op (DW_OP_const_type), 0, 0);\n \t  mem_loc_result->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  mem_loc_result->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14361,7 +14436,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n     case UNSIGNED_FLOAT:\n     case FIX:\n     case UNSIGNED_FIX:\n-      if (!dwarf_strict)\n+      if (!dwarf_strict || dwarf_version >= 5)\n \t{\n \t  dw_die_ref type_die;\n \t  dw_loc_descr_ref cvt;\n@@ -14379,7 +14454,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t\t\t\t\t     GET_CODE (rtl) == UNSIGNED_FLOAT);\n \t      if (type_die == NULL)\n \t\tbreak;\n-\t      cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t      cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t      cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t      cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14388,7 +14463,7 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t  type_die = base_type_for_mode (mode, GET_CODE (rtl) == UNSIGNED_FIX);\n \t  if (type_die == NULL)\n \t    break;\n-\t  cvt = new_loc_descr (DW_OP_GNU_convert, 0, 0);\n+\t  cvt = new_loc_descr (dwarf_op (DW_OP_convert), 0, 0);\n \t  cvt->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.die = type_die;\n \t  cvt->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -14550,7 +14625,7 @@ concatn_loc_descriptor (rtx concatn, enum var_init_status initialized)\n   return cc_loc_result;\n }\n \n-/* Helper function for loc_descriptor.  Return DW_OP_GNU_implicit_pointer\n+/* Helper function for loc_descriptor.  Return DW_OP_implicit_pointer\n    for DEBUG_IMPLICIT_PTR RTL.  */\n \n static dw_loc_descr_ref\n@@ -14559,13 +14634,13 @@ implicit_ptr_descriptor (rtx rtl, HOST_WIDE_INT offset)\n   dw_loc_descr_ref ret;\n   dw_die_ref ref;\n \n-  if (dwarf_strict)\n+  if (dwarf_strict && dwarf_version < 5)\n     return NULL;\n   gcc_assert (TREE_CODE (DEBUG_IMPLICIT_PTR_DECL (rtl)) == VAR_DECL\n \t      || TREE_CODE (DEBUG_IMPLICIT_PTR_DECL (rtl)) == PARM_DECL\n \t      || TREE_CODE (DEBUG_IMPLICIT_PTR_DECL (rtl)) == RESULT_DECL);\n   ref = lookup_decl_die (DEBUG_IMPLICIT_PTR_DECL (rtl));\n-  ret = new_loc_descr (DW_OP_GNU_implicit_pointer, 0, offset);\n+  ret = new_loc_descr (dwarf_op (DW_OP_implicit_pointer), 0, offset);\n   ret->dw_loc_oprnd2.val_class = dw_val_class_const;\n   if (ref)\n     {\n@@ -15823,6 +15898,13 @@ resolve_args_picking_1 (dw_loc_descr_ref loc, unsigned initial_frame_offset,\n \t    break;\n \t  }\n \n+\tcase DW_OP_implicit_pointer:\n+\tcase DW_OP_entry_value:\n+\tcase DW_OP_const_type:\n+\tcase DW_OP_regval_type:\n+\tcase DW_OP_deref_type:\n+\tcase DW_OP_convert:\n+\tcase DW_OP_reinterpret:\n \tcase DW_OP_GNU_push_tls_address:\n \tcase DW_OP_GNU_uninit:\n \tcase DW_OP_GNU_encoded_addr:\n@@ -26198,6 +26280,9 @@ prune_unused_types_walk_loc_descr (dw_loc_descr_ref loc)\n   for (; loc != NULL; loc = loc->dw_loc_next)\n     switch (loc->dw_loc_opc)\n       {\n+      case DW_OP_implicit_pointer:\n+      case DW_OP_convert:\n+      case DW_OP_reinterpret:\n       case DW_OP_GNU_implicit_pointer:\n       case DW_OP_GNU_convert:\n       case DW_OP_GNU_reinterpret:\n@@ -26207,16 +26292,20 @@ prune_unused_types_walk_loc_descr (dw_loc_descr_ref loc)\n       case DW_OP_call2:\n       case DW_OP_call4:\n       case DW_OP_call_ref:\n+      case DW_OP_const_type:\n       case DW_OP_GNU_const_type:\n       case DW_OP_GNU_parameter_ref:\n \tgcc_assert (loc->dw_loc_oprnd1.val_class == dw_val_class_die_ref);\n \tprune_unused_types_mark (loc->dw_loc_oprnd1.v.val_die_ref.die, 1);\n \tbreak;\n+      case DW_OP_regval_type:\n+      case DW_OP_deref_type:\n       case DW_OP_GNU_regval_type:\n       case DW_OP_GNU_deref_type:\n \tgcc_assert (loc->dw_loc_oprnd2.val_class == dw_val_class_die_ref);\n \tprune_unused_types_mark (loc->dw_loc_oprnd2.v.val_die_ref.die, 1);\n \tbreak;\n+      case DW_OP_entry_value:\n       case DW_OP_GNU_entry_value:\n \tgcc_assert (loc->dw_loc_oprnd1.val_class == dw_val_class_loc);\n \tprune_unused_types_walk_loc_descr (loc->dw_loc_oprnd1.v.val_loc);\n@@ -26678,18 +26767,24 @@ mark_base_types (dw_loc_descr_ref loc)\n     {\n       switch (loc->dw_loc_opc)\n \t{\n+\tcase DW_OP_regval_type:\n+\tcase DW_OP_deref_type:\n \tcase DW_OP_GNU_regval_type:\n \tcase DW_OP_GNU_deref_type:\n \t  base_type = loc->dw_loc_oprnd2.v.val_die_ref.die;\n \t  break;\n+\tcase DW_OP_convert:\n+\tcase DW_OP_reinterpret:\n \tcase DW_OP_GNU_convert:\n \tcase DW_OP_GNU_reinterpret:\n \t  if (loc->dw_loc_oprnd1.val_class == dw_val_class_unsigned_const)\n \t    continue;\n \t  /* FALLTHRU */\n+\tcase DW_OP_const_type:\n \tcase DW_OP_GNU_const_type:\n \t  base_type = loc->dw_loc_oprnd1.v.val_die_ref.die;\n \t  break;\n+\tcase DW_OP_entry_value:\n \tcase DW_OP_GNU_entry_value:\n \t  mark_base_types (loc->dw_loc_oprnd1.v.val_loc);\n \t  continue;\n@@ -26834,7 +26929,7 @@ resolve_one_addr (rtx *addr)\n \n /* For STRING_CST, return SYMBOL_REF of its constant pool entry,\n    if possible, and create DW_TAG_dwarf_procedure that can be referenced\n-   from DW_OP_GNU_implicit_pointer if the string hasn't been seen yet.  */\n+   from DW_OP_implicit_pointer if the string hasn't been seen yet.  */\n \n static rtx\n string_cst_pool_decl (tree t)\n@@ -26876,7 +26971,7 @@ string_cst_pool_decl (tree t)\n    a DW_OP_addr followed by DW_OP_stack_value, either at the start\n    of exprloc or after DW_OP_{,bit_}piece, and val_addr can't be\n    resolved.  Replace it (both DW_OP_addr and DW_OP_stack_value)\n-   with DW_OP_GNU_implicit_pointer if possible\n+   with DW_OP_implicit_pointer if possible\n    and return true, if unsuccessful, return false.  */\n \n static bool\n@@ -26915,7 +27010,7 @@ optimize_one_addr_into_implicit_ptr (dw_loc_descr_ref loc)\n \t  if (ref && (get_AT (ref, DW_AT_location)\n \t\t      || get_AT (ref, DW_AT_const_value)))\n \t    {\n-\t      loc->dw_loc_opc = DW_OP_GNU_implicit_pointer;\n+\t      loc->dw_loc_opc = dwarf_op (DW_OP_implicit_pointer);\n \t      loc->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n \t      loc->dw_loc_oprnd1.val_entry = NULL;\n \t      loc->dw_loc_oprnd1.v.val_die_ref.die = ref;\n@@ -26948,7 +27043,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \t\t || prev->dw_loc_opc == DW_OP_bit_piece)\n \t\t&& loc->dw_loc_next\n \t\t&& loc->dw_loc_next->dw_loc_opc == DW_OP_stack_value\n-\t\t&& !dwarf_strict\n+\t\t&& (!dwarf_strict || dwarf_version >= 5)\n \t\t&& optimize_one_addr_into_implicit_ptr (loc))\n \t      break;\n \t    return false;\n@@ -26991,6 +27086,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \t    && !resolve_one_addr (&loc->dw_loc_oprnd2.v.val_addr))\n \t  return false;\n \tbreak;\n+      case DW_OP_implicit_pointer:\n       case DW_OP_GNU_implicit_pointer:\n       case DW_OP_GNU_parameter_ref:\n \tif (loc->dw_loc_oprnd1.val_class == dw_val_class_decl_ref)\n@@ -27004,17 +27100,25 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \t    loc->dw_loc_oprnd1.v.val_die_ref.external = 0;\n \t  }\n \tbreak;\n+      case DW_OP_const_type:\n+      case DW_OP_regval_type:\n+      case DW_OP_deref_type:\n+      case DW_OP_convert:\n+      case DW_OP_reinterpret:\n       case DW_OP_GNU_const_type:\n       case DW_OP_GNU_regval_type:\n       case DW_OP_GNU_deref_type:\n       case DW_OP_GNU_convert:\n       case DW_OP_GNU_reinterpret:\n \twhile (loc->dw_loc_next\n-\t       && loc->dw_loc_next->dw_loc_opc == DW_OP_GNU_convert)\n+\t       && (loc->dw_loc_next->dw_loc_opc == DW_OP_convert\n+\t\t   || loc->dw_loc_next->dw_loc_opc == DW_OP_GNU_convert))\n \t  {\n \t    dw_die_ref base1, base2;\n \t    unsigned enc1, enc2, size1, size2;\n-\t    if (loc->dw_loc_opc == DW_OP_GNU_regval_type\n+\t    if (loc->dw_loc_opc == DW_OP_regval_type\n+\t\t|| loc->dw_loc_opc == DW_OP_deref_type\n+\t\t|| loc->dw_loc_opc == DW_OP_GNU_regval_type\n \t\t|| loc->dw_loc_opc == DW_OP_GNU_deref_type)\n \t      base1 = loc->dw_loc_oprnd2.v.val_die_ref.die;\n \t    else if (loc->dw_loc_oprnd1.val_class\n@@ -27038,17 +27142,19 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n \t\t     && loc != keep)\n \t\t    || enc1 == enc2))\n \t      {\n-\t\t/* Optimize away next DW_OP_GNU_convert after\n+\t\t/* Optimize away next DW_OP_convert after\n \t\t   adjusting LOC's base type die reference.  */\n-\t\tif (loc->dw_loc_opc == DW_OP_GNU_regval_type\n+\t\tif (loc->dw_loc_opc == DW_OP_regval_type\n+\t\t    || loc->dw_loc_opc == DW_OP_deref_type\n+\t\t    || loc->dw_loc_opc == DW_OP_GNU_regval_type\n \t\t    || loc->dw_loc_opc == DW_OP_GNU_deref_type)\n \t\t  loc->dw_loc_oprnd2.v.val_die_ref.die = base2;\n \t\telse\n \t\t  loc->dw_loc_oprnd1.v.val_die_ref.die = base2;\n \t\tloc->dw_loc_next = loc->dw_loc_next->dw_loc_next;\n \t\tcontinue;\n \t      }\n-\t    /* Don't change integer DW_OP_GNU_convert after e.g. floating\n+\t    /* Don't change integer DW_OP_convert after e.g. floating\n \t       point typed stack entry.  */\n \t    else if (enc1 != DW_ATE_unsigned && enc1 != DW_ATE_signed)\n \t      keep = loc->dw_loc_next;\n@@ -27065,7 +27171,7 @@ resolve_addr_in_expr (dw_loc_descr_ref loc)\n    DW_OP_addr alone, which referred to DECL in DW_OP_addr's operand\n    and DW_OP_addr couldn't be resolved.  resolve_addr has already\n    removed the DW_AT_location attribute.  This function attempts to\n-   add a new DW_AT_location attribute with DW_OP_GNU_implicit_pointer\n+   add a new DW_AT_location attribute with DW_OP_implicit_pointer\n    to it or DW_AT_const_value attribute, if possible.  */\n \n static void\n@@ -27087,13 +27193,13 @@ optimize_location_into_implicit_ptr (dw_die_ref die, tree decl)\n      DW_AT_const_value instead.  */\n   if (tree_add_const_value_attribute (die, init))\n     return;\n-  if (dwarf_strict)\n+  if (dwarf_strict && dwarf_version < 5)\n     return;\n   /* If init is ADDR_EXPR or POINTER_PLUS_EXPR of ADDR_EXPR,\n      and ADDR_EXPR refers to a decl that has DW_AT_location or\n      DW_AT_const_value (but isn't addressable, otherwise\n      resolving the original DW_OP_addr wouldn't fail), see if\n-     we can add DW_OP_GNU_implicit_pointer.  */\n+     we can add DW_OP_implicit_pointer.  */\n   STRIP_NOPS (init);\n   if (TREE_CODE (init) == POINTER_PLUS_EXPR\n       && tree_fits_shwi_p (TREE_OPERAND (init, 1)))\n@@ -27127,7 +27233,7 @@ optimize_location_into_implicit_ptr (dw_die_ref die, tree decl)\n \t  || (!get_AT (ref, DW_AT_location)\n \t      && !get_AT (ref, DW_AT_const_value)))\n \treturn;\n-      l = new_loc_descr (DW_OP_GNU_implicit_pointer, 0, offset);\n+      l = new_loc_descr (dwarf_op (DW_OP_implicit_pointer), 0, offset);\n       l->dw_loc_oprnd1.val_class = dw_val_class_die_ref;\n       l->dw_loc_oprnd1.v.val_die_ref.die = ref;\n       l->dw_loc_oprnd1.v.val_die_ref.external = 0;\n@@ -27150,6 +27256,7 @@ non_dwarf_expression (dw_loc_descr_ref l)\n \tcase DW_OP_regx:\n \tcase DW_OP_implicit_value:\n \tcase DW_OP_stack_value:\n+\tcase DW_OP_implicit_pointer:\n \tcase DW_OP_GNU_implicit_pointer:\n \tcase DW_OP_GNU_parameter_ref:\n \tcase DW_OP_piece:\n@@ -27639,12 +27746,16 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n         inchash::add_rtx (val1->val_entry->addr.rtl, hstate);\n       }\n       break;\n+    case DW_OP_implicit_pointer:\n     case DW_OP_GNU_implicit_pointer:\n       hstate.add_int (val2->v.val_int);\n       break;\n+    case DW_OP_entry_value:\n     case DW_OP_GNU_entry_value:\n       hstate.add_object (val1->v.val_loc);\n       break;\n+    case DW_OP_regval_type:\n+    case DW_OP_deref_type:\n     case DW_OP_GNU_regval_type:\n     case DW_OP_GNU_deref_type:\n       {\n@@ -27657,6 +27768,8 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n \thstate.add_object (encoding);\n       }\n       break;\n+    case DW_OP_convert:\n+    case DW_OP_reinterpret:\n     case DW_OP_GNU_convert:\n     case DW_OP_GNU_reinterpret:\n       if (val1->val_class == dw_val_class_unsigned_const)\n@@ -27665,6 +27778,7 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n \t  break;\n \t}\n       /* FALLTHRU */\n+    case DW_OP_const_type:\n     case DW_OP_GNU_const_type:\n       {\n \tunsigned int byte_size\n@@ -27673,7 +27787,8 @@ hash_loc_operands (dw_loc_descr_ref loc, inchash::hash &hstate)\n \t  = get_AT_unsigned (val1->v.val_die_ref.die, DW_AT_encoding);\n \thstate.add_object (byte_size);\n \thstate.add_object (encoding);\n-\tif (loc->dw_loc_opc != DW_OP_GNU_const_type)\n+\tif (loc->dw_loc_opc != DW_OP_const_type\n+\t    && loc->dw_loc_opc != DW_OP_GNU_const_type)\n \t  break;\n \thstate.add_object (val2->val_class);\n \tswitch (val2->val_class)\n@@ -27866,13 +27981,16 @@ compare_loc_operands (dw_loc_descr_ref x, dw_loc_descr_ref y)\n         rtx ay1 = valy1->val_entry->addr.rtl;\n         return rtx_equal_p (ax1, ay1);\n       }\n+    case DW_OP_implicit_pointer:\n     case DW_OP_GNU_implicit_pointer:\n       return valx1->val_class == dw_val_class_die_ref\n \t     && valx1->val_class == valy1->val_class\n \t     && valx1->v.val_die_ref.die == valy1->v.val_die_ref.die\n \t     && valx2->v.val_int == valy2->v.val_int;\n+    case DW_OP_entry_value:\n     case DW_OP_GNU_entry_value:\n       return compare_loc_operands (valx1->v.val_loc, valy1->v.val_loc);\n+    case DW_OP_const_type:\n     case DW_OP_GNU_const_type:\n       if (valx1->v.val_die_ref.die != valy1->v.val_die_ref.die\n \t  || valx2->val_class != valy2->val_class)\n@@ -27895,10 +28013,14 @@ compare_loc_operands (dw_loc_descr_ref x, dw_loc_descr_ref y)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+    case DW_OP_regval_type:\n+    case DW_OP_deref_type:\n     case DW_OP_GNU_regval_type:\n     case DW_OP_GNU_deref_type:\n       return valx1->v.val_int == valy1->v.val_int\n \t     && valx2->v.val_die_ref.die == valy2->v.val_die_ref.die;\n+    case DW_OP_convert:\n+    case DW_OP_reinterpret:\n     case DW_OP_GNU_convert:\n     case DW_OP_GNU_reinterpret:\n       if (valx1->val_class != valy1->val_class)"}]}