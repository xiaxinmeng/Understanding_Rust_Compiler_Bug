{"sha": "6d0a3f67bb68552229f14f90dd42254de5d17016", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQwYTNmNjdiYjY4NTUyMjI5ZjE0ZjkwZGQ0MjI1NGRlNWQxNzAxNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2001-09-06T08:59:39Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2001-09-06T08:59:39Z"}, "message": "Remove TYPE_NONCOPIED_PARTS.\n\n\t* tree.h (TYPE_NONCOPIED_PARTS): Remove.\n\t(struct tree_type): Remove noncopied_parts.\n\t* c-tree.h (TYPE_ACTUAL_ARG_TYPES): Map onto TYPE_BINFO.\n\t* expr.c (save_noncopied_parts, init_noncopied_parts): Remove.\n\t(fixed_type_p): Remove.\n\t(expand_expr, INIT_EXPR): Don't deal with noncopied parts.\n\t(expand_expr, MODIFY_EXPR): Likewise.\n\t* ggc-common.c (ggc_mark_trees): Remove TYPE_NONCOPIED_PARTS.\n\t* doc/c-tree.texi: Remove TYPE_NONCOPIED_PARTS FIXME.\ncp:\n\tRemove TYPE_NONCOPIED_PARTS.\n\t* cp-tree.h (CLASSTYPE_INLINE_FRIENDS): Map onto\n\tCLASSTYPE_PURE_VIRTUALS.\n\t(TYPE_RAISES_EXCEPTIONS): Map onto TYPE_BINFO.\n\t* class.c (duplicate_tag_error): Remove TYPE_NONCOPIED_PARTS.\n\t(layout_class_type): Don't call fixup_inlin_methods here ...\n\t(finish_struct_1): ... call it here.\n\nFrom-SVN: r45434", "tree": {"sha": "5393c1bea7b5636f5e0a86e7bef9e43ca5004b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5393c1bea7b5636f5e0a86e7bef9e43ca5004b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d0a3f67bb68552229f14f90dd42254de5d17016", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0a3f67bb68552229f14f90dd42254de5d17016", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d0a3f67bb68552229f14f90dd42254de5d17016", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d0a3f67bb68552229f14f90dd42254de5d17016/comments", "author": null, "committer": null, "parents": [{"sha": "baff6e5433eb6009dd53a03020ce223795721d7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baff6e5433eb6009dd53a03020ce223795721d7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baff6e5433eb6009dd53a03020ce223795721d7e"}], "stats": {"total": 162, "additions": 36, "deletions": 126}, "files": [{"sha": "85512bfe6dd1947498ebcbb26cd8776e262c9696", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -1,3 +1,16 @@\n+2001-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRemove TYPE_NONCOPIED_PARTS.\n+\t* tree.h (TYPE_NONCOPIED_PARTS): Remove.\n+\t(struct tree_type): Remove noncopied_parts.\n+\t* c-tree.h (TYPE_ACTUAL_ARG_TYPES): Map onto TYPE_BINFO.\n+\t* expr.c (save_noncopied_parts, init_noncopied_parts): Remove.\n+\t(fixed_type_p): Remove.\n+\t(expand_expr, INIT_EXPR): Don't deal with noncopied parts.\n+\t(expand_expr, MODIFY_EXPR): Likewise.\n+\t* ggc-common.c (ggc_mark_trees): Remove TYPE_NONCOPIED_PARTS.\n+\t* doc/c-tree.texi: Remove TYPE_NONCOPIED_PARTS FIXME.\n+\n 2001-09-06  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (mask_operand): Use signed vars to avoid"}, {"sha": "6f1833af414d9431933a1eeaf86aec3c348b0fbf", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -135,7 +135,7 @@ struct lang_type\n /* For FUNCTION_TYPE, a hidden list of types of arguments.  The same as\n    TYPE_ARG_TYPES for functions with prototypes, but created for functions\n    without prototypes.  */\n-#define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_NONCOPIED_PARTS (NODE)\n+#define TYPE_ACTUAL_ARG_TYPES(NODE) TYPE_BINFO (NODE)\n \n \f\n /* in c-lang.c and objc-act.c */"}, {"sha": "be43b1f50a698bb2e385ef0ddb992fcdca268f81", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -1,3 +1,13 @@\n+2001-09-06  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tRemove TYPE_NONCOPIED_PARTS.\n+\t* cp-tree.h (CLASSTYPE_INLINE_FRIENDS): Map onto\n+\tCLASSTYPE_PURE_VIRTUALS.\n+\t(TYPE_RAISES_EXCEPTIONS): Map onto TYPE_BINFO.\n+\t* class.c (duplicate_tag_error): Remove TYPE_NONCOPIED_PARTS.\n+\t(layout_class_type): Don't call fixup_inlin_methods here ...\n+\t(finish_struct_1): ... call it here.\n+\n 2001-09-04  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (duplicate_decls): Remove code deadling with"}, {"sha": "03aa7f71f5bc68fe5608f672bae20cc254b0f7b9", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -2189,7 +2189,6 @@ duplicate_tag_error (t)\n   TYPE_METHODS (t) = NULL_TREE;\n   TYPE_VFIELD (t) = NULL_TREE;\n   TYPE_CONTEXT (t) = NULL_TREE;\n-  TYPE_NONCOPIED_PARTS (t) = NULL_TREE;\n   \n   /* Clear TYPE_LANG_FLAGS -- those in TYPE_LANG_SPECIFIC are cleared above.  */\n   TYPE_LANG_FLAG_0 (t) = 0;\n@@ -4866,10 +4865,6 @@ layout_class_type (t, empty_p, vfuns_p,\n   if (build_base_fields (rli, empty_p, empty_base_offsets, t))\n     CLASSTYPE_NEARLY_EMPTY_P (t) = 0;\n   \n-  /* CLASSTYPE_INLINE_FRIENDS is really TYPE_NONCOPIED_PARTS.  Thus,\n-     we have to save this before we zap TYPE_NONCOPIED_PARTS.  */\n-  fixup_inline_methods (t);\n-\n   /* Layout the non-static data members.  */\n   for (field = non_static_data_members; field; field = TREE_CHAIN (field))\n     {\n@@ -5077,6 +5072,8 @@ finish_struct_1 (t)\n   vfuns = 0;\n   CLASSTYPE_RTTI (t) = NULL_TREE;\n \n+  fixup_inline_methods (t);\n+  \n   /* Do end-of-class semantic processing: checking the validity of the\n      bases and members and add implicitly generated methods.  */\n   check_bases_and_members (t, &empty);"}, {"sha": "04837da1d883a75d3697bc373e63d0d11324a67b", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -117,6 +117,7 @@ Boston, MA 02111-1307, USA.  */\n      For a TYPENAME_TYPE, this is TYPENAME_TYPE_FULLNAME.\n      For a TEMPLATE_TEMPLATE_PARM or BOUND_TEMPLATE_TEMPLATE_PARM,\n      this is TEMPLATE_TEMPLATE_PARM_TEMPLATE_INFO.\n+     For a FUNCTION_TYPE or METHOD_TYPE, this is TYPE_RAISES_EXCEPTIONS\n \n   BINFO_VIRTUALS\n      For a binfo, this is a TREE_LIST.  The BV_DELTA of each node\n@@ -1266,7 +1267,7 @@ struct lang_type\n    After the class is defined, these fields hold other information.  */\n \n /* List of friends which were defined inline in this class definition.  */\n-#define CLASSTYPE_INLINE_FRIENDS(NODE) (TYPE_NONCOPIED_PARTS (NODE))\n+#define CLASSTYPE_INLINE_FRIENDS(NODE) (CLASSTYPE_PURE_VIRTUALS (NODE))\n \n /* Nonzero for _CLASSTYPE means that operator delete is defined.  */\n #define TYPE_GETS_DELETE(NODE) (TYPE_LANG_SPECIFIC(NODE)->gets_delete)\n@@ -1660,7 +1661,7 @@ struct lang_type\n    this type can raise.  Each TREE_VALUE is a _TYPE.  The TREE_VALUE\n    will be NULL_TREE to indicate a throw specification of `()', or\n    no exceptions allowed.  */\n-#define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_NONCOPIED_PARTS (NODE)\n+#define TYPE_RAISES_EXCEPTIONS(NODE) TYPE_BINFO (NODE)\n \n /* For FUNCTION_TYPE or METHOD_TYPE, return 1 iff it is declared `throw()'.  */\n #define TYPE_NOTHROW_P(NODE) \\"}, {"sha": "9d9c25da6cd5d5a971dc3cfd4d3bf6970c558287", "filename": "gcc/doc/c-tree.texi", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fdoc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fdoc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fc-tree.texi?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -758,8 +758,6 @@ indicated kind of inheritance was used.  If @code{TREE_VIA_VIRTUAL}\n holds of a binfo, then its @code{BINFO_TYPE} was inherited from\n virtually.\n \n-FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n-\n The following macros can be used on a tree node representing a class-type.\n \n @ftable @code"}, {"sha": "3d0d93a6a64488e6e931cd2445e3f90c290958a4", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 113, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -163,9 +163,6 @@ static rtx store_field\t\tPARAMS ((rtx, HOST_WIDE_INT,\n \t\t\t\t\t unsigned int, HOST_WIDE_INT, int));\n static enum memory_use_mode\n   get_memory_usage_from_modifier PARAMS ((enum expand_modifier));\n-static tree save_noncopied_parts PARAMS ((tree, tree));\n-static tree init_noncopied_parts PARAMS ((tree, tree));\n-static int fixed_type_p\t\tPARAMS ((tree));\n static rtx var_rtx\t\tPARAMS ((tree));\n static rtx expand_expr_unaligned PARAMS ((tree, unsigned int *));\n static rtx expand_increment\tPARAMS ((tree, int, int));\n@@ -5659,68 +5656,6 @@ force_operand (value, target)\n   return value;\n }\n \f\n-/* Subroutine of expand_expr:\n-   save the non-copied parts (LIST) of an expr (LHS), and return a list\n-   which can restore these values to their previous values,\n-   should something modify their storage.  */\n-\n-static tree\n-save_noncopied_parts (lhs, list)\n-     tree lhs;\n-     tree list;\n-{\n-  tree tail;\n-  tree parts = 0;\n-\n-  for (tail = list; tail; tail = TREE_CHAIN (tail))\n-    if (TREE_CODE (TREE_VALUE (tail)) == TREE_LIST)\n-      parts = chainon (parts, save_noncopied_parts (lhs, TREE_VALUE (tail)));\n-    else\n-      {\n-\ttree part = TREE_VALUE (tail);\n-\ttree part_type = TREE_TYPE (part);\n-\ttree to_be_saved = build (COMPONENT_REF, part_type, lhs, part);\n-\trtx target\n-\t  = assign_temp (build_qualified_type (part_type,\n-\t\t\t\t\t       (TYPE_QUALS (part_type)\n-\t\t\t\t\t\t| TYPE_QUAL_CONST)),\n-\t\t\t 0, 1, 1);\n-\n-\tparts = tree_cons (to_be_saved,\n-\t\t\t   build (RTL_EXPR, part_type, NULL_TREE,\n-\t\t\t\t  (tree) validize_mem (target)),\n-\t\t\t   parts);\n-\tstore_expr (TREE_PURPOSE (parts),\n-\t\t    RTL_EXPR_RTL (TREE_VALUE (parts)), 0);\n-      }\n-  return parts;\n-}\n-\n-/* Subroutine of expand_expr:\n-   record the non-copied parts (LIST) of an expr (LHS), and return a list\n-   which specifies the initial values of these parts.  */\n-\n-static tree\n-init_noncopied_parts (lhs, list)\n-     tree lhs;\n-     tree list;\n-{\n-  tree tail;\n-  tree parts = 0;\n-\n-  for (tail = list; tail; tail = TREE_CHAIN (tail))\n-    if (TREE_CODE (TREE_VALUE (tail)) == TREE_LIST)\n-      parts = chainon (parts, init_noncopied_parts (lhs, TREE_VALUE (tail)));\n-    else if (TREE_PURPOSE (tail))\n-      {\n-\ttree part = TREE_VALUE (tail);\n-\ttree part_type = TREE_TYPE (part);\n-\ttree to_be_initialized = build (COMPONENT_REF, part_type, lhs, part);\n-\tparts = tree_cons (TREE_PURPOSE (tail), to_be_initialized, parts);\n-      }\n-  return parts;\n-}\n-\n /* Subroutine of expand_expr: return nonzero iff there is no way that\n    EXP can reference X, which is being modified.  TOP_P is nonzero if this\n    call is going to be used to determine whether we need a temporary\n@@ -5945,22 +5880,6 @@ safe_from_p (x, exp, top_p)\n   return 1;\n }\n \n-/* Subroutine of expand_expr: return nonzero iff EXP is an\n-   expression whose type is statically determinable.  */\n-\n-static int\n-fixed_type_p (exp)\n-     tree exp;\n-{\n-  if (TREE_CODE (exp) == PARM_DECL\n-      || TREE_CODE (exp) == VAR_DECL\n-      || TREE_CODE (exp) == CALL_EXPR || TREE_CODE (exp) == TARGET_EXPR\n-      || TREE_CODE (exp) == COMPONENT_REF\n-      || TREE_CODE (exp) == ARRAY_REF)\n-    return 1;\n-  return 0;\n-}\n-\n /* Subroutine of expand_expr: return rtx if EXP is a\n    variable or parameter; else return 0.  */\n \n@@ -8505,37 +8424,23 @@ expand_expr (exp, target, tmode, modifier)\n       {\n \ttree lhs = TREE_OPERAND (exp, 0);\n \ttree rhs = TREE_OPERAND (exp, 1);\n-\ttree noncopied_parts = 0;\n-\ttree lhs_type = TREE_TYPE (lhs);\n \n \ttemp = expand_assignment (lhs, rhs, ! ignore, original_target != 0);\n-\tif (TYPE_NONCOPIED_PARTS (lhs_type) != 0 && !fixed_type_p (rhs))\n-\t  noncopied_parts\n-\t    = init_noncopied_parts (stabilize_reference (lhs),\n-\t\t\t\t    TYPE_NONCOPIED_PARTS (lhs_type));\n-\n-\twhile (noncopied_parts != 0)\n-\t  {\n-\t    expand_assignment (TREE_VALUE (noncopied_parts),\n-\t\t\t       TREE_PURPOSE (noncopied_parts), 0, 0);\n-\t    noncopied_parts = TREE_CHAIN (noncopied_parts);\n-\t  }\n \treturn temp;\n       }\n \n     case MODIFY_EXPR:\n       {\n \t/* If lhs is complex, expand calls in rhs before computing it.\n-\t   That's so we don't compute a pointer and save it over a call.\n-\t   If lhs is simple, compute it first so we can give it as a\n-\t   target if the rhs is just a call.  This avoids an extra temp and copy\n-\t   and that prevents a partial-subsumption which makes bad code.\n-\t   Actually we could treat component_ref's of vars like vars.  */\n+\t   That's so we don't compute a pointer and save it over a\n+\t   call.  If lhs is simple, compute it first so we can give it\n+\t   as a target if the rhs is just a call.  This avoids an\n+\t   extra temp and copy and that prevents a partial-subsumption\n+\t   which makes bad code.  Actually we could treat\n+\t   component_ref's of vars like vars.  */\n \n \ttree lhs = TREE_OPERAND (exp, 0);\n \ttree rhs = TREE_OPERAND (exp, 1);\n-\ttree noncopied_parts = 0;\n-\ttree lhs_type = TREE_TYPE (lhs);\n \n \ttemp = 0;\n \n@@ -8571,19 +8476,8 @@ expand_expr (exp, target, tmode, modifier)\n \t    return const0_rtx;\n \t  }\n \n-\tif (TYPE_NONCOPIED_PARTS (lhs_type) != 0\n-\t    && ! (fixed_type_p (lhs) && fixed_type_p (rhs)))\n-\t  noncopied_parts\n-\t    = save_noncopied_parts (stabilize_reference (lhs),\n-\t\t\t\t    TYPE_NONCOPIED_PARTS (lhs_type));\n-\n \ttemp = expand_assignment (lhs, rhs, ! ignore, original_target != 0);\n-\twhile (noncopied_parts != 0)\n-\t  {\n-\t    expand_assignment (TREE_PURPOSE (noncopied_parts),\n-\t\t\t       TREE_VALUE (noncopied_parts), 0, 0);\n-\t    noncopied_parts = TREE_CHAIN (noncopied_parts);\n-\t  }\n+\t\n \treturn temp;\n       }\n "}, {"sha": "fe7cbe51d20fd5cc688ed0755cb3231178d34bf7", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -399,7 +399,6 @@ ggc_mark_trees ()\n \t  ggc_mark_tree (TYPE_NEXT_VARIANT (t));\n \t  ggc_mark_tree (TYPE_MAIN_VARIANT (t));\n \t  ggc_mark_tree (TYPE_BINFO (t));\n-\t  ggc_mark_tree (TYPE_NONCOPIED_PARTS (t));\n \t  ggc_mark_tree (TYPE_CONTEXT (t));\n \t  lang_mark_tree (t);\n \t  break;"}, {"sha": "8ef9156d8f12fae055c7f3759bf9c06d139f165b", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d0a3f67bb68552229f14f90dd42254de5d17016/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6d0a3f67bb68552229f14f90dd42254de5d17016", "patch": "@@ -918,7 +918,6 @@ struct tree_block\n #define TYPE_NAME(NODE) (TYPE_CHECK (NODE)->type.name)\n #define TYPE_NEXT_VARIANT(NODE) (TYPE_CHECK (NODE)->type.next_variant)\n #define TYPE_MAIN_VARIANT(NODE) (TYPE_CHECK (NODE)->type.main_variant)\n-#define TYPE_NONCOPIED_PARTS(NODE) (TYPE_CHECK (NODE)->type.noncopied_parts)\n #define TYPE_CONTEXT(NODE) (TYPE_CHECK (NODE)->type.context)\n #define TYPE_LANG_SPECIFIC(NODE) (TYPE_CHECK (NODE)->type.lang_specific)\n \n@@ -1191,7 +1190,6 @@ struct tree_type\n   tree next_variant;\n   tree main_variant;\n   tree binfo;\n-  tree noncopied_parts;\n   tree context;\n   HOST_WIDE_INT alias_set;\n   /* Points to a structure whose details depend on the language in use.  */"}]}