{"sha": "94ce49419aef75f3414edcaeba89e63c6c3be320", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjZTQ5NDE5YWVmNzVmMzQxNGVkY2FlYmE4OWU2M2M2YzNiZTMyMA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-01-11T08:51:13Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-01-11T08:51:13Z"}, "message": "[Ada] Encoding of with clauses in ALI files\n\nThis patch modifies the encodings of with clauses in ALI files to adhere to the\nexisting API. The encodigs are as follows:\n\n   * Explicit with clauses are encoded on a 'W' line (same as before).\n\n   * Implicit with clauses for ancestor units are encoded on a 'W' line (same\n     as before).\n\n   * Limited_with clauses are encoded on a 'Y' line (same as before).\n\n   * ABE and RTSfind-related with clauses are encoded on a 'Z' line.\n\n------------\n-- Source --\n------------\n\n--  case_10_func.adb\n\nfunction Case_10_Func return Boolean is\nbegin\n   return True;\nend Case_10_Func;\n\n--  case_10_gen_func.ads\n\ngeneric\nfunction Case_10_Gen_Func return Boolean;\n\n--  case_10_gen_func.adb\n\nfunction Case_10_Gen_Func return Boolean is\nbegin\n   return True;\nend Case_10_Gen_Func;\n\n--  case_10_tasks.ads\n\npackage Case_10_Tasks is\n   task type Task_Typ is\n   end Task_Typ;\nend Case_10_Tasks;\n\n--  case_10_tasks.adb\n\npackage body Case_10_Tasks is\n   task body Task_Typ is begin null; end Task_Typ;\nend Case_10_Tasks;\n\n--  case_10_gen.ads\n\nwith Case_10_Func;\nwith Case_10_Gen_Func;\nwith Case_10_Tasks;\n\ngeneric\npackage Case_10_Gen is\n   Val : constant Boolean := Case_10_Func;\n\n   function Inst is new Case_10_Gen_Func;\n\n   Tsk : Case_10_Tasks.Task_Typ;\nend Case_10_Gen;\n\n--  case_10.ads\n\nwith Case_10_Gen;\n\npackage Case_10 is\n   package Inst is new Case_10_Gen;\nend Case_10;\n\n----------------------------\n-- Compilation and output --\n----------------------------\n\n$ gcc -c case_10.ads\n$ grep \"W \" case_10.ali | sort\n$ grep \"Z \" case_10.ali | sort\nW case_10_gen%s\t\tcase_10_gen.ads\t\tcase_10_gen.ali\nZ case_10_func%b\tcase_10_func.adb\tcase_10_func.ali\nZ case_10_gen_func%s\tcase_10_gen_func.adb\tcase_10_gen_func.ali  ED\nZ case_10_tasks%s\tcase_10_tasks.adb\tcase_10_tasks.ali  AD\nZ system.soft_links%s\ts-soflin.adb\t\ts-soflin.ali\nZ system.tasking%s\ts-taskin.adb\t\ts-taskin.ali\nZ system.tasking.stages%s  s-tassta.adb\t\ts-tassta.ali\n\n2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* ali.adb: Document the remaining letters available for ALI lines.\n\t(Scan_ALI): A with clause is internal when it is encoded on a 'Z' line.\n\t* ali.ads: Update type With_Record. Field\n\tImplicit_With_From_Instantiation is no longer in use. Add field\n\tImplicit_With.\n\t* csinfo.adb (CSinfo): Remove the setup for attribute\n\tImplicit_With_From_Instantiation.\n\t* lib-writ.adb (Collect_Withs): Correct the logic which marks a unit as\n\teither implicitly or explicitly withed.\n\t(Is_Implicit_With_Clause): New routine.\n\t(Write_ALI): Rename array Implicit_With to Has_Implicit_With to avoid\n\tconfusion with the with clause attribute by the same name.\n\t(Write_With_Lines): Update the emission of 'W', 'Y', and 'Z' headers.\n\t* rtsfind.adb (Maybe_Add_With): Code cleanup.\n\t* sem_ch8.adb (Present_System_Aux): Code cleanup.\n\t* sem_ch10.adb (Expand_With_Clause): Mark the with clause as generated\n\tfor a parent unit.\n\t(Implicit_With_On_Parent): Mark the with clause as generated for a\n\tparent unit.\n\t* sem_ch12.adb (Inherit_Context): With clauses inherited by an\n\tinstantiation are no longer marked as Implicit_With_From_Instantiation\n\tbecause they are already marked as implicit.\n\t* sem_elab.adb (Ensure_Prior_Elaboration_Static): Remove the kludge\n\twhich marks implicit with clauses as related to an instantiation.\n\t* sinfo.adb (Implicit_With_From_Instantiation): Removed.\n\t(Parent_With): New routine.\n\t(Set_Implicit_With_From_Instantiation): Removed.\n\t(Set_Parent_With): New routine.\n\t* sinfo.ads: Update the documentation of attribute Implicit_With.\n\tRemove attribute Implicit_With_From_Instantiation along with\n\toccurrences in nodes.  Add attribute Parent_With along with occurrences\n\tin nodes.\n\t(Implicit_With_From_Instantiation): Removed along with pragma Inline.\n\t(Parent_With): New routine along with pragma Inline.\n\t(Set_Implicit_With_From_Instantiation): Removed along with pragma Inline.\n\t(Set_Parent_With): New routine along with pragma Inline.\n\nFrom-SVN: r256490", "tree": {"sha": "57ecfd78c9e0afab4a505645053aa796cd2a059b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57ecfd78c9e0afab4a505645053aa796cd2a059b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94ce49419aef75f3414edcaeba89e63c6c3be320", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ce49419aef75f3414edcaeba89e63c6c3be320", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94ce49419aef75f3414edcaeba89e63c6c3be320", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94ce49419aef75f3414edcaeba89e63c6c3be320/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "775192706061030d927945619d3a41c5825e455d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/775192706061030d927945619d3a41c5825e455d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/775192706061030d927945619d3a41c5825e455d"}], "stats": {"total": 415, "additions": 258, "deletions": 157}, "files": [{"sha": "550b760849704be74cddbb6a804c1c46f4e7ede9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -1,3 +1,42 @@\n+2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* ali.adb: Document the remaining letters available for ALI lines.\n+\t(Scan_ALI): A with clause is internal when it is encoded on a 'Z' line.\n+\t* ali.ads: Update type With_Record. Field\n+\tImplicit_With_From_Instantiation is no longer in use. Add field\n+\tImplicit_With.\n+\t* csinfo.adb (CSinfo): Remove the setup for attribute\n+\tImplicit_With_From_Instantiation.\n+\t* lib-writ.adb (Collect_Withs): Correct the logic which marks a unit as\n+\teither implicitly or explicitly withed.\n+\t(Is_Implicit_With_Clause): New routine.\n+\t(Write_ALI): Rename array Implicit_With to Has_Implicit_With to avoid\n+\tconfusion with the with clause attribute by the same name.\n+\t(Write_With_Lines): Update the emission of 'W', 'Y', and 'Z' headers.\n+\t* rtsfind.adb (Maybe_Add_With): Code cleanup.\n+\t* sem_ch8.adb (Present_System_Aux): Code cleanup.\n+\t* sem_ch10.adb (Expand_With_Clause): Mark the with clause as generated\n+\tfor a parent unit.\n+\t(Implicit_With_On_Parent): Mark the with clause as generated for a\n+\tparent unit.\n+\t* sem_ch12.adb (Inherit_Context): With clauses inherited by an\n+\tinstantiation are no longer marked as Implicit_With_From_Instantiation\n+\tbecause they are already marked as implicit.\n+\t* sem_elab.adb (Ensure_Prior_Elaboration_Static): Remove the kludge\n+\twhich marks implicit with clauses as related to an instantiation.\n+\t* sinfo.adb (Implicit_With_From_Instantiation): Removed.\n+\t(Parent_With): New routine.\n+\t(Set_Implicit_With_From_Instantiation): Removed.\n+\t(Set_Parent_With): New routine.\n+\t* sinfo.ads: Update the documentation of attribute Implicit_With.\n+\tRemove attribute Implicit_With_From_Instantiation along with\n+\toccurrences in nodes.  Add attribute Parent_With along with occurrences\n+\tin nodes.\n+\t(Implicit_With_From_Instantiation): Removed along with pragma Inline.\n+\t(Parent_With): New routine along with pragma Inline.\n+\t(Set_Implicit_With_From_Instantiation): Removed along with pragma Inline.\n+\t(Set_Parent_With): New routine along with pragma Inline.\n+\n 2018-01-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_util.adb (Find_Enclosing_Scope): Return the unique defining"}, {"sha": "b40e8cf6dd4070acf19b7aaeb39af76dec5fc426", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -35,9 +35,11 @@ package body ALI is\n    use ASCII;\n    --  Make control characters visible\n \n-   --  The following variable records which characters currently are\n-   --  used as line type markers in the ALI file. This is used in\n-   --  Scan_ALI to detect (or skip) invalid lines.\n+   --  The following variable records which characters currently are used as\n+   --  line type markers in the ALI file. This is used in Scan_ALI to detect\n+   --  (or skip) invalid lines. The following letters are still available:\n+   --\n+   --    B G H J K O Q Z\n \n    Known_ALI_Lines : constant array (Character range 'A' .. 'Z') of Boolean :=\n      ('V'    => True,   -- version\n@@ -2028,8 +2030,7 @@ package body ALI is\n                Withs.Table (Withs.Last).Elab_All_Desirable := False;\n                Withs.Table (Withs.Last).SAL_Interface      := False;\n                Withs.Table (Withs.Last).Limited_With       := (C = 'Y');\n-               Withs.Table (Withs.Last).Implicit_With_From_Instantiation\n-                                                           := (C = 'Z');\n+               Withs.Table (Withs.Last).Implicit_With      := (C = 'Z');\n \n                --  Generic case with no object file available\n "}, {"sha": "60454abeadeb6849cdbf1cf4eac16cff3e9931cd", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -82,7 +82,6 @@ package ALI is\n    --  Indicator of whether unit can be used as main program\n \n    type ALIs_Record is record\n-\n       Afile : File_Name_Type;\n       --  Name of ALI file\n \n@@ -226,7 +225,6 @@ package ALI is\n       --  Last_Specific_Dispatching = First_Specific_Dispatching - 1. That\n       --  is why the 'Base reference is there, it can be one less than the\n       --  lower bound of the subtype. Not set if 'S' appears in Ignore_Lines.\n-\n    end record;\n \n    No_Main_Priority : constant Int := -1;\n@@ -265,7 +263,6 @@ package ALI is\n    --  Version string, taken from unit record\n \n    type Unit_Record is record\n-\n       My_ALI : ALI_Id;\n       --  Corresponding ALI entry\n \n@@ -568,7 +565,6 @@ package ALI is\n    --  Id of first actual entry in table\n \n    type With_Record is record\n-\n       Uname : Unit_Name_Type;\n       --  Name of Unit\n \n@@ -587,17 +583,17 @@ package ALI is\n       Elab_All_Desirable : Boolean;\n       --  Indicates presence of AD parameter\n \n-      Elab_Desirable     : Boolean;\n+      Elab_Desirable : Boolean;\n       --  Indicates presence of ED parameter\n \n       SAL_Interface : Boolean := False;\n       --  True if the Unit is an Interface of a Stand-Alone Library\n \n-      Limited_With : Boolean := False;\n-      --  True if unit is named in a limited_with_clause\n+      Implicit_With : Boolean := False;\n+      --  True if this is an implicit with generated by the compiler\n \n-      Implicit_With_From_Instantiation : Boolean := False;\n-      --  True if this is an implicit with from a generic instantiation\n+      Limited_With : Boolean := False;\n+      --  True if this is a limited_with_clause\n    end record;\n \n    package Withs is new Table.Table (\n@@ -778,7 +774,6 @@ package ALI is\n    --  successive ALI files are scanned.\n \n    type Sdep_Record is record\n-\n       Sfile : File_Name_Type;\n       --  Name of source file\n "}, {"sha": "c6608995c6f0eb3f7e2b3a4be444e382664ae651", "filename": "gcc/ada/csinfo.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fcsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fcsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcsinfo.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2017, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -218,7 +218,6 @@ begin\n    Set (Special, \"Has_Dynamic_Range_Check\",          True);\n    Set (Special, \"Has_Dynamic_Length_Check\",         True);\n    Set (Special, \"Has_Private_View\",                 True);\n-   Set (Special, \"Implicit_With_From_Instantiation\", True);\n    Set (Special, \"Is_Controlling_Actual\",            True);\n    Set (Special, \"Is_Overloaded\",                    True);\n    Set (Special, \"Is_Static_Expression\",             True);"}, {"sha": "553bda20b5fc2afdd53cf3b8f289e76b52688335", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 69, "deletions": 12, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -215,9 +215,9 @@ package body Lib.Writ is\n       --  Array of flags to show which units have Elaborate_All_Desirable set\n \n       type Yes_No is (Unknown, Yes, No);\n-      Implicit_With : array (Units.First .. Last_Unit) of Yes_No;\n+      Has_Implicit_With : array (Units.First .. Last_Unit) of Yes_No;\n       --  Indicates if an implicit with has been given for the unit. Yes if\n-      --  certainly present, no if certainly absent, unkonwn if not known.\n+      --  certainly present, No if certainly absent, Unknown if not known.\n \n       Sdep_Table : Unit_Ref_Table (1 .. Pos (Last_Unit - Units.First + 2));\n       --  Sorted table of source dependencies. One extra entry in case we\n@@ -235,8 +235,8 @@ package body Lib.Writ is\n       -----------------------\n \n       procedure Collect_Withs (Cunit : Node_Id);\n-      --  Collect with lines for entries in the context clause of the\n-      --  given compilation unit, Cunit.\n+      --  Collect with lines for entries in the context clause of the given\n+      --  compilation unit, Cunit.\n \n       procedure Update_Tables_From_ALI_File;\n       --  Given an up to date ALI file (see Up_To_Date_ALI_file_Exists\n@@ -261,9 +261,47 @@ package body Lib.Writ is\n       -------------------\n \n       procedure Collect_Withs (Cunit : Node_Id) is\n+         function Is_Implicit_With_Clause (Clause : Node_Id) return Boolean;\n+         pragma Inline (Is_Implicit_With_Clause);\n+         --  Determine whether a with clause denoted by Clause is implicit\n+\n+         -----------------------------\n+         -- Is_Implicit_With_Clause --\n+         -----------------------------\n+\n+         function Is_Implicit_With_Clause (Clause : Node_Id) return Boolean is\n+         begin\n+            --  With clauses created for ancestor units are marked as internal,\n+            --  however, they emulate the semantics in Ada RM 10.1.2 (6/2),\n+            --  where\n+            --\n+            --    with A.B;\n+            --\n+            --  is almost equivalent to\n+            --\n+            --    with A;\n+            --    with A.B;\n+            --\n+            --  For ALI encoding purposes, they are considered to be explicit.\n+            --  Note that the clauses cannot be marked as explicit because they\n+            --  will be subjected to various checks related to with clauses and\n+            --  possibly cause false positives.\n+\n+            if Parent_With (Clause) then\n+               return False;\n+\n+            else\n+               return Implicit_With (Clause);\n+            end if;\n+         end Is_Implicit_With_Clause;\n+\n+         --  Local variables\n+\n          Item : Node_Id;\n          Unum : Unit_Number_Type;\n \n+      --  Start of processing for Collect_Withs\n+\n       begin\n          Item := First (Context_Items (Cunit));\n          while Present (Item) loop\n@@ -300,12 +338,28 @@ package body Lib.Writ is\n                   Set_From_Limited_With (Cunit_Entity (Unum));\n                end if;\n \n-               if Implicit_With (Unum) /= Yes then\n-                  if Implicit_With_From_Instantiation (Item) then\n-                     Implicit_With (Unum) := Yes;\n+               if Is_Implicit_With_Clause (Item) then\n+\n+                  --  A previous explicit with clause withs the unit. Retain\n+                  --  this classification, as it reflects the source relations\n+                  --  between units.\n+\n+                  if Has_Implicit_With (Unum) = No then\n+                     null;\n+\n+                  --  Otherwise this is either the first time any clause withs\n+                  --  the unit, or the unit is already implicitly withed.\n+\n                   else\n-                     Implicit_With (Unum) := No;\n+                     Has_Implicit_With (Unum) := Yes;\n                   end if;\n+\n+               --  Otherwise the current with clause is explicit. Such clauses\n+               --  take precedence over existing implicit clauses because they\n+               --  reflect the source relations between unit.\n+\n+               else\n+                  Has_Implicit_With (Unum) := No;\n                end if;\n             end if;\n \n@@ -573,7 +627,7 @@ package body Lib.Writ is\n             Elab_All_Flags     (J) := False;\n             Elab_Des_Flags     (J) := False;\n             Elab_All_Des_Flags (J) := False;\n-            Implicit_With      (J) := Unknown;\n+            Has_Implicit_With  (J) := Unknown;\n          end loop;\n \n          Collect_Withs (Unode);\n@@ -853,14 +907,17 @@ package body Lib.Writ is\n             Uname := Units.Table (Unum).Unit_Name;\n             Fname := Units.Table (Unum).Unit_File_Name;\n \n-            if Implicit_With (Unum) = Yes then\n-               Write_Info_Initiate ('Z');\n+            --  Limited with clauses must be processed first because they are\n+            --  the most specific among the three kinds.\n \n-            elsif Ekind (Cunit_Entity (Unum)) = E_Package\n+            if Ekind (Cunit_Entity (Unum)) = E_Package\n               and then From_Limited_With (Cunit_Entity (Unum))\n             then\n                Write_Info_Initiate ('Y');\n \n+            elsif Has_Implicit_With (Unum) = Yes then\n+               Write_Info_Initiate ('Z');\n+\n             else\n                Write_Info_Initiate ('W');\n             end if;"}, {"sha": "879eb45a4afdfc92fdc78e7f98d5678d9361118b", "filename": "gcc/ada/rtsfind.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Frtsfind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Frtsfind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frtsfind.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -1124,15 +1124,15 @@ package body Rtsfind is\n          end loop;\n \n          Withn :=\n-            Make_With_Clause (Standard_Location,\n-              Name =>\n-                Make_Unit_Name\n-                  (U, Defining_Unit_Name (Specification (LibUnit))));\n+           Make_With_Clause (Standard_Location,\n+             Name =>\n+               Make_Unit_Name\n+                 (U, Defining_Unit_Name (Specification (LibUnit))));\n \n-         Set_Library_Unit        (Withn, Cunit (U.Unum));\n          Set_Corresponding_Spec  (Withn, U.Entity);\n-         Set_First_Name          (Withn, True);\n-         Set_Implicit_With       (Withn, True);\n+         Set_First_Name          (Withn);\n+         Set_Implicit_With       (Withn);\n+         Set_Library_Unit        (Withn, Cunit (U.Unum));\n          Set_Next_Implicit_With  (Withn, U.First_Implicit_With);\n \n          U.First_Implicit_With := Withn;"}, {"sha": "4b828c9f4f0c32a567ec9901631f71f66a0fdbf2", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 65, "deletions": 60, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -472,8 +472,8 @@ package body Sem_Ch10 is\n                --  visibility analysis, but is also not redundant.\n \n                elsif Nkind (Cont_Item) = N_With_Clause\n-                 and then not Implicit_With (Cont_Item)\n                  and then Comes_From_Source (Cont_Item)\n+                 and then not Implicit_With (Cont_Item)\n                  and then not Limited_Present (Cont_Item)\n                  and then Cont_Item /= Clause\n                  and then Entity (Name (Cont_Item)) = Nam_Ent\n@@ -517,16 +517,16 @@ package body Sem_Ch10 is\n \n                   begin\n                      Process_Spec_Clauses\n-                      (Context_List => Spec_Context_Items,\n-                       Clause       => Clause,\n-                       Used         => Used_In_Spec,\n-                       Withed       => Withed_In_Spec);\n+                       (Context_List => Spec_Context_Items,\n+                        Clause       => Clause,\n+                        Used         => Used_In_Spec,\n+                        Withed       => Withed_In_Spec);\n \n                      Process_Body_Clauses\n-                      (Context_List      => Context_Items,\n-                       Clause            => Clause,\n-                       Used              => Used_In_Body,\n-                       Used_Type_Or_Elab => Used_Type_Or_Elab);\n+                       (Context_List      => Context_Items,\n+                        Clause            => Clause,\n+                        Used              => Used_In_Body,\n+                        Used_Type_Or_Elab => Used_Type_Or_Elab);\n \n                      --  \"Type Elab\" refers to the presence of either a use\n                      --  type clause, pragmas Elaborate or Elaborate_All.\n@@ -555,29 +555,29 @@ package body Sem_Ch10 is\n                           (\"redundant with clause in body?r?\", Clause);\n                      end if;\n \n-                     Used_In_Body := False;\n-                     Used_In_Spec := False;\n+                     Used_In_Body      := False;\n+                     Used_In_Spec      := False;\n                      Used_Type_Or_Elab := False;\n-                     Withed_In_Spec := False;\n+                     Withed_In_Spec    := False;\n                   end;\n \n                --  Standalone package spec or body check\n \n                else\n                   declare\n-                     Dont_Care : Boolean := False;\n-                     Withed    : Boolean := False;\n+                     Dummy  : Boolean := False;\n+                     Withed : Boolean := False;\n \n                   begin\n                      --  The mechanism for examining the context clauses of a\n                      --  package spec can be applied to package body clauses.\n \n                      Process_Spec_Clauses\n-                      (Context_List => Context_Items,\n-                       Clause       => Clause,\n-                       Used         => Dont_Care,\n-                       Withed       => Withed,\n-                       Exit_On_Self => True);\n+                       (Context_List => Context_Items,\n+                        Clause       => Clause,\n+                        Used         => Dummy,\n+                        Withed       => Withed,\n+                        Exit_On_Self => True);\n \n                      if Withed then\n                         Error_Msg_N -- CODEFIX\n@@ -1058,7 +1058,7 @@ package body Sem_Ch10 is\n                if Nkind (Item) = N_With_Clause\n                  and then not Implicit_With (Item)\n \n-                  --  Ada 2005 (AI-50217): Ignore limited-withed units\n+                 --  Ada 2005 (AI-50217): Ignore limited-withed units\n \n                  and then not Limited_Present (Item)\n                then\n@@ -1487,8 +1487,9 @@ package body Sem_Ch10 is\n                      P := Parent_Spec (Unit (N));\n                      loop\n                         if Unit (P) = Lib_U then\n-                           Error_Msg_N (\"limited with_clause cannot \"\n-                                        & \"name ancestor\", Item);\n+                           Error_Msg_N\n+                             (\"limited with_clause cannot name ancestor\",\n+                              Item);\n                            exit;\n                         end if;\n \n@@ -1539,13 +1540,11 @@ package body Sem_Ch10 is\n                               then\n                                  Error_Msg_Sloc := Sloc (It);\n                                  Error_Msg_N\n-                                   (\"simultaneous visibility of limited \"\n-                                    & \"and unlimited views not allowed\",\n-                                    Item);\n+                                   (\"simultaneous visibility of limited and \"\n+                                    & \"unlimited views not allowed\", Item);\n                                  Error_Msg_NE\n-                                   (\"\\unlimited view visible through \"\n-                                    & \"context clause #\",\n-                                    Item, It);\n+                                   (\"\\unlimited view visible through context \"\n+                                    & \"clause #\", Item, It);\n                                  exit;\n \n                               elsif Nkind (Unit_Name) = N_Identifier then\n@@ -1572,15 +1571,15 @@ package body Sem_Ch10 is\n                Analyze (Item);\n             end if;\n \n-            --  A limited_with does not impose an elaboration order, but\n-            --  there is a semantic dependency for recompilation purposes.\n+            --  A limited_with does not impose an elaboration order, but there\n+            --  is a semantic dependency for recompilation purposes.\n \n             if not Implicit_With (Item) then\n                Version_Update (N, Library_Unit (Item));\n             end if;\n \n-            --  Pragmas and use clauses and with clauses other than limited\n-            --  with's are ignored in this pass through the context items.\n+         --  Pragmas and use clauses and with clauses other than limited with's\n+         --  are ignored in this pass through the context items.\n \n          else\n             null;\n@@ -2632,8 +2631,8 @@ package body Sem_Ch10 is\n                      Error_Msg_F (\"\\use \"\"~\"\" instead?i?\", Name (N));\n                   else\n                      Error_Msg_F\n-                       (\"\\use of this unit is non-portable \" &\n-                        \"and version-dependent?i?\", Name (N));\n+                       (\"\\use of this unit is non-portable and \"\n+                        & \"version-dependent?i?\", Name (N));\n                   end if;\n \n                elsif U_Kind = Ada_2005_Unit\n@@ -2999,7 +2998,7 @@ package body Sem_Ch10 is\n                   then\n                      Error_Msg_NE\n                        (\"& is a nested package, not a compilation unit\",\n-                       Name (Item), Priv_Child);\n+                        Name (Item), Priv_Child);\n \n                   else\n                      Error_Msg_N\n@@ -3027,7 +3026,6 @@ package body Sem_Ch10 is\n \n          Next (Item);\n       end loop;\n-\n    end Check_Private_Child_Unit;\n \n    ----------------------\n@@ -3063,10 +3061,7 @@ package body Sem_Ch10 is\n    ------------------------\n \n    procedure Expand_With_Clause (Item : Node_Id; Nam : Node_Id; N : Node_Id) is\n-      Loc   : constant Source_Ptr := Sloc (Nam);\n-      Ent   : constant Entity_Id := Entity (Nam);\n-      Withn : Node_Id;\n-      P     : Node_Id;\n+      Loc : constant Source_Ptr := Sloc (Nam);\n \n       function Build_Unit_Name (Nam : Node_Id) return Node_Id;\n       --  Build name to be used in implicit with_clause. In most cases this\n@@ -3093,8 +3088,8 @@ package body Sem_Ch10 is\n             if Present (Entity (Selector_Name (Nam)))\n               and then Chars (Entity (Selector_Name (Nam))) /= Chars (Ent)\n               and then\n-                Nkind (Unit_Declaration_Node (Entity (Selector_Name (Nam))))\n-                  = N_Package_Renaming_Declaration\n+                Nkind (Unit_Declaration_Node (Entity (Selector_Name (Nam)))) =\n+                  N_Package_Renaming_Declaration\n             then\n                --  The name in the with_clause is of the form A.B.C, and B is\n                --  given by a renaming declaration. In that case we may not\n@@ -3111,33 +3106,39 @@ package body Sem_Ch10 is\n \n             Result :=\n               Make_Expanded_Name (Loc,\n-                Chars  => Chars (Entity (Nam)),\n-                Prefix => Build_Unit_Name (Prefix (Nam)),\n+                Chars         => Chars (Entity (Nam)),\n+                Prefix        => Build_Unit_Name (Prefix (Nam)),\n                 Selector_Name => New_Occurrence_Of (Ent, Loc));\n             Set_Entity (Result, Ent);\n+\n             return Result;\n          end if;\n       end Build_Unit_Name;\n \n+      --  Local variables\n+\n+      Ent   : constant Entity_Id  := Entity (Nam);\n+      Withn : Node_Id;\n+\n    --  Start of processing for Expand_With_Clause\n \n    begin\n       Withn :=\n         Make_With_Clause (Loc,\n           Name => Build_Unit_Name (Nam));\n \n-      P := Parent (Unit_Declaration_Node (Ent));\n-      Set_Library_Unit       (Withn, P);\n       Set_Corresponding_Spec (Withn, Ent);\n-      Set_First_Name         (Withn, True);\n-      Set_Implicit_With      (Withn, True);\n+      Set_First_Name         (Withn);\n+      Set_Implicit_With      (Withn);\n+      Set_Library_Unit       (Withn, Parent (Unit_Declaration_Node (Ent)));\n+      Set_Parent_With        (Withn);\n \n       --  If the unit is a package or generic package declaration, a private_\n       --  with_clause on a child unit implies that the implicit with on the\n       --  parent is also private.\n \n-      if Nkind_In (Unit (N), N_Package_Declaration,\n-                             N_Generic_Package_Declaration)\n+      if Nkind_In (Unit (N), N_Generic_Package_Declaration,\n+                             N_Package_Declaration)\n       then\n          Set_Private_Present (Withn, Private_Present (Item));\n       end if;\n@@ -3277,8 +3278,8 @@ package body Sem_Ch10 is\n          P_Spec : Node_Id := P;\n \n       begin\n-         --  Ancestor may have been rewritten as a package body. Retrieve\n-         --  the original spec to trace earlier ancestors.\n+         --  Ancestor may have been rewritten as a package body. Retrieve the\n+         --  original spec to trace earlier ancestors.\n \n          if Nkind (P) = N_Package_Body\n            and then Nkind (Original_Node (P)) = N_Package_Instantiation\n@@ -3291,7 +3292,8 @@ package body Sem_Ch10 is\n          else\n             return\n               Make_Selected_Component (Loc,\n-                Prefix => Build_Ancestor_Name (Unit (Parent_Spec (P_Spec))),\n+                Prefix        =>\n+                  Build_Ancestor_Name (Unit (Parent_Spec (P_Spec))),\n                 Selector_Name => P_Ref);\n          end if;\n       end Build_Ancestor_Name;\n@@ -3310,10 +3312,12 @@ package body Sem_Ch10 is\n          else\n             Result :=\n               Make_Expanded_Name (Loc,\n-                Chars  => Chars (P_Name),\n-                Prefix => Build_Ancestor_Name (Unit (Parent_Spec (P_Unit))),\n+                Chars         => Chars (P_Name),\n+                Prefix        =>\n+                  Build_Ancestor_Name (Unit (Parent_Spec (P_Unit))),\n                 Selector_Name => New_Occurrence_Of (P_Name, Loc));\n             Set_Entity (Result, P_Name);\n+\n             return Result;\n          end if;\n       end Build_Unit_Name;\n@@ -3343,10 +3347,11 @@ package body Sem_Ch10 is\n \n       Withn := Make_With_Clause (Loc, Name => Build_Unit_Name);\n \n-      Set_Library_Unit          (Withn, P);\n-      Set_Corresponding_Spec    (Withn, P_Name);\n-      Set_First_Name            (Withn, True);\n-      Set_Implicit_With         (Withn, True);\n+      Set_Corresponding_Spec (Withn, P_Name);\n+      Set_First_Name         (Withn);\n+      Set_Implicit_With      (Withn);\n+      Set_Library_Unit       (Withn, P);\n+      Set_Parent_With        (Withn);\n \n       --  Node is placed at the beginning of the context items, so that\n       --  subsequent use clauses on the parent can be validated.\n@@ -3913,9 +3918,9 @@ package body Sem_Ch10 is\n             Set_Parent (Withn, Parent (N));\n          end if;\n \n-         Set_Limited_Present (Withn);\n          Set_First_Name      (Withn);\n          Set_Implicit_With   (Withn);\n+         Set_Limited_Present (Withn);\n \n          Unum :=\n            Load_Unit"}, {"sha": "0cfb4119104e8b01de1ba540c23f9aa8eebed744", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -9106,8 +9106,8 @@ package body Sem_Ch12 is\n                   Clause := First (Current_Context);\n                   OK := True;\n                   while Present (Clause) loop\n-                     if Nkind (Clause) = N_With_Clause and then\n-                       Library_Unit (Clause) = Lib_Unit\n+                     if Nkind (Clause) = N_With_Clause\n+                       and then Library_Unit (Clause) = Lib_Unit\n                      then\n                         OK := False;\n                         exit;\n@@ -9118,8 +9118,8 @@ package body Sem_Ch12 is\n \n                   if OK then\n                      New_I := New_Copy (Item);\n-                     Set_Implicit_With (New_I, True);\n-                     Set_Implicit_With_From_Instantiation (New_I, True);\n+                     Set_Implicit_With (New_I);\n+\n                      Append (New_I, Current_Context);\n                   end if;\n                end if;"}, {"sha": "27e55abe7aebaef70209916cf06d295dadd28aa9", "filename": "gcc/ada/sem_ch8.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_ch8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch8.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -8935,16 +8935,17 @@ package body Sem_Ch8 is\n               Make_With_Clause (Loc,\n                 Name =>\n                   Make_Expanded_Name (Loc,\n-                    Chars  => Chars (System_Aux_Id),\n-                    Prefix => New_Occurrence_Of (Scope (System_Aux_Id), Loc),\n+                    Chars         => Chars (System_Aux_Id),\n+                    Prefix        =>\n+                      New_Occurrence_Of (Scope (System_Aux_Id), Loc),\n                     Selector_Name => New_Occurrence_Of (System_Aux_Id, Loc)));\n \n             Set_Entity (Name (Withn), System_Aux_Id);\n \n-            Set_Library_Unit       (Withn, Cunit (Unum));\n             Set_Corresponding_Spec (Withn, System_Aux_Id);\n-            Set_First_Name         (Withn, True);\n-            Set_Implicit_With      (Withn, True);\n+            Set_First_Name         (Withn);\n+            Set_Implicit_With      (Withn);\n+            Set_Library_Unit       (Withn, Cunit (Unum));\n \n             Insert_After (With_Sys, Withn);\n             Mark_Rewrite_Insertion (Withn);"}, {"sha": "078c1e483f4bff0edad026c644bfc19ae2c909cf", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -3585,16 +3585,6 @@ package body Sem_Elab is\n          Set_Implicit_With (Clause);\n          Set_Library_Unit  (Clause, Unit_Cunit);\n \n-         --  The following is a kludge to satisfy a GPRbuild requirement. In\n-         --  general, internal with clauses should be encoded on a 'Z' line in\n-         --  ALI files, but due to an old bug, they are encoded as source with\n-         --  clauses on a 'W' line. As a result, these \"semi-implicit\" clauses\n-         --  introduce spurious build dependencies in GPRbuild. The only way to\n-         --  eliminate this effect is to mark the implicit clauses as generated\n-         --  for an instantiation.\n-\n-         Set_Implicit_With_From_Instantiation (Clause);\n-\n          Append_To (Items, Clause);\n       end if;\n \n@@ -11717,7 +11707,7 @@ package body Sem_Elab is\n \n       begin\n          Set_Library_Unit  (CW, Library_Unit (Itm));\n-         Set_Implicit_With (CW, True);\n+         Set_Implicit_With (CW);\n \n          --  Set elaborate all desirable on copy and then append the copy to\n          --  the list of body with's and we are done."}, {"sha": "c1193d717d6da133802129c4f290ae3957f70a3b", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -1680,14 +1680,6 @@ package body Sinfo is\n       return Flag16 (N);\n    end Implicit_With;\n \n-   function Implicit_With_From_Instantiation\n-      (N : Node_Id) return Boolean is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_With_Clause);\n-      return Flag12 (N);\n-   end Implicit_With_From_Instantiation;\n-\n    function Interface_List\n       (N : Node_Id) return List_Id is\n    begin\n@@ -2766,6 +2758,14 @@ package body Sinfo is\n       return Node4 (N);\n    end Parent_Spec;\n \n+   function Parent_With\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      return Flag1 (N);\n+   end Parent_With;\n+\n    function Position\n       (N : Node_Id) return Node_Id is\n    begin\n@@ -5147,14 +5147,6 @@ package body Sinfo is\n       Set_Flag16 (N, Val);\n    end Set_Implicit_With;\n \n-   procedure Set_Implicit_With_From_Instantiation\n-      (N : Node_Id; Val : Boolean := True) is\n-   begin\n-      pragma Assert (False\n-        or else NT (N).Nkind = N_With_Clause);\n-      Set_Flag12 (N, Val);\n-   end Set_Implicit_With_From_Instantiation;\n-\n    procedure Set_Interface_List\n       (N : Node_Id; Val : List_Id) is\n    begin\n@@ -6233,6 +6225,14 @@ package body Sinfo is\n       Set_Node4 (N, Val); -- semantic field, no parent set\n    end Set_Parent_Spec;\n \n+   procedure Set_Parent_With\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_With_Clause);\n+      Set_Flag1 (N, Val);\n+   end Set_Parent_With;\n+\n    procedure Set_Position\n       (N : Node_Id; Val : Node_Id) is\n    begin"}, {"sha": "0702f3c600101bf372773a6ad0f843e5126628f3", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 39, "deletions": 25, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94ce49419aef75f3414edcaeba89e63c6c3be320/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=94ce49419aef75f3414edcaeba89e63c6c3be320", "patch": "@@ -1589,25 +1589,32 @@ package Sinfo is\n    --    expansion of the same attribute in the said context.\n \n    --  Hidden_By_Use_Clause (Elist5-Sem)\n-   --     An entity list present in use clauses that appear within\n-   --     instantiations. For the resolution of local entities, entities\n-   --     introduced by these use clauses have priority over global ones, and\n-   --     outer entities must be explicitly hidden/restored on exit.\n+   --    An entity list present in use clauses that appear within\n+   --    instantiations. For the resolution of local entities, entities\n+   --    introduced by these use clauses have priority over global ones,\n+   --    and outer entities must be explicitly hidden/restored on exit.\n \n    --  Implicit_With (Flag16-Sem)\n-   --    This flag is set in the N_With_Clause node that is implicitly\n-   --    generated for runtime units that are loaded by the expander or in\n-   --    GNATprove mode, and also for package System, if it is loaded\n-   --    implicitly by a use of the 'Address or 'Tag attribute.\n-   --    ??? There are other implicit with clauses as well.\n-\n-   --  Implicit_With_From_Instantiation (Flag12-Sem)\n-   --     Set in N_With_Clause nodes from generic instantiations.\n+   --    Present in N_With_Clause nodes. The flag indicates that the clause\n+   --    does not comes from source and introduces an implicit dependency on\n+   --    a particular unit. Such implicit with clauses are generated by:\n+   --\n+   --      * ABE mechanism - The static elaboration model of both the default\n+   --        and the legacy ABE mechanism use with clauses to encode implicit\n+   --        Elaborate[_All] pragmas.\n+   --\n+   --      * Analysis - A with clause for child unit A.B.C is equivalent to\n+   --        a series of clauses that with A, A.B, and A.B.C. Manipulation of\n+   --        contexts utilizes implicit with clauses to emulate the visibility\n+   --        of a particular unit.\n+   --\n+   --      * RTSfind - The compiler generates code which references entities\n+   --        from the runtime.\n \n    --  Import_Interface_Present (Flag16-Sem)\n-   --     This flag is set in an Interface or Import pragma if a matching\n-   --     pragma of the other kind is also present. This is used to avoid\n-   --     generating some unwanted error messages.\n+   --    This flag is set in an Interface or Import pragma if a matching\n+   --    pragma of the other kind is also present. This is used to avoid\n+   --    generating some unwanted error messages.\n \n    --  Includes_Infinities (Flag11-Sem)\n    --    This flag is present in N_Range nodes. It is set for the range of\n@@ -2217,6 +2224,12 @@ package Sinfo is\n    --    package specification. This field is Empty for library bodies (the\n    --    parent spec in this case can be found from the corresponding spec).\n \n+   --  Parent_With (Flag1-Sem)\n+   --    Present in N_With_Clause nodes. The flag indicates that the clause\n+   --    was generated for an ancestor unit to provide proper visibility. A\n+   --    with clause for child unit A.B.C produces two implicit parent with\n+   --    clauses for A and A.B.\n+\n    --  Premature_Use (Node5-Sem)\n    --    Present in N_Incomplete_Type_Declaration node. Used for improved\n    --    error diagnostics: if there is a premature usage of an incomplete\n@@ -6748,6 +6761,8 @@ package Sinfo is\n       --  Sloc points to first token of library unit name\n       --  Withed_Body (Node1-Sem)\n       --  Name (Node2)\n+      --  Private_Present (Flag15) set if with_clause has private keyword\n+      --  Limited_Present (Flag17) set if LIMITED is present\n       --  Next_Implicit_With (Node3-Sem)\n       --  Library_Unit (Node4-Sem)\n       --  Corresponding_Spec (Node5-Sem)\n@@ -6758,11 +6773,9 @@ package Sinfo is\n       --  Elaborate_All_Present (Flag14-Sem)\n       --  Elaborate_All_Desirable (Flag9-Sem)\n       --  Elaborate_Desirable (Flag11-Sem)\n-      --  Private_Present (Flag15) set if with_clause has private keyword\n       --  Implicit_With (Flag16-Sem)\n-      --  Implicit_With_From_Instantiation (Flag12-Sem)\n-      --  Limited_Present (Flag17) set if LIMITED is present\n       --  Limited_View_Installed (Flag18-Sem)\n+      --  Parent_With (Flag1-Sem)\n       --  Unreferenced_In_Spec (Flag7-Sem)\n       --  No_Entities_Ref_In_Spec (Flag8-Sem)\n \n@@ -9736,9 +9749,6 @@ package Sinfo is\n    function Implicit_With\n      (N : Node_Id) return Boolean;    -- Flag16\n \n-   function Implicit_With_From_Instantiation\n-     (N : Node_Id) return Boolean;    -- Flag12\n-\n    function Import_Interface_Present\n      (N : Node_Id) return Boolean;    -- Flag16\n \n@@ -10072,6 +10082,9 @@ package Sinfo is\n    function Parent_Spec\n      (N : Node_Id) return Node_Id;    -- Node4\n \n+   function Parent_With\n+     (N : Node_Id) return Boolean;    -- Flag1\n+\n    function Position\n      (N : Node_Id) return Node_Id;    -- Node2\n \n@@ -10837,9 +10850,6 @@ package Sinfo is\n    procedure Set_Implicit_With\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n-   procedure Set_Implicit_With_From_Instantiation\n-     (N : Node_Id; Val : Boolean := True);    -- Flag12\n-\n    procedure Set_Import_Interface_Present\n      (N : Node_Id; Val : Boolean := True);    -- Flag16\n \n@@ -11173,6 +11183,9 @@ package Sinfo is\n    procedure Set_Parent_Spec\n      (N : Node_Id; Val : Node_Id);            -- Node4\n \n+   procedure Set_Parent_With\n+     (N : Node_Id; Val : Boolean := True);    -- Flag1\n+\n    procedure Set_Position\n      (N : Node_Id; Val : Node_Id);            -- Node2\n \n@@ -13438,7 +13451,6 @@ package Sinfo is\n    pragma Inline (High_Bound);\n    pragma Inline (Identifier);\n    pragma Inline (Implicit_With);\n-   pragma Inline (Implicit_With_From_Instantiation);\n    pragma Inline (Interface_List);\n    pragma Inline (Interface_Present);\n    pragma Inline (Includes_Infinities);\n@@ -13552,6 +13564,7 @@ package Sinfo is\n    pragma Inline (Parameter_Specifications);\n    pragma Inline (Parameter_Type);\n    pragma Inline (Parent_Spec);\n+   pragma Inline (Parent_With);\n    pragma Inline (Position);\n    pragma Inline (Pragma_Argument_Associations);\n    pragma Inline (Pragma_Identifier);\n@@ -13915,6 +13928,7 @@ package Sinfo is\n    pragma Inline (Set_Parameter_Specifications);\n    pragma Inline (Set_Parameter_Type);\n    pragma Inline (Set_Parent_Spec);\n+   pragma Inline (Set_Parent_With);\n    pragma Inline (Set_Position);\n    pragma Inline (Set_Pragma_Argument_Associations);\n    pragma Inline (Set_Pragma_Identifier);"}]}