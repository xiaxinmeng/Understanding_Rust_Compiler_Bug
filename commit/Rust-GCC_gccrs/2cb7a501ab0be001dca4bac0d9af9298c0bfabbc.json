{"sha": "2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmNiN2E1MDFhYjBiZTAwMWRjYTRiYWMwZDlhZjkyOThjMGJmYWJiYw==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2019-01-12T22:18:27Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2019-01-12T22:18:27Z"}, "message": "[nvptx] Enable large vectors -- reduction testcases\n\nAdd various reduction test-cases with vector length 128.\n\n2019-01-12  Tom de Vries  <tdevries@suse.de>\n\n\t* testsuite/libgomp.oacc-c-c++-common/vred2d-128.c: New test.\n\t* testsuite/libgomp.oacc-fortran/gemm.f90: New test.\n\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-10.c: New test.\n\nFrom-SVN: r267892", "tree": {"sha": "c6c9e312e6cfda69dffc5eb81cea190a893c29a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c9e312e6cfda69dffc5eb81cea190a893c29a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e77f71eda4610040727c69a782b12976dd9228b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e77f71eda4610040727c69a782b12976dd9228b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e77f71eda4610040727c69a782b12976dd9228b"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "b785e8ad777b1e5fca36c969279dbdb2b4514393", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "patch": "@@ -1,3 +1,9 @@\n+2019-01-12  Tom de Vries  <tdevries@suse.de>\n+\n+\t* testsuite/libgomp.oacc-c-c++-common/vred2d-128.c: New test.\n+\t* testsuite/libgomp.oacc-fortran/gemm.f90: New test.\n+\t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-10.c: New test.\n+\n 2019-01-12  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/libgomp.oacc-c-c++-common/vector-length-128-7.c: New test."}, {"sha": "0658cfde7ad4ea800c15f7d728c40ebc0c1aad24", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vector-length-128-10.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvector-length-128-10.c?ref=2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do run } */\n+\n+#include <stdlib.h>\n+\n+#define N 1024\n+\n+unsigned int a[N];\n+unsigned int b[N];\n+unsigned int c[N];\n+unsigned int n = N;\n+\n+int\n+main (void)\n+{\n+  for (unsigned int i = 0; i < n; ++i)\n+    {\n+      a[i] = i % 3;\n+      b[i] = i % 5;\n+    }\n+\n+  unsigned int res = 1;\n+  unsigned long long res2 = 1;\n+#pragma acc parallel vector_length (128) copyin (a,b) reduction (+:res, res2) copy (res, res2)\n+  {\n+#pragma acc loop vector reduction (+:res, res2)\n+    for (unsigned int i = 0; i < n; i++)\n+      {\n+\tres += ((a[i] + b[i]) % 2);\n+\tres2 += ((a[i] + b[i]) % 2);\n+      }\n+  }\n+\n+  if (res != 478)\n+    abort ();\n+  if (res2 != 478)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "86171d456e0abe7495df79c9c59058089652a4f3", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/vred2d-128.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fvred2d-128.c?ref=2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "patch": "@@ -0,0 +1,55 @@\n+/* Test large vector lengths.  */\n+\n+#include <assert.h>\n+\n+#define n 10000\n+int a1[n], a2[n];\n+\n+#define gentest(name, outer, inner)\t\t\\\n+  void name ()\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+  long i, j, t1, t2, t3;\t\t\t\\\n+  _Pragma(outer)\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      t1 = 0;\t\t\t\t\t\\\n+      t2 = 0;\t\t\t\t\t\\\n+      _Pragma(inner)\t\t\t\t\\\n+      for (j = i; j < n; j++)\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  t1++;\t\t\t\t\t\\\n+\t  t2--;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\\\n+      a1[i] = t1;\t\t\t\t\\\n+      a2[i] = t2;\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      assert (a1[i] == n-i);\t\t\t\\\n+      assert (a2[i] == -(n-i));\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\\\n+\n+gentest (test1, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n+\t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n+\n+gentest (test2, \"acc parallel loop gang vector_length (128) firstprivate (t1, t2)\",\n+\t \"acc loop worker vector reduction(+:t1) reduction(-:t2)\")\n+\n+gentest (test3, \"acc parallel loop gang worker vector_length (128) firstprivate (t1, t2)\",\n+\t \"acc loop vector reduction(+:t1) reduction(-:t2)\")\n+\n+gentest (test4, \"acc parallel loop firstprivate (t1, t2)\",\n+\t \"acc loop reduction(+:t1) reduction(-:t2)\")\n+\n+\n+int\n+main ()\n+{\n+  test1 ();\n+  test2 ();\n+  test3 ();\n+  test4 ();\n+\n+  return 0;\n+}"}, {"sha": "de78148c7b36ca74a2d81313c46a3bd8a2fcbb11", "filename": "libgomp/testsuite/libgomp.oacc-fortran/gemm.f90", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2cb7a501ab0be001dca4bac0d9af9298c0bfabbc/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fgemm.f90?ref=2cb7a501ab0be001dca4bac0d9af9298c0bfabbc", "patch": "@@ -0,0 +1,79 @@\n+! Exercise three levels of parallelism using SGEMM from BLAS.\n+\n+! { dg-do run }\n+\n+! Explicitly set vector_length to 128 using a vector_length clause.\n+subroutine openacc_sgemm_128 (m, n, k, alpha, a, b, beta, c)\n+  integer :: m, n, k\n+  real :: alpha, beta\n+  real :: a(k,*), b(k,*), c(m,*)\n+\n+  integer :: i, j, l\n+  real :: temp\n+\n+  !$acc parallel loop copy(c(1:m,1:n)) copyin(a(1:k,1:m),b(1:k,1:n)) vector_length (128) firstprivate (temp)\n+  do j = 1, n\n+     !$acc loop\n+     do i = 1, m\n+        temp = 0.0\n+        !$acc loop reduction(+:temp)\n+        do l = 1, k\n+           temp = temp + a(l,i)*b(l,j)\n+        end do\n+        if(beta == 0.0) then\n+           c(i,j) = alpha*temp\n+        else\n+           c(i,j) = alpha*temp + beta*c(i,j)\n+        end if\n+     end do\n+  end do\n+end subroutine openacc_sgemm_128\n+\n+subroutine host_sgemm (m, n, k, alpha, a, b, beta, c)\n+  integer :: m, n, k\n+  real :: alpha, beta\n+  real :: a(k,*), b(k,*), c(m,*)\n+\n+  integer :: i, j, l\n+  real :: temp\n+\n+  do j = 1, n\n+     do i = 1, m\n+        temp = 0.0\n+        do l = 1, k\n+           temp = temp + a(l,i)*b(l,j)\n+        end do\n+        if(beta == 0.0) then\n+           c(i,j) = alpha*temp\n+        else\n+           c(i,j) = alpha*temp + beta*c(i,j)\n+        end if\n+     end do\n+  end do\n+end subroutine host_sgemm\n+\n+program main\n+  integer, parameter :: M = 100, N = 50, K = 2000\n+  real :: a(K, M), b(K, N), c(M, N), d (M, N), e (M, N)\n+  real alpha, beta\n+  integer i, j\n+\n+  a(:,:) = 1.0\n+  b(:,:) = 0.25\n+\n+  c(:,:) = 0.0\n+  d(:,:) = 0.0\n+  e(:,:) = 0.0\n+\n+  alpha = 1.05\n+  beta = 1.25\n+\n+  call openacc_sgemm_128 (M, N, K, alpha, a, b, beta, d)\n+  call host_sgemm (M, N, K, alpha, a, b, beta, e)\n+\n+  do i = 1, m\n+     do j = 1, n\n+        if (d(i,j) /= e(i,j)) call abort\n+     end do\n+  end do\n+end program main"}]}