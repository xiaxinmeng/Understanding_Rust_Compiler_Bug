{"sha": "15e7b93ba4256884c90198c678ed7eded4e73464", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVlN2I5M2JhNDI1Njg4NGM5MDE5OGM2NzhlZDdlZGVkNGU3MzQ2NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-18T21:34:50Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-09-21T22:49:22Z"}, "message": "analyzer: decls are not on the heap\n\nWhilst debugging the remaining state explosion in PR analyzer/93355\nI noticed that half of the states at an exploding program point had:\n  'malloc': {'&buf': 'non-heap'}\nwhereas the other half didn't, presumably depending on whether the path\nto each enode had used this local buffer:\n  char buf[400];\n\nThis patch tweaks malloc_state_machine::get_default_state to be smarter\nabout this, so that we can implicitly treat pointers to decls as\nnon-heap, preventing pointless differences between sm_state_map\ninstances.  With that, all of the states in question have equal (empty)\nmalloc sm-state - though the state explosion continues for other reasons.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93355\n\t* sm-malloc.cc (malloc_state_machine::get_default_state): Look at\n\tthe base region when considering pointers.  Treat pointers to\n\tdecls as being non-heap.", "tree": {"sha": "5fa02aa000936608becc8567a32f9542cec512fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fa02aa000936608becc8567a32f9542cec512fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15e7b93ba4256884c90198c678ed7eded4e73464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e7b93ba4256884c90198c678ed7eded4e73464", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15e7b93ba4256884c90198c678ed7eded4e73464", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15e7b93ba4256884c90198c678ed7eded4e73464/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db5967f1050eb2b45e920b13d495d92ba4f16f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7db5967f1050eb2b45e920b13d495d92ba4f16f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7db5967f1050eb2b45e920b13d495d92ba4f16f4"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "12b2383e4a7e1913594ebea89c07d35d2b3fe460", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15e7b93ba4256884c90198c678ed7eded4e73464/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15e7b93ba4256884c90198c678ed7eded4e73464/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=15e7b93ba4256884c90198c678ed7eded4e73464", "patch": "@@ -183,7 +183,9 @@ class malloc_state_machine : public state_machine\n     if (const region_svalue *ptr = sval->dyn_cast_region_svalue ())\n       {\n \tconst region *reg = ptr->get_pointee ();\n-\tif (reg->get_kind () == RK_STRING)\n+\tconst region *base_reg = reg->get_base_region ();\n+\tif (base_reg->get_kind () == RK_DECL\n+\t    || base_reg->get_kind () == RK_STRING)\n \t  return m_non_heap;\n       }\n     return m_start;"}]}