{"sha": "e895b4353e55d9c4bacb17be111deda3329ec095", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5NWI0MzUzZTU1ZDljNGJhY2IxN2JlMTExZGVkYTMzMjllYzA5NQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonber@gnat.com", "date": "2004-10-27T13:42:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2004-10-27T13:42:11Z"}, "message": "sem_ch6.adb (Analyze_Subprogram_Body): If body is a subunit for a different kind of stub (possibly wrong name for file)...\n\n2004-10-26  Ed Schonberg  <schonberg@gnat.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body): If body is a subunit for a\n\tdifferent kind of stub (possibly wrong name for file), do not check\n\tfor conformance.\n\t(Uses_Secondary_Stack): New subsidiary to Build_Body_To_Inline. If body\n\tincludes call to some function that returns an unconstrained type, do\n\tnot inline.\n\nFrom-SVN: r89671", "tree": {"sha": "07a384fbd35b7910bbc897e835f6145a35982fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a384fbd35b7910bbc897e835f6145a35982fdf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e895b4353e55d9c4bacb17be111deda3329ec095", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e895b4353e55d9c4bacb17be111deda3329ec095", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e895b4353e55d9c4bacb17be111deda3329ec095", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e895b4353e55d9c4bacb17be111deda3329ec095/comments", "author": null, "committer": null, "parents": [{"sha": "fc4039b93cf1fc1cb12db5cf06b7a9cd3ced2c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc4039b93cf1fc1cb12db5cf06b7a9cd3ced2c1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc4039b93cf1fc1cb12db5cf06b7a9cd3ced2c1a"}], "stats": {"total": 85, "additions": 69, "deletions": 16}, "files": [{"sha": "4b5d95153b67e52cd6205cc84310003db637572e", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 69, "deletions": 16, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e895b4353e55d9c4bacb17be111deda3329ec095/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e895b4353e55d9c4bacb17be111deda3329ec095/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=e895b4353e55d9c4bacb17be111deda3329ec095", "patch": "@@ -164,7 +164,7 @@ package body Sem_Ch6 is\n    --  visible entity with that name.\n \n    procedure Install_Entity (E : Entity_Id);\n-   --  Make single entity visible. Used for generic formals as well.\n+   --  Make single entity visible. Used for generic formals as well\n \n    procedure Install_Formals (Id : Entity_Id);\n    --  On entry to a subprogram body, make the formals visible. Note\n@@ -356,7 +356,7 @@ package body Sem_Ch6 is\n             end loop;\n          end if;\n \n-         --  Visible generic entity is callable within its own body.\n+         --  Visible generic entity is callable within its own body\n \n          Set_Ekind (Gen_Id, Ekind (Body_Id));\n          Set_Ekind (Body_Id, E_Subprogram_Body);\n@@ -366,7 +366,7 @@ package body Sem_Ch6 is\n \n          if Nkind (N) = N_Subprogram_Body_Stub then\n \n-            --  No body to analyze, so restore state of generic unit.\n+            --  No body to analyze, so restore state of generic unit\n \n             Set_Ekind (Gen_Id, Kind);\n             Set_Ekind (Body_Id, Kind);\n@@ -408,7 +408,7 @@ package body Sem_Ch6 is\n       End_Scope;\n       Check_Subprogram_Order (N);\n \n-      --  Outside of its body, unit is generic again.\n+      --  Outside of its body, unit is generic again\n \n       Set_Ekind (Gen_Id, Kind);\n       Generate_Reference (Gen_Id, Body_Id, 'b', Set_Ref => False);\n@@ -661,7 +661,7 @@ package body Sem_Ch6 is\n          Analyze (P);\n          Analyze_Call_And_Resolve;\n \n-      --  Anything else is an error.\n+      --  Anything else is an error\n \n       else\n          Error_Msg_N (\"Invalid procedure or entry call\", N);\n@@ -1136,6 +1136,8 @@ package body Sem_Ch6 is\n       if Nkind (Parent (N)) = N_Subunit\n         and then Comes_From_Source (N)\n         and then not Error_Posted (Body_Id)\n+        and then Nkind (Corresponding_Stub (Parent (N))) =\n+                                                N_Subprogram_Body_Stub\n       then\n          declare\n             Old_Id : constant Entity_Id :=\n@@ -1438,7 +1440,7 @@ package body Sem_Ch6 is\n       then\n          Set_Categorization_From_Scope (Designator, Scop);\n       else\n-         --  For a compilation unit, check for library-unit pragmas.\n+         --  For a compilation unit, check for library-unit pragmas\n \n          New_Scope (Designator);\n          Set_Categorization_From_Pragmas (N);\n@@ -1544,7 +1546,7 @@ package body Sem_Ch6 is\n       Stat_Count      : Integer := 0;\n \n       function Has_Excluded_Declaration (Decls : List_Id) return Boolean;\n-      --  Check for declarations that make inlining not worthwhile.\n+      --  Check for declarations that make inlining not worthwhile\n \n       function Has_Excluded_Statement   (Stats : List_Id) return Boolean;\n       --  Check for statements that make inlining not worthwhile: any\n@@ -1564,6 +1566,11 @@ package body Sem_Ch6 is\n       --  Remove it from body to inline. The analysis of the non-inlined\n       --  body will handle the pragma properly.\n \n+      function Uses_Secondary_Stack (Bod : Node_Id) return Boolean;\n+      --  If the body of the subprogram includes a call that returns an\n+      --  unconstrained type, the secondary stack is involved, and it\n+      --  is not worth inlining.\n+\n       ------------------------------\n       -- Has_Excluded_Declaration --\n       ------------------------------\n@@ -1765,6 +1772,40 @@ package body Sem_Ch6 is\n          end loop;\n       end Remove_Pragmas;\n \n+      --------------------------\n+      -- Uses_Secondary_Stack --\n+      --------------------------\n+\n+      function Uses_Secondary_Stack (Bod : Node_Id) return Boolean is\n+         function Check_Call (N : Node_Id) return Traverse_Result;\n+         --  Look for function calls that return an unconstrained type\n+\n+         ----------------\n+         -- Check_Call --\n+         ----------------\n+\n+         function Check_Call (N : Node_Id) return Traverse_Result is\n+         begin\n+            if Nkind (N) = N_Function_Call\n+              and then Is_Entity_Name (Name (N))\n+              and then Is_Composite_Type (Etype (Entity (Name (N))))\n+              and then not Is_Constrained (Etype (Entity (Name (N))))\n+            then\n+               Cannot_Inline\n+                 (\"cannot inline & (call returns unconstrained type)?\",\n+                    N, Subp);\n+               return Abandon;\n+            else\n+               return OK;\n+            end if;\n+         end Check_Call;\n+\n+         function Check_Calls is new Traverse_Func (Check_Call);\n+\n+      begin\n+         return Check_Calls (Bod) = Abandon;\n+      end Uses_Secondary_Stack;\n+\n    --  Start of processing for Build_Body_To_Inline\n \n    begin\n@@ -1884,13 +1925,21 @@ package body Sem_Ch6 is\n       Remove (Body_To_Analyze);\n \n       Expander_Mode_Restore;\n-      Set_Body_To_Inline (Decl, Original_Body);\n-      Set_Ekind (Defining_Entity (Original_Body), Ekind (Subp));\n-      Set_Is_Inlined (Subp);\n \n       if In_Instance then\n          Restore_Env;\n       end if;\n+\n+      --  If secondary stk used there is no point in inlining. We have\n+      --  already issued the warning in this case, so nothing to do.\n+\n+      if Uses_Secondary_Stack (Body_To_Analyze) then\n+         return;\n+      end if;\n+\n+      Set_Body_To_Inline (Decl, Original_Body);\n+      Set_Ekind (Defining_Entity (Original_Body), Ekind (Subp));\n+      Set_Is_Inlined (Subp);\n    end Build_Body_To_Inline;\n \n    -------------------\n@@ -1910,6 +1959,10 @@ package body Sem_Ch6 is\n          null;\n \n       elsif Is_Always_Inlined (Subp) then\n+\n+         --  Remove last character (question mark) to make this into an error,\n+         --  because the Inline_Always pragma cannot be obeyed.\n+\n          Error_Msg_NE (Msg (1 .. Msg'Length - 1), N, Subp);\n \n       elsif Ineffective_Inline_Warnings then\n@@ -3572,7 +3625,7 @@ package body Sem_Ch6 is\n       --  match explicit actuals with the same value.\n \n       function FCO (Op_Node, Call_Node : Node_Id) return Boolean;\n-      --  Compare an operator node with a function call.\n+      --  Compare an operator node with a function call\n \n       ---------\n       -- FCL --\n@@ -3938,7 +3991,7 @@ package body Sem_Ch6 is\n       --  body is replaced with the discriminal of the enclosing type.\n \n       function Conforming_Ranges (R1, R2 : Node_Id) return Boolean;\n-      --  Check both bounds.\n+      --  Check both bounds\n \n       function Conforming_Bounds (B1, B2 : Node_Id) return Boolean is\n       begin\n@@ -4243,7 +4296,7 @@ package body Sem_Ch6 is\n       B : Entity_Id;\n \n    begin\n-      --  Check that equality was properly defined.\n+      --  Check that equality was properly defined\n \n       if  No (Next_Formal (First_Formal (S))) then\n          return;\n@@ -4773,8 +4826,8 @@ package body Sem_Ch6 is\n                            if not Is_Dispatching_Operation (E) then\n                               Set_Is_Immediately_Visible (E, False);\n                            else\n-\n-                              --  work done in Override_Dispatching_Operation.\n+                              --  Work done in Override_Dispatching_Operation,\n+                              --  so nothing else need to be done here.\n \n                               null;\n                            end if;\n@@ -5201,7 +5254,7 @@ package body Sem_Ch6 is\n       while Present (Formal) loop\n          T := Etype (Formal);\n \n-         --  We never need an actual subtype for a constrained formal.\n+         --  We never need an actual subtype for a constrained formal\n \n          if Is_Constrained (T) then\n             AS_Needed := False;"}]}