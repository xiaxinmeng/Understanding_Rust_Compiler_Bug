{"sha": "6a4f3b312e2aa6016963a6befc986b93465be968", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE0ZjNiMzEyZTJhYTYwMTY5NjNhNmJlZmM5ODZiOTM0NjViZTk2OA==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2018-07-17T08:03:44Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-07-17T08:03:44Z"}, "message": "[Ada] Crash on case expression in build-in-place function\n\nThis patch modifies the recursive tree replication routine New_Copy_Tree to\ncreate new entities and remap old entities to the new ones for constructs in\nN_Expression_With_Actions nodes when requested by a caller. This in turn allows\nthe build-in-place mechanism to avoid sharing entities between the 4 variants\nof returns it generates.\n\n2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (Build_Heap_Or_Pool_Allocator): Ensure that scoping\n\tconstructs and entities within receive new entities when replicating a\n\ttree.\n\t(Expand_N_Extended_Return_Statement): Ensure that scoping constructs\n\tand entities within receive new entities when replicating a tree.\n\t* sem_util.adb (New_Copy_Tree): Add new formal Scopes_In_EWA_OK.\n\t(Visit_Entity): Visit entities within scoping constructs inside\n\texpression with actions nodes when requested by the caller. Add blocks,\n\tlabels, and procedures to the list of entities which need replication.\n\t* sem_util.ads (New_Copy_Tree): Add new formal Scopes_In_EWA_OK. Update\n\tthe comment on usage.\n\ngcc/testsuite/\n\n\t* gnat.dg/bip_case_expr.adb, gnat.dg/bip_case_expr_pkg.ads: New testcase.\n\nFrom-SVN: r262766", "tree": {"sha": "f1fb95d6b8c3299b2d69dba33e5faea1fa90d1c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1fb95d6b8c3299b2d69dba33e5faea1fa90d1c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a4f3b312e2aa6016963a6befc986b93465be968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f3b312e2aa6016963a6befc986b93465be968", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a4f3b312e2aa6016963a6befc986b93465be968", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a4f3b312e2aa6016963a6befc986b93465be968/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5a3c20f80eb2ca30c721fcab728529589c80c414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a3c20f80eb2ca30c721fcab728529589c80c414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a3c20f80eb2ca30c721fcab728529589c80c414"}], "stats": {"total": 119, "additions": 96, "deletions": 23}, "files": [{"sha": "d6cf6e78a88be19bd4027fcae285d6d2a0b8076e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -1,3 +1,17 @@\n+2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch6.adb (Build_Heap_Or_Pool_Allocator): Ensure that scoping\n+\tconstructs and entities within receive new entities when replicating a\n+\ttree.\n+\t(Expand_N_Extended_Return_Statement): Ensure that scoping constructs\n+\tand entities within receive new entities when replicating a tree.\n+\t* sem_util.adb (New_Copy_Tree): Add new formal Scopes_In_EWA_OK.\n+\t(Visit_Entity): Visit entities within scoping constructs inside\n+\texpression with actions nodes when requested by the caller. Add blocks,\n+\tlabels, and procedures to the list of entities which need replication.\n+\t* sem_util.ads (New_Copy_Tree): Add new formal Scopes_In_EWA_OK. Update\n+\tthe comment on usage.\n+\n 2018-07-17  Arnaud Charlet  <charlet@adacore.com>\n \n \t* doc/gnat_ugn/about_this_guide.rst,"}, {"sha": "ef6406d203eebfe74f10fb0d41f04a6e1842d808", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -4562,7 +4562,10 @@ package body Exp_Ch6 is\n                Fin_Mas_Id : constant Entity_Id :=\n                               Build_In_Place_Formal\n                                 (Func_Id, BIP_Finalization_Master);\n-               Orig_Expr  : constant Node_Id := New_Copy_Tree (Alloc_Expr);\n+               Orig_Expr  : constant Node_Id :=\n+                              New_Copy_Tree\n+                                (Source           => Alloc_Expr,\n+                                 Scopes_In_EWA_OK => True);\n                Stmts      : constant List_Id := New_List;\n                Desig_Typ  : Entity_Id;\n                Local_Id   : Entity_Id;\n@@ -5022,7 +5025,10 @@ package body Exp_Ch6 is\n                   Init_Assignment :=\n                     Make_Assignment_Statement (Loc,\n                       Name       => New_Occurrence_Of (Ret_Obj_Id, Loc),\n-                      Expression => New_Copy_Tree (Ret_Obj_Expr));\n+                      Expression =>\n+                        New_Copy_Tree\n+                          (Source           => Ret_Obj_Expr,\n+                           Scopes_In_EWA_OK => True));\n \n                   Set_Etype (Name (Init_Assignment), Etype (Ret_Obj_Id));\n                   Set_Assignment_OK (Name (Init_Assignment));\n@@ -5153,7 +5159,10 @@ package body Exp_Ch6 is\n                                 Subtype_Mark =>\n                                   New_Occurrence_Of\n                                     (Etype (Ret_Obj_Expr), Loc),\n-                                Expression   => New_Copy_Tree (Ret_Obj_Expr)));\n+                                Expression   =>\n+                                  New_Copy_Tree\n+                                    (Source           => Ret_Obj_Expr,\n+                                     Scopes_In_EWA_OK => True)));\n \n                      else\n                         --  If the function returns a class-wide type we cannot\n@@ -5193,7 +5202,11 @@ package body Exp_Ch6 is\n                      --  except we set Storage_Pool and Procedure_To_Call so\n                      --  it will use the user-defined storage pool.\n \n-                     Pool_Allocator := New_Copy_Tree (Heap_Allocator);\n+                     Pool_Allocator :=\n+                       New_Copy_Tree\n+                         (Source           => Heap_Allocator,\n+                          Scopes_In_EWA_OK => True);\n+\n                      pragma Assert (Alloc_For_BIP_Return (Pool_Allocator));\n \n                      --  Do not generate the renaming of the build-in-place\n@@ -5235,7 +5248,11 @@ package body Exp_Ch6 is\n                      --  allocation.\n \n                      else\n-                        SS_Allocator := New_Copy_Tree (Heap_Allocator);\n+                        SS_Allocator :=\n+                          New_Copy_Tree\n+                            (Source           => Heap_Allocator,\n+                             Scopes_In_EWA_OK => True);\n+\n                         pragma Assert (Alloc_For_BIP_Return (SS_Allocator));\n \n                         --  The heap and pool allocators are marked as"}, {"sha": "c8c914a093b4c0e1ada872c4454a365cc8eeab87", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -19505,10 +19505,11 @@ package body Sem_Util is\n    -------------------\n \n    function New_Copy_Tree\n-     (Source    : Node_Id;\n-      Map       : Elist_Id   := No_Elist;\n-      New_Sloc  : Source_Ptr := No_Location;\n-      New_Scope : Entity_Id  := Empty) return Node_Id\n+     (Source           : Node_Id;\n+      Map              : Elist_Id   := No_Elist;\n+      New_Sloc         : Source_Ptr := No_Location;\n+      New_Scope        : Entity_Id  := Empty;\n+      Scopes_In_EWA_OK : Boolean    := False) return Node_Id\n    is\n       --  This routine performs low-level tree manipulations and needs access\n       --  to the internals of the tree.\n@@ -20430,34 +20431,44 @@ package body Sem_Util is\n          pragma Assert (Nkind (Id) in N_Entity);\n          pragma Assert (not Is_Itype (Id));\n \n-         --  Nothing to do if the entity is not defined in the Actions list of\n-         --  an N_Expression_With_Actions node.\n+         --  Nothing to do when the entity is not defined in the Actions list\n+         --  of an N_Expression_With_Actions node.\n \n          if EWA_Level = 0 then\n             return;\n \n-         --  Nothing to do if the entity is defined within a scoping construct\n-         --  of an N_Expression_With_Actions node.\n+         --  Nothing to do when the entity is defined in a scoping construct\n+         --  within an N_Expression_With_Actions node, unless the caller has\n+         --  requested their replication.\n \n-         elsif EWA_Inner_Scope_Level > 0 then\n+         --  ??? should this restriction be eliminated?\n+\n+         elsif EWA_Inner_Scope_Level > 0 and then not Scopes_In_EWA_OK then\n             return;\n \n-         --  Nothing to do if the entity is not an object or a type. Relaxing\n+         --  Nothing to do when the entity does not denote a construct that\n+         --  may appear within an N_Expression_With_Actions node. Relaxing\n          --  this restriction leads to a performance penalty.\n \n-         elsif not Ekind_In (Id, E_Constant, E_Variable)\n+         --  ??? this list is flaky, and may hide dormant bugs\n+\n+         elsif not Ekind_In (Id, E_Block,\n+                                 E_Constant,\n+                                 E_Label,\n+                                 E_Procedure,\n+                                 E_Variable)\n            and then not Is_Type (Id)\n          then\n             return;\n \n-         --  Nothing to do if the entity was already visited\n+         --  Nothing to do when the entity was already visited\n \n          elsif NCT_Tables_In_Use\n            and then Present (NCT_New_Entities.Get (Id))\n          then\n             return;\n \n-         --  Nothing to do if the declaration node of the entity is not within\n+         --  Nothing to do when the declaration node of the entity is not in\n          --  the subtree being replicated.\n \n          elsif not In_Subtree"}, {"sha": "34d618e6400b8b740eea507126bcc662fa59a3a5", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -872,7 +872,7 @@ package Sem_Util is\n       Placement : out State_Space_Kind;\n       Pack_Id   : out Entity_Id);\n    --  Determine the state space placement of an item. Item_Id denotes the\n-   --  entity of an abstract state, object or package instantiation. Placement\n+   --  entity of an abstract state, object, or package instantiation. Placement\n    --  captures the precise placement of the item in the enclosing state space.\n    --  If the state space is that of a package, Pack_Id denotes its entity,\n    --  otherwise Pack_Id is Empty.\n@@ -2240,10 +2240,11 @@ package Sem_Util is\n    --  nodes (entities) either directly or indirectly using this function.\n \n    function New_Copy_Tree\n-     (Source    : Node_Id;\n-      Map       : Elist_Id   := No_Elist;\n-      New_Sloc  : Source_Ptr := No_Location;\n-      New_Scope : Entity_Id  := Empty) return Node_Id;\n+     (Source           : Node_Id;\n+      Map              : Elist_Id   := No_Elist;\n+      New_Sloc         : Source_Ptr := No_Location;\n+      New_Scope        : Entity_Id  := Empty;\n+      Scopes_In_EWA_OK : Boolean    := False) return Node_Id;\n    --  Perform a deep copy of the subtree rooted at Source. Entities, itypes,\n    --  and nodes are handled separately as follows:\n    --\n@@ -2313,6 +2314,10 @@ package Sem_Util is\n    --\n    --  Parameter New_Scope may be used to specify a new scope for all copied\n    --  entities and itypes.\n+   --\n+   --  Parameter Scopes_In_EWA_OK may be used to force the replication of both\n+   --  scoping entities and non-scoping entities found within expression with\n+   --  actions nodes.\n \n    function New_External_Entity\n      (Kind         : Entity_Kind;"}, {"sha": "c801b103c82b94b8c0fa4e382885f7d507cf9dda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -1,3 +1,7 @@\n+2018-07-17  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* gnat.dg/bip_case_expr.adb, gnat.dg/bip_case_expr_pkg.ads: New testcase.\n+\n 2018-07-16  Carl Love  <cel@us.ibm.com>\n \n \tPR target/86414"}, {"sha": "6e8a6875f15b5e64b3c2a65464c6c3f95d4c9360", "filename": "gcc/testsuite/gnat.dg/bip_case_expr.adb", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr.adb?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -0,0 +1,15 @@\n+--  { dg-do compile }\n+\n+with BIP_Case_Expr_Pkg; use BIP_Case_Expr_Pkg;\n+\n+procedure BIP_Case_Expr is\n+   function Make_Any_Lim_Ctrl (Flag : Boolean) return Lim_Ctrl is\n+   begin\n+      return (case Flag is\n+                 when True  => Make_Lim_Ctrl,\n+                 when False => Make_Lim_Ctrl);\n+   end;\n+\n+   Res : Lim_Ctrl := Make_Any_Lim_Ctrl (True);\n+\n+begin null; end BIP_Case_Expr;"}, {"sha": "3fb00092b4e8ac03c43f8a24889e96ce17640da1", "filename": "gcc/testsuite/gnat.dg/bip_case_expr_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a4f3b312e2aa6016963a6befc986b93465be968/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fbip_case_expr_pkg.ads?ref=6a4f3b312e2aa6016963a6befc986b93465be968", "patch": "@@ -0,0 +1,7 @@\n+with Ada.Finalization; use Ada.Finalization;\n+\n+package BIP_Case_Expr_Pkg is\n+   type Lim_Ctrl is new Limited_Controlled with null record;\n+\n+   function Make_Lim_Ctrl return Lim_Ctrl;\n+end BIP_Case_Expr_Pkg;"}]}