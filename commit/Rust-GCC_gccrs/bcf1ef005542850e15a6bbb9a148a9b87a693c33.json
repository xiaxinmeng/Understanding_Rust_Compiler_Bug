{"sha": "bcf1ef005542850e15a6bbb9a148a9b87a693c33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmMWVmMDA1NTQyODUwZTE1YTZiYmI5YTE0OGE5Yjg3YTY5M2MzMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-01-03T16:38:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-01-03T16:38:29Z"}, "message": "tree-data-ref.c (dump_conflict_function): Use less vertical spacing.\n\n2013-01-03  Richard Biener  <rguenther@suse.de>\n\n\t* tree-data-ref.c (dump_conflict_function): Use less vertical\n\tspacing.\n\t(dump_subscript): Adjust.\n\t(finalize_ddr_dependent): Do not dump redundant info.\n\t(analyze_siv_subscript): Adjust.\n\t(subscript_dependence_tester): Likewise.\n\t(compute_affine_dependence): Likewise.\n\nFrom-SVN: r194858", "tree": {"sha": "f6e063dce521057ebd890a5ae1826e2f406e0eb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6e063dce521057ebd890a5ae1826e2f406e0eb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf1ef005542850e15a6bbb9a148a9b87a693c33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf1ef005542850e15a6bbb9a148a9b87a693c33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf1ef005542850e15a6bbb9a148a9b87a693c33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf1ef005542850e15a6bbb9a148a9b87a693c33/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8988cde62b4b1edc8fa6cdee6e02b09c6c9f15d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8988cde62b4b1edc8fa6cdee6e02b09c6c9f15d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8988cde62b4b1edc8fa6cdee6e02b09c6c9f15d4"}], "stats": {"total": 65, "additions": 29, "deletions": 36}, "files": [{"sha": "033d2720ad314873adc73c615bbcd7af71bbdbfc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1ef005542850e15a6bbb9a148a9b87a693c33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1ef005542850e15a6bbb9a148a9b87a693c33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bcf1ef005542850e15a6bbb9a148a9b87a693c33", "patch": "@@ -1,3 +1,13 @@\n+2013-01-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-data-ref.c (dump_conflict_function): Use less vertical\n+\tspacing.\n+\t(dump_subscript): Adjust.\n+\t(finalize_ddr_dependent): Do not dump redundant info.\n+\t(analyze_siv_subscript): Adjust.\n+\t(subscript_dependence_tester): Likewise.\n+\t(compute_affine_dependence): Likewise.\n+\n 2013-01-03  Richard Biener  <rguenther@suse.de>\n \n \tRevert"}, {"sha": "75957d06d98da6d195fd875fad301f6de2d2f469", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf1ef005542850e15a6bbb9a148a9b87a693c33/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf1ef005542850e15a6bbb9a148a9b87a693c33/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=bcf1ef005542850e15a6bbb9a148a9b87a693c33", "patch": "@@ -216,16 +216,18 @@ dump_conflict_function (FILE *outf, conflict_function *cf)\n   unsigned i;\n \n   if (cf->n == NO_DEPENDENCE)\n-    fprintf (outf, \"no dependence\\n\");\n+    fprintf (outf, \"no dependence\");\n   else if (cf->n == NOT_KNOWN)\n-    fprintf (outf, \"not known\\n\");\n+    fprintf (outf, \"not known\");\n   else\n     {\n       for (i = 0; i < cf->n; i++)\n \t{\n+\t  if (i != 0)\n+\t    fprintf (outf, \" \");\n \t  fprintf (outf, \"[\");\n \t  dump_affine_function (outf, cf->fns[i]);\n-\t  fprintf (outf, \"]\\n\");\n+\t  fprintf (outf, \"]\");\n \t}\n     }\n }\n@@ -243,24 +245,23 @@ dump_subscript (FILE *outf, struct subscript *subscript)\n   if (CF_NONTRIVIAL_P (cf))\n     {\n       tree last_iteration = SUB_LAST_CONFLICT (subscript);\n-      fprintf (outf, \"  last_conflict: \");\n-      print_generic_stmt (outf, last_iteration, 0);\n+      fprintf (outf, \"\\n  last_conflict: \");\n+      print_generic_expr (outf, last_iteration, 0);\n     }\n \n   cf = SUB_CONFLICTS_IN_B (subscript);\n-  fprintf (outf, \"  iterations_that_access_an_element_twice_in_B: \");\n+  fprintf (outf, \"\\n  iterations_that_access_an_element_twice_in_B: \");\n   dump_conflict_function (outf, cf);\n   if (CF_NONTRIVIAL_P (cf))\n     {\n       tree last_iteration = SUB_LAST_CONFLICT (subscript);\n-      fprintf (outf, \"  last_conflict: \");\n-      print_generic_stmt (outf, last_iteration, 0);\n+      fprintf (outf, \"\\n  last_conflict: \");\n+      print_generic_expr (outf, last_iteration, 0);\n     }\n \n-  fprintf (outf, \"  (Subscript distance: \");\n-  print_generic_stmt (outf, SUB_DISTANCE (subscript), 0);\n-  fprintf (outf, \"  )\\n\");\n-  fprintf (outf, \" )\\n\");\n+  fprintf (outf, \"\\n  (Subscript distance: \");\n+  print_generic_expr (outf, SUB_DISTANCE (subscript), 0);\n+  fprintf (outf, \" ))\\n\");\n }\n \n /* Print the classic direction vector DIRV to OUTF.  */\n@@ -1507,13 +1508,6 @@ static inline void\n finalize_ddr_dependent (struct data_dependence_relation *ddr,\n \t\t\ttree chrec)\n {\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    {\n-      fprintf (dump_file, \"(dependence classified: \");\n-      print_generic_expr (dump_file, chrec, 0);\n-      fprintf (dump_file, \")\\n\");\n-    }\n-\n   DDR_ARE_DEPENDENT (ddr) = chrec;\n   free_subscripts (DDR_SUBSCRIPTS (ddr));\n   DDR_SUBSCRIPTS (ddr).create (0);\n@@ -2647,8 +2641,7 @@ analyze_subscript_affine_affine (tree chrec_a,\n       dump_conflict_function (dump_file, *overlaps_a);\n       fprintf (dump_file, \")\\n  (overlaps_b = \");\n       dump_conflict_function (dump_file, *overlaps_b);\n-      fprintf (dump_file, \")\\n\");\n-      fprintf (dump_file, \")\\n\");\n+      fprintf (dump_file, \"))\\n\");\n     }\n }\n \n@@ -2769,7 +2762,7 @@ analyze_siv_subscript (tree chrec_a,\n     {\n     siv_subscript_dontknow:;\n       if (dump_file && (dump_flags & TDF_DETAILS))\n-\tfprintf (dump_file, \"siv test failed: unimplemented.\\n\");\n+\tfprintf (dump_file, \"  siv test failed: unimplemented\");\n       *overlaps_a = conflict_fn_not_known ();\n       *overlaps_b = conflict_fn_not_known ();\n       *last_conflicts = chrec_dont_know;\n@@ -2994,8 +2987,7 @@ analyze_overlapping_iterations (tree chrec_a,\n       dump_conflict_function (dump_file, *overlap_iterations_a);\n       fprintf (dump_file, \")\\n  (overlap_iterations_b = \");\n       dump_conflict_function (dump_file, *overlap_iterations_b);\n-      fprintf (dump_file, \")\\n\");\n-      fprintf (dump_file, \")\\n\");\n+      fprintf (dump_file, \"))\\n\");\n     }\n }\n \n@@ -3554,19 +3546,12 @@ static void\n subscript_dependence_tester (struct data_dependence_relation *ddr,\n \t\t\t     struct loop *loop_nest)\n {\n-\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"(subscript_dependence_tester \\n\");\n-\n   if (subscript_dependence_tester_1 (ddr, DDR_A (ddr), DDR_B (ddr), loop_nest))\n     dependence_stats.num_dependence_dependent++;\n \n   compute_subscript_distance (ddr);\n   if (build_classic_dist_vector (ddr, loop_nest))\n     build_classic_dir_vector (ddr);\n-\n-  if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \")\\n\");\n }\n \n /* Returns true when all the access functions of A are affine or\n@@ -4146,11 +4131,11 @@ compute_affine_dependence (struct data_dependence_relation *ddr,\n       if (access_functions_are_affine_or_constant_p (dra, loop_nest)\n \t  && access_functions_are_affine_or_constant_p (drb, loop_nest))\n \t{\n+\t  subscript_dependence_tester (ddr, loop_nest);\n+\n \t  if (flag_check_data_deps)\n \t    {\n-\t      /* Compute the dependences using the first algorithm.  */\n-\t      subscript_dependence_tester (ddr, loop_nest);\n-\n+\t      /* Dump the dependences from the first algorithm.  */\n \t      if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t{\n \t\t  fprintf (dump_file, \"\\n\\nBanerjee Analyzer\\n\");\n@@ -4186,8 +4171,6 @@ compute_affine_dependence (struct data_dependence_relation *ddr,\n \t\t\t\t\t\t  dir_vects));\n \t\t}\n \t    }\n-\t  else\n-\t    subscript_dependence_tester (ddr, loop_nest);\n \t}\n \n       /* As a last case, if the dependence cannot be determined, or if"}]}