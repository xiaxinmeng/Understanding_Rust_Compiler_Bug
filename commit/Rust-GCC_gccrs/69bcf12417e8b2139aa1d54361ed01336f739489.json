{"sha": "69bcf12417e8b2139aa1d54361ed01336f739489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliY2YxMjQxN2U4YjIxMzlhYTFkNTQzNjFlZDAxMzM2ZjczOTQ4OQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-10-19T23:05:15Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-10-19T23:05:15Z"}, "message": "mkcheck.in (static_fail): Remove older memory limit functionality.\n\n\n2001-10-19  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* mkcheck.in (static_fail): Remove older memory limit functionality.\n\tDisable E_TIME due to formatting issues.\n\n\t* README: Update.\n\nFrom-SVN: r46367", "tree": {"sha": "c996c6f8721410e75cc70376d8549314ff0afbab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c996c6f8721410e75cc70376d8549314ff0afbab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69bcf12417e8b2139aa1d54361ed01336f739489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bcf12417e8b2139aa1d54361ed01336f739489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69bcf12417e8b2139aa1d54361ed01336f739489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69bcf12417e8b2139aa1d54361ed01336f739489/comments", "author": null, "committer": null, "parents": [{"sha": "32fb7c9d6c75fdb918a1d1b0f30f79fa41423025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32fb7c9d6c75fdb918a1d1b0f30f79fa41423025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32fb7c9d6c75fdb918a1d1b0f30f79fa41423025"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "f03e86ee29c2624224b4bbcee2692a916ba4d7b5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=69bcf12417e8b2139aa1d54361ed01336f739489", "patch": "@@ -1,3 +1,10 @@\n+2001-10-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* mkcheck.in (static_fail): Remove older memory limit functionality.\n+\tDisable E_TIME due to formatting issues.\n+\n+\t* README: Update.\n+\t\n 2001-10-19  Brendan Kehoe  <brendan@zen.org>\n \n         * include/bits/std_complex.h: Default initialize second argument"}, {"sha": "3ace755fa0ee95376df8b92b24ea44bbe86787fe", "filename": "libstdc++-v3/README", "status": "modified", "additions": 10, "deletions": 24, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2FREADME", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2FREADME", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FREADME?ref=69bcf12417e8b2139aa1d54361ed01336f739489", "patch": "@@ -24,11 +24,7 @@ It has subdirectories:\n \n   include/std\n      Files meant to be found by #include <name> directives in\n-     standard-conforming user programs.  These headers are not\n-     referred to by other headers, because such dependencies\n-     confuse Make (leading it to delete them, all too often).\n-     Installations may substitute symbolic links in place of\n-     these files.\n+     standard-conforming user programs.  \n \n   include/ext\n      Headers that define extensions to the standard library.  No\n@@ -38,13 +34,6 @@ It has subdirectories:\n      Headers provided for backward compatibility, such as <iostream.h>.\n      They are not used in this library.\n \n-  include/c_shadow\n-     Headers intended to shadow standard C headers provided by an\n-     underlying OS or C library, and other headers depended on directly\n-     by C++ headers (e.g. unistd.h).  These are meant to wrap the names\n-     defined there into the _C_legacy namespace.\n-     [NB: this can be enabled via --enable-cheaders=c_shadow]\n-\n   include/c\n      Headers intended to directly include standard C headers. \n      [NB: this can be enabled via --enable-cheaders=c]\n@@ -54,6 +43,13 @@ It has subdirectories:\n      names into the std:: namespace.\n      [NB: this is the default, and is the same as --enable-cheaders=c_std]\n \n+  include/c_shadow\n+     Headers intended to shadow standard C headers provided by an\n+     underlying OS or C library, and other headers depended on directly\n+     by C++ headers (e.g. unistd.h).  These are meant to wrap the names\n+     defined there into the _C_legacy namespace.\n+     [NB: this can be enabled via --enable-cheaders=c_shadow]\n+\n   src\n      Files that are used in constructing the library, but are not\n      installed.\n@@ -74,28 +70,18 @@ Currently these are:\n \n   config/cpu\n   config/os\n+  config/io\n+  config/locale\n \n Files needed only to construct the library, but not installed,\n are in src/.  Files to be copied as part of an installation are\n all found in the subdirectories mentioned above.  (A configure\n script may link files from another directory into one of these.)\n \n-In a normal installation the bits/ directory is copied\n-under the std/ directory, and arranged to be searched only\n-when an include directive specifies a filename of \"bits/...\"\n-or <bits/...>.  When building the library, we use\n-\n-  -I. -Iinclude/std -Iinclude -Iconfig/os/* -Iconfig/cpu/*\n-\n-to get the same effect.\n-\n Note that glibc also has a bits/ subdirectory.  We will either\n need to be careful not to collide with names in its bits/\n directory; or rename bits to (e.g.) cppbits/.\n \n-To install libstdc++ you need GNU make.  The makefiles do not work with\n-any other make.\n-\n In files throughout the system, lines marked with an \"XXX\" indicate\n a bug or incompletely-implemented feature.  Lines marked \"XXX MT\"\n indicate a place that may require attention for multi-thread safety."}, {"sha": "c65a144c2c888781ab2b1fd05547f6c407eb5107", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69bcf12417e8b2139aa1d54361ed01336f739489/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=69bcf12417e8b2139aa1d54361ed01336f739489", "patch": "@@ -78,9 +78,6 @@ LOG_FILE=\"$TEST_DIR/$(date +%Y%m%d)-mkchecklog.txt\"\n # the names of the specific test files to be run\n TESTS_FILE=\"$TEST_DIR/$(date +%Y%m%d)-mkcheckfiles.txt\"\n \n-# the heap size and virtual mem limit for testsuite binaries\n-# See http://gcc.gnu.org/ml/libstdc++/2000-10/msg00029.html\n-MAX_MEM_USAGE=16384\n \n #\n # 2: clean, make files, append general test info\n@@ -339,18 +336,12 @@ test_file()\n         # printed by the executable will be lost and cannot be redirected,\n         # because we need to capture the output of 'time'.  Bummer.\n         TIMEFORMAT='timemark %R'\n-        E_TIME_TEXT=\"$(exec 2>&1;                                        \\\n-                     ulimit -d $MAX_MEM_USAGE; ulimit -v $MAX_MEM_USAGE; \\\n-                     time $LTEXE $EXENAME)\"\n+        E_TIME_TEXT=\"$(exec 2>&1; time $LTEXE $EXENAME)\"\n         E_ABNORMAL_TERMINATION=$?\n-        E_TIME=\"$(echo $E_TIME_TEXT | awk '{print $2}')\"\n-        # joining those two commands does not work due to quoting problems:\n-        #E_TIME=\"$(exec 2>&1; time $EXENAME | awk '{print $2}')\"\n-        # this will work as a fallback on certain systems...?\n-        #E_TIME=$(exec 2>&1; time $EXENAME | cut -d ' ' -f 2)\n  \n         if [ \"$E_ABNORMAL_TERMINATION\" -ne 0 ]; then\n             RESULT='-r'\n+\t    E_TIME=\"0\"\n             rm -f ./*core\n             # sometimes you want to save all core files for review:\n             #mv ./core $EXENAME.core\n@@ -359,10 +350,13 @@ test_file()\n             #mv ./core* $EXENAME.core\n         else\n             test_for_output\n+\t    # XXX This doesn't always result in a number.\n+\t    # E_TIME=\"$(echo $E_TIME_TEXT | awk '{print $2}')\"\n+\t    E_TIME=\"0\"\n         fi\n \n         # sometimes you want to save all failing exe files for review:\n-        if [ \"$RESULT\" = \"+\" ]; then\n+        if [ \"$RESULT\" = '+' ]; then\n             rm \"$EXENAME\"\n         fi\n     else"}]}