{"sha": "5b369a61484c52ea0298cfab11858c3fff8bcc00", "node_id": "C_kwDOANBUbNoAKDViMzY5YTYxNDg0YzUyZWEwMjk4Y2ZhYjExODU4YzNmZmY4YmNjMDA", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-04T16:15:26Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-04T16:15:26Z"}, "message": "Fix ICE in generic subsitution of enums containing dataless variants\n\nDataless variants do not contain fields that can be substituted, which then\nhits an assertion on access of the fields for the variant. This patch adds\na guard against the substitution of dataless variants. We could have\nremoved the assertion which would have also been a good fix but keeping the\nassertion for now is very helpful in debugging issues.\n\nFixs #851", "tree": {"sha": "e7645e6d3c0f017d62e04917b85174fb0a2b446a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7645e6d3c0f017d62e04917b85174fb0a2b446a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b369a61484c52ea0298cfab11858c3fff8bcc00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b369a61484c52ea0298cfab11858c3fff8bcc00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b369a61484c52ea0298cfab11858c3fff8bcc00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b369a61484c52ea0298cfab11858c3fff8bcc00/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f6be3ee483c9895b4b5187a44b3e1c8be2ba63"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "f141a4118c84d9a7565bc6a9db1b4e2316e0e00f", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=5b369a61484c52ea0298cfab11858c3fff8bcc00", "patch": "@@ -822,6 +822,9 @@ ADTType::handle_substitions (SubstitutionArgumentMappings subst_mappings)\n \n   for (auto &variant : adt->get_variants ())\n     {\n+      if (variant->is_dataless_variant ())\n+\tcontinue;\n+\n       for (auto &field : variant->get_fields ())\n \t{\n \t  bool ok = ::Rust::TyTy::handle_substitions (subst_mappings, field);"}, {"sha": "40c06a577831be64fc8375f328d1a82d9b579898", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=5b369a61484c52ea0298cfab11858c3fff8bcc00", "patch": "@@ -1069,6 +1069,8 @@ class VariantDef\n   HirId get_id () const { return id; }\n \n   VariantType get_variant_type () const { return type; }\n+  bool is_data_variant () const { return type != VariantType::NUM; }\n+  bool is_dataless_variant () const { return type == VariantType::NUM; }\n \n   std::string get_identifier () const { return identifier; }\n   int get_discriminant () const { return discriminant; }"}, {"sha": "3881c7a2ada1ce080e65e7d413102d884fd34aa9", "filename": "gcc/testsuite/rust/execute/torture/issue-851.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b369a61484c52ea0298cfab11858c3fff8bcc00/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fissue-851.rs?ref=5b369a61484c52ea0298cfab11858c3fff8bcc00", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-output \"Result: 123\\n\" } */\n+extern \"C\" {\n+    fn printf(s: *const i8, ...);\n+}\n+\n+enum Foo<T> {\n+    A,\n+    B(T),\n+}\n+\n+fn inspect(a: Foo<i32>) {\n+    match a {\n+        Foo::A => unsafe {\n+            let a = \"A\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c);\n+        },\n+        Foo::B(x) => unsafe {\n+            let a = \"Result: %i\\n\\0\";\n+            let b = a as *const str;\n+            let c = b as *const i8;\n+\n+            printf(c, x);\n+        },\n+    }\n+}\n+\n+fn main() -> i32 {\n+    let a = Foo::B(123);\n+    inspect(a);\n+\n+    0\n+}"}]}