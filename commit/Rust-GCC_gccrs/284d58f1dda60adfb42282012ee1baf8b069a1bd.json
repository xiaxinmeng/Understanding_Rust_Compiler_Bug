{"sha": "284d58f1dda60adfb42282012ee1baf8b069a1bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg0ZDU4ZjFkZGE2MGFkZmI0MjI4MjAxMmVlMWJhZjhiMDY5YTFiZA==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2011-01-06T16:08:24Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2011-01-06T16:08:24Z"}, "message": "re PR fortran/33117 (Improve error message for generic interface with subroutines & functions)\n\ngcc/fortran/:\n2011-01-06  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/33117\n\tPR fortran/46478\n\t* parse.c (parse_interface): Remove check for procedure types.\n\t* interface.c (check_interface0): Verify that procedures are\n\teither all SUBROUTINEs or all FUNCTIONs.\n\ngcc/testsuite/:\n2011-01-06  Daniel Franke  <franke.daniel@gmail.com>\n\n\tPR fortran/33117\n\tPR fortran/46478\n\t* gfortran.dg/interface_33.f90: New test.\n\nFrom-SVN: r168542", "tree": {"sha": "6107feaeaefcf653db2c2565c6b9daf129b653e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6107feaeaefcf653db2c2565c6b9daf129b653e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/284d58f1dda60adfb42282012ee1baf8b069a1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284d58f1dda60adfb42282012ee1baf8b069a1bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/284d58f1dda60adfb42282012ee1baf8b069a1bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/284d58f1dda60adfb42282012ee1baf8b069a1bd/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "028dbdf4974d803868feb3a44e978d138cd37338", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/028dbdf4974d803868feb3a44e978d138cd37338", "html_url": "https://github.com/Rust-GCC/gccrs/commit/028dbdf4974d803868feb3a44e978d138cd37338"}], "stats": {"total": 126, "additions": 86, "deletions": 40}, "files": [{"sha": "3181e5e1a354262ce3f6d3b39b981825fc88c2d8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=284d58f1dda60adfb42282012ee1baf8b069a1bd", "patch": "@@ -1,3 +1,11 @@\n+2011-01-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/33117\n+\tPR fortran/46478\n+\t* parse.c (parse_interface): Remove check for procedure types.\n+\t* interface.c (check_interface0): Verify that procedures are\n+\teither all SUBROUTINEs or all FUNCTIONs.\n+\n 2011-01-05  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47180"}, {"sha": "1febb5d8587f1079ca20a59e39a44e4d6935d362", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=284d58f1dda60adfb42282012ee1baf8b069a1bd", "patch": "@@ -1092,30 +1092,42 @@ gfc_compare_interfaces (gfc_symbol *s1, gfc_symbol *s2, const char *name2,\n \n \n /* Given a pointer to an interface pointer, remove duplicate\n-   interfaces and make sure that all symbols are either functions or\n-   subroutines.  Returns nonzero if something goes wrong.  */\n+   interfaces and make sure that all symbols are either functions\n+   or subroutines, and all of the same kind.  Returns nonzero if\n+   something goes wrong.  */\n \n static int\n check_interface0 (gfc_interface *p, const char *interface_name)\n {\n   gfc_interface *psave, *q, *qlast;\n \n   psave = p;\n-  /* Make sure all symbols in the interface have been defined as\n-     functions or subroutines.  */\n   for (; p; p = p->next)\n-    if ((!p->sym->attr.function && !p->sym->attr.subroutine)\n-\t|| !p->sym->attr.if_source)\n-      {\n-\tif (p->sym->attr.external)\n-\t  gfc_error (\"Procedure '%s' in %s at %L has no explicit interface\",\n-\t\t     p->sym->name, interface_name, &p->sym->declared_at);\n-\telse\n-\t  gfc_error (\"Procedure '%s' in %s at %L is neither function nor \"\n-\t\t     \"subroutine\", p->sym->name, interface_name,\n-\t\t     &p->sym->declared_at);\n-\treturn 1;\n-      }\n+    {\n+      /* Make sure all symbols in the interface have been defined as\n+\t functions or subroutines.  */\n+      if ((!p->sym->attr.function && !p->sym->attr.subroutine)\n+\t  || !p->sym->attr.if_source)\n+\t{\n+\t  if (p->sym->attr.external)\n+\t    gfc_error (\"Procedure '%s' in %s at %L has no explicit interface\",\n+\t\t       p->sym->name, interface_name, &p->sym->declared_at);\n+\t  else\n+\t    gfc_error (\"Procedure '%s' in %s at %L is neither function nor \"\n+\t\t       \"subroutine\", p->sym->name, interface_name,\n+\t\t      &p->sym->declared_at);\n+\t  return 1;\n+\t}\n+\n+      /* Verify that procedures are either all SUBROUTINEs or all FUNCTIONs.  */\n+      if ((psave->sym->attr.function && !p->sym->attr.function)\n+\t  || (psave->sym->attr.subroutine && !p->sym->attr.subroutine))\n+\t{\n+\t  gfc_error (\"In %s at %L procedures must be either all SUBROUTINEs\"\n+\t\t     \" or all FUNCTIONs\", interface_name, &p->sym->declared_at);\n+\t  return 1;\n+\t}\n+    }\n   p = psave;\n \n   /* Remove duplicate interfaces in this interface list.  */"}, {"sha": "58d8b43065e0bcc62108977457685e18e60560c6", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=284d58f1dda60adfb42282012ee1baf8b069a1bd", "patch": "@@ -2263,32 +2263,16 @@ parse_interface (void)\n     }\n \n \n-  /* Make sure that a generic interface has only subroutines or\n-     functions and that the generic name has the right attribute.  */\n-  if (current_interface.type == INTERFACE_GENERIC)\n+  /* Make sure that the generic name has the right attribute.  */\n+  if (current_interface.type == INTERFACE_GENERIC\n+      && current_state == COMP_NONE)\n     {\n-      if (current_state == COMP_NONE)\n-\t{\n-\t  if (new_state == COMP_FUNCTION && sym)\n-\t    gfc_add_function (&sym->attr, sym->name, NULL);\n-\t  else if (new_state == COMP_SUBROUTINE && sym)\n-\t    gfc_add_subroutine (&sym->attr, sym->name, NULL);\n-\n-\t  current_state = new_state;\n-\t}\n-      else\n-\t{\n-\t  if (new_state != current_state)\n-\t    {\n-\t      if (new_state == COMP_SUBROUTINE)\n-\t\tgfc_error (\"SUBROUTINE at %C does not belong in a \"\n-\t\t\t   \"generic function interface\");\n+      if (new_state == COMP_FUNCTION && sym)\n+\tgfc_add_function (&sym->attr, sym->name, NULL);\n+      else if (new_state == COMP_SUBROUTINE && sym)\n+\tgfc_add_subroutine (&sym->attr, sym->name, NULL);\n \n-\t      if (new_state == COMP_FUNCTION)\n-\t\tgfc_error (\"FUNCTION at %C does not belong in a \"\n-\t\t\t   \"generic subroutine interface\");\n-\t    }\n-\t}\n+      current_state = new_state;\n     }\n \n   if (current_interface.type == INTERFACE_ABSTRACT)"}, {"sha": "f6e442355cca4efabc885bb7f5cbb9d223c04866", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=284d58f1dda60adfb42282012ee1baf8b069a1bd", "patch": "@@ -1,3 +1,9 @@\n+2011-01-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\tPR fortran/33117\n+\tPR fortran/46478\n+\t* gfortran.dg/interface_33.f90: New test.\n+\n 2011-01-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/47150"}, {"sha": "f1475b0d82c7be69e646efeb4a3b62ed32f818d9", "filename": "gcc/testsuite/gfortran.dg/interface_33.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/284d58f1dda60adfb42282012ee1baf8b069a1bd/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finterface_33.f90?ref=284d58f1dda60adfb42282012ee1baf8b069a1bd", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do \"compile\" }\n+!\n+! PR fortran/33117, PR fortran/46478\n+! Procedures of a generic interface must be either\n+! all SUBROUTINEs or all FUNCTIONs.\n+!\n+\n+!\n+! PR fortran/33117\n+!\n+module m1\n+  interface gen\n+    subroutine sub()            ! dg-error { \"all SUBROUTINEs or all FUNCTIONs\" }\n+    end subroutine sub\n+    function bar()\n+      real :: bar\n+    end function bar\n+  end interface gen\n+end module\n+\n+!\n+! PR fortran/46478\n+!\n+MODULE m2\n+  INTERFACE new_name\n+    MODULE PROCEDURE func_name\n+    MODULE PROCEDURE subr_name\n+  END INTERFACE\n+CONTAINS\n+   LOGICAL FUNCTION func_name()  ! dg-error { \"all SUBROUTINEs or all FUNCTIONs\" }\n+   END FUNCTION\n+   SUBROUTINE subr_name()\n+   END SUBROUTINE\n+END MODULE\n+\n+! { dg-final { cleanup-modules \"m1 m2\" } }"}]}