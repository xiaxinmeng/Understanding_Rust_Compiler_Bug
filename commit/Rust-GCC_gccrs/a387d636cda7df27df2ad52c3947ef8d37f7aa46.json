{"sha": "a387d636cda7df27df2ad52c3947ef8d37f7aa46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM4N2Q2MzZjZGE3ZGYyN2RmMmFkNTJjMzk0N2VmOGQzN2Y3YWE0Ng==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-11T14:25:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-09-11T14:25:52Z"}, "message": "compiler: suppress type descriptor generation for aliases\n    \n    Change Named_object::get_backend to ignore aliases when creating type\n    descriptors for types, to be consistent with\n    Type::needs_specific_type_functions and the Specific_type_functions\n    traversal class. For example, when compiling a package that creates an\n    alias to an an externally defined type, e.g.\n    \n       import \"foo\"\n       type MyFoo = foo.Foo\n    \n    it makes sense to skip the alias (not try to generate type specific\n    functions for it) and let the normal mechanisms take care of the alias\n    target, depending on whether the target is defined locally or defined\n    elsewhere.\n    \n    Testcase for this problen can be found in CL 193261.\n    \n    Fixes golang/go#33866.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/191961\n\nFrom-SVN: r275651", "tree": {"sha": "185c7265a52dd4e8bd4db98543e2f4c557aa5963", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/185c7265a52dd4e8bd4db98543e2f4c557aa5963"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a387d636cda7df27df2ad52c3947ef8d37f7aa46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a387d636cda7df27df2ad52c3947ef8d37f7aa46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a387d636cda7df27df2ad52c3947ef8d37f7aa46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a387d636cda7df27df2ad52c3947ef8d37f7aa46/comments", "author": null, "committer": null, "parents": [{"sha": "debae5232b81f4f0adcdc25ad8c8d2645a6ea376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/debae5232b81f4f0adcdc25ad8c8d2645a6ea376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/debae5232b81f4f0adcdc25ad8c8d2645a6ea376"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "8098eb047dae5d7849c2458a63dca7b00b03cfaf", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a387d636cda7df27df2ad52c3947ef8d37f7aa46/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a387d636cda7df27df2ad52c3947ef8d37f7aa46/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a387d636cda7df27df2ad52c3947ef8d37f7aa46", "patch": "@@ -1,4 +1,4 @@\n-27b2311fa460b1dd76fb3a796c7c05ebedc64df2\n+0950e905939f88c1421f8667ac4dc9e14528471c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "3ff88cba1d24c55e7fad0955e99d77e2ba0fbc91", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a387d636cda7df27df2ad52c3947ef8d37f7aa46/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a387d636cda7df27df2ad52c3947ef8d37f7aa46/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a387d636cda7df27df2ad52c3947ef8d37f7aa46", "patch": "@@ -8718,7 +8718,13 @@ Named_object::get_backend(Gogo* gogo, std::vector<Bexpression*>& const_decls,\n     case NAMED_OBJECT_TYPE:\n       {\n         Named_type* named_type = this->u_.type_value;\n-\tif (!Gogo::is_erroneous_name(this->name_) && !named_type->is_alias())\n+\n+        // No need to do anything for aliases-- whatever has to be done\n+        // can be done for the alias target.\n+        if (named_type->is_alias())\n+          break;\n+\n+\tif (!Gogo::is_erroneous_name(this->name_))\n \t  type_decls.push_back(named_type->get_backend(gogo));\n \n         // We need to produce a type descriptor for every named"}]}