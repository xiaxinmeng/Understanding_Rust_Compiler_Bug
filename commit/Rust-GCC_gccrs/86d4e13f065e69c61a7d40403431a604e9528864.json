{"sha": "86d4e13f065e69c61a7d40403431a604e9528864", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZkNGUxM2YwNjVlNjljNjFhN2Q0MDQwMzQzMWE2MDRlOTUyODg2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-07-31T13:57:23Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-07-31T13:57:23Z"}, "message": "pt.c (check_default_tmpl_args): Change is_primary and is_partial parameters to bool type, adjust.\n\n2012-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (check_default_tmpl_args): Change is_primary and is_partial\n\tparameters to bool type, adjust.\n\t(push_template_decl_real): Tidy.\n\t* parser.c (cp_parser_init_declarator): Adjust.\n\t* decl.c (redeclaration_error_message): Likewise.\n\t* cp-tree.h (check_default_tmpl_args): Update prototype.\n\nFrom-SVN: r190013", "tree": {"sha": "8104afa508ae2eea92c618f115950f7f8ed1963a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8104afa508ae2eea92c618f115950f7f8ed1963a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86d4e13f065e69c61a7d40403431a604e9528864", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d4e13f065e69c61a7d40403431a604e9528864", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86d4e13f065e69c61a7d40403431a604e9528864", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86d4e13f065e69c61a7d40403431a604e9528864/comments", "author": null, "committer": null, "parents": [{"sha": "b4e209fd1ad2bcceed90e8849e1ba903121013b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e209fd1ad2bcceed90e8849e1ba903121013b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e209fd1ad2bcceed90e8849e1ba903121013b4"}], "stats": {"total": 43, "additions": 26, "deletions": 17}, "files": [{"sha": "8c2272e9d539ba83a9a04e8a4fa3246b97a121cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86d4e13f065e69c61a7d40403431a604e9528864", "patch": "@@ -1,3 +1,12 @@\n+2012-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (check_default_tmpl_args): Change is_primary and is_partial\n+\tparameters to bool type, adjust.\n+\t(push_template_decl_real): Tidy.\n+\t* parser.c (cp_parser_init_declarator): Adjust.\n+\t* decl.c (redeclaration_error_message): Likewise.\n+\t* cp-tree.h (check_default_tmpl_args): Update prototype.\n+\n 2012-07-31  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53624"}, {"sha": "ec33d92ad92866c266b2b045f600bb4e7b75bc15", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86d4e13f065e69c61a7d40403431a604e9528864", "patch": "@@ -5328,7 +5328,7 @@ extern tree process_template_parm\t\t(tree, location_t, tree,\n extern tree end_template_parm_list\t\t(tree);\n extern void end_template_decl\t\t\t(void);\n extern tree maybe_update_decl_type\t\t(tree, tree);\n-extern bool check_default_tmpl_args             (tree, tree, int, int, int);\n+extern bool check_default_tmpl_args             (tree, tree, bool, bool, int);\n extern tree push_template_decl\t\t\t(tree);\n extern tree push_template_decl_real\t\t(tree, bool);\n extern bool redeclare_class_template\t\t(tree, tree);"}, {"sha": "b6376437b691f16d24e5a493fafa1f876540942d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=86d4e13f065e69c61a7d40403431a604e9528864", "patch": "@@ -2480,7 +2480,8 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       if ((cxx_dialect != cxx98) \n           && TREE_CODE (ot) == FUNCTION_DECL && DECL_FRIEND_P (ot)\n           && !check_default_tmpl_args (nt, DECL_TEMPLATE_PARMS (newdecl), \n-                                       /*is_primary=*/1, /*is_partial=*/0,\n+                                       /*is_primary=*/true,\n+\t\t\t\t       /*is_partial=*/false,\n                                        /*is_friend_decl=*/2))\n         return G_(\"redeclaration of friend %q#D \"\n \t \t  \"may not have default template arguments\");"}, {"sha": "d8c3305006774988e8998da3408e873388f9ffaf", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=86d4e13f065e69c61a7d40403431a604e9528864", "patch": "@@ -15849,8 +15849,8 @@ cp_parser_init_declarator (cp_parser* parser,\n     /* Core issue #226 (C++0x only): A default template-argument\n        shall not be specified in a friend class template\n        declaration. */\n-    check_default_tmpl_args (decl, current_template_parms, /*is_primary=*/1, \n-                             /*is_partial=*/0, /*is_friend_decl=*/1);\n+    check_default_tmpl_args (decl, current_template_parms, /*is_primary=*/true, \n+                             /*is_partial=*/false, /*is_friend_decl=*/1);\n \n   if (!friend_p && pushed_scope)\n     pop_scope (pushed_scope);"}, {"sha": "6257502ac1ea804190ef135d2a8e75cb4b69c43f", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86d4e13f065e69c61a7d40403431a604e9528864/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=86d4e13f065e69c61a7d40403431a604e9528864", "patch": "@@ -4210,10 +4210,9 @@ process_partial_specialization (tree decl)\n \n /* Check that a template declaration's use of default arguments and\n    parameter packs is not invalid.  Here, PARMS are the template\n-   parameters.  IS_PRIMARY is nonzero if DECL is the thing declared by\n-   a primary template.  IS_PARTIAL is nonzero if DECL is a partial\n+   parameters.  IS_PRIMARY is true if DECL is the thing declared by\n+   a primary template.  IS_PARTIAL is true if DECL is a partial\n    specialization.\n-   \n \n    IS_FRIEND_DECL is nonzero if DECL is a friend function template\n    declaration (but not a definition); 1 indicates a declaration, 2\n@@ -4223,8 +4222,8 @@ process_partial_specialization (tree decl)\n    Returns TRUE if there were no errors found, FALSE otherwise. */\n \n bool\n-check_default_tmpl_args (tree decl, tree parms, int is_primary, \n-                         int is_partial, int is_friend_decl)\n+check_default_tmpl_args (tree decl, tree parms, bool is_primary,\n+                         bool is_partial, int is_friend_decl)\n {\n   const char *msg;\n   int last_level_to_check;\n@@ -4456,8 +4455,8 @@ push_template_decl_real (tree decl, bool is_friend)\n   tree args;\n   tree info;\n   tree ctx;\n-  int primary;\n-  int is_partial;\n+  bool is_primary;\n+  bool is_partial;\n   int new_template_p = 0;\n   /* True if the template is a member template, in the sense of\n      [temp.mem].  */\n@@ -4499,11 +4498,11 @@ push_template_decl_real (tree decl, bool is_friend)\n     /* A friend template that specifies a class context, i.e.\n          template <typename T> friend void A<T>::f();\n        is not primary.  */\n-    primary = 0;\n+    is_primary = false;\n   else\n-    primary = template_parm_scope_p ();\n+    is_primary = template_parm_scope_p ();\n \n-  if (primary)\n+  if (is_primary)\n     {\n       if (DECL_CLASS_SCOPE_P (decl))\n \tmember_template_p = true;\n@@ -4556,7 +4555,7 @@ push_template_decl_real (tree decl, bool is_friend)\n   /* Check to see that the rules regarding the use of default\n      arguments are not being violated.  */\n   check_default_tmpl_args (decl, current_template_parms,\n-\t\t\t   primary, is_partial, /*is_friend_decl=*/0);\n+\t\t\t   is_primary, is_partial, /*is_friend_decl=*/0);\n \n   /* Ensure that there are no parameter packs in the type of this\n      declaration that have not been expanded.  */\n@@ -4773,7 +4772,7 @@ template arguments to %qD do not match original template %qD\",\n \t}\n     }\n \n-  if (primary)\n+  if (is_primary)\n     {\n       tree parms = DECL_TEMPLATE_PARMS (tmpl);\n       int i;\n@@ -4815,7 +4814,7 @@ template arguments to %qD do not match original template %qD\",\n     SET_TYPE_TEMPLATE_INFO (TREE_TYPE (tmpl), info);\n   else\n     {\n-      if (primary && !DECL_LANG_SPECIFIC (decl))\n+      if (is_primary && !DECL_LANG_SPECIFIC (decl))\n \tretrofit_lang_decl (decl);\n       if (DECL_LANG_SPECIFIC (decl))\n \tDECL_TEMPLATE_INFO (decl) = info;"}]}