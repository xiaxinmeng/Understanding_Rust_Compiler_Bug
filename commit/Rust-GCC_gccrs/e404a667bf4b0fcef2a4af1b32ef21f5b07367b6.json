{"sha": "e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwNGE2NjdiZjRiMGZjZWYyYTRhZjFiMzJlZjIxZjViMDczNjdiNg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2015-02-02T07:16:11Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2015-02-02T07:16:11Z"}, "message": "rs6000.c (rs6000_call_aix): Use unspec rather than mem for toc_restore.\n\ngcc/\n\t* config/rs6000/rs6000.c (rs6000_call_aix): Use unspec rather\n\tthan mem for toc_restore.\n\t* config/rs6000/rs6000.md (UNSPEC_TOCSLOT): Define.\n\t(call_indirect_aix, call_value_indirect_aix): Adjust to suit.\n\t(call_indirect_elfv2, call_value_indirect_elfv2): Likewise.\ngcc/testsuite/\n\t* gcc.target/powerpc/cprophard.c: New.\n\nFrom-SVN: r220344", "tree": {"sha": "67853275467ee73b7fc804fc8ce9712de3281e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67853275467ee73b7fc804fc8ce9712de3281e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "02d3e45e7afcf4e6ea1b3dbcc5cfaf505c8e7fb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d3e45e7afcf4e6ea1b3dbcc5cfaf505c8e7fb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02d3e45e7afcf4e6ea1b3dbcc5cfaf505c8e7fb9"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "6453686a233ca7301d7796a7bc534c5be47ca9ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "patch": "@@ -1,3 +1,11 @@\n+2015-02-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/rs6000/rs6000.c (rs6000_call_aix): Use unspec rather\n+\tthan mem for toc_restore.\n+\t* config/rs6000/rs6000.md (UNSPEC_TOCSLOT): Define.\n+\t(call_indirect_aix, call_value_indirect_aix): Adjust to suit.\n+\t(call_indirect_elfv2, call_value_indirect_elfv2): Likewise.\n+\n 2015-02-01  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/64047"}, {"sha": "3c853dc046de5d4eea55332de2498e57a8ff1029", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "patch": "@@ -32951,7 +32951,10 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx flag, rtx cookie)\n       rtx stack_toc_mem = gen_frame_mem (Pmode,\n \t\t\t\t\t gen_rtx_PLUS (Pmode, stack_ptr,\n \t\t\t\t\t\t       stack_toc_offset));\n-      toc_restore = gen_rtx_SET (VOIDmode, toc_reg, stack_toc_mem);\n+      rtx stack_toc_unspec = gen_rtx_UNSPEC (Pmode,\n+\t\t\t\t\t     gen_rtvec (1, stack_toc_offset),\n+\t\t\t\t\t     UNSPEC_TOCSLOT);\n+      toc_restore = gen_rtx_SET (VOIDmode, toc_reg, stack_toc_unspec);\n \n       /* Can we optimize saving the TOC in the prologue or\n \t do we need to do it at every call?  */"}, {"sha": "22787e2f70e3f2a4c927330b508b59a0c696fc40", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "patch": "@@ -69,6 +69,7 @@\n    UNSPEC_PROBE_STACK\t\t; probe stack memory reference\n    UNSPEC_TOCPTR\t\t; address of a word pointing to the TOC\n    UNSPEC_TOC\t\t\t; address of the TOC (more-or-less)\n+   UNSPEC_TOCSLOT\t\t; offset from r1 of toc pointer save slot\n    UNSPEC_MOVSI_GOT\n    UNSPEC_MV_CR_OV\t\t; move_from_CR_ov_bit\n    UNSPEC_FCTIWZ\n@@ -11348,16 +11349,16 @@\n ;; Call to indirect functions with the AIX abi using a 3 word descriptor.\n ;; Operand0 is the addresss of the function to call\n ;; Operand2 is the location in the function descriptor to load r2 from\n-;; Operand3 is the stack location to hold the current TOC pointer\n+;; Operand3 is the offset of the stack location holding the current TOC pointer\n \n (define_insn \"*call_indirect_aix<mode>\"\n   [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n \t (match_operand 1 \"\" \"g,g\"))\n    (use (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n-   (set (reg:P TOC_REGNUM) (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_AIX\"\n-  \"<ptrload> 2,%2\\;b%T0l\\;<ptrload> 2,%3\"\n+  \"<ptrload> 2,%2\\;b%T0l\\;<ptrload> 2,%3(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"12\")])\n \n@@ -11366,35 +11367,35 @@\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n    (use (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n-   (set (reg:P TOC_REGNUM) (match_operand:P 4 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec [(match_operand:P 4 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_AIX\"\n-  \"<ptrload> 2,%3\\;b%T1l\\;<ptrload> 2,%4\"\n+  \"<ptrload> 2,%3\\;b%T1l\\;<ptrload> 2,%4(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"12\")])\n \n ;; Call to indirect functions with the ELFv2 ABI.\n ;; Operand0 is the addresss of the function to call\n-;; Operand2 is the stack location to hold the current TOC pointer\n+;; Operand2 is the offset of the stack location holding the current TOC pointer\n \n (define_insn \"*call_indirect_elfv2<mode>\"\n   [(call (mem:SI (match_operand:P 0 \"register_operand\" \"c,*l\"))\n \t (match_operand 1 \"\" \"g,g\"))\n-   (set (reg:P TOC_REGNUM) (match_operand:P 2 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec [(match_operand:P 2 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_ELFv2\"\n-  \"b%T0l\\;<ptrload> 2,%2\"\n+  \"b%T0l\\;<ptrload> 2,%2(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n \n (define_insn \"*call_value_indirect_elfv2<mode>\"\n   [(set (match_operand 0 \"\" \"\")\n \t(call (mem:SI (match_operand:P 1 \"register_operand\" \"c,*l\"))\n \t      (match_operand 2 \"\" \"g,g\")))\n-   (set (reg:P TOC_REGNUM) (match_operand:P 3 \"memory_operand\" \"<ptrm>,<ptrm>\"))\n+   (set (reg:P TOC_REGNUM) (unspec [(match_operand:P 3 \"const_int_operand\" \"n,n\")] UNSPEC_TOCSLOT))\n    (clobber (reg:P LR_REGNO))]\n   \"DEFAULT_ABI == ABI_ELFv2\"\n-  \"b%T1l\\;<ptrload> 2,%3\"\n+  \"b%T1l\\;<ptrload> 2,%3(1)\"\n   [(set_attr \"type\" \"jmpreg\")\n    (set_attr \"length\" \"8\")])\n "}, {"sha": "d9c83cf0716aede9fb09f11092fcc0afe9db713f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "patch": "@@ -1,3 +1,7 @@\n+2015-02-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* gcc.target/powerpc/cprophard.c: New.\n+\n 2015-02-01  Andreas Tobler  <andreast@gcc.gnu.org>\n \n \t* gfortran.dg/enum_9.f90: Use arm_eabi instead of arm*-*-linux*."}, {"sha": "f93081f0cb5e98a1c146712970040c1686d552fe", "filename": "gcc/testsuite/gcc.target/powerpc/cprophard.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcprophard.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e404a667bf4b0fcef2a4af1b32ef21f5b07367b6/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcprophard.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fcprophard.c?ref=e404a667bf4b0fcef2a4af1b32ef21f5b07367b6", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler {ld 2,(24|40)\\(1\\)} } } */\n+\n+/* From a linux kernel mis-compile of net/core/skbuff.c.  */\n+register unsigned long current_r1 asm (\"r1\");\n+\n+void f (unsigned int n, void (*fun) (unsigned long))\n+{\n+  while (n--)\n+    (*fun) (current_r1 & -0x1000);\n+}"}]}