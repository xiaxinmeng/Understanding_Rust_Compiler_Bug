{"sha": "0c83a0fcff9df31e594bcf7d888c7842b940b003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGM4M2EwZmNmZjlkZjMxZTU5NGJjZjdkODg4Yzc4NDJiOTQwYjAwMw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2003-07-02T09:36:20Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2003-07-02T09:36:20Z"}, "message": "re PR c++/9779 (ICE in type_unknown_p when casting in static member)\n\ncp:\n\tPR c++/9779\n\t* decl2.c (arg_assoc_class): Don't die on NULL type.\n\t* typeck.c (type_unknown_p): Don't die on untyped expressions.\ntestsuite:\n\tPR c++/9779\n\t* g++.dg/template/dependent-expr1.C: New.\n\nFrom-SVN: r68824", "tree": {"sha": "f927c22a108518e58655292ad81f2de110d960d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f927c22a108518e58655292ad81f2de110d960d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0c83a0fcff9df31e594bcf7d888c7842b940b003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c83a0fcff9df31e594bcf7d888c7842b940b003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c83a0fcff9df31e594bcf7d888c7842b940b003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c83a0fcff9df31e594bcf7d888c7842b940b003/comments", "author": null, "committer": null, "parents": [{"sha": "1a8c4ca62da430aa2d8920b70f1614ab0755059b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a8c4ca62da430aa2d8920b70f1614ab0755059b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a8c4ca62da430aa2d8920b70f1614ab0755059b"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "c8bb8930c7003812bbaeb30650daa1a3f84bd933", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0c83a0fcff9df31e594bcf7d888c7842b940b003", "patch": "@@ -1,3 +1,9 @@\n+2003-07-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9779\n+\t* decl2.c (arg_assoc_class): Don't die on NULL type.\n+\t* typeck.c (type_unknown_p): Don't die on untyped expressions.\n+\n 2003-07-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/6949"}, {"sha": "c3b7cd0d5181323f245578b108d7e5422850a1e6", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0c83a0fcff9df31e594bcf7d888c7842b940b003", "patch": "@@ -4057,6 +4057,11 @@ arg_assoc_class (struct arg_lookup *k, tree type)\n static bool\n arg_assoc_type (struct arg_lookup *k, tree type)\n {\n+  /* As we do not get the type of non-type dependent expressions\n+     right, we can end up with such things without a type.  */\n+  if (!type)\n+    return false;\n+  \n   switch (TREE_CODE (type))\n     {\n     case ERROR_MARK:"}, {"sha": "4900cbffb1764e7d90ccd933513516104f3d68ed", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0c83a0fcff9df31e594bcf7d888c7842b940b003", "patch": "@@ -183,7 +183,11 @@ type_unknown_p (exp)\n   return (TREE_CODE (exp) == OVERLOAD\n           || TREE_CODE (exp) == TREE_LIST\n \t  || TREE_TYPE (exp) == unknown_type_node\n-\t  || (TREE_CODE (TREE_TYPE (exp)) == OFFSET_TYPE\n+\t  /* Until we get the type of non type-dependent expressions\n+\t     correct, we can have non-type dependent expressions with\n+\t     no type.  */\n+\t  || (TREE_TYPE (exp)\n+\t      && TREE_CODE (TREE_TYPE (exp)) == OFFSET_TYPE\n \t      && TREE_TYPE (TREE_TYPE (exp)) == unknown_type_node));\n }\n "}, {"sha": "1a4d547818b03cf4f486940829a040db9c489934", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0c83a0fcff9df31e594bcf7d888c7842b940b003", "patch": "@@ -1,3 +1,8 @@\n+2003-07-02  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/9779\n+\t* g++.dg/template/dependent-expr1.C: New.\n+\n 2003-07-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/6949"}, {"sha": "079f033611be71d778102dd9f062feca62ba1cc3", "filename": "gcc/testsuite/g++.dg/template/dependent-expr1.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0c83a0fcff9df31e594bcf7d888c7842b940b003/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr1.C?ref=0c83a0fcff9df31e594bcf7d888c7842b940b003", "patch": "@@ -0,0 +1,29 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 30 Jun 2003 <nathan@codesourcery.com>\n+\n+// PR c++ 9779. ICE\n+\n+struct I \n+{\n+};\n+\n+void Foo (int);\n+namespace std\n+{\n+  template <typename X>\n+  void Baz (I *x)\n+  {\n+    Foo (sizeof (I));\n+    Foo (sizeof (x));\n+    Foo (__alignof__ (I));\n+    Foo (__alignof__ (x));\n+    Foo (x->~I ());\n+    //    Foo (typeid (I));\n+    Foo (delete x);\n+    Foo (delete[] x);\n+    Foo (throw x);\n+  }\n+\n+}"}]}