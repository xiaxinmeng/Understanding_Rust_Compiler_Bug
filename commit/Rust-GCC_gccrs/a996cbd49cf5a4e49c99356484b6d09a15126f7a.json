{"sha": "a996cbd49cf5a4e49c99356484b6d09a15126f7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk5NmNiZDQ5Y2Y1YTRlNDljOTkzNTY0ODRiNmQwOWExNTEyNmY3YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-10-26T02:54:22Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-10-26T02:54:22Z"}, "message": "dbxout.c (lastfile, [...]): Constify a char*.\n\n\t* dbxout.c (lastfile, cwd, dbxout_type_method_1,\n\tdbxout_symbol_location, dbxout_symbol_name, dbxout_init,\n\tdbxout_start_new_source_file, dbxout_source_file,\n\tdbxout_source_line, dbxout_finish, dbxout_type_fields,\n\tdbxout_type_methods, dbxout_symbol, dbxout_prepare_symbol):\n\tConstify a char*.\n\t(dbxout_types, dbxout_args, dbxout_symbol): Delete prototypes.\n\t(dbxout_symbol): Mark parameter `local' with ATTRIBUTE_UNUSED.\n\t(dbxout_block): Initialize variable `blocknum'.\n\n\t* dbxout.h (dbxout_init, dbxout_finish,\n\tdbxout_start_new_source_file, dbxout_source_file, dbxout_types,\n\tdbxout_args, dbxout_source_line): Constify a char*.\n\n\t* dwarfout.c (dwarf_tag_name, dwarf_attr_name,\n\tdwarf_stack_op_name, dwarf_typemod_name, dwarf_fmt_byte_name,\n\tdwarf_fund_type_name, name_attribute, stmt_list_attribute,\n\tlow_pc_attribute, high_pc_attribute, body_begin_attribute,\n\tbody_end_attribute, comp_dir_attribute, sf_names_attribute,\n\tsrc_info_attribute, mac_info_attribute, producer_attribute,\n\tlookup_filename, generate_macinfo_entry, fundamental_type_code,\n\tdwarfout_line, dwarfout_start_new_source_file, dwarfout_define,\n\tdwarfout_undef): Constify a char*.\n\t(add_incomplete_type, retry_incomplete_types): Add prototypes.\n\n\t* dwarfout.h (dwarfout_define, dwarfout_undef,\n\tdwarfout_start_new_source_file, dwarfout_line): Constify a char*.\n\nFrom-SVN: r30173", "tree": {"sha": "11a94960a3c6ab9a420970d2e6841ece8b067535", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11a94960a3c6ab9a420970d2e6841ece8b067535"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a996cbd49cf5a4e49c99356484b6d09a15126f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a996cbd49cf5a4e49c99356484b6d09a15126f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a996cbd49cf5a4e49c99356484b6d09a15126f7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a996cbd49cf5a4e49c99356484b6d09a15126f7a/comments", "author": null, "committer": null, "parents": [{"sha": "ea09f0326216aca75ffdfb568b43393f46a823ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea09f0326216aca75ffdfb568b43393f46a823ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea09f0326216aca75ffdfb568b43393f46a823ae"}], "stats": {"total": 202, "additions": 119, "deletions": 83}, "files": [{"sha": "84c409d09d79387cd1d78b919f8e4e19e9963169", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a996cbd49cf5a4e49c99356484b6d09a15126f7a", "patch": "@@ -1,3 +1,33 @@\n+Mon Oct 25 22:49:34 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* dbxout.c (lastfile, cwd, dbxout_type_method_1,\n+\tdbxout_symbol_location, dbxout_symbol_name, dbxout_init,\n+\tdbxout_start_new_source_file, dbxout_source_file,\n+\tdbxout_source_line, dbxout_finish, dbxout_type_fields,\n+\tdbxout_type_methods, dbxout_symbol, dbxout_prepare_symbol):\n+\tConstify a char*.\n+\t(dbxout_types, dbxout_args, dbxout_symbol): Delete prototypes.\n+\t(dbxout_symbol): Mark parameter `local' with ATTRIBUTE_UNUSED.\n+\t(dbxout_block): Initialize variable `blocknum'.\t\n+\n+\t* dbxout.h (dbxout_init, dbxout_finish,\n+\tdbxout_start_new_source_file, dbxout_source_file, dbxout_types,\n+\tdbxout_args, dbxout_source_line): Constify a char*.\n+\n+\t* dwarfout.c (dwarf_tag_name, dwarf_attr_name,\n+\tdwarf_stack_op_name, dwarf_typemod_name, dwarf_fmt_byte_name,\n+\tdwarf_fund_type_name, name_attribute, stmt_list_attribute,\n+\tlow_pc_attribute, high_pc_attribute, body_begin_attribute,\n+\tbody_end_attribute, comp_dir_attribute, sf_names_attribute,\n+\tsrc_info_attribute, mac_info_attribute, producer_attribute,\n+\tlookup_filename, generate_macinfo_entry, fundamental_type_code,\n+\tdwarfout_line, dwarfout_start_new_source_file, dwarfout_define,\n+\tdwarfout_undef): Constify a char*.\n+\t(add_incomplete_type, retry_incomplete_types): Add prototypes.\n+\n+\t* dwarfout.h (dwarfout_define, dwarfout_undef,\n+\tdwarfout_start_new_source_file, dwarfout_line): Constify a char*.\n+\n 1999-10-25  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* config/mips/mips.h (MIPS_ISA_DEFAULT): Insure it's defined."}, {"sha": "af77dcaf9fc3463bfde6ba2620ceab6fc6438f15", "filename": "gcc/dbxout.c", "status": "modified", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=a996cbd49cf5a4e49c99356484b6d09a15126f7a", "patch": "@@ -207,11 +207,11 @@ static FILE *asmfile;\n \n /* Last source file name mentioned in a NOTE insn.  */\n \n-static char *lastfile;\n+static const char *lastfile;\n \n /* Current working directory.  */\n \n-static char *cwd;\n+static const char *cwd;\n \n enum typestatus {TYPE_UNSEEN, TYPE_XREF, TYPE_DEFINED};\n \n@@ -318,10 +318,6 @@ static int current_sym_nchars;\n #define CONTIN\n #endif\n \n-void dbxout_types ();\n-void dbxout_args ();\n-void dbxout_symbol ();\n-\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPROTO((void));\n #endif\n@@ -331,15 +327,15 @@ static void dbxout_type_index\t\tPROTO((tree));\n static void dbxout_continue\t\tPROTO((void));\n #endif\n static void dbxout_type_fields\t\tPROTO((tree));\n-static void dbxout_type_method_1\tPROTO((tree, char *));\n+static void dbxout_type_method_1\tPROTO((tree, const char *));\n static void dbxout_type_methods\t\tPROTO((tree));\n static void dbxout_range_type\t\tPROTO((tree));\n static void dbxout_type\t\t\tPROTO((tree, int, int));\n static void print_int_cst_octal\t\tPROTO((tree));\n static void print_octal\t\t\tPROTO((unsigned HOST_WIDE_INT, int));\n static void dbxout_type_name\t\tPROTO((tree));\n-static void dbxout_symbol_location\tPROTO((tree, tree, char *, rtx));\n-static void dbxout_symbol_name\t\tPROTO((tree, char *, int));\n+static void dbxout_symbol_location\tPROTO((tree, tree, const char *, rtx));\n+static void dbxout_symbol_name\t\tPROTO((tree, const char *, int));\n static void dbxout_prepare_symbol\tPROTO((tree));\n static void dbxout_finish_symbol\tPROTO((tree));\n static void dbxout_block\t\tPROTO((tree, int, tree));\n@@ -374,7 +370,7 @@ dbxout_function_end ()\n void\n dbxout_init (asm_file, input_file_name, syms)\n      FILE *asm_file;\n-     char *input_file_name;\n+     const char *input_file_name;\n      tree syms;\n {\n   char ltext_label_name[100];\n@@ -495,7 +491,7 @@ dbxout_typedefs (syms)\n \n void\n dbxout_start_new_source_file (filename)\n-     char *filename ATTRIBUTE_UNUSED;\n+     const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_USE_BINCL\n   struct dbx_file *n = (struct dbx_file *) xmalloc (sizeof *n);\n@@ -530,7 +526,7 @@ dbxout_resume_previous_source_file ()\n void\n dbxout_source_file (file, filename)\n      FILE *file;\n-     char *filename;\n+     const char *filename;\n {\n   char ltext_label_name[100];\n \n@@ -562,7 +558,7 @@ dbxout_source_file (file, filename)\n void\n dbxout_source_line (file, filename, lineno)\n      FILE *file;\n-     char *filename;\n+     const char *filename;\n      int lineno;\n {\n   dbxout_source_file (file, filename);\n@@ -581,7 +577,7 @@ dbxout_source_line (file, filename, lineno)\n void\n dbxout_finish (file, filename)\n      FILE *file ATTRIBUTE_UNUSED;\n-     char *filename ATTRIBUTE_UNUSED;\n+     const char *filename ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_OUTPUT_MAIN_SOURCE_FILE_END\n   DBX_OUTPUT_MAIN_SOURCE_FILE_END (file, filename);\n@@ -709,7 +705,8 @@ dbxout_type_fields (type)\n \t    {\n \t      if (TREE_STATIC (tem) && use_gnu_debug_info_extensions)\n \t\t{\n-\t\t  char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (tem));\n+\t\t  const char *name =\n+\t\t    IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (tem));\n \t\t  have_used_extensions = 1;\n \t\t  fprintf (asmfile, \":%s;\", name);\n \t\t  CHARS (strlen (name));\n@@ -743,7 +740,7 @@ dbxout_type_fields (type)\n static void\n dbxout_type_method_1 (decl, debug_name)\n      tree decl;\n-     char *debug_name;\n+     const char *debug_name;\n {\n   char c1 = 'A', c2;\n \n@@ -807,7 +804,7 @@ dbxout_type_methods (type)\n      the class names, constructor names, and encodings for assembler\n      label names.  For now, disable output of dbx info for them.  */\n   {\n-    char *ptr = IDENTIFIER_POINTER (type_encoding);\n+    const char *ptr = IDENTIFIER_POINTER (type_encoding);\n     /* This should use index.  (mrs) */\n     while (*ptr && *ptr != '<') ptr++;\n     if (*ptr != 0)\n@@ -847,7 +844,8 @@ dbxout_type_methods (type)\n \t{\n \t  /* This is the \"mangled\" name of the method.\n \t     It encodes the argument types.  */\n-\t  char *debug_name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n+\t  const char *debug_name =\n+\t    IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl));\n \t  int show_arg_types = 0;\n \n \t  CONTIN;\n@@ -880,8 +878,9 @@ dbxout_type_methods (type)\n \t\t  debug_name += IDENTIFIER_LENGTH (name);\n \t\t  if (debug_name[0] == '_' && debug_name[1] == '_')\n \t\t    {\n-\t\t      char *method_name = debug_name + 2;\n-\t\t      char *length_ptr = formatted_type_identifier_length;\n+\t\t      const char *method_name = debug_name + 2;\n+\t\t      const char *length_ptr =\n+\t\t\tformatted_type_identifier_length;\n \t\t      /* Get past const and volatile qualifiers.  */\n \t\t      while (*method_name == 'C' || *method_name == 'V')\n \t\t\tmethod_name++;\n@@ -898,8 +897,8 @@ dbxout_type_methods (type)\n \t      /* Detect constructors by their style of name mangling.  */\n \t      else if (debug_name[0] == '_' && debug_name[1] == '_')\n \t\t{\n-\t\t  char *ctor_name = debug_name + 2;\n-\t\t  char *length_ptr = formatted_type_identifier_length;\n+\t\t  const char *ctor_name = debug_name + 2;\n+\t\t  const char *length_ptr = formatted_type_identifier_length;\n \t\t  while (*ctor_name == 'C' || *ctor_name == 'V')\n \t\t    ctor_name++;\n \t\t  /* Skip digits for length of type_encoding.  */\n@@ -1674,7 +1673,7 @@ dbxout_type_name (type)\n void\n dbxout_symbol (decl, local)\n      tree decl;\n-     int local;\n+     int local ATTRIBUTE_UNUSED;\n {\n   tree type = TREE_TYPE (decl);\n   tree context = NULL_TREE;\n@@ -1909,7 +1908,7 @@ dbxout_symbol (decl, local)\n \t  if (TREE_PUBLIC (decl) == 0)\n \t    {\n \t      /* The sun4 assembler does not grok this.  */\n-\t      char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n+\t      const char *name = IDENTIFIER_POINTER (DECL_NAME (decl));\n \t      if (TREE_CODE (TREE_TYPE (decl)) == INTEGER_TYPE\n \t\t  || TREE_CODE (TREE_TYPE (decl)) == ENUMERAL_TYPE)\n \t\t{\n@@ -1955,7 +1954,7 @@ dbxout_symbol (decl, local)\n static void\n dbxout_symbol_location (decl, type, suffix, home)\n      tree decl, type;\n-     char *suffix;\n+     const char *suffix;\n      rtx home;\n {\n   int letter = 0;\n@@ -2170,14 +2169,14 @@ dbxout_symbol_location (decl, type, suffix, home)\n static void\n dbxout_symbol_name (decl, suffix, letter)\n      tree decl;\n-     char *suffix;\n+     const char *suffix;\n      int letter;\n {\n   /* One slight hitch: if this is a VAR_DECL which is a static\n      class member, we must put out the mangled name instead of the\n      DECL_NAME.  Note also that static member (variable) names DO NOT begin\n      with underscores in .stabs directives.  */\n-  char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n+  const char *name = IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl));\n   if (name == 0)\n     name = \"(anon)\";\n   fprintf (asmfile, \"%s \\\"%s%s:\", ASM_STABS_OP, name,\n@@ -2191,7 +2190,7 @@ dbxout_prepare_symbol (decl)\n      tree decl ATTRIBUTE_UNUSED;\n {\n #ifdef WINNING_GDB\n-  char *filename = DECL_SOURCE_FILE (decl);\n+  const char *filename = DECL_SOURCE_FILE (decl);\n \n   dbxout_source_file (asmfile, filename);\n #endif\n@@ -2570,7 +2569,7 @@ dbxout_block (block, depth, args)\n      int depth;\n      tree args;\n {\n-  int blocknum;\n+  int blocknum = -1;\n \n   while (block)\n     {"}, {"sha": "0d34f3ab819d53f552a59f776f0e021c9ae6742a", "filename": "gcc/dbxout.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=a996cbd49cf5a4e49c99356484b6d09a15126f7a", "patch": "@@ -18,16 +18,19 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dbxout_init \t\tPROTO ((FILE *, char *, tree));\n-extern void dbxout_finish\t\tPROTO ((FILE *, char *));\n+extern void dbxout_init \t\tPROTO ((FILE *, const char *, tree));\n+extern void dbxout_finish\t\tPROTO ((FILE *, const char *));\n \n-extern void dbxout_start_new_source_file \tPROTO ((char *));\n+extern void dbxout_start_new_source_file \tPROTO ((const char *));\n extern void dbxout_resume_previous_source_file\tPROTO ((void));\n \n+extern void dbxout_source_file\t\tPROTO ((FILE *, const char *));\n+extern void dbxout_types\t\tPROTO ((tree));\n+extern void dbxout_args\t\t\tPROTO ((tree));\n extern void dbxout_symbol\t\tPROTO ((tree, int));\n extern void dbxout_parms\t\tPROTO ((tree));\n extern void dbxout_reg_parms\t\tPROTO ((tree));\n extern void dbxout_syms\t\t\tPROTO ((tree));\n extern void dbxout_function\t\tPROTO ((tree));\n-extern void dbxout_source_line\t\tPROTO ((FILE *, char*, int));\n+extern void dbxout_source_line\t\tPROTO ((FILE *, const char *, int));\n extern void dbxout_begin_function\tPROTO ((tree));"}, {"sha": "d8ddfb09939c6fca71d58c6f29f1b69e68b92c52", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 50, "deletions": 46, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=a996cbd49cf5a4e49c99356484b6d09a15126f7a", "patch": "@@ -314,12 +314,12 @@ static int in_class;\n \n /* Forward declarations for functions defined in this file.  */\n \n-static char *dwarf_tag_name\t\tPROTO((unsigned));\n-static char *dwarf_attr_name\t\tPROTO((unsigned));\n-static char *dwarf_stack_op_name\tPROTO((unsigned));\n-static char *dwarf_typemod_name\t\tPROTO((unsigned));\n-static char *dwarf_fmt_byte_name\tPROTO((unsigned));\n-static char *dwarf_fund_type_name\tPROTO((unsigned));\n+static const char *dwarf_tag_name\tPROTO((unsigned));\n+static const char *dwarf_attr_name\tPROTO((unsigned));\n+static const char *dwarf_stack_op_name\tPROTO((unsigned));\n+static const char *dwarf_typemod_name\tPROTO((unsigned));\n+static const char *dwarf_fmt_byte_name\tPROTO((unsigned));\n+static const char *dwarf_fund_type_name\tPROTO((unsigned));\n static tree decl_ultimate_origin\tPROTO((tree));\n static tree block_ultimate_origin\tPROTO((tree));\n static tree decl_class_context \t\tPROTO((tree));\n@@ -351,7 +351,7 @@ static void location_attribute\t\tPROTO((rtx));\n static void data_member_location_attribute PROTO((tree));\n static void const_value_attribute\tPROTO((rtx));\n static void location_or_const_value_attribute PROTO((tree));\n-static inline void name_attribute\tPROTO((char *));\n+static inline void name_attribute\tPROTO((const char *));\n static inline void fund_type_attribute\tPROTO((unsigned));\n static void mod_fund_type_attribute\tPROTO((tree, int, int));\n static inline void user_def_type_attribute PROTO((tree));\n@@ -364,22 +364,22 @@ static void byte_size_attribute\t\tPROTO((tree));\n static inline void bit_offset_attribute\tPROTO((tree));\n static inline void bit_size_attribute\tPROTO((tree));\n static inline void element_list_attribute PROTO((tree));\n-static inline void stmt_list_attribute\tPROTO((char *));\n-static inline void low_pc_attribute\tPROTO((char *));\n-static inline void high_pc_attribute\tPROTO((char *));\n-static inline void body_begin_attribute\tPROTO((char *));\n-static inline void body_end_attribute\tPROTO((char *));\n+static inline void stmt_list_attribute\tPROTO((const char *));\n+static inline void low_pc_attribute\tPROTO((const char *));\n+static inline void high_pc_attribute\tPROTO((const char *));\n+static inline void body_begin_attribute\tPROTO((const char *));\n+static inline void body_end_attribute\tPROTO((const char *));\n static inline void language_attribute\tPROTO((unsigned));\n static inline void member_attribute\tPROTO((tree));\n #if 0\n static inline void string_length_attribute PROTO((tree));\n #endif\n-static inline void comp_dir_attribute\tPROTO((char *));\n-static inline void sf_names_attribute\tPROTO((char *));\n-static inline void src_info_attribute\tPROTO((char *));\n-static inline void mac_info_attribute\tPROTO((char *));\n+static inline void comp_dir_attribute\tPROTO((const char *));\n+static inline void sf_names_attribute\tPROTO((const char *));\n+static inline void src_info_attribute\tPROTO((const char *));\n+static inline void mac_info_attribute\tPROTO((const char *));\n static inline void prototyped_attribute\tPROTO((tree));\n-static inline void producer_attribute\tPROTO((char *));\n+static inline void producer_attribute\tPROTO((const char *));\n static inline void inline_attribute\tPROTO((tree));\n static inline void containing_type_attribute PROTO((tree));\n static inline void abstract_origin_attribute PROTO((tree));\n@@ -439,13 +439,15 @@ static void output_decls_for_scope\tPROTO((tree, int));\n static void output_decl\t\t\tPROTO((tree, tree));\n static void shuffle_filename_entry\tPROTO((filename_entry *));\n static void generate_new_sfname_entry\tPROTO((void));\n-static unsigned lookup_filename\t\tPROTO((char *));\n+static unsigned lookup_filename\t\tPROTO((const char *));\n static void generate_srcinfo_entry\tPROTO((unsigned, unsigned));\n-static void generate_macinfo_entry\tPROTO((char *, char *));\n+static void generate_macinfo_entry\tPROTO((const char *, const char *));\n static int is_pseudo_reg\t\tPROTO((rtx));\n static tree type_main_variant\t\tPROTO((tree));\n static int is_tagged_type\t\tPROTO((tree));\n static int is_redundant_typedef\t\tPROTO((tree));\n+static void add_incomplete_type\t\tPROTO((tree));\n+static void retry_incomplete_types\tPROTO((void));\n \f\n /* Definitions of defaults for assembler-dependent names of various\n    pseudo-ops and section names.\n@@ -924,7 +926,7 @@ is_tagged_type (type)\n \t  || code == QUAL_UNION_TYPE || code == ENUMERAL_TYPE);\n }\n \n-static char *\n+static const char *\n dwarf_tag_name (tag)\n      register unsigned tag;\n {\n@@ -974,7 +976,7 @@ dwarf_tag_name (tag)\n     }\n }\n \n-static char *\n+static const char *\n dwarf_attr_name (attr)\n      register unsigned attr;\n {\n@@ -1052,7 +1054,7 @@ dwarf_attr_name (attr)\n     }\n }\n \n-static char *\n+static const char *\n dwarf_stack_op_name (op)\n      register unsigned op;\n {\n@@ -1069,7 +1071,7 @@ dwarf_stack_op_name (op)\n     }\n }\n \n-static char *\n+static const char *\n dwarf_typemod_name (mod)\n      register unsigned mod;\n {\n@@ -1083,7 +1085,7 @@ dwarf_typemod_name (mod)\n     }\n }\n \n-static char *\n+static const char *\n dwarf_fmt_byte_name (fmt)\n      register unsigned fmt;\n {\n@@ -1102,7 +1104,7 @@ dwarf_fmt_byte_name (fmt)\n     }\n }\n \n-static char *\n+static const char *\n dwarf_fund_type_name (ft)\n      register unsigned ft;\n {\n@@ -1369,7 +1371,8 @@ fundamental_type_code (type)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t    const char *name =\n+\t      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    if (!strcmp (name, \"unsigned char\"))\n \t      return FT_unsigned_char;\n@@ -1424,7 +1427,8 @@ fundamental_type_code (type)\n \t    && DECL_NAME (TYPE_NAME (type)) != 0\n \t    && TREE_CODE (DECL_NAME (TYPE_NAME (type))) == IDENTIFIER_NODE)\n \t  {\n-\t    char *name = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n+\t    const char *name =\n+\t      IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type)));\n \n \t    /* Note that here we can run afowl of a serious bug in \"classic\"\n \t       svr4 SDB debuggers.  They don't seem to understand the\n@@ -2492,7 +2496,7 @@ location_or_const_value_attribute (decl)\n \n static inline void\n name_attribute (name_string)\n-     register char *name_string;\n+     register const char *name_string;\n {\n   if (name_string && *name_string)\n     {\n@@ -2836,7 +2840,7 @@ element_list_attribute (element)\n \n static inline void\n stmt_list_attribute (label)\n-    register char *label;\n+    register const char *label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_stmt_list);\n   /* Don't use ASM_OUTPUT_DWARF_DATA4 here.  */\n@@ -2848,7 +2852,7 @@ stmt_list_attribute (label)\n \n static inline void\n low_pc_attribute (asm_low_label)\n-     register char *asm_low_label;\n+     register const char *asm_low_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_low_pc);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, asm_low_label);\n@@ -2859,7 +2863,7 @@ low_pc_attribute (asm_low_label)\n \n static inline void\n high_pc_attribute (asm_high_label)\n-    register char *asm_high_label;\n+    register const char *asm_high_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_high_pc);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, asm_high_label);\n@@ -2869,7 +2873,7 @@ high_pc_attribute (asm_high_label)\n \n static inline void\n body_begin_attribute (asm_begin_label)\n-     register char *asm_begin_label;\n+     register const char *asm_begin_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_body_begin);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, asm_begin_label);\n@@ -2879,7 +2883,7 @@ body_begin_attribute (asm_begin_label)\n \n static inline void\n body_end_attribute (asm_end_label)\n-     register char *asm_end_label;\n+     register const char *asm_end_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_body_end);\n   ASM_OUTPUT_DWARF_ADDR (asm_out_file, asm_end_label);\n@@ -2932,15 +2936,15 @@ string_length_attribute (upper_bound)\n \n static inline void\n comp_dir_attribute (dirname)\n-     register char *dirname;\n+     register const char *dirname;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_comp_dir);\n   ASM_OUTPUT_DWARF_STRING_NEWLINE (asm_out_file, dirname);\n }\n \n static inline void\n sf_names_attribute (sf_names_start_label)\n-     register char *sf_names_start_label;\n+     register const char *sf_names_start_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_sf_names);\n   /* Don't use ASM_OUTPUT_DWARF_DATA4 here.  */\n@@ -2949,7 +2953,7 @@ sf_names_attribute (sf_names_start_label)\n \n static inline void\n src_info_attribute (src_info_start_label)\n-     register char *src_info_start_label;\n+     register const char *src_info_start_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_src_info);\n   /* Don't use ASM_OUTPUT_DWARF_DATA4 here.  */\n@@ -2958,7 +2962,7 @@ src_info_attribute (src_info_start_label)\n \n static inline void\n mac_info_attribute (mac_info_start_label)\n-     register char *mac_info_start_label;\n+     register const char *mac_info_start_label;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_mac_info);\n   /* Don't use ASM_OUTPUT_DWARF_DATA4 here.  */\n@@ -2979,7 +2983,7 @@ prototyped_attribute (func_type)\n \n static inline void\n producer_attribute (producer)\n-     register char *producer;\n+     register const char *producer;\n {\n   ASM_OUTPUT_DWARF_ATTRIBUTE (asm_out_file, AT_producer);\n   ASM_OUTPUT_DWARF_STRING_NEWLINE (asm_out_file, producer);\n@@ -5512,7 +5516,7 @@ generate_new_sfname_entry ()\n \n static unsigned\n lookup_filename (file_name)\n-     char *file_name;\n+     const char *file_name;\n {\n   register filename_entry *search_p;\n   register filename_entry *limit_p = &filename_table[ft_entries];\n@@ -5579,7 +5583,7 @@ generate_srcinfo_entry (line_entry_num, files_entry_num)\n \n void\n dwarfout_line (filename, line)\n-     register char *filename;\n+     register const char *filename;\n      register unsigned line;\n {\n   if (debug_info_level >= DINFO_LEVEL_NORMAL\n@@ -5613,7 +5617,7 @@ dwarfout_line (filename, line)\n         }\n \n       {\n-        register char *tail = rindex (filename, '/');\n+        register const char *tail = rindex (filename, '/');\n \n         if (tail != NULL)\n           filename = tail;\n@@ -5636,8 +5640,8 @@ dwarfout_line (filename, line)\n \n static void\n generate_macinfo_entry (type_and_offset, string)\n-     register char *type_and_offset;\n-     register char *string;\n+     register const char *type_and_offset;\n+     register const char *string;\n {\n   if (! use_gnu_debug_info_extensions)\n     return;\n@@ -5651,7 +5655,7 @@ generate_macinfo_entry (type_and_offset, string)\n \n void\n dwarfout_start_new_source_file (filename)\n-     register char *filename;\n+     register const char *filename;\n {\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n   char type_and_offset[MAX_ARTIFICIAL_LABEL_BYTES*3];\n@@ -5684,7 +5688,7 @@ dwarfout_resume_previous_source_file (lineno)\n void\n dwarfout_define (lineno, buffer)\n      register unsigned lineno;\n-     register char *buffer;\n+     register const char *buffer;\n {\n   static int initialized = 0;\n   char type_and_offset[MAX_ARTIFICIAL_LABEL_BYTES*2];\n@@ -5707,7 +5711,7 @@ dwarfout_define (lineno, buffer)\n void\n dwarfout_undef (lineno, buffer)\n      register unsigned lineno;\n-     register char *buffer;\n+     register const char *buffer;\n {\n   char type_and_offset[MAX_ARTIFICIAL_LABEL_BYTES*2];\n "}, {"sha": "f1c0dd24947d7befe509a925e6cad09570bf2a9c", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a996cbd49cf5a4e49c99356484b6d09a15126f7a/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=a996cbd49cf5a4e49c99356484b6d09a15126f7a", "patch": "@@ -22,10 +22,10 @@ extern void dwarfout_init \t\tPROTO ((FILE *asm_out_file,\n \t\t\t\t\t\tchar *main_input_filename));\n extern void dwarfout_finish\t\tPROTO ((void));\n \n-extern void dwarfout_define\t\tPROTO ((unsigned, char *));\n-extern void dwarfout_undef \t\tPROTO ((unsigned, char *));                                       \n+extern void dwarfout_define\t\tPROTO ((unsigned, const char *));\n+extern void dwarfout_undef \t\tPROTO ((unsigned, const char *));\n extern void dwarfout_file_scope_decl \tPROTO ((tree , int));\n-extern void dwarfout_start_new_source_file \tPROTO ((char *));\n+extern void dwarfout_start_new_source_file \tPROTO ((const char *));\n extern void dwarfout_resume_previous_source_file\tPROTO((unsigned));\n \n extern void dwarfout_begin_function\tPROTO ((void));\n@@ -38,5 +38,5 @@ extern void dwarfout_end_block\t\tPROTO ((unsigned));\n #ifdef RTX_CODE\n extern void dwarfout_label\t\tPROTO ((rtx));\n #endif\n-extern void dwarfout_line\t\tPROTO ((char *, unsigned));\n+extern void dwarfout_line\t\tPROTO ((const char *, unsigned));\n "}]}