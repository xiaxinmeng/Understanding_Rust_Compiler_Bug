{"sha": "014057c510440341c2f1135c23fd4da2a42f765b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDE0MDU3YzUxMDQ0MDM0MWMyZjExMzVjMjNmZDRkYTJhNDJmNzY1Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-05-26T05:09:18Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-05-26T05:09:18Z"}, "message": "re PR fortran/27709 (Using size of array pointer component as dimension of function result causes gfortran internal error.)\n\n2006-05-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/27709\n\t* resolve.c (find_array_spec): Add gfc_symbol, derived, and\n\tuse to track repeated component references.\n\n\tPR fortran/27155\n\tPR fortran/27449\n\t* trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): Use\n\tse->string_length throughout and use memcpy to populate the\n\texpression returned to the scalarizer.\n\t(gfc_size_in_bytes): New function.\n\n2006-05-26  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/27709\n\t* gfortran.dg/spec_expr_4.f90: New test.\n\n\tPR fortran/27155\n\t* gfortran.dg/transfer_array_intrinsic_4.f90: New test.\n\nFrom-SVN: r114127", "tree": {"sha": "77c6438a1e7d93720520b1669b3cd5510e89eeea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77c6438a1e7d93720520b1669b3cd5510e89eeea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/014057c510440341c2f1135c23fd4da2a42f765b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014057c510440341c2f1135c23fd4da2a42f765b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/014057c510440341c2f1135c23fd4da2a42f765b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/014057c510440341c2f1135c23fd4da2a42f765b/comments", "author": null, "committer": null, "parents": [{"sha": "3d26efa9eb9e6f032611bf559a6c31c925fc7295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d26efa9eb9e6f032611bf559a6c31c925fc7295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d26efa9eb9e6f032611bf559a6c31c925fc7295"}], "stats": {"total": 150, "additions": 138, "deletions": 12}, "files": [{"sha": "0117eb66bbfe2284034d9865c3d55ad843064bce", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -1,3 +1,16 @@\n+2006-05-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/27709\n+\t* resolve.c (find_array_spec): Add gfc_symbol, derived, and\n+\tuse to track repeated component references.\n+\n+\tPR fortran/27155\n+\tPR fortran/27449\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_array_transfer): Use\n+\tse->string_length throughout and use memcpy to populate the\n+\texpression returned to the scalarizer.\n+\t(gfc_size_in_bytes): New function.\n+\n 2006-05-21  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/27613"}, {"sha": "660f1c0ef80dbca4e42a56baa4924aeda5595a47", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -2285,9 +2285,11 @@ find_array_spec (gfc_expr * e)\n {\n   gfc_array_spec *as;\n   gfc_component *c;\n+  gfc_symbol *derived;\n   gfc_ref *ref;\n \n   as = e->symtree->n.sym->as;\n+  derived = NULL;\n \n   for (ref = e->ref; ref; ref = ref->next)\n     switch (ref->type)\n@@ -2301,9 +2303,19 @@ find_array_spec (gfc_expr * e)\n \tbreak;\n \n       case REF_COMPONENT:\n-\tfor (c = e->symtree->n.sym->ts.derived->components; c; c = c->next)\n+\tif (derived == NULL)\n+\t  derived = e->symtree->n.sym->ts.derived;\n+\n+\tc = derived->components;\n+\n+\tfor (; c; c = c->next)\n \t  if (c == ref->u.c.component)\n-\t    break;\n+\t    {\n+\t      /* Track the sequence of component references.  */\n+\t      if (c->ts.type == BT_DERIVED)\n+\t\tderived = c->ts.derived;\n+\t      break;\n+\t    }\n \n \tif (c == NULL)\n \t  gfc_internal_error (\"find_array_spec(): Component not found\");"}, {"sha": "1d1858ca807a150522f22dcbf7ab3af1ecce7ef6", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -2482,6 +2482,30 @@ gfc_conv_intrinsic_adjust (gfc_se * se, gfc_expr * expr, tree fndecl)\n }\n \n \n+/* A helper function for gfc_conv_intrinsic_array_transfer to compute\n+   the size of tree expressions in bytes.  */\n+static tree\n+gfc_size_in_bytes (gfc_se *se, gfc_expr *e)\n+{\n+  tree tmp;\n+\n+  if (e->ts.type == BT_CHARACTER)\n+    tmp = se->string_length;\n+  else\n+    {\n+      if (e->rank)\n+\t{\n+\t  tmp = gfc_get_element_type (TREE_TYPE (se->expr));\n+\t  tmp = size_in_bytes (tmp);\n+\t}\n+      else\n+\ttmp = size_in_bytes (TREE_TYPE (TREE_TYPE (se->expr)));\n+    }\n+\n+  return fold_convert (gfc_array_index_type, tmp);\n+}\n+\n+\n /* Array transfer statement.\n      DEST(1:N) = TRANSFER (SOURCE, MOLD[, SIZE])\n    where:\n@@ -2504,6 +2528,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n   tree lower;\n   tree stride;\n   tree stmt;\n+  tree args;\n   gfc_actual_arglist *arg;\n   gfc_se argse;\n   gfc_ss *ss;\n@@ -2530,8 +2555,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n       source = argse.expr;\n \n       /* Obtain the source word length.  */\n-      tmp = size_in_bytes(TREE_TYPE(TREE_TYPE (source)));\n-      tmp =  fold_convert (gfc_array_index_type, tmp);\n+      tmp = gfc_size_in_bytes (&argse, arg->expr);\n     }\n   else\n     {\n@@ -2569,8 +2593,7 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n \t}\n \n       /* Obtain the source word length.  */\n-      tmp = gfc_get_element_type (TREE_TYPE(argse.expr));\n-      tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n+      tmp = gfc_size_in_bytes (&argse, arg->expr);\n \n       /* Obtain the size of the array in bytes.  */\n       extent = gfc_create_var (gfc_array_index_type, NULL);\n@@ -2606,16 +2629,18 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n   if (ss == gfc_ss_terminator)\n     {\n       gfc_conv_expr_reference (&argse, arg->expr);\n-      tmp = TREE_TYPE(TREE_TYPE (argse.expr));\n-      tmp =  fold_convert (gfc_array_index_type, size_in_bytes(tmp));\n+\n+      /* Obtain the source word length.  */\n+      tmp = gfc_size_in_bytes (&argse, arg->expr);\n     }\n   else\n     {\n       gfc_init_se (&argse, NULL);\n       argse.want_pointer = 0;\n       gfc_conv_expr_descriptor (&argse, arg->expr, ss);\n-      tmp = gfc_get_element_type (TREE_TYPE(argse.expr));\n-      tmp = fold_convert (gfc_array_index_type, size_in_bytes (tmp));\n+\n+      /* Obtain the source word length.  */\n+      tmp = gfc_size_in_bytes (&argse, arg->expr);\n     }\n \n   dest_word_len = gfc_create_var (gfc_array_index_type, NULL);\n@@ -2687,10 +2712,18 @@ gfc_conv_intrinsic_array_transfer (gfc_se * se, gfc_expr * expr)\n      data field.  This is already allocated so set callee_alloc.  */\n   tmp = gfc_typenode_for_spec (&expr->ts);\n   gfc_trans_create_temp_array (&se->pre, &se->post, se->loop,\n-\t\t\t       info, tmp, false, false, true);\n+\t\t\t       info, tmp, false, true, false);\n \n+  /* Use memcpy to do the transfer.  */\n+  tmp = gfc_conv_descriptor_data_get (info->descriptor);\n+  args = gfc_chainon_list (NULL_TREE, tmp);\n   tmp = fold_convert (pvoid_type_node, source);\n-  gfc_conv_descriptor_data_set (&se->pre, info->descriptor, tmp);\n+  args = gfc_chainon_list (args, source);\n+  args = gfc_chainon_list (args, size_bytes);\n+  tmp = built_in_decls[BUILT_IN_MEMCPY];\n+  tmp = build_function_call_expr (tmp, args);\n+  gfc_add_expr_to_block (&se->pre, tmp);\n+\n   se->expr = info->descriptor;\n   if (expr->ts.type == BT_CHARACTER)\n     se->string_length = dest_word_len;"}, {"sha": "c55a9ecfb34a7e854f388aa3280739d1d4e5a82c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -1,3 +1,11 @@\n+2006-05-26  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/27709\n+\t* gfortran.dg/spec_expr_4.f90: New test.\n+\n+\tPR fortran/27155\n+\t* gfortran.dg/transfer_array_intrinsic_4.f90: New test.\n+\n 2006-05-25  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/20103"}, {"sha": "7b2d5b6be13b138de10541825f63a1d5af5953c0", "filename": "gcc/testsuite/gfortran.dg/spec_expr_4.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspec_expr_4.f90?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do compile }\n+! Tests the fix for PR27709 in which the specification expression on\n+! line 22 was not resolved because of the multiple component references.\n+!\n+! Contributed by David Ham  <David@ham.dropbear.id.au>\n+!\n+module elements\n+  implicit none\n+  type element_type\n+     type(ele_numbering_type), pointer :: numbering\n+  end type element_type\n+  type ele_numbering_type\n+     integer, dimension(:,:), pointer :: number2count\n+  end type ele_numbering_type\n+end module elements\n+module global_numbering\n+  use elements\n+  implicit none\n+contains\n+  function element_local_coords(element) result (coords)\n+    type(element_type), intent(in) :: element    \n+    real, dimension(size(element%numbering%number2count, 1)) :: coords\n+    coords=0.0 \n+  end function element_local_coords\n+end module global_numbering\n+\n+  use global_numbering\n+  type (element_type) :: e\n+  type (ele_numbering_type), target :: ent\n+  allocate (ent%number2count (2,2))\n+  e%numbering => ent\n+  print *, element_local_coords (e)\n+end"}, {"sha": "3a929a81446a38f3cfa4d2f0b054a0b6c2418c1a", "filename": "gcc/testsuite/gfortran.dg/transfer_array_intrinsic_4.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_array_intrinsic_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/014057c510440341c2f1135c23fd4da2a42f765b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_array_intrinsic_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftransfer_array_intrinsic_4.f90?ref=014057c510440341c2f1135c23fd4da2a42f765b", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+! { dg-options \"-std=gnu\" }\n+! Tests patch for pr27155, where character scalar string_lengths\n+! were not correctly translated by the array transfer intrinsic.\n+!\n+! Contributed by Bo Berggren  <bo.berggren@glocalnet.net>\n+!\n+program trf_test\n+      implicit none\n+      character(11) :: s1, s2\n+      integer(4) :: ia(3)\n+      integer(1) :: ba(12)\n+      equivalence (ia, ba)\n+\n+      s1 = 'ABCDEFGHIJK'\n+      ia = TRANSFER (s1, (/ 0_4 /))\n+      s2 = TRANSFER(ba + 32_1, s2)\n+\n+      if (s2 .ne. 'abcdefghijk') call abort ()\n+\n+      s1 = 'AB'\n+      ba = TRANSFER (trim (s1)//'       JK' , (/ 0_1 /))\n+      s2 = TRANSFER(ia, s2)\n+\n+      if (trim (s1)//'       JK' .ne. s2) call abort ()\n+\n+end program trf_test"}]}