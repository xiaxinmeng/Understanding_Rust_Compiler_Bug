{"sha": "24f1db9c0d7900c641ca795fd631c14fdf174b49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmMWRiOWMwZDc5MDBjNjQxY2E3OTVmZDYzMWMxNGZkZjE3NGI0OQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-07-24T10:31:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-07-24T10:31:21Z"}, "message": "fold-const.c (maybe_canonicalize_comparison_1): Move A code CST canonicalization ...\n\n2015-07-24  Richard Biener  <rguenther@suse.de>\n\n\t* fold-const.c (maybe_canonicalize_comparison_1): Move\n\tA code CST canonicalization ...\n\t* match.pd: ... to a pattern here.\n\n\tcp/\n\t* init.c (build_vec_init): Build iterator bound in the same\n\ttype as the iterator.\n\nFrom-SVN: r226143", "tree": {"sha": "c85bbadb864cda18e5f96a42bd3d4f53fb691f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c85bbadb864cda18e5f96a42bd3d4f53fb691f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24f1db9c0d7900c641ca795fd631c14fdf174b49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f1db9c0d7900c641ca795fd631c14fdf174b49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24f1db9c0d7900c641ca795fd631c14fdf174b49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24f1db9c0d7900c641ca795fd631c14fdf174b49/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25a627733f92db8a4e00a40c3eb6b1b394b5bdfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a627733f92db8a4e00a40c3eb6b1b394b5bdfd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a627733f92db8a4e00a40c3eb6b1b394b5bdfd"}], "stats": {"total": 129, "additions": 62, "deletions": 67}, "files": [{"sha": "2f8ec696e7b3326a7470d92a1c87064160a0c55c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24f1db9c0d7900c641ca795fd631c14fdf174b49", "patch": "@@ -1,3 +1,9 @@\n+2015-07-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* fold-const.c (maybe_canonicalize_comparison_1): Move\n+\tA code CST canonicalization ...\n+\t* match.pd: ... to a pattern here.\n+\n 2015-07-24  Jiong Wang  <jiong.wang@arm.com>\n \n \tRevert:"}, {"sha": "df805e678af991760b7770d695a1180105956400", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24f1db9c0d7900c641ca795fd631c14fdf174b49", "patch": "@@ -1,3 +1,8 @@\n+2015-07-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* init.c (build_vec_init): Build iterator bound in the same\n+\ttype as the iterator.\n+\n 2015-07-23  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/66572"}, {"sha": "dbbe7d5d02bf0812fccf568d7cda87999f4cd3d7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=24f1db9c0d7900c641ca795fd631c14fdf174b49", "patch": "@@ -3599,7 +3599,8 @@ build_vec_init (tree base, tree maxindex, tree init,\n \n       if (length_check)\n \t{\n-\t  tree nelts = size_int (CONSTRUCTOR_NELTS (init) - 1);\n+\t  tree nelts = build_int_cst (ptrdiff_type_node,\n+\t\t\t\t      CONSTRUCTOR_NELTS (init) - 1);\n \t  if (TREE_CODE (atype) != ARRAY_TYPE)\n \t    {\n \t      if (flag_exceptions)"}, {"sha": "c404857e87121adbd1b80b94ba0b900b0153119b", "filename": "gcc/fold-const.c", "status": "modified", "additions": 32, "deletions": 66, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=24f1db9c0d7900c641ca795fd631c14fdf174b49", "patch": "@@ -8092,26 +8092,21 @@ maybe_canonicalize_comparison_1 (location_t loc, enum tree_code code, tree type,\n   enum tree_code code0 = TREE_CODE (arg0);\n   tree t, cst0 = NULL_TREE;\n   int sgn0;\n-  bool swap = false;\n-\n-  /* Match A +- CST code arg1 and CST code arg1.  We can change the\n-     first form only if overflow is undefined.  */\n-  if (!(((ANY_INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n-\t  && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0)))\n-\t /* In principle pointers also have undefined overflow behavior,\n-\t    but that causes problems elsewhere.  */\n-\t && !POINTER_TYPE_P (TREE_TYPE (arg0))\n-\t && (code0 == MINUS_EXPR\n-\t     || code0 == PLUS_EXPR)\n-         && TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST)\n-\t|| code0 == INTEGER_CST))\n+\n+  /* Match A +- CST code arg1.  We can change this only if overflow\n+     is undefined.  */\n+  if (!((ANY_INTEGRAL_TYPE_P (TREE_TYPE (arg0))\n+\t && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (arg0)))\n+\t/* In principle pointers also have undefined overflow behavior,\n+\t   but that causes problems elsewhere.  */\n+\t&& !POINTER_TYPE_P (TREE_TYPE (arg0))\n+\t&& (code0 == MINUS_EXPR\n+\t    || code0 == PLUS_EXPR)\n+\t&& TREE_CODE (TREE_OPERAND (arg0, 1)) == INTEGER_CST))\n     return NULL_TREE;\n \n   /* Identify the constant in arg0 and its sign.  */\n-  if (code0 == INTEGER_CST)\n-    cst0 = arg0;\n-  else\n-    cst0 = TREE_OPERAND (arg0, 1);\n+  cst0 = TREE_OPERAND (arg0, 1);\n   sgn0 = tree_int_cst_sgn (cst0);\n \n   /* Overflowed constants and zero will cause problems.  */\n@@ -8121,47 +8116,25 @@ maybe_canonicalize_comparison_1 (location_t loc, enum tree_code code, tree type,\n \n   /* See if we can reduce the magnitude of the constant in\n      arg0 by changing the comparison code.  */\n-  if (code0 == INTEGER_CST)\n-    {\n-      /* CST <= arg1  ->  CST-1 < arg1.  */\n-      if (code == LE_EXPR && sgn0 == 1)\n-\tcode = LT_EXPR;\n-      /* -CST < arg1  ->  -CST-1 <= arg1.  */\n-      else if (code == LT_EXPR && sgn0 == -1)\n-\tcode = LE_EXPR;\n-      /* CST > arg1  ->  CST-1 >= arg1.  */\n-      else if (code == GT_EXPR && sgn0 == 1)\n-\tcode = GE_EXPR;\n-      /* -CST >= arg1  ->  -CST-1 > arg1.  */\n-      else if (code == GE_EXPR && sgn0 == -1)\n-\tcode = GT_EXPR;\n-      else\n-        return NULL_TREE;\n-      /* arg1 code' CST' might be more canonical.  */\n-      swap = true;\n-    }\n+  /* A - CST < arg1  ->  A - CST-1 <= arg1.  */\n+  if (code == LT_EXPR\n+      && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n+    code = LE_EXPR;\n+  /* A + CST > arg1  ->  A + CST-1 >= arg1.  */\n+  else if (code == GT_EXPR\n+\t   && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n+    code = GE_EXPR;\n+  /* A + CST <= arg1  ->  A + CST-1 < arg1.  */\n+  else if (code == LE_EXPR\n+\t   && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n+    code = LT_EXPR;\n+  /* A - CST >= arg1  ->  A - CST-1 > arg1.  */\n+  else if (code == GE_EXPR\n+\t   && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n+    code = GT_EXPR;\n   else\n-    {\n-      /* A - CST < arg1  ->  A - CST-1 <= arg1.  */\n-      if (code == LT_EXPR\n-\t  && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n-\tcode = LE_EXPR;\n-      /* A + CST > arg1  ->  A + CST-1 >= arg1.  */\n-      else if (code == GT_EXPR\n-\t       && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n-\tcode = GE_EXPR;\n-      /* A + CST <= arg1  ->  A + CST-1 < arg1.  */\n-      else if (code == LE_EXPR\n-\t       && code0 == ((sgn0 == -1) ? MINUS_EXPR : PLUS_EXPR))\n-\tcode = LT_EXPR;\n-      /* A - CST >= arg1  ->  A - CST-1 > arg1.  */\n-      else if (code == GE_EXPR\n-\t       && code0 == ((sgn0 == -1) ? PLUS_EXPR : MINUS_EXPR))\n-\tcode = GT_EXPR;\n-      else\n-\treturn NULL_TREE;\n-      *strict_overflow_p = true;\n-    }\n+    return NULL_TREE;\n+  *strict_overflow_p = true;\n \n   /* Now build the constant reduced in magnitude.  But not if that\n      would produce one outside of its types range.  */\n@@ -8172,21 +8145,14 @@ maybe_canonicalize_comparison_1 (location_t loc, enum tree_code code, tree type,\n \t  || (sgn0 == -1\n \t      && TYPE_MAX_VALUE (TREE_TYPE (cst0))\n \t      && tree_int_cst_equal (cst0, TYPE_MAX_VALUE (TREE_TYPE (cst0))))))\n-    /* We cannot swap the comparison here as that would cause us to\n-       endlessly recurse.  */\n     return NULL_TREE;\n \n   t = int_const_binop (sgn0 == -1 ? PLUS_EXPR : MINUS_EXPR,\n \t\t       cst0, build_int_cst (TREE_TYPE (cst0), 1));\n-  if (code0 != INTEGER_CST)\n-    t = fold_build2_loc (loc, code0, TREE_TYPE (arg0), TREE_OPERAND (arg0, 0), t);\n+  t = fold_build2_loc (loc, code0, TREE_TYPE (arg0), TREE_OPERAND (arg0, 0), t);\n   t = fold_convert (TREE_TYPE (arg1), t);\n \n-  /* If swapping might yield to a more canonical form, do so.  */\n-  if (swap)\n-    return fold_build2_loc (loc, swap_tree_comparison (code), type, arg1, t);\n-  else\n-    return fold_build2_loc (loc, code, type, t, arg1);\n+  return fold_build2_loc (loc, code, type, t, arg1);\n }\n \n /* Canonicalize the comparison ARG0 CODE ARG1 with type TYPE with undefined"}, {"sha": "398378d25446858fc2175b78730de4f4052a5d59", "filename": "gcc/match.pd", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24f1db9c0d7900c641ca795fd631c14fdf174b49/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=24f1db9c0d7900c641ca795fd631c14fdf174b49", "patch": "@@ -1371,6 +1371,23 @@ along with GCC; see the file COPYING3.  If not see\n \n /* Simplifications of comparisons.  */\n \n+/* See if we can reduce the magnitude of a constant involved in a\n+   comparison by changing the comparison code.  This is a canonicalization\n+   formerly done by maybe_canonicalize_comparison_1.  */\n+(for cmp  (le gt)\n+     acmp (lt ge)\n+ (simplify\n+  (cmp @0 INTEGER_CST@1)\n+  (if (tree_int_cst_sgn (@1) == -1)\n+   (acmp @0 { wide_int_to_tree (TREE_TYPE (@1), wi::add (@1, 1)); }))))\n+(for cmp  (ge lt)\n+     acmp (gt le)\n+ (simplify\n+  (cmp @0 INTEGER_CST@1)\n+  (if (tree_int_cst_sgn (@1) == 1)\n+   (acmp @0 { wide_int_to_tree (TREE_TYPE (@1), wi::sub (@1, 1)); }))))\n+\n+\n /* We can simplify a logical negation of a comparison to the\n    inverted comparison.  As we cannot compute an expression\n    operator using invert_tree_comparison we have to simulate"}]}