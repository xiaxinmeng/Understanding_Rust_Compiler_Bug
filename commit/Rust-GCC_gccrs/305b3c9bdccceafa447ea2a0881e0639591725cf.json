{"sha": "305b3c9bdccceafa447ea2a0881e0639591725cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA1YjNjOWJkY2NjZWFmYTQ0N2VhMmEwODgxZTA2Mzk1OTE3MjVjZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-09-05T15:20:01Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2012-09-05T15:20:01Z"}, "message": "sse.md (<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>): Use register_operand instead of reg_not_xmm0_operand{,_maybe_avx}.\n\n\t* config/i386/sse.md (<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>):\n\tUse register_operand instead of reg_not_xmm0_operand{,_maybe_avx}.\n\tUse nonimmediate_operand instead of\n\tnonimm_not_xmm0_operand{,_maybe_avx}.\n\t(<sse4_1_avx2>_pblendvb): Ditto.\n\t(sse4_2_pcmpestr): Ditto.\n\t(*sse4_2_pcmpestr_unaligned): Ditto.\n\t(sse4_2_pcmpistr): Ditto.\n\t(*sse4_2_pcmpistr_unaligned): Ditto.\n\t* config/i386/predicates.md (reg_not_xmm0_operand): Remove predicate.\n\t(nonimm_not_xmm0_operand): Ditto.\n\t(nonimm_not_xmm0_operand_maybe_avx): Ditto.\n\t(nonimm_not_xmm0_operand_maybe_avx): Ditto.\n\t* config/i386/i386.md (rdpmc): Do not force operand 1 into ecx.\n\nFrom-SVN: r190985", "tree": {"sha": "94e36992b2caa663bb308cef4c57d3594fb1eecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94e36992b2caa663bb308cef4c57d3594fb1eecf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/305b3c9bdccceafa447ea2a0881e0639591725cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305b3c9bdccceafa447ea2a0881e0639591725cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/305b3c9bdccceafa447ea2a0881e0639591725cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/305b3c9bdccceafa447ea2a0881e0639591725cf/comments", "author": null, "committer": null, "parents": [{"sha": "efc622f843e3db6a4da4112ef411abf935048438", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efc622f843e3db6a4da4112ef411abf935048438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efc622f843e3db6a4da4112ef411abf935048438"}], "stats": {"total": 90, "additions": 35, "deletions": 55}, "files": [{"sha": "73e5f209182a3080a41987a587cac4af67b67eb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=305b3c9bdccceafa447ea2a0881e0639591725cf", "patch": "@@ -1,3 +1,20 @@\n+2012-09-05  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>):\n+\tUse register_operand instead of reg_not_xmm0_operand{,_maybe_avx}.\n+\tUse nonimmediate_operand instead of\n+\tnonimm_not_xmm0_operand{,_maybe_avx}.\n+\t(<sse4_1_avx2>_pblendvb): Ditto.\n+\t(sse4_2_pcmpestr): Ditto.\n+\t(*sse4_2_pcmpestr_unaligned): Ditto.\n+\t(sse4_2_pcmpistr): Ditto.\n+\t(*sse4_2_pcmpistr_unaligned): Ditto.\n+\t* config/i386/predicates.md (reg_not_xmm0_operand): Remove predicate.\n+\t(nonimm_not_xmm0_operand): Ditto.\n+\t(nonimm_not_xmm0_operand_maybe_avx): Ditto.\n+\t(nonimm_not_xmm0_operand_maybe_avx): Ditto.\n+\t* config/i386/i386.md (rdpmc): Do not force operand 1 into ecx.\n+\n 2012-09-05  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* bb-reorder.c: Clarify a few points in the head comment and fix\n@@ -217,8 +234,8 @@\n 2012-09-04  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR target/45070\n-\t* config/arm/arm.c (thumb1_extra_regs_pushed): Handle return value of size\n-\tless than 4 bytes by using macro ARM_NUM_INTS.\n+\t* config/arm/arm.c (thumb1_extra_regs_pushed): Handle return value\n+\tof size less than 4 bytes by using macro ARM_NUM_INTS.\n \t(thumb1_unexpanded_epilogue): Use macro ARM_NUM_INTS.\n \n 2012-09-04  Richard Guenther  <rguenther@suse.de>\n@@ -242,10 +259,8 @@\n \n 2012-09-04  Christophe Lyon  <christophe.lyon@linaro.org>\n \n-\t* config/arm/arm.c (arm_evpc_neon_vext): New\n-\tfunction.\n-\t(arm_expand_vec_perm_const_1): Add call to\n-\tarm_evpc_neon_vext.\n+\t* config/arm/arm.c (arm_evpc_neon_vext): New function.\n+\t(arm_expand_vec_perm_const_1): Add call to arm_evpc_neon_vext.\n \n 2012-09-04  Oleg Endo  <olegendo@gcc.gnu.org>\n \n@@ -401,7 +416,7 @@\n 2012-08-31  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/arm.c (arm_expand_epilogue): Remove unused variable\n-        floats_from_frame.\n+\tfloats_from_frame.\n \n 2012-08-31  Martin Jambor  <mjambor@suse.cz>\n \n@@ -2634,11 +2649,6 @@\n \t(macro define __LINE__): New.\n \t(skip \"tree.h\"): New.\n \n-2012-08-14  Uros Bizjak  <ubizjak@gmail.com>\n-\n-\t* config/i386/i386.md (enabled): Add comment with explanation\n-\twhy fma4 instructions are disabled for generic code.\n-\n 2012-08-14  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/52933"}, {"sha": "898e0156248859db9e289fe614adb4642c92cf04", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=305b3c9bdccceafa447ea2a0881e0639591725cf", "patch": "@@ -17983,10 +17983,7 @@\n   rtx reg = gen_reg_rtx (DImode);\n   rtx si;\n \n-  /* Force operand 1 into ECX.  */\n-  rtx ecx = gen_rtx_REG (SImode, CX_REG);\n-  emit_insn (gen_rtx_SET (VOIDmode, ecx, operands[1]));\n-  si = gen_rtx_UNSPEC_VOLATILE (DImode, gen_rtvec (1, ecx),\n+  si = gen_rtx_UNSPEC_VOLATILE (DImode, gen_rtvec (1, operands[1]),\n \t\t\t\tUNSPECV_RDPMC);\n \n   if (TARGET_64BIT)"}, {"sha": "d4f40b1e8e25bee61197045a8d10e3a92535c7b1", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=305b3c9bdccceafa447ea2a0881e0639591725cf", "patch": "@@ -93,33 +93,6 @@\n        (match_test \"TARGET_64BIT\")\n        (match_test \"REGNO (op) > BX_REG\")))\n \n-;; Return true if op is not xmm0 register.\n-(define_predicate \"reg_not_xmm0_operand\"\n-  (match_operand 0 \"register_operand\")\n-{\n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  return !REG_P (op) || REGNO (op) != FIRST_SSE_REG;\n-})\n-\n-;; As above, but also allow memory operands.\n-(define_predicate \"nonimm_not_xmm0_operand\"\n-  (ior (match_operand 0 \"memory_operand\")\n-       (match_operand 0 \"reg_not_xmm0_operand\")))\n-\n-;; Return true if op is not xmm0 register, but only for non-AVX targets.\n-(define_predicate \"reg_not_xmm0_operand_maybe_avx\"\n-  (if_then_else (match_test \"TARGET_AVX\")\n-    (match_operand 0 \"register_operand\")\n-    (match_operand 0 \"reg_not_xmm0_operand\")))\n-\n-;; As above, but also allow memory operands.\n-(define_predicate \"nonimm_not_xmm0_operand_maybe_avx\"\n-  (if_then_else (match_test \"TARGET_AVX\")\n-    (match_operand 0 \"nonimmediate_operand\")\n-    (match_operand 0 \"nonimm_not_xmm0_operand\")))\n-\n ;; Return true if VALUE can be stored in a sign extended immediate field.\n (define_predicate \"x86_64_immediate_operand\"\n   (match_code \"const_int,symbol_ref,label_ref,const\")"}, {"sha": "da8bc1e11750a8ac9eae52a32bf8c52a10244ff3", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/305b3c9bdccceafa447ea2a0881e0639591725cf/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=305b3c9bdccceafa447ea2a0881e0639591725cf", "patch": "@@ -8593,10 +8593,10 @@\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF 0 \"reg_not_xmm0_operand_maybe_avx\" \"=x,x\")\n+  [(set (match_operand:VF 0 \"register_operand\" \"=x,x\")\n \t(unspec:VF\n-\t  [(match_operand:VF 1 \"reg_not_xmm0_operand_maybe_avx\" \"0,x\")\n-\t   (match_operand:VF 2 \"nonimm_not_xmm0_operand_maybe_avx\" \"xm,xm\")\n+\t  [(match_operand:VF 1 \"register_operand\" \"0,x\")\n+\t   (match_operand:VF 2 \"nonimmediate_operand\" \"xm,xm\")\n \t   (match_operand:VF 3 \"register_operand\" \"Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n@@ -8691,10 +8691,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"<sse4_1_avx2>_pblendvb\"\n-  [(set (match_operand:VI1_AVX2 0 \"reg_not_xmm0_operand\" \"=x,x\")\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=x,x\")\n \t(unspec:VI1_AVX2\n-\t  [(match_operand:VI1_AVX2 1 \"reg_not_xmm0_operand_maybe_avx\"  \"0,x\")\n-\t   (match_operand:VI1_AVX2 2 \"nonimm_not_xmm0_operand_maybe_avx\" \"xm,xm\")\n+\t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,x\")\n+\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")\n \t   (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n@@ -9164,9 +9164,9 @@\n (define_insn_and_split \"sse4_2_pcmpestr\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=c,c\")\n \t(unspec:SI\n-\t  [(match_operand:V16QI 2 \"reg_not_xmm0_operand\" \"x,x\")\n+\t  [(match_operand:V16QI 2 \"register_operand\" \"x,x\")\n \t   (match_operand:SI 3 \"register_operand\" \"a,a\")\n-\t   (match_operand:V16QI 4 \"nonimm_not_xmm0_operand\" \"x,m\")\n+\t   (match_operand:V16QI 4 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 5 \"register_operand\" \"d,d\")\n \t   (match_operand:SI 6 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_PCMPESTR))\n@@ -9224,7 +9224,7 @@\n (define_insn_and_split \"*sse4_2_pcmpestr_unaligned\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=c\")\n \t(unspec:SI\n-\t  [(match_operand:V16QI 2 \"reg_not_xmm0_operand\" \"x\")\n+\t  [(match_operand:V16QI 2 \"register_operand\" \"x\")\n \t   (match_operand:SI 3 \"register_operand\" \"a\")\n \t   (unspec:V16QI\n \t     [(match_operand:V16QI 4 \"memory_operand\" \"m\")]\n@@ -9365,8 +9365,8 @@\n (define_insn_and_split \"sse4_2_pcmpistr\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=c,c\")\n \t(unspec:SI\n-\t  [(match_operand:V16QI 2 \"reg_not_xmm0_operand\" \"x,x\")\n-\t   (match_operand:V16QI 3 \"nonimm_not_xmm0_operand\" \"x,m\")\n+\t  [(match_operand:V16QI 2 \"register_operand\" \"x,x\")\n+\t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n\")]\n \t  UNSPEC_PCMPISTR))\n    (set (match_operand:V16QI 1 \"register_operand\" \"=Yz,Yz\")\n@@ -9416,7 +9416,7 @@\n (define_insn_and_split \"*sse4_2_pcmpistr_unaligned\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=c\")\n \t(unspec:SI\n-\t  [(match_operand:V16QI 2 \"reg_not_xmm0_operand\" \"x\")\n+\t  [(match_operand:V16QI 2 \"register_operand\" \"x\")\n \t   (unspec:V16QI\n \t     [(match_operand:V16QI 3 \"memory_operand\" \"m\")]\n \t     UNSPEC_MOVU)"}]}