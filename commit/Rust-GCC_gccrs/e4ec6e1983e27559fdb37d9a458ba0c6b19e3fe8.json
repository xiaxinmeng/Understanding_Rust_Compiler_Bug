{"sha": "e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRlYzZlMTk4M2UyNzU1OWZkYjM3ZDlhNDU4YmEwYzZiMTllM2ZlOA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-06-15T10:19:06Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-06-15T10:19:06Z"}, "message": "random (class xor_combine): Fix result_type typedef.\n\n2006-06-15  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/random (class xor_combine): Fix result_type typedef.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\tcons/default.cc: New.\n\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n\trequirements/typedefs.cc: Tweak.\n\n\t* include/tr1/random: Minor cosmetic changes.\n\nFrom-SVN: r114676", "tree": {"sha": "717ee4fccb4a123e2439029ce4a5ceea20ef0b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/717ee4fccb4a123e2439029ce4a5ceea20ef0b78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/comments", "author": null, "committer": null, "parents": [{"sha": "4f6c9110755b4f300c0027433cd2ff466f9a70c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f6c9110755b4f300c0027433cd2ff466f9a70c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f6c9110755b4f300c0027433cd2ff466f9a70c4"}], "stats": {"total": 92, "additions": 76, "deletions": 16}, "files": [{"sha": "4e299c1997649e842e8a9260e5405f77458ea03d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "patch": "@@ -1,3 +1,13 @@\n+2006-06-15  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/random (class xor_combine): Fix result_type typedef.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\tcons/default.cc: New.\n+\t* testsuite/tr1/5_numerical_facilities/random/xor_combine/\n+\trequirements/typedefs.cc: Tweak.\n+\n+\t* include/tr1/random: Minor cosmetic changes.\n+\n 2006-06-14  Ami Tavory  <atavory@gmail.com>\n \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "4973b162b0815da20cf124268e7549c2c9955fac", "filename": "libstdc++-v3/include/tr1/random", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Frandom?ref=e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "patch": "@@ -825,7 +825,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     class discard_block\n     {\n       // __glibcxx_class_requires(typename base_type::result_type,\n-      //                          ArithmeticTypeConcept);\n+      //                          ArithmeticTypeConcept)\n \n     public:\n       /** The type of the underlying generator engine. */\n@@ -991,7 +991,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * James's luxury-level-3 integer adaptation of Luescher's generator.\n    */\n   typedef discard_block<\n-    subtract_with_carry<int, (1<<24), 10, 24>,\n+    subtract_with_carry<int, (1 << 24), 10, 24>,\n       223,\n       24\n       > ranlux3;\n@@ -1000,7 +1000,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n    * James's luxury-level-4 integer adaptation of Luescher's generator.\n    */\n   typedef discard_block<\n-    subtract_with_carry<int, (1<<24), 10, 24>,\n+    subtract_with_carry<int, (1 << 24), 10, 24>,\n       389,\n       24\n       > ranlux4;\n@@ -1015,21 +1015,25 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n     class xor_combine\n     {\n       // __glibcxx_class_requires(typename _UniformRandomNumberGenerator1::\n-      //                          result_type, ArithmeticTypeConcept);\n+      //                          result_type, ArithmeticTypeConcept)\n       // __glibcxx_class_requires(typename _UniformRandomNumberGenerator2::\n-      //                          result_type, ArithmeticTypeConcept);\n+      //                          result_type, ArithmeticTypeConcept)\n \n     public:\n       /** The type of the the first underlying generator engine. */\n-      typedef _UniformRandomNumberGenerator1 base1_type;\n+      typedef _UniformRandomNumberGenerator1   base1_type;\n       /** The type of the the second underlying generator engine. */\n-      typedef _UniformRandomNumberGenerator2 base2_type;\n+      typedef _UniformRandomNumberGenerator2   base2_type;\n+\n+    private:\n+      typedef typename base1_type::result_type _Result_type1;\n+      typedef typename base2_type::result_type _Result_type2;\n+\n+    public:\n       /** The type of the generated random value. */\n       typedef typename _Private::_Select<\n-\t(sizeof(base1_type) > sizeof(base2_type)),\n-\tbase1_type,\n-\tbase2_type\n-\t>::_Type result_type;\n+\t(sizeof(_Result_type1) > sizeof(_Result_type2)),\n+\t_Result_type1, _Result_type2>::_Type result_type;\n \n       // parameter values\n       static const int shift1 = __s1;\n@@ -1185,15 +1189,15 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n #else\n \n     explicit\n-    random_device(const std::string& __token = \"rand\")\n+    random_device(const std::string& __token = \"mt19937\")\n     : _M_mt(_M_strtoul(__token)) { }\n \n   private:\n     static unsigned long\n     _M_strtoul(const std::string& __str)\n     {\n       unsigned long __ret = 5489UL;\n-      if (__str != \"rand\")\n+      if (__str != \"mt19937\")\n \t{\n \t  const char* __nptr = __str.c_str();\n \t  char* __endptr;"}, {"sha": "5ac01b8dd81ff118dd950606fd7f6e0d374dd24b", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/cons/default.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Fcons%2Fdefault.cc?ref=e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "patch": "@@ -0,0 +1,46 @@\n+// 2006-06-15  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 5.1.4.6 Class template xor_combine [tr.rand.eng.xor]\n+// 5.1.1 Table 15 default ctor\n+\n+#include <tr1/random>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01() \n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std::tr1;\n+  xor_combine\n+    <\n+    minstd_rand, 1,\n+    minstd_rand0, 2\n+    > x;\n+\n+  VERIFY( x() == 32642 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bd140b988aa4fdf576afa2f896027a54eb439394", "filename": "libstdc++-v3/testsuite/tr1/5_numerical_facilities/random/xor_combine/requirements/typedefs.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F5_numerical_facilities%2Frandom%2Fxor_combine%2Frequirements%2Ftypedefs.cc?ref=e4ec6e1983e27559fdb37d9a458ba0c6b19e3fe8", "patch": "@@ -32,9 +32,9 @@ test01()\n \n   typedef xor_combine\n     <\n-    subtract_with_carry<long, (1 << 24), 10, 24>, 1,\n-    linear_congruential<unsigned long, 16807, 0, 2147483647>, 2\n+    minstd_rand, 1,\n+    mt19937, 2\n     > test_type;\n-  \n+\n   typedef test_type::result_type result_type;\n }"}]}