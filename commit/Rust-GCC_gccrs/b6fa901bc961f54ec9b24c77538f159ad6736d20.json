{"sha": "b6fa901bc961f54ec9b24c77538f159ad6736d20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZmYTkwMWJjOTYxZjU0ZWM5YjI0Yzc3NTM4ZjE1OWFkNjczNmQyMA==", "commit": {"author": {"name": "Thomas Fitzsimmons", "email": "fitzsim@redhat.com", "date": "2003-07-07T19:56:04Z"}, "committer": {"name": "Thomas Fitzsimmons", "email": "fitzsim@gcc.gnu.org", "date": "2003-07-07T19:56:04Z"}, "message": "* gnu/java/awt/peer/gtk/GtkTextComponentPeer.java\n\t(setCaretPosition, setEditable): Rely entirely on native\n\timplementation.\n\t(getArgs): Remove.\n\t(postTextEvent): New method.\n\t(handleEvent): New method.\n\t* gnu/java/awt/peer/gtk/GtkTextFieldPeer.java (handleEvent): New\n\tmethod.\n\t* java/awt/event/ActionEvent.java (paramString): Fix formatting.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n\t(keysym_to_awt_keycode): Fix range checks.\n\t(generates_key_typed_event): New function.\n\t(awt_event_handler): Post AWT_KEY_RELEASED events to event\n\tqueue.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c\n\t(gtkInit): Store TextComponent's postTextEvent method ID.\n\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n\t(setText): Post TEXT_VALUE_CHANGED event to event queue.\n\nFrom-SVN: r69054", "tree": {"sha": "bdfd6dd308f68b299b088d16dcb5e0de8da7b995", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdfd6dd308f68b299b088d16dcb5e0de8da7b995"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6fa901bc961f54ec9b24c77538f159ad6736d20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fa901bc961f54ec9b24c77538f159ad6736d20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6fa901bc961f54ec9b24c77538f159ad6736d20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6fa901bc961f54ec9b24c77538f159ad6736d20/comments", "author": null, "committer": null, "parents": [{"sha": "0fcd5ddaa80596940cb2accd8a74f4ceae75fea5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fcd5ddaa80596940cb2accd8a74f4ceae75fea5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fcd5ddaa80596940cb2accd8a74f4ceae75fea5"}], "stats": {"total": 176, "additions": 146, "deletions": 30}, "files": [{"sha": "02c9d5b2f33950d5117f5f2ac5ad66d0bd5aad07", "filename": "libjava/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -1,3 +1,24 @@\n+2003-07-07  Thomas Fitzsimmons  <fitzsim@redhat.com>\n+\n+\t* gnu/java/awt/peer/gtk/GtkTextComponentPeer.java\n+\t(setCaretPosition, setEditable): Rely entirely on native\n+\timplementation.\n+\t(getArgs): Remove.\n+\t(postTextEvent): New method.\n+\t(handleEvent): New method.\n+\t* gnu/java/awt/peer/gtk/GtkTextFieldPeer.java (handleEvent): New\n+\tmethod.\n+\t* java/awt/event/ActionEvent.java (paramString): Fix formatting.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c\n+\t(keysym_to_awt_keycode): Fix range checks.\n+\t(generates_key_typed_event): New function.\n+\t(awt_event_handler): Post AWT_KEY_RELEASED events to event\n+\tqueue.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c\n+\t(gtkInit): Store TextComponent's postTextEvent method ID.\n+\t* jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c\n+\t(setText): Post TEXT_VALUE_CHANGED event to event queue.\n+\n 2003-07-07  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* configure.in: Check for usleep declaration."}, {"sha": "102e43973a1bf0318b74b9c881fdd9ab4bf0bc78", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextComponentPeer.java", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextComponentPeer.java?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -39,6 +39,7 @@\n package gnu.java.awt.peer.gtk;\n import java.awt.peer.*;\n import java.awt.*;\n+import java.awt.event.*;\n \n public class GtkTextComponentPeer extends GtkComponentPeer\n   implements TextComponentPeer\n@@ -51,32 +52,14 @@ public class GtkTextComponentPeer extends GtkComponentPeer\n   }\n   \n   public native int getCaretPosition ();\n-  public void setCaretPosition (int pos)\n-  {\n-    set (\"text_position\", pos);\n-  }\n+  public native void setCaretPosition (int pos);\n   public native int getSelectionStart ();\n   public native int getSelectionEnd ();\n   public native String getText ();\n   public native void select (int start, int end);\n-\n-  public void setEditable (boolean state)\n-  {\n-    set (\"editable\", state);\n-  }\n-\n+  public native void setEditable (boolean state);\n   public native void setText (String text);\n-\n-  public void getArgs (Component component, GtkArgList args)\n-  {\n-    super.getArgs (component, args);\n-\n-    TextComponent tc = (TextComponent) component;\n-\n-    args.add (\"text_position\", tc.getCaretPosition ());\n-    args.add (\"editable\", tc.isEditable ());\n-  }\n-\n+  \n   public int getIndexAtPoint(int x, int y)\n   {\n     return 0;  // FIXME\n@@ -91,4 +74,21 @@ public long filterEvents (long filter)\n   {\n     return filter;  // FIXME\n   }\n+\n+  protected void postTextEvent ()\n+  {\n+    q.postEvent (new TextEvent (awtComponent, TextEvent.TEXT_VALUE_CHANGED));\n+  }\n+\n+  public void handleEvent (AWTEvent e)\n+  {\n+    if (e.getID () == KeyEvent.KEY_TYPED\n+        && ((TextComponent)e.getSource()).isEditable())\n+      {\n+        KeyEvent ke = (KeyEvent)e;\n+\n+        if (!ke.isConsumed())\n+          postTextEvent ();\n+      }\n+  }\n }"}, {"sha": "05112d16b8b9cabc604426109f3eab94fdfa4885", "filename": "libjava/gnu/java/awt/peer/gtk/GtkTextFieldPeer.java", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2Fpeer%2Fgtk%2FGtkTextFieldPeer.java?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -37,6 +37,7 @@\n \n \n package gnu.java.awt.peer.gtk;\n+import java.awt.event.KeyEvent;\n import java.awt.peer.*;\n import java.awt.*;\n \n@@ -102,4 +103,18 @@ public void setFont (Font f)\n   {\n     gtkSetFont(((GtkFontPeer)f.getPeer()).getXLFD(), f.getSize());\n   }\n+\n+  public void handleEvent (AWTEvent e)\n+  {\n+    if (e.getID () == KeyEvent.KEY_PRESSED)\n+      {\n+        KeyEvent ke = (KeyEvent)e;\n+\n+        if (!ke.isConsumed()\n+            && ke.getKeyCode() == KeyEvent.VK_ENTER)\n+          postActionEvent (getText(), ke.getModifiers ());\n+      }\n+\n+    super.handleEvent (e);\n+  }\n }"}, {"sha": "97f980704164e776704759cd7f15d086d53c4f6f", "filename": "libjava/java/awt/event/ActionEvent.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fevent%2FActionEvent.java?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -205,7 +205,7 @@ public String paramString()\n     StringBuffer s = new StringBuffer(id == ACTION_PERFORMED\n                                       ? \"ACTION_PERFORMED,cmd=\"\n                                       : \"unknown type,cmd=\");\n-    s.append(actionCommand).append(\",when=\").append(when).append(\"modifiers\");\n+    s.append(actionCommand).append(\",when=\").append(when).append(\",modifiers\");\n     int len = s.length();\n     s.setLength(len + 1);\n     if ((modifiers & META_MASK) != 0)"}, {"sha": "3c400114e4b9aee0beec2d9d3eaf392e5cfb0484", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c", "status": "modified", "additions": 67, "deletions": 7, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkEvents.c?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -90,10 +90,10 @@ keysym_to_awt_keycode (guint keyval)\n \n   vk = gdk_keyval_to_upper (keyval);\n \n-  if (vk <= 0x41 && vk <= 0x5A)\t/* VK_A through VK_Z */\n+  if (vk >= 0x41 && vk <= 0x5A)\t/* VK_A through VK_Z */\n     return vk;\n \n-  if (vk <= 0x30 && vk <= 39)\t/* VK_0 through VK_9 */\n+  if (vk >= 0x30 && vk <= 0x39)\t/* VK_0 through VK_9 */\n     return vk;\n \n   switch (vk)\n@@ -232,6 +232,24 @@ keysym_to_awt_keycode (guint keyval)\n     }\n }\n \n+static int\n+generates_key_typed_event (guint keyval)\n+{\n+  guint vk;\n+\n+  vk = gdk_keyval_to_upper (keyval);\n+\n+  if ((vk >= 0x20 && vk <= 0x7e)\t/* Most printable keysyms on a\n+                                           standard US keyboard. */\n+      || (vk >= 0xFF9F && vk <= 0xFFB9) /* Numeric Keypad keysyms. */\n+      || vk == GDK_BackSpace\n+      || vk == GDK_Delete\n+      || vk == GDK_Return)\n+    return 1;\n+  else\n+    return 0;\n+}\n+\n void\n awt_event_handler (GdkEvent *event)\n {\n@@ -275,6 +293,7 @@ awt_event_handler (GdkEvent *event)\n        || event->type == GDK_CONFIGURE\n        || event->type == GDK_EXPOSE\n        || event->type == GDK_KEY_PRESS\n+       || event->type == GDK_KEY_RELEASE\n        || event->type == GDK_FOCUS_CHANGE\n        || event->type == GDK_MOTION_NOTIFY)\n       && gdk_property_get (event->any.window,\n@@ -468,29 +487,70 @@ awt_event_handler (GdkEvent *event)\n \t\t\t\t  NULL,\n \t\t\t\t  NULL,\n \t\t\t\t  (guchar **)&obj_ptr);\n-\t\t\n+\n \t\t/*  \t    if (grab  && GTK_WIDGET_HAS_DEFAULT (widget) ) */\n \t\t/*  \t      { */\n \t\t(*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n \t\t\t\t\t    postKeyEventID,\n \t\t\t\t\t    (jint) AWT_KEY_PRESSED,\n \t\t\t\t\t    (jlong) event->key.time,\n-\t\t\t\t\t  state_to_awt_mods (event->key.state),\n-\t\t\t\t     keysym_to_awt_keycode (event->key.keyval),\n+                                            state_to_awt_mods (event->key.state),\n+                                            keysym_to_awt_keycode (event->key.keyval),\n \t\t\t\t\t    (jchar) (event->key.length) ? \n \t\t\t\t\t    event->key.string[0] : \n \t\t\t\t\t    AWT_KEY_CHAR_UNDEFINED);\n-\t\tif (event->key.length)\n+\n+\t\tif (event->key.length\n+                    && generates_key_typed_event(event->key.keyval))\n \t\t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n \t\t\t\t\t      postKeyEventID,\n \t\t\t\t\t      (jint) AWT_KEY_TYPED,\n \t\t\t\t\t      (jlong) event->key.time,\n-\t\t\t\t\t  state_to_awt_mods (event->key.state),\n+                                              state_to_awt_mods (event->key.state),\n \t\t\t\t\t      VK_UNDEFINED,\n \t\t\t\t\t      (jchar) event->key.string[0]);\n \t      }\n \t  }\n \t  break;\n+        case GDK_KEY_RELEASE:\n+\t  {\n+\t    GtkWidget *widget;\n+\t    GtkWindow *window;\n+\n+\t    gdk_window_get_user_data (event->any.window, (void **) &widget);\n+\n+\t    window = GTK_WINDOW (gtk_widget_get_ancestor (widget, \n+\t\t\t\t\t\t\t  GTK_TYPE_WINDOW));\n+\t    if (window\n+\t\t&& GTK_WIDGET_IS_SENSITIVE (window) \n+\t\t&& window->focus_widget\n+\t\t&& GTK_WIDGET_IS_SENSITIVE (window->focus_widget)\n+\t\t&& window->focus_widget->window)\n+\t      {\n+\t\tgtk_widget_activate (window->focus_widget);\n+\t\tgdk_property_get (window->focus_widget->window,\n+\t\t\t\t  gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n+\t\t\t\t  gdk_atom_intern (\"CARDINAL\", FALSE),\n+\t\t\t\t  0,\n+\t\t\t\t  sizeof (jobject),\n+\t\t\t\t  FALSE,\n+\t\t\t\t  NULL,\n+\t\t\t\t  NULL,\n+\t\t\t\t  NULL,\n+\t\t\t\t  (guchar **)&obj_ptr);\n+\n+\t\t(*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n+\t\t\t\t\t    postKeyEventID,\n+\t\t\t\t\t    (jint) AWT_KEY_RELEASED,\n+\t\t\t\t\t    (jlong) event->key.time,\n+\t\t\t\t\t  state_to_awt_mods (event->key.state),\n+\t\t\t\t     keysym_to_awt_keycode (event->key.keyval),\n+\t\t\t\t\t    (jchar) (event->key.length) ? \n+\t\t\t\t\t    event->key.string[0] : \n+\t\t\t\t\t    AWT_KEY_CHAR_UNDEFINED);\n+              }\n+          }\n+          break;\n \tcase GDK_FOCUS_CHANGE:\n \t  (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr,\n \t\t\t\t      postFocusEventID,"}, {"sha": "83fab1cb8c08de934115303b027cfde9af509f12", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMainThread.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkMainThread.c?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -54,6 +54,7 @@ jmethodID postFocusEventID;\n jmethodID postAdjustmentEventID;\n jmethodID postItemEventID;\n jmethodID postListItemEventID;\n+jmethodID postTextEventID;\n JNIEnv *gdk_env;\n \n #ifdef PORTABLE_NATIVE_SYNC\n@@ -72,7 +73,8 @@ Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkInit (JNIEnv *env, jclass clazz)\n   char **argv;\n   char *homedir, *rcpath = NULL;\n /*    jclass gtkgenericpeer; */\n-  jclass gtkcomponentpeer, gtkwindowpeer, gtkscrollbarpeer, gtklistpeer, gtkmenuitempeer;\n+  jclass gtkcomponentpeer, gtkwindowpeer, gtkscrollbarpeer, gtklistpeer,\n+    gtkmenuitempeer, gtktextcomponentpeer;\n \n   NSA_INIT (env, clazz);\n \n@@ -133,6 +135,7 @@ Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkInit (JNIEnv *env, jclass clazz)\n \t\t\t\t     \"gnu/java/awt/peer/gtk/GtkScrollbarPeer\");\n   gtklistpeer = (*env)->FindClass (env, \"gnu/java/awt/peer/gtk/GtkListPeer\");\n   gtkmenuitempeer = (*env)->FindClass (env, \"gnu/java/awt/peer/gtk/GtkMenuItemPeer\");\n+  gtktextcomponentpeer = (*env)->FindClass (env, \"gnu/java/awt/peer/gtk/GtkTextComponentPeer\");\n /*    gdkColor = (*env)->FindClass (env, */\n /*  \t\t\t\t\"gnu/java/awt/peer/gtk/GdkColor\"); */\n /*    gdkColorID = (*env)->GetMethodID (env, gdkColor, \"<init>\", \"(III)V\"); */\n@@ -162,6 +165,9 @@ Java_gnu_java_awt_peer_gtk_GtkMainThread_gtkInit (JNIEnv *env, jclass clazz)\n   postListItemEventID = (*env)->GetMethodID (env, gtklistpeer,\n \t\t\t\t\t     \"postItemEvent\",\n \t\t\t\t\t     \"(II)V\");\n+  postTextEventID = (*env)->GetMethodID (env, gtktextcomponentpeer,\n+\t\t\t\t\t     \"postTextEvent\",\n+\t\t\t\t\t     \"()V\");\n }\n \n /*"}, {"sha": "de590352dd155d1ab1ab8d2990ac0ce757bd1f6d", "filename": "libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgnu_java_awt_peer_gtk_GtkTextComponentPeer.c?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -361,6 +361,7 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setText\n   const char *str;\n   GtkWidget *text = NULL;   // type of GtkTextView (TextArea)\n   GtkTextBuffer *buf;\n+  jobject *obj_ptr;\n \n   ptr = NSA_GET_PTR (env, obj);\n   str = (*env)->GetStringUTFChars (env, contents, NULL);\n@@ -370,6 +371,18 @@ Java_gnu_java_awt_peer_gtk_GtkTextComponentPeer_setText\n   if (GTK_IS_EDITABLE (ptr))\n     {\n       gtk_entry_set_text (GTK_ENTRY (ptr), str);\n+\n+      if (gdk_property_get (GTK_WIDGET(ptr)->window,\n+                            gdk_atom_intern (\"_GNU_GTKAWT_ADDR\", FALSE),\n+                            gdk_atom_intern (\"CARDINAL\", FALSE),\n+                            0,\n+                            sizeof (jobject),\n+                            FALSE,\n+                            NULL,\n+                            NULL,\n+                            NULL,\n+                            (guchar **)&obj_ptr))\n+        (*gdk_env)->CallVoidMethod (gdk_env, *obj_ptr, postTextEventID);\n     }\n   else\n     {"}, {"sha": "1cfa6c472cde55e6cf843ed079b457df1f8058a9", "filename": "libjava/jni/gtk-peer/gtkpeer.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6fa901bc961f54ec9b24c77538f159ad6736d20/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjni%2Fgtk-peer%2Fgtkpeer.h?ref=b6fa901bc961f54ec9b24c77538f159ad6736d20", "patch": "@@ -266,6 +266,7 @@ extern jmethodID postFocusEventID;\n extern jmethodID postAdjustmentEventID;\n extern jmethodID postItemEventID;\n extern jmethodID postListItemEventID;\n+extern jmethodID postTextEventID;\n extern jmethodID syncAttrsID;\n extern jclass gdkColor;\n extern jmethodID gdkColorID;"}]}