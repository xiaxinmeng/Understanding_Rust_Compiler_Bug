{"sha": "bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwMGM5ZTA4MDAyZmNiMzZkOGI2MWQyZTJhNDc4MDFlZjExYzJmMQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-02-14T16:51:24Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-02-14T16:51:24Z"}, "message": "PR middle-end/79448 - unhelpful -Wformat-truncation=2 warning\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/79448\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-3.c: New test.\n\t* gcc.dg/tree-ssa/pr79448-2.c: New test.\n\t* gcc.dg/tree-ssa/pr79448.c: New test.\n\ngcc/ChangeLog:\n\n\tPR middle-end/79448\n\t* gimple-ssa-sprintf.c (format_directive): Avoid issuing INT_MAX\n\t  warning for strings of unknown length.\n\nFrom-SVN: r245437", "tree": {"sha": "baaafc5e87557d7dd732a8365ba695cd92a0b830", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baaafc5e87557d7dd732a8365ba695cd92a0b830"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "355930ab262ceeb4dec0dd1094fd1dee8d9186c6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355930ab262ceeb4dec0dd1094fd1dee8d9186c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355930ab262ceeb4dec0dd1094fd1dee8d9186c6"}], "stats": {"total": 262, "additions": 259, "deletions": 3}, "files": [{"sha": "3d0e95e29d2d29ec43f20c443674ec32a2303d83", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -1,3 +1,9 @@\n+2017-02-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/79448\n+\t* gimple-ssa-sprintf.c (format_directive): Avoid issuing INT_MAX\n+\t  warning for strings of unknown length.\n+\n 2017-02-13  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config.gcc (supported_defaults) [powerpc*-*-*]: Update."}, {"sha": "a5fc3ffd725da1d14a05441deeb325264ec8067a", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -2559,13 +2559,16 @@ format_directive (const pass_sprintf_length::call_info &info,\n     res->range.max += fmtres.range.max;\n \n   /* Raise the total unlikely maximum by the larger of the maximum\n-     and the unlikely maximum.  It doesn't matter if the unlikely\n-     maximum overflows.  */\n+     and the unlikely maximum.  */\n+  unsigned HOST_WIDE_INT save = res->range.unlikely;\n   if (fmtres.range.max < fmtres.range.unlikely)\n     res->range.unlikely += fmtres.range.unlikely;\n   else\n     res->range.unlikely += fmtres.range.max;\n \n+  if (res->range.unlikely < save)\n+    res->range.unlikely = HOST_WIDE_INT_M1U;\n+\n   res->range.min += fmtres.range.min;\n   res->range.likely += fmtres.range.likely;\n \n@@ -2616,7 +2619,12 @@ format_directive (const pass_sprintf_length::call_info &info,\n \n   /* Has the likely and maximum directive output exceeded INT_MAX?  */\n   bool likelyximax = *dir.beg && res->range.likely > target_int_max ();\n-  bool maxximax = *dir.beg && res->range.max > target_int_max ();\n+  /* Don't consider the maximum to be in excess when it's the result\n+     of a string of unknown length (i.e., whose maximum has been set\n+     to be greater than or equal to HOST_WIDE_INT_MAX.  */\n+  bool maxximax = (*dir.beg\n+\t\t   && res->range.max > target_int_max ()\n+\t\t   && res->range.max < HOST_WIDE_INT_MAX);\n \n   if (!warned\n       /* Warn for the likely output size at level 1.  */"}, {"sha": "6e42393e9954d6de2e43baa2031af9e32b93e801", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -1,3 +1,10 @@\n+2017-02-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR middle-end/79448\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-3.c: New test.\n+\t* gcc.dg/tree-ssa/pr79448-2.c: New test.\n+\t* gcc.dg/tree-ssa/pr79448.c: New test.\n+\n 2017-02-14  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/79095"}, {"sha": "81c1d893e3594159d5e64d8c6c85f4266b265ed6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-3.c", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-3.c?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -0,0 +1,193 @@\n+/* PR middle-end/79448 - unhelpful -Wformat-truncation=2 warning\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wformat -Wformat-truncation=2 -ftrack-macro-expansion=0\" } */\n+\n+typedef __SIZE_TYPE__  size_t;\n+typedef __WCHAR_TYPE__ wchar_t;\n+\n+#define INT_MAX __INT_MAX__\n+#define INT_MIN (-INT_MAX - 1)\n+\n+/* When debugging, define LINE to the line number of the test case to exercise\n+   and avoid exercising any of the others.  The buffer and objsize macros\n+   below make use of LINE to avoid warnings for other lines.  */\n+#ifndef LINE\n+# define LINE 0\n+#endif\n+\n+extern int int_value (void);\n+extern size_t size_value (void);\n+\n+int int_range (int min, int max)\n+{\n+  int n = int_value ();\n+  return n < min || max < n ? min : n;\n+}\n+\n+void sink (int, char*, char*);\n+\n+int dummy_snprintf (char*, size_t, const char*, ...);\n+\n+char fixed_buffer [256];\n+extern char *unknown_buffer;\n+extern size_t unknown_size;\n+\n+/* Helper to expand function to either __builtin_f or dummy_f to\n+   make debugging GCC easy.  */\n+#define FUNC(f)\t\t\t\t\t\t\t\\\n+  ((!LINE || LINE == __LINE__) ? __builtin_ ## f : dummy_ ## f)\n+\n+/* Helper test macro.  */\n+#define T(size, ...)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    size_t n = size < 0 ? unknown_size : size;\t\t\\\n+    char *buf = size < 0 ? unknown_buffer\t\t\\\n+      : n < sizeof fixed_buffer\t\t\t\t\\\n+      ? fixed_buffer + sizeof fixed_buffer - size\t\\\n+      : unknown_buffer;\t\t\t\t\t\\\n+    FUNC (snprintf) (buf, n, __VA_ARGS__);\t\t\\\n+    sink (0, fixed_buffer, unknown_buffer);\t\t\\\n+  } while (0)\n+\n+/* Return a value in the range [MIN, MAX].  */\n+#define IR(min, max)  int_range (min, max)\n+\n+struct Arrays\n+{\n+  char a1[1];\n+  char a4k[4096];\n+  char a4kp1[4097];\n+#if INT_MAX < LONG_MAX\n+  char amax[INT_MAX];\n+#else\n+  char amax[32767];\n+#endif\n+  char ax[];\n+};\n+\n+void test_string_unchecked (const char *s, const struct Arrays *ar)\n+{\n+  /* Verify there is no warning with strings of unknown length.  */\n+  T (-1, \"%-s\", s);\n+  T (-1, \"%-s\", ar->ax);\n+\n+  T (-1, \"%s%s\", s, s);\n+  T (-1, \"%s%s\", \"\", s);\n+  T (-1, \"%s%s\", s, \"1\");\n+  T (-1, \"%s%s\", \"1\", s);\n+\n+  /* Verify there is no warning with strings of length that cannot\n+     exceed 4k (because of the array size).  */\n+  T (-1, \"%-s\", ar->a1);\n+  T (-1, \"%-s\", ar->a4k);\n+\n+  /* Verify there's no \"exceeds minimum required size of 4095\" warning\n+     with multiple %s directives and a combination of strings of unknown\n+     (and potentially unbounded) length and strings whose length is\n+     bounded by the size of the arrays they are stored in.  */\n+  T (-1, \"%s%s\", s, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, s);\n+  T (-1, \"%s%s\", ar->a4k, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, \"123\");\n+  T (-1, \"%s%s\", \"123\", ar->a4k);\n+  T (-1, \"%s%s\", ar->ax, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, ar->ax);\n+\n+  /* Verify that an array that fits a string longer than 4095 bytes\n+     does trigger a warning.  */\n+  T (-1, \"%-s\", ar->a4kp1);   /* { dg-warning \"directive output between 0 and 4096 bytes may exceed minimum required size of 4095\" } */\n+\n+  /* Also verify that a %s directive with width greater than 4095\n+     triggers a warning even if the argument is not longer than 4k.  */\n+  T (-1, \"%*s\", 4096, ar->a4k);   /* { dg-warning \"directive output of 4096 bytes exceeds minimum required size of 4095\" } */\n+\n+  /* Verify that precision constrains the putput and suppresses the 4k\n+     warning.  */\n+  T (-1, \"%.*s\", 4095, ar->a4kp1);\n+\n+  T (-1, \"%s %s\", s, \"\");\n+  T (-1, \"%s %s\", \"\", s);\n+  T (-1, \"%s %s\", s, \"1\");\n+  T (-1, \"%s %s\", \"1\", s);\n+\n+  T (-1, \"%s%s%s\", s, \"1\", s);\n+  T (-1, \"%s%s%s\", \"1\", s, \"1\");\n+  T (-1, \"%s%s%s\", s, s, s);\n+  T (-1, \"%*s%*s%*s\", 4093, s, 4094, s, 4095, s);\n+  T (-1, \"%s %s %s\", s, s, s);\n+  T (-1, \"%s %s %s\", ar->a4k, ar->a4k, ar->a4k);\n+  T (-1, \"%s %s %s\", ar->ax, ar->ax, ar->ax);\n+\n+  /* Verify that an array of INT_MAX elements doesn't trigger the INT_MAX\n+     warning (LP64 only).  */\n+  T (-1, \"%-s\", ar->amax);   /* { dg-warning \"directive output between 0 and \\[0-9\\]+ bytes may exceed minimum required size of 4095\" } */\n+}\n+\n+#undef T\n+/* Helper test macro.  */\n+#define T(size, ...)\t\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    size_t n = size < 0 ? unknown_size : size;\t\t\\\n+    char *buf = size < 0 ? unknown_buffer\t\t\\\n+      : n < sizeof fixed_buffer\t\t\t\t\\\n+      ? fixed_buffer + sizeof fixed_buffer - size\t\\\n+      : unknown_buffer;\t\t\t\t\t\\\n+    int r = FUNC (snprintf) (buf, n, __VA_ARGS__);\t\\\n+    sink (r, fixed_buffer, unknown_buffer);\t\t\\\n+  } while (0)\n+\n+void test_string_checked (const char *s, const struct Arrays *ar)\n+{\n+  /* Verify there is no warning with strings of unknown length.  */\n+  T (-1, \"%-s\", s);\n+  T (-1, \"%-s\", ar->ax);\n+\n+  T (-1, \"%s%s\", s, s);\n+  T (-1, \"%s%s\", \"\", s);\n+  T (-1, \"%s%s\", s, \"1\");\n+  T (-1, \"%s%s\", \"1\", s);\n+\n+  /* Verify there is no warning with strings of length that cannot\n+     exceed 4k (because of the array size).  */\n+  T (-1, \"%-s\", ar->a1);\n+  T (-1, \"%-s\", ar->a4k);\n+\n+  /* Verify there's no \"exceeds minimum required size of 4095\" warning\n+     with multiple %s directives and a combination of strings of unknown\n+     (and potentially unbounded) length and strings whose length is\n+     bounded by the size of the arrays they are stored in.  */\n+  T (-1, \"%s%s\", s, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, s);\n+  T (-1, \"%s%s\", ar->a4k, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, \"123\");\n+  T (-1, \"%s%s\", \"123\", ar->a4k);\n+  T (-1, \"%s%s\", ar->ax, ar->a4k);\n+  T (-1, \"%s%s\", ar->a4k, ar->ax);\n+\n+  /* Verify that an array that fits a string longer than 4095 bytes\n+     does trigger a warning.  */\n+  T (-1, \"%-s\", ar->a4kp1);   /* { dg-warning \"directive output between 0 and 4096 bytes may exceed minimum required size of 4095\" } */\n+\n+  /* Also verify that a %s directive with width greater than 4095\n+     triggers a warning even if the argument is not longer than 4k.  */\n+  T (-1, \"%*s\", 4096, ar->a4k);   /* { dg-warning \"directive output of 4096 bytes exceeds minimum required size of 4095\" } */\n+\n+  /* Verify that precision constrains the putput and suppresses the 4k\n+     warning.  */\n+  T (-1, \"%.*s\", 4095, ar->a4kp1);\n+\n+  T (-1, \"%s %s\", s, \"\");\n+  T (-1, \"%s %s\", \"\", s);\n+  T (-1, \"%s %s\", s, \"1\");\n+  T (-1, \"%s %s\", \"1\", s);\n+\n+  T (-1, \"%s%s%s\", s, \"1\", s);\n+  T (-1, \"%s%s%s\", \"1\", s, \"1\");\n+  T (-1, \"%s%s%s\", s, s, s);\n+  T (-1, \"%*s%*s%*s\", 4093, s, 4094, s, 4095, s);\n+  T (-1, \"%s %s %s\", s, s, s);\n+  T (-1, \"%s %s %s\", ar->a4k, ar->a4k, ar->a4k);\n+  T (-1, \"%s %s %s\", ar->ax, ar->ax, ar->ax);\n+\n+  T (-1, \"%-s\", ar->amax);   /* { dg-warning \"directive output between 0 and \\[0-9\\]+ bytes may exceed minimum required size of 4095\" } */\n+}"}, {"sha": "f75f523a2e0b7d65b61b15e34474a4e00f2e1b79", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79448-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448-2.c?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/79448 - unhelpful -Wformat-truncation=2 warning\n+   Verify that there's no warning with optimization.\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -Wformat -Wformat-truncation=2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int\n+snprintf (char*, size_t, const char*, ...);\n+\n+char*\n+gettext (char*);\n+\n+char*\n+fill (char *buf, size_t len, int count)\n+{\n+  if (snprintf (buf, len, \"%s: %d\", gettext (\"count\"), count) >= len)  /* { dg-bogus \"directive output of 2 bytes causes result to exceed .INT_MAX.\" */\n+    return 0;\n+\n+  return buf;\n+}"}, {"sha": "c346c9ef08a0e432515345f0bee660d9b5800753", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79448.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79448.c?ref=bf00c9e08002fcb36d8b61d2e2a47801ef11c2f1", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/79448 - unhelpful -Wformat-truncation=2 warning\n+   Verify that there's no warning without optimization.\n+   { dg-do compile }\n+   { dg-options \"-Wall -Wformat -Wformat-truncation=2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+extern int\n+snprintf (char*, size_t, const char*, ...);\n+\n+char*\n+gettext (char*);\n+\n+char*\n+fill (char *buf, size_t len, int count)\n+{\n+  if (snprintf (buf, len, \"%s: %d\", gettext (\"count\"), count) >= len)  /* { dg-bogus \"directive output of 2 bytes causes result to exceed .INT_MAX.\" */\n+    return 0;\n+\n+  return buf;\n+}"}]}