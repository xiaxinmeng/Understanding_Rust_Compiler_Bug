{"sha": "4035739819b7ce568f9740429c2ec9835c7341c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDAzNTczOTgxOWI3Y2U1NjhmOTc0MDQyOWMyZWM5ODM1YzczNDFjNg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2012-02-03T19:49:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2012-02-03T19:49:11Z"}, "message": "re PR libstdc++/51811 ([C++0x] Incorrect increment/decrement of atomic pointers)\n\n2012-02-03  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/51811\n\t* include/bits/atomic_base.h (atomic<_Tp*>): Fix offsets.\n\t* testsuite/29_atomics/atomic/operators/51811.cc: New.\n\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc: New.\n\nFrom-SVN: r183875", "tree": {"sha": "f35cfe78b7d9bf34d0dd435263ca35589af6e623", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f35cfe78b7d9bf34d0dd435263ca35589af6e623"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4035739819b7ce568f9740429c2ec9835c7341c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4035739819b7ce568f9740429c2ec9835c7341c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4035739819b7ce568f9740429c2ec9835c7341c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4035739819b7ce568f9740429c2ec9835c7341c6/comments", "author": null, "committer": null, "parents": [{"sha": "3bc05470eb647757c8545fceab44d54f6fecb25e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bc05470eb647757c8545fceab44d54f6fecb25e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bc05470eb647757c8545fceab44d54f6fecb25e"}], "stats": {"total": 212, "additions": 197, "deletions": 15}, "files": [{"sha": "656cc96ef293b5265f760e3d62d19489f7302446", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4035739819b7ce568f9740429c2ec9835c7341c6", "patch": "@@ -1,3 +1,10 @@\n+2012-02-03  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/51811\n+\t* include/bits/atomic_base.h (atomic<_Tp*>): Fix offsets.\n+\t* testsuite/29_atomics/atomic/operators/51811.cc: New.\n+\t* testsuite/29_atomics/atomic/operators/pointer_partial_void.cc: New.\n+\n 2012-02-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/abi/post/i386-linux-gnu/baseline_symbols.txt: Update."}, {"sha": "9d5f4eb6ff00632d17e9cbe044832831257c0fe1", "filename": "libstdc++-v3/include/bits/atomic_base.h", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_base.h?ref=4035739819b7ce568f9740429c2ec9835c7341c6", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- header.\n \n-// Copyright (C) 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009, 2010, 2011, 2012 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -621,6 +621,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __pointer_type \t_M_p;\n \n+      // Factored out to facilitate explicit specialization.\n+      constexpr ptrdiff_t\n+      _M_type_size(ptrdiff_t __d) { return __d * sizeof(_PTp); }\n+\n+      constexpr ptrdiff_t\n+      _M_type_size(ptrdiff_t __d) volatile { return __d * sizeof(_PTp); }\n+\n     public:\n       __atomic_base() noexcept = default;\n       ~__atomic_base() noexcept = default;\n@@ -669,43 +676,51 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       __pointer_type\n       operator++() noexcept\n-      { return __atomic_add_fetch(&_M_p, 1, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_p, _M_type_size(1),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator++() volatile noexcept\n-      { return __atomic_add_fetch(&_M_p, 1, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_p, _M_type_size(1),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator--() noexcept\n-      { return __atomic_sub_fetch(&_M_p, 1, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator--() volatile noexcept\n-      { return __atomic_sub_fetch(&_M_p, 1, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator+=(ptrdiff_t __d) noexcept\n-      { return __atomic_add_fetch(&_M_p, __d, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator+=(ptrdiff_t __d) volatile noexcept\n-      { return __atomic_add_fetch(&_M_p, __d, memory_order_seq_cst); }\n+      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator-=(ptrdiff_t __d) noexcept\n-      { return __atomic_sub_fetch(&_M_p, __d, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       __pointer_type\n       operator-=(ptrdiff_t __d) volatile noexcept\n-      { return __atomic_sub_fetch(&_M_p, __d, memory_order_seq_cst); }\n+      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),\n+\t\t\t\t  memory_order_seq_cst); }\n \n       bool\n       is_lock_free() const noexcept\n-      { return __atomic_is_lock_free (sizeof (_M_p), &_M_p); }\n+      { return __atomic_is_lock_free(_M_type_size(1), &_M_p); }\n \n       bool\n       is_lock_free() const volatile noexcept\n-      { return __atomic_is_lock_free (sizeof (_M_p), &_M_p); }\n+      { return __atomic_is_lock_free(_M_type_size(1), &_M_p); }\n \n       void\n       store(__pointer_type __p,\n@@ -789,22 +804,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __pointer_type\n       fetch_add(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) noexcept\n-      { return __atomic_fetch_add(&_M_p, __d, __m); }\n+      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }\n \n       __pointer_type\n       fetch_add(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) volatile noexcept\n-      { return __atomic_fetch_add(&_M_p, __d, __m); }\n+      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), __m); }\n \n       __pointer_type\n       fetch_sub(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) noexcept\n-      { return __atomic_fetch_sub(&_M_p, __d, __m); }\n+      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }\n \n       __pointer_type\n       fetch_sub(ptrdiff_t __d,\n \t\tmemory_order __m = memory_order_seq_cst) volatile noexcept\n-      { return __atomic_fetch_sub(&_M_p, __d, __m); }\n+      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), __m); }\n     };\n \n   // @} group atomics"}, {"sha": "7c234f2ff025bd05d514b54ba0fdac2b3a7dceaf", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/51811.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2F51811.cc?ref=4035739819b7ce568f9740429c2ec9835c7341c6", "patch": "@@ -0,0 +1,90 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+#include <cstdlib> //std::abs\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/51811\n+// pointer arithimetic vs. atomic<_Tp*> specialization\n+int main(void)\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+\n+  typedef int \tvalue_type;\n+  const size_t n = 2;\n+  value_type value = 42;\n+  atomic<value_type*> p, p2, p3;\n+\n+  // operator++\n+  {\n+    p = &value;\n+    p2 = p++;\n+    VERIFY (p != p2);\n+    \n+    value_type* vp(p);\n+    value_type* vp2(p2);\n+    ptrdiff_t dist = reinterpret_cast<char*>(vp) - reinterpret_cast<char*>(vp2);\n+    VERIFY ( std::abs(dist) == sizeof(value_type));\n+  \n+    p = &value;\n+    p3 = ++p;\n+    VERIFY (p == p3);\n+  }\n+\n+  // operator--\n+  {\n+    p = &value;\n+    p2 = p--;\n+    VERIFY (p != p2);\n+\n+    value_type* vp(p);\n+    value_type* vp2(p2);\n+    ptrdiff_t dist = reinterpret_cast<char*>(vp) - reinterpret_cast<char*>(vp2);\n+    VERIFY ( std::abs(dist) == sizeof(value_type));\n+\n+    p = &value;\n+    p3 = --p;\n+    VERIFY (p == p3);\n+  }\n+\n+  // operator+=\n+  {\n+    p = &value;\n+    value_type* vp(p);\n+    p+=n;\n+    value_type* vp2(p);\n+    ptrdiff_t dist = reinterpret_cast<char*>(vp) - reinterpret_cast<char*>(vp2);\n+    VERIFY ( std::abs(dist) == sizeof(value_type) * n);\n+  }\n+\n+  // operator-=\n+  {\n+    p = &value;\n+    value_type* vp(p);\n+    p-=n;\n+    value_type* vp2(p);\n+    ptrdiff_t dist = reinterpret_cast<char*>(vp) - reinterpret_cast<char*>(vp2);\n+    VERIFY ( std::abs(dist) == sizeof(value_type) * n);\n+  }\n+\n+  return 0;\n+}"}, {"sha": "09a4d44db8e5bd915b945c0d05ab2015d4336dc3", "filename": "libstdc++-v3/testsuite/29_atomics/atomic/operators/pointer_partial_void.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4035739819b7ce568f9740429c2ec9835c7341c6/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F29_atomics%2Fatomic%2Foperators%2Fpointer_partial_void.cc?ref=4035739819b7ce568f9740429c2ec9835c7341c6", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++0x\" }\n+\n+// Copyright (C) 2012 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <atomic>\n+#include <cstdlib> //std::abs\n+#include <testsuite_hooks.h>\n+\n+// pointer arithimetic vs. atomic<void*>.\n+// atomic<void*> vs. explicitly specialized w/o operators, like atomic_bool?\n+int main(void)\n+{\n+  // bool test __attribute__((unused)) = true;\n+\n+  using namespace std;\n+\n+  typedef int \tvalue_type;\n+  const size_t n = 2;\n+  value_type value = 42;\n+  value_type* p = &value;\n+  void* vp = p;\n+  ptrdiff_t dist(0);\n+\n+  atomic<void*> a(vp);\n+\n+  // operator++\n+  void* vp2(a);\n+  a++;\n+  void* vp3(a);\n+  dist = reinterpret_cast<char*>(vp2) - reinterpret_cast<char*>(vp3);\n+  // VERIFY ( std::abs(dist) == sizeof(void*));\n+\n+  // operator--\n+  void* vp4(a);\n+  a--;\n+  void* vp5(a);\n+  dist = reinterpret_cast<char*>(vp4) - reinterpret_cast<char*>(vp5);\n+  // VERIFY ( std::abs(dist) == sizeof(void*));\n+\n+  // operator+=\n+  void* vp6(a);\n+  a+=n;\n+  void* vp7(a);\n+  dist = reinterpret_cast<char*>(vp6) - reinterpret_cast<char*>(vp7);\n+  // VERIFY ( std::abs(dist) == sizeof(void*) * n);\n+\n+  // operator-=\n+  void* vp8(a);\n+  a-=n;\n+  void* vp9(a);\n+  dist = reinterpret_cast<char*>(vp8) - reinterpret_cast<char*>(vp9);\n+  //VERIFY ( std::abs(dist) == sizeof(void*) * n);\n+\n+  return 0;\n+}"}]}