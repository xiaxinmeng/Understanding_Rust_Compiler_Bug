{"sha": "6ab5da80508bc198963b872b6333eb968b3c273e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFiNWRhODA1MDhiYzE5ODk2M2I4NzJiNjMzM2ViOTY4YjNjMjczZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2003-06-13T14:30:38Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2003-06-13T14:30:38Z"}, "message": "arm.c (output_call_mem): If the address references the link-register use an instruction sequence that...\n\n* arm.c (output_call_mem): If the address references the link-register\nuse an instruction sequence that avoids early-clobbering IP.\n(eliminate_lr2ip): Delete.\n\nFrom-SVN: r67899", "tree": {"sha": "ed8eb3b5b4a0867e6ea7eb1a724413c7d03ca435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed8eb3b5b4a0867e6ea7eb1a724413c7d03ca435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ab5da80508bc198963b872b6333eb968b3c273e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab5da80508bc198963b872b6333eb968b3c273e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ab5da80508bc198963b872b6333eb968b3c273e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ab5da80508bc198963b872b6333eb968b3c273e/comments", "author": null, "committer": null, "parents": [{"sha": "cec57f7231040e0bd2d4fdce26d78592574abc21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cec57f7231040e0bd2d4fdce26d78592574abc21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cec57f7231040e0bd2d4fdce26d78592574abc21"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "c86143da53f343e32cf8004f0f50215b041c516c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5da80508bc198963b872b6333eb968b3c273e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5da80508bc198963b872b6333eb968b3c273e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ab5da80508bc198963b872b6333eb968b3c273e", "patch": "@@ -1,3 +1,9 @@\n+2003-06-13  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm.c (output_call_mem): If the address references the link-register\n+\tuse an instruction sequence that avoids early-clobbering IP.\n+\t(eliminate_lr2ip): Delete.\n+\n 2003-06-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-format.c (format_types_orig): Disallow '*' width/precision in"}, {"sha": "f9f54744e04775329f5726651515db602cadea21", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 9, "deletions": 39, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ab5da80508bc198963b872b6333eb968b3c273e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ab5da80508bc198963b872b6333eb968b3c273e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=6ab5da80508bc198963b872b6333eb968b3c273e", "patch": "@@ -73,7 +73,6 @@ static int arm_legitimate_index_p (enum machine_mode, rtx, int);\n static int thumb_base_register_rtx_p (rtx, enum machine_mode, int);\n inline static int thumb_index_register_rtx_p (rtx, int);\n static int const_ok_for_op (HOST_WIDE_INT, enum rtx_code);\n-static int eliminate_lr2ip (rtx *);\n static rtx emit_multi_reg_push (int);\n static rtx emit_sfm (int, int);\n #ifndef AOF_ASSEMBLER\n@@ -6965,54 +6964,25 @@ output_call (rtx *operands)\n   return \"\";\n }\n \n-static int\n-eliminate_lr2ip (rtx *x)\n-{\n-  int something_changed = 0;\n-  rtx x0 = * x;\n-  int code = GET_CODE (x0);\n-  int i, j;\n-  const char * fmt;\n-  \n-  switch (code)\n-    {\n-    case REG:\n-      if (REGNO (x0) == LR_REGNUM)\n-        {\n-\t  *x = gen_rtx_REG (SImode, IP_REGNUM);\n-\t  return 1;\n-        }\n-      return 0;\n-    default:\n-      /* Scan through the sub-elements and change any references there.  */\n-      fmt = GET_RTX_FORMAT (code);\n-      \n-      for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-\tif (fmt[i] == 'e')\n-\t  something_changed |= eliminate_lr2ip (&XEXP (x0, i));\n-\telse if (fmt[i] == 'E')\n-\t  for (j = 0; j < XVECLEN (x0, i); j++)\n-\t    something_changed |= eliminate_lr2ip (&XVECEXP (x0, i, j));\n-      \n-      return something_changed;\n-    }\n-}\n-  \n /* Output a 'call' insn that is a reference in memory.  */\n const char *\n output_call_mem (rtx *operands)\n {\n-  operands[0] = copy_rtx (operands[0]); /* Be ultra careful.  */\n-  /* Handle calls using lr by using ip (which may be clobbered in subr anyway).  */\n-  if (eliminate_lr2ip (&operands[0]))\n-    output_asm_insn (\"mov%?\\t%|ip, %|lr\", operands);\n-\n   if (TARGET_INTERWORK)\n     {\n       output_asm_insn (\"ldr%?\\t%|ip, %0\", operands);\n       output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n       output_asm_insn (\"bx%?\\t%|ip\", operands);\n     }\n+  else if (regno_use_in (LR_REGNUM, operands[0]))\n+    {\n+      /* LR is used in the memory address.  We load the address in the\n+\t first instruction.  It's safe to use IP as the target of the\n+\t load since the call will kill it anyway.  */\n+      output_asm_insn (\"ldr%?\\t%|ip, %0\", operands);\n+      output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);\n+      output_asm_insn (\"mov%?\\t%|pc, %|ip\", operands);\n+    }\n   else\n     {\n       output_asm_insn (\"mov%?\\t%|lr, %|pc\", operands);"}]}