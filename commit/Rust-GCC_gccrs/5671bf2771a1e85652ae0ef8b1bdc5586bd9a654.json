{"sha": "5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTY3MWJmMjc3MWExZTg1NjUyYWUwZWY4YjFiZGM1NTg2YmQ5YTY1NA==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-07-07T19:11:59Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-07-07T19:11:59Z"}, "message": "genextract.c: Convert remaining prototypes to ISO C90.\n\n2003-07-07  Andreas Jaeger  <aj@suse.de>\n\n\t* genextract.c: Convert remaining prototypes to ISO C90.\n\n\t* cpplex.c (_cpp_free_buff): Convert prototype to ISO C90.\n\t* fold-const.c (fold_single_bit_test): Likewise.\n\t* diagnostic.c (default_diagnostic_finalizer): Likewise.\n\t* cfgrtl.c (rtl_redirect_edge_and_branch): Likewise.\n\n\t* gengtype.c (write_array): Generate ISO C90 prototypes.\n\n\t* genflags.c (gen_proto): Generate ISO C90 prototypes.\n\n\nFor cp:\n2003-07-07  Andreas Jaeger  <aj@suse.de>\n\n\t* friend.c: Convert to ISO C90 prototypes.\n\n\t* Make-lang.in ($(srcdir)/cp/cfns.h): Use ANSI-C as output\n\tlanguage.\n\t* cfns.h: Regenerate.\n\n\t* typeck.c: Convert remaining prototypes to ISO C90.\n\t* search.c: Likewise.\n\n\t* decl2.c (build_expr_from_tree): Convert prototype to ISO C90.\n\t* semantics.c (expand_or_defer_fn): Likewise\n\t* mangle.c (discriminator_for_string_literal): Likewise.\n\t* g++spec.c (lang_specific_driver): Likewise.\n\n\t* search.c (lookup_base_r): Remove unused variable.\n\nFrom-SVN: r69050", "tree": {"sha": "d225fa5aa22af2d34ad3be50332a336d045f1610", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d225fa5aa22af2d34ad3be50332a336d045f1610"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2c430630da43fd1908fcb6c4b57d0a5221c86261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c430630da43fd1908fcb6c4b57d0a5221c86261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c430630da43fd1908fcb6c4b57d0a5221c86261"}], "stats": {"total": 201, "additions": 86, "deletions": 115}, "files": [{"sha": "5543c98f8c475b5566ca28cb37aadaf010e554b6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1,3 +1,16 @@\n+2003-07-07  Andreas Jaeger  <aj@suse.de>\n+\n+\t* genextract.c: Convert remaining prototypes to ISO C90.\n+\n+\t* cpplex.c (_cpp_free_buff): Convert prototype to ISO C90.\n+\t* fold-const.c (fold_single_bit_test): Likewise.\n+\t* diagnostic.c (default_diagnostic_finalizer): Likewise.\n+\t* cfgrtl.c (rtl_redirect_edge_and_branch): Likewise.\n+\n+\t* gengtype.c (write_array): Generate ISO C90 prototypes.\n+\n+\t* genflags.c (gen_proto): Generate ISO C90 prototypes.\n+\n 2003-07-07  Roger Sayle  <roger@eyesopen.com>\n \n \tPR optimization/11059"}, {"sha": "d197b79380a177b994b21c50258f56b1f100c475", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -936,9 +936,7 @@ redirect_branch_edge (edge e, basic_block target)\n    stream.  */\n \n static bool\n-rtl_redirect_edge_and_branch (e, target)\n-     edge e;\n-     basic_block target;\n+rtl_redirect_edge_and_branch (edge e, basic_block target)\n {\n   if (e->flags & (EDGE_ABNORMAL_CALL | EDGE_EH))\n     return false;"}, {"sha": "8da2d01a4c36f8fc38a826590dfa4b66b4ab72ab", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1,3 +1,21 @@\n+2003-07-07  Andreas Jaeger  <aj@suse.de>\n+\n+\t* friend.c: Convert to ISO C90 prototypes.\n+\n+\t* Make-lang.in ($(srcdir)/cp/cfns.h): Use ANSI-C as output\n+\tlanguage.\n+\t* cfns.h: Regenerate.\n+\n+\t* typeck.c: Convert remaining prototypes to ISO C90.\n+\t* search.c: Likewise.\n+\n+\t* decl2.c (build_expr_from_tree): Convert prototype to ISO C90.\n+\t* semantics.c (expand_or_defer_fn): Likewise\n+\t* mangle.c (discriminator_for_string_literal): Likewise.\n+\t* g++spec.c (lang_specific_driver): Likewise.\n+\n+\t* search.c (lookup_base_r): Remove unused variable.\n+\n 2003-07-07  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* semantics.c: (genrtl_try_block) Adjust emit_line_note"}, {"sha": "df1d8a79216553ace201df25fa9c265e79622951", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -99,7 +99,7 @@ cc1plus$(exeext): $(CXX_OBJS) $(CXX_C_OBJS) $(BACKEND) \\\n \n # Special build rules.\n $(srcdir)/cp/cfns.h: $(srcdir)/cp/cfns.gperf\n-\tgperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' \\\n+\tgperf -o -C -E -k '1-6,$$' -j1 -D -N 'libc_name_p' -L ANSI-C \\\n \t\t$(srcdir)/cp/cfns.gperf > $(srcdir)/cp/cfns.h\n \n gtype-cp.h gt-cp-call.h gt-cp-decl.h gt-cp-decl2.h : s-gtype; @true"}, {"sha": "415518bf85473c7b36fde183cc23ef3faa942a14", "filename": "gcc/cp/cfns.h", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fcfns.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fcfns.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcfns.h?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1,5 +1,5 @@\n-/* C code produced by gperf version 2.7.2 */\n-/* Command-line: gperf -o -C -E -k '1-6,$' -j1 -D -N libc_name_p ../../../src-gcc/gcc/cp/cfns.gperf  */\n+/* ANSI-C code produced by gperf version 2.7.2 */\n+/* Command-line: gperf -o -L ANSI-C -C -E -k '1-6,$' -j1 -D -N libc_name_p -L ANSI-C cp/cfns.gperf  */\n #ifdef __GNUC__\n __inline\n #endif\n@@ -18,9 +18,7 @@ inline\n #endif\n #endif\n static unsigned int\n-hash (str, len)\n-     register const char *str;\n-     register unsigned int len;\n+hash (register const char *str, register unsigned int len)\n {\n   static const unsigned short asso_values[] =\n     {\n@@ -77,9 +75,7 @@ hash (str, len)\n __inline\n #endif\n const char *\n-libc_name_p (str, len)\n-     register const char *str;\n-     register unsigned int len;\n+libc_name_p (register const char *str, register unsigned int len)\n {\n   enum\n     {"}, {"sha": "39f6ca5536917e0fba46e94b63a729862feac36d", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -2942,8 +2942,7 @@ finish_file ()\n    performing semantic analysis.  */\n \n tree\n-build_expr_from_tree (t)\n-     tree t;\n+build_expr_from_tree (tree t)\n {\n   if (t == NULL_TREE || t == error_mark_node)\n     return t;"}, {"sha": "26bc383799d100a89ef669d10a67bf4443ac6c48", "filename": "gcc/cp/g++spec.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fg%2B%2Bspec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fg%2B%2Bspec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fg%2B%2Bspec.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -47,10 +47,8 @@ Boston, MA 02111-1307, USA.  */\n #endif\n \n void\n-lang_specific_driver (in_argc, in_argv, in_added_libraries)\n-     int *in_argc;\n-     const char *const **in_argv;\n-     int *in_added_libraries;\n+lang_specific_driver (int *in_argc, const char *const **in_argv,\n+\t\t      int *in_added_libraries)\n {\n   int i, j;\n "}, {"sha": "49a956886a71c63dc53efa9e782cdfbb2c18ac0d", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1333,9 +1333,8 @@ discriminator_for_local_entity (tree entity)\n    string literals used in FUNCTION.  */\n \n static int\n-discriminator_for_string_literal (function, string)\n-     tree function ATTRIBUTE_UNUSED;\n-     tree string ATTRIBUTE_UNUSED;\n+discriminator_for_string_literal (tree function ATTRIBUTE_UNUSED,\n+\t\t\t\t  tree string ATTRIBUTE_UNUSED)\n {\n   /* For now, we don't discriminate amongst string literals.  */\n   return 0;"}, {"sha": "cee35ff2d525d5245d715bc8c52d63079289f95c", "filename": "gcc/cp/search.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -43,10 +43,8 @@ static struct obstack search_obstack;\n /* Methods for pushing and popping objects to and from obstacks.  */\n \n struct stack_level *\n-push_stack_level (obstack, tp, size)\n-     struct obstack *obstack;\n-     char *tp;  /* Sony NewsOS 5.0 compiler doesn't like void * here.  */\n-     int size;\n+push_stack_level (struct obstack *obstack, char *tp,/* Sony NewsOS 5.0 compiler doesn't like void * here.  */\n+\t\t  int size)\n {\n   struct stack_level *stack;\n   obstack_grow (obstack, tp, size);\n@@ -59,8 +57,7 @@ push_stack_level (obstack, tp, size)\n }\n \n struct stack_level *\n-pop_stack_level (stack)\n-     struct stack_level *stack;\n+pop_stack_level (struct stack_level *stack)\n {\n   struct stack_level *tem = stack;\n   struct obstack *obstack = tem->obstack;"}, {"sha": "9301e6595361c9adf820be4edc1285a656f861a0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -2351,8 +2351,7 @@ expand_body (tree fn)\n /* Generate RTL for FN.  */\n \n void\n-expand_or_defer_fn (fn)\n-     tree fn;\n+expand_or_defer_fn (tree fn)\n {\n   /* When the parser calls us after finishing the body of a template\n      function, we don't really want to expand the body.  When we're"}, {"sha": "5be6aa88602919c1ffc5298686d4de82ef973c78", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 24, "deletions": 57, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -166,8 +166,7 @@ complete_type_or_diagnostic (tree type, tree value, int diag_type)\n /* Return truthvalue of whether type of EXP is instantiated.  */\n \n int\n-type_unknown_p (exp)\n-     tree exp;\n+type_unknown_p (tree exp)\n {\n   return (TREE_CODE (exp) == OVERLOAD\n           || TREE_CODE (exp) == TREE_LIST\n@@ -185,8 +184,7 @@ type_unknown_p (exp)\n    signatures of T1 and T2: [expr.rel], [expr.eq].  */\n \n static tree\n-qualify_type_recursive (t1, t2)\n-     tree t1, t2;\n+qualify_type_recursive (tree t1, tree t2)\n {\n   if ((TYPE_PTR_P (t1) && TYPE_PTR_P (t2))\n       || (TYPE_PTRMEM_P (t1) && TYPE_PTRMEM_P (t2)))\n@@ -231,8 +229,7 @@ qualify_type_recursive (t1, t2)\n    lists are already common.  */\n \n tree\n-commonparms (p1, p2)\n-     tree p1, p2;\n+commonparms (tree p1, tree p2)\n {\n   tree oldargs = p1, newargs, n;\n   int i, len;\n@@ -293,8 +290,7 @@ commonparms (p1, p2)\n /* Given a type, perhaps copied for a typedef,\n    find the \"original\" version of it.  */\n tree\n-original_type (t)\n-     tree t;\n+original_type (tree t)\n {\n   while (TYPE_NAME (t) != NULL_TREE)\n     {\n@@ -314,9 +310,7 @@ original_type (t)\n    T2 as described in [expr].  */\n \n tree\n-type_after_usual_arithmetic_conversions (t1, t2)\n-     tree t1;\n-     tree t2;\n+type_after_usual_arithmetic_conversions (tree t1, tree t2)\n {\n   enum tree_code code1 = TREE_CODE (t1);\n   enum tree_code code2 = TREE_CODE (t2);\n@@ -459,12 +453,8 @@ type_after_usual_arithmetic_conversions (t1, t2)\n    string describing the current location, in case an error occurs.  */\n \n tree \n-composite_pointer_type (t1, t2, arg1, arg2, location)\n-     tree t1;\n-     tree t2;\n-     tree arg1;\n-     tree arg2;\n-     const char* location;\n+composite_pointer_type (tree t1, tree t2, tree arg1, tree arg2,\n+\t\t\tconst char* location)\n {\n   tree result_type;\n   tree attributes;\n@@ -547,8 +537,7 @@ composite_pointer_type (t1, t2, arg1, arg2, location)\n    differences would cause the two types to compare unalike.  */\n \n tree\n-merge_types (t1, t2)\n-     tree t1, t2;\n+merge_types (tree t1, tree t2)\n {\n   register enum tree_code code1;\n   register enum tree_code code2;\n@@ -695,8 +684,7 @@ merge_types (t1, t2)\n    if the operands have the given two types.  */\n \n tree\n-common_type (t1, t2)\n-     tree t1, t2;\n+common_type (tree t1, tree t2)\n {\n   enum tree_code code1;\n   enum tree_code code2;\n@@ -2210,9 +2198,7 @@ build_ptrmemfunc_access_expr (tree ptrmem, tree member_name)\n    Must also handle REFERENCE_TYPEs for C++.  */\n \n tree\n-build_x_indirect_ref (ptr, errorstring)\n-     tree ptr;\n-     const char *errorstring;\n+build_x_indirect_ref (tree ptr, const char *errorstring)\n {\n   tree rval;\n \n@@ -2227,9 +2213,7 @@ build_x_indirect_ref (ptr, errorstring)\n }\n \n tree\n-build_indirect_ref (ptr, errorstring)\n-     tree ptr;\n-     const char *errorstring;\n+build_indirect_ref (tree ptr, const char *errorstring)\n {\n   register tree pointer, type;\n \n@@ -2309,8 +2293,7 @@ build_indirect_ref (ptr, errorstring)\n    will inherit the type of the array, which will be some pointer type.  */\n \n tree\n-build_array_ref (array, idx)\n-     tree array, idx;\n+build_array_ref (tree array, tree idx)\n {\n   if (idx == 0)\n     {\n@@ -2466,9 +2449,7 @@ build_array_ref (array, idx)\n    later has the right member.  */\n \n tree\n-get_member_function_from_ptrfunc (instance_ptrptr, function)\n-     tree *instance_ptrptr;\n-     tree function;\n+get_member_function_from_ptrfunc (tree *instance_ptrptr, tree function)\n {\n   if (TREE_CODE (function) == OFFSET_REF)\n     function = TREE_OPERAND (function, 1);\n@@ -2570,8 +2551,7 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n }\n \n tree\n-build_function_call (function, params)\n-     tree function, params;\n+build_function_call (tree function, tree params)\n {\n   register tree fntype, fndecl;\n   register tree coerced_params;\n@@ -2689,9 +2669,7 @@ build_function_call (function, params)\n    default arguments, if such were specified.  Do so here.  */\n \n tree\n-convert_arguments (typelist, values, fndecl, flags)\n-     tree typelist, values, fndecl;\n-     int flags;\n+convert_arguments (tree typelist, tree values, tree fndecl, int flags)\n {\n   register tree typetail, valtail;\n   register tree result = NULL_TREE;\n@@ -2848,9 +2826,7 @@ convert_arguments (typelist, values, fndecl, flags)\n    conversions on the operands.  CODE is the kind of expression to build.  */\n \n tree\n-build_x_binary_op (code, arg1, arg2)\n-     enum tree_code code;\n-     tree arg1, arg2;\n+build_x_binary_op (enum tree_code code, tree arg1, tree arg2)\n {\n   if (processing_template_decl)\n     return build_min_nt (code, arg1, arg2);\n@@ -3057,10 +3033,8 @@ build_template_expr (enum tree_code code, tree op0, tree op1, tree op2)\n    multiple inheritance, and deal with pointer to member functions.  */\n \n tree\n-build_binary_op (code, orig_op0, orig_op1, convert_p)\n-     enum tree_code code;\n-     tree orig_op0, orig_op1;\n-     int convert_p ATTRIBUTE_UNUSED;\n+build_binary_op (enum tree_code code, tree orig_op0, tree orig_op1,\n+\t\t int convert_p ATTRIBUTE_UNUSED)\n {\n   tree op0, op1;\n   register enum tree_code code0, code1;\n@@ -3792,9 +3766,8 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n    of pointer PTROP and integer INTOP.  */\n \n static tree\n-cp_pointer_int_sum (resultcode, ptrop, intop)\n-     enum tree_code resultcode;\n-     register tree ptrop, intop;\n+cp_pointer_int_sum (enum tree_code resultcode, register tree ptrop,\n+\t\t    register tree intop)\n {\n   tree res_type = TREE_TYPE (ptrop);\n \n@@ -3812,9 +3785,7 @@ cp_pointer_int_sum (resultcode, ptrop, intop)\n    The resulting tree has type int.  */\n \n static tree\n-pointer_diff (op0, op1, ptrtype)\n-     register tree op0, op1;\n-     register tree ptrtype;\n+pointer_diff (register tree op0, register tree op1, register tree ptrtype)\n {\n   register tree result, folded;\n   tree restype = ptrdiff_type_node;\n@@ -3868,9 +3839,7 @@ pointer_diff (op0, op1, ptrtype)\n    and XARG is the operand.  */\n \n tree\n-build_x_unary_op (code, xarg)\n-     enum tree_code code;\n-     tree xarg;\n+build_x_unary_op (enum tree_code code, tree xarg)\n {\n   tree exp;\n   int ptrmem = 0;\n@@ -3947,8 +3916,7 @@ build_x_unary_op (code, xarg)\n    -1.  */\n \n tree\n-cp_truthvalue_conversion (expr)\n-     tree expr;\n+cp_truthvalue_conversion (tree expr)\n {\n   tree type = TREE_TYPE (expr);\n   if (TYPE_PTRMEM_P (type))\n@@ -3960,8 +3928,7 @@ cp_truthvalue_conversion (expr)\n /* Just like cp_truthvalue_conversion, but we want a CLEANUP_POINT_EXPR.  */\n    \n tree\n-condition_conversion (expr)\n-     tree expr;\n+condition_conversion (tree expr)\n {\n   tree t;\n   if (processing_template_decl)"}, {"sha": "463064546fdd069909f3b83fc62f09cd9b2627aa", "filename": "gcc/cpplex.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1422,8 +1422,7 @@ _cpp_extend_buff (cpp_reader *pfile, _cpp_buff **pbuff, size_t min_extra)\n \n /* Free a chain of buffers starting at BUFF.  */\n void\n-_cpp_free_buff (buff)\n-     _cpp_buff *buff;\n+_cpp_free_buff (_cpp_buff *buff)\n {\n   _cpp_buff *next;\n "}, {"sha": "c9bef1a7e4a8c8e83ab5c6730a0bde329000f86b", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -1004,9 +1004,8 @@ default_diagnostic_starter (diagnostic_context *context,\n }\n \n static void\n-default_diagnostic_finalizer (context, diagnostic)\n-     diagnostic_context *context;\n-     diagnostic_info *diagnostic __attribute__((unused));\n+default_diagnostic_finalizer (diagnostic_context *context,\n+\t\t\t      diagnostic_info *diagnostic __attribute__((unused)))\n {\n   output_destroy_prefix (&context->buffer);\n }"}, {"sha": "e4f57b8cfa326191c9f8900b1fc061ed0b8b6127", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -4784,11 +4784,8 @@ fold_inf_compare (enum tree_code code, tree type, tree arg0, tree arg1)\n    NULL.  TYPE is the desired result type.  */\n  \n tree\n-fold_single_bit_test (code, arg0, arg1, result_type)\n-    enum tree_code code;\n-    tree arg0;\n-    tree arg1;\n-    tree result_type;\n+fold_single_bit_test (enum tree_code code, tree arg0, tree arg1,\n+\t\t      tree result_type)\n {\n   /* If this is a TRUTH_NOT_EXPR, it may have a single bit test inside\n      operand 0.  */"}, {"sha": "ef53050fbca7fe09dd3e024f93a047acef2685f8", "filename": "gcc/genextract.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -490,8 +490,7 @@ from the machine description file `md'.  */\\n\\n\");\n \n /* Define this so we can link with print-rtl.o to get debug_rtx function.  */\n const char *\n-get_insn_name (code)\n-     int code ATTRIBUTE_UNUSED;\n+get_insn_name (int code ATTRIBUTE_UNUSED)\n {\n   if (code < insn_name_ptr_size)\n     return insn_name_ptr[code];\n@@ -500,9 +499,7 @@ get_insn_name (code)\n }\n \n static void\n-record_insn_name (code, name)\n-     int code;\n-     const char *name;\n+record_insn_name (int code, const char *name)\n {\n   static const char *last_real_name = \"insn\";\n   static int last_real_code = 0;"}, {"sha": "268da76ee671b4cf0b9d3f2ed11fcc4c096d2b00", "filename": "gcc/genflags.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgenflags.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgenflags.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenflags.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -179,13 +179,11 @@ gen_proto (rtx insn)\n \t{\n \t  putchar ('(');\n \t  for (i = 0; i < num-1; i++)\n-\t    printf (\"%c, \", 'a' + i);\n-\t  printf (\"%c)\\n\", 'a' + i);\n-\t  for (i = 0; i < num; i++)\n-\t    printf (\"     rtx %c ATTRIBUTE_UNUSED;\\n\", 'a' + i);\n+\t    printf (\"rtx %c ATTRIBUTE_UNUSED, \", 'a' + i);\n+\t  printf (\"rtx %c ATTRIBUTE_UNUSED)\\n\", 'a' + i);\n \t}\n       else\n-\tputs (\"()\");\n+\tputs (\"(void)\");\n       puts (\"{\\n  return 0;\\n}\");\n     }\n "}, {"sha": "79e763cc7e1775c113f79fbe44fac661191346fd", "filename": "gcc/gengtype.c", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -2623,12 +2623,11 @@ write_array (outf_p f, pair_p v, const struct write_types_data *wtd)\n       oprintf (f, \"static void gt_%sa_%s\\n\", wtd->param_prefix, v->name);\n       oprintf (f,\n        \"    (void *, void *, gt_pointer_operator, void *);\\n\");\n-      oprintf (f, \"static void gt_%sa_%s (this_obj, x_p, op, cookie)\\n\",\n+      oprintf (f, \"static void gt_%sa_%s (void *this_obj ATTRIBUTE_UNUSED,\\n\",\n \t       wtd->param_prefix, v->name);\n-      oprintf (d.of, \"      void *this_obj ATTRIBUTE_UNUSED;\\n\");\n-      oprintf (d.of, \"      void *x_p ATTRIBUTE_UNUSED;\\n\");\n-      oprintf (d.of, \"      gt_pointer_operator op ATTRIBUTE_UNUSED;\\n\");\n-      oprintf (d.of, \"      void *cookie ATTRIBUTE_UNUSED;\\n\");\n+      oprintf (d.of, \"      void *x_p ATTRIBUTE_UNUSED,\\n\");\n+      oprintf (d.of, \"      gt_pointer_operator op ATTRIBUTE_UNUSED,\\n\");\n+      oprintf (d.of, \"      void *cookie ATTRIBUTE_UNUSED)\\n\");\n       oprintf (d.of, \"{\\n\");\n       d.prev_val[0] = d.prev_val[1] = d.prev_val[2] = d.val = v->name;\n       d.process_field = write_types_local_process_field;\n@@ -2639,9 +2638,8 @@ write_array (outf_p f, pair_p v, const struct write_types_data *wtd)\n   d.opt = v->opt;\n   oprintf (f, \"static void gt_%sa_%s (void *);\\n\",\n \t   wtd->prefix, v->name);\n-  oprintf (f, \"static void\\ngt_%sa_%s (x_p)\\n\",\n+  oprintf (f, \"static void\\ngt_%sa_%s (void *x_p ATTRIBUTE_UNUSED)\\n\",\n \t   wtd->prefix, v->name);\n-  oprintf (f, \"      void *x_p ATTRIBUTE_UNUSED;\\n\");\n   oprintf (f, \"{\\n\");\n   d.prev_val[0] = d.prev_val[1] = d.prev_val[2] = d.val = v->name;\n   d.process_field = write_types_process_field;"}, {"sha": "cfc45f4ee53b097ec932ebea57bbc6f38d7e5852", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5671bf2771a1e85652ae0ef8b1bdc5586bd9a654/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=5671bf2771a1e85652ae0ef8b1bdc5586bd9a654", "patch": "@@ -360,8 +360,7 @@ replacement_quality (rtx reg)\n \f\n /* Return 1 if INSN might end a basic block.  */\n \n-static int perhaps_ends_bb_p (insn)\n-     rtx insn;\n+static int perhaps_ends_bb_p (rtx insn)\n {\n   switch (GET_CODE (insn))\n     {"}]}