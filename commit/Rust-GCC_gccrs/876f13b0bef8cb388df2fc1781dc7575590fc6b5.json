{"sha": "876f13b0bef8cb388df2fc1781dc7575590fc6b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc2ZjEzYjBiZWY4Y2IzODhkZjJmYzE3ODFkYzc1NzU1OTBmYzZiNQ==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-08-11T21:02:47Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-08-11T21:02:47Z"}, "message": "* config/arm/arm-protos.h (arm_finalize_pic) Rename ...\n\n\t(arm_load_pic_register): ... to this.\n\t* config/arm/arm.c (arm_finalize_pic): Rename ...\n\t(arm_load_pic_register): ... to this.  Always output insns at the\n\tcurrent location.  Load via low reg in thumb mode.\n\t(arm_expand_prologue): Call arm_load_pic_register.\n\t(thumb_expand_prologue): Ditto.\n\t* config/arm/arm.h (FINALIZE_PIC): Remove.\n\t* config/arm/arm.md (builtin_setjmp_receiver): Call\n\tarm_load_pic_register.\n\nFrom-SVN: r85820", "tree": {"sha": "fbf7659e04906fa24dc2a6b834a88bed3b752a43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fbf7659e04906fa24dc2a6b834a88bed3b752a43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/876f13b0bef8cb388df2fc1781dc7575590fc6b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876f13b0bef8cb388df2fc1781dc7575590fc6b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/876f13b0bef8cb388df2fc1781dc7575590fc6b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/876f13b0bef8cb388df2fc1781dc7575590fc6b5/comments", "author": null, "committer": null, "parents": [{"sha": "57934c3979991f3984916e11a87e158e760fb297", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57934c3979991f3984916e11a87e158e760fb297", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57934c3979991f3984916e11a87e158e760fb297"}], "stats": {"total": 63, "additions": 43, "deletions": 20}, "files": [{"sha": "b3aa2f3cf072e2513f963acc1f3fd26c80ea2924", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=876f13b0bef8cb388df2fc1781dc7575590fc6b5", "patch": "@@ -1,3 +1,16 @@\n+2004-08-11  Paul Brook  <paul@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_finalize_pic) Rename ...\n+\t(arm_load_pic_register): ... to this.\n+\t* config/arm/arm.c (arm_finalize_pic): Rename ...\n+\t(arm_load_pic_register): ... to this.  Always output insns at the\n+\tcurrent location.  Load via low reg in thumb mode.\n+\t(arm_expand_prologue): Call arm_load_pic_register.\n+\t(thumb_expand_prologue): Ditto.\n+\t* config/arm/arm.h (FINALIZE_PIC): Remove.\n+\t* config/arm/arm.md (builtin_setjmp_receiver): Call\n+\tarm_load_pic_register.\n+\n 2004-08-11  Paul Brook  <paul@codesourcery.com>\n \n \t* arm.c (thumb_force_lr_save): Add prototype."}, {"sha": "b6b2fc4d81631e79c3e79f753ca2094584eae4ac", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=876f13b0bef8cb388df2fc1781dc7575590fc6b5", "patch": "@@ -27,7 +27,7 @@\n extern void arm_override_options (void);\n extern int use_return_insn (int, rtx);\n extern int arm_regno_class (int);\n-extern void arm_finalize_pic (int);\n+extern void arm_load_pic_register (void);\n extern int arm_volatile_func (void);\n extern const char *arm_output_epilogue (rtx);\n extern void arm_expand_prologue (void);"}, {"sha": "8493af03227a9f032949fce98dba020ee6b71527", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=876f13b0bef8cb388df2fc1781dc7575590fc6b5", "patch": "@@ -3012,16 +3012,14 @@ thumb_find_work_register (int live_regs_mask)\n   abort ();\n }\n \n-/* Generate code to load the PIC register.  PROLOGUE is true if\n-   called from arm_expand_prologue (in which case we want the \n-   generated insns at the start of the function);  false if called\n-   by an exception receiver that needs the PIC register reloaded\n-   (in which case the insns are just dumped at the current location).  */\n+\n+/* Generate code to load the PIC register.  */\n+\n void\n-arm_finalize_pic (int prologue ATTRIBUTE_UNUSED)\n+arm_load_pic_register (void)\n {\n #ifndef AOF_ASSEMBLER\n-  rtx l1, pic_tmp, pic_tmp2, seq, pic_rtx;\n+  rtx l1, pic_tmp, pic_tmp2, pic_rtx;\n   rtx global_offset_table;\n \n   if (current_function_uses_pic_offset_table == 0 || TARGET_SINGLE_PIC_BASE)\n@@ -3030,7 +3028,6 @@ arm_finalize_pic (int prologue ATTRIBUTE_UNUSED)\n   if (!flag_pic)\n     abort ();\n \n-  start_sequence ();\n   l1 = gen_label_rtx ();\n \n   global_offset_table = gen_rtx_SYMBOL_REF (Pmode, \"_GLOBAL_OFFSET_TABLE_\");\n@@ -3052,23 +3049,29 @@ arm_finalize_pic (int prologue ATTRIBUTE_UNUSED)\n     }\n   else\n     {\n-      emit_insn (gen_pic_load_addr_thumb (pic_offset_table_rtx, pic_rtx));\n+      if (REGNO (pic_offset_table_rtx) > LAST_LO_REGNUM)\n+\t{\n+\t  int reg;\n+\n+\t  /* We will have pushed the pic register, so should always be\n+\t     able to find a work register.  */\n+\t  reg = thumb_find_work_register (thumb_compute_save_reg_mask ());\n+\t  pic_tmp = gen_rtx_REG (SImode, reg);\n+\t  emit_insn (gen_pic_load_addr_thumb (pic_tmp, pic_rtx));\n+\t  emit_insn (gen_movsi (pic_offset_table_rtx, pic_tmp));\n+\t}\n+      else\n+\temit_insn (gen_pic_load_addr_thumb (pic_offset_table_rtx, pic_rtx));\n       emit_insn (gen_pic_add_dot_plus_four (pic_offset_table_rtx, l1));\n     }\n \n-  seq = get_insns ();\n-  end_sequence ();\n-  if (prologue)\n-    emit_insn_after (seq, get_insns ());\n-  else\n-    emit_insn (seq);\n-\n   /* Need to emit this whether or not we obey regdecls,\n      since setjmp/longjmp can cause life info to screw up.  */\n   emit_insn (gen_rtx_USE (VOIDmode, pic_offset_table_rtx));\n #endif /* AOF_ASSEMBLER */\n }\n \n+\n /* Return nonzero if X is valid as an ARM state addressing register.  */\n static int\n arm_address_register_rtx_p (rtx x, int strict_p)\n@@ -10693,6 +10696,10 @@ arm_expand_prologue (void)\n \t\t\t\t\t hard_frame_pointer_rtx));\n     }\n \n+\n+  if (flag_pic)\n+    arm_load_pic_register ();\n+\n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  Similarly if the user has requested no\n      scheduling in the prolog.  */\n@@ -13357,6 +13364,11 @@ thumb_expand_prologue (void)\n       return;\n     }\n \n+  /* Load the pic recister before setting the frame pointer, so we can use r7\n+     as a temporary work register.  */\n+  if (flag_pic)\n+    arm_load_pic_register ();\n+\n   offsets = arm_get_frame_offsets ();\n \n   if (frame_pointer_needed)"}, {"sha": "ec924105e1a045200abe5ae75f011ff1fe8514a3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=876f13b0bef8cb388df2fc1781dc7575590fc6b5", "patch": "@@ -2277,8 +2277,6 @@ extern const char * arm_pic_register_string;\n    data addresses in memory.  */\n #define PIC_OFFSET_TABLE_REGNUM arm_pic_register\n \n-#define FINALIZE_PIC arm_finalize_pic (1)\n-\n /* We can't directly access anything that contains a symbol,\n    nor can we indirect via the constant pool.  */\n #define LEGITIMATE_PIC_OPERAND_P(X)\t\t\t\t\t\\"}, {"sha": "f19f8cd4ebebb3e06bec9e845e6158747e2bdaa7", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/876f13b0bef8cb388df2fc1781dc7575590fc6b5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=876f13b0bef8cb388df2fc1781dc7575590fc6b5", "patch": "@@ -4462,7 +4462,7 @@\n   \"flag_pic\"\n   \"\n {\n-  arm_finalize_pic (0);\n+  arm_load_pic_register ();\n   DONE;\n }\")\n "}]}