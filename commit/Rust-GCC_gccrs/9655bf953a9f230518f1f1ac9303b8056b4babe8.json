{"sha": "9655bf953a9f230518f1f1ac9303b8056b4babe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY1NWJmOTUzYTlmMjMwNTE4ZjFmMWFjOTMwM2I4MDU2YjRiYWJlOA==", "commit": {"author": {"name": "David S. Miller", "email": "davem@pierdol.cobaltmicro.com", "date": "1998-09-13T05:44:40Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-09-13T05:44:40Z"}, "message": "loop.c (move_movables): While removing insn sequences...\n\n\t* loop.c (move_movables): While removing insn sequences, preserve\n\tthe next pointer of the most recently deleted insn when we skip\n\tover a NOTE.\n\nFrom-SVN: r22402", "tree": {"sha": "de4b1e5eb4f023ce5c6c0dd0094681a3a4513bd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de4b1e5eb4f023ce5c6c0dd0094681a3a4513bd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9655bf953a9f230518f1f1ac9303b8056b4babe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9655bf953a9f230518f1f1ac9303b8056b4babe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9655bf953a9f230518f1f1ac9303b8056b4babe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9655bf953a9f230518f1f1ac9303b8056b4babe8/comments", "author": null, "committer": null, "parents": [{"sha": "50a029fdcc3bfd5e17e1435fa5eabec3caa788ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50a029fdcc3bfd5e17e1435fa5eabec3caa788ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50a029fdcc3bfd5e17e1435fa5eabec3caa788ab"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "fb5fe2399b443ecf21d2a22d9f30fb345d1f8c5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655bf953a9f230518f1f1ac9303b8056b4babe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655bf953a9f230518f1f1ac9303b8056b4babe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9655bf953a9f230518f1f1ac9303b8056b4babe8", "patch": "@@ -1,3 +1,9 @@\n+Sun Sep 13 04:37:28 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n+\n+\t* loop.c (move_movables): While removing insn sequences, preserve\n+\tthe next pointer of the most recently deleted insn when we skip\n+\tover a NOTE.\n+\n Sat Sep 12 11:37:19 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* rs6000.h ({ASM,CPP}_CPU_SPEC): Add support for all machines"}, {"sha": "3efb200f0f79d050fa4a3a5a2d8f4978f95244bc", "filename": "gcc/loop.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9655bf953a9f230518f1f1ac9303b8056b4babe8/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9655bf953a9f230518f1f1ac9303b8056b4babe8/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=9655bf953a9f230518f1f1ac9303b8056b4babe8", "patch": "@@ -1916,9 +1916,17 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t\t    temp = delete_insn (temp);\n \t\t\t}\n \n+\t\t      temp = p;\n \t\t      p = delete_insn (p);\n+\n+\t\t      /* simplify_giv_expr expects that it can walk the insns\n+\t\t\t at m->insn forwards and see this old sequence we are\n+\t\t\t tossing here.  delete_insn does preserve the next\n+\t\t\t pointers, but when we skip over a NOTE we must fix\n+\t\t\t it up.  Otherwise that code walks into the non-deleted\n+\t\t\t insn stream.  */\n \t\t      while (p && GET_CODE (p) == NOTE)\n-\t\t\tp = NEXT_INSN (p);\n+\t\t\tp = NEXT_INSN (temp) = NEXT_INSN (p);\n \t\t    }\n \n \t\t  start_sequence ();\n@@ -2125,9 +2133,18 @@ move_movables (movables, threshold, insn_count, loop_start, end, nregs)\n \t\t\t  XEXP (temp, 0) = i1;\n \t\t\t}\n \n+\t\t      temp = p;\n \t\t      delete_insn (p);\n-\t\t      do p = NEXT_INSN (p);\n-\t\t      while (p && GET_CODE (p) == NOTE);\n+\t\t      p = NEXT_INSN (p);\n+\n+\t\t      /* simplify_giv_expr expects that it can walk the insns\n+\t\t\t at m->insn forwards and see this old sequence we are\n+\t\t\t tossing here.  delete_insn does preserve the next\n+\t\t\t pointers, but when we skip over a NOTE we must fix\n+\t\t\t it up.  Otherwise that code walks into the non-deleted\n+\t\t\t insn stream.  */\n+\t\t      while (p && GET_CODE (p) == NOTE)\n+\t\t\tp = NEXT_INSN (temp) = NEXT_INSN (p);\n \t\t    }\n \n \t\t  /* The more regs we move, the less we like moving them.  */"}]}