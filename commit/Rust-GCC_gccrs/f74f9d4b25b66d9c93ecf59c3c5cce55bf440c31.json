{"sha": "f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0ZjlkNGIyNWI2NmQ5YzkzZWNmNTljM2M1Y2NlNTViZjQ0MGMzMQ==", "commit": {"author": {"name": "SimplyTheOther", "email": "simplytheother@gmail.com", "date": "2020-08-06T14:16:15Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2020-11-28T21:13:20Z"}, "message": "Improvements to aarch64 target hook", "tree": {"sha": "b8ebcef2b2ed15d59ca1bc395444ef42f1382195", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8ebcef2b2ed15d59ca1bc395444ef42f1382195"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31/comments", "author": {"login": "SimplyTheOther", "id": 19371469, "node_id": "MDQ6VXNlcjE5MzcxNDY5", "avatar_url": "https://avatars.githubusercontent.com/u/19371469?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimplyTheOther", "html_url": "https://github.com/SimplyTheOther", "followers_url": "https://api.github.com/users/SimplyTheOther/followers", "following_url": "https://api.github.com/users/SimplyTheOther/following{/other_user}", "gists_url": "https://api.github.com/users/SimplyTheOther/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimplyTheOther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimplyTheOther/subscriptions", "organizations_url": "https://api.github.com/users/SimplyTheOther/orgs", "repos_url": "https://api.github.com/users/SimplyTheOther/repos", "events_url": "https://api.github.com/users/SimplyTheOther/events{/privacy}", "received_events_url": "https://api.github.com/users/SimplyTheOther/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f82c8a919ca1be57db10fd02dbf510474d219e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f82c8a919ca1be57db10fd02dbf510474d219e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f82c8a919ca1be57db10fd02dbf510474d219e8"}], "stats": {"total": 213, "additions": 117, "deletions": 96}, "files": [{"sha": "67d1c92873ba08c96e45870526d42de64017e1b9", "filename": "gcc/config/aarch64/aarch64-rust.c", "status": "modified", "additions": 116, "deletions": 96, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31/gcc%2Fconfig%2Faarch64%2Faarch64-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31/gcc%2Fconfig%2Faarch64%2Faarch64-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-rust.c?ref=f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "patch": "@@ -19,108 +19,128 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_p.h\"\n #include \"rust/rust-target.h\"\n #include \"rust/rust-target-def.h\"\n \n /* Implement TARGET_RUST_CPU_INFO for AArch64 targets.  */\n \n-void\n-aarch64_rust_target_cpu_info (void)\n-{\n-  rust_add_target_info (\"target_arch\", \"aarch64\");\n+void aarch64_rust_target_cpu_info(void) {\n+    rust_add_target_info(\"target_arch\", \"aarch64\");\n \n-  // TODO: properly change at some point instead of macro def\n-#ifndef isa_flag\n-# define isa_flag aarch64_isa_flags\n-# define isa_flag2 aarch64_isa_flags2\n-//# define fpmath aarch64_fpmath\n-#else\n-# error \"isa_flag and isa_flag2 already defined in aarch64-rust.c - weird things might happen\"\n-#endif\n-  // FIXME: almost feature-complete with rustc, missing \"ras\" feature (which may not be in gcc)\n+    // TODO: almost feature-complete with rustc - missing \"ras\" feature (which is not in gcc)\n \n-  if (TARGET_SIMD) \n-    rust_add_target_info (\"target_feature\", \"neon\");\n-  /* appears to be what is referred to what seems to be referred to\n-  as \"fp-armv8\" in rust, at least in target def, based on closeness of it in aarch64.h to TARGET_SIMD */\n-  if (TARGET_FLOAT) {\n-    rust_add_target_info (\"target_feature\", \"fp-armv8\");\n-    // seems to be translated to \"fp\", but can't tell if \"fp-armv8\" exists too\n-    rust_add_target_info (\"target_feature\", \"fp\");\n-  }\n-  /*if (TARGET_CYCLONE) - need to find this feature (if it exists)\n-    rust_add_target_info (\"target_feature\", \"cyclone\");*/  \n-  /* appears to be what is referred to what seems to be referred to\n-  as \"strict-align\" in rust, at least in target def according to notes in aarch64.h \n-  otherwise strict-align could be STRICT_ALIGNMENT (which evaluates to same thing unless macro redefed) */\n-  if (TARGET_STRICT_ALIGN) \n-    rust_add_target_info (\"target_feature\", \"strict-align\");\n-  // below all derived from llvm code - i'm pretty sure they correspond\n-  if (TARGET_CRC32) \n-    rust_add_target_info (\"target_feature\", \"crc\");\n-  if (TARGET_CRYPTO) \n-    rust_add_target_info (\"target_feature\", \"crypto\");\n-  if (TARGET_DOTPROD) \n-    rust_add_target_info (\"target_feature\", \"dotprod\");\n-  if (TARGET_F16FML) \n-    rust_add_target_info (\"target_feature\", \"fp16fml\");\n-  if (TARGET_FP_F16INST) {\n-    rust_add_target_info (\"target_feature\", \"fullfp16\");\n-    // seems to be translated to \"fp16\", but not sure, so keep that here too\n-    rust_add_target_info (\"target_feature\", \"fp16\");\n-  }\n-  // TODO: some feature relating to profiling with feature name \"spe\" - can't find atm\n-  if (TARGET_LSE)\n-    rust_add_target_info (\"target_feature\", \"lse\");\n-  // hope this is the right thing - llvm calls it \"rdm\" - TODO ensure that it is\n-  if (AARCH64_ISA_RDMA)\n-    rust_add_target_info (\"target_feature\", \"rdm\");\n-  if (TARGET_SVE)\n-    rust_add_target_info (\"target_feature\", \"sve\");\n-  if (TARGET_SVE2)\n-    rust_add_target_info (\"target_feature\", \"sve2\");\n-  if (isa_flag & AARCH64_FL_SVE2_AES)\n-    rust_add_target_info (\"target_feature\", \"sve2-aes\");\n-  if (isa_flag & AARCH64_FL_SVE2_SM4)\n-    rust_add_target_info (\"target_feature\", \"sve2-sm4\");\n-  if (isa_flag & AARCH64_FL_SVE2_SHA3)\n-    rust_add_target_info (\"target_feature\", \"sve2-sha3\");\n-  if (isa_flag & AARCH64_FL_SVE2_BITPERM)\n-    rust_add_target_info (\"target_feature\", \"sve2-bitperm\");\n-  // TODO: assuming that this is the correct RCPC and that the AARCH64_FL_RCPC8_4 is not\n-  if (isa_flag & AARCH64_FL_RCPC)\n-    rust_add_target_info (\"target_feature\", \"rcpc\");\n-  // TODO: find below target features if they exist\n-  /*if (TARGET_ZCM)\n-    rust_add_target_info (\"target_feature\", \"zcm\");*/\n-  /*if (TARGET_ZCZ)\n-    rust_add_target_info (\"target_feature\", \"zcz\");*/\n-  // some possible target features: \"thumb-mode\"\n-  if (TARGET_SM4)\n-    rust_add_target_info (\"target_feature\", \"sm4\");\n-  if (TARGET_SHA3)\n-    rust_add_target_info (\"target_feature\", \"sha3\");\n-  if (TARGET_SHA2)\n-    rust_add_target_info (\"target_feature\", \"sha2\");\n-  if (TARGET_AES)\n-    rust_add_target_info (\"target_feature\", \"aes\");\n-  if (TARGET_TME)\n-    rust_add_target_info (\"target_feature\", \"tme\");\n-  if (TARGET_MEMTAG)\n-    rust_add_target_info (\"target_feature\", \"mte\");\n+    // features from rustc\n+    if (TARGET_FLOAT) {\n+        rust_add_target_info(\"target_feature\", \"fp-armv8\");\n+        rust_add_target_info(\"target_feature\", \"fp\");\n+    }\n+    if (TARGET_SIMD)\n+        rust_add_target_info(\"target_feature\", \"neon\");\n+    if (TARGET_SVE)\n+        rust_add_target_info(\"target_feature\", \"sve\");\n+    if (TARGET_CRC32)\n+        rust_add_target_info(\"target_feature\", \"crc\");\n+    if (TARGET_CRYPTO)\n+        rust_add_target_info(\"target_feature\", \"crypto\");\n+    if (TARGET_LSE)\n+        rust_add_target_info(\"target_feature\", \"lse\");\n+    if (AARCH64_ISA_RDMA)\n+        rust_add_target_info(\"target_feature\", \"rdm\");\n+    if (TARGET_FP_F16INST) {\n+        rust_add_target_info(\"target_feature\", \"fullfp16\");\n+        rust_add_target_info(\"target_feature\", \"fp16\");\n+    }\n+    if (aarch64_isa_flags & AARCH64_FL_RCPC)\n+        rust_add_target_info(\"target_feature\", \"rcpc\");\n+    if (TARGET_DOTPROD)\n+        rust_add_target_info(\"target_feature\", \"dotprod\");\n+    if (AARCH64_ISA_V8_1)\n+        rust_add_target_info(\"target_feature\", \"v8.1a\");\n+    if (AARCH64_ISA_V8_2)\n+        rust_add_target_info(\"target_feature\", \"v8.2a\");\n+    if (AARCH64_ISA_V8_3)\n+        rust_add_target_info(\"target_feature\", \"v8.3a\");\n \n-  if (AARCH64_ISA_V8_1)\n-    rust_add_target_info (\"target_feature\", \"v8.1a\");\n-  if (AARCH64_ISA_V8_2)\n-    rust_add_target_info (\"target_feature\", \"v8.2a\");\n-  if (AARCH64_ISA_V8_3)\n-    rust_add_target_info (\"target_feature\", \"v8.3a\");\n-  if (AARCH64_ISA_V8_4)\n-    rust_add_target_info (\"target_feature\", \"v8.4a\");\n-  if (AARCH64_ISA_V8_5)\n-    rust_add_target_info (\"target_feature\", \"v8.5a\");\n-    \n-#undef isa_flag\n-#undef isa_flag2\n-//#undef fpmath\n+    // llvm-derived features\n+    if (TARGET_SM4)\n+        rust_add_target_info(\"target_feature\", \"sm4\");\n+    if (TARGET_SHA2)\n+        rust_add_target_info(\"target_feature\", \"sha2\");\n+    if (TARGET_SHA3)\n+        rust_add_target_info(\"target_feature\", \"sha3\");\n+    if (TARGET_AES)\n+        rust_add_target_info(\"target_feature\", \"aes\");\n+    if (TARGET_F16FML)\n+        rust_add_target_info(\"target_feature\", \"fp16fml\");\n+    if (aarch64_isa_flags & AARCH64_FL_PROFILE)\n+        rust_add_target_info(\"target_feature\", \"spe\");\n+    if (TARGET_SVE2)\n+        rust_add_target_info(\"target_feature\", \"sve2\");\n+    if (aarch64_isa_flags & AARCH64_FL_SVE2_AES)\n+        rust_add_target_info(\"target_feature\", \"sve2-aes\");\n+    if (aarch64_isa_flags & AARCH64_FL_SVE2_SM4)\n+        rust_add_target_info(\"target_feature\", \"sve2-sm4\");\n+    if (aarch64_isa_flags & AARCH64_FL_SVE2_SHA3)\n+        rust_add_target_info(\"target_feature\", \"sve2-sha3\");\n+    if (aarch64_isa_flags & AARCH64_FL_SVE2_BITPERM)\n+        rust_add_target_info(\"target_feature\", \"sve2-bitperm\");\n+    if (TARGET_STRICT_ALIGN)\n+        rust_add_target_info(\"target_feature\", \"strict-align\");\n+    if (flag_mrecip_low_precision_sqrt)\n+        rust_add_target_info(\"target_feature\", \"use-reciprocal-square-root\");\n+    if (TARGET_JSCVT)\n+        rust_add_target_info(\"target_feature\", \"jsconv\");\n+    if (TARGET_COMPLEX)\n+        rust_add_target_info(\"target_feature\", \"complxnum\");\n+    if (AARCH64_ISA_RCPC8_4)\n+        rust_add_target_info(\"target_feature\", \"rcpc-immo\");\n+    if (TARGET_FRINT)\n+        rust_add_target_info(\"target_feature\", \"fptoint\");\n+    if (aarch64_isa_flags & AARCH64_FL_SB)\n+        rust_add_target_info(\"target_feature\", \"sb\");\n+    if (aarch64_isa_flags & AARCH64_FL_SSBS)\n+        rust_add_target_info(\"target_feature\", \"ssbs\");\n+    if (aarch64_isa_flags & AARCH64_FL_PREDRES)\n+        rust_add_target_info(\"target_feature\", \"predres\");\n+    if (aarch64_enable_bti)\n+        rust_add_target_info(\"target_feature\", \"bti\");\n+    if (AARCH64_ISA_RNG)\n+        rust_add_target_info(\"target_feature\", \"rand\");\n+    if (TARGET_MEMTAG)\n+        rust_add_target_info(\"target_feature\", \"mte\");\n+    if (TARGET_TME)\n+        rust_add_target_info(\"target_feature\", \"tme\");\n+    if (AARCH64_ISA_BF16)\n+        rust_add_target_info(\"target_feature\", \"bf16\");\n+    if (AARCH64_ISA_I8MM)\n+        rust_add_target_info(\"target_feature\", \"i8mm\");\n+    if (AARCH64_ISA_F32MM)\n+        rust_add_target_info(\"target_feature\", \"f32mm\");\n+    if (AARCH64_ISA_F64MM)\n+        rust_add_target_info(\"target_feature\", \"f64mm\");\n+    if (AARCH64_ISA_V8_4)\n+        rust_add_target_info(\"target_feature\", \"v8.4a\");\n+    if (AARCH64_ISA_V8_5)\n+        rust_add_target_info(\"target_feature\", \"v8.5a\");\n+    if (AARCH64_ISA_V8_6)\n+        rust_add_target_info(\"target_feature\", \"v8.6a\");\n+\n+    /* TODO: find features for pan (Privileged Access-Never), lor (Limited Ordering Regions),\n+     * vh (Virtual Host), perfmon, pan-rwv (PAN s1e1R and s1e1W variants),\n+     * uaops (UAO PState), ccpp (Cache Clean to Point of Persistence), zcm (zero-cycle register move),\n+     * zcz-gp (zero-cycle zeroing for generic regs), zcz-fp (zero-cycle zeroing for FP regs), zcz\n+     * (both), zcz-fp-workaround, reserve specific registers, make specific registers callee saved,\n+     * use-aa (alias analysis), balance-fp-ops, predictable-select-expensive, custom-cheap-as-move,\n+     * exynos-cheap-as-move, use-postra-scheduler, slow-misaligned-128store, slow-paired-128,\n+     * slow-strqro-store, alternate-sextload-cvt-f32-pattern, arith-bcc-fusion, arith-cbz-fusion,\n+     * fuse-address, fuse-aes, fuse-arith-logic, fuse-csel, fuse-crypto-eor, fuse-literals,\n+     * disable-latency-sched-heuristic, force-32bit-jump-tables, pa\n+     * (Pointer Authentication), ccidx (extend CCSIDR number of sets),\n+     * nv (Nested Virtualisation), rasv8_4, mpam (Memory system Partitioning and Monitoring),\n+     * dit (Data Independent Timing), tracev8.4, am (Activity Monitors), amvs (Activity Monitors\n+     * Virtualisation), sel2 (Secure Exception Level 2), pmu, tlb-rmi (TLB Range and Maintenance), fmi\n+     * (Flag Manipulation), no-neg-immediates, lsl-fast, aggressive-fma,\n+     * altnzcv, specrestrict, ccdp, trbe, ete, tagged-globals, fgt, ecv, maybe cpus */\n+    // gcc supports pointer authentication, but i can only find builtins and no switch for it\n }"}, {"sha": "49f8d3755eb7f3d9beba120a29080d1c2c870162", "filename": "gcc/config/i386/i386-rust.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31/gcc%2Fconfig%2Fi386%2Fi386-rust.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-rust.c?ref=f74f9d4b25b66d9c93ecf59c3c5cce55bf440c31", "patch": "@@ -19,6 +19,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"tm_p.h\"\n #include \"rust/rust-target.h\"\n #include \"rust/rust-target-def.h\"\n "}]}