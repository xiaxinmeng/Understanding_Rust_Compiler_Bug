{"sha": "d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU3NDA5Y2I1ZjQ3YmQ4ODBjZTQ3YTFjMjM2YzRmOWIyZDdkZDE2YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-03-09T20:36:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-03-09T20:36:42Z"}, "message": "Define macro to simplify std::_Not_fn definition\n\n\t* include/std/functional (_Not_fn): Define macro to simplify\n\trepetitive function definitions.\n\nFrom-SVN: r246013", "tree": {"sha": "dc89f47ea5aa152e014328e80b09e77bd2a6d7a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc89f47ea5aa152e014328e80b09e77bd2a6d7a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e0c6654ef99fe34a012dbb9507db33f51e8fde8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e0c6654ef99fe34a012dbb9507db33f51e8fde8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e0c6654ef99fe34a012dbb9507db33f51e8fde8"}], "stats": {"total": 64, "additions": 24, "deletions": 40}, "files": [{"sha": "9da31bc984a9bf727262f8d6355e39f124e0944f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "patch": "@@ -1,5 +1,8 @@\n 2017-03-09  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/functional (_Not_fn): Define macro to simplify\n+\trepetitive function definitions.\n+\n \t* doc/xml/manual/status_cxx2017.xml: Document std::byte support.\n \t* include/c_global/cstddef (std::byte): Define for C++17.\n \t* testsuite/18_support/byte/global_neg.cc: New test."}, {"sha": "366a7fb346eedbe419898a3e253f9ba15f76416e", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 21, "deletions": 40, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=d57409cb5f47bd880ce47a1c236c4f9b2d7dd16a", "patch": "@@ -902,15 +902,12 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n   template<typename _Fn>\n     class _Not_fn\n     {\n-      template<typename _Tp>\n-\tusing __is_nothrow_negatable\n-\t  = __bool_constant<noexcept(!std::declval<_Tp>())>;\n-\n       template<typename _Fn2, typename... _Args>\n-\tusing __noexcept_cond = __and_<\n-\t  __is_nothrow_callable<_Fn2(_Args&&...)>,\n-\t  __is_nothrow_negatable<result_of_t<_Fn2(_Args&&...)>>\n-\t>;\n+\tusing __inv_res_t = result_of_t<_Fn2(_Args&&...)>;\n+\n+      template<typename _Tp>\n+\tstatic decltype(!std::declval<_Tp>())\n+\t_S_not() noexcept(noexcept(!std::declval<_Tp>()));\n \n     public:\n       template<typename _Fn2>\n@@ -921,39 +918,23 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       _Not_fn(_Not_fn&& __fn) = default;\n       ~_Not_fn() = default;\n \n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) &\n-\tnoexcept(__noexcept_cond<_Fn&, _Args&&...>::value)\n-\t-> decltype(!std::declval<result_of_t<_Fn&(_Args&&...)>>())\n-\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) const &\n-\tnoexcept(__noexcept_cond<const _Fn&, _Args&&...>::value)\n-\t-> decltype(!std::declval<result_of_t<const _Fn&(_Args&&...)>>())\n-\t{ return !std::__invoke(_M_fn, std::forward<_Args>(__args)...); }\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) &&\n-\tnoexcept(__noexcept_cond<_Fn&&, _Args&&...>::value)\n-\t-> decltype(!std::declval<result_of_t<_Fn&&(_Args&&...)>>())\n-\t{\n-\t  return !std::__invoke(std::move(_M_fn),\n-\t\t\t\tstd::forward<_Args>(__args)...);\n-\t}\n-\n-      template<typename... _Args>\n-\tauto\n-\toperator()(_Args&&... __args) const &&\n-\tnoexcept(__noexcept_cond<const _Fn&&, _Args&&...>::value)\n-\t-> decltype(!std::declval<result_of_t<const _Fn&&(_Args&&...)>>())\n-\t{\n-\t  return !std::__invoke(std::move(_M_fn),\n-\t\t\t\tstd::forward<_Args>(__args)...);\n+      // Macro to define operator() with given cv-qualifiers ref-qualifiers,\n+      // forwarding _M_fn and the function arguments with the same qualifiers,\n+      // and deducing the return type and exception-specification.\n+#define _GLIBCXX_NOT_FN_CALL_OP( _QUALS )\t\t\t\t\\\n+      template<typename... _Args>\t\t\t\t\t\\\n+\tdecltype(_S_not<__inv_res_t<_Fn _QUALS, _Args...>>())\t\t\\\n+\toperator()(_Args&&... __args) _QUALS\t\t\t\t\\\n+\tnoexcept(noexcept(_S_not<__inv_res_t<_Fn _QUALS, _Args...>>()))\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  return !std::__invoke(std::forward< _Fn _QUALS >(_M_fn),\t\\\n+\t\t\t\tstd::forward<_Args>(__args)...);\t\\\n \t}\n+      _GLIBCXX_NOT_FN_CALL_OP( & )\n+      _GLIBCXX_NOT_FN_CALL_OP( const & )\n+      _GLIBCXX_NOT_FN_CALL_OP( && )\n+      _GLIBCXX_NOT_FN_CALL_OP( const && )\n+#undef _GLIBCXX_NOT_FN_CALL\n \n     private:\n       _Fn _M_fn;"}]}