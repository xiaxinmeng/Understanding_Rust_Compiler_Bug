{"sha": "be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2NmEyMjYzOGFkYTQ3YjRmZGYwYjQyYmUxZDQ0ZTZjZDRmZTEwNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2013-10-14T21:24:30Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2013-10-14T21:24:30Z"}, "message": "Update Go testsuite to a copy of the Go 1.1.2 testsuite.\n\n\t* go.test/go-test.exp (go-find-packages): New proc.\n\t(go-gc-tests): Skip stress and safe tests.  Skip *.dir\n\tsubdirectories.  Do simple +build line matching.  Handle run with\n\targuments.  Handle errorcheckdir and rundircmpout.  Use packages\n\tfor rundir.  Remove special handling for bug191 and dwarf.\n\nFrom-SVN: r203578", "tree": {"sha": "0f1d684281329220c1b3c6ca3b5d34b13d5ed1b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1d684281329220c1b3c6ca3b5d34b13d5ed1b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/comments", "author": null, "committer": null, "parents": [{"sha": "8088e1beb276a0ba33ba2bf499899450d86e9f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8088e1beb276a0ba33ba2bf499899450d86e9f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8088e1beb276a0ba33ba2bf499899450d86e9f03"}], "stats": {"total": 15625, "additions": 12752, "deletions": 2873}, "files": [{"sha": "e4dca4bd190e551fec5f562d5c072b94a2990293", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,3 +1,11 @@\n+2013-10-14  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go.test/go-test.exp (go-find-packages): New proc.\n+\t(go-gc-tests): Skip stress and safe tests.  Skip *.dir\n+\tsubdirectories.  Do simple +build line matching.  Handle run with\n+\targuments.  Handle errorcheckdir and rundircmpout.  Use packages\n+\tfor rundir.  Remove special handling for bug191 and dwarf.\n+\n 2013-10-14  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/58658"}, {"sha": "284bc99e2c0603f630e8d84e24de856f0f008bf4", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 143, "deletions": 44, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -242,6 +242,42 @@ proc go-set-goarch { } {\n     setenv GOARCH $goarch\n }\n \n+# Take a list of files and return a lists of lists, where each list is\n+# the set of files in the same package.\n+proc go-find-packages { test name files } {\n+    set packages [list]\n+    foreach f $files {\n+\tset fd [open $f r]\n+\twhile 1 {\n+\t    if { [gets $fd line] < 0 } {\n+\t\tclose $fd\n+\t\tclone_output \"$test: could not read $f\"\n+\t\tunresolved $name\n+\t\treturn [list]\n+\t    }\n+\n+\t    if { [regexp \"^package (\\\\w+)\" $line match package] } {\n+\t\tset len [llength $packages]\n+\t\tfor { set i 0 } { $i < $len } { incr i } {\n+\t\t    set p [lindex $packages $i]\n+\t\t    if { [lindex $p 0] == $package } {\n+\t\t\tlappend p $f\n+\t\t\tlset packages $i $p\n+\t\t\tbreak\n+\t\t    }\n+\t\t}\n+\t\tif { $i >= $len } {\n+\t\t    lappend packages [list $package $f]\n+\t\t}\n+\n+\t\tclose $fd\n+\t\tbreak\n+\t    }\n+\t}\n+    }\n+    return $packages\n+}\n+\n proc go-gc-tests { } {\n     global srcdir subdir\n     global runtests\n@@ -286,12 +322,28 @@ proc go-gc-tests { } {\n \t    continue\n \t}\n \n+\t# Skip the files in stress; they are not tests.\n+\tif [string match \"*go.test/test/stress/*\" $test] {\n+\t    continue\n+\t}\n+\n+\t# Skip the files in safe; gccgo does not support safe mode.\n+\tif [string match \"*go.test/test/safe/*\" $test] {\n+\t    continue\n+\t}\n+\n \t# Skip files in sub-subdirectories: they are components of\n \t# other tests.\n \tif [string match \"*go.test/test/*/*/*\" $test] {\n \t    continue\n \t}\n \n+\t# Skip files in *.dir subdirectories: they are components of\n+\t# other tests.\n+\tif [string match \"*go.test/test/*.dir/*\" $test] {\n+\t    continue\n+\t}\n+\n \tset name [dg-trim-dirname $srcdir $test]\n \n \t# Skip certain tests if target is RTEMS OS.\n@@ -379,6 +431,21 @@ proc go-gc-tests { } {\n \t\tcontinue\n \t    }\n \n+\t    if { [ string match \"// +build *\" $test_line ] } {\n+\t\tif { [ string match \"*[getenv GOARCH]*\" $test_line ] } {\n+\t\t    continue\n+\t\t}\n+\t\tif { [ string match \"*linux*\" $test_line ] } {\n+\t\t    continue\n+\t\t}\n+\t\tif { [ string match \"*!windows*\" $test_line ] } {\n+\t\t    continue\n+\t\t}\n+\t\tclose $fd\n+\t\tunsupported $name\n+\t\tset lines_ok 0\n+\t    }\n+\n \t    break\n \t}\n \n@@ -407,7 +474,8 @@ proc go-gc-tests { } {\n \n \tset go_compile_args \"\"\n \tset go_execute_args \"\"\n-\tif { [regexp \".*\\\\\\$A.out (\\[^|&>2\\].*)\\$\" $test_line match progargs] } {\n+\tif { [regexp \"// run (\\[^|&>2\\].*)\\$\" $test_line match progargs] \\\n+\t\t && ! [string match \"*.go*\" \"$progargs\"] } {\n \t    set go_execute_args $progargs\n \t    verbose -log \"$test: go_execute_args is $go_execute_args\"\n \t    set index [string last \" $progargs\" $test_line]\n@@ -515,6 +583,27 @@ proc go-gc-tests { } {\n \t    go-execute-xfail $test\n \t} elseif { $test_line == \"// errorcheck\" } {\n \t    errchk $test \"\"\n+\t} elseif { $test_line == \"// errorcheckdir\" } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dir \"[file rootname $test].dir\"\n+\t    set files [lsort [glob \"$dir/*.go\"]]\n+\t    set packages [go-find-packages $test $name $files]\n+\t    if { [llength $packages] > 0 } {\n+\t\tset dg-do-what-default \"assemble\"\n+\t\tset del [list]\n+\t\tset last [lindex $packages end]\n+\t\tset packages [lreplace $packages end end]\n+\t\tforeach p $packages {\n+\t\t    dg-test -keep-output [lrange $p 1 end] \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t\t    lappend del \"[file rootname [file tail [lindex $p 1]]].o\"\n+\t\t}\n+\t\terrchk [lindex $last 1] \"[lrange $last 2 end]\"\n+\t\tforeach f $del {\n+\t\t    file delete $f\n+\t\t}\n+\t    }\n+\t    set runtests $hold_runtests\n \t} elseif { [string match \"// errorcheckoutput*\" $test_line] } {\n \t    # Run the test to get a .go program to error check.\n \t    set go_execute_args \"\"\n@@ -557,21 +646,62 @@ proc go-gc-tests { } {\n \t} elseif { $test_line == \"// rundir\" } {\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\"\n-\t    set dg-do-what-default \"assemble\"\n \t    set dir \"[file rootname $test].dir\"\n-\t    set del {}\n \t    set files [lsort [glob \"$dir/*.go\"]]\n-\t    set last [lindex $files end]\n-\t    set files [lreplace $files end end]\n-\t    foreach f $files {\n-\t\tdg-test -keep-output $f \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n-\t\tlappend del \"[file rootname [file tail $f]].o\"\n+\t    set packages [go-find-packages $test $name $files]\n+\t    if { [llength $packages] > 0 } {\n+\t\tset dg-do-what-default \"assemble\"\n+\t\tset del [list]\n+\t\tset last [lindex $packages end]\n+\t\tset packages [lreplace $packages end end]\n+\t\tforeach p $packages {\n+\t\t    dg-test -keep-output [lrange $p 1 end] \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t\t    lappend del \"[file rootname [file tail [lindex $p 1]]].o\"\n+\t\t}\n+\t\tset dg-do-what-default \"link\"\n+\t\tset go_compile_args $del\n+\t\tgo-torture-execute [lrange $last 1 end]\n+\t\tforeach f $del {\n+\t\t    file delete $f\n+\t\t}\n \t    }\n-\t    set dg-do-what-default \"link\"\n-\t    set go_compile_args $del\n-\t    go-torture-execute $last\n-\t    foreach f $del {\n-\t\tfile delete $f\n+\t    set runtests $hold_runtests\n+\t} elseif { $test_line == \"// rundircmpout\" } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dir \"[file rootname $test].dir\"\n+\t    set files [lsort [glob \"$dir/*.go\"]]\n+\t    set packages [go-find-packages $test $name $files]\n+\t    if { [llength $packages] > 0 } {\n+\t\tset dg-do-what-default \"assemble\"\n+\t\tset del [list]\n+\t\tset last [lindex $packages end]\n+\t\tset packages [lreplace $packages end end]\n+\t\tforeach p $packages {\n+\t\t    dg-test -keep-output [lrange $p 1 end] \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t\t    lappend del \"[file rootname [file tail [lindex $p 1]]].o\"\n+\t\t}\n+\t\tset dg-do-what-default \"link\"\n+\t\tdg-test -keep-output [lrange $last 1 end] \"$del -O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t\tset base \"[file rootname [file tail [lindex $last 1]]]\"\n+\t\tset output_file \"./$base.exe\"\n+\t\tlappend del $output_file\n+\t\tif [isnative] {\n+\t\t    verbose -log \"$output_file >$base.p 2>&1\"\n+\t\t    if { [catch \"exec $output_file 2>$base.p\" catcherr] != 0 } {\n+\t\t\tverbose -log $catcherr\n+\t\t\tfail \"$name execution\"\n+\t\t\tuntested \"$name compare\"\n+\t\t    } else {\n+\t\t\tpass \"$name execution\"\n+\t\t\tregsub \"\\\\.go$\" \"$test\" \".out\" expect\n+\t\t\tfilecmp $expect $base.p \"$name compare\"\n+\t\t    }\n+\t\t    lappend del $base.p\n+\t\t}\n+\t\tforeach f $del {\n+\t\t    file delete $f\n+\t\t}\n \t    }\n \t    set runtests $hold_runtests\n \t} elseif { \"$test_line\" == \"\"\n@@ -708,33 +838,6 @@ proc go-gc-tests { } {\n \t    $status $name\n \t    file delete $ofile1 $ofile2 $ofile3 $output_file\n \t    set runtests $hold_runtests\n-\t} elseif { [string match \\\n-\t\t\t\"// \\$G \\$D/bug191.dir/a.go && \\$G \\$D/bug191.dir/b.go && \\$G \\$D/\\$F.go && \\$L \\$F.\\$A\" \\\n-\t\t\t$test_line] } {\n-\t    set hold_runtests $runtests\n-\t    set runtests \"go-test.exp\"\n-\t    set dg-do-what-default \"assemble\"\n-\t    regsub \"\\\\.go$\" $test \".dir/a.go\" file1\n-\t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n-\t    set ofile1 \"[file rootname [file tail $file1]].o\"\n-\t    regsub \"\\\\.go$\" $test \".dir/b.go\" file2\n-\t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n-\t    set ofile2 \"[file rootname [file tail $file2]].o\"\n-\t    dg-test -keep-output \"$test\" \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n-\t    set ofile3 \"[file rootname [file tail $test]].o\"\n-\t    set dg-do-what-default \"link\"\n-\t    set output_file \"./[file rootname [file tail $test]].exe\"\n-\t    set comp_output [go_target_compile \"$ofile1 $ofile2 $ofile3\" \\\n-\t\t\t\t $output_file \"executable\" \"$options\"]\n-\t    set comp_output [go-dg-prune $target_triplet $comp_output]\n-\t    if [string match \"\" $comp_output] {\n-\t\tpass $name\n-\t    } else {\n-\t\tverbose -log $comp_output\n-\t\tfail $name\n-\t    }\n-\t    file delete $ofile1 $ofile2 $ofile3 $output_file\n-\t    set runtests $hold_runtests\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/embed0.go && \\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out\" \\\n \t\t\t$test_line ] } {\n@@ -949,10 +1052,6 @@ proc go-gc-tests { } {\n \t    regsub \"\\\\.go$\" $test \".dir/a.go\" file1\n \t    regsub \"\\\\.go$\" $test \".dir/b.go\" file2\n \t    errchk \"$file1\" \"$file2\"\n-\t} elseif { $test_line == \"// \\$G \\$D/\\$F.go \\$D/z*.go && \\$L \\$F.\\$A && ./\\$A.out\" } {\n-\t    set dir [file dirname $test]\n-\t    set go_compile_args [glob $dir/z*.go]\n-\t    go-torture-execute $test\n \t} elseif { $test_line == \"// \\$G -N -o slow.\\$A \\$D/bug369.dir/pkg.go &&\" \\\n \t\t       && $test_line2 == \"// \\$G -o fast.\\$A \\$D/bug369.dir/pkg.go &&\" \\\n \t\t       && $test_line3 == \"// run\" } {"}, {"sha": "42cf69340963ecd1484ad8ed03096a0c3e721fd3", "filename": "gcc/testsuite/go.test/test/alias1.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -17,15 +17,15 @@ func main() {\n \tcase uint8:\n \t\t// ok\n \tdefault:\n-\t\tprintln(\"byte != uint8\")\n+\t\tpanic(\"byte != uint8\")\n \t}\n \n \tx = uint8(2)\n \tswitch x.(type) {\n \tcase byte:\n \t\t// ok\n \tdefault:\n-\t\tprintln(\"uint8 != byte\")\n+\t\tpanic(\"uint8 != byte\")\n \t}\n \n \trune32 := false\n@@ -37,7 +37,7 @@ func main() {\n \t\t// must be new code\n \t\trune32 = true\n \tdefault:\n-\t\tprintln(\"rune != int and rune != int32\")\n+\t\tpanic(\"rune != int and rune != int32\")\n \t}\n \n \tif rune32 {\n@@ -49,6 +49,6 @@ func main() {\n \tcase rune:\n \t\t// ok\n \tdefault:\n-\t\tprintln(\"int (or int32) != rune\")\n+\t\tpanic(\"int (or int32) != rune\")\n \t}\n }"}, {"sha": "0ffe8101e9d862cbf503becb362e28e4bbdf6cac", "filename": "gcc/testsuite/go.test/test/args.go", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fargs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fargs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fargs.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// $G $F.go && $L $F.$A && ./$A.out arg1 arg2\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// run arg1 arg2\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "d85110b63d4da6a90f7351e5bbccfa3448cb496b", "filename": "gcc/testsuite/go.test/test/bench/garbage/parser.go", "status": "modified", "additions": 76, "deletions": 18, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -134,20 +134,31 @@ func main() {\n \t}\n }\n \n+// find . -type d -not -path \"./exp\" -not -path \"./exp/*\" -printf \"\\t\\\"%p\\\",\\n\" | sort | sed \"s/\\.\\///\" | grep -v testdata\n var packages = []string{\n+\t\"archive\",\n \t\"archive/tar\",\n-\t\"encoding/asn1\",\n-\t\"math/big\",\n+\t\"archive/zip\",\n \t\"bufio\",\n+\t\"builtin\",\n \t\"bytes\",\n-\t\"math/cmplx\",\n+\t\"compress\",\n+\t\"compress/bzip2\",\n \t\"compress/flate\",\n \t\"compress/gzip\",\n+\t\"compress/lzw\",\n \t\"compress/zlib\",\n+\t\"container\",\n \t\"container/heap\",\n \t\"container/list\",\n \t\"container/ring\",\n+\t\"crypto\",\n \t\"crypto/aes\",\n+\t\"crypto/cipher\",\n+\t\"crypto/des\",\n+\t\"crypto/dsa\",\n+\t\"crypto/ecdsa\",\n+\t\"crypto/elliptic\",\n \t\"crypto/hmac\",\n \t\"crypto/md5\",\n \t\"crypto/rand\",\n@@ -159,64 +170,111 @@ var packages = []string{\n \t\"crypto/subtle\",\n \t\"crypto/tls\",\n \t\"crypto/x509\",\n+\t\"crypto/x509/pkix\",\n+\t\"database\",\n+\t\"database/sql\",\n+\t\"database/sql/driver\",\n+\t\"debug\",\n \t\"debug/dwarf\",\n-\t\"debug/macho\",\n \t\"debug/elf\",\n \t\"debug/gosym\",\n-\t\"exp/ebnf\",\n+\t\"debug/macho\",\n+\t\"debug/pe\",\n+\t\"encoding\",\n \t\"encoding/ascii85\",\n+\t\"encoding/asn1\",\n+\t\"encoding/base32\",\n \t\"encoding/base64\",\n \t\"encoding/binary\",\n+\t\"encoding/csv\",\n+\t\"encoding/gob\",\n \t\"encoding/hex\",\n+\t\"encoding/json\",\n \t\"encoding/pem\",\n-\t\"os/exec\",\n+\t\"encoding/xml\",\n+\t\"errors\",\n+\t\"expvar\",\n \t\"flag\",\n \t\"fmt\",\n+\t\"go\",\n \t\"go/ast\",\n+\t\"go/build\",\n \t\"go/doc\",\n+\t\"go/format\",\n \t\"go/parser\",\n \t\"go/printer\",\n \t\"go/scanner\",\n \t\"go/token\",\n-\t\"encoding/gob\",\n \t\"hash\",\n \t\"hash/adler32\",\n \t\"hash/crc32\",\n \t\"hash/crc64\",\n-\t\"net/http\",\n+\t\"hash/fnv\",\n+\t\"html\",\n+\t\"html/template\",\n \t\"image\",\n+\t\"image/color\",\n+\t\"image/draw\",\n+\t\"image/gif\",\n \t\"image/jpeg\",\n \t\"image/png\",\n+\t\"index\",\n+\t\"index/suffixarray\",\n \t\"io\",\n \t\"io/ioutil\",\n-\t\"encoding/json\",\n \t\"log\",\n+\t\"log/syslog\",\n \t\"math\",\n+\t\"math/big\",\n+\t\"math/cmplx\",\n+\t\"math/rand\",\n \t\"mime\",\n+\t\"mime/multipart\",\n \t\"net\",\n+\t\"net/http\",\n+\t\"net/http/cgi\",\n+\t\"net/http/cookiejar\",\n+\t\"net/http/fcgi\",\n+\t\"net/http/httptest\",\n+\t\"net/http/httputil\",\n+\t\"net/http/pprof\",\n+\t\"net/mail\",\n+\t\"net/rpc\",\n+\t\"net/rpc/jsonrpc\",\n+\t\"net/smtp\",\n+\t\"net/textproto\",\n+\t\"net/url\",\n \t\"os\",\n+\t\"os/exec\",\n+\t\"os/signal\",\n+\t\"os/user\",\n \t\"path\",\n-\t\"math/rand\",\n+\t\"path/filepath\",\n \t\"reflect\",\n \t\"regexp\",\n-\t\"net/rpc\",\n+\t\"regexp/syntax\",\n \t\"runtime\",\n-\t\"text/scanner\",\n+\t\"runtime/cgo\",\n+\t\"runtime/debug\",\n+\t\"runtime/pprof\",\n+\t\"runtime/race\",\n \t\"sort\",\n-\t\"net/smtp\",\n \t\"strconv\",\n \t\"strings\",\n \t\"sync\",\n+\t\"sync/atomic\",\n \t\"syscall\",\n-\t\"log/syslog\",\n-\t\"text/tabwriter\",\n-\t\"text/template\",\n \t\"testing\",\n \t\"testing/iotest\",\n \t\"testing/quick\",\n+\t\"text\",\n+\t\"text/scanner\",\n+\t\"text/tabwriter\",\n+\t\"text/template\",\n+\t\"text/template/parse\",\n \t\"time\",\n \t\"unicode\",\n-\t\"unicode/utf8\",\n \t\"unicode/utf16\",\n-\t\"encoding/xml\",\n+\t\"unicode/utf8\",\n+\t\"unsafe\",\n }"}, {"sha": "d3c695669c067175156969ca1a089c191868ac23", "filename": "gcc/testsuite/go.test/test/bench/go1/fmt_test.go", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffmt_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffmt_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffmt_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package go1\n+\n+// benchmark based on fmt/fmt_test.go\n+\n+import (\n+\t\"bytes\"\n+\t\"fmt\"\n+\t\"testing\"\n+)\n+\n+func BenchmarkFmtFprintfEmpty(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tfmt.Fprintf(&buf, \"\")\n+\t}\n+}\n+\n+func BenchmarkFmtFprintfString(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"%s\", \"hello\")\n+\t}\n+}\n+\n+func BenchmarkFmtFprintfInt(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"%d\", 5)\n+\t}\n+}\n+\n+func BenchmarkFmtFprintfIntInt(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"%d %d\", 5, 6)\n+\t}\n+}\n+\n+func BenchmarkFmtFprintfPrefixedInt(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"This is some meaningless prefix text that needs to be scanned %d\", 6)\n+\t}\n+}\n+\n+func BenchmarkFmtFprintfFloat(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"%g\", 5.23184)\n+\t}\n+}\n+\n+func BenchmarkFmtManyArgs(b *testing.B) {\n+\tvar buf bytes.Buffer\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbuf.Reset()\n+\t\tfmt.Fprintf(&buf, \"%2d/%2d/%2d %d:%d:%d %s %s\\n\", 3, 4, 5, 11, 12, 13, \"hello\", \"world\")\n+\t}\n+}"}, {"sha": "34e789f6658284f1555d7b62013ec191b148f0a8", "filename": "gcc/testsuite/go.test/test/bench/go1/http_test.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fhttp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fhttp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fhttp_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package go1\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"net/http\"\n+\t\"net/http/httptest\"\n+\t\"testing\"\n+)\n+\n+// BenchmarkHTTPClientServer benchmarks both the HTTP client and the HTTP server,\n+// on small requests.\n+func BenchmarkHTTPClientServer(b *testing.B) {\n+\tmsg := []byte(\"Hello world.\\n\")\n+\tts := httptest.NewServer(http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n+\t\trw.Write(msg)\n+\t}))\n+\tdefer ts.Close()\n+\n+\ttr := &http.Transport{}\n+\tdefer tr.CloseIdleConnections()\n+\tcl := &http.Client{\n+\t\tTransport: tr,\n+\t}\n+\n+\tb.ResetTimer()\n+\n+\tfor i := 0; i < b.N; i++ {\n+\t\tres, err := cl.Get(ts.URL)\n+\t\tif err != nil {\n+\t\t\tb.Fatal(\"Get:\", err)\n+\t\t}\n+\t\tall, err := ioutil.ReadAll(res.Body)\n+\t\tif err != nil {\n+\t\t\tb.Fatal(\"ReadAll:\", err)\n+\t\t}\n+\t\tif !bytes.Equal(all, msg) {\n+\t\t\tb.Fatalf(\"Got body %q; want %q\", all, msg)\n+\t\t}\n+\t}\n+}"}, {"sha": "1d42619bdebfd684f17b9490db26acad474edc6f", "filename": "gcc/testsuite/go.test/test/bench/go1/json_test.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -7,12 +7,12 @@\n package go1\n \n import (\n+\t\"bytes\"\n \t\"compress/bzip2\"\n \t\"encoding/base64\"\n \t\"encoding/json\"\n \t\"io\"\n \t\"io/ioutil\"\n-\t\"strings\"\n \t\"testing\"\n )\n \n@@ -23,7 +23,7 @@ var (\n \n func makeJsonBytes() []byte {\n \tvar r io.Reader\n-\tr = strings.NewReader(jsonbz2_base64)\n+\tr = bytes.NewReader(bytes.Replace(jsonbz2_base64, []byte{'\\n'}, nil, -1))\n \tr = base64.NewDecoder(base64.StdEncoding, r)\n \tr = bzip2.NewReader(r)\n \tb, err := ioutil.ReadAll(r)"}, {"sha": "cf0fac148068299f7dd5dad1f63477aeb57e9024", "filename": "gcc/testsuite/go.test/test/bench/go1/jsondata_test.go", "status": "modified", "additions": 1804, "deletions": 1803, "changes": 3607, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104"}, {"sha": "7848cadd228e6dafc6db97802a2308dfcfc1d3bc", "filename": "gcc/testsuite/go.test/test/bench/go1/parser_test.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fparser_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fparser_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fparser_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -33,7 +33,7 @@ func makeParserBytes() []byte {\n \treturn b\n }\n \n-func BenchmarkParse(b *testing.B) {\n+func BenchmarkGoParse(b *testing.B) {\n \tb.SetBytes(int64(len(parserbytes)))\n \tfor i := 0; i < b.N; i++ {\n \t\tif _, err := parser.ParseFile(token.NewFileSet(), \"\", parserbytes, parser.ParseComments); err != nil {"}, {"sha": "3ce9f3a2c6708e835c0c36a8cd8d4aa247c0d60d", "filename": "gcc/testsuite/go.test/test/bench/go1/regexp_test.go", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fregexp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fregexp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fregexp_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package go1\n+\n+import (\n+\t\"math/rand\"\n+\t\"regexp\"\n+\t\"testing\"\n+)\n+\n+// benchmark based on regexp/exec_test.go\n+\n+var regexpText []byte\n+\n+func makeRegexpText(n int) []byte {\n+\trand.Seed(0) // For reproducibility.\n+\tif len(regexpText) >= n {\n+\t\treturn regexpText[:n]\n+\t}\n+\tregexpText = make([]byte, n)\n+\tfor i := range regexpText {\n+\t\tif rand.Intn(30) == 0 {\n+\t\t\tregexpText[i] = '\\n'\n+\t\t} else {\n+\t\t\tregexpText[i] = byte(rand.Intn(0x7E+1-0x20) + 0x20)\n+\t\t}\n+\t}\n+\treturn regexpText\n+}\n+\n+func benchmark(b *testing.B, re string, n int) {\n+\tr := regexp.MustCompile(re)\n+\tt := makeRegexpText(n)\n+\tb.ResetTimer()\n+\tb.SetBytes(int64(n))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tif r.Match(t) {\n+\t\t\tb.Fatal(\"match!\")\n+\t\t}\n+\t}\n+}\n+\n+const (\n+\teasy0  = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\n+\teasy1  = \"A[AB]B[BC]C[CD]D[DE]E[EF]F[FG]G[GH]H[HI]I[IJ]J$\"\n+\tmedium = \"[XYZ]ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\n+\thard   = \"[ -~]*ABCDEFGHIJKLMNOPQRSTUVWXYZ$\"\n+)\n+\n+func BenchmarkRegexpMatchEasy0_32(b *testing.B)  { benchmark(b, easy0, 32<<0) }\n+func BenchmarkRegexpMatchEasy0_1K(b *testing.B)  { benchmark(b, easy0, 1<<10) }\n+func BenchmarkRegexpMatchEasy1_32(b *testing.B)  { benchmark(b, easy1, 32<<0) }\n+func BenchmarkRegexpMatchEasy1_1K(b *testing.B)  { benchmark(b, easy1, 1<<10) }\n+func BenchmarkRegexpMatchMedium_32(b *testing.B) { benchmark(b, medium, 1<<0) }\n+func BenchmarkRegexpMatchMedium_1K(b *testing.B) { benchmark(b, medium, 1<<10) }\n+func BenchmarkRegexpMatchHard_32(b *testing.B)   { benchmark(b, hard, 32<<0) }\n+func BenchmarkRegexpMatchHard_1K(b *testing.B)   { benchmark(b, hard, 1<<10) }"}, {"sha": "4687de31c130cb3b3831fce6f067c28c978f8079", "filename": "gcc/testsuite/go.test/test/bench/go1/time_test.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftime_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftime_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftime_test.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package go1\n+\n+// benchmark based on time/time_test.go\n+\n+import (\n+\t\"testing\"\n+\t\"time\"\n+)\n+\n+func BenchmarkTimeParse(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\ttime.Parse(time.ANSIC, \"Mon Jan  2 15:04:05 2006\")\n+\t}\n+}\n+\n+func BenchmarkTimeFormat(b *testing.B) {\n+\tt := time.Unix(1265346057, 0)\n+\tfor i := 0; i < b.N; i++ {\n+\t\tt.Format(\"Mon Jan  2 15:04:05 2006\")\n+\t}\n+}"}, {"sha": "2db895c26302c626db23063098c398e851fe8bfe", "filename": "gcc/testsuite/go.test/test/bench/shootout/timing.sh", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -10,6 +10,14 @@ O=$GOCHAR\n GC=\"go tool ${O}g\"\n LD=\"go tool ${O}l\"\n \n+gccm=\"\"\n+case \"$O\" in\n+8)\n+\tgccm=-m32;;\n+6)\n+\tgccm=-m64;;\n+esac\n+\n PATH=.:$PATH\n \n havegccgo=false\n@@ -78,7 +86,7 @@ run() {\n \n fasta() {\n \trunonly echo 'fasta -n 25000000'\n-\trun 'gcc -O2 fasta.c' a.out 25000000\n+\trun \"gcc $gccm -O2 fasta.c\" a.out 25000000\n \trun 'gccgo -O2 fasta.go' a.out -n 25000000\t#commented out until WriteString is in bufio\n \trun 'gc fasta' $O.out -n 25000000\n \trun 'gc_B fasta' $O.out -n 25000000\n@@ -88,7 +96,7 @@ revcomp() {\n \trunonly gcc -O2 fasta.c\n \trunonly a.out 25000000 > x\n \trunonly echo 'reverse-complement < output-of-fasta-25000000'\n-\trun 'gcc -O2 reverse-complement.c' a.out < x\n+\trun \"gcc $gccm -O2 reverse-complement.c\" a.out < x\n \trun 'gccgo -O2 reverse-complement.go' a.out < x\n \trun 'gc reverse-complement' $O.out < x\n \trun 'gc_B reverse-complement' $O.out < x\n@@ -97,15 +105,15 @@ revcomp() {\n \n nbody() {\n \trunonly echo 'nbody -n 50000000'\n-\trun 'gcc -O2 nbody.c -lm' a.out 50000000\n+\trun \"gcc $gccm -O2 nbody.c -lm\" a.out 50000000\n \trun 'gccgo -O2 nbody.go' a.out -n 50000000\n \trun 'gc nbody' $O.out -n 50000000\n \trun 'gc_B nbody' $O.out -n 50000000\n }\n \n binarytree() {\n \trunonly echo 'binary-tree 15 # too slow to use 20'\n-\trun 'gcc -O2 binary-tree.c -lm' a.out 15\n+\trun \"gcc $gccm -O2 binary-tree.c -lm\" a.out 15\n \trun 'gccgo -O2 binary-tree.go' a.out -n 15\n \trun 'gccgo -O2 binary-tree-freelist.go' a.out -n 15\n \trun 'gc binary-tree' $O.out -n 15\n@@ -114,7 +122,7 @@ binarytree() {\n \n fannkuch() {\n \trunonly echo 'fannkuch 12'\n-\trun 'gcc -O2 fannkuch.c' a.out 12\n+\trun \"gcc $gccm -O2 fannkuch.c\" a.out 12\n \trun 'gccgo -O2 fannkuch.go' a.out -n 12\n \trun 'gccgo -O2 fannkuch-parallel.go' a.out -n 12\n \trun 'gc fannkuch' $O.out -n 12\n@@ -126,7 +134,7 @@ regexdna() {\n \trunonly gcc -O2 fasta.c\n \trunonly a.out 100000 > x\n \trunonly echo 'regex-dna 100000'\n-\trun 'gcc -O2 regex-dna.c -lpcre' a.out <x\n+\trun \"gcc $gccm -O2 regex-dna.c -lpcre\" a.out <x\n \trun 'gccgo -O2 regex-dna.go' a.out <x\n \trun 'gccgo -O2 regex-dna-parallel.go' a.out <x\n \trun 'gc regex-dna' $O.out <x\n@@ -137,7 +145,7 @@ regexdna() {\n \n spectralnorm() {\n \trunonly echo 'spectral-norm 5500'\n-\trun 'gcc -O2 spectral-norm.c -lm' a.out 5500\n+\trun \"gcc $gccm -O2 spectral-norm.c -lm\" a.out 5500\n \trun 'gccgo -O2 spectral-norm.go' a.out -n 5500\n \trun 'gc spectral-norm' $O.out -n 5500\n \trun 'gc_B spectral-norm' $O.out -n 5500\n@@ -160,38 +168,38 @@ knucleotide() {\n \n mandelbrot() {\n \trunonly echo 'mandelbrot 16000'\n-\trun 'gcc -O2 mandelbrot.c' a.out 16000\n+\trun \"gcc $gccm -O2 mandelbrot.c\" a.out 16000\n \trun 'gccgo -O2 mandelbrot.go' a.out -n 16000\n \trun 'gc mandelbrot' $O.out -n 16000\n \trun 'gc_B mandelbrot' $O.out -n 16000\n }\n \n meteor() {\n \trunonly echo 'meteor 2098'\n-\trun 'gcc -O2 meteor-contest.c' a.out 2098\n+\trun \"gcc $gccm -O2 meteor-contest.c\" a.out 2098\n \trun 'gccgo -O2 meteor-contest.go' a.out -n 2098\n \trun 'gc meteor-contest' $O.out -n 2098\n \trun 'gc_B  meteor-contest' $O.out -n 2098\n }\n \n pidigits() {\n \trunonly echo 'pidigits 10000'\n-\trun 'gcc -O2 pidigits.c -lgmp' a.out 10000\n+\trun \"gcc $gccm -O2 pidigits.c -lgmp\" a.out 10000\n \trun 'gccgo -O2 pidigits.go' a.out -n 10000\n \trun 'gc pidigits' $O.out -n 10000\n \trun 'gc_B  pidigits' $O.out -n 10000\n }\n \n threadring() {\n \trunonly echo 'threadring 50000000'\n-\trun 'gcc -O2 threadring.c -lpthread' a.out 50000000\n+\trun \"gcc $gccm -O2 threadring.c -lpthread\" a.out 50000000\n \trun 'gccgo -O2 threadring.go' a.out -n 50000000\n \trun 'gc threadring' $O.out -n 50000000\n }\n \n chameneos() {\n \trunonly echo 'chameneos 6000000'\n-\trun 'gcc -O2 chameneosredux.c -lpthread' a.out 6000000\n+\trun \"gcc $gccm -O2 chameneosredux.c -lpthread\" a.out 6000000\n \trun 'gccgo -O2 chameneosredux.go' a.out 6000000\n \trun 'gc chameneosredux' $O.out 6000000\n }"}, {"sha": "60e822942e2826367093350db4346f6556224c34", "filename": "gcc/testsuite/go.test/test/bigalg.go", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbigalg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbigalg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbigalg.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -15,18 +15,21 @@ type T struct {\n \td byte\n }\n \n-var a = []int{ 1, 2, 3 }\n+var a = []int{1, 2, 3}\n var NIL []int\n \n func arraycmptest() {\n \tif NIL != nil {\n \t\tprintln(\"fail1:\", NIL, \"!= nil\")\n+\t\tpanic(\"bigalg\")\n \t}\n \tif nil != NIL {\n \t\tprintln(\"fail2: nil !=\", NIL)\n+\t\tpanic(\"bigalg\")\n \t}\n \tif a == nil || nil == a {\n \t\tprintln(\"fail3:\", a, \"== nil\")\n+\t\tpanic(\"bigalg\")\n \t}\n }\n \n@@ -49,12 +52,14 @@ func maptest() {\n \tt1 := mt[0]\n \tif t1.a != t.a || t1.b != t.b || t1.c != t.c || t1.d != t.d {\n \t\tprintln(\"fail: map val struct\", t1.a, t1.b, t1.c, t1.d)\n+\t\tpanic(\"bigalg\")\n \t}\n \n \tma[1] = a\n \ta1 := ma[1]\n \tif !SameArray(a, a1) {\n \t\tprintln(\"fail: map val array\", a, a1)\n+\t\tpanic(\"bigalg\")\n \t}\n }\n \n@@ -72,15 +77,18 @@ func chantest() {\n \tt1 := <-ct\n \tif t1.a != t.a || t1.b != t.b || t1.c != t.c || t1.d != t.d {\n \t\tprintln(\"fail: map val struct\", t1.a, t1.b, t1.c, t1.d)\n+\t\tpanic(\"bigalg\")\n \t}\n \n \ta1 := <-ca\n \tif !SameArray(a, a1) {\n \t\tprintln(\"fail: map val array\", a, a1)\n+\t\tpanic(\"bigalg\")\n \t}\n }\n \n-type E struct { }\n+type E struct{}\n+\n var e E\n \n func interfacetest() {\n@@ -90,19 +98,22 @@ func interfacetest() {\n \ta1 := i.([]int)\n \tif !SameArray(a, a1) {\n \t\tprintln(\"interface <-> []int\", a, a1)\n+\t\tpanic(\"bigalg\")\n \t}\n \tpa := new([]int)\n \t*pa = a\n \ti = pa\n \ta1 = *i.(*[]int)\n \tif !SameArray(a, a1) {\n \t\tprintln(\"interface <-> *[]int\", a, a1)\n+\t\tpanic(\"bigalg\")\n \t}\n \n \ti = t\n \tt1 := i.(T)\n \tif t1.a != t.a || t1.b != t.b || t1.c != t.c || t1.d != t.d {\n \t\tprintln(\"interface <-> struct\", t1.a, t1.b, t1.c, t1.d)\n+\t\tpanic(\"bigalg\")\n \t}\n \n \ti = e"}, {"sha": "7f7d9f6f7fbac6a7c6ad3eec1eb5df661229d82c", "filename": "gcc/testsuite/go.test/test/blank.go", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -8,6 +8,11 @@\n \n package main\n \n+import (\n+\t\"os\"\n+\t\"unsafe\"\n+)\n+\n import _ \"fmt\"\n \n var call string\n@@ -102,8 +107,19 @@ func main() {\n \t\tpanic(sum)\n \t}\n \n+\t// exp/ssa/interp doesn't yet skip blank fields in struct\n+\t// equivalence.  It also cannot support unsafe.Pointer.\n+\tif os.Getenv(\"GOSSAINTERP\") == \"\" {\n+\t\ttype T1 struct{ x, y, z int }\n+\t\tt1 := *(*T)(unsafe.Pointer(&T1{1, 2, 3}))\n+\t\tt2 := *(*T)(unsafe.Pointer(&T1{4, 5, 6}))\n+\t\tif t1 != t2 {\n+\t\t\tpanic(\"T{} != T{}\")\n+\t\t}\n+\t}\n+\n \th(a, b)\n-\t\n+\n \tm()\n }\n \n@@ -133,14 +149,13 @@ func fp1(x, y int) {\n \t}\n }\n \n-\n func m() {\n \tvar i I\n-\t\n+\n \ti = TI{}\n \ti.M(1, 1)\n \ti.M(2, 2)\n-\t\n+\n \tfp(1, 1)\n \tfp(2, 2)\n }\n@@ -162,4 +177,3 @@ func _() {\n func ff() {\n \tvar _ int = 1\n }\n-"}, {"sha": "f7e98b441681f20eca70a7d781cca06a27417428", "filename": "gcc/testsuite/go.test/test/blank1.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -9,8 +9,13 @@\n \n package _\t// ERROR \"invalid package name _\"\n \n+var t struct {\n+\t_ int\n+}\n+\n func main() {\n \t_()\t// ERROR \"cannot use _ as value\"\n \tx := _+1\t// ERROR \"cannot use _ as value\"\n \t_ = x\n+\t_ = t._ // ERROR \"cannot refer to blank field|invalid use of\"\n }"}, {"sha": "5eec7a577e73bbe1500cdd1afd0f48827ed68e87", "filename": "gcc/testsuite/go.test/test/bugs/bug434.go", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8088e1beb276a0ba33ba2bf499899450d86e9f03/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug434.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8088e1beb276a0ba33ba2bf499899450d86e9f03/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug434.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug434.go?ref=8088e1beb276a0ba33ba2bf499899450d86e9f03", "patch": "@@ -1,10 +0,0 @@\n-// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go || echo BUG:bug434\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n-\n-// Copyright 2011 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package ignored"}, {"sha": "4a08139126192f87e72a39fed7ceb41a6ab90112", "filename": "gcc/testsuite/go.test/test/chan/select2.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -47,7 +47,7 @@ func main() {\n \truntime.GC()\n \truntime.ReadMemStats(memstats)\n \n-\tif memstats.Alloc-alloc > 1e5 {\n+\tif memstats.Alloc-alloc > 1.1e5 {\n \t\tprintln(\"BUG: too much memory for 100,000 selects:\", memstats.Alloc-alloc)\n \t}\n }"}, {"sha": "5be64561d597c5d2fcf012d1e57ae7b5134de953", "filename": "gcc/testsuite/go.test/test/cmp.go", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -8,9 +8,13 @@\n \n package main\n \n-import \"unsafe\"\n+import (\n+\t\"os\"\n+\t\"unsafe\"\n+)\n \n var global bool\n+\n func use(b bool) { global = b }\n \n func stringptr(s string) uintptr { return *(*uintptr)(unsafe.Pointer(&s)) }\n@@ -38,8 +42,12 @@ func main() {\n \tvar c string = \"hello\"\n \tvar d string = \"hel\" // try to get different pointer\n \td = d + \"lo\"\n-\tif stringptr(c) == stringptr(d) {\n-\t\tpanic(\"compiler too smart -- got same string\")\n+\n+\t// exp/ssa/interp can't handle unsafe.Pointer.\n+\tif os.Getenv(\"GOSSAINTERP\") != \"\" {\n+\t\tif stringptr(c) == stringptr(d) {\n+\t\t\tpanic(\"compiler too smart -- got same string\")\n+\t\t}\n \t}\n \n \tvar e = make(chan int)\n@@ -283,7 +291,7 @@ func main() {\n \t\tisfalse(ix != z)\n \t\tisfalse(iz != x)\n \t}\n-\t\n+\n \t// structs with _ fields\n \t{\n \t\tvar x = struct {\n@@ -296,7 +304,7 @@ func main() {\n \t\t\tx: 1, y: 2, z: 3,\n \t\t}\n \t\tvar ix interface{} = x\n-\t\t\n+\n \t\tistrue(x == x)\n \t\tistrue(x == ix)\n \t\tistrue(ix == x)"}, {"sha": "2d8a6229d62d59126fc26ad477c50a5e988c5798", "filename": "gcc/testsuite/go.test/test/cmplx.go", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplx.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplx.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplx.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -9,12 +9,23 @@\n \n package main\n \n+type (\n+\tFloat32    float32\n+\tFloat64    float64\n+\tComplex64  complex64\n+\tComplex128 complex128\n+)\n+\n var (\n \tf32 float32\n \tf64 float64\n+\tF32 Float32\n+\tF64 Float64\n \n \tc64  complex64\n \tc128 complex128\n+\tC64  Complex64\n+\tC128 Complex128\n )\n \n func main() {\n@@ -25,4 +36,19 @@ func main() {\n \t_ = complex128(0)     // ok\n \t_ = complex(f32, f64) // ERROR \"complex\"\n \t_ = complex(f64, f32) // ERROR \"complex\"\n+\t_ = complex(f32, F32) // ERROR \"complex\"\n+\t_ = complex(F32, f32) // ERROR \"complex\"\n+\t_ = complex(f64, F64) // ERROR \"complex\"\n+\t_ = complex(F64, f64) // ERROR \"complex\"\n+\n+\tc128 = complex(f32, f32) // ERROR \"cannot use\"\n+\tc64 = complex(f64, f64)  // ERROR \"cannot use\"\n+\n+\tc64 = complex(1.0, 2.0) // ok, constant is untyped\n+\tc128 = complex(1.0, 2.0)\n+\tC64 = complex(1.0, 2.0)\n+\tC128 = complex(1.0, 2.0)\n+\n+\tC64 = complex(f32, f32)  // ERROR \"cannot use\"\n+\tC128 = complex(f64, f64) // ERROR \"cannot use\"\n }"}, {"sha": "40c84486da0aee7e0a6288091a17efeb658e5fed", "filename": "gcc/testsuite/go.test/test/cmplxdivide.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmplxdivide.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -45,4 +45,7 @@ func main() {\n \t\t\tfmt.Printf(\"%v/%v: expected %v error; got %v\\n\", t.f, t.g, t.out, x)\n \t\t}\n \t}\n+\tif bad {\n+\t\tpanic(\"cmplxdivide failed.\")\n+\t}\n }"}, {"sha": "d583659c6c30c2530aef72dc482dedc1a98c2ec8", "filename": "gcc/testsuite/go.test/test/const.go", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -8,27 +8,29 @@\n \n package main\n \n+import \"os\"\n+\n const (\n-\tc0 = 0\n-\tcm1 = -1\n-\tchuge = 1 << 100\n+\tc0      = 0\n+\tcm1     = -1\n+\tchuge   = 1 << 100\n \tchuge_1 = chuge - 1\n-\tc1 = chuge >> 100\n-\tc3div2 = 3/2\n-\tc1e3 = 1e3\n+\tc1      = chuge >> 100\n+\tc3div2  = 3 / 2\n+\tc1e3    = 1e3\n \n-\tctrue = true\n+\tctrue  = true\n \tcfalse = !ctrue\n )\n \n const (\n-\tf0 = 0.0\n-\tfm1 = -1.\n-\tfhuge float64 = 1 << 100\n+\tf0              = 0.0\n+\tfm1             = -1.\n+\tfhuge   float64 = 1 << 100\n \tfhuge_1 float64 = chuge - 1\n-\tf1 float64 = chuge >> 100\n-\tf3div2 = 3./2.\n-\tf1e3 float64 = 1e3\n+\tf1      float64 = chuge >> 100\n+\tf3div2          = 3. / 2.\n+\tf1e3    float64 = 1e3\n )\n \n func assert(t bool, s string) {\n@@ -41,8 +43,8 @@ func ints() {\n \tassert(c0 == 0, \"c0\")\n \tassert(c1 == 1, \"c1\")\n \tassert(chuge > chuge_1, \"chuge\")\n-\tassert(chuge_1 + 1 == chuge, \"chuge 1\")\n-\tassert(chuge + cm1 +1  == chuge, \"cm1\")\n+\tassert(chuge_1+1 == chuge, \"chuge 1\")\n+\tassert(chuge+cm1+1 == chuge, \"cm1\")\n \tassert(c3div2 == 1, \"3/2\")\n \tassert(c1e3 == 1000, \"c1e3 int\")\n \tassert(c1e3 == 1e3, \"c1e3 float\")\n@@ -81,9 +83,12 @@ func ints() {\n func floats() {\n \tassert(f0 == c0, \"f0\")\n \tassert(f1 == c1, \"f1\")\n-\tassert(fhuge == fhuge_1, \"fhuge\")\t// float64 can't distinguish fhuge, fhuge_1.\n-\tassert(fhuge_1 + 1 == fhuge, \"fhuge 1\")\n-\tassert(fhuge + fm1 +1  == fhuge, \"fm1\")\n+\t// TODO(gri): exp/ssa/interp constant folding is incorrect.\n+\tif os.Getenv(\"GOSSAINTERP\") == \"\" {\n+\t\tassert(fhuge == fhuge_1, \"fhuge\") // float64 can't distinguish fhuge, fhuge_1.\n+\t}\n+\tassert(fhuge_1+1 == fhuge, \"fhuge 1\")\n+\tassert(fhuge+fm1+1 == fhuge, \"fm1\")\n \tassert(f3div2 == 1.5, \"3./2.\")\n \tassert(f1e3 == 1000, \"f1e3 int\")\n \tassert(f1e3 == 1.e3, \"f1e3 float\")"}, {"sha": "58bddee7e072d3e6b4bb147c14e831b56a889af1", "filename": "gcc/testsuite/go.test/test/const1.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -9,6 +9,8 @@\n \n package main\n \n+import \"unsafe\"\n+\n type I interface{}\n \n const (\n@@ -86,3 +88,7 @@ func main() {\n }\n \n const ptr = nil // ERROR \"const.*nil\"\n+const _ = string([]byte(nil)) // ERROR \"is not a? ?constant\"\n+const _ = uintptr(unsafe.Pointer((*int)(nil))) // ERROR \"is not a? ?constant\"\n+const _ = unsafe.Pointer((*int)(nil)) // ERROR \"cannot be nil|invalid constant type\"\n+const _ = (*int)(nil) // ERROR \"cannot be nil|invalid constant type\""}, {"sha": "2fb2d0664e8525383382258ad1f24654eb243bdd", "filename": "gcc/testsuite/go.test/test/const4.go", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst4.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -9,7 +9,7 @@\n package main\n \n var b struct {\n-\ta[10]int\n+\ta [10]int\n }\n \n var m map[string][20]int\n@@ -61,17 +61,22 @@ var c1 = func() chan *[70]int {\n func main() {\n \tif n1 != 10 || n2 != 20 || n3 != 30 || n4 != 40 || n5 != 50 || n6 != 60 || n7 != 70 {\n \t\tprintln(\"BUG:\", n1, n2, n3, n4, n5, n6, n7)\n+\t\tpanic(\"fail\")\n \t}\n \tif !calledF {\n \t\tprintln(\"BUG: did not call f\")\n+\t\tpanic(\"fail\")\n \t}\n \tif <-c == nil {\n \t\tprintln(\"BUG: did not receive from c\")\n+\t\tpanic(\"fail\")\n \t}\n \tif !calledG {\n \t\tprintln(\"BUG: did not call g\")\n+\t\tpanic(\"fail\")\n \t}\n \tif <-c1 == nil {\n \t\tprintln(\"BUG: did not receive from c1\")\n+\t\tpanic(\"fail\")\n \t}\n }"}, {"sha": "87fe33a385515317ea9f0e59314ec3c7870d4155", "filename": "gcc/testsuite/go.test/test/const5.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst5.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -24,10 +24,10 @@ const (\n \tn2 = len(m[\"\"])\n \tn3 = len(s[10])\n \n-\tn4 = len(f())  // ERROR \"must be constant|is not constant\"\n-\tn5 = len(<-c) // ERROR \"must be constant|is not constant\"\n+\tn4 = len(f())  // ERROR \"is not a constant|is not constant\"\n+\tn5 = len(<-c) // ERROR \"is not a constant|is not constant\"\n \n-\tn6 = cap(f())  // ERROR \"must be constant|is not constant\"\n-\tn7 = cap(<-c) // ERROR \"must be constant|is not constant\"\n+\tn6 = cap(f())  // ERROR \"is not a constant|is not constant\"\n+\tn7 = cap(<-c) // ERROR \"is not a constant|is not constant\"\n )\n "}, {"sha": "c005ac3696db53b98b96d858a6bde90e72298cf9", "filename": "gcc/testsuite/go.test/test/const6.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconst6.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,30 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Ideal vs non-ideal bool. See issue 3915, 3923.\n+\n+package p\n+\n+type mybool bool\n+type mybool1 bool\n+\n+var (\n+\tx, y int = 1, 2\n+\tc1 bool = x < y\n+\tc2 mybool = x < y\n+\tc3 mybool = c2 == (x < y)\n+\tc4 mybool = c2 == (1 < 2)\n+\tc5 mybool = 1 < 2\n+\tc6 mybool1 = x < y\n+\tc7 = c1 == c2 // ERROR \"mismatched types|incompatible types\"\n+\tc8 = c2 == c6 // ERROR \"mismatched types|incompatible types\"\n+\tc9 = c1 == c6 // ERROR \"mismatched types|incompatible types\"\n+\t_ = c2 && (x < y)\n+\t_ = c2 && (1 < 2)\n+\t_ = c1 && c2 // ERROR \"mismatched types|incompatible types\"\n+\t_ = c2 && c6 // ERROR \"mismatched types|incompatible types\"\n+\t_ = c1 && c6 // ERROR \"mismatched types|incompatible types\"\n+)"}, {"sha": "e6108d905d199b62398eedf0f29ab5fd004eccc8", "filename": "gcc/testsuite/go.test/test/copy.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcopy.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -132,6 +132,7 @@ func verify8(length, in, out, m int) {\n \tn := ncopied(length, in, out)\n \tif m != n {\n \t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\tos.Exit(1)\n \t\treturn\n \t}\n \t// before\n@@ -172,6 +173,7 @@ func verifyS(length, in, out, m int) {\n \tn := ncopied(length, in, out)\n \tif m != n {\n \t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\tos.Exit(1)\n \t\treturn\n \t}\n \t// before\n@@ -212,6 +214,7 @@ func verify16(length, in, out, m int) {\n \tn := ncopied(length, in, out)\n \tif m != n {\n \t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\tos.Exit(1)\n \t\treturn\n \t}\n \t// before\n@@ -252,6 +255,7 @@ func verify32(length, in, out, m int) {\n \tn := ncopied(length, in, out)\n \tif m != n {\n \t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\tos.Exit(1)\n \t\treturn\n \t}\n \t// before\n@@ -292,6 +296,7 @@ func verify64(length, in, out, m int) {\n \tn := ncopied(length, in, out)\n \tif m != n {\n \t\tfmt.Printf(\"count bad(%d %d %d): %d not %d\\n\", length, in, out, m, n)\n+\t\tos.Exit(1)\n \t\treturn\n \t}\n \t// before"}, {"sha": "c9a267592604766d2df8c628494209e202c5aa7c", "filename": "gcc/testsuite/go.test/test/ddd2.dir/ddd2.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This file is compiled and then imported by ddd3.go.\n+\n+package ddd\n+\n+func Sum(args ...int) int {\n+\ts := 0\n+\tfor _, v := range args {\n+\t\ts += v\n+\t}\n+\treturn s\n+}\n+"}, {"sha": "5486fe8a049705c1ff8f5bcb09a24dae5e293b02", "filename": "gcc/testsuite/go.test/test/ddd2.dir/ddd3.go", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.dir%2Fddd3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,8 +1,3 @@\n-// $G $D/ddd2.go && $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n-\n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.", "previous_filename": "gcc/testsuite/go.test/test/ddd3.go"}, {"sha": "0d9f634ab6059a3d6c883e7c4160eeee5a14fbcc", "filename": "gcc/testsuite/go.test/test/ddd2.go", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,18 +1,9 @@\n-// skip\n+// rundir\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// This file is compiled and then imported by ddd3.go.\n-\n-package ddd\n-\n-func Sum(args ...int) int {\n-\ts := 0\n-\tfor _, v := range args {\n-\t\ts += v\n-\t}\n-\treturn s\n-}\n+// Test that variadic functions work across package boundaries.\n \n+package ignored"}, {"sha": "e2f126adb210a9f8cc867fbe3ded3c9eb49196f7", "filename": "gcc/testsuite/go.test/test/decl.go", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdecl.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdecl.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdecl.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -33,8 +33,9 @@ func main() {\n \t\tm, h, s := f3()\n \t\t_, _, _, _, _, _, _, _, _ = i, f, s, j, k, m, g, s, h\n \t}\n-\tif x() != \"3\" {\n-\t\tprintln(\"x() failed\")\n+\tif y := x(); y != \"3\" {\n+\t\tprintln(\"x() failed\", y)\n+\t\tpanic(\"fail\")\n \t}\n \t_, _, _, _, _, _, _, _, _ = i, f, s, j, k, m, g, s, h\n }"}, {"sha": "728eceb7f1e6b9cd755def6ae347d34724eee1a0", "filename": "gcc/testsuite/go.test/test/declbad.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeclbad.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -41,7 +41,8 @@ func main() {\n \t{\n \t\t// multiline no new variables\n \t\ti := f1\n-\t\ti := func() { // ERROR \"redeclared|no new|incompatible\"\n+\t\ti := func() int { // ERROR \"redeclared|no new|incompatible\"\n+\t\t\treturn 0\n \t\t}\n \t\t_ = i\n \t}"}, {"sha": "6731ab7ee8b0123a2a2fc64027cfebb115d49d45", "filename": "gcc/testsuite/go.test/test/defer.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdefer.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -25,6 +25,7 @@ func test1() {\n \ttest1helper()\n \tif result != \"9876543210\" {\n \t\tfmt.Printf(\"test1: bad defer result (should be 9876543210): %q\\n\", result)\n+\t\tpanic(\"defer\")\n \t}\n }\n \n@@ -41,6 +42,7 @@ func test2() {\n \ttest2helper()\n \tif result != \"9876543210\" {\n \t\tfmt.Printf(\"test2: bad defer result (should be 9876543210): %q\\n\", result)\n+\t\tpanic(\"defer\")\n \t}\n }\n "}, {"sha": "b20f1062f62e99f7fe27a0a5d057e52366f31ed3", "filename": "gcc/testsuite/go.test/test/divide.go", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdivide.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -13,36 +13,44 @@ import \"fmt\"\n func f8(x, y, q, r int8) {\n \tif t := x / y; t != q {\n \t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t\tpanic(\"divide\")\n \t}\n \tif t := x % y; t != r {\n \t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t\tpanic(\"divide\")\n \t}\n }\n \n func f16(x, y, q, r int16) {\n \tif t := x / y; t != q {\n \t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t\tpanic(\"divide\")\n \t}\n \tif t := x % y; t != r {\n \t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t\tpanic(\"divide\")\n \t}\n }\n \n func f32(x, y, q, r int32) {\n \tif t := x / y; t != q {\n \t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t\tpanic(\"divide\")\n \t}\n \tif t := x % y; t != r {\n \t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t\tpanic(\"divide\")\n \t}\n }\n \n func f64(x, y, q, r int64) {\n \tif t := x / y; t != q {\n \t\tfmt.Printf(\"%d/%d = %d, want %d\\n\", x, y, t, q)\n+\t\tpanic(\"divide\")\n \t}\n \tif t := x % y; t != r {\n \t\tfmt.Printf(\"%d%%%d = %d, want %d\\n\", x, y, t, r)\n+\t\tpanic(\"divide\")\n \t}\n }\n "}, {"sha": "175a09c7799734082fe0c69d704d40558f1eb952", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/main.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/main.go"}, {"sha": "7f163e9a1d97c4f3fb1afd4f3bd57f8415e95b8a", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z1.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z1.go"}, {"sha": "19c70020e0ca367624a97a47be7256aebee1f32b", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z10.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz10.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz10.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz10.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z10.go"}, {"sha": "c1d2f9180f11752e79734507a7d041d193c80903", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z11.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz11.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz11.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz11.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z11.go"}, {"sha": "7455f18946826965937e88b17cf613e9802f410d", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z12.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz12.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz12.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz12.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z12.go"}, {"sha": "ecb3c4c8c711dba7e20d8fdfaba1f47389a4c720", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z13.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz13.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz13.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz13.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z13.go"}, {"sha": "134b39b64e2bda6b4bf3fd9da6c4419590546971", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z14.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz14.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz14.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz14.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z14.go"}, {"sha": "d73819b443ba1b7734261eb0fc9ec7e262022c1f", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z15.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz15.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz15.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz15.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z15.go"}, {"sha": "6c31651baa891e4ebff5e8a061e05a060fd336f3", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z16.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz16.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz16.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz16.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z16.go"}, {"sha": "b742d1672606cabc4b9fc31cdb3e039f69481186", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z17.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz17.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz17.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz17.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z17.go"}, {"sha": "84150ff0a35569ddbdcc45021f3200f377443324", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z18.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz18.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz18.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz18.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z18.go"}, {"sha": "bb2e29684174f20a92926ec988ba9daad1f3d47b", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z19.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz19.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz19.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz19.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z19.go"}, {"sha": "68bd58257d9a025d26459c9f471278fd6a131e18", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z2.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z2.go"}, {"sha": "03111e184521d6a5535cc22ca60d42cfef73ca3c", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z20.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz20.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz20.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz20.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z20.go"}, {"sha": "5e4ad3ae257df2bdbeaee6e382005121e049188d", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z3.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z3.go"}, {"sha": "1f28465c57714f35f4dbac9b173f32a5b424fa26", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z4.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz4.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z4.go"}, {"sha": "7f4eeb419a35bcec5bdb83f1b767a4032df4570e", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z5.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz5.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z5.go"}, {"sha": "241791dff2b0e003fa592d70e4752689e51e81ef", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z6.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz6.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z6.go"}, {"sha": "68c1ad0c2434ad098addca086e34a88998456372", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z7.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz7.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz7.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz7.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z7.go"}, {"sha": "16eed32a28d3c4bcca08507f31ff5e3508f68438", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z8.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz8.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz8.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz8.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z8.go"}, {"sha": "cbb94b4d2beddef80e39ec29177b561725c920a3", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.dir/z9.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.dir%2Fz9.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/dwarf/z9.go"}, {"sha": "32dd7d3d5769e722af9e890819039fd4aadc7482", "filename": "gcc/testsuite/go.test/test/dwarf/dwarf.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fdwarf.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// See issue 2241 and issue 1878: dwarf include stack size\n+// issues in linker.\n+\n+package ignored"}, {"sha": "b8b312a923745e5c29a0654987602b549664ac89", "filename": "gcc/testsuite/go.test/test/errchk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ferrchk?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -31,7 +31,7 @@ if(@ARGV < 1) {\n \n # Grab SOURCEFILES\n foreach(reverse 0 .. @ARGV-1) {\n-\tunless($ARGV[$_] =~ /\\.go$/) {\n+\tunless($ARGV[$_] =~ /\\.(go|s)$/) {\n \t\t@file = @ARGV[$_+1 .. @ARGV-1];\n \t\tlast;\n \t}"}, {"sha": "252a1e59cc80b55a96e7f36fd45591100a11bbd7", "filename": "gcc/testsuite/go.test/test/escape.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -52,9 +52,11 @@ func chk(p, q *int, v int, s string) {\n func chkalias(p, q *int, v int, s string) {\n \tif p != q {\n \t\tprintln(\"want aliased pointers but got different after\", s)\n+\t\tbad = true\n \t}\n \tif *q != v+1 {\n \t\tprintln(\"wrong value want\", v+1, \"got\", *q, \"after\", s)\n+\t\tbad = true\n \t}\n }\n "}, {"sha": "511b74a1cca430c53db47bc4f1840aacfdd673c2", "filename": "gcc/testsuite/go.test/test/escape2.go", "status": "modified", "additions": 154, "deletions": 58, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -80,7 +80,9 @@ func foo12(yyy **int) { // ERROR \"leaking param: yyy\"\n \txxx = yyy\n }\n \n-func foo13(yyy **int) { // ERROR \"yyy does not escape\"\n+// Must treat yyy as leaking because *yyy leaks, and the escape analysis \n+// summaries in exported metadata do not distinguish these two cases.\n+func foo13(yyy **int) { // ERROR \"leaking param: yyy\"\n \t*xxx = *yyy\n }\n \n@@ -142,13 +144,13 @@ func (b Bar) AlsoLeak() *int { // ERROR \"leaking param: b\"\n }\n \n func (b Bar) LeaksToo() *int { // ERROR \"leaking param: b\"\n-\tv := 0\t// ERROR \"moved to heap: v\"\n+\tv := 0    // ERROR \"moved to heap: v\"\n \tb.ii = &v // ERROR \"&v escapes\"\n \treturn b.ii\n }\n \n func (b *Bar) LeaksABit() *int { // ERROR \"b does not escape\"\n-\tv := 0\t// ERROR \"moved to heap: v\"\n+\tv := 0    // ERROR \"moved to heap: v\"\n \tb.ii = &v // ERROR \"&v escapes\"\n \treturn b.ii\n }\n@@ -299,7 +301,8 @@ func (f *Foo) foo45() { // ERROR \"f does not escape\"\n \tF.x = f.x\n }\n \n-func (f *Foo) foo46() { // ERROR \"f does not escape\"\n+// See foo13 above for explanation of why f leaks.\n+func (f *Foo) foo46() { // ERROR \"leaking param: f\"\n \tF.xx = f.xx\n }\n \n@@ -561,36 +564,45 @@ func myprint1(y *int, x ...interface{}) *interface{} { // ERROR \"y does not esca\n \treturn &x[0] // ERROR \"&x.0. escapes to heap\"\n }\n \n-func foo75(z *int) { // ERROR \"leaking param: z\"\n+func foo75(z *int) { // ERROR \"z does not escape\"\n \tmyprint(z, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo75a(z *int) { // ERROR \"z does not escape\"\n-\tmyprint1(z, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+\tmyprint1(z, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo75esc(z *int) { // ERROR \"leaking param: z\"\n+\tgxx = myprint(z, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo75aesc(z *int) { // ERROR \"z does not escape\"\n+\tvar ppi **interface{}       // assignments to pointer dereferences lose track\n+\t*ppi = myprint1(z, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n }\n \n func foo76(z *int) { // ERROR \"leaking param: z\"\n \tmyprint(nil, z) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76a(z *int) { // ERROR \"leaking param: z\"\n-\tmyprint1(nil, z) // ERROR \"[.][.][.] argument escapes to heap\"\n+\tmyprint1(nil, z) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76b() {\n \tmyprint(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76c() {\n-\tmyprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+\tmyprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76d() {\n \tdefer myprint(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76e() {\n-\tdefer myprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+\tdefer myprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n }\n \n func foo76f() {\n@@ -610,10 +622,15 @@ func foo77(z []interface{}) { // ERROR \"z does not escape\"\n \tmyprint(nil, z...) // z does not escape\n }\n \n-func foo77a(z []interface{}) { // ERROR \"leaking param: z\"\n+func foo77a(z []interface{}) { // ERROR \"z does not escape\"\n \tmyprint1(nil, z...)\n }\n \n+func foo77b(z []interface{}) { // ERROR \"leaking param: z\"\n+\tvar ppi **interface{}\n+\t*ppi = myprint1(nil, z...)\n+}\n+\n func foo78(z int) *int { // ERROR \"moved to heap: z\"\n \treturn &z // ERROR \"&z escapes to heap\"\n }\n@@ -646,6 +663,21 @@ func foo81() *int {\n \treturn nil\n }\n \n+func tee(p *int) (x, y *int) { return p, p } // ERROR \"leaking param\"\n+\n+func noop(x, y *int) {} // ERROR \"does not escape\"\n+\n+func foo82() {\n+\tvar x, y, z int  // ERROR \"moved to heap\"\n+\tgo noop(tee(&z)) // ERROR \"&z escapes to heap\"\n+\tgo noop(&x, &y)  // ERROR \"escapes to heap\"\n+\tfor {\n+\t\tvar u, v, w int     // ERROR \"moved to heap\"\n+\t\tdefer noop(tee(&u)) // ERROR \"&u escapes to heap\"\n+\t\tdefer noop(&v, &w)  // ERROR \"escapes to heap\"\n+\t}\n+}\n+\n type Fooer interface {\n \tFoo()\n }\n@@ -1079,38 +1111,38 @@ L1:\n \t_ = i\n }\n \n-func foo124(x **int) {\t// ERROR \"x does not escape\"\n-\tvar i int\t// ERROR \"moved to heap: i\"\n-\tp := &i \t// ERROR \"&i escapes\"\n-\tfunc() {\t// ERROR \"func literal does not escape\"\n-\t\t*x = p\t// ERROR \"leaking closure reference p\"\n+func foo124(x **int) { // ERROR \"x does not escape\"\n+\tvar i int // ERROR \"moved to heap: i\"\n+\tp := &i   // ERROR \"&i escapes\"\n+\tfunc() {  // ERROR \"func literal does not escape\"\n+\t\t*x = p // ERROR \"leaking closure reference p\"\n \t}()\n }\n \n-func foo125(ch chan *int) {\t// ERROR \"does not escape\"\n-\tvar i int\t// ERROR \"moved to heap\"\n-\tp := &i \t// ERROR \"&i escapes to heap\"\n-\tfunc() {\t// ERROR \"func literal does not escape\"\n-\t\tch <- p\t// ERROR \"leaking closure reference p\"\n+func foo125(ch chan *int) { // ERROR \"does not escape\"\n+\tvar i int // ERROR \"moved to heap\"\n+\tp := &i   // ERROR \"&i escapes to heap\"\n+\tfunc() {  // ERROR \"func literal does not escape\"\n+\t\tch <- p // ERROR \"leaking closure reference p\"\n \t}()\n }\n \n func foo126() {\n-\tvar px *int  // loopdepth 0\n+\tvar px *int // loopdepth 0\n \tfor {\n \t\t// loopdepth 1\n-\t\tvar i int  // ERROR \"moved to heap\"\n+\t\tvar i int // ERROR \"moved to heap\"\n \t\tfunc() {  // ERROR \"func literal does not escape\"\n-\t\t\tpx = &i  // ERROR \"&i escapes\"\n+\t\t\tpx = &i // ERROR \"&i escapes\"\n \t\t}()\n \t}\n }\n \n var px *int\n \n func foo127() {\n-\tvar i int  // ERROR \"moved to heap: i\"\n-\tp := &i  // ERROR \"&i escapes to heap\"\n+\tvar i int // ERROR \"moved to heap: i\"\n+\tp := &i   // ERROR \"&i escapes to heap\"\n \tq := p\n \tpx = q\n }\n@@ -1123,90 +1155,90 @@ func foo128() {\n }\n \n func foo129() {\n-\tvar i int  // ERROR \"moved to heap: i\"\n-\tp := &i  // ERROR \"&i escapes to heap\"\n+\tvar i int // ERROR \"moved to heap: i\"\n+\tp := &i   // ERROR \"&i escapes to heap\"\n \tfunc() {  // ERROR \"func literal does not escape\"\n-\t\tq := p  // ERROR \"leaking closure reference p\"\n-\t\tfunc() {  // ERROR \"func literal does not escape\"\n-\t\t\tr := q  // ERROR \"leaking closure reference q\"\n+\t\tq := p   // ERROR \"leaking closure reference p\"\n+\t\tfunc() { // ERROR \"func literal does not escape\"\n+\t\t\tr := q // ERROR \"leaking closure reference q\"\n \t\t\tpx = r\n \t\t}()\n \t}()\n }\n \n func foo130() {\n \tfor {\n-\t\tvar i int  // ERROR \"moved to heap\"\n+\t\tvar i int // ERROR \"moved to heap\"\n \t\tfunc() {  // ERROR \"func literal does not escape\"\n-\t\t\tpx = &i  // ERROR \"&i escapes\" \"leaking closure reference i\"\n+\t\t\tpx = &i // ERROR \"&i escapes\" \"leaking closure reference i\"\n \t\t}()\n \t}\n }\n \n func foo131() {\n-\tvar i int  // ERROR \"moved to heap\"\n+\tvar i int // ERROR \"moved to heap\"\n \tfunc() {  // ERROR \"func literal does not escape\"\n-\t\tpx = &i  // ERROR \"&i escapes\" \"leaking closure reference i\"\n+\t\tpx = &i // ERROR \"&i escapes\" \"leaking closure reference i\"\n \t}()\n }\n \n func foo132() {\n-\tvar i int  // ERROR \"moved to heap\"\n-\tgo func() {  // ERROR \"func literal escapes to heap\"\n-\t\tpx = &i  // ERROR \"&i escapes\" \"leaking closure reference i\"\n+\tvar i int   // ERROR \"moved to heap\"\n+\tgo func() { // ERROR \"func literal escapes to heap\"\n+\t\tpx = &i // ERROR \"&i escapes\" \"leaking closure reference i\"\n \t}()\n }\n \n func foo133() {\n-\tvar i int  // ERROR \"moved to heap\"\n-\tdefer func() {  // ERROR \"func literal does not escape\"\n-\t\tpx = &i  // ERROR \"&i escapes\" \"leaking closure reference i\"\n+\tvar i int      // ERROR \"moved to heap\"\n+\tdefer func() { // ERROR \"func literal does not escape\"\n+\t\tpx = &i // ERROR \"&i escapes\" \"leaking closure reference i\"\n \t}()\n }\n \n func foo134() {\n \tvar i int\n \tp := &i  // ERROR \"&i does not escape\"\n-\tfunc() {  // ERROR \"func literal does not escape\"\n+\tfunc() { // ERROR \"func literal does not escape\"\n \t\tq := p\n-\t\tfunc() {  // ERROR \"func literal does not escape\"\n+\t\tfunc() { // ERROR \"func literal does not escape\"\n \t\t\tr := q\n \t\t\t_ = r\n \t\t}()\n \t}()\n }\n \n func foo135() {\n-\tvar i int  // ERROR \"moved to heap: i\"\n-\tp := &i  // ERROR \"&i escapes to heap\" \"moved to heap: p\"\n-\tgo func() {  // ERROR \"func literal escapes to heap\"\n-\t\tq := p  // ERROR \"&p escapes to heap\"\n-\t\tfunc() {  // ERROR \"func literal does not escape\"\n+\tvar i int   // ERROR \"moved to heap: i\"\n+\tp := &i     // ERROR \"&i escapes to heap\" \"moved to heap: p\"\n+\tgo func() { // ERROR \"func literal escapes to heap\"\n+\t\tq := p   // ERROR \"&p escapes to heap\"\n+\t\tfunc() { // ERROR \"func literal does not escape\"\n \t\t\tr := q\n \t\t\t_ = r\n \t\t}()\n \t}()\n }\n \n func foo136() {\n-\tvar i int  // ERROR \"moved to heap: i\"\n-\tp := &i  // ERROR \"&i escapes to heap\" \"moved to heap: p\"\n-\tgo func() {  // ERROR \"func literal escapes to heap\"\n-\t\tq := p  // ERROR \"&p escapes to heap\" \"leaking closure reference p\"\n-\t\tfunc() {  // ERROR \"func literal does not escape\"\n+\tvar i int   // ERROR \"moved to heap: i\"\n+\tp := &i     // ERROR \"&i escapes to heap\" \"moved to heap: p\"\n+\tgo func() { // ERROR \"func literal escapes to heap\"\n+\t\tq := p   // ERROR \"&p escapes to heap\" \"leaking closure reference p\"\n+\t\tfunc() { // ERROR \"func literal does not escape\"\n \t\t\tr := q // ERROR \"leaking closure reference q\"\n \t\t\tpx = r\n \t\t}()\n \t}()\n }\n \n func foo137() {\n-\tvar i int  // ERROR \"moved to heap: i\"\n-\tp := &i  // ERROR \"&i escapes to heap\"\n+\tvar i int // ERROR \"moved to heap: i\"\n+\tp := &i   // ERROR \"&i escapes to heap\"\n \tfunc() {  // ERROR \"func literal does not escape\"\n-\t\tq := p  // ERROR \"leaking closure reference p\" \"moved to heap: q\"\n+\t\tq := p      // ERROR \"leaking closure reference p\" \"moved to heap: q\"\n \t\tgo func() { // ERROR \"func literal escapes to heap\"\n-\t\t\tr := q  // ERROR \"&q escapes to heap\"\n+\t\t\tr := q // ERROR \"&q escapes to heap\"\n \t\t\t_ = r\n \t\t}()\n \t}()\n@@ -1216,7 +1248,7 @@ func foo138() *byte {\n \ttype T struct {\n \t\tx [1]byte\n \t}\n-\tt := new(T) // ERROR \"new.T. escapes to heap\"\n+\tt := new(T)    // ERROR \"new.T. escapes to heap\"\n \treturn &t.x[0] // ERROR \"&t.x.0. escapes to heap\"\n }\n \n@@ -1226,6 +1258,70 @@ func foo139() *byte {\n \t\t\ty byte\n \t\t}\n \t}\n-\tt := new(T) // ERROR \"new.T. escapes to heap\"\n+\tt := new(T)   // ERROR \"new.T. escapes to heap\"\n \treturn &t.x.y // ERROR \"&t.x.y escapes to heap\"\n }\n+\n+// issue 4751\n+func foo140() interface{} {\n+\ttype T struct {\n+\t\tX string\n+\t}\n+\ttype U struct {\n+\t\tX string\n+\t\tT *T\n+\t}\n+\tt := &T{} // ERROR \"&T literal escapes to heap\"\n+\treturn U{\n+\t\tX: t.X,\n+\t\tT: t,\n+\t}\n+}\n+\n+//go:noescape\n+\n+func F1([]byte)\n+\n+func F2([]byte)\n+\n+//go:noescape\n+\n+func F3(x []byte) // ERROR \"F3 x does not escape\"\n+\n+func F4(x []byte)\n+\n+func G() {\n+\tvar buf1 [10]byte\n+\tF1(buf1[:]) // ERROR \"buf1 does not escape\"\n+\t\n+\tvar buf2 [10]byte // ERROR \"moved to heap: buf2\"\n+\tF2(buf2[:]) // ERROR \"buf2 escapes to heap\"\n+\n+\tvar buf3 [10]byte\n+\tF3(buf3[:]) // ERROR \"buf3 does not escape\"\n+\t\n+\tvar buf4 [10]byte // ERROR \"moved to heap: buf4\"\n+\tF4(buf4[:]) // ERROR \"buf4 escapes to heap\"\n+}\n+\n+type Tm struct {\n+\tx int\n+}\n+\n+func (t *Tm) M() { // ERROR \"t does not escape\"\n+}\n+\n+func foo141() {\n+\tvar f func()\n+\t\n+\tt := new(Tm) // ERROR \"escapes to heap\"\n+\tf = t.M // ERROR \"t.M does not escape\"\n+\t_ = f\n+}\n+\n+var gf func()\n+\n+func foo142() {\n+\tt := new(Tm) // ERROR \"escapes to heap\"\n+\tgf = t.M // ERROR \"t.M escapes to heap\"\n+}"}, {"sha": "6b327fe9e31ea997395f1538e265c04419435114", "filename": "gcc/testsuite/go.test/test/escape5.go", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape5.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,144 @@\n+// errorcheck -0 -m -l\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test, using compiler diagnostic flags, that the escape analysis is working.\n+// Compiles but does not run.  Inlining is disabled.\n+\n+package foo\n+\n+func noleak(p *int) int { // ERROR \"p does not escape\"\n+\treturn *p\n+}\n+\n+func leaktoret(p *int) *int { // ERROR \"leaking param: p to result\"\n+\treturn p\n+}\n+\n+func leaktoret2(p *int) (*int, *int) { // ERROR \"leaking param: p to result .anon1\" \"leaking param: p to result .anon2\"\n+\treturn p, p\n+}\n+\n+func leaktoret22(p, q *int) (*int, *int) { // ERROR \"leaking param: p to result .anon2\" \"leaking param: q to result .anon3\"\n+\treturn p, q\n+}\n+\n+func leaktoret22b(p, q *int) (*int, *int) { // ERROR \"leaking param: p to result .anon3\" \"leaking param: q to result .anon2\"\n+\treturn leaktoret22(q, p)\n+}\n+\n+func leaktoret22c(p, q *int) (*int, *int) { // ERROR \"leaking param: p to result .anon3\" \"leaking param: q to result .anon2\"\n+\tr, s := leaktoret22(q, p)\n+\treturn r, s\n+}\n+\n+func leaktoret22d(p, q *int) (r, s *int) { // ERROR \"leaking param: p to result s\" \"leaking param: q to result r\"\n+\tr, s = leaktoret22(q, p)\n+\treturn\n+}\n+\n+func leaktoret22e(p, q *int) (r, s *int) { // ERROR \"leaking param: p to result s\" \"leaking param: q to result r\"\n+\tr, s = leaktoret22(q, p)\n+\treturn r, s\n+}\n+\n+func leaktoret22f(p, q *int) (r, s *int) { // ERROR \"leaking param: p to result s\" \"leaking param: q to result r\"\n+\trr, ss := leaktoret22(q, p)\n+\treturn rr, ss\n+}\n+\n+var gp *int\n+\n+func leaktosink(p *int) *int { // ERROR \"leaking param: p\"\n+\tgp = p\n+\treturn p\n+}\n+\n+func f1() {\n+\tvar x int\n+\tp := noleak(&x) // ERROR \"&x does not escape\"\n+\t_ = p\n+}\n+\n+func f2() {\n+\tvar x int\n+\tp := leaktoret(&x) // ERROR \"&x does not escape\"\n+\t_ = p\n+}\n+\n+func f3() {\n+\tvar x int          // ERROR \"moved to heap: x\"\n+\tp := leaktoret(&x) // ERROR \"&x escapes to heap\"\n+\tgp = p\n+}\n+\n+func f4() {\n+\tvar x int              // ERROR \"moved to heap: x\"\n+\tp, q := leaktoret2(&x) // ERROR \"&x escapes to heap\"\n+\tgp = p\n+\tgp = q\n+}\n+\n+func f5() {\n+\tvar x int\n+\tleaktoret22(leaktoret2(&x)) // ERROR \"&x does not escape\"\n+}\n+\n+func f6() {\n+\tvar x int                               // ERROR \"moved to heap: x\"\n+\tpx1, px2 := leaktoret22(leaktoret2(&x)) // ERROR \"&x escapes to heap\"\n+\tgp = px1\n+\t_ = px2\n+}\n+\n+type T struct{ x int }\n+\n+func (t *T) Foo(u int) (*T, bool) { // ERROR \"leaking param: t to result\"\n+\tt.x += u\n+\treturn t, true\n+}\n+\n+func f7() *T {\n+\tr, _ := new(T).Foo(42) // ERROR \"new.T. escapes to heap\"\n+\treturn r\n+}\n+\n+func leakrecursive1(p, q *int) (*int, *int) { // ERROR \"leaking param: p\" \"leaking param: q\"\n+\treturn leakrecursive2(q, p)\n+}\n+\n+func leakrecursive2(p, q *int) (*int, *int) { // ERROR \"leaking param: p\" \"leaking param: q\"\n+\tif *p > *q {\n+\t\treturn leakrecursive1(q, p)\n+\t}\n+\t// without this, leakrecursive? are safe for p and q, b/c in fact their graph does not have leaking edges.\n+\treturn p, q\n+}\n+\n+\n+var global interface{}\n+\n+type T1 struct {\n+\tX *int\n+}\n+\n+type T2 struct {\n+\tY *T1\n+}\n+\n+func f8(p *T1) (k T2) { // ERROR \"leaking param: p to result k\" \"leaking param: p\"\n+\tif p == nil {\n+\t\tk = T2{}\n+\t\treturn\n+\t}\n+\n+\tglobal = p // should make p leak always\n+\treturn T2{p}\n+}\n+\n+func f9() {\n+\tvar j T1 // ERROR \"moved to heap: j\"\n+\tf8(&j) // ERROR \"&j escapes to heap\"\n+}"}, {"sha": "d2cf88afcb24ff04a9c2f6514c731a7ed174bdd7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug040.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug040.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug040.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug040.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -7,5 +7,5 @@\n package main\n \n func f (x,\t\t// GCCGO_ERROR \"previous\"\n-\tx int) {\t// ERROR \"redeclared|redefinition\" \"duplicate\"\n+\tx int) {\t// ERROR \"duplicate argument|redefinition\"\n }"}, {"sha": "54a17423a08415d8eb4803d463fdfc186770b04f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug083.go", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug083.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug083.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug083.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,7 @@\n-// $G $D/$F.dir/bug0.go && errchk $G $D/$F.dir/bug1.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckdir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-ignored\n+package ignored"}, {"sha": "dae83f8a498bd9635993b19a4509f5e51935d9a5", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug085.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug085.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug085.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug085.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -20,7 +20,7 @@ Bus error\n \n /* expected scope hierarchy (outermost to innermost)\n \n-universe scope (contains predeclared identifiers int, float, int32, len, etc.)\n+universe scope (contains predeclared identifiers int, float32, int32, len, etc.)\n \"solar\" scope (just holds the package name P so it can be found but doesn't conflict)\n global scope (the package global scope)\n local scopes (function scopes)"}, {"sha": "54a17423a08415d8eb4803d463fdfc186770b04f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug133.go", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug133.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug133.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug133.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,7 @@\n-// $G $D/$F.dir/bug0.go && $G $D/$F.dir/bug1.go && errchk $G $D/$F.dir/bug2.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckdir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-ignored\n+package ignored"}, {"sha": "fde797bfcd29e3d026f55f13a1f869fe6059615a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug160.go", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug160.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug160.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug160.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,7 @@\n-// $G $D/bug160.dir/x.go && $G $D/bug160.dir/y.go && $L y.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-nothing to see here\n+package ignored"}, {"sha": "995134ccfcb2f4f2e2667ae4c8f7cef66b0ae5b4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug191.dir/main.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import . \"./a\"\n+import . \"./b\"\n+\n+var _ T\n+var _ V\n+\n+func main() {\n+}"}, {"sha": "248e23edfc6af34ac2c2beba9c81b56a509cba39", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug191.go", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug191.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,19 +1,9 @@\n-// $G $D/bug191.dir/a.go && $G $D/bug191.dir/b.go && $G $D/$F.go && $L $F.$A\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-package main\n-\n-import . \"./a\"\n-import . \"./b\"\n-\n-var _ T\n-var _ V\n+// Tests bug with dot imports.\n \n-func main() {\n-}\n+package ignored"}, {"sha": "1e0d9d1f34d62f554d4ab1c4413da85be2259af0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug205.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug205.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -11,8 +11,8 @@ var s string;\n var m map[string]int;\n \n func main() {\n-\tprintln(t[\"hi\"]);\t// ERROR \"integer\"\n-\tprintln(s[\"hi\"]);\t// ERROR \"integer\" \"to type uint\"\n-\tprintln(m[0]);\t// ERROR \"map index\"\n+\tprintln(t[\"hi\"]); // ERROR \"non-integer slice index|must be integer\"\n+\tprintln(s[\"hi\"]); // ERROR \"non-integer string index|must be integer\"\n+\tprintln(m[0]);    // ERROR \"cannot use.*as type string\"\n }\n "}, {"sha": "3fccd1728883dc72356ece64272503c94332e088", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug228.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug228.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -12,7 +12,7 @@ func g(x int, y float32) (...)\t// ERROR \"[.][.][.]\" \"final argument\"\n \n func h(x, y ...int)\t\t// ERROR \"[.][.][.]\"\n \n-func i(x int, y ...int, z float)\t// ERROR \"[.][.][.]\"\n+func i(x int, y ...int, z float32)\t// ERROR \"[.][.][.]\"\n \n var x ...int;\t\t// ERROR \"[.][.][.]|syntax|type\"\n "}, {"sha": "acf4f23910d69f2a48f530c1744cd2aef6446c89", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug255.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug255.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -12,4 +12,4 @@ var c [1.5]int\t// ERROR \"truncated\"\n var d [\"abc\"]int\t// ERROR \"invalid array bound|not numeric\"\n var e [nil]int\t// ERROR \"invalid array bound|not numeric\"\n var f [e]int\t// ERROR \"invalid array bound|not constant\"\n-var g [1<<65]int\t// ERROR \"overflows\"\n+var g [1<<65]int\t// ERROR \"array bound is too large|overflows\""}, {"sha": "ee2ff92437d3a41b42bb1a0e205901f59e29e621", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug297.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug297.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -11,5 +11,5 @@ package main\n type ByteSize float64\n const (\n \t_ = iota;   // ignore first value by assigning to blank identifier\n-\tKB ByteSize = 1<<(10*X) // ERROR \"undefined\" \"as type ByteSize\"\n+\tKB ByteSize = 1<<(10*X) // ERROR \"undefined\" \"is not a constant|as type ByteSize\"\n )"}, {"sha": "a7c1d3627bf85376394ceb5cf0194a37a910a83b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug313.go", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug313.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// errchk $G -e $D/$F.dir/[ab].go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckdir\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "21efbb55935a3306dbadd006e6d1acd02586a1f0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug322.go", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug322.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,11 +1,8 @@\n-// $G $D/$F.dir/lib.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out || echo BUG: fails incorrectly\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Test case for issue 1402.\n-ignored\n+package ignored"}, {"sha": "3ab61f3eb5e87fecc23e7ffc92bd380f67ad5fc4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.dir/prog.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.dir/main.go"}, {"sha": "36b8b56d1235d56719d964c399e3d3cfede37114", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug324.go", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug324.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,11 +1,10 @@\n-// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// Test case for issue 1550\n-ignored\n+// Test case for issue 1550: a type cannot implement an interface\n+// from another package with a private method, and type assertions\n+// should fail.\n+package ignored"}, {"sha": "ffcb668116070e104a1fdeb56f6e3377e9ba4c00", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug342.go", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug342.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -9,11 +9,7 @@\n package p\n \n type a interface {\n-\tfoo(x int) (x int) // ERROR \"redeclared|redefinition\"\n-}\n-\n-var b interface {\n-\tbar(y int) (y int) // ERROR \"redeclared|redefinition\"\n+\tfoo(x int) (x int) // ERROR \"duplicate argument|redefinition\"\n }\n \n /*"}, {"sha": "ceb2009be512a55e3b588ef2413693fc7c578bfc", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug357.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug357.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -15,7 +15,7 @@ func bla1() bool {\n \n func bla5() bool {\n \t_ = 1\n-\tfalse  // ERROR \"false not used|value computed is not used\"\n+\tfalse  // ERROR \"false evaluated but not used|value computed is not used\"\n \t_ = 2\n \treturn false\n }"}, {"sha": "c278e4dd95ff78799c91ca1032886dfb9ff6d9b0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.dir/prog.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.dir/main.go"}, {"sha": "05252cd9a6d4984f99661db5f6d2f644ab9a1f09", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.go", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,10 @@\n-// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out || echo BUG: should not fail\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// Issue 1536: bug when handling imported interfaces with\n+// private methods.\n+\n package ignored"}, {"sha": "14abe469bec9a14dbdeca9d97e2ae75fdd86a349", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug379.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -14,5 +14,5 @@\n package main\n \n func main() {\n-\t1 + 2 // ERROR \"1 \\+ 2 not used|value computed is not used\"\n+\t1 + 2 // ERROR \"1 \\+ 2 evaluated but not used|value computed is not used\"\n }"}, {"sha": "b74a82d8241c6f19109d005501e86ab1ea03de1b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug382.dir/prog.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file\n+\n+// Issue 2529\n+\n+package main\n+\n+import \"./pkg\"\n+\n+var x = pkg.E\n+\n+var fo = struct{ F pkg.T }{F: x}"}, {"sha": "6039939eeb880266dd1795e15e1d8b01421b361f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug382.go", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,17 +1,9 @@\n-// $G $D/$F.dir/pkg.go && $G $D/$F.go || echo \"Bug 382\"\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// compiledir\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file\n \n-// Issue 2529\n-\n-package main\n-import \"./pkg\"\n-\n-var x = pkg.E\n+// Issue 2529.\n \n-var fo = struct {F pkg.T}{F: x}\n+package ignored"}, {"sha": "4c3cad7798e4c0e9c00a7a2968842159aa630ea8", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug385_32.go", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,5 @@\n-// [ $A == 6 ] || errchk $G -e $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// +build 386 arm\n+// errorcheck\n \n // Copyright 2011 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -11,7 +9,7 @@\n \n package main\n func main() {\n-\tvar arr [1000200030]int   // ERROR \"type .* too large\"\n+\tvar arr [1000200030]int   // GC_ERROR \"type .* too large\"\n \tarr_bkup := arr\n \t_ = arr_bkup\n-}\n\\ No newline at end of file\n+}"}, {"sha": "b593cd53cf17bbb8b5e749d42ea26021a1802edb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug385_64.go", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,18 +1,22 @@\n-// [ $A != 6 ]  || errchk $G -e $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// +build amd64\n+// errorcheck\n \n // Copyright 2011 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Issue 2444\n+// Issue 4666: issue with arrays of exactly 4GB.\n \n package main\n-func main() {  // ERROR \"stack frame too large\"\n+\n+func main() { // GC_ERROR \"stack frame too large\"\n \tvar arr [1000200030]int32\n \tarr_bkup := arr\n \t_ = arr_bkup\n }\n \n+func F() { // GC_ERROR \"stack frame too large\"\n+\tvar arr [1 << 30]int32\n+\t_ = arr[42]\n+}"}, {"sha": "c7ddc0cac83d345a716f22aa98f74c1db57825fe", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug412.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug412.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug412.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug412.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -7,8 +7,8 @@\n package p\n \n type t struct {\n-\tx int  // ERROR \"duplicate field x|duplicate field name .x.\"\n-\tx int\n+\tx int  // GCCGO_ERROR \"duplicate field name .x.\"\n+\tx int  // GC_ERROR \"duplicate field x\"\n }\n \n func f(t *t) int {"}, {"sha": "52001233c62a15709017613c0c6c23a4aacc7da2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug414.dir/main.go", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8088e1beb276a0ba33ba2bf499899450d86e9f03/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8088e1beb276a0ba33ba2bf499899450d86e9f03/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fmain.go?ref=8088e1beb276a0ba33ba2bf499899450d86e9f03", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2012 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-\t  package main\n-\t\n-\t  import \"./p1\"\n-\t\n-\t  type MyObject struct {\n-\t    p1.Fer\n-\t  }\n-\t\n-\t  func main() {\n-\t    var b p1.Fer = &p1.Object{}\n-\t    p1.PrintFer(b)\n-\t    var c p1.Fer = &MyObject{b}\n-\t    p1.PrintFer(c)\n-\t  }"}, {"sha": "246383484334f493d2954075a74fa7fffa756a40", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug414.dir/p1.go", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -2,20 +2,20 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-\t  package p1\n-\t\n-\t  import \"fmt\"\n-\t\n-\t  type Fer interface {\n-\t    f() string\n-\t  }\n-\t\n-\t  type Object struct {}\n-\t\n-\t  func (this *Object) f() string {\n-\t    return \"Object.f\"\n-\t  }\n-\t\n-\t  func PrintFer(fer Fer) {\n-\t    fmt.Sprintln(fer.f())\n-\t  }\n+package p1\n+\n+import \"fmt\"\n+\n+type Fer interface {\n+\tf() string\n+}\n+\n+type Object struct{}\n+\n+func (this *Object) f() string {\n+\treturn \"Object.f\"\n+}\n+\n+func PrintFer(fer Fer) {\n+\tfmt.Sprintln(fer.f())\n+}"}, {"sha": "f55d9469689958cc853725189b17923213b418ca", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug414.dir/prog.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./p1\"\n+\n+type MyObject struct {\n+\tp1.Fer\n+}\n+\n+func main() {\n+\tvar b p1.Fer = &p1.Object{}\n+\tp1.PrintFer(b)\n+\tvar c p1.Fer = &MyObject{b}\n+\tp1.PrintFer(c)\n+}"}, {"sha": "35e19be38e20e3801e2ac2d0d24007be90c2211f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug414.go", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug414.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,9 @@\n-// $G $D/$F.dir/p1.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2012 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// Issue 1743: test embedding of imported types with private methods.\n+\n package ignored"}, {"sha": "c2fe1463cd6438b59011aa7c9afdacbbb8370eca", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug424.dir/main.go", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,97 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Tests that method calls through an interface always\n+// call the locally defined method localT.m independent\n+// at which embedding level it is and in which order\n+// embedding is done.\n+\n+package main\n+\n+import \"./lib\"\n+import \"reflect\"\n+import \"fmt\"\n+\n+type localI interface {\n+\tm() string\n+}\n+\n+type localT struct{}\n+\n+func (t *localT) m() string {\n+\treturn \"main.localT.m\"\n+}\n+\n+type myT1 struct {\n+\tlocalT\n+}\n+\n+type myT2 struct {\n+\tlocalT\n+\tlib.T\n+}\n+\n+type myT3 struct {\n+\tlib.T\n+\tlocalT\n+}\n+\n+func main() {\n+\tvar i localI\n+\n+\ti = new(localT)\n+\tif i.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: localT:\", i.m(), \"called\")\n+\t}\n+\n+\ti = new(myT1)\n+\tif i.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: myT1:\", i.m(), \"called\")\n+\t}\n+\n+\ti = new(myT2)\n+\tif i.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: myT2:\", i.m(), \"called\")\n+\t}\n+\n+\tt3 := new(myT3)\n+\tif t3.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: t3:\", t3.m(), \"called\")\n+\t}\n+\t\n+\ti = new(myT3)\n+\tif i.m() != \"main.localT.m\" {\n+\t\tt := reflect.TypeOf(i)\n+\t\tn := t.NumMethod()\n+\t\tfor j := 0; j < n; j++ {\n+\t\t\tm := t.Method(j)\n+\t\t\tfmt.Printf(\"#%d: %s.%s %s\\n\", j, m.PkgPath, m.Name, m.Type)\n+\t\t}\n+\t\tprintln(\"BUG: myT3:\", i.m(), \"called\")\n+\t}\n+\t\n+\tvar t4 struct {\n+\t\tlocalT\n+\t\tlib.T\n+\t}\n+\tif t4.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: t4:\", t4.m(), \"called\")\n+\t}\n+\ti = &t4\n+\tif i.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: myT4:\", i.m(), \"called\")\n+\t}\n+\t\n+\tvar t5 struct {\n+\t\tlib.T\n+\t\tlocalT\n+\t}\n+\tif t5.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: t5:\", t5.m(), \"called\")\n+\t}\n+\ti = &t5\n+\tif i.m() != \"main.localT.m\" {\n+\t\tprintln(\"BUG: myT5:\", i.m(), \"called\")\n+\t}\n+}"}, {"sha": "59c2cd35c4c28f6079dfecf3140f54d22bd7ca30", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug424.go", "status": "modified", "additions": 2, "deletions": 91, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug424.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// $G $D/$F.dir/lib.go && $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2012 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -12,91 +9,5 @@\n // at which embedding level it is and in which order\n // embedding is done.\n \n-package main\n-\n-import \"./lib\"\n-import \"reflect\"\n-import \"fmt\"\n-\n-type localI interface {\n-\tm() string\n-}\n-\n-type localT struct{}\n-\n-func (t *localT) m() string {\n-\treturn \"main.localT.m\"\n-}\n-\n-type myT1 struct {\n-\tlocalT\n-}\n-\n-type myT2 struct {\n-\tlocalT\n-\tlib.T\n-}\n-\n-type myT3 struct {\n-\tlib.T\n-\tlocalT\n-}\n-\n-func main() {\n-\tvar i localI\n-\n-\ti = new(localT)\n-\tif i.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: localT:\", i.m(), \"called\")\n-\t}\n-\n-\ti = new(myT1)\n-\tif i.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: myT1:\", i.m(), \"called\")\n-\t}\n-\n-\ti = new(myT2)\n-\tif i.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: myT2:\", i.m(), \"called\")\n-\t}\n+package ignored\n \n-\tt3 := new(myT3)\n-\tif t3.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: t3:\", t3.m(), \"called\")\n-\t}\n-\t\n-\ti = new(myT3)\n-\tif i.m() != \"main.localT.m\" {\n-\t\tt := reflect.TypeOf(i)\n-\t\tn := t.NumMethod()\n-\t\tfor j := 0; j < n; j++ {\n-\t\t\tm := t.Method(j)\n-\t\t\tfmt.Printf(\"#%d: %s.%s %s\\n\", j, m.PkgPath, m.Name, m.Type)\n-\t\t}\n-\t\tprintln(\"BUG: myT3:\", i.m(), \"called\")\n-\t}\n-\t\n-\tvar t4 struct {\n-\t\tlocalT\n-\t\tlib.T\n-\t}\n-\tif t4.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: t4:\", t4.m(), \"called\")\n-\t}\n-\ti = &t4\n-\tif i.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: myT4:\", i.m(), \"called\")\n-\t}\n-\t\n-\tvar t5 struct {\n-\t\tlib.T\n-\t\tlocalT\n-\t}\n-\tif t5.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: t5:\", t5.m(), \"called\")\n-\t}\n-\ti = &t5\n-\tif i.m() != \"main.localT.m\" {\n-\t\tprintln(\"BUG: myT5:\", i.m(), \"called\")\n-\t}\n-}"}, {"sha": "364d017afa7189bfd11ce55e3ad4c7414f65a6b1", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug437.dir/x.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.dir%2Fx.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.dir%2Fx.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.dir%2Fx.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test converting a type defined in a different package to an\n+// interface defined in a third package, where the interface has a\n+// hidden method.  This used to cause a link error with gccgo.\n+\n+package main\n+\n+import (\n+\t\"./one\"\n+\t\"./two\"\n+)\n+\n+func F(i1 one.I1) {\n+\tswitch v := i1.(type) {\n+\tcase two.S2:\n+\t\tone.F1(v)\n+\t}\n+}\n+\n+func main() {\n+\tF(nil)\n+}"}, {"sha": "5c4a2ad0dcf5885ffd5573813a093f6d92d84661", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug437.go", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug437.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go && $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2012 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -11,20 +8,4 @@\n // interface defined in a third package, where the interface has a\n // hidden method.  This used to cause a link error with gccgo.\n \n-package main\n-\n-import (\n-\t\"./one\"\n-\t\"./two\"\n-)\n-\n-func F(i1 one.I1) {\n-\tswitch v := i1.(type) {\n-\tcase two.S2:\n-\t\tone.F1(v)\n-\t}\n-}\n-\n-func main() {\n-\tF(nil)\n-}\n+package ignored"}, {"sha": "136abefb7d2e46363800916515a62f786b390029", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug453.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug453.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug453.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug453.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,39 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4138: bug in floating-point registers numbering.\n+// Makes 6g unable to use more than 11 registers.\n+\n+package main\n+\n+func formula() float32 {\n+\tmA := [1]float32{1.0}\n+\tdet1 := mA[0]\n+\tdet2 := mA[0]\n+\tdet3 := mA[0]\n+\tdet4 := mA[0]\n+\tdet5 := mA[0]\n+\tdet6 := mA[0]\n+\tdet7 := mA[0]\n+\tdet8 := mA[0]\n+\tdet9 := mA[0]\n+\tdet10 := mA[0]\n+\tdet11 := mA[0]\n+\tdet12 := mA[0]\n+\n+\treturn det1 + det2*det3 +\n+\t\tdet4*det5 + det6*det7 +\n+\t\tdet8*det9 + det10*det11 +\n+\t\tdet12\n+}\n+\n+func main() {\n+\tx := formula()\n+\tif x != 7.0 {\n+\t\tprintln(x, 7.0)\n+\t\tpanic(\"x != 7.0\")\n+\t}\n+}"}, {"sha": "a10abba8b288106abd6744245f040a9066532974", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug454.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug454.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug454.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug454.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,21 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4173\n+\n+package main\n+\n+func main() {\n+\tvar arr *[10]int\n+\ts := 0\n+\tfor i, _ := range arr {\n+\t\t// used to panic trying to access arr[i]\n+\t\ts += i\n+\t}\n+\tif s != 45 {\n+\t\tprintln(\"BUG\")\n+\t}\n+}"}, {"sha": "8e3c7701be03348c46eb5e1ce0f1f5e60a6af993", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug455.go", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug455.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug455.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug455.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,54 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4156: out of fixed registers when chaining method calls.\n+// Used to happen with 6g.\n+\n+package main\n+\n+type test_i interface {\n+\tTest() test_i\n+\tResult() bool\n+}\n+\n+type test_t struct {\n+}\n+\n+func newTest() *test_t {\n+\treturn &test_t{}\n+}\n+\n+type testFn func(string) testFn\n+\n+func main() {\n+\ttest := newTest()\n+\n+\tswitch {\n+\tcase test.\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tTest().\n+\t\tResult():\n+\t\t// case worked\n+\tdefault:\n+\t\tpanic(\"Result returned false unexpectedly\")\n+\t}\n+}\n+\n+func (t *test_t) Test() test_i {\n+\treturn t\n+}\n+\n+func (t *test_t) Result() bool {\n+\treturn true\n+}"}, {"sha": "064e1aa02818ce26af0da696d1705fae1217e005", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug456.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug456.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug456.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug456.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3907: out of fixed registers in nested byte multiply.\n+// Used to happen with both 6g and 8g.\n+\n+package main\n+\n+func F(a, b, c, d uint8) uint8 {\n+\treturn a * (b * (c * (d *\n+\t\t(a * (b * (c * (d *\n+\t\t\t(a * (b * (c * (d *\n+\t\t\t\ta * (b * (c * d)))))))))))))\n+}\n+\n+func main() {\n+\tvar a, b, c, d uint8 = 1, 1, 1, 1\n+\tx := F(a, b, c, d)\n+\tif x != 1 {\n+\t\tprintln(x)\n+\t\tpanic(\"x != 1\")\n+\t}\n+}"}, {"sha": "ee7048972afa68791f8aa4c7ae9ba2c2d0605fcc", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug457.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug457.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug457.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug457.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4197: growing a slice of zero-width elements\n+// panics on a division by zero.\n+\n+package main\n+\n+func main() {\n+\tvar x []struct{}\n+\tx = append(x, struct{}{})\n+}"}, {"sha": "ddc97bdb0cc78479ed0fd87ab02e88fdb0515211", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug458.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug458.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug458.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug458.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,22 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4200: 6g crashes when a type is larger than 4GB.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+// N=16 on 32-bit arches, 256 on 64-bit arches.\n+// On 32-bit arches we don't want to test types\n+// that are over 4GB large.\n+const N = 1 << unsafe.Sizeof(uintptr(0))\n+\n+type T [N][10][10][10][10][3]byte\n+\n+func F(t *T) byte {\n+\treturn t[0][0][0][0][0][0]\n+}"}, {"sha": "014f2ef01f77caf3556886b727c24760bbc05fdc", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug459.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug459.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug459.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug459.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,35 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3890: missing detection of init loop involving\n+// method calls in function bodies.\n+\n+package flag\n+\n+var commandLine = NewFlagSet() // ERROR \"loop|depends upon itself\"\n+\n+type FlagSet struct {\n+}\n+\n+func (f *FlagSet) failf(format string, a ...interface{}) {\n+\tf.usage()\n+}\n+\n+func (f *FlagSet) usage() {\n+\tif f == commandLine {\n+\t\tpanic(3)\n+\t}\n+}\n+\n+func NewFlagSet() *FlagSet {\n+\tf := &FlagSet{}\n+\tf.setErrorHandling(true)\n+\treturn f\n+}\n+\n+func (f *FlagSet) setErrorHandling(b bool) {\n+\tf.failf(\"DIE\")\n+}"}, {"sha": "02a287b31777cb6230016ba48a1eb975285f6fcb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug460.dir/a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Foo struct {\n+\tint\n+}"}, {"sha": "1868afe073eac07e3f1a5964a12d19580424b78e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug460.dir/b.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+var x a.Foo\n+\n+func main() {\n+\tx.int = 20 // ERROR \"unexported field\"\n+}\n+"}, {"sha": "79234a3b9633d4da33f78cbcf81413d97cdced2a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug460.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug460.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// errorcheckdir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// part one of issue 4124. Make sure that the compiler rejects access attempts.\n+\n+package ignored\n+"}, {"sha": "f0f7b0e69b6744b9d95ac6db265e484929ad5d35", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug461.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug461.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug461.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug461.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,23 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// part two of issue 4124. Make sure reflect doesn't mark the field as exported.\n+\n+package main\n+\n+import \"reflect\"\n+\n+var T struct {\n+\tint\n+}\n+\n+func main() {\n+\tv := reflect.ValueOf(&T)\n+\tv = v.Elem().Field(0)\n+\tif v.CanSet() {\n+\t\tpanic(\"int should be unexported\")\n+\t}\n+}"}, {"sha": "1a23ad064dc43aedad3d10b6d25a2f016d243a58", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug462.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug462.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug462.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug462.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"os\"\n+\n+type T struct {\n+\tFile int\n+}\n+\n+func main() {\n+\t_ = T {\n+\t\tos.File: 1, // ERROR \"unknown T? ?field\"\n+\t}\n+}"}, {"sha": "3e7a1848270fe66794e2c7b725968128f3e88d25", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug463.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug463.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug463.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug463.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,22 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3757: unhelpful typechecking loop message\n+// for constants that refer to themselves.\n+\n+package main\n+\n+const a = a // ERROR \"refers to itself|definition loop\"\n+\n+const (\n+\tX    = A\n+\tA    = B // ERROR \"refers to itself|definition loop\"\n+\tB    = D\n+\tC, D = 1, A\n+)\n+\n+func main() {\n+}"}, {"sha": "582193997a155c0a9b7db96c64597b76684e4045", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug464.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug464.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug464.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug464.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,12 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3937: unhelpful typechecking loop message\n+// for identifiers wrongly used as types.\n+\n+package main\n+\n+func foo(x foo) {} // ERROR \"expected type|not a type\""}, {"sha": "a9a8614bb33d084d934f76684370a73617cd5256", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug465.dir/a.go", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type T struct{ A, B int }\n+\n+type A []int\n+\n+type M map[int]int\n+\n+func F1() int {\n+\tif (T{1, 2}) == (T{3, 4}) {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F2() int {\n+\tif (M{1: 2}) == nil {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F3() int {\n+\tif nil == (A{}) {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F4() int {\n+\tif a := (A{}); a == nil {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F5() int {\n+\tfor k, v := range (M{1: 2}) {\n+\t\treturn v - k\n+\t}\n+\treturn 0\n+}\n+\n+func F6() int {\n+\tswitch a := (T{1, 1}); a == (T{1, 2}) {\n+\tdefault:\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F7() int {\n+\tfor m := (M{}); len(m) < (T{1, 2}).A; m[1] = (A{1})[0] {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F8() int {\n+\tif a := (&T{1, 1}); a != nil {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}\n+\n+func F9() int {\n+\tvar a *T\n+\tif a = (&T{1, 1}); a != nil {\n+\t\treturn 1\n+\t}\n+\treturn 0\n+}"}, {"sha": "c84c6836d62539666193391131edc2b059d90a04", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug465.dir/b.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\tfor _, f := range []func() int{\n+\t\ta.F1, a.F2, a.F3, a.F4,\n+\t\ta.F5, a.F6, a.F7, a.F8, a.F9} {\n+\t\tif f() > 1 {\n+\t\t\tpanic(\"f() > 1\")\n+\t\t}\n+\t}\n+}"}, {"sha": "a6ef5876ab633fa2f571c304a85c064831df1e83", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug465.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug465.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4230: inlining bug for composite literal in\n+// if, for, switch statements.\n+\n+package ignored"}, {"sha": "b9de63edabee46cdf3b0e9ed1016113636a09f1b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug466.dir/a.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+const N = 2+3i\n+\n+func Func() []complex128 {\n+\treturn []complex128{1, complex(2, 3), complex(4, 5)}\n+}\n+\n+func Mul(z complex128) complex128 {\n+\treturn z * (3 + 4i)\n+}"}, {"sha": "82d66eacef944bc39418b24d447ba5b1fcaf8e96", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug466.dir/b.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\ts := a.Func()\n+\tif s[0] != 1 {\n+\t\tprintln(s[0])\n+\t\tpanic(\"s[0] != 1\")\n+\t}\n+\tif s[1] != 2+3i {\n+\t\tprintln(s[1])\n+\t\tpanic(\"s[1] != 2+3i\")\n+\t}\n+\tif s[2] != 4+5i {\n+\t\tprintln(s[2])\n+\t\tpanic(\"s[2] != 4+5i\")\n+\t}\n+\n+\tx := 1 + 2i\n+\ty := a.Mul(x)\n+\tif y != (1+2i)*(3+4i) {\n+\t\tprintln(y)\n+\t\tpanic(\"y != (1+2i)*(3+4i)\")\n+\t}\n+}"}, {"sha": "6b65b33b0a84c47765d482b3cff464d8043621ce", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug466.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug466.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+// rundir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4159: exported inlinable functions squash\n+// complex literals \"a+bi\" to \"a+b\".\n+\n+package ignored\n+"}, {"sha": "538b554f8e3970b1a043231e172470b27679725e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug467.dir/p1.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,5 @@\n+package p1\n+\n+type SockaddrUnix int\n+\n+func (s SockaddrUnix) Error() string { return \"blah\" }"}, {"sha": "d80d3a30b185d927e9f1f22eaa5d01bb4f604d52", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug467.dir/p2.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,5 @@\n+package p2\n+\n+import \"./p1\"\n+\n+func SockUnix() error { var s *p1.SockaddrUnix; return s }"}, {"sha": "c795646472fc0a460cb535868f3fa690d80ba8ec", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug467.dir/p3.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.dir%2Fp3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+package main\n+\n+import \"./p2\"\n+\n+func main() {\n+\t_ = p2.SockUnix()\n+}"}, {"sha": "d73adbadffc23d79be4852df303eef503a3a9d96", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug467.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug467.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Exported data for inlining could forget types of\n+// local variables declared in inlinable bodies.\n+\n+package ignored"}, {"sha": "ca175770fc1f1e7537575804061ee5c37670ff83", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug468.dir/p1.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p1\n+\n+type S struct { X, Y int }"}, {"sha": "1793c0e534e2d56d2d2f0903e99e65b45d6b322c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug468.dir/p2.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.dir%2Fp2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"reflect\"\n+\n+\t\"./p1\"\n+)\n+\n+func main() {\n+\tvar v1 = p1.S{1, 2}\n+\tvar v2 = struct { X, Y int }{1, 2}\n+\tv1 = v2\n+\tt1 := reflect.TypeOf(v1)\n+\tt2 := reflect.TypeOf(v2)\n+\tif !t1.AssignableTo(t2) {\n+\t\tpanic(0)\n+\t}\n+\tif !t2.AssignableTo(t1) {\n+\t\tpanic(1)\n+\t}\n+}"}, {"sha": "12e4997d36b3aaebe5092b3a13aed20272c990a0", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug468.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug468.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// The reflect package was not correctly checking field names\n+// when checking for struct assignability.\n+\n+package ignored"}, {"sha": "0a359184c6028e83618d9c07b80c9701f2a8f76d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug470.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug470.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug470.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug470.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Converting constants between types must introduce rounding.\n+\n+package main\n+\n+import \"fmt\"\n+\n+const (\n+    F32 = 0.00999999977648258209228515625\n+    F64 = 0.01000000000000000020816681711721685132943093776702880859375\n+)\n+\n+var F = float64(float32(0.01))\n+\n+func main() {\n+\t// 0.01 rounded to float32 then to float64 is F32.\n+\t// 0.01 represented directly in float64 is F64.\n+\tif F != F32 {\n+\t\tpanic(fmt.Sprintf(\"F=%.1000g, want %.1000g\", F, F32))\n+\t}\n+}"}, {"sha": "e4542596e9ad1233b9927ac32cdd9a828a30f27f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug471.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug471.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug471.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug471.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,18 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Caused an internal compiler error in gccgo.\n+\n+package p\n+\n+type C chan struct{}\n+\n+func (c C) F() {\n+\tselect {\n+\tcase c <- struct{}{}:\n+\tdefault:\n+\t}\n+}"}, {"sha": "9d47fd84a7284502a38199f72ff01f3832617a3c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug472.dir/p1.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p1\n+\n+import \"runtime\"\n+\n+func E() func() int { return runtime.NumCPU }\n+\n+func F() func() { return runtime.Gosched }\n+\n+func G() func() string { return runtime.GOROOT }\n+\n+func H() func() { return runtime.GC }\n+\n+func I() func() string { return runtime.Version }"}, {"sha": "34a3f0487a4986ef2ca3bc7de6b30a33816d2f57", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug472.dir/p2.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fp2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p2\n+\n+import \"runtime\"\n+\n+func E() func() int { return runtime.NumCPU }\n+\n+func F() func() { return runtime.GC }\n+\n+func G() func() string { return runtime.GOROOT }\n+\n+func H() func() { return runtime.Gosched }\n+\n+func I() func() string { return runtime.Version }"}, {"sha": "6c29dd08c619b2c8a711fa1bcdc44cd8d194c00b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug472.dir/z.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fz.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fz.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.dir%2Fz.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t_ \"./p1\"\n+\t_ \"./p2\"\n+)\n+\n+func main() {\n+}"}, {"sha": "c79c64ca1ff207c1f7c1f22b5d45adea8ea3a8b9", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug472.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug472.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Linker would incorrectly parse export data and think\n+// definitions are inconsistent.\n+\n+package ignored"}, {"sha": "49ce7d737910016e0e2e054492c20e17a206c1ac", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug473.go", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug473.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug473.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug473.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,69 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to be miscompiled by gccgo, due to a bug in handling\n+// initialization ordering.\n+\n+package main\n+\n+func F(a ...interface{}) interface{} {\n+\ts := 0\n+\tfor _, v := range a {\n+\t\ts += v.(int)\n+\t}\n+\treturn s\n+}\n+\n+var V1 = F(V10, V4, V3, V11)\n+\n+var V2 = F(V1)\n+\n+var V3 = F(1)\n+\n+var V4 = F(2)\n+\n+var V5 = F(3)\n+\n+var V6 = F(4)\n+\n+var V7 = F(5)\n+\n+var V8 = F(V14, V7, V3, V6, V5)\n+\n+var V9 = F(V4, F(V12))\n+\n+var V10 = F(V4, V9)\n+\n+var V11 = F(6)\n+\n+var V12 = F(V5, V3, V8)\n+\n+var V13 = F(7)\n+\n+var V14 = F(8)\n+\n+func expect(name string, a interface{}, b int) {\n+\tif a.(int) != b {\n+\t\tpanic(name)\n+\t}\n+}\n+\n+func main() {\n+\texpect(\"V1\", V1, 38)\n+\texpect(\"V2\", V2, 38)\n+\texpect(\"V3\", V3, 1)\n+\texpect(\"V4\", V4, 2)\n+\texpect(\"V5\", V5, 3)\n+\texpect(\"V6\", V6, 4)\n+\texpect(\"V7\", V7, 5)\n+\texpect(\"V8\", V8, 21)\n+\texpect(\"V9\", V9, 27)\n+\texpect(\"V10\", V10, 29)\n+\texpect(\"V11\", V11, 6)\n+\texpect(\"V12\", V12, 25)\n+\texpect(\"V13\", V13, 7)\n+\texpect(\"V14\", V14, 8)\n+}"}, {"sha": "b8264872a98d63b1ad1ce33a84af7dc13879bc0e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug474.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug474.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug474.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug474.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Bug in method values: escape analysis was off.\n+\n+package main\n+\n+import \"sync\"\n+\n+var called = false\n+\n+type T struct {\n+\tonce sync.Once\n+}\n+\n+func (t *T) M() {\n+\tcalled = true\n+}\n+\n+func main() {\n+\tvar t T\n+\tt.once.Do(t.M)\n+\tif !called {\n+\t\tpanic(\"not called\")\n+\t}\n+}"}, {"sha": "686e1e1ada3270a90658e8a4b0106831829fb4d5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue2615.go", "status": "added", "additions": 547, "deletions": 0, "changes": 547, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue2615.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue2615.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue2615.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,547 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2615: a long chain of else if's causes an overflow\n+// in the parser stack.\n+\n+package main\n+\n+// test returns the index of the lowest set bit in a 256-bit vector.\n+func test(x [4]uint64) int {\n+\tif x[0]&(1<<0) != 0 {\n+\t\treturn 0\n+\t} else if x[0]&(1<<1) != 0 {\n+\t\treturn 1\n+\t} else if x[0]&(1<<2) != 0 {\n+\t\treturn 2\n+\t} else if x[0]&(1<<3) != 0 {\n+\t\treturn 3\n+\t} else if x[0]&(1<<4) != 0 {\n+\t\treturn 4\n+\t} else if x[0]&(1<<5) != 0 {\n+\t\treturn 5\n+\t} else if x[0]&(1<<6) != 0 {\n+\t\treturn 6\n+\t} else if x[0]&(1<<7) != 0 {\n+\t\treturn 7\n+\t} else if x[0]&(1<<8) != 0 {\n+\t\treturn 8\n+\t} else if x[0]&(1<<9) != 0 {\n+\t\treturn 9\n+\t} else if x[0]&(1<<10) != 0 {\n+\t\treturn 10\n+\t} else if x[0]&(1<<11) != 0 {\n+\t\treturn 11\n+\t} else if x[0]&(1<<12) != 0 {\n+\t\treturn 12\n+\t} else if x[0]&(1<<13) != 0 {\n+\t\treturn 13\n+\t} else if x[0]&(1<<14) != 0 {\n+\t\treturn 14\n+\t} else if x[0]&(1<<15) != 0 {\n+\t\treturn 15\n+\t} else if x[0]&(1<<16) != 0 {\n+\t\treturn 16\n+\t} else if x[0]&(1<<17) != 0 {\n+\t\treturn 17\n+\t} else if x[0]&(1<<18) != 0 {\n+\t\treturn 18\n+\t} else if x[0]&(1<<19) != 0 {\n+\t\treturn 19\n+\t} else if x[0]&(1<<20) != 0 {\n+\t\treturn 20\n+\t} else if x[0]&(1<<21) != 0 {\n+\t\treturn 21\n+\t} else if x[0]&(1<<22) != 0 {\n+\t\treturn 22\n+\t} else if x[0]&(1<<23) != 0 {\n+\t\treturn 23\n+\t} else if x[0]&(1<<24) != 0 {\n+\t\treturn 24\n+\t} else if x[0]&(1<<25) != 0 {\n+\t\treturn 25\n+\t} else if x[0]&(1<<26) != 0 {\n+\t\treturn 26\n+\t} else if x[0]&(1<<27) != 0 {\n+\t\treturn 27\n+\t} else if x[0]&(1<<28) != 0 {\n+\t\treturn 28\n+\t} else if x[0]&(1<<29) != 0 {\n+\t\treturn 29\n+\t} else if x[0]&(1<<30) != 0 {\n+\t\treturn 30\n+\t} else if x[0]&(1<<31) != 0 {\n+\t\treturn 31\n+\t} else if x[0]&(1<<32) != 0 {\n+\t\treturn 32\n+\t} else if x[0]&(1<<33) != 0 {\n+\t\treturn 33\n+\t} else if x[0]&(1<<34) != 0 {\n+\t\treturn 34\n+\t} else if x[0]&(1<<35) != 0 {\n+\t\treturn 35\n+\t} else if x[0]&(1<<36) != 0 {\n+\t\treturn 36\n+\t} else if x[0]&(1<<37) != 0 {\n+\t\treturn 37\n+\t} else if x[0]&(1<<38) != 0 {\n+\t\treturn 38\n+\t} else if x[0]&(1<<39) != 0 {\n+\t\treturn 39\n+\t} else if x[0]&(1<<40) != 0 {\n+\t\treturn 40\n+\t} else if x[0]&(1<<41) != 0 {\n+\t\treturn 41\n+\t} else if x[0]&(1<<42) != 0 {\n+\t\treturn 42\n+\t} else if x[0]&(1<<43) != 0 {\n+\t\treturn 43\n+\t} else if x[0]&(1<<44) != 0 {\n+\t\treturn 44\n+\t} else if x[0]&(1<<45) != 0 {\n+\t\treturn 45\n+\t} else if x[0]&(1<<46) != 0 {\n+\t\treturn 46\n+\t} else if x[0]&(1<<47) != 0 {\n+\t\treturn 47\n+\t} else if x[0]&(1<<48) != 0 {\n+\t\treturn 48\n+\t} else if x[0]&(1<<49) != 0 {\n+\t\treturn 49\n+\t} else if x[0]&(1<<50) != 0 {\n+\t\treturn 50\n+\t} else if x[0]&(1<<51) != 0 {\n+\t\treturn 51\n+\t} else if x[0]&(1<<52) != 0 {\n+\t\treturn 52\n+\t} else if x[0]&(1<<53) != 0 {\n+\t\treturn 53\n+\t} else if x[0]&(1<<54) != 0 {\n+\t\treturn 54\n+\t} else if x[0]&(1<<55) != 0 {\n+\t\treturn 55\n+\t} else if x[0]&(1<<56) != 0 {\n+\t\treturn 56\n+\t} else if x[0]&(1<<57) != 0 {\n+\t\treturn 57\n+\t} else if x[0]&(1<<58) != 0 {\n+\t\treturn 58\n+\t} else if x[0]&(1<<59) != 0 {\n+\t\treturn 59\n+\t} else if x[0]&(1<<60) != 0 {\n+\t\treturn 60\n+\t} else if x[0]&(1<<61) != 0 {\n+\t\treturn 61\n+\t} else if x[0]&(1<<62) != 0 {\n+\t\treturn 62\n+\t} else if x[0]&(1<<63) != 0 {\n+\t\treturn 63\n+\t} else if x[1]&(1<<0) != 0 {\n+\t\treturn 64\n+\t} else if x[1]&(1<<1) != 0 {\n+\t\treturn 65\n+\t} else if x[1]&(1<<2) != 0 {\n+\t\treturn 66\n+\t} else if x[1]&(1<<3) != 0 {\n+\t\treturn 67\n+\t} else if x[1]&(1<<4) != 0 {\n+\t\treturn 68\n+\t} else if x[1]&(1<<5) != 0 {\n+\t\treturn 69\n+\t} else if x[1]&(1<<6) != 0 {\n+\t\treturn 70\n+\t} else if x[1]&(1<<7) != 0 {\n+\t\treturn 71\n+\t} else if x[1]&(1<<8) != 0 {\n+\t\treturn 72\n+\t} else if x[1]&(1<<9) != 0 {\n+\t\treturn 73\n+\t} else if x[1]&(1<<10) != 0 {\n+\t\treturn 74\n+\t} else if x[1]&(1<<11) != 0 {\n+\t\treturn 75\n+\t} else if x[1]&(1<<12) != 0 {\n+\t\treturn 76\n+\t} else if x[1]&(1<<13) != 0 {\n+\t\treturn 77\n+\t} else if x[1]&(1<<14) != 0 {\n+\t\treturn 78\n+\t} else if x[1]&(1<<15) != 0 {\n+\t\treturn 79\n+\t} else if x[1]&(1<<16) != 0 {\n+\t\treturn 80\n+\t} else if x[1]&(1<<17) != 0 {\n+\t\treturn 81\n+\t} else if x[1]&(1<<18) != 0 {\n+\t\treturn 82\n+\t} else if x[1]&(1<<19) != 0 {\n+\t\treturn 83\n+\t} else if x[1]&(1<<20) != 0 {\n+\t\treturn 84\n+\t} else if x[1]&(1<<21) != 0 {\n+\t\treturn 85\n+\t} else if x[1]&(1<<22) != 0 {\n+\t\treturn 86\n+\t} else if x[1]&(1<<23) != 0 {\n+\t\treturn 87\n+\t} else if x[1]&(1<<24) != 0 {\n+\t\treturn 88\n+\t} else if x[1]&(1<<25) != 0 {\n+\t\treturn 89\n+\t} else if x[1]&(1<<26) != 0 {\n+\t\treturn 90\n+\t} else if x[1]&(1<<27) != 0 {\n+\t\treturn 91\n+\t} else if x[1]&(1<<28) != 0 {\n+\t\treturn 92\n+\t} else if x[1]&(1<<29) != 0 {\n+\t\treturn 93\n+\t} else if x[1]&(1<<30) != 0 {\n+\t\treturn 94\n+\t} else if x[1]&(1<<31) != 0 {\n+\t\treturn 95\n+\t} else if x[1]&(1<<32) != 0 {\n+\t\treturn 96\n+\t} else if x[1]&(1<<33) != 0 {\n+\t\treturn 97\n+\t} else if x[1]&(1<<34) != 0 {\n+\t\treturn 98\n+\t} else if x[1]&(1<<35) != 0 {\n+\t\treturn 99\n+\t} else if x[1]&(1<<36) != 0 {\n+\t\treturn 100\n+\t} else if x[1]&(1<<37) != 0 {\n+\t\treturn 101\n+\t} else if x[1]&(1<<38) != 0 {\n+\t\treturn 102\n+\t} else if x[1]&(1<<39) != 0 {\n+\t\treturn 103\n+\t} else if x[1]&(1<<40) != 0 {\n+\t\treturn 104\n+\t} else if x[1]&(1<<41) != 0 {\n+\t\treturn 105\n+\t} else if x[1]&(1<<42) != 0 {\n+\t\treturn 106\n+\t} else if x[1]&(1<<43) != 0 {\n+\t\treturn 107\n+\t} else if x[1]&(1<<44) != 0 {\n+\t\treturn 108\n+\t} else if x[1]&(1<<45) != 0 {\n+\t\treturn 109\n+\t} else if x[1]&(1<<46) != 0 {\n+\t\treturn 110\n+\t} else if x[1]&(1<<47) != 0 {\n+\t\treturn 111\n+\t} else if x[1]&(1<<48) != 0 {\n+\t\treturn 112\n+\t} else if x[1]&(1<<49) != 0 {\n+\t\treturn 113\n+\t} else if x[1]&(1<<50) != 0 {\n+\t\treturn 114\n+\t} else if x[1]&(1<<51) != 0 {\n+\t\treturn 115\n+\t} else if x[1]&(1<<52) != 0 {\n+\t\treturn 116\n+\t} else if x[1]&(1<<53) != 0 {\n+\t\treturn 117\n+\t} else if x[1]&(1<<54) != 0 {\n+\t\treturn 118\n+\t} else if x[1]&(1<<55) != 0 {\n+\t\treturn 119\n+\t} else if x[1]&(1<<56) != 0 {\n+\t\treturn 120\n+\t} else if x[1]&(1<<57) != 0 {\n+\t\treturn 121\n+\t} else if x[1]&(1<<58) != 0 {\n+\t\treturn 122\n+\t} else if x[1]&(1<<59) != 0 {\n+\t\treturn 123\n+\t} else if x[1]&(1<<60) != 0 {\n+\t\treturn 124\n+\t} else if x[1]&(1<<61) != 0 {\n+\t\treturn 125\n+\t} else if x[1]&(1<<62) != 0 {\n+\t\treturn 126\n+\t} else if x[1]&(1<<63) != 0 {\n+\t\treturn 127\n+\t} else if x[2]&(1<<0) != 0 {\n+\t\treturn 128\n+\t} else if x[2]&(1<<1) != 0 {\n+\t\treturn 129\n+\t} else if x[2]&(1<<2) != 0 {\n+\t\treturn 130\n+\t} else if x[2]&(1<<3) != 0 {\n+\t\treturn 131\n+\t} else if x[2]&(1<<4) != 0 {\n+\t\treturn 132\n+\t} else if x[2]&(1<<5) != 0 {\n+\t\treturn 133\n+\t} else if x[2]&(1<<6) != 0 {\n+\t\treturn 134\n+\t} else if x[2]&(1<<7) != 0 {\n+\t\treturn 135\n+\t} else if x[2]&(1<<8) != 0 {\n+\t\treturn 136\n+\t} else if x[2]&(1<<9) != 0 {\n+\t\treturn 137\n+\t} else if x[2]&(1<<10) != 0 {\n+\t\treturn 138\n+\t} else if x[2]&(1<<11) != 0 {\n+\t\treturn 139\n+\t} else if x[2]&(1<<12) != 0 {\n+\t\treturn 140\n+\t} else if x[2]&(1<<13) != 0 {\n+\t\treturn 141\n+\t} else if x[2]&(1<<14) != 0 {\n+\t\treturn 142\n+\t} else if x[2]&(1<<15) != 0 {\n+\t\treturn 143\n+\t} else if x[2]&(1<<16) != 0 {\n+\t\treturn 144\n+\t} else if x[2]&(1<<17) != 0 {\n+\t\treturn 145\n+\t} else if x[2]&(1<<18) != 0 {\n+\t\treturn 146\n+\t} else if x[2]&(1<<19) != 0 {\n+\t\treturn 147\n+\t} else if x[2]&(1<<20) != 0 {\n+\t\treturn 148\n+\t} else if x[2]&(1<<21) != 0 {\n+\t\treturn 149\n+\t} else if x[2]&(1<<22) != 0 {\n+\t\treturn 150\n+\t} else if x[2]&(1<<23) != 0 {\n+\t\treturn 151\n+\t} else if x[2]&(1<<24) != 0 {\n+\t\treturn 152\n+\t} else if x[2]&(1<<25) != 0 {\n+\t\treturn 153\n+\t} else if x[2]&(1<<26) != 0 {\n+\t\treturn 154\n+\t} else if x[2]&(1<<27) != 0 {\n+\t\treturn 155\n+\t} else if x[2]&(1<<28) != 0 {\n+\t\treturn 156\n+\t} else if x[2]&(1<<29) != 0 {\n+\t\treturn 157\n+\t} else if x[2]&(1<<30) != 0 {\n+\t\treturn 158\n+\t} else if x[2]&(1<<31) != 0 {\n+\t\treturn 159\n+\t} else if x[2]&(1<<32) != 0 {\n+\t\treturn 160\n+\t} else if x[2]&(1<<33) != 0 {\n+\t\treturn 161\n+\t} else if x[2]&(1<<34) != 0 {\n+\t\treturn 162\n+\t} else if x[2]&(1<<35) != 0 {\n+\t\treturn 163\n+\t} else if x[2]&(1<<36) != 0 {\n+\t\treturn 164\n+\t} else if x[2]&(1<<37) != 0 {\n+\t\treturn 165\n+\t} else if x[2]&(1<<38) != 0 {\n+\t\treturn 166\n+\t} else if x[2]&(1<<39) != 0 {\n+\t\treturn 167\n+\t} else if x[2]&(1<<40) != 0 {\n+\t\treturn 168\n+\t} else if x[2]&(1<<41) != 0 {\n+\t\treturn 169\n+\t} else if x[2]&(1<<42) != 0 {\n+\t\treturn 170\n+\t} else if x[2]&(1<<43) != 0 {\n+\t\treturn 171\n+\t} else if x[2]&(1<<44) != 0 {\n+\t\treturn 172\n+\t} else if x[2]&(1<<45) != 0 {\n+\t\treturn 173\n+\t} else if x[2]&(1<<46) != 0 {\n+\t\treturn 174\n+\t} else if x[2]&(1<<47) != 0 {\n+\t\treturn 175\n+\t} else if x[2]&(1<<48) != 0 {\n+\t\treturn 176\n+\t} else if x[2]&(1<<49) != 0 {\n+\t\treturn 177\n+\t} else if x[2]&(1<<50) != 0 {\n+\t\treturn 178\n+\t} else if x[2]&(1<<51) != 0 {\n+\t\treturn 179\n+\t} else if x[2]&(1<<52) != 0 {\n+\t\treturn 180\n+\t} else if x[2]&(1<<53) != 0 {\n+\t\treturn 181\n+\t} else if x[2]&(1<<54) != 0 {\n+\t\treturn 182\n+\t} else if x[2]&(1<<55) != 0 {\n+\t\treturn 183\n+\t} else if x[2]&(1<<56) != 0 {\n+\t\treturn 184\n+\t} else if x[2]&(1<<57) != 0 {\n+\t\treturn 185\n+\t} else if x[2]&(1<<58) != 0 {\n+\t\treturn 186\n+\t} else if x[2]&(1<<59) != 0 {\n+\t\treturn 187\n+\t} else if x[2]&(1<<60) != 0 {\n+\t\treturn 188\n+\t} else if x[2]&(1<<61) != 0 {\n+\t\treturn 189\n+\t} else if x[2]&(1<<62) != 0 {\n+\t\treturn 190\n+\t} else if x[2]&(1<<63) != 0 {\n+\t\treturn 191\n+\t} else if x[3]&(1<<0) != 0 {\n+\t\treturn 192\n+\t} else if x[3]&(1<<1) != 0 {\n+\t\treturn 193\n+\t} else if x[3]&(1<<2) != 0 {\n+\t\treturn 194\n+\t} else if x[3]&(1<<3) != 0 {\n+\t\treturn 195\n+\t} else if x[3]&(1<<4) != 0 {\n+\t\treturn 196\n+\t} else if x[3]&(1<<5) != 0 {\n+\t\treturn 197\n+\t} else if x[3]&(1<<6) != 0 {\n+\t\treturn 198\n+\t} else if x[3]&(1<<7) != 0 {\n+\t\treturn 199\n+\t} else if x[3]&(1<<8) != 0 {\n+\t\treturn 200\n+\t} else if x[3]&(1<<9) != 0 {\n+\t\treturn 201\n+\t} else if x[3]&(1<<10) != 0 {\n+\t\treturn 202\n+\t} else if x[3]&(1<<11) != 0 {\n+\t\treturn 203\n+\t} else if x[3]&(1<<12) != 0 {\n+\t\treturn 204\n+\t} else if x[3]&(1<<13) != 0 {\n+\t\treturn 205\n+\t} else if x[3]&(1<<14) != 0 {\n+\t\treturn 206\n+\t} else if x[3]&(1<<15) != 0 {\n+\t\treturn 207\n+\t} else if x[3]&(1<<16) != 0 {\n+\t\treturn 208\n+\t} else if x[3]&(1<<17) != 0 {\n+\t\treturn 209\n+\t} else if x[3]&(1<<18) != 0 {\n+\t\treturn 210\n+\t} else if x[3]&(1<<19) != 0 {\n+\t\treturn 211\n+\t} else if x[3]&(1<<20) != 0 {\n+\t\treturn 212\n+\t} else if x[3]&(1<<21) != 0 {\n+\t\treturn 213\n+\t} else if x[3]&(1<<22) != 0 {\n+\t\treturn 214\n+\t} else if x[3]&(1<<23) != 0 {\n+\t\treturn 215\n+\t} else if x[3]&(1<<24) != 0 {\n+\t\treturn 216\n+\t} else if x[3]&(1<<25) != 0 {\n+\t\treturn 217\n+\t} else if x[3]&(1<<26) != 0 {\n+\t\treturn 218\n+\t} else if x[3]&(1<<27) != 0 {\n+\t\treturn 219\n+\t} else if x[3]&(1<<28) != 0 {\n+\t\treturn 220\n+\t} else if x[3]&(1<<29) != 0 {\n+\t\treturn 221\n+\t} else if x[3]&(1<<30) != 0 {\n+\t\treturn 222\n+\t} else if x[3]&(1<<31) != 0 {\n+\t\treturn 223\n+\t} else if x[3]&(1<<32) != 0 {\n+\t\treturn 224\n+\t} else if x[3]&(1<<33) != 0 {\n+\t\treturn 225\n+\t} else if x[3]&(1<<34) != 0 {\n+\t\treturn 226\n+\t} else if x[3]&(1<<35) != 0 {\n+\t\treturn 227\n+\t} else if x[3]&(1<<36) != 0 {\n+\t\treturn 228\n+\t} else if x[3]&(1<<37) != 0 {\n+\t\treturn 229\n+\t} else if x[3]&(1<<38) != 0 {\n+\t\treturn 230\n+\t} else if x[3]&(1<<39) != 0 {\n+\t\treturn 231\n+\t} else if x[3]&(1<<40) != 0 {\n+\t\treturn 232\n+\t} else if x[3]&(1<<41) != 0 {\n+\t\treturn 233\n+\t} else if x[3]&(1<<42) != 0 {\n+\t\treturn 234\n+\t} else if x[3]&(1<<43) != 0 {\n+\t\treturn 235\n+\t} else if x[3]&(1<<44) != 0 {\n+\t\treturn 236\n+\t} else if x[3]&(1<<45) != 0 {\n+\t\treturn 237\n+\t} else if x[3]&(1<<46) != 0 {\n+\t\treturn 238\n+\t} else if x[3]&(1<<47) != 0 {\n+\t\treturn 239\n+\t} else if x[3]&(1<<48) != 0 {\n+\t\treturn 240\n+\t} else if x[3]&(1<<49) != 0 {\n+\t\treturn 241\n+\t} else if x[3]&(1<<50) != 0 {\n+\t\treturn 242\n+\t} else if x[3]&(1<<51) != 0 {\n+\t\treturn 243\n+\t} else if x[3]&(1<<52) != 0 {\n+\t\treturn 244\n+\t} else if x[3]&(1<<53) != 0 {\n+\t\treturn 245\n+\t} else if x[3]&(1<<54) != 0 {\n+\t\treturn 246\n+\t} else if x[3]&(1<<55) != 0 {\n+\t\treturn 247\n+\t} else if x[3]&(1<<56) != 0 {\n+\t\treturn 248\n+\t} else if x[3]&(1<<57) != 0 {\n+\t\treturn 249\n+\t} else if x[3]&(1<<58) != 0 {\n+\t\treturn 250\n+\t} else if x[3]&(1<<59) != 0 {\n+\t\treturn 251\n+\t} else if x[3]&(1<<60) != 0 {\n+\t\treturn 252\n+\t} else if x[3]&(1<<61) != 0 {\n+\t\treturn 253\n+\t} else if x[3]&(1<<62) != 0 {\n+\t\treturn 254\n+\t} else if x[3]&(1<<63) != 0 {\n+\t\treturn 255\n+\t}\n+\treturn -1\n+}\n+\n+func main() {\n+\tconst ones = ^uint64(0)\n+\tfor i := 0; i < 256; i++ {\n+\t\tbits := [4]uint64{ones, ones, ones, ones}\n+\n+\t\t// clear bottom i bits\n+\t\tbits[i/64] ^= 1<<(uint(i)&63) - 1\n+\t\tfor j := i/64 - 1; j >= 0; j-- {\n+\t\t\tbits[j] = 0\n+\t\t}\n+\n+\t\tk := test(bits)\n+\t\tif k != i {\n+\t\t\tprint(\"test(bits)=\", k, \" want \", i, \"\\n\")\n+\t\t\tpanic(\"failed\")\n+\t\t}\n+\t}\n+}"}, {"sha": "491ada1d9c4ebf30c881715d00f6215d2babef92", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3552.dir/one.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Fone.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Fone.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Fone.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug434.dir/one.go"}, {"sha": "1366d244d3e91180c3d86c01fee2dfb3998af332", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3552.dir/two.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Ftwo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Ftwo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.dir%2Ftwo.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "previous_filename": "gcc/testsuite/go.test/test/bugs/bug434.dir/two.go"}, {"sha": "a198dbe971f4c3fb168a98c2ccf7fbf32ad8ae8a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3552.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3552.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3552: cross-package inlining misbehaves when\n+// referencing embedded builtins.\n+\n+package ignored"}, {"sha": "64ef38b10d5793377378ace9e886bf509917c517", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3705.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3705.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3705.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3705.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func init() // ERROR \"missing function body|cannot declare init\""}, {"sha": "d7a4a2e8f3cc667ece3858887d36f2a1d6dc3f35", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3783.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3783.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3783.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3783.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,12 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+var i int\n+\n+func (*i) bar() // ERROR \"not a type|expected type\"\n+"}, {"sha": "d4739b21c90013bfac7fd6e32485f47dffd7e796", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3924.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3924.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3924.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3924.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+type mybool bool\n+\n+var x, y = 1, 2\n+var _ mybool = x < y && x < y // ERROR \"cannot use\"\n+var _ mybool = x < y || x < y // ERROR \"cannot use\""}, {"sha": "a62d4392e6ff66c7198d6d9cec4bca84d370c361", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue3925.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3925.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3925.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue3925.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,23 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 3925: wrong line number for error message \"missing key in map literal\"\n+\n+// also a test for correct line number in other malformed composite literals.\n+\n+package foo\n+\n+var _ = map[string]string{\n+\t\"1\": \"2\",\n+\t\"3\", \"4\", // ERROR \"missing key|must have keys\"\n+}\n+\n+var _ = []string{\n+\t\"foo\",\n+\t\"bar\",\n+\t20, // ERROR \"cannot use|incompatible type\"\n+}\n+"}, {"sha": "19cfe6651a7f352667579f05eaee8b598b588cfb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4066.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4066.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4066.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4066.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 4066: return values not being spilled eagerly enough\n+\n+package main\n+\n+func main() {\n+\tn := foo()\n+\tif n != 2 {\n+\t\tprintln(n)\n+\t\tpanic(\"wrong return value\")\n+\t}\n+}\n+\n+type terr struct{}\n+\n+func foo() (val int) {\n+\tval = 0\n+\tdefer func() {\n+\t\tif x := recover(); x != nil {\n+\t\t\t_ = x.(terr)\n+\t\t}\n+\t}()\n+\tfor {\n+\t\tval = 2\n+\t\tfoo1()\n+\t}\n+\tpanic(\"unreachable\")\n+}\n+\n+func foo1() {\n+\tpanic(terr{})\n+}"}, {"sha": "1d8e57cb7c70f9c4b47bb0570c6dd98ad5f416eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4085a.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085a.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,18 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type T []int\n+\n+func main() {\n+\t_ = make(T, -1)       // ERROR \"negative\"\n+\t_ = make(T, 0.5)       // ERROR \"constant 0.5 truncated to integer|non-integer\"\n+\t_ = make(T, 1.0)       // ok\n+\t_ = make(T, 1<<63)  // ERROR \"len argument too large\"\n+\t_ = make(T, 0, -1)    // ERROR \"negative cap\"\n+\t_ = make(T, 10, 0) // ERROR \"len larger than cap\"\n+}"}, {"sha": "63aca2378eed99d6e61964aa27c32cff21399883", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4085b.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4085b.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,49 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"strings\"\n+\t\"unsafe\"\n+)\n+\n+type T []int\n+\n+func main() {\n+\tn := -1\n+\tshouldPanic(\"len out of range\", func() {_ = make(T, n)})\n+\tshouldPanic(\"cap out of range\", func() {_ = make(T, 0, n)})\n+\tvar t *byte\n+\tif unsafe.Sizeof(t) == 8 {\n+\t\tn = 1<<20\n+\t\tn <<= 20\n+\t\tshouldPanic(\"len out of range\", func() {_ = make(T, n)})\n+\t\tshouldPanic(\"cap out of range\", func() {_ = make(T, 0, n)})\n+\t\tn <<= 20\n+\t\tshouldPanic(\"len out of range\", func() {_ = make(T, n)})\n+\t\tshouldPanic(\"cap out of range\", func() {_ = make(T, 0, n)})\n+\t} else {\n+\t\tn = 1<<31 - 1\n+\t\tshouldPanic(\"len out of range\", func() {_ = make(T, n)})\n+\t\tshouldPanic(\"cap out of range\", func() {_ = make(T, 0, n)})\n+\t}\n+}\n+\n+func shouldPanic(str string, f func()) {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tpanic(\"did not panic\")\n+\t\t}\n+\t\ts := err.(error).Error()\n+\t\tif !strings.Contains(s, str) {\n+\t\t\tpanic(\"got panic \" + s + \", want \" + str)\n+\t\t}\n+\t}()\n+\t\n+\tf()\n+}"}, {"sha": "c2b7d9b4fbf5fbb1c67a5d20970ca6e00bd23edb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4097.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4097.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4097.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4097.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+var s [][10]int\n+const m = len(s[len(s)-1]) // ERROR \"is not a constant|is not constant\" \n+"}, {"sha": "89392bfff1d4b1cc09a1084aa07eebed51e7f136", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4099.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4099.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4099.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4099.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,26 @@\n+// errorcheck -0 -m\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check go:noescape annotations.\n+\n+package p\n+\n+// The noescape comment only applies to the next func,\n+// which must not have a body.\n+\n+//go:noescape\n+\n+func F1([]byte)\n+\n+func F2([]byte)\n+\n+func G() {\n+\tvar buf1 [10]byte\n+\tF1(buf1[:]) // ERROR \"buf1 does not escape\"\n+\t\n+\tvar buf2 [10]byte // ERROR \"moved to heap: buf2\"\n+\tF2(buf2[:]) // ERROR \"buf2 escapes to heap\"\n+}"}, {"sha": "c2a8338c705dd3c3ebed6f7afaa24725c0e31d2a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4162.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4162.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4162.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4162.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// compile\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4162. Trailing commas now allowed in conversions.\n+\n+package p\n+\n+// All these are valid now.\n+var (\n+\t_ = int(1.0,)      // comma was always permitted (like function call)\n+\t_ = []byte(\"foo\",) // was syntax error: unexpected comma\n+\t_ = chan int(nil,) // was syntax error: unexpected comma\n+\t_ = (func())(nil,) // was syntax error: unexpected comma\n+)"}, {"sha": "4e353312b879087a2e75a904767e3a89755bf975", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4167.go", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4167.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4167.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4167.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,50 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4167: inlining of a (*T).Method expression taking\n+// its arguments from a multiple return breaks the compiler.\n+\n+package main\n+\n+type pa []int\n+\n+type p int\n+\n+func (this *pa) func1() (v *p, c int) {\n+\tfor _ = range *this {\n+\t\tc++\n+\t}\n+\tv = (*p)(&c)\n+\treturn\n+}\n+\n+func (this *pa) func2() p {\n+\treturn (*p).func3(this.func1())\n+}\n+\n+func (this *p) func3(f int) p {\n+\treturn *this\n+}\n+\n+func (this *pa) func2dots() p {\n+\treturn (*p).func3(this.func1())\n+}\n+\n+func (this *p) func3dots(f ...int) p {\n+\treturn *this\n+}\n+\n+func main() {\n+\tarr := make(pa, 13)\n+\tlength := arr.func2()\n+\tif int(length) != len(arr) {\n+\t\tpanic(\"length != len(arr)\")\n+\t}\n+\tlength = arr.func2dots()\n+\tif int(length) != len(arr) {\n+\t\tpanic(\"length != len(arr)\")\n+\t}\n+}"}, {"sha": "e5daa656235e715d60c5778049ebb249ac812f80", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4232.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4232.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4232.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4232.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,33 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func f() {\n+\tvar a [10]int\n+\t_ = a[-1]  // ERROR \"invalid array index -1|index out of bounds\"\n+\t_ = a[-1:] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = a[:-1] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = a[10]  // ERROR \"invalid array index 10|index out of bounds\"\n+\n+\tvar s []int\n+\t_ = s[-1]  // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = s[-1:] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = s[:-1] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = s[10]\n+\n+\tconst c = \"foo\"\n+\t_ = c[-1]  // ERROR \"invalid string index -1|index out of bounds\"\n+\t_ = c[-1:] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = c[:-1] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = c[3]   // ERROR \"invalid string index 3|index out of bounds\"\n+\n+\tvar t string\n+\t_ = t[-1]  // ERROR \"invalid string index -1|index out of bounds\"\n+\t_ = t[-1:] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = t[:-1] // ERROR \"invalid slice index -1|index out of bounds\"\n+\t_ = t[3]\n+}"}, {"sha": "a14e0896a4766f11020ba8694f8681d0b01fdd2f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4251.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4251.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4251.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4251.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,21 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4251: slice with inverted range is an error.\n+\n+package p\n+\n+func F1(s []byte) []byte {\n+\treturn s[2:1]\t\t// ERROR \"inverted\"\n+}\n+\n+func F2(a [10]byte) []byte {\n+\treturn a[2:1]\t\t// ERROR \"inverted\"\n+}\n+\n+func F3(s string) string {\n+\treturn s[2:1]\t\t// ERROR \"inverted\"\n+}"}, {"sha": "089b6f20f42c0dbc71ffd7255508ba56bf691dcc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4252.dir/a.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// A package that redeclares common builtin names.\n+package a\n+\n+var true = 0 == 1\n+var false = 0 == 0\n+var nil = 1\n+\n+const append = 42\n+\n+type error bool\n+type int interface{}\n+\n+func len(interface{}) int32 { return 42 }\n+\n+func Test() {\n+\tvar array [append]int\n+\tif true {\n+\t\tpanic(\"unexpected builtin true instead of redeclared one\")\n+\t}\n+\tif !false {\n+\t\tpanic(\"unexpected builtin false instead of redeclared one\")\n+\t}\n+\tif len(array) != 42 {\n+\t\tprintln(len(array))\n+\t\tpanic(\"unexpected call of builtin len\")\n+\t}\n+}\n+\n+func InlinedFakeTrue() error  { return error(true) }\n+func InlinedFakeFalse() error { return error(false) }\n+func InlinedFakeNil() int     { return nil }"}, {"sha": "28e434224789cc0605a77ff327f82b4f924cd180", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4252.dir/main.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\tif a.InlinedFakeTrue() {\n+\t\tpanic(\"returned true was the real one\")\n+\t}\n+\tif !a.InlinedFakeFalse() {\n+\t\tpanic(\"returned false was the real one\")\n+\t}\n+\tif a.InlinedFakeNil() == nil {\n+\t\tpanic(\"returned nil was the real one\")\n+\t}\n+\ta.Test()\n+}"}, {"sha": "1b0e5b2028926dc84d70b84d0d800f998e905591", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4252.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4252.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+// rundir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4252: tests that fixing the issue still allow\n+// builtins to be redeclared and are not corrupted\n+// in export data.\n+\n+package ignored"}, {"sha": "627393211ee8c9c5edfcc9cdc0762127363c8337", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4264.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4264.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4264.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4264.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 4264: reject int division by const 0\n+\n+package main\n+\n+func main() {\n+\tvar x int\n+\tvar y float64\n+\tvar z complex128\n+\n+\tprintln(x/0) // ERROR \"division by zero\"\n+\tprintln(y/0)\n+\tprintln(z/0)\n+}\n\\ No newline at end of file"}, {"sha": "128c87231ab6b99cb71a4061d26a813b0ed5087b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4283.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4283.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4283.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4283.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4283: nil == nil can't be done as the type is unknown.\n+\n+package p\n+\n+func F1() bool {\n+\treturn nil == nil\t// ERROR \"invalid\"\n+}\n+\n+func F2() bool {\n+\treturn nil != nil\t// ERROR \"invalid\"\n+}"}, {"sha": "b2f69dbfa419991a64848924ecbd0fd2b9804270", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4313.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4313.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4313.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4313.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,28 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Order of operations in select.\n+\n+package main\n+\n+func main() {\n+\tc := make(chan int, 1)\n+\tx := 0\n+\tselect {\n+\tcase c <- x: // should see x = 0, not x = 42 (after makec)\n+\tcase <-makec(&x): // should be evaluated only after c and x on previous line\n+\t}\n+\ty := <-c\n+\tif y != 0 {\n+\t\tpanic(y)\n+\t}\n+}\n+\n+func makec(px *int) chan bool {\n+\tif false { for {} }\n+\t*px = 42\n+\treturn make(chan bool, 0)\n+}"}, {"sha": "bb18a0896242ee6072bc8d3448a385eb0724a927", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4316.go", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4316.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4316.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4316.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,64 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4316: the stack overflow check in the linker\n+// is confused when it encounters a split-stack function\n+// that needs 0 bytes of stack space.\n+\n+package main\n+\n+type Peano *Peano\n+\n+func makePeano(n int) *Peano {\n+\tif n == 0 {\n+\t\treturn nil\n+\t}\n+\tp := Peano(makePeano(n - 1))\n+\treturn &p\n+}\n+\n+var countArg Peano\n+var countResult int\n+\n+func countPeano() {\n+\tif countArg == nil {\n+\t\tcountResult = 0\n+\t\treturn\n+\t}\n+\tcountArg = *countArg\n+\tcountPeano()\n+\tcountResult++\n+}\n+\n+var s = \"(())\"\n+var pT = 0\n+\n+func p() {\n+\tif pT >= len(s) {\n+\t\treturn\n+\t}\n+\tif s[pT] == '(' {\n+\t\tpT += 1\n+\t\tp()\n+\t\tif pT < len(s) && s[pT] == ')' {\n+\t\t\tpT += 1\n+\t\t} else {\n+\t\t\treturn\n+\t\t}\n+\t\tp()\n+\t}\n+}\n+\n+func main() {\n+\tcountArg = makePeano(4096)\n+\tcountPeano()\n+\tif countResult != 4096 {\n+\t\tprintln(\"countResult =\", countResult)\n+\t\tpanic(\"countResult != 4096\")\n+\t}\n+\n+\tp()\n+}"}, {"sha": "6bb78f43cf8ea80bcfc0df96d5d0be29bf57b19f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4323.go", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4323.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4323.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4323.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,31 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4323: inlining of functions with local variables\n+// forgets to typecheck the declarations in the inlined copy.\n+\n+package main\n+\n+type reader struct {\n+\tC chan T\n+}\n+\n+type T struct{ C chan []byte }\n+\n+var r = newReader()\n+\n+func newReader() *reader { return new(reader) }\n+\n+func (r *reader) Read(n int) ([]byte, error) {\n+\treq := T{C: make(chan []byte)}\n+\tr.C <- req\n+\treturn <-req.C, nil\n+}\n+\n+func main() {\n+\ts, err := r.Read(1)\n+\t_, _ = s, err\n+}"}, {"sha": "ab214befb4b82845b816c657e0581b416e0cb931", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.dir/p1.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,12 @@\n+package p1\n+\n+type O map[string]map[string]string\n+\n+func (opts O) RemoveOption(sect, opt string) bool {\n+\tif _, ok := opts[sect]; !ok {\n+\t\treturn false\n+\t}\n+\t_, ok := opts[sect][opt]\n+\tdelete(opts[sect], opt)\n+\treturn ok\n+}"}, {"sha": "8e86266dd8d4adb2f8aec9218b26c7595cfcabec", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.dir/p2.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fp2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,5 @@\n+package p2\n+\n+import \"./p1\"\n+\n+func NewO() p1.O { return nil }"}, {"sha": "f118eb09252a48c51942b1f602d637620afd1a12", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.dir/q1.go", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,8 @@\n+package q1\n+\n+func Deref(typ interface{}) interface{} {\n+      if typ, ok := typ.(*int); ok {\n+            return *typ\n+      }\n+      return typ\n+}"}, {"sha": "075e2b21e7a438ca7a7eccfedf1ad06e0275c1d8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.dir/q2.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fq2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+package main\n+\n+import \"./q1\"\n+\n+func main() {\n+      x := 1\n+      y := q1.Deref(&x)\n+      if y != 1 {\n+            panic(\"y != 1\")\n+      }\n+}"}, {"sha": "9b222e8b40276754272f39fadaf75b0f0d30d77b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.dir/z.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fz.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fz.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.dir%2Fz.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+package z\n+\n+import \"./p2\"\n+\n+func main() {\n+\tp2.NewO().RemoveOption(\"hello\", \"world\")\n+}"}, {"sha": "5ce2eea26617d64baf7f80e508eb2d8223d27efb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4326.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4326.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Printing local variables in inliner shadows global names.\n+\n+package ignored"}, {"sha": "3dac8f7685c11969ae727cf7ceedbe42afd94695", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4348.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4348.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4348.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4348.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,29 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4348. After switch to 64-bit ints the compiler generates\n+// illegal instructions when using large array bounds or indexes.\n+\n+package main\n+\n+// 1<<32 on a 64-bit machine, 1 otherwise.\n+const LARGE = ^uint(0)>>32 + 1\n+\n+func A() int {\n+\tvar a []int\n+\treturn a[LARGE]\n+}\n+\n+var b [LARGE]int\n+\n+func B(i int) int {\n+\treturn b[i]\n+}\n+\n+func main() {\n+\tn := A()\n+\tB(n)\n+}"}, {"sha": "defe7c324c20bf344d49b080acb57d920d59e450", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4353.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4353.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4353.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4353.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,19 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4353. An optimizer bug in 8g triggers a runtime fault\n+// instead of an out of bounds panic.\n+\n+package main\n+\n+var aib [100000]int\n+var paib *[100000]int = &aib\n+var i64 int64 = 100023\n+\n+func main() {\n+\tdefer func() { recover() }()\n+\t_ = paib[i64]\n+}"}, {"sha": "b5adb4010b84e417ee88f8922ccde9b0dc96f1cb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4359.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4359.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4359.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4359.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4359: wrong handling of broken struct fields\n+// causes \"internal compiler error: lookdot badwidth\".\n+\n+package main\n+\n+type T struct {\n+\tx T1 // ERROR \"undefined\"\n+}\n+\n+func f() {\n+\tvar t *T\n+\t_ = t.x\n+}"}, {"sha": "d732c8b363e1a4c18b7dbcdf8865c1037e004e96", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4370.dir/p1.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p1\n+\n+type Magic int\n+\n+type T struct {\n+\tx interface{}\n+}\n+\n+func (t *T) M() bool {\n+\t_, ok := t.x.(Magic)\n+\treturn ok\n+}\n+\n+func F(t *T) {\n+\tprintln(t)\n+}"}, {"sha": "33370d07a4e197ff1124699b37c6b7ba39ee6a76", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4370.dir/p2.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p2\n+\n+import \"./p1\"\n+\n+type T struct {\n+\tp1.T\n+}\n+\n+func F() {\n+\tvar t T\n+\tp1.F(&t.T)\n+}"}, {"sha": "13c996bc22983c7b176886a6af2ea26bc194e8c7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4370.dir/p3.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.dir%2Fp3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p3\n+\n+import \"./p2\"\n+\n+func F() {\n+\tp2.F()\n+\tvar t p2.T\n+\tprintln(t.T.M())\n+}"}, {"sha": "76b47e1a6d56d8b4b3ff495f61f797c7c04f0c78", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4370.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4370.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Re-exporting inlined function bodies missed types in x, ok := v.(Type)\n+\n+package ignored"}, {"sha": "11ae1f7c6c6dcdbbf8cf4633664751a46b07bef0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4396a.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396a.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4396. Arrays of bytes are not required to be\n+// word aligned. 5g should use MOVB to load the address\n+// of s.g[0] for its nil check.\n+//\n+// This test _may_ fail on arm, but requires the host to \n+// trap unaligned loads. This is generally done with\n+//\n+// echo \"4\" > /proc/cpu/alignment\n+\n+package main\n+\n+var s = struct {\n+\t// based on lzw.decoder\n+\ta, b, c, d, e uint16\n+\tf             [4096]uint8\n+\tg             [4096]uint8\n+}{}\n+\n+func main() {\n+\ts.g[0] = 1\n+}"}, {"sha": "d0bf28fac28eada358829a6b9c26c3b2810cfdf5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4396b.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4396b.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This test _may_ fail on arm, but requires the host to\n+// trap unaligned loads. This is generally done with\n+//\n+// echo \"4\" > /proc/cpu/alignment\n+\n+package main\n+\n+type T struct {\n+\tU uint16\n+\tV T2\n+}\n+\n+type T2 struct {\n+\tpad    [4096]byte\n+\tA, B byte\n+}\n+\n+var s, t = new(T), new(T)\n+\n+func main() {\n+\tvar u, v *T2 = &s.V, &t.V\n+\tu.B = v.B\n+}"}, {"sha": "6674db9ec309e271f6c913b329253a2c0762030f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4399.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4399.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4399.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4399.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4399: 8g would print \"gins LEAQ nil *A\".\n+\n+package main\n+\n+type A struct{ a int }\n+\n+func main() {\n+\tprintln(((*A)(nil)).a)\n+}"}, {"sha": "b8458d77647b7bb9c9d6736e252a03a720ef3148", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4405.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4405.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4405.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4405.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+const (\n+\t_ = iota\n+\t_\u0007 // ERROR \"illegal character|invalid character\"\n+\t_\b  // ERROR \"illegal character|invalid character\"\n+\t_\u000b  // ERROR \"illegal character|invalid character\"\n+\t_\f  // ERROR \"illegal character|invalid character\"\n+)"}, {"sha": "6822760ef8cc87594017ab557fb95270901100be", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4429.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4429.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4429.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4429.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type a struct {\n+  a int\n+}\n+\n+func main() {\n+  av := a{};\n+  _ = *a(av); // ERROR \"invalid indirect|expected pointer\"\n+}"}, {"sha": "fa1d9fe49d3e2d7a3c6e66df781f5ac3c4b2b04c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4448.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4448.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4448.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4448.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4448: 64-bit indices that are statically known\n+// to be bounded make 5g and 8g generate a dangling branch.\n+\n+package main\n+\n+const b26 uint64 = 0x022fdd63cc95386d\n+\n+var bitPos [64]int\n+\n+func init() {\n+\tfor p := uint(0); p < 64; p++ {\n+\t\tbitPos[b26<<p>>58] = int(p)\n+\t}\n+}\n+\n+func MinPos(w uint64) int {\n+\tif w == 0 {\n+\t\tpanic(\"bit: MinPos(0) undefined\")\n+\t}\n+\treturn bitPos[((w&-w)*b26)>>58]\n+}\n+\n+func main() {\n+\tconst one = uint64(1)\n+\tfor i := 0; i < 64; i++ {\n+\t\tif MinPos(1<<uint(i)) != i {\n+\t\t\tprintln(\"i =\", i)\n+\t\t\tpanic(\"MinPos(1<<uint(i)) != i\")\n+\t\t}\n+\t}\n+}"}, {"sha": "54dd214d69f29516acd36dd0a4efc8f8f1426342", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4452.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4452.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4452.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4452.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4452. Used to print many errors, now just one.\n+\n+package main\n+\n+func main() {\n+\t_ = [...]int(4) // ERROR \"\\[\\.\\.\\.\\].*outside of array literal\"\n+}"}, {"sha": "820f18cb8d7853baf283d055b5b614274465dc69", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4458.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4458.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4458.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4458.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4458: gc accepts invalid method expressions\n+// like (**T).Method.\n+\n+package main\n+\n+type T struct{}\n+\n+func (T) foo() {}\n+\n+func main() {\n+\tav := T{}\n+\tpav := &av\n+\t(**T).foo(&pav) // ERROR \"no method foo|requires named type or pointer to named\"\n+}"}, {"sha": "70977ceb78271cdb5a4e7e43bf909787ccb47693", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4463.go", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4463.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4463.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4463.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,87 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4463: test builtin functions in statement context and in\n+// go/defer functions.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+func F() {\n+\tvar a []int\n+\tvar c chan int\n+\tvar m map[int]int\n+\tvar s struct{ f int }\n+\n+\tappend(a, 0)\t\t\t// ERROR \"not used\"\n+\tcap(a)\t\t\t\t// ERROR \"not used\"\n+\tcomplex(1, 2)\t\t\t// ERROR \"not used\"\n+\timag(1i)\t\t\t// ERROR \"not used\"\n+\tlen(a)\t\t\t\t// ERROR \"not used\"\n+\tmake([]int, 10)\t\t\t// ERROR \"not used\"\n+\tnew(int)\t\t\t// ERROR \"not used\"\n+\treal(1i)\t\t\t// ERROR \"not used\"\n+\tunsafe.Alignof(a)\t\t// ERROR \"not used\"\n+\tunsafe.Offsetof(s.f)\t\t// ERROR \"not used\"\n+\tunsafe.Sizeof(a)\t\t// ERROR \"not used\"\n+\n+\tclose(c)\n+\tcopy(a, a)\n+\tdelete(m, 0)\n+\tpanic(0)\n+\tprint(\"foo\")\n+\tprintln(\"bar\")\n+\trecover()\n+\n+\t(close(c))\n+\t(copy(a, a))\n+\t(delete(m, 0))\n+\t(panic(0))\n+\t(print(\"foo\"))\n+\t(println(\"bar\"))\n+\t(recover())\n+\n+\tgo append(a, 0)\t\t\t// ERROR \"not used|discards result\"\n+\tgo cap(a)\t\t\t// ERROR \"not used|discards result\"\n+\tgo complex(1, 2)\t\t// ERROR \"not used|discards result\"\n+\tgo imag(1i)\t\t\t// ERROR \"not used|discards result\"\n+\tgo len(a)\t\t\t// ERROR \"not used|discards result\"\n+\tgo make([]int, 10)\t\t// ERROR \"not used|discards result\"\n+\tgo new(int)\t\t\t// ERROR \"not used|discards result\"\n+\tgo real(1i)\t\t\t// ERROR \"not used|discards result\"\n+\tgo unsafe.Alignof(a)\t\t// ERROR \"not used|discards result\"\n+\tgo unsafe.Offsetof(s.f)\t\t// ERROR \"not used|discards result\"\n+\tgo unsafe.Sizeof(a)\t\t// ERROR \"not used|discards result\"\n+\n+\tgo close(c)\n+\tgo copy(a, a)\n+\tgo delete(m, 0)\n+\tgo panic(0)\n+\tgo print(\"foo\")\n+\tgo println(\"bar\")\n+\tgo recover()\n+\n+\tdefer append(a, 0)\t\t// ERROR \"not used|discards result\"\n+\tdefer cap(a)\t\t\t// ERROR \"not used|discards result\"\n+\tdefer complex(1, 2)\t\t// ERROR \"not used|discards result\"\n+\tdefer imag(1i)\t\t\t// ERROR \"not used|discards result\"\n+\tdefer len(a)\t\t\t// ERROR \"not used|discards result\"\n+\tdefer make([]int, 10)\t\t// ERROR \"not used|discards result\"\n+\tdefer new(int)\t\t\t// ERROR \"not used|discards result\"\n+\tdefer real(1i)\t\t\t// ERROR \"not used|discards result\"\n+\tdefer unsafe.Alignof(a)\t\t// ERROR \"not used|discards result\"\n+\tdefer unsafe.Offsetof(s.f)\t// ERROR \"not used|discards result\"\n+\tdefer unsafe.Sizeof(a)\t\t// ERROR \"not used|discards result\"\n+\n+\tdefer close(c)\n+\tdefer copy(a, a)\n+\tdefer delete(m, 0)\n+\tdefer panic(0)\n+\tdefer print(\"foo\")\n+\tdefer println(\"bar\")\n+\tdefer recover()\n+}"}, {"sha": "ef0b46bcf6829ba8c8aa517a5b57c134473b5510", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4468.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4468.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4468.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4468.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,28 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4468: go/defer calls may not be parenthesized.\n+\n+package p\n+\n+type T int\n+\n+func (t *T) F() T {\n+\treturn *t\n+}\n+\n+type S struct {\n+\tt T\n+}\n+\n+func F() {\n+\tgo (F())\t// ERROR \"must be function call\"\n+\tdefer (F())\t// ERROR \"must be function call\"\n+\tvar s S\n+\t(&s.t).F()\n+\tgo (&s.t).F()\n+\tdefer (&s.t).F()\n+}"}, {"sha": "5ed09ca554bda8d26be28e56830d74a3c3784c1d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4470.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4470.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4470.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4470.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4470: parens are not allowed around .(type) \"expressions\"\n+\n+package main\n+\n+func main() {\n+\tvar i interface{}\n+\tswitch (i.(type)) { // ERROR \"outside type switch\"\n+\tdefault:\n+\t}\n+}"}, {"sha": "7ec1134d7b69f08e1d139170c64eefe84f8847a6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4495.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4495.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4495.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4495.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type I interface {\n+\tm() int\n+}\n+\n+type T struct{}\n+\n+func (T) m() int {\n+\treturn 3\n+}\n+\n+var t T\n+\n+var ret = I.m(t)\n+\n+func main() {\n+\tif ret != 3 {\n+\t\tprintln(\"ret = \", ret)\n+\t\tpanic(\"ret != 3\")\n+\t}\n+}\n+"}, {"sha": "7e2cffa5dd8af79218f9eee978cd34cc773fb1a7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4510.dir/f1.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+import \"fmt\" // ERROR \"fmt redeclared|imported\"\n+\n+var _ = fmt.Printf"}, {"sha": "895fc342ba139f9ad64e53a769b713794d84a70a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4510.dir/f2.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.dir%2Ff2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+func fmt() {}"}, {"sha": "003f9e8e1635adc748ab3d0ffa649b128b12593d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4510.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4510.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// errorcheckdir\n+\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "a1b6b57e9742359d6adf12306aff63fd05d66f82", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4517a.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517a.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var init = 1 // ERROR \"cannot declare init - must be func\""}, {"sha": "f04103ff5b2c592664b3d77d17842322f8e27e04", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4517b.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517b.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+const init = 1 // ERROR \"cannot declare init - must be func\""}, {"sha": "47b21cf4084e50fc27909aec0a0a5d389e20f2f7", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4517c.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517c.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517c.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4517c.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type init byte // ERROR \"cannot declare init - must be func\""}, {"sha": "e64b069bb9915d6cc65279b5290177300f604f93", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4518.go", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4518.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4518.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4518.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,67 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4518. In some circumstances \"return F(...)\"\n+// where F has multiple returns is miscompiled by 6g due to\n+// bold assumptions in componentgen.\n+\n+package main\n+\n+func DontInline() {}\n+\n+func F(e interface{}) (int, int) {\n+\tDontInline()\n+\treturn 3, 7\n+}\n+\n+func G() (int, int) {\n+\tDontInline()\n+\treturn 3, 7\n+}\n+\n+func bogus1(d interface{}) (int, int) {\n+\tswitch {\n+\tdefault:\n+\t\treturn F(d)\n+\t}\n+\treturn 0, 0\n+}\n+\n+func bogus2() (int, int) {\n+\tswitch {\n+\tdefault:\n+\t\treturn F(3)\n+\t}\n+\treturn 0, 0\n+}\n+\n+func bogus3(d interface{}) (int, int) {\n+\tswitch {\n+\tdefault:\n+\t\treturn G()\n+\t}\n+\treturn 0, 0\n+}\n+\n+func bogus4() (int, int) {\n+\tswitch {\n+\tdefault:\n+\t\treturn G()\n+\t}\n+\treturn 0, 0\n+}\n+\n+func check(a, b int) {\n+\tif a != 3 || b != 7 {\n+\t\tprintln(a, b)\n+\t\tpanic(\"a != 3 || b != 7\")\n+\t}\n+}\n+\n+func main() {\n+\tcheck(bogus1(42))\n+\tcheck(bogus2())\n+}"}, {"sha": "4f37e7c36b6fc646c8234724740492c28455fe76", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4529.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4529.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4529.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4529.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,33 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4529: escape analysis crashes on \"go f(g())\"\n+// when g has multiple returns.\n+\n+package main\n+\n+type M interface{}\n+\n+type A struct {\n+\ta string\n+\tb chan M\n+}\n+\n+func (a *A) I() (b <-chan M, c chan<- M) {\n+\ta.b, c = make(chan M), make(chan M)\n+\tb = a.b\n+\n+\treturn\n+}\n+\n+func Init(a string, b *A, c interface {\n+\tI() (<-chan M, chan<- M)\n+}) {\n+\tb.a = a\n+\tgo b.c(c.I())\n+}\n+\n+func (a *A) c(b <-chan M, _ chan<- M) {}"}, {"sha": "c37ccef7cbf7840f079bfd72228dd9de9016d130", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4545.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4545.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4545.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4545.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,19 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4545: untyped constants are incorrectly coerced\n+// to concrete types when used in interface{} context.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tvar s uint\n+\tfmt.Println(1.0 + 1<<s) // ERROR \"invalid operation|non-integer type|incompatible type\"\n+\tx := 1.0 + 1<<s         // ERROR \"invalid operation|non-integer type\"\n+\t_ = x\n+}"}, {"sha": "29d98b0283d9bcad9845c6fc9e1d6608879420c0", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4562.go", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4562.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4562.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4562.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,49 @@\n+// run\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+\t\"strings\"\n+)\n+\n+type T struct {\n+\tval int\n+}\n+\n+func main() {\n+\tdefer expectError(22)\n+\tvar pT *T\n+\tswitch pT.val { // error should be here - line 22\n+\tcase 0:\n+\t\tfmt.Println(\"0\")\n+\tcase 1: // used to show up here instead\n+\t\tfmt.Println(\"1\")\n+\tcase 2:\n+\t\tfmt.Println(\"2\")\n+\t}\n+\tfmt.Println(\"finished\")\n+}\n+\n+func expectError(expectLine int) {\n+\tif recover() == nil {\n+\t\tpanic(\"did not crash\")\n+\t}\n+\tfor i := 1;; i++ {\n+\t\t_, file, line, ok := runtime.Caller(i)\n+\t\tif !ok {\n+\t\t\tpanic(\"cannot find issue4562.go on stack\")\n+\t\t}\n+\t\tif strings.HasSuffix(file, \"issue4562.go\") {\n+\t\t\tif line != expectLine {\n+\t\t\t\tpanic(fmt.Sprintf(\"crashed at line %d, wanted line %d\", line, expectLine))\n+\t\t\t}\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}"}, {"sha": "ad1242d1e5f25627ecb779647e2fd973bce6f29a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4585.go", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4585.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4585.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4585.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,151 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4585: comparisons and hashes process blank\n+// fields and padding in structs.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+// T is a structure with padding.\n+type T struct {\n+\tA     int16\n+\tB     int64\n+\tC     int16\n+\tD     int64\n+\tDummy [64]byte\n+}\n+\n+// U is a structure with a blank field\n+type U struct {\n+\tA, _, B int\n+\tDummy   [64]byte\n+}\n+\n+// USmall is like U but the frontend will inline comparison\n+// instead of calling the generated eq function.\n+type USmall struct {\n+\tA, _, B int32\n+}\n+\n+// V has padding but not on the first field.\n+type V struct {\n+\tA1, A2, A3 int32\n+\tB          int16\n+\tC          int32\n+}\n+\n+// W has padding at the end.\n+type W struct {\n+\tA1, A2, A3 int32\n+\tB          int32\n+\tC          int8\n+}\n+\n+func test1() {\n+\tvar a, b U\n+\tm := make(map[U]int)\n+\tcopy((*[16]byte)(unsafe.Pointer(&a))[:], \"hello world!\")\n+\ta.A, a.B = 1, 2\n+\tb.A, b.B = 1, 2\n+\tif a != b {\n+\t\tpanic(\"broken equality: a != b\")\n+\t}\n+\n+\tm[a] = 1\n+\tm[b] = 2\n+\tif len(m) == 2 {\n+\t\tpanic(\"broken hash: len(m) == 2\")\n+\t}\n+\tif m[a] != 2 {\n+\t\tpanic(\"m[a] != 2\")\n+\t}\n+}\n+\n+func test2() {\n+\tvar a, b T\n+\tm := make(map[T]int)\n+\n+\tcopy((*[16]byte)(unsafe.Pointer(&a))[:], \"hello world!\")\n+\ta.A, a.B, a.C, a.D = 1, 2, 3, 4\n+\tb.A, b.B, b.C, b.D = 1, 2, 3, 4\n+\n+\tif a != b {\n+\t\tpanic(\"broken equality: a != b\")\n+\t}\n+\n+\tm[a] = 1\n+\tm[b] = 2\n+\tif len(m) == 2 {\n+\t\tpanic(\"broken hash: len(m) == 2\")\n+\t}\n+\tif m[a] != 2 {\n+\t\tpanic(\"m[a] != 2\")\n+\t}\n+}\n+\n+func test3() {\n+\tvar a, b USmall\n+\tcopy((*[12]byte)(unsafe.Pointer(&a))[:], \"hello world!\")\n+\ta.A, a.B = 1, 2\n+\tb.A, b.B = 1, 2\n+\tif a != b {\n+\t\tpanic(\"broken equality: a != b\")\n+\t}\n+}\n+\n+func test4() {\n+\tvar a, b V\n+\tm := make(map[V]int)\n+\n+\tcopy((*[20]byte)(unsafe.Pointer(&a))[:], \"Hello World, Gopher!\")\n+\ta.A1, a.A2, a.A3, a.B, a.C = 1, 2, 3, 4, 5\n+\tb.A1, b.A2, b.A3, b.B, b.C = 1, 2, 3, 4, 5\n+\n+\tif a != b {\n+\t\tpanic(\"broken equality: a != b\")\n+\t}\n+\n+\tm[a] = 1\n+\tm[b] = 2\n+\tif len(m) == 2 {\n+\t\tpanic(\"broken hash: len(m) == 2\")\n+\t}\n+\tif m[a] != 2 {\n+\t\tpanic(\"m[a] != 2\")\n+\t}\n+}\n+\n+func test5() {\n+\tvar a, b W\n+\tm := make(map[W]int)\n+\n+\tcopy((*[20]byte)(unsafe.Pointer(&a))[:], \"Hello World, Gopher!\")\n+\ta.A1, a.A2, a.A3, a.B, a.C = 1, 2, 3, 4, 5\n+\tb.A1, b.A2, b.A3, b.B, b.C = 1, 2, 3, 4, 5\n+\n+\tif a != b {\n+\t\tpanic(\"broken equality: a != b\")\n+\t}\n+\n+\tm[a] = 1\n+\tm[b] = 2\n+\tif len(m) == 2 {\n+\t\tpanic(\"broken hash: len(m) == 2\")\n+\t}\n+\tif m[a] != 2 {\n+\t\tpanic(\"m[a] != 2\")\n+\t}\n+}\n+\n+func main() {\n+\ttest1()\n+\ttest2()\n+\ttest3()\n+\ttest4()\n+\ttest5()\n+}"}, {"sha": "c447371c1ab0cd0d9b1a4304decd0c6b6c5650bc", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4590.dir/pkg1.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package pkg1\n+\n+type A interface {\n+\tWrite() error\n+}\n+\n+type B interface {\n+\tHello()\n+\tworld()\n+}\n+\n+type C struct{}\n+\n+func (c C) Write() error { return nil }\n+\n+var T = struct{ A }{nil}\n+var U = struct{ B }{nil}\n+var V A = struct{ *C }{nil}\n+var W = interface {\n+\tWrite() error\n+\tHello()\n+}(nil)"}, {"sha": "61c01d7aec2d4ef94fef0b62bafc59c9864177de", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4590.dir/pkg2.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fpkg2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package pkg2\n+\n+import \"./pkg1\"\n+\n+var T = struct{ pkg1.A }{nil}\n+var U = struct{ pkg1.B }{nil}\n+var V pkg1.A = struct{ *pkg1.C }{nil}\n+var W = interface {\n+\tWrite() error\n+\tHello()\n+}(nil)"}, {"sha": "3220e85d3a6bc92de4626037035f19895b63dbfe", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4590.dir/prog.go", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"./pkg1\"\n+\t\"./pkg2\"\n+)\n+\n+func main() {\n+\tif pkg1.T != pkg2.T {\n+\t\tpanic(\"pkg1.T != pkg2.T\")\n+\t}\n+\tif pkg1.U != pkg2.U {\n+\t\tpanic(\"pkg1.U != pkg2.U\")\n+\t}\n+\tif pkg1.V != pkg2.V {\n+\t\tpanic(\"pkg1.V != pkg2.V\")\n+\t}\n+\tif pkg1.W != pkg2.W {\n+\t\tpanic(\"pkg1.W != pkg2.W\")\n+\t}\n+}"}, {"sha": "faeb1adef23af1522c9d57239a52ae737922d852", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4590.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4590.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4590: linker fails on multiple imports of\n+// an anonymous struct with methods.\n+\n+package ignored"}, {"sha": "d56c6d3e8cd899ffd8ad167f2b50815c7ef09545", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4610.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4610.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4610.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4610.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type bar struct {\n+\tx int\n+}\n+\n+func main() {\n+\tvar foo bar\n+\t_ = &foo{} // ERROR \"is not a type|expected .;.\"\n+} // GCCGO_ERROR \"expected declaration\"\n+"}, {"sha": "1aa318c2b234abe5fb9179d9866c7724ee83c76a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4614.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4614.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4614.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4614.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// compile\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4614: slicing of nil slices confuses the compiler\n+// with a uintptr(nil) node.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+var n int\n+\n+var _ = []int(nil)[1:]\n+var _ = []int(nil)[n:]\n+\n+var _ = uintptr(unsafe.Pointer(nil))\n+var _ = unsafe.Pointer(uintptr(0))"}, {"sha": "ff91ae70673afae7cb82f94d6afb7456bda8475d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4618.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4618.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4618.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4618.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,41 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"testing\"\n+)\n+\n+type T struct { int }\n+\n+var globl *T\n+\n+func F() {\n+\tt := &T{}\n+\tglobl = t\n+}\n+\n+func G() {\n+\tt := &T{}\n+\t_ = t\n+}\n+\n+func main() {\n+\tnf := testing.AllocsPerRun(100, F)\n+\tng := testing.AllocsPerRun(100, G)\n+\tif int(nf) != 1 {\n+\t\tfmt.Printf(\"AllocsPerRun(100, F) = %v, want 1\\n\", nf)\n+\t\tos.Exit(1)\n+\t}\n+\tif int(ng) != 0 && (runtime.Compiler != \"gccgo\" || int(ng) != 1) {\n+\t\tfmt.Printf(\"AllocsPerRun(100, G) = %v, want 0\\n\", ng)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "7b4ebf944d6841feba98d501d5284eec8f028ee9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4620.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4620.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4620.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4620.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,21 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4620: map indexes are not evaluated before assignment of other elements\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tm := map[int]int{0:1}\n+\ti := 0\n+\ti, m[i] = 1, 2\n+\tif m[0] != 2 {\n+\t\tfmt.Println(m)\n+\t\tpanic(\"m[i] != 2\")\n+\t}\n+}"}, {"sha": "d3f582b20c6bee704d8bf0c16fb94776464a5853", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4654.go", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4654.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4654.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4654.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,71 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4654.\n+// Check error for conversion and 'not used' in defer/go.\n+\n+package p\n+\n+import \"unsafe\"\n+\n+func f() {\n+\tdefer int(0) // ERROR \"defer requires function call, not conversion|is not used\"\n+\tgo string([]byte(\"abc\")) // ERROR \"go requires function call, not conversion|is not used\"\n+\t\n+\tvar c complex128\n+\tvar f float64\n+\tvar t struct {X int}\n+\n+\tvar x []int\n+\tdefer append(x, 1) // ERROR \"defer discards result of append|is not used\"\n+\tdefer cap(x) // ERROR \"defer discards result of cap|is not used\"\n+\tdefer complex(1, 2) // ERROR \"defer discards result of complex|is not used\"\n+\tdefer complex(f, 1) // ERROR \"defer discards result of complex|is not used\"\n+\tdefer imag(1i) // ERROR \"defer discards result of imag|is not used\"\n+\tdefer imag(c) // ERROR \"defer discards result of imag|is not used\"\n+\tdefer len(x) // ERROR \"defer discards result of len|is not used\"\n+\tdefer make([]int, 1) // ERROR \"defer discards result of make|is not used\"\n+\tdefer make(chan bool) // ERROR \"defer discards result of make|is not used\"\n+\tdefer make(map[string]int) // ERROR \"defer discards result of make|is not used\"\n+\tdefer new(int) // ERROR \"defer discards result of new|is not used\"\n+\tdefer real(1i) // ERROR \"defer discards result of real|is not used\"\n+\tdefer real(c) // ERROR \"defer discards result of real|is not used\"\n+\tdefer append(x, 1) // ERROR \"defer discards result of append|is not used\"\n+\tdefer append(x, 1) // ERROR \"defer discards result of append|is not used\"\n+\tdefer unsafe.Alignof(t.X) // ERROR \"defer discards result of unsafe.Alignof|is not used\"\n+\tdefer unsafe.Offsetof(t.X) // ERROR \"defer discards result of unsafe.Offsetof|is not used\"\n+\tdefer unsafe.Sizeof(t) // ERROR \"defer discards result of unsafe.Sizeof|is not used\"\n+\t\n+\tdefer copy(x, x) // ok\n+\tm := make(map[int]int)\n+\tdefer delete(m, 1) // ok\n+\tdefer panic(1) // ok\n+\tdefer print(1) // ok\n+\tdefer println(1) // ok\n+\tdefer recover() // ok\n+\n+\tint(0) // ERROR \"int\\(0\\) evaluated but not used|is not used\"\n+\tstring([]byte(\"abc\")) // ERROR \"string\\(.*\\) evaluated but not used|is not used\"\n+\n+\tappend(x, 1) // ERROR \"not used\"\n+\tcap(x) // ERROR \"not used\"\n+\tcomplex(1, 2) // ERROR \"not used\"\n+\tcomplex(f, 1) // ERROR \"not used\"\n+\timag(1i) // ERROR \"not used\"\n+\timag(c) // ERROR \"not used\"\n+\tlen(x) // ERROR \"not used\"\n+\tmake([]int, 1) // ERROR \"not used\"\n+\tmake(chan bool) // ERROR \"not used\"\n+\tmake(map[string]int) // ERROR \"not used\"\n+\tnew(int) // ERROR \"not used\"\n+\treal(1i) // ERROR \"not used\"\n+\treal(c) // ERROR \"not used\"\n+\tappend(x, 1) // ERROR \"not used\"\n+\tappend(x, 1) // ERROR \"not used\"\n+\tunsafe.Alignof(t.X) // ERROR \"not used\"\n+\tunsafe.Offsetof(t.X) // ERROR \"not used\"\n+\tunsafe.Sizeof(t) // ERROR \"not used\"\n+}"}, {"sha": "edaee93c5b77d667e4cd7e58800e039f8f41b80c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4663.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4663.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4663.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4663.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4663.\n+// Make sure 'not used' message is placed correctly.\n+\n+package main\n+\n+func a(b int) int64 {\n+  b // ERROR \"not used\"\n+  return 0\n+}"}, {"sha": "3a00a31952c327b9d93d7674801d14116c33f0cf", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4667.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4667.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4667.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4667.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,37 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"os\"\n+\t\"testing\"\n+)\n+\n+var globl *int\n+\n+func G() {\n+\tF()\n+}\n+\n+func F() {\n+\tvar x int\n+\tglobl = &x\n+}\n+\n+func main() {\n+\tnf := testing.AllocsPerRun(100, F)\n+\tng := testing.AllocsPerRun(100, G)\n+\tif int(nf) != 1 {\n+\t\tfmt.Printf(\"AllocsPerRun(100, F) = %v, want 1\\n\", nf)\n+\t\tos.Exit(1)\n+\t}\n+\tif int(ng) != 1 {\n+\t\tfmt.Printf(\"AllocsPerRun(100, G) = %v, want 1\\n\", ng)\n+\t\tos.Exit(1)\n+\t}\n+}"}, {"sha": "69f66f2129f6ec9bd1da9e8296656e31fd566e6b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4734.go", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4734.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4734.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4734.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,21 @@\n+// compile\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Caused gccgo to emit multiple definitions of the same symbol.\n+\n+package p\n+\n+type S1 struct{}\n+\n+func (s *S1) M() {}\n+\n+type S2 struct {\n+\tF struct{ *S1 }\n+}\n+\n+func F() {\n+\t_ = struct{ *S1 }{}\n+}"}, {"sha": "73c75393cf44aeac36aa7978e7cd5c2836cad687", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4748.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4748.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4748.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4748.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4748.\n+// This program used to complain because inlining created two exit labels.\n+\n+package main\n+\n+func jump() {\n+        goto exit\n+exit:\n+        return\n+}\n+func main() {\n+        jump()\n+        jump()\n+}"}, {"sha": "d6781e39a22812294f60564f47d7ce594f81a437", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4752.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4752.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4752.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4752.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,26 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func F(xi, yi interface{}) uint64 {\n+\tx, y := xi.(uint64), yi.(uint64)\n+\treturn x &^ y\n+}\n+\n+func G(xi, yi interface{}) uint64 {\n+\treturn xi.(uint64) &^ yi.(uint64) // generates incorrect code\n+}\n+\n+func main() {\n+\tvar x, y uint64 = 0, 1 << 63\n+\tf := F(x, y)\n+\tg := G(x, y)\n+\tif f != 0 || g != 0 {\n+\t\tprintln(\"F\", f, \"G\", g)\n+\t\tpanic(\"bad\")\n+\t}\n+}"}, {"sha": "c3dd6297d85ec20c462d01c007f333a755f5d9a6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4785.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4785.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4785.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4785.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,20 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 4785: used to fail to compile\n+\n+package main\n+\n+func t(x, y interface{}) interface{} {\n+\treturn x.(float64) > y.(float64)\n+}\n+\n+func main() {\n+\tv := t(1.0, 2.0)\n+\tif v != false {\n+\t\tpanic(\"bad comparison\")\n+\t}\n+}"}, {"sha": "f560b2fac98f3814a1ed28f09e85a5536316723d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4813.go", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4813.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4813.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4813.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,52 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4813: use of constant floats as indices.\n+\n+package main\n+\n+var A [3]int\n+var S []int\n+var T string\n+\n+const (\n+\ti  = 1\n+\tf  = 2.0\n+\tf2 = 2.1\n+\tc  = complex(2, 0)\n+\tc2 = complex(2, 1)\n+)\n+\n+var (\n+\tvf = f\n+\tvc = c\n+)\n+\n+var (\n+\ta1 = A[i]\n+\ta2 = A[f]\n+\ta3 = A[f2] // ERROR \"truncated|must be integer\"\n+\ta4 = A[c]\n+\ta5 = A[c2] // ERROR \"truncated|must be integer\"\n+\ta6 = A[vf] // ERROR \"non-integer|must be integer\"\n+\ta7 = A[vc] // ERROR \"non-integer|must be integer\"\n+\n+\ts1 = S[i]\n+\ts2 = S[f]\n+\ts3 = S[f2] // ERROR \"truncated|must be integer\"\n+\ts4 = S[c]\n+\ts5 = S[c2] // ERROR \"truncated|must be integer\"\n+\ts6 = S[vf] // ERROR \"non-integer|must be integer\"\n+\ts7 = S[vc] // ERROR \"non-integer|must be integer\"\n+\n+\tt1 = T[i]\n+\tt2 = T[f]\n+\tt3 = T[f2] // ERROR \"truncated|must be integer\"\n+\tt4 = T[c]\n+\tt5 = T[c2] // ERROR \"truncated|must be integer\"\n+\tt6 = T[vf] // ERROR \"non-integer|must be integer\"\n+\tt7 = T[vc] // ERROR \"non-integer|must be integer\"\n+)"}, {"sha": "7ee7c4860475f1616d19f863266e2191fe705c38", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4879.dir/a.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,33 @@\n+package a\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+type Collection struct {\n+\troot unsafe.Pointer\n+}\n+\n+type nodeLoc struct{}\n+\n+type slice []int\n+\n+type maptype map[int]int\n+\n+func MakePrivateCollection() *Collection {\n+\treturn &Collection{\n+\t\troot: unsafe.Pointer(&nodeLoc{}),\n+\t}\n+}\n+\n+func MakePrivateCollection2() *Collection {\n+\treturn &Collection{\n+\t\troot: unsafe.Pointer(&slice{}),\n+\t}\n+}\n+func MakePrivateCollection3() *Collection {\n+\treturn &Collection{\n+\t\troot: unsafe.Pointer(&maptype{}),\n+\t}\n+}\n+"}, {"sha": "d8fb5693db903e528eb8f5d9747753d19a999f66", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4879.dir/b.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+package b\n+\n+import \"./a\"\n+\n+func F() {\n+      a.MakePrivateCollection()\n+      a.MakePrivateCollection2()\n+      a.MakePrivateCollection3()\n+}"}, {"sha": "842c8117ff1f8fdc7f68e2686b50862a65641a45", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4879.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4879.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4879: export data misses the '&' for some\n+// composite literals in inlined bodies.\n+\n+package ignored"}, {"sha": "aefe2d645571620f7f1aae72cd2125d5ec61997a", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4909a.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909a.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,35 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4909: compiler incorrectly accepts unsafe.Offsetof(t.x)\n+// where x is a field of an embedded pointer field.\n+\n+package p\n+\n+import (\n+\t\"unsafe\"\n+)\n+\n+type T struct {\n+\tA int\n+\t*B\n+}\n+\n+func (t T) Method() {}\n+\n+type B struct {\n+\tX, Y int\n+}\n+\n+var t T\n+var p *T\n+\n+const N1 = unsafe.Offsetof(t.X)      // ERROR \"indirection\"\n+const N2 = unsafe.Offsetof(p.X)      // ERROR \"indirection\"\n+const N3 = unsafe.Offsetof(t.B.X)    // valid\n+const N4 = unsafe.Offsetof(p.B.X)    // valid\n+const N5 = unsafe.Offsetof(t.Method) // ERROR \"method value\"\n+const N6 = unsafe.Offsetof(p.Method) // ERROR \"method value\""}, {"sha": "0f594e3db67be58142ad8ca6a89ba04f972b3f09", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4909b.go", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909b.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909b.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4909b.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,80 @@\n+// errorcheckoutput\n+\n+package main\n+\n+import \"fmt\"\n+\n+// We are going to define 256 types T(n),\n+// such that T(n) embeds T(2n) and *T(2n+1).\n+\n+func main() {\n+\tfmt.Printf(\"// errorcheck\\n\\n\")\n+\tfmt.Printf(\"package p\\n\\n\")\n+\tfmt.Println(`import \"unsafe\"`)\n+\n+\t// Dump types.\n+\tfor n := 1; n < 256; n++ {\n+\t\twriteStruct(n)\n+\t}\n+\t// Dump leaves\n+\tfor n := 256; n < 512; n++ {\n+\t\tfmt.Printf(\"type T%d int\\n\", n)\n+\t}\n+\n+\tfmt.Printf(\"var t T1\\n\")\n+\tfmt.Printf(\"var p *T1\\n\")\n+\n+\t// Simple selectors\n+\tfor n := 2; n < 256; n++ {\n+\t\twriteDot(n)\n+\t}\n+\n+\t// Double selectors\n+\tfor n := 128; n < 256; n++ {\n+\t\twriteDot(n/16, n)\n+\t}\n+\n+\t// Triple selectors\n+\tfor n := 128; n < 256; n++ {\n+\t\twriteDot(n/64, n/8, n)\n+\t}\n+}\n+\n+const structTpl = `\n+type T%d struct {\n+\tA%d int\n+\tT%d\n+\t*T%d\n+}\n+`\n+\n+func writeStruct(n int) {\n+\tfmt.Printf(structTpl, n, n, 2*n, 2*n+1)\n+}\n+\n+func writeDot(ns ...int) {\n+\tfor _, root := range []string{\"t\", \"p\"} {\n+\t\tfmt.Printf(\"const _ = unsafe.Offsetof(%s\", root)\n+\t\tfor _, n := range ns {\n+\t\t\tfmt.Printf(\".T%d\", n)\n+\t\t}\n+\t\t// Does it involve an indirection?\n+\t\tnlast := ns[len(ns)-1]\n+\t\tnprev := 1\n+\t\tif len(ns) > 1 {\n+\t\t\tnprev = ns[len(ns)-2]\n+\t\t}\n+\t\tisIndirect := false\n+\t\tfor n := nlast / 2; n > nprev; n /= 2 {\n+\t\t\tif n%2 == 1 {\n+\t\t\t\tisIndirect = true\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tfmt.Print(\")\")\n+\t\tif isIndirect {\n+\t\t\tfmt.Print(` // ERROR \"indirection\"`)\n+\t\t}\n+\t\tfmt.Print(\"\\n\")\n+\t}\n+}"}, {"sha": "19b73a0e0384709495d09157370c4854e1fd910d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4932.dir/foo.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Ffoo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Ffoo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Ffoo.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+type Op struct{}"}, {"sha": "c017b9649d474e3d827564ba9a9195f7c41dc61f", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4932.dir/state.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package state\n+\n+import \"./foo\"\n+\n+func Public() {\n+\tvar s Settings\n+\ts.op()\n+}\n+\n+type State struct{}\n+\n+func (s *State) x(*Settings) {}\n+\n+type Settings struct{}\n+\n+func (c *Settings) x() {\n+\trun([]foo.Op{{}})\n+}\n+\n+func run([]foo.Op) {}\n+\n+func (s *Settings) op() foo.Op {\n+\treturn foo.Op{}\n+}"}, {"sha": "50f75db2cea1006235c427a70b4c46c3ed8aecf6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4932.dir/state2.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.dir%2Fstate2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package state2\n+\n+import \"./state\"\n+\n+type Foo *state.State"}, {"sha": "2a6bc699f0f495a4ba753f86ea7d118e35cc40d6", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4932.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4932.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4932: regression in export of composite literals.\n+\n+package ignored"}, {"sha": "2b9e44e351afb76c618f73758f5b7f2eb3f94e29", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4964.dir/a.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+var global, global2 *int\n+\n+type T struct {\n+\tPointer *int\n+}\n+\n+func dontinline() {}\n+\n+func Store(t *T) {\n+\tglobal = t.Pointer\n+\tdontinline()\n+}\n+\n+func Store2(t *T) {\n+\tglobal2 = t.Pointer\n+\tdontinline()\n+}\n+\n+func Get() *int {\n+\treturn global\n+}"}, {"sha": "42a6f1d761a8c8451a68cbcc3df652b119032f1e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4964.dir/b.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func F() {\n+\t// store 1 in a.global\n+\tx, y := 1, 2\n+\tt := a.T{Pointer: &x}\n+\ta.Store(&t)\n+\t_ = y\n+}\n+\n+func G() {\n+\t// store 4 in a.global2\n+\tx, y := 3, 4\n+\tt := a.T{Pointer: &y}\n+\ta.Store2(&t)\n+\t_ = x\n+}\n+\n+func main() {\n+\tF()\n+\tG()\n+\tp := a.Get()\n+\tn := *p\n+\tif n != 1 {\n+\t\tprintln(n, \"!= 1\")\n+\t\tpanic(\"n != 1\")\n+\t}\n+}"}, {"sha": "8291d1bb97d43d0dd7b54b6696abf1f971f77406", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue4964.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue4964.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 4964: exported escape analysis result is not enough\n+// for cross package analysis.\n+\n+package ignored"}, {"sha": "1e74fa1a1f607607d13abebc4c92510281a7335c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5002.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5002.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5002.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5002.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// build\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5002: 8g produces invalid CMPL $0, $0.\n+// Used to fail at link time.\n+\n+package main\n+\n+func main() {\n+\tvar y int64\n+\tif y%1 == 0 {\n+\t}\n+}"}, {"sha": "a2cde2a501ea43f3108b51f57ee3e14aa85e770b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5056.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5056.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5056.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5056.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5056: escape analysis not applied to wrapper functions\n+\n+package main\n+\n+type Foo int16\n+\n+func (f Foo) Esc() *int{\n+\tx := int(f)\n+\treturn &x\n+}\n+\n+type iface interface {\n+\tEsc() *int\n+}\n+\n+var bar, foobar *int\n+\n+func main() {\n+\tvar quux iface\n+\tvar x Foo\n+\t\n+\tquux = x\n+\tbar = quux.Esc()\n+\tfoobar = quux.Esc()\n+\tif bar == foobar {\n+\t\tpanic(\"bar == foobar\")\n+\t}\n+}"}, {"sha": "81b9f0521f96ee01f32537c3348887f325e6f94b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5089.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5089.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5089.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5089.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5089: gc allows methods on non-locals if symbol already exists\n+\n+package p\n+\n+import \"bufio\"\t// GCCGO_ERROR \"previous\"\n+\n+func (b *bufio.Reader) Buffered() int { // ERROR \"non-local|redefinition\"\n+\treturn -1\n+}"}, {"sha": "f20abb98bfac7cc527bc2990a1d4e7fe4ccf40c8", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5105.dir/a.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+var A = [2]string{\"hello\", \"world\"}"}, {"sha": "b12e739e33a0db8e2758d003c58b029a035c2090", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5105.dir/b.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+var B = [2]string{\"world\", \"hello\"}\n+\n+func main() {\n+\tif a.A[0] != B[1] {\n+\t\tpanic(\"bad hello\")\n+\t}\n+}"}, {"sha": "e3e5e5caa46a621c60e744fc5baf052561cfd54d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5105.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5105.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5105: linker segfaults on duplicate definition\n+// of a type..hash.* function.\n+\n+package ignored"}, {"sha": "2fdf0f9bb8b1630978110b9d9450b6c2b53629fb", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5125.dir/bug.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fbug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fbug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fbug.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bug\n+\n+type Node interface {\n+\tEval(s *Scene)\n+}\n+\n+type plug struct {\n+\tnode Node\n+}\n+\n+type Scene struct {\n+\tchanged map[plug]bool\n+}"}, {"sha": "47acdeba8a9500b64573ab8f4fc57b71855d96d2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5125.dir/main.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import _ \"./bug\"\n+\n+func main() {\n+}"}, {"sha": "c049df3e2f78415e840f34bf913bfde6f4a6a888", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5125.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5125.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5125: cyclic dependencies between types confuse\n+// the hashability test during import.\n+\n+package ignored"}, {"sha": "b14eae7863dc1b8437ca5a3ea6fa10c1a94de452", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5162.go", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5162.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5162.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5162.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,88 @@\n+// runoutput\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5162: bad array equality when multiple comparisons\n+// happen in the same expression.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+)\n+\n+const template = `\n+func CheckEqNNN_TTT() {\n+\tonesA := [NNN]ttt{ONES}\n+\tonesB := [NNN]ttt{ONES}\n+\ttwos := [NNN]ttt{TWOS}\n+\tif onesA != onesB {\n+\t\tprintln(\"onesA != onesB in CheckEqNNN_TTT\")\n+\t}\n+\tif onesA == twos {\n+\t\tprintln(\"onesA == twos in CheckEqNNN_TTT\")\n+\t}\n+\tif onesB == twos {\n+\t\tprintln(\"onesB == twos in CheckEqNNN_TTT\")\n+\t}\n+\tif s := fmt.Sprint(onesA == onesB, onesA != twos, onesB != twos); s != \"true true true\" {\n+\t\tprintln(\"fail in CheckEqNNN_TTT:\", s)\n+\t}\n+}\n+\n+func CheckEqNNN_TTTExtraVar() {\n+\tonesA := [NNN]ttt{ONES}\n+\tonesB := [NNN]ttt{ONES}\n+\ttwos := [NNN]ttt{TWOS}\n+\tonesX := onesA\n+\tif onesA != onesB {\n+\t\tprintln(\"onesA != onesB in CheckEqNNN_TTTExtraVar\")\n+\t}\n+\tif onesA == twos {\n+\t\tprintln(\"onesA == twos in CheckEqNNN_TTTExtraVar\")\n+\t}\n+\tif onesB == twos {\n+\t\tprintln(\"onesB == twos in CheckEqNNN_TTTExtraVar\")\n+\t}\n+\tif s := fmt.Sprint(onesA == onesB, onesA != twos, onesB != twos); s != \"true true true\" {\n+\t\tprintln(\"fail in CheckEqNNN_TTTExtraVar:\", s)\n+\t}\n+\tif s := fmt.Sprint(onesB == onesX); s != \"true\" {\n+\t\tprintln(\"extra var fail in CheckEqNNN_TTTExtraVar\")\n+\t}\n+}\n+`\n+\n+func main() {\n+\tfmt.Print(\"// run\\n\\n\")\n+\tfmt.Print(\"// THIS FILE IS AUTO-GENERATED\\n\\n\")\n+\tfmt.Print(\"package main\\n\\n\")\n+\tfmt.Println(`import \"fmt\"`)\n+\n+\ttypes := []string{\n+\t\t\"int\", \"int8\", \"int16\", \"int32\", \"int64\",\n+\t\t\"uint\", \"uint8\", \"uint16\", \"uint32\", \"uint64\",\n+\t\t\"float32\", \"float64\"}\n+\ttocall := make([]string, 0, 32*len(types))\n+\tfor i := 1; i <= 32; i++ {\n+\t\tfor _, typ := range types {\n+\t\t\tsrc := template\n+\t\t\tsrc = strings.Replace(src, \"NNN\", fmt.Sprint(i), -1)\n+\t\t\tsrc = strings.Replace(src, \"TTT\", strings.Title(typ), -1)\n+\t\t\tsrc = strings.Replace(src, \"ttt\", typ, -1)\n+\t\t\tsrc = strings.Replace(src, \"ONES\", \"1\"+strings.Repeat(\", 1\", i-1), -1)\n+\t\t\tsrc = strings.Replace(src, \"TWOS\", \"2\"+strings.Repeat(\", 2\", i-1), -1)\n+\t\t\tfmt.Print(src)\n+\t\t\ttocall = append(tocall, fmt.Sprintf(\"CheckEq%d_%s\", i, strings.Title(typ)))\n+\t\t}\n+\t}\n+\tfmt.Println(\"func main() {\")\n+\tfor _, fun := range tocall {\n+\t\tfmt.Printf(\"\\t%s()\\n\", fun)\n+\t\tfmt.Printf(\"\\t%sExtraVar()\\n\", fun)\n+\t}\n+\tfmt.Println(\"}\")\n+}"}, {"sha": "4039913dc90151e0c20fcecc58a4fb88c902a71b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5231.go", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5231.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5231.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5231.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,45 @@\n+// compile\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5231: method values lose their variadic property.\n+\n+package p\n+\n+type T int\n+\n+func (t T) NotVariadic(s []int) int {\n+\treturn int(t) + s[0]\n+}\n+\n+func (t T) Variadic(s ...int) int {\n+\treturn int(t) + s[0]\n+}\n+\n+type I interface {\n+\tNotVariadic(s []int) int\n+\tVariadic(s ...int) int\n+}\n+\n+func F() {\n+\tvar t T\n+\tvar p *T = &t\n+\tvar i I = p\n+\n+\tnv := t.NotVariadic\n+\tnv = p.NotVariadic\n+\tnv = i.NotVariadic\n+\tvar s int = nv([]int{1, 2, 3})\n+\n+\tv := t.Variadic\n+\tv = p.Variadic\n+\tv = i.Variadic\n+\ts = v(1, 2, 3)\n+\n+\tvar f1 func([]int) int = nv\n+\tvar f2 func(...int) int = v\n+\n+\t_, _, _ = f1, f2, s\n+}"}, {"sha": "e26c7b8c45ed7bcd463d797c9a56455d4ae02cf5", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5244.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5244.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5244.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5244.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,18 @@\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5244: the init order computation uses the wrong\n+// order for top-level blank identifier assignments.\n+// The example used to panic because it tries calling a\n+// nil function instead of assigning to f before.\n+\n+package main\n+\n+var f = func() int { return 1 }\n+var _ = f() + g()\n+var g = func() int { return 2 }\n+\n+func main() {}"}, {"sha": "8512461686bcd5cc413e10c056f771102b6fe5dd", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5259.dir/bug.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fbug.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fbug.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fbug.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package bug\n+\n+type S struct {\n+\tF func()\n+}\n+\n+type X interface {\n+\tBar()\n+}\n+\n+func Foo(x X) *S {\n+\treturn &S{F: x.Bar}\n+}"}, {"sha": "ad1da78f5fca350a7b3f0e488c5e5a9a46b6444c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5259.dir/main.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./bug\"\n+\n+type foo int\n+\n+func (f *foo) Bar() {\n+}\n+\n+func main() {\n+\tbug.Foo(new(foo))\n+}"}, {"sha": "00fe19ff947e6ca9952e15daec765172a16661d2", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5259.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5259.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5259: Inlining of method value causes internal compiler error\n+\n+package ignored"}, {"sha": "5a2c99f65c726b37edb241212b55ff960fb46857", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5260.dir/a.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+const BOM = \"\\uFEFF\""}, {"sha": "299b75e4a7cdd4a00c2d13390f604d29f0760e7b", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5260.dir/b.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\t_ = a.BOM\n+}"}, {"sha": "11fd5d04815724ac7c1a58c69958a0f71d0acac4", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5260.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5260.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// rundir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5260: Unicode BOM in exported string constant\n+// cannot be read back during package import.\n+\n+package ignored"}, {"sha": "b1c893ac83e63b0c2e4aff68926eb3120c95c5a9", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5291.dir/pkg1.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fpkg1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fpkg1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fpkg1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package pkg1\n+\n+import (\n+\t\"runtime\"\n+)\n+\n+type T2 *[]string\n+\n+type Data struct {\n+\tT1 *[]T2\n+}\n+\n+func CrashCall() (err error) {\n+\tvar d Data\n+\n+\tfor count := 0; count < 10; count++ {\n+\t\truntime.GC()\n+\n+\t\tlen := 2 // crash when >=2\n+\t\tx := make([]T2, len)\n+\n+\t\td = Data{T1: &x}\n+\n+\t\tfor j := 0; j < len; j++ {\n+\t\t\ty := make([]string, 1)\n+\t\t\t(*d.T1)[j] = &y\n+\t\t}\n+\t}\n+\treturn nil\n+}"}, {"sha": "8301091bd8858ac4590a5c48674f6c75c014af82", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5291.dir/prog.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"./pkg1\"\n+)\n+\n+type message struct { // Presence of this creates a crash\n+\tdata pkg1.Data\n+}\n+\n+func main() {\n+\tpkg1.CrashCall()\n+}"}, {"sha": "00d2ada4cc8e547b2e2137b1f1fce5b151f7bc0e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5291.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5291.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,9 @@\n+// rundir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5291: GC crash\n+\n+package ignored"}, {"sha": "302822d238707a9d05782550d512c66e147b5c40", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5470.dir/a.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type Foo interface {\n+\tHi() string\n+}\n+\n+func Test1() Foo { return make(tst1) }\n+\n+type tst1 map[string]bool\n+\n+func (r tst1) Hi() string { return \"Hi!\" }\n+\n+func Test2() Foo { return make(tst2, 0) }\n+\n+type tst2 []string\n+\n+func (r tst2) Hi() string { return \"Hi!\" }\n+\n+func Test3() Foo { return make(tst3) }\n+\n+type tst3 chan string\n+\n+func (r tst3) Hi() string { return \"Hi!\" }"}, {"sha": "0801c149cfe26b0dc97c405cd929acac0a34dd08", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5470.dir/b.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fb.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fb.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.dir%2Fb.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package b\n+\n+import \"./a\"\n+\n+func main() {\n+\ta.Test1()\n+\ta.Test2()\n+\ta.Test3()\n+}"}, {"sha": "6123c0983a8159acda04f306f774efee0d9bc538", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5470.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5470.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5470: exported data for inlining may miss\n+// the type argument of make.\n+\n+package ignored"}, {"sha": "bbc62ffac0a42bedae5df4087c5e412a894f4e26", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5493.go", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5493.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5493.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5493.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,59 @@\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"runtime\"\n+\t\"sync\"\n+\t\"sync/atomic\"\n+\t\"time\"\n+)\n+\n+const N = 10\n+var count int64\n+\n+func run() error {\n+\tf1 := func() {}\n+\tf2 := func() {\n+\t\tfunc() {\n+\t\t\tf1()\n+\t\t}()\n+\t}\n+\truntime.SetFinalizer(&f1, func(f *func()) {\n+\t\tatomic.AddInt64(&count, -1)\n+\t})\n+\tgo f2()\n+\treturn nil\n+}\n+\n+func main() {\n+\t// Does not work on 32-bits, or with gccgo, due to partially\n+\t// conservative GC.\n+\t// Try to enable when we have fully precise GC.\n+\tif runtime.GOARCH != \"amd64\" || runtime.Compiler == \"gccgo\" {\n+\t\treturn\n+\t}\n+\tcount = N\n+\tvar wg sync.WaitGroup\n+\twg.Add(N)\n+\tfor i := 0; i < N; i++ {\n+\t\tgo func() {\n+\t\t\trun()\n+\t\t\twg.Done()\n+\t\t}()\n+\t}\n+\twg.Wait()\n+\tfor i := 0; i < 2*N; i++ {\n+\t\ttime.Sleep(10 * time.Millisecond)\n+\t\truntime.GC()\n+\t}\n+\tif count != 0 {\n+\t\tprintln(count, \"out of\", N, \"finalizer are called\")\n+\t\tpanic(\"not all finalizers are called\")\n+\t}\n+}\n+"}, {"sha": "053abf6f7cffa18bdf000cc96efd086f405e4a2e", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5515.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5515.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5515.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5515.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,34 @@\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5515: miscompilation doing inlining in generated method wrapper\n+\n+package main\n+\n+type T uint32\n+\n+func main() {\n+        b := make([]T, 8)\n+        b[0] = 0xdeadbeef\n+        rs := Slice(b)\n+        sort(rs)\n+}\n+\n+type Slice []T\n+\n+func (s Slice) Swap(i, j int) {\n+        tmp := s[i]\n+        s[i] = s[j]\n+        s[j] = tmp\n+}\n+\n+type Interface interface {\n+        Swap(i, j int)\n+}\n+\n+func sort(data Interface) {\n+        data.Swap(0, 4)\n+}"}, {"sha": "785be7a2c76153490c1b04c9149420058c4a18a3", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5607.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5607.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5607.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5607.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,36 @@\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5607: generation of init() function incorrectly\n+// uses initializers of blank variables inside closures.\n+\n+package main\n+\n+var Test = func() {\n+\tvar mymap = map[string]string{\"a\": \"b\"}\n+\n+\tvar innerTest = func() {\n+\t\t// Used to crash trying to compile this line as\n+\t\t// part of init() (funcdepth mismatch).\n+\t\tvar _, x = mymap[\"a\"]\n+\t\tprintln(x)\n+\t}\n+\tinnerTest()\n+}\n+\n+var Test2 = func() {\n+\t// The following initializer should not be part of init()\n+\t// The compiler used to generate a call to Panic() in init().\n+\tvar _, x = Panic()\n+\t_ = x\n+}\n+\n+func Panic() (int, int) {\n+\tpanic(\"omg\")\n+\treturn 1, 2\n+}\n+\n+func main() {}"}, {"sha": "4ae66d679ea59fc47c07fe7c2b2ad6dd334d5382", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5614.dir/rethinkgo.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Frethinkgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Frethinkgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Frethinkgo.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+package rethinkgo\n+\n+type Session struct {\n+}\n+\n+func (s *Session) Run(query Exp) *int { return nil }\n+\n+type List []interface{}\n+\n+type Exp struct {\n+\targs []interface{}\n+}\n+\n+func (e Exp) UseOutdated(useOutdated bool) Exp {\n+\treturn Exp{args: List{e, useOutdated}}\n+}"}, {"sha": "7e4f3a7e6b9bb13944e4455ec03e4f9c065d5722", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5614.dir/x.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fx.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fx.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fx.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,7 @@\n+package x\n+\n+import \"./rethinkgo\"\n+\n+var S *rethinkgo.Session\n+\n+"}, {"sha": "97cc93a79d5d7bdf6265122a5337c7861f2c5c3d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5614.dir/y.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.dir%2Fy.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,5 @@\n+package y\n+\n+import \"./x\"\n+\n+var T = x.S"}, {"sha": "f2518d2a0c160bde81b05094a1d5947dca9cc473", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5614.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5614.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,11 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5614: exported data for inlining may miss\n+// named types when used in implicit conversion to\n+// their underlying type.\n+\n+package ignored"}, {"sha": "230a1e8c3bd403b74fb014a443625f081e4eed16", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5753.go", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5753.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5753.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5753.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,29 @@\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5753: bad typecheck info causes escape analysis to\n+// not run on method thunks.\n+\n+package main\n+\n+type Thing struct{}\n+\n+func (t *Thing) broken(s string) []string {\n+\tfoo := [1]string{s}\n+\treturn foo[:]\n+}\n+\n+func main() {\n+\tt := &Thing{}\n+\n+\tf := t.broken\n+\ts := f(\"foo\")\n+\t_ = f(\"bar\")\n+\tif s[0] != \"foo\" {\n+\t\tpanic(`s[0] != \"foo\"`)\n+\t}\n+\t\n+}"}, {"sha": "aa398e82b257c1b0213445d52377cc74f0640088", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5755.dir/a.go", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fa.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fa.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fa.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package a\n+\n+type I interface {\n+\tF()\n+}\n+\n+type foo1 []byte\n+type foo2 []rune\n+type foo3 []uint8\n+type foo4 []int32\n+type foo5 string\n+type foo6 string\n+type foo7 string\n+type foo8 string\n+type foo9 string\n+\n+func (f foo1) F() { return }\n+func (f foo2) F() { return }\n+func (f foo3) F() { return }\n+func (f foo4) F() { return }\n+func (f foo5) F() { return }\n+func (f foo6) F() { return }\n+func (f foo7) F() { return }\n+func (f foo8) F() { return }\n+func (f foo9) F() { return }\n+\n+func Test1(s string) I  { return foo1(s) }\n+func Test2(s string) I  { return foo2(s) }\n+func Test3(s string) I  { return foo3(s) }\n+func Test4(s string) I  { return foo4(s) }\n+func Test5(s []byte) I  { return foo5(s) }\n+func Test6(s []rune) I  { return foo6(s) }\n+func Test7(s []uint8) I { return foo7(s) }\n+func Test8(s []int32) I { return foo8(s) }\n+func Test9(s int) I     { return foo9(s) }\n+\n+type bar map[int]int\n+\n+func (b bar) F() { return }\n+\n+func TestBar() I { return bar{1: 2} }\n+\n+type baz int\n+\n+func IsBaz(x interface{}) bool { _, ok := x.(baz); return ok }\n+\n+type baz2 int\n+\n+func IsBaz2(x interface{}) bool {\n+\tswitch x.(type) {\n+\tcase baz2:\n+\t\treturn true\n+\tdefault:\n+\t\treturn false\n+\t}\n+}"}, {"sha": "6d515f26a637cc9e2572c9febda88cf5cf05629d", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5755.dir/main.go", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.dir%2Fmain.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"./a\"\n+\n+func main() {\n+\ta.Test1(\"frumious\")\n+\ta.Test2(\"frumious\")\n+\ta.Test3(\"frumious\")\n+\ta.Test4(\"frumious\")\n+\n+\ta.Test5(nil)\n+\ta.Test6(nil)\n+\ta.Test7(nil)\n+\ta.Test8(nil)\n+\ta.Test9(0)\n+\n+\ta.TestBar()\n+\ta.IsBaz(nil)\n+}"}, {"sha": "fa7ea4d204c897c08ea5ca8a5e3f276a31875938", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5755.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5755.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// compiledir\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5755: exported data for inlining may miss\n+// named types when used in string conversions.\n+\n+package ignored"}, {"sha": "ca060b55de6a2c94deeab349b2323d091fc3e253", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5809.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5809.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5809.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5809.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,27 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5809: 6g and 8g attempted to constant propagate indexed LEA\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tconst d16 = \"0123456789ABCDEF\"\n+\tk := 0x1234\n+\tvar x [4]byte\n+\t\n+\tx[0] = d16[k>>12&0xf]\n+\tx[1] = d16[k>>8&0xf]\n+\tx[2] = d16[k>>4&0xf]\n+\tx[3] = d16[k&0xf]\n+\t\n+\tif x != [4]byte{'1','2','3','4'} {\n+\t\tfmt.Println(x)\n+\t\tpanic(\"x != [4]byte{'1','2','3','4'}\")\n+\t}\n+}"}, {"sha": "94de06d57db5ab0c4174dfaedcd571df3543d952", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5820.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5820.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5820.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5820.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,18 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 5820: register clobber when clearfat and 64 bit arithmetic is interleaved.\n+\n+package main\n+\n+func main() {\n+\tarray := make([][]int, 2)\n+\tindex := uint64(1)\n+\tarray[index] = nil\n+\tif array[1] != nil {\n+\t\tpanic(\"array[1] != nil\")\n+\t}\n+}"}, {"sha": "cfc4a504c5ada95adea83daa8105f1b6f6890169", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue5841.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5841.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5841.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue5841.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,16 @@\n+// build\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 5841: 8g produces invalid CMPL $0, $0.\n+// Similar to issue 5002, used to fail at link time.\n+\n+package main\n+\n+func main() {\n+\tvar y int\n+\tif y%1 == 0 {\n+\t}\n+}"}, {"sha": "5bc193bf96fbf8d930eda3b40ea33815865a7a8c", "filename": "gcc/testsuite/go.test/test/fixedbugs/issue887.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue887.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue887.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fissue887.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,36 @@\n+// compile\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to leak registers on 8g.\n+\n+package p\n+\n+func f(x byte, y uint64) {\n+\tvar r byte\n+\tswitch y {\n+\tcase 1:\n+\t\tr = x << y // '>>' triggers it too\n+\tcase 2:\n+\t\tr = x << y\n+\tcase 3:\n+\t\tr = x << y\n+\tcase 4:\n+\t\tr = x << y\n+\tcase 5:\n+\t\tr = x << y\n+\tcase 6:\n+\t\tr = x << y\n+\tcase 7:\n+\t\tr = x << y\n+\tcase 8:\n+\t\tr = x << y\n+\tcase 9:\n+\t\tr = x << y\n+\tcase 10:\n+\t\tr = x << y\n+\t}\n+\t_ = r\n+}"}, {"sha": "4efae2362da98b9ddbf0e3da70c55f698cbd58bf", "filename": "gcc/testsuite/go.test/test/float_lit.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloat_lit.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -196,4 +196,8 @@ func main() {\n \tif !close(-210.012e19, -210012, 1000, 19) {\n \t\tprint(\"-210.012e19 is \", -210.012e19, \"\\n\")\n \t}\n+\n+\tif bad {\n+\t\tpanic(\"float_lit\")\n+\t}\n }"}, {"sha": "6c424ccd909307f4bd920a3fcbdc59223797f9e8", "filename": "gcc/testsuite/go.test/test/floatcmp.go", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloatcmp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloatcmp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffloatcmp.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -87,4 +87,7 @@ func main() {\n \t\t\tprintln(t.name, \"=\", t.expr, \"want\", t.want)\n \t\t}\n \t}\n+\tif bad {\n+\t\tpanic(\"floatcmp failed\")\n+\t}\n }"}, {"sha": "fb6f56184fac2b683efd4c9f7d77856cf582a68b", "filename": "gcc/testsuite/go.test/test/func1.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -14,6 +14,6 @@ func f1(a int) (int, float32) {\n }\n \n \n-func f2(a int) (a int, b float32) { // ERROR \"redeclared|definition\"\n+func f2(a int) (a int, b float32) { // ERROR \"duplicate argument a|definition\"\n \treturn 8, 8.0\n }"}, {"sha": "2d646b67860e9a91761c5e4e06102675e40be14b", "filename": "gcc/testsuite/go.test/test/func7.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc7.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -17,7 +17,7 @@ func f() int {\n \n func g() int {\n \tif !calledf {\n-\t\tprintln(\"BUG: func7 - called g before f\")\n+\t\tpanic(\"BUG: func7 - called g before f\")\n \t}\n \treturn 0\n }\n@@ -28,4 +28,3 @@ func main() {\n \t\tpanic(\"wrong answer\")\n \t}\n }\n-"}, {"sha": "13051802ecdcdae043aad275a7096b85297263bd", "filename": "gcc/testsuite/go.test/test/func8.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc8.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc8.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffunc8.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -37,13 +37,13 @@ func y() string {\n \n func main() {\n \tif f() == g() {\n-\t\tprintln(\"wrong f,g order\")\n+\t\tpanic(\"wrong f,g order\")\n \t}\n \n \tif x() == (y() == \"abc\") {\n \t\tpanic(\"wrong compare\")\n \t}\n \tif xy != \"xy\" {\n-\t\tprintln(\"wrong x,y order\")\n+\t\tpanic(\"wrong x,y order\")\n \t}\n }"}, {"sha": "d15d685792f86aa23eb4f4fdc19a46aa7e032ab1", "filename": "gcc/testsuite/go.test/test/funcdup.go", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,27 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type T interface {\n+\tF1(i int) (i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+\tF2(i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+\tF3() (i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+}\n+\n+type T1 func(i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+type T2 func(i int) (i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+type T3 func() (i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+\n+type R struct{}\n+\n+func (i *R) F1(i int)         {} // ERROR \"duplicate argument i|redefinition|previous\"\n+func (i *R) F2() (i int)      {return 0} // ERROR \"duplicate argument i|redefinition|previous\"\n+func (i *R) F3(j int) (j int) {return 0} // ERROR \"duplicate argument j|redefinition|previous\"\n+\n+func F1(i, i int)      {} // ERROR \"duplicate argument i|redefinition|previous\"\n+func F2(i int) (i int) {return 0} // ERROR \"duplicate argument i|redefinition|previous\"\n+func F3() (i, i int)   {return 0, 0} // ERROR \"duplicate argument i|redefinition|previous\""}, {"sha": "1db1a396b2e8d3d484b527476a5c03a4ee1f42c0", "filename": "gcc/testsuite/go.test/test/funcdup2.go", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffuncdup2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,17 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+var T interface {\n+\tF1(i int) (i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+\tF2(i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+\tF3() (i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+}\n+\n+var T1 func(i, i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+var T2 func(i int) (i int) // ERROR \"duplicate argument i|redefinition|previous\"\n+var T3 func() (i, i int) // ERROR \"duplicate argument i|redefinition|previous\""}, {"sha": "742a5d3f6344c4d42a004a83abbd80e9415f6efd", "filename": "gcc/testsuite/go.test/test/golden.out", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -16,13 +16,9 @@\n == fixedbugs/\n \n =========== fixedbugs/bug429.go\n-throw: all goroutines are asleep - deadlock!\n+fatal error: all goroutines are asleep - deadlock!\n \n == bugs/\n \n =========== bugs/bug395.go\n bug395 is broken\n-\n-=========== bugs/bug434.go\n-bugs/bug434.dir/two.go:10: one.t.int undefined (cannot refer to unexported field or method one.int)\n-BUG:bug434"}, {"sha": "cdaccf4f796144aa1099539042edc80301eb3eae", "filename": "gcc/testsuite/go.test/test/goprint.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -12,5 +12,5 @@ import \"time\"\n \n func main() {\n \tgo println(42, true, false, true, 1.5, \"world\", (chan int)(nil), []int(nil), (map[string]int)(nil), (func())(nil), byte(255))\n-\ttime.Sleep(1e6)\n+\ttime.Sleep(100*time.Millisecond)\n }"}, {"sha": "8bb1eb9191386ae8b0b539474ad4d1e6abaf439c", "filename": "gcc/testsuite/go.test/test/import2.dir/import2.go", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Various declarations of exported variables and functions.\n+\n+package p\n+\n+var C1 chan <- chan int = (chan<- (chan int))(nil)\n+var C2 chan (<- chan int) = (chan (<-chan int))(nil)\n+var C3 <- chan chan int = (<-chan (chan int))(nil)\n+var C4 chan chan <- int = (chan (chan<- int))(nil)\n+\n+var C5 <- chan <- chan int = (<-chan (<-chan int))(nil)\n+var C6 chan <- <- chan int = (chan<- (<-chan int))(nil)\n+var C7 chan <- chan <- int = (chan<- (chan<- int))(nil)\n+\n+var C8 <- chan <- chan chan int = (<-chan (<-chan (chan int)))(nil)\n+var C9 <- chan chan <- chan int = (<-chan (chan<- (chan int)))(nil)\n+var C10 chan <- <- chan chan int = (chan<- (<-chan (chan int)))(nil)\n+var C11 chan <- chan <- chan int = (chan<- (chan<- (chan int)))(nil)\n+var C12 chan chan <- <- chan int = (chan (chan<- (<-chan int)))(nil)\n+var C13 chan chan <- chan <- int = (chan (chan<- (chan<- int)))(nil)\n+\n+var R1 chan<- (chan int) = (chan <- chan int)(nil)\n+var R3 <-chan (chan int) = (<- chan chan int)(nil)\n+var R4 chan (chan<- int) = (chan chan <- int)(nil)\n+\n+var R5 <-chan (<-chan int) = (<- chan <- chan int)(nil)\n+var R6 chan<- (<-chan int) = (chan <- <- chan int)(nil)\n+var R7 chan<- (chan<- int) = (chan <- chan <- int)(nil)\n+\n+var R8 <-chan (<-chan (chan int)) = (<- chan <- chan chan int)(nil)\n+var R9 <-chan (chan<- (chan int)) = (<- chan chan <- chan int)(nil)\n+var R10 chan<- (<-chan (chan int)) = (chan <- <- chan chan int)(nil)\n+var R11 chan<- (chan<- (chan int)) = (chan <- chan <- chan int)(nil)\n+var R12 chan (chan<- (<-chan int)) = (chan chan <- <- chan int)(nil)\n+var R13 chan (chan<- (chan<- int)) = (chan chan <- chan <- int)(nil)\n+\n+var F1 func() func() int\n+func F2() func() func() int\n+func F3(func() func() int)"}, {"sha": "d7fe37b19969b1c727a6668e687558f6cbc899eb", "filename": "gcc/testsuite/go.test/test/import2.dir/import3.go", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.dir%2Fimport3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,8 +1,3 @@\n-// $G $D/import2.go && $G $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n-\n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.", "previous_filename": "gcc/testsuite/go.test/test/import3.go"}, {"sha": "f8d0b0a0fd9b2d4272e74871058c968ccfc3b6c9", "filename": "gcc/testsuite/go.test/test/import2.go", "status": "modified", "additions": 3, "deletions": 40, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,45 +1,8 @@\n-// skip # used by import3\n+// compiledir\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// Various declarations of exported variables and functions.\n-// Imported by import3.go.\n-\n-package p\n-\n-var C1 chan <- chan int = (chan<- (chan int))(nil)\n-var C2 chan (<- chan int) = (chan (<-chan int))(nil)\n-var C3 <- chan chan int = (<-chan (chan int))(nil)\n-var C4 chan chan <- int = (chan (chan<- int))(nil)\n-\n-var C5 <- chan <- chan int = (<-chan (<-chan int))(nil)\n-var C6 chan <- <- chan int = (chan<- (<-chan int))(nil)\n-var C7 chan <- chan <- int = (chan<- (chan<- int))(nil)\n-\n-var C8 <- chan <- chan chan int = (<-chan (<-chan (chan int)))(nil)\n-var C9 <- chan chan <- chan int = (<-chan (chan<- (chan int)))(nil)\n-var C10 chan <- <- chan chan int = (chan<- (<-chan (chan int)))(nil)\n-var C11 chan <- chan <- chan int = (chan<- (chan<- (chan int)))(nil)\n-var C12 chan chan <- <- chan int = (chan (chan<- (<-chan int)))(nil)\n-var C13 chan chan <- chan <- int = (chan (chan<- (chan<- int)))(nil)\n-\n-var R1 chan<- (chan int) = (chan <- chan int)(nil)\n-var R3 <-chan (chan int) = (<- chan chan int)(nil)\n-var R4 chan (chan<- int) = (chan chan <- int)(nil)\n-\n-var R5 <-chan (<-chan int) = (<- chan <- chan int)(nil)\n-var R6 chan<- (<-chan int) = (chan <- <- chan int)(nil)\n-var R7 chan<- (chan<- int) = (chan <- chan <- int)(nil)\n-\n-var R8 <-chan (<-chan (chan int)) = (<- chan <- chan chan int)(nil)\n-var R9 <-chan (chan<- (chan int)) = (<- chan chan <- chan int)(nil)\n-var R10 chan<- (<-chan (chan int)) = (chan <- <- chan chan int)(nil)\n-var R11 chan<- (chan<- (chan int)) = (chan <- chan <- chan int)(nil)\n-var R12 chan (chan<- (<-chan int)) = (chan chan <- <- chan int)(nil)\n-var R13 chan (chan<- (chan<- int)) = (chan chan <- chan <- int)(nil)\n-\n-var F1 func() func() int\n-func F2() func() func() int\n-func F3(func() func() int)\n+// Tests that export data does not corrupt type syntax.\n+package ignored"}, {"sha": "1dffa170dfcb6f433c0695285aa5a79bc981be61", "filename": "gcc/testsuite/go.test/test/import4.dir/empty.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fempty.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fempty.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fempty.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,10 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package empty\n+\n+import ( )\n+const ( )\n+var ( )\n+type ( )"}, {"sha": "f92c663d04b741f33c536427700149ed06a8d22b", "filename": "gcc/testsuite/go.test/test/import4.dir/import4.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.dir%2Fimport4.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Verify that various kinds of \"imported and not used\"\n+// errors are caught by the compiler.\n+// Does not compile.\n+\n+package main\n+\n+// standard\n+import \"fmt\"\t// ERROR \"imported and not used.*fmt\"\n+\n+// renamed\n+import X \"math\"\t// ERROR \"imported and not used.*math\"\n+\n+// import dot\n+import . \"bufio\"\t// ERROR \"imported and not used.*bufio\"\n+\n+// again, package without anything in it\n+import \"./empty\"\t// GC_ERROR \"imported and not used.*empty\"\n+import Z \"./empty\"\t// GC_ERROR \"imported and not used.*empty\"\n+import . \"./empty\"\t// ERROR \"imported and not used.*empty\"\n+"}, {"sha": "875bf894302e1e176a5676106b4a1cee98bdf705", "filename": "gcc/testsuite/go.test/test/import4.go", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fimport4.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// $G $D/empty.go && errchk $G $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckdir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -11,19 +8,4 @@\n // errors are caught by the compiler.\n // Does not compile.\n \n-package main\n-\n-// standard\n-import \"fmt\"\t// ERROR \"imported and not used.*fmt\"\n-\n-// renamed\n-import X \"math\"\t// ERROR \"imported and not used.*math\"\n-\n-// import dot\n-import . \"bufio\"\t// ERROR \"imported and not used.*bufio\"\n-\n-// again, package without anything in it\n-import \"./empty\"\t// ERROR \"imported and not used.*empty\"\n-import Z \"./empty\"\t// ERROR \"imported and not used.*empty\"\n-import . \"./empty\"\t// ERROR \"imported and not used.*empty\"\n-\n+package ignored"}, {"sha": "a8c471bb3bf647ee49203232894dc3f8c079ef2d", "filename": "gcc/testsuite/go.test/test/index.go", "status": "modified", "additions": 50, "deletions": 19, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Findex.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -36,6 +36,8 @@ const (\n \tci64big int64 = 1<<31\n \tci64bigger int64 = 1<<32\n \tchuge = 1<<100\n+\tcfgood = 2.0\n+\tcfbad = 2.1\n \n \tcnj = -2\n \tcni int = -3\n@@ -46,6 +48,8 @@ const (\n \tcni64big int64 = -1<<31\n \tcni64bigger int64 = -1<<32\n \tcnhuge = -1<<100\n+\tcnfgood = -2.0\n+\tcnfbad = -2.1\n )\n \n var j int = 100020\n@@ -57,6 +61,8 @@ var i64 int64 = 100023\n var i64big int64 = 1<<31\n var i64bigger int64 = 1<<32\n var huge uint64 = 1<<64 - 1\n+var fgood float64 = 2.0\n+var fbad float64 = 2.1\n \n var nj int = -10\n var ni int = -11\n@@ -67,6 +73,8 @@ var ni64 int64 = -13\n var ni64big int64 = -1<<31\n var ni64bigger int64 = -1<<32\n var nhuge int64 = -1<<63\n+var nfgood float64 = -2.0\n+var nfbad float64 = -2.1\n \n var si []int = make([]int, 10)\n var ai [10]int\n@@ -156,7 +164,7 @@ func testExpr(b *bufio.Writer, expr string) {\n \tif pass == 0 {\n \t\tfmt.Fprintf(b, \"\\ttest(func(){use(%s)}, %q)\\n\", expr, expr)\n \t} else {\n-\t\tfmt.Fprintf(b, \"\\tuse(%s)  // ERROR \\\"index|overflow\\\"\\n\", expr)\n+\t\tfmt.Fprintf(b, \"\\tuse(%s)  // ERROR \\\"index|overflow|truncated|must be integer\\\"\\n\", expr)\n \t}\n }\n \n@@ -169,15 +177,15 @@ func main() {\n \t\tfmt.Fprint(b, \"// errorcheck\\n\\n\")\n \t}\n \tfmt.Fprint(b, prolog)\n-\t\n+\n \tvar choices = [][]string{\n \t\t// Direct value, fetch from struct, fetch from struct pointer.\n \t\t// The last two cases get us to oindex_const_sudo in gsubr.c.\n \t\t[]string{\"\", \"t.\", \"pt.\"},\n-\t\t\n+\n \t\t// Array, pointer to array, slice.\n \t\t[]string{\"a\", \"pa\", \"s\"},\n-\t\t\n+\n \t\t// Element is int, element is quad (struct).\n \t\t// This controls whether we end up in gsubr.c (i) or cgen.c (q).\n \t\t[]string{\"i\", \"q\"},\n@@ -192,9 +200,9 @@ func main() {\n \t\t[]string{\"\", \"n\"},\n \n \t\t// Size of index.\n-\t\t[]string{\"j\", \"i\", \"i8\", \"i16\", \"i32\", \"i64\", \"i64big\", \"i64bigger\", \"huge\"},\n+\t\t[]string{\"j\", \"i\", \"i8\", \"i16\", \"i32\", \"i64\", \"i64big\", \"i64bigger\", \"huge\", \"fgood\", \"fbad\"},\n \t}\n-\t\n+\n \tforall(choices, func(x []string) {\n \t\tp, a, e, big, c, n, i := x[0], x[1], x[2], x[3], x[4], x[5], x[6]\n \n@@ -206,7 +214,7 @@ func main() {\n \t\t//\tnegative constant\n \t\t//\tlarge constant\n \t\tthisPass := 0\n-\t\tif c == \"c\" && (a == \"a\" || a == \"pa\" || n == \"n\" || i == \"i64big\" || i == \"i64bigger\" || i == \"huge\") {\n+\t\tif c == \"c\" && (a == \"a\" || a == \"pa\" || n == \"n\" || i == \"i64big\" || i == \"i64bigger\" || i == \"huge\" || i == \"fbad\") {\n \t\t\tif i == \"huge\" {\n \t\t\t\t// Due to a detail of 6g's internals,\n \t\t\t\t// the huge constant errors happen in an\n@@ -223,27 +231,50 @@ func main() {\n \t\t\t\tthisPass = 2\n \t\t\t}\n \t\t}\n-\t\t\n+\n+\t\tpae := p + a + e + big\n+\t\tcni := c + n + i\n+\n \t\t// If we're using the big-len data, positive int8 and int16 cannot overflow.\n \t\tif big == \"b\" && n == \"\" && (i == \"i8\" || i == \"i16\") {\n+\t\t\tif pass == 0 {\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[0:%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[1:%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s:])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s:%s])\\n\", pae, cni, cni)\n+\t\t\t}\n+\t\t\treturn\n+\t\t}\n+\n+\t\t// Float variables cannot be used as indices.\n+\t\tif c == \"\" && (i == \"fgood\" || i == \"fbad\") {\n+\t\t\treturn\n+\t\t}\n+\t\t// Integral float constat is ok.\n+\t\tif c == \"c\" && n == \"\" && i == \"fgood\" {\n+\t\t\tif pass == 0 {\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[0:%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[1:%s])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s:])\\n\", pae, cni)\n+\t\t\t\tfmt.Fprintf(b, \"\\tuse(%s[%s:%s])\\n\", pae, cni, cni)\n+\t\t\t}\n \t\t\treturn\n \t\t}\n \n \t\t// Only print the test case if it is appropriate for this pass.\n \t\tif thisPass == pass {\n-\t\t\tpae := p+a+e+big\n-\t\t\tcni := c+n+i\n-\t\t\t\n \t\t\t// Index operation\n-\t\t\ttestExpr(b, pae + \"[\" + cni + \"]\")\n-\t\t\t\n+\t\t\ttestExpr(b, pae+\"[\"+cni+\"]\")\n+\n \t\t\t// Slice operation.\n \t\t\t// Low index 0 is a special case in ggen.c\n \t\t\t// so test both 0 and 1.\n-\t\t\ttestExpr(b, pae + \"[0:\" + cni + \"]\")\n-\t\t\ttestExpr(b, pae + \"[1:\" + cni + \"]\")\n-\t\t\ttestExpr(b, pae + \"[\" + cni + \":]\")\n-\t\t\ttestExpr(b, pae + \"[\" + cni + \":\" + cni + \"]\")\n+\t\t\ttestExpr(b, pae+\"[0:\"+cni+\"]\")\n+\t\t\ttestExpr(b, pae+\"[1:\"+cni+\"]\")\n+\t\t\ttestExpr(b, pae+\"[\"+cni+\":]\")\n+\t\t\ttestExpr(b, pae+\"[\"+cni+\":\"+cni+\"]\")\n \t\t}\n \t})\n \n@@ -253,15 +284,15 @@ func main() {\n \n func forall(choices [][]string, f func([]string)) {\n \tx := make([]string, len(choices))\n-\t\n+\n \tvar recurse func(d int)\n \trecurse = func(d int) {\n \t\tif d >= len(choices) {\n \t\t\tf(x)\n \t\t\treturn\n \t\t}\n \t\tfor _, x[d] = range choices[d] {\n-\t\t\trecurse(d+1)\n+\t\t\trecurse(d + 1)\n \t\t}\n \t}\n \trecurse(0)"}, {"sha": "f6eda6edfea011941eb5f38d53c5d6d394a0eadb", "filename": "gcc/testsuite/go.test/test/init1.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -33,6 +33,7 @@ func init() {\n \tsys1 := memstats.Sys\n \tif sys1-sys > chunk*50 {\n \t\tprintln(\"allocated 1000 chunks of\", chunk, \"and used \", sys1-sys, \"memory\")\n+\t\tpanic(\"init1\")\n \t}\n }\n "}, {"sha": "ca05414554d3480cabe1ce6a52207e8f72390644", "filename": "gcc/testsuite/go.test/test/initializerr.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finitializerr.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -26,3 +26,15 @@ var a5 = []byte { x: 2 }\t// ERROR \"index\"\n \n var ok1 = S { }\t// should be ok\n var ok2 = T { S: ok1 }\t// should be ok\n+\n+// These keys can be computed at compile time but they are\n+// not constants as defined by the spec, so they do not trigger\n+// compile-time errors about duplicate key values.\n+// See issue 4555.\n+\n+type Key struct {X, Y int}\n+\n+var _ = map[Key]string{\n+\tKey{1,2}: \"hello\",\n+\tKey{1,2}: \"world\",\n+}"}, {"sha": "728bec74e876ca73f2bea8d764b88b03b17189dd", "filename": "gcc/testsuite/go.test/test/interface/embed1.dir/embed0.go", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed0.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed0.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed0.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,5 +1,3 @@\n-// skip # used by embed1.go\n-\n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.", "previous_filename": "gcc/testsuite/go.test/test/interface/embed0.go"}, {"sha": "7dfb1dbc0ad416533286bfdeb1083b32a067622c", "filename": "gcc/testsuite/go.test/test/interface/embed1.dir/embed1.go", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.dir%2Fembed1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that embedded interface types can have local methods.\n+\n+package main\n+\n+import \"./embed0\"\n+\n+type T int\n+func (t T) m() {}\n+\n+type I interface { m() }\n+type J interface { I }\n+\n+type PI interface { p.I }\n+type PJ interface { p.J }\n+\n+func main() {\n+\tvar i I\n+\tvar j J\n+\tvar t T\n+\ti = t\n+\tj = t\n+\t_ = i\n+\t_ = j\n+\ti = j\n+\t_ = i\n+\tj = i\n+\t_ = j\n+\tvar pi PI\n+\tvar pj PJ\n+\tvar pt p.T\n+\tpi = pt\n+\tpj = pt\n+\t_ = pi\n+\t_ = pj\n+\tpi = pj\n+\t_ = pi\n+\tpj = pi\n+\t_ = pj\n+}"}, {"sha": "784b82bb072b683b9f8caa3390e2b1a154d63aad", "filename": "gcc/testsuite/go.test/test/interface/embed1.go", "status": "modified", "additions": 2, "deletions": 41, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fembed1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,48 +1,9 @@\n-// $G $D/embed0.go && $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Test that embedded interface types can have local methods.\n \n-package main\n-\n-import \"./embed0\"\n-\n-type T int\n-func (t T) m() {}\n-\n-type I interface { m() }\n-type J interface { I }\n-\n-type PI interface { p.I }\n-type PJ interface { p.J }\n-\n-func main() {\n-\tvar i I\n-\tvar j J\n-\tvar t T\n-\ti = t\n-\tj = t\n-\t_ = i\n-\t_ = j\n-\ti = j\n-\t_ = i\n-\tj = i\n-\t_ = j\n-\tvar pi PI\n-\tvar pj PJ\n-\tvar pt p.T\n-\tpi = pt\n-\tpj = pt\n-\t_ = pi\n-\t_ = pj\n-\tpi = pj\n-\t_ = pi\n-\tpj = pi\n-\t_ = pj\n-}\n+package ignored"}, {"sha": "75eee51f5a0509c287cc0a7f8682f09c777a0589", "filename": "gcc/testsuite/go.test/test/interface/private.dir/private1.go", "status": "renamed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprivate1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprivate1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprivate1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,5 +1,3 @@\n-// skip # used by private.go\n-\n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.", "previous_filename": "gcc/testsuite/go.test/test/interface/private1.go"}, {"sha": "abea7d625c762b0f465a7c31d91ef9e3342414fa", "filename": "gcc/testsuite/go.test/test/interface/private.dir/prog.go", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that unexported methods are not visible outside the package.\n+// Does not compile.\n+\n+package main\n+\n+import \"./private1\"\n+\n+type Exported interface {\n+\tprivate()\n+}\n+\n+type Implementation struct{}\n+\n+func (p *Implementation) private() {}\n+\n+func main() {\n+\tvar x Exported\n+\tx = new(Implementation)\n+\tx.private()\n+\n+\tvar px p.Exported\n+\tpx = p.X\n+\n+\tpx.private()\t\t\t// ERROR \"private\"\n+\n+\tpx = new(Implementation)\t// ERROR \"private\"\n+\n+\tx = px\t\t\t\t// ERROR \"private\"\n+}"}, {"sha": "a0da249c92c505801ed250f252a13e7180f4b940", "filename": "gcc/testsuite/go.test/test/interface/private.go", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fprivate.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,7 +1,4 @@\n-// $G $D/${F}1.go && errchk $G $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckdir\n \n // Copyright 2011 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -10,29 +7,4 @@\n // Test that unexported methods are not visible outside the package.\n // Does not compile.\n \n-package main\n-\n-import \"./private1\"\n-\n-type Exported interface {\n-\tprivate()\n-}\n-\n-type Implementation struct{}\n-\n-func (p *Implementation) private() {}\n-\n-func main() {\n-\tvar x Exported\n-\tx = new(Implementation)\n-\tx.private()\n-\n-\tvar px p.Exported\n-\tpx = p.X\n-\n-\tpx.private()\t\t\t// ERROR \"private\"\n-\n-\tpx = new(Implementation)\t// ERROR \"private\"\n-\n-\tx = px\t\t\t\t// ERROR \"private\"\n-}\n+package ignored"}, {"sha": "441f0ecaa5a63fbba0c8e17edb577c540eafa43b", "filename": "gcc/testsuite/go.test/test/interface/recursive1.dir/recursive1.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Mutually recursive type definitions imported and used by recursive1.go.\n+\n+package p\n+\n+type I1 interface {\n+\tF() I2\n+}\n+\n+type I2 interface {\n+\tI1\n+}"}, {"sha": "e8048c672b2f0e09eb78a5c9747e20c893f47d2e", "filename": "gcc/testsuite/go.test/test/interface/recursive1.dir/recursive2.go", "status": "renamed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.dir%2Frecursive2.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,8 +1,3 @@\n-// $G $D/recursive1.go && $G $D/$F.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n-\n // Copyright 2012 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.", "previous_filename": "gcc/testsuite/go.test/test/interface/recursive2.go"}, {"sha": "62f61088441d02f60e5c6d042a8dfa342eae0752", "filename": "gcc/testsuite/go.test/test/interface/recursive1.go", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,17 +1,9 @@\n-// skip # used by recursive2\n+// compiledir\n \n // Copyright 2012 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Mutually recursive type definitions imported and used by recursive1.go.\n \n-package p\n-\n-type I1 interface {\n-\tF() I2\n-}\n-\n-type I2 interface {\n-\tI1\n-}\n+package ignored"}, {"sha": "c3d6bc123a6b0c9997ac8ee3816d1ed6640cef61", "filename": "gcc/testsuite/go.test/test/literal.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fliteral.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fliteral.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fliteral.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -24,7 +24,6 @@ func equal(a, b float32) bool {\n \treturn a == b\n }\n \n-\n func main() {\n \t// bool\n \tvar t bool = true\n@@ -225,6 +224,6 @@ func main() {\n \tassert(sj0 == sj3, \"sj3\")\n \n \tif nbad > 0 {\n-\t\tprintln()\n+\t\tpanic(\"literal failed\")\n \t}\n }"}, {"sha": "485e743fe4624371c97ff4db1f02d4067c0b946e", "filename": "gcc/testsuite/go.test/test/map.go", "status": "modified", "additions": 136, "deletions": 145, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -5,14 +5,14 @@\n // license that can be found in the LICENSE file.\n \n // Test maps, almost exhaustively.\n+// NaN complexity test is in mapnan.go.\n \n package main\n \n import (\n \t\"fmt\"\n \t\"math\"\n \t\"strconv\"\n-\t\"time\"\n )\n \n const count = 100\n@@ -41,7 +41,7 @@ func testbasic() {\n \tfor i := 0; i < len(mlit); i++ {\n \t\ts := string([]byte{byte(i) + '0'})\n \t\tif mlit[s] != i {\n-\t\t\tfmt.Printf(\"mlit[%s] = %d\\n\", s, mlit[s])\n+\t\t\tpanic(fmt.Sprintf(\"mlit[%s] = %d\\n\", s, mlit[s]))\n \t\t}\n \t}\n \n@@ -102,46 +102,46 @@ func testbasic() {\n \n \t// test len\n \tif len(mib) != count {\n-\t\tfmt.Printf(\"len(mib) = %d\\n\", len(mib))\n+\t\tpanic(fmt.Sprintf(\"len(mib) = %d\\n\", len(mib)))\n \t}\n \tif len(mii) != count {\n-\t\tfmt.Printf(\"len(mii) = %d\\n\", len(mii))\n+\t\tpanic(fmt.Sprintf(\"len(mii) = %d\\n\", len(mii)))\n \t}\n \tif len(mfi) != count {\n-\t\tfmt.Printf(\"len(mfi) = %d\\n\", len(mfi))\n+\t\tpanic(fmt.Sprintf(\"len(mfi) = %d\\n\", len(mfi)))\n \t}\n \tif len(mif) != count {\n-\t\tfmt.Printf(\"len(mif) = %d\\n\", len(mif))\n+\t\tpanic(fmt.Sprintf(\"len(mif) = %d\\n\", len(mif)))\n \t}\n \tif len(msi) != count {\n-\t\tfmt.Printf(\"len(msi) = %d\\n\", len(msi))\n+\t\tpanic(fmt.Sprintf(\"len(msi) = %d\\n\", len(msi)))\n \t}\n \tif len(mis) != count {\n-\t\tfmt.Printf(\"len(mis) = %d\\n\", len(mis))\n+\t\tpanic(fmt.Sprintf(\"len(mis) = %d\\n\", len(mis)))\n \t}\n \tif len(mss) != count {\n-\t\tfmt.Printf(\"len(mss) = %d\\n\", len(mss))\n+\t\tpanic(fmt.Sprintf(\"len(mss) = %d\\n\", len(mss)))\n \t}\n \tif len(mspa) != count {\n-\t\tfmt.Printf(\"len(mspa) = %d\\n\", len(mspa))\n+\t\tpanic(fmt.Sprintf(\"len(mspa) = %d\\n\", len(mspa)))\n \t}\n \tif len(mipT) != count {\n-\t\tfmt.Printf(\"len(mipT) = %d\\n\", len(mipT))\n+\t\tpanic(fmt.Sprintf(\"len(mipT) = %d\\n\", len(mipT)))\n \t}\n \tif len(mpTi) != count {\n-\t\tfmt.Printf(\"len(mpTi) = %d\\n\", len(mpTi))\n+\t\tpanic(fmt.Sprintf(\"len(mpTi) = %d\\n\", len(mpTi)))\n \t}\n \t//\tif len(mti) != count {\n-\t//\t\tfmt.Printf(\"len(mti) = %d\\n\", len(mti))\n+\t//              panic(fmt.Sprintf(\"len(mti) = %d\\n\", len(mti)))\n \t//\t}\n \tif len(mipM) != count {\n-\t\tfmt.Printf(\"len(mipM) = %d\\n\", len(mipM))\n+\t\tpanic(fmt.Sprintf(\"len(mipM) = %d\\n\", len(mipM)))\n \t}\n \t//\tif len(mti) != count {\n-\t//\t\tfmt.Printf(\"len(mti) = %d\\n\", len(mti))\n+\t//\t\tpanic(fmt.Sprintf(\"len(mti) = %d\\n\", len(mti)))\n \t//\t}\n \tif len(mit) != count {\n-\t\tfmt.Printf(\"len(mit) = %d\\n\", len(mit))\n+\t\tpanic(fmt.Sprintf(\"len(mit) = %d\\n\", len(mit)))\n \t}\n \n \t// test construction directly\n@@ -151,48 +151,48 @@ func testbasic() {\n \t\tf := float32(i)\n \t\t// BUG m := M(i, i+1)\n \t\tif mib[i] != (i != 0) {\n-\t\t\tfmt.Printf(\"mib[%d] = %t\\n\", i, mib[i])\n+\t\t\tpanic(fmt.Sprintf(\"mib[%d] = %t\\n\", i, mib[i]))\n \t\t}\n \t\tif mii[i] != 10*i {\n-\t\t\tfmt.Printf(\"mii[%d] = %d\\n\", i, mii[i])\n+\t\t\tpanic(fmt.Sprintf(\"mii[%d] = %d\\n\", i, mii[i]))\n \t\t}\n \t\tif mfi[f] != 10*i {\n-\t\t\tfmt.Printf(\"mfi[%d] = %d\\n\", i, mfi[f])\n+\t\t\tpanic(fmt.Sprintf(\"mfi[%d] = %d\\n\", i, mfi[f]))\n \t\t}\n \t\tif mif[i] != 10.0*f {\n-\t\t\tfmt.Printf(\"mif[%d] = %g\\n\", i, mif[i])\n+\t\t\tpanic(fmt.Sprintf(\"mif[%d] = %g\\n\", i, mif[i]))\n \t\t}\n \t\tif mis[i] != s {\n-\t\t\tfmt.Printf(\"mis[%d] = %s\\n\", i, mis[i])\n+\t\t\tpanic(fmt.Sprintf(\"mis[%d] = %s\\n\", i, mis[i]))\n \t\t}\n \t\tif msi[s] != i {\n-\t\t\tfmt.Printf(\"msi[%s] = %d\\n\", s, msi[s])\n+\t\t\tpanic(fmt.Sprintf(\"msi[%s] = %d\\n\", s, msi[s]))\n \t\t}\n \t\tif mss[s] != s10 {\n-\t\t\tfmt.Printf(\"mss[%s] = %g\\n\", s, mss[s])\n+\t\t\tpanic(fmt.Sprintf(\"mss[%s] = %g\\n\", s, mss[s]))\n \t\t}\n \t\tfor j := 0; j < len(mspa[s]); j++ {\n \t\t\tif mspa[s][j] != s10 {\n-\t\t\t\tfmt.Printf(\"mspa[%s][%d] = %s\\n\", s, j, mspa[s][j])\n+\t\t\t\tpanic(fmt.Sprintf(\"mspa[%s][%d] = %s\\n\", s, j, mspa[s][j]))\n \t\t\t}\n \t\t}\n \t\tif mipT[i].i != int64(i) || mipT[i].f != f {\n-\t\t\tfmt.Printf(\"mipT[%d] = %v\\n\", i, mipT[i])\n+\t\t\tpanic(fmt.Sprintf(\"mipT[%d] = %v\\n\", i, mipT[i]))\n \t\t}\n \t\tif mpTi[apT[i]] != i {\n-\t\t\tfmt.Printf(\"mpTi[apT[%d]] = %d\\n\", i, mpTi[apT[i]])\n+\t\t\tpanic(fmt.Sprintf(\"mpTi[apT[%d]] = %d\\n\", i, mpTi[apT[i]]))\n \t\t}\n \t\t//\tif(mti[t] != i) {\n-\t\t//\t\tfmt.Printf(\"mti[%s] = %s\\n\", s, mti[t])\n+\t\t//\t\tpanic(fmt.Sprintf(\"mti[%s] = %s\\n\", s, mti[t]))\n \t\t//\t}\n \t\tif mipM[i][i] != i+1 {\n-\t\t\tfmt.Printf(\"mipM[%d][%d] = %d\\n\", i, i, mipM[i][i])\n+\t\t\tpanic(fmt.Sprintf(\"mipM[%d][%d] = %d\\n\", i, i, mipM[i][i]))\n \t\t}\n \t\t//\tif(mti[t] != i) {\n-\t\t//\t\tfmt.Printf(\"mti[%v] = %d\\n\", t, mti[t])\n+\t\t//\t\tpanic(fmt.Sprintf(\"mti[%v] = %d\\n\", t, mti[t]))\n \t\t//\t}\n \t\tif mit[i].i != int64(i) || mit[i].f != f {\n-\t\t\tfmt.Printf(\"mit[%d] = {%d %g}\\n\", i, mit[i].i, mit[i].f)\n+\t\t\tpanic(fmt.Sprintf(\"mit[%d] = {%d %g}\\n\", i, mit[i].i, mit[i].f))\n \t\t}\n \t}\n \n@@ -204,131 +204,131 @@ func testbasic() {\n \t\t{\n \t\t\t_, b := mib[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mib[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mib[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mib[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mib[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mib[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mii[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mii[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mii[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mii[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mii[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mii[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mfi[f]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mfi[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mfi[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mfi[f]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mfi[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mfi[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mif[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mif[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mif[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mif[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mif[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mif[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mis[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mis[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mis[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mis[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mis[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mis[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := msi[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: msi[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: msi[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = msi[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: msi[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: msi[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mss[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mss[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mss[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mss[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mss[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mss[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mspa[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mspa[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mspa[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mspa[s]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mspa[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mspa[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mipT[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mipT[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mipT[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mipT[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mipT[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mipT[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mpTi[apT[i]]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mpTi[apT[%d]]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mpTi[apT[%d]]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mpTi[apT[i]]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mpTi[apT[%d]]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mpTi[apT[%d]]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mipM[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mipM[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mipM[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mipM[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mipM[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mipM[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mit[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence decl: mit[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mit[%d]\\n\", i))\n \t\t\t}\n \t\t\t_, b = mit[i]\n \t\t\tif !b {\n-\t\t\t\tfmt.Printf(\"tuple existence assign: mit[%d]\\n\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mit[%d]\\n\", i))\n \t\t\t}\n \t\t}\n \t\t//\t\t{\n \t\t//\t\t\t_, b := mti[t]\n \t\t//\t\t\tif !b {\n-\t\t//\t\t\t\tfmt.Printf(\"tuple existence decl: mti[%d]\\n\", i)\n+\t\t//\t\t\t\tpanic(fmt.Sprintf(\"tuple existence decl: mti[%d]\\n\", i))\n \t\t//\t\t\t}\n \t\t//\t\t\t_, b = mti[t]\n \t\t//\t\t\tif !b {\n-\t\t//\t\t\t\tfmt.Printf(\"tuple existence assign: mti[%d]\\n\", i)\n+\t\t//\t\t\t\tpanic(fmt.Sprintf(\"tuple existence assign: mti[%d]\\n\", i))\n \t\t//\t\t\t}\n \t\t//\t\t}\n \t}\n@@ -341,131 +341,131 @@ func testbasic() {\n \t\t{\n \t\t\t_, b := mib[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mib[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mib[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mib[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mib[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mib[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mii[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mii[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mii[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mii[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mii[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mii[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mfi[f]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mfi[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mfi[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mfi[f]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mfi[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mfi[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mif[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mif[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mif[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mif[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mif[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mif[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mis[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mis[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mis[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mis[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mis[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mis[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := msi[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: msi[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: msi[%d]\", i))\n \t\t\t}\n \t\t\t_, b = msi[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: msi[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: msi[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mss[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mss[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mss[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mss[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mss[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mss[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mspa[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mspa[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mspa[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mspa[s]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mspa[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mspa[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mipT[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mipT[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mipT[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mipT[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mipT[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mipT[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mpTi[apT[i]]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mpTi[apt[%d]]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mpTi[apt[%d]]\", i))\n \t\t\t}\n \t\t\t_, b = mpTi[apT[i]]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mpTi[apT[%d]]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mpTi[apT[%d]]\", i))\n \t\t\t}\n \t\t}\n \t\t{\n \t\t\t_, b := mipM[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mipM[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mipM[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mipM[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mipM[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mipM[%d]\", i))\n \t\t\t}\n \t\t}\n \t\t//\t\t{\n \t\t//\t\t\t_, b := mti[t]\n \t\t//\t\t\tif b {\n-\t\t//\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mti[%d]\", i)\n+\t\t//\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mti[%d]\", i))\n \t\t//\t\t\t}\n \t\t//\t\t\t_, b = mti[t]\n \t\t//\t\t\tif b {\n-\t\t//\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mti[%d]\", i)\n+\t\t//\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mti[%d]\", i))\n \t\t//\t\t\t}\n \t\t//\t\t}\n \t\t{\n \t\t\t_, b := mit[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence decl: mit[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence decl: mit[%d]\", i))\n \t\t\t}\n \t\t\t_, b = mit[i]\n \t\t\tif b {\n-\t\t\t\tfmt.Printf(\"tuple nonexistence assign: mit[%d]\", i)\n+\t\t\t\tpanic(fmt.Sprintf(\"tuple nonexistence assign: mit[%d]\", i))\n \t\t\t}\n \t\t}\n \t}\n@@ -475,21 +475,25 @@ func testbasic() {\n \t\ts := strconv.Itoa(i)\n \t\tmspa[s][i%2] = \"deleted\"\n \t\tif mspa[s][i%2] != \"deleted\" {\n-\t\t\tfmt.Printf(\"update mspa[%s][%d] = %s\\n\", s, i%2, mspa[s][i%2])\n+\t\t\tpanic(fmt.Sprintf(\"update mspa[%s][%d] = %s\\n\", s, i%2, mspa[s][i%2]))\n+\n \t\t}\n \n \t\tmipT[i].i += 1\n \t\tif mipT[i].i != int64(i)+1 {\n-\t\t\tfmt.Printf(\"update mipT[%d].i = %d\\n\", i, mipT[i].i)\n+\t\t\tpanic(fmt.Sprintf(\"update mipT[%d].i = %d\\n\", i, mipT[i].i))\n+\n \t\t}\n \t\tmipT[i].f = float32(i + 1)\n \t\tif mipT[i].f != float32(i+1) {\n-\t\t\tfmt.Printf(\"update mipT[%d].f = %g\\n\", i, mipT[i].f)\n+\t\t\tpanic(fmt.Sprintf(\"update mipT[%d].f = %g\\n\", i, mipT[i].f))\n+\n \t\t}\n \n \t\tmipM[i][i]++\n \t\tif mipM[i][i] != (i+1)+1 {\n-\t\t\tfmt.Printf(\"update mipM[%d][%d] = %d\\n\", i, i, mipM[i][i])\n+\t\t\tpanic(fmt.Sprintf(\"update mipM[%d][%d] = %d\\n\", i, i, mipM[i][i]))\n+\n \t\t}\n \t}\n \n@@ -519,29 +523,29 @@ func testfloat() {\n \t\t\tnanb: \"NaN\",\n \t\t}\n \t\tif m[pz] != \"+0\" {\n-\t\t\tfmt.Println(\"float32 map cannot read back m[+0]:\", m[pz])\n+\t\t\tpanic(fmt.Sprintln(\"float32 map cannot read back m[+0]:\", m[pz]))\n \t\t}\n \t\tif m[nz] != \"+0\" {\n-\t\t\tfmt.Println(\"float32 map does not treat\", pz, \"and\", nz, \"as equal for read\")\n-\t\t\tfmt.Println(\"float32 map does not treat -0 and +0 as equal for read\")\n+\t\t\tfmt.Sprintln(\"float32 map does not treat\", pz, \"and\", nz, \"as equal for read\")\n+\t\t\tpanic(fmt.Sprintln(\"float32 map does not treat -0 and +0 as equal for read\"))\n \t\t}\n \t\tm[nz] = \"-0\"\n \t\tif m[pz] != \"-0\" {\n-\t\t\tfmt.Println(\"float32 map does not treat -0 and +0 as equal for write\")\n+\t\t\tpanic(fmt.Sprintln(\"float32 map does not treat -0 and +0 as equal for write\"))\n \t\t}\n \t\tif _, ok := m[nana]; ok {\n-\t\t\tfmt.Println(\"float32 map allows NaN lookup (a)\")\n+\t\t\tpanic(fmt.Sprintln(\"float32 map allows NaN lookup (a)\"))\n \t\t}\n \t\tif _, ok := m[nanb]; ok {\n-\t\t\tfmt.Println(\"float32 map allows NaN lookup (b)\")\n+\t\t\tpanic(fmt.Sprintln(\"float32 map allows NaN lookup (b)\"))\n \t\t}\n \t\tif len(m) != 3 {\n-\t\t\tfmt.Println(\"float32 map should have 3 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"float32 map should have 3 entries:\", m))\n \t\t}\n \t\tm[nana] = \"NaN\"\n \t\tm[nanb] = \"NaN\"\n \t\tif len(m) != 5 {\n-\t\t\tfmt.Println(\"float32 map should have 5 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"float32 map should have 5 entries:\", m))\n \t\t}\n \t}\n \n@@ -559,25 +563,25 @@ func testfloat() {\n \t\t\tnanb: \"NaN\",\n \t\t}\n \t\tif m[nz] != \"+0\" {\n-\t\t\tfmt.Println(\"float64 map does not treat -0 and +0 as equal for read\")\n+\t\t\tpanic(fmt.Sprintln(\"float64 map does not treat -0 and +0 as equal for read\"))\n \t\t}\n \t\tm[nz] = \"-0\"\n \t\tif m[pz] != \"-0\" {\n-\t\t\tfmt.Println(\"float64 map does not treat -0 and +0 as equal for write\")\n+\t\t\tpanic(fmt.Sprintln(\"float64 map does not treat -0 and +0 as equal for write\"))\n \t\t}\n \t\tif _, ok := m[nana]; ok {\n-\t\t\tfmt.Println(\"float64 map allows NaN lookup (a)\")\n+\t\t\tpanic(fmt.Sprintln(\"float64 map allows NaN lookup (a)\"))\n \t\t}\n \t\tif _, ok := m[nanb]; ok {\n-\t\t\tfmt.Println(\"float64 map allows NaN lookup (b)\")\n+\t\t\tpanic(fmt.Sprintln(\"float64 map allows NaN lookup (b)\"))\n \t\t}\n \t\tif len(m) != 3 {\n-\t\t\tfmt.Println(\"float64 map should have 3 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"float64 map should have 3 entries:\", m))\n \t\t}\n \t\tm[nana] = \"NaN\"\n \t\tm[nanb] = \"NaN\"\n \t\tif len(m) != 5 {\n-\t\t\tfmt.Println(\"float64 map should have 5 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"float64 map should have 5 entries:\", m))\n \t\t}\n \t}\n \n@@ -595,25 +599,25 @@ func testfloat() {\n \t\t\tnanb: \"NaN\",\n \t\t}\n \t\tif m[nz] != \"+0\" {\n-\t\t\tfmt.Println(\"complex64 map does not treat -0 and +0 as equal for read\")\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map does not treat -0 and +0 as equal for read\"))\n \t\t}\n \t\tm[nz] = \"-0\"\n \t\tif m[pz] != \"-0\" {\n-\t\t\tfmt.Println(\"complex64 map does not treat -0 and +0 as equal for write\")\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map does not treat -0 and +0 as equal for write\"))\n \t\t}\n \t\tif _, ok := m[nana]; ok {\n-\t\t\tfmt.Println(\"complex64 map allows NaN lookup (a)\")\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map allows NaN lookup (a)\"))\n \t\t}\n \t\tif _, ok := m[nanb]; ok {\n-\t\t\tfmt.Println(\"complex64 map allows NaN lookup (b)\")\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map allows NaN lookup (b)\"))\n \t\t}\n \t\tif len(m) != 3 {\n-\t\t\tfmt.Println(\"complex64 map should have 3 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map should have 3 entries:\", m))\n \t\t}\n \t\tm[nana] = \"NaN\"\n \t\tm[nanb] = \"NaN\"\n \t\tif len(m) != 5 {\n-\t\t\tfmt.Println(\"complex64 map should have 5 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"complex64 map should have 5 entries:\", m))\n \t\t}\n \t}\n \n@@ -631,63 +635,50 @@ func testfloat() {\n \t\t\tnanb: \"NaN\",\n \t\t}\n \t\tif m[nz] != \"+0\" {\n-\t\t\tfmt.Println(\"complex128 map does not treat -0 and +0 as equal for read\")\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map does not treat -0 and +0 as equal for read\"))\n \t\t}\n \t\tm[nz] = \"-0\"\n \t\tif m[pz] != \"-0\" {\n-\t\t\tfmt.Println(\"complex128 map does not treat -0 and +0 as equal for write\")\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map does not treat -0 and +0 as equal for write\"))\n \t\t}\n \t\tif _, ok := m[nana]; ok {\n-\t\t\tfmt.Println(\"complex128 map allows NaN lookup (a)\")\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map allows NaN lookup (a)\"))\n \t\t}\n \t\tif _, ok := m[nanb]; ok {\n-\t\t\tfmt.Println(\"complex128 map allows NaN lookup (b)\")\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map allows NaN lookup (b)\"))\n \t\t}\n \t\tif len(m) != 3 {\n-\t\t\tfmt.Println(\"complex128 map should have 3 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map should have 3 entries:\", m))\n \t\t}\n \t\tm[nana] = \"NaN\"\n \t\tm[nanb] = \"NaN\"\n \t\tif len(m) != 5 {\n-\t\t\tfmt.Println(\"complex128 map should have 5 entries:\", m)\n+\t\t\tpanic(fmt.Sprintln(\"complex128 map should have 5 entries:\", m))\n \t\t}\n \t}\n }\n \n func testnan() {\n-\t// Test that NaNs in maps don't go quadratic.\n-\tt := func(n int) time.Duration {\n-\t\tt0 := time.Now()\n-\t\tm := map[float64]int{}\n-\t\tnan := math.NaN()\n-\t\tfor i := 0; i < n; i++ {\n-\t\t\tm[nan] = 1\n-\t\t}\n-\t\tif len(m) != n {\n-\t\t\tpanic(\"wrong size map after nan insertion\")\n-\t\t}\n-\t\treturn time.Since(t0)\n+\tn := 500\n+\tm := map[float64]int{}\n+\tnan := math.NaN()\n+\tfor i := 0; i < n; i++ {\n+\t\tm[nan] = 1\n \t}\n-\n-\t// Depending on the machine and OS, this test might be too fast\n-\t// to measure with accurate enough granularity. On failure,\n-\t// make it run longer, hoping that the timing granularity\n-\t// is eventually sufficient.\n-\n-\tn := 30000 // 0.02 seconds on a MacBook Air\n-\tfails := 0\n-\tfor {\n-\t\tt1 := t(n)\n-\t\tt2 := t(2 * n)\n-\t\t// should be 2x (linear); allow up to 3x\n-\t\tif t2 < 3*t1 {\n-\t\t\treturn\n-\t\t}\n-\t\tfails++\n-\t\tif fails == 4 {\n-\t\t\tfmt.Printf(\"too slow: %d inserts: %v; %d inserts: %v\\n\", n, t1, 2*n, t2)\n-\t\t\treturn\n-\t\t}\n-\t\tn *= 2\n+\tif len(m) != n {\n+\t\tpanic(\"wrong size map after nan insertion\")\n+\t}\n+\titers := 0\n+\tfor k, v := range m {\n+\t\titers++\n+\t\tif !math.IsNaN(k) {\n+\t\t\tpanic(\"not NaN\")\n+\t\t}\n+\t\tif v != 1 {\n+\t\t\tpanic(\"wrong value\")\n+\t\t}\n+\t}\n+\tif iters != n {\n+\t\tpanic(\"wrong number of nan range iters\")\n \t}\n }"}, {"sha": "60b35fbeaf48e7960ef40c2301c2ea2753dbe893", "filename": "gcc/testsuite/go.test/test/mapnan.go", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmapnan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmapnan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmapnan.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,64 @@\n+// +build darwin linux\n+// run\n+\n+// Copyright 2013 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that NaNs in maps don't go quadratic.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"math\"\n+\t\"time\"\n+\t\"syscall\"\n+)\n+\n+func main() {\n+\n+\t// Test that NaNs in maps don't go quadratic.\n+\tt := func(n int) time.Duration {\n+\t\tvar u0 syscall.Rusage\n+\t\tif err := syscall.Getrusage(0,  &u0); err != nil {\n+\t\t\tpanic(err)\n+\t\t}\n+\t\tm := map[float64]int{}\n+\t\tnan := math.NaN()\n+\t\tfor i := 0; i < n; i++ {\n+\t\t\tm[nan] = 1\n+\t\t}\n+\t\tif len(m) != n {\n+\t\t\tpanic(\"wrong size map after nan insertion\")\n+\t\t}\n+\t\tvar u1 syscall.Rusage\n+\t\tif err := syscall.Getrusage(0,  &u1); err != nil {\n+\t\t\tpanic(err)\n+\t\t}\n+\t\treturn time.Duration(u1.Utime.Nano() - u0.Utime.Nano())\n+\t}\n+\n+\t// Depending on the machine and OS, this test might be too fast\n+\t// to measure with accurate enough granularity. On failure,\n+\t// make it run longer, hoping that the timing granularity\n+\t// is eventually sufficient.\n+\n+\tn := 30000 // ~8ms user time on a Mid 2011 MacBook Air (1.8 GHz Core i7)\n+\tfails := 0\n+\tfor {\n+\t\tt1 := t(n)\n+\t\tt2 := t(2 * n)\n+\t\t// should be 2x (linear); allow up to 3x\n+\t\tif t2 < 3*t1 {\n+\t\t\treturn\n+\t\t}\n+\t\tfails++\n+\t\tif fails == 6 {\n+\t\t\tpanic(fmt.Sprintf(\"too slow: %d inserts: %v; %d inserts: %v\\n\", n, t1, 2*n, t2))\n+\t\t}\n+\t\tif fails < 4 {\n+\t\t\tn *= 2\n+\t\t}\n+\t}\n+}"}, {"sha": "d97bc4a7d0907b8014fe79ab27cca0308b189cea", "filename": "gcc/testsuite/go.test/test/method.go", "status": "modified", "additions": 64, "deletions": 7, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -128,13 +128,13 @@ func main() {\n \t\tpanic(\"fail\")\n \t}\n \n-\tvar zs struct { S }\n-\tvar zps struct { *S1 }\n-\tvar zi struct { I }\n-\tvar zpi struct { *I1 }\n-\tvar zpt struct { *T1 }\n-\tvar zt struct { T }\n-\tvar zv struct { Val }\n+\tvar zs struct{ S }\n+\tvar zps struct{ *S1 }\n+\tvar zi struct{ I }\n+\tvar zpi struct{ *I1 }\n+\tvar zpt struct{ *T1 }\n+\tvar zt struct{ T }\n+\tvar zv struct{ Val }\n \n \tif zs.val() != 1 {\n \t\tprintln(\"zs.val:\", zs.val())\n@@ -247,4 +247,61 @@ func main() {\n \t\tprintln(\"zv.val():\", zv.val())\n \t\tpanic(\"fail\")\n \t}\n+\n+\tpromotion()\n+}\n+\n+type A struct{ B }\n+type B struct {\n+\tC\n+\t*D\n+}\n+type C int\n+\n+func (C) f()  {} // value receiver, direct field of A\n+func (*C) g() {} // pointer receiver\n+\n+type D int\n+\n+func (D) h()  {} // value receiver, indirect field of A\n+func (*D) i() {} // pointer receiver\n+\n+func expectPanic() {\n+\tif r := recover(); r == nil {\n+\t\tpanic(\"expected nil dereference\")\n+\t}\n+}\n+\n+func promotion() {\n+\tvar a A\n+\t// Addressable value receiver.\n+\ta.f()\n+\ta.g()\n+\tfunc() {\n+\t\tdefer expectPanic()\n+\t\ta.h() // dynamic error: nil dereference in a.B.D->f()\n+\t}()\n+\ta.i()\n+\n+\t// Non-addressable value receiver.\n+\tA(a).f()\n+\t// A(a).g() // static error: cannot call pointer method on A literal.B.C\n+\tfunc() {\n+\t\tdefer expectPanic()\n+\t\tA(a).h() // dynamic error: nil dereference in A().B.D->f()\n+\t}()\n+\tA(a).i()\n+\n+\t// Pointer receiver.\n+\t(&a).f()\n+\t(&a).g()\n+\tfunc() {\n+\t\tdefer expectPanic()\n+\t\t(&a).h() // dynamic error: nil deref: nil dereference in (&a).B.D->f()\n+\t}()\n+\t(&a).i()\n+\n+\tc := new(C)\n+\tc.f() // makes a copy\n+\tc.g()\n }"}, {"sha": "a7df04cec366f68e6cd6ab59d38367e41ab85148", "filename": "gcc/testsuite/go.test/test/method4.dir/method4a.go", "status": "renamed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fmethod4a.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fmethod4a.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fmethod4a.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,11 +1,8 @@\n-// skip\n-\n // Copyright 2012 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Test method expressions with arguments.\n-// This file is not tested by itself; it is imported by method4.go.\n \n package method4a\n ", "previous_filename": "gcc/testsuite/go.test/test/method4a.go"}, {"sha": "77d580cffc51b69666912f1221a3967f20ba67b2", "filename": "gcc/testsuite/go.test/test/method4.dir/prog.go", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fprog.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fprog.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.dir%2Fprog.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,104 @@\n+// Copyright 2012 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test method expressions with arguments.\n+\n+package main\n+\n+import \"./method4a\"\n+\n+type T1 int\n+\n+type T2 struct {\n+\tf int\n+}\n+\n+type I1 interface {\n+\tSum([]int, int) int\n+}\n+\n+type I2 interface {\n+\tSum(a []int, b int) int\n+}\n+\n+func (i T1) Sum(a []int, b int) int {\n+\tr := int(i) + b\n+\tfor _, v := range a {\n+\t\tr += v\n+\t}\n+\treturn r\n+}\n+\n+func (p *T2) Sum(a []int, b int) int {\n+\tr := p.f + b\n+\tfor _, v := range a {\n+\t\tr += v\n+\t}\n+\treturn r\n+}\n+\n+func eq(v1, v2 int) {\n+\tif v1 != v2 {\n+\t\tpanic(0)\n+\t}\n+}\n+\n+func main() {\n+\ta := []int{1, 2, 3}\n+\tt1 := T1(4)\n+\tt2 := &T2{4}\n+\n+\teq(t1.Sum(a, 5), 15)\n+\teq(t2.Sum(a, 6), 16)\n+\n+\teq(T1.Sum(t1, a, 7), 17)\n+\teq((*T2).Sum(t2, a, 8), 18)\n+\n+\tf1 := T1.Sum\n+\teq(f1(t1, a, 9), 19)\n+\tf2 := (*T2).Sum\n+\teq(f2(t2, a, 10), 20)\n+\n+\teq(I1.Sum(t1, a, 11), 21)\n+\teq(I1.Sum(t2, a, 12), 22)\n+\n+\tf3 := I1.Sum\n+\teq(f3(t1, a, 13), 23)\n+\teq(f3(t2, a, 14), 24)\n+\n+\teq(I2.Sum(t1, a, 15), 25)\n+\teq(I2.Sum(t2, a, 16), 26)\n+\n+\tf4 := I2.Sum\n+\teq(f4(t1, a, 17), 27)\n+\teq(f4(t2, a, 18), 28)\n+\t\n+\tmt1 := method4a.T1(4)\n+\tmt2 := &method4a.T2{4}\n+\n+\teq(mt1.Sum(a, 30), 40)\n+\teq(mt2.Sum(a, 31), 41)\n+\n+\teq(method4a.T1.Sum(mt1, a, 32), 42)\n+\teq((*method4a.T2).Sum(mt2, a, 33), 43)\n+\n+\tg1 := method4a.T1.Sum\n+\teq(g1(mt1, a, 34), 44)\n+\tg2 := (*method4a.T2).Sum\n+\teq(g2(mt2, a, 35), 45)\n+\n+\teq(method4a.I1.Sum(mt1, a, 36), 46)\n+\teq(method4a.I1.Sum(mt2, a, 37), 47)\n+\n+\tg3 := method4a.I1.Sum\n+\teq(g3(mt1, a, 38), 48)\n+\teq(g3(mt2, a, 39), 49)\n+\n+\teq(method4a.I2.Sum(mt1, a, 40), 50)\n+\teq(method4a.I2.Sum(mt2, a, 41), 51)\n+\n+\tg4 := method4a.I2.Sum\n+\teq(g4(mt1, a, 42), 52)\n+\teq(g4(mt2, a, 43), 53)\n+}"}, {"sha": "813892bc830b05f06891ca0e87b0ec55dd889952", "filename": "gcc/testsuite/go.test/test/method4.go", "status": "modified", "additions": 2, "deletions": 103, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod4.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,109 +1,8 @@\n-// $G $D/method4a.go && $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// rundir\n \n // Copyright 2012 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n // Test method expressions with arguments.\n-\n-package main\n-\n-import \"./method4a\"\n-\n-type T1 int\n-\n-type T2 struct {\n-\tf int\n-}\n-\n-type I1 interface {\n-\tSum([]int, int) int\n-}\n-\n-type I2 interface {\n-\tSum(a []int, b int) int\n-}\n-\n-func (i T1) Sum(a []int, b int) int {\n-\tr := int(i) + b\n-\tfor _, v := range a {\n-\t\tr += v\n-\t}\n-\treturn r\n-}\n-\n-func (p *T2) Sum(a []int, b int) int {\n-\tr := p.f + b\n-\tfor _, v := range a {\n-\t\tr += v\n-\t}\n-\treturn r\n-}\n-\n-func eq(v1, v2 int) {\n-\tif v1 != v2 {\n-\t\tpanic(0)\n-\t}\n-}\n-\n-func main() {\n-\ta := []int{1, 2, 3}\n-\tt1 := T1(4)\n-\tt2 := &T2{4}\n-\n-\teq(t1.Sum(a, 5), 15)\n-\teq(t2.Sum(a, 6), 16)\n-\n-\teq(T1.Sum(t1, a, 7), 17)\n-\teq((*T2).Sum(t2, a, 8), 18)\n-\n-\tf1 := T1.Sum\n-\teq(f1(t1, a, 9), 19)\n-\tf2 := (*T2).Sum\n-\teq(f2(t2, a, 10), 20)\n-\n-\teq(I1.Sum(t1, a, 11), 21)\n-\teq(I1.Sum(t2, a, 12), 22)\n-\n-\tf3 := I1.Sum\n-\teq(f3(t1, a, 13), 23)\n-\teq(f3(t2, a, 14), 24)\n-\n-\teq(I2.Sum(t1, a, 15), 25)\n-\teq(I2.Sum(t2, a, 16), 26)\n-\n-\tf4 := I2.Sum\n-\teq(f4(t1, a, 17), 27)\n-\teq(f4(t2, a, 18), 28)\n-\t\n-\tmt1 := method4a.T1(4)\n-\tmt2 := &method4a.T2{4}\n-\n-\teq(mt1.Sum(a, 30), 40)\n-\teq(mt2.Sum(a, 31), 41)\n-\n-\teq(method4a.T1.Sum(mt1, a, 32), 42)\n-\teq((*method4a.T2).Sum(mt2, a, 33), 43)\n-\n-\tg1 := method4a.T1.Sum\n-\teq(g1(mt1, a, 34), 44)\n-\tg2 := (*method4a.T2).Sum\n-\teq(g2(mt2, a, 35), 45)\n-\n-\teq(method4a.I1.Sum(mt1, a, 36), 46)\n-\teq(method4a.I1.Sum(mt2, a, 37), 47)\n-\n-\tg3 := method4a.I1.Sum\n-\teq(g3(mt1, a, 38), 48)\n-\teq(g3(mt2, a, 39), 49)\n-\n-\teq(method4a.I2.Sum(mt1, a, 40), 50)\n-\teq(method4a.I2.Sum(mt2, a, 41), 51)\n-\n-\tg4 := method4a.I2.Sum\n-\teq(g4(mt1, a, 42), 52)\n-\teq(g4(mt2, a, 43), 53)\n-}\n+package ignored"}, {"sha": "36508f2e76feac8762d7ac52a696991283890534", "filename": "gcc/testsuite/go.test/test/method5.go", "status": "added", "additions": 297, "deletions": 0, "changes": 297, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmethod5.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,297 @@\n+// run\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Concrete types implementing M method.\n+// Smaller than a word, word-sized, larger than a word.\n+// Value and pointer receivers.\n+\n+type Tinter interface {\n+\tM(int, byte) (byte, int)\n+}\n+\n+type Tsmallv byte\n+\n+func (v Tsmallv) M(x int, b byte) (byte, int) { return b, x+int(v) }\n+\n+type Tsmallp byte\n+\n+func (p *Tsmallp) M(x int, b byte) (byte, int) { return b, x+int(*p) }\n+\n+type Twordv uintptr\n+\n+func (v Twordv) M(x int, b byte) (byte, int) { return b, x+int(v) }\n+\n+type Twordp uintptr\n+\n+func (p *Twordp) M(x int, b byte) (byte, int) { return b, x+int(*p) }\n+\n+type Tbigv [2]uintptr\n+\n+func (v Tbigv) M(x int, b byte) (byte, int) { return b, x+int(v[0])+int(v[1]) }\n+\n+type Tbigp [2]uintptr\n+\n+func (p *Tbigp) M(x int, b byte) (byte, int) { return b, x+int(p[0])+int(p[1]) }\n+\n+// Again, with an unexported method.\n+\n+type tsmallv byte\n+\n+func (v tsmallv) m(x int, b byte) (byte, int) { return b, x+int(v) }\n+\n+type tsmallp byte\n+\n+func (p *tsmallp) m(x int, b byte) (byte, int) { return b, x+int(*p) }\n+\n+type twordv uintptr\n+\n+func (v twordv) m(x int, b byte) (byte, int) { return b, x+int(v) }\n+\n+type twordp uintptr\n+\n+func (p *twordp) m(x int, b byte) (byte, int) { return b, x+int(*p) }\n+\n+type tbigv [2]uintptr\n+\n+func (v tbigv) m(x int, b byte) (byte, int) { return b, x+int(v[0])+int(v[1]) }\n+\n+type tbigp [2]uintptr\n+\n+func (p *tbigp) m(x int, b byte) (byte, int) { return b, x+int(p[0])+int(p[1]) }\n+\n+type tinter interface {\n+\tm(int, byte) (byte, int)\n+}\n+\n+// Embedding via pointer.\n+\n+type T1 struct {\n+\tT2\n+}\n+\n+type T2 struct {\n+\t*T3\n+}\n+\n+type T3 struct {\n+\t*T4\n+}\n+\n+type T4 struct {\n+}\n+\n+func (t4 T4) M(x int, b byte) (byte, int) { return b, x+40 }\n+\n+var failed = false\n+\n+func CheckI(name string, i Tinter, inc int) {\n+\tb, x := i.M(1000, 99)\n+\tif b != 99 || x != 1000+inc {\n+\t\tfailed = true\n+\t\tprint(name, \".M(1000, 99) = \", b, \", \", x, \" want 99, \", 1000+inc, \"\\n\")\n+\t}\n+\t\n+\tCheckF(\"(i=\"+name+\")\", i.M, inc)\n+}\n+\n+func CheckF(name string, f func(int, byte) (byte, int), inc int) {\n+\tb, x := f(1000, 99)\n+\tif b != 99 || x != 1000+inc {\n+\t\tfailed = true\n+\t\tprint(name, \"(1000, 99) = \", b, \", \", x, \" want 99, \", 1000+inc, \"\\n\")\n+\t}\n+}\n+\n+func checkI(name string, i tinter, inc int) {\n+\tb, x := i.m(1000, 99)\n+\tif b != 99 || x != 1000+inc {\n+\t\tfailed = true\n+\t\tprint(name, \".m(1000, 99) = \", b, \", \", x, \" want 99, \", 1000+inc, \"\\n\")\n+\t}\n+\t\n+\tcheckF(\"(i=\"+name+\")\", i.m, inc)\n+}\n+\n+func checkF(name string, f func(int, byte) (byte, int), inc int) {\n+\tb, x := f(1000, 99)\n+\tif b != 99 || x != 1000+inc {\n+\t\tfailed = true\n+\t\tprint(name, \"(1000, 99) = \", b, \", \", x, \" want 99, \", 1000+inc, \"\\n\")\n+\t}\n+}\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"not panicking\")\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n+func shouldNotPanic(f func()) {\n+\tf()\n+}\n+\n+func main() {\n+\tsv := Tsmallv(1)\n+\tCheckI(\"sv\", sv, 1)\n+\tCheckF(\"sv.M\", sv.M, 1)\n+\tCheckF(\"(&sv).M\", (&sv).M, 1)\n+\tpsv := &sv\n+\tCheckI(\"psv\", psv, 1)\n+\tCheckF(\"psv.M\", psv.M, 1)\n+\tCheckF(\"(*psv).M\", (*psv).M, 1)\n+\n+\tsp := Tsmallp(2)\n+\tCheckI(\"&sp\", &sp, 2)\n+\tCheckF(\"sp.M\", sp.M, 2)\n+\tCheckF(\"(&sp).M\", (&sp).M, 2)\n+\tpsp := &sp\n+\tCheckI(\"psp\", psp, 2)\n+\tCheckF(\"psp.M\", psp.M, 2)\n+\tCheckF(\"(*psp).M\", (*psp).M, 2)\n+\n+\twv := Twordv(3)\n+\tCheckI(\"wv\", wv, 3)\n+\tCheckF(\"wv.M\", wv.M, 3)\n+\tCheckF(\"(&wv).M\", (&wv).M, 3)\n+\tpwv := &wv\n+\tCheckI(\"pwv\", pwv, 3)\n+\tCheckF(\"pwv.M\", pwv.M, 3)\n+\tCheckF(\"(*pwv).M\", (*pwv).M, 3)\n+\n+\twp := Twordp(4)\n+\tCheckI(\"&wp\", &wp, 4)\n+\tCheckF(\"wp.M\", wp.M, 4)\n+\tCheckF(\"(&wp).M\", (&wp).M, 4)\n+\tpwp := &wp\n+\tCheckI(\"pwp\", pwp, 4)\n+\tCheckF(\"pwp.M\", pwp.M, 4)\n+\tCheckF(\"(*pwp).M\", (*pwp).M, 4)\n+\n+\tbv := Tbigv([2]uintptr{5, 6})\n+\tpbv := &bv\n+\tCheckI(\"bv\", bv, 11)\n+\tCheckF(\"bv.M\", bv.M, 11)\n+\tCheckF(\"(&bv).M\", (&bv).M, 11)\n+\tCheckI(\"pbv\", pbv, 11)\n+\tCheckF(\"pbv.M\", pbv.M, 11)\n+\tCheckF(\"(*pbv).M\", (*pbv).M, 11)\n+\t\n+\tbp := Tbigp([2]uintptr{7,8})\n+\tCheckI(\"&bp\", &bp, 15)\n+\tCheckF(\"bp.M\", bp.M, 15)\n+\tCheckF(\"(&bp).M\", (&bp).M, 15)\n+\tpbp := &bp\n+\tCheckI(\"pbp\", pbp, 15)\n+\tCheckF(\"pbp.M\", pbp.M, 15)\n+\tCheckF(\"(*pbp).M\", (*pbp).M, 15)\n+\n+\t_sv := tsmallv(1)\n+\tcheckI(\"_sv\", _sv, 1)\n+\tcheckF(\"_sv.m\", _sv.m, 1)\n+\tcheckF(\"(&_sv).m\", (&_sv).m, 1)\n+\t_psv := &_sv\n+\tcheckI(\"_psv\", _psv, 1)\n+\tcheckF(\"_psv.m\", _psv.m, 1)\n+\tcheckF(\"(*_psv).m\", (*_psv).m, 1)\n+\n+\t_sp := tsmallp(2)\n+\tcheckI(\"&_sp\", &_sp, 2)\n+\tcheckF(\"_sp.m\", _sp.m, 2)\n+\tcheckF(\"(&_sp).m\", (&_sp).m, 2)\n+\t_psp := &_sp\n+\tcheckI(\"_psp\", _psp, 2)\n+\tcheckF(\"_psp.m\", _psp.m, 2)\n+\tcheckF(\"(*_psp).m\", (*_psp).m, 2)\n+\n+\t_wv := twordv(3)\n+\tcheckI(\"_wv\", _wv, 3)\n+\tcheckF(\"_wv.m\", _wv.m, 3)\n+\tcheckF(\"(&_wv).m\", (&_wv).m, 3)\n+\t_pwv := &_wv\n+\tcheckI(\"_pwv\", _pwv, 3)\n+\tcheckF(\"_pwv.m\", _pwv.m, 3)\n+\tcheckF(\"(*_pwv).m\", (*_pwv).m, 3)\n+\n+\t_wp := twordp(4)\n+\tcheckI(\"&_wp\", &_wp, 4)\n+\tcheckF(\"_wp.m\", _wp.m, 4)\n+\tcheckF(\"(&_wp).m\", (&_wp).m, 4)\n+\t_pwp := &_wp\n+\tcheckI(\"_pwp\", _pwp, 4)\n+\tcheckF(\"_pwp.m\", _pwp.m, 4)\n+\tcheckF(\"(*_pwp).m\", (*_pwp).m, 4)\n+\n+\t_bv := tbigv([2]uintptr{5, 6})\n+\t_pbv := &_bv\n+\tcheckI(\"_bv\", _bv, 11)\n+\tcheckF(\"_bv.m\", _bv.m, 11)\n+\tcheckF(\"(&_bv).m\", (&_bv).m, 11)\n+\tcheckI(\"_pbv\", _pbv, 11)\n+\tcheckF(\"_pbv.m\", _pbv.m, 11)\n+\tcheckF(\"(*_pbv).m\", (*_pbv).m, 11)\n+\t\n+\t_bp := tbigp([2]uintptr{7,8})\n+\tcheckI(\"&_bp\", &_bp, 15)\n+\tcheckF(\"_bp.m\", _bp.m, 15)\n+\tcheckF(\"(&_bp).m\", (&_bp).m, 15)\n+\t_pbp := &_bp\n+\tcheckI(\"_pbp\", _pbp, 15)\n+\tcheckF(\"_pbp.m\", _pbp.m, 15)\n+\tcheckF(\"(*_pbp).m\", (*_pbp).m, 15)\n+\t\n+\tt4 := T4{}\n+\tt3 := T3{&t4}\n+\tt2 := T2{&t3}\n+\tt1 := T1{t2}\n+\tCheckI(\"t4\", t4, 40)\n+\tCheckI(\"&t4\", &t4, 40)\n+\tCheckI(\"t3\", t3, 40)\n+\tCheckI(\"&t3\", &t3, 40)\n+\tCheckI(\"t2\", t2, 40)\n+\tCheckI(\"&t2\", &t2, 40)\n+\tCheckI(\"t1\", t1, 40)\n+\tCheckI(\"&t1\", &t1, 40)\n+\t\n+\t// x.M panics if x is an interface type and is nil,\n+\t// or if x.M expands to (*x).M where x is nil,\n+\t// or if x.M expands to x.y.z.w.M where something\n+\t// along the evaluation of x.y.z.w is nil.\n+\tvar f func(int, byte) (byte, int)\n+\tshouldPanic(func() { psv = nil; f = psv.M })\n+\tshouldPanic(func() { pwv = nil; f = pwv.M })\n+\tshouldPanic(func() { pbv = nil; f = pbv.M })\n+\tshouldPanic(func() { var i Tinter; f = i.M })\n+\tshouldPanic(func() { _psv = nil; f = _psv.m })\n+\tshouldPanic(func() { _pwv = nil; f = _pwv.m })\n+\tshouldPanic(func() { _pbv = nil; f = _pbv.m })\n+\tshouldPanic(func() { var _i tinter; f = _i.m })\n+\tshouldPanic(func() { var t1 T1; f = t1.M })\n+\tshouldPanic(func() { var t2 T2; f = t2.M })\n+\tshouldPanic(func() { var t3 *T3; f = t3.M })\n+\tshouldPanic(func() { var t3 T3; f = t3.M })\n+\n+\tif f != nil {\n+\t\tpanic(\"something set f\")\n+\t}\n+\t\n+\t// x.M does not panic if x is a nil pointer and\n+\t// M is a method with a pointer receiver.\n+\tshouldNotPanic(func() { psp = nil; f = psp.M })\n+\tshouldNotPanic(func() { pwp = nil; f = pwp.M })\n+\tshouldNotPanic(func() { pbp = nil; f = pbp.M })\n+\tshouldNotPanic(func() { _psp = nil; f = _psp.m })\n+\tshouldNotPanic(func() { _pwp = nil; f = _pwp.m })\n+\tshouldNotPanic(func() { _pbp = nil; f = _pbp.m })\n+\tshouldNotPanic(func() { var t4 T4; f = t4.M })\n+\tif f == nil {\n+\t\tpanic(\"nothing set f\")\n+\t}\n+}"}, {"sha": "f8300bf56afb4f9135ef490f4a36ce0e35fb186e", "filename": "gcc/testsuite/go.test/test/nil.go", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -115,7 +115,7 @@ func chantest() {\n \t})\n \tshouldBlock(func() {\n \t\tx, ok := <-ch\n-\t\tprintln(x, ok)\n+\t\tprintln(x, ok) // unreachable\n \t})\n \n \tif len(ch) != 0 {\n@@ -147,12 +147,13 @@ func maptest() {\n \t\tpanic(v)\n \t}\n \n+\t// can delete (non-existent) entries\n+\tdelete(m, 2)\n+\n \t// but cannot be written to\n \tshouldPanic(func() {\n \t\tm[2] = 3\n \t})\n-\t// can delete (non-existent) entries\n-\tdelete(m, 2)\n }\n \n // nil slice"}, {"sha": "793e9967368089ebd7edf8000edc52c70f107729", "filename": "gcc/testsuite/go.test/test/nilptr.go", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -38,6 +38,8 @@ func main() {\n \tshouldPanic(p8)\n \tshouldPanic(p9)\n \tshouldPanic(p10)\n+\tshouldPanic(p11)\n+\tshouldPanic(p12)\n }\n \n func shouldPanic(f func()) {\n@@ -130,3 +132,23 @@ func p10() {\n \tvar t *T\n \tprintln(t.i) // should crash\n }\n+\n+type T1 struct {\n+\tT\n+}\n+\n+type T2 struct {\n+\t*T1\n+}\n+\n+func p11() {\n+\tt := &T2{}\n+\tp := &t.i\n+\tprintln(*p)\n+}\n+\n+// ADDR(DOT(IND(p))) needs a check also\n+func p12() {\n+\tvar p *T = nil\n+\tprintln(*(&((*p).i)))\n+}"}, {"sha": "20426b4fa0826352b0189e7f970f267fffbab2bb", "filename": "gcc/testsuite/go.test/test/nul1.go", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnul1.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -1,10 +1,4 @@\n-// [ \"$GORUN\" == \"\" ] || exit 0  # Android runner gets confused by the NUL output \n-// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n-// errchk $G -e tmp.go\n-// rm -f tmp.go\n-\n-// NOTE: This test is not run by 'run.go' and so not run by all.bash.\n-// To run this test you must use the ./run shell script.\n+// errorcheckoutput\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "8effbe9c53a990decbece1baf23222672203f5c8", "filename": "gcc/testsuite/go.test/test/range.go", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frange.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -55,10 +55,10 @@ func testslice() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 15 {\n-\t\tprintln(\"wrong sum ranging over makeslice\")\n+\t\tprintln(\"wrong sum ranging over makeslice\", s)\n \t\tpanic(\"fail\")\n \t}\n-\t\n+\n \tx := []int{10, 20}\n \ty := []int{99}\n \ti := 1\n@@ -82,7 +82,7 @@ func testslice1() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 10 {\n-\t\tprintln(\"wrong sum ranging over makeslice\")\n+\t\tprintln(\"wrong sum ranging over makeslice\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -106,7 +106,7 @@ func testarray() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 15 {\n-\t\tprintln(\"wrong sum ranging over makearray\")\n+\t\tprintln(\"wrong sum ranging over makearray\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -122,7 +122,7 @@ func testarray1() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 10 {\n-\t\tprintln(\"wrong sum ranging over makearray\")\n+\t\tprintln(\"wrong sum ranging over makearray\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -155,7 +155,7 @@ func testarrayptr() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 15 {\n-\t\tprintln(\"wrong sum ranging over makearrayptr\")\n+\t\tprintln(\"wrong sum ranging over makearrayptr\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -171,7 +171,7 @@ func testarrayptr1() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 10 {\n-\t\tprintln(\"wrong sum ranging over makearrayptr\")\n+\t\tprintln(\"wrong sum ranging over makearrayptr\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -195,7 +195,7 @@ func teststring() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 'a'+'b'+'c'+'d'+'\u263a' {\n-\t\tprintln(\"wrong sum ranging over makestring\")\n+\t\tprintln(\"wrong sum ranging over makestring\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -211,7 +211,7 @@ func teststring1() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 10 {\n-\t\tprintln(\"wrong sum ranging over makestring\")\n+\t\tprintln(\"wrong sum ranging over makestring\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -235,7 +235,7 @@ func testmap() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 'a'+'b'+'c'+'d'+'\u263a' {\n-\t\tprintln(\"wrong sum ranging over makemap\")\n+\t\tprintln(\"wrong sum ranging over makemap\", s)\n \t\tpanic(\"fail\")\n \t}\n }\n@@ -251,7 +251,7 @@ func testmap1() {\n \t\tpanic(\"fail\")\n \t}\n \tif s != 10 {\n-\t\tprintln(\"wrong sum ranging over makemap\")\n+\t\tprintln(\"wrong sum ranging over makemap\", s)\n \t\tpanic(\"fail\")\n \t}\n }"}, {"sha": "7c27d7c4d63c73fd9181b44439c8b5e3d24d7220", "filename": "gcc/testsuite/go.test/test/recover.go", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -8,15 +8,21 @@\n \n package main\n \n-import \"runtime\"\n+import (\n+\t\"os\"\n+\t\"runtime\"\n+)\n \n func main() {\n \ttest1()\n \ttest1WithClosures()\n \ttest2()\n \ttest3()\n-\ttest4()\n-\ttest5()\n+\t// exp/ssa/interp still has some bugs in recover().\n+\tif os.Getenv(\"GOSSAINTERP\") == \"\" {\n+\t\ttest4()\n+\t\ttest5()\n+\t}\n \ttest6()\n \ttest6WithClosures()\n \ttest7()"}, {"sha": "ebfa0a30757138fbf3e62e7a903b16aa7dc64392", "filename": "gcc/testsuite/go.test/test/recover3.go", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frecover3.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -71,6 +71,10 @@ func main() {\n \tinter = 1\n \tcheck(\"type-concrete\", func() { println(inter.(string)) }, \"int, not string\")\n \tcheck(\"type-interface\", func() { println(inter.(m)) }, \"missing method m\")\n+\n+\tif didbug {\n+\t\tpanic(\"recover3\")\n+\t}\n }\n \n type m interface {"}, {"sha": "dc4341718dc828a99cb70c36e3db1ef48b71cc58", "filename": "gcc/testsuite/go.test/test/rename.go", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frename.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -8,7 +8,10 @@\n \n package main\n \n-import \"fmt\"\n+import (\n+\t\"fmt\"\n+\t\"runtime\"\n+)\n \n func main() {\n \tn :=\n@@ -52,6 +55,7 @@ func main() {\n \t\t\tiota\n \tif n != NUM*(NUM-1)/2 {\n \t\tfmt.Println(\"BUG: wrong n\", n, NUM*(NUM-1)/2)\n+\t\truntime.Breakpoint() // panic is inaccessible\n \t}\n }\n "}, {"sha": "8fd623c1c7074e4fc1d88b76b380cc48af679c5b", "filename": "gcc/testsuite/go.test/test/reorder.go", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -19,7 +19,6 @@ func main() {\n \tp6()\n \tp7()\n \tp8()\n-\tp9()\n }\n \n var gx []int\n@@ -43,39 +42,39 @@ func check3(x, y, z, xx, yy, zz int) {\n }\n \n func p1() {\n-\tx := []int{1,2,3}\n+\tx := []int{1, 2, 3}\n \ti := 0\n \ti, x[i] = 1, 100\n \t_ = i\n \tcheck(x, 100, 2, 3)\n }\n \n func p2() {\n-\tx := []int{1,2,3}\n+\tx := []int{1, 2, 3}\n \ti := 0\n \tx[i], i = 100, 1\n \t_ = i\n \tcheck(x, 100, 2, 3)\n }\n \n func p3() {\n-\tx := []int{1,2,3}\n+\tx := []int{1, 2, 3}\n \ty := x\n \tgx = x\n \tx[1], y[0] = f(0), f(1)\n \tcheck(x, 2, 1, 3)\n }\n \n func p4() {\n-\tx := []int{1,2,3}\n+\tx := []int{1, 2, 3}\n \ty := x\n \tgx = x\n \tx[1], y[0] = gx[0], gx[1]\n \tcheck(x, 2, 1, 3)\n }\n \n func p5() {\n-\tx := []int{1,2,3}\n+\tx := []int{1, 2, 3}\n \ty := x\n \tp := &x[0]\n \tq := &x[1]\n@@ -90,7 +89,7 @@ func p6() {\n \tpx := &x\n \tpy := &y\n \t*px, *py = y, x\n-\tcheck3(x, y, z, 2, 1, 3)\t\n+\tcheck3(x, y, z, 2, 1, 3)\n }\n \n func f1(x, y, z int) (xx, yy, zz int) {\n@@ -107,21 +106,6 @@ func p7() {\n }\n \n func p8() {\n-\tx := []int{1,2,3}\n-\n-\tdefer func() {\n-\t\terr := recover()\n-\t\tif err == nil {\n-\t\t\tpanic(\"not panicking\")\n-\t\t}\n-\t\tcheck(x, 100, 2, 3)\n-\t}()\n-\n-\ti := 0\n-\ti, x[i], x[5] = 1, 100, 500\n-}\n-\n-func p9() {\n \tm := make(map[int]int)\n \tm[0] = len(m)\n \tif m[0] != 0 {"}, {"sha": "482f22bd5f4d28c91bd2acca72011a813be1a697", "filename": "gcc/testsuite/go.test/test/return.go", "status": "added", "additions": 2821, "deletions": 0, "changes": 2821, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freturn.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be66a22638ada47b4fdf0b42be1d44e6cd4fe104/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freturn.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freturn.go?ref=be66a22638ada47b4fdf0b42be1d44e6cd4fe104", "patch": "@@ -0,0 +1,2821 @@\n+// errorcheck\n+\n+// Copyright 2013 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test compiler diagnosis of function missing return statements.\n+// See issue 65 and golang.org/s/go11return.\n+\n+package p\n+\n+type T int\n+\n+var x interface{}\n+var c chan int\n+\n+func external() int // ok\n+\n+func _() int {\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+} // ERROR \"missing return\"\n+\n+// return is okay\n+func _() int {\n+\tprint(1)\n+\treturn 2\n+}\n+\n+// goto is okay\n+func _() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+}\n+\n+// panic is okay\n+func _() int {\n+\tprint(1)\n+\tpanic(2)\n+}\n+\n+// but only builtin panic\n+func _() int {\n+\tvar panic = func(int) {}\n+\tprint(1)\n+\tpanic(2)\n+} // ERROR \"missing return\"\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+}\n+\n+// adding more code - even though it is dead - now requires a return\n+\n+func _() int {\n+\tprint(1)\n+\treturn 2\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tpanic(2)\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+// even an empty dead block triggers the message, because it\n+// becomes the final statement.\n+\n+func _() int {\n+\tprint(1)\n+\treturn 2\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tpanic(2)\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+// if-else chain with final else and all terminating is okay\n+\n+func _() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tpanic(3)\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 2 {\n+\t\tpanic(3)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+// if-else chain missing final else is not okay, even if the\n+// conditions cover every possible case.\n+\n+func _() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x != nil {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 1 {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// for { loops that never break are okay.\n+\n+func _() int {\n+\tprint(1)\n+\tfor {}\n+}\n+\n+func _() int {\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+func _() int {\n+\tfor {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+}\n+\n+// for { loops that break are not okay.\n+\n+func _() int {\n+\tprint(1)\n+\tfor { break }\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor {\n+\t\tfor {\n+\t\t}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if there's a condition - even \"true\" - the loops are no longer syntactically terminating\n+\n+func _() int {\n+\tprint(1)\n+\tfor x == nil {}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor x == nil {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor x == nil {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\t\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tfor true {}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor true {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor true {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// select in which all cases terminate and none break are okay.\n+\n+func _() int {\n+\tprint(1)\n+\tselect{}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{}\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t}\n+}\n+\n+// if any cases don't terminate, the select isn't okay anymore\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tgoto L\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// if any breaks refer to the select, the select isn't okay anymore, even if they're dead\n+\n+func _() int {\n+\tprint(1)\n+\tselect{ default: break }\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{ break L }\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tbreak L\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(1)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+// switch with default in which all cases terminate is okay\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+func _() int {\n+\tprint(1)\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 2:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// type switch with default in which all cases terminate is okay\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+func _() int {\n+\tprint(1)\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase float64:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase float64:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tprint(1)\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// again, but without the leading print(1).\n+// testing that everything works when the terminating statement is first.\n+\n+func _() int {\n+} // ERROR \"missing return\"\n+\n+// return is okay\n+func _() int {\n+\treturn 2\n+}\n+\n+// goto is okay\n+func _() int {\n+L:\n+\tgoto L\n+}\n+\n+// panic is okay\n+func _() int {\n+\tpanic(2)\n+}\n+\n+// but only builtin panic\n+func _() int {\n+\tvar panic = func(int) {}\n+\tpanic(2)\n+} // ERROR \"missing return\"\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+\t{\n+\t\treturn 2\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+func _() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+}\n+\n+// adding more code - even though it is dead - now requires a return\n+\n+func _() int {\n+\treturn 2\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tgoto L\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tpanic(2)\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\treturn 2\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tpanic(2)\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\treturn 2\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+// even an empty dead block triggers the message, because it\n+// becomes the final statement.\n+\n+func _() int {\n+\treturn 2\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tgoto L\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tpanic(2)\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\treturn 2\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tpanic(2)\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\treturn 2\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+// if-else chain with final else and all terminating is okay\n+\n+func _() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tpanic(3)\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 2 {\n+\t\tpanic(3)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+// if-else chain missing final else is not okay, even if the\n+// conditions cover every possible case.\n+\n+func _() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x != nil {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 1 {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// for { loops that never break are okay.\n+\n+func _() int {\n+\tfor {}\n+}\n+\n+func _() int {\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+func _() int {\n+\tfor {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+}\n+\n+// for { loops that break are not okay.\n+\n+func _() int {\n+\tfor { break }\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor {\n+\t\tfor {\n+\t\t}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if there's a condition - even \"true\" - the loops are no longer syntactically terminating\n+\n+func _() int {\n+\tfor x == nil {}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor x == nil {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor x == nil {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\t\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor true {}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor true {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tfor true {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// select in which all cases terminate and none break are okay.\n+\n+func _() int {\n+\tselect{}\n+}\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t}\n+}\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{}\n+\t}\n+}\n+\n+func _() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tgoto L\n+\t}\n+}\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t}\n+}\n+\n+// if any cases don't terminate, the select isn't okay anymore\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tgoto L\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// if any breaks refer to the select, the select isn't okay anymore, even if they're dead\n+\n+func _() int {\n+\tselect{ default: break }\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{ break L }\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tbreak L\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tselect {\n+\tcase <-c:\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+// switch with default in which all cases terminate is okay\n+\n+func _() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+func _() int {\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+func _() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+func _() int {\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x {\n+\tcase 2:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+func _() int {\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// type switch with default in which all cases terminate is okay\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+func _() int {\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase float64:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tcase float64:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+func _() int {\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+func _() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int, float64:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+// again, with func literals\n+\n+var _ = func() int {\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+} // ERROR \"missing return\"\n+\n+// return is okay\n+var _ = func() int {\n+\tprint(1)\n+\treturn 2\n+}\n+\n+// goto is okay\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+}\n+\n+// panic is okay\n+var _ = func() int {\n+\tprint(1)\n+\tpanic(2)\n+}\n+\n+// but only builtin panic\n+var _ = func() int {\n+\tvar panic = func(int) {}\n+\tprint(1)\n+\tpanic(2)\n+} // ERROR \"missing return\"\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+}\n+\n+// adding more code - even though it is dead - now requires a return\n+\n+var _ = func() int {\n+\tprint(1)\n+\treturn 2\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tpanic(2)\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+// even an empty dead block triggers the message, because it\n+// becomes the final statement.\n+\n+var _ = func() int {\n+\tprint(1)\n+\treturn 2\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tgoto L\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tpanic(2)\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tprint(1)\n+\t\treturn 2\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tprint(1)\n+\t\tgoto L\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\t{\n+\t\tpanic(2)\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+// if-else chain with final else and all terminating is okay\n+\n+var _ = func() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tpanic(3)\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 2 {\n+\t\tpanic(3)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+// if-else chain missing final else is not okay, even if the\n+// conditions cover every possible case.\n+\n+var _ = func() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x != nil {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 1 {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// for { loops that never break are okay.\n+\n+var _ = func() int {\n+\tprint(1)\n+\tfor {}\n+}\n+\n+var _ = func() int {\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+var _ = func() int {\n+\tfor {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+}\n+\n+// for { loops that break are not okay.\n+\n+var _ = func() int {\n+\tprint(1)\n+\tfor { break }\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor {\n+\t\tfor {\n+\t\t}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if there's a condition - even \"true\" - the loops are no longer syntactically terminating\n+\n+var _ = func() int {\n+\tprint(1)\n+\tfor x == nil {}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor x == nil {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor x == nil {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\t\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tfor true {}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor true {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor true {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// select in which all cases terminate and none break are okay.\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect{}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{}\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tgoto L\n+\t}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t}\n+}\n+\n+// if any cases don't terminate, the select isn't okay anymore\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tgoto L\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// if any breaks refer to the select, the select isn't okay anymore, even if they're dead\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect{ default: break }\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{ break L }\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tbreak L\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tselect {\n+\tcase <-c:\n+\t\tprint(1)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+// switch with default in which all cases terminate is okay\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 2:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// type switch with default in which all cases terminate is okay\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase float64:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase float64:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tprint(1)\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// again, but without the leading print(1).\n+// testing that everything works when the terminating statement is first.\n+\n+var _ = func() int {\n+} // ERROR \"missing return\"\n+\n+// return is okay\n+var _ = func() int {\n+\treturn 2\n+}\n+\n+// goto is okay\n+var _ = func() int {\n+L:\n+\tgoto L\n+}\n+\n+// panic is okay\n+var _ = func() int {\n+\tpanic(2)\n+}\n+\n+// but only builtin panic\n+var _ = func() int {\n+\tvar panic = func(int) {}\n+\tpanic(2)\n+} // ERROR \"missing return\"\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+\t{\n+\t\treturn 2\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+}\n+\n+// block ending in terminating statement is okay\n+var _ = func() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+}\n+\n+// adding more code - even though it is dead - now requires a return\n+\n+var _ = func() int {\n+\treturn 2\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tgoto L\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tpanic(2)\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\treturn 2\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tpanic(2)\n+\t\tprint(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\treturn 2\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+\tprint(3)\n+} // ERROR \"missing return\"\n+\n+// even an empty dead block triggers the message, because it\n+// becomes the final statement.\n+\n+var _ = func() int {\n+\treturn 2\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tgoto L\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tpanic(2)\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\treturn 2\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tpanic(2)\n+\t\t{}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\treturn 2\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\t{\n+\t\tgoto L\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\t{\n+\t\tpanic(2)\n+\t}\n+\t{}\n+} // ERROR \"missing return\"\n+\n+// if-else chain with final else and all terminating is okay\n+\n+var _ = func() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tpanic(3)\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 2 {\n+\t\tpanic(3)\n+\t} else {\n+\t\tgoto L\n+\t}\n+}\n+\n+// if-else chain missing final else is not okay, even if the\n+// conditions cover every possible case.\n+\n+var _ = func() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x != nil {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tif x == nil {\n+\t\tpanic(2)\n+\t} else if x == 1 {\n+\t\treturn 0\n+\t} else if x != 1 {\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// for { loops that never break are okay.\n+\n+var _ = func() int {\n+\tfor {}\n+}\n+\n+var _ = func() int {\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+}\n+\n+var _ = func() int {\n+\tfor {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+}\n+\n+// for { loops that break are not okay.\n+\n+var _ = func() int {\n+\tfor { break }\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor {\n+\t\tfor {\n+\t\t}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tfor {\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if there's a condition - even \"true\" - the loops are no longer syntactically terminating\n+\n+var _ = func() int {\n+\tfor x == nil {}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor x == nil {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor x == nil {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\t\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor true {}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor true {\n+\t\tfor {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tfor true {\n+\t\tL:\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\t}\n+} // ERROR \"missing return\"\n+\n+// select in which all cases terminate and none break are okay.\n+\n+var _ = func() int {\n+\tselect{}\n+}\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t}\n+}\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{}\n+\t}\n+}\n+\n+var _ = func() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tgoto L\n+\t}\n+}\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t}\n+}\n+\n+// if any cases don't terminate, the select isn't okay anymore\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tgoto L\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tprint(2)\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+// if any breaks refer to the select, the select isn't okay anymore, even if they're dead\n+\n+var _ = func() int {\n+\tselect{ default: break }\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tfor{ break L }\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tselect {\n+\tcase <-c:\n+\t\tprint(2)\n+\t\tpanic(\"abc\")\n+\tcase c <- 1:\n+\t\tprint(2)\n+\t\tbreak L\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tselect {\n+\tcase <-c:\n+\t\tpanic(\"abc\")\n+\tdefault:\n+\t\tselect{}\n+\t\tbreak\n+\t}\n+} // ERROR \"missing return\"\n+\n+// switch with default in which all cases terminate is okay\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+var _ = func() int {\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+var _ = func() int {\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 2:\n+\t\treturn 4\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfallthrough\n+\tcase 2:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+var _ = func() int {\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase 1:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tswitch x {\n+\tcase 1:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+// type switch with default in which all cases terminate is okay\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tdefault:\n+\t\treturn 4\n+\t}\n+}\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+// if no default or some case doesn't terminate, switch is no longer okay\n+\n+var _ = func() int {\n+\tswitch {\n+\t}\n+} // ERROR \"missing return\"\n+\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\tcase float64:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tcase float64:\n+\t\treturn 4\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+// if any breaks refer to the switch, switch is no longer okay\n+\n+var _ = func() int {\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t\tbreak L\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\t\tbreak\n+\tcase int:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+L:\n+\tswitch x.(type) {\n+\tcase int:\n+\t\tprint(2)\n+\t\tfor {\n+\t\t\tbreak L\n+\t\t}\n+\tdefault:\n+\t\treturn 4\n+\t}\n+} // ERROR \"missing return\"\n+\n+var _ = func() int {\n+\tswitch x.(type) {\n+\tdefault:\n+\t\treturn 4\n+\tcase int, float64:\n+\t\tprint(2)\n+\t\tpanic(3)\n+\t}\n+}\n+\n+/**/"}]}