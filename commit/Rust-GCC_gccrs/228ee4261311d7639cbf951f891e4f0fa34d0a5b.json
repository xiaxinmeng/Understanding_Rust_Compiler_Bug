{"sha": "228ee4261311d7639cbf951f891e4f0fa34d0a5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4ZWU0MjYxMzExZDc2MzljYmY5NTFmODkxZTRmMGZhMzRkMGE1Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-10-07T11:43:03Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-10-07T11:43:03Z"}, "message": "re PR lto/50492 (Ada bootstrap failure --with-build-config=bootstrap-lto)\n\n\tPR lto/50492\n\t* gcc-interface/gigi.h (gnat_pushdecl): Adjust comment.\n\t* gcc-interface/utils.c (global_context): New variable.\n\t(gnat_pushdecl): Initialize it and set it as the DECL_CONTEXT of DECLs\n\tthat are either public external or at top level.  Use \"No\" macro.\n\t(end_subprog_body): Call decl_function_context.\n\t(rest_of_subprog_body_compilation): Likewise.\n\nFrom-SVN: r179652", "tree": {"sha": "6aba893f2c45acf7d652aa16f74ecac631864587", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6aba893f2c45acf7d652aa16f74ecac631864587"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/228ee4261311d7639cbf951f891e4f0fa34d0a5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228ee4261311d7639cbf951f891e4f0fa34d0a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/228ee4261311d7639cbf951f891e4f0fa34d0a5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/228ee4261311d7639cbf951f891e4f0fa34d0a5b/comments", "author": null, "committer": null, "parents": [{"sha": "b97bf1ac69c812cccfaefe8d89168342075e7e2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b97bf1ac69c812cccfaefe8d89168342075e7e2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b97bf1ac69c812cccfaefe8d89168342075e7e2d"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "db182386d55e000eb3c5b82725841ea4ce1253b2", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=228ee4261311d7639cbf951f891e4f0fa34d0a5b", "patch": "@@ -1,3 +1,13 @@\n+2011-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR lto/50492\n+\t* gcc-interface/gigi.h (gnat_pushdecl): Adjust comment.\n+\t* gcc-interface/utils.c (global_context): New variable.\n+\t(gnat_pushdecl): Initialize it and set it as the DECL_CONTEXT of DECLs\n+\tthat are either public external or at top level.  Use \"No\" macro.\n+\t(end_subprog_body): Call decl_function_context.\n+\t(rest_of_subprog_body_compilation): Likewise.\n+\n 2011-10-07  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/gigi.h (gnat_useless_type_conversion): Declare."}, {"sha": "f7f9b09272ea5bffa63108e8f74bda0cde60edb4", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=228ee4261311d7639cbf951f891e4f0fa34d0a5b", "patch": "@@ -450,8 +450,8 @@ extern void set_block_jmpbuf_decl (tree decl);\n /* Get the setjmp_decl, if any, for the current binding level.  */\n extern tree get_block_jmpbuf_decl (void);\n \n-/* Records a ..._DECL node DECL as belonging to the current lexical scope\n-   and uses GNAT_NODE for location information.  */\n+/* Record DECL as belonging to the current lexical scope and use GNAT_NODE\n+   for location information and flag propagation.  */\n extern void gnat_pushdecl (tree decl, Node_Id gnat_node);\n \n extern void gnat_init_gcc_eh (void);"}, {"sha": "ca3218fd079f46451b52d5de53a56bdee9916aaf", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/228ee4261311d7639cbf951f891e4f0fa34d0a5b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=228ee4261311d7639cbf951f891e4f0fa34d0a5b", "patch": "@@ -200,6 +200,9 @@ static GTY(()) struct gnat_binding_level *current_binding_level;\n /* A chain of gnat_binding_level structures awaiting reuse.  */\n static GTY((deletable)) struct gnat_binding_level *free_binding_level;\n \n+/* The context to be used for global declarations.  */\n+static GTY(()) tree global_context;\n+\n /* An array of global declarations.  */\n static GTY(()) VEC(tree,gc) *global_decls;\n \n@@ -497,15 +500,19 @@ gnat_zaplevel (void)\n   free_binding_level = level;\n }\n \f\n-/* Records a ..._DECL node DECL as belonging to the current lexical scope\n-   and uses GNAT_NODE for location information and propagating flags.  */\n+/* Record DECL as belonging to the current lexical scope and use GNAT_NODE\n+   for location information and flag propagation.  */\n \n void\n gnat_pushdecl (tree decl, Node_Id gnat_node)\n {\n-  /* If this decl is public external or at toplevel, there is no context.  */\n+  /* If DECL is public external or at top level, it has global context.  */\n   if ((TREE_PUBLIC (decl) && DECL_EXTERNAL (decl)) || global_bindings_p ())\n-    DECL_CONTEXT (decl) = 0;\n+    {\n+      if (!global_context)\n+\tglobal_context = build_translation_unit_decl (NULL_TREE);\n+      DECL_CONTEXT (decl) = global_context;\n+   }\n   else\n     {\n       DECL_CONTEXT (decl) = current_function_decl;\n@@ -518,11 +525,12 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \tDECL_STATIC_CHAIN (decl) = 1;\n     }\n \n-  TREE_NO_WARNING (decl) = (gnat_node == Empty || Warnings_Off (gnat_node));\n+  TREE_NO_WARNING (decl) = (No (gnat_node) || Warnings_Off (gnat_node));\n \n   /* Set the location of DECL and emit a declaration for it.  */\n   if (Present (gnat_node))\n     Sloc_to_locus (Sloc (gnat_node), &DECL_SOURCE_LOCATION (decl));\n+\n   add_decl_expr (decl, gnat_node);\n \n   /* Put the declaration on the list.  The list of declarations is in reverse\n@@ -1982,7 +1990,7 @@ end_subprog_body (tree body)\n \n   DECL_SAVED_TREE (fndecl) = body;\n \n-  current_function_decl = DECL_CONTEXT (fndecl);\n+  current_function_decl = decl_function_context (fndecl);\n }\n \n /* Wrap up compilation of SUBPROG_DECL, a subprogram body.  */\n@@ -2001,7 +2009,7 @@ rest_of_subprog_body_compilation (tree subprog_decl)\n   dump_function (TDI_original, subprog_decl);\n \n   /* ??? This special handling of nested functions is probably obsolete.  */\n-  if (!DECL_CONTEXT (subprog_decl))\n+  if (!decl_function_context (subprog_decl))\n     cgraph_finalize_function (subprog_decl, false);\n   else\n     /* Register this function with cgraph just far enough to get it"}]}