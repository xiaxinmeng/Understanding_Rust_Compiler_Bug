{"sha": "56faec5e60255d9bec6669d919c1b7318282a115", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZmYWVjNWU2MDI1NWQ5YmVjNjY2OWQ5MTljMWI3MzE4MjgyYTExNQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2009-06-05T12:55:06Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2009-06-05T12:55:06Z"}, "message": "ffitarget.h, ffi.c: Merge stdcall changes from libffi.\n\n2009-06-05  Andrew Haley  <aph@redhat.com>\n\n        * src/x86/ffitarget.h, src/x86/ffi.c: Merge stdcall changes from\n        libffi.\n\nFrom-SVN: r148207", "tree": {"sha": "a229251793b1d52c44d64defbf272fc8dcde0e40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a229251793b1d52c44d64defbf272fc8dcde0e40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56faec5e60255d9bec6669d919c1b7318282a115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56faec5e60255d9bec6669d919c1b7318282a115", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56faec5e60255d9bec6669d919c1b7318282a115", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56faec5e60255d9bec6669d919c1b7318282a115/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47d1f19159314bb55589dfea175435b52234a036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d1f19159314bb55589dfea175435b52234a036", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d1f19159314bb55589dfea175435b52234a036"}], "stats": {"total": 59, "additions": 50, "deletions": 9}, "files": [{"sha": "bf34ca15c24a2bc6e1ecb7f3893624314c7a79d4", "filename": "libffi/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=56faec5e60255d9bec6669d919c1b7318282a115", "patch": "@@ -1,3 +1,8 @@\n+2009-06-05  Andrew Haley  <aph@redhat.com>\n+\n+\t* src/x86/ffitarget.h, src/x86/ffi.c: Merge stdcall changes from\n+\tlibffi.\n+\n 2009-06-04  Andrew Haley  <aph@redhat.com>\n \n \t* src/x86/ffitarget.h, src/x86/win32.S, src/x86/ffi.c: Back out"}, {"sha": "767effb8380a709c95ef69321eacdda4b5678c3f", "filename": "libffi/src/x86/ffi.c", "status": "modified", "additions": 41, "deletions": 9, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2Fsrc%2Fx86%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2Fsrc%2Fx86%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffi.c?ref=56faec5e60255d9bec6669d919c1b7318282a115", "patch": "@@ -1,5 +1,5 @@\n /* -----------------------------------------------------------------------\n-   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007  Red Hat, Inc.\n+   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007, 2008  Red Hat, Inc.\n            Copyright (c) 2002  Ranjit Mathew\n            Copyright (c) 2002  Bo Thorsen\n            Copyright (c) 2002  Roger Sayle\n@@ -236,6 +236,10 @@ unsigned int FFI_HIDDEN ffi_closure_SYSV_inner (ffi_closure *, void **, void *)\n      __attribute__ ((regparm(1)));\n void FFI_HIDDEN ffi_closure_raw_SYSV (ffi_raw_closure *)\n      __attribute__ ((regparm(1)));\n+#ifdef X86_WIN32\n+void FFI_HIDDEN ffi_closure_STDCALL (ffi_closure *)\n+     __attribute__ ((regparm(1)));\n+#endif\n \n /* This function is jumped to by the trampoline */\n \n@@ -245,7 +249,7 @@ ffi_closure_SYSV_inner (closure, respp, args)\n      void **respp;\n      void *args;\n {\n-  // our various things...\n+  /* our various things...  */\n   ffi_cif       *cif;\n   void         **arg_area;\n \n@@ -311,13 +315,26 @@ ffi_prep_incoming_args_SYSV(char *stack, void **rvalue, void **avalue,\n ({ unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n    unsigned int  __fun = (unsigned int)(FUN); \\\n    unsigned int  __ctx = (unsigned int)(CTX); \\\n-   unsigned int  __dis = __fun - (__ctx + FFI_TRAMPOLINE_SIZE); \\\n+   unsigned int  __dis = __fun - (__ctx + 10);\t\\\n    *(unsigned char*) &__tramp[0] = 0xb8; \\\n    *(unsigned int*)  &__tramp[1] = __ctx; /* movl __ctx, %eax */ \\\n    *(unsigned char *)  &__tramp[5] = 0xe9; \\\n    *(unsigned int*)  &__tramp[6] = __dis; /* jmp __fun  */ \\\n  })\n \n+#define FFI_INIT_TRAMPOLINE_STDCALL(TRAMP,FUN,CTX,SIZE)  \\\n+({ unsigned char *__tramp = (unsigned char*)(TRAMP); \\\n+   unsigned int  __fun = (unsigned int)(FUN); \\\n+   unsigned int  __ctx = (unsigned int)(CTX); \\\n+   unsigned int  __dis = __fun - (__ctx + 10); \\\n+   unsigned short __size = (unsigned short)(SIZE); \\\n+   *(unsigned char*) &__tramp[0] = 0xb8; \\\n+   *(unsigned int*)  &__tramp[1] = __ctx; /* movl __ctx, %eax */ \\\n+   *(unsigned char *)  &__tramp[5] = 0xe8; \\\n+   *(unsigned int*)  &__tramp[6] = __dis; /* call __fun  */ \\\n+   *(unsigned char *)  &__tramp[10] = 0xc2; \\\n+   *(unsigned short*)  &__tramp[11] = __size; /* ret __size  */ \\\n+ })\n \n /* the cif must already be prep'ed */\n \n@@ -328,11 +345,24 @@ ffi_prep_closure_loc (ffi_closure* closure,\n \t\t      void *user_data,\n \t\t      void *codeloc)\n {\n-  FFI_ASSERT (cif->abi == FFI_SYSV);\n-\n-  FFI_INIT_TRAMPOLINE (&closure->tramp[0], \\\n-\t\t       &ffi_closure_SYSV,  \\\n-\t\t       codeloc);\n+  if (cif->abi == FFI_SYSV)\n+    {\n+      FFI_INIT_TRAMPOLINE (&closure->tramp[0],\n+                           &ffi_closure_SYSV,\n+                           (void*)codeloc);\n+    }\n+#ifdef X86_WIN32\n+  else if (cif->abi == FFI_STDCALL)\n+    {\n+      FFI_INIT_TRAMPOLINE_STDCALL (&closure->tramp[0],\n+                                   &ffi_closure_STDCALL,\n+                                   (void*)codeloc, cif->bytes);\n+    }\n+#endif\n+  else\n+    {\n+      return FFI_BAD_ABI;\n+    }\n     \n   closure->cif  = cif;\n   closure->user_data = user_data;\n@@ -354,7 +384,9 @@ ffi_prep_raw_closure_loc (ffi_raw_closure* closure,\n {\n   int i;\n \n-  FFI_ASSERT (cif->abi == FFI_SYSV);\n+  if (cif->abi != FFI_SYSV) {\n+    return FFI_BAD_ABI;\n+  }\n \n   // we currently don't support certain kinds of arguments for raw\n   // closures.  This should be implemented by a separate assembly language"}, {"sha": "8178d0648213ac1dc6acca5abad632c6ab60e46d", "filename": "libffi/src/x86/ffitarget.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2Fsrc%2Fx86%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56faec5e60255d9bec6669d919c1b7318282a115/libffi%2Fsrc%2Fx86%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Fx86%2Fffitarget.h?ref=56faec5e60255d9bec6669d919c1b7318282a115", "patch": "@@ -78,7 +78,11 @@ typedef enum ffi_abi {\n #define FFI_TRAMPOLINE_SIZE 24\n #define FFI_NATIVE_RAW_API 0\n #else\n+#ifdef X86_WIN32\n+#define FFI_TRAMPOLINE_SIZE 13\n+#else\n #define FFI_TRAMPOLINE_SIZE 10\n+#endif\n #define FFI_NATIVE_RAW_API 1\t/* x86 has native raw api support */\n #endif\n "}]}