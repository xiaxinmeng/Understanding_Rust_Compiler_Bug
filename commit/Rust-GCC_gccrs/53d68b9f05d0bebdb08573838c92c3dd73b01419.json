{"sha": "53d68b9f05d0bebdb08573838c92c3dd73b01419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNkNjhiOWYwNWQwYmViZGIwODU3MzgzOGM5MmMzZGQ3M2IwMTQxOQ==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-09-05T12:03:46Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-09-05T12:03:46Z"}, "message": "Use -fbuilding-libgcc for more target macros used in libgcc.\n\ngcc/c-family:\n\t* c-cppbuiltin.c (c_cpp_builtins): Also define\n\t__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__,\n\t__LIBGCC_EH_FRAME_SECTION_NAME__, __LIBGCC_JCR_SECTION_NAME__,\n\t__LIBGCC_CTORS_SECTION_ASM_OP__, __LIBGCC_DTORS_SECTION_ASM_OP__,\n\t__LIBGCC_TEXT_SECTION_ASM_OP__, __LIBGCC_INIT_SECTION_ASM_OP__,\n\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__,\n\t__LIBGCC_STACK_GROWS_DOWNWARD__,\n\t__LIBGCC_DONT_USE_BUILTIN_SETJMP__,\n\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__,\n\t__LIBGCC_DWARF_FRAME_REGISTERS__,\n\t__LIBGCC_EH_RETURN_STACKADJ_RTX__, __LIBGCC_JMP_BUF_SIZE__,\n\t__LIBGCC_STACK_POINTER_REGNUM__ and\n\t__LIBGCC_VTABLE_USES_DESCRIPTORS__ for -fbuilding-libgcc.\n\t(builtin_define_with_value): Handle backslash-escaping in string\n\tmacro values.\n\nlibgcc:\n\t* Makefile.in (CRTSTUFF_CFLAGS): Add -fbuilding-libgcc.\n\t* config/aarch64/linux-unwind.h (STACK_POINTER_REGNUM): Change all\n\tuses to __LIBGCC_STACK_POINTER_REGNUM__.\n\t(DWARF_ALT_FRAME_RETURN_COLUMN): Change all uses to\n\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t* config/alpha/vms-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN):\n\tChange use to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t* config/cr16/unwind-cr16.c (STACK_GROWS_DOWNWARD): Change all\n\tuses to __LIBGCC_STACK_GROWS_DOWNWARD__.\n\t(DWARF_FRAME_REGISTERS): Change all uses to\n\t__LIBGCC_DWARF_FRAME_REGISTERS__.\n\t(EH_RETURN_STACKADJ_RTX): Change all uses to\n\t__LIBGCC_EH_RETURN_STACKADJ_RTX__.\n\t* config/cr16/unwind-dw2.h (DWARF_FRAME_REGISTERS): Change use to\n\t__LIBGCC_DWARF_FRAME_REGISTERS__.  Remove conditional definition.\n\t* config/i386/cygming-crtbegin.c (EH_FRAME_SECTION_NAME): Change\n\tuse to __LIBGCC_EH_FRAME_SECTION_NAME__.\n\t(JCR_SECTION_NAME): Change use to __LIBGCC_JCR_SECTION_NAME__.\n\t* config/i386/cygming-crtend.c (EH_FRAME_SECTION_NAME): Change use\n\tto __LIBGCC_EH_FRAME_SECTION_NAME__.\n\t(JCR_SECTION_NAME): Change use to __LIBGCC_JCR_SECTION_NAME__\n\t* config/mips/linux-unwind.h (STACK_POINTER_REGNUM): Change use to\n\t__LIBGCC_STACK_POINTER_REGNUM__.\n\t(DWARF_ALT_FRAME_RETURN_COLUMN): Change all uses to\n\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t* config/nios2/linux-unwind.h (STACK_POINTER_REGNUM): Change use\n\tto __LIBGCC_STACK_POINTER_REGNUM__.\n\t* config/pa/hpux-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN): Change\n\tall uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t* config/pa/linux-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN): Change\n\tall uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t* config/rs6000/aix-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN):\n\tChange all uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n\t(STACK_POINTER_REGNUM): Change all uses to\n\t__LIBGCC_STACK_POINTER_REGNUM__.\n\t* config/rs6000/darwin-fallback.c (STACK_POINTER_REGNUM): Change\n\tuse to __LIBGCC_STACK_POINTER_REGNUM__.\n\t* config/rs6000/linux-unwind.h (STACK_POINTER_REGNUM): Change all\n\tuses to __LIBGCC_STACK_POINTER_REGNUM__.\n\t* config/sparc/linux-unwind.h (DWARF_FRAME_REGISTERS): Change use\n\tto __LIBGCC_DWARF_FRAME_REGISTERS__.\n\t* config/sparc/sol2-unwind.h (DWARF_FRAME_REGISTERS): Change use\n\tto __LIBGCC_DWARF_FRAME_REGISTERS__.\n\t* config/tilepro/linux-unwind.h (STACK_POINTER_REGNUM): Change use\n\tto __LIBGCC_STACK_POINTER_REGNUM__.\n\t* config/xtensa/unwind-dw2-xtensa.h (DWARF_FRAME_REGISTERS):\n\tRemove conditional definition.\n\t* crtstuff.c (TEXT_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_TEXT_SECTION_ASM_OP__.\n\t(EH_FRAME_SECTION_NAME): Change all uses to\n\t__LIBGCC_EH_FRAME_SECTION_NAME__.\n\t(EH_TABLES_CAN_BE_READ_ONLY): Change all uses to\n\t__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__.\n\t(CTORS_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_CTORS_SECTION_ASM_OP__.\n\t(DTORS_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_DTORS_SECTION_ASM_OP__.\n\t(JCR_SECTION_NAME): Change all uses to\n\t__LIBGCC_JCR_SECTION_NAME__.\n\t(INIT_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_INIT_SECTION_ASM_OP__.\n\t(INIT_ARRAY_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__.\n\t* generic-morestack.c (STACK_GROWS_DOWNWARD): Change all uses to\n\t__LIBGCC_STACK_GROWS_DOWNWARD__.\n\t* libgcc2.c (INIT_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_INIT_SECTION_ASM_OP__.\n\t(INIT_ARRAY_SECTION_ASM_OP): Change all uses to\n\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__.\n\t(EH_FRAME_SECTION_NAME): Change all uses to\n\t__LIBGCC_EH_FRAME_SECTION_NAME__.\n\t* libgcov-profiler.c (VTABLE_USES_DESCRIPTORS): Remove conditional\n\tdefinitions.  Change all uses to\n\t__LIBGCC_VTABLE_USES_DESCRIPTORS__.\n\t* unwind-dw2.c (STACK_GROWS_DOWNWARD): Change all uses to\n\t__LIBGCC_STACK_GROWS_DOWNWARD__.\n\t(DWARF_FRAME_REGISTERS): Change all uses to\n\t__LIBGCC_DWARF_FRAME_REGISTERS__.\n\t(EH_RETURN_STACKADJ_RTX): Change all uses to\n\t__LIBGCC_EH_RETURN_STACKADJ_RTX__.\n\t* unwind-dw2.h (DWARF_FRAME_REGISTERS): Remove conditional\n\tdefinition.  Change use to __LIBGCC_DWARF_FRAME_REGISTERS__.\n\t* unwind-sjlj.c (DONT_USE_BUILTIN_SETJMP): Change all uses to\n\t__LIBGCC_DONT_USE_BUILTIN_SETJMP__.\n\t(JMP_BUF_SIZE): Change use to __LIBGCC_JMP_BUF_SIZE__.\n\nFrom-SVN: r214954", "tree": {"sha": "71d3ae38a17711fac14acd3253bc2f21685ebb65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71d3ae38a17711fac14acd3253bc2f21685ebb65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53d68b9f05d0bebdb08573838c92c3dd73b01419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d68b9f05d0bebdb08573838c92c3dd73b01419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53d68b9f05d0bebdb08573838c92c3dd73b01419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53d68b9f05d0bebdb08573838c92c3dd73b01419/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a0ec4a8d8102b3f5f8ef1350bb65cf6c1d22e6"}], "stats": {"total": 538, "additions": 362, "deletions": 176}, "files": [{"sha": "38330fb9c8a2d43edcdc82d0f010c162b83b9ac9", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -1,3 +1,21 @@\n+2014-09-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-cppbuiltin.c (c_cpp_builtins): Also define\n+\t__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__,\n+\t__LIBGCC_EH_FRAME_SECTION_NAME__, __LIBGCC_JCR_SECTION_NAME__,\n+\t__LIBGCC_CTORS_SECTION_ASM_OP__, __LIBGCC_DTORS_SECTION_ASM_OP__,\n+\t__LIBGCC_TEXT_SECTION_ASM_OP__, __LIBGCC_INIT_SECTION_ASM_OP__,\n+\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__,\n+\t__LIBGCC_STACK_GROWS_DOWNWARD__,\n+\t__LIBGCC_DONT_USE_BUILTIN_SETJMP__,\n+\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__,\n+\t__LIBGCC_DWARF_FRAME_REGISTERS__,\n+\t__LIBGCC_EH_RETURN_STACKADJ_RTX__, __LIBGCC_JMP_BUF_SIZE__,\n+\t__LIBGCC_STACK_POINTER_REGNUM__ and\n+\t__LIBGCC_VTABLE_USES_DESCRIPTORS__ for -fbuilding-libgcc.\n+\t(builtin_define_with_value): Handle backslash-escaping in string\n+\tmacro values.\n+\n 2014-09-05  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/63148"}, {"sha": "a47473534b55f4f7cf92382088a94fffb7e88c0f", "filename": "gcc/c-family/c-cppbuiltin.c", "status": "modified", "additions": 111, "deletions": 4, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/gcc%2Fc-family%2Fc-cppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/gcc%2Fc-family%2Fc-cppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -943,9 +943,74 @@ c_cpp_builtins (cpp_reader *pfile)\n \n   /* For libgcc-internal use only.  */\n   if (flag_building_libgcc)\n-    /* For libgcc enable-execute-stack.c.  */\n-    builtin_define_with_int_value (\"__LIBGCC_TRAMPOLINE_SIZE__\",\n-\t\t\t\t   TRAMPOLINE_SIZE);\n+    {\n+      /* For libgcc crtstuff.c and libgcc2.c.  */\n+      builtin_define_with_int_value (\"__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__\",\n+\t\t\t\t     EH_TABLES_CAN_BE_READ_ONLY);\n+#ifdef EH_FRAME_SECTION_NAME\n+      builtin_define_with_value (\"__LIBGCC_EH_FRAME_SECTION_NAME__\",\n+\t\t\t\t EH_FRAME_SECTION_NAME, 1);\n+#endif\n+#ifdef JCR_SECTION_NAME\n+      builtin_define_with_value (\"__LIBGCC_JCR_SECTION_NAME__\",\n+\t\t\t\t JCR_SECTION_NAME, 1);\n+#endif\n+#ifdef CTORS_SECTION_ASM_OP\n+      builtin_define_with_value (\"__LIBGCC_CTORS_SECTION_ASM_OP__\",\n+\t\t\t\t CTORS_SECTION_ASM_OP, 1);\n+#endif\n+#ifdef DTORS_SECTION_ASM_OP\n+      builtin_define_with_value (\"__LIBGCC_DTORS_SECTION_ASM_OP__\",\n+\t\t\t\t DTORS_SECTION_ASM_OP, 1);\n+#endif\n+#ifdef TEXT_SECTION_ASM_OP\n+      builtin_define_with_value (\"__LIBGCC_TEXT_SECTION_ASM_OP__\",\n+\t\t\t\t TEXT_SECTION_ASM_OP, 1);\n+#endif\n+#ifdef INIT_SECTION_ASM_OP\n+      builtin_define_with_value (\"__LIBGCC_INIT_SECTION_ASM_OP__\",\n+\t\t\t\t INIT_SECTION_ASM_OP, 1);\n+#endif\n+#ifdef INIT_ARRAY_SECTION_ASM_OP\n+      /* Despite the name of this target macro, the expansion is not\n+\t actually used, and may be empty rather than a string\n+\t constant.  */\n+      cpp_define (pfile, \"__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__\");\n+#endif\n+\n+      /* For libgcc enable-execute-stack.c.  */\n+      builtin_define_with_int_value (\"__LIBGCC_TRAMPOLINE_SIZE__\",\n+\t\t\t\t     TRAMPOLINE_SIZE);\n+\n+      /* For libgcc generic-morestack.c and unwinder code.  */\n+#ifdef STACK_GROWS_DOWNWARD\n+      cpp_define (pfile, \"__LIBGCC_STACK_GROWS_DOWNWARD__\");\n+#endif\n+\n+      /* For libgcc unwinder code.  */\n+#ifdef DONT_USE_BUILTIN_SETJMP\n+      cpp_define (pfile, \"__LIBGCC_DONT_USE_BUILTIN_SETJMP__\");\n+#endif\n+#ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n+      builtin_define_with_int_value (\"__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__\",\n+\t\t\t\t     DWARF_ALT_FRAME_RETURN_COLUMN);\n+#endif\n+      builtin_define_with_int_value (\"__LIBGCC_DWARF_FRAME_REGISTERS__\",\n+\t\t\t\t     DWARF_FRAME_REGISTERS);\n+#ifdef EH_RETURN_STACKADJ_RTX\n+      cpp_define (pfile, \"__LIBGCC_EH_RETURN_STACKADJ_RTX__\");\n+#endif\n+#ifdef JMP_BUF_SIZE\n+      builtin_define_with_int_value (\"__LIBGCC_JMP_BUF_SIZE__\",\n+\t\t\t\t     JMP_BUF_SIZE);\n+#endif\n+      builtin_define_with_int_value (\"__LIBGCC_STACK_POINTER_REGNUM__\",\n+\t\t\t\t     STACK_POINTER_REGNUM);\n+\n+      /* For libgcov.  */\n+      builtin_define_with_int_value (\"__LIBGCC_VTABLE_USES_DESCRIPTORS__\",\n+\t\t\t\t     TARGET_VTABLE_USES_DESCRIPTORS);\n+    }\n \n   /* For use in assembly language.  */\n   builtin_define_with_value (\"__REGISTER_PREFIX__\", REGISTER_PREFIX, 0);\n@@ -1087,7 +1152,49 @@ builtin_define_with_value (const char *macro, const char *expansion, int is_str)\n   size_t extra = 2;  /* space for an = and a NUL */\n \n   if (is_str)\n-    extra += 2;  /* space for two quote marks */\n+    {\n+      char *quoted_expansion = (char *) alloca (elen * 4 + 1);\n+      const char *p;\n+      char *q;\n+      extra += 2;  /* space for two quote marks */\n+      for (p = expansion, q = quoted_expansion; *p; p++)\n+\t{\n+\t  switch (*p)\n+\t    {\n+\t    case '\\n':\n+\t      *q++ = '\\\\';\n+\t      *q++ = 'n';\n+\t      break;\n+\n+\t    case '\\t':\n+\t      *q++ = '\\\\';\n+\t      *q++ = 't';\n+\t      break;\n+\n+\t    case '\\\\':\n+\t      *q++ = '\\\\';\n+\t      *q++ = '\\\\';\n+\t      break;\n+\n+\t    case '\"':\n+\t      *q++ = '\\\\';\n+\t      *q++ = '\"';\n+\t      break;\n+\n+\t    default:\n+\t      if (ISPRINT ((unsigned char) *p))\n+\t\t*q++ = *p;\n+\t      else\n+\t\t{\n+\t\t  sprintf (q, \"\\\\%03o\", (unsigned char) *p);\n+\t\t  q += 4;\n+\t\t}\n+\t    }\n+\t}\n+      *q = '\\0';\n+      expansion = quoted_expansion;\n+      elen = q - expansion;\n+    }\n \n   buf = (char *) alloca (mlen + elen + extra);\n   if (is_str)"}, {"sha": "01b5883fc7233b6a92a4f71d586efb83ef16a8e3", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -1,3 +1,91 @@\n+2014-09-05  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (CRTSTUFF_CFLAGS): Add -fbuilding-libgcc.\n+\t* config/aarch64/linux-unwind.h (STACK_POINTER_REGNUM): Change all\n+\tuses to __LIBGCC_STACK_POINTER_REGNUM__.\n+\t(DWARF_ALT_FRAME_RETURN_COLUMN): Change all uses to\n+\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t* config/alpha/vms-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN):\n+\tChange use to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t* config/cr16/unwind-cr16.c (STACK_GROWS_DOWNWARD): Change all\n+\tuses to __LIBGCC_STACK_GROWS_DOWNWARD__.\n+\t(DWARF_FRAME_REGISTERS): Change all uses to\n+\t__LIBGCC_DWARF_FRAME_REGISTERS__.\n+\t(EH_RETURN_STACKADJ_RTX): Change all uses to\n+\t__LIBGCC_EH_RETURN_STACKADJ_RTX__.\n+\t* config/cr16/unwind-dw2.h (DWARF_FRAME_REGISTERS): Change use to\n+\t__LIBGCC_DWARF_FRAME_REGISTERS__.  Remove conditional definition.\n+\t* config/i386/cygming-crtbegin.c (EH_FRAME_SECTION_NAME): Change\n+\tuse to __LIBGCC_EH_FRAME_SECTION_NAME__.\n+\t(JCR_SECTION_NAME): Change use to __LIBGCC_JCR_SECTION_NAME__.\n+\t* config/i386/cygming-crtend.c (EH_FRAME_SECTION_NAME): Change use\n+\tto __LIBGCC_EH_FRAME_SECTION_NAME__.\n+\t(JCR_SECTION_NAME): Change use to __LIBGCC_JCR_SECTION_NAME__\n+\t* config/mips/linux-unwind.h (STACK_POINTER_REGNUM): Change use to\n+\t__LIBGCC_STACK_POINTER_REGNUM__.\n+\t(DWARF_ALT_FRAME_RETURN_COLUMN): Change all uses to\n+\t__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t* config/nios2/linux-unwind.h (STACK_POINTER_REGNUM): Change use\n+\tto __LIBGCC_STACK_POINTER_REGNUM__.\n+\t* config/pa/hpux-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN): Change\n+\tall uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t* config/pa/linux-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN): Change\n+\tall uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t* config/rs6000/aix-unwind.h (DWARF_ALT_FRAME_RETURN_COLUMN):\n+\tChange all uses to __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__.\n+\t(STACK_POINTER_REGNUM): Change all uses to\n+\t__LIBGCC_STACK_POINTER_REGNUM__.\n+\t* config/rs6000/darwin-fallback.c (STACK_POINTER_REGNUM): Change\n+\tuse to __LIBGCC_STACK_POINTER_REGNUM__.\n+\t* config/rs6000/linux-unwind.h (STACK_POINTER_REGNUM): Change all\n+\tuses to __LIBGCC_STACK_POINTER_REGNUM__.\n+\t* config/sparc/linux-unwind.h (DWARF_FRAME_REGISTERS): Change use\n+\tto __LIBGCC_DWARF_FRAME_REGISTERS__.\n+\t* config/sparc/sol2-unwind.h (DWARF_FRAME_REGISTERS): Change use\n+\tto __LIBGCC_DWARF_FRAME_REGISTERS__.\n+\t* config/tilepro/linux-unwind.h (STACK_POINTER_REGNUM): Change use\n+\tto __LIBGCC_STACK_POINTER_REGNUM__.\n+\t* config/xtensa/unwind-dw2-xtensa.h (DWARF_FRAME_REGISTERS):\n+\tRemove conditional definition.\n+\t* crtstuff.c (TEXT_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_TEXT_SECTION_ASM_OP__.\n+\t(EH_FRAME_SECTION_NAME): Change all uses to\n+\t__LIBGCC_EH_FRAME_SECTION_NAME__.\n+\t(EH_TABLES_CAN_BE_READ_ONLY): Change all uses to\n+\t__LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__.\n+\t(CTORS_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_CTORS_SECTION_ASM_OP__.\n+\t(DTORS_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_DTORS_SECTION_ASM_OP__.\n+\t(JCR_SECTION_NAME): Change all uses to\n+\t__LIBGCC_JCR_SECTION_NAME__.\n+\t(INIT_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_INIT_SECTION_ASM_OP__.\n+\t(INIT_ARRAY_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__.\n+\t* generic-morestack.c (STACK_GROWS_DOWNWARD): Change all uses to\n+\t__LIBGCC_STACK_GROWS_DOWNWARD__.\n+\t* libgcc2.c (INIT_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_INIT_SECTION_ASM_OP__.\n+\t(INIT_ARRAY_SECTION_ASM_OP): Change all uses to\n+\t__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__.\n+\t(EH_FRAME_SECTION_NAME): Change all uses to\n+\t__LIBGCC_EH_FRAME_SECTION_NAME__.\n+\t* libgcov-profiler.c (VTABLE_USES_DESCRIPTORS): Remove conditional\n+\tdefinitions.  Change all uses to\n+\t__LIBGCC_VTABLE_USES_DESCRIPTORS__.\n+\t* unwind-dw2.c (STACK_GROWS_DOWNWARD): Change all uses to\n+\t__LIBGCC_STACK_GROWS_DOWNWARD__.\n+\t(DWARF_FRAME_REGISTERS): Change all uses to\n+\t__LIBGCC_DWARF_FRAME_REGISTERS__.\n+\t(EH_RETURN_STACKADJ_RTX): Change all uses to\n+\t__LIBGCC_EH_RETURN_STACKADJ_RTX__.\n+\t* unwind-dw2.h (DWARF_FRAME_REGISTERS): Remove conditional\n+\tdefinition.  Change use to __LIBGCC_DWARF_FRAME_REGISTERS__.\n+\t* unwind-sjlj.c (DONT_USE_BUILTIN_SETJMP): Change all uses to\n+\t__LIBGCC_DONT_USE_BUILTIN_SETJMP__.\n+\t(JMP_BUF_SIZE): Change use to __LIBGCC_JMP_BUF_SIZE__.\n+\n 2014-09-02  Nathan sidwell  <nathan@acm.org>\n \n \t* libgcov-interface.c (STRONG_ALIAS): New."}, {"sha": "6a6cf66d6989f73daf2bf7c64b6859e1e75fc551", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -283,7 +283,7 @@ INTERNAL_CFLAGS = $(CFLAGS) $(LIBGCC2_CFLAGS) $(HOST_LIBGCC2_CFLAGS) \\\n CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \\\n   -finhibit-size-directive -fno-inline -fno-exceptions \\\n   -fno-zero-initialized-in-bss -fno-toplevel-reorder -fno-tree-vectorize \\\n-  -fno-stack-protector \\\n+  -fbuilding-libgcc -fno-stack-protector \\\n   $(INHIBIT_LIBC_CFLAGS)\n \n # Extra flags to use when compiling crt{begin,end}.o."}, {"sha": "8521c0cf3babd306a90d420847fedf49358e77f7", "filename": "libgcc/config/aarch64/linux-unwind.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -81,7 +81,7 @@ aarch64_fallback_frame_state (struct _Unwind_Context *context,\n \n   new_cfa = (_Unwind_Ptr) sc;\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n   for (i = 0; i < AARCH64_DWARF_NUMBER_R; i++)\n@@ -144,11 +144,12 @@ aarch64_fallback_frame_state (struct _Unwind_Context *context,\n \n   fs->signal_frame = 1;\n \n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].how = REG_SAVED_VAL_OFFSET;\n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].loc.offset =\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how =\n+    REG_SAVED_VAL_OFFSET;\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset =\n     (_Unwind_Ptr) (sc->pc) - new_cfa;\n \n-  fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n+  fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n \n   return _URC_NO_REASON;\n }"}, {"sha": "8d89059135b065fd48e0df39e0647983896f8135", "filename": "libgcc/config/alpha/vms-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Falpha%2Fvms-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -58,7 +58,7 @@ do { \\\n   { if ((((STATUS) & 1) != 1)) return _URC_END_OF_STACK; }\n #define DENOTES_EXC_DISPATCHER(PV) ((PV) == (ADDR) (REG) SYS$GL_CALL_HANDL)\n \n-#define RA_COLUMN (DWARF_ALT_FRAME_RETURN_COLUMN)\n+#define RA_COLUMN (__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__)\n \n static int\n alpha_vms_fallback_frame_state (struct _Unwind_Context *context,"}, {"sha": "757726a6497da593fa1f6ee1307b9243f4ee3663", "filename": "libgcc/config/cr16/unwind-cr16.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fcr16%2Funwind-cr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fcr16%2Funwind-cr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fcr16%2Funwind-cr16.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -42,16 +42,16 @@\n \n #ifndef __USING_SJLJ_EXCEPTIONS__\n \n-#ifndef STACK_GROWS_DOWNWARD\n-#define STACK_GROWS_DOWNWARD 0\n+#ifndef __LIBGCC_STACK_GROWS_DOWNWARD__\n+#define __LIBGCC_STACK_GROWS_DOWNWARD__ 0\n #else\n-#undef STACK_GROWS_DOWNWARD\n-#define STACK_GROWS_DOWNWARD 1\n+#undef __LIBGCC_STACK_GROWS_DOWNWARD__\n+#define __LIBGCC_STACK_GROWS_DOWNWARD__ 1\n #endif\n \n /* Dwarf frame registers used for pre gcc 3.0 compiled glibc.  */\n #ifndef PRE_GCC3_DWARF_FRAME_REGISTERS\n-#define PRE_GCC3_DWARF_FRAME_REGISTERS DWARF_FRAME_REGISTERS\n+#define PRE_GCC3_DWARF_FRAME_REGISTERS __LIBGCC_DWARF_FRAME_REGISTERS__\n #endif\n \n #ifndef DWARF_REG_TO_UNWIND_COLUMN\n@@ -101,7 +101,7 @@ _Unwind_Get_Unwind_Context_Reg_Val (_Unwind_Word val)\n    to its caller.  */\n struct _Unwind_Context\n {\n-  _Unwind_Context_Reg_Val reg[DWARF_FRAME_REGISTERS+1];\n+  _Unwind_Context_Reg_Val reg[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n   void *cfa;\n   void *ra;\n   void *lsda;\n@@ -115,11 +115,11 @@ struct _Unwind_Context\n      struct _Unwind_Context.  */\n   _Unwind_Word version;\n   _Unwind_Word args_size;\n-  char by_value[DWARF_FRAME_REGISTERS+1];\n+  char by_value[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n };\n \n /* Byte size of every register managed by these routines.  */\n-static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS+1];\n+static unsigned char dwarf_reg_size_table[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n \f\n /* Read unaligned data from the instruction buffer.  */\n@@ -1327,7 +1327,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   void *cfa;\n   long i;\n \n-#ifdef EH_RETURN_STACKADJ_RTX\n+#ifdef __LIBGCC_EH_RETURN_STACKADJ_RTX__\n   /* Special handling here: Many machines do not use a frame pointer,\n      and track the CFA only through offsets from the stack pointer from\n      one frame to the next.  In this case, the stack pointer is never\n@@ -1375,7 +1375,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   context->cfa = cfa;\n \n   /* Compute the addresses of all registers saved in this frame.  */\n-  for (i = 0; i < DWARF_FRAME_REGISTERS + 1; ++i)\n+  for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n     switch (fs->regs.reg[i].how)\n       {\n       case REG_UNSAVED:\n@@ -1601,7 +1601,7 @@ uw_install_context_1 (struct _Unwind_Context *current,\n   if (!_Unwind_GetGRPtr (target, __builtin_dwarf_sp_column ()))\n     _Unwind_SetSpColumn (target, target->cfa, &sp_slot);\n \n-  for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n+  for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__; ++i)\n     {\n       void *c = (void *) (_Unwind_Internal_Ptr) current->reg[i];\n       void *t = (void *) (_Unwind_Internal_Ptr)target->reg[i];\n@@ -1637,7 +1637,7 @@ uw_install_context_1 (struct _Unwind_Context *current,\n       target_cfa = _Unwind_GetPtr (target, __builtin_dwarf_sp_column ());\n \n       /* We adjust SP by the difference between CURRENT and TARGET's CFA.  */\n-      if (STACK_GROWS_DOWNWARD)\n+      if (__LIBGCC_STACK_GROWS_DOWNWARD__)\n \treturn target_cfa - current->cfa + target->args_size;\n       else\n \treturn current->cfa - target_cfa - target->args_size;\n@@ -1651,7 +1651,7 @@ uw_identify_context (struct _Unwind_Context *context)\n   /* The CFA is not sufficient to disambiguate the context of a function\n      interrupted by a signal before establishing its frame and the context\n      of the signal itself.  */\n-  if (STACK_GROWS_DOWNWARD)\n+  if (__LIBGCC_STACK_GROWS_DOWNWARD__)\n     return _Unwind_GetCFA (context) - _Unwind_IsSignalFrame (context);\n   else\n     return _Unwind_GetCFA (context) + _Unwind_IsSignalFrame (context);"}, {"sha": "c90756bc722a8a63b27c1d77d45904cd2fbeb86c", "filename": "libgcc/config/cr16/unwind-dw2.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fcr16%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fcr16%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fcr16%2Funwind-dw2.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -22,12 +22,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* A target can override (perhaps for backward compatibility) how\n-   many dwarf2 columns are unwound.  */\n-#ifndef DWARF_FRAME_REGISTERS\n-#define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n-#endif\n-\n /* The result of interpreting the frame unwind info for a frame.\n    This is all symbolic at this point, as none of the values can\n    be resolved until the target pc is located.  */\n@@ -52,7 +46,7 @@ typedef struct\n \tREG_SAVED_VAL_EXP,\n \tREG_UNDEFINED\n       } how;\n-    } reg[DWARF_FRAME_REGISTERS+1];\n+    } reg[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n     /* Used to implement DW_CFA_remember_state.  */\n     struct frame_state_reg_info *prev;"}, {"sha": "a1513b7c0621076ccb7ba20b8c60798c454a57c4", "filename": "libgcc/config/i386/cygming-crtbegin.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtbegin.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -95,7 +95,7 @@ _Jv_RegisterClasses (__attribute__((unused)) const void *p)\n    register/deregister it with the exception handling library code.  */\n #if DWARF2_UNWIND_INFO\n static EH_FRAME_SECTION_CONST char __EH_FRAME_BEGIN__[]\n-  __attribute__((used, section(EH_FRAME_SECTION_NAME), aligned(4)))\n+  __attribute__((used, section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n   = { };\n \n static struct object obj;\n@@ -107,7 +107,7 @@ static void *  (*deregister_frame_fn) (const void *) = NULL;\n \n #if TARGET_USE_JCR_SECTION\n static void *__JCR_LIST__[]\n-  __attribute__ ((used, section(JCR_SECTION_NAME), aligned(4)))\n+  __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__), aligned(4)))\n   = { };\n #endif\n "}, {"sha": "4580ab915e17fe148576ee02225bd38a8863ecb7", "filename": "libgcc/config/i386/cygming-crtend.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fi386%2Fcygming-crtend.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -48,15 +48,15 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    this would be the 'length' field in a real FDE.  */\n \n static EH_FRAME_SECTION_CONST int __FRAME_END__[]\n-  __attribute__ ((used,  section(EH_FRAME_SECTION_NAME),\n+  __attribute__ ((used,  section(__LIBGCC_EH_FRAME_SECTION_NAME__),\n \t\t  aligned(4)))\n   = { 0 };\n #endif\n \n #if TARGET_USE_JCR_SECTION\n /* Null terminate the .jcr section array.  */\n static void *__JCR_END__[1] \n-   __attribute__ ((used, section(JCR_SECTION_NAME),\n+   __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n \t\t   aligned(sizeof(void *))))\n    = { 0 };\n #endif"}, {"sha": "6965eb6064373489ee5304734387261542b9edaf", "filename": "libgcc/config/mips/linux-unwind.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -90,7 +90,7 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n \n   new_cfa = (_Unwind_Ptr) sc;\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n   /* On o32 Linux, the register save slots in the sigcontext are\n@@ -115,10 +115,11 @@ mips_fallback_frame_state (struct _Unwind_Context *context,\n      Note that setting fs->signal_frame would not work.  As the comment\n      above MASK_RETURN_ADDR explains, MIPS unwinders must earch for an\n      odd-valued address.  */\n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].how = REG_SAVED_VAL_OFFSET;\n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].loc.offset\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+    = REG_SAVED_VAL_OFFSET;\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n     = (_Unwind_Ptr)(sc->sc_pc) + 2 - new_cfa;\n-  fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n+  fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n \n   return _URC_NO_REASON;\n }"}, {"sha": "7f7eb4ac40de6a7d597a59dae741c0c5b64c9939", "filename": "libgcc/config/nios2/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fnios2%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -81,7 +81,7 @@ nios2_fallback_frame_state (struct _Unwind_Context *context,\n       /* The CFA is the user's incoming stack pointer value.  */\n       new_cfa = (_Unwind_Ptr)regs->gregs[28];\n       fs->regs.cfa_how = CFA_REG_OFFSET;\n-      fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+      fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n       fs->regs.cfa_offset = new_cfa - (_Unwind_Ptr) context->cfa;\n \n       /* The sequential registers.  */"}, {"sha": "b510e13f885564050f39cfe9806332b575591b01", "filename": "libgcc/config/pa/hpux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fhpux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -349,8 +349,8 @@ pa_fallback_frame_state (struct _Unwind_Context *context,\n \t  UPDATE_FS_FOR_SAR (fs, 88);\n \t}\n \n-      fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n-      UPDATE_FS_FOR_PC (fs, DWARF_ALT_FRAME_RETURN_COLUMN);\n+      fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n+      UPDATE_FS_FOR_PC (fs, __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__);\n       fs->signal_frame = 1;\n \n       return _URC_NO_REASON;"}, {"sha": "9939f612b5e90fa25736f4dd37b9cb6fe1ab765d", "filename": "libgcc/config/pa/linux-unwind.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -131,10 +131,11 @@ pa32_fallback_frame_state (struct _Unwind_Context *context,\n     }\n   fs->regs.reg[88].how = REG_SAVED_OFFSET;\n   fs->regs.reg[88].loc.offset = (long) &sc->sc_sar - new_cfa;\n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].how = REG_SAVED_OFFSET;\n-  fs->regs.reg[DWARF_ALT_FRAME_RETURN_COLUMN].loc.offset\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].how\n+    = REG_SAVED_OFFSET;\n+  fs->regs.reg[__LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__].loc.offset\n     = (long) &sc->sc_iaoq[0] - new_cfa;\n-  fs->retaddr_column = DWARF_ALT_FRAME_RETURN_COLUMN;\n+  fs->retaddr_column = __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__;\n   fs->signal_frame = 1;\n   return _URC_NO_REASON;\n }"}, {"sha": "b925db2dcbb3c634ae1e9f995569e6091dda722b", "filename": "libgcc/config/rs6000/aix-unwind.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Faix-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -175,8 +175,8 @@ ucontext_for (struct _Unwind_Context *context)\n \n /* The fallback proper.  */\n \n-#ifdef DWARF_ALT_FRAME_RETURN_COLUMN\n-#define RETURN_COLUMN DWARF_ALT_FRAME_RETURN_COLUMN\n+#ifdef __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__\n+#define RETURN_COLUMN __LIBGCC_DWARF_ALT_FRAME_RETURN_COLUMN__\n #else\n #define RETURN_COLUMN ARG_POINTER_REGNUM\n #endif\n@@ -204,17 +204,17 @@ ppc_aix_fallback_frame_state (struct _Unwind_Context *context,\n \n   /* The \"kernel\" frame cfa is the stack pointer at the signal occurrence\n      point.  */\n-  new_cfa = mctx->gpr[STACK_POINTER_REGNUM];\n+  new_cfa = mctx->gpr[__LIBGCC_STACK_POINTER_REGNUM__];\n \n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   /* And we state how to find the various registers it has saved with\n      relative offset rules from there.  */\n \n   for (i = 0; i < 32; i++)\n-    if (i != STACK_POINTER_REGNUM)\n+    if (i != __LIBGCC_STACK_POINTER_REGNUM__)\n       REGISTER_CFA_OFFSET_FOR (fs, i, &mctx->gpr[i], new_cfa);\n \n   REGISTER_CFA_OFFSET_FOR (fs, CR2_REGNO, &mctx->cr, new_cfa);"}, {"sha": "95cd83a6ec96ed282684c099e16ee81592c12ef7", "filename": "libgcc/config/rs6000/darwin-fallback.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fdarwin-fallback.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -438,7 +438,7 @@ handle_syscall (_Unwind_FrameState *fs, const reg_unit gprs[32],\n     }\n \n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - old_cfa;;\n   \n   /* The choice of column for the return address is somewhat tricky."}, {"sha": "1cff1a5453eab141a530e83be94757dc9b0a930b", "filename": "libgcc/config/rs6000/linux-unwind.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -205,9 +205,9 @@ ppc_fallback_frame_state (struct _Unwind_Context *context,\n   if (regs == NULL)\n     return _URC_END_OF_STACK;\n \n-  new_cfa = regs->gpr[STACK_POINTER_REGNUM];\n+  new_cfa = regs->gpr[__LIBGCC_STACK_POINTER_REGNUM__];\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n #ifdef __powerpc64__"}, {"sha": "81eb16e04352bdd168bbf964b2157752d1135a97", "filename": "libgcc/config/sparc/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -121,7 +121,7 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n \n       context->cfa -= STACK_BIAS;\n \n-      for (i = 0; i < DWARF_FRAME_REGISTERS + 1; ++i)\n+      for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n \tif (fs->regs.reg[i].how == REG_SAVED_OFFSET)\n \t  _Unwind_SetGRPtr (context, i,\n \t\t\t    _Unwind_GetGRPtr (context, i) - STACK_BIAS);"}, {"sha": "6638464997c6f40356db01213ffa97f0b6fd17e8", "filename": "libgcc/config/sparc/sol2-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fsparc%2Fsol2-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -139,7 +139,7 @@ sparc64_frob_update_context (struct _Unwind_Context *context,\n \n       context->cfa -= STACK_BIAS;\n \n-      for (i = 0; i < DWARF_FRAME_REGISTERS + 1; ++i)\n+      for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n \tif (fs->regs.reg[i].how == REG_SAVED_OFFSET)\n \t  _Unwind_SetGRPtr (context, i,\n \t\t\t    _Unwind_GetGRPtr (context, i) - STACK_BIAS);"}, {"sha": "0ebac90ecc91d8f1c8854963c69b4da1dbf65a7e", "filename": "libgcc/config/tilepro/linux-unwind.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Ftilepro%2Flinux-unwind.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Ftilepro%2Flinux-unwind.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ftilepro%2Flinux-unwind.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -78,7 +78,7 @@ tile_fallback_frame_state (struct _Unwind_Context *context,\n \n   new_cfa = sc->sp;\n   fs->regs.cfa_how = CFA_REG_OFFSET;\n-  fs->regs.cfa_reg = STACK_POINTER_REGNUM;\n+  fs->regs.cfa_reg = __LIBGCC_STACK_POINTER_REGNUM__;\n   fs->regs.cfa_offset = new_cfa - (long) context->cfa;\n \n   for (i = 0; i < 56; ++i)"}, {"sha": "69f3bcdd848f7474648334e0782a45bd8ffe15fd", "filename": "libgcc/config/xtensa/unwind-dw2-xtensa.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fxtensa%2Funwind-dw2-xtensa.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -22,12 +22,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* A target can override (perhaps for backward compatibility) how\n-   many dwarf2 columns are unwound.  */\n-#ifndef DWARF_FRAME_REGISTERS\n-#define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n-#endif\n-\n /* Xtensa's variable-size register window save areas can be unwound without\n    any unwind info.  This is a stripped down version of the standard DWARF\n    _Unwind_FrameState.  */"}, {"sha": "4bea6b9f8ccc5759852d3bf722b6020744cdcb76", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 53, "deletions": 49, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -76,7 +76,7 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n   asm (SECTION_OP);\t\t\t\t\t\\\n   FUNC ();\t\t\t\t\t\t\\\n   FORCE_CODE_SECTION_ALIGN\t\t\t\t\\\n-  asm (TEXT_SECTION_ASM_OP);\t\t\t\t\\\n+  asm (__LIBGCC_TEXT_SECTION_ASM_OP__);\t\t\t\t\\\n }\n #endif\n \n@@ -131,10 +131,11 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n # define USE_PT_GNU_EH_FRAME\n #endif\n \n-#if defined(EH_FRAME_SECTION_NAME) && !defined(USE_PT_GNU_EH_FRAME)\n+#if defined(__LIBGCC_EH_FRAME_SECTION_NAME__) && !defined(USE_PT_GNU_EH_FRAME)\n # define USE_EH_FRAME_REGISTRY\n #endif\n-#if defined(EH_FRAME_SECTION_NAME) && EH_TABLES_CAN_BE_READ_ONLY\n+#if defined(__LIBGCC_EH_FRAME_SECTION_NAME__) \\\n+    && __LIBGCC_EH_TABLES_CAN_BE_READ_ONLY__\n # define EH_FRAME_SECTION_CONST const\n #else\n # define EH_FRAME_SECTION_CONST\n@@ -224,11 +225,11 @@ typedef void (*func_ptr) (void);\n    does not start with a count of elements.  */\n #ifdef CTOR_LIST_BEGIN\n CTOR_LIST_BEGIN;\n-#elif defined(CTORS_SECTION_ASM_OP)\n+#elif defined(__LIBGCC_CTORS_SECTION_ASM_OP__)\n /* Hack: force cc1 to switch to .data section early, so that assembling\n    __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n static func_ptr force_to_data[1] __attribute__ ((__used__)) = { };\n-asm (CTORS_SECTION_ASM_OP);\n+asm (__LIBGCC_CTORS_SECTION_ASM_OP__);\n STATIC func_ptr __CTOR_LIST__[1]\n   __attribute__ ((__used__, aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n@@ -240,8 +241,8 @@ STATIC func_ptr __CTOR_LIST__[1]\n \n #ifdef DTOR_LIST_BEGIN\n DTOR_LIST_BEGIN;\n-#elif defined(DTORS_SECTION_ASM_OP)\n-asm (DTORS_SECTION_ASM_OP);\n+#elif defined(__LIBGCC_DTORS_SECTION_ASM_OP__)\n+asm (__LIBGCC_DTORS_SECTION_ASM_OP__);\n STATIC func_ptr __DTOR_LIST__[1]\n   __attribute__ ((aligned(sizeof(func_ptr))))\n   = { (func_ptr) (-1) };\n@@ -256,17 +257,18 @@ STATIC func_ptr __DTOR_LIST__[1]\n /* Stick a label at the beginning of the frame unwind info so we can register\n    and deregister it with the exception handling library code.  */\n STATIC EH_FRAME_SECTION_CONST char __EH_FRAME_BEGIN__[]\n-     __attribute__((section(EH_FRAME_SECTION_NAME), aligned(4)))\n+     __attribute__((section(__LIBGCC_EH_FRAME_SECTION_NAME__), aligned(4)))\n      = { };\n #endif /* USE_EH_FRAME_REGISTRY */\n \n-#ifdef JCR_SECTION_NAME\n+#ifdef __LIBGCC_JCR_SECTION_NAME__\n /* Stick a label at the beginning of the java class registration info\n    so we can register them properly.  */\n STATIC void *__JCR_LIST__[]\n-  __attribute__ ((used, section(JCR_SECTION_NAME), aligned(sizeof(void*))))\n+  __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n+\t\t  aligned(sizeof(void*))))\n   = { };\n-#endif /* JCR_SECTION_NAME */\n+#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n \n #if USE_TM_CLONE_REGISTRY\n STATIC func_ptr __TMC_LIST__[]\n@@ -317,7 +319,8 @@ register_tm_clones (void)\n }\n #endif /* USE_TM_CLONE_REGISTRY */\n \n-#if defined(INIT_SECTION_ASM_OP) || defined(INIT_ARRAY_SECTION_ASM_OP)\n+#if defined(__LIBGCC_INIT_SECTION_ASM_OP__) \\\n+    || defined(__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__)\n \n #ifdef OBJECT_FORMAT_ELF\n \n@@ -438,11 +441,12 @@ __do_global_dtors_aux_1 (void)\n {\n   atexit (__do_global_dtors_aux);\n }\n-CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, __do_global_dtors_aux_1)\n+CRT_CALL_STATIC_FUNCTION (__LIBGCC_INIT_SECTION_ASM_OP__,\n+\t\t\t  __do_global_dtors_aux_1)\n #endif\n \n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(JCR_SECTION_NAME) \\\n+    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n@@ -465,7 +469,7 @@ frame_dummy (void)\n #endif /* CRT_GET_RFIB_DATA */\n #endif /* USE_EH_FRAME_REGISTRY */\n \n-#ifdef JCR_SECTION_NAME\n+#ifdef __LIBGCC_JCR_SECTION_NAME__\n   void **jcr_list;\n   __asm (\"\" : \"=g\" (jcr_list) : \"0\" (__JCR_LIST__));\n   if (__builtin_expect (*jcr_list != NULL, 0))\n@@ -475,21 +479,21 @@ frame_dummy (void)\n       if (register_classes)\n \tregister_classes (jcr_list);\n     }\n-#endif /* JCR_SECTION_NAME */\n+#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n \n #if USE_TM_CLONE_REGISTRY\n   register_tm_clones ();\n #endif /* USE_TM_CLONE_REGISTRY */\n }\n \n-#ifdef INIT_SECTION_ASM_OP\n-CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, frame_dummy)\n-#else /* defined(INIT_SECTION_ASM_OP) */\n+#ifdef __LIBGCC_INIT_SECTION_ASM_OP__\n+CRT_CALL_STATIC_FUNCTION (__LIBGCC_INIT_SECTION_ASM_OP__, frame_dummy)\n+#else /* defined(__LIBGCC_INIT_SECTION_ASM_OP__) */\n static func_ptr __frame_dummy_init_array_entry[]\n   __attribute__ ((__used__, section(\".init_array\"), aligned(sizeof(func_ptr))))\n   = { frame_dummy };\n-#endif /* !defined(INIT_SECTION_ASM_OP) */\n-#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME || USE_TM_CLONE_REGISTRY */\n+#endif /* !defined(__LIBGCC_INIT_SECTION_ASM_OP__) */\n+#endif /* USE_EH_FRAME_REGISTRY || __LIBGCC_JCR_SECTION_NAME__ || USE_TM_CLONE_REGISTRY */\n \n #else  /* OBJECT_FORMAT_ELF */\n \n@@ -513,7 +517,7 @@ __do_global_ctors (void)\n #endif\n }\n \n-asm (INIT_SECTION_ASM_OP);\t/* cc1 doesn't know that we are switching! */\n+asm (__LIBGCC_INIT_SECTION_ASM_OP__);\t/* cc1 doesn't know that we are switching! */\n \n /* A routine to invoke all of the global constructors upon entry to the\n    program.  We put this into the .init section (for systems that have\n@@ -524,14 +528,14 @@ static void __attribute__((used))\n __do_global_ctors_aux (void)\t/* prologue goes in .init section */\n {\n   FORCE_CODE_SECTION_ALIGN\t/* explicit align before switch to .text */\n-  asm (TEXT_SECTION_ASM_OP);\t/* don't put epilogue and body in .init */\n+  asm (__LIBGCC_TEXT_SECTION_ASM_OP__);\t/* don't put epilogue and body in .init */\n   DO_GLOBAL_CTORS_BODY;\n   atexit (__do_global_dtors);\n }\n \n #endif /* OBJECT_FORMAT_ELF */\n \n-#elif defined(HAS_INIT_SECTION) /* ! INIT_SECTION_ASM_OP */\n+#elif defined(HAS_INIT_SECTION) /* ! __LIBGCC_INIT_SECTION_ASM_OP__ */\n \n extern void __do_global_dtors (void);\n \n@@ -557,7 +561,7 @@ __do_global_dtors (void)\n }\n \n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(JCR_SECTION_NAME) \\\n+    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n /* A helper function for __do_global_ctors, which is in crtend.o.  Here\n    in crtbegin.o, we can reference a couple of symbols not visible there.\n@@ -572,7 +576,7 @@ __do_global_ctors_1(void)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif\n \n-#ifdef JCR_SECTION_NAME\n+#ifdef __LIBGCC_JCR_SECTION_NAME__\n   void **jcr_list\n   __asm (\"\" : \"=g\" (jcr_list) : \"0\" (__JCR_LIST__));\n   if (__builtin_expect (*jcr_list != NULL, 0))\n@@ -588,9 +592,9 @@ __do_global_ctors_1(void)\n   register_tm_clones ();\n #endif /* USE_TM_CLONE_REGISTRY */\n }\n-#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME || USE_TM_CLONE_REGISTRY */\n+#endif /* USE_EH_FRAME_REGISTRY || __LIBGCC_JCR_SECTION_NAME__ || USE_TM_CLONE_REGISTRY */\n \n-#else /* ! INIT_SECTION_ASM_OP && ! HAS_INIT_SECTION */\n+#else /* ! __LIBGCC_INIT_SECTION_ASM_OP__ && ! HAS_INIT_SECTION */\n #error \"What are you doing with crtstuff.c, then?\"\n #endif\n \n@@ -607,11 +611,11 @@ __do_global_ctors_1(void)\n \n #ifdef CTOR_LIST_END\n CTOR_LIST_END;\n-#elif defined(CTORS_SECTION_ASM_OP)\n+#elif defined(__LIBGCC_CTORS_SECTION_ASM_OP__)\n /* Hack: force cc1 to switch to .data section early, so that assembling\n    __CTOR_LIST__ does not undo our behind-the-back change to .ctors.  */\n static func_ptr force_to_data[1] __attribute__ ((__used__)) = { };\n-asm (CTORS_SECTION_ASM_OP);\n+asm (__LIBGCC_CTORS_SECTION_ASM_OP__);\n STATIC func_ptr __CTOR_END__[1]\n   __attribute__((aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n@@ -624,18 +628,18 @@ STATIC func_ptr __CTOR_END__[1]\n #ifdef DTOR_LIST_END\n DTOR_LIST_END;\n #elif defined(HIDDEN_DTOR_LIST_END)\n-#ifdef DTORS_SECTION_ASM_OP\n-asm (DTORS_SECTION_ASM_OP);\n+#ifdef __LIBGCC_DTORS_SECTION_ASM_OP__\n+asm (__LIBGCC_DTORS_SECTION_ASM_OP__);\n #endif\n func_ptr __DTOR_END__[1]\n   __attribute__ ((used,\n-#ifndef DTORS_SECTION_ASM_OP\n+#ifndef __LIBGCC_DTORS_SECTION_ASM_OP__\n \t\t  section(\".dtors\"),\n #endif\n \t\t  aligned(sizeof(func_ptr)), visibility (\"hidden\")))\n   = { (func_ptr) 0 };\n-#elif defined(DTORS_SECTION_ASM_OP)\n-asm (DTORS_SECTION_ASM_OP);\n+#elif defined(__LIBGCC_DTORS_SECTION_ASM_OP__)\n+asm (__LIBGCC_DTORS_SECTION_ASM_OP__);\n STATIC func_ptr __DTOR_END__[1]\n   __attribute__ ((used, aligned(sizeof(func_ptr))))\n   = { (func_ptr) 0 };\n@@ -646,7 +650,7 @@ STATIC func_ptr __DTOR_END__[1]\n #endif\n #endif /* USE_INITFINI_ARRAY */\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef __LIBGCC_EH_FRAME_SECTION_NAME__\n /* Terminate the frame unwind info section with a 4byte 0 as a sentinel;\n    this would be the 'length' field in a real FDE.  */\n # if __INT_MAX__ == 2147483647\n@@ -659,18 +663,18 @@ typedef short int32;\n #  error \"Missing a 4 byte integer\"\n # endif\n STATIC EH_FRAME_SECTION_CONST int32 __FRAME_END__[]\n-     __attribute__ ((used, section(EH_FRAME_SECTION_NAME),\n+     __attribute__ ((used, section(__LIBGCC_EH_FRAME_SECTION_NAME__),\n \t\t     aligned(sizeof(int32))))\n      = { 0 };\n-#endif /* EH_FRAME_SECTION_NAME */\n+#endif /* __LIBGCC_EH_FRAME_SECTION_NAME__ */\n \n-#ifdef JCR_SECTION_NAME\n+#ifdef __LIBGCC_JCR_SECTION_NAME__\n /* Null terminate the .jcr section array.  */\n STATIC void *__JCR_END__[1]\n-   __attribute__ ((used, section(JCR_SECTION_NAME),\n+   __attribute__ ((used, section(__LIBGCC_JCR_SECTION_NAME__),\n \t\t   aligned(sizeof(void *))))\n    = { 0 };\n-#endif /* JCR_SECTION_NAME */\n+#endif /* __LIBGCC_JCR_SECTION_NAME__ */\n \n #if USE_TM_CLONE_REGISTRY\n # ifndef HAVE_GAS_HIDDEN\n@@ -685,11 +689,11 @@ func_ptr __TMC_END__[]\n # endif\n #endif /* USE_TM_CLONE_REGISTRY */\n \n-#ifdef INIT_ARRAY_SECTION_ASM_OP\n+#ifdef __LIBGCC_INIT_ARRAY_SECTION_ASM_OP__\n \n /* If we are using .init_array, there is nothing to do.  */\n \n-#elif defined(INIT_SECTION_ASM_OP)\n+#elif defined(__LIBGCC_INIT_SECTION_ASM_OP__)\n \n #ifdef OBJECT_FORMAT_ELF\n static void __attribute__((used))\n@@ -701,7 +705,7 @@ __do_global_ctors_aux (void)\n }\n \n /* Stick a call to __do_global_ctors_aux into the .init section.  */\n-CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, __do_global_ctors_aux)\n+CRT_CALL_STATIC_FUNCTION (__LIBGCC_INIT_SECTION_ASM_OP__, __do_global_ctors_aux)\n #else  /* OBJECT_FORMAT_ELF */\n \n /* Stick the real initialization code, followed by a normal sort of\n@@ -728,17 +732,17 @@ CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, __do_global_ctors_aux)\n static void\n __do_global_ctors_aux (void)\t/* prologue goes in .text section */\n {\n-  asm (INIT_SECTION_ASM_OP);\n+  asm (__LIBGCC_INIT_SECTION_ASM_OP__);\n   DO_GLOBAL_CTORS_BODY;\n   atexit (__do_global_dtors);\n }\t\t\t\t/* epilogue and body go in .init section */\n \n FORCE_CODE_SECTION_ALIGN\n-asm (TEXT_SECTION_ASM_OP);\n+asm (__LIBGCC_TEXT_SECTION_ASM_OP__);\n \n #endif /* OBJECT_FORMAT_ELF */\n \n-#elif defined(HAS_INIT_SECTION) /* ! INIT_SECTION_ASM_OP */\n+#elif defined(HAS_INIT_SECTION) /* ! __LIBGCC_INIT_SECTION_ASM_OP__ */\n \n extern void __do_global_ctors (void);\n \n@@ -750,15 +754,15 @@ __do_global_ctors (void)\n {\n   func_ptr *p;\n #if defined(USE_EH_FRAME_REGISTRY) \\\n-    || defined(JCR_SECTION_NAME) \\\n+    || defined(__LIBGCC_JCR_SECTION_NAME__) \\\n     || defined(USE_TM_CLONE_REGISTRY)\n   __do_global_ctors_1();\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)\n     (*p) ();\n }\n \n-#else /* ! INIT_SECTION_ASM_OP && ! HAS_INIT_SECTION */\n+#else /* ! __LIBGCC_INIT_SECTION_ASM_OP__ && ! HAS_INIT_SECTION */\n #error \"What are you doing with crtstuff.c, then?\"\n #endif\n "}, {"sha": "da878640d04c80e7818421e2f9a7f56718bcdc21", "filename": "libgcc/generic-morestack.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fgeneric-morestack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Fgeneric-morestack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgeneric-morestack.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -378,7 +378,7 @@ allocate_segment (size_t frame_size)\n     {\n       void *guard;\n \n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       guard = space;\n       space = (char *) space + pagesize;\n #else\n@@ -496,7 +496,7 @@ __generic_morestack_set_initial_sp (void *sp, size_t len)\n      to the nearest 512 byte boundary.  It's not essential that we be\n      precise here; getting it wrong will just leave some stack space\n      unused.  */\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n   sp = (void *) ((((__UINTPTR_TYPE__) sp + 511U) / 512U) * 512U);\n #else\n   sp = (void *) ((((__UINTPTR_TYPE__) sp - 511U) / 512U) * 512U);\n@@ -584,7 +584,7 @@ __generic_morestack (size_t *pframe_size, void *old_stack, size_t param_size)\n   /* Align the returned stack to a 32-byte boundary.  */\n   aligned = (param_size + 31) & ~ (size_t) 31;\n \n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n   {\n     char *bottom = (char *) (current + 1) + current->size;\n     to = bottom - aligned;\n@@ -628,7 +628,7 @@ __generic_releasestack (size_t *pavailable)\n \n   if (current != NULL)\n     {\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       *pavailable = (char *) old_stack - (char *) (current + 1);\n #else\n       *pavailable = (char *) (current + 1) + current->size - (char *) old_stack;\n@@ -639,7 +639,7 @@ __generic_releasestack (size_t *pavailable)\n       size_t used;\n \n       /* We have popped back to the original stack.  */\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       if ((char *) old_stack >= (char *) __morestack_initial_sp.sp)\n \tused = 0;\n       else\n@@ -778,7 +778,7 @@ __generic_findstack (void *stack)\n \t  && (char *) pss + pss->size > (char *) stack)\n \t{\n \t  __morestack_current_segment = pss;\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n \t  return (char *) stack - (char *) (pss + 1);\n #else\n \t  return (char *) (pss + 1) + pss->size - (char *) stack;\n@@ -791,7 +791,7 @@ __generic_findstack (void *stack)\n   if (__morestack_initial_sp.sp == NULL)\n     return 0;\n \n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n   if ((char *) stack >= (char *) __morestack_initial_sp.sp)\n     used = 0;\n   else\n@@ -869,7 +869,7 @@ __splitstack_find (void *segment_arg, void *sp, size_t *len,\n \n       *next_segment = (void *) (uintptr_type) 2;\n       *next_sp = NULL;\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       if ((char *) sp >= isp)\n \treturn NULL;\n       *len = (char *) isp - (char *) sp;\n@@ -942,7 +942,7 @@ __splitstack_find (void *segment_arg, void *sp, size_t *len,\n       *next_sp = (void *) nsp;\n     }\n \n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n   *len = (char *) (segment + 1) + segment->size - (char *) sp;\n   ret = (void *) sp;\n #else\n@@ -1046,7 +1046,7 @@ __splitstack_makecontext (size_t stack_size, void *context[NUMBER_OFFSETS],\n   segment = allocate_segment (stack_size);\n   context[MORESTACK_SEGMENTS] = segment;\n   context[CURRENT_SEGMENT] = segment;\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n   initial_sp = (void *) ((char *) (segment + 1) + segment->size);\n #else\n   initial_sp = (void *) (segment + 1);\n@@ -1082,13 +1082,13 @@ __splitstack_resetcontext (void *context[10], size_t *size)\n       initial_sp = context[INITIAL_SP];\n       initial_size = (uintptr_type) context[INITIAL_SP_LEN];\n       ret = initial_sp;\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       ret = (void *) ((char *) ret - initial_size);\n #endif\n     }\n   else\n     {\n-#ifdef STACK_GROWS_DOWNWARD\n+#ifdef __LIBGCC_STACK_GROWS_DOWNWARD__\n       initial_sp = (void *) ((char *) (segment + 1) + segment->size);\n #else\n       initial_sp = (void *) (segment + 1);"}, {"sha": "aea476a34e6d2475fe2dc3e0adf53f54a5b13cdf", "filename": "libgcc/libgcc2.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcc2.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -2209,7 +2209,8 @@ TRANSFER_FROM_TRAMPOLINE\n #define SYMBOL__MAIN __main\n #endif\n \n-#if defined (INIT_SECTION_ASM_OP) || defined (INIT_ARRAY_SECTION_ASM_OP)\n+#if defined (__LIBGCC_INIT_SECTION_ASM_OP__) \\\n+    || defined (__LIBGCC_INIT_ARRAY_SECTION_ASM_OP__)\n #undef HAS_INIT_SECTION\n #define HAS_INIT_SECTION\n #endif\n@@ -2219,7 +2220,7 @@ TRANSFER_FROM_TRAMPOLINE\n /* Some ELF crosses use crtstuff.c to provide __CTOR_LIST__, but use this\n    code to run constructors.  In that case, we need to handle EH here, too.  */\n \n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef __LIBGCC_EH_FRAME_SECTION_NAME__\n #include \"unwind-dw2-fde.h\"\n extern unsigned char __EH_FRAME_BEGIN__[];\n #endif\n@@ -2239,7 +2240,7 @@ __do_global_dtors (void)\n       (*(p-1)) ();\n     }\n #endif\n-#if defined (EH_FRAME_SECTION_NAME) && !defined (HAS_INIT_SECTION)\n+#if defined (__LIBGCC_EH_FRAME_SECTION_NAME__) && !defined (HAS_INIT_SECTION)\n   {\n     static int completed = 0;\n     if (! completed)\n@@ -2258,7 +2259,7 @@ __do_global_dtors (void)\n void\n __do_global_ctors (void)\n {\n-#ifdef EH_FRAME_SECTION_NAME\n+#ifdef __LIBGCC_EH_FRAME_SECTION_NAME__\n   {\n     static struct object object;\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n@@ -2312,14 +2313,15 @@ SYMBOL__MAIN (void)\n    must be in the bss/common section.\n \n    Long term no port should use those extensions.  But many still do.  */\n-#if !defined(INIT_SECTION_ASM_OP) && !defined(CTOR_LISTS_DEFINED_EXTERNALLY)\n+#if !defined(__LIBGCC_INIT_SECTION_ASM_OP__) \\\n+    && !defined(CTOR_LISTS_DEFINED_EXTERNALLY)\n #if defined (TARGET_ASM_CONSTRUCTOR) || defined (USE_COLLECT2)\n func_ptr __CTOR_LIST__[2] = {0, 0};\n func_ptr __DTOR_LIST__[2] = {0, 0};\n #else\n func_ptr __CTOR_LIST__[2];\n func_ptr __DTOR_LIST__[2];\n #endif\n-#endif /* no INIT_SECTION_ASM_OP and not CTOR_LISTS_DEFINED_EXTERNALLY */\n+#endif /* no __LIBGCC_INIT_SECTION_ASM_OP__ and not CTOR_LISTS_DEFINED_EXTERNALLY */\n #endif /* L_ctors */\n #endif /* LIBGCC2_UNITS_PER_WORD <= MIN_UNITS_PER_WORD */"}, {"sha": "5f0b052b952e73bb614e435a6e27b3d761b4975e", "filename": "libgcc/libgcov-profiler.c", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Flibgcov-profiler.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Flibgcov-profiler.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-profiler.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -100,20 +100,11 @@ __gcov_one_value_profiler (gcov_type *counters, gcov_type value)\n /* By default, the C++ compiler will use function addresses in the\n    vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero\n    tells the compiler to use function descriptors instead.  The value\n-   of this macro says how many words wide the descriptor is (normally 2),\n-   but it may be dependent on target flags.  Since we do not have access\n-   to the target flags here we just check to see if it is set and use\n-   that to set VTABLE_USES_DESCRIPTORS to 0 or 1.\n+   of this macro says how many words wide the descriptor is (normally 2).\n \n    It is assumed that the address of a function descriptor may be treated\n    as a pointer to a function.  */\n \n-#ifdef TARGET_VTABLE_USES_DESCRIPTORS\n-#define VTABLE_USES_DESCRIPTORS 1\n-#else\n-#define VTABLE_USES_DESCRIPTORS 0\n-#endif\n-\n /* Tries to determine the most common value among its inputs. */\n void\n __gcov_indirect_call_profiler (gcov_type* counter, gcov_type value,\n@@ -123,7 +114,7 @@ __gcov_indirect_call_profiler (gcov_type* counter, gcov_type value,\n      function may have multiple descriptors and we need to dereference\n      the descriptors to see if they point to the same function.  */\n   if (cur_func == callee_func\n-      || (VTABLE_USES_DESCRIPTORS && callee_func\n+      || (__LIBGCC_VTABLE_USES_DESCRIPTORS__ && callee_func\n           && *(void **) cur_func == *(void **) callee_func))\n     __gcov_one_value_profiler_body (counter, value);\n }\n@@ -148,20 +139,11 @@ gcov_type * __gcov_indirect_call_counters;\n /* By default, the C++ compiler will use function addresses in the\n    vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero\n    tells the compiler to use function descriptors instead.  The value\n-   of this macro says how many words wide the descriptor is (normally 2),\n-   but it may be dependent on target flags.  Since we do not have access\n-   to the target flags here we just check to see if it is set and use\n-   that to set VTABLE_USES_DESCRIPTORS to 0 or 1.\n+   of this macro says how many words wide the descriptor is (normally 2).\n \n    It is assumed that the address of a function descriptor may be treated\n    as a pointer to a function.  */\n \n-#ifdef TARGET_VTABLE_USES_DESCRIPTORS\n-#define VTABLE_USES_DESCRIPTORS 1\n-#else\n-#define VTABLE_USES_DESCRIPTORS 0\n-#endif\n-\n /* Tries to determine the most common value among its inputs. */\n void\n __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n@@ -170,7 +152,7 @@ __gcov_indirect_call_profiler_v2 (gcov_type value, void* cur_func)\n      function may have multiple descriptors and we need to dereference\n      the descriptors to see if they point to the same function.  */\n   if (cur_func == __gcov_indirect_call_callee\n-      || (VTABLE_USES_DESCRIPTORS && __gcov_indirect_call_callee\n+      || (__LIBGCC_VTABLE_USES_DESCRIPTORS__ && __gcov_indirect_call_callee\n           && *(void **) cur_func == *(void **) __gcov_indirect_call_callee))\n     __gcov_one_value_profiler_body (__gcov_indirect_call_counters, value);\n }"}, {"sha": "e474433603105ec414ecf3e846569be28f7c4b3c", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -43,16 +43,16 @@\n \n #ifndef __USING_SJLJ_EXCEPTIONS__\n \n-#ifndef STACK_GROWS_DOWNWARD\n-#define STACK_GROWS_DOWNWARD 0\n+#ifndef __LIBGCC_STACK_GROWS_DOWNWARD__\n+#define __LIBGCC_STACK_GROWS_DOWNWARD__ 0\n #else\n-#undef STACK_GROWS_DOWNWARD\n-#define STACK_GROWS_DOWNWARD 1\n+#undef __LIBGCC_STACK_GROWS_DOWNWARD__\n+#define __LIBGCC_STACK_GROWS_DOWNWARD__ 1\n #endif\n \n /* Dwarf frame registers used for pre gcc 3.0 compiled glibc.  */\n #ifndef PRE_GCC3_DWARF_FRAME_REGISTERS\n-#define PRE_GCC3_DWARF_FRAME_REGISTERS DWARF_FRAME_REGISTERS\n+#define PRE_GCC3_DWARF_FRAME_REGISTERS __LIBGCC_DWARF_FRAME_REGISTERS__\n #endif\n \n #ifndef DWARF_REG_TO_UNWIND_COLUMN\n@@ -86,7 +86,7 @@\n    ignore unwind data for unknown columns.  */\n \n #define UNWIND_COLUMN_IN_RANGE(x) \\\n-    __builtin_expect((x) <= DWARF_FRAME_REGISTERS, 1)\n+    __builtin_expect((x) <= __LIBGCC_DWARF_FRAME_REGISTERS__, 1)\n \n #ifdef REG_VALUE_IN_UNWIND_CONTEXT\n typedef _Unwind_Word _Unwind_Context_Reg_Val;\n@@ -131,7 +131,7 @@ _Unwind_Get_Unwind_Context_Reg_Val (_Unwind_Word val)\n    to its caller.  */\n struct _Unwind_Context\n {\n-  _Unwind_Context_Reg_Val reg[DWARF_FRAME_REGISTERS+1];\n+  _Unwind_Context_Reg_Val reg[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n   void *cfa;\n   void *ra;\n   void *lsda;\n@@ -145,11 +145,11 @@ struct _Unwind_Context\n      struct _Unwind_Context.  */\n   _Unwind_Word version;\n   _Unwind_Word args_size;\n-  char by_value[DWARF_FRAME_REGISTERS+1];\n+  char by_value[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n };\n \n /* Byte size of every register managed by these routines.  */\n-static unsigned char dwarf_reg_size_table[DWARF_FRAME_REGISTERS+1];\n+static unsigned char dwarf_reg_size_table[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n \f\n /* Read unaligned data from the instruction buffer.  */\n@@ -1190,7 +1190,7 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \n \tcase DW_CFA_GNU_window_save:\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n-\t  if (DWARF_FRAME_REGISTERS >= 32)\n+\t  if (__LIBGCC_DWARF_FRAME_REGISTERS__ >= 32)\n \t    for (reg = 16; reg < 32; ++reg)\n \t      {\n \t\tfs->regs.reg[reg].how = REG_SAVED_OFFSET;\n@@ -1384,7 +1384,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   void *cfa;\n   long i;\n \n-#ifdef EH_RETURN_STACKADJ_RTX\n+#ifdef __LIBGCC_EH_RETURN_STACKADJ_RTX__\n   /* Special handling here: Many machines do not use a frame pointer,\n      and track the CFA only through offsets from the stack pointer from\n      one frame to the next.  In this case, the stack pointer is never\n@@ -1432,7 +1432,7 @@ uw_update_context_1 (struct _Unwind_Context *context, _Unwind_FrameState *fs)\n   context->cfa = cfa;\n \n   /* Compute the addresses of all registers saved in this frame.  */\n-  for (i = 0; i < DWARF_FRAME_REGISTERS + 1; ++i)\n+  for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__ + 1; ++i)\n     switch (fs->regs.reg[i].how)\n       {\n       case REG_UNSAVED:\n@@ -1638,7 +1638,7 @@ uw_install_context_1 (struct _Unwind_Context *current,\n   if (!_Unwind_GetGRPtr (target, __builtin_dwarf_sp_column ()))\n     _Unwind_SetSpColumn (target, target->cfa, &sp_slot);\n \n-  for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n+  for (i = 0; i < __LIBGCC_DWARF_FRAME_REGISTERS__; ++i)\n     {\n       void *c = (void *) (_Unwind_Internal_Ptr) current->reg[i];\n       void *t = (void *) (_Unwind_Internal_Ptr)target->reg[i];\n@@ -1674,7 +1674,7 @@ uw_install_context_1 (struct _Unwind_Context *current,\n       target_cfa = _Unwind_GetPtr (target, __builtin_dwarf_sp_column ());\n \n       /* We adjust SP by the difference between CURRENT and TARGET's CFA.  */\n-      if (STACK_GROWS_DOWNWARD)\n+      if (__LIBGCC_STACK_GROWS_DOWNWARD__)\n \treturn target_cfa - current->cfa + target->args_size;\n       else\n \treturn current->cfa - target_cfa - target->args_size;\n@@ -1688,7 +1688,7 @@ uw_identify_context (struct _Unwind_Context *context)\n   /* The CFA is not sufficient to disambiguate the context of a function\n      interrupted by a signal before establishing its frame and the context\n      of the signal itself.  */\n-  if (STACK_GROWS_DOWNWARD)\n+  if (__LIBGCC_STACK_GROWS_DOWNWARD__)\n     return _Unwind_GetCFA (context) - _Unwind_IsSignalFrame (context);\n   else\n     return _Unwind_GetCFA (context) + _Unwind_IsSignalFrame (context);"}, {"sha": "c90756bc722a8a63b27c1d77d45904cd2fbeb86c", "filename": "libgcc/unwind-dw2.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-dw2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-dw2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.h?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -22,12 +22,6 @@\n    see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-/* A target can override (perhaps for backward compatibility) how\n-   many dwarf2 columns are unwound.  */\n-#ifndef DWARF_FRAME_REGISTERS\n-#define DWARF_FRAME_REGISTERS FIRST_PSEUDO_REGISTER\n-#endif\n-\n /* The result of interpreting the frame unwind info for a frame.\n    This is all symbolic at this point, as none of the values can\n    be resolved until the target pc is located.  */\n@@ -52,7 +46,7 @@ typedef struct\n \tREG_SAVED_VAL_EXP,\n \tREG_UNDEFINED\n       } how;\n-    } reg[DWARF_FRAME_REGISTERS+1];\n+    } reg[__LIBGCC_DWARF_FRAME_REGISTERS__+1];\n \n     /* Used to implement DW_CFA_remember_state.  */\n     struct frame_state_reg_info *prev;"}, {"sha": "0d9171cf73301ae3758acd3f1897b6ab5d45b2c9", "filename": "libgcc/unwind-sjlj.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-sjlj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53d68b9f05d0bebdb08573838c92c3dd73b01419/libgcc%2Funwind-sjlj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-sjlj.c?ref=53d68b9f05d0bebdb08573838c92c3dd73b01419", "patch": "@@ -32,11 +32,11 @@\n \n #ifdef __USING_SJLJ_EXCEPTIONS__\n \n-#ifdef DONT_USE_BUILTIN_SETJMP\n+#ifdef __LIBGCC_DONT_USE_BUILTIN_SETJMP__\n #ifndef inhibit_libc\n #include <setjmp.h>\n #else\n-typedef void *jmp_buf[JMP_BUF_SIZE];\n+typedef void *jmp_buf[__LIBGCC_JMP_BUF_SIZE__];\n extern void longjmp(jmp_buf, int) __attribute__((noreturn));\n #endif\n #else\n@@ -70,7 +70,7 @@ struct SjLj_Function_Context\n   _Unwind_Personality_Fn personality;\n   void *lsda;\n \n-#ifdef DONT_USE_BUILTIN_SETJMP\n+#ifdef __LIBGCC_DONT_USE_BUILTIN_SETJMP__\n   /* We don't know what sort of alignment requirements the system\n      jmp_buf has.  We over estimated in except.c, and now we have\n      to match that here just in case the system *didn't* have more\n@@ -185,7 +185,7 @@ _Unwind_GetCFA (struct _Unwind_Context *context __attribute__((unused)))\n {\n   /* ??? Ideally __builtin_setjmp places the CFA in the jmpbuf.  */\n \n-#ifndef DONT_USE_BUILTIN_SETJMP\n+#ifndef __LIBGCC_DONT_USE_BUILTIN_SETJMP__\n   /* This is a crude imitation of the CFA: the saved stack pointer.\n      This is roughly the CFA of the frame before CONTEXT.  When using the\n      DWARF-2 unwinder _Unwind_GetCFA returns the CFA of the frame described"}]}