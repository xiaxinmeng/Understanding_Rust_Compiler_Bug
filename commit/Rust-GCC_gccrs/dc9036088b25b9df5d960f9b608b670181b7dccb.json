{"sha": "dc9036088b25b9df5d960f9b608b670181b7dccb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM5MDM2MDg4YjI1YjlkZjVkOTYwZjliNjA4YjY3MDE4MWI3ZGNjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-11T22:30:20Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-11T22:30:20Z"}, "message": "(record_reg_classes): Fix logic in case of matching operands.\n\nFrom-SVN: r6528", "tree": {"sha": "c332a2c723c780b974fd32263ba1c942763da0ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c332a2c723c780b974fd32263ba1c942763da0ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc9036088b25b9df5d960f9b608b670181b7dccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9036088b25b9df5d960f9b608b670181b7dccb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9036088b25b9df5d960f9b608b670181b7dccb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9036088b25b9df5d960f9b608b670181b7dccb/comments", "author": null, "committer": null, "parents": [{"sha": "9d891e9a7e8ab20530e4cf9eb412c2a21a7a4295", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d891e9a7e8ab20530e4cf9eb412c2a21a7a4295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d891e9a7e8ab20530e4cf9eb412c2a21a7a4295"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3beac27076e3b6bc9956530518f0c2a2ba47dc9a", "filename": "gcc/regclass.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc9036088b25b9df5d960f9b608b670181b7dccb/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc9036088b25b9df5d960f9b608b670181b7dccb/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=dc9036088b25b9df5d960f9b608b670181b7dccb", "patch": "@@ -988,15 +988,15 @@ record_reg_classes (n_alts, n_ops, ops, modes, constraints, insn)\n \t      if (GET_CODE (op) != REG || REGNO (op) < FIRST_PSEUDO_REGISTER)\n \t\t{\n \t\t  /* If this matches the other operand, we have no added\n-\t\t     cost.  */\n+\t\t     cost and we win.  */\n \t\t  if (rtx_equal_p (ops[j], op))\n-\t\t    ;\n+\t\t    win = 1;\n \n \t\t  /* If we can put the other operand into a register, add to\n \t\t     the cost of this alternative the cost to copy this\n \t\t     operand to the register used for the other operand.  */\n \n-\t\t  if (classes[j] != NO_REGS)\n+\t\t  else if (classes[j] != NO_REGS)\n \t\t    alt_cost += copy_cost (op, mode, classes[j], 1), win = 1;\n \t\t}\n \t      else if (GET_CODE (ops[j]) != REG"}]}