{"sha": "79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzljZjAwMDRmZmJiMGM3ZjEyNzI5YTFmYzc4MDFkMmYyNTUzOWM1YQ==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-05-18T14:04:39Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2021-05-18T21:32:23Z"}, "message": "rs6000: Remove old psabi warnings\n\nLong ago we were forced to make some small ABI breaks to correct errors\nin the implementation, and we added warning messages for the changes\nfrom GCC 4.9 to GCC 5.  Enough time has passed that these are now just\nirritants, so let's remove them.  Also clean up associated macros using\nrs6000_special_adjust_field_align_p, which has been always returning\nfalse for a long time.\n\n2021-05-18  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/freebsd64.h (ADJUST_FIELD_ALIGN): Remove call to\n\trs6000_special_adjust_field_align_p.\n\t* config/rs6000/linux64.h (ADJUST_FIELD_ALIGN): Likewise.\n\t* config/rs6000/rs6000-call.c (rs6000_function_arg_boundary):\n\tRemove ABI warning.\n\t(rs6000_function_arg): Likewise.\n\t* config/rs6000/rs6000-protos.h\n\t(rs6000_special_adjust_field_align_p): Remove prototype.\n\t* config/rs6000/rs6000.c (rs6000_special_adjust_field_align_p):\n\tRemove.\n\t* config/rs6000/sysv4.h (ADJUST_FIELD_ALIGN): Remove call to\n\trs6000_special_adjust_field_align_p.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/ppc64-abi-warn-1.c: Remove.\n\t* gcc.target/powerpc/ppc64-abi-warn-2.c: Remove.\n\t* gcc.target/powerpc/ppc64-abi-warn-3.c: Remove.", "tree": {"sha": "34d5ffb2ad9fac26cba7394eb0816276b5e6c009", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d5ffb2ad9fac26cba7394eb0816276b5e6c009"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/comments", "author": null, "committer": null, "parents": [{"sha": "5c66a1a30064edcd4c617ccfe54e28a08878050a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c66a1a30064edcd4c617ccfe54e28a08878050a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c66a1a30064edcd4c617ccfe54e28a08878050a"}], "stats": {"total": 111, "additions": 10, "deletions": 101}, "files": [{"sha": "7987983d787c8e3a4aad87f192bd401338655c0f", "filename": "gcc/config/rs6000/freebsd64.h", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ffreebsd64.h?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -306,12 +306,10 @@ extern int dot_symbols;\n /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN\n #define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n-  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n-   ? 128                                                                \\\n-   : (TARGET_64BIT                                                      \\\n-      && TARGET_ALIGN_NATURAL == 0                                      \\\n-      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)   \t\t\\\n-   ? MIN ((COMPUTED), 32)                                               \\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n+    && TYPE_MODE (strip_array_types (TYPE)) == DFmode)   \t\t\\\n+   ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n \n #undef  TOC_SECTION_ASM_OP"}, {"sha": "74be9a94524b5887a2aa97628a392bea0ffbc77d", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -213,11 +213,9 @@ extern int dot_symbols;\n /* PowerPC64 Linux word-aligns FP doubles when -malign-power is given.  */\n #undef  ADJUST_FIELD_ALIGN\n #define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED) \\\n-  (rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t\t\\\n-   ? 128\t\t\t\t\t\t\t\t\\\n-   : (TARGET_64BIT\t\t\t\t\t\t\t\\\n-      && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n-      && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\\\n+  ((TARGET_64BIT\t\t\t\t\t\t\t\\\n+    && TARGET_ALIGN_NATURAL == 0\t\t\t\t\t\\\n+    && TYPE_MODE (strip_array_types (TYPE)) == DFmode)\t\t\t\\\n    ? MIN ((COMPUTED), 32)\t\t\t\t\t\t\\\n    : (COMPUTED))\n "}, {"sha": "f271b0a4079579ac7b8462aa3a38fd711bd120cd", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -6793,25 +6793,8 @@ rs6000_function_arg_boundary (machine_mode mode, const_tree type)\n       /* \"Aggregate\" means any AGGREGATE_TYPE except for single-element\n          or homogeneous float/vector aggregates here.  We already handled\n          vector aggregates above, but still need to check for float here. */\n-      bool aggregate_p = (AGGREGATE_TYPE_P (type)\n-\t\t\t  && !SCALAR_FLOAT_MODE_P (elt_mode));\n-\n-      /* We used to check for BLKmode instead of the above aggregate type\n-\t check.  Warn when this results in any difference to the ABI.  */\n-      if (aggregate_p != (mode == BLKmode))\n-\t{\n-\t  static bool warned;\n-\t  if (!warned && warn_psabi)\n-\t    {\n-\t      warned = true;\n-\t      inform (input_location,\n-\t\t      \"the ABI of passing aggregates with %d-byte alignment\"\n-\t\t      \" has changed in GCC 5\",\n-\t\t      (int) TYPE_ALIGN (type) / BITS_PER_UNIT);\n-\t    }\n-\t}\n-\n-      if (aggregate_p)\n+      if (AGGREGATE_TYPE_P (type)\n+\t  && !SCALAR_FLOAT_MODE_P (elt_mode))\n \treturn 128;\n     }\n \n@@ -7805,8 +7788,6 @@ rs6000_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n \t  if (i < n_elts && align_words + fpr_words < GP_ARG_NUM_REG\n \t      && cum->nargs_prototype > 0)\n             {\n-\t      static bool warned;\n-\n \t      machine_mode rmode = TARGET_32BIT ? SImode : DImode;\n \t      int n_words = rs6000_arg_size (mode, type);\n \n@@ -7820,14 +7801,6 @@ rs6000_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n \t\t  rvec[k++] = gen_rtx_EXPR_LIST (VOIDmode, r, off);\n \t\t}\n \t      while (++align_words < GP_ARG_NUM_REG && --n_words != 0);\n-\n-\t      if (!warned && warn_psabi)\n-\t\t{\n-\t\t  warned = true;\n-\t\t  inform (input_location,\n-\t\t\t  \"the ABI of passing homogeneous %<float%> aggregates\"\n-\t\t\t  \" has changed in GCC 5\");\n-\t\t}\n \t    }\n \n \t  return rs6000_finish_function_arg (mode, rvec, k);"}, {"sha": "9de294d3b28e8933018384b89dc840713f4339d2", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -226,7 +226,6 @@ address_is_prefixed (rtx addr,\n \n #ifdef TREE_CODE\n extern unsigned int rs6000_data_alignment (tree, unsigned int, enum data_align);\n-extern bool rs6000_special_adjust_field_align_p (tree, unsigned int);\n extern unsigned int rs6000_special_adjust_field_align (tree, unsigned int);\n extern unsigned int rs6000_special_round_type_align (tree, unsigned int,\n \t\t\t\t\t\t     unsigned int);"}, {"sha": "6db450ab954b5a47b5bbd46b3a657ac0087ad248", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -7900,32 +7900,6 @@ rs6000_slow_unaligned_access (machine_mode mode, unsigned int align)\n \t\t      && (int) align < VECTOR_ALIGN (mode)))));\n }\n \n-/* Previous GCC releases forced all vector types to have 16-byte alignment.  */\n-\n-bool\n-rs6000_special_adjust_field_align_p (tree type, unsigned int computed)\n-{\n-  if (TARGET_ALTIVEC && TREE_CODE (type) == VECTOR_TYPE)\n-    {\n-      if (computed != 128)\n-\t{\n-\t  static bool warned;\n-\t  if (!warned && warn_psabi)\n-\t    {\n-\t      warned = true;\n-\t      inform (input_location,\n-\t\t      \"the layout of aggregates containing vectors with\"\n-\t\t      \" %d-byte alignment has changed in GCC 5\",\n-\t\t      computed / BITS_PER_UNIT);\n-\t    }\n-\t}\n-      /* In current GCC there is no special case.  */\n-      return false;\n-    }\n-\n-  return false;\n-}\n-\n /* AIX word-aligns FP doubles but doubleword-aligns 64-bit ints.  */\n \n unsigned int"}, {"sha": "23ff59403a31032792c9a356daf2f177f4782325", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79cf0004ffbb0c7f12729a1fc7801d2f25539c5a/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=79cf0004ffbb0c7f12729a1fc7801d2f25539c5a", "patch": "@@ -325,8 +325,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* An expression for the alignment of a structure field FIELD if the\n    alignment computed in the usual way is COMPUTED.  */\n #define ADJUST_FIELD_ALIGN(FIELD, TYPE, COMPUTED)\t\t\t      \\\n-\t(rs6000_special_adjust_field_align_p ((TYPE), (COMPUTED))\t      \\\n-\t ? 128 : COMPUTED)\n+\t(COMPUTED)\n \n #undef  BIGGEST_FIELD_ALIGNMENT\n "}, {"sha": "ae7d5746b0d3ca0764bed277a6e5cbc28f66a679", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-warn-1.c", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-1.c?ref=5c66a1a30064edcd4c617ccfe54e28a08878050a", "patch": "@@ -1,12 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n-/* { dg-options \"-mabi=elfv2\" } */\n-\n-struct f8\n-  {\n-    float x[8];\n-  };\n-\n-void test (struct f8 a, struct f8 b) /* { dg-message \"note: the ABI of passing homogeneous 'float' aggregates has changed\" } */\n-{\n-}\n-"}, {"sha": "fdbeddfcbba5efb6c529994a0bafde9b049e46a3", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-warn-2.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-2.c?ref=5c66a1a30064edcd4c617ccfe54e28a08878050a", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n-\n-struct test\n-  {\n-    long a __attribute__((aligned (16)));\n-  };\n-\n-void test (struct test a) /* { dg-message \"note: the ABI of passing aggregates with 16-byte alignment has changed\" } */\n-{\n-}\n-"}, {"sha": "22cad0ccd5c55f352520d16765919dc09fde510f", "filename": "gcc/testsuite/gcc.target/powerpc/ppc64-abi-warn-3.c", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c66a1a30064edcd4c617ccfe54e28a08878050a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc64-abi-warn-3.c?ref=5c66a1a30064edcd4c617ccfe54e28a08878050a", "patch": "@@ -1,9 +0,0 @@\n-/* { dg-do compile { target { powerpc*-*-linux* && lp64 } } } */\n-/* { dg-require-effective-target powerpc_altivec_ok } */\n-/* { dg-options \"-maltivec\" } */\n-\n-struct test\n-  {\n-    int a __attribute__((vector_size (8)));\n-  }; /* { dg-message \"note: the layout of aggregates containing vectors with 8-byte alignment has changed\" } */\n-"}]}