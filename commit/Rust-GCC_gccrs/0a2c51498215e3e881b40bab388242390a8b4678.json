{"sha": "0a2c51498215e3e881b40bab388242390a8b4678", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGEyYzUxNDk4MjE1ZTNlODgxYjQwYmFiMzg4MjQyMzkwYThiNDY3OA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-11T22:20:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-11T22:20:27Z"}, "message": "recog.c (store_data_bypass_p_1): New function.\n\n\t* recog.c (store_data_bypass_p_1): New function.\n\t(store_data_bypass_p): Handle USE in a PARALLEL like CLOBBER.  Use\n\tstore_data_bypass_p_1 to avoid code duplication.  Formatting fixes.\n\nFrom-SVN: r255553", "tree": {"sha": "86deb89bda28318f32c83bbb33cefb04312246bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86deb89bda28318f32c83bbb33cefb04312246bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a2c51498215e3e881b40bab388242390a8b4678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2c51498215e3e881b40bab388242390a8b4678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a2c51498215e3e881b40bab388242390a8b4678", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a2c51498215e3e881b40bab388242390a8b4678/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9221f990e762755626257b019839fb83baee791f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9221f990e762755626257b019839fb83baee791f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9221f990e762755626257b019839fb83baee791f"}], "stats": {"total": 122, "additions": 50, "deletions": 72}, "files": [{"sha": "bd41af866365912a2f4ca828ec163426eada38ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c51498215e3e881b40bab388242390a8b4678/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c51498215e3e881b40bab388242390a8b4678/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0a2c51498215e3e881b40bab388242390a8b4678", "patch": "@@ -1,3 +1,9 @@\n+2017-12-11  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* recog.c (store_data_bypass_p_1): New function.\n+\t(store_data_bypass_p): Handle USE in a PARALLEL like CLOBBER.  Use\n+\tstore_data_bypass_p_1 to avoid code duplication.  Formatting fixes.\n+\n 2017-12-11  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/83361"}, {"sha": "cdcff8f2e720c6415bd4ca6f4fe206e551ce13c0", "filename": "gcc/recog.c", "status": "modified", "additions": 44, "deletions": 72, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a2c51498215e3e881b40bab388242390a8b4678/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a2c51498215e3e881b40bab388242390a8b4678/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=0a2c51498215e3e881b40bab388242390a8b4678", "patch": "@@ -3657,93 +3657,65 @@ peephole2_optimize (void)\n \n /* Common predicates for use with define_bypass.  */\n \n-/* True if the dependency between OUT_INSN and IN_INSN is on the store\n-   data not the address operand(s) of the store.  IN_INSN and OUT_INSN\n-   must be either a single_set or a PARALLEL with SETs inside.  */\n+/* Helper function for store_data_bypass_p, handle just a single SET\n+   IN_SET.  */\n \n-int\n-store_data_bypass_p (rtx_insn *out_insn, rtx_insn *in_insn)\n+static bool\n+store_data_bypass_p_1 (rtx_insn *out_insn, rtx in_set)\n {\n-  rtx out_set, in_set;\n-  rtx out_pat, in_pat;\n-  rtx out_exp, in_exp;\n-  int i, j;\n+  if (!MEM_P (SET_DEST (in_set)))\n+    return false;\n \n-  in_set = single_set (in_insn);\n-  if (in_set)\n+  rtx out_set = single_set (out_insn);\n+  if (out_set)\n+    return !reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_set));\n+\n+  rtx out_pat = PATTERN (out_insn);\n+  if (GET_CODE (out_pat) != PARALLEL)\n+    return false;\n+\n+  for (int i = 0; i < XVECLEN (out_pat, 0); i++)\n     {\n-      if (!MEM_P (SET_DEST (in_set)))\n-\treturn false;\n+      rtx out_exp = XVECEXP (out_pat, 0, i);\n \n-      out_set = single_set (out_insn);\n-      if (out_set)\n-        {\n-          if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_set)))\n-            return false;\n-        }\n-      else\n-        {\n-          out_pat = PATTERN (out_insn);\n+      if (GET_CODE (out_exp) == CLOBBER || GET_CODE (out_exp) == USE)\n+\tcontinue;\n \n-\t  if (GET_CODE (out_pat) != PARALLEL)\n-\t    return false;\n+      gcc_assert (GET_CODE (out_exp) == SET);\n \n-          for (i = 0; i < XVECLEN (out_pat, 0); i++)\n-          {\n-            out_exp = XVECEXP (out_pat, 0, i);\n+      if (reg_mentioned_p (SET_DEST (out_exp), SET_DEST (in_set)))\n+\treturn false;\n+    }\n \n-            if (GET_CODE (out_exp) == CLOBBER)\n-              continue;\n+  return true;\n+}\n \n-            gcc_assert (GET_CODE (out_exp) == SET);\n+/* True if the dependency between OUT_INSN and IN_INSN is on the store\n+   data not the address operand(s) of the store.  IN_INSN and OUT_INSN\n+   must be either a single_set or a PARALLEL with SETs inside.  */\n \n-            if (reg_mentioned_p (SET_DEST (out_exp), SET_DEST (in_set)))\n-              return false;\n-          }\n-      }\n-    }\n-  else\n-    {\n-      in_pat = PATTERN (in_insn);\n-      gcc_assert (GET_CODE (in_pat) == PARALLEL);\n+int\n+store_data_bypass_p (rtx_insn *out_insn, rtx_insn *in_insn)\n+{\n+  rtx in_set = single_set (in_insn);\n+  if (in_set)\n+    return store_data_bypass_p_1 (out_insn, in_set);\n \n-      for (i = 0; i < XVECLEN (in_pat, 0); i++)\n-\t{\n-\t  in_exp = XVECEXP (in_pat, 0, i);\n+  rtx in_pat = PATTERN (in_insn);\n+  if (GET_CODE (in_pat) != PARALLEL)\n+    return false;\n \n-\t  if (GET_CODE (in_exp) == CLOBBER)\n-\t    continue;\n+  for (int i = 0; i < XVECLEN (in_pat, 0); i++)\n+    {\n+      rtx in_exp = XVECEXP (in_pat, 0, i);\n \n-\t  gcc_assert (GET_CODE (in_exp) == SET);\n+      if (GET_CODE (in_exp) == CLOBBER || GET_CODE (in_exp) == USE)\n+\tcontinue;\n \n-\t  if (!MEM_P (SET_DEST (in_exp)))\n-\t    return false;\n+      gcc_assert (GET_CODE (in_exp) == SET);\n \n-          out_set = single_set (out_insn);\n-          if (out_set)\n-            {\n-              if (reg_mentioned_p (SET_DEST (out_set), SET_DEST (in_exp)))\n-                return false;\n-            }\n-          else\n-            {\n-              out_pat = PATTERN (out_insn);\n-              gcc_assert (GET_CODE (out_pat) == PARALLEL);\n-\n-              for (j = 0; j < XVECLEN (out_pat, 0); j++)\n-                {\n-                  out_exp = XVECEXP (out_pat, 0, j);\n-\n-                  if (GET_CODE (out_exp) == CLOBBER)\n-                    continue;\n-\n-                  gcc_assert (GET_CODE (out_exp) == SET);\n-\n-                  if (reg_mentioned_p (SET_DEST (out_exp), SET_DEST (in_exp)))\n-                    return false;\n-                }\n-            }\n-        }\n+      if (!store_data_bypass_p_1 (out_insn, in_exp))\n+\treturn false;\n     }\n \n   return true;"}]}