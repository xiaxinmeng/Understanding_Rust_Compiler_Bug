{"sha": "660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYwZWI3ZTlkZWU0NmVmMWM5ODZkNWE0ZmE1Y2JkMTgyYjQzNTUxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-25T10:33:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-25T12:41:55Z"}, "message": "c-family: Fix up -Wduplicated-branches for union members [PR99565]\n\nHonza has fairly recently changed operand_equal_p to compare\nDECL_FIELD_OFFSET for COMPONENT_REFs when comparing addresses.\nAs the first testcase in this patch shows, while that is very nice\nfor optimizations, for the -Wduplicated-branches warning it causes\nregressions.  Pedantically a union in both C and C++ has only one\nactive member at a time, so using some other union member even if it has the\nsame type is UB, so I think the warning shouldn't warn when it sees access\nto different fields that happen to have the same offset and should consider\nthem different.\nIn my first attempt to fix this I've keyed the old behavior on\nOEP_LEXICOGRAPHIC, but unfortunately that has various problems, the warning\nhas a quick non-lexicographic compare in build_conditional_expr* and another\nlexicographic more expensive one later during genericization and turning the\nfirst one into lexicographic would mean wasting compile time on large\nconditionals.\nSo, this patch instead introduces a new OEP_ flag and makes sure to pass it\nto operand_equal_p in all -Wduplicated-branches cases.\n\nThe cvt.c changes are because on the other testcase we were warning with\nUNKNOWN_LOCATION, so the user wouldn't really know where the questionable\ncode is.\n\n2021-03-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99565\n\t* tree-core.h (enum operand_equal_flag): Add OEP_ADDRESS_OF_SAME_FIELD.\n\t* fold-const.c (operand_compare::operand_equal_p): Don't compare\n\tfield offsets if OEP_ADDRESS_OF_SAME_FIELD.\n\n\t* c-warn.c (do_warn_duplicated_branches): Pass also\n\tOEP_ADDRESS_OF_SAME_FIELD to operand_equal_p.\n\n\t* c-typeck.c (build_conditional_expr): Pass OEP_ADDRESS_OF_SAME_FIELD\n\tto operand_equal_p.\n\n\t* call.c (build_conditional_expr_1): Pass OEP_ADDRESS_OF_SAME_FIELD\n\tto operand_equal_p.\n\t* cvt.c (convert_to_void): Preserve location_t on COND_EXPR or\n\tor COMPOUND_EXPR.\n\n\t* g++.dg/warn/Wduplicated-branches6.C: New test.\n\t* g++.dg/warn/Wduplicated-branches7.C: New test.", "tree": {"sha": "cd7a49ca83a5124d018bbce775aaa288b7787190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd7a49ca83a5124d018bbce775aaa288b7787190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72982851d70dfbc547d83ed2bb45356b9ebe3ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72982851d70dfbc547d83ed2bb45356b9ebe3ff0"}], "stats": {"total": 44, "additions": 35, "deletions": 9}, "files": [{"sha": "534e4f3aae361baf31ef3a9b6423e0b1daa8705c", "filename": "gcc/c-family/c-warn.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fc-family%2Fc-warn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fc-family%2Fc-warn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-warn.c?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -2779,7 +2779,8 @@ do_warn_duplicated_branches (tree expr)\n \n   /* Compare the hashes.  */\n   if (h0 == h1\n-      && operand_equal_p (thenb, elseb, OEP_LEXICOGRAPHIC)\n+      && operand_equal_p (thenb, elseb, OEP_LEXICOGRAPHIC\n+\t\t\t\t\t| OEP_ADDRESS_OF_SAME_FIELD)\n       /* Don't warn if any of the branches or their subexpressions comes\n \t from a macro.  */\n       && !walk_tree_without_duplicates (&thenb, expr_from_macro_expansion_r,"}, {"sha": "21eab00d4b372e22a0e7323cf629b0c6a34b2368", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -5544,7 +5544,7 @@ build_conditional_expr (location_t colon_loc, tree ifexp, bool ifexp_bcp,\n      warn here, because the COND_EXPR will be turned into OP1.  */\n   if (warn_duplicated_branches\n       && TREE_CODE (ret) == COND_EXPR\n-      && (op1 == op2 || operand_equal_p (op1, op2, 0)))\n+      && (op1 == op2 || operand_equal_p (op1, op2, OEP_ADDRESS_OF_SAME_FIELD)))\n     warning_at (EXPR_LOCATION (ret), OPT_Wduplicated_branches,\n \t\t\"this condition has identical branches\");\n "}, {"sha": "bab0c89d6c72f1c0d00d586b4f5a1b6d71d15ead", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -5798,7 +5798,8 @@ build_conditional_expr_1 (const op_location_t &loc,\n      warn here, because the COND_EXPR will be turned into ARG2.  */\n   if (warn_duplicated_branches\n       && (complain & tf_warning)\n-      && (arg2 == arg3 || operand_equal_p (arg2, arg3, 0)))\n+      && (arg2 == arg3 || operand_equal_p (arg2, arg3,\n+\t\t\t\t\t   OEP_ADDRESS_OF_SAME_FIELD)))\n     warning_at (EXPR_LOCATION (result), OPT_Wduplicated_branches,\n \t\t\"this condition has identical branches\");\n "}, {"sha": "d1051139e7006314363e8b94c18e62d9dce8ebca", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -1198,8 +1198,8 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \t    new_op2 = convert_to_void (op2, ICV_CAST, complain);\n \t  }\n \n-\texpr = build3 (COND_EXPR, TREE_TYPE (new_op2),\n-\t\t       TREE_OPERAND (expr, 0), new_op1, new_op2);\n+\texpr = build3_loc (loc, COND_EXPR, TREE_TYPE (new_op2),\n+\t\t\t   TREE_OPERAND (expr, 0), new_op1, new_op2);\n \tbreak;\n       }\n \n@@ -1215,8 +1215,8 @@ convert_to_void (tree expr, impl_conv_void implicit, tsubst_flags_t complain)\n \n \tif (new_op1 != op1)\n \t  {\n-\t    tree t = build2 (COMPOUND_EXPR, TREE_TYPE (new_op1),\n-\t\t\t     TREE_OPERAND (expr, 0), new_op1);\n+\t    tree t = build2_loc (loc, COMPOUND_EXPR, TREE_TYPE (new_op1),\n+\t\t\t\t TREE_OPERAND (expr, 0), new_op1);\n \t    expr = t;\n \t  }\n "}, {"sha": "4c48d7076e796b89188d1fb6a66fa5527a18f2fb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -3317,7 +3317,8 @@ operand_compare::operand_equal_p (const_tree arg0, const_tree arg1,\n \t    flags &= ~OEP_ADDRESS_OF;\n \t    if (!OP_SAME (1))\n \t      {\n-\t\tif (compare_address)\n+\t\tif (compare_address\n+\t\t    && (flags & OEP_ADDRESS_OF_SAME_FIELD) == 0)\n \t\t  {\n \t\t    if (TREE_OPERAND (arg0, 2)\n \t\t\t|| TREE_OPERAND (arg1, 2))"}, {"sha": "70f0bee9763e018c9bfdd81c56f0a41ac4e69b30", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-branches6.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches6.C?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/99565\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-branches\" }\n+\n+struct A {\n+  union { int a; int b; };\n+  int& foo (bool x) { return x ? a : b; }\t// { dg-bogus \"this condition has identical branches\" }\n+  void bar (bool x, int y) { if (x) a = y; else b = y; }\n+};"}, {"sha": "bbc07937ef93117ac8051067052cdf8775c3694a", "filename": "gcc/testsuite/g++.dg/warn/Wduplicated-branches7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWduplicated-branches7.C?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/99565\n+// { dg-do compile }\n+// { dg-options \"-Wduplicated-branches\" }\n+\n+int a;\n+\n+void\n+foo (bool x)\n+{\n+  x ? ++a : ++a;\t// { dg-warning \"this condition has identical branches\" }\n+}"}, {"sha": "07ddf91a2303fed06bfc332c4476090f0bb01723", "filename": "gcc/tree-core.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/660eb7e9dee46ef1c986d5a4fa5cbd182b435518/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=660eb7e9dee46ef1c986d5a4fa5cbd182b435518", "patch": "@@ -896,7 +896,10 @@ enum operand_equal_flag {\n   OEP_HASH_CHECK = 32,\n   /* Makes operand_equal_p handle more expressions:  */\n   OEP_LEXICOGRAPHIC = 64,\n-  OEP_BITWISE = 128\n+  OEP_BITWISE = 128,\n+  /* For OEP_ADDRESS_OF of COMPONENT_REFs, only consider same fields as\n+     equivalent rather than also different fields with the same offset.  */\n+  OEP_ADDRESS_OF_SAME_FIELD = 256\n };\n \n /* Enum and arrays used for tree allocation stats."}]}