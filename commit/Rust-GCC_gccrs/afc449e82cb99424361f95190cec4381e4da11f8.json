{"sha": "afc449e82cb99424361f95190cec4381e4da11f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWZjNDQ5ZTgyY2I5OTQyNDM2MWY5NTE5MGNlYzQzODFlNGRhMTFmOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-11-03T02:55:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-11-03T02:55:36Z"}, "message": "Check number of arguments in bind expressions.\n\n\t* include/std/functional (_Mem_fn_traits_base::__arity): New typedef.\n\t(_Mem_fn_base::_Arity): New typedef.\n\t(_Bind_check_arity): New class template.\n\t(_Bind_helper, _Bindres_helper, _Bind_simple_helper): Check arity.\n\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error.\n\nFrom-SVN: r217025", "tree": {"sha": "6fe19de90a91be44ec202d03955b377cb960ebb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fe19de90a91be44ec202d03955b377cb960ebb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/afc449e82cb99424361f95190cec4381e4da11f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc449e82cb99424361f95190cec4381e4da11f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/afc449e82cb99424361f95190cec4381e4da11f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/afc449e82cb99424361f95190cec4381e4da11f8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d9076969b94fe6ed2a7bb3e19b56f3c2ac9488c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d9076969b94fe6ed2a7bb3e19b56f3c2ac9488c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d9076969b94fe6ed2a7bb3e19b56f3c2ac9488c"}], "stats": {"total": 39, "additions": 35, "deletions": 4}, "files": [{"sha": "ac3bc9f0ef556ee7a64e40e2544ab4f51bfe1866", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=afc449e82cb99424361f95190cec4381e4da11f8", "patch": "@@ -9,6 +9,12 @@\n \t(_Mem_fn): Inherit from _Mem_fn_base.\n \t* testsuite/20_util/function_objects/mem_fn/refqual.cc: New.\n \n+\t* include/std/functional (_Mem_fn_traits_base::__arity): New typedef.\n+\t(_Mem_fn_base::_Arity): New typedef.\n+\t(_Bind_check_arity): New class template.\n+\t(_Bind_helper, _Bindres_helper, _Bind_simple_helper): Check arity.\n+\t* testsuite/20_util/bind/ref_neg.cc: Adjust dg-error.\n+\n 2014-10-31  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/stl_bvector.h (_Bvector_base): Use allocator_traits."}, {"sha": "f615ae4ea67cd8d75ab9e6857be0d4319a7c2b82", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=afc449e82cb99424361f95190cec4381e4da11f8", "patch": "@@ -515,6 +515,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n       using __arg_types = _Pack<_ArgTypes...>;\n       using __maybe_type\n \t= _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;\n+      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;\n     };\n \n   template<typename _Res, typename _Class, typename... _ArgTypes>\n@@ -634,6 +635,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n     public:\n       using result_type = typename _Traits::__result_type;\n+      using _Arity = typename _Traits::__arity;\n \n     private:\n       using _Class = typename _Traits::__class_type;\n@@ -755,6 +757,8 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \t{ return (*__ptr).*_M_pm; }\n \n     public:\n+      using _Arity = integral_constant<size_t, 0>;\n+\n       explicit\n       _Mem_fn_base(_Res _Class::*__pm) noexcept : _M_pm(__pm) { }\n \n@@ -1485,6 +1489,24 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n     struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>\n     : public true_type { };\n \n+  template<typename _Func, typename... _BoundArgs>\n+    struct _Bind_check_arity { };\n+\n+  template<typename _Ret, typename... _Args, typename... _BoundArgs>\n+    struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>\n+    {\n+      static_assert(sizeof...(_BoundArgs) == sizeof...(_Args),\n+                   \"Wrong number of arguments for function\");\n+    };\n+\n+  template<typename _Tp, typename _Class, typename... _BoundArgs>\n+    struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>\n+    {\n+      using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;\n+      static_assert(sizeof...(_BoundArgs) == _Arity::value + 1,\n+                   \"Wrong number of arguments for pointer-to-member\");\n+    };\n+\n   // Trait type used to remove std::bind() from overload set via SFINAE\n   // when first argument has integer type, so that std::bind() will\n   // not be a better match than ::bind() from the BSD Sockets API.\n@@ -1493,6 +1515,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   template<bool _SocketLike, typename _Func, typename... _BoundArgs>\n     struct _Bind_helper\n+    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>\n     {\n       typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n \t__maybe_type;\n@@ -1525,6 +1548,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   template<typename _Result, typename _Func, typename... _BoundArgs>\n     struct _Bindres_helper\n+    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>\n     {\n       typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n \t__maybe_type;\n@@ -1599,6 +1623,7 @@ _GLIBCXX_HAS_NESTED_TYPE(result_type)\n \n   template<typename _Func, typename... _BoundArgs>\n     struct _Bind_simple_helper\n+    : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>\n     {\n       typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n         __maybe_type;"}, {"sha": "1063dd35d7e0752124aae0dbae9afcf417a7cb04", "filename": "libstdc++-v3/testsuite/20_util/bind/ref_neg.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/afc449e82cb99424361f95190cec4381e4da11f8/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fref_neg.cc?ref=afc449e82cb99424361f95190cec4381e4da11f8", "patch": "@@ -30,10 +30,10 @@ void test01()\n {\n   const int dummy = 0;\n   std::bind(&inc, _1)(0);               // { dg-error  \"no match\" }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1315 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1329 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1343 }\n-  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1357 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1213 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1227 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1241 }\n+  // { dg-error \"rvalue|const\" \"\" { target *-*-* } 1255 }\n   std::bind(&inc, std::ref(dummy))();\t// { dg-error  \"no match\" }\n }\n "}]}