{"sha": "e8b22dd136b0adf813976ca738c7d96d101b3452", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThiMjJkZDEzNmIwYWRmODEzOTc2Y2E3MzhjN2Q5NmQxMDFiMzQ1Mg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "2000-02-09T14:08:44Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2000-02-09T14:08:44Z"}, "message": "java-except.h (struct eh_range): Add `expanded' field.\n\n2000-01-25  Andrew Haley  <aph@cygnus.com>\n\n        * java-except.h (struct eh_range): Add `expanded' field.\n        (maybe_start_try): Add end_pc arg.\n        (maybe_end_try): Ditto.\n\t* java-tree.h (force_poplevels): new function.\n        * expr.c (expand_byte_code): Don't call maybe_start_try or\n        maybe_end_try.\n        * except.c (add_handler): Reset expanded.\n        (expand_start_java_handler): Set expanded.\n        (check_start_handlers): Don't expand a start handler that's\n        already been expanded.\n        (maybe_start_try): Add end_pc arg.  Only expand a handler which\n        ends after end_pc.\n\t(expand_end_java_handler): call force_poplevels.\n\t(force_poplevels): new function.\n        * decl.c (binding_level): Add start_pc of binding level.\n        (maybe_pushlevels): Call maybe_start_try when pushing binding\n        levels.\n        (maybe_poplevels): Call maybe_end_try when popping binding levels.\n        (LARGEST_PC): Define.\n        (clear_binding_level): Use LARGEST_PC.\n\n\t* java-tree.h (DEBUG_JAVA_BINDING_LEVELS): new define.\n\t* decl.c (DEBUG_JAVA_BINDING_LEVELS): new define.\n\t(binding_depth, is_class_level, current_pc): new variables.\n        (struct binding_level): ditto.\n\t(indent): new function.\n\t(push_jvm_slot): add debugging info.\n\t(maybe_pushlevels): ditto.\n\t(maybe_poplevels): ditto.\n\t(pushlevel): ditto.\n\t(poplevel): ditto.\n\t(start_java_method): ditto.\n\t(give_name_to_locals): comment only.\n\t* except.c (binding_depth, is_class_level, current_pc):\n\tnew variables.\n\t(expand_start_java_handler): add debugging info.\n\t(expand_end_java_handler): ditto.\n\nFrom-SVN: r31861", "tree": {"sha": "b67485a68e46fde7b7d44642f8af9498d8fe9b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b67485a68e46fde7b7d44642f8af9498d8fe9b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8b22dd136b0adf813976ca738c7d96d101b3452", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b22dd136b0adf813976ca738c7d96d101b3452", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8b22dd136b0adf813976ca738c7d96d101b3452", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8b22dd136b0adf813976ca738c7d96d101b3452/comments", "author": null, "committer": null, "parents": [{"sha": "665792ebecf527818aa1fcaf31b90307204cef30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/665792ebecf527818aa1fcaf31b90307204cef30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/665792ebecf527818aa1fcaf31b90307204cef30"}], "stats": {"total": 230, "additions": 207, "deletions": 23}, "files": [{"sha": "28cfbcc06157bb897f0a6ccd02ca6f478449b92d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -1,3 +1,43 @@\n+2000-01-25  Andrew Haley  <aph@cygnus.com>\n+\n+        * java-except.h (struct eh_range): Add `expanded' field.\n+        (maybe_start_try): Add end_pc arg.\n+        (maybe_end_try): Ditto.\n+\t* java-tree.h (force_poplevels): new function.\n+        * expr.c (expand_byte_code): Don't call maybe_start_try or\n+        maybe_end_try.\n+        * except.c (add_handler): Reset expanded.\n+        (expand_start_java_handler): Set expanded.\n+        (check_start_handlers): Don't expand a start handler that's\n+        already been expanded.\n+        (maybe_start_try): Add end_pc arg.  Only expand a handler which\n+        ends after end_pc.\n+\t(expand_end_java_handler): call force_poplevels.\n+\t(force_poplevels): new function.\n+        * decl.c (binding_level): Add start_pc of binding level.\n+        (maybe_pushlevels): Call maybe_start_try when pushing binding\n+        levels.\n+        (maybe_poplevels): Call maybe_end_try when popping binding levels.\n+        (LARGEST_PC): Define.\n+        (clear_binding_level): Use LARGEST_PC.\n+\n+\t* java-tree.h (DEBUG_JAVA_BINDING_LEVELS): new define.\n+\t* decl.c (DEBUG_JAVA_BINDING_LEVELS): new define.\n+\t(binding_depth, is_class_level, current_pc): new variables.\n+        (struct binding_level): ditto.\n+\t(indent): new function.\n+\t(push_jvm_slot): add debugging info.\n+\t(maybe_pushlevels): ditto.\n+\t(maybe_poplevels): ditto.\n+\t(pushlevel): ditto.\n+\t(poplevel): ditto.\n+\t(start_java_method): ditto.\n+\t(give_name_to_locals): comment only.\n+\t* except.c (binding_depth, is_class_level, current_pc): \n+\tnew variables.\n+\t(expand_start_java_handler): add debugging info.\n+\t(expand_end_java_handler): ditto.\n+\t\n 2000-02-05  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gjavah.c (overloaded_jni_method_exists_p): Add prototype."}, {"sha": "5669b3fc89117a43769b4ab2291d9b42fc35612e", "filename": "gcc/java/decl.c", "status": "modified", "additions": 112, "deletions": 3, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -29,12 +29,19 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n #include \"config.h\"\n #include \"system.h\"\n #include \"tree.h\"\n+#include \"toplev.h\"\n+#include \"flags.h\"\n #include \"java-tree.h\"\n #include \"jcf.h\"\n #include \"toplev.h\"\n #include \"function.h\"\n #include \"except.h\"\n #include \"defaults.h\"\n+#include \"java-except.h\"\n+\n+#if defined (DEBUG_JAVA_BINDING_LEVELS)\n+extern void indent PROTO((void));\n+#endif\n \n static tree push_jvm_slot PARAMS ((int, tree));\n static tree lookup_name_current_level PARAMS ((tree));\n@@ -63,6 +70,21 @@ tree pending_local_decls = NULL_TREE;\n /* Push a local variable or stack slot into the decl_map,\n    and assign it an rtl. */\n \n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+int binding_depth = 0;\n+int is_class_level = 0;\n+int current_pc;\n+\n+void\n+indent ()\n+{\n+  register unsigned i;\n+\n+  for (i = 0; i < binding_depth*2; i++)\n+    putc (' ', stderr);\n+}\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n+\n static tree\n push_jvm_slot (index, decl)\n      int index;\n@@ -199,6 +221,12 @@ struct binding_level\n \n     /* The bytecode PC that marks the end of this level. */\n     int end_pc;\n+    int start_pc;\n+\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+    /* Binding depth at which this level began.  */\n+    unsigned binding_depth;\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n   };\n \n #define NULL_BINDING_LEVEL (struct binding_level *) NULL\n@@ -217,11 +245,15 @@ static struct binding_level *free_binding_level;\n \n static struct binding_level *global_binding_level;\n \n+/* A PC value bigger than any PC value we may ever may encounter. */\n+\n+#define LARGEST_PC (( (unsigned int)1 << (HOST_BITS_PER_INT - 1)) - 1)\n+\n /* Binding level structures are initialized by copying this one.  */\n \n static struct binding_level clear_binding_level\n   = {NULL_TREE, NULL_TREE, NULL_TREE, NULL_TREE,\n-       NULL_BINDING_LEVEL, 0, 0, 0, 0, 1000000000};\n+       NULL_BINDING_LEVEL, 0, 0, 0, 0, LARGEST_PC, 0, 0};\n \n #if 0\n /* A list (chain of TREE_LIST nodes) of all LABEL_DECLs in the function\n@@ -1123,6 +1155,14 @@ pushlevel (unused)\n   keep_next_level_flag = 0;\n   newlevel->keep_if_subblocks = keep_next_if_subblocks;\n   keep_next_if_subblocks = 0;\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  newlevel->binding_depth = binding_depth;\n+  indent ();\n+  fprintf (stderr, \"push %s level 0x%08x pc %d\\n\",\n+\t   (is_class_level) ? \"class\" : \"block\", newlevel, current_pc);\n+  is_class_level = 0;\n+  binding_depth++;\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n }\n \n /* Exit a binding level.\n@@ -1155,6 +1195,26 @@ poplevel (keep, reverse, functionbody)\n   tree decl;\n   int block_previously_created;\n \n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  binding_depth--;\n+  indent ();\n+  if (current_binding_level->end_pc != LARGEST_PC)\n+    fprintf (stderr, \"pop  %s level 0x%08x pc %d (end pc %d)\\n\",\n+\t     (is_class_level) ? \"class\" : \"block\", current_binding_level, current_pc,\n+\t     current_binding_level->end_pc);\n+  else\n+    fprintf (stderr, \"pop  %s level 0x%08x pc %d\\n\",\n+\t     (is_class_level) ? \"class\" : \"block\", current_binding_level, current_pc);\n+#if 0\n+  if (is_class_level != (current_binding_level == class_binding_level))\n+    {\n+      indent ();\n+      fprintf (stderr, \"XXX is_class_level != (current_binding_level == class_binding_level)\\n\");\n+    }\n+  is_class_level = 0;\n+#endif\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n+\n   keep |= current_binding_level->keep;\n \n   /* Get the decls in the order they were written.\n@@ -1334,6 +1394,10 @@ void\n maybe_pushlevels (pc)\n      int pc;\n {\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  current_pc = pc;\n+#endif\n+\n   while (pending_local_decls != NULL_TREE &&\n \t DECL_LOCAL_START_PC (pending_local_decls) <= pc)\n     {\n@@ -1352,24 +1416,57 @@ maybe_pushlevels (pc)\n       if (end_pc > current_binding_level->end_pc)\n \tend_pc = current_binding_level->end_pc;\n \n+      maybe_start_try (pc, end_pc);\n+      \n       pushlevel (1);\n       expand_start_bindings (0);\n+\n       current_binding_level->end_pc = end_pc;\n-      \n+      current_binding_level->start_pc = pc;      \n       current_binding_level->names = decl;\n       for ( ; decl != NULL_TREE;  decl = TREE_CHAIN (decl))\n \t{\n \t  push_jvm_slot (DECL_LOCAL_SLOT_NUMBER (decl), decl);\n \t}\n-    }\n+    }      \n+\n+  maybe_start_try (pc, 0);\n }\n \n void\n maybe_poplevels (pc)\n      int pc;\n {\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  current_pc = pc;\n+#endif\n+\n   while (current_binding_level->end_pc <= pc)\n     {\n+      tree decls = getdecls ();\t\n+      expand_end_bindings (getdecls (), 1, 0);\n+      maybe_end_try (current_binding_level->start_pc, pc);\n+      poplevel (1, 0, 0);\n+    }\n+  maybe_end_try (0, pc);\n+}\n+\n+/* Terminate any binding which began during the range beginning at\n+   start_pc.  This tidies up improperly nested local variable ranges\n+   and exception handlers; a variable declared within an exception\n+   range is forcibly terminated when that exception ends. */\n+\n+void\n+force_poplevels (start_pc)\n+     int start_pc;\n+{\n+  while (current_binding_level->start_pc > start_pc)\n+    {\n+      tree decls = getdecls ();\t\n+      if (pedantic && current_binding_level->start_pc > start_pc)\n+\twarning_with_decl (current_function_decl, \n+\t\t\t   \"In %s: overlapped variable and exception ranges at %d\",\n+\t\t\t   current_binding_level->start_pc);\n       expand_end_bindings (getdecls (), 1, 0);\n       poplevel (1, 0, 0);\n     }\n@@ -1468,6 +1565,14 @@ give_name_to_locals (jcf)\n \t    = (struct lang_decl *) permalloc (sizeof (struct lang_decl_var));\n \t  DECL_LOCAL_SLOT_NUMBER (decl) = slot;\n \t  DECL_LOCAL_START_PC (decl) = start_pc;\n+#if 0\n+\t  /* FIXME: The range used internally for exceptions and local\n+\t     variable ranges, is a half-open interval: \n+\t     start_pc <= pc < end_pc.  However, the range used in the\n+\t     Java VM spec is inclusive at both ends: \n+\t     start_pc <= pc <= end_pc. */\n+\t  end_pc++;\n+#endif\n \t  DECL_LOCAL_END_PC (decl) = end_pc;\n \n \t  /* Now insert the new decl in the proper place in\n@@ -1612,6 +1717,10 @@ start_java_method (fndecl)\n   decl_map = make_tree_vec (i);\n   type_map = (tree *) oballoc (i * sizeof (tree));\n \n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  fprintf (stderr, \"%s:\\n\", (*decl_printable_name) (fndecl, 2));\n+  current_pc = 0;\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n   pushlevel (1);  /* Push parameters. */\n \n   ptr = &DECL_ARGUMENTS (fndecl);"}, {"sha": "1fb59345d88ebf9007c9d3d1134ded5ecd914e1f", "filename": "gcc/java/except.c", "status": "modified", "additions": 47, "deletions": 14, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -42,7 +42,6 @@ static void expand_end_java_handler PARAMS ((struct eh_range *));\n static struct eh_range *find_handler_in_range PARAMS ((int, struct eh_range *,\n \t\t\t\t\t\t      struct eh_range *));\n static void link_handler PARAMS ((struct eh_range *, struct eh_range *));\n-static void check_start_handlers PARAMS ((struct eh_range *, int));\n \n extern struct obstack permanent_obstack;\n \n@@ -62,6 +61,14 @@ static struct eh_range *cache_next_child;\n \n struct eh_range whole_range;\n \n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+int binding_depth;\n+int is_class_level;\n+int current_pc;\n+extern void indent ();\n+\n+#endif\n+\n /* Search for the most specific eh_range containing PC.\n    Assume PC is within RANGE.\n    CHILD is a list of children of RANGE such that any\n@@ -278,6 +285,7 @@ add_handler (start_pc, end_pc, handler, type)\n   h->outer = NULL;\n   h->handlers = build_tree_list (type, handler);\n   h->next_sibling = NULL;\n+  h->expanded = 0;\n \n   if (prev == NULL)\n     whole_range.first_child = h;\n@@ -289,8 +297,14 @@ add_handler (start_pc, end_pc, handler, type)\n /* if there are any handlers for this range, issue start of region */\n static void\n expand_start_java_handler (range)\n-  struct eh_range *range ATTRIBUTE_UNUSED;\n+  struct eh_range *range;\n {\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  indent ();\n+  fprintf (stderr, \"expand start handler pc %d --> %d\\n\",\n+\t   current_pc, range->end_pc);\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n+  range->expanded = 1;\n   push_obstacks (&permanent_obstack, &permanent_obstack);\n   expand_eh_region_start ();\n   pop_obstacks ();\n@@ -327,8 +341,9 @@ prepare_eh_table_type (type)\n static void\n expand_end_java_handler (range)\n      struct eh_range *range;\n-{\n+{  \n   tree handler = range->handlers;\n+  force_poplevels (range->start_pc);\n   push_obstacks (&permanent_obstack, &permanent_obstack);\n   expand_start_all_catch ();\n   pop_obstacks ();\n@@ -341,6 +356,11 @@ expand_end_java_handler (range)\n       end_catch_handler ();\n     }\n   expand_end_all_catch ();\n+#if defined(DEBUG_JAVA_BINDING_LEVELS)\n+  indent ();\n+  fprintf (stderr, \"expand end handler pc %d <-- %d\\n\",\n+\t   current_pc, range->start_pc);\n+#endif /* defined(DEBUG_JAVA_BINDING_LEVELS) */\n }\n \n /* Recursive helper routine for maybe_start_handlers. */\n@@ -353,35 +373,48 @@ check_start_handlers (range, pc)\n   if (range != NULL_EH_RANGE && range->start_pc == pc)\n     {\n       check_start_handlers (range->outer, pc);\n-      expand_start_java_handler (range);\n+      if (!range->expanded)\n+\texpand_start_java_handler (range);\n     }\n }\n \n-struct eh_range *current_range;\n \n-/* Emit any start-of-try-range start at PC. */\n+static struct eh_range *current_range;\n+\n+/* Emit any start-of-try-range starting at start_pc and ending after\n+   end_pc. */\n \n void\n-maybe_start_try (pc)\n-     int pc;\n+maybe_start_try (start_pc, end_pc)\n+     int start_pc;\n+     int end_pc;\n {\n+  struct eh_range *range;\n   if (! doing_eh (1))\n     return;\n \n-  current_range = find_handler (pc);\n-  check_start_handlers (current_range, pc);\n+  range = find_handler (start_pc);\n+  while (range != NULL_EH_RANGE && range->start_pc == start_pc\n+\t && range->end_pc < end_pc)\n+    range = range->outer;\n+\t \n+  current_range = range;\n+  check_start_handlers (range, start_pc, end_pc);\n }\n \n-/* Emit any end-of-try-range end at PC. */\n+/* Emit any end-of-try-range ending at end_pc and starting before\n+   start_pc. */\n \n void\n-maybe_end_try (pc)\n-     int pc;\n+maybe_end_try (start_pc, end_pc)\n+     int start_pc;\n+     int end_pc;\n {\n   if (! doing_eh (1))\n     return;\n \n-  while (current_range != NULL_EH_RANGE && current_range->end_pc <= pc)\n+  while (current_range != NULL_EH_RANGE && current_range->end_pc <= end_pc\n+\t && current_range->start_pc >= start_pc)\n     {\n       expand_end_java_handler (current_range);\n       current_range = current_range->outer;"}, {"sha": "3c1c0ffbd3ddabcc089ae60d4767035bcb1646d6", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -2289,13 +2289,9 @@ expand_byte_code (jcf, method)\n \t\t}\n \t    }\n \t}\n-      maybe_start_try (PC);\n       maybe_pushlevels (PC);\n-\n       PC = process_jvm_instruction (PC, byte_ops, length);\n-\n       maybe_poplevels (PC);\n-      maybe_end_try (PC);\n     } /* for */\n   \n   if (dead_code_index != -1)"}, {"sha": "e06905309bc0fd5e6e0bed3339ddf70c12693a5b", "filename": "gcc/java/java-except.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fjava-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fjava-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-except.h?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -47,6 +47,9 @@ struct eh_range\n \n     /* The next child of outer, in address order. */\n     struct eh_range *next_sibling;\n+\n+    /* True if this range has already been expanded. */\n+    int expanded;\n   };\n \n /* A dummy range that represents the entire method. */\n@@ -60,9 +63,9 @@ extern void method_init_exceptions PARAMS ((void));\n \n extern void emit_handlers PARAMS ((void));\n \n-extern void maybe_start_try PARAMS ((int));\n+extern void maybe_start_try PARAMS ((int, int));\n \n-extern void maybe_end_try PARAMS ((int));\n+extern void maybe_end_try PARAMS ((int, int));\n \n extern void add_handler PARAMS ((int, int, tree, tree));\n "}, {"sha": "288a6cbc47926566109e656553dbc2009f5553b3", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8b22dd136b0adf813976ca738c7d96d101b3452/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=e8b22dd136b0adf813976ca738c7d96d101b3452", "patch": "@@ -592,6 +592,7 @@ extern int class_depth PARAMS ((tree));\n extern int verify_jvm_instructions PARAMS ((struct JCF *, const unsigned char *, long));\n extern void maybe_pushlevels PARAMS ((int));\n extern void maybe_poplevels PARAMS ((int));\n+extern void force_poplevels PARAMS ((int));\n extern int process_jvm_instruction PARAMS ((int, const unsigned char *, long));\n extern void set_local_type PARAMS ((int, tree));\n extern int merge_type_state PARAMS ((tree));\n@@ -944,3 +945,5 @@ extern int java_error_count;\t\t\t\t\t\\\n      if (java_error_count > save_error_count)\t\t\t\t\\\n        return;\t\t\t\t\t\t\t\t\\\n    }\n+\n+#undef DEBUG_JAVA_BINDING_LEVELS"}]}