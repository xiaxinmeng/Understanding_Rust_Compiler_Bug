{"sha": "3cfa37023cc9d77ec91331d215387c1429e442b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NmYTM3MDIzY2M5ZDc3ZWM5MTMzMWQyMTUzODdjMTQyOWU0NDJiMw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-10-22T23:21:14Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-10-22T23:21:14Z"}, "message": "h8300.c (h8300_output_function_epilogue): Remove.\n\n\t* config/h8300/h8300.c (h8300_output_function_epilogue): Remove.\n\t(h8300_saveall_function_p): New.\n\t(h8300_insert_attributes): Insert the saveall attribute if\n\t#pragma saveall is specified.\n\t(h8300_attribute_table): Add saveall.\n\t(TARGET_ASM_FUNCTION_EPILOGUE): Remove.\n\t* doc/extend.texi: Mention the saveall attribute.\n\nFrom-SVN: r72827", "tree": {"sha": "32f455c4c785fdb1e4dc368921fa489c92ad58db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f455c4c785fdb1e4dc368921fa489c92ad58db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cfa37023cc9d77ec91331d215387c1429e442b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfa37023cc9d77ec91331d215387c1429e442b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cfa37023cc9d77ec91331d215387c1429e442b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cfa37023cc9d77ec91331d215387c1429e442b3/comments", "author": null, "committer": null, "parents": [{"sha": "dc70e81d6e03635053815aba4360da3356ae5b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc70e81d6e03635053815aba4360da3356ae5b24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc70e81d6e03635053815aba4360da3356ae5b24"}], "stats": {"total": 78, "additions": 57, "deletions": 21}, "files": [{"sha": "4786bebd57c130ee495425f4bf6b9a9aad57649f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cfa37023cc9d77ec91331d215387c1429e442b3", "patch": "@@ -1,3 +1,13 @@\n+2003-10-22  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (h8300_output_function_epilogue): Remove.\n+\t(h8300_saveall_function_p): New.\n+\t(h8300_insert_attributes): Insert the saveall attribute if\n+\t#pragma saveall is specified.\n+\t(h8300_attribute_table): Add saveall.\n+\t(TARGET_ASM_FUNCTION_EPILOGUE): Remove.\n+\t* doc/extend.texi: Mention the saveall attribute.\n+\n 2003-10-22  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* c-typeck.c (pedantic_lvalue_warning): Unconditionally warn of"}, {"sha": "88e9a63a6dd00c3d97bd2a397bd4f1e8ebe4be33", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=3cfa37023cc9d77ec91331d215387c1429e442b3", "patch": "@@ -49,6 +49,7 @@ Boston, MA 02111-1307, USA.  */\n /* Forward declarations.  */\n static const char *byte_reg (rtx, int);\n static int h8300_interrupt_function_p (tree);\n+static int h8300_saveall_function_p (tree);\n static int h8300_monitor_function_p (tree);\n static int h8300_os_task_function_p (tree);\n static void dosize (int, unsigned int);\n@@ -346,7 +347,7 @@ byte_reg (rtx x, int b)\n   (regno < SP_REG\t\t\t\t\t\t\t\\\n    /* No need to save registers if this function will not return.  */\t\\\n    && ! TREE_THIS_VOLATILE (current_function_decl)\t\t\t\\\n-   && (pragma_saveall\t\t\t\t\t\t\t\\\n+   && (h8300_saveall_function_p (current_function_decl)\t\t\t\\\n        /* Save any call saved register that was used.  */\t\t\\\n        || (regs_ever_live[regno] && !call_used_regs[regno])\t\t\\\n        /* Save the frame pointer if it was used.  */\t\t\t\\\n@@ -635,15 +636,6 @@ h8300_expand_epilogue (void)\n     pop (FRAME_POINTER_REGNUM);\n }\n \n-/* Output assembly language code for the function epilogue.  */\n-\n-static void\n-h8300_output_function_epilogue (FILE *file ATTRIBUTE_UNUSED,\n-\t\t\t\tHOST_WIDE_INT size ATTRIBUTE_UNUSED)\n-{\n-  pragma_saveall = 0;\n-}\n-\n /* Return nonzero if the current function is an interrupt\n    function.  */\n \n@@ -4101,6 +4093,21 @@ h8300_interrupt_function_p (tree func)\n   return a != NULL_TREE;\n }\n \n+/* Return nonzero if FUNC is a saveall function as specified by the\n+   \"saveall\" attribute.  */\n+\n+static int\n+h8300_saveall_function_p (tree func)\n+{\n+  tree a;\n+\n+  if (TREE_CODE (func) != FUNCTION_DECL)\n+    return 0;\n+\n+  a = lookup_attribute (\"saveall\", DECL_ATTRIBUTES (func));\n+  return a != NULL_TREE;\n+}\n+\n /* Return nonzero if FUNC is an OS_Task function as specified\n    by the \"OS_Task\" attribute.  */\n \n@@ -4176,27 +4183,42 @@ h8300_tiny_data_p (tree decl)\n   return a != NULL_TREE;\n }\n \n-/* Generate an 'interrupt_handler' attribute for decls.  */\n+/* Generate an 'interrupt_handler' attribute for decls.  We convert\n+   all the pragmas to corresponding attributes.  */\n \n static void\n h8300_insert_attributes (tree node, tree *attributes)\n {\n-  if (!pragma_interrupt\n-      || TREE_CODE (node) != FUNCTION_DECL)\n-    return;\n+  if (TREE_CODE (node) == FUNCTION_DECL)\n+    {\n+      if (pragma_interrupt)\n+\t{\n+\t  pragma_interrupt = 0;\n \n-  pragma_interrupt = 0;\n+\t  /* Add an 'interrupt_handler' attribute.  */\n+\t  *attributes = tree_cons (get_identifier (\"interrupt_handler\"),\n+\t\t\t\t   NULL, *attributes);\n+\t}\n \n-  /* Add an 'interrupt_handler' attribute.  */\n-  *attributes = tree_cons (get_identifier (\"interrupt_handler\"),\n-\t\t\t   NULL, *attributes);\n+      if (pragma_saveall)\n+\t{\n+\t  pragma_saveall = 0;\n+\n+\t  /* Add an 'saveall' attribute.  */\n+\t  *attributes = tree_cons (get_identifier (\"saveall\"),\n+\t\t\t\t   NULL, *attributes);\n+\t}\n+    }\n }\n \n /* Supported attributes:\n \n    interrupt_handler: output a prologue and epilogue suitable for an\n    interrupt handler.\n \n+   saveall: output a prologue and epilogue that saves and restores\n+   all registers except the stack pointer.\n+\n    function_vector: This function should be called through the\n    function vector.\n \n@@ -4210,6 +4232,7 @@ const struct attribute_spec h8300_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n   { \"interrupt_handler\", 0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n+  { \"saveall\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n   { \"OS_Task\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n   { \"monitor\",           0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n   { \"function_vector\",   0, 0, true,  false, false, h8300_handle_fndecl_attribute },\n@@ -4526,9 +4549,6 @@ h8300_init_libfuncs (void)\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n \n-#undef TARGET_ASM_FUNCTION_EPILOGUE\n-#define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n-\n #undef TARGET_ASM_FILE_START\n #define TARGET_ASM_FILE_START h8300_file_start\n #undef TARGET_ASM_FILE_START_FILE_DIRECTIVE"}, {"sha": "63677f1614810e7c70af81e39efba8e980b3f3c9", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cfa37023cc9d77ec91331d215387c1429e442b3/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3cfa37023cc9d77ec91331d215387c1429e442b3", "patch": "@@ -2550,6 +2550,12 @@ The compiler will generate more efficient code for loads and stores\n on data in the tiny data section.  Note the tiny data area is limited to\n slightly under 32kbytes of data.\n \n+@item saveall\n+@cindex save all registers on the H8/300, H8/300H, and H8S\n+Use this attribute on the H8/300, H8/300H, and H8S to indicate that\n+all registers except the stack pointer should be saved in the prologue\n+regardless of whether they are used or not.\n+\n @item signal\n @cindex signal handler functions on the AVR processors\n Use this attribute on the AVR to indicate that the specified"}]}