{"sha": "2f4703261732681c8d2a42ebfe4850eba96cd8a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY0NzAzMjYxNzMyNjgxYzhkMmE0MmViZmU0ODUwZWJhOTZjZDhhMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2007-08-23T23:29:57Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-08-23T23:29:57Z"}, "message": "re PR tree-optimization/32573 (ice for legal code with -O3)\n\n\tPR tree-optimization/32573\n\tPR middle-end/32946\n\t* tree-data-ref.c (initialize_data_dependence_relation): Clear\n\tDDR_SUBSCRIPTS, DDR_DIR_VECTS and DDR_DIST_VECTS at the beginning.\n\t(finalize_ddr_dependent): Clear DDR_SUBSCRIPTS after freeing it.\n\t(build_classic_dist_vector): Return false rather than true if\n\tDDR_ARE_DEPENDENT is non-NULL at the beginning.  Return false\n\tif either subscript_dependence_tester_1 or build_classic_dist_vector_1\n\treturned false.  Don't call save_dist_v before calling\n\tbuild_classic_dist_vector_1.\n\t(free_dependence_relation): Don't guard freeing DDR_SUBSCRIPTS\n\twith NULL DDR_ARE_DEPENDENT.  Also free DDR_DIST_VECTS and/or\n\tDDR_DIR_VECTS vectors.\n\n\t* gcc.dg/pr32573.c: New test.\n\nFrom-SVN: r127750", "tree": {"sha": "52acacce772d18db5ee81cdd6de6cfb83fc155ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52acacce772d18db5ee81cdd6de6cfb83fc155ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f4703261732681c8d2a42ebfe4850eba96cd8a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f4703261732681c8d2a42ebfe4850eba96cd8a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f4703261732681c8d2a42ebfe4850eba96cd8a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f4703261732681c8d2a42ebfe4850eba96cd8a0/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "97dc8e5b5775cbb4aba4a7d7456844c15ad5d6b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97dc8e5b5775cbb4aba4a7d7456844c15ad5d6b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97dc8e5b5775cbb4aba4a7d7456844c15ad5d6b0"}], "stats": {"total": 89, "additions": 76, "deletions": 13}, "files": [{"sha": "630a5b61e249584234b5b378dd7008471751b782", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f4703261732681c8d2a42ebfe4850eba96cd8a0", "patch": "@@ -1,3 +1,19 @@\n+2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/32573\n+\tPR middle-end/32946\n+\t* tree-data-ref.c (initialize_data_dependence_relation): Clear\n+\tDDR_SUBSCRIPTS, DDR_DIR_VECTS and DDR_DIST_VECTS at the beginning.\n+\t(finalize_ddr_dependent): Clear DDR_SUBSCRIPTS after freeing it.\n+\t(build_classic_dist_vector): Return false rather than true if\n+\tDDR_ARE_DEPENDENT is non-NULL at the beginning.  Return false\n+\tif either subscript_dependence_tester_1 or build_classic_dist_vector_1\n+\treturned false.  Don't call save_dist_v before calling\n+\tbuild_classic_dist_vector_1.\n+\t(free_dependence_relation): Don't guard freeing DDR_SUBSCRIPTS\n+\twith NULL DDR_ARE_DEPENDENT.  Also free DDR_DIST_VECTS and/or\n+\tDDR_DIR_VECTS vectors.\n+\n 2007-08-23  Brian Sidebotham  <brian.sidebotham@gmail.com>\n \n \t* configure.ac (leb128): Modify sed statement to work with any binutils"}, {"sha": "9b28b4b9ff463086215a3d4718ddfcffd4854e45", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f4703261732681c8d2a42ebfe4850eba96cd8a0", "patch": "@@ -1,5 +1,9 @@\n 2007-08-24  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/32573\n+\tPR middle-end/32946\n+\t* gcc.dg/pr32573.c: New test.\n+\n \tPR c++/32898\n \t* g++.dg/lookup/ns3.C: New test.\n "}, {"sha": "d6897fbc22f601dd7fba7d3fc81f905225399482", "filename": "gcc/testsuite/gcc.dg/pr32573.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32573.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32573.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr32573.c?ref=2f4703261732681c8d2a42ebfe4850eba96cd8a0", "patch": "@@ -0,0 +1,30 @@\n+/* PR tree-optimization/32573 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int\n+foo (void *x, long long *y)\n+{\n+  char a[256];\n+  int i = 0;\n+  long long b;\n+  int c;\n+  int d = 0;\n+  int e = 0;\n+  unsigned f = 0;\n+  b = bar (x);\n+  c = (unsigned) b;\n+  while (d < b && d < 65557)\n+    {\n+      f = *(unsigned *) &a[0];\n+      for (i = c - 4; i > 0; i--)\n+\tif (a[i + 0] == 0x50\n+\t    && a[i + 1] == 0x4B\n+\t    && a[i + 3] == 0x06)\n+\t  {\n+\t    e = 1;\n+\t    break;\n+\t  }\n+    }\n+  return !e;\n+}"}, {"sha": "6ad2e96bea535b52a2d881c6fb8591f9714603b8", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f4703261732681c8d2a42ebfe4850eba96cd8a0/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=2f4703261732681c8d2a42ebfe4850eba96cd8a0", "patch": "@@ -1229,6 +1229,9 @@ initialize_data_dependence_relation (struct data_reference *a,\n   DDR_B (res) = b;\n   DDR_LOOP_NEST (res) = NULL;\n   DDR_REVERSED_P (res) = false;\n+  DDR_SUBSCRIPTS (res) = NULL;\n+  DDR_DIR_VECTS (res) = NULL;\n+  DDR_DIST_VECTS (res) = NULL;\n \n   if (a == NULL || b == NULL)\n     {\n@@ -1268,8 +1271,6 @@ initialize_data_dependence_relation (struct data_reference *a,\n   DDR_SUBSCRIPTS (res) = VEC_alloc (subscript_p, heap, DR_NUM_DIMENSIONS (a));\n   DDR_LOOP_NEST (res) = loop_nest;\n   DDR_INNER_LOOP (res) = 0;\n-  DDR_DIR_VECTS (res) = NULL;\n-  DDR_DIST_VECTS (res) = NULL;\n \n   for (i = 0; i < DR_NUM_DIMENSIONS (a); i++)\n     {\n@@ -1333,6 +1334,7 @@ finalize_ddr_dependent (struct data_dependence_relation *ddr,\n \n   DDR_ARE_DEPENDENT (ddr) = chrec;  \n   free_subscripts (DDR_SUBSCRIPTS (ddr));\n+  DDR_SUBSCRIPTS (ddr) = NULL;\n }\n \n /* The dependence relation DDR cannot be represented by a distance\n@@ -2961,7 +2963,7 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n   lambda_vector dist_v;\n \n   if (DDR_ARE_DEPENDENT (ddr) != NULL_TREE)\n-    return true;\n+    return false;\n \n   if (same_access_functions (ddr))\n     {\n@@ -3013,11 +3015,13 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n       if (!lambda_vector_lexico_pos (dist_v, DDR_NB_LOOPS (ddr)))\n \t{\n \t  lambda_vector save_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n-\t  subscript_dependence_tester_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n-\t\t\t\t\t loop_nest);\n+\t  if (!subscript_dependence_tester_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n+\t\t\t\t\t      loop_nest))\n+\t    return false;\n \t  compute_subscript_distance (ddr);\n-\t  build_classic_dist_vector_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n-\t\t\t\t       save_v, &init_b, &index_carry);\n+\t  if (!build_classic_dist_vector_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n+\t\t\t\t\t    save_v, &init_b, &index_carry))\n+\t    return false;\n \t  save_dist_v (ddr, save_v);\n \t  DDR_REVERSED_P (ddr) = true;\n \n@@ -3047,21 +3051,26 @@ build_classic_dist_vector (struct data_dependence_relation *ddr,\n \t{\n \t  lambda_vector save_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n \t  lambda_vector_copy (dist_v, save_v, DDR_NB_LOOPS (ddr));\n-\t  save_dist_v (ddr, save_v);\n \n \t  if (DDR_NB_LOOPS (ddr) > 1)\n \t    {\n \t      lambda_vector opposite_v = lambda_vector_new (DDR_NB_LOOPS (ddr));\n \n-\t      subscript_dependence_tester_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n-\t\t\t\t\t     loop_nest);\n+\t      if (!subscript_dependence_tester_1 (ddr, DDR_B (ddr),\n+\t\t\t\t\t\t  DDR_A (ddr), loop_nest))\n+\t\treturn false;\n \t      compute_subscript_distance (ddr);\n-\t      build_classic_dist_vector_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n-\t\t\t\t\t   opposite_v, &init_b, &index_carry);\n+\t      if (!build_classic_dist_vector_1 (ddr, DDR_B (ddr), DDR_A (ddr),\n+\t\t\t\t\t\topposite_v, &init_b,\n+\t\t\t\t\t\t&index_carry))\n+\t\treturn false;\n \n+\t      save_dist_v (ddr, save_v);\n \t      add_outer_distances (ddr, dist_v, index_carry);\n \t      add_outer_distances (ddr, opposite_v, index_carry);\n \t    }\n+\t  else\n+\t    save_dist_v (ddr, save_v);\n \t}\n     }\n   else\n@@ -4288,8 +4297,12 @@ free_dependence_relation (struct data_dependence_relation *ddr)\n   if (ddr == NULL)\n     return;\n \n-  if (DDR_ARE_DEPENDENT (ddr) == NULL_TREE && DDR_SUBSCRIPTS (ddr))\n+  if (DDR_SUBSCRIPTS (ddr))\n     free_subscripts (DDR_SUBSCRIPTS (ddr));\n+  if (DDR_DIST_VECTS (ddr))\n+    VEC_free (lambda_vector, heap, DDR_DIST_VECTS (ddr));\n+  if (DDR_DIR_VECTS (ddr))\n+    VEC_free (lambda_vector, heap, DDR_DIR_VECTS (ddr));\n \n   free (ddr);\n }"}]}