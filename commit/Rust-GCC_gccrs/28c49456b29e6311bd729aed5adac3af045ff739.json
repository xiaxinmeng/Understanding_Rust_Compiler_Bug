{"sha": "28c49456b29e6311bd729aed5adac3af045ff739", "node_id": "C_kwDOANBUbNoAKDI4YzQ5NDU2YjI5ZTYzMTFiZDcyOWFlZDVhZGFjM2FmMDQ1ZmY3Mzk", "commit": {"author": {"name": "Gary Dismukes", "email": "dismukes@adacore.com", "date": "2021-08-11T20:49:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:37Z"}, "message": "[Ada] Assert_Failure on derived type with inherited Default_Initial_Condition\n\ngcc/ada/\n\n\t* exp_util.adb (Build_DIC_Procedure_Body): Remove inappropriate\n\tAssert pragma.  Remove unneeded and dead code related to derived\n\tprivate types.", "tree": {"sha": "49065a960c3e6d05b181c104ff0c419ba673dec8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49065a960c3e6d05b181c104ff0c419ba673dec8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28c49456b29e6311bd729aed5adac3af045ff739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c49456b29e6311bd729aed5adac3af045ff739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c49456b29e6311bd729aed5adac3af045ff739", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c49456b29e6311bd729aed5adac3af045ff739/comments", "author": {"login": "dismukes", "id": 50880541, "node_id": "MDQ6VXNlcjUwODgwNTQx", "avatar_url": "https://avatars.githubusercontent.com/u/50880541?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dismukes", "html_url": "https://github.com/dismukes", "followers_url": "https://api.github.com/users/dismukes/followers", "following_url": "https://api.github.com/users/dismukes/following{/other_user}", "gists_url": "https://api.github.com/users/dismukes/gists{/gist_id}", "starred_url": "https://api.github.com/users/dismukes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dismukes/subscriptions", "organizations_url": "https://api.github.com/users/dismukes/orgs", "repos_url": "https://api.github.com/users/dismukes/repos", "events_url": "https://api.github.com/users/dismukes/events{/privacy}", "received_events_url": "https://api.github.com/users/dismukes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698425f5cc85ec83fa17ba08d6da0754ced198f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/698425f5cc85ec83fa17ba08d6da0754ced198f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/698425f5cc85ec83fa17ba08d6da0754ced198f7"}], "stats": {"total": 47, "additions": 3, "deletions": 44}, "files": [{"sha": "4a301e206242d5443e79ae526615325848833756", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 3, "deletions": 44, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28c49456b29e6311bd729aed5adac3af045ff739/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28c49456b29e6311bd729aed5adac3af045ff739/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=28c49456b29e6311bd729aed5adac3af045ff739", "patch": "@@ -2035,14 +2035,11 @@ package body Exp_Util is\n                Stmts    => Stmts);\n          end if;\n \n-      --  Otherwise the \"full\" DIC procedure verifies the DICs of the full\n-      --  view, well as DICs inherited from parent types. In addition, it\n-      --  indirectly verifies the DICs of the partial view by calling the\n-      --  \"partial\" DIC procedure.\n+      --  Otherwise, the \"full\" DIC procedure verifies the DICs inherited from\n+      --  parent types, as well as indirectly verifying the DICs of the partial\n+      --  view by calling the \"partial\" DIC procedure.\n \n       else\n-         pragma Assert (Present (Full_Typ));\n-\n          --  Check the DIC of the partial view by calling the \"partial\" DIC\n          --  procedure, unless the partial DIC body is empty. Generate:\n \n@@ -2056,44 +2053,6 @@ package body Exp_Util is\n                   New_Occurrence_Of (Obj_Id, Loc))));\n          end if;\n \n-         --  Derived subtypes do not have a partial view\n-\n-         if Present (Priv_Typ) then\n-\n-            --  The processing of the \"full\" DIC procedure intentionally\n-            --  skips the partial view because a) this may result in changes of\n-            --  visibility and b) lead to duplicate checks. However, when the\n-            --  full view is the underlying full view of an untagged derived\n-            --  type whose parent type is private, partial DICs appear on\n-            --  the rep item chain of the partial view only.\n-\n-            --    package Pack_1 is\n-            --       type Root ... is private;\n-            --    private\n-            --       <full view of Root>\n-            --    end Pack_1;\n-\n-            --    with Pack_1;\n-            --    package Pack_2 is\n-            --       type Child is new Pack_1.Root with Type_DIC => ...;\n-            --       <underlying full view of Child>\n-            --    end Pack_2;\n-\n-            --  As a result, the processing of the full view must also consider\n-            --  all DICs of the partial view.\n-\n-            if Is_Untagged_Private_Derivation (Priv_Typ, Full_Typ) then\n-               null;\n-\n-            --  Otherwise the DICs of the partial view are ignored\n-\n-            else\n-               --  Ignore the DICs of the partial view by eliminating the view\n-\n-               Priv_Typ := Empty;\n-            end if;\n-         end if;\n-\n          --  Process inherited Default_Initial_Conditions for all parent types\n \n          Add_Parent_DICs (Work_Typ, Obj_Id, Stmts);"}]}