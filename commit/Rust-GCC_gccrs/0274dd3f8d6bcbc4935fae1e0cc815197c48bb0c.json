{"sha": "0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI3NGRkM2Y4ZDZiY2JjNDkzNWZhZTFlMGNjODE1MTk3YzQ4YmIwYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2018-11-08T15:53:47Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2018-11-08T15:53:47Z"}, "message": "fe.h (Suppress_Checks): Declare.\n\n\t* fe.h (Suppress_Checks): Declare.\n\t* gcc-interface/misc.c (gnat_init_gcc_eh): Set -fnon-call-exceptions\n\tonly if checks are not suppressed and -faggressive-loop-optimizations\n\tonly if they are.\n\t* gcc-interface/trans.c (struct loop_info_d): Remove has_checks and\n\twarned_aggressive_loop_optimizations fields.\n\t(gigi): Do not clear warn_aggressive_loop_optimizations here.\n\t(Raise_Error_to_gnu): Do not set has_checks.\n\t(gnat_to_gnu) <N_Indexed_Component>: Remove support for aggressive\n\tloop optimizations.\n\nFrom-SVN: r265921", "tree": {"sha": "b0226107b3a22640d2d717c7b833cb9b7f5a9201", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0226107b3a22640d2d717c7b833cb9b7f5a9201"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/comments", "author": null, "committer": null, "parents": [{"sha": "4174a33ac66f45536e3d7bd46167d7f678310931", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4174a33ac66f45536e3d7bd46167d7f678310931", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4174a33ac66f45536e3d7bd46167d7f678310931"}], "stats": {"total": 205, "additions": 79, "deletions": 126}, "files": [{"sha": "ee8ba62756af508f78927d6a684a7cd026bed002", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -1,3 +1,16 @@\n+2018-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fe.h (Suppress_Checks): Declare.\n+\t* gcc-interface/misc.c (gnat_init_gcc_eh): Set -fnon-call-exceptions\n+\tonly if checks are not suppressed and -faggressive-loop-optimizations\n+\tonly if they are.\n+\t* gcc-interface/trans.c (struct loop_info_d): Remove has_checks and\n+\twarned_aggressive_loop_optimizations fields.\n+\t(gigi): Do not clear warn_aggressive_loop_optimizations here.\n+\t(Raise_Error_to_gnu): Do not set has_checks.\n+\t(gnat_to_gnu) <N_Indexed_Component>: Remove support for aggressive\n+\tloop optimizations.\n+\n 2018-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (components_to_record): Remove obsolete kludge."}, {"sha": "d4c426501b7e4e7a88226cfc28f5cd0c6de17556", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -193,6 +193,7 @@ extern Boolean In_Same_Source_Unit              (Node_Id, Node_Id);\n #define GNAT_Mode                      opt__gnat_mode\n #define List_Representation_Info       opt__list_representation_info\n #define No_Strict_Aliasing_CP          opt__no_strict_aliasing\n+#define Suppress_Checks                opt__suppress_checks\n \n typedef enum {\n   Front_End_SJLJ, Back_End_ZCX, Back_End_SJLJ\n@@ -207,6 +208,7 @@ extern Boolean Generate_SCO_Instance_Table;\n extern Boolean GNAT_Mode;\n extern Int List_Representation_Info;\n extern Boolean No_Strict_Aliasing_CP;\n+extern Boolean Suppress_Checks;\n \n #define ZCX_Exceptions            opt__zcx_exceptions\n #define SJLJ_Exceptions           opt__sjlj_exceptions"}, {"sha": "eadbd36f4a36e611b8b03594a5cc41e5c31934e2", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -392,7 +392,7 @@ gnat_init_gcc_eh (void)\n   using_eh_for_cleanups ();\n \n   /* Turn on -fexceptions, -fnon-call-exceptions and -fdelete-dead-exceptions.\n-     The first one triggers the generation of the necessary exception tables.\n+     The first one activates the support for exceptions in the compiler.\n      The second one is useful for two reasons: 1/ we map some asynchronous\n      signals like SEGV to exceptions, so we need to ensure that the insns\n      which can lead to such signals are correctly attached to the exception\n@@ -402,10 +402,18 @@ gnat_init_gcc_eh (void)\n      for such calls to actually raise in Ada.\n      The third one is an optimization that makes it possible to delete dead\n      instructions that may throw exceptions, most notably loads and stores,\n-     as permitted in Ada.  */\n+     as permitted in Ada.\n+     Turn off -faggressive-loop-optimizations because it may optimize away\n+     out-of-bound array accesses that we want to be able to catch.\n+     If checks are disabled, we use the same settings as the C++ compiler.  */\n   flag_exceptions = 1;\n-  flag_non_call_exceptions = 1;\n   flag_delete_dead_exceptions = 1;\n+  if (!Suppress_Checks)\n+    {\n+      flag_non_call_exceptions = 1;\n+      flag_aggressive_loop_optimizations = 0;\n+      warn_aggressive_loop_optimizations = 0;\n+    }\n \n   init_eh ();\n }"}, {"sha": "2cd710247a439d591312be4da3b063f7138a4e84", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -198,8 +198,6 @@ struct GTY(()) loop_info_d {\n   tree high_bound;\n   vec<range_check_info, va_gc> *checks;\n   bool artificial;\n-  bool has_checks;\n-  bool warned_aggressive_loop_optimizations;\n };\n \n typedef struct loop_info_d *loop_info;\n@@ -679,10 +677,6 @@ gigi (Node_Id gnat_root,\n   /* Now translate the compilation unit proper.  */\n   Compilation_Unit_to_gnu (gnat_root);\n \n-  /* Disable -Waggressive-loop-optimizations since we implement our own\n-     version of the warning.  */\n-  warn_aggressive_loop_optimizations = 0;\n-\n   /* Then process the N_Validate_Unchecked_Conversion nodes.  We do this at\n      the very end to avoid having to second-guess the front-end when we run\n      into dummy nodes during the regular processing.  */\n@@ -5720,7 +5714,6 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t      rci->inserted_cond\n \t\t= build1 (SAVE_EXPR, boolean_type_node, boolean_true_node);\n \t      vec_safe_push (loop->checks, rci);\n-\t      loop->has_checks = true;\n \t      gnu_cond = build_noreturn_cond (gnat_to_gnu (gnat_cond));\n \t      if (flag_unswitch_loops)\n \t\tgnu_cond = build_binary_op (TRUTH_ANDIF_EXPR,\n@@ -5733,14 +5726,6 @@ Raise_Error_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t\t\t\t    gnu_cond,\n \t\t\t\t\t    rci->inserted_cond);\n \t    }\n-\n-\t  /* Or else, if aggressive loop optimizations are enabled, we just\n-\t     record that there are checks applied to iteration variables.  */\n-\t  else if (optimize\n-\t\t   && flag_aggressive_loop_optimizations\n-\t\t   && inside_loop_p ()\n-\t\t   && (loop = find_loop_for (gnu_index)))\n-\t    loop->has_checks = true;\n \t}\n       break;\n \n@@ -6359,45 +6344,9 @@ gnat_to_gnu (Node_Id gnat_node)\n \t    gcc_assert (TREE_CODE (gnu_type) == ARRAY_TYPE);\n \t    gnat_temp = gnat_expr_array[i];\n \t    gnu_expr = maybe_character_value (gnat_to_gnu (gnat_temp));\n-\t    struct loop_info_d *loop;\n \n \t    gnu_result\n \t      = build_binary_op (ARRAY_REF, NULL_TREE, gnu_result, gnu_expr);\n-\n-\t    /* Array accesses are bound-checked so they cannot trap, but this\n-\t       is valid only if they are not hoisted ahead of the check.  We\n-\t       need to mark them as no-trap to get decent loop optimizations\n-\t       in the presence of -fnon-call-exceptions, so we do it when we\n-\t       know that the original expression had no side-effects.  */\n-\t    if (TREE_CODE (gnu_result) == ARRAY_REF\n-\t\t&& !(Nkind (gnat_temp) == N_Identifier\n-\t\t     && Ekind (Entity (gnat_temp)) == E_Constant))\n-\t      TREE_THIS_NOTRAP (gnu_result) = 1;\n-\n-\t    /* If aggressive loop optimizations are enabled, we warn for loops\n-\t       overrunning a simple array of size 1 not at the end of a record.\n-\t       This is aimed to catch misuses of the trailing array idiom.  */\n-\t    if (optimize\n-\t\t&& flag_aggressive_loop_optimizations\n-\t\t&& inside_loop_p ()\n-\t\t&& TREE_CODE (TREE_TYPE (gnu_type)) != ARRAY_TYPE\n-\t\t&& TREE_CODE (gnu_array_object) != ARRAY_REF\n-\t\t&& tree_int_cst_equal (TYPE_MIN_VALUE (TYPE_DOMAIN (gnu_type)),\n-\t\t\t\t       TYPE_MAX_VALUE (TYPE_DOMAIN (gnu_type)))\n-\t\t&& !array_at_struct_end_p (gnu_result)\n-\t\t&& (loop = find_loop_for (gnu_expr))\n-\t\t&& !loop->artificial\n-\t\t&& !loop->has_checks\n-\t\t&& tree_int_cst_equal (TYPE_MIN_VALUE (TYPE_DOMAIN (gnu_type)),\n-\t\t\t\t       loop->low_bound)\n-\t\t&& can_be_lower_p (loop->low_bound, loop->high_bound)\n-\t\t&& !loop->warned_aggressive_loop_optimizations\n-\t\t&& warning (OPT_Waggressive_loop_optimizations,\n-\t\t\t    \"out-of-bounds access may be optimized away\"))\n-\t      {\n-\t\tinform (EXPR_LOCATION (loop->stmt), \"containing loop\");\n-\t\tloop->warned_aggressive_loop_optimizations = true;\n-\t      }\n \t  }\n \n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));"}, {"sha": "e08be5939d961ce1a139c519d09636f2be180ffd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -1,3 +1,13 @@\n+2018-11-08  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/null_pointer_deref1.adb: Remove -gnatp and add pragma.\n+\t* gnat.dg/null_pointer_deref2.adb: Likewise.\n+\t* gnat.dg/null_pointer_deref3.adb: Likewise.\n+\t* gnat.dg/opt74.adb: New test.\n+\t* gnat.dg/opt74_pkg.ad[sb]: New helper.\n+\t* gnat.dg/warn12.adb: Delete.\n+\t* gnat.dg/warn12_pkg.ads: Likewise.\n+\n 2018-11-08  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR ipa/86395"}, {"sha": "0f030b001bd17781c4fa06eb311d1da64d330f10", "filename": "gcc/testsuite/gnat.dg/null_pointer_deref1.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref1.adb?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -1,11 +1,13 @@\n -- { dg-do run }\n--- { dg-options \"-gnatp\" }\n \n -- This test requires architecture- and OS-specific support code for unwinding\n -- through signal frames (typically located in *-unwind.h) to pass.  Feel free\n -- to disable it if this code hasn't been implemented yet.\n \n procedure Null_Pointer_Deref1 is\n+\n+   pragma Suppress (All_Checks);\n+\n    type Int_Ptr is access all Integer;\n \n    function Ident return Int_Ptr is"}, {"sha": "2a4ed0954bb185c7c49bdd1caf7e9871dee9364f", "filename": "gcc/testsuite/gnat.dg/null_pointer_deref2.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref2.adb?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -1,12 +1,13 @@\n -- { dg-do run }\n--- { dg-options \"-gnatp\" }\n \n -- This test requires architecture- and OS-specific support code for unwinding\n -- through signal frames (typically located in *-unwind.h) to pass.  Feel free\n -- to disable it if this code hasn't been implemented yet.\n \n procedure Null_Pointer_Deref2 is\n \n+   pragma Suppress (All_Checks);\n+\n    task T;\n \n    task body T is"}, {"sha": "c8e66a6c94aa62407e8ff79de9f75337d98321d8", "filename": "gcc/testsuite/gnat.dg/null_pointer_deref3.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fnull_pointer_deref3.adb?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -1,12 +1,13 @@\n -- { dg-do run }\n--- { dg-options \"-O -gnatp\" }\n \n -- This test requires architecture- and OS-specific support code for unwinding\n -- through signal frames (typically located in *-unwind.h) to pass.  Feel free\n -- to disable it if this code hasn't been implemented yet.\n \n procedure Null_Pointer_Deref3 is\n \n+   pragma Suppress (All_Checks);\n+\n    procedure Leaf is\n       type Int_Ptr is access all Integer;\n       function n return Int_Ptr is"}, {"sha": "8eacaa5b49e2de4889abc5c3773bcf5f0927e072", "filename": "gcc/testsuite/gnat.dg/opt74.adb", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74.adb?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -0,0 +1,13 @@\n+-- { dg-do run }\n+-- { dg-options \"-O2\" }\n+\n+with Opt74_Pkg; use Opt74_Pkg;\n+\n+procedure Opt74 is\n+   Index, Found : Integer;\n+begin\n+   Proc (Found, Index);\n+   if Found = 1 then\n+      raise Program_Error;\n+   end if;\n+end;"}, {"sha": "4d5ce4fa822b62fee4f0c1742b7f80c95ee93ddb", "filename": "gcc/testsuite/gnat.dg/opt74_pkg.adb", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.adb?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -0,0 +1,16 @@\n+package body Opt74_Pkg is\n+\n+   procedure Proc (Found : out Integer; Index : out Integer) is\n+   begin\n+      Index := 1;\n+      Found := 0;\n+      while (Index <= A'Last) and (Found = 0) loop\n+         if A (Index) = 2 then\n+            Found := 1;\n+         else\n+            Index := Index + 1;\n+         end if;\n+      end loop;\n+   end;\n+\n+end Opt74_Pkg;"}, {"sha": "7c8e85e85d763c3388f140ad79300f9f35621397", "filename": "gcc/testsuite/gnat.dg/opt74_pkg.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt74_pkg.ads?ref=0274dd3f8d6bcbc4935fae1e0cc815197c48bb0c", "patch": "@@ -0,0 +1,7 @@\n+package Opt74_Pkg is\n+\n+   A : array (1 .. 10) of Integer := (others => 0);\n+\n+   procedure Proc (Found : out Integer; Index : out Integer);\n+\n+end Opt74_Pkg;"}, {"sha": "8ffd0c7dff082e9e9665bb4a5b2b05b1ffa03721", "filename": "gcc/testsuite/gnat.dg/warn12.adb", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12.adb?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,48 +0,0 @@\n--- { dg-do compile }\r\n--- { dg-options \"-O2\" }\r\n-\r\n-with Text_IO; use Text_IO;\r\n-with System.Storage_Elements; use System.Storage_Elements;\r\n-with Warn12_Pkg; use Warn12_Pkg;\r\n-\r\n-procedure Warn12 (N : Natural) is\r\n-\r\n-   Buffer_Size : constant Storage_Offset\r\n-      := Token_Groups'Size/System.Storage_Unit + 4096;\r\n-\r\n-   Buffer : Storage_Array (1 .. Buffer_Size);\r\n-   for Buffer'Alignment use 8;\r\n-\r\n-   Tg1 : Token_Groups;\r\n-   for Tg1'Address use Buffer'Address;\r\n-\r\n-   Tg2 : Token_Groups;\r\n-   pragma Warnings (Off, Tg2);\r\n-\r\n-   sid : Sid_And_Attributes;\r\n-\r\n-   pragma Suppress (Index_Check, Sid_And_Attributes_Array);\r\n-\r\n-begin\r\n-\r\n-   for I in 0 .. 7 loop\r\n-      sid :=  Tg1.Groups(I);  -- { dg-bogus \"out-of-bounds access\" }\r\n-      Put_Line(\"Iteration\");\r\n-   end loop;\r\n-\r\n-   for I in 0 .. N loop\r\n-      sid :=  Tg1.Groups(I);  -- { dg-bogus \"out-of-bounds access\" }\r\n-      Put_Line(\"Iteration\");\r\n-   end loop;\r\n-\r\n-   for I in 0 .. 7 loop\r\n-      sid :=  Tg2.Groups(I);  -- { dg-warning \"out-of-bounds access\" }\r\n-      Put_Line(\"Iteration\");\r\n-   end loop;\r\n-\r\n-   for I in 0 .. N loop\r\n-      sid :=  Tg2.Groups(I);  -- { dg-warning \"out-of-bounds access\" }\r\n-      Put_Line(\"Iteration\");\r\n-   end loop;\r\n-\r\n-end;\r"}, {"sha": "b3191cc304f6eae5930f338628111dace962066a", "filename": "gcc/testsuite/gnat.dg/warn12_pkg.ads", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4174a33ac66f45536e3d7bd46167d7f678310931/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fwarn12_pkg.ads?ref=4174a33ac66f45536e3d7bd46167d7f678310931", "patch": "@@ -1,21 +0,0 @@\n-with Interfaces.C; use Interfaces.C;\n-with System;\n-\n-package Warn12_Pkg is\n-\n-   Anysize_Array: constant := 0;\n-\n-   type Sid_And_Attributes is record\n-      Sid        : System.Address;\n-      Attributes : Interfaces.C.Unsigned_Long;\n-   end record;\n-\n-   type Sid_And_Attributes_Array\n-      is array (Integer range 0..Anysize_Array) of aliased Sid_And_Attributes;\n-\n-   type Token_Groups is record\n-      GroupCount : Interfaces.C.Unsigned_Long;\n-      Groups     : Sid_And_Attributes_Array;\n-   end record;\n-\n-end Warn12_Pkg;"}]}