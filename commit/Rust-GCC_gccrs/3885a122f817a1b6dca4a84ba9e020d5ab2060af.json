{"sha": "3885a122f817a1b6dca4a84ba9e020d5ab2060af", "node_id": "C_kwDOANBUbNoAKDM4ODVhMTIyZjgxN2ExYjZkY2E0YTg0YmE5ZTAyMGQ1YWIyMDYwYWY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T17:58:48Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-02-25T17:58:48Z"}, "message": "rs6000: Use rs6000_emit_move in movmisalign<mode> expander [PR104681]\n\nThe following testcase ICEs, because for some strange reason it decides to use\nmovmisaligntf during expansion where the destination is MEM and source is\nCONST_DOUBLE.  For normal mov<mode> expanders the rs6000 backend uses\nrs6000_emit_move to ensure that if one operand is a MEM, the other is a REG\nand a few other things, but for movmisalign<mode> nothing enforced this.\nThe middle-end documents that movmisalign<mode> shouldn't fail, so we can't\nforce that through predicates or condition on the expander.\n\n2022-02-25  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/104681\n\t* config/rs6000/vector.md (movmisalign<mode>): Use rs6000_emit_move.\n\n\t* g++.dg/opt/pr104681.C: New test.", "tree": {"sha": "b9385e84f6c96ca5434f9d7759a896652f93e0a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9385e84f6c96ca5434f9d7759a896652f93e0a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3885a122f817a1b6dca4a84ba9e020d5ab2060af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3885a122f817a1b6dca4a84ba9e020d5ab2060af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3885a122f817a1b6dca4a84ba9e020d5ab2060af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3885a122f817a1b6dca4a84ba9e020d5ab2060af/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc187fbca79ee9d107e5e3ea24dd649ce26aba74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc187fbca79ee9d107e5e3ea24dd649ce26aba74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc187fbca79ee9d107e5e3ea24dd649ce26aba74"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "4d0797c48f8f33ee9b93ad0de3d2a8f561e50b2e", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885a122f817a1b6dca4a84ba9e020d5ab2060af/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885a122f817a1b6dca4a84ba9e020d5ab2060af/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=3885a122f817a1b6dca4a84ba9e020d5ab2060af", "patch": "@@ -1519,7 +1519,10 @@\n  [(set (match_operand:VEC_N 0 \"nonimmediate_operand\")\n        (match_operand:VEC_N 1 \"any_operand\"))]\n  \"VECTOR_MEM_VSX_P (<MODE>mode) && TARGET_ALLOW_MOVMISALIGN\"\n- \"\")\n+{\n+  rs6000_emit_move (operands[0], operands[1], <MODE>mode);\n+  DONE;\n+})\n \n ;; Vector shift right in bits. Currently supported ony for shift\n ;; amounts that can be expressed as byte shifts (divisible by 8)."}, {"sha": "ea54940e7a3a52b8109c70a54f90b5518638d58b", "filename": "gcc/testsuite/g++.dg/opt/pr104681.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3885a122f817a1b6dca4a84ba9e020d5ab2060af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104681.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3885a122f817a1b6dca4a84ba9e020d5ab2060af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104681.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Fpr104681.C?ref=3885a122f817a1b6dca4a84ba9e020d5ab2060af", "patch": "@@ -0,0 +1,19 @@\n+// PR target/104681\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+void bar ();\n+struct A {\n+  A (bool) : a(7.0L), b(0) {}\n+  long double a;\n+  long b;\n+};\n+struct B {\n+  void foo () { c = bar; }\n+  A c;\n+};\n+struct C {\n+  void baz ();\n+  B d;\n+};\n+void C::baz () { d.foo (); }"}]}