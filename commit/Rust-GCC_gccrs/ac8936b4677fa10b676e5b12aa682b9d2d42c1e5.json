{"sha": "ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWM4OTM2YjQ2NzdmYTEwYjY3NmU1YjEyYWE2ODJiOWQyZDQyYzFlNQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-18T15:42:08Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-18T15:42:08Z"}, "message": "Fix an SVE failure in the Fortran matmul* tests\n\nThe vectoriser was calling vect_get_smallest_scalar_type without\nhaving proven that the type actually is a scalar.  This seems to\nbe the intended behaviour: the ultimate test of whether the type\nis interesting (and hence scalar) is whether an associated vector\ntype exists, but this is only tested later.\n\nThe patch simply makes the function cope gracefully with non-scalar\ninputs.\n\n2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type): Cope\n\twith types that aren't in fact scalar.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r252934", "tree": {"sha": "59d050791a2f94e34d70ce4be586d4fc30974f7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/59d050791a2f94e34d70ce4be586d4fc30974f7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5/comments", "author": null, "committer": null, "parents": [{"sha": "b161f2c927bb7fb70dc0c6d4e9ab22cdba29db6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b161f2c927bb7fb70dc0c6d4e9ab22cdba29db6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b161f2c927bb7fb70dc0c6d4e9ab22cdba29db6d"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "2f8cde4ebee963e15af66033f0f737022e4acae4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "patch": "@@ -1,3 +1,10 @@\n+2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-data-refs.c (vect_get_smallest_scalar_type): Cope\n+\twith types that aren't in fact scalar.\n+\n 2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* tree-vect-slp.c (vect_record_max_nunits): New function,"}, {"sha": "cab2f2f935bdf1b3479799a93539e53248f0696f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac8936b4677fa10b676e5b12aa682b9d2d42c1e5/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=ac8936b4677fa10b676e5b12aa682b9d2d42c1e5", "patch": "@@ -118,6 +118,11 @@ vect_get_smallest_scalar_type (gimple *stmt, HOST_WIDE_INT *lhs_size_unit,\n   tree scalar_type = gimple_expr_type (stmt);\n   HOST_WIDE_INT lhs, rhs;\n \n+  /* During the analysis phase, this function is called on arbitrary\n+     statements that might not have scalar results.  */\n+  if (!tree_fits_uhwi_p (TYPE_SIZE_UNIT (scalar_type)))\n+    return scalar_type;\n+\n   lhs = rhs = TREE_INT_CST_LOW (TYPE_SIZE_UNIT (scalar_type));\n \n   if (is_gimple_assign (stmt)"}]}