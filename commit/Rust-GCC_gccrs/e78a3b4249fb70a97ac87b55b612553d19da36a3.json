{"sha": "e78a3b4249fb70a97ac87b55b612553d19da36a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4YTNiNDI0OWZiNzBhOTdhYzg3YjU1YjYxMjU1M2QxOWRhMzZhMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T22:51:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-12-07T22:51:24Z"}, "message": "(skip_evaluation): Likewise.\n\n(overflow_warning, unsigned_conversion_warning): Don't warn about\npotential runtime errors when skipping evaluation.\n\nFrom-SVN: r13233", "tree": {"sha": "4e8fddf52263aada74645b49b6ef798cde0ed992", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e8fddf52263aada74645b49b6ef798cde0ed992"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78a3b4249fb70a97ac87b55b612553d19da36a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78a3b4249fb70a97ac87b55b612553d19da36a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78a3b4249fb70a97ac87b55b612553d19da36a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78a3b4249fb70a97ac87b55b612553d19da36a3/comments", "author": null, "committer": null, "parents": [{"sha": "6bdd692cdfa8aba199433234a8850bfe2b9ce839", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bdd692cdfa8aba199433234a8850bfe2b9ce839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bdd692cdfa8aba199433234a8850bfe2b9ce839"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "1e2f6c5c0bb7c4cf814b89e7a18abea0234c8622", "filename": "gcc/c-common.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78a3b4249fb70a97ac87b55b612553d19da36a3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78a3b4249fb70a97ac87b55b612553d19da36a3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=e78a3b4249fb70a97ac87b55b612553d19da36a3", "patch": "@@ -37,6 +37,10 @@ Boston, MA 02111-1307, USA.  */\n \n extern struct obstack permanent_obstack;\n \n+/* Nonzero means the expression being parsed will never be evaluated.\n+   This is a count, since unevaluated expressions can nest.  */\n+int skip_evaluation;\n+\n enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_CONSTRUCTOR, A_DESTRUCTOR, A_MODE, A_SECTION, A_ALIGNED,\n \t    A_UNUSED, A_FORMAT, A_FORMAT_ARG, A_WEAK, A_ALIAS};\n@@ -1602,15 +1606,17 @@ overflow_warning (value)\n       && TREE_OVERFLOW (value))\n     {\n       TREE_OVERFLOW (value) = 0;\n-      warning (\"integer overflow in expression\");\n+      if (skip_evaluation == 0)\n+\twarning (\"integer overflow in expression\");\n     }\n   else if ((TREE_CODE (value) == REAL_CST\n \t    || (TREE_CODE (value) == COMPLEX_CST\n \t\t&& TREE_CODE (TREE_REALPART (value)) == REAL_CST))\n \t   && TREE_OVERFLOW (value))\n     {\n       TREE_OVERFLOW (value) = 0;\n-      warning (\"floating point overflow in expression\");\n+      if (skip_evaluation == 0)\n+\twarning (\"floating point overflow in expression\");\n     }\n }\n \n@@ -1626,6 +1632,7 @@ unsigned_conversion_warning (result, operand)\n   if (TREE_CODE (operand) == INTEGER_CST\n       && TREE_CODE (TREE_TYPE (result)) == INTEGER_TYPE\n       && TREE_UNSIGNED (TREE_TYPE (result))\n+      && skip_evaluation == 0\n       && !int_fits_type_p (operand, TREE_TYPE (result)))\n     {\n       if (!int_fits_type_p (operand, signed_type (TREE_TYPE (result))))\n@@ -1661,10 +1668,11 @@ convert_and_check (type, expr)\n \t\t&& TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (expr))))\n \t    /* If EXPR fits in the unsigned version of TYPE,\n \t       don't warn unless pedantic.  */\n-\t    if (pedantic\n-\t\t|| TREE_UNSIGNED (type)\n-\t\t|| ! int_fits_type_p (expr, unsigned_type (type)))\n-\t      warning (\"overflow in implicit constant conversion\");\n+\t    if ((pedantic\n+\t\t || TREE_UNSIGNED (type)\n+\t\t || ! int_fits_type_p (expr, unsigned_type (type)))\n+\t        && skip_evaluation == 0)\n+\t\twarning (\"overflow in implicit constant conversion\");\n \t}\n       else\n \tunsigned_conversion_warning (t, expr);"}]}