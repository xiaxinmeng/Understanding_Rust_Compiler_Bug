{"sha": "1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWRjMDBhOGVjOWFlYmE4NmI3NGIxNmJmZjZmMTcxODI0YmI3YjRhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-12T13:18:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-03-12T13:19:36Z"}, "message": "tree-optimization/94103 avoid CSE of loads with padding\n\nVN currently replaces a load of a 16 byte entity 128 bits of precision\n(TImode) with the result of a load of a 16 byte entity with 80 bits of\nmode precision (XFmode).  That will go downhill since if the padding\nbits are not actually filled with memory contents those bits are\nmissing.\n\n2020-03-12  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/94103\n\t* tree-ssa-sccvn.c (visit_reference_op_load): Avoid type\n\tpunning when the mode precision is not sufficient.\n\n\t* gcc.target/i386/pr94103.c: New testcase.", "tree": {"sha": "eadb3fa8164c3ad87d25d9a15f97b463e138cef6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eadb3fa8164c3ad87d25d9a15f97b463e138cef6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcc443b97e19d9c8a2d8ccdfa4cc20682165827e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcc443b97e19d9c8a2d8ccdfa4cc20682165827e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcc443b97e19d9c8a2d8ccdfa4cc20682165827e"}], "stats": {"total": 51, "additions": 44, "deletions": 7}, "files": [{"sha": "a43b453178d86324f7b233dd2fcfd2f019568565", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "patch": "@@ -1,3 +1,9 @@\n+2020-03-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94103\n+\t* tree-ssa-sccvn.c (visit_reference_op_load): Avoid type\n+\tpunning when the mode precision is not sufficient.\n+\n 2020-03-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89229"}, {"sha": "a5730ebbbc07052e180b14067c529256707b6dda", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "patch": "@@ -1,3 +1,8 @@\n+2020-03-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/94103\n+\t* gcc.target/i386/pr94103.c: New testcase.\n+\n 2020-03-12  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR middle-end/94120"}, {"sha": "91b5fc64b5e0750461fd5db675c69ee953d1f241", "filename": "gcc/testsuite/gcc.target/i386/pr94103.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94103.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94103.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94103.c?ref=1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O3\" } */\n+\n+int main()\n+{\n+  long double x;\n+  unsigned long u[2] = {0xEEEEEEEEEEEEEEEEUL, 0xEEEEEEEEEEEEEEEEUL};\n+  __builtin_memcpy(&x, &u, sizeof x);\n+  __builtin_memcpy(&u, &x, sizeof u);\n+  ++*(unsigned char *)&x;\n+  (void)-x;\n+  __builtin_memcpy(&u, &x, sizeof u);\n+  if (u[1] != 0xEEEEEEEEEEEEEEEEUL\n+      || u[0] != 0xEEEEEEEEEEEEEEEFUL)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "150ddad3e69f7ecd0965507144902f98724bbeba", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=1dc00a8ec9aeba86b74b16bff6f171824bb7b4a1", "patch": "@@ -4899,13 +4899,22 @@ visit_reference_op_load (tree lhs, tree op, gimple *stmt)\n   if (result\n       && !useless_type_conversion_p (TREE_TYPE (result), TREE_TYPE (op)))\n     {\n-      /* We will be setting the value number of lhs to the value number\n-\t of VIEW_CONVERT_EXPR <TREE_TYPE (result)> (result).\n-\t So first simplify and lookup this expression to see if it\n-\t is already available.  */\n-      gimple_match_op res_op (gimple_match_cond::UNCOND,\n-\t\t\t      VIEW_CONVERT_EXPR, TREE_TYPE (op), result);\n-      result = vn_nary_build_or_lookup (&res_op);\n+      /* Avoid the type punning in case the result mode has padding where\n+\t the op we lookup has not.  */\n+      if (maybe_lt (GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (result))),\n+\t\t    GET_MODE_PRECISION (TYPE_MODE (TREE_TYPE (op)))))\n+\tresult = NULL_TREE;\n+      else\n+\t{\n+\t  /* We will be setting the value number of lhs to the value number\n+\t     of VIEW_CONVERT_EXPR <TREE_TYPE (result)> (result).\n+\t     So first simplify and lookup this expression to see if it\n+\t     is already available.  */\n+\t  gimple_match_op res_op (gimple_match_cond::UNCOND,\n+\t\t\t\t  VIEW_CONVERT_EXPR, TREE_TYPE (op), result);\n+\t  result = vn_nary_build_or_lookup (&res_op);\n+\t}\n+\n       /* When building the conversion fails avoid inserting the reference\n          again.  */\n       if (!result)"}]}