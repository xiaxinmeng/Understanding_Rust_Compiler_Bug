{"sha": "eedb990a499c893797d85d99b892cd8452d4ada4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkYjk5MGE0OTljODkzNzk3ZDg1ZDk5Yjg5MmNkODQ1MmQ0YWRhNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2018-11-29T21:34:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2018-11-29T21:34:38Z"}, "message": "decl.c (compute_array_index_type_loc): New, like the current compute_array_index_type but takes a location_t too.\n\n/cp\n2018-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (compute_array_index_type_loc): New, like the current\n\tcompute_array_index_type but takes a location_t too.\n\t(compute_array_index_type): Forward to the latter.\n\t(create_array_type_for_decl): Use compute_array_index_type_loc.\n\n/testsuite\n2018-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/constexpr-base6b.C: New.\n\t* g++.dg/cpp0x/constexpr-47969.C: Test locations too.\n\t* g++.dg/cpp0x/constexpr-48324.C: Likewise.\n\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n\t* g++.dg/cpp0x/scoped_enum2.C: Likewise.\n\t* g++.dg/cpp1y/pr63996.C: Likewise.\n\t* g++.dg/ext/constexpr-vla5.C: Likewise.\n\t* g++.dg/ext/stmtexpr15.C: Likewise.\n\t* g++.dg/ext/vla1.C: Likewise.\n\t* g++.dg/other/fold1.C: Likewise.\n\t* g++.dg/parse/array-size2.C: Likewise.\n\t* g++.dg/parse/crash36.C: Likewise.\n\t* g++.dg/ubsan/pr81530.C: Likewise.\n\t* g++.dg/warn/Wvla-1.C: Likewise.\n\t* g++.dg/warn/Wvla-2.C: Likewise.\n\t* g++.old-deja/g++.brendan/array1.C: Likewise.\n\t* g++.old-deja/g++.bugs/900402_02.C: Likewise.\n\t* g++.old-deja/g++.law/init3.C: Likewise.\n\t* g++.old-deja/g++.mike/p6149.C: Likewise.\n\nFrom-SVN: r266645", "tree": {"sha": "38b40efd84929d97a6bcee58611e6bae8bc948df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38b40efd84929d97a6bcee58611e6bae8bc948df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eedb990a499c893797d85d99b892cd8452d4ada4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedb990a499c893797d85d99b892cd8452d4ada4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eedb990a499c893797d85d99b892cd8452d4ada4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eedb990a499c893797d85d99b892cd8452d4ada4/comments", "author": null, "committer": null, "parents": [{"sha": "3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ded6ffdfd75978712ed4d9b246fc47779b2d9d1"}], "stats": {"total": 152, "additions": 110, "deletions": 42}, "files": [{"sha": "98a2528783a9cfe2efe7cab14d421b78c76e90e0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -1,3 +1,10 @@\n+2018-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (compute_array_index_type_loc): New, like the current\n+\tcompute_array_index_type but takes a location_t too.\n+\t(compute_array_index_type): Forward to the latter.\n+\t(create_array_type_for_decl): Use compute_array_index_type_loc.\n+\n 2018-11-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/88121"}, {"sha": "7d2c599a557336b4cdd463efab723fcf75c17b7b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 40, "deletions": 18, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -9621,15 +9621,18 @@ fold_sizeof_expr (tree t)\n    an appropriate index type for the array.  If non-NULL, NAME is\n    the name of the entity being declared.  */\n \n-tree\n-compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n+static tree\n+compute_array_index_type_loc (location_t name_loc, tree name, tree size,\n+\t\t\t      tsubst_flags_t complain)\n {\n   tree itype;\n   tree osize = size;\n \n   if (error_operand_p (size))\n     return error_mark_node;\n \n+  location_t loc = cp_expr_loc_or_loc (size, name ? name_loc : input_location);\n+\n   if (!type_dependent_expression_p (size))\n     {\n       osize = size = mark_rvalue_use (size);\n@@ -9658,9 +9661,10 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t  if (!(complain & tf_error))\n \t    return error_mark_node;\n \t  if (name)\n-\t    error (\"size of array %qD has non-integral type %qT\", name, type);\n+\t    error_at (loc, \"size of array %qD has non-integral type %qT\",\n+\t\t      name, type);\n \t  else\n-\t    error (\"size of array has non-integral type %qT\", type);\n+\t    error_at (loc, \"size of array has non-integral type %qT\", type);\n \t  size = integer_one_node;\n \t}\n     }\n@@ -9689,8 +9693,14 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n     {\n       tree folded = cp_fully_fold (size);\n       if (TREE_CODE (folded) == INTEGER_CST)\n-\tpedwarn (input_location, OPT_Wpedantic,\n-\t\t \"size of array is not an integral constant-expression\");\n+\t{\n+\t  if (name)\n+\t    pedwarn (loc, OPT_Wpedantic, \"size of array %qD is not an \"\n+\t\t     \"integral constant-expression\", name);\n+\t  else\n+\t    pedwarn (loc, OPT_Wpedantic,\n+\t\t     \"size of array is not an integral constant-expression\");\n+\t}\n       /* Use the folded result for VLAs, too; it will have resolved\n \t SIZEOF_EXPR.  */\n       size = folded;\n@@ -9706,9 +9716,9 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t    return error_mark_node;\n \n \t  if (name)\n-\t    error (\"size of array %qD is negative\", name);\n+\t    error_at (loc, \"size of array %qD is negative\", name);\n \t  else\n-\t    error (\"size of array is negative\");\n+\t    error_at (loc, \"size of array is negative\");\n \t  size = integer_one_node;\n \t}\n       /* As an extension we allow zero-sized arrays.  */\n@@ -9722,9 +9732,11 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \t  else if (in_system_header_at (input_location))\n \t    /* Allow them in system headers because glibc uses them.  */;\n \t  else if (name)\n-\t    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids zero-size array %qD\", name);\n+\t    pedwarn (loc, OPT_Wpedantic,\n+\t\t     \"ISO C++ forbids zero-size array %qD\", name);\n \t  else\n-\t    pedwarn (input_location, OPT_Wpedantic, \"ISO C++ forbids zero-size array\");\n+\t    pedwarn (loc, OPT_Wpedantic,\n+\t\t     \"ISO C++ forbids zero-size array\");\n \t}\n     }\n   else if (TREE_CONSTANT (size)\n@@ -9737,24 +9749,27 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n \treturn error_mark_node;\n       /* `(int) &fn' is not a valid array bound.  */\n       if (name)\n-\terror (\"size of array %qD is not an integral constant-expression\",\n-\t       name);\n+\terror_at (loc,\n+\t\t  \"size of array %qD is not an integral constant-expression\",\n+\t\t  name);\n       else\n-\terror (\"size of array is not an integral constant-expression\");\n+\terror_at (loc, \"size of array is not an integral constant-expression\");\n       size = integer_one_node;\n     }\n   else if (pedantic && warn_vla != 0)\n     {\n       if (name)\n-\tpedwarn (input_location, OPT_Wvla, \"ISO C++ forbids variable length array %qD\", name);\n+\tpedwarn (name_loc, OPT_Wvla,\n+\t\t \"ISO C++ forbids variable length array %qD\", name);\n       else\n-\tpedwarn (input_location, OPT_Wvla, \"ISO C++ forbids variable length array\");\n+\tpedwarn (input_location, OPT_Wvla,\n+\t\t \"ISO C++ forbids variable length array\");\n     }\n   else if (warn_vla > 0)\n     {\n       if (name)\n-\twarning (OPT_Wvla, \n-                 \"variable length array %qD is used\", name);\n+\twarning_at (name_loc, OPT_Wvla, \n+\t\t    \"variable length array %qD is used\", name);\n       else\n \twarning (OPT_Wvla, \n                  \"variable length array is used\");\n@@ -9821,6 +9836,12 @@ compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n   return itype;\n }\n \n+tree\n+compute_array_index_type (tree name, tree size, tsubst_flags_t complain)\n+{\n+  return compute_array_index_type_loc (input_location, name, size, complain);\n+}\n+\n /* Returns the scope (if any) in which the entity declared by\n    DECLARATOR will be located.  If the entity was declared with an\n    unqualified name, NULL_TREE is returned.  */\n@@ -9922,7 +9943,8 @@ create_array_type_for_decl (tree name, tree type, tree size, location_t loc)\n \n   /* Figure out the index type for the array.  */\n   if (size)\n-    itype = compute_array_index_type (name, size, tf_warning_or_error);\n+    itype = compute_array_index_type_loc (loc, name, size,\n+\t\t\t\t\t  tf_warning_or_error);\n \n   /* [dcl.array]\n      T is called the array element type; this type shall not be [...] an"}, {"sha": "937e0adca471730e68e9cf97da42119037a32b7b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -1,3 +1,25 @@\n+2018-11-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/constexpr-base6b.C: New.\n+\t* g++.dg/cpp0x/constexpr-47969.C: Test locations too.\n+\t* g++.dg/cpp0x/constexpr-48324.C: Likewise.\n+\t* g++.dg/cpp0x/constexpr-ex2.C: Likewise.\n+\t* g++.dg/cpp0x/scoped_enum2.C: Likewise.\n+\t* g++.dg/cpp1y/pr63996.C: Likewise.\n+\t* g++.dg/ext/constexpr-vla5.C: Likewise.\n+\t* g++.dg/ext/stmtexpr15.C: Likewise.\n+\t* g++.dg/ext/vla1.C: Likewise.\n+\t* g++.dg/other/fold1.C: Likewise.\n+\t* g++.dg/parse/array-size2.C: Likewise.\n+\t* g++.dg/parse/crash36.C: Likewise.\n+\t* g++.dg/ubsan/pr81530.C: Likewise.\n+\t* g++.dg/warn/Wvla-1.C: Likewise.\n+\t* g++.dg/warn/Wvla-2.C: Likewise.\n+\t* g++.old-deja/g++.brendan/array1.C: Likewise.\n+\t* g++.old-deja/g++.bugs/900402_02.C: Likewise.\n+\t* g++.old-deja/g++.law/init3.C: Likewise.\n+\t* g++.old-deja/g++.mike/p6149.C: Likewise.\n+\n 2018-11-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/88121"}, {"sha": "bfd9d8fe526223873739d7531a9bae6b9408ae4c", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-47969.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-47969.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -8,4 +8,5 @@ struct A\n \n constexpr A a = A();\n \n-int ar[a]; // { dg-error \"could not convert|has non-integral type\" }\n+int ar[a]; // { dg-error \"could not convert\" }\n+// { dg-error \"5:size of array .ar. has non-integral\" \"\" { target c++11 } .-1 }"}, {"sha": "37ed0e1d163c6b9db2865b759e847f6839cd4c68", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-48324.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48324.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48324.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-48324.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -10,4 +10,4 @@ constexpr const int& to_ref(int i) {\n   return S(i).val; // { dg-warning \"reference to temporary\" }\n }\n \n-constexpr int ary[to_ref(98)] = { }; // { dg-error \"not an integral\" }\n+constexpr int ary[to_ref(98)] = { }; // { dg-error \"25:size of array .ary. is not an integral\" }"}, {"sha": "13fa889f4cb2e5d6c8f061838e7c738b2c8ac3ab", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-base6b.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base6b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base6b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-base6b.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -0,0 +1,13 @@\n+// CWG issue 2310\n+// { dg-do compile { target c++11 } }\n+\n+template<typename A, typename B> struct check_derived_from { \n+  static A a; \n+  static constexpr B *p = &a;\t// { dg-error \"cannot convert\" }\n+  int ar[p-p+1];  // { dg-error \"13:size of array is not an integral constant-expression\" }\n+}; \n+struct W { int i; }; \n+struct Z : W\n+{\n+  check_derived_from<Z, W> cdf;\n+};"}, {"sha": "e726a348fc8434cf4f849fe0c7a0265bc618fbda", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ex2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ex2.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -18,5 +18,5 @@ constexpr A a = 42;\n \n X<a> x;\t    // OK: unique conversion to int\n int ar[X<a>::i]; // also OK\n-int ary[a]; // { dg-error \"could not convert|ambiguous|conversion|array\" } ambiguous conversion\n-\n+int ary[a]; // { dg-error \"could not convert\" } ambiguous conversion\n+// { dg-error \"5:size of array .ary. has non-integral\" \"\" { target c++11 } .-1 }"}, {"sha": "0313c01abb0a29cb90afb31ebd213ff2414f6b1f", "filename": "gcc/testsuite/g++.dg/cpp0x/scoped_enum2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fscoped_enum2.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -4,7 +4,8 @@ enum class E { e = 10 };\n enum E2 { e2 = 10 };\n \n struct C {\n-  int arr[E::e];    // { dg-error \"could not convert|non-integral type\" }\n+  int arr[E::e];    // { dg-error \"could not convert\" }\n+// { dg-error \"7:size of array .arr. has non-integral\" \"\" { target c++11 } .-1 }\n   int arr2[E2::e2]; // OK\n   int i: E::e;\t    // { dg-error \"could not convert|non-integral type\" }\n   int i2: E2::e2;   // OK"}, {"sha": "fe47544a3c87abbbaed9f8592d508ae230dc95d7", "filename": "gcc/testsuite/g++.dg/cpp1y/pr63996.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr63996.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -4,7 +4,7 @@\n constexpr int\n foo (int i)\n {\n-  int a[i] = { }; // { dg-error \"forbids variable length\" }\n+  int a[i] = { }; // { dg-error \"7:ISO C\\\\+\\\\+ forbids variable length array .a\" }\n }\n \n constexpr int j = foo (1); // { dg-error \"flows off the end|in .constexpr. expansion of\" }"}, {"sha": "7cedc94948b1d8b2c229abbe47a0a8197a8d0397", "filename": "gcc/testsuite/g++.dg/ext/constexpr-vla5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-vla5.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -4,5 +4,5 @@\n void foo(int i)\n {\n   constexpr char x[i] = \"\";\t// { dg-error \"18:.constexpr. variable .x. has variably-modified type\" }\n-// { dg-error \"ISO C\\\\+\\\\+ forbids variable length array .x\" \"\" { target c++11 } .-1 }  \n+// { dg-error \"18:ISO C\\\\+\\\\+ forbids variable length array .x\" \"\" { target c++11 } .-1 }  \n }"}, {"sha": "10c4886c10c8c1cbde3818d212c576d101bf5ba2", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr15.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr15.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -3,5 +3,6 @@\n \n void foo()\n {\n-  int x[({ return; })];\t\t// { dg-error \"could not convert|non-integral\" }\n+  int x[({ return; })];\t\t// { dg-error \"could not convert\" }\n+// { dg-error \"12:size of array .x. has non-integral\" \"\" { target *-*-* } .-1 }  \n }"}, {"sha": "d6df686cb69ac7904a1b0093da0fd229067e2db3", "filename": "gcc/testsuite/g++.dg/ext/vla1.C", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -9,7 +9,7 @@ class A { A (int); };\n \n A::A (int i)\n {\n-  int ar[1][i];    // { dg-error \"array\" }\n+  int ar[1][i];    // { dg-error \"7:ISO C\\\\+\\\\+ forbids variable length array .ar\" }\n \n   ar[0][0] = 0;\n }\n@@ -19,7 +19,8 @@ class B { B (int); };\n B::B (int i)\n {\n   struct S {\n-    int ar[1][i];  // { dg-error \"array\" }\n+    int ar[1][i];  // { dg-error \"9:size of array .ar. is not an integral\" \"\" { target c++11 } }\n+// { dg-error \"array bound\" \"\" { target c++98_only } .-1 }\n   } s;\n \n   s.ar[0][0] = 0;  // { dg-prune-output \"no member\" }"}, {"sha": "25f9accc41d15ae5781c4aa5d6bdc00e1155bb34", "filename": "gcc/testsuite/g++.dg/other/fold1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Ffold1.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -4,5 +4,5 @@\n struct A\n {\n     static const int i = i;  // { dg-error \"not declared\" }\n-    int x[i];\t\t     // { dg-error \"constant-expression|narrowing conversion\" }\n+    int x[i];\t\t     // { dg-error \"9:size of array .x. is not an integral constant-expression\" }\n };"}, {"sha": "e58fe266e77154cfad8089ada733955de9662874", "filename": "gcc/testsuite/g++.dg/parse/array-size2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Farray-size2.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -14,7 +14,7 @@ extern void bar (char *, char *);\n void\n foo (void)\n {\n-  char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error \"constant|narrowing conversion\" }\n-  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t      // { dg-error \"constant\" }\n+  char g[(char *) &((struct S *) 0)->b - (char *) 0]; // { dg-error \"40:size of array .g. is not an integral constant-expression\" }\n+  char h[(__SIZE_TYPE__) &((struct S *) 8)->b];\t      // { dg-error \"10:size of array .h. is not an integral constant-expression\" }\n   bar (g, h);\n }"}, {"sha": "14fcdd833f784336403f230b585f97187a1ef35f", "filename": "gcc/testsuite/g++.dg/parse/crash36.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash36.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -9,4 +9,4 @@ template <typename... T> struct A\t// { dg-warning \"variadic templates\" }\n   static const int i = sizeof (++t);\t// { dg-error \"was not declared in this scope\" }\n };\n \n-int x[A <int>::i];\t\t// { dg-error \"constant-expression\" }\n+int x[A <int>::i];\t\t// { dg-error \"5:size of array .x. is not an integral constant-expression\" }"}, {"sha": "310ea8e30321c1074fe69830cfeb689506ed22f7", "filename": "gcc/testsuite/g++.dg/ubsan/pr81530.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr81530.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -2,4 +2,4 @@\n /* { dg-do compile } */\n /* { dg-options \"-fsanitize=undefined\" } */\n \n-int a[(long) 4e20]; /* { dg-error \"size of array .a. is (too large|negative)\" } */\n+int a[(long) 4e20]; /* { dg-error \"7:size of array .a. is (too large|negative)\" } */"}, {"sha": "95e452dfc700af6f796d637955625e9a001f6788", "filename": "gcc/testsuite/g++.dg/warn/Wvla-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-1.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -4,5 +4,5 @@\n \n void func (int i)\n {\n-  int array[i]; /* { dg-warning \"variable length array 'array' is used\" } */\n+  int array[i]; /* { dg-warning \"7:variable length array 'array' is used\" } */\n }"}, {"sha": "02092b809cb600890f840b64937b5984d67dc5e0", "filename": "gcc/testsuite/g++.dg/warn/Wvla-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWvla-2.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -3,5 +3,5 @@\n \n void func (int i)\n {\n-  int array[i]; /* { dg-error \"ISO C.* forbids variable.* array 'array'\" } */\n+  int array[i]; /* { dg-error \"7:ISO C.* forbids variable.* array 'array'\" } */\n }"}, {"sha": "d6957cd95aeb52720d5b96577e566c95ae746b13", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/array1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Farray1.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -2,5 +2,5 @@\n // GROUPS passed array-bindings\n \n extern \"C\" int printf (const char *, ...);\n-char array[~(~((__SIZE_TYPE__)0ul)>>1)|~(((__SIZE_TYPE__)0ul)>>3)];  // { dg-error \"\" } overflow in array dimension.*\n+char array[~(~((__SIZE_TYPE__)0ul)>>1)|~(((__SIZE_TYPE__)0ul)>>3)];  // { dg-error \"39:size of array .array. is negative\" } overflow in array dimension.*\n int main () { printf (\"PASS\\n\"); return 0; }"}, {"sha": "46a3ec3c276f41b2832a1f4f2bf263202df8639c", "filename": "gcc/testsuite/g++.old-deja/g++.bugs/900402_02.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.bugs%2F900402_02.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -6,17 +6,17 @@\n \n // keywords: arrays, array bound, zero length\n \n-typedef int array_type[0];\t\t// { dg-error \"zero-size array\" }\n+typedef int array_type[0];\t\t// { dg-error \"13:ISO C\\\\+\\\\+ forbids zero-size array\" }\n \n-int array_object_1[0];\t\t\t// { dg-error \"zero-size array\" }\n+int array_object_1[0];\t\t\t// { dg-error \"5:ISO C\\\\+\\\\+ forbids zero-size array\" }\n \n-void function_0 (int formal_array[0])\t// { dg-error \"zero-size array\" }\n+void function_0 (int formal_array[0])\t// { dg-error \"22:ISO C\\\\+\\\\+ forbids zero-size array\" }\n {\n }\n \n void function_2 ()\n {\n-  int local_object_array_0[0];\t\t// { dg-error \"zero-size array\" }\n+  int local_object_array_0[0];\t\t// { dg-error \"7:ISO C\\\\+\\\\+ forbids zero-size array\" }\n }\n \n int main () { return 0; }"}, {"sha": "197d37ff8fb4067c3ff7a0dbf5992bb766f6a58f", "filename": "gcc/testsuite/g++.old-deja/g++.law/init3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Finit3.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -8,5 +8,5 @@\n \n int main() {\n int offset;\n-char buf[offset]=\"\"; // { dg-error \"\" } ansi forbids variable arrays\n+char buf[offset]=\"\"; // { dg-error \"6:ISO C\\\\+\\\\+ forbids variable length array .buf\" } ansi forbids variable arrays\n }"}, {"sha": "4cb18948d88bf3781dc683abf08338f0ee5c8190", "filename": "gcc/testsuite/g++.old-deja/g++.mike/p6149.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eedb990a499c893797d85d99b892cd8452d4ada4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.mike%2Fp6149.C?ref=eedb990a499c893797d85d99b892cd8452d4ada4", "patch": "@@ -1,4 +1,4 @@\n // { dg-do assemble  }\n // prms-id: 6149\n \n-int a[3 - sizeof(double)];\t// { dg-error \"\" } \n+int a[3 - sizeof(double)];\t// { dg-error \"9:size of array .a. is negative\" } "}]}