{"sha": "ed9e19a494a43647159b156737c55bde8ebf3c59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ5ZTE5YTQ5NGE0MzY0NzE1OWIxNTY3MzdjNTViZGU4ZWJmM2M1OQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2013-12-10T10:49:39Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2013-12-10T10:49:39Z"}, "message": "re PR sanitizer/59437 (ICE in for g++ -S -fvtable-verify=std -fsanitize=null)\n\n\tPR sanitizer/59437\n\t* vtable-verify.c (var_is_used_for_virtual_call_p): Check the\n\treturn value of gimple_call_fn.  Use is_gimple_call/is_gimple_assign\n\tinstead of gimple_code.\ntestsuite/\n\t* g++.dg/ubsan/pr59437.C: New test.\n\nFrom-SVN: r205854", "tree": {"sha": "71efd97b5906d97af26d89bded42ae258596e14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71efd97b5906d97af26d89bded42ae258596e14d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed9e19a494a43647159b156737c55bde8ebf3c59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9e19a494a43647159b156737c55bde8ebf3c59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9e19a494a43647159b156737c55bde8ebf3c59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9e19a494a43647159b156737c55bde8ebf3c59/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "475948faca73b1df41566cb6b21e95795fa86b09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/475948faca73b1df41566cb6b21e95795fa86b09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/475948faca73b1df41566cb6b21e95795fa86b09"}], "stats": {"total": 42, "additions": 39, "deletions": 3}, "files": [{"sha": "110c0a033e9213b0e27b7686f38011b34c00bc77", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed9e19a494a43647159b156737c55bde8ebf3c59", "patch": "@@ -1,3 +1,10 @@\n+2013-12-10  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/59437\n+\t* vtable-verify.c (var_is_used_for_virtual_call_p): Check the\n+\treturn value of gimple_call_fn.  Use is_gimple_call/is_gimple_assign\n+\tinstead of gimple_code.\n+\n 2013-12-10  Maxim Kuvyrkov  <maxim@kugelworks.com>\n \n \t* config.gcc (mips*-mti-linux*, mips64*-*-linux*):"}, {"sha": "09a1323ca184bbeeaa487dde7ab7fec094240ce5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ed9e19a494a43647159b156737c55bde8ebf3c59", "patch": "@@ -1,3 +1,8 @@\n+2013-12-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR sanitizer/59437\n+\t* g++.dg/ubsan/pr59437.C: New test.\n+\n 2013-12-10  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* c-c++-common/tsan/thread_leak2.c: `dg-skip-if' removed."}, {"sha": "0e77ccde46ea70af37d641306856502a0a3585df", "filename": "gcc/testsuite/g++.dg/ubsan/pr59437.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr59437.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr59437.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Fpr59437.C?ref=ed9e19a494a43647159b156737c55bde8ebf3c59", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+// { dg-options \"-fsanitize=null -fvtable-verify=std\" }\n+// { dg-skip-if \"\" { *-*-* } { \"-flto\" } { \"\" } }\n+\n+template < typename T > struct A\n+{\n+  T foo ();\n+};\n+template < typename T > struct C: virtual public A < T >\n+{\n+  C & operator<< (C & (C &));\n+};\n+template < typename T >\n+C < T > &endl (C < int > &c)\n+{\n+  c.foo ();\n+  return c;\n+}\n+C < int > cout;\n+void\n+fn ()\n+{\n+  cout << endl;\n+}"}, {"sha": "af61e930b205eb504cf7201a5b45fbfea933725a", "filename": "gcc/vtable-verify.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Fvtable-verify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed9e19a494a43647159b156737c55bde8ebf3c59/gcc%2Fvtable-verify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvtable-verify.c?ref=ed9e19a494a43647159b156737c55bde8ebf3c59", "patch": "@@ -513,10 +513,10 @@ var_is_used_for_virtual_call_p (tree lhs, int *mem_ref_depth)\n     {\n       gimple stmt2 = USE_STMT (use_p);\n \n-      if (gimple_code (stmt2) == GIMPLE_CALL)\n+      if (is_gimple_call (stmt2))\n         {\n           tree fncall = gimple_call_fn (stmt2);\n-          if (TREE_CODE (fncall) == OBJ_TYPE_REF)\n+          if (fncall && TREE_CODE (fncall) == OBJ_TYPE_REF)\n             found_vcall = true;\n \t  else\n \t    return false;\n@@ -527,7 +527,7 @@ var_is_used_for_virtual_call_p (tree lhs, int *mem_ref_depth)\n \t                                            (gimple_phi_result (stmt2),\n \t                                             mem_ref_depth);\n         }\n-      else if (gimple_code (stmt2) == GIMPLE_ASSIGN)\n+      else if (is_gimple_assign (stmt2))\n         {\n \t  tree rhs = gimple_assign_rhs1 (stmt2);\n \t  if (TREE_CODE (rhs) == ADDR_EXPR"}]}