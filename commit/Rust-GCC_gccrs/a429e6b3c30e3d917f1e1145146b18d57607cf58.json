{"sha": "a429e6b3c30e3d917f1e1145146b18d57607cf58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQyOWU2YjNjMzBlM2Q5MTdmMWUxMTQ1MTQ2YjE4ZDU3NjA3Y2Y1OA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T09:23:01Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-04-02T09:23:01Z"}, "message": "[multiple changes]\n\n2012-04-02  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch7.adb (Process_Declarations): Detect a case where\n\ta source object was initialized by another source object,\n\tbut the expression was rewritten as a class-wide conversion\n\tof Ada.Tags.Displace.\n\t* exp_util.adb (Initialized_By_Ctrl_Function): Removed.\n\t(Is_Controlled_Function_Call): New routine.\n\t(Is_Displacement_Of_Ctrl_Function_Result): Removed.\n\t(Is_Displacement_Of_Object_Or_Function_Result): New routine.\n\t(Is_Source_Object): New routine.\n\t(Requires_Cleanup_Actions): Detect a case where a source object was\n\tinitialized by another source object, but the expression was rewritten\n\tas a class-wide conversion of Ada.Tags.Displace.\n\t* exp_util.ads (Is_Displacement_Of_Ctrl_Function_Result): Removed.\n\t(Is_Displacement_Of_Object_Or_Function_Result): New routine.\n\n2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_res.adb (Resolve_Call): A call to an expression function\n\tdoes not freeze if it appears in a different scope from the\n\texpression function itself. Such calls appear in the generated\n\tbodies of other expression functions, or in pre/postconditions\n\tof subsequent subprograms.\n\nFrom-SVN: r186071", "tree": {"sha": "9c441de71e752a3df9cf6bc42e11a24f3e70edda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9c441de71e752a3df9cf6bc42e11a24f3e70edda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a429e6b3c30e3d917f1e1145146b18d57607cf58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a429e6b3c30e3d917f1e1145146b18d57607cf58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a429e6b3c30e3d917f1e1145146b18d57607cf58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a429e6b3c30e3d917f1e1145146b18d57607cf58/comments", "author": null, "committer": null, "parents": [{"sha": "e228f7eed275e585d48c92dc87bde3dd0784e4d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e228f7eed275e585d48c92dc87bde3dd0784e4d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e228f7eed275e585d48c92dc87bde3dd0784e4d2"}], "stats": {"total": 157, "additions": 113, "deletions": 44}, "files": [{"sha": "f42c041af5fc061169a0a00d0b3dcd5128fd0f0b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a429e6b3c30e3d917f1e1145146b18d57607cf58", "patch": "@@ -1,3 +1,28 @@\n+2012-04-02  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch7.adb (Process_Declarations): Detect a case where\n+\ta source object was initialized by another source object,\n+\tbut the expression was rewritten as a class-wide conversion\n+\tof Ada.Tags.Displace.\n+\t* exp_util.adb (Initialized_By_Ctrl_Function): Removed.\n+\t(Is_Controlled_Function_Call): New routine.\n+\t(Is_Displacement_Of_Ctrl_Function_Result): Removed.\n+\t(Is_Displacement_Of_Object_Or_Function_Result): New routine.\n+\t(Is_Source_Object): New routine.\n+\t(Requires_Cleanup_Actions): Detect a case where a source object was\n+\tinitialized by another source object, but the expression was rewritten\n+\tas a class-wide conversion of Ada.Tags.Displace.\n+\t* exp_util.ads (Is_Displacement_Of_Ctrl_Function_Result): Removed.\n+\t(Is_Displacement_Of_Object_Or_Function_Result): New routine.\n+\n+2012-04-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Call): A call to an expression function\n+\tdoes not freeze if it appears in a different scope from the\n+\texpression function itself. Such calls appear in the generated\n+\tbodies of other expression functions, or in pre/postconditions\n+\tof subsequent subprograms.\n+\n 2012-04-02  Yannick Moy  <moy@adacore.com>\n \n \t* lib-xref-alfa.adb: Code clean up."}, {"sha": "f8730f3d9ab228041178ef5d4b91f37acb3b42d8", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=a429e6b3c30e3d917f1e1145146b18d57607cf58", "patch": "@@ -1917,16 +1917,17 @@ package body Exp_Ch7 is\n                   Processing_Actions (Has_No_Init => True);\n \n                --  Detect a case where a source object has been initialized by\n-               --  a controlled function call which was later rewritten as a\n-               --  class-wide conversion of Ada.Tags.Displace.\n+               --  a controlled function call or another object which was later\n+               --  rewritten as a class-wide conversion of Ada.Tags.Displace.\n \n-               --     Obj : Class_Wide_Type := Function_Call (...);\n+               --     Obj1 : CW_Type := Src_Obj;\n+               --     Obj2 : CW_Type := Function_Call (...);\n \n-               --     Temp : ... := Function_Call (...)'reference;\n-               --     Obj  : Class_Wide_Type renames\n-               --              (... Ada.Tags.Displace (Temp));\n+               --     Obj1 : CW_Type renames (... Ada.Tags.Displace (Src_Obj));\n+               --     Tmp  : ... := Function_Call (...)'reference;\n+               --     Obj2 : CW_Type renames (... Ada.Tags.Displace (Tmp));\n \n-               elsif Is_Displacement_Of_Ctrl_Function_Result (Obj_Id) then\n+               elsif Is_Displacement_Of_Object_Or_Function_Result (Obj_Id) then\n                   Processing_Actions (Has_No_Init => True);\n                end if;\n "}, {"sha": "b43bd16edd1c7cde3259e437d4ebc6289ba11885", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 63, "deletions": 32, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=a429e6b3c30e3d917f1e1145146b18d57607cf58", "patch": "@@ -3940,27 +3940,30 @@ package body Exp_Util is\n       return True;\n    end Is_All_Null_Statements;\n \n-   ---------------------------------------------\n-   -- Is_Displacement_Of_Ctrl_Function_Result --\n-   ---------------------------------------------\n+   --------------------------------------------------\n+   -- Is_Displacement_Of_Object_Or_Function_Result --\n+   --------------------------------------------------\n \n-   function Is_Displacement_Of_Ctrl_Function_Result\n+   function Is_Displacement_Of_Object_Or_Function_Result\n      (Obj_Id : Entity_Id) return Boolean\n    is\n-      function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean;\n-      --  Determine whether object declaration N is initialized by a controlled\n-      --  function call.\n+      function Is_Controlled_Function_Call (N : Node_Id) return Boolean;\n+      --  Determine whether a particular node denotes a controlled function\n+      --  call.\n \n       function Is_Displace_Call (N : Node_Id) return Boolean;\n       --  Determine whether a particular node is a call to Ada.Tags.Displace.\n       --  The call might be nested within other actions such as conversions.\n \n-      ----------------------------------\n-      -- Initialized_By_Ctrl_Function --\n-      ----------------------------------\n+      function Is_Source_Object (N : Node_Id) return Boolean;\n+      --  Determine whether a particular node denotes a source object\n+\n+      ---------------------------------\n+      -- Is_Controlled_Function_Call --\n+      ---------------------------------\n \n-      function Initialized_By_Ctrl_Function (N : Node_Id) return Boolean is\n-         Expr : Node_Id := Original_Node (Expression (N));\n+      function Is_Controlled_Function_Call (N : Node_Id) return Boolean is\n+         Expr : Node_Id := Original_Node (N);\n \n       begin\n          if Nkind (Expr) = N_Function_Call then\n@@ -3977,7 +3980,7 @@ package body Exp_Util is\n            Nkind_In (Expr, N_Expanded_Name, N_Identifier)\n              and then Ekind (Entity (Expr)) = E_Function\n              and then Needs_Finalization (Etype (Entity (Expr)));\n-      end Initialized_By_Ctrl_Function;\n+      end Is_Controlled_Function_Call;\n \n       ----------------------\n       -- Is_Displace_Call --\n@@ -4004,39 +4007,66 @@ package body Exp_Util is\n          end loop;\n \n          return\n-           Nkind (Call) = N_Function_Call\n+           Present (Call)\n+             and then Nkind (Call) = N_Function_Call\n              and then Is_RTE (Entity (Name (Call)), RE_Displace);\n       end Is_Displace_Call;\n \n+      ----------------------\n+      -- Is_Source_Object --\n+      ----------------------\n+\n+      function Is_Source_Object (N : Node_Id) return Boolean is\n+      begin\n+         return\n+           Present (N)\n+             and then Nkind (N) in N_Has_Entity\n+             and then Is_Object (Entity (N))\n+             and then Comes_From_Source (N);\n+      end Is_Source_Object;\n+\n       --  Local variables\n \n       Decl      : constant Node_Id   := Parent (Obj_Id);\n       Obj_Typ   : constant Entity_Id := Base_Type (Etype (Obj_Id));\n       Orig_Decl : constant Node_Id   := Original_Node (Decl);\n \n-   --  Start of processing for Is_Displacement_Of_Ctrl_Function_Result\n+   --  Start of processing for Is_Displacement_Of_Object_Or_Function_Result\n \n    begin\n-      --  Detect the following case:\n+      --  Case 1:\n \n-      --     Obj : Class_Wide_Type := Function_Call (...);\n+      --     Obj : CW_Type := Function_Call (...);\n \n-      --  which is rewritten into:\n+      --  rewritten into:\n \n-      --     Temp : ... := Function_Call (...)'reference;\n-      --     Obj  : Class_Wide_Type renames (... Ada.Tags.Displace (Temp));\n+      --     Tmp : ... := Function_Call (...)'reference;\n+      --     Obj : CW_Type renames (... Ada.Tags.Displace (Tmp));\n \n-      --  when the return type of the function and the class-wide type require\n+      --  where the return type of the function and the class-wide type require\n+      --  dispatch table pointer displacement.\n+\n+      --  Case 2:\n+\n+      --     Obj : CW_Type := Src_Obj;\n+\n+      --  rewritten into:\n+\n+      --     Obj : CW_Type renames (... Ada.Tags.Displace (Src_Obj));\n+\n+      --  where the type of the source object and the class-wide type require\n       --  dispatch table pointer displacement.\n \n       return\n         Nkind (Decl) = N_Object_Renaming_Declaration\n           and then Nkind (Orig_Decl) = N_Object_Declaration\n           and then Comes_From_Source (Orig_Decl)\n-          and then Initialized_By_Ctrl_Function (Orig_Decl)\n           and then Is_Class_Wide_Type (Obj_Typ)\n-          and then Is_Displace_Call (Renamed_Object (Obj_Id));\n-   end Is_Displacement_Of_Ctrl_Function_Result;\n+          and then Is_Displace_Call (Renamed_Object (Obj_Id))\n+          and then\n+            (Is_Controlled_Function_Call (Expression (Orig_Decl))\n+               or else Is_Source_Object (Expression (Orig_Decl)));\n+   end Is_Displacement_Of_Object_Or_Function_Result;\n \n    ------------------------------\n    -- Is_Finalizable_Transient --\n@@ -7189,17 +7219,18 @@ package body Exp_Util is\n             then\n                return True;\n \n-            --  Detect a case where a source object has been initialized by a\n-            --  controlled function call which was later rewritten as a class-\n-            --  wide conversion of Ada.Tags.Displace.\n+            --  Detect a case where a source object has been initialized by\n+            --  a controlled function call or another object which was later\n+            --  rewritten as a class-wide conversion of Ada.Tags.Displace.\n \n-            --     Obj : Class_Wide_Type := Function_Call (...);\n+            --     Obj1 : CW_Type := Src_Obj;\n+            --     Obj2 : CW_Type := Function_Call (...);\n \n-            --     Temp : ... := Function_Call (...)'reference;\n-            --     Obj  : Class_Wide_Type renames\n-            --              (... Ada.Tags.Displace (Temp));\n+            --     Obj1 : CW_Type renames (... Ada.Tags.Displace (Src_Obj));\n+            --     Tmp  : ... := Function_Call (...)'reference;\n+            --     Obj2 : CW_Type renames (... Ada.Tags.Displace (Tmp));\n \n-            elsif Is_Displacement_Of_Ctrl_Function_Result (Obj_Id) then\n+            elsif Is_Displacement_Of_Object_Or_Function_Result (Obj_Id) then\n                return True;\n             end if;\n "}, {"sha": "9f3ae2a2554c1fb1d9f6ca653706bfee042e6f16", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=a429e6b3c30e3d917f1e1145146b18d57607cf58", "patch": "@@ -521,11 +521,12 @@ package Exp_Util is\n    --  False otherwise. True for an empty list. It is an error to call this\n    --  routine with No_List as the argument.\n \n-   function Is_Displacement_Of_Ctrl_Function_Result\n+   function Is_Displacement_Of_Object_Or_Function_Result\n      (Obj_Id : Entity_Id) return Boolean;\n-   --  Determine whether Obj_Id is a source object that has been initialized by\n-   --  a controlled function call later rewritten as a class-wide conversion of\n-   --  Ada.Tags.Displace.\n+   --  Determine whether Obj_Id is a source entity that has been initialized by\n+   --  either a controlled function call or the assignment of another source\n+   --  object. In both cases the initialization expression is rewritten as a\n+   --  class-wide conversion of Ada.Tags.Displace.\n \n    function Is_Finalizable_Transient\n      (Decl     : Node_Id;"}, {"sha": "fc95bb8ed2d270bae6eb76ba534aea8b58a4b98f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a429e6b3c30e3d917f1e1145146b18d57607cf58/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=a429e6b3c30e3d917f1e1145146b18d57607cf58", "patch": "@@ -5316,7 +5316,18 @@ package body Sem_Res is\n       --  needs extending because we can generate procedure calls that need\n       --  freezing.\n \n-      if Is_Entity_Name (Subp) and then not In_Spec_Expression then\n+      --  In Ada 2012, expression functions may be called within pre/post\n+      --  conditions of subsequent functions or expression functions. Such\n+      --  calls do not freeze when they appear within generated bodies, which\n+      --  would place the freeze node in the wrong scope.  An expression\n+      --  function is frozen in the usual fashion, by the appearance of a real\n+      --  body, or at the end of a declarative part.\n+\n+      if Is_Entity_Name (Subp) and then not In_Spec_Expression\n+        and then\n+          (not Is_Expression_Function (Entity (Subp))\n+            or else Scope (Entity (Subp)) = Current_Scope)\n+      then\n          Freeze_Expression (Subp);\n       end if;\n "}]}