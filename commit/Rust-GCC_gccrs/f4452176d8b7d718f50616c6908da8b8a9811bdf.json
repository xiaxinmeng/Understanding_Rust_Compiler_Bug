{"sha": "f4452176d8b7d718f50616c6908da8b8a9811bdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ0NTIxNzZkOGI3ZDcxOGY1MDYxNmM2OTA4ZGE4YjhhOTgxMWJkZg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-06-30T00:05:39Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-06-30T00:05:39Z"}, "message": "Offer suggestions for misspelled --param names.\n\ngcc/ChangeLog:\n\t* opts.c (handle_param): Use find_param_fuzzy to offer suggestions\n\tfor misspelled param names.\n\t* params.c: Include spellcheck.h.\n\t(find_param_fuzzy): New function.\n\t* params.h (find_param_fuzzy): New prototype.\n\t* spellcheck.c (struct edit_distance_traits<const char *>): Move\n\tto...\n\t* spellcheck.h (struct edit_distance_traits<const char *>):\n\t...here.\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/spellcheck-params.c: New testcase.\n\t* gcc.dg/spellcheck-params-2.c: New testcase.\n\nFrom-SVN: r237865", "tree": {"sha": "f0226fa372c19600fd529ccba821f68b9b1613ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0226fa372c19600fd529ccba821f68b9b1613ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f4452176d8b7d718f50616c6908da8b8a9811bdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4452176d8b7d718f50616c6908da8b8a9811bdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4452176d8b7d718f50616c6908da8b8a9811bdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4452176d8b7d718f50616c6908da8b8a9811bdf/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c5e74d9d4ebeb29fab731464c206296ec651e9a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c5e74d9d4ebeb29fab731464c206296ec651e9a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c5e74d9d4ebeb29fab731464c206296ec651e9a6"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "308fcc8604987c6529158e141092307445609c0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -1,3 +1,15 @@\n+2016-06-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* opts.c (handle_param): Use find_param_fuzzy to offer suggestions\n+\tfor misspelled param names.\n+\t* params.c: Include spellcheck.h.\n+\t(find_param_fuzzy): New function.\n+\t* params.h (find_param_fuzzy): New prototype.\n+\t* spellcheck.c (struct edit_distance_traits<const char *>): Move\n+\tto...\n+\t* spellcheck.h (struct edit_distance_traits<const char *>):\n+\t...here.\n+\n 2016-06-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/predicates.md (const_0_to_7_operand): New"}, {"sha": "f09c520975ba110e60262f48f21545124bed7316", "filename": "gcc/opts.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -2228,7 +2228,14 @@ handle_param (struct gcc_options *opts, struct gcc_options *opts_set,\n \n       enum compiler_param index;\n       if (!find_param (arg, &index))\n-\terror_at (loc, \"invalid --param name %qs\", arg);\n+\t{\n+\t  const char *suggestion = find_param_fuzzy (arg);\n+\t  if (suggestion)\n+\t    error_at (loc, \"invalid --param name %qs; did you mean %qs?\",\n+\t\t      arg, suggestion);\n+\t  else\n+\t    error_at (loc, \"invalid --param name %qs\", arg);\n+\t}\n       else\n \t{\n \t  if (!param_string_value_p (index, equal + 1, &value))"}, {"sha": "1b5000bb8d783247626593208adc12dcc7beaf40", "filename": "gcc/params.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fparams.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fparams.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.c?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"params-enum.h\"\n #include \"diagnostic-core.h\"\n+#include \"spellcheck.h\"\n \n /* An array containing the compiler parameters and their current\n    values.  */\n@@ -142,6 +143,19 @@ find_param (const char *name, enum compiler_param *index)\n   return false;\n }\n \n+/* Look for the closest match for NAME in the parameter table, returning it\n+   if it is a reasonable suggestion for a misspelling.  Return NULL\n+   otherwise.  */\n+\n+const char *\n+find_param_fuzzy (const char *name)\n+{\n+  best_match <const char *, const char *> bm (name);\n+  for (size_t i = 0; i < num_compiler_params; ++i)\n+    bm.consider (compiler_params[i].option);\n+  return bm.get_best_meaningful_candidate ();\n+}\n+\n /* Return true if param with entry index INDEX should be defined using strings.\n    If so, return the value corresponding to VALUE_NAME in *VALUE_P.  */\n "}, {"sha": "97c8d56505506cd0cb7ad4aa8163cdb101d35cd9", "filename": "gcc/params.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fparams.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fparams.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.h?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -89,6 +89,7 @@ enum compiler_param\n };\n \n extern bool find_param (const char *, enum compiler_param *);\n+extern const char *find_param_fuzzy (const char *name);\n extern bool param_string_value_p (enum compiler_param, const char *, int *);\n \n /* The value of the parameter given by ENUM.  Not an lvalue.  */"}, {"sha": "b37b1e469299210aae99a508a57e502dd5157f87", "filename": "gcc/spellcheck.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fspellcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fspellcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.c?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -121,24 +121,6 @@ levenshtein_distance (const char *s, const char *t)\n   return levenshtein_distance (s, strlen (s), t, strlen (t));\n }\n \n-/* Specialization of edit_distance_traits for C-style strings.  */\n-\n-template <>\n-struct edit_distance_traits<const char *>\n-{\n-  static size_t get_length (const char *str)\n-  {\n-    gcc_assert (str);\n-    return strlen (str);\n-  }\n-\n-  static const char *get_string (const char *str)\n-  {\n-    gcc_assert (str);\n-    return str;\n-  }\n-};\n-\n /* Given TARGET, a non-NULL string, and CANDIDATES, a non-NULL ptr to\n    an autovec of non-NULL strings, determine which element within\n    CANDIDATES has the lowest edit distance to TARGET.  If there are"}, {"sha": "b48cfbc4072e607492bf0bb3db38cd953955b431", "filename": "gcc/spellcheck.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fspellcheck.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Fspellcheck.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fspellcheck.h?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -48,6 +48,24 @@ find_closest_string (const char *target,\n template <typename TYPE>\n struct edit_distance_traits {};\n \n+/* Specialization of edit_distance_traits for C-style strings.  */\n+\n+template <>\n+struct edit_distance_traits<const char *>\n+{\n+  static size_t get_length (const char *str)\n+  {\n+    gcc_assert (str);\n+    return strlen (str);\n+  }\n+\n+  static const char *get_string (const char *str)\n+  {\n+    gcc_assert (str);\n+    return str;\n+  }\n+};\n+\n /* A type for use when determining the best match against a string,\n    expressed as a template so that we can match against various\n    string-like types (const char *, frontend identifiers, and preprocessor"}, {"sha": "8069c679666810fae2ee9fe6f0461a362c4a2902", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -1,3 +1,8 @@\n+2016-06-29  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/spellcheck-params.c: New testcase.\n+\t* gcc.dg/spellcheck-params-2.c: New testcase.\n+\n 2016-06-29  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p9-extract-1.c: New file to test ISA 3.0"}, {"sha": "27e293ffa60e583d4b08b1256639adb399902e0c", "filename": "gcc/testsuite/gcc.dg/spellcheck-params-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params-2.c?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--param does-not-resemble-anything=42\" } */\n+/* { dg-error \"invalid --param name .does-not-resemble-anything.\"  \"\" { target *-*-* } 0 } */\n+"}, {"sha": "1bb7bca6024514debf12361f14b8d3e1637c675c", "filename": "gcc/testsuite/gcc.dg/spellcheck-params.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f4452176d8b7d718f50616c6908da8b8a9811bdf/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fspellcheck-params.c?ref=f4452176d8b7d718f50616c6908da8b8a9811bdf", "patch": "@@ -0,0 +1,4 @@\n+/* { dg-do compile } */\n+/* { dg-options \"--param max-early-inliner-iteration=3\" } */\n+/* { dg-error \"invalid --param name .max-early-inliner-iteration.; did you mean .max-early-inliner-iterations.?\"  \"\" { target *-*-* } 0 } */\n+"}]}