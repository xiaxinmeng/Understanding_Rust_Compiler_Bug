{"sha": "55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTUyMDJiZWUzYzcxOWRkMGRjNGQ5YTY4ZmM3YmYzZWRmNjYzNzRhZg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-08-09T05:52:52Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-08-09T05:52:52Z"}, "message": "[multiple changes]\n\n2002-08-09  Mark Wielaard  <mark@klomp.org>\n\n        * java/awt/image/MemoryImageSource.java: Change constructor to take\n        int[] not byte[].\n        * java/awt/Graphics2D.java: Uncomment methods that can now be\n        compiled.\n        * java/awt/GridBagLayout.java: New stub implementation.\n        * javax/swing/text/html/HTML.java: Stub implementation.\n        * javax/swing/text/html/parser/ParserDelegator.java: New stub\n        implementation.\n\n2002-08-09  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n\n        * gnu/awt/j2d/Graphics2DImpl.java: Implement stubs for new abstract\n        methods in Graphics2D.\n\n        * Makefile.am: Add new files.\n        * Makefile.in: Rebuilt.\n\nFrom-SVN: r56152", "tree": {"sha": "6c36436d65eb21fbb8681bcdd1a61ce35341ee7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c36436d65eb21fbb8681bcdd1a61ce35341ee7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/comments", "author": null, "committer": null, "parents": [{"sha": "ef1c32c6371a869dafafe3219cdd1dbeef3c79eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef1c32c6371a869dafafe3219cdd1dbeef3c79eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef1c32c6371a869dafafe3219cdd1dbeef3c79eb"}], "stats": {"total": 231, "additions": 203, "deletions": 28}, "files": [{"sha": "9dea65081b6c44b6786e9f9a8f74b356078f41aa", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -1,3 +1,22 @@\n+2002-08-09  Mark Wielaard  <mark@klomp.org>\n+\n+\t* java/awt/image/MemoryImageSource.java: Change constructor to take\n+\tint[] not byte[].\n+\t* java/awt/Graphics2D.java: Uncomment methods that can now be\n+\tcompiled.\n+\t* java/awt/GridBagLayout.java: New stub implementation.\n+\t* javax/swing/text/html/HTML.java: Stub implementation.\n+\t* javax/swing/text/html/parser/ParserDelegator.java: New stub\n+\timplementation.\n+\n+\t* Makefile.am: Add new files.\n+\t* Makefile.in: Rebuilt.\n+\n+2002-08-09  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* gnu/awt/j2d/Graphics2DImpl.java: Implement stubs for new abstract\n+\tmethods in Graphics2D.\n+\t\n 2002-08-09  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \tAWT/Swing merge from GNU Classpath."}, {"sha": "dcf08ad5554f91e8f8be106914295e377e0d9bb2", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -629,6 +629,7 @@ java/awt/Graphics.java \\\n java/awt/Graphics2D.java \\\n java/awt/GraphicsConfiguration.java \\\n java/awt/GridBagConstraints.java \\\n+java/awt/GridBagLayout.java \\\n java/awt/GridLayout.java \\\n java/awt/IllegalComponentStateException.java \\\n java/awt/Image.java \\\n@@ -1122,6 +1123,8 @@ javax/swing/text/MutableAttributeSet.java \\\n javax/swing/text/StyledDocument.java \\\n javax/swing/text/StyledEditorKit.java \\\n javax/swing/text/TextAction.java \\\n+javax/swing/text/html/HTML.java \\\n+javax/swing/text/html/parser/ParserDelegator.java \\\n javax/swing/tree/TreeNode.java \\\n javax/swing/tree/AbstractLayoutCache.java \\\n javax/swing/tree/DefaultMutableTreeNode.java \\"}, {"sha": "9fecd1ff93a4fad0d95a0b915c72ed58dbb68a4b", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -398,6 +398,7 @@ java/awt/Graphics.java \\\n java/awt/Graphics2D.java \\\n java/awt/GraphicsConfiguration.java \\\n java/awt/GridBagConstraints.java \\\n+java/awt/GridBagLayout.java \\\n java/awt/GridLayout.java \\\n java/awt/IllegalComponentStateException.java \\\n java/awt/Image.java \\\n@@ -891,6 +892,8 @@ javax/swing/text/MutableAttributeSet.java \\\n javax/swing/text/StyledDocument.java \\\n javax/swing/text/StyledEditorKit.java \\\n javax/swing/text/TextAction.java \\\n+javax/swing/text/html/HTML.java \\\n+javax/swing/text/html/parser/ParserDelegator.java \\\n javax/swing/tree/TreeNode.java \\\n javax/swing/tree/AbstractLayoutCache.java \\\n javax/swing/tree/DefaultMutableTreeNode.java \\\n@@ -2171,7 +2174,7 @@ libgcj-test.spec.in libgcj.spec.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = tar\n+TAR = gtar\n GZIP_ENV = --best\n DIST_SUBDIRS =  @DIRLTDL@ testsuite gcj include @DIRLTDL@ gcj include\n DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n@@ -2482,8 +2485,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/Graphics2D.P .deps/java/awt/GraphicsConfigTemplate.P \\\n .deps/java/awt/GraphicsConfiguration.P .deps/java/awt/GraphicsDevice.P \\\n .deps/java/awt/GraphicsEnvironment.P \\\n-.deps/java/awt/GridBagConstraints.P .deps/java/awt/GridLayout.P \\\n-.deps/java/awt/HeadlessException.P \\\n+.deps/java/awt/GridBagConstraints.P .deps/java/awt/GridBagLayout.P \\\n+.deps/java/awt/GridLayout.P .deps/java/awt/HeadlessException.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n .deps/java/awt/ImageCapabilities.P .deps/java/awt/Insets.P \\\n .deps/java/awt/ItemSelectable.P .deps/java/awt/JobAttributes.P \\\n@@ -3390,7 +3393,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/swing/text/Style.P .deps/javax/swing/text/StyledDocument.P \\\n .deps/javax/swing/text/StyledEditorKit.P \\\n .deps/javax/swing/text/TextAction.P .deps/javax/swing/text/View.P \\\n-.deps/javax/swing/text/ViewFactory.P \\\n+.deps/javax/swing/text/ViewFactory.P .deps/javax/swing/text/html/HTML.P \\\n+.deps/javax/swing/text/html/parser/ParserDelegator.P \\\n .deps/javax/swing/tree/AbstractLayoutCache.P \\\n .deps/javax/swing/tree/DefaultMutableTreeNode.P \\\n .deps/javax/swing/tree/DefaultTreeCellEditor.P \\"}, {"sha": "ef4d742c056ebaf3c81dd02b7de8c0f832c6f67b", "filename": "libjava/gnu/awt/j2d/Graphics2DImpl.java", "status": "modified", "additions": 65, "deletions": 1, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fawt%2Fj2d%2FGraphics2DImpl.java?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2000  Free Software Foundation\n+/* Copyright (C) 2000, 2002  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -9,6 +9,7 @@\n package gnu.awt.j2d;\n \n import java.awt.Color;\n+import java.awt.Composite;\n import java.awt.Image;\n import java.awt.Shape;\n import java.awt.Rectangle;\n@@ -19,8 +20,14 @@\n import java.awt.FontMetrics;\n import java.awt.Paint;\n import java.awt.RenderingHints;\n+import java.awt.Stroke;\n import java.awt.geom.AffineTransform;\n import java.awt.image.ImageObserver;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.RenderedImage;\n+import java.awt.image.renderable.RenderableImage;\n+import java.text.AttributedCharacterIterator;\n+import java.util.Map;\n \n /**\n  * Delegates almost all work to a state object, that allows us to\n@@ -451,4 +458,61 @@ public void clip(Shape shape)\n       \"has not been implemented yet\";\n     throw new UnsupportedOperationException(msg);\n   }\n+  \n+  public void drawImage(BufferedImage image, BufferedImage op, int x, int y)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");  \n+  }\n+\n+  public void drawRenderedImage(RenderedImage image, AffineTransform xform)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");  \n+  }\n+\n+  public void drawRenderableImage(RenderableImage image, AffineTransform xform)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public void drawString(AttributedCharacterIterator iterator,\n+                \t\t  int x, int y)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");  \n+  }\n+\n+  public void drawString(AttributedCharacterIterator iterator, float x, \n+\t\t\t float y)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public void setComposite(Composite comp)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public void setStroke(Stroke stroke)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public void setRenderingHints(Map hints)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public void addRenderingHints(Map hints)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public Composite getComposite()\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n+\n+  public Stroke getStroke()\n+  {\n+    throw new UnsupportedOperationException(\"not implemented yet\");\n+  }\n }"}, {"sha": "879fae5ad5138e4e0355f92c290dcb03e998e643", "filename": "libjava/java/awt/Graphics2D.java", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2FGraphics2D.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2FGraphics2D.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGraphics2D.java?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -37,9 +37,14 @@\n package java.awt;\n \n import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.RenderedImage;\n import java.awt.image.ImageObserver;\n+import java.awt.image.renderable.RenderableImage;\n \n-//import java.util.Map;\n+import java.text.AttributedCharacterIterator;\n+\n+import java.util.Map;\n \n /**\n  * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>\n@@ -68,40 +73,28 @@ public void fill3DRect(int x, int y, int width, int height,\n   public abstract boolean drawImage(Image image, AffineTransform xform,\n \t\t\t\t    ImageObserver obs);\n \n-  /*\n   public abstract void drawImage(BufferedImage image,\n-\t\t\t\t BufferedImageOp op,\n+\t\t\t\t BufferedImage op,\n \t\t\t\t int x,\n \t\t\t\t int y);\n-  */\n \n-  /*\n   public abstract void drawRenderedImage(RenderedImage image,\n \t\t\t\t\t AffineTransform xform);\n-  */\n \n-  /*\n   public abstract void drawRenderableImage(RenderableImage image,\n                                            AffineTransform xform);\n-  */\n \n   public abstract void drawString(String text, int x, int y);\n \n   public abstract void drawString(String text, float x, float y);\n     \n-  /*\n   public abstract void drawString(AttributedCharacterIterator iterator,\n                                   int x, int y);\n-  */\n \n-  /*\n   public abstract void drawString(AttributedCharacterIterator iterator,\n \t\t\t\t  float x, float y);\n-  */\n \n-  /*\n-  public abstract void drawGlyphVector(GlyphVector g, float x, float y);\n-  */\n+  // public abstract void drawGlyphVector(GlyphVector g, float x, float y);\n \n   public abstract void fill(Shape shape);\n     \n@@ -110,20 +103,20 @@ public abstract boolean hit(Rectangle rect, Shape text,\n \n   public abstract GraphicsConfiguration getDeviceConfiguration();\n \n-  //public abstract void setComposite(Composite comp);\n+  public abstract void setComposite(Composite comp);\n     \n   public abstract void setPaint(Paint paint);\n \n-  //public abstract void setStroke(Stroke stroke)\n+  public abstract void setStroke(Stroke stroke);\n \n   public abstract void setRenderingHint(RenderingHints.Key hintKey,\n                                         Object hintValue);\n \n   public abstract Object getRenderingHint(RenderingHints.Key hintKey);\n   \n-  //public abstract void setRenderingHints(Map hints);\n+  public abstract void setRenderingHints(Map hints);\n \n-  //public abstract void addRenderingHints(Map hints);\n+  public abstract void addRenderingHints(Map hints);\n \n   public abstract RenderingHints getRenderingHints();\n \n@@ -147,15 +140,15 @@ public abstract void setRenderingHint(RenderingHints.Key hintKey,\n \n   public abstract Paint getPaint();\n \n-  //public abstract Composite getComposite();\n+  public abstract Composite getComposite();\n \n   public abstract void setBackground(Color color);\n \n   public abstract Color getBackground();\n \n-  //public abstract Stroke getStroke();    \n+  public abstract Stroke getStroke();    \n \n   public abstract void clip(Shape s);\n \n-  //public abstract FontRenderContext getFontRenderContext()\n+  // public abstract FontRenderContext getFontRenderContext();\n }"}, {"sha": "29e1beac43d73cfa4affe5f465d77307455d2f3d", "filename": "libjava/java/awt/GridBagLayout.java", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2FGridBagLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2FGridBagLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FGridBagLayout.java?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -0,0 +1,92 @@\n+/* GridBagLayout - Layout manager for components according to GridBagConstraints\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.awt;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Stub implementeation.\n+ */\n+public class GridBagLayout\n+  implements Serializable, LayoutManager2\n+{\n+  public void addLayoutComponent(String name, Component component)\n+  {\n+  }\n+\n+  public void removeLayoutComponent(Component component)\n+  {\n+  }\n+\n+  public Dimension preferredLayoutSize(Container parent)\n+  {\n+    return null;\n+  }\n+\n+  public Dimension minimumLayoutSize(Container parent)\n+  {\n+    return null;\n+  }\n+\n+  public void layoutContainer(Container parent)\n+  {\n+  }\n+\n+  public void addLayoutComponent(Component component, Object contraint)\n+  {\n+  }\n+\n+  public Dimension maximumLayoutSize(Container target)\n+  {\n+    return null;\n+  }\n+\n+  public float getLayoutAlignmentX(Container target)\n+  {\n+    return 0.0f;\n+  }\n+\n+  public float getLayoutAlignmentY(Container target)\n+  {\n+    return 0.0f;\n+  }\n+\n+  public void invalidateLayout(Container target)\n+  {\n+  }\n+}"}, {"sha": "0e8d462067240bef2bf4d957cc4f77e5b1e20958", "filename": "libjava/java/awt/image/MemoryImageSource.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2Fimage%2FMemoryImageSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55202bee3c719dd0dc4d9a68fc7bf3edf66374af/libjava%2Fjava%2Fawt%2Fimage%2FMemoryImageSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2Fimage%2FMemoryImageSource.java?ref=55202bee3c719dd0dc4d9a68fc7bf3edf66374af", "patch": "@@ -116,7 +116,7 @@ public MemoryImageSource(int w, int h,\n        Constructs an ImageProducer from memory using the default RGB ColorModel\n     */\n     public MemoryImageSource(int w, int h,\n-\t\t\t     byte pix[], int off, int scan)\n+\t\t\t     int pix[], int off, int scan)\n     {\n \tthis ( w, h, ColorModel.getRGBdefault(), pix, off, scan, null);\n     }"}]}