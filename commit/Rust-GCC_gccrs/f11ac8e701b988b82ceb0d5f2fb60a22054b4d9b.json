{"sha": "f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjExYWM4ZTcwMWI5ODhiODJjZWIwZDVmMmZiNjBhMjIwNTRiNGQ5Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-30T11:45:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-10-30T11:45:47Z"}, "message": "Recommit wrongly reverted change.\n\nFrom-SVN: r216923", "tree": {"sha": "d0f85b037631f359a4a611f4fa88beda91f1ace4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0f85b037631f359a4a611f4fa88beda91f1ace4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b/comments", "author": null, "committer": null, "parents": [{"sha": "1572e2c3278eadcf3f22a0731e7530667072d45c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1572e2c3278eadcf3f22a0731e7530667072d45c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1572e2c3278eadcf3f22a0731e7530667072d45c"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "f45a27a1e0d9db592f1526e610f7be5950fc4310", "filename": "gcc/ada/a-comutr.adb", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b/gcc%2Fada%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b/gcc%2Fada%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comutr.adb?ref=f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2004-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2004-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -272,7 +272,8 @@ package body Ada.Containers.Multiway_Trees is\n       New_Item  : Element_Type;\n       Count     : Count_Type := 1)\n    is\n-      First, Last : Tree_Node_Access;\n+      First : Tree_Node_Access;\n+      Last  : Tree_Node_Access;\n \n    begin\n       if Parent = No_Element then\n@@ -297,7 +298,6 @@ package body Ada.Containers.Multiway_Trees is\n                                    others  => <>);\n \n       Last := First;\n-\n       for J in Count_Type'(2) .. Count loop\n \n          --  Reclaim other nodes if Storage_Error.  ???\n@@ -1171,7 +1171,8 @@ package body Ada.Containers.Multiway_Trees is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      Last : Tree_Node_Access;\n+      First : Tree_Node_Access;\n+      Last  : Tree_Node_Access;\n \n    begin\n       if Parent = No_Element then\n@@ -1202,13 +1203,11 @@ package body Ada.Containers.Multiway_Trees is\n            with \"attempt to tamper with cursors (tree is busy)\";\n       end if;\n \n-      Position.Container := Parent.Container;\n-      Position.Node := new Tree_Node_Type'(Parent  => Parent.Node,\n-                                           Element => New_Item,\n-                                           others  => <>);\n-\n-      Last := Position.Node;\n+      First := new Tree_Node_Type'(Parent  => Parent.Node,\n+                                   Element => New_Item,\n+                                   others  => <>);\n \n+      Last := First;\n       for J in Count_Type'(2) .. Count loop\n \n          --  Reclaim other nodes if Storage_Error.  ???\n@@ -1222,7 +1221,7 @@ package body Ada.Containers.Multiway_Trees is\n       end loop;\n \n       Insert_Subtree_List\n-        (First  => Position.Node,\n+        (First  => First,\n          Last   => Last,\n          Parent => Parent.Node,\n          Before => Before.Node);\n@@ -1232,6 +1231,8 @@ package body Ada.Containers.Multiway_Trees is\n       --  nodes we just inserted.\n \n       Container.Count := Container.Count + Count;\n+\n+      Position := Cursor'(Parent.Container, First);\n    end Insert_Child;\n \n    procedure Insert_Child\n@@ -1241,7 +1242,8 @@ package body Ada.Containers.Multiway_Trees is\n       Position  : out Cursor;\n       Count     : Count_Type := 1)\n    is\n-      Last : Tree_Node_Access;\n+      First : Tree_Node_Access;\n+      Last  : Tree_Node_Access;\n \n    begin\n       if Parent = No_Element then\n@@ -1272,13 +1274,11 @@ package body Ada.Containers.Multiway_Trees is\n            with \"attempt to tamper with cursors (tree is busy)\";\n       end if;\n \n-      Position.Container := Parent.Container;\n-      Position.Node := new Tree_Node_Type'(Parent  => Parent.Node,\n-                                           Element => <>,\n-                                           others  => <>);\n-\n-      Last := Position.Node;\n+      First := new Tree_Node_Type'(Parent  => Parent.Node,\n+                                   Element => <>,\n+                                   others  => <>);\n \n+      Last := First;\n       for J in Count_Type'(2) .. Count loop\n \n          --  Reclaim other nodes if Storage_Error.  ???\n@@ -1292,7 +1292,7 @@ package body Ada.Containers.Multiway_Trees is\n       end loop;\n \n       Insert_Subtree_List\n-        (First  => Position.Node,\n+        (First  => First,\n          Last   => Last,\n          Parent => Parent.Node,\n          Before => Before.Node);\n@@ -1302,6 +1302,8 @@ package body Ada.Containers.Multiway_Trees is\n       --  nodes we just inserted.\n \n       Container.Count := Container.Count + Count;\n+\n+      Position := Cursor'(Parent.Container, First);\n    end Insert_Child;\n \n    -------------------------"}, {"sha": "9eb281468e43eae9c19cc7c6b5ea8a53db611c52", "filename": "gcc/ada/prj-proc.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b/gcc%2Fada%2Fprj-proc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b/gcc%2Fada%2Fprj-proc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-proc.adb?ref=f11ac8e701b988b82ceb0d5f2fb60a22054b4d9b", "patch": "@@ -2308,7 +2308,9 @@ package body Prj.Proc is\n                  Name_Of\n                    (Project_Node_Of (Variable_Node, Node_Tree), Node_Tree);\n                The_Project :=\n-                 Imported_Or_Extended_Project_From (Project, Name);\n+                 Imported_Or_Extended_Project_From\n+                   (Project, Name, No_Extending => True);\n+               The_Package := No_Package;\n             end if;\n \n             --  If a package was specified for the case variable, get its id"}]}