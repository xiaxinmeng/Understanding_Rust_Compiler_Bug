{"sha": "77ab4e3be2d92b1ff671d58418d852195f10dd20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhYjRlM2JlMmQ5MmIxZmY2NzFkNTg0MThkODUyMTk1ZjEwZGQyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-30T08:30:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-07-30T08:30:16Z"}, "message": "c++: Accept C++11 attribute-definition [PR101582]\n\nAs the following testcase shows, we don't parse properly\nC++11 attribute-declaration:\nhttps://eel.is/c++draft/dcl.dcl#nt:attribute-declaration\n\ncp_parser_toplevel_declaration just handles empty-declaration parsing\n(with diagnostics for C++98) and otherwise calls cp_parser_declaration\nwhich on it calls cp_parser_simple_declaration and rejects it with\n\"does not declare anything\" permerror.\n\nThe following patch moves the handling of empty-declaration from\ncp_parser_toplevel_declaration to cp_parser_declaration and\nhandles attribute-declaration in cp_parser_declaration\nby parsing the attributes (standard ones only, we've never supported\n__attribute__((...)); at namespace scope, so I'm not sure we need to\nintroduce that), which for C++98 emits the needed diagnostics, and then\nwarning if there are any attributes that we throw away on the floor.\n\nI'll need this later for OpenMP directives at namespace scope, e.g.\n[[omp::directive (requires, atomic_default_mem_order(seq_cst))]];\nshould be valid at namespace scope (and many other directives).\n\n2021-07-30  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/101582\n\t* parser.c (cp_parser_skip_std_attribute_spec_seq): Add a forward\n\tdeclaration.\n\t(cp_parser_declaration): Parse empty-declaration and\n\tattribute-declaration.\n\t(cp_parser_toplevel_declaration): Don't parse empty-declaration here.\n\n\t* g++.dg/cpp0x/gen-attrs-45.C: Expect a warning about ignored\n\tattributes instead of error.\n\t* g++.dg/cpp0x/gen-attrs-75.C: New test.\n\t* g++.dg/modules/pr101582-1.C: New test.", "tree": {"sha": "0b2d385fd0a7c9d5daab6cd22eb445120c37346a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b2d385fd0a7c9d5daab6cd22eb445120c37346a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ab4e3be2d92b1ff671d58418d852195f10dd20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ab4e3be2d92b1ff671d58418d852195f10dd20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ab4e3be2d92b1ff671d58418d852195f10dd20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ab4e3be2d92b1ff671d58418d852195f10dd20/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291416d3782e12e983483a3f7b2154a3dbfc9e1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/291416d3782e12e983483a3f7b2154a3dbfc9e1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/291416d3782e12e983483a3f7b2154a3dbfc9e1f"}], "stats": {"total": 80, "additions": 71, "deletions": 9}, "files": [{"sha": "d960d38065b789c148d3d781043e0efc3dde3071", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=77ab4e3be2d92b1ff671d58418d852195f10dd20", "patch": "@@ -2507,6 +2507,8 @@ static tree cp_parser_std_attribute_spec\n   (cp_parser *);\n static tree cp_parser_std_attribute_spec_seq\n   (cp_parser *);\n+static size_t cp_parser_skip_std_attribute_spec_seq\n+  (cp_parser *, size_t);\n static size_t cp_parser_skip_attributes_opt\n   (cp_parser *, size_t);\n static bool cp_parser_extension_opt\n@@ -14405,6 +14407,30 @@ cp_parser_declaration (cp_parser* parser, tree prefix_attrs)\n   cp_token *token2 = (token1->type == CPP_EOF\n \t\t      ? token1 : cp_lexer_peek_nth_token (parser->lexer, 2));\n \n+  if (token1->type == CPP_SEMICOLON)\n+    {\n+      cp_lexer_consume_token (parser->lexer);\n+      /* A declaration consisting of a single semicolon is invalid\n+       * before C++11.  Allow it unless we're being pedantic.  */\n+      if (cxx_dialect < cxx11)\n+\tpedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n+      return;\n+    }\n+  else if (cp_lexer_nth_token_is (parser->lexer,\n+\t\t\t\t  cp_parser_skip_std_attribute_spec_seq (parser,\n+\t\t\t\t\t\t\t\t\t 1),\n+\t\t\t\t  CPP_SEMICOLON))\n+    {\n+      location_t attrs_loc = token1->location;\n+      tree std_attrs = cp_parser_std_attribute_spec_seq (parser);\n+      if (std_attrs != NULL_TREE)\n+\twarning_at (make_location (attrs_loc, attrs_loc, parser->lexer),\n+\t\t    OPT_Wattributes, \"attribute ignored\");\n+      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))\n+\tcp_lexer_consume_token (parser->lexer);\n+      return;\n+    }\n+\n   /* Get the high-water mark for the DECLARATOR_OBSTACK.  */\n   void *p = obstack_alloc (&declarator_obstack, 0);\n \n@@ -14555,14 +14581,6 @@ cp_parser_toplevel_declaration (cp_parser* parser)\n        cp_parser_declaration.  (A #pragma at block scope is\n        handled in cp_parser_statement.)  */\n     cp_parser_pragma (parser, pragma_external, NULL);\n-  else if (token->type == CPP_SEMICOLON)\n-    {\n-      cp_lexer_consume_token (parser->lexer);\n-      /* A declaration consisting of a single semicolon is invalid\n-       * before C++11.  Allow it unless we're being pedantic.  */\n-      if (cxx_dialect < cxx11)\n-\tpedwarn (input_location, OPT_Wpedantic, \"extra %<;%>\");\n-    }\n   else\n     /* Parse the declaration itself.  */\n     cp_parser_declaration (parser, NULL_TREE);"}, {"sha": "2bdd549ea15ef40e18d87a6f301ba891eed73a8f", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-45.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-45.C?ref=77ab4e3be2d92b1ff671d58418d852195f10dd20", "patch": "@@ -1,4 +1,4 @@\n // PR c++/52906\n // { dg-do compile { target c++11 } }\n \n-[[gnu::deprecated]]; // { dg-error \"does not declare anything\" }\n+[[gnu::deprecated]]; // { dg-warning \"attribute ignored\" }"}, {"sha": "bac80aa02ffb015b6ca11a364ddcbe2da594550e", "filename": "gcc/testsuite/g++.dg/cpp0x/gen-attrs-75.C", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fgen-attrs-75.C?ref=77ab4e3be2d92b1ff671d58418d852195f10dd20", "patch": "@@ -0,0 +1,35 @@\n+// PR c++/101582\n+// { dg-do compile }\n+// { dg-options \"\" }\n+\n+;\n+[[]] [[]] [[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+[[foobar]];\t// { dg-warning \"attribute ignored\" }\n+// { dg-warning \"attributes only available with\" \"\" { target c++98_only } .-1 }\n+\n+extern \"C\" ;\n+extern \"C\" [[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+extern \"C\" extern \"C\" ;\n+extern \"C\" extern \"C\" [[]][[]][[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+__extension__ ;\n+__extension__ [[]];\t\t\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+__extension__ __extension__ ;\n+__extension__ __extension__ [[]][[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+\n+namespace N {\n+\n+;\n+[[]] [[]] [[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+[[foobar]];\t// { dg-warning \"attribute ignored\" }\n+// { dg-warning \"attributes only available with\" \"\" { target c++98_only } .-1 }\n+\n+extern \"C\" ;\n+extern \"C\" [[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+extern \"C\" extern \"C\" ;\n+extern \"C\" extern \"C\" [[]][[]][[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+__extension__ ;\n+__extension__ [[]];\t\t\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+__extension__ __extension__ ;\n+__extension__ __extension__ [[]][[]];\t// { dg-warning \"attributes only available with\" \"\" { target c++98_only } }\n+\n+}"}, {"sha": "1d3a3fcb6fa5464b36ca112c57e83e1966e31fb9", "filename": "gcc/testsuite/g++.dg/modules/pr101582-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr101582-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ab4e3be2d92b1ff671d58418d852195f10dd20/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr101582-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr101582-1.C?ref=77ab4e3be2d92b1ff671d58418d852195f10dd20", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/101582\n+// { dg-additional-options \"-fmodules-ts\" }\n+export module pr101582;\n+// { dg-module-cmi \"pr101582\" }\n+export ;\t\t\t// { dg-error \"export declaration does not declare anything\" \"\" { xfail *-*-* } }\n+export [[]];\t\t\t// { dg-error \"export declaration does not declare anything\" \"\" { xfail *-*-* } }\n+export\t\t\t\t// { dg-error \"export declaration does not declare anything\" \"\" { xfail *-*-* } }\n+{\n+}"}]}