{"sha": "396717c949db41ea0cc7e26b144dd31def3297a2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2NzE3Yzk0OWRiNDFlYTBjYzdlMjZiMTQ0ZGQzMWRlZjMyOTdhMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-06-02T13:58:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-06-02T13:58:27Z"}, "message": "lto-wrapper.c (lto_wrapper_exit): Rename to ...\n\n2010-06-02  Richard Guenther  <rguenther@suse.de>\n\n\t* lto-wrapper.c (lto_wrapper_exit): Rename to ...\n\t(lto_wrapper_cleanup): ... this.  Do not exit.\n\t(fatal): Adjust.  Exit here.\n\t(fatal_perror): Likewise.\n\t(fatal_signal): New function.\n\t(main): Set up signal handlers to cleanup temporary files.\n\t* Makefile.in (lto-wrapper.o): Adjust dependencies.\n\nFrom-SVN: r160153", "tree": {"sha": "c5fecb56c83f1246a240b353a5e3adea6d0eb7ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5fecb56c83f1246a240b353a5e3adea6d0eb7ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/396717c949db41ea0cc7e26b144dd31def3297a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396717c949db41ea0cc7e26b144dd31def3297a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/396717c949db41ea0cc7e26b144dd31def3297a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/396717c949db41ea0cc7e26b144dd31def3297a2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2698955a097e8033ac4021e7e16678abc21fd147", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2698955a097e8033ac4021e7e16678abc21fd147", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2698955a097e8033ac4021e7e16678abc21fd147"}], "stats": {"total": 105, "additions": 76, "deletions": 29}, "files": [{"sha": "b2c82aeef3f880f9d00561330e22b63c60e0192c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=396717c949db41ea0cc7e26b144dd31def3297a2", "patch": "@@ -1,3 +1,13 @@\n+2010-06-02  Richard Guenther  <rguenther@suse.de>\n+\n+\t* lto-wrapper.c (lto_wrapper_exit): Rename to ...\n+\t(lto_wrapper_cleanup): ... this.  Do not exit.\n+\t(fatal): Adjust.  Exit here.\n+\t(fatal_perror): Likewise.\n+\t(fatal_signal): New function.\n+\t(main): Set up signal handlers to cleanup temporary files.\n+\t* Makefile.in (lto-wrapper.o): Adjust dependencies.\n+\n 2010-06-02  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/44377"}, {"sha": "a5eca3ef682281915795f8112ef00b55e82d18bd", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=396717c949db41ea0cc7e26b144dd31def3297a2", "patch": "@@ -2055,7 +2055,8 @@ lto-wrapper$(exeext): lto-wrapper.o intl.o $(LIBDEPS)\n \t$(COMPILER) $(ALL_COMPILERFLAGS) $(LDFLAGS) -o T$@ lto-wrapper.o intl.o $(LIBS)\n \tmv -f T$@ $@\n \n-lto-wrapper.o: lto-wrapper.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) intl.h\n+lto-wrapper.o: lto-wrapper.c $(CONFIG_H) $(SYSTEM_H) defaults.h intl.h \\\n+\t$(OBSTACK_H)\n \n # A file used by all variants of C.\n "}, {"sha": "fe5b3464efe57954822d681739dee86cc67c28a4", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 64, "deletions": 28, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/396717c949db41ea0cc7e26b144dd31def3297a2/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=396717c949db41ea0cc7e26b144dd31def3297a2", "patch": "@@ -40,12 +40,19 @@ along with GCC; see the file COPYING3.  If not see\n #include \"config.h\"\n #include \"system.h\"\n #include <errno.h>\n-#include \"coretypes.h\"\n-#include \"tm.h\"\n+#include <signal.h>\n+#if ! defined( SIGCHLD ) && defined( SIGCLD )\n+#  define SIGCHLD SIGCLD\n+#endif\n+#include \"defaults.h\"\n #include \"intl.h\"\n #include \"libiberty.h\"\n #include \"obstack.h\"\n \n+#ifndef HAVE_KILL\n+#define kill(p,s) raise(s)\n+#endif\n+\n int debug;\t\t\t\t/* true if -save-temps.  */\n int verbose;\t\t\t\t/* true if -v.  */\n \n@@ -68,36 +75,45 @@ static char *makefile;\n \n static void maybe_unlink_file (const char *);\n \n-/* Delete tempfiles and exit function.  */\n+ /* Delete tempfiles.  */\n \n static void\n-lto_wrapper_exit (int status)\n+lto_wrapper_cleanup (void)\n {\n   static bool cleanup_done = false;\n-  if (!cleanup_done)\n+  unsigned int i;\n+\n+  if (cleanup_done)\n+    return;\n+\n+  /* Setting cleanup_done prevents an infinite loop if one of the\n+     calls to maybe_unlink_file fails. */\n+  cleanup_done = true;\n+\n+  if (ltrans_output_file)\n+    maybe_unlink_file (ltrans_output_file);\n+  if (flto_out)\n+    maybe_unlink_file (flto_out);\n+  if (args_name)\n+    maybe_unlink_file (args_name);\n+  if (makefile)\n+    maybe_unlink_file (makefile);\n+  for (i = 0; i < nr; ++i)\n     {\n-      unsigned int i;\n-\n-      /* Setting cleanup_done prevents an infinite loop if one of the\n-         calls to maybe_unlink_file fails. */\n-      cleanup_done = true;\n-\n-      if (ltrans_output_file)\n-        maybe_unlink_file (ltrans_output_file);\n-      if (flto_out)\n-        maybe_unlink_file (flto_out);\n-      if (args_name)\n-        maybe_unlink_file (args_name);\n-      if (makefile)\n-\tmaybe_unlink_file (makefile);\n-      for (i = 0; i < nr; ++i)\n-\t{\n-\t  maybe_unlink_file (input_names[i]);\n-\t  if (output_names[i])\n-\t    maybe_unlink_file (output_names[i]);\n-\t}\n+      maybe_unlink_file (input_names[i]);\n+      if (output_names[i])\n+\tmaybe_unlink_file (output_names[i]);\n     }\n-  exit (status);\n+}\n+\n+static void\n+fatal_signal (int signum)\n+{\n+  signal (signum, SIG_DFL);\n+  lto_wrapper_cleanup ();\n+  /* Get the same signal again, this time not handled,\n+     so its normal effect occurs.  */\n+  kill (getpid (), signum);\n }\n \n /* Just die. CMSGID is the error message. */\n@@ -113,7 +129,8 @@ fatal (const char * cmsgid, ...)\n   fprintf (stderr, \"\\n\");\n   va_end (ap);\n \n-  lto_wrapper_exit (FATAL_EXIT_CODE);\n+  lto_wrapper_cleanup ();\n+  exit (FATAL_EXIT_CODE);\n }\n \n \n@@ -131,7 +148,8 @@ fatal_perror (const char *cmsgid, ...)\n   fprintf (stderr, \": %s\\n\", xstrerror (e));\n   va_end (ap);\n \n-  lto_wrapper_exit (FATAL_EXIT_CODE);\n+  lto_wrapper_cleanup ();\n+  exit (FATAL_EXIT_CODE);\n }\n \n \n@@ -597,6 +615,24 @@ main (int argc, char *argv[])\n {\n   gcc_init_libintl ();\n \n+  if (signal (SIGINT, SIG_IGN) != SIG_IGN)\n+    signal (SIGINT, fatal_signal);\n+#ifdef SIGHUP\n+  if (signal (SIGHUP, SIG_IGN) != SIG_IGN)\n+    signal (SIGHUP, fatal_signal);\n+#endif\n+  if (signal (SIGTERM, SIG_IGN) != SIG_IGN)\n+    signal (SIGTERM, fatal_signal);\n+#ifdef SIGPIPE\n+  if (signal (SIGPIPE, SIG_IGN) != SIG_IGN)\n+    signal (SIGPIPE, fatal_signal);\n+#endif\n+#ifdef SIGCHLD\n+  /* We *MUST* set SIGCHLD to SIG_DFL so that the wait4() call will\n+     receive the signal.  A different setting is inheritable */\n+  signal (SIGCHLD, SIG_DFL);\n+#endif\n+\n   /* We may be called with all the arguments stored in some file and\n      passed with @file.  Expand them into argv before processing.  */\n   expandargv (&argc, &argv);"}]}