{"sha": "cf860dc275f081171bca36a1df471417307b7922", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y4NjBkYzI3NWYwODExNzFiY2EzNmExZGY0NzE0MTczMDdiNzkyMg==", "commit": {"author": {"name": "Naohiko Shimizu", "email": "pshimizu@fa2.so-net.ne.jp", "date": "2002-10-12T16:38:01Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-10-12T16:38:01Z"}, "message": "pdp11.h (ASM_OUTPUT_SKIP): Add preceding 0 for octal constant.\n\n        * pdp11.h (ASM_OUTPUT_SKIP): Add preceding 0 for octal constant.\n        (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n        * pdp11.c (pdp11_output_function_prologue): 0%o -> %#o.\n        (pdp11_output_function_epilogue, output_ascii): Likewise.\n        (output_addr_const_pdp11): Likewise.\n        * pdp11.md (movdi): Use offsetable memory for floating store.\n        (lshrsi3, negsi2): Delete irrelevant comment.\n\nFrom-SVN: r58087", "tree": {"sha": "6e9ba88fa1712280835dc97421f887dd57c59f15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e9ba88fa1712280835dc97421f887dd57c59f15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf860dc275f081171bca36a1df471417307b7922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf860dc275f081171bca36a1df471417307b7922", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf860dc275f081171bca36a1df471417307b7922", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf860dc275f081171bca36a1df471417307b7922/comments", "author": null, "committer": null, "parents": [{"sha": "bf01920f80bb6bfc2d48fa7a1848ba44cf9645d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf01920f80bb6bfc2d48fa7a1848ba44cf9645d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf01920f80bb6bfc2d48fa7a1848ba44cf9645d1"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "4a292ecdacd65a6da948c07ffb8dbec9523bb5b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf860dc275f081171bca36a1df471417307b7922/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf860dc275f081171bca36a1df471417307b7922/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cf860dc275f081171bca36a1df471417307b7922", "patch": "@@ -1,3 +1,13 @@\n+2002-10-12  Naohiko Shimizu  <pshimizu@fa2.so-net.ne.jp>\n+\n+\t* pdp11.h (ASM_OUTPUT_SKIP): Add preceding 0 for octal constant.\n+\t(ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n+\t* pdp11.c (pdp11_output_function_prologue): 0%o -> %#o.\n+\t(pdp11_output_function_epilogue, output_ascii): Likewise.\n+\t(output_addr_const_pdp11): Likewise.\n+\t* pdp11.md (movdi): Use offsetable memory for floating store.\n+\t(lshrsi3, negsi2): Delete irrelevant comment.\n+\n 2002-10-11  Geoffrey Keating  <geoffk@apple.com>\n \n \t* cse.c (mention_regs): Set SUBREG_TICKED to the register number,"}, {"sha": "a7066bdffb7529978822ba2fe87cfda08ca46788", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=cf860dc275f081171bca36a1df471417307b7922", "patch": "@@ -137,7 +137,7 @@ pdp11_output_function_prologue (stream, size)\n     {\n       fprintf (stream, \"\\t/*abuse empty parameter slot for locals!*/\\n\");\n       if (size > 2)\n-\tfprintf(stream, \"\\tsub $0%o, sp\\n\", size - 2);\n+\tfprintf(stream, \"\\tsub $%#o, sp\\n\", size - 2);\n \n     }\n }\n@@ -178,7 +178,7 @@ pdp11_output_function_prologue (stream, size)\n \n     /* make frame */\n     if (fsize)\t\t\t\t\t\t\t\n-\tfprintf (stream, \"\\tsub $0%o, sp\\n\", fsize);\t\t\t\n+\tfprintf (stream, \"\\tsub $%#o, sp\\n\", fsize);\t\t\t\n \n     /* save CPU registers  */\n     for (regno = 0; regno < 8; regno++)\t\t\t\t\n@@ -280,7 +280,7 @@ pdp11_output_function_epilogue (stream, size)\n \t/* change fp -> r5 due to the compile error on libgcc2.c */\n \tfor (i =7 ; i >= 0 ; i--)\t\t\t\t\t\n \t    if (regs_ever_live[i] && ! call_used_regs[i])\t\t\n-\t\tfprintf(stream, \"\\tmov 0%o(r5), %s\\n\",(-fsize-2*j--)&0xffff, reg_names[i]);\n+\t\tfprintf(stream, \"\\tmov %#o(r5), %s\\n\",(-fsize-2*j--)&0xffff, reg_names[i]);\n \n \t/* get ACs */\t\t\t\t\t\t\n \tvia_ac = FIRST_PSEUDO_REGISTER -1;\n@@ -298,7 +298,7 @@ pdp11_output_function_epilogue (stream, size)\n \t\t&& regs_ever_live[i]\n \t\t&& ! call_used_regs[i])\n \t    {\n-\t\tfprintf(stream, \"\\tldd 0%o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[i]);\n+\t\tfprintf(stream, \"\\tldd %#o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[i]);\n \t\tk -= 8;\n \t    }\n \t    \n@@ -309,7 +309,7 @@ pdp11_output_function_epilogue (stream, size)\n \t\tif (! LOAD_FPU_REG_P(via_ac))\n \t\t    abort();\n \t\t    \n-\t\tfprintf(stream, \"\\tldd 0%o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[via_ac]);\n+\t\tfprintf(stream, \"\\tldd %#o(r5), %s\\n\", (-fsize-k)&0xffff, reg_names[via_ac]);\n \t\tfprintf(stream, \"\\tstd %s, %s\\n\", reg_names[via_ac], reg_names[i]);\n \t\tk -= 8;\n \t    }\n@@ -351,7 +351,7 @@ pdp11_output_function_epilogue (stream, size)\n \t\tfprintf(stream, \"\\tmov (sp)+, %s\\n\", reg_names[i]);\t\n \t\t\t\t\t\t\t\t\n \tif (fsize)\t\t\t\t\t\t\n-\t    fprintf((stream), \"\\tadd $0%o, sp\\n\", (fsize)&0xffff);      \t\t\n+\t    fprintf((stream), \"\\tadd $%#o, sp\\n\", (fsize)&0xffff);      \t\t\n     }\t\t\t\n \t\t\t\t\t\n     fprintf (stream, \"\\trts pc\\n\");\t\t\t\t\t\n@@ -818,7 +818,7 @@ output_ascii (file, p, size)\n       register int c = p[i];\n       if (c < 0)\n \tc += 256;\n-      fprintf (file, \"0%o\", c);\n+      fprintf (file, \"%#o\", c);\n       if (i < size - 1)\n \tputc (',', file);\n     }\n@@ -1549,7 +1549,7 @@ output_addr_const_pdp11 (file, x)\n     case CONST_INT:\n       /* Should we check for constants which are too big?  Maybe cutting\n \t them off to 16 bits is OK?  */\n-      fprintf (file, \"0%ho\", (unsigned short) INTVAL (x));\n+      fprintf (file, \"%#ho\", (unsigned short) INTVAL (x));\n       break;\n \n     case CONST:\n@@ -1565,7 +1565,7 @@ output_addr_const_pdp11 (file, x)\n \t  if (CONST_DOUBLE_HIGH (x))\n \t    abort (); /* Should we just silently drop the high part?  */\n \t  else\n-\t    fprintf (file, \"0%ho\", (unsigned short) CONST_DOUBLE_LOW (x));\n+\t    fprintf (file, \"%#ho\", (unsigned short) CONST_DOUBLE_LOW (x));\n \t}\n       else\n \t/* We can't handle floating point constants;"}, {"sha": "a30dde7296673d177460cab846b29c9aace21696", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=cf860dc275f081171bca36a1df471417307b7922", "patch": "@@ -1107,7 +1107,7 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n     }\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.=.+ %o\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.=.+ %#ho\\n\", (unsigned short)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -1117,15 +1117,15 @@ fprintf (FILE, \"$help$: . = .+8 ; space for tmp moves!\\n\")\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n   fprintf ((FILE), \"\\n\"),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \": .=.+ %o\\n\", (ROUNDED))\t\t\\\n+  fprintf ((FILE), \": .=.+ %#ho\\n\", (unsigned short)(ROUNDED))\t\t\\\n )\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( assemble_name ((FILE), (NAME)),\t\t\t\t\\\n-  fprintf ((FILE), \":\\t.=.+ %o\\n\", (ROUNDED)))\n+  fprintf ((FILE), \":\\t.=.+ %#ho\\n\", (unsigned short)(ROUNDED)))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME."}, {"sha": "fae4907bf83c68a46c5c49f9c0a23127c3c7f6b1", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf860dc275f081171bca36a1df471417307b7922/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=cf860dc275f081171bca36a1df471417307b7922", "patch": "@@ -621,7 +621,7 @@\n ;; Move instructions\n \n (define_insn \"movdi\"\n-  [(set (match_operand:DI 0 \"general_operand\" \"=g,rm,m\")\n+  [(set (match_operand:DI 0 \"general_operand\" \"=g,rm,o\")\n \t(match_operand:DI 1 \"general_operand\" \"m,r,a\"))]\n   \"\"\n   \"* return output_move_quad (operands);\"\n@@ -1395,7 +1395,7 @@\n \t(lshiftrt:SI (match_operand:SI 1 \"general_operand\" \"0\")\n                    (const_int 1)))]\n   \"\"\n-{ /* Here we trust that operands don't overlap */\n+{\n \n   rtx lateoperands[2];\n \n@@ -1614,7 +1614,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(neg:SI (match_operand:SI 1 \"general_operand\" \"0\")))]\n   \"\"\n-{ /* Here we trust that operands don't overlap */\n+{\n \n   rtx lateoperands[2];\n "}]}