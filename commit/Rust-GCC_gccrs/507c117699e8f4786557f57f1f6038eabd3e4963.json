{"sha": "507c117699e8f4786557f57f1f6038eabd3e4963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA3YzExNzY5OWU4ZjQ3ODY1NTdmNTdmMWY2MDM4ZWFiZDNlNDk2Mw==", "commit": {"author": {"name": "Paul Eggert", "email": "eggert@twinsun.com", "date": "1998-05-08T12:59:23Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-08T12:59:23Z"}, "message": "dwarf2out.c: Don't assume that `.section \".text\"' causes the assembler to treat .text as a...\n\n        * dwarf2out.c: Don't assume that `.section \".text\"' causes the\n        assembler to treat .text as a label for the start of that section,\n        as this assumption is false for Solaris 2.x `as'.  Instead, output\n        `.section \".text\"; .LLtext0:' and use .LLtext0 in label contexts.\n        (ABBREV_LABEL, DEBUG_INFO_LABEL, DEBUG_LINE_LABEL, TEXT_LABEL):\n        New macros.\n        (abbrev_label, debug_info_label, debug_line_label, text_label):\n        New vars.\n        (dwarf2out_init): Initialize the vars.  Output defn for text_label.\n        (dwarf2out_finish): Output defns for the other 3 vars.\n        (dw_val_node): Rename val_section to val_section_label, as it's\n        now a label, not a section.\n        (add_AT_section_offset): Arg is now a label, not a section.\n        (print_die, output_die, output_compilation_unit_header,\n        output_pubnames, output_aranges, output_line_info,\n        dwarf2out_finish): In label contexts, output the section label,\n        not the section.\n\nFrom-SVN: r19633", "tree": {"sha": "58a72dc3e1bba1a9a1878c2f357de3a50c9fb5d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58a72dc3e1bba1a9a1878c2f357de3a50c9fb5d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/507c117699e8f4786557f57f1f6038eabd3e4963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507c117699e8f4786557f57f1f6038eabd3e4963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/507c117699e8f4786557f57f1f6038eabd3e4963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/507c117699e8f4786557f57f1f6038eabd3e4963/comments", "author": null, "committer": null, "parents": [{"sha": "560bd19e94e31a0e2e9008815a4266a886c0b695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/560bd19e94e31a0e2e9008815a4266a886c0b695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/560bd19e94e31a0e2e9008815a4266a886c0b695"}], "stats": {"total": 78, "additions": 62, "deletions": 16}, "files": [{"sha": "6d74d45c4e5811c50b40334f0f11cfbd79738c50", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507c117699e8f4786557f57f1f6038eabd3e4963/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507c117699e8f4786557f57f1f6038eabd3e4963/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=507c117699e8f4786557f57f1f6038eabd3e4963", "patch": "@@ -1,3 +1,23 @@\n+Fri May  8 13:59:31 1998  Paul Eggert  <eggert@twinsun.com>\n+\n+\t* dwarf2out.c: Don't assume that `.section \".text\"' causes the\n+\tassembler to treat .text as a label for the start of that section,\n+\tas this assumption is false for Solaris 2.x `as'.  Instead, output\n+\t`.section \".text\"; .LLtext0:' and use .LLtext0 in label contexts.\n+\t(ABBREV_LABEL, DEBUG_INFO_LABEL, DEBUG_LINE_LABEL, TEXT_LABEL):\n+\tNew macros.\n+\t(abbrev_label, debug_info_label, debug_line_label, text_label):\n+\tNew vars.\n+\t(dwarf2out_init): Initialize the vars.  Output defn for text_label.\n+\t(dwarf2out_finish): Output defns for the other 3 vars.\n+\t(dw_val_node): Rename val_section to val_section_label, as it's\n+\tnow a label, not a section.\n+\t(add_AT_section_offset): Arg is now a label, not a section.\n+\t(print_die, output_die, output_compilation_unit_header,\n+\toutput_pubnames, output_aranges, output_line_info,\n+\tdwarf2out_finish): In label contexts, output the section label,\n+\tnot the section.\n+\n Fri May  8 09:47:29 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Makefile.in (genrtl.o): Depend on system.h."}, {"sha": "e1e6af51ba927d56fd281c5926cd3b8fdba9d57f", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 42, "deletions": 16, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/507c117699e8f4786557f57f1f6038eabd3e4963/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/507c117699e8f4786557f57f1f6038eabd3e4963/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=507c117699e8f4786557f57f1f6038eabd3e4963", "patch": "@@ -2049,7 +2049,7 @@ typedef struct dw_val_struct\n       unsigned val_fde_index;\n       char *val_str;\n       char *val_lbl_id;\n-      char *val_section;\n+      char *val_section_label;\n       unsigned char val_flag;\n     }\n   v;\n@@ -2582,8 +2582,24 @@ static unsigned lookup_filename\t\tPROTO((char *));\n    If necessary, these may be overridden from within the tm.h file, but\n    typically, overriding these defaults is unnecessary.  */\n \n+static char abbrev_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char debug_info_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char debug_line_label[MAX_ARTIFICIAL_LABEL_BYTES];\n+static char text_label[MAX_ARTIFICIAL_LABEL_BYTES];\n static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n+#ifndef ABBREV_LABEL\n+#define ABBREV_LABEL\t\t\"Labbrev\"\n+#endif\n+#ifndef DEBUG_INFO_LABEL\n+#define DEBUG_INFO_LABEL\t\"Ldebug_info\"\n+#endif\n+#ifndef DEBUG_LINE_LABEL\n+#define DEBUG_LINE_LABEL\t\"Ldebug_line\"\n+#endif\n+#ifndef TEXT_LABEL\n+#define TEXT_LABEL\t\t\"Ltext\"\n+#endif\n #ifndef TEXT_END_LABEL\n #define TEXT_END_LABEL\t\t\"Letext\"\n #endif\n@@ -3796,17 +3812,17 @@ add_AT_lbl_id (die, attr_kind, lbl_id)\n /* Add a section offset attribute value to a DIE.  */\n \n static inline void\n-add_AT_section_offset (die, attr_kind, section)\n+add_AT_section_offset (die, attr_kind, section_label)\n      register dw_die_ref die;\n      register enum dwarf_attribute attr_kind;\n-     register char *section;\n+     register char *section_label;\n {\n   register dw_attr_ref attr = (dw_attr_ref) xmalloc (sizeof (dw_attr_node));\n \n   attr->dw_attr_next = NULL;\n   attr->dw_attr = attr_kind;\n   attr->dw_attr_val.val_class = dw_val_class_section_offset;\n-  attr->dw_attr_val.v.val_section = section;\n+  attr->dw_attr_val.v.val_section_label = section_label;\n   add_dwarf_attr (die, attr);\n   \n }\n@@ -4272,7 +4288,8 @@ print_die (die, outfile)\n \t  fprintf (outfile, \"label: %s\", a->dw_attr_val.v.val_lbl_id);\n \t  break;\n \tcase dw_val_class_section_offset:\n-\t  fprintf (outfile, \"section: %s\", a->dw_attr_val.v.val_section);\n+\t  fprintf (outfile, \"section_label: %s\",\n+\t\t   a->dw_attr_val.v.val_section_label);\n \t  break;\n \tcase dw_val_class_str:\n \t  if (a->dw_attr_val.v.val_str != NULL)\n@@ -5336,8 +5353,7 @@ output_die (die)\n \n \tcase dw_val_class_section_offset:\n \t  ASM_OUTPUT_DWARF_OFFSET (asm_out_file,\n-\t\t\t\t   stripattributes\n-\t\t\t\t   (a->dw_attr_val.v.val_section));\n+\t\t\t\t   a->dw_attr_val.v.val_section_label);\n \t  break;\n \n \tcase dw_val_class_str:\n@@ -5397,7 +5413,7 @@ output_compilation_unit_header ()\n     fprintf (asm_out_file, \"\\t%s DWARF version number\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (ABBREV_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, abbrev_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset Into Abbrev. Section\",\n \t     ASM_COMMENT_START);\n@@ -5470,7 +5486,7 @@ output_pubnames ()\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, debug_info_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n@@ -5550,7 +5566,7 @@ output_aranges ()\n     fprintf (asm_out_file, \"\\t%s DWARF Version\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, stripattributes (DEBUG_INFO_SECTION));\n+  ASM_OUTPUT_DWARF_OFFSET (asm_out_file, debug_info_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Offset of Compilation Unit Info.\",\n \t     ASM_COMMENT_START);\n@@ -5576,12 +5592,12 @@ output_aranges ()\n \t     ASM_COMMENT_START, 2 * PTR_SIZE);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_ADDR (asm_out_file, TEXT_SECTION);\n+  ASM_OUTPUT_DWARF_ADDR (asm_out_file, text_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n \n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, text_end_label, TEXT_SECTION);\n+  ASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, text_end_label, text_label);\n   if (flag_debug_asm)\n     fprintf (asm_out_file, \"%s Length\", ASM_COMMENT_START);\n \n@@ -5766,14 +5782,14 @@ output_line_info ()\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_DWARF_DATA1 (asm_out_file, DW_LNE_set_address);\n   fputc ('\\n', asm_out_file);\n-  ASM_OUTPUT_DWARF_ADDR (asm_out_file, TEXT_SECTION);\n+  ASM_OUTPUT_DWARF_ADDR (asm_out_file, text_label);\n   fputc ('\\n', asm_out_file);\n \n   /* Generate the line number to PC correspondence table, encoded as\n      a series of state machine operations.  */\n   current_file = 1;\n   current_line = 1;\n-  strcpy (prev_line_label, TEXT_SECTION);\n+  strcpy (prev_line_label, text_label);\n   for (lt_index = 1; lt_index < line_info_table_in_use; ++lt_index)\n     {\n       register dw_line_info_ref line_info;\n@@ -9771,7 +9787,14 @@ dwarf2out_init (asm_out_file, main_input_filename)\n      invoked when the given (base) source file was compiled.  */\n   gen_compile_unit_die (main_input_filename);\n \n+  ASM_GENERATE_INTERNAL_LABEL (abbrev_label, ABBREV_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (debug_info_label, DEBUG_INFO_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (debug_line_label, DEBUG_LINE_LABEL, 0);\n+  ASM_GENERATE_INTERNAL_LABEL (text_label, TEXT_LABEL, 0);\n   ASM_GENERATE_INTERNAL_LABEL (text_end_label, TEXT_END_LABEL, 0);\n+\n+  text_section ();\n+  ASM_OUTPUT_LABEL (asm_out_file, text_label);\n }\n \n /* Output stuff that dwarf requires at the end of every file,\n@@ -9833,22 +9856,24 @@ dwarf2out_finish ()\n     {\n       fputc ('\\n', asm_out_file);\n       ASM_OUTPUT_SECTION (asm_out_file, DEBUG_LINE_SECTION);\n+      ASM_OUTPUT_LABEL (asm_out_file, debug_line_label);\n       output_line_info ();\n \n       /* We can only use the low/high_pc attributes if all of the code\n \t was in .text.  */\n       if (separate_line_info_table_in_use == 0)\n \t{\n-\t  add_AT_lbl_id (comp_unit_die, DW_AT_low_pc, TEXT_SECTION);\n+\t  add_AT_lbl_id (comp_unit_die, DW_AT_low_pc, text_label);\n \t  add_AT_lbl_id (comp_unit_die, DW_AT_high_pc, text_end_label);\n \t}\n \n-      add_AT_section_offset (comp_unit_die, DW_AT_stmt_list, DEBUG_LINE_SECTION);\n+      add_AT_section_offset (comp_unit_die, DW_AT_stmt_list, debug_line_label);\n     }\n \n   /* Output the abbreviation table.  */\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_SECTION (asm_out_file, ABBREV_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, abbrev_label);\n   build_abbrev_table (comp_unit_die);\n   output_abbrev_section ();\n \n@@ -9859,6 +9884,7 @@ dwarf2out_finish ()\n   /* Output debugging information.  */\n   fputc ('\\n', asm_out_file);\n   ASM_OUTPUT_SECTION (asm_out_file, DEBUG_INFO_SECTION);\n+  ASM_OUTPUT_LABEL (asm_out_file, debug_info_label);\n   output_compilation_unit_header ();\n   output_die (comp_unit_die);\n "}]}