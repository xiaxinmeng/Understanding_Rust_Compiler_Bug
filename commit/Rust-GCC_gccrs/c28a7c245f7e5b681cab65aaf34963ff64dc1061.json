{"sha": "c28a7c245f7e5b681cab65aaf34963ff64dc1061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI4YTdjMjQ1ZjdlNWI2ODFjYWI2NWFhZjM0OTYzZmY2NGRjMTA2MQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2012-07-27T11:44:37Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2012-07-27T11:44:37Z"}, "message": "rs6000-common.c (rs6000_handle_option): Delete code for -mno-power, -mpower, and -mpower2.\n\n2012-07-26  Segher Boessenkool  <segher@kernel.crashing.org>\n\ngcc/\n        * common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n        Delete code for -mno-power, -mpower, and -mpower2.\n        * config/rs6000/aix43.h (NON_POWERPC_MASKS): Delete.\n        (SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n        with -maix64.\n        (ASM_CPU_SPEC): Delete support for POWER and POWER2.\n        * config/rs6000/aix51.h (NON_POWERPC_MASKS): Delete.\n        (SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n        with -maix64.\n        (ASM_CPU_SPEC): Delete support for POWER and POWER2.\n        * config/rs6000/aix52.h (NON_POWERPC_MASKS): Delete.\n        (SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n        with -maix64.\n        (TARGET_POWER): Delete.\n        * config/rs6000/aix53.h (NON_POWERPC_MASKS): Delete.\n        (SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n        with -maix64.\n        (TARGET_POWER): Delete.\n        * config/rs6000/aix61.h (NON_POWERPC_MASKS): Delete.\n        (SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n        with -maix64.\n        (TARGET_POWER): Delete.\n        * config/rs6000/darwin.h (TARGET_POWER): Delete.\n        * config/rs6000/driver-rs6000.c (struct asm_names): Delete\n        support for -mpower, -mpower2, and -mno-power.\n        * config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n        Likewise.\n        (rs6000_cpu_cpp_builtins): Likewise.\n        * config/rs6000/rs6000-cpus.def: Likewise.\n        * config/rs6000/rs6000-tables.opt: Regenerate.\n        * config/rs6000/rs6000.c (POWER_MASKS): Delete.\n        (rs6000_option_override_internal): Adjust.\n        (rs6000_conditional_register_usage): Adjust.\n        (rs6000_emit_move): Adjust.\n        (rs6000_common_init_builtins): Adjust.\n        (rs6000_init_libfuncs): Adjust.\n        (rs6000_output_function_prologue): Adjust.\n        (rs6000_adjust_cost): Adjust.\n        (struct rs6000_opt_masks): Delete MASK_POWER and MASK_POWER2.\n        * config/rs6000/rs6000.h (ASM_CPU_SPEC): Delete support for\n        POWER and POWER2.\n        (TARGET_DEFAULT): Adjust.\n        (PROCESSOR_POWER): Delete.\n        (SHIFT_COUNT_TRUNCATED): Adjust.\n        * config/rs6000/rs6000.md (extendqisi2): Delete POWER support.\n        (extendqisi2_power): Delete.\n        (extendqisi2_no_power): Adjust.\n        (extendqihi2, extendqihi2_power, extendqihi2_no_power):\n        Likewise.\n        (sminsi3, smaxsi3, uminsi3, umaxsi3): Adjust.\n        (anonymous doz insn patterns): Delete.\n        (abssi2): Adjust.\n        (abssi2_power): Delete.\n        (abssi2_nopower): Adjust.\n        (nabs_power, nabs_nopower): Likewise.\n        (mulsi3, mulsi3_mq, mulsi3_no_mq, mulsi3_mq_internal1):\n        Likewise.  Delete anonymous post-reload splitter.\n        (mulsi3_no_mq_internal1): rename to...\n        (mulsi3_internal1): New define_insn.\n        (mulsi3_mq_internal2, mulsi3_no_mq_internal2, mulsi3_internal2):\n        Likewise.\n        (divmodsi4, divmodsi4_internal, udiv<mode>3, udivsi3_mq,\n        udivsi3_no_mq, udivsi3, div<mode>3, divsi3_mq, div<mode>3_no_mq,\n        udivmodsi4_normal, udivmodsi4_tests, udivmodsi4): Likewise.\n        (mulh_call, mull_call, divss_call, divus_call, quoss_call,\n        quous_call): Likewise.\n        (maskir_internal1, maskir_internal2, maskir_internal3,\n        maskir_internal4, maskir_internal5, maskir_internal6,\n        maskir_internal7, maskir_internal8): Delete.\n        (ashlsi3, ashlsi3_power, ashlsi3_no_power): Adjust.\n        (anonymous sl insn patterns): Delete.\n        (lshrsi3, lshrsi3_power, lshrsi3_no_power): Adjust.\n        (lshrsi3_64): Adjust.\n        (anonymous sr insn patterns): Delete.\n        (anonymous rrib insn patterns): Delete.\n        (ashrsi3, ashrsi3_power, ashrsi3_no_power): Adjust.\n        (anonymous sra insn patterns): Delete.\n        (sqrtsf2, sqrtdf2, sqrtdf2_fpr): Adjust.\n        (fix_trunc<mode>si2, fix_trunc<mode>si2_internal,\n        fctiwz_<mode>): Adjust.\n        (mulsidi3, mulsidi3_mq, mulsidi3_no_mq, umulsidi3, umulsidi3_mq,\n        umulsidi3_no_mq, smulsi3_highpart, smulsi3_highpart_mq,\n        smulsi3_highpart_no_mq, umulsi3_highpart, umulsi3_highpart_mq,\n        umulsi3_highpart_no_mq): Adjust.\n        (ashldi3_power, lshrdi3_power, ashrdi3_power): Delete.\n        (ashrdi3_no_power, ashldi3, ashldi3_internal1,\n        lshrdi3_internal1): Adjust.\n        (fix_trunctfsi2, fix_trunctfsi2_fprs): Adjust.\n        (movti_power): Delete.\n        (movti_string): Adjust.\n        (stmsi8, stmsi7, stmsi6, stmsi5, stmsi4, stmsi3): Adjust.\n        (stmsi8_power, stmsi7_power, stmsi6_power, stmsi5_power,\n        stmsi4_power, stmsi3_power): Delete.\n        (anonymous movmemsi insn patterns): Adjust.\n        (lfq_power2, stfq_power2): Delete.\n        (eq<mode>, eq<mode>_compare): Adjust.\n        (eqsi_power): Delete.\n        (ne0si): Adjust.\n        (anonymous le, lt, ge, gt insn patterns): Delete.\n        * config/rs6000/rs6000.opt (mpower, mno-power, mpower2): Delete.\n        * config/rs6000/sysv4.h (TARGET_POWER): Delete.\n        * config/rs6000/t-aix43 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n        MULTILIB_MATCHES): Adjust.\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Delete\n        -mpower, -mno-power, -mpower2, -mno-power2 documentation.\n        Delete -mcpu=power and -mcpu=power2 documentation.\n\ngcc/testsuite/\n\n        * gcc.target/powerpc/rs6000-power2-1.c: Delete.\n        * gcc.target/powerpc/rs6000-power2-2.c: Delete.\n\nFrom-SVN: r189908", "tree": {"sha": "2b1c6228af8d5ebf6ded8708b5445523bb1800a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b1c6228af8d5ebf6ded8708b5445523bb1800a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c28a7c245f7e5b681cab65aaf34963ff64dc1061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28a7c245f7e5b681cab65aaf34963ff64dc1061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c28a7c245f7e5b681cab65aaf34963ff64dc1061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c28a7c245f7e5b681cab65aaf34963ff64dc1061/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3061fa41878613d6ea93b46361991cde217a83e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3061fa41878613d6ea93b46361991cde217a83e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3061fa41878613d6ea93b46361991cde217a83e"}], "stats": {"total": 2559, "additions": 296, "deletions": 2263}, "files": [{"sha": "efc5fdf09b4c9e77563c777caf9d9a537c95a1fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,3 +1,112 @@\n+2012-07-27  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* common/config/rs6000/rs6000-common.c (rs6000_handle_option):\n+\tDelete code for -mno-power, -mpower, and -mpower2.\n+\t* config/rs6000/aix43.h (NON_POWERPC_MASKS): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n+\twith -maix64.\n+\t(ASM_CPU_SPEC): Delete support for POWER and POWER2.\n+\t* config/rs6000/aix51.h (NON_POWERPC_MASKS): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n+\twith -maix64.\n+\t(ASM_CPU_SPEC): Delete support for POWER and POWER2.\n+\t* config/rs6000/aix52.h (NON_POWERPC_MASKS): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n+\twith -maix64.\n+\t(TARGET_POWER): Delete.\n+\t* config/rs6000/aix53.h (NON_POWERPC_MASKS): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n+\twith -maix64.\n+\t(TARGET_POWER): Delete.\n+\t* config/rs6000/aix61.h (NON_POWERPC_MASKS): Delete.\n+\t(SUBTARGET_OVERRIDE_OPTIONS): Delete check for POWER together\n+\twith -maix64.\n+\t(TARGET_POWER): Delete.\n+\t* config/rs6000/darwin.h (TARGET_POWER): Delete.\n+\t* config/rs6000/driver-rs6000.c (struct asm_names): Delete\n+\tsupport for -mpower, -mpower2, and -mno-power.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros):\n+\tLikewise.\n+\t(rs6000_cpu_cpp_builtins): Likewise.\n+\t* config/rs6000/rs6000-cpus.def: Likewise.\n+\t* config/rs6000/rs6000-tables.opt: Regenerate.\n+\t* config/rs6000/rs6000.c (POWER_MASKS): Delete.\n+\t(rs6000_option_override_internal): Adjust.\n+\t(rs6000_conditional_register_usage): Adjust.\n+\t(rs6000_emit_move): Adjust.\n+\t(rs6000_common_init_builtins): Adjust.\n+\t(rs6000_init_libfuncs): Adjust.\n+\t(rs6000_output_function_prologue): Adjust.\n+\t(rs6000_adjust_cost): Adjust.\n+\t(struct rs6000_opt_masks): Delete MASK_POWER and MASK_POWER2.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Delete support for\n+\tPOWER and POWER2.\n+\t(TARGET_DEFAULT): Adjust.\n+\t(PROCESSOR_POWER): Delete.\n+\t(SHIFT_COUNT_TRUNCATED): Adjust.\n+\t* config/rs6000/rs6000.md (extendqisi2): Delete POWER support.\n+\t(extendqisi2_power): Delete.\n+\t(extendqisi2_no_power): Adjust.\n+\t(extendqihi2, extendqihi2_power, extendqihi2_no_power):\n+\tLikewise.\n+\t(sminsi3, smaxsi3, uminsi3, umaxsi3): Adjust.\n+\t(anonymous doz insn patterns): Delete.\n+\t(abssi2): Adjust.\n+\t(abssi2_power): Delete.\n+\t(abssi2_nopower): Adjust.\n+\t(nabs_power, nabs_nopower): Likewise.\n+\t(mulsi3, mulsi3_mq, mulsi3_no_mq, mulsi3_mq_internal1):\n+\tLikewise.  Delete anonymous post-reload splitter.\n+\t(mulsi3_no_mq_internal1): rename to...\n+\t(mulsi3_internal1): New define_insn.\n+\t(mulsi3_mq_internal2, mulsi3_no_mq_internal2, mulsi3_internal2):\n+\tLikewise.\n+\t(divmodsi4, divmodsi4_internal, udiv<mode>3, udivsi3_mq,\n+\tudivsi3_no_mq, udivsi3, div<mode>3, divsi3_mq, div<mode>3_no_mq,\n+\tudivmodsi4_normal, udivmodsi4_tests, udivmodsi4): Likewise.\n+\t(mulh_call, mull_call, divss_call, divus_call, quoss_call,\n+\tquous_call): Likewise.\n+\t(maskir_internal1, maskir_internal2, maskir_internal3,\n+\tmaskir_internal4, maskir_internal5, maskir_internal6,\n+\tmaskir_internal7, maskir_internal8): Delete.\n+\t(ashlsi3, ashlsi3_power, ashlsi3_no_power): Adjust.\n+\t(anonymous sl insn patterns): Delete.\n+\t(lshrsi3, lshrsi3_power, lshrsi3_no_power): Adjust.\n+\t(lshrsi3_64): Adjust.\n+\t(anonymous sr insn patterns): Delete.\n+\t(anonymous rrib insn patterns): Delete.\n+\t(ashrsi3, ashrsi3_power, ashrsi3_no_power): Adjust.\n+\t(anonymous sra insn patterns): Delete.\n+\t(sqrtsf2, sqrtdf2, sqrtdf2_fpr): Adjust.\n+\t(fix_trunc<mode>si2, fix_trunc<mode>si2_internal,\n+\tfctiwz_<mode>): Adjust.\n+\t(mulsidi3, mulsidi3_mq, mulsidi3_no_mq, umulsidi3, umulsidi3_mq,\n+\tumulsidi3_no_mq, smulsi3_highpart, smulsi3_highpart_mq,\n+\tsmulsi3_highpart_no_mq, umulsi3_highpart, umulsi3_highpart_mq,\n+\tumulsi3_highpart_no_mq): Adjust.\n+\t(ashldi3_power, lshrdi3_power, ashrdi3_power): Delete.\n+\t(ashrdi3_no_power, ashldi3, ashldi3_internal1,\n+\tlshrdi3_internal1): Adjust.\n+\t(fix_trunctfsi2, fix_trunctfsi2_fprs): Adjust.\n+\t(movti_power): Delete.\n+\t(movti_string): Adjust.\n+\t(stmsi8, stmsi7, stmsi6, stmsi5, stmsi4, stmsi3): Adjust.\n+\t(stmsi8_power, stmsi7_power, stmsi6_power, stmsi5_power,\n+\tstmsi4_power, stmsi3_power): Delete.\n+\t(anonymous movmemsi insn patterns): Adjust.\n+\t(lfq_power2, stfq_power2): Delete.\n+\t(eq<mode>, eq<mode>_compare): Adjust.\n+\t(eqsi_power): Delete.\n+\t(ne0si): Adjust.\n+\t(anonymous le, lt, ge, gt insn patterns): Delete.\n+\t* config/rs6000/rs6000.opt (mpower, mno-power, mpower2): Delete.\n+\t* config/rs6000/sysv4.h (TARGET_POWER): Delete.\n+\t* config/rs6000/t-aix43 (MULTILIB_OPTIONS, MULTILIB_DIRNAMES,\n+\tMULTILIB_MATCHES): Adjust.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Delete\n+\t-mpower, -mno-power, -mpower2, -mno-power2 documentation.\n+\tDelete -mcpu=power and -mcpu=power2 documentation.\n+\n 2012-07-27  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/601.md: New file."}, {"sha": "407e1cce11ec198646f7dda5075c0c5db175b0f0", "filename": "gcc/common/config/rs6000/rs6000-common.c", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.c?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,7 +1,5 @@\n /* Common hooks for IBM RS/6000.\n-   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999,\n-   2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1991-2012 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -83,12 +81,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \n   switch (code)\n     {\n-    case OPT_mno_power:\n-      opts->x_target_flags &= ~(MASK_POWER | MASK_POWER2\n-\t\t\t\t| MASK_MULTIPLE | MASK_STRING);\n-      opts_set->x_target_flags |= (MASK_POWER | MASK_POWER2\n-\t\t\t\t   | MASK_MULTIPLE | MASK_STRING);\n-      break;\n     case OPT_mno_powerpc:\n       opts->x_target_flags &= ~(MASK_POWERPC | MASK_PPC_GPOPT\n \t\t\t\t| MASK_PPC_GFXOPT | MASK_POWERPC64);\n@@ -143,24 +135,6 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t}\n       break;\n \n-    case OPT_mpower:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n-\t  opts_set->x_target_flags |= (MASK_MULTIPLE | MASK_STRING);\n-\t}\n-      break;\n-\n-    case OPT_mpower2:\n-      if (value == 1)\n-\t{\n-\t  opts->x_target_flags |= (MASK_POWER | MASK_MULTIPLE | MASK_STRING);\n-\t  opts_set->x_target_flags |= (MASK_POWER\n-\t\t\t\t       | MASK_MULTIPLE\n-\t\t\t\t       | MASK_STRING);\n-\t}\n-      break;\n-\n     case OPT_mpowerpc_gpopt:\n     case OPT_mpowerpc_gfxopt:\n       if (value == 1)"}, {"sha": "9388dd0794ddcd0fb2814012ed5cf50c41959887", "filename": "gcc/config/rs6000/aix43.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix43.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix43.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix43.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -22,14 +22,8 @@\n /* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control in TARGET_OPTION_OVERRIDE.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n@@ -55,14 +49,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: %{!maix64: \\\n-  %{mpower: %{!mpower2: -mpwr}} \\\n-  %{mpower2: -mpwr2} \\\n   %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n   %{mpowerpc64: -mppc64} \\\n   %{!mpower*: %{!mpowerpc*: %(asm_default)}}}} \\\n %{mcpu=common: -mcom} \\\n-%{mcpu=power: -mpwr} \\\n-%{mcpu=power2: -mpwr2} \\\n %{mcpu=power3: -m620} \\\n %{mcpu=power4: -m620} \\\n %{mcpu=powerpc: -mppc} \\"}, {"sha": "372e78114bea19b307dee310d930d3f76fce6fb4", "filename": "gcc/config/rs6000/aix51.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix51.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix51.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix51.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -22,14 +22,8 @@\n /* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control in TARGET_OPTION_OVERRIDE.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n@@ -49,14 +43,10 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef ASM_CPU_SPEC\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: %{!maix64: \\\n-  %{mpower: %{!mpower2: -mpwr}} \\\n-  %{mpower2: -mpwr2} \\\n   %{mpowerpc*: %{!mpowerpc64: -mppc}} \\\n   %{mpowerpc64: -mppc64} \\\n   %{!mpower*: %{!mpowerpc*: %(asm_default)}}}} \\\n %{mcpu=common: -mcom} \\\n-%{mcpu=power: -mpwr} \\\n-%{mcpu=power2: -mpwr2} \\\n %{mcpu=power3: -m620} \\\n %{mcpu=power4: -m620} \\\n %{mcpu=powerpc: -mppc} \\"}, {"sha": "206b9fea08f52492dd001ca6e9395029a59fb768", "filename": "gcc/config/rs6000/aix52.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix52.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix52.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix52.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,7 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.2.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2002-2012 Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n    This file is part of GCC.\n@@ -23,14 +22,8 @@\n /* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control in TARGET_OPTION_OVERRIDE.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n@@ -113,9 +106,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  PROCESSOR_DEFAULT64\n #define PROCESSOR_DEFAULT64 PROCESSOR_POWER4\n \n-#undef  TARGET_POWER\n-#define TARGET_POWER 0\n-\n /* AIX does not support Altivec.  */\n #undef  TARGET_ALTIVEC\n #define TARGET_ALTIVEC 0"}, {"sha": "44ad5cf020f925737be1f9690c3f1f8dae45c424", "filename": "gcc/config/rs6000/aix53.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix53.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix53.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix53.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,7 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V5.3.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2002-2012 Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n    This file is part of GCC.\n@@ -23,14 +22,8 @@\n /* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control in TARGET_OPTION_OVERRIDE.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n@@ -119,9 +112,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  PROCESSOR_DEFAULT64\n #define PROCESSOR_DEFAULT64 PROCESSOR_POWER5\n \n-#undef  TARGET_POWER\n-#define TARGET_POWER 0\n-\n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are\n    defaults for this target and thus do not need to be handled"}, {"sha": "1000e112caf9548f41c7ad2e7f545d2182e3e5d6", "filename": "gcc/config/rs6000/aix61.h", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix61.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Faix61.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix61.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,7 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for IBM RS/6000 POWER running AIX V6.1.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+   Copyright (C) 2002-2012 Free Software Foundation, Inc.\n    Contributed by David Edelsohn (edelsohn@gnu.org).\n \n    This file is part of GCC.\n@@ -23,14 +22,8 @@\n /* The macro SUBTARGET_OVERRIDE_OPTIONS is provided for subtargets, to\n    get control in TARGET_OPTION_OVERRIDE.  */\n \n-#define NON_POWERPC_MASKS (MASK_POWER | MASK_POWER2)\n #define SUBTARGET_OVERRIDE_OPTIONS\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  if (TARGET_64BIT && (target_flags & NON_POWERPC_MASKS))\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      target_flags &= ~NON_POWERPC_MASKS;\t\t\t\t\\\n-      warning (0, \"-maix64 and POWER architecture are incompatible\");\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n   if (TARGET_64BIT && ! TARGET_POWERPC64)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       target_flags |= MASK_POWERPC64;\t\t\t\t\t\\\n@@ -120,9 +113,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef  PROCESSOR_DEFAULT64\n #define PROCESSOR_DEFAULT64 PROCESSOR_POWER7\n \n-#undef  TARGET_POWER\n-#define TARGET_POWER 0\n-\n /* Define this macro as a C expression for the initializer of an\n    array of string to tell the driver program which options are\n    defaults for this target and thus do not need to be handled"}, {"sha": "92cd698df9c9ab8fc54587f6d0a4027b19f65ec2", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,6 +1,5 @@\n /* Target definitions for PowerPC running Darwin (Mac OS X).\n-   Copyright (C) 1997, 2000, 2001, 2003, 2004, 2005, 2006, 2007, 2008, 2010,\n-   2011, 2012 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2012 Free Software Foundation, Inc.\n    Contributed by Apple Computer Inc.\n \n    This file is part of GCC.\n@@ -285,8 +284,6 @@ extern int darwin_emit_branch_islands;\n                       | MASK_PPC_GFXOPT)\n \n /* Darwin only runs on PowerPC, so short-circuit POWER patterns.  */\n-#undef  TARGET_POWER\n-#define TARGET_POWER 0\n #undef  TARGET_IEEEQUAD\n #define TARGET_IEEEQUAD 0\n "}, {"sha": "68b5257299e3b29e72f65a2802c21ecc0bef102e", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -373,8 +373,6 @@ static const struct asm_name asm_names[] = {\n #else\n   { \"common\",\t\"-mcom\" },\n   { \"cell\",\t\"-mcell\" },\n-  { \"power\",\t\"-mpwr\" },\n-  { \"power2\",\t\"-mpwrx\" },\n   { \"power3\",\t\"-mppc64\" },\n   { \"power4\",\t\"-mpower4\" },\n   { \"power5\",\t\"%(asm_cpu_power5)\" },\n@@ -420,12 +418,9 @@ static const struct asm_name asm_names[] = {\n   { \"e300c3\",\t\"-me300\" },\n   { \"e500mc\",\t\"-me500mc\" },\n   { NULL,\t\"\\\n-%{mpower: %{!mpower2: -mpwr}} \\\n-%{mpower2: -mpwrx} \\\n %{mpowerpc64*: -mppc64} \\\n %{!mpowerpc64*: %{mpowerpc*: -mppc}} \\\n-%{mno-power: %{!mpowerpc*: -mcom}} \\\n-%{!mno-power: %{!mpower*: %(asm_default)}}\" },\n+%{!mpowerpc*: -mcom}\" },\n #endif\n };\n "}, {"sha": "c6d344d4601e068f878865f24311ba8b96c8b916", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,6 +1,5 @@\n-/* Subroutines for the C front end on the POWER and PowerPC architectures.\n-   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011\n-   Free Software Foundation, Inc.\n+/* Subroutines for the C front end on the PowerPC architecture.\n+   Copyright (C) 2002-2012 Free Software Foundation, Inc.\n \n    Contributed by Zack Weinberg <zack@codesourcery.com>\n    and Paolo Bonzini <bonzini@gnu.org>\n@@ -294,10 +293,6 @@ rs6000_target_modify_macros (bool define_p, int flags, unsigned bu_mask)\n \t     (unsigned) flags, bu_mask);\n \n   /* target_flags based options.  */\n-  if ((flags & MASK_POWER2) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR2\");\n-  else if ((flags & MASK_POWER) != 0)\n-    rs6000_define_or_undefine_macro (define_p, \"_ARCH_PWR\");\n   if ((flags & MASK_POWERPC) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"_ARCH_PPC\");\n   if ((flags & MASK_PPC_GPOPT) != 0)\n@@ -353,7 +348,7 @@ rs6000_cpu_cpp_builtins (cpp_reader *pfile)\n \n   /* _ARCH_COM does not fit in the framework of target_modify_macros, so handle\n      it specially.  */\n-  if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)\n+  if (! TARGET_POWERPC)\n     builtin_define (\"_ARCH_COM\");\n   if (TARGET_FRE)\n     builtin_define (\"__RECIP__\");"}, {"sha": "5d76f6a434c67465473fb9029d627a53d7140182", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -55,7 +55,7 @@ RS6000_CPU (\"476fp\", PROCESSOR_PPC476,\n \t    | MASK_FPRND | MASK_CMPB | MASK_MULHW | MASK_DLMZB)\n RS6000_CPU (\"505\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK)\n RS6000_CPU (\"601\", PROCESSOR_PPC601,\n-\t    MASK_POWER | POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING)\n+\t    POWERPC_BASE_MASK | MASK_MULTIPLE | MASK_STRING)\n RS6000_CPU (\"602\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n RS6000_CPU (\"603\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n RS6000_CPU (\"603e\", PROCESSOR_PPC603, POWERPC_BASE_MASK | MASK_PPC_GFXOPT)\n@@ -102,9 +102,6 @@ RS6000_CPU (\"G5\", PROCESSOR_POWER4,\n \t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)\n RS6000_CPU (\"titan\", PROCESSOR_TITAN,\n \t    POWERPC_BASE_MASK | MASK_MULHW | MASK_DLMZB)\n-RS6000_CPU (\"power\", PROCESSOR_POWER, MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n-RS6000_CPU (\"power2\", PROCESSOR_POWER,\n-\t    MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING)\n RS6000_CPU (\"power3\", PROCESSOR_PPC630,\n \t    POWERPC_BASE_MASK | MASK_PPC_GFXOPT | MASK_POWERPC64)\n RS6000_CPU (\"power4\", PROCESSOR_POWER4,"}, {"sha": "26e700fe864f410c21f0a800b1fa03d9279d6016", "filename": "gcc/config/rs6000/rs6000-tables.opt", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-tables.opt?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -159,38 +159,32 @@ EnumValue\n Enum(rs6000_cpu_opt_value) String(titan) Value(43)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power) Value(44)\n+Enum(rs6000_cpu_opt_value) String(power3) Value(44)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power2) Value(45)\n+Enum(rs6000_cpu_opt_value) String(power4) Value(45)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power3) Value(46)\n+Enum(rs6000_cpu_opt_value) String(power5) Value(46)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power4) Value(47)\n+Enum(rs6000_cpu_opt_value) String(power5+) Value(47)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5) Value(48)\n+Enum(rs6000_cpu_opt_value) String(power6) Value(48)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power5+) Value(49)\n+Enum(rs6000_cpu_opt_value) String(power6x) Value(49)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6) Value(50)\n+Enum(rs6000_cpu_opt_value) String(power7) Value(50)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power6x) Value(51)\n+Enum(rs6000_cpu_opt_value) String(powerpc) Value(51)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(power7) Value(52)\n+Enum(rs6000_cpu_opt_value) String(powerpc64) Value(52)\n \n EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc) Value(53)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(powerpc64) Value(54)\n-\n-EnumValue\n-Enum(rs6000_cpu_opt_value) String(rs64) Value(55)\n+Enum(rs6000_cpu_opt_value) String(rs64) Value(53)\n "}, {"sha": "1ed915543bf7d1c36db4eb7a7a0f9d86655e0946", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1467,7 +1467,6 @@ enum {\n    the user's specification.  */\n \n enum {\n-  POWER_MASKS = MASK_POWER | MASK_POWER2 | MASK_MULTIPLE | MASK_STRING,\n   POWERPC_MASKS = (POWERPC_BASE_MASK | MASK_PPC_GPOPT | MASK_STRICT_ALIGN\n \t\t   | MASK_PPC_GFXOPT | MASK_POWERPC64 | MASK_ALTIVEC\n \t\t   | MASK_MFCRF | MASK_POPCNTB | MASK_FPRND | MASK_MULHW\n@@ -2417,7 +2416,7 @@ rs6000_option_override_internal (bool global_init_p)\n       rs6000_pointer_size = 32;\n     }\n \n-  set_masks = POWER_MASKS | POWERPC_MASKS | MASK_SOFT_FLOAT;\n+  set_masks = POWERPC_MASKS | MASK_SOFT_FLOAT;\n #ifdef OS_MISSING_POWERPC64\n   if (OS_MISSING_POWERPC64)\n     set_masks &= ~MASK_POWERPC64;\n@@ -6525,10 +6524,9 @@ rs6000_conditional_register_usage (void)\n   if (TARGET_DEBUG_TARGET)\n     fprintf (stderr, \"rs6000_conditional_register_usage called\\n\");\n \n-  /* Set MQ register fixed (already call_used) if not POWER\n-     architecture (PPC601) so that it will not be allocated.  */\n-  if (! TARGET_POWER)\n-    fixed_regs[64] = 1;\n+  /* Set MQ register fixed (already call_used) so that it will not be\n+     allocated.  */\n+  fixed_regs[64] = 1;\n \n   /* 64-bit AIX and Linux reserve GPR13 for thread-private data.  */\n   if (TARGET_64BIT)\n@@ -7200,17 +7198,6 @@ rs6000_emit_move (rtx dest, rtx source, enum machine_mode mode)\n \n     case TImode:\n       rs6000_eliminate_indexed_memrefs (operands);\n-\n-      if (TARGET_POWER)\n-\t{\n-\t  emit_insn (gen_rtx_PARALLEL (VOIDmode,\n-\t\t       gen_rtvec (2,\n-\t\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t       operands[0], operands[1]),\n-\t\t\t\t  gen_rtx_CLOBBER (VOIDmode,\n-\t\t\t\t\t\t   gen_rtx_SCRATCH (SImode)))));\n-\t  return;\n-\t}\n       break;\n \n     default:\n@@ -12624,8 +12611,7 @@ rs6000_common_init_builtins (void)\n static void\n rs6000_init_libfuncs (void)\n {\n-  if (DEFAULT_ABI != ABI_V4 && TARGET_XCOFF\n-      && !TARGET_POWER2 && !TARGET_POWERPC)\n+  if (DEFAULT_ABI != ABI_V4 && TARGET_XCOFF && !TARGET_POWERPC)\n     {\n       /* AIX library routines for float->int conversion.  */\n       set_conv_libfunc (sfix_optab, SImode, DFmode, \"__itrunc\");\n@@ -12682,7 +12668,7 @@ rs6000_init_libfuncs (void)\n       set_optab_libfunc (neg_optab, TFmode, \"_q_neg\");\n       set_optab_libfunc (smul_optab, TFmode, \"_q_mul\");\n       set_optab_libfunc (sdiv_optab, TFmode, \"_q_div\");\n-      if (TARGET_PPC_GPOPT || TARGET_POWER2)\n+      if (TARGET_PPC_GPOPT)\n \tset_optab_libfunc (sqrt_optab, TFmode, \"_q_sqrt\");\n \n       set_optab_libfunc (eq_optab, TFmode, \"_q_feq\");\n@@ -20236,7 +20222,7 @@ rs6000_output_function_prologue (FILE *file,\n     }\n \n   /* Write .extern for AIX common mode routines, if needed.  */\n-  if (! TARGET_POWER && ! TARGET_POWERPC && ! common_mode_defined)\n+  if (! TARGET_POWERPC && ! common_mode_defined)\n     {\n       fputs (\"\\t.extern __mulh\\n\", file);\n       fputs (\"\\t.extern __mull\\n\", file);\n@@ -22539,7 +22525,7 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                scheduling pass will not know about this latency since\n                the mtctr instruction, which has the latency associated\n                to it, will be generated by reload.  */\n-            return TARGET_POWER ? 5 : 4;\n+            return 4;\n           case TYPE_BRANCH:\n             /* Leave some extra cycles between a compare and its\n                dependent branch, to inhibit expensive mispredicts.  */\n@@ -27351,8 +27337,6 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n #ifdef MASK_STRICT_ALIGN\n   { \"strict-align\",\tMASK_STRICT_ALIGN,\tfalse, false },\n #endif\n-  { \"power\",\t\tMASK_POWER,\t\tfalse, false },\n-  { \"power2\",\t\tMASK_POWER2,\t\tfalse, false },\n   { \"powerpc\",\t\tMASK_POWERPC,\t\tfalse, false },\n   { \"soft-float\",\tMASK_SOFT_FLOAT,\tfalse, false },\n   { \"string\",\t\tMASK_STRING,\t\tfalse, false },"}, {"sha": "612d202960f1c122e99c2245e6fc5434df4bace5", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -101,17 +101,12 @@\n    you make changes here, make them also there.  */\n #define ASM_CPU_SPEC \\\n \"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -mpwr}} \\\n-  %{mpower2: -mpwrx} \\\n   %{mpowerpc64*: -mppc64} \\\n   %{!mpowerpc64*: %{mpowerpc*: -mppc}} \\\n-  %{mno-power: %{!mpowerpc*: -mcom}} \\\n-  %{!mno-power: %{!mpower*: %(asm_default)}}} \\\n+  %{!mpowerpc*: -mcom}} \\\n %{mcpu=native: %(asm_cpu_native)} \\\n %{mcpu=common: -mcom} \\\n %{mcpu=cell: -mcell} \\\n-%{mcpu=power: -mpwr} \\\n-%{mcpu=power2: -mpwrx} \\\n %{mcpu=power3: -mppc64} \\\n %{mcpu=power4: -mpower4} \\\n %{mcpu=power5: %(asm_cpu_power5)} \\\n@@ -332,7 +327,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n     /* The option machinery will define this.  */\n #endif\n \n-#define TARGET_DEFAULT (MASK_POWER | MASK_MULTIPLE | MASK_STRING)\n+#define TARGET_DEFAULT (MASK_MULTIPLE | MASK_STRING)\n \n /* FPU operations supported. \n    Each use of TARGET_SINGLE_FLOAT or TARGET_DOUBLE_FLOAT must \n@@ -348,7 +343,6 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \n /* Define generic processor types based upon current deployment.  */\n #define PROCESSOR_COMMON    PROCESSOR_PPC601\n-#define PROCESSOR_POWER     PROCESSOR_PPC601\n #define PROCESSOR_POWERPC   PROCESSOR_PPC604\n #define PROCESSOR_POWERPC64 PROCESSOR_RS64A\n \n@@ -1877,8 +1871,7 @@ extern unsigned rs6000_pmode;\n \n    The sle and sre instructions which allow SHIFT_COUNT_TRUNCATED\n    have been dropped from the PowerPC architecture.  */\n-\n-#define SHIFT_COUNT_TRUNCATED (TARGET_POWER ? 1 : 0)\n+#define SHIFT_COUNT_TRUNCATED 0\n \n /* Adjust the length of an INSN.  LENGTH is the currently-computed length and\n    should be adjusted to reflect any required changes.  This macro is used when"}, {"sha": "166ec60f8ff2fa829f162ca0521e8a324b5ccd6f", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 137, "deletions": 2013, "changes": 2150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -661,8 +661,6 @@\n {\n   if (TARGET_POWERPC)\n     emit_insn (gen_extendqisi2_ppc (operands[0], operands[1]));\n-  else if (TARGET_POWER)\n-    emit_insn (gen_extendqisi2_power (operands[0], operands[1]));\n   else\n     emit_insn (gen_extendqisi2_no_power (operands[0], operands[1]));\n   DONE;\n@@ -727,28 +725,14 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqisi2_power\"\n-  [(parallel [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-\t      (clobber (scratch:SI))])\n-   (parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))\n-\t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n (define_expand \"extendqisi2_no_power\"\n   [(set (match_dup 2)\n \t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n \t\t   (const_int 24)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ashiftrt:SI (match_dup 2)\n \t\t     (const_int 24)))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"\n { operands[1] = gen_lowpart (SImode, operands[1]);\n   operands[2] = gen_reg_rtx (SImode); }\")\n@@ -828,8 +812,6 @@\n {\n   if (TARGET_POWERPC)\n     emit_insn (gen_extendqihi2_ppc (operands[0], operands[1]));\n-  else if (TARGET_POWER)\n-    emit_insn (gen_extendqihi2_power (operands[0], operands[1]));\n   else\n     emit_insn (gen_extendqihi2_no_power (operands[0], operands[1]));\n   DONE;\n@@ -894,29 +876,14 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_expand \"extendqihi2_power\"\n-  [(parallel [(set (match_dup 2)\n-\t\t   (ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (const_int 24)))\n-\t      (clobber (scratch:SI))])\n-   (parallel [(set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n-\t\t   (ashiftrt:SI (match_dup 2)\n-\t\t\t\t(const_int 24)))\n-\t      (clobber (scratch:SI))])]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[0] = gen_lowpart (SImode, operands[0]);\n-  operands[1] = gen_lowpart (SImode, operands[1]);\n-  operands[2] = gen_reg_rtx (SImode); }\")\n-\n (define_expand \"extendqihi2_no_power\"\n   [(set (match_dup 2)\n \t(ashift:SI (match_operand:QI 1 \"gpc_reg_operand\" \"\")\n \t\t   (const_int 24)))\n    (set (match_operand:HI 0 \"gpc_reg_operand\" \"\")\n \t(ashiftrt:SI (match_dup 2)\n \t\t     (const_int 24)))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"\n { operands[0] = gen_lowpart (SImode, operands[0]);\n   operands[1] = gen_lowpart (SImode, operands[1]);\n@@ -1921,11 +1888,6 @@\n     }\n }\")\n \n-;; For SMIN, SMAX, UMIN, and UMAX, we use DEFINE_EXPAND's that involve a doz[i]\n-;; instruction and some auxiliary computations.  Then we just have a single\n-;; DEFINE_INSN for doz[i] and the define_splits to make them if made by\n-;; combine.\n-\n (define_expand \"sminsi3\"\n   [(set (match_dup 3)\n \t(if_then_else:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -1934,32 +1896,14 @@\n \t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(minus:SI (match_dup 2) (match_dup 3)))]\n-  \"TARGET_POWER || TARGET_ISEL\"\n+  \"TARGET_ISEL\"\n   \"\n {\n-  if (TARGET_ISEL)\n-    {\n-      operands[2] = force_reg (SImode, operands[2]);\n-      rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]);\n-      DONE;\n-    }\n-\n-  operands[3] = gen_reg_rtx (SImode);\n+  operands[2] = force_reg (SImode, operands[2]);\n+  rs6000_emit_minmax (operands[0], SMIN, operands[1], operands[2]);\n+  DONE;\n }\")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(smin:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWER\"\n-  [(set (match_dup 3)\n-\t(if_then_else:SI (gt:SI (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n-   (set (match_dup 0) (minus:SI (match_dup 2) (match_dup 3)))]\n-  \"\")\n-\n (define_expand \"smaxsi3\"\n   [(set (match_dup 3)\n \t(if_then_else:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -1968,31 +1912,14 @@\n \t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (match_dup 3) (match_dup 1)))]\n-  \"TARGET_POWER || TARGET_ISEL\"\n+  \"TARGET_ISEL\"\n   \"\n {\n-  if (TARGET_ISEL)\n-    {\n-      operands[2] = force_reg (SImode, operands[2]);\n-      rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]);\n-      DONE;\n-    }\n-  operands[3] = gen_reg_rtx (SImode);\n+  operands[2] = force_reg (SImode, operands[2]);\n+  rs6000_emit_minmax (operands[0], SMAX, operands[1], operands[2]);\n+  DONE;\n }\")\n \n-(define_split\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(smax:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWER\"\n-  [(set (match_dup 3)\n-\t(if_then_else:SI (gt:SI (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n-   (set (match_dup 0) (plus:SI (match_dup 3) (match_dup 1)))]\n-  \"\")\n-\n (define_expand \"uminsi3\"\n   [(set (match_dup 3) (xor:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t      (match_dup 5)))\n@@ -2003,17 +1930,11 @@\n \t\t\t\t       (minus:SI (match_dup 4) (match_dup 3))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(minus:SI (match_dup 2) (match_dup 3)))]\n-  \"TARGET_POWER || TARGET_ISEL\"\n+  \"TARGET_ISEL\"\n   \"\n {\n-  if (TARGET_ISEL)\n-    {\n-      rs6000_emit_minmax (operands[0], UMIN, operands[1], operands[2]);\n-      DONE;\n-    }\n-  operands[3] = gen_reg_rtx (SImode);\n-  operands[4] = gen_reg_rtx (SImode);\n-  operands[5] = GEN_INT (-2147483647 - 1);\n+  rs6000_emit_minmax (operands[0], UMIN, operands[1], operands[2]);\n+  DONE;\n }\")\n \n (define_expand \"umaxsi3\"\n@@ -2026,104 +1947,13 @@\n \t\t\t\t       (minus:SI (match_dup 4) (match_dup 3))))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(plus:SI (match_dup 3) (match_dup 1)))]\n-  \"TARGET_POWER || TARGET_ISEL\"\n+  \"TARGET_ISEL\"\n   \"\n {\n-  if (TARGET_ISEL)\n-    {\n-      rs6000_emit_minmax (operands[0], UMAX, operands[1], operands[2]);\n-      DONE;\n-    }\n-  operands[3] = gen_reg_rtx (SImode);\n-  operands[4] = gen_reg_rtx (SImode);\n-  operands[5] = GEN_INT (-2147483647 - 1);\n+  rs6000_emit_minmax (operands[0], UMAX, operands[1], operands[2]);\n+  DONE;\n }\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(if_then_else:SI (gt (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t     (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (if_then_else:SI (gt (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t\t  (const_int 0)\n-\t\t\t  (minus:SI (match_dup 2) (match_dup 1)))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2. %3,%1,%2\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (if_then_else:SI (gt (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t\t  (const_int 0)\n-\t\t\t  (minus:SI (match_dup 2) (match_dup 1)))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 3)\n-\t(if_then_else:SI (gt (match_dup 1) (match_dup 2))\n-\t\t\t  (const_int 0)\n-\t\t\t  (minus:SI (match_dup 2) (match_dup 1))))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (if_then_else:SI (gt (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t      (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t\t  (const_int 0)\n-\t\t\t  (minus:SI (match_dup 2) (match_dup 1)))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(if_then_else:SI (gt (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2. %0,%1,%2\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (if_then_else:SI (gt (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t      (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t\t  (const_int 0)\n-\t\t\t  (minus:SI (match_dup 2) (match_dup 1)))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(if_then_else:SI (gt (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(if_then_else:SI (gt (match_dup 1) (match_dup 2))\n-\t\t\t (const_int 0)\n-\t\t\t (minus:SI (match_dup 2) (match_dup 1))))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n ;; We don't need abs with condition code because such comparisons should\n ;; never be done.\n (define_expand \"abssi2\"\n@@ -2137,19 +1967,13 @@\n       emit_insn (gen_abssi2_isel (operands[0], operands[1]));\n       DONE;\n     }\n-  else if (! TARGET_POWER)\n+  else\n     {\n       emit_insn (gen_abssi2_nopower (operands[0], operands[1]));\n       DONE;\n     }\n }\")\n \n-(define_insn \"*abssi2_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWER\"\n-  \"abs %0,%1\")\n-\n (define_insn_and_split \"abs<mode>2_isel\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (abs:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"b\")))\n@@ -2192,25 +2016,19 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n         (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\")))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"! TARGET_POWER && ! TARGET_ISEL\"\n+  \"! TARGET_ISEL\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n    (set (match_dup 0) (xor:SI (match_dup 2) (match_dup 1)))\n    (set (match_dup 0) (minus:SI (match_dup 0) (match_dup 2)))]\n   \"\")\n \n-(define_insn \"*nabs_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWER\"\n-  \"nabs %0,%1\")\n-\n (define_insn_and_split \"*nabs_nopower\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,r\")\n         (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,0\"))))\n    (clobber (match_scratch:SI 2 \"=&r,&r\"))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"#\"\n   \"&& reload_completed\"\n   [(set (match_dup 2) (ashiftrt:SI (match_dup 1) (const_int 31)))\n@@ -2816,41 +2634,11 @@\n   emit_insn (gen_bswapsi2 (dest_low, src_high));\n }\")\n \n-(define_expand \"mulsi3\"\n-  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 2 \"reg_or_short_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_mulsi3_mq (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_mulsi3_no_mq (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_insn \"mulsi3_mq\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))\n-   (clobber (match_scratch:SI 3 \"=q,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {muls|mullw} %0,%1,%2\n-   {muli|mulli} %0,%1,%2\"\n-   [(set (attr \"type\")\n-      (cond [(match_operand:SI 2 \"s8bit_cint_operand\" \"\")\n-\t\t(const_string \"imul3\")\n-             (match_operand:SI 2 \"short_cint_operand\" \"\")\n-\t\t(const_string \"imul2\")]\n-\t(const_string \"imul\")))])\n-\n-(define_insn \"mulsi3_no_mq\"\n+(define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n \t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,I\")))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {muls|mullw} %0,%1,%2\n    {muli|mulli} %0,%1,%2\"\n@@ -2861,43 +2649,13 @@\n \t\t(const_string \"imul2\")]\n \t(const_string \"imul\")))])\n \n-(define_insn \"*mulsi3_mq_internal1\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))\n-   (clobber (match_scratch:SI 4 \"=q,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {muls.|mullw.} %3,%1,%2\n-   #\"\n-  [(set_attr \"type\" \"imul_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-\t(mult:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*mulsi3_no_mq_internal1\"\n+(define_insn \"*mulsi3_internal1\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n \t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {muls.|mullw.} %3,%1,%2\n    #\"\n@@ -2910,54 +2668,22 @@\n \t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWER && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 3)\n \t(mult:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"*mulsi3_mq_internal2\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(mult:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"=q,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {muls.|mullw.} %0,%1,%2\n-   #\"\n-  [(set_attr \"type\" \"imul_compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(mult:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(mult:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*mulsi3_no_mq_internal2\"\n+(define_insn \"*mulsi3_internal2\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n \t(compare:CC (mult:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r\")\n \t\t\t     (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(mult:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {muls.|mullw.} %0,%1,%2\n    #\"\n@@ -2971,7 +2697,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(mult:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 0)\n \t(mult:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -2989,66 +2715,39 @@\n \t\t\t   (match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n \t      (set (match_operand:SI 3 \"register_operand\" \"\")\n \t\t   (mod:SI (match_dup 1) (match_dup 2)))])]\n-  \"TARGET_POWER || (! TARGET_POWER && ! TARGET_POWERPC)\"\n+  \"! TARGET_POWERPC\"\n   \"\n {\n-  if (! TARGET_POWER && ! TARGET_POWERPC)\n-    {\n-      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-      emit_insn (gen_divss_call ());\n-      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-      emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n-      DONE;\n-    }\n+  emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n+  emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n+  emit_insn (gen_divss_call ());\n+  emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n+  emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n+  DONE;\n }\")\n \n-(define_insn \"*divmodsi4_internal\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-   (set (match_operand:SI 3 \"register_operand\" \"=q\")\n-\t(mod:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWER\"\n-  \"divs %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n (define_expand \"udiv<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n         (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n \t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"\")))]\n-  \"TARGET_POWERPC || (! TARGET_POWER && ! TARGET_POWERPC)\"\n+  \"\"\n   \"\n {\n-  if (! TARGET_POWER && ! TARGET_POWERPC)\n+  if (! TARGET_POWERPC)\n     {\n       emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n       emit_insn (gen_quous_call ());\n       emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n       DONE;\n     }\n-  else if (TARGET_POWER)\n-    {\n-      emit_insn (gen_udivsi3_mq (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n }\")\n \n-(define_insn \"udivsi3_mq\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-                 (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWERPC && TARGET_POWER\"\n-  \"divwu %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n-(define_insn \"*udivsi3_no_mq\"\n+(define_insn \"*udivsi3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (udiv:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t  (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC && ! TARGET_POWER\"\n+  \"TARGET_POWERPC\"\n   \"div<wd>u %0,%1,%2\"\n    [(set (attr \"type\")\n       (cond [(match_operand:SI 0 \"\" \"\")\n@@ -3057,9 +2756,8 @@\n \n \n ;; For powers of two we can do srai/aze for divide and then adjust for\n-;; modulus.  If it isn't a power of two, FAIL on POWER so divmodsi4 will be\n-;; used; for PowerPC, force operands into register and do a normal divide;\n-;; for AIX common-mode, use quoss call on register operands.\n+;; modulus.  If it isn't a power of two, force operands into register and do\n+;; a normal divide; for AIX common-mode, use quoss call on register operands.\n (define_expand \"div<mode>3\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"\")\n \t(div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"\")\n@@ -3074,14 +2772,7 @@\n   else if (TARGET_POWERPC)\n     {\n       operands[2] = force_reg (<MODE>mode, operands[2]);\n-      if (TARGET_POWER)\n-\t{\n-\t  emit_insn (gen_divsi3_mq (operands[0], operands[1], operands[2]));\n-\t  DONE;\n-\t}\n     }\n-  else if (TARGET_POWER)\n-    FAIL;\n   else\n     {\n       emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n@@ -3092,20 +2783,11 @@\n     }\n }\")\n \n-(define_insn \"divsi3_mq\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-        (div:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-                (match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWERPC && TARGET_POWER\"\n-  \"divw %0,%1,%2\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n (define_insn \"*div<mode>3_no_mq\"\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n         (div:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t (match_operand:GPR 2 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWERPC && ! TARGET_POWER\"\n+  \"TARGET_POWERPC\"\n   \"div<wd> %0,%1,%2\"\n   [(set (attr \"type\")\n      (cond [(match_operand:SI 0 \"\" \"\")\n@@ -3206,63 +2888,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(udiv:SI\n-\t (plus:DI (ashift:DI\n-\t\t   (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t\t   (const_int 32))\n-\t\t  (zero_extend:DI (match_operand:SI 4 \"register_operand\" \"2\")))\n-\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))\n-   (set (match_operand:SI 2 \"register_operand\" \"=*q\")\n-\t(umod:SI\n-\t (plus:DI (ashift:DI\n-\t\t   (zero_extend:DI (match_dup 1)) (const_int 32))\n-\t\t  (zero_extend:DI (match_dup 4)))\n-\t (match_dup 3)))]\n-  \"TARGET_POWER\"\n-  \"div %0,%1,%3\"\n-  [(set_attr \"type\" \"idiv\")])\n-\n-;; To do unsigned divide we handle the cases of the divisor looking like a\n-;; negative number.  If it is a constant that is less than 2**31, we don't\n-;; have to worry about the branches.  So make a few subroutines here.\n-;;\n-;; First comes the normal case.\n-(define_expand \"udivmodsi4_normal\"\n-  [(set (match_dup 4) (const_int 0))\n-   (parallel [(set (match_operand:SI 0 \"\" \"\")\n-\t\t   (udiv:SI (plus:DI (ashift:DI (zero_extend:DI (match_dup 4))\n-\t\t\t\t\t\t(const_int 32))\n-\t\t\t\t     (zero_extend:DI (match_operand:SI 1 \"\" \"\")))\n-\t\t\t    (match_operand:SI 2 \"\" \"\")))\n-\t      (set (match_operand:SI 3 \"\" \"\")\n-\t\t   (umod:SI (plus:DI (ashift:DI (zero_extend:DI (match_dup 4))\n-\t\t\t\t\t\t(const_int 32))\n-\t\t\t\t     (zero_extend:DI (match_dup 1)))\n-\t\t\t    (match_dup 2)))])]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[4] = gen_reg_rtx (SImode); }\")\n-\n-;; This handles the branches.\n-(define_expand \"udivmodsi4_tests\"\n-  [(set (match_operand:SI 0 \"\" \"\") (const_int 0))\n-   (set (match_operand:SI 3 \"\" \"\") (match_operand:SI 1 \"\" \"\"))\n-   (set (match_dup 5) (compare:CCUNS (match_dup 1) (match_operand:SI 2 \"\" \"\")))\n-   (set (pc) (if_then_else (ltu (match_dup 5) (const_int 0))\n-\t\t\t   (label_ref (match_operand:SI 4 \"\" \"\")) (pc)))\n-   (set (match_dup 0) (const_int 1))\n-   (set (match_dup 3) (minus:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 6) (compare:CC (match_dup 2) (const_int 0)))\n-   (set (pc) (if_then_else (lt (match_dup 6) (const_int 0))\n-\t\t\t   (label_ref (match_dup 4)) (pc)))]\n-  \"TARGET_POWER\"\n-  \"\n-{ operands[5] = gen_reg_rtx (CCUNSmode);\n-  operands[6] = gen_reg_rtx (CCmode);\n-}\")\n-\n (define_expand \"udivmodsi4\"\n   [(parallel [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t\t   (udiv:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n@@ -3272,39 +2897,17 @@\n   \"\"\n   \"\n {\n-  rtx label = 0;\n-\n-  if (! TARGET_POWER)\n-    {\n-      if (! TARGET_POWERPC)\n-        {\n-\t  emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n-\t  emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n-\t  emit_insn (gen_divus_call ());\n-\t  emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n-\t  emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n-\t  DONE;\n-        }\n-      else\n-        FAIL;\n-    }\n-\n-  if (GET_CODE (operands[2]) != CONST_INT || INTVAL (operands[2]) < 0)\n+  if (! TARGET_POWERPC)\n     {\n-      operands[2] = force_reg (SImode, operands[2]);\n-      label = gen_label_rtx ();\n-      emit (gen_udivmodsi4_tests (operands[0], operands[1], operands[2],\n-\t\t\t\t  operands[3], label));\n+      emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n+      emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n+      emit_insn (gen_divus_call ());\n+      emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n+      emit_move_insn (operands[3], gen_rtx_REG (SImode, 4));\n+      DONE;\n     }\n   else\n-    operands[2] = force_reg (SImode, operands[2]);\n-\n-  emit (gen_udivmodsi4_normal (operands[0], operands[1], operands[2],\n-\t\t\t       operands[3]));\n-  if (label)\n-    emit_label (label);\n-\n-  DONE;\n+    FAIL;\n }\")\n \n ;; AIX architecture-independent common-mode multiply (DImode),\n@@ -3319,7 +2922,7 @@\n \t\t\t       (sign_extend:DI (reg:SI 4)))\n \t\t      (const_int 32))))\n    (clobber (reg:SI LR_REGNO))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __mulh\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -3329,7 +2932,7 @@\n \t\t (sign_extend:DI (reg:SI 4))))\n    (clobber (reg:SI LR_REGNO))\n    (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __mull\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -3340,7 +2943,7 @@\n \t(mod:SI (reg:SI 3) (reg:SI 4)))\n    (clobber (reg:SI LR_REGNO))\n    (clobber (reg:SI 0))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __divss\"\n   [(set_attr \"type\" \"idiv\")])\n \n@@ -3353,15 +2956,15 @@\n    (clobber (reg:SI 0))\n    (clobber (match_scratch:CC 0 \"=x\"))\n    (clobber (reg:CC CR1_REGNO))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __divus\"\n   [(set_attr \"type\" \"idiv\")])\n \n (define_insn \"quoss_call\"\n   [(set (reg:SI 3)\n \t(div:SI (reg:SI 3) (reg:SI 4)))\n    (clobber (reg:SI LR_REGNO))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __quoss\"\n   [(set_attr \"type\" \"idiv\")])\n \n@@ -3372,7 +2975,7 @@\n    (clobber (reg:SI 0))\n    (clobber (match_scratch:CC 0 \"=x\"))\n    (clobber (reg:CC CR1_REGNO))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC\"\n+  \"! TARGET_POWERPC\"\n   \"bla __quous\"\n   [(set_attr \"type\" \"idiv\")])\n \f\n@@ -3881,198 +3484,6 @@\n \t(compare:CC (match_dup 0)\n \t\t    (const_int 0)))]\n   \"\")\n-\n-;; maskir insn.  We need four forms because things might be in arbitrary\n-;; orders.  Don't define forms that only set CR fields because these\n-;; would modify an input register.\n-\n-(define_insn \"*maskir_internal1\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n-\t\t(and:SI (match_dup 2)\n-\t\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWER\"\n-  \"maskir %0,%3,%2\")\n-\n-(define_insn \"*maskir_internal2\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))\n-\t\t(and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_dup 2))))]\n-  \"TARGET_POWER\"\n-  \"maskir %0,%3,%2\")\n-\n-(define_insn \"*maskir_internal3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 3 \"gpc_reg_operand\" \"r\"))\n-\t\t(and:SI (not:SI (match_dup 2))\n-\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))))]\n-  \"TARGET_POWER\"\n-  \"maskir %0,%3,%2\")\n-\n-(define_insn \"*maskir_internal4\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ior:SI (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-\t\t(and:SI (not:SI (match_dup 2))\n-\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"0\"))))]\n-  \"TARGET_POWER\"\n-  \"maskir %0,%3,%2\")\n-\n-(define_insn \"*maskir_internal5\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\"))\n-\t\t (and:SI (match_dup 2)\n-\t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 2) (match_dup 3))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   maskir. %0,%3,%2\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (and:SI (match_dup 2)\n-\t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 2) (match_dup 3))))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 2) (match_dup 3))))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*maskir_internal6\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\"))\n-\t\t (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_dup 2)))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 3) (match_dup 2))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   maskir. %0,%3,%2\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (not:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_dup 2)))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 3) (match_dup 2))))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ior:SI (and:SI (not:SI (match_dup 2)) (match_dup 1))\n-\t\t(and:SI (match_dup 3) (match_dup 2))))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*maskir_internal7\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t\t (and:SI (not:SI (match_dup 2))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ior:SI (and:SI (match_dup 2) (match_dup 3))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   maskir. %0,%3,%2\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (match_operand:SI 2 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t\t (and:SI (not:SI (match_dup 2))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ior:SI (and:SI (match_dup 2) (match_dup 3))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ior:SI (and:SI (match_dup 2) (match_dup 3))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"*maskir_internal8\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"r,r\"))\n-\t\t (and:SI (not:SI (match_dup 2))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"0,0\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ior:SI (and:SI (match_dup 3) (match_dup 2))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   maskir. %0,%3,%2\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"4,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ior:SI (and:SI (match_operand:SI 3 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"gpc_reg_operand\" \"\"))\n-\t\t (and:SI (not:SI (match_dup 2))\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"\")))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ior:SI (and:SI (match_dup 3) (match_dup 2))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(ior:SI (and:SI (match_dup 3) (match_dup 2))\n-\t\t(and:SI (not:SI (match_dup 2)) (match_dup 1))))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n \f\n ;; Rotate and shift insns, in all their variants.  These support shifts,\n ;; field inserts and extracts, and various combinations thereof.\n@@ -4833,38 +4244,11 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-;; Note that we use \"sle.\" instead of \"sl.\" so that we can set\n-;; SHIFT_COUNT_TRUNCATED.\n-\n-(define_expand \"ashlsi3\"\n-  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_ashlsi3_power (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_ashlsi3_no_power (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_insn \"ashlsi3_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))\n-   (clobber (match_scratch:SI 3 \"=q,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   sle %0,%1,%2\n-   {sli|slwi} %0,%1,%h2\")\n-\n-(define_insn \"ashlsi3_no_power\"\n+(define_insn \"ashlsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {sl|slw} %0,%1,%2\n    {sli|slwi} %0,%1,%h2\"\n@@ -4881,45 +4265,13 @@\n    {sli|slwi} %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))\n-   (clobber (match_scratch:SI 4 \"=q,X,q,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   sle. %3,%1,%2\n-   {sli.|slwi.} %3,%1,%h2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-\t(ashift:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n-  \"! TARGET_POWER && TARGET_32BIT\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sl.|slw.} %3,%1,%2\n    {sli.|slwi.} %3,%1,%h2\n@@ -4934,56 +4286,22 @@\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWER && TARGET_32BIT && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 3)\n \t(ashift:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(ashift:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"=q,X,q,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   sle. %0,%1,%2\n-   {sli.|slwi.} %0,%1,%h2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ashift:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(ashift:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (ashift:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n \t\t\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && TARGET_32BIT\"\n+  \"TARGET_32BIT\"\n   \"@\n    {sl.|slw.} %0,%1,%2\n    {sli.|slwi.} %0,%1,%h2\n@@ -4999,7 +4317,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ashift:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && TARGET_32BIT && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(ashift:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -5080,38 +4398,11 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-;; The AIX assembler mis-handles \"sri x,x,0\", so write that case as\n-;; \"sli x,x,0\".\n-(define_expand \"lshrsi3\"\n-  [(use (match_operand:SI 0 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-   (use (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_lshrsi3_power (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_lshrsi3_no_power (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_insn \"lshrsi3_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n-\t(lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,i\")))\n-   (clobber (match_scratch:SI 3 \"=q,X,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-  sre %0,%1,%2\n-  mr %0,%1\n-  {s%A2i|s%A2wi} %0,%1,%h2\")\n-\n-(define_insn \"lshrsi3_no_power\"\n+(define_insn \"lshrsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r\")\n \t(lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i\")))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n   mr %0,%1\n   {sr|srw} %0,%1,%2\n@@ -5129,47 +4420,13 @@\n   {sri|srwi} %0,%1,%h2\"\n   [(set_attr \"type\" \"var_shift_rotate,shift\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,i,r,O,i\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,X,r,r,X,r\"))\n-   (clobber (match_scratch:SI 4 \"=q,X,X,q,X,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-  sre. %3,%1,%2\n-  mr. %1,%1\n-  {s%A2i.|s%A2wi.} %3,%1,%h2\n-  #\n-  #\n-  #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,4,8,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 3)\n-\t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n \t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i,O,r,i\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"=X,r,r,X,r,r\"))]\n-  \"! TARGET_POWER && TARGET_32BIT\"\n+  \"TARGET_32BIT\"\n   \"@\n    mr. %1,%1\n    {sr.|srw.} %3,%1,%2\n@@ -5186,58 +4443,22 @@\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n    (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWER && TARGET_32BIT && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 3)\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,i,r,O,i\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n-\t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"=q,X,X,q,X,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-  sre. %0,%1,%2\n-  mr. %0,%1\n-  {s%A2i.|s%A2wi.} %0,%1,%h2\n-  #\n-  #\n-  #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,4,8,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"\"\n   [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,x,?y,?y,?y\")\n \t(compare:CC (lshiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r,r,r\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"O,r,i,O,r,i\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r,r\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && TARGET_32BIT\"\n+  \"TARGET_32BIT\"\n   \"@\n    mr. %0,%1\n    {sr.|srw.} %0,%1,%2\n@@ -5255,7 +4476,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && TARGET_32BIT && reload_completed\"\n+  \"TARGET_32BIT && reload_completed\"\n   [(set (match_dup 0)\n \t(lshiftrt:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -5494,64 +4715,11 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t(ashiftrt:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t     (const_int 31)))]\n-  \"TARGET_POWER\"\n-  \"rrib %0,%1,%2\")\n-\n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t(lshiftrt:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t     (const_int 31)))]\n-  \"TARGET_POWER\"\n-  \"rrib %0,%1,%2\")\n-\n-(define_insn \"\"\n-  [(set (zero_extract:SI (match_operand:SI 0 \"gpc_reg_operand\" \"+r\")\n-\t\t\t (const_int 1)\n-\t\t\t (match_operand:SI 1 \"gpc_reg_operand\" \"r\"))\n-\t(zero_extract:SI (match_operand:SI 2 \"gpc_reg_operand\" \"r\")\n-\t\t\t (const_int 1)\n-\t\t\t (const_int 0)))]\n-  \"TARGET_POWER\"\n-  \"rrib %0,%1,%2\")\n-\n-(define_expand \"ashrsi3\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    emit_insn (gen_ashrsi3_power (operands[0], operands[1], operands[2]));\n-  else\n-    emit_insn (gen_ashrsi3_no_power (operands[0], operands[1], operands[2]));\n-  DONE;\n-}\")\n-\n-(define_insn \"ashrsi3_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))\n-   (clobber (match_scratch:SI 3 \"=q,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   srea %0,%1,%2\n-   {srai|srawi} %0,%1,%h2\"\n-  [(set_attr \"type\" \"shift\")])\n-\n-(define_insn \"ashrsi3_no_power\"\n+(define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i\")))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {sra|sraw} %0,%1,%2\n    {srai|srawi} %0,%1,%h2\"\n@@ -5573,104 +4741,38 @@\n \t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))\n-   (clobber (match_scratch:SI 4 \"=q,X,q,X\"))]\n-  \"TARGET_POWER\"\n+   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n+  \"\"\n   \"@\n-   srea. %3,%1,%2\n+   {sra.|sraw.} %3,%1,%2\n    {srai.|srawi.} %3,%1,%h2\n    #\n    #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n+  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n    (set_attr \"length\" \"4,4,8,8\")])\n \n (define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n+  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n \t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n \t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 3)\n+   (clobber (match_scratch:SI 3 \"\"))]\n+  \"reload_completed\"\n+  [(set (match_dup 3)\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n    (set (match_dup 0)\n \t(compare:CC (match_dup 3)\n \t\t    (const_int 0)))]\n   \"\")\n \n (define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"=r,r,r,r\"))]\n-  \"! TARGET_POWER\"\n-  \"@\n-   {sra.|sraw.} %3,%1,%2\n-   {srai.|srawi.} %3,%1,%h2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"var_delayed_compare,delayed_compare,var_delayed_compare,delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_micro_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"! TARGET_POWER && reload_completed\"\n-  [(set (match_dup 3)\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 3)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"=q,X,q,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   srea. %0,%1,%2\n-   {srai.|srawi.} %0,%1,%h2\n-   #\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"4,4,8,8\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"\"))\n-\t\t    (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 4))])\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n+  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,x,?y,?y\")\n \t(compare:CC (ashiftrt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n \t\t\t\t (match_operand:SI 2 \"reg_or_cint_operand\" \"r,i,r,i\"))\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER\"\n+  \"\"\n   \"@\n    {sra.|sraw.} %0,%1,%2\n    {srai.|srawi.} %0,%1,%h2\n@@ -5725,7 +4827,7 @@\n \t\t    (const_int 0)))\n    (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))]\n-  \"! TARGET_POWER && reload_completed\"\n+  \"reload_completed\"\n   [(set (match_dup 0)\n \t(ashiftrt:SI (match_dup 1) (match_dup 2)))\n    (set (match_dup 3)\n@@ -5988,7 +5090,7 @@\n (define_expand \"sqrtsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2 || TARGET_XILINX_FPU)\n+  \"(TARGET_PPC_GPOPT || TARGET_XILINX_FPU)\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_SINGLE_FLOAT\n    && !TARGET_SIMPLE_FPU\"\n   \"\")\n@@ -6001,14 +5103,6 @@\n   \"fsqrts %0,%1\"\n   [(set_attr \"type\" \"ssqrt\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n-\t(sqrt:SF (match_operand:SF 1 \"gpc_reg_operand\" \"f\")))]\n-  \"TARGET_POWER2 && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_SINGLE_FLOAT && !TARGET_SIMPLE_FPU\"\n-  \"fsqrt %0,%1\"\n-  [(set_attr \"type\" \"dsqrt\")])\n-\n (define_insn \"*rsqrtsf_internal1\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n \t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")]\n@@ -6379,15 +5473,13 @@\n (define_expand \"sqrtdf2\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"\")\n \n (define_insn \"*sqrtdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d\")\n \t(sqrt:DF (match_operand:DF 1 \"gpc_reg_operand\" \"d\")))]\n-  \"(TARGET_PPC_GPOPT || TARGET_POWER2) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\n+  \"TARGET_PPC_GPOPT && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n    && !VECTOR_UNIT_VSX_P (DFmode)\"\n   \"fsqrt %0,%1\"\n   [(set_attr \"type\" \"dsqrt\")])\n@@ -6809,7 +5901,7 @@\n (define_expand \"fix_trunc<mode>si2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"\")))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT\n    && ((TARGET_FPRS && <TARGET_FLOAT>) || <E500_CONVERT>)\"\n   \"\n {\n@@ -6880,8 +5972,7 @@\n \t(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d,<rreg>\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=1,d\"))\n    (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o,o\"))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"#\"\n   \"\"\n   [(pc)]\n@@ -6992,8 +6083,7 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=d\")\n \t(unspec:DI [(fix:SI (match_operand:SFDF 1 \"gpc_reg_operand\" \"d\"))]\n \t\t   UNSPEC_FCTIWZ))]\n-  \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS \n-   && TARGET_DOUBLE_FLOAT\"\n+  \"TARGET_POWERPC && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\"\n   \"{fcirz|fctiwz} %0,%1\"\n   [(set_attr \"type\" \"fp\")])\n \n@@ -7460,7 +6550,7 @@\n   \"! TARGET_POWERPC64\"\n   \"\n {\n-  if (! TARGET_POWER && ! TARGET_POWERPC)\n+  if (! TARGET_POWERPC)\n     {\n       emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n@@ -7476,28 +6566,13 @@\n \t}\n       DONE;\n     }\n-  else if (TARGET_POWER)\n-    {\n-      emit_insn (gen_mulsidi3_mq (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n }\")\n \n-(define_insn \"mulsidi3_mq\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r\")\n-\t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWER\"\n-  \"mul %0,%1,%2\\;mfmq %L0\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"*mulsidi3_no_mq\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (sign_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t (sign_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWER && ! TARGET_POWERPC64\"\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n   \"*\n {\n   return (WORDS_BIG_ENDIAN)\n@@ -7527,40 +6602,11 @@\n   operands[4] = operand_subword (operands[0], 1 - endian, 0, DImode);\n }\")\n \n-(define_expand \"umulsidi3\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    {\n-      emit_insn (gen_umulsidi3_mq (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"umulsidi3_mq\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWERPC && TARGET_POWER\"\n-  \"*\n-{\n-  return (WORDS_BIG_ENDIAN)\n-    ? \\\"mulhwu %0,%1,%2\\;mullw %L0,%1,%2\\\"\n-    : \\\"mulhwu %L0,%1,%2\\;mullw %0,%1,%2\\\";\n-}\"\n-  [(set_attr \"type\" \"imul\")\n-   (set_attr \"length\" \"8\")])\n-\n-(define_insn \"*umulsidi3_no_mq\"\n+(define_insn \"umulsidi3\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r\")\n \t(mult:DI (zero_extend:DI (match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n \t\t (zero_extend:DI (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))))]\n-  \"TARGET_POWERPC && ! TARGET_POWER && ! TARGET_POWERPC64\"\n+  \"TARGET_POWERPC && ! TARGET_POWERPC64\"\n   \"*\n {\n   return (WORDS_BIG_ENDIAN)\n@@ -7601,34 +6647,16 @@\n   \"\"\n   \"\n {\n-  if (! TARGET_POWER && ! TARGET_POWERPC)\n+  if (! TARGET_POWERPC)\n     {\n       emit_move_insn (gen_rtx_REG (SImode, 3), operands[1]);\n       emit_move_insn (gen_rtx_REG (SImode, 4), operands[2]);\n       emit_insn (gen_mulh_call ());\n       emit_move_insn (operands[0], gen_rtx_REG (SImode, 3));\n       DONE;\n     }\n-  else if (TARGET_POWER)\n-    {\n-      emit_insn (gen_smulsi3_highpart_mq (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n }\")\n \n-(define_insn \"smulsi3_highpart_mq\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (sign_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (sign_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWER\"\n-  \"mul %0,%1,%2\"\n-  [(set_attr \"type\" \"imul\")])\n-\n (define_insn \"*smulsi3_highpart_no_mq\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(truncate:SI\n@@ -7637,7 +6665,7 @@\n \t\t\t       (sign_extend:DI\n \t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_POWERPC && ! TARGET_POWER\"\n+  \"TARGET_POWERPC\"\n   \"mulhw %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n@@ -7650,27 +6678,7 @@\n \t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"\")))\n \t\t      (const_int 32))))]\n   \"TARGET_POWERPC\"\n-  \"\n-{\n-  if (TARGET_POWER)\n-    {\n-      emit_insn (gen_umulsi3_highpart_mq (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-}\")\n-\n-(define_insn \"umulsi3_highpart_mq\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(truncate:SI\n-\t (lshiftrt:DI (mult:DI (zero_extend:DI\n-\t\t\t\t(match_operand:SI 1 \"gpc_reg_operand\" \"%r\"))\n-\t\t\t       (zero_extend:DI\n-\t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n-\t\t      (const_int 32))))\n-   (clobber (match_scratch:SI 3 \"=q\"))]\n-  \"TARGET_POWERPC && TARGET_POWER\"\n-  \"mulhwu %0,%1,%2\"\n-  [(set_attr \"type\" \"imul\")])\n+  \"\")\n \n (define_insn \"*umulsi3_highpart_no_mq\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n@@ -7680,58 +6688,17 @@\n \t\t\t       (zero_extend:DI\n \t\t\t\t(match_operand:SI 2 \"gpc_reg_operand\" \"r\")))\n \t\t      (const_int 32))))]\n-  \"TARGET_POWERPC && ! TARGET_POWER\"\n+  \"TARGET_POWERPC\"\n   \"mulhwu %0,%1,%2\"\n   [(set_attr \"type\" \"imul\")])\n \n-;; If operands 0 and 2 are in the same register, we have a problem.  But\n-;; operands 0 and 1 (the usual case) can be in the same register.  That's\n-;; why we have the strange constraints below.\n-(define_insn \"ashldi3_power\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,&r\")\n-\t(ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,0,r\")\n-\t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"M,i,r,r\")))\n-   (clobber (match_scratch:SI 3 \"=X,q,q,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {sli|slwi} %0,%L1,%h2\\;{cal %L0,0(0)|li %L0,0}\n-   sl%I2q %L0,%L1,%h2\\;sll%I2q %0,%1,%h2\n-   sl%I2q %L0,%L1,%h2\\;sll%I2q %0,%1,%h2\n-   sl%I2q %L0,%L1,%h2\\;sll%I2q %0,%1,%h2\"\n-  [(set_attr \"length\" \"8\")])\n-\n-(define_insn \"lshrdi3_power\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r,r,&r\")\n-\t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r,0,r\")\n-\t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"M,i,r,r\")))\n-   (clobber (match_scratch:SI 3 \"=X,q,q,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {s%A2i|s%A2wi} %L0,%1,%h2\\;{cal %0,0(0)|li %0,0}\n-   sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\n-   sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\n-   sr%I2q %0,%1,%h2\\;srl%I2q %L0,%L1,%h2\"\n-  [(set_attr \"length\" \"8\")])\n-\n ;; Shift by a variable amount is too complex to be worth open-coding.  We\n ;; just handle shifts by constants.\n-(define_insn \"ashrdi3_power\"\n-  [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,r\")\n-\t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))\n-   (clobber (match_scratch:SI 3 \"=X,q\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   {srai|srawi} %0,%1,31\\;{srai|srawi} %L0,%1,%h2\n-   sraiq %0,%1,%h2\\;srliq %L0,%L1,%h2\"\n-  [(set_attr \"type\" \"shift\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"ashrdi3_no_power\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=&r,&r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"r,r\")\n \t\t     (match_operand:SI 2 \"const_int_operand\" \"M,i\")))]\n-  \"TARGET_32BIT && !TARGET_POWERPC64 && !TARGET_POWER && WORDS_BIG_ENDIAN\"\n+  \"TARGET_32BIT && !TARGET_POWERPC64 && WORDS_BIG_ENDIAN\"\n   \"@\n    {srai|srawi} %0,%1,31\\;{srai|srawi} %L0,%1,%h2\n    {sri|srwi} %L0,%L1,%h2\\;insrwi %L0,%1,%h2,0\\;{srai|srawi} %0,%1,%h2\"\n@@ -8288,19 +7255,8 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(ashift:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t   (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n-  \"TARGET_POWERPC64 || TARGET_POWER\"\n-  \"\n-{\n-  if (TARGET_POWERPC64)\n-    ;\n-  else if (TARGET_POWER)\n-    {\n-      emit_insn (gen_ashldi3_power (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\")\n+  \"TARGET_POWERPC64\"\n+  \"\")\n \n (define_insn \"*ashldi3_internal1\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n@@ -8528,19 +7484,8 @@\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"\")\n \t(lshiftrt:DI (match_operand:DI 1 \"gpc_reg_operand\" \"\")\n \t\t     (match_operand:SI 2 \"reg_or_cint_operand\" \"\")))]\n-  \"TARGET_POWERPC64 || TARGET_POWER\"\n-  \"\n-{\n-  if (TARGET_POWERPC64)\n-    ;\n-  else if (TARGET_POWER)\n-    {\n-      emit_insn (gen_lshrdi3_power (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n-  else\n-    FAIL;\n-}\")\n+  \"TARGET_POWERPC64\"\n+  \"\")\n \n (define_insn \"*lshrdi3_internal1\"\n   [(set (match_operand:DI 0 \"gpc_reg_operand\" \"=r,r\")\n@@ -8621,11 +7566,6 @@\n {\n   if (TARGET_POWERPC64)\n     ;\n-  else if (TARGET_POWER && GET_CODE (operands[2]) == CONST_INT)\n-    {\n-      emit_insn (gen_ashrdi3_power (operands[0], operands[1], operands[2]));\n-      DONE;\n-    }\n   else if (TARGET_32BIT && GET_CODE (operands[2]) == CONST_INT\n \t   && WORDS_BIG_ENDIAN)\n     {\n@@ -10011,11 +8951,8 @@\n (define_expand \"fix_trunctfsi2\"\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n \t(fix:SI (match_operand:TF 1 \"gpc_reg_operand\" \"\")))]\n-  \"!TARGET_IEEEQUAD\n-   && (TARGET_POWER2 || TARGET_POWERPC)\n-   && TARGET_HARD_FLOAT\n-   && (TARGET_FPRS || TARGET_E500_DOUBLE)\n-   && TARGET_LONG_DOUBLE_128\"\n+  \"!TARGET_IEEEQUAD && TARGET_POWERPC && TARGET_HARD_FLOAT\n+   && (TARGET_FPRS || TARGET_E500_DOUBLE) && TARGET_LONG_DOUBLE_128\"\n {\n   if (TARGET_E500_DOUBLE)\n     emit_insn (gen_spe_fix_trunctfsi2 (operands[0], operands[1]));\n@@ -10031,8 +8968,7 @@\n \t      (clobber (match_dup 3))\n \t      (clobber (match_dup 4))\n \t      (clobber (match_dup 5))])]\n-  \"!TARGET_IEEEQUAD\n-   && (TARGET_POWER2 || TARGET_POWERPC)\n+  \"!TARGET_IEEEQUAD && TARGET_POWERPC\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n {\n   operands[2] = gen_reg_rtx (DFmode);\n@@ -10299,52 +9235,12 @@\n }\")\n \f\n ;; TImode is similar, except that we usually want to compute the address into\n-;; a register and use lsi/stsi (the exception is during reload).  MQ is also\n-;; clobbered in stsi for POWER, so we need a SCRATCH for it.\n-\n-;; We say that MQ is clobbered in the last alternative because the first\n-;; alternative would never get used otherwise since it would need a reload\n-;; while the 2nd alternative would not.  We put memory cases first so they\n-;; are preferred.  Otherwise, we'd try to reload the output instead of\n-;; giving the SCRATCH mq.\n-\n-(define_insn \"*movti_power\"\n-  [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,Y,????r,????r,????r,r\")\n-\t(match_operand:TI 1 \"input_operand\" \"r,r,Q,Y,r,n\"))\n-   (clobber (match_scratch:SI 2 \"=q,q#X,X,X,X,X\"))]\n-  \"TARGET_POWER && ! TARGET_POWERPC64\n-   && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n-  \"*\n-{\n-  switch (which_alternative)\n-    {\n-    default:\n-      gcc_unreachable ();\n-\n-    case 0:\n-      if (TARGET_STRING)\n-        return \\\"{stsi|stswi} %1,%P0,16\\\";\n-    case 1:\n-      return \\\"#\\\";\n-    case 2:\n-      /* If the address is not used in the output, we can use lsi.  Otherwise,\n-\t fall through to generating four loads.  */\n-      if (TARGET_STRING\n-\t  && ! reg_overlap_mentioned_p (operands[0], operands[1]))\n-\treturn \\\"{lsi|lswi} %0,%P1,16\\\";\n-      /* ... fall through ...  */\n-    case 3:\n-    case 4:\n-    case 5:\n-      return \\\"#\\\";\n-    }\n-}\"\n-  [(set_attr \"type\" \"store,store,load,load,*,*\")])\n+;; a register and use lsi/stsi (the exception is during reload).\n \n (define_insn \"*movti_string\"\n   [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,Y,????r,????r,????r,r\")\n \t(match_operand:TI 1 \"input_operand\" \"r,r,Q,Y,r,n\"))]\n-  \"! TARGET_POWER && ! TARGET_POWERPC64\n+  \"! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n {\n@@ -10631,7 +9527,7 @@\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 28)))\n \t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 9\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 9\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n@@ -10653,7 +9549,7 @@\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 24)))\n \t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 8\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 8\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n@@ -10673,7 +9569,7 @@\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 20)))\n \t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 7\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 7\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n@@ -10691,7 +9587,7 @@\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n \t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 6\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 6\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n@@ -10707,7 +9603,7 @@\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n \t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 5\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 5\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n@@ -10721,142 +9617,28 @@\n \t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n      (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n \t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && !TARGET_POWER && XVECLEN (operands[0], 0) == 4\"\n+  \"TARGET_STRING && XVECLEN (operands[0], 0) == 4\"\n   \"{stsi|stswi} %2,%1,%O0\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")])\n+\f\n+(define_expand \"setmemsi\"\n+  [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n+\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n+\t      (use (match_operand:SI 1 \"\" \"\"))\n+\t      (use (match_operand:SI 3 \"\" \"\"))])]\n+  \"\"\n+  \"\n+{\n+  /* If value to set is not zero, use the library routine.  */\n+  if (operands[2] != const0_rtx)\n+    FAIL;\n \n-(define_insn \"*stmsi8_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n-\t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n-\t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 20)))\n-\t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 24)))\n-\t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 28)))\n-\t  (match_operand:SI 10 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 9\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\n-(define_insn \"*stmsi7_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n-\t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n-\t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 20)))\n-\t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 24)))\n-\t  (match_operand:SI 9 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 8\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\n-(define_insn \"*stmsi6_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n-\t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n-\t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 20)))\n-\t  (match_operand:SI 8 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 7\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\n-(define_insn \"*stmsi5_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n-\t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 16)))\n-\t  (match_operand:SI 7 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 6\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\n-(define_insn \"*stmsi4_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 12)))\n-\t  (match_operand:SI 6 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 5\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\n-(define_insn \"*stmsi3_power\"\n-  [(match_parallel 0 \"store_multiple_operation\"\n-    [(set (mem:SI (match_operand:SI 1 \"gpc_reg_operand\" \"b\"))\n-\t  (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n-     (clobber (match_scratch:SI 3 \"=q\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 4)))\n-\t  (match_operand:SI 4 \"gpc_reg_operand\" \"r\"))\n-     (set (mem:SI (plus:SI (match_dup 1) (const_int 8)))\n-\t  (match_operand:SI 5 \"gpc_reg_operand\" \"r\"))])]\n-  \"TARGET_STRING && TARGET_POWER && XVECLEN (operands[0], 0) == 4\"\n-  \"{stsi|stswi} %2,%1,%O0\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")])\n-\f\n-(define_expand \"setmemsi\"\n-  [(parallel [(set (match_operand:BLK 0 \"\" \"\")\n-\t\t   (match_operand 2 \"const_int_operand\" \"\"))\n-\t      (use (match_operand:SI 1 \"\" \"\"))\n-\t      (use (match_operand:SI 3 \"\" \"\"))])]\n-  \"\"\n-  \"\n-{\n-  /* If value to set is not zero, use the library routine.  */\n-  if (operands[2] != const0_rtx)\n-    FAIL;\n-\n-  if (expand_block_clear (operands))\n-    DONE;\n-  else\n-    FAIL;\n-}\")\n+  if (expand_block_clear (operands))\n+    DONE;\n+  else\n+    FAIL;\n+}\")\n \n ;; String/block move insn.\n ;; Argument 0 is the destination\n@@ -10898,31 +9680,6 @@\n   \"TARGET_STRING\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=&r\"))\n-   (clobber (reg:SI  6))\n-   (clobber (reg:SI  7))\n-   (clobber (reg:SI  8))\n-   (clobber (reg:SI  9))\n-   (clobber (reg:SI 10))\n-   (clobber (reg:SI 11))\n-   (clobber (reg:SI 12))\n-   (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER\n-   && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32)\n-       || INTVAL (operands[2]) == 0)\n-   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n-   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 12)\n-   && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (mem:BLK (match_operand:P 0 \"gpc_reg_operand\" \"b\"))\n \t(mem:BLK (match_operand:P 1 \"gpc_reg_operand\" \"b\")))\n@@ -10937,7 +9694,7 @@\n    (clobber (reg:SI 11))\n    (clobber (reg:SI 12))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER\n+  \"TARGET_STRING\n    && ((INTVAL (operands[2]) > 24 && INTVAL (operands[2]) < 32)\n        || INTVAL (operands[2]) == 0)\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 12)\n@@ -10966,28 +9723,6 @@\n   \"TARGET_STRING\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=&r\"))\n-   (clobber (reg:SI  6))\n-   (clobber (reg:SI  7))\n-   (clobber (reg:SI  8))\n-   (clobber (reg:SI  9))\n-   (clobber (reg:SI 10))\n-   (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER\n-   && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 24\n-   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n-   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n-   && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (mem:BLK (match_operand:P 0 \"gpc_reg_operand\" \"b\"))\n \t(mem:BLK (match_operand:P 1 \"gpc_reg_operand\" \"b\")))\n@@ -11000,7 +9735,7 @@\n    (clobber (reg:SI  9))\n    (clobber (reg:SI 10))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER\n+  \"TARGET_STRING\n    && INTVAL (operands[2]) > 16 && INTVAL (operands[2]) <= 32\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 10)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 10)\n@@ -11026,26 +9761,6 @@\n   \"TARGET_STRING\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_operand:SI 4 \"gpc_reg_operand\" \"=&r\"))\n-   (clobber (reg:SI 6))\n-   (clobber (reg:SI 7))\n-   (clobber (reg:SI 8))\n-   (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER\n-   && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n-   && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n-   && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n-   && REGNO (operands[4]) == 5\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (mem:BLK (match_operand:P 0 \"gpc_reg_operand\" \"b\"))\n \t(mem:BLK (match_operand:P 1 \"gpc_reg_operand\" \"b\")))\n@@ -11056,7 +9771,7 @@\n    (clobber (reg:SI 7))\n    (clobber (reg:SI 8))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER\n+  \"TARGET_STRING\n    && INTVAL (operands[2]) > 8 && INTVAL (operands[2]) <= 16\n    && (REGNO (operands[0]) < 5 || REGNO (operands[0]) > 8)\n    && (REGNO (operands[1]) < 5 || REGNO (operands[1]) > 8)\n@@ -11077,28 +9792,14 @@\n   \"TARGET_STRING && ! TARGET_POWERPC64\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_scratch:DI 4 \"=&r\"))\n-   (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER && ! TARGET_POWERPC64\n-   && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n \t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:DI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER && ! TARGET_POWERPC64\n+  \"TARGET_STRING && ! TARGET_POWERPC64\n    && INTVAL (operands[2]) > 4 && INTVAL (operands[2]) <= 8\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n@@ -11116,29 +9817,14 @@\n   \"TARGET_STRING\"\n   \"\")\n \n-(define_insn \"\"\n-  [(set (mem:BLK (match_operand:SI 0 \"gpc_reg_operand\" \"b\"))\n-\t(mem:BLK (match_operand:SI 1 \"gpc_reg_operand\" \"b\")))\n-   (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n-   (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n-   (clobber (match_scratch:SI 4 \"=&r\"))\n-   (clobber (match_scratch:SI 5 \"=q\"))]\n-  \"TARGET_STRING && TARGET_POWER\n-   && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n-  \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n-  [(set_attr \"type\" \"store_ux\")\n-   (set_attr \"cell_micro\" \"always\")\n-   (set_attr \"length\" \"8\")])\n-\n (define_insn \"\"\n   [(set (mem:BLK (match_operand:P 0 \"gpc_reg_operand\" \"b\"))\n \t(mem:BLK (match_operand:P 1 \"gpc_reg_operand\" \"b\")))\n    (use (match_operand:SI 2 \"immediate_operand\" \"i\"))\n    (use (match_operand:SI 3 \"immediate_operand\" \"i\"))\n    (clobber (match_scratch:SI 4 \"=&r\"))\n    (clobber (match_scratch:SI 5 \"=X\"))]\n-  \"TARGET_STRING && ! TARGET_POWER\n-   && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n+  \"TARGET_STRING && INTVAL (operands[2]) > 0 && INTVAL (operands[2]) <= 4\"\n   \"{lsi|lswi} %4,%1,%2\\;{stsi|stswi} %4,%0,%2\"\n   [(set_attr \"type\" \"store_ux\")\n    (set_attr \"cell_micro\" \"always\")\n@@ -11438,50 +10124,6 @@\n    stfdu %3,%2(%0)\"\n   [(set_attr \"type\" \"fpstore_ux,fpstore_u\")])\n \n-;; Peephole to convert two consecutive FP loads or stores into lfq/stfq.\n-\n-(define_insn \"*lfq_power2\"\n-  [(set (match_operand:V2DF 0 \"gpc_reg_operand\" \"=f\")\n-\t(match_operand:V2DF 1 \"memory_operand\" \"\"))]\n-  \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"lfq%U1%X1 %0,%1\")\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n-\t(match_operand:DF 1 \"memory_operand\" \"\"))\n-   (set (match_operand:DF 2 \"gpc_reg_operand\" \"\")\n-\t(match_operand:DF 3 \"memory_operand\" \"\"))]\n-  \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && registers_ok_for_quad_peep (operands[0], operands[2])\n-   && mems_ok_for_quad_peep (operands[1], operands[3])\"\n-  [(set (match_dup 0)\n-\t(match_dup 1))]\n-  \"operands[1] = widen_memory_access (operands[1], V2DFmode, 0);\n-   operands[0] = gen_rtx_REG (V2DFmode, REGNO (operands[0]));\")\n-\n-(define_insn \"*stfq_power2\"\n-  [(set (match_operand:V2DF 0 \"memory_operand\" \"\")\n-\t(match_operand:V2DF 1 \"gpc_reg_operand\" \"f\"))]\n-  \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS\"\n-  \"stfq%U0%X0 %1,%0\")\n-\n-\n-(define_peephole2\n-  [(set (match_operand:DF 0 \"memory_operand\" \"\")\n-\t(match_operand:DF 1 \"gpc_reg_operand\" \"\"))\n-   (set (match_operand:DF 2 \"memory_operand\" \"\")\n-\t(match_operand:DF 3 \"gpc_reg_operand\" \"\"))]\n-  \"TARGET_POWER2\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && registers_ok_for_quad_peep (operands[1], operands[3])\n-   && mems_ok_for_quad_peep (operands[0], operands[2])\"\n-  [(set (match_dup 0)\n-\t(match_dup 1))]\n-  \"operands[0] = widen_memory_access (operands[0], V2DFmode, 0);\n-   operands[1] = gen_rtx_REG (V2DFmode, REGNO (operands[1]));\")\n \n ;; After inserting conditional returns we can sometimes have\n ;; unnecessary register moves.  Unfortunately we cannot have a\n@@ -13688,9 +12330,9 @@\n   [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n \t(eq:GPR (match_operand:GPR 1 \"gpc_reg_operand\" \"r\")\n \t\t(match_operand:GPR 2 \"scc_eq_operand\" \"<scc_eq_op2>\")))]\n-  \"!TARGET_POWER\"\n+  \"\"\n   \"#\"\n-  \"!TARGET_POWER\"\n+  \"\"\n   [(set (match_dup 0)\n \t(clz:GPR (match_dup 3)))\n    (set (match_dup 0)\n@@ -13725,9 +12367,9 @@\n \t (const_int 0)))\n    (set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(eq:P (match_dup 1) (match_dup 2)))]\n-  \"!TARGET_POWER && optimize_size\"\n+  \"optimize_size\"\n   \"#\"\n-  \"!TARGET_POWER && optimize_size\"\n+  \"optimize_size\"\n   [(set (match_dup 0)\n \t(clz:P (match_dup 4)))\n    (parallel [(set (match_dup 3)\n@@ -13757,21 +12399,6 @@\n     operands[5] = GEN_INT (exact_log2 (GET_MODE_BITSIZE (<MODE>mode)));\n   })\n \n-(define_insn \"*eqsi_power\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r,r\")\n-\t(eq:SI (match_operand:SI 1 \"gpc_reg_operand\" \"%r,r,r,r,r\")\n-\t       (match_operand:SI 2 \"reg_or_cint_operand\" \"r,O,K,L,I\")))\n-   (clobber (match_scratch:SI 3 \"=r,&r,r,r,r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   xor %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   {sfi|subfic} %3,%1,0\\;{ae|adde} %0,%3,%1\n-   {xoril|xori} %0,%1,%b2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   {xoriu|xoris} %0,%1,%u2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\n-   {sfi|subfic} %0,%1,%2\\;{sfi|subfic} %3,%0,0\\;{ae|adde} %0,%3,%0\"\n-  [(set_attr \"type\" \"three,two,three,three,three\")\n-   (set_attr \"length\" \"12,8,12,12,12\")])\n-\n ;; We have insns of the form shown by the first define_insn below.  If\n ;; there is something inside the comparison operation, we must split it.\n (define_split\n@@ -13932,7 +12559,7 @@\n \t(lshiftrt:SI (neg:SI (abs:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n \t\t     (const_int 31)))\n    (clobber (match_scratch:SI 2 \"=&r\"))]\n-  \"! TARGET_POWER && TARGET_32BIT && !TARGET_ISEL\"\n+  \"TARGET_32BIT && !TARGET_ISEL\"\n   \"{ai|addic} %2,%1,-1\\;{sfe|subfe} %0,%2,%1\"\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n@@ -14127,143 +12754,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t       (match_operand:SI 2 \"reg_or_short_operand\" \"r,O\")))\n-   (clobber (match_scratch:SI 3 \"=r,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %3,%2,%1\\;{sfi|subfic} %0,%3,0\\;{ae|adde} %0,%0,%3\n-   {ai|addic} %0,%1,-1\\;{aze|addze} %0,%0\\;{sri|srwi} %0,%0,31\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC\n-\t (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,O,r,O\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r,r,r\")\n-\t(le:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"=r,X,r,X\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %3,%2,%1\\;{sfi|subfic} %0,%3,0\\;{ae.|adde.} %0,%0,%3\n-   {ai|addic} %0,%1,-1\\;{aze|addze} %0,%0\\;{sri.|srwi.} %0,%0,31\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare,delayed_compare,compare,delayed_compare\")\n-   (set_attr \"length\" \"12,12,16,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(le:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t(le:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,O\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\")))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %0,%2,%1\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\n-   {srai|srawi} %0,%1,31\\;{sf|subfc} %0,%1,%0\\;{aze|addze} %0,%3\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC\n-\t (plus:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,O,r,O\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=&r,&r,&r,&r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %4,%2,%1\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n-   {srai|srawi} %4,%1,31\\;{sf|subfc} %4,%1,%4\\;{aze.|addze.} %4,%3\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,12,16,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 4)\n-\t(plus:SI (le:SI (match_dup 1) (match_dup 2))\n-\t\t (match_dup 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 4)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,x,?y,?y\")\n-\t(compare:CC\n-\t (plus:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r,r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,O,r,O\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r,r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r,&r,&r\")\n-\t(plus:SI (le:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %0,%2,%1\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n-   {srai|srawi} %0,%1,31\\;{sf|subfc} %0,%1,%0\\;{aze.|addze.} %0,%3\n-   #\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,12,16,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (le:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:SI (le:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(neg:SI (le:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t       (match_operand:SI 2 \"reg_or_short_operand\" \"r,O\"))))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %0,%2,%1\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\n-   {ai|addic} %0,%1,-1\\;{aze|addze} %0,%0\\;{srai|srawi} %0,%0,31\"\n-  [(set_attr \"length\" \"12\")])\n-\n (define_insn \"*leu<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(leu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n@@ -14469,127 +12959,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t       (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\\;nabs %0,%0\\;{sri|srwi} %0,%0,31\"\n-   [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(lt:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %0,%1,%2\\;nabs %0,%0\\;{sri.|srwi.} %0,%0,31\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(lt:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(lt:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{aze|addze} %0,%3\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %4,%1,%2\\;{ai|addic} %4,%4,-1\\;{aze.|addze.} %4,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 4)\n-\t(plus:SI (lt:SI (match_dup 1) (match_dup 2))\n-\t\t (match_dup 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 4)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (lt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{aze.|addze.} %0,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (lt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:SI (lt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (lt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n-  [(set_attr \"length\" \"12\")])\n-\n (define_insn_and_split \"*ltu<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n \t(ltu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n@@ -14660,131 +13029,6 @@\n   [(set_attr \"type\" \"two\")\n    (set_attr \"length\" \"8\")])\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t       (match_operand:SI 2 \"reg_or_short_operand\" \"rI\")))\n-   (clobber (match_scratch:SI 3 \"=r\"))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %3,%1,%2\\;{sfi|subfic} %0,%3,0\\;{ae|adde} %0,%0,%3\"\n-   [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(ge:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"=r,r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %3,%1,%2\\;{sfi|subfic} %0,%3,0\\;{ae.|adde.} %0,%0,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(ge:SI (match_dup 1) (match_dup 2)))\n-   (clobber (match_scratch:SI 3 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(parallel [(set (match_dup 0)\n-\t\t   (ge:SI (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_dup 3))])\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze|addze} %0,%3\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %4,%1,%2\\;{sfi|subfic} %4,%4,0\\;{aze.|addze.} %4,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 4)\n-\t(plus:SI (ge:SI (match_dup 1) (match_dup 2))\n-\t\t (match_dup 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 4)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"rI,rI\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (ge:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz%I2 %0,%1,%2\\;{sfi|subfic} %0,%0,0\\;{aze.|addze.} %0,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (ge:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:SI (ge:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (ge:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"reg_or_short_operand\" \"rI\"))))]\n-  \"TARGET_POWER\"\n-  \"doz%I2 %0,%1,%2\\;{ai|addic} %0,%0,-1\\;{sfe|subfe} %0,%0,%0\"\n-  [(set_attr \"length\" \"12\")])\n-\n (define_insn \"*geu<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r,r\")\n \t(geu:P (match_operand:P 1 \"gpc_reg_operand\" \"r,r\")\n@@ -15007,45 +13251,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t       (match_operand:SI 2 \"reg_or_short_operand\" \"r\")))]\n-  \"TARGET_POWER\"\n-  \"doz %0,%2,%1\\;nabs %0,%0\\;{sri|srwi} %0,%0,31\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 3 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=r,r\")\n-\t(gt:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %0,%2,%1\\;nabs %0,%0\\;{sri.|srwi.} %0,%0,31\n-   #\"\n-  [(set_attr \"type\" \"delayed_compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 3 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(gt:SI (match_dup 1) (match_dup 2)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(gt:SI (match_dup 1) (match_dup 2)))\n-   (set (match_dup 3)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n (define_insn \"*plus_gt0<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=&r\")\n \t(plus:P (gt:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")\n@@ -15186,87 +13391,6 @@\n \t\t    (const_int 0)))]\n   \"\")\n \n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r\")\n-\t(plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t\t(match_operand:SI 2 \"reg_or_short_operand\" \"r\"))\n-\t\t (match_operand:SI 3 \"gpc_reg_operand\" \"r\")))]\n-  \"TARGET_POWER\"\n-  \"doz %0,%2,%1\\;{ai|addic} %0,%0,-1\\;{aze|addze} %0,%3\"\n-  [(set_attr \"length\" \"12\")])\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,r\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"=&r,&r\"))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %4,%2,%1\\;{ai|addic} %4,%4,-1\\;{aze.|addze.} %4,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (clobber (match_scratch:SI 4 \"\"))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 4)\n-\t(plus:SI (gt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 0)\n-\t(compare:CC (match_dup 4)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:CC 4 \"cc_reg_operand\" \"=x,?y\")\n-\t(compare:CC\n-\t (plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r,r\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"r,r\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"r,r\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"=&r,&r\")\n-\t(plus:SI (gt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER\"\n-  \"@\n-   doz %0,%2,%1\\;{ai|addic} %0,%0,-1\\;{aze.|addze.} %0,%3\n-   #\"\n-  [(set_attr \"type\" \"compare\")\n-   (set_attr \"length\" \"12,16\")])\n-\n-(define_split\n-  [(set (match_operand:CC 4 \"cc_reg_not_cr0_operand\" \"\")\n-\t(compare:CC\n-\t (plus:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t\t (match_operand:SI 2 \"reg_or_short_operand\" \"\"))\n-\t\t  (match_operand:SI 3 \"gpc_reg_operand\" \"\"))\n-\t (const_int 0)))\n-   (set (match_operand:SI 0 \"gpc_reg_operand\" \"\")\n-\t(plus:SI (gt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))]\n-  \"TARGET_POWER && reload_completed\"\n-  [(set (match_dup 0)\n-\t(plus:SI (gt:SI (match_dup 1) (match_dup 2)) (match_dup 3)))\n-   (set (match_dup 4)\n-\t(compare:CC (match_dup 0)\n-\t\t    (const_int 0)))]\n-  \"\")\n-\n-(define_insn \"\"\n-  [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n-\t(neg:SI (gt:SI (match_operand:SI 1 \"gpc_reg_operand\" \"r\")\n-\t\t       (match_operand:SI 2 \"reg_or_short_operand\" \"r\"))))]\n-  \"TARGET_POWER\"\n-  \"doz %0,%2,%1\\;nabs %0,%0\\;{srai|srawi} %0,%0,31\"\n-  [(set_attr \"length\" \"12\")])\n-\n (define_insn_and_split \"*gtu<mode>\"\n   [(set (match_operand:P 0 \"gpc_reg_operand\" \"=r\")\n \t(gtu:P (match_operand:P 1 \"gpc_reg_operand\" \"r\")"}, {"sha": "50917968c21cea584e0868988d82684dd4eda3f9", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -90,18 +90,6 @@ unsigned int rs6000_debug\n TargetSave\n int rs6000_target_flags_explicit\n \n-mpower\n-Target Report RejectNegative Mask(POWER)\n-Use POWER instruction set\n-\n-mno-power\n-Target Report RejectNegative\n-Do not use POWER instruction set\n-\n-mpower2\n-Target Report Mask(POWER2)\n-Use POWER2 instruction set\n-\n mpowerpc\n Target Report RejectNegative Mask(POWERPC)\n Use PowerPC instruction set"}, {"sha": "b9fe92bc6f0f39654c598e4ceca18f4b036524a1", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,7 +1,5 @@\n /* Target definitions for GNU compiler for PowerPC running System V.4\n-   Copyright (C) 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,\n-   2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1995-2012 Free Software Foundation, Inc.\n    Contributed by Cygnus Support.\n \n    This file is part of GCC.\n@@ -228,10 +226,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef\tPROCESSOR_DEFAULT\n #define\tPROCESSOR_DEFAULT PROCESSOR_PPC750\n \n-/* SVR4 only defined for PowerPC, so short-circuit POWER patterns.  */\n-#undef  TARGET_POWER\n-#define TARGET_POWER 0\n-\n #define FIXED_R2 1\n /* System V.4 uses register 13 as a pointer to the small data area,\n    so it is not available to the normal user.  */"}, {"sha": "08b59b9f2e9f77e0fd13eb573dcee6e3992b09a6", "filename": "gcc/config/rs6000/t-aix43", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Ft-aix43", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fconfig%2Frs6000%2Ft-aix43", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ft-aix43?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -20,14 +20,12 @@\n # different processor models\n \n MULTILIB_OPTIONS\t= pthread \\\n-\t\t\t  mcpu=common/mcpu=power/mcpu=powerpc/maix64\n+\t\t\t  mcpu=common/mcpu=powerpc/maix64\n \n MULTILIB_DIRNAMES\t= pthread \\\n-\t\t\t  common power powerpc ppc64\n+\t\t\t  common powerpc ppc64\n \n-MULTILIB_MATCHES\t= mcpu?power=mcpu?power \\\n-\t\t\t  mcpu?power=mcpu?power2 \\\n-\t\t\t  mcpu?powerpc=mcpu?power3 \\\n+MULTILIB_MATCHES\t= mcpu?powerpc=mcpu?power3 \\\n \t\t\t  mcpu?powerpc=mcpu?power4 \\\n \t\t\t  mcpu?powerpc=mcpu?powerpc \\\n \t\t\t  mcpu?powerpc=mcpu?rs64a \\"}, {"sha": "a5b7f824b1170cb690588392f1d6bd14766a2419", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -796,7 +796,6 @@ See RS/6000 and PowerPC Options.\n @gccoptlist{-mcpu=@var{cpu-type} @gol\n -mtune=@var{cpu-type} @gol\n -mcmodel=@var{code-model} @gol\n--mpower  -mno-power  -mpower2  -mno-power2 @gol\n -mpowerpc  -mpowerpc64  -mno-powerpc @gol\n -maltivec  -mno-altivec @gol\n -mpowerpc-gpopt  -mno-powerpc-gpopt @gol\n@@ -16562,11 +16561,7 @@ standard hardware multiplication defined in the RL78 software manual.\n \n These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @table @gcctabopt\n-@item -mpower\n-@itemx -mno-power\n-@itemx -mpower2\n-@itemx -mno-power2\n-@itemx -mpowerpc\n+@item -mpowerpc\n @itemx -mno-powerpc\n @itemx -mpowerpc-gpopt\n @itemx -mno-powerpc-gpopt\n@@ -16590,10 +16585,6 @@ These @samp{-m} options are defined for the IBM RS/6000 and PowerPC:\n @itemx -mno-mfpgpr\n @itemx -mhard-dfp\n @itemx -mno-hard-dfp\n-@opindex mpower\n-@opindex mno-power\n-@opindex mpower2\n-@opindex mno-power2\n @opindex mpowerpc\n @opindex mno-powerpc\n @opindex mpowerpc-gpopt\n@@ -16634,12 +16625,6 @@ determined when configuring GCC@.  Specifying the\n options.  We recommend you use the @option{-mcpu=@var{cpu_type}} option\n rather than the options listed above.\n \n-The @option{-mpower} option allows GCC to generate instructions that\n-are found only in the POWER architecture and to use the MQ register.\n-Specifying @option{-mpower2} implies @option{-power} and also allows GCC\n-to generate instructions that are present in the POWER2 architecture but\n-not the original POWER architecture.\n-\n The @option{-mpowerpc} option allows GCC to generate instructions that\n are found only in the 32-bit subset of the PowerPC architecture.\n Specifying @option{-mpowerpc-gpopt} implies @option{-mpowerpc} and also allows\n@@ -16678,12 +16663,9 @@ The @option{-mpowerpc64} option allows GCC to generate the additional\n and to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to\n @option{-mno-powerpc64}.\n \n-If you specify both @option{-mno-power} and @option{-mno-powerpc}, GCC\n-uses only the instructions in the common subset of both\n-architectures plus some special AIX common-mode calls, and does not use\n-the MQ register.  Specifying both @option{-mpower} and @option{-mpowerpc}\n-permits GCC to use any instruction from either architecture and to\n-allow use of the MQ register; specify this for the Motorola MPC601.\n+If you specify @option{-mno-powerpc}, GCC uses only the instructions\n+in the common subset of both the POWER and PowerPC\n+architectures plus some special AIX common-mode calls.\n \n @item -mnew-mnemonics\n @itemx -mold-mnemonics\n@@ -16714,21 +16696,18 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{860}, @samp{970}, @samp{8540}, @samp{a2}, @samp{e300c2},\n @samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{e5500},\n @samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n-@samp{titan}, @samp{power}, @samp{power2}, @samp{power3},\n-@samp{power4}, @samp{power5}, @samp{power5+}, @samp{power6},\n-@samp{power6x}, @samp{power7}, @samp{common}, @samp{powerpc},\n-@samp{powerpc64}, @samp{rios}, @samp{rios1}, @samp{rios2}, @samp{rsc},\n-and @samp{rs64}.\n+@samp{titan}, @samp{power3}, @samp{power4}, @samp{power5}, @samp{power5+},\n+@samp{power6}, @samp{power6x}, @samp{power7}, @samp{common}, @samp{powerpc},\n+@samp{powerpc64}, and @samp{rs64}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option runs on any POWER or PowerPC processor.\n GCC uses only the instructions in the common subset of both\n architectures, and does not use the MQ register.  GCC assumes a generic\n processor model for scheduling purposes.\n \n-@option{-mcpu=power}, @option{-mcpu=power2}, @option{-mcpu=powerpc}, and\n-@option{-mcpu=powerpc64} specify generic POWER, POWER2, pure 32-bit\n-PowerPC (i.e., not MPC601), and 64-bit PowerPC architecture machine\n+@option{-mcpu=powerpc}, and @option{-mcpu=powerpc64} specify pure 32-bit\n+PowerPC (i.e., not MPC601) and 64-bit PowerPC architecture machine\n types, with an appropriate, generic processor model assumed for\n scheduling purposes.\n \n@@ -16740,7 +16719,7 @@ The @option{-mcpu} options automatically enable or disable the\n following options:\n \n @gccoptlist{-maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple @gol\n--mnew-mnemonics  -mpopcntb -mpopcntd  -mpower  -mpower2  -mpowerpc64 @gol\n+-mnew-mnemonics  -mpopcntb -mpopcntd  -mpowerpc64 @gol\n -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float @gol\n -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx}\n "}, {"sha": "b911d3eda83a20107c7695f6343c32ed8859fbcf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c28a7c245f7e5b681cab65aaf34963ff64dc1061/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c28a7c245f7e5b681cab65aaf34963ff64dc1061", "patch": "@@ -1,3 +1,8 @@\n+2012-07-27  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* gcc.target/powerpc/rs6000-power2-1.c: Delete.\n+\t* gcc.target/powerpc/rs6000-power2-2.c: Delete.\n+\n 2012-07-27  Anna Tikhonova  <anna.tikhonova@intel.com>\n \n \t* gcc.dg/20020201-1.c: Remove declarations for exit, abort,"}, {"sha": "375241ec658c8e5c017f43283cb7a554a11fc9b0", "filename": "gcc/testsuite/gcc.target/powerpc/rs6000-power2-1.c", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3061fa41878613d6ea93b46361991cde217a83e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3061fa41878613d6ea93b46361991cde217a83e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-1.c?ref=f3061fa41878613d6ea93b46361991cde217a83e", "patch": "@@ -1,21 +0,0 @@\n-/* { dg-do compile { target { ilp32 } } } */\n-/* { dg-options \"-O3 -mcpu=power2 -fno-schedule-insns -w -mhard-float\" } */\n-/* This used to ICE as the peephole was not checking to see\n-   if the register is a floating point one (I think this cannot\n-   happen in real life except in this example).  */\n-\n-register volatile double t1 __asm__(\"r14\");\n-register volatile double t2 __asm__(\"r15\");\n-register volatile double t3 __asm__(\"r16\"), t4 __asm__(\"r17\");\n-void t(double *a, double *b)\n-{\n-        t1 = a[-1];\n-        t2 = a[0];\n-        t3 = a[1];\n-        t4 = a[2];\n-        b[-1] = t1;\n-        b[0] = t2;\n-        b[1] = t3;\n-        b[2] = t4;\n-}\n-"}, {"sha": "567ad8c927805392b04d1b20f20f3f314decf63e", "filename": "gcc/testsuite/gcc.target/powerpc/rs6000-power2-2.c", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3061fa41878613d6ea93b46361991cde217a83e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3061fa41878613d6ea93b46361991cde217a83e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Frs6000-power2-2.c?ref=f3061fa41878613d6ea93b46361991cde217a83e", "patch": "@@ -1,22 +0,0 @@\n-/* { dg-do compile { target { powerpc_fprs && ilp32 } } } */\n-/* { dg-options \"-O3 -mcpu=power2 -fno-schedule-insns -w\" } */\n-/* { dg-final { scan-assembler-not \"lfd\" } } */\n-/* { dg-final { scan-assembler-not \"sfd\" } } */\n-/* { dg-final { scan-assembler \"lfq\" } } */\n-/* { dg-final { scan-assembler \"stfq\" } } */\n-\n-register volatile double t1 __asm__(\"fr0\");\n-register volatile double t2 __asm__(\"fr1\");\n-register volatile double t3 __asm__(\"fr2\"), t4 __asm__(\"fr3\");\n-void t(double *a, double *b)\n-{\n-        t1 = a[-1];\n-        t2 = a[0];\n-        t3 = a[1];\n-        t4 = a[2];\n-        b[-1] = t1;\n-        b[0] = t2;\n-        b[1] = t3;\n-        b[2] = t4;\n-}\n-"}]}