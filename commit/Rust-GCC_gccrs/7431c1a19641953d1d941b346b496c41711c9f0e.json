{"sha": "7431c1a19641953d1d941b346b496c41711c9f0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQzMWMxYTE5NjQxOTUzZDFkOTQxYjM0NmI0OTZjNDE3MTFjOWYwZQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2019-01-17T12:34:28Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2019-01-17T12:34:28Z"}, "message": "GCN back-end config\n\nThis patch contains the configuration adjustments needed to enable the GCN\nback-end.\n\nThe new configure check for dlopen is required to allow building the new\ngcn-run tool.  This tool uses libdl to load the HSA runtime libraries, which\nare required to run programs on the GPU.  The tool is disabled if libdl is not\navailable.\n\n2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n\t    Julian Brown  <julian@codesourcery.com>\n\t    Tom de Vries  <tom@codesourcery.com>\n\t    Jan Hubicka  <hubicka@ucw.cz>\n\t    Martin Jambor  <mjambor@suse.cz>\n\n\t* configure.ac: Likewise.\n\t* configure: Regenerate.\n\t* contrib/config-list.mk: Add amdgcn-amdhsa.\n\n\tgcc/\n\t* config.gcc: Add amdgcn*-*-amdhsa configuration.\n\t* configure.ac: Check for dlopen.\n\t* configure: Regenerate.\n\n\nCo-Authored-By: Jan Hubicka <hubicka@ucw.cz>\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Kwok Cheung Yeung <kcy@codesourcery.com>\nCo-Authored-By: Martin Jambor <mjambor@suse.cz>\nCo-Authored-By: Tom de Vries <tom@codesourcery.com>\n\nFrom-SVN: r268024", "tree": {"sha": "ebf4c58ef5c9d46348fb5acae6db010302d1c17f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ebf4c58ef5c9d46348fb5acae6db010302d1c17f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7431c1a19641953d1d941b346b496c41711c9f0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431c1a19641953d1d941b346b496c41711c9f0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7431c1a19641953d1d941b346b496c41711c9f0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7431c1a19641953d1d941b346b496c41711c9f0e/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5326695a6d3585f5c49633813909342098d1714c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5326695a6d3585f5c49633813909342098d1714c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5326695a6d3585f5c49633813909342098d1714c"}], "stats": {"total": 144, "additions": 142, "deletions": 2}, "files": [{"sha": "2cd14ad3921f33750dbdda3ff26b847dc0eaeb7f", "filename": "ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -1,3 +1,14 @@\n+2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\t    Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* configure.ac: Likewise.\n+\t* configure: Regenerate.\n+\t* contrib/config-list.mk: Add amdgcn-amdhsa.\n+\n 2019-01-16  Kewen Lin  <linkw@gcc.gnu.org>\n \n \t* MAINTAINERS (Write After Approval): Add myself."}, {"sha": "adf4fda0f69326a05ae97878d73d2a677d663e04", "filename": "configure", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -3652,6 +3652,8 @@ case \"${target}\" in\n     noconfigdirs=\"$noconfigdirs ld gas gdb gprof\"\n     noconfigdirs=\"$noconfigdirs sim target-rda\"\n     ;;\n+  amdgcn*-*-*)\n+    ;;\n   arm-*-darwin*)\n     noconfigdirs=\"$noconfigdirs ld gas gdb gprof\"\n     noconfigdirs=\"$noconfigdirs sim target-rda\""}, {"sha": "87f2aee050089231bad3e73c5a417d60c4da229c", "filename": "configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -934,6 +934,8 @@ case \"${target}\" in\n     noconfigdirs=\"$noconfigdirs ld gas gdb gprof\"\n     noconfigdirs=\"$noconfigdirs sim target-rda\"\n     ;;\n+  amdgcn*-*-*)\n+    ;;\n   arm-*-darwin*)\n     noconfigdirs=\"$noconfigdirs ld gas gdb gprof\"\n     noconfigdirs=\"$noconfigdirs sim target-rda\""}, {"sha": "69c826e649abfcd89e523d4daaa0e7be9b68ed56", "filename": "contrib/config-list.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/contrib%2Fconfig-list.mk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/contrib%2Fconfig-list.mk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fconfig-list.mk?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -33,6 +33,7 @@ GCC_SRC_DIR=../../gcc\n LIST = aarch64-elf aarch64-linux-gnu aarch64-rtems \\\n   alpha-linux-gnu alpha-netbsd alpha-openbsd \\\n   alpha64-dec-vms alpha-dec-vms \\\n+  amdgcn-amdhsa \\\n   arc-elf32OPT-with-cpu=arc600 arc-elf32OPT-with-cpu=arc700 \\\n   arc-linux-uclibcOPT-with-cpu=arc700 arceb-linux-uclibcOPT-with-cpu=arc700 \\\n   arm-wrs-vxworks arm-netbsdelf \\"}, {"sha": "4cc44d7279cde3d50630504c4f6ad37c7f223276", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -1,3 +1,14 @@\n+2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n+\t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n+\t    Julian Brown  <julian@codesourcery.com>\n+\t    Tom de Vries  <tom@codesourcery.com>\n+\t    Jan Hubicka  <hubicka@ucw.cz>\n+\t    Martin Jambor  <mjambor@suse.cz>\n+\n+\t* config.gcc: Add amdgcn*-*-amdhsa configuration.\n+\t* configure.ac: Check for dlopen.\n+\t* configure: Regenerate.\n+\n 2019-01-17  Andrew Stubbs  <ams@codesourcery.com>\n \t    Kwok Cheung Yeung  <kcy@codesourcery.com>\n \t    Julian Brown  <julian@codesourcery.com>"}, {"sha": "a189cb19f6330247749f57390571bbb13de85aaa", "filename": "gcc/config.gcc", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -326,6 +326,10 @@ alpha*-*-*)\n \tcpu_type=alpha\n \textra_options=\"${extra_options} g.opt\"\n \t;;\n+amdgcn*)\n+\tcpu_type=gcn\n+\tuse_gcc_stdint=wrap\n+\t;;\n am33_2.0-*-linux*)\n \tcpu_type=mn10300\n \t;;\n@@ -1401,6 +1405,25 @@ ft32-*-elf)\n \ttm_file=\"dbxelf.h elfos.h newlib-stdint.h ${tm_file}\"\n \ttmake_file=\"${tmake_file} ft32/t-ft32\"\n \t;;\n+amdgcn-*-amdhsa)\n+\ttm_file=\"elfos.h gcn/gcn-hsa.h gcn/gcn.h newlib-stdint.h\"\n+\ttmake_file=\"gcn/t-gcn-hsa\"\n+\tnative_system_header_dir=/include\n+\textra_modes=gcn/gcn-modes.def\n+\textra_objs=\"${extra_objs} gcn-tree.o\"\n+\textra_gcc_objs=\"driver-gcn.o\"\n+\tcase \"$host\" in\n+\tx86_64*-*-linux-gnu )\n+\t\tif test \"$ac_cv_search_dlopen\" != no; then\n+\t\t\textra_programs=\"${extra_programs} gcn-run\\$(exeext)\"\n+\t\tfi\n+\t\t;;\n+\tesac\n+\tif test x$enable_as_accelerator = xyes; then\n+\t\textra_programs=\"${extra_programs} mkoffload\\$(exeext)\"\n+\t\ttm_file=\"${tm_file} gcn/offload.h\"\n+\tfi\n+\t;;\n moxie-*-elf)\n \tgas=yes\n \tgnu_ld=yes\n@@ -4087,6 +4110,24 @@ case \"${target}\" in\n \t\tesac\n \t\t;;\n \n+\tamdgcn-*-*)\n+\t\tsupported_defaults=\"arch tune\"\n+\n+\t\tfor which in arch tune; do\n+\t\t\teval \"val=\\$with_$which\"\n+\t\t\tcase ${val} in\n+\t\t\t\"\" | carrizo | fiji | gfx900 )\n+\t\t\t\t# OK\n+\t\t\t\t;;\n+\t\t\t*)\n+\t\t\t\techo \"Unknown cpu used in --with-$which=$val.\" 1>&2\n+\t\t\t\texit 1\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\tdone\n+\t\t[ \"x$with_arch\" = x ] && with_arch=fiji\n+\t\t;;\n+\n \thppa*-*-*)\n \t\tsupported_defaults=\"arch schedule\"\n "}, {"sha": "d6a48ef76e722a815543f3e248cb1755e268e249", "filename": "gcc/configure", "status": "modified", "additions": 66, "deletions": 2, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -782,6 +782,7 @@ manext\n LIBICONV_DEP\n LTLIBICONV\n LIBICONV\n+DL_LIB\n LDEXP_LIB\n EXTRA_GCC_LIBS\n GNAT_LIBEXC\n@@ -9735,6 +9736,69 @@ LDEXP_LIB=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n \n \n+# Some systems need dlopen\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing dlopen\" >&5\n+$as_echo_n \"checking for library containing dlopen... \" >&6; }\n+if ${ac_cv_search_dlopen+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char dlopen ();\n+int\n+main ()\n+{\n+return dlopen ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' dl; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_cxx_try_link \"$LINENO\"; then :\n+  ac_cv_search_dlopen=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_dlopen+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_dlopen+:} false; then :\n+\n+else\n+  ac_cv_search_dlopen=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_dlopen\" >&5\n+$as_echo \"$ac_cv_search_dlopen\" >&6; }\n+ac_res=$ac_cv_search_dlopen\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+fi\n+\n+DL_LIB=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+\n+\n # Use <inttypes.h> only if it exists,\n # doesn't clash with <sys/types.h>, declares intmax_t and defines\n # PRId64\n@@ -18582,7 +18646,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18576 \"configure\"\n+#line 18640 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18688,7 +18752,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18682 \"configure\"\n+#line 18746 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "78370352938aa24f0af7f58152dfc76b4f734844", "filename": "gcc/configure.ac", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7431c1a19641953d1d941b346b496c41711c9f0e/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=7431c1a19641953d1d941b346b496c41711c9f0e", "patch": "@@ -1228,6 +1228,14 @@ LDEXP_LIB=\"$LIBS\"\n LIBS=\"$save_LIBS\"\n AC_SUBST(LDEXP_LIB)\n \n+# Some systems need dlopen\n+save_LIBS=\"$LIBS\"\n+LIBS=\n+AC_SEARCH_LIBS(dlopen, dl)\n+DL_LIB=\"$LIBS\"\n+LIBS=\"$save_LIBS\"\n+AC_SUBST(DL_LIB)\n+\n # Use <inttypes.h> only if it exists,\n # doesn't clash with <sys/types.h>, declares intmax_t and defines\n # PRId64"}]}