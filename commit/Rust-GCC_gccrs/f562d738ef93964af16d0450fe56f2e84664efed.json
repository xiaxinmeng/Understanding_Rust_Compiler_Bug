{"sha": "f562d738ef93964af16d0450fe56f2e84664efed", "node_id": "C_kwDOANBUbNoAKGY1NjJkNzM4ZWY5Mzk2NGFmMTZkMDQ1MGZlNTZmMmU4NDY2NGVmZWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-25T08:51:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-25T08:51:51Z"}, "message": "Merge #1149\n\n1149: backend: handle no_mangle attribute r=philberty a=liushuyu\n\n- handle the `no_mangle` attribute\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>", "tree": {"sha": "ab07c3c043235a368fdb295d242df30b06c2d581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab07c3c043235a368fdb295d242df30b06c2d581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f562d738ef93964af16d0450fe56f2e84664efed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiZmEnCRBK7hj4Ov3rIwAAshUIACDu2YzDknbFHMMbehm5hrPe\n4OIuDaHuQIXCcSqWDaCXzCjw1idSHKgQ67ZawQihjEyhK8+33nWZJH0Yt37nR+f6\nGyoOMObhyPZOJA9mru0f0T+QGcIKbYn4NeLgSC6W/O2EEbjSa4QbwzUywu4+1o/G\npSNCK5cMD30rBZFn88oCNagYXJyfEnyEc1I7X54dnEpczi92Z0hkeKd+J/NiZZ8z\nAY/27Gt3H8e2b1egSt1qDYbh6fTjrkjWrCa/loIPes3MwW/XdJukcgKr3K+3gtaZ\nNJMu5D+B5wLitRj0n/aEdEFOMpPwy/uchk/Z2Vzbwdu8HtnMRf2FHiWmy5rOKhw=\n=ICDY\n-----END PGP SIGNATURE-----\n", "payload": "tree ab07c3c043235a368fdb295d242df30b06c2d581\nparent 1286acc34e826039ebc8f09ad36dddc30f726283\nparent a969ab61adebf53d713144936c604ea55100c49d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1650876711 +0000\ncommitter GitHub <noreply@github.com> 1650876711 +0000\n\nMerge #1149\n\n1149: backend: handle no_mangle attribute r=philberty a=liushuyu\n\n- handle the `no_mangle` attribute\n\nCo-authored-by: liushuyu <liushuyu011@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f562d738ef93964af16d0450fe56f2e84664efed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f562d738ef93964af16d0450fe56f2e84664efed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f562d738ef93964af16d0450fe56f2e84664efed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1286acc34e826039ebc8f09ad36dddc30f726283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1286acc34e826039ebc8f09ad36dddc30f726283", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1286acc34e826039ebc8f09ad36dddc30f726283"}, {"sha": "a969ab61adebf53d713144936c604ea55100c49d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a969ab61adebf53d713144936c604ea55100c49d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a969ab61adebf53d713144936c604ea55100c49d"}], "stats": {"total": 76, "additions": 65, "deletions": 11}, "files": [{"sha": "4f55b22f761e1fee08d9d6ee1dc408a365cee57d", "filename": "gcc/rust/backend/rust-compile-base.cc", "status": "modified", "additions": 40, "deletions": 8, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Fbackend%2Frust-compile-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.cc?ref=f562d738ef93964af16d0450fe56f2e84664efed", "patch": "@@ -26,14 +26,21 @@\n \n #include \"fold-const.h\"\n #include \"stringpool.h\"\n+#include \"attribs.h\"\n \n namespace Rust {\n namespace Compile {\n \n+bool inline should_mangle_item (const tree fndecl)\n+{\n+  return lookup_attribute (\"no_mangle\", DECL_ATTRIBUTES (fndecl)) == NULL_TREE;\n+}\n+\n void\n-HIRCompileBase::setup_attributes_on_fndecl (\n-  tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n-  const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs)\n+HIRCompileBase::setup_fndecl (tree fndecl, bool is_main_entry_point,\n+\t\t\t      HIR::Visibility &visibility,\n+\t\t\t      const HIR::FunctionQualifiers &qualifiers,\n+\t\t\t      const AST::AttrVec &attrs)\n {\n   // if its the main fn or pub visibility mark its as DECL_PUBLIC\n   // please see https://github.com/Rust-GCC/gccrs/pull/137\n@@ -58,6 +65,7 @@ HIRCompileBase::setup_attributes_on_fndecl (\n       bool is_cold = attr.get_path ().as_string ().compare (\"cold\") == 0;\n       bool is_link_section\n \t= attr.get_path ().as_string ().compare (\"link_section\") == 0;\n+      bool no_mangle = attr.get_path ().as_string ().compare (\"no_mangle\") == 0;\n       if (is_inline)\n \t{\n \t  handle_inline_attribute_on_fndecl (fndecl, attr);\n@@ -74,6 +82,10 @@ HIRCompileBase::setup_attributes_on_fndecl (\n \t{\n \t  handle_link_section_attribute_on_fndecl (fndecl, attr);\n \t}\n+      else if (no_mangle)\n+\t{\n+\t  handle_no_mangle_attribute_on_fndecl (fndecl, attr);\n+\t}\n     }\n }\n \n@@ -120,6 +132,21 @@ HIRCompileBase::handle_link_section_attribute_on_fndecl (\n   set_decl_section_name (fndecl, msg_str.c_str ());\n }\n \n+void\n+HIRCompileBase::handle_no_mangle_attribute_on_fndecl (\n+  tree fndecl, const AST::Attribute &attr)\n+{\n+  if (attr.has_attr_input ())\n+    {\n+      rust_error_at (attr.get_locus (),\n+\t\t     \"attribute %<no_mangle%> does not accept any arguments\");\n+      return;\n+    }\n+\n+  DECL_ATTRIBUTES (fndecl) = tree_cons (get_identifier (\"no_mangle\"), NULL_TREE,\n+\t\t\t\t\tDECL_ATTRIBUTES (fndecl));\n+}\n+\n void\n HIRCompileBase::handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t   const AST::Attribute &attr)\n@@ -396,16 +423,21 @@ HIRCompileBase::compile_function (\n   // we don't mangle the main fn since we haven't implemented the main shim\n   bool is_main_fn = fn_name.compare (\"main\") == 0;\n   std::string asm_name = fn_name;\n-  if (!is_main_fn)\n-    asm_name = ctx->mangle_item (fntype, *canonical_path);\n \n   unsigned int flags = 0;\n   tree fndecl = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n-\t\t\t\t\t       asm_name, flags, locus);\n-  setup_attributes_on_fndecl (fndecl, is_main_fn, visibility, qualifiers,\n-\t\t\t      outer_attrs);\n+\t\t\t\t\t       \"\" /* asm_name */, flags, locus);\n+  setup_fndecl (fndecl, is_main_fn, visibility, qualifiers, outer_attrs);\n   setup_abi_options (fndecl, fntype->get_abi ());\n \n+  // conditionally mangle the function name\n+  bool should_mangle = should_mangle_item (fndecl);\n+  if (!is_main_fn && should_mangle)\n+    asm_name = ctx->mangle_item (fntype, *canonical_path);\n+  SET_DECL_ASSEMBLER_NAME (fndecl,\n+\t\t\t   get_identifier_with_length (asm_name.data (),\n+\t\t\t\t\t\t       asm_name.length ()));\n+\n   // insert into the context\n   ctx->insert_function_decl (fntype, fndecl);\n "}, {"sha": "c09c5620e533f03ec2139e4f818a0f9ed19a47e4", "filename": "gcc/rust/backend/rust-compile-base.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Fbackend%2Frust-compile-base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-base.h?ref=f562d738ef93964af16d0450fe56f2e84664efed", "patch": "@@ -75,9 +75,10 @@ class HIRCompileBase\n   tree resolve_unsized_adjustment (Resolver::Adjustment &adjustment,\n \t\t\t\t   tree expression, Location locus);\n \n-  static void setup_attributes_on_fndecl (\n-    tree fndecl, bool is_main_entry_point, HIR::Visibility &visibility,\n-    const HIR::FunctionQualifiers &qualifiers, const AST::AttrVec &attrs);\n+  static void setup_fndecl (tree fndecl, bool is_main_entry_point,\n+\t\t\t    HIR::Visibility &visibility,\n+\t\t\t    const HIR::FunctionQualifiers &qualifiers,\n+\t\t\t    const AST::AttrVec &attrs);\n \n   static void handle_inline_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t\t const AST::Attribute &attr);\n@@ -92,6 +93,9 @@ class HIRCompileBase\n   handle_link_section_attribute_on_fndecl (tree fndecl,\n \t\t\t\t\t   const AST::Attribute &attr);\n \n+  static void handle_no_mangle_attribute_on_fndecl (tree fndecl,\n+\t\t\t\t\t\t    const AST::Attribute &attr);\n+\n   static void setup_abi_options (tree fndecl, ABI abi);\n \n   static tree address_expression (tree, Location);"}, {"sha": "77f884e7fd44ff81c04ce97bbeb13b29fb8c7f56", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=f562d738ef93964af16d0450fe56f2e84664efed", "patch": "@@ -32,6 +32,7 @@ static const BuiltinAttrDefinition __definitions[] = {\n   {\"must_use\", STATIC_ANALYSIS},\n   {\"lang\", HIR_LOWERING},\n   {\"link_section\", CODE_GENERATION},\n+  {\"no_mangle\", CODE_GENERATION},\n };\n \n BuiltinAttributeMappings *"}, {"sha": "0cef40482f4b71d92bd11b1f688519ba436eaf1c", "filename": "gcc/testsuite/rust/debug/no_mangle.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Ftestsuite%2Frust%2Fdebug%2Fno_mangle.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f562d738ef93964af16d0450fe56f2e84664efed/gcc%2Ftestsuite%2Frust%2Fdebug%2Fno_mangle.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fdebug%2Fno_mangle.rs?ref=f562d738ef93964af16d0450fe56f2e84664efed", "patch": "@@ -0,0 +1,17 @@\n+#[no_mangle]\n+fn do_not_mangle() -> i32 {\n+    0 \n+}\n+\n+fn please_mangle() {}\n+\n+fn main() {\n+// { dg-do compile }\n+// { dg-options \"-gdwarf-5 -dA\" }\n+    let _ = do_not_mangle();\n+    please_mangle();\n+// look for unmangled function name:\n+// { dg-final { scan-assembler \"do_not_mangle:\" } } */\n+// look for legacy mangled function name:\n+// { dg-final { scan-assembler \"13please_mangle\" } } */\n+}"}]}