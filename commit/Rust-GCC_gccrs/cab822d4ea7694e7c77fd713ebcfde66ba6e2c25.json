{"sha": "cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiODIyZDRlYTc2OTRlN2M3N2ZkNzEzZWJjZmRlNjZiYTZlMmMyNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-07T14:49:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2021-01-08T10:29:25Z"}, "message": "aarch64: Reimplement vaba* intrinsics using builtins\n\nThis patch reimplements the vaba* arm_neon.h intrinsics using RTL\nbuiltins that expand to proper RTL patterns\nrather than using inline asm.\nThe implementation is fairly straightforward by defining new builtins\nand using them in the header.\n\ngcc/\n\t* config/aarch64/aarch64-simd-builtins.def (saba, uaba): Define\n\tbuiltins.\n\t* config/aarch64/arm_neon.h (vaba_s8): Implement using builtin.\n\t(vaba_s16): Likewise.\n\t(vaba_s32): Likewise.\n\t(vaba_u8): Likewise.\n\t(vaba_u16): Likewise.\n\t(vaba_u32): Likewise.\n\t(vabaq_s8): Likewise.\n\t(vabaq_s16): Likewise.\n\t(vabaq_s32): Likewise.\n\t(vabaq_u8): Likewise.\n\t(vabaq_u16): Likewise.\n\t(vabaq_u32): Likewise.", "tree": {"sha": "98b711f8a0199729b87f8837ff2d3ff7125bcbbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98b711f8a0199729b87f8837ff2d3ff7125bcbbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9d25aa7489fd478098e0ef098438e797d597d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9d25aa7489fd478098e0ef098438e797d597d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9d25aa7489fd478098e0ef098438e797d597d3b"}], "stats": {"total": 89, "additions": 17, "deletions": 72}, "files": [{"sha": "3cc8e096a3a92d1cde36d6b785d8eb85b20f2ee8", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "patch": "@@ -148,6 +148,11 @@\n   BUILTIN_VDQ_BHSI (BINOP, uhsub, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, srhadd, 0, NONE)\n   BUILTIN_VDQ_BHSI (BINOP, urhadd, 0, NONE)\n+\n+  /* Implemented by aarch64_<su>aba<mode>.  */\n+  BUILTIN_VDQ_BHSI (TERNOP, saba, 0, NONE)\n+  BUILTIN_VDQ_BHSI (TERNOPU, uaba, 0, NONE)\n+\n   /* Implemented by aarch64_<sur><addsub>hn<mode>.  */\n   BUILTIN_VQN (BINOP, addhn, 0, NONE)\n   BUILTIN_VQN (BINOP, subhn, 0, NONE)"}, {"sha": "3819ed3d8f24b3a9efea396d7da480194fe80ca2", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 12, "deletions": 72, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab822d4ea7694e7c77fd713ebcfde66ba6e2c25/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=cab822d4ea7694e7c77fd713ebcfde66ba6e2c25", "patch": "@@ -6621,72 +6621,42 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_s8 (int8x8_t __a, int8x8_t __b, int8x8_t __c)\n {\n-  int8x8_t __result;\n-  __asm__ (\"saba %0.8b,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav8qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_s16 (int16x4_t __a, int16x4_t __b, int16x4_t __c)\n {\n-  int16x4_t __result;\n-  __asm__ (\"saba %0.4h,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_s32 (int32x2_t __a, int32x2_t __b, int32x2_t __c)\n {\n-  int32x2_t __result;\n-  __asm__ (\"saba %0.2s,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_u8 (uint8x8_t __a, uint8x8_t __b, uint8x8_t __c)\n {\n-  uint8x8_t __result;\n-  __asm__ (\"uaba %0.8b,%2.8b,%3.8b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav8qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_u16 (uint16x4_t __a, uint16x4_t __b, uint16x4_t __c)\n {\n-  uint16x4_t __result;\n-  __asm__ (\"uaba %0.4h,%2.4h,%3.4h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vaba_u32 (uint32x2_t __a, uint32x2_t __b, uint32x2_t __c)\n {\n-  uint32x2_t __result;\n-  __asm__ (\"uaba %0.2s,%2.2s,%3.2s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n@@ -6837,72 +6807,42 @@ __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_s8 (int8x16_t __a, int8x16_t __b, int8x16_t __c)\n {\n-  int8x16_t __result;\n-  __asm__ (\"saba %0.16b,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav16qi (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_s16 (int16x8_t __a, int16x8_t __b, int16x8_t __c)\n {\n-  int16x8_t __result;\n-  __asm__ (\"saba %0.8h,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav8hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_s32 (int32x4_t __a, int32x4_t __b, int32x4_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"saba %0.4s,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_sabav4si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_u8 (uint8x16_t __a, uint8x16_t __b, uint8x16_t __c)\n {\n-  uint8x16_t __result;\n-  __asm__ (\"uaba %0.16b,%2.16b,%3.16b\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav16qi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_u16 (uint16x8_t __a, uint16x8_t __b, uint16x8_t __c)\n {\n-  uint16x8_t __result;\n-  __asm__ (\"uaba %0.8h,%2.8h,%3.8h\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav8hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vabaq_u32 (uint32x4_t __a, uint32x4_t __b, uint32x4_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"uaba %0.4s,%2.4s,%3.4s\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_uabav4si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int8x8_t"}]}