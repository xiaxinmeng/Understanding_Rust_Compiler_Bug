{"sha": "860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "node_id": "C_kwDOANBUbNoAKDg2MGM1NmI1YmMzNTY5NjBhNGQwNDQ1ZGFkYzQzY2VkZGJlM2M3ZTI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-12-01T19:12:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-12-01T23:20:34Z"}, "message": "analyzer: fix false leak seen in Juliet 1.3 [PR102471]\n\nJuliet 1.3's CWE415_Double_Free__malloc_free_*_67a.c\nwere showing leak false positives in non-LTO builds; fixed thusly.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/102471\n\t* region-model-reachability.cc (reachable_regions::handle_parm):\n\tTreat all svalues within a compound parm has reachable, and those\n\twrapped in a cast.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/102471\n\t* gcc.dg/analyzer/leak-3.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "5f80108e530cc9325b5c2f14af83b38fc8dfca45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f80108e530cc9325b5c2f14af83b38fc8dfca45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860c56b5bc356960a4d0445dadc43ceddbe3c7e2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eb961d83b0eda53aeb1cfaacdc367e1952de613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eb961d83b0eda53aeb1cfaacdc367e1952de613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eb961d83b0eda53aeb1cfaacdc367e1952de613"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "f82f7e6556d8f95cda07c5a5519e29caa8ad5a75", "filename": "gcc/analyzer/region-model-reachability.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c56b5bc356960a4d0445dadc43ceddbe3c7e2/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c56b5bc356960a4d0445dadc43ceddbe3c7e2/gcc%2Fanalyzer%2Fregion-model-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-reachability.cc?ref=860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "patch": "@@ -258,6 +258,19 @@ reachable_regions::handle_parm (const svalue *sval, tree param_type)\n       const region *pointee_reg = parm_ptr->get_pointee ();\n       add (pointee_reg, is_mutable);\n     }\n+  /* Treat all svalues within a compound_svalue as reachable.  */\n+  if (const compound_svalue *compound_sval\n+      = sval->dyn_cast_compound_svalue ())\n+    {\n+      for (compound_svalue::iterator_t iter = compound_sval->begin ();\n+\t   iter != compound_sval->end (); ++iter)\n+\t{\n+\t  const svalue *iter_sval = (*iter).second;\n+\t  handle_sval (iter_sval);\n+\t}\n+    }\n+  if (const svalue *cast = sval->maybe_undo_cast ())\n+    handle_sval (cast);\n }\n \n /* Update the store to mark the clusters that were found to be mutable"}, {"sha": "d11cc03b36f0dbe15480f77a6c83a68f997fa869", "filename": "gcc/testsuite/gcc.dg/analyzer/leak-3.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860c56b5bc356960a4d0445dadc43ceddbe3c7e2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fleak-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860c56b5bc356960a4d0445dadc43ceddbe3c7e2/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fleak-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fleak-3.c?ref=860c56b5bc356960a4d0445dadc43ceddbe3c7e2", "patch": "@@ -0,0 +1,41 @@\n+#include <stdlib.h>\n+\n+/* Reduced from Juliet 1.3's CWE415_Double_Free__malloc_free_char_67a.c\n+   goodG2B which was showing a false leak report in a non-LTO build.  */\n+\n+struct s1\n+{\n+    char * structFirst;\n+};\n+void external_fn_1(struct s1 myStruct);\n+void test_1()\n+{\n+    char * data;\n+    struct s1 myStruct;\n+    data = (char *)malloc(100*sizeof(char));\n+    if (data == NULL)\n+      exit(-1);\n+    myStruct.structFirst = data;\n+    external_fn_1(myStruct);\n+} /* { dg-bogus \"leak of 'data'\" } */\n+\n+/* As above, but with padding before the field.  */\n+\n+struct s2\n+{\n+  void *padding;\n+  char *ptr;\n+};\n+void external_fn_2(struct s2 myStruct);\n+void test_2()\n+{\n+    char * data;\n+    struct s2 myStruct;\n+    data = (char *)malloc(100*sizeof(char));\n+    if (data == NULL)\n+      exit(-1);\n+    myStruct.padding = NULL;\n+    myStruct.ptr = data;\n+    external_fn_2(myStruct);\n+} /* { dg-bogus \"leak of 'data'\" } */\n+"}]}