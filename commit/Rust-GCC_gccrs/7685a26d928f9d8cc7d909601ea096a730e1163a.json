{"sha": "7685a26d928f9d8cc7d909601ea096a730e1163a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzY4NWEyNmQ5MjhmOWQ4Y2M3ZDkwOTYwMWVhMDk2YTczMGUxMTYzYQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-30T20:40:10Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2003-06-30T20:40:10Z"}, "message": "Makefile.am (check-am): Do not override.\n\n2003-06-30  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* testsuite/Makefile.am (check-am):  Do not override.\n\t(baseline_symbols):  Declare as PHONY, so no need to 'touch' it.\n\t* testsuite/Makefile.in:  Regenerate.\n\nFrom-SVN: r68738", "tree": {"sha": "d9913a652f9833d70558df11c209ac01f0519c51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9913a652f9833d70558df11c209ac01f0519c51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7685a26d928f9d8cc7d909601ea096a730e1163a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7685a26d928f9d8cc7d909601ea096a730e1163a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7685a26d928f9d8cc7d909601ea096a730e1163a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7685a26d928f9d8cc7d909601ea096a730e1163a/comments", "author": null, "committer": null, "parents": [{"sha": "90b97100a7df1b18e4150973d68b29e39b8375b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90b97100a7df1b18e4150973d68b29e39b8375b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90b97100a7df1b18e4150973d68b29e39b8375b3"}], "stats": {"total": 57, "additions": 24, "deletions": 33}, "files": [{"sha": "65b0cd9b095fec0d6580e43435cd2c2b79d5c85c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7685a26d928f9d8cc7d909601ea096a730e1163a", "patch": "@@ -1,3 +1,9 @@\n+2003-06-30  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* testsuite/Makefile.am (check-am):  Do not override.\n+\t(baseline_symbols):  Declare as PHONY, so no need to 'touch' it.\n+\t* testsuite/Makefile.in:  Regenerate.\n+\n 2003-06-30  Doug Gregor <dgregor@apple.com> \n \t\n \t* testsuite/24_iterators/insert_iterator.cc (test01, test02):"}, {"sha": "74cb500e8d33ff3f82bd4b9151b7fc41ddb36923", "filename": "libstdc++-v3/testsuite/Makefile.am", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.am?ref=7685a26d928f9d8cc7d909601ea096a730e1163a", "patch": "@@ -78,11 +78,7 @@ else\n stamp_wchar:\n endif\n \n-# Override this so local rules are possible.\n-check-am: \n-\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU; \\\n-\t$(MAKE) $(AM_MAKEFLAGS) check-local \n-\n+# This is automatically run after the generated check-DEJAGNU rule.\n check-local: check-abi\n \n baseline_dir = @baseline_dir@\n@@ -98,8 +94,7 @@ baseline_symbols:\n \t    echo \"Baseline file doesn't exist.\"; \\\n \t    echo \"Try 'make new-abi-baseline' to create it.\"; \\\n \t    exit 1; \\\n-\t  fi; \\\n-\ttouch baseline_symbols)\n+\t  fi; true)\n \n new-abi-baseline: \n \t-@$(mkinstalldirs) ${baseline_dir}\n@@ -152,6 +147,8 @@ check-performance: ${performance_script}\n \t-@(chmod + ${performance_script}; \\\n \t  ${performance_script} ${glibcpp_srcdir} ${glibcpp_builddir})\n \n+.PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n+check-script check-script-install check-performance\n \n # By adding these files here, automake will remove them for 'make clean'\n CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\"}, {"sha": "f0853ccfce5f21faee3d290c597a14aca0b2b8d1", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7685a26d928f9d8cc7d909601ea096a730e1163a/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=7685a26d928f9d8cc7d909601ea096a730e1163a", "patch": "@@ -141,14 +141,10 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n DEJATOOL = libstdc++-v3\n \n-EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then \\\n-            echo @glibcpp_builddir@/../../expect/expect ; \\\n-          else echo expect ; fi`\n+EXPECT = `if [ -f @glibcpp_builddir@/../../expect/expect ] ; then             echo @glibcpp_builddir@/../../expect/expect ;           else echo expect ; fi`\n \n \n-RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \\\n-\t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \\\n-\t    else echo runtest; fi`\n+RUNTEST = `if [ -f @glibcpp_srcdir@/../dejagnu/runtest ] ; then \t       echo @glibcpp_srcdir@/../dejagnu/runtest ; \t    else echo runtest; fi`\n \n \n AM_RUNTESTFLAGS = \n@@ -159,23 +155,18 @@ glibcpp_builddir = @glibcpp_builddir@\n testsuite_flags_script = ${glibcpp_builddir}/scripts/testsuite_flags\n CXX = `${testsuite_flags_script} --build-cxx`\n \n-CXXLINK = \\\n-\tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs\\\n-\t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \\\n-\t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK =  \tLD_RUN_PATH=$${LD_RUN_PATH:+$$LD_RUN_PATH:}${glibcpp_builddir}/src/.libs \t$(LIBTOOL) --tag=CXX --mode=link $(CXX) \t$(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@\n \n \n GLIBCPP_INCLUDES = @GLIBCPP_INCLUDES@\n LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n-INCLUDES = \\\n-\t-nostdinc++ \\\n-\t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n+INCLUDES =  \t-nostdinc++ \t@GLIBCPP_INCLUDES@ @LIBSUPCXX_INCLUDES@ @TOPLEVEL_INCLUDES@ \n \n \n noinst_LIBRARIES = libv3test.a\n libv3test_a_SOURCES = testsuite_hooks.cc testsuite_allocator.cc\n-@GLIBCPP_TEST_ABI_TRUE@noinst_PROGRAMS = @GLIBCPP_TEST_ABI_TRUE@abi_check\n+@GLIBCPP_TEST_ABI_TRUE@noinst_PROGRAMS = abi_check\n @GLIBCPP_TEST_ABI_FALSE@noinst_PROGRAMS = \n abi_check_SOURCES = abi_check.cc\n \n@@ -197,8 +188,7 @@ survey_script = ${glibcpp_builddir}/scripts/check_survey\n performance_script = ${glibcpp_srcdir}/scripts/check_performance\n \n # By adding these files here, automake will remove them for 'make clean'\n-CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \\\n-\t     testsuite_* site.exp abi_check baseline_symbols \n+CLEANFILES = *.txt *.tst *.exe core* filebuf_* tmp* ostream_* *.log *.sum \t     testsuite_* site.exp abi_check baseline_symbols \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = \n@@ -228,7 +218,7 @@ DIST_COMMON =  Makefile.am Makefile.in\n \n DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)\n \n-TAR = gtar\n+TAR = tar\n GZIP_ENV = --best\n SOURCES = $(libv3test_a_SOURCES) $(abi_check_SOURCES)\n OBJECTS = $(libv3test_a_OBJECTS) $(abi_check_OBJECTS)\n@@ -339,7 +329,7 @@ TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)\n \t  awk '    { files[$$0] = 1; } \\\n \t       END { for (i in files) print i; }'`; \\\n \ttest -z \"$(ETAGS_ARGS)$$unique$(LISP)$$tags\" \\\n-\t  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)\n+\t  || (cd $(srcdir) && etags -o $$here/TAGS $(ETAGS_ARGS) $$tags  $$unique $(LISP))\n \n mostlyclean-tags:\n \n@@ -396,7 +386,7 @@ site.exp: Makefile\n \t@echo 'set build_alias $(build_alias)' >> $@-t\n \t@echo 'set build_triplet $(build_triplet)' >> $@-t\n \t@echo '## All variables above are generated by configure. Do Not Edit ##' >> $@-t\n-\t@test ! -f site.exp || sed '1,/^## All variables above are.*##/ d' site.exp >> $@-t\n+\t@test ! -f $(srcdir)/site.exp || sed '1,/^## All variables above are.*##/ d' $(srcdir)/site.exp >> $@-t\n \t@test ! -f site.exp || mv site.exp site.bak\n \t@mv $@-t site.exp\n info-am:\n@@ -489,11 +479,7 @@ all-local: stamp_wchar\n @GLIBCPP_TEST_WCHAR_T_TRUE@\ttouch testsuite_wchar_t\n @GLIBCPP_TEST_WCHAR_T_FALSE@stamp_wchar:\n \n-# Override this so local rules are possible.\n-check-am: \n-\t$(MAKE) $(AM_MAKEFLAGS) check-DEJAGNU; \\\n-\t$(MAKE) $(AM_MAKEFLAGS) check-local \n-\n+# This is automatically run after the generated check-DEJAGNU rule.\n check-local: check-abi\n \n current_symbols.txt: ${extract_symvers} ../src/.libs/libstdc++.so\n@@ -505,8 +491,7 @@ baseline_symbols:\n \t    echo \"Baseline file doesn't exist.\"; \\\n \t    echo \"Try 'make new-abi-baseline' to create it.\"; \\\n \t    exit 1; \\\n-\t  fi; \\\n-\ttouch baseline_symbols)\n+\t  fi; true)\n \n new-abi-baseline: \n \t-@$(mkinstalldirs) ${baseline_dir}\n@@ -541,6 +526,9 @@ check-performance: ${performance_script}\n \t-@(chmod + ${performance_script}; \\\n \t  ${performance_script} ${glibcpp_srcdir} ${glibcpp_builddir})\n \n+.PHONY: baseline_symbols new-abi-baseline check-abi check-abi-verbose \\\n+check-script check-script-install check-performance\n+\n # Tell versions [3.59,3.63) of GNU make to not export all variables.\n # Otherwise a system limit (for SysV at least) may be exceeded.\n .NOEXPORT:"}]}