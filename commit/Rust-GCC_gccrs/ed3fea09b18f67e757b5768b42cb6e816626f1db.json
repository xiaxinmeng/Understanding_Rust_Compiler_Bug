{"sha": "ed3fea09b18f67e757b5768b42cb6e816626f1db", "node_id": "C_kwDOANBUbNoAKGVkM2ZlYTA5YjE4ZjY3ZTc1N2I1NzY4YjQyY2I2ZTgxNjYyNmYxZGI", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-04T19:07:17Z"}, "committer": {"name": "Bill Schmidt", "email": "wschmidt@linux.ibm.com", "date": "2022-02-09T17:10:47Z"}, "message": "rs6000: Correct function prototypes for vec_replace_unaligned\n\nDue to a pasto error in the documentation, vec_replace_unaligned was\nimplemented with the same function prototypes as vec_replace_elt.  It was\nintended that vec_replace_unaligned always specify output vectors as having\ntype vector unsigned char, to emphasize that elements are potentially\nmisaligned by this built-in function.  This patch corrects the\nmisimplementation.\n\n2022-02-04  Bill Schmidt  <wschmidt@linux.ibm.com>\n\ngcc/\n\t* config/rs6000/rs6000-builtins.def (VREPLACE_UN_UV2DI): Change\n\tfunction prototype.\n\t(VREPLACE_UN_UV4SI): Likewise.\n\t(VREPLACE_UN_V2DF): Likewise.\n\t(VREPLACE_UN_V2DI): Likewise.\n\t(VREPLACE_UN_V4SF): Likewise.\n\t(VREPLACE_UN_V4SI): Likewise.\n\t* config/rs6000/rs6000-overload.def (VEC_REPLACE_UN): Change all\n\tfunction prototypes.\n\t* config/rs6000/vsx.md (vreplace_un_<mode>): Remove define_expand.\n\t(vreplace_un_<mode>): New define_insn.\n\ngcc/testsuite/\n\t* gcc.target/powerpc/vec-replace-word-runnable.c: Handle expected\n\tprototypes for each call to vec_replace_unaligned.", "tree": {"sha": "91185970c24326d15f2a593be68fac2e2cab9695", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91185970c24326d15f2a593be68fac2e2cab9695"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed3fea09b18f67e757b5768b42cb6e816626f1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3fea09b18f67e757b5768b42cb6e816626f1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed3fea09b18f67e757b5768b42cb6e816626f1db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed3fea09b18f67e757b5768b42cb6e816626f1db/comments", "author": null, "committer": null, "parents": [{"sha": "83d7e720cd1d075312e798c4ebd2e093f03465fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83d7e720cd1d075312e798c4ebd2e093f03465fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83d7e720cd1d075312e798c4ebd2e093f03465fb"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "ae2760c33389b30ea51bdc71234944b277c64fb7", "filename": "gcc/config/rs6000/rs6000-builtins.def", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtins.def?ref=ed3fea09b18f67e757b5768b42cb6e816626f1db", "patch": "@@ -3387,25 +3387,25 @@\n   const vull __builtin_altivec_vpextd (vull, vull);\n     VPEXTD vpextd {}\n \n-  const vull __builtin_altivec_vreplace_un_uv2di (vull, unsigned long long, \\\n-                                                  const int<4>);\n+  const vuc __builtin_altivec_vreplace_un_uv2di (vull, unsigned long long, \\\n+                                                 const int<4>);\n     VREPLACE_UN_UV2DI vreplace_un_v2di {}\n \n-  const vui __builtin_altivec_vreplace_un_uv4si (vui, unsigned int, \\\n+  const vuc __builtin_altivec_vreplace_un_uv4si (vui, unsigned int, \\\n                                                  const int<4>);\n     VREPLACE_UN_UV4SI vreplace_un_v4si {}\n \n-  const vd __builtin_altivec_vreplace_un_v2df (vd, double, const int<4>);\n+  const vuc __builtin_altivec_vreplace_un_v2df (vd, double, const int<4>);\n     VREPLACE_UN_V2DF vreplace_un_v2df {}\n \n-  const vsll __builtin_altivec_vreplace_un_v2di (vsll, signed long long, \\\n-                                                 const int<4>);\n+  const vuc __builtin_altivec_vreplace_un_v2di (vsll, signed long long, \\\n+                                                const int<4>);\n     VREPLACE_UN_V2DI vreplace_un_v2di {}\n \n-  const vf __builtin_altivec_vreplace_un_v4sf (vf, float, const int<4>);\n+  const vuc __builtin_altivec_vreplace_un_v4sf (vf, float, const int<4>);\n     VREPLACE_UN_V4SF vreplace_un_v4sf {}\n \n-  const vsi __builtin_altivec_vreplace_un_v4si (vsi, signed int, const int<4>);\n+  const vuc __builtin_altivec_vreplace_un_v4si (vsi, signed int, const int<4>);\n     VREPLACE_UN_V4SI vreplace_un_v4si {}\n \n   const vull __builtin_altivec_vreplace_uv2di (vull, unsigned long long, \\"}, {"sha": "44e2945aaa0e53c15c45fe565a82fc142a97358d", "filename": "gcc/config/rs6000/rs6000-overload.def", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-overload.def?ref=ed3fea09b18f67e757b5768b42cb6e816626f1db", "patch": "@@ -3059,17 +3059,17 @@\n     VREPLACE_ELT_V2DF\n \n [VEC_REPLACE_UN, vec_replace_unaligned, __builtin_vec_replace_un]\n-  vui __builtin_vec_replace_un (vui, unsigned int, const int);\n+  vuc __builtin_vec_replace_un (vui, unsigned int, const int);\n     VREPLACE_UN_UV4SI\n-  vsi __builtin_vec_replace_un (vsi, signed int, const int);\n+  vuc __builtin_vec_replace_un (vsi, signed int, const int);\n     VREPLACE_UN_V4SI\n-  vull __builtin_vec_replace_un (vull, unsigned long long, const int);\n+  vuc __builtin_vec_replace_un (vull, unsigned long long, const int);\n     VREPLACE_UN_UV2DI\n-  vsll __builtin_vec_replace_un (vsll, signed long long, const int);\n+  vuc __builtin_vec_replace_un (vsll, signed long long, const int);\n     VREPLACE_UN_V2DI\n-  vf __builtin_vec_replace_un (vf, float, const int);\n+  vuc __builtin_vec_replace_un (vf, float, const int);\n     VREPLACE_UN_V4SF\n-  vd __builtin_vec_replace_un (vd, double, const int);\n+  vuc __builtin_vec_replace_un (vd, double, const int);\n     VREPLACE_UN_V2DF\n \n [VEC_REVB, vec_revb, __builtin_vec_revb]"}, {"sha": "b53de10387252b3976806199ac4b799d7bb29c85", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=ed3fea09b18f67e757b5768b42cb6e816626f1db", "patch": "@@ -4197,21 +4197,6 @@\n  }\n [(set_attr \"type\" \"vecsimple\")])\n \n-(define_expand \"vreplace_un_<mode>\"\n- [(set (match_operand:REPLACE_ELT 0 \"register_operand\")\n- (unspec:REPLACE_ELT [(match_operand:REPLACE_ELT 1 \"register_operand\")\n-\t\t      (match_operand:<VS_scalar> 2 \"register_operand\")\n-\t\t      (match_operand:QI 3 \"const_0_to_12_operand\")]\n-\t\t     UNSPEC_REPLACE_UN))]\n- \"TARGET_POWER10\"\n-{\n-   /* Immediate value is the byte index Big Endian numbering.  */\n-   emit_insn (gen_vreplace_elt_<mode>_inst (operands[0], operands[1],\n-\t\t\t\t\t    operands[2], operands[3]));\n-   DONE;\n- }\n-[(set_attr \"type\" \"vecsimple\")])\n-\n (define_insn \"vreplace_elt_<mode>_inst\"\n  [(set (match_operand:REPLACE_ELT 0 \"register_operand\" \"=v\")\n   (unspec:REPLACE_ELT [(match_operand:REPLACE_ELT 1 \"register_operand\" \"0\")\n@@ -4222,6 +4207,16 @@\n  \"vins<REPLACE_ELT_char> %0,%2,%3\"\n  [(set_attr \"type\" \"vecsimple\")])\n \n+(define_insn \"vreplace_un_<mode>\"\n+ [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+  (unspec:V16QI [(match_operand:REPLACE_ELT 1 \"register_operand\" \"0\")\n+                 (match_operand:<VS_scalar> 2 \"register_operand\" \"r\")\n+\t\t (match_operand:QI 3 \"const_0_to_12_operand\" \"n\")]\n+\t\tUNSPEC_REPLACE_UN))]\n+ \"TARGET_POWER10\"\n+ \"vins<REPLACE_ELT_char> %0,%2,%3\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n ;; VSX_EXTRACT optimizations\n ;; Optimize double d = (double) vec_extract (vi, <n>)\n ;; Get the element into the top position and use XVCVSWDP/XVCVUWDP"}, {"sha": "27318822871f1a9325c302035d03474f55dca48c", "filename": "gcc/testsuite/gcc.target/powerpc/vec-replace-word-runnable.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed3fea09b18f67e757b5768b42cb6e816626f1db/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-replace-word-runnable.c?ref=ed3fea09b18f67e757b5768b42cb6e816626f1db", "patch": "@@ -54,6 +54,8 @@ main (int argc, char *argv [])\n   vector double src_va_double;\n   double src_a_double;\n \n+  vector unsigned char vresult_uchar;\n+\n   /* Vector replace 32-bit element */\n   src_a_uint = 345;\n   src_va_uint = (vector unsigned int) { 0, 1, 2, 3 };\n@@ -172,7 +174,8 @@ main (int argc, char *argv [])\n   /* Byte index 7 will overwrite part of elements 2 and 3 */\n   expected_vresult_uint = (vector unsigned int) { 1, 2, 345*256, 0 };\n \t\t\t\t\t\t \n-  vresult_uint = vec_replace_unaligned (src_va_uint, src_a_uint, 3);\n+  vresult_uchar = vec_replace_unaligned (src_va_uint, src_a_uint, 3);\n+  vresult_uint = (vector unsigned int) vresult_uchar;\n \n   if (!vec_all_eq (vresult_uint,  expected_vresult_uint)) {\n #if DEBUG\n@@ -191,7 +194,8 @@ main (int argc, char *argv [])\n   /* Byte index 7 will over write part of elements 1 and 2 */\n   expected_vresult_int = (vector int) { 1, 234*256, 0, 4 };\n \t\t\t\t\t\t \n-  vresult_int = vec_replace_unaligned (src_va_int, src_a_int, 7);\n+  vresult_uchar = vec_replace_unaligned (src_va_int, src_a_int, 7);\n+  vresult_int = (vector signed int) vresult_uchar;\n \n   if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n #if DEBUG\n@@ -209,7 +213,8 @@ main (int argc, char *argv [])\n   vresult_float = (vector float) { 0.0, 0.0, 0.0, 0.0 };\n   expected_vresult_float = (vector float) { 0.0, 34.0, 20.0, 30.0 };\n \t\t\t\t\t\t \n-  vresult_float = vec_replace_unaligned (src_va_float, src_a_float, 8);\n+  vresult_uchar = vec_replace_unaligned (src_va_float, src_a_float, 8);\n+  vresult_float = (vector float) vresult_uchar;\n \n   if (!vec_all_eq (vresult_float,  expected_vresult_float)) {\n #if DEBUG\n@@ -231,7 +236,8 @@ main (int argc, char *argv [])\n \t\t\t\t\t\t\t      0x200 };\n \t\t\t\t\t\t \n   /* Byte index 7 will over write least significant byte of  element 0  */\n-  vresult_ullint = vec_replace_unaligned (src_va_ullint, src_a_ullint, 7);\n+  vresult_uchar = vec_replace_unaligned (src_va_ullint, src_a_ullint, 7);\n+  vresult_ullint = (vector unsigned long long) vresult_uchar;\n \n   if (!vec_all_eq (vresult_ullint,  expected_vresult_ullint)) {\n #if DEBUG\n@@ -251,7 +257,8 @@ main (int argc, char *argv [])\n   /* Byte index 7 will over write least significant byte of  element 0  */\n   expected_vresult_llint = (vector long long int) { 678*256, 0x100 };\n \t\t\t\t\t\t \n-  vresult_llint = vec_replace_unaligned (src_va_llint, src_a_llint, 7);\n+  vresult_uchar = vec_replace_unaligned (src_va_llint, src_a_llint, 7);\n+  vresult_llint = (vector signed long long) vresult_uchar;\n \n   if (!vec_all_eq (vresult_llint,  expected_vresult_llint)) {\n #if DEBUG\n@@ -270,7 +277,8 @@ main (int argc, char *argv [])\n   vresult_double = (vector double) { 0.0, 0.0 };\n   expected_vresult_double = (vector double) { 0.0, 678.0 };\n \t\t\t\t\t\t \n-  vresult_double = vec_replace_unaligned (src_va_double, src_a_double, 0);\n+  vresult_uchar = vec_replace_unaligned (src_va_double, src_a_double, 0);\n+  vresult_double = (vector double) vresult_uchar;\n \n   if (!vec_all_eq (vresult_double,  expected_vresult_double)) {\n #if DEBUG"}]}