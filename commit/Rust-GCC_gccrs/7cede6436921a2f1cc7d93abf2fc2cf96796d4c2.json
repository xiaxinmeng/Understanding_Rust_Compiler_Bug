{"sha": "7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NlZGU2NDM2OTIxYTJmMWNjN2Q5M2FiZjJmYzJjZjk2Nzk2ZDRjMg==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2008-08-25T18:39:39Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2008-08-25T18:39:39Z"}, "message": "mips.md (immediate_insn): Move up in file, fix comment typo, reformat.\n\n2008-08-25  David Daney  <ddaney@avtrex.com>\n\n\t* config/mips/mips.md (immediate_insn): Move up in file, fix\n\tcomment typo, reformat.\n\t(fetchop_bit, atomic_hiqi_op memory_barrier,\n\tsync_compare_and_swap<mode>, compare_and_swap_12, sync_add<mode>,\n\tsync_<optab><mode>, sync_<optab>_12, sync_old_<optab><mode>,\n\tsync_old_<optab>_12, sync_new_<optab><mode>, sync_new_<optab>_12,\n\tsync_nand<mode>, sync_nand_12, sync_old_nand<mode>,\n\tsync_old_nand_12, sync_new_nand<mode>, sync_new_nand_12,\n\tsync_sub<mode>, sync_old_add<mode>, sync_old_sub<mode>,\n\tsync_new_add<mode>, sync_new_sub<mode>, sync_<optab><mode>,\n\tsync_old_<optab><mode>, sync_new_<optab><mode>, sync_nand<mode>,\n\tsync_old_nand<mode>, sync_new_nand<mode>,\n\tsync_lock_test_and_set<mode>, sync_lock_test_and_set<mode>,\n\ttest_and_set_12): Moved to sync.md.\n\t(sync.md): Include.\n\t* config/mips/sync.md: New file.\n\nFrom-SVN: r139568", "tree": {"sha": "167919a8726534b6fbda641e9d7abe6c2a963583", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/167919a8726534b6fbda641e9d7abe6c2a963583"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/comments", "author": null, "committer": null, "parents": [{"sha": "d7f68a672e8e03eb7fd9fb0a9dce83558d6c5724", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7f68a672e8e03eb7fd9fb0a9dce83558d6c5724", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7f68a672e8e03eb7fd9fb0a9dce83558d6c5724"}], "stats": {"total": 1057, "additions": 552, "deletions": 505}, "files": [{"sha": "be61419dcd73fbafc7a3c6f903852a292fcb6eb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "patch": "@@ -1,3 +1,22 @@\n+2008-08-25  David Daney  <ddaney@avtrex.com>\n+\n+\t* config/mips/mips.md (immediate_insn): Move up in file, fix\n+\tcomment typo, reformat.\n+\t(fetchop_bit, atomic_hiqi_op memory_barrier,\n+\tsync_compare_and_swap<mode>, compare_and_swap_12, sync_add<mode>,\n+\tsync_<optab><mode>, sync_<optab>_12, sync_old_<optab><mode>,\n+\tsync_old_<optab>_12, sync_new_<optab><mode>, sync_new_<optab>_12,\n+\tsync_nand<mode>, sync_nand_12, sync_old_nand<mode>,\n+\tsync_old_nand_12, sync_new_nand<mode>, sync_new_nand_12,\n+\tsync_sub<mode>, sync_old_add<mode>, sync_old_sub<mode>,\n+\tsync_new_add<mode>, sync_new_sub<mode>, sync_<optab><mode>,\n+\tsync_old_<optab><mode>, sync_new_<optab><mode>, sync_nand<mode>,\n+\tsync_old_nand<mode>, sync_new_nand<mode>,\n+\tsync_lock_test_and_set<mode>, sync_lock_test_and_set<mode>,\n+\ttest_and_set_12): Moved to sync.md.\n+\t(sync.md): Include.\n+\t* config/mips/sync.md: New file.\n+\n 2008-08-25  Richard Henderson  <rth@redhat.com>\n \n \t* dwarf2out.c (def_cfa_1): Don't scale by DWARF_CIE_DATA_ALIGNMENT."}, {"sha": "f46db8dfc613a30db8549c4db80b78bfc8c71755", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 10, "deletions": 505, "changes": 515, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "patch": "@@ -820,6 +820,12 @@\n \t\t\t(plus \"addu\")\n \t\t\t(minus \"subu\")])\n \n+;; <immediate_insn> expands to the name of the insn that implements\n+;; a particular code to operate on immediate values.\n+(define_code_attr immediate_insn [(ior \"ori\")\n+\t\t\t\t  (xor \"xori\")\n+\t\t\t\t  (and \"andi\")])\n+\n ;; <fcond> is the c.cond.fmt condition associated with a particular code.\n (define_code_attr fcond [(unordered \"un\")\n \t\t\t (uneq \"ueq\")\n@@ -835,15 +841,6 @@\n \t\t\t\t (unge \"ule\")\n \t\t\t\t (ungt \"ult\")])\n \n-;; Atomic fetch bitwise operations.\n-(define_code_iterator fetchop_bit [ior xor and])\n-\n-;; <immediate_insn> expands to the name of the insn that implements\n-;; a particular code to operate in immediate values.\n-(define_code_attr immediate_insn [(ior \"ori\") (xor \"xori\") (and \"andi\")])\n-\n-;; Atomic HI and QI operations\n-(define_code_iterator atomic_hiqi_op [plus minus ior xor and])\n \f\n ;; .........................\n ;;\n@@ -4629,502 +4626,6 @@\n }\n   [(set_attr \"length\" \"20\")])\n \n-;; Atomic memory operations.\n-\n-(define_insn \"memory_barrier\"\n-  [(set (mem:BLK (scratch))\n-        (unspec:BLK [(const_int 0)] UNSPEC_MEMORY_BARRIER))]\n-  \"GENERATE_SYNC\"\n-  \"%|sync%-\")\n-\n-(define_insn \"sync_compare_and_swap<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR [(match_operand:GPR 2 \"reg_or_0_operand\" \"dJ,dJ\")\n-\t\t\t      (match_operand:GPR 3 \"arith_operand\" \"I,d\")]\n-\t UNSPEC_COMPARE_AND_SWAP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"li\");\n-  else\n-    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"move\");\n-}\n-  [(set_attr \"length\" \"32\")])\n-\n-(define_expand \"sync_compare_and_swap<mode>\"\n-  [(match_operand:SHORT 0 \"register_operand\")\n-   (match_operand:SHORT 1 \"memory_operand\")\n-   (match_operand:SHORT 2 \"general_operand\")\n-   (match_operand:SHORT 3 \"general_operand\")]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_6 = gen_compare_and_swap_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], operands[3]);\n-  DONE;\n-})\n-\n-;; Helper insn for mips_expand_atomic_qihi.\n-(define_insn \"compare_and_swap_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n-\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n-\t\t\t     (match_operand:SI 4 \"reg_or_0_operand\" \"dJ,dJ\")\n-\t\t\t     (match_operand:SI 5 \"reg_or_0_operand\" \"d,J\")]\n-\t\t\t    UNSPEC_COMPARE_AND_SWAP_12))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_NONZERO_OP);\n-  else\n-    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_ZERO_OP);\n-}\n-  [(set_attr \"length\" \"40,36\")])\n-\n-(define_insn \"sync_add<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n-\t(unspec_volatile:GPR\n-          [(plus:GPR (match_dup 0)\n-\t\t     (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n-\t  UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_OP (\"<d>\", \"<d>addiu\");\t\n-  else\n-    return MIPS_SYNC_OP (\"<d>\", \"<d>addu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_expand \"sync_<optab><mode>\"\n-  [(set (match_operand:SHORT 0 \"memory_operand\")\n-\t(unspec_volatile:SHORT\n-\t  [(atomic_hiqi_op:SHORT (match_dup 0)\n-\t\t\t\t (match_operand:SHORT 1 \"general_operand\"))]\n-\t  UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_4 = gen_sync_<optab>_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   NULL, operands[0], operands[1], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_<optab><mode>\n-(define_insn \"sync_<optab>_12\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"register_operand\" \"d\")\n-\t   (match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (atomic_hiqi_op:SI (match_dup 0)\n-\t\t\t      (match_operand:SI 3 \"register_operand\" \"dJ\"))]\n-\t  UNSPEC_SYNC_OLD_OP_12))\n-   (clobber (match_scratch:SI 4 \"=&d\"))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_OP_12 (\"<insn>\", MIPS_SYNC_OP_12_NOT_NOP);\t\n-}\n-  [(set_attr \"length\" \"40\")])\n-\n-(define_expand \"sync_old_<optab><mode>\"\n-  [(parallel [\n-     (set (match_operand:SHORT 0 \"register_operand\")\n-\t  (match_operand:SHORT 1 \"memory_operand\"))\n-     (set (match_dup 1)\n-\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n-\t\t\t\t    (match_dup 1)\n-\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n-\t    UNSPEC_SYNC_OLD_OP))])]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_5 = gen_sync_old_<optab>_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_old_<optab><mode>\n-(define_insn \"sync_old_<optab>_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (match_operand:SI 3 \"register_operand\" \"d\")\n-\t   (atomic_hiqi_op:SI (match_dup 0)\n-\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n-\t  UNSPEC_SYNC_OLD_OP_12))\n-   (clobber (match_scratch:SI 5 \"=&d\"))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_OLD_OP_12 (\"<insn>\", MIPS_SYNC_OLD_OP_12_NOT_NOP,\n-\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOP_REG);\t\n-}\n-  [(set_attr \"length\" \"40\")])\n-\n-(define_expand \"sync_new_<optab><mode>\"\n-  [(parallel [\n-     (set (match_operand:SHORT 0 \"register_operand\")\n-\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n-\t\t\t\t    (match_operand:SHORT 1 \"memory_operand\")\n-\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n-\t    UNSPEC_SYNC_NEW_OP))\n-     (set (match_dup 1)\n-\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n-\t    UNSPEC_SYNC_NEW_OP))])]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_5 = gen_sync_new_<optab>_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_new_<optab><mode>\n-(define_insn \"sync_new_<optab>_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n-\t   (match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (match_operand:SI 3 \"register_operand\" \"d\")\n-\t   (atomic_hiqi_op:SI (match_dup 0)\n-\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n-\t  UNSPEC_SYNC_NEW_OP_12))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI\n-\t  [(match_dup 1)\n-\t   (match_dup 2)\n-\t   (match_dup 3)\n-\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_NEW_OP_12 (\"<insn>\", MIPS_SYNC_NEW_OP_12_NOT_NOP);\n-}\n-  [(set_attr \"length\" \"40\")])\n-\n-(define_expand \"sync_nand<mode>\"\n-  [(set (match_operand:SHORT 0 \"memory_operand\")\n-\t(unspec_volatile:SHORT\n-\t  [(match_dup 0)\n-\t   (match_operand:SHORT 1 \"general_operand\")]\n-\t  UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_4 = gen_sync_nand_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   NULL, operands[0], operands[1], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_nand<mode>\n-(define_insn \"sync_nand_12\"\n-  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"register_operand\" \"d\")\n-\t   (match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (match_dup 0)\n-\t   (match_operand:SI 3 \"register_operand\" \"dJ\")]\n-\t  UNSPEC_SYNC_OLD_OP_12))\n-   (clobber (match_scratch:SI 4 \"=&d\"))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_OP_12 (\"and\", MIPS_SYNC_OP_12_NOT_NOT);\t\n-}\n-  [(set_attr \"length\" \"44\")])\n-\n-(define_expand \"sync_old_nand<mode>\"\n-  [(parallel [\n-     (set (match_operand:SHORT 0 \"register_operand\")\n-\t  (match_operand:SHORT 1 \"memory_operand\"))\n-     (set (match_dup 1)\n-\t  (unspec_volatile:SHORT [(match_dup 1)\n-\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n-\t    UNSPEC_SYNC_OLD_OP))])]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_5 = gen_sync_old_nand_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_old_nand<mode>\n-(define_insn \"sync_old_nand_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (match_operand:SI 3 \"register_operand\" \"d\")\n-\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n-\t  UNSPEC_SYNC_OLD_OP_12))\n-   (clobber (match_scratch:SI 5 \"=&d\"))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_OLD_OP_12 (\"and\", MIPS_SYNC_OLD_OP_12_NOT_NOT,\n-\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOT_REG);\t\n-}\n-  [(set_attr \"length\" \"44\")])\n-\n-(define_expand \"sync_new_nand<mode>\"\n-  [(parallel [\n-     (set (match_operand:SHORT 0 \"register_operand\")\n-\t  (unspec_volatile:SHORT [(match_operand:SHORT 1 \"memory_operand\")\n-\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n-\t    UNSPEC_SYNC_NEW_OP))\n-     (set (match_dup 1)\n-\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n-\t    UNSPEC_SYNC_NEW_OP))])]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_5 = gen_sync_new_nand_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], NULL);\n-  DONE;\n-})\n-\n-;; Helper insn for sync_new_nand<mode>\n-(define_insn \"sync_new_nand_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n-\t(unspec_volatile:SI\n-          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n-\t   (match_operand:SI 2 \"register_operand\" \"d\")\n-\t   (match_operand:SI 3 \"register_operand\" \"d\")\n-\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n-\t  UNSPEC_SYNC_NEW_OP_12))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI\n-\t  [(match_dup 1)\n-\t   (match_dup 2)\n-\t   (match_dup 3)\n-\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n-  \"GENERATE_LL_SC\"\n-{\n-    return MIPS_SYNC_NEW_OP_12 (\"and\", MIPS_SYNC_NEW_OP_12_NOT_NOT);\n-}\n-  [(set_attr \"length\" \"40\")])\n-\n-(define_insn \"sync_sub<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+R\")\n-\t(unspec_volatile:GPR\n-          [(minus:GPR (match_dup 0)\n-\t\t\t      (match_operand:GPR 1 \"register_operand\" \"d\"))]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  return MIPS_SYNC_OP (\"<d>\", \"<d>subu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_old_add<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-          [(plus:GPR (match_dup 1)\n-\t\t     (match_operand:GPR 2 \"arith_operand\" \"I,d\"))]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addiu\");\t\n-  else\n-    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_old_sub<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-          [(minus:GPR (match_dup 1)\n-\t\t      (match_operand:GPR 2 \"register_operand\" \"d\"))]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>subu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_new_add<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-        (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R,R\")\n-\t\t  (match_operand:GPR 2 \"arith_operand\" \"I,d\")))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-\t  [(plus:GPR (match_dup 1) (match_dup 2))]\n-\t UNSPEC_SYNC_NEW_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addiu\");\t\n-  else\n-    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_new_sub<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n-        (minus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R\")\n-\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-\t  [(minus:GPR (match_dup 1) (match_dup 2))]\n-\t UNSPEC_SYNC_NEW_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>subu\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n-\t(unspec_volatile:GPR\n-          [(fetchop_bit:GPR (match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")\n-\t\t\t      (match_dup 0))]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_OP (\"<d>\", \"<immediate_insn>\");\t\n-  else\n-    return MIPS_SYNC_OP (\"<d>\", \"<insn>\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_old_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n-\t\t\t    (match_dup 1))]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_OLD_OP (\"<d>\", \"<immediate_insn>\");\t\n-  else\n-    return MIPS_SYNC_OLD_OP (\"<d>\", \"<insn>\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_new_<optab><mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR\n-          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n-\t\t\t    (match_dup 1))]\n-\t UNSPEC_SYNC_NEW_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_NEW_OP (\"<d>\", \"<immediate_insn>\");\t\n-  else\n-    return MIPS_SYNC_NEW_OP (\"<d>\", \"<insn>\");\t\n-}\n-  [(set_attr \"length\" \"28\")])\n-\n-(define_insn \"sync_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n-\t(unspec_volatile:GPR [(match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_NAND (\"<d>\", \"andi\");\t\n-  else\n-    return MIPS_SYNC_NAND (\"<d>\", \"and\");\t\n-}\n-  [(set_attr \"length\" \"32\")])\n-\n-(define_insn \"sync_old_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-        (unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n-\t UNSPEC_SYNC_OLD_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_OLD_NAND (\"<d>\", \"andi\");\t\n-  else\n-    return MIPS_SYNC_OLD_NAND (\"<d>\", \"and\");\t\n-}\n-  [(set_attr \"length\" \"32\")])\n-\n-(define_insn \"sync_new_nand<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n-\t UNSPEC_SYNC_NEW_OP))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_NEW_NAND (\"<d>\", \"andi\");\t\n-  else\n-    return MIPS_SYNC_NEW_NAND (\"<d>\", \"and\");\t\n-}\n-  [(set_attr \"length\" \"32\")])\n-\n-(define_insn \"sync_lock_test_and_set<mode>\"\n-  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n-\t UNSPEC_SYNC_EXCHANGE))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_EXCHANGE (\"<d>\", \"li\");\n-  else\n-    return MIPS_SYNC_EXCHANGE (\"<d>\", \"move\");\n-}\n-  [(set_attr \"length\" \"24\")])\n-\n-(define_expand \"sync_lock_test_and_set<mode>\"\n-  [(match_operand:SHORT 0 \"register_operand\")\n-   (match_operand:SHORT 1 \"memory_operand\")\n-   (match_operand:SHORT 2 \"general_operand\")]\n-  \"GENERATE_LL_SC\"\n-{\n-  union mips_gen_fn_ptrs generator;\n-  generator.fn_5 = gen_test_and_set_12;\n-  mips_expand_atomic_qihi (generator,\n-\t\t\t   operands[0], operands[1], operands[2], NULL);\n-  DONE;\n-})\n-\n-(define_insn \"test_and_set_12\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n-\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n-   (set (match_dup 1)\n-\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n-\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n-\t\t\t     (match_operand:SI 4 \"arith_operand\" \"d,J\")]\n-\t  UNSPEC_SYNC_EXCHANGE_12))]\n-  \"GENERATE_LL_SC\"\n-{\n-  if (which_alternative == 0)\n-    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_NONZERO_OP);\n-  else\n-    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_ZERO_OP);\n-}\n-  [(set_attr \"length\" \"28,24\")])\n \f\n ;; Block moves, see mips.c for more details.\n ;; Argument 0 is the destination\n@@ -6623,6 +6124,10 @@\n    (set_attr \"can_delay\" \"no\")\n    (set_attr \"mode\" \"<MODE>\")])\n \f\n+;; Synchronization instructions.\n+\n+(include \"sync.md\")\n+\n ; The MIPS Paired-Single Floating Point and MIPS-3D Instructions.\n \n (include \"mips-ps-3d.md\")"}, {"sha": "0052f46dc9fad3c2225e19fb8c681a36993757f2", "filename": "gcc/config/mips/sync.md", "status": "added", "additions": 523, "deletions": 0, "changes": 523, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2Fconfig%2Fmips%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cede6436921a2f1cc7d93abf2fc2cf96796d4c2/gcc%2Fconfig%2Fmips%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsync.md?ref=7cede6436921a2f1cc7d93abf2fc2cf96796d4c2", "patch": "@@ -0,0 +1,523 @@\n+;;  Machine Description for MIPS based processor synchronization\n+;;  instructions.\n+;;  Copyright (C) 2007, 2008\n+;;  Free Software Foundation, Inc.\n+\n+;; This file is part of GCC.\n+\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 3, or (at your option)\n+;; any later version.\n+\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+\n+;; Atomic fetch bitwise operations.\n+(define_code_iterator fetchop_bit [ior xor and])\n+\n+;; Atomic HI and QI operations\n+(define_code_iterator atomic_hiqi_op [plus minus ior xor and])\n+\n+;; Atomic memory operations.\n+\n+(define_insn \"memory_barrier\"\n+  [(set (mem:BLK (scratch))\n+        (unspec:BLK [(const_int 0)] UNSPEC_MEMORY_BARRIER))]\n+  \"GENERATE_SYNC\"\n+  \"%|sync%-\")\n+\n+(define_insn \"sync_compare_and_swap<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"reg_or_0_operand\" \"dJ,dJ\")\n+\t\t\t      (match_operand:GPR 3 \"arith_operand\" \"I,d\")]\n+\t UNSPEC_COMPARE_AND_SWAP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"li\");\n+  else\n+    return MIPS_COMPARE_AND_SWAP (\"<d>\", \"move\");\n+}\n+  [(set_attr \"length\" \"32\")])\n+\n+(define_expand \"sync_compare_and_swap<mode>\"\n+  [(match_operand:SHORT 0 \"register_operand\")\n+   (match_operand:SHORT 1 \"memory_operand\")\n+   (match_operand:SHORT 2 \"general_operand\")\n+   (match_operand:SHORT 3 \"general_operand\")]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_6 = gen_compare_and_swap_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], operands[3]);\n+  DONE;\n+})\n+\n+;; Helper insn for mips_expand_atomic_qihi.\n+(define_insn \"compare_and_swap_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 4 \"reg_or_0_operand\" \"dJ,dJ\")\n+\t\t\t     (match_operand:SI 5 \"reg_or_0_operand\" \"d,J\")]\n+\t\t\t    UNSPEC_COMPARE_AND_SWAP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_NONZERO_OP);\n+  else\n+    return MIPS_COMPARE_AND_SWAP_12 (MIPS_COMPARE_AND_SWAP_12_ZERO_OP);\n+}\n+  [(set_attr \"length\" \"40,36\")])\n+\n+(define_insn \"sync_add<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR\n+          [(plus:GPR (match_dup 0)\n+\t\t     (match_operand:GPR 1 \"arith_operand\" \"I,d\"))]\n+\t  UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_expand \"sync_<optab><mode>\"\n+  [(set (match_operand:SHORT 0 \"memory_operand\")\n+\t(unspec_volatile:SHORT\n+\t  [(atomic_hiqi_op:SHORT (match_dup 0)\n+\t\t\t\t (match_operand:SHORT 1 \"general_operand\"))]\n+\t  UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_4 = gen_sync_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   NULL, operands[0], operands[1], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_<optab><mode>\n+(define_insn \"sync_<optab>_12\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"register_operand\" \"d\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 3 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 4 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OP_12 (\"<insn>\", MIPS_SYNC_OP_12_NOT_NOP);\t\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_old_<optab><mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (match_operand:SHORT 1 \"memory_operand\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n+\t\t\t\t    (match_dup 1)\n+\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n+\t    UNSPEC_SYNC_OLD_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_old_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_old_<optab><mode>\n+(define_insn \"sync_old_<optab>_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 5 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OLD_OP_12 (\"<insn>\", MIPS_SYNC_OLD_OP_12_NOT_NOP,\n+\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOP_REG);\t\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_new_<optab><mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (unspec_volatile:SHORT [(atomic_hiqi_op:SHORT\n+\t\t\t\t    (match_operand:SHORT 1 \"memory_operand\")\n+\t\t\t\t    (match_operand:SHORT 2 \"general_operand\"))]\n+\t    UNSPEC_SYNC_NEW_OP))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n+\t    UNSPEC_SYNC_NEW_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_new_<optab>_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_new_<optab><mode>\n+(define_insn \"sync_new_<optab>_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (atomic_hiqi_op:SI (match_dup 0)\n+\t\t\t      (match_operand:SI 4 \"register_operand\" \"dJ\"))]\n+\t  UNSPEC_SYNC_NEW_OP_12))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)\n+\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_NEW_OP_12 (\"<insn>\", MIPS_SYNC_NEW_OP_12_NOT_NOP);\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_expand \"sync_nand<mode>\"\n+  [(set (match_operand:SHORT 0 \"memory_operand\")\n+\t(unspec_volatile:SHORT\n+\t  [(match_dup 0)\n+\t   (match_operand:SHORT 1 \"general_operand\")]\n+\t  UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_4 = gen_sync_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   NULL, operands[0], operands[1], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_nand<mode>\n+(define_insn \"sync_nand_12\"\n+  [(set (match_operand:SI 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"register_operand\" \"d\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_dup 0)\n+\t   (match_operand:SI 3 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 4 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OP_12 (\"and\", MIPS_SYNC_OP_12_NOT_NOT);\t\n+}\n+  [(set_attr \"length\" \"44\")])\n+\n+(define_expand \"sync_old_nand<mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (match_operand:SHORT 1 \"memory_operand\"))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1)\n+\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n+\t    UNSPEC_SYNC_OLD_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_old_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_old_nand<mode>\n+(define_insn \"sync_old_nand_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_OLD_OP_12))\n+   (clobber (match_scratch:SI 5 \"=&d\"))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_OLD_OP_12 (\"and\", MIPS_SYNC_OLD_OP_12_NOT_NOT,\n+\t\t\t\tMIPS_SYNC_OLD_OP_12_NOT_NOT_REG);\t\n+}\n+  [(set_attr \"length\" \"44\")])\n+\n+(define_expand \"sync_new_nand<mode>\"\n+  [(parallel [\n+     (set (match_operand:SHORT 0 \"register_operand\")\n+\t  (unspec_volatile:SHORT [(match_operand:SHORT 1 \"memory_operand\")\n+\t\t\t\t  (match_operand:SHORT 2 \"general_operand\")]\n+\t    UNSPEC_SYNC_NEW_OP))\n+     (set (match_dup 1)\n+\t  (unspec_volatile:SHORT [(match_dup 1) (match_dup 2)]\n+\t    UNSPEC_SYNC_NEW_OP))])]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_sync_new_nand_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+;; Helper insn for sync_new_nand<mode>\n+(define_insn \"sync_new_nand_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d\")\n+\t(unspec_volatile:SI\n+          [(match_operand:SI 1 \"memory_operand\" \"+R\")\n+\t   (match_operand:SI 2 \"register_operand\" \"d\")\n+\t   (match_operand:SI 3 \"register_operand\" \"d\")\n+\t   (match_operand:SI 4 \"register_operand\" \"dJ\")]\n+\t  UNSPEC_SYNC_NEW_OP_12))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI\n+\t  [(match_dup 1)\n+\t   (match_dup 2)\n+\t   (match_dup 3)\n+\t   (match_dup 4)] UNSPEC_SYNC_NEW_OP_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+    return MIPS_SYNC_NEW_OP_12 (\"and\", MIPS_SYNC_NEW_OP_12_NOT_NOT);\n+}\n+  [(set_attr \"length\" \"40\")])\n+\n+(define_insn \"sync_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R\")\n+\t(unspec_volatile:GPR\n+          [(minus:GPR (match_dup 0)\n+\t\t\t      (match_operand:GPR 1 \"register_operand\" \"d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  return MIPS_SYNC_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_old_add<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(plus:GPR (match_dup 1)\n+\t\t     (match_operand:GPR 2 \"arith_operand\" \"I,d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_old_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(minus:GPR (match_dup 1)\n+\t\t      (match_operand:GPR 2 \"register_operand\" \"d\"))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  return MIPS_SYNC_OLD_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_new_add<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+        (plus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R,R\")\n+\t\t  (match_operand:GPR 2 \"arith_operand\" \"I,d\")))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(plus:GPR (match_dup 1) (match_dup 2))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addiu\");\t\n+  else\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>addu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_new_sub<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d\")\n+        (minus:GPR (match_operand:GPR 1 \"memory_operand\" \"+R\")\n+\t\t   (match_operand:GPR 2 \"register_operand\" \"d\")))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+\t  [(minus:GPR (match_dup 1) (match_dup 2))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  return MIPS_SYNC_NEW_OP (\"<d>\", \"<d>subu\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")\n+\t\t\t      (match_dup 0))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_old_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n+\t\t\t    (match_dup 1))]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_OLD_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_new_<optab><mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR\n+          [(fetchop_bit:GPR (match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")\n+\t\t\t    (match_dup 1))]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<immediate_insn>\");\t\n+  else\n+    return MIPS_SYNC_NEW_OP (\"<d>\", \"<insn>\");\t\n+}\n+  [(set_attr \"length\" \"28\")])\n+\n+(define_insn \"sync_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"memory_operand\" \"+R,R\")\n+\t(unspec_volatile:GPR [(match_operand:GPR 1 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"32\")])\n+\n+(define_insn \"sync_old_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+        (unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_OLD_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_OLD_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_OLD_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"32\")])\n+\n+(define_insn \"sync_new_nand<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"uns_arith_operand\" \"K,d\")]\n+\t UNSPEC_SYNC_NEW_OP))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_NEW_NAND (\"<d>\", \"andi\");\t\n+  else\n+    return MIPS_SYNC_NEW_NAND (\"<d>\", \"and\");\t\n+}\n+  [(set_attr \"length\" \"32\")])\n+\n+(define_insn \"sync_lock_test_and_set<mode>\"\n+  [(set (match_operand:GPR 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:GPR 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:GPR [(match_operand:GPR 2 \"arith_operand\" \"I,d\")]\n+\t UNSPEC_SYNC_EXCHANGE))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_EXCHANGE (\"<d>\", \"li\");\n+  else\n+    return MIPS_SYNC_EXCHANGE (\"<d>\", \"move\");\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n+(define_expand \"sync_lock_test_and_set<mode>\"\n+  [(match_operand:SHORT 0 \"register_operand\")\n+   (match_operand:SHORT 1 \"memory_operand\")\n+   (match_operand:SHORT 2 \"general_operand\")]\n+  \"GENERATE_LL_SC\"\n+{\n+  union mips_gen_fn_ptrs generator;\n+  generator.fn_5 = gen_test_and_set_12;\n+  mips_expand_atomic_qihi (generator,\n+\t\t\t   operands[0], operands[1], operands[2], NULL);\n+  DONE;\n+})\n+\n+(define_insn \"test_and_set_12\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=&d,&d\")\n+\t(match_operand:SI 1 \"memory_operand\" \"+R,R\"))\n+   (set (match_dup 1)\n+\t(unspec_volatile:SI [(match_operand:SI 2 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 3 \"register_operand\" \"d,d\")\n+\t\t\t     (match_operand:SI 4 \"arith_operand\" \"d,J\")]\n+\t  UNSPEC_SYNC_EXCHANGE_12))]\n+  \"GENERATE_LL_SC\"\n+{\n+  if (which_alternative == 0)\n+    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_NONZERO_OP);\n+  else\n+    return MIPS_SYNC_EXCHANGE_12 (MIPS_SYNC_EXCHANGE_12_ZERO_OP);\n+}\n+  [(set_attr \"length\" \"28,24\")])"}]}