{"sha": "52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkMGY3YmRhN2Q2MzNhY2IyYmQ4ZTc1ODVjMzJkMWNjYzZlYWYwMg==", "commit": {"author": {"name": "Daniel Santos", "email": "daniel.santos@pobox.com", "date": "2017-07-24T22:00:35Z"}, "committer": {"name": "Daniel Santos", "email": "dansan@gcc.gnu.org", "date": "2017-07-24T22:00:35Z"}, "message": "PR testsuite/80759 Fix broken tests in ms-sysv.exp\n\n2017-07-24  Daniel Santos  <daniel.santos@pobox.com>\n\n\tPR testsuite/80759\n\t* gcc.target/x86_64/abi/ms-sysv/do-test.S\n\t(ELFFN_BEGIN): Rename to FN_TYPE.\n\t(ELFFN_END): Rename to FN_SIZE.\n\t(ASMNAME): New macro.\n\t(FUNC): Rename to FUNC_BEGIN, use ASMNAME and use .globl instead of\n\t.global.\n\t(FUNC_END): Use ASMNAME.\n\t(test_data_save): Remove.\n\t(test_data_input): Likewise.\n\t(test_data_output: Likewise.\n\t(test_data_fn): Likewise.\n\t(test_data_retaddr): Likewise.\n\t(regs_to_mem): Make globals, use r10 instead of rax.\n\t(mem_to_regs): Likewise.\n\t(do_test_unaligned): Remove .cfi directives, remove pushf/popf, move\n\tbody to ms-sysv.c.\n\t(do_test_aligned): Likewise.\n\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c:\n\tAdd dg-* directives.\n\t(PASTE_STR): New macro.\n\t(ASMNAME): Likewise.\n\t(LOAD_TEST_DATA_ADDR): Likewise.\n\t(TEST_DATA_OFFSET): Likewise.\n\t(do_test_body0): New C function.\n\t(do_test_body): New inline assembly routine.\n\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.exp\n\t(runtest_ms_sysv): Modify.\n\nFrom-SVN: r250489", "tree": {"sha": "668140755bda0f94dd16a3d6cb7fb615bfbc0492", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/668140755bda0f94dd16a3d6cb7fb615bfbc0492"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/comments", "author": {"login": "daniel-santos", "id": 980562, "node_id": "MDQ6VXNlcjk4MDU2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/980562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daniel-santos", "html_url": "https://github.com/daniel-santos", "followers_url": "https://api.github.com/users/daniel-santos/followers", "following_url": "https://api.github.com/users/daniel-santos/following{/other_user}", "gists_url": "https://api.github.com/users/daniel-santos/gists{/gist_id}", "starred_url": "https://api.github.com/users/daniel-santos/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daniel-santos/subscriptions", "organizations_url": "https://api.github.com/users/daniel-santos/orgs", "repos_url": "https://api.github.com/users/daniel-santos/repos", "events_url": "https://api.github.com/users/daniel-santos/events{/privacy}", "received_events_url": "https://api.github.com/users/daniel-santos/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cbc07ccffa3403f4f18baf615bb1fe955b3a20e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cbc07ccffa3403f4f18baf615bb1fe955b3a20e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cbc07ccffa3403f4f18baf615bb1fe955b3a20e"}], "stats": {"total": 467, "additions": 241, "deletions": 226}, "files": [{"sha": "07d7897821e5c6c8065b4fe1b9219eaca4b5909f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "patch": "@@ -1,3 +1,34 @@\n+2017-07-24  Daniel Santos  <daniel.santos@pobox.com>\n+\n+\tPR testsuite/80759\n+\t* gcc.target/x86_64/abi/ms-sysv/do-test.S\n+\t(ELFFN_BEGIN): Rename to FN_TYPE.\n+\t(ELFFN_END): Rename to FN_SIZE.\n+\t(ASMNAME): New macro.\n+\t(FUNC): Rename to FUNC_BEGIN, use ASMNAME and use .globl instead of\n+\t.global.\n+\t(FUNC_END): Use ASMNAME.\n+\t(test_data_save): Remove.\n+\t(test_data_input): Likewise.\n+\t(test_data_output: Likewise.\n+\t(test_data_fn): Likewise.\n+\t(test_data_retaddr): Likewise.\n+\t(regs_to_mem): Make globals, use r10 instead of rax.\n+\t(mem_to_regs): Likewise.\n+\t(do_test_unaligned): Remove .cfi directives, remove pushf/popf, move\n+\tbody to ms-sysv.c.\n+\t(do_test_aligned): Likewise.\n+\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.c:\n+\tAdd dg-* directives.\n+\t(PASTE_STR): New macro.\n+\t(ASMNAME): Likewise.\n+\t(LOAD_TEST_DATA_ADDR): Likewise.\n+\t(TEST_DATA_OFFSET): Likewise.\n+\t(do_test_body0): New C function.\n+\t(do_test_body): New inline assembly routine.\n+\t* gcc.target/x86_64/abi/ms-sysv/ms-sysv.exp\n+\t(runtest_ms_sysv): Modify.\n+\n 2017-07-24  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/pr65849-1.c: Delete, test no longer valid"}, {"sha": "ffe011bcc687c9ce7a05b80b03ae16f1330e7bd7", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/do-test.S", "status": "modified", "additions": 80, "deletions": 120, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fdo-test.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fdo-test.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fdo-test.S?ref=52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "patch": "@@ -23,141 +23,101 @@ a copy of the GCC Runtime Library Exception along with this program;\n see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n <http://www.gnu.org/licenses/>.  */\n \n-#ifdef __x86_64__\n-\n-# ifdef __ELF__\n-#  define ELFFN_BEGIN(fn)       .type fn,@function\n-#  define ELFFN_END(fn)         .size fn,.-fn\n-# else\n-#  define ELFFN_BEGIN(fn)\n-#  define ELFFN_END(fn)\n-# endif\n-\n-# define FUNC(fn)\t\t\\\n-\t.global fn;\t\t\\\n-\tELFFN_BEGIN(fn);\t\\\n-fn:\n-\n-#define FUNC_END(fn) ELFFN_END(fn)\n-\n-# ifdef __AVX__\n-#  define MOVAPS vmovaps\n-# else\n-#  define MOVAPS movaps\n-# endif\n-\n-/* TODO: Is there a cleaner way to provide these offsets?  */\n-\t.struct 0\n-test_data_save:\n-\n-\t.struct test_data_save + 224\n-test_data_input:\n-\n-\t.struct test_data_save + 448\n-test_data_output:\n-\n-\t.struct test_data_save + 672\n-test_data_fn:\n-\n-\t.struct test_data_save + 680\n-test_data_retaddr:\n+#if defined(__x86_64__) && defined(__SSE2__)\n+\n+/* These macros currently support GNU/Linux, Solaris and Darwin.  */\n+\n+#ifdef __ELF__\n+# define FN_TYPE(fn) .type fn,@function\n+# define FN_SIZE(fn) .size fn,.-fn\n+#else\n+# define FN_TYPE(fn)\n+# define FN_SIZE(fn)\n+#endif\n+\n+#ifdef __USER_LABEL_PREFIX__\n+# define ASMNAME2(prefix, name)\tprefix ## name\n+# define ASMNAME1(prefix, name)\tASMNAME2(prefix, name)\n+# define ASMNAME(name)\t\tASMNAME1(__USER_LABEL_PREFIX__, name)\n+#else\n+# define ASMNAME(name)\t\tname\n+#endif\n+\n+#define FUNC_BEGIN(fn)\t\t\\\n+\t.globl ASMNAME(fn);\t\\\n+\tFN_TYPE (ASMNAME(fn));\t\\\n+ASMNAME(fn):\n+\n+#define FUNC_END(fn) FN_SIZE(ASMNAME(fn))\n+\n+#ifdef __AVX__\n+# define MOVAPS vmovaps\n+#else\n+# define MOVAPS movaps\n+#endif\n \n \t.text\n \n-regs_to_mem:\n-\tMOVAPS\t%xmm6, (%rax)\n-\tMOVAPS\t%xmm7, 0x10(%rax)\n-\tMOVAPS\t%xmm8, 0x20(%rax)\n-\tMOVAPS\t%xmm9, 0x30(%rax)\n-\tMOVAPS\t%xmm10, 0x40(%rax)\n-\tMOVAPS\t%xmm11, 0x50(%rax)\n-\tMOVAPS\t%xmm12, 0x60(%rax)\n-\tMOVAPS\t%xmm13, 0x70(%rax)\n-\tMOVAPS\t%xmm14, 0x80(%rax)\n-\tMOVAPS\t%xmm15, 0x90(%rax)\n-\tmov\t%rsi, 0xa0(%rax)\n-\tmov\t%rdi, 0xa8(%rax)\n-\tmov\t%rbx, 0xb0(%rax)\n-\tmov\t%rbp, 0xb8(%rax)\n-\tmov\t%r12, 0xc0(%rax)\n-\tmov\t%r13, 0xc8(%rax)\n-\tmov\t%r14, 0xd0(%rax)\n-\tmov\t%r15, 0xd8(%rax)\n+FUNC_BEGIN(regs_to_mem)\n+\tMOVAPS\t%xmm6, (%r10)\n+\tMOVAPS\t%xmm7, 0x10(%r10)\n+\tMOVAPS\t%xmm8, 0x20(%r10)\n+\tMOVAPS\t%xmm9, 0x30(%r10)\n+\tMOVAPS\t%xmm10, 0x40(%r10)\n+\tMOVAPS\t%xmm11, 0x50(%r10)\n+\tMOVAPS\t%xmm12, 0x60(%r10)\n+\tMOVAPS\t%xmm13, 0x70(%r10)\n+\tMOVAPS\t%xmm14, 0x80(%r10)\n+\tMOVAPS\t%xmm15, 0x90(%r10)\n+\tmov\t%rsi, 0xa0(%r10)\n+\tmov\t%rdi, 0xa8(%r10)\n+\tmov\t%rbx, 0xb0(%r10)\n+\tmov\t%rbp, 0xb8(%r10)\n+\tmov\t%r12, 0xc0(%r10)\n+\tmov\t%r13, 0xc8(%r10)\n+\tmov\t%r14, 0xd0(%r10)\n+\tmov\t%r15, 0xd8(%r10)\n \tretq\n-\n-mem_to_regs:\n-\tMOVAPS\t(%rax), %xmm6\n-\tMOVAPS\t0x10(%rax),%xmm7\n-\tMOVAPS\t0x20(%rax),%xmm8\n-\tMOVAPS\t0x30(%rax),%xmm9\n-\tMOVAPS\t0x40(%rax),%xmm10\n-\tMOVAPS\t0x50(%rax),%xmm11\n-\tMOVAPS\t0x60(%rax),%xmm12\n-\tMOVAPS\t0x70(%rax),%xmm13\n-\tMOVAPS\t0x80(%rax),%xmm14\n-\tMOVAPS\t0x90(%rax),%xmm15\n-\tmov\t0xa0(%rax),%rsi\n-\tmov\t0xa8(%rax),%rdi\n-\tmov\t0xb0(%rax),%rbx\n-\tmov\t0xb8(%rax),%rbp\n-\tmov\t0xc0(%rax),%r12\n-\tmov\t0xc8(%rax),%r13\n-\tmov\t0xd0(%rax),%r14\n-\tmov\t0xd8(%rax),%r15\n+FUNC_END(regs_to_mem)\n+\n+FUNC_BEGIN(mem_to_regs)\n+\tMOVAPS\t(%r10), %xmm6\n+\tMOVAPS\t0x10(%r10),%xmm7\n+\tMOVAPS\t0x20(%r10),%xmm8\n+\tMOVAPS\t0x30(%r10),%xmm9\n+\tMOVAPS\t0x40(%r10),%xmm10\n+\tMOVAPS\t0x50(%r10),%xmm11\n+\tMOVAPS\t0x60(%r10),%xmm12\n+\tMOVAPS\t0x70(%r10),%xmm13\n+\tMOVAPS\t0x80(%r10),%xmm14\n+\tMOVAPS\t0x90(%r10),%xmm15\n+\tmov\t0xa0(%r10),%rsi\n+\tmov\t0xa8(%r10),%rdi\n+\tmov\t0xb0(%r10),%rbx\n+\tmov\t0xb8(%r10),%rbp\n+\tmov\t0xc0(%r10),%r12\n+\tmov\t0xc8(%r10),%r13\n+\tmov\t0xd0(%r10),%r14\n+\tmov\t0xd8(%r10),%r15\n \tretq\n+FUNC_END(mem_to_regs)\n \n # NOTE: Not MT safe\n-FUNC(do_test_unaligned)\n-\t.cfi_startproc\n+FUNC_BEGIN(do_test_unaligned)\n \t# The below alignment checks are to verify correctness of the test\n \t# its self.\n \n \t# Verify that incoming stack is aligned + 8\n-\tpushf\n-\ttest\t$0x8, %rsp\n-\tjne\tL0\n+\ttest\t$0xf, %rsp\n+\tje\tASMNAME(do_test_body)\n \tint\t$3\t\t# Stack not unaligned\n+FUNC_END(do_test_unaligned)\n \n-FUNC(do_test_aligned)\n+FUNC_BEGIN(do_test_aligned)\n \t# Verify that incoming stack is aligned\n-\tpushf\n-\ttest\t$0xf, %rsp\n-\tje\tL0\n+\ttest\t$0x8, %rsp\n+\tjne\tASMNAME(do_test_body)\n \tint\t$3\t\t# Stack not aligned\n-L0:\n-\tpopf\n-\n-\t# Save registers\n-\tlea\ttest_data(%rip), %rax\n-\tcall\tregs_to_mem\n-\n-\t# Load register with random data\n-\tlea\ttest_data + test_data_input(%rip), %rax\n-\tcall\tmem_to_regs\n-\n-\t# Save original return address\n-\tpop\t%rax\n-\tmovq    %rax, test_data + test_data_retaddr(%rip)\n-\n-\t# Call the test function\n-\tcall\t*test_data + test_data_fn(%rip)\n-\n-\t# Restore the original return address\n-\tmovq    test_data + test_data_retaddr(%rip), %rcx\n-\tpush\t%rcx\n-\n-\t# Save test function return value and store resulting register values\n-\tpush\t%rax\n-\tlea\ttest_data + test_data_output(%rip), %rax\n-\tcall\tregs_to_mem\n-\n-\t# Restore registers\n-\tlea\ttest_data(%rip), %rax\n-\tcall\tmem_to_regs\n-\tpop\t%rax\n-\tretq\n-        .cfi_endproc\n FUNC_END(do_test_aligned)\n-FUNC_END(do_test_unaligned)\n \n #endif /* __x86_64__ */"}, {"sha": "caf9e6b5debc4eb9021fff3cc4cbef15259428a2", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/ms-sysv.c", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.c?ref=52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "patch": "@@ -46,6 +46,10 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n   is then called.  After the function returns, the value of all volatile\n   registers is verified against the random data and then restored.  */\n \n+/* { dg-do run } */\n+/* { dg-additional-sources \"do-test.S\" } */\n+/* { dg-additional-options \"-Wall\" } */\n+\n #include <stdio.h>\n #include <string.h>\n #include <stdlib.h>\n@@ -58,8 +62,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #include <errno.h>\n #include <ctype.h>\n \n-#ifndef __x86_64__\n-# error Test only valid on x86_64\n+#if !defined(__x86_64__) || !defined(__SSE2__)\n+# error Test only valid on x86_64 with -msse2\n #endif\n \n enum reg_data_sets\n@@ -144,6 +148,81 @@ static __attribute__((ms_abi)) long\n static int arbitrarily_fail;\n static const char *argv0;\n \n+\n+#define PASTE_STR2(a)\t\t#a\n+#define PASTE_STR1(a, b)\tPASTE_STR2(a ## b)\n+#define PASTE_STR(a, b)\t\tPASTE_STR1(a, b)\n+\n+#ifdef __USER_LABEL_PREFIX__\n+# define ASMNAME(name)\t\tPASTE_STR(__USER_LABEL_PREFIX__, name)\n+#else\n+# define ASMNAME(name)\t\t#name\n+#endif\n+\n+#ifdef __MACH__\n+# define LOAD_TEST_DATA_ADDR(dest) \\\n+\t\"\tmov\t\" ASMNAME(test_data) \"@GOTPCREL(%%rip), \" dest \"\\n\"\n+#else\n+# define LOAD_TEST_DATA_ADDR(dest) \\\n+\t\"\tlea\t\" ASMNAME(test_data) \"(%%rip), \" dest \"\\n\"\n+#endif\n+\n+#define TEST_DATA_OFFSET(f)\t((int)__builtin_offsetof(struct test_data, f))\n+\n+void __attribute__((used))\n+do_test_body0 (void)\n+{\n+  __asm__ (\"\\n\"\n+\t\"\t.globl \" ASMNAME(do_test_body) \"\\n\"\n+#ifdef __ELF__\n+\t\"\t.type \" ASMNAME(do_test_body) \",@function\\n\"\n+#endif\n+\tASMNAME(do_test_body) \":\\n\"\n+\t\"\t# rax, r10 and r11 are usable here.\\n\"\n+\t\"\\n\"\n+\t\"\t# Save registers.\\n\"\n+\t\tLOAD_TEST_DATA_ADDR(\"%%rax\")\n+\t\"\tlea\t%p0(%%rax), %%r10\\n\"\n+\t\"\tcall\t\" ASMNAME(regs_to_mem) \"\\n\"\n+\t\"\\n\"\n+\t\"\t# Load registers with random data.\\n\"\n+\t\"\tlea\t%p1(%%rax), %%r10\\n\"\n+\t\"\tcall\t\" ASMNAME(mem_to_regs) \"\\n\"\n+\t\"\\n\"\n+\t\"\t# Pop and save original return address.\\n\"\n+\t\"\tpop\t%%r10\\n\"\n+\t\"\tmov\t%%r10, %p4(%%rax)\\n\"\n+\t\"\\n\"\n+\t\"\t# Call the test function, after which rcx, rdx and r8-11\\n\"\n+\t\"\t# become usable.\\n\"\n+\t\"\tlea\t%p3(%%rax), %%rax\\n\"\n+\t\"\tcall\t*(%%rax)\\n\"\n+\t\"\\n\"\n+\t\"\t# Store resulting register values.\\n\"\n+\t\tLOAD_TEST_DATA_ADDR(\"%%rcx\")\n+\t\"\tlea\t%p2(%%rcx), %%r10\\n\"\n+\t\"\tcall\t\" ASMNAME(regs_to_mem) \"\\n\"\n+\t\"\\n\"\n+\t\"\t# Push the original return address.\\n\"\n+\t\"\tlea\t%p4(%%rcx), %%r10\\n\"\n+\t\"\tpush\t(%%r10)\\n\"\n+\t\"\\n\"\n+\t\"\t# Restore registers.\\n\"\n+\t\"\tlea\t%p0(%%rcx), %%r10\\n\"\n+\t\"\tcall\t\" ASMNAME(mem_to_regs) \"\\n\"\n+\t\"\\n\"\n+\t\"\tretq\\n\"\n+#ifdef __ELF__\n+\t\"\t.size \" ASMNAME(do_test_body) \",.-\" ASMNAME(do_test_body) \"\\n\"\n+#endif\n+\t::\n+\t\"i\"(TEST_DATA_OFFSET(regdata[REG_SET_SAVE])),\n+\t\"i\"(TEST_DATA_OFFSET(regdata[REG_SET_INPUT])),\n+\t\"i\"(TEST_DATA_OFFSET(regdata[REG_SET_OUTPUT])),\n+\t\"i\"(TEST_DATA_OFFSET(fn)),\n+\t\"i\"(TEST_DATA_OFFSET(retaddr)) : \"memory\");\n+}\n+\n static void __attribute__((noinline))\n init_test (void *fn, const char *name, enum alignment_option alignment,\n \t   enum shrink_wrap_option shrink_wrap, long ret_expected)"}, {"sha": "87f81690bc785d70672e2768c4549f190cdf7fc2", "filename": "gcc/testsuite/gcc.target/x86_64/abi/ms-sysv/ms-sysv.exp", "status": "modified", "additions": 49, "deletions": 104, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fx86_64%2Fabi%2Fms-sysv%2Fms-sysv.exp?ref=52d0f7bda7d633acb2bd8e7585c32d1ccc6eaf02", "patch": "@@ -56,71 +56,65 @@ proc host_supports_c++11 {} {\n \n # Exit immediately if this isn't a native x86_64 target.\n if { (![istarget x86_64-*-*] && ![istarget i?86-*-*])\n-     || ![is-effective-target lp64] || ![isnative]\n-     || ![host_supports_c++11] } then {\n-    unsupported \"$subdir\"\n+      || ![is-effective-target lp64] || ![isnative]\n+      || ![host_supports_c++11] } then {\n+\n+    # Gate \"unsupported\" message return value of first runtest_file_p call.\n+    if [runtest_file_p $runtests \"$srcdir/$subdir/ms-sysv.c\"] {\n+\tunsupported \"$subdir\"\n+    }\n     return\n }\n \n-global GCC_RUNTEST_PARALLELIZE_DIR\n-\n proc runtest_ms_sysv { cflags generator_args } {\n     global GCC_UNDER_TEST HOSTCXX HOSTCXXFLAGS tmpdir srcdir subdir \\\n-\t   parallel_dir next_test\n+\t   TEST_ALWAYS_FLAGS runtests\n \n     set objdir \"$tmpdir/ms-sysv\"\n     set generator \"$tmpdir/ms-sysv-generate.exe\"\n     set generated_header \"$objdir/ms-sysv-generated.h\"\n-    set do_test_o \"$objdir/do-test.o\"\n-    set ms_sysv_o \"$objdir/ms-sysv.o\"\n-    set ms_sysv_exe \"$objdir/ms-sysv.exe\"\n     set status 0\n     set warn_flags \"-Wall\"\n-    set this_test $next_test\n-    incr next_test\n-\n-    # Do parallelization here\n-    if [catch {set fd [open \"$parallel_dir/$this_test\" \\\n-\t\t\t    [list RDWR CREAT EXCL]]} ] {\n-\tif { [lindex $::errorCode 1] eq \"EEXIST\" } then {\n-\t    # Another job is running this test\n-\t    return\n-\t} else {\n-\t    error \"Failed to open $parallel_dir/$this_test: $::errorCode\"\n-\t    set status 1\n-\t}\n-    } else {\n-      close $fd\n-    }\n \n     # Detect when hard frame pointers are enabled (or required) so we know not\n     # to generate bp clobbers.\n-    if [regexp \"^(.+ +| *)-(O0|fno-omit-frame-pointer|p|pg)( +.*)?$\" \\\n-\t       $cflags match] then {\n+    if { [regexp \"(^| )-(O0|fno-omit-frame-pointer|p|pg)( |$)\" \\\n+\t\t \"$TEST_ALWAYS_FLAGS $cflags\" match]\n+\t || [istarget *-*-solaris*] } then {\n \tset generator_args \"$generator_args --omit-rbp-clobbers\"\n     }\n \n-    set descr \"$subdir CFLAGS=\\\"$cflags\\\" generator_args=\\\"$generator_args\\\"\"\n-    verbose \"$tmpdir: Running test $descr\" 1\n+    # Add all other flags\n+    set escaped_generator_args [regsub -all \" \" $generator_args \"\\\\ \"]\n+    set cflags \"$cflags\\\"-DGEN_ARGS=$escaped_generator_args\\\"\"\n+\n+    gcc_parallel_test_enable 1\n+    if ![runtest_file_p $runtests \"$srcdir/$subdir/ms-sysv.c\"] then {\n+\treturn\n+    }\n+\n+    #verbose \"runtest_ms_sysv $cflags\" 0\n+\n+    # Make sure there's no previous header file so that we can't accidentally\n+    # pass if generation fails.\n+    file delete -force $generated_header\n \n     # Cleanup any previous test in objdir\n     file delete -force $objdir\n     file mkdir $objdir\n \n     # Build the generator (only needs to be done once).\n     set src \"$srcdir/$subdir/gen.cc\"\n-    if { $status == 0 } then {\n-\tif { (![file exists \"$generator\"]) || ([file mtime \"$generator\"]\n-\t\t\t\t\t    < [file mtime \"$src\"]) } {\n-\t    # Temporarily switch to the environment for the host compiler.\n-\t    restore_ld_library_path_env_vars\n-\t    set cxx \"$HOSTCXX $HOSTCXXFLAGS $warn_flags -std=c++11\"\n-\t    set status [remote_exec host \"$cxx -o $generator $src\"]\n-\t    set status [lindex $status 0]\n-\t    set_ld_library_path_env_vars\n-\t    if { $status != 0 } then {\n-\t\twarning \"Could not build $subdir generator\"\n-\t    }\n+    if { (![file exists \"$generator\"]) || ([file mtime \"$generator\"]\n+\t\t\t\t\t   < [file mtime \"$src\"]) } {\n+\t# Temporarily switch to the environment for the host compiler.\n+\trestore_ld_library_path_env_vars\n+\tset cxx \"$HOSTCXX $HOSTCXXFLAGS $TEST_ALWAYS_FLAGS $warn_flags -std=c++11\"\n+\tset status [remote_exec host \"$cxx -o $generator $src\"]\n+\tset status [lindex $status 0]\n+\tset_ld_library_path_env_vars\n+\tif { $status != 0 } then {\n+\t    warning \"Could not build $subdir generator\"\n \t}\n     }\n \n@@ -133,75 +127,26 @@ proc runtest_ms_sysv { cflags generator_args } {\n \t}\n     }\n \n-    set cc \"$GCC_UNDER_TEST -I$objdir -I$srcdir/$subdir $cflags $warn_flags\"\n-\n-    # Assemble do-test.S\n-    set src \"$srcdir/$subdir/do-test.S\"\n-    if { $status == 0 } then {\n-\tset status [remote_exec build \"$cc -c -o $do_test_o $src\"]\n-\tset status [lindex $status 0]\n-\tif { $status != 0 } then {\n-\t    warning \"Could not assemble $src\"\n-\t}\n-    }\n-\n-    # Build ms-sysv.c\n-    set src \"$srcdir/$subdir/ms-sysv.c\"\n-    if { $status == 0 } then {\n-\tset status [remote_exec build \"$cc -c -o $ms_sysv_o $src\" \"\" \"\" \"\" 1200]\n-\tset status [lindex $status 0]\n-\tif { $status != 0 } then {\n-\t    warning \"Could not build $src.\"\n-\t}\n-    }\n-\n-    # Link\n-    if { $status == 0 } then {\n-\tset status [remote_exec build \"$cc -o $ms_sysv_exe $ms_sysv_o $do_test_o\"]\n-\tset status [lindex $status 0]\n-\tif { $status != 0 } then {\n-\t    warning \"Link failed.\"\n-\t}\n-    }\n-\n-    # Execute\n-    if { $status == 0 } then {\n-\tset status [remote_exec build \"$ms_sysv_exe\"]\n-\tset status [lindex $status 0]\n-    }\n-\n-    if { $status != 0 } then {\n-\tfail $descr\n-    } else {\n-\tpass $descr\n-    }\n+    gcc_parallel_test_enable 0\n+    dg-runtest $srcdir/$subdir/ms-sysv.c \"$cflags\" \"-I$objdir -I$srcdir/$subdir $warn_flags\"\n+    gcc_parallel_test_enable 1\n }\n \n dg-init\n \n-# Setup parallelization\n-set next_test 0\n-set parallel_dir \"$env(GCC_RUNTEST_PARALLELIZE_DIR)/abi-ms-sysv\"\n-file mkdir \"$env(GCC_RUNTEST_PARALLELIZE_DIR)\"\n-file mkdir \"$parallel_dir\"\n-\n-if { ![file isdirectory \"$parallel_dir\"] } then {\n-    error \"Failed to create directory $parallel_dir: $::errorCode\"\n-    return\n-}\n+# Standard test parameters.\n+set gen_pcount_opts [list \"-p0\" \"-p1\" \"-p5\"]\n+set base_cflags_arr [list \" -O2 \" \" -O0 -g3 \"]\n \n-set gen_opts \"-p0-5\"\n-set all_options [list \"-O2\" \"-O0 -g3\"]\n+foreach gen_opts $gen_pcount_opts {\n+    foreach cflags $base_cflags_arr {\n+\t# Run without -mcall-ms2sysv-xlogues always\n+\truntest_ms_sysv \"$cflags\" \"$gen_opts\"\n \n-# Run without -mcall-ms2sysv-xlogues always\n-foreach opt $all_options {\n-    runtest_ms_sysv \"$opt\" \"$gen_opts\"\n-}\n-\n-# Skip -mcall-ms2sysv-xlogues on Windows (not supported)\n-if { ![istarget *-*-cygwin*] && ![istarget *-*-mingw*] } {\n-    foreach opt $all_options {\n-\truntest_ms_sysv \"-mcall-ms2sysv-xlogues $opt\" \"$gen_opts\"\n+\t# Skip unsupported -mcall-ms2sysv-xlogues on Windows\n+\tif { ![istarget *-*-cygwin*] && ![istarget *-*-mingw*] } {\n+\t    runtest_ms_sysv \"-mcall-ms2sysv-xlogues$cflags\" \"$gen_opts\"\n+\t}\n     }\n }\n "}]}