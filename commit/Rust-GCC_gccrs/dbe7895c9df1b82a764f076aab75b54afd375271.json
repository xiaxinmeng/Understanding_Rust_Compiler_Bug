{"sha": "dbe7895c9df1b82a764f076aab75b54afd375271", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlNzg5NWM5ZGYxYjgyYTc2NGYwNzZhYWI3NWI1NGFmZDM3NTI3MQ==", "commit": {"author": {"name": "Andrew Stubbs", "email": "ams@codesourcery.com", "date": "2018-10-22T14:23:37Z"}, "committer": {"name": "Andrew Stubbs", "email": "ams@gcc.gnu.org", "date": "2018-10-22T14:23:37Z"}, "message": "Don't double-count early-clobber matches.\n\nGiven a pattern with a number of operands:\n\n(match_operand 0 \"\" \"=&v\")\n(match_operand 1 \"\" \" v0\")\n(match_operand 2 \"\" \" v0\")\n(match_operand 3 \"\" \" v0\")\n\nGCC will currently increment \"reject\" once, for operand 0, and then decrement\nit once for each of the other operands, ending with reject == -2 and an\nassertion failure.  If there's a conflict then it might try to decrement reject\nyet again.\n\nIncidentally, what these patterns are trying to achieve is an allocation in\nwhich operand 0 may match one of the other operands, but may not partially\noverlap any of them.  Ideally there'd be a better way to do this.\n\nIn any case, it will affect any pattern in which multiple operands may (or\nmust) match an early-clobber operand.\n\nThe patch only allows a reject-- when one has not already occurred, for that\noperand.\n\n2018-10-22  Andrew Stubbs  <ams@codesourcery.com>\n\n\tgcc/\n\t* lra-constraints.c (process_alt_operands): New local array,\n\tmatching_early_clobber.  Check matching_early_clobber before\n\tdecrementing reject, and set matching_early_clobber after.\n\nFrom-SVN: r265393", "tree": {"sha": "4ee7d0adc73737b64c868a7ecf0097a9fa860893", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee7d0adc73737b64c868a7ecf0097a9fa860893"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe7895c9df1b82a764f076aab75b54afd375271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe7895c9df1b82a764f076aab75b54afd375271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe7895c9df1b82a764f076aab75b54afd375271", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe7895c9df1b82a764f076aab75b54afd375271/comments", "author": {"login": "ams-cs", "id": 2235130, "node_id": "MDQ6VXNlcjIyMzUxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2235130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ams-cs", "html_url": "https://github.com/ams-cs", "followers_url": "https://api.github.com/users/ams-cs/followers", "following_url": "https://api.github.com/users/ams-cs/following{/other_user}", "gists_url": "https://api.github.com/users/ams-cs/gists{/gist_id}", "starred_url": "https://api.github.com/users/ams-cs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ams-cs/subscriptions", "organizations_url": "https://api.github.com/users/ams-cs/orgs", "repos_url": "https://api.github.com/users/ams-cs/repos", "events_url": "https://api.github.com/users/ams-cs/events{/privacy}", "received_events_url": "https://api.github.com/users/ams-cs/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b333d8b6d0deca1126f1e206f6ba2678deec437a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333d8b6d0deca1126f1e206f6ba2678deec437a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b333d8b6d0deca1126f1e206f6ba2678deec437a"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "6c05108197191352fe3933fcf7243dfd1c77fc91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe7895c9df1b82a764f076aab75b54afd375271/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe7895c9df1b82a764f076aab75b54afd375271/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe7895c9df1b82a764f076aab75b54afd375271", "patch": "@@ -1,3 +1,9 @@\n+2018-10-22  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\t* lra-constraints.c (process_alt_operands): New local array,\n+\tmatching_early_clobber.  Check matching_early_clobber before\n+\tdecrementing reject, and set matching_early_clobber after.\n+\n 2018-10-22  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR target/87598"}, {"sha": "ab61989734d419e28d27b5d2412dec0f9a34fd2d", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe7895c9df1b82a764f076aab75b54afd375271/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe7895c9df1b82a764f076aab75b54afd375271/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=dbe7895c9df1b82a764f076aab75b54afd375271", "patch": "@@ -1969,6 +1969,7 @@ process_alt_operands (int only_alternative)\n       if (!TEST_BIT (preferred, nalt))\n \tcontinue;\n \n+      bool matching_early_clobber[MAX_RECOG_OPERANDS];\n       curr_small_class_check++;\n       overall = losers = addr_losers = 0;\n       static_reject = reject = reload_nregs = reload_sum = 0;\n@@ -1980,6 +1981,7 @@ process_alt_operands (int only_alternative)\n \t    fprintf (lra_dump_file,\n \t\t     \"            Staticly defined alt reject+=%d\\n\", inc);\n \t  static_reject += inc;\n+\t  matching_early_clobber[nop] = 0;\n \t}\n       reject += static_reject;\n       early_clobbered_regs_num = 0;\n@@ -2175,7 +2177,11 @@ process_alt_operands (int only_alternative)\n \t\t\t\t \"            %d Matching earlyclobber alt:\"\n \t\t\t\t \" reject--\\n\",\n \t\t\t\t nop);\n-\t\t\t    reject--;\n+\t\t\t    if (!matching_early_clobber[m])\n+\t\t\t      {\n+\t\t\t\treject--;\n+\t\t\t\tmatching_early_clobber[m] = 1;\n+\t\t\t      }\n \t\t\t  }\n \t\t\t/* Otherwise we prefer no matching\n \t\t\t   alternatives because it gives more freedom\n@@ -2921,15 +2927,11 @@ process_alt_operands (int only_alternative)\n \t      curr_alt_dont_inherit_ops[curr_alt_dont_inherit_ops_num++]\n \t\t= last_conflict_j;\n \t      losers++;\n-\t      /* Early clobber was already reflected in REJECT. */\n-\t      lra_assert (reject > 0);\n \t      if (lra_dump_file != NULL)\n \t\tfprintf\n \t\t  (lra_dump_file,\n \t\t   \"            %d Conflict early clobber reload: reject--\\n\",\n \t\t   i);\n-\t      reject--;\n-\t      overall += LRA_LOSER_COST_FACTOR - 1;\n \t    }\n \t  else\n \t    {\n@@ -2953,17 +2955,21 @@ process_alt_operands (int only_alternative)\n \t\t}\n \t      curr_alt_win[i] = curr_alt_match_win[i] = false;\n \t      losers++;\n-\t      /* Early clobber was already reflected in REJECT. */\n-\t      lra_assert (reject > 0);\n \t      if (lra_dump_file != NULL)\n \t\tfprintf\n \t\t  (lra_dump_file,\n \t\t   \"            %d Matched conflict early clobber reloads: \"\n \t\t   \"reject--\\n\",\n \t\t   i);\n+\t    }\n+\t  /* Early clobber was already reflected in REJECT. */\n+\t  if (!matching_early_clobber[i])\n+\t    {\n+\t      lra_assert (reject > 0);\n \t      reject--;\n-\t      overall += LRA_LOSER_COST_FACTOR - 1;\n+\t      matching_early_clobber[i] = 1;\n \t    }\n+\t  overall += LRA_LOSER_COST_FACTOR - 1;\n \t}\n       if (lra_dump_file != NULL)\n \tfprintf (lra_dump_file, \"          alt=%d,overall=%d,losers=%d,rld_nregs=%d\\n\","}]}