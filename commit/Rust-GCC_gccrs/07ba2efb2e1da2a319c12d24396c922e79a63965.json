{"sha": "07ba2efb2e1da2a319c12d24396c922e79a63965", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiYTJlZmIyZTFkYTJhMzE5YzEyZDI0Mzk2YzkyMmU3OWE2Mzk2NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-02-06T05:41:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-02-06T05:41:12Z"}, "message": "arc-protos.h: Remove the prototype for arc_setup_incoming_varargs.\n\n\t* config/arc/arc-protos.h: Remove the prototype for\n\tarc_setup_incoming_varargs.\n\t* config/arc/arc.c (TARGET_ASM_EXTERNAL_LIBCALL): New.\n\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n\t(arc_setup_incoming_varargs): Make it static.\n\t(arc_external_libcall): Likewise.\n\t* config/arc/arc.h (SETUP_INCOMING_VARARGS): Remove.\n\tRemove the commented-out definition of\n\tASM_OUTPUT_EXTERNAL_LIBCALL.\n\nFrom-SVN: r77374", "tree": {"sha": "ab796967d2726f7d298f14c29bad63dae70fdada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab796967d2726f7d298f14c29bad63dae70fdada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07ba2efb2e1da2a319c12d24396c922e79a63965", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ba2efb2e1da2a319c12d24396c922e79a63965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07ba2efb2e1da2a319c12d24396c922e79a63965", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07ba2efb2e1da2a319c12d24396c922e79a63965/comments", "author": null, "committer": null, "parents": [{"sha": "f4954ff18f3f4672bbe2453303694fd76d1225e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4954ff18f3f4672bbe2453303694fd76d1225e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4954ff18f3f4672bbe2453303694fd76d1225e6"}], "stats": {"total": 68, "additions": 42, "deletions": 26}, "files": [{"sha": "ca4e7cd992ec562ffdca796ad004d4c61c349a2d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=07ba2efb2e1da2a319c12d24396c922e79a63965", "patch": "@@ -1,3 +1,15 @@\n+2004-02-06  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/arc/arc-protos.h: Remove the prototype for\n+\tarc_setup_incoming_varargs.\n+\t* config/arc/arc.c (TARGET_ASM_EXTERNAL_LIBCALL): New.\n+\t(TARGET_SETUP_INCOMING_VARARGS): Likewise.\n+\t(arc_setup_incoming_varargs): Make it static.\n+\t(arc_external_libcall): Likewise.\n+\t* config/arc/arc.h (SETUP_INCOMING_VARARGS): Remove.\n+\tRemove the commented-out definition of\n+\tASM_OUTPUT_EXTERNAL_LIBCALL.\n+\n 2004-02-05  SUGIOKA Toshinobu  <sugioka@itonet.co.jp>\n \n \t* config/sh/t-linux (SHLIB_INSTALL): Prepend $$(DESTDIR)"}, {"sha": "da9f70afe4beefa9e1e8f09d0d2abca7aa8c2818", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=07ba2efb2e1da2a319c12d24396c922e79a63965", "patch": "@@ -59,8 +59,6 @@ extern int shift_operator (rtx, enum machine_mode);\n \n #ifdef TREE_CODE\n extern enum arc_function_type arc_compute_function_type (tree);\n-extern void arc_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n-\t\t\t\t\ttree, int *, int);\n #endif /* TREE_CODE */\n \n "}, {"sha": "c838f32ea83c90f7b10d376bc478cfa2ca08f1bb", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=07ba2efb2e1da2a319c12d24396c922e79a63965", "patch": "@@ -96,8 +96,11 @@ static void arc_output_function_prologue (FILE *, HOST_WIDE_INT);\n static void arc_output_function_epilogue (FILE *, HOST_WIDE_INT);\n static void arc_file_start (void);\n static void arc_internal_label (FILE *, const char *, unsigned long);\n+static void arc_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t\t\ttree, int *, int);\n static bool arc_rtx_costs (rtx, int, int, int *);\n static int arc_address_cost (rtx);\n+static void arc_external_libcall (rtx);\n static bool arc_return_in_memory (tree, tree);\n \f\n /* Initialize the GCC target structure.  */\n@@ -118,6 +121,8 @@ static bool arc_return_in_memory (tree, tree);\n #define TARGET_ATTRIBUTE_TABLE arc_attribute_table\n #undef TARGET_ASM_INTERNAL_LABEL\n #define TARGET_ASM_INTERNAL_LABEL arc_internal_label\n+#undef TARGET_ASM_EXTERNAL_LIBCALL\n+#define TARGET_ASM_EXTERNAL_LIBCALL arc_external_libcall\n \n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS arc_rtx_costs\n@@ -136,6 +141,9 @@ static bool arc_return_in_memory (tree, tree);\n #undef TARGET_RETURN_IN_MEMORY\n #define TARGET_RETURN_IN_MEMORY arc_return_in_memory\n \n+#undef TARGET_SETUP_INCOMING_VARARGS\n+#define TARGET_SETUP_INCOMING_VARARGS arc_setup_incoming_varargs\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n@@ -774,7 +782,7 @@ arc_double_limm_p (rtx value)\n    aligned.  So we round the space up if necessary, and leave it to va_start\n    to compensate.  */\n \n-void\n+static void\n arc_setup_incoming_varargs (CUMULATIVE_ARGS *cum,\n                             enum machine_mode mode,\n                             tree type ATTRIBUTE_UNUSED,\n@@ -2365,6 +2373,26 @@ arc_internal_label (FILE *stream, const char *prefix, unsigned long labelno)\n   default_internal_label (stream, prefix, labelno);\n }\n \n+/* Worker function for TARGET_ASM_EXTERNAL_LIBCALL.  */\n+\n+static void\n+arc_external_libcall (rtx fun ATTRIBUTE_UNUSED)\n+{\n+#if 0\n+/* On the ARC we want to have libgcc's for multiple cpus in one binary.\n+   We can't use `assemble_name' here as that will call ASM_OUTPUT_LABELREF\n+   and we'll get another suffix added on if -mmangle-cpu.  */\n+  if (TARGET_MANGLE_CPU_LIBGCC)\n+    {\n+      fprintf (FILE, \"\\t.rename\\t_%s, _%s%s\\n\",\n+\t       XSTR (SYMREF, 0), XSTR (SYMREF, 0),\n+\t       arc_mangle_suffix);\n+    }\n+#endif\n+}\n+\n+/* Worker function for TARGET_RETURN_IN_MEMORY.  */\n+\n static bool\n arc_return_in_memory (tree type, tree fntype ATTRIBUTE_UNUSED)\n {"}, {"sha": "42441d837dcfab60cb129578c54fffe8c3ceffc4", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07ba2efb2e1da2a319c12d24396c922e79a63965/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=07ba2efb2e1da2a319c12d24396c922e79a63965", "patch": "@@ -731,9 +731,6 @@ FUNCTION_ARG_PASS_BY_REFERENCE ((CUM), (MODE), (TYPE), (NAMED))\n (((TYPE) ? TYPE_ALIGN (TYPE) : GET_MODE_BITSIZE (MODE)) <= PARM_BOUNDARY \\\n  ? PARM_BOUNDARY \\\n  : 2 * PARM_BOUNDARY)\n-\n-#define SETUP_INCOMING_VARARGS(ARGS_SO_FAR, MODE, TYPE, PRETEND_SIZE, NO_RTL) \\\n-arc_setup_incoming_varargs(&ARGS_SO_FAR, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n \f\n /* Function results.  */\n \n@@ -752,7 +749,7 @@ arc_setup_incoming_varargs(&ARGS_SO_FAR, MODE, TYPE, &PRETEND_SIZE, NO_RTL)\n /* ??? What about r1 in DI/DF values.  */\n #define FUNCTION_VALUE_REGNO_P(N) ((N) == 0)\n \n-/* Tell GCC to use RETURN_IN_MEMORY.  */\n+/* Tell GCC to use TARGET_RETURN_IN_MEMORY.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \f\n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n@@ -1075,25 +1072,6 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.global\\t\"\n \n-/* A C statement (sans semicolon) to output on FILE an assembler pseudo-op to\n-   declare a library function name external.  The name of the library function\n-   is given by SYMREF, which has type RTX and is a SYMBOL_REF.  */\n-#if 0\n-/* On the ARC we want to have libgcc's for multiple cpus in one binary.\n-   We can't use `assemble_name' here as that will call ASM_OUTPUT_LABELREF\n-   and we'll get another suffix added on if -mmangle-cpu.  */\n-extern const char *arc_mangle_cpu;\n-#define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, SYMREF) \\\n-do {\t\t\t\t\t\t\t\\\n-  if (TARGET_MANGLE_CPU_LIBGCC)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.rename\\t_%s, _%s%s\\n\",\t\t\\\n-\t       XSTR (SYMREF, 0), XSTR (SYMREF, 0),\t\\\n-\t       arc_mangle_suffix);\t\t\t\\\n-    }\t\t\t\t\t\t\t\\\n-} while (0)\n-#endif\n-\n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n /* We mangle all user labels to provide protection from linking code"}]}