{"sha": "4fa0269222763d9fa5a478a90e690b90eafff14d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZhMDI2OTIyMjc2M2Q5ZmE1YTQ3OGE5MGU2OTBiOTBlYWZmZjE0ZA==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-12-31T10:08:17Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2010-12-31T10:08:17Z"}, "message": "re PR fortran/46971 ([OOP] ICE on long class names)\n\n2010-12-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46971\n\t* gfortran.h (gfc_hash_value): Add prototype.\n\t* class.c (get_unique_type_string): Check if proc_name is present and\n\tmake sure string contains an underscore.\n\t(get_unique_hashed_string): New function which creates a hashed string\n\tif the given unique string is too long.\n\t(gfc_hash_value): Moved here from decl.c, renamed and simplified.\n\t(gfc_build_class_symbol, gfc_find_derived_vtab): Use hashed strings.\n\t* decl.c (hash_value): Moved to class.c.\n\t(gfc_match_derived_decl): Renamed 'hash_value'.\n\n\n2010-12-31  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/46971\n\t* gfortran.dg/class_33.f90: New.\n\nFrom-SVN: r168363", "tree": {"sha": "54d9b78aff752dd100d6afe96eece73b56bad324", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54d9b78aff752dd100d6afe96eece73b56bad324"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fa0269222763d9fa5a478a90e690b90eafff14d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa0269222763d9fa5a478a90e690b90eafff14d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fa0269222763d9fa5a478a90e690b90eafff14d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fa0269222763d9fa5a478a90e690b90eafff14d/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c2154a91776cec9f01875d4f583bd7d8cd087a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c2154a91776cec9f01875d4f583bd7d8cd087a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c2154a91776cec9f01875d4f583bd7d8cd087a1"}], "stats": {"total": 130, "additions": 83, "deletions": 47}, "files": [{"sha": "696ad58ff2f8eb217b2e8d5cd5a04f2e3135dd48", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -1,3 +1,16 @@\n+2010-12-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46971\n+\t* gfortran.h (gfc_hash_value): Add prototype.\n+\t* class.c (get_unique_type_string): Check if proc_name is present and\n+\tmake sure string contains an underscore.\n+\t(get_unique_hashed_string): New function which creates a hashed string\n+\tif the given unique string is too long.\n+\t(gfc_hash_value): Moved here from decl.c, renamed and simplified.\n+\t(gfc_build_class_symbol, gfc_find_derived_vtab): Use hashed strings.\n+\t* decl.c (hash_value): Moved to class.c.\n+\t(gfc_match_derived_decl): Renamed 'hash_value'.\n+\n 2010-12-30  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/47085"}, {"sha": "27c7d23b68c04be9e6a8b96655323a6ab5b755cf", "filename": "gcc/fortran/class.c", "status": "modified", "additions": 50, "deletions": 6, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fclass.c?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -1,7 +1,8 @@\n /* Implementation of Fortran 2003 Polymorphism.\n    Copyright (C) 2009, 2010\n    Free Software Foundation, Inc.\n-   Contributed by Paul Richard Thomas & Janus Weil\n+   Contributed by Paul Richard Thomas <pault@gcc.gnu.org>\n+   and Janus Weil <janus@gcc.gnu.org>\n \n This file is part of GCC.\n \n@@ -116,8 +117,51 @@ get_unique_type_string (char *string, gfc_symbol *derived)\n {  \n   if (derived->module)\n     sprintf (string, \"%s_%s\", derived->module, derived->name);\n-  else\n+  else if (derived->ns->proc_name)\n     sprintf (string, \"%s_%s\", derived->ns->proc_name->name, derived->name);\n+  else\n+    sprintf (string, \"_%s\", derived->name);\n+}\n+\n+\n+/* A relative of 'get_unique_type_string' which makes sure the generated\n+   string will not be too long (replacing it by a hash string if needed).  */\n+\n+static void\n+get_unique_hashed_string (char *string, gfc_symbol *derived)\n+{\n+  char tmp[2*GFC_MAX_SYMBOL_LEN+2];\n+  get_unique_type_string (&tmp[0], derived);\n+  /* If string is too long, use hash value in hex representation\n+     (allow for extra decoration, cf. gfc_build_class_symbol)*/\n+  if (strlen (tmp) > GFC_MAX_SYMBOL_LEN - 10)\n+    {\n+      int h = gfc_hash_value (derived);\n+      sprintf (string, \"%X\", h);\n+    }\n+  else\n+    strcpy (string, tmp);\n+}\n+\n+\n+/* Assign a hash value for a derived type. The algorithm is that of SDBM.  */\n+\n+unsigned int\n+gfc_hash_value (gfc_symbol *sym)\n+{\n+  unsigned int hash = 0;\n+  char c[2*(GFC_MAX_SYMBOL_LEN+1)];\n+  int i, len;\n+  \n+  get_unique_type_string (&c[0], sym);\n+  len = strlen (c);\n+  \n+  for (i = 0; i < len; i++)\n+    hash = (hash << 6) + (hash << 16) - hash + c[i];\n+\n+  /* Return the hash but take the modulus for the sake of module read,\n+     even though this slightly increases the chance of collision.  */\n+  return (hash % 100000000);\n }\n \n \n@@ -130,13 +174,13 @@ gfc_try\n gfc_build_class_symbol (gfc_typespec *ts, symbol_attribute *attr,\n \t\t\tgfc_array_spec **as, bool delayed_vtab)\n {\n-  char name[GFC_MAX_SYMBOL_LEN], tname[GFC_MAX_SYMBOL_LEN];\n+  char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n   gfc_symbol *fclass;\n   gfc_symbol *vtab;\n   gfc_component *c;\n \n   /* Determine the name of the encapsulating type.  */\n-  get_unique_type_string (tname, ts->u.derived);\n+  get_unique_hashed_string (tname, ts->u.derived);\n   if ((*as) && (*as)->rank && attr->allocatable)\n     sprintf (name, \"__class_%s_%d_a\", tname, (*as)->rank);\n   else if ((*as) && (*as)->rank)\n@@ -343,9 +387,9 @@ gfc_find_derived_vtab (gfc_symbol *derived)\n     \n   if (ns)\n     {\n-      char name[GFC_MAX_SYMBOL_LEN], tname[GFC_MAX_SYMBOL_LEN];\n+      char name[GFC_MAX_SYMBOL_LEN+1], tname[GFC_MAX_SYMBOL_LEN+1];\n       \n-      get_unique_type_string (tname, derived);\n+      get_unique_hashed_string (tname, derived);\n       sprintf (name, \"__vtab_%s\", tname);\n \n       /* Look for the vtab symbol in various namespaces.  */"}, {"sha": "0dbda0bfb2060bc61abbb9c2f0aa608c9d1c21d8", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 1, "deletions": 41, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -7183,46 +7183,6 @@ gfc_get_type_attr_spec (symbol_attribute *attr, char *name)\n }\n \n \n-/* Assign a hash value for a derived type. The algorithm is that of\n-   SDBM. The hashed string is '[module_name #] derived_name'.  */\n-static unsigned int\n-hash_value (gfc_symbol *sym)\n-{\n-  unsigned int hash = 0;\n-  const char *c;\n-  int i, len;\n-\n-  /* Hash of the module or procedure name.  */\n-  if (sym->module != NULL)\n-    c = sym->module;\n-  else if (sym->ns && sym->ns->proc_name\n-\t     && sym->ns->proc_name->attr.flavor == FL_MODULE)\n-    c = sym->ns->proc_name->name;\n-  else\n-    c = NULL;\n-\n-  if (c)\n-    { \n-      len = strlen (c);\n-      for (i = 0; i < len; i++, c++)\n-\thash =  (hash << 6) + (hash << 16) - hash + (*c);\n-\n-      /* Disambiguate between 'a' in 'aa' and 'aa' in 'a'.  */ \n-      hash =  (hash << 6) + (hash << 16) - hash + '#';\n-    }\n-\n-  /* Hash of the derived type name.  */\n-  len = strlen (sym->name);\n-  c = sym->name;\n-  for (i = 0; i < len; i++, c++)\n-    hash = (hash << 6) + (hash << 16) - hash + (*c);\n-\n-  /* Return the hash but take the modulus for the sake of module read,\n-     even though this slightly increases the chance of collision.  */\n-  return (hash % 100000000);\n-}\n-\n-\n /* Match the beginning of a derived type declaration.  If a type name\n    was the result of a function, then it is possible to have a symbol\n    already to be known as a derived type yet have no components.  */\n@@ -7355,7 +7315,7 @@ gfc_match_derived_decl (void)\n \n   if (!sym->hash_value)\n     /* Set the hash for the compound name for this type.  */\n-    sym->hash_value = hash_value (sym);\n+    sym->hash_value = gfc_hash_value (sym);\n \n   /* Take over the ABSTRACT attribute.  */\n   sym->attr.abstract = attr.abstract;"}, {"sha": "b18a43db4144e1ab7db2c1b870ba8c20821e3e2c", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -2868,6 +2868,7 @@ void gfc_add_component_ref (gfc_expr *, const char *);\n #define gfc_add_size_component(e)     gfc_add_component_ref(e,\"_size\")\n #define gfc_add_def_init_component(e) gfc_add_component_ref(e,\"_def_init\")\n gfc_expr *gfc_class_null_initializer (gfc_typespec *);\n+unsigned int gfc_hash_value (gfc_symbol *);\n gfc_try gfc_build_class_symbol (gfc_typespec *, symbol_attribute *,\n \t\t\t\tgfc_array_spec **, bool);\n gfc_symbol *gfc_find_derived_vtab (gfc_symbol *);"}, {"sha": "b8798c7855554bc1e37b353931d96102ec1bd0a1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -1,3 +1,8 @@\n+2010-12-31  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/46971\n+\t* gfortran.dg/class_33.f90: New.\n+\n 2010-12-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc.dg/method-conflict-3.m: New."}, {"sha": "b809fb1df98cdc972890d7ab4316aa82757c26ac", "filename": "gcc/testsuite/gfortran.dg/class_33.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fa0269222763d9fa5a478a90e690b90eafff14d/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fclass_33.f90?ref=4fa0269222763d9fa5a478a90e690b90eafff14d", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+!\n+! PR 46971: [4.6 Regression] [OOP] ICE on long class names\n+!\n+! Contributed by Andrew Benson <abenson@its.caltech.edu>\n+\n+module Molecular_Abundances_Structure\n+  type molecularAbundancesStructure\n+  end type\n+  class(molecularAbundancesStructure), pointer :: molecules\n+end module\n+\n+! { dg-final { cleanup-modules \"Molecular_Abundances_Structure\" } }"}]}