{"sha": "9ccffd1298b5235b25ad05b89e3104fb2935fe27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNjZmZkMTI5OGI1MjM1YjI1YWQwNWI4OWUzMTA0ZmIyOTM1ZmUyNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-27T22:40:01Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2020-11-27T22:40:01Z"}, "message": "preprocessor: Fix #line overflow check [PR97602]\n\nThe preprocessor check for overflow (of linenum_type = unsigned int)\nwhen reading the line number in a #line directive is incomplete; it\nchecks \"reg < reg_prev\" which doesn't cover all cases where\nmultiplying by 10 overflowed.  Fix this by checking for overflow\nbefore rather than after it occurs (using essentially the same logic\nas used by e.g. glibc printf when reading width and precision values\nfrom strings).\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\nlibcpp/\n2020-11-27  Joseph Myers  <joseph@codesourcery.com>\n\n\tPR preprocessor/97602\n\t* directives.c (strtolinenum): Check for overflow before it\n\toccurs.  Correct comment.\n\ngcc/testsuite/\n2020-11-27  Joseph Myers  <joseph@codesourcery.com>\n\n\tPR preprocessor/97602\n\t* gcc.dg/cpp/line9.c, gcc.dg/cpp/line10.c: New tests.", "tree": {"sha": "cf825ab7f1747bd8cc89e4583b7e8585ddc2b0ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf825ab7f1747bd8cc89e4583b7e8585ddc2b0ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ccffd1298b5235b25ad05b89e3104fb2935fe27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccffd1298b5235b25ad05b89e3104fb2935fe27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccffd1298b5235b25ad05b89e3104fb2935fe27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccffd1298b5235b25ad05b89e3104fb2935fe27/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dbab7b3f4d3a8298aeb8ecde1cfbc4b16913d28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dbab7b3f4d3a8298aeb8ecde1cfbc4b16913d28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dbab7b3f4d3a8298aeb8ecde1cfbc4b16913d28"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "9f5f07998479913c0c2a771aeca2cedf6c216e61", "filename": "gcc/testsuite/gcc.dg/cpp/line10.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccffd1298b5235b25ad05b89e3104fb2935fe27/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccffd1298b5235b25ad05b89e3104fb2935fe27/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline10.c?ref=9ccffd1298b5235b25ad05b89e3104fb2935fe27", "patch": "@@ -0,0 +1,5 @@\n+/* Test #line overflow checks: bug 97602.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic\" } */\n+\n+#line 4294967296 /* { dg-warning \"line number out of range\" } */"}, {"sha": "8060aff204df12dcbeb4ada7e7c2d198129d4e9b", "filename": "gcc/testsuite/gcc.dg/cpp/line9.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccffd1298b5235b25ad05b89e3104fb2935fe27/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccffd1298b5235b25ad05b89e3104fb2935fe27/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline9.c?ref=9ccffd1298b5235b25ad05b89e3104fb2935fe27", "patch": "@@ -0,0 +1,5 @@\n+/* Test #line overflow checks: bug 97602.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-pedantic\" } */\n+\n+#line 5000000000 /* { dg-warning \"line number out of range\" } */"}, {"sha": "75115600e3aa98f215b948b2e17d72e3da8a8ea5", "filename": "libcpp/directives.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ccffd1298b5235b25ad05b89e3104fb2935fe27/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ccffd1298b5235b25ad05b89e3104fb2935fe27/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=9ccffd1298b5235b25ad05b89e3104fb2935fe27", "patch": "@@ -915,12 +915,11 @@ read_flag (cpp_reader *pfile, unsigned int last)\n /* Subroutine of do_line and do_linemarker.  Convert a number in STR,\n    of length LEN, to binary; store it in NUMP, and return false if the\n    number was well-formed, true if not. WRAPPED is set to true if the\n-   number did not fit into 'unsigned long'.  */\n+   number did not fit into 'linenum_type'.  */\n static bool\n strtolinenum (const uchar *str, size_t len, linenum_type *nump, bool *wrapped)\n {\n   linenum_type reg = 0;\n-  linenum_type reg_prev = 0;\n \n   uchar c;\n   *wrapped = false;\n@@ -929,11 +928,12 @@ strtolinenum (const uchar *str, size_t len, linenum_type *nump, bool *wrapped)\n       c = *str++;\n       if (!ISDIGIT (c))\n \treturn true;\n+      if (reg > ((linenum_type) -1) / 10)\n+\t*wrapped = true;\n       reg *= 10;\n-      reg += c - '0';\n-      if (reg < reg_prev) \n+      if (reg > ((linenum_type) -1) - (c - '0'))\n \t*wrapped = true;\n-      reg_prev = reg;\n+      reg += c - '0';\n     }\n   *nump = reg;\n   return false;"}]}