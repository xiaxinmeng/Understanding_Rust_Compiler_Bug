{"sha": "113844d68e94f4e9c0e946db351ba7d3d4a1335a", "node_id": "C_kwDOANBUbNoAKDExMzg0NGQ2OGU5NGY0ZTljMGU5NDZkYjM1MWJhN2QzZDRhMTMzNWE", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-24T18:40:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-06-24T22:23:48Z"}, "message": "c++: Include -Woverloaded-virtual in -Wall [PR87729]\n\nThis seems like a good warning to have in -Wall, as requested.  But as\npointed out in PR20423, some users want a warning only when a derived\nfunction doesn't override any base function.  So let's put that lesser\nversion in -Wall (and -Woverloaded-virtual=1) while leaving the semantics\nfor the existing option the same.\n\n\tPR c++/87729\n\tPR c++/20423\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Woverloaded-virtual): Add levels, include in -Wall.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi: Document changes.\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (warn_hidden): Handle -Woverloaded-virtual=1.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Woverloaded-virt1.C: New test.\n\t* g++.dg/warn/Woverloaded-virt2.C: New test.", "tree": {"sha": "4700337540406594bea63da9bf9543c45207dd64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4700337540406594bea63da9bf9543c45207dd64"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113844d68e94f4e9c0e946db351ba7d3d4a1335a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113844d68e94f4e9c0e946db351ba7d3d4a1335a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113844d68e94f4e9c0e946db351ba7d3d4a1335a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113844d68e94f4e9c0e946db351ba7d3d4a1335a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75fa80bb5654d1f8b21310118f41705b74168039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75fa80bb5654d1f8b21310118f41705b74168039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75fa80bb5654d1f8b21310118f41705b74168039"}], "stats": {"total": 78, "additions": 72, "deletions": 6}, "files": [{"sha": "44e1a60ce2469d875cb74e7e13fd8a28b6ea9736", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=113844d68e94f4e9c0e946db351ba7d3d4a1335a", "patch": "@@ -1126,7 +1126,11 @@ C ObjC C++ ObjC++ Var(warn_overlength_strings) Warning LangEnabledBy(C ObjC C++\n Warn if a string is longer than the maximum portable length specified by the standard.\n \n Woverloaded-virtual\n-C++ ObjC++ Var(warn_overloaded_virtual) Warning\n+C++ ObjC++ Warning Alias(Woverloaded-virtual=,2,0)\n+Warn about overloaded virtual function names.\n+\n+Woverloaded-virtual=\n+C++ ObjC++ Joined UInteger IntegerRange(0,2) Var(warn_overloaded_virtual) Warning LangEnabledBy(C++ ObjC++,Wall,1,0)\n Warn about overloaded virtual function names.\n \n Woverride-init"}, {"sha": "17683f421a707b92c5c25d395d45eaad6766f0c6", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=113844d68e94f4e9c0e946db351ba7d3d4a1335a", "patch": "@@ -3034,6 +3034,7 @@ warn_hidden (tree t)\n \t  continue;\n \n \t/* Remove any overridden functions.  */\n+\tbool seen_non_override = false;\n \tfor (tree fndecl : ovl_range (fns))\n \t  {\n \t    if (TREE_CODE (fndecl) == FUNCTION_DECL\n@@ -3045,20 +3046,28 @@ warn_hidden (tree t)\n \t\tfor (size_t k = 0; k < base_fndecls.length (); k++)\n \t\t  if (base_fndecls[k]\n \t\t      && same_signature_p (fndecl, base_fndecls[k]))\n-\t\t    base_fndecls[k] = NULL_TREE;\n+\t\t    {\n+\t\t      base_fndecls[k] = NULL_TREE;\n+\t\t      goto next;\n+\t\t    }\n \t      }\n+\t    seen_non_override = true;\n+\t  next:;\n \t  }\n \n+\tif (!seen_non_override && warn_overloaded_virtual == 1)\n+\t  /* All the derived fns override base virtuals.  */\n+\t  return;\n+\n \t/* Now give a warning for all base functions without overriders,\n \t   as they are hidden.  */\n-\ttree base_fndecl;\n-\tFOR_EACH_VEC_ELT (base_fndecls, j, base_fndecl)\n+\tfor (tree base_fndecl : base_fndecls)\n \t  if (base_fndecl)\n \t    {\n \t      auto_diagnostic_group d;\n \t      /* Here we know it is a hider, and no overrider exists.  */\n \t      if (warning_at (location_of (base_fndecl),\n-\t\t\t      OPT_Woverloaded_virtual,\n+\t\t\t      OPT_Woverloaded_virtual_,\n \t\t\t      \"%qD was hidden\", base_fndecl))\n \t\tinform (location_of (fns), \"  by %qD\", fns);\n \t    }"}, {"sha": "dfaa561c8b885929f79ad2177e354b845831a9f8", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=113844d68e94f4e9c0e946db351ba7d3d4a1335a", "patch": "@@ -4039,6 +4039,7 @@ a C++ program.  The new-style casts (@code{dynamic_cast},\n less vulnerable to unintended effects and much easier to search for.\n \n @item -Woverloaded-virtual @r{(C++ and Objective-C++ only)}\n+@itemx -Woverloaded-virtual=@var{n}\n @opindex Woverloaded-virtual\n @opindex Wno-overloaded-virtual\n @cindex overloaded virtual function, warning\n@@ -4052,7 +4053,7 @@ struct A @{\n @};\n \n struct B: public A @{\n-  void f(int);\n+  void f(int); // does not override\n @};\n @end smallexample\n \n@@ -4067,6 +4068,29 @@ b->f();\n @noindent\n fails to compile.\n \n+The optional level suffix controls the behavior when all the\n+declarations in the derived class override virtual functions in the\n+base class, even if not all of the base functions are overridden:\n+\n+@smallexample\n+struct C @{\n+  virtual void f();\n+  virtual void f(int);\n+@};\n+\n+struct D: public C @{\n+  void f(int); // does override\n+@}\n+@end smallexample\n+\n+This pattern is less likely to be a mistake; if D is only used\n+virtually, the user might have decided that the base class semantics\n+for some of the overloads are fine.\n+\n+At level 1, this case does not warn; at level 2, it does.\n+@option{-Woverloaded-virtual} by itself selects level 2.  Level 1 is\n+included in @option{-Wall}.\n+\n @item -Wno-pmf-conversions @r{(C++ and Objective-C++ only)}\n @opindex Wno-pmf-conversions\n @opindex Wpmf-conversions"}, {"sha": "92f8327b9d0573f44e51577384a387b7888d2f14", "filename": "gcc/testsuite/g++.dg/warn/Woverloaded-virt1.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt1.C?ref=113844d68e94f4e9c0e946db351ba7d3d4a1335a", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/87729\n+// { dg-additional-options -Wall }\n+\n+class Foo\n+{\n+public:\n+    virtual void f(int);\t// { dg-warning \"hidden\" }\n+};\n+\n+class Bar : public Foo\n+{\n+public:\n+    virtual void f(short);\t// { dg-message \"by\" }\n+};"}, {"sha": "763ab29254efc92fdc4d5aa444a0d335588d86a7", "filename": "gcc/testsuite/g++.dg/warn/Woverloaded-virt2.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113844d68e94f4e9c0e946db351ba7d3d4a1335a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWoverloaded-virt2.C?ref=113844d68e94f4e9c0e946db351ba7d3d4a1335a", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/20423\n+// { dg-additional-options -Wall }\n+\n+class Foo\n+{\n+public:\n+  virtual void f(int);\n+  virtual void f(short);\n+};\n+\n+class Bar : public Foo\n+{\n+public:\n+  virtual void f(short);\n+};"}]}