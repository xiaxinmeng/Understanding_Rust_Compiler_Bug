{"sha": "0f9aa35c79a0fe195d5076375b5794246cf44819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGY5YWEzNWM3OWEwZmUxOTVkNTA3NjM3NWI1Nzk0MjQ2Y2Y0NDgxOQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-26T17:26:15Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-03-30T21:51:21Z"}, "message": "analyzer: only call get_diagnostic_tree when it's needed\n\nimpl_sm_context::get_diagnostic_tree could be expensive, and\nI find myself needing to put a breakpoint on it to debug\nPR analyzer/99771, so only call it if we're about to use\nthe result.\n\ngcc/analyzer/ChangeLog:\n\t* sm-file.cc (fileptr_state_machine::on_stmt): Only call\n\tget_diagnostic_tree if the result will be used.\n\t* sm-malloc.cc (malloc_state_machine::on_stmt): Likewise.\n\t(malloc_state_machine::on_deallocator_call): Likewise.\n\t(malloc_state_machine::on_realloc_call): Likewise.\n\t(malloc_state_machine::on_realloc_call): Likewise.\n\t* sm-sensitive.cc\n\t(sensitive_state_machine::warn_for_any_exposure): Likewise.\n\t* sm-taint.cc (taint_state_machine::on_stmt): Likewise.", "tree": {"sha": "b6811f24977b7776b2a2077116ab64242e1ffd85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6811f24977b7776b2a2077116ab64242e1ffd85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f9aa35c79a0fe195d5076375b5794246cf44819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9aa35c79a0fe195d5076375b5794246cf44819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f9aa35c79a0fe195d5076375b5794246cf44819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f9aa35c79a0fe195d5076375b5794246cf44819/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a01f5fd71031bb34fd9d2792e6ec42d982c68a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a01f5fd71031bb34fd9d2792e6ec42d982c68a8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a01f5fd71031bb34fd9d2792e6ec42d982c68a8e"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "d64c313e31cb2cd490da5cca379f942fc86a68ab", "filename": "gcc/analyzer/sm-file.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-file.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-file.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-file.cc?ref=0f9aa35c79a0fe195d5076375b5794246cf44819", "patch": "@@ -344,7 +344,6 @@ fileptr_state_machine::on_stmt (sm_context *sm_ctxt,\n \tif (is_named_call_p (callee_fndecl, \"fclose\", call, 1))\n \t  {\n \t    tree arg = gimple_call_arg (call, 0);\n-\t    tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \n \t    sm_ctxt->on_transition (node, stmt, arg, m_start, m_closed);\n \n@@ -356,6 +355,7 @@ fileptr_state_machine::on_stmt (sm_context *sm_ctxt,\n \n \t    if (sm_ctxt->get_state (stmt, arg) == m_closed)\n \t      {\n+\t\ttree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t\tsm_ctxt->warn (node, stmt, arg,\n \t\t\t       new double_fclose (*this, diag_arg));\n \t\tsm_ctxt->set_next_state (stmt, arg, m_stop);"}, {"sha": "ae03b068a889b836f5bd51b2189a53a4a8cc3b29", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=0f9aa35c79a0fe195d5076375b5794246cf44819", "patch": "@@ -1674,24 +1674,26 @@ malloc_state_machine::on_stmt (sm_context *sm_ctxt,\n       if (TREE_CODE (op) == MEM_REF)\n \t{\n \t  tree arg = TREE_OPERAND (op, 0);\n-\t  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \n \t  state_t state = sm_ctxt->get_state (stmt, arg);\n \t  if (unchecked_p (state))\n \t    {\n+\t      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t      sm_ctxt->warn (node, stmt, arg,\n \t\t\t     new possible_null_deref (*this, diag_arg));\n \t      const allocation_state *astate = as_a_allocation_state (state);\n \t      sm_ctxt->set_next_state (stmt, arg, astate->get_nonnull ());\n \t    }\n \t  else if (state == m_null)\n \t    {\n+\t      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t      sm_ctxt->warn (node, stmt, arg,\n \t\t\t     new null_deref (*this, diag_arg));\n \t      sm_ctxt->set_next_state (stmt, arg, m_stop);\n \t    }\n \t  else if (freed_p (state))\n \t    {\n+\t      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t      const allocation_state *astate = as_a_allocation_state (state);\n \t      sm_ctxt->warn (node, stmt, arg,\n \t\t\t     new use_after_free (*this, diag_arg,\n@@ -1738,7 +1740,6 @@ malloc_state_machine::on_deallocator_call (sm_context *sm_ctxt,\n   if (argno >= gimple_call_num_args (call))\n     return;\n   tree arg = gimple_call_arg (call, argno);\n-  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \n   state_t state = sm_ctxt->get_state (call, arg);\n \n@@ -1752,6 +1753,7 @@ malloc_state_machine::on_deallocator_call (sm_context *sm_ctxt,\n       if (!astate->m_deallocators->contains_p (d))\n \t{\n \t  /* Wrong allocator.  */\n+\t  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t  pending_diagnostic *pd\n \t    = new mismatching_deallocation (*this, diag_arg,\n \t\t\t\t\t    astate->m_deallocators,\n@@ -1766,13 +1768,15 @@ malloc_state_machine::on_deallocator_call (sm_context *sm_ctxt,\n   else if (state == d->m_freed)\n     {\n       /* freed -> stop, with warning.  */\n+      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n       sm_ctxt->warn (node, call, arg,\n \t\t     new double_free (*this, diag_arg, d->m_name));\n       sm_ctxt->set_next_state (call, arg, m_stop);\n     }\n   else if (state == m_non_heap)\n     {\n       /* non-heap -> stop, with warning.  */\n+      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n       sm_ctxt->warn (node, call, arg,\n \t\t     new free_of_non_heap (*this, diag_arg,\n \t\t\t\t\t   d->m_name));\n@@ -1806,7 +1810,6 @@ malloc_state_machine::on_realloc_call (sm_context *sm_ctxt,\n \t\t\t\t       const gcall *call) const\n {\n   tree ptr = gimple_call_arg (call, 0);\n-  tree diag_ptr = sm_ctxt->get_diagnostic_tree (ptr);\n \n   state_t state = sm_ctxt->get_state (call, ptr);\n \n@@ -1818,6 +1821,7 @@ malloc_state_machine::on_realloc_call (sm_context *sm_ctxt,\n       if (astate->m_deallocators != &m_free)\n \t{\n \t  /* Wrong allocator.  */\n+\t  tree diag_ptr = sm_ctxt->get_diagnostic_tree (ptr);\n \t  pending_diagnostic *pd\n \t    = new mismatching_deallocation (*this, diag_ptr,\n \t\t\t\t\t    astate->m_deallocators,"}, {"sha": "9703f7e791680e91feb454c3d2da639c8b1d2aa0", "filename": "gcc/analyzer/sm-sensitive.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-sensitive.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-sensitive.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-sensitive.cc?ref=0f9aa35c79a0fe195d5076375b5794246cf44819", "patch": "@@ -174,10 +174,12 @@ sensitive_state_machine::warn_for_any_exposure (sm_context *sm_ctxt,\n \t\t\t\t\t\tconst gimple *stmt,\n \t\t\t\t\t\ttree arg) const\n {\n-  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n   if (sm_ctxt->get_state (stmt, arg) == m_sensitive)\n-    sm_ctxt->warn (node, stmt, arg,\n-\t\t   new exposure_through_output_file (*this, diag_arg));\n+    {\n+      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n+      sm_ctxt->warn (node, stmt, arg,\n+\t\t     new exposure_through_output_file (*this, diag_arg));\n+    }\n }\n \n /* Implementation of state_machine::on_stmt vfunc for"}, {"sha": "e2460f9cf5c0a275ae5f000991cb50090d62712d", "filename": "gcc/analyzer/sm-taint.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-taint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f9aa35c79a0fe195d5076375b5794246cf44819/gcc%2Fanalyzer%2Fsm-taint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-taint.cc?ref=0f9aa35c79a0fe195d5076375b5794246cf44819", "patch": "@@ -227,7 +227,6 @@ taint_state_machine::on_stmt (sm_context *sm_ctxt,\n       if (op == ARRAY_REF)\n \t{\n \t  tree arg = TREE_OPERAND (rhs1, 1);\n-\t  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \n \t  /* Unsigned types have an implicit lower bound.  */\n \t  bool is_unsigned = false;\n@@ -239,6 +238,7 @@ taint_state_machine::on_stmt (sm_context *sm_ctxt,\n \t  if (state == m_tainted)\n \t    {\n \t      /* Complain about missing bounds.  */\n+\t      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t      pending_diagnostic *d\n \t\t= new tainted_array_index (*this, diag_arg,\n \t\t\t\t\t   is_unsigned\n@@ -249,6 +249,7 @@ taint_state_machine::on_stmt (sm_context *sm_ctxt,\n \t  else if (state == m_has_lb)\n \t    {\n \t      /* Complain about missing upper bound.  */\n+\t      tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t      sm_ctxt->warn (node, stmt, arg,\n \t\t\t      new tainted_array_index (*this, diag_arg,\n \t\t\t\t\t\t       BOUNDS_LOWER));\n@@ -259,6 +260,7 @@ taint_state_machine::on_stmt (sm_context *sm_ctxt,\n \t      /* Complain about missing lower bound.  */\n \t      if (!is_unsigned)\n \t\t{\n+\t\t  tree diag_arg = sm_ctxt->get_diagnostic_tree (arg);\n \t\t  sm_ctxt->warn  (node, stmt, arg,\n \t\t\t\t  new tainted_array_index (*this, diag_arg,\n \t\t\t\t\t\t\t   BOUNDS_UPPER));"}]}