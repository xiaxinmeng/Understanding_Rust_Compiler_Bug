{"sha": "651684b462f979a4e70a668c4c9767a5fd7d223a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjUxNjg0YjQ2MmY5NzlhNGU3MGE2NjhjNGM5NzY3YTVmZDdkMjIzYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-27T00:16:27Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-27T00:16:27Z"}, "message": "Daily bump.", "tree": {"sha": "40678671eb76bfd40aa1096fcac66213635ad935", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/40678671eb76bfd40aa1096fcac66213635ad935"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/651684b462f979a4e70a668c4c9767a5fd7d223a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651684b462f979a4e70a668c4c9767a5fd7d223a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/651684b462f979a4e70a668c4c9767a5fd7d223a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/651684b462f979a4e70a668c4c9767a5fd7d223a/comments", "author": null, "committer": null, "parents": [{"sha": "42a21b4cb540be93548a6ff6d4cb4a73ab1665be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42a21b4cb540be93548a6ff6d4cb4a73ab1665be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42a21b4cb540be93548a6ff6d4cb4a73ab1665be"}], "stats": {"total": 417, "additions": 416, "deletions": 1}, "files": [{"sha": "e55a5e4a2bb084cc6344e483ca4e971dc9550da5", "filename": "ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,7 @@\n+2021-03-26  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* MAINTAINERS: Add myself as pru port maintainer.\n+\n 2021-03-23  David Malcolm  <dmalcolm@redhat.com>\n \n \t* MAINTAINERS: Add myself as static analyzer maintainer."}, {"sha": "d592d55bfbe2cf9ac5cf07ebd5172ae85f12a9dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,273 @@\n+2021-03-26  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* config/rs6000/aix.h (ADJUST_FIELD_ALIGN): Call function.\n+\t* config/rs6000/rs6000-protos.h (rs6000_special_adjust_field_align):\n+\tDeclare.\n+\t* config/rs6000/rs6000.c (rs6000_special_adjust_field_align): New.\n+\t(rs6000_special_round_type_align): Recursively check innermost first\n+\tfield.\n+\n+2021-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/99334\n+\t* dwarf2out.h (struct dw_fde_node): Add rule18 member.\n+\t* dwarf2cfi.c (dwarf2out_frame_debug_expr): When handling (set hfp sp)\n+\tassignment with drap_reg active, queue reg save for hfp with offset 0\n+\tand flush queued reg saves.  When handling a push with rule18,\n+\tdefer queueing reg save for hfp and just assert the offset is 0.\n+\t(scan_trace): Assert that fde->rule18 is false.\n+\n+2021-03-26  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99766\n+\t* ira-costs.c (record_reg_classes): Put case with\n+\tCT_RELAXED_MEMORY adjacent to one with CT_MEMORY.\n+\t* ira.c (ira_setup_alts): Ditto.\n+\t* lra-constraints.c (process_alt_operands): Ditto.\n+\t* recog.c (asm_operand_ok): Ditto.\n+\t* reload.c (find_reloads): Ditto.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(cpu_addrcost_table::post_modify_ld3_st3): New member variable.\n+\t(cpu_addrcost_table::post_modify_ld4_st4): Likewise.\n+\t* config/aarch64/aarch64.c (generic_addrcost_table): Update\n+\taccordingly, using the same costs as for post_modify.\n+\t(exynosm1_addrcost_table, xgene1_addrcost_table): Likewise.\n+\t(thunderx2t99_addrcost_table, thunderx3t110_addrcost_table):\n+\t(tsv110_addrcost_table, qdf24xx_addrcost_table): Likewise.\n+\t(a64fx_addrcost_table): Likewise.\n+\t(neoversev1_addrcost_table): New.\n+\t(neoversev1_tunings): Use neoversev1_addrcost_table.\n+\t(aarch64_address_cost): Use the new post_modify costs for CImode\n+\tand XImode.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.opt\n+\t(-param=aarch64-loop-vect-issue-rate-niters=): New parameter.\n+\t* doc/invoke.texi: Document it.\n+\t* config/aarch64/aarch64-protos.h (aarch64_base_vec_issue_info)\n+\t(aarch64_scalar_vec_issue_info, aarch64_simd_vec_issue_info)\n+\t(aarch64_advsimd_vec_issue_info, aarch64_sve_vec_issue_info)\n+\t(aarch64_vec_issue_info): New structures.\n+\t(cpu_vector_cost): Write comments above the variables rather\n+\tthan to the side.\n+\t(cpu_vector_cost::issue_info): New member variable.\n+\t* config/aarch64/aarch64.c: Include gimple-pretty-print.h\n+\tand tree-ssa-loop-niter.h.\n+\t(generic_vector_cost, a64fx_vector_cost, qdf24xx_vector_cost)\n+\t(thunderx_vector_cost, tsv110_vector_cost, cortexa57_vector_cost)\n+\t(exynosm1_vector_cost, xgene1_vector_cost, thunderx2t99_vector_cost)\n+\t(thunderx3t110_vector_cost): Initialize issue_info to null.\n+\t(neoversev1_scalar_issue_info, neoversev1_advsimd_issue_info)\n+\t(neoversev1_sve_issue_info, neoversev1_vec_issue_info): New structures.\n+\t(neoversev1_vector_cost): Use them.\n+\t(aarch64_vec_op_count, aarch64_sve_op_count): New structures.\n+\t(aarch64_vector_costs::saw_sve_only_op): New member variable.\n+\t(aarch64_vector_costs::num_vector_iterations): Likewise.\n+\t(aarch64_vector_costs::scalar_ops): Likewise.\n+\t(aarch64_vector_costs::advsimd_ops): Likewise.\n+\t(aarch64_vector_costs::sve_ops): Likewise.\n+\t(aarch64_vector_costs::seen_loads): Likewise.\n+\t(aarch64_simd_vec_costs_for_flags): New function.\n+\t(aarch64_analyze_loop_vinfo): Initialize num_vector_iterations.\n+\tCount the number of predicate operations required by SVE WHILE\n+\tinstructions.\n+\t(aarch64_comparison_type, aarch64_multiply_add_p): New functions.\n+\t(aarch64_sve_only_stmt_p, aarch64_in_loop_reduction_latency): Likewise.\n+\t(aarch64_count_ops): Likewise.\n+\t(aarch64_add_stmt_cost): Record whether see an SVE operation\n+\tthat cannot currently be implementing using Advanced SIMD.\n+\tRecord issue information about the scalar, Advanced SIMD\n+\tand (where relevant) SVE versions of a loop.\n+\t(aarch64_vec_op_count::dump): New function.\n+\t(aarch64_sve_op_count::dump): Likewise.\n+\t(aarch64_estimate_min_cycles_per_iter): Likewise.\n+\t(aarch64_adjust_body_cost): If issue information is available,\n+\ttry to compare the issue rates of the various loop implementations\n+\tand increase or decrease the vector body cost accordingly.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_detect_vector_stmt_subtype):\n+\tAssume a zero cost for induction phis.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_embedded_comparison_type): New\n+\tfunction.\n+\t(aarch64_adjust_stmt_cost): Add the costs of embedded scalar and\n+\tvector comparisons.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_detect_scalar_stmt_subtype):\n+\tNew function.\n+\t(aarch64_add_stmt_cost): Call it.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-tuning-flags.def (matched_vector_throughput):\n+\tNew tuning parameter.\n+\t* config/aarch64/aarch64.c (neoversev1_tunings): Use it.\n+\t(aarch64_estimated_sve_vq): New function.\n+\t(aarch64_vector_costs::analyzed_vinfo): New member variable.\n+\t(aarch64_vector_costs::is_loop): Likewise.\n+\t(aarch64_vector_costs::unrolled_advsimd_niters): Likewise.\n+\t(aarch64_vector_costs::unrolled_advsimd_stmts): Likewise.\n+\t(aarch64_record_potential_advsimd_unrolling): New function.\n+\t(aarch64_analyze_loop_vinfo, aarch64_analyze_bb_vinfo): Likewise.\n+\t(aarch64_add_stmt_cost): Call aarch64_analyze_loop_vinfo or\n+\taarch64_analyze_bb_vinfo on the first use of a costs structure.\n+\tDetect whether we're vectorizing a loop for SVE that might be\n+\tcompletely unrolled if it used Advanced SIMD instead.\n+\t(aarch64_adjust_body_cost_for_latency): New function.\n+\t(aarch64_finish_cost): Call it.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_vector_costs): New structure.\n+\t(aarch64_init_cost): New function.\n+\t(aarch64_add_stmt_cost): Use aarch64_vector_costs instead of\n+\tthe default unsigned[3].\n+\t(aarch64_finish_cost, aarch64_destroy_cost_data): New functions.\n+\t(TARGET_VECTORIZE_INIT_COST): Override.\n+\t(TARGET_VECTORIZE_FINISH_COST): Likewise.\n+\t(TARGET_VECTORIZE_DESTROY_COST_DATA): Likewise.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (neoversev1_advsimd_vector_cost)\n+\t(neoversev1_sve_vector_cost): New cost structures.\n+\t(neoversev1_vector_cost): Likewise.\n+\t(neoversev1_tunings): Use them.  Enable use_new_vector_costs.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(sve_vec_cost::scatter_store_elt_cost): New member variable.\n+\t* config/aarch64/aarch64.c (generic_sve_vector_cost): Update\n+\taccordingly, taking the cost from the cost of a scalar_store.\n+\t(a64fx_sve_vector_cost): Likewise.\n+\t(aarch64_detect_vector_stmt_subtype): Detect scatter stores.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h\n+\t(simd_vec_cost::store_elt_extra_cost): New member variable.\n+\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost): Update\n+\taccordingly, using the vec_to_scalar cost for the new field.\n+\t(generic_sve_vector_cost, a64fx_advsimd_vector_cost): Likewise.\n+\t(a64fx_sve_vector_cost, qdf24xx_advsimd_vector_cost): Likewise.\n+\t(thunderx_advsimd_vector_cost, tsv110_advsimd_vector_cost): Likewise.\n+\t(cortexa57_advsimd_vector_cost, exynosm1_advsimd_vector_cost)\n+\t(xgene1_advsimd_vector_cost, thunderx2t99_advsimd_vector_cost)\n+\t(thunderx3t110_advsimd_vector_cost): Likewise.\n+\t(aarch64_detect_vector_stmt_subtype): Detect single-element stores.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (simd_vec_cost::ld2_st2_permute_cost)\n+\t(simd_vec_cost::ld3_st3_permute_cost): New member variables.\n+\t(simd_vec_cost::ld4_st4_permute_cost): Likewise.\n+\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost): Update\n+\taccordingly, using zero for the new costs.\n+\t(generic_sve_vector_cost, a64fx_advsimd_vector_cost): Likewise.\n+\t(a64fx_sve_vector_cost, qdf24xx_advsimd_vector_cost): Likewise.\n+\t(thunderx_advsimd_vector_cost, tsv110_advsimd_vector_cost): Likewise.\n+\t(cortexa57_advsimd_vector_cost, exynosm1_advsimd_vector_cost)\n+\t(xgene1_advsimd_vector_cost, thunderx2t99_advsimd_vector_cost)\n+\t(thunderx3t110_advsimd_vector_cost): Likewise.\n+\t(aarch64_ld234_st234_vectors): New function.\n+\t(aarch64_adjust_stmt_cost): Likewise.\n+\t(aarch64_add_stmt_cost): Call aarch64_adjust_stmt_cost if using\n+\tthe new vector costs.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (sve_vec_cost): Turn into a\n+\tderived class of simd_vec_cost.  Add information about CLAST[AB]\n+\tand FADDA instructions.\n+\t* config/aarch64/aarch64.c (generic_sve_vector_cost): Update\n+\taccordingly, using the vec_to_scalar costs for the new fields.\n+\t(a64fx_sve_vector_cost): Likewise.\n+\t(aarch64_reduc_type): New function.\n+\t(aarch64_sve_in_loop_reduction_latency): Likewise.\n+\t(aarch64_detect_vector_stmt_subtype): Take a vinfo parameter.\n+\tUse aarch64_sve_in_loop_reduction_latency to handle SVE reductions\n+\tthat occur in the loop body.\n+\t(aarch64_add_stmt_cost): Update call accordingly.\n+\n+2021-03-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-tuning-flags.def (use_new_vector_costs):\n+\tNew tuning flag.\n+\t* config/aarch64/aarch64-protos.h (simd_vec_cost): Put comments\n+\tabove the fields rather than to the right.\n+\t(simd_vec_cost::reduc_i8_cost): New member variable.\n+\t(simd_vec_cost::reduc_i16_cost): Likewise.\n+\t(simd_vec_cost::reduc_i32_cost): Likewise.\n+\t(simd_vec_cost::reduc_i64_cost): Likewise.\n+\t(simd_vec_cost::reduc_f16_cost): Likewise.\n+\t(simd_vec_cost::reduc_f32_cost): Likewise.\n+\t(simd_vec_cost::reduc_f64_cost): Likewise.\n+\t* config/aarch64/aarch64.c (generic_advsimd_vector_cost): Update\n+\taccordingly, using the vec_to_scalar_cost for the new fields.\n+\t(generic_sve_vector_cost, a64fx_advsimd_vector_cost): Likewise.\n+\t(a64fx_sve_vector_cost, qdf24xx_advsimd_vector_cost): Likewise.\n+\t(thunderx_advsimd_vector_cost, tsv110_advsimd_vector_cost): Likewise.\n+\t(cortexa57_advsimd_vector_cost, exynosm1_advsimd_vector_cost)\n+\t(xgene1_advsimd_vector_cost, thunderx2t99_advsimd_vector_cost)\n+\t(thunderx3t110_advsimd_vector_cost): Likewise.\n+\t(aarch64_use_new_vector_costs_p): New function.\n+\t(aarch64_simd_vec_costs): New function, split out from...\n+\t(aarch64_builtin_vectorization_cost): ...here.\n+\t(aarch64_is_reduction): New function.\n+\t(aarch64_detect_vector_stmt_subtype): Likewise.\n+\t(aarch64_add_stmt_cost): Call aarch64_detect_vector_stmt_subtype if\n+\tusing the new vector costs.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR ipa/99466\n+\t* tree-emutls.c (get_emutls_init_templ_addr): Mark initializer of weak\n+\tTLS declarations as public.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/aarch64/aarch64-d.c (IN_TARGET_CODE): Define.\n+\t* config/arm/arm-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/i386/i386-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/mips/mips-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/pa/pa-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/riscv/riscv-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/rs6000/rs6000-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/s390/s390-d.c (IN_TARGET_CODE): Likewise.\n+\t* config/sparc/sparc-d.c (IN_TARGET_CODE): Likewise.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/91595\n+\t* config.gcc (*-*-cygwin*): Add winnt-d.o\n+\t(*-*-mingw*): Likewise.\n+\t* config/i386/cygwin.h (EXTRA_TARGET_D_OS_VERSIONS): New macro.\n+\t* config/i386/mingw32.h (EXTRA_TARGET_D_OS_VERSIONS): Likewise.\n+\t* config/i386/t-cygming: Add winnt-d.o.\n+\t* config/i386/winnt-d.c: New file.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* config/freebsd-d.c: Include memmodel.h.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR d/99691\n+\t* config.gcc (*-*-openbsd*): Add openbsd-d.o.\n+\t* config/t-openbsd: Add openbsd-d.o.\n+\t* config/openbsd-d.c: New file.\n+\n 2021-03-25  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \tPR tree-optimization/96974"}, {"sha": "71fa6a1d2e30af2be6df477bfaa4844317374fd0", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1 +1 @@\n-20210326\n+20210327"}, {"sha": "eb4826591504fa4536a37cabf3e68608607ab092", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,44 @@\n+2021-03-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98352\n+\t* method.c (implicitly_declare_fn): Pass &raises to\n+\tsynthesized_method_walk.\n+\n+2021-03-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* cp-tree.h (DECL_MODULE_CHECK): Ban TEMPLATE_DECL.\n+\t(SET_TYPE_TEMPLATE_INFO): Restore Alias template setting.\n+\t* decl.c (duplicate_decls): Remove template_decl module flag\n+\tpropagation.\n+\t* module.cc (merge_kind_name): Add alias tmpl spec as a thing.\n+\t(dumper::impl::nested_name): Adjust for template-decl module flag\n+\tchange.\n+\t(trees_in::assert_definition): Likewise.\n+\t(trees_in::install_entity): Likewise.\n+\t(trees_out::decl_value): Likewise.  Remove alias template\n+\tseparation of template and type_decl.\n+\t(trees_in::decl_value): Likewise.\n+\t(trees_out::key_mergeable): Likewise,\n+\t(trees_in::key_mergeable): Likewise.\n+\t(trees_out::decl_node): Adjust for template-decl module flag\n+\tchange.\n+\t(depset::hash::make_dependency): Likewise.\n+\t(get_originating_module, module_may_redeclare): Likewise.\n+\t(set_instantiating_module, set_defining_module): Likewise.\n+\t* name-lookup.c (name_lookup::search_adl): Likewise.\n+\t(do_pushdecl): Likewise.\n+\t* pt.c (build_template_decl): Likewise.\n+\t(lookup_template_class_1): Remove special alias_template handling\n+\tof DECL_TI_TEMPLATE.\n+\t(tsubst_template_decl): Likewise.\n+\n+2021-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99705\n+\t* tree.c (bot_manip): Remap artificial automatic temporaries mentioned\n+\tin DECL_EXPR or in BIND_EXPR_VARS.\n+\n 2021-03-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/99672"}, {"sha": "b3cda939942d3073a9819ba69e2e341c05752ad1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,9 @@\n+2021-03-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99651\n+\t* intrinsic.c (gfc_intrinsic_func_interface): Set\n+\tattr.proc = PROC_INTRINSIC if FL_PROCEDURE.\n+\n 2021-03-24  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/99369"}, {"sha": "9abcc02447eb4995c216c9896aae9a6a8f47f173", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,51 @@\n+2021-03-26  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* gcc.target/powerpc/pr99557.c: New.\n+\n+2021-03-26  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR tree-optimization/59970\n+\t* gcc.dg/uninit-pr59970.c: New test.\n+\n+2021-03-26  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/98352\n+\t* g++.dg/cpp0x/inh-ctor37.C: Remove dg-error.\n+\t* g++.dg/cpp0x/nsdmi17.C: New test.\n+\n+2021-03-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99283\n+\t* g++.dg/modules/pr99283-2_a.H: New.\n+\t* g++.dg/modules/pr99283-2_b.H: New.\n+\t* g++.dg/modules/pr99283-2_c.H: New.\n+\t* g++.dg/modules/pr99283-3_a.H: New.\n+\t* g++.dg/modules/pr99283-3_b.H: New.\n+\t* g++.dg/modules/pr99283-4.H: New.\n+\t* g++.dg/modules/tpl-alias-1_a.H: Adjust scans.\n+\t* g++.dg/modules/tpl-alias-1_b.C: Adjust scans.\n+\n+2021-03-26  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99766\n+\t* g++.target/aarch64/sve/pr99766.C: New.\n+\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\tPR ipa/99466\n+\t* gcc.dg/tls/pr99466-1.c: New test.\n+\t* gcc.dg/tls/pr99466-2.c: New test.\n+\n+2021-03-26  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/99705\n+\t* g++.dg/cpp0x/new5.C: New test.\n+\n+2021-03-26  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99651\n+\t* gfortran.dg/null_11.f90: New test.\n+\n 2021-03-25  Martin Sebor  <msebor@redhat.com>\n \n \tPR tree-optimization/55060"}, {"sha": "e58bd3ce2e14ddf05d3a6a3ce1264c0a4ae1e4e5", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,23 @@\n+2021-03-26  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Substitute enable_shared, enable_static, and\n+\tphobos_lt_pic_flag.\n+\t* libdruntime/Makefile.am (AM_DFLAGS): Replace\n+\t  phobos_compiler_pic_flag with phobos_lt_pic_flags, and\n+\t  phobos_compiler_shared_flag.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/Makefile.am (AM_DFLAGS): Replace phobos_compiler_pic_flag\n+\t  with phobos_lt_pic_flag, and phobos_compiler_shared_flag.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\t* testsuite/libphobos.druntime_shared/druntime_shared.exp: Remove\n+\t-fversion=Shared and -fno-moduleinfo from default extra test flags.\n+\t* testsuite/libphobos.phobos_shared/phobos_shared.exp: Likewise.\n+\t* testsuite/testsuite_flags.in: Add phobos_compiler_shared_flag to\n+\t--gdcflags.\n+\n 2021-02-04  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \tPR d/98910"}, {"sha": "3f90a883cc9625a384f3d35a1fff75f39c30c93e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/651684b462f979a4e70a668c4c9767a5fd7d223a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/651684b462f979a4e70a668c4c9767a5fd7d223a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=651684b462f979a4e70a668c4c9767a5fd7d223a", "patch": "@@ -1,3 +1,29 @@\n+2021-03-26  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* src/c++11/random.cc (USE_LCG): Define when a pseudo-random\n+\tfallback is needed.\n+\t[USE_LCG] (bad_seed, construct_lcg_at, destroy_lcg_at, __lcg):\n+\tNew helper functions and callback.\n+\t(random_device::_M_init): Add 'prng' and 'all' enumerators.\n+\tReplace switch with fallthrough with a series of 'if' statements.\n+\t[USE_LCG]: Construct an lcg_type engine and use __lcg when cpuid\n+\tchecks fail.\n+\t(random_device::_M_init_pretr1) [USE_MT19937]: Accept \"prng\"\n+\ttoken.\n+\t(random_device::_M_getval): Check for callback unconditionally\n+\tand always pass _M_file pointer.\n+\t* testsuite/26_numerics/random/random_device/85494.cc: Remove\n+\teffective-target check. Use new random_device_available helper.\n+\t* testsuite/26_numerics/random/random_device/94087.cc: Likewise.\n+\t* testsuite/26_numerics/random/random_device/cons/default-cow.cc:\n+\tRemove effective-target check.\n+\t* testsuite/26_numerics/random/random_device/cons/default.cc:\n+\tLikewise.\n+\t* testsuite/26_numerics/random/random_device/cons/token.cc: Use\n+\tnew random_device_available helper. Test \"prng\" token.\n+\t* testsuite/util/testsuite_random.h (random_device_available):\n+\tNew helper function.\n+\n 2021-03-25  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/debug/string"}]}