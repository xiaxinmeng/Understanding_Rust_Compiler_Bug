{"sha": "e7a84011d21612f6ca9f79024106409960d1bd2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdhODQwMTFkMjE2MTJmNmNhOWY3OTAyNDEwNjQwOTk2MGQxYmQyZA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-25T23:10:57Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-11-25T23:10:57Z"}, "message": "Declare sequence_rtl_expr.\n\n(struct temp_slot): New field rtl_expr.\n(assign_stack_temp): Set it from sequence_rtl_expr.\n({free,pop}_temp_slots): Don't free any slot with nonzero rtl_expr.\n(free_temps_for_rtl_expr): New function.\n\nFrom-SVN: r6161", "tree": {"sha": "68ee28f0b9c205cf8c0e48ee6982f01c512a8285", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68ee28f0b9c205cf8c0e48ee6982f01c512a8285"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7a84011d21612f6ca9f79024106409960d1bd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a84011d21612f6ca9f79024106409960d1bd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a84011d21612f6ca9f79024106409960d1bd2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a84011d21612f6ca9f79024106409960d1bd2d/comments", "author": null, "committer": null, "parents": [{"sha": "f55eed9920f2da5b27ab84e5ffb694d155784f67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f55eed9920f2da5b27ab84e5ffb694d155784f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f55eed9920f2da5b27ab84e5ffb694d155784f67"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "c98b08989649e107e68deab744662442f124c766", "filename": "gcc/function.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7a84011d21612f6ca9f79024106409960d1bd2d/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7a84011d21612f6ca9f79024106409960d1bd2d/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=e7a84011d21612f6ca9f79024106409960d1bd2d", "patch": "@@ -317,6 +317,7 @@ void (*restore_machine_status) ();\n    integrate.c  */\n \n extern int rtx_equal_function_value_matters;\n+extern tree sequence_rtl_expr;\n extern tree bc_runtime_type_code ();\n extern rtx bc_build_calldesc ();\n extern char *bc_emit_trampoline ();\n@@ -365,6 +366,8 @@ struct temp_slot\n   rtx slot;\n   /* The size, in units, of the slot.  */\n   int size;\n+  /* The value of `sequence_rtl_expr' when this temporary is allocated.  */\n+  tree rtl_expr;\n   /* Non-zero if this temporary is currently in use.  */\n   char in_use;\n   /* Nesting level at which this slot is being used.  */\n@@ -809,6 +812,7 @@ assign_stack_temp (mode, size, keep)\n     }\n \n   p->in_use = 1;\n+  p->rtl_expr = sequence_rtl_expr;\n   p->level = temp_slot_level;\n   p->keep = keep;\n   return p->slot;\n@@ -909,15 +913,35 @@ preserve_temp_slots (x)\n }\n \n /* Free all temporaries used so far.  This is normally called at the end\n-   of generating code for a statement.  */\n+   of generating code for a statement.  Don't free any temporaries\n+   currently in use for an RTL_EXPR that hasn't yet been emitted.\n+   We could eventually do better than this since it can be reused while\n+   generating the same RTL_EXPR, but this is complex and probably not\n+   worthwhile.  */\n \n void\n free_temp_slots ()\n {\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level && ! p->keep)\n+    if (p->in_use && p->level == temp_slot_level && ! p->keep\n+\t&& p->rtl_expr == 0)\n+      p->in_use = 0;\n+\n+  combine_temp_slots ();\n+}\n+\n+/* Free all temporary slots used in T, an RTL_EXPR node.  */\n+\n+void\n+free_temps_for_rtl_expr (t)\n+     tree t;\n+{\n+  struct temp_slot *p;\n+\n+  for (p = temp_slots; p; p = p->next)\n+    if (p->rtl_expr == t)\n       p->in_use = 0;\n \n   combine_temp_slots ();\n@@ -940,7 +964,7 @@ pop_temp_slots ()\n   struct temp_slot *p;\n \n   for (p = temp_slots; p; p = p->next)\n-    if (p->in_use && p->level == temp_slot_level)\n+    if (p->in_use && p->level == temp_slot_level && p->rtl_expr == 0)\n       p->in_use = 0;\n \n   combine_temp_slots ();"}]}