{"sha": "21e4c9a8db052486c9baf381279d1725048a56f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlNGM5YThkYjA1MjQ4NmM5YmFmMzgxMjc5ZDE3MjUwNDhhNTZmMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-03-01T13:21:30Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-03-01T13:21:30Z"}, "message": "Avoid exponential runtime\n\nFrom-SVN: r40145", "tree": {"sha": "49363554554ff466c0017de2e20bc441da32ac71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49363554554ff466c0017de2e20bc441da32ac71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21e4c9a8db052486c9baf381279d1725048a56f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e4c9a8db052486c9baf381279d1725048a56f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e4c9a8db052486c9baf381279d1725048a56f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e4c9a8db052486c9baf381279d1725048a56f0/comments", "author": null, "committer": null, "parents": [{"sha": "c2a3a48235e6a983585e0b5d07718faa68dd41b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a3a48235e6a983585e0b5d07718faa68dd41b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a3a48235e6a983585e0b5d07718faa68dd41b5"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "40a88ef46be667d5b39715a5305519b685aaddec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21e4c9a8db052486c9baf381279d1725048a56f0", "patch": "@@ -1,3 +1,10 @@\n+2001-03-01  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* sched-int.h (struct haifa_insn_data): Add new member priority_known.\n+\t(INSN_PRIORITY_KNOWN): New accessor macro.\n+\t* haifa-sched.c (priority): Use it instead of testing priority against\n+\tzero.\n+\n 2001-02-28  DJ Delorie  <dj@redhat.com>\n \n \t* config/m68k/m68k.h (MOVE_BY_PIECES_P): Avoid pushing bytes,"}, {"sha": "977b6ecd29738891f057a42d771d3036750ff37f", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=21e4c9a8db052486c9baf381279d1725048a56f0", "patch": "@@ -719,38 +719,43 @@ static int\n priority (insn)\n      rtx insn;\n {\n-  int this_priority;\n   rtx link;\n \n   if (! INSN_P (insn))\n     return 0;\n \n-  if ((this_priority = INSN_PRIORITY (insn)) == 0)\n+  if (! INSN_PRIORITY_KNOWN (insn))\n     {\n+      int this_priority = 0;\n+\n       if (INSN_DEPEND (insn) == 0)\n \tthis_priority = insn_cost (insn, 0, 0);\n       else\n-\tfor (link = INSN_DEPEND (insn); link; link = XEXP (link, 1))\n-\t  {\n-\t    rtx next;\n-\t    int next_priority;\n+\t{\n+\t  for (link = INSN_DEPEND (insn); link; link = XEXP (link, 1))\n+\t    {\n+\t      rtx next;\n+\t      int next_priority;\n \n-\t    if (RTX_INTEGRATED_P (link))\n-\t      continue;\n+\t      if (RTX_INTEGRATED_P (link))\n+\t\tcontinue;\n \n-\t    next = XEXP (link, 0);\n+\t      next = XEXP (link, 0);\n \n-\t    /* Critical path is meaningful in block boundaries only.  */\n-\t    if (! (*current_sched_info->contributes_to_priority) (next, insn))\n-\t      continue;\n+\t      /* Critical path is meaningful in block boundaries only.  */\n+\t      if (! (*current_sched_info->contributes_to_priority) (next, insn))\n+\t\tcontinue;\n \n-\t    next_priority = insn_cost (insn, link, next) + priority (next);\n-\t    if (next_priority > this_priority)\n-\t      this_priority = next_priority;\n-\t  }\n+\t      next_priority = insn_cost (insn, link, next) + priority (next);\n+\t      if (next_priority > this_priority)\n+\t\tthis_priority = next_priority;\n+\t    }\n+\t}\n       INSN_PRIORITY (insn) = this_priority;\n+      INSN_PRIORITY_KNOWN (insn) = 1;\n     }\n-  return this_priority;\n+\n+  return INSN_PRIORITY (insn);\n }\n \f\n /* Macros and functions for keeping the priority queue sorted, and"}, {"sha": "0eb2e6682797cfb115dcc2ad9c97a7ce6877000b", "filename": "gcc/sched-int.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21e4c9a8db052486c9baf381279d1725048a56f0/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=21e4c9a8db052486c9baf381279d1725048a56f0", "patch": "@@ -198,6 +198,9 @@ struct haifa_insn_data\n      moved load insn and this one.  */\n   unsigned int fed_by_spec_load : 1;\n   unsigned int is_load_insn : 1;\n+\n+  /* Nonzero if priority has been computed already.  */\n+  unsigned int priority_known : 1;\n };\n \n extern struct haifa_insn_data *h_i_d;\n@@ -209,6 +212,7 @@ extern struct haifa_insn_data *h_i_d;\n #define CANT_MOVE(insn)\t\t(h_i_d[INSN_UID (insn)].cant_move)\n #define INSN_DEP_COUNT(INSN)\t(h_i_d[INSN_UID (INSN)].dep_count)\n #define INSN_PRIORITY(INSN)\t(h_i_d[INSN_UID (INSN)].priority)\n+#define INSN_PRIORITY_KNOWN(INSN) (h_i_d[INSN_UID (INSN)].priority_known)\n #define INSN_COST(INSN)\t\t(h_i_d[INSN_UID (INSN)].cost)\n #define INSN_UNIT(INSN)\t\t(h_i_d[INSN_UID (INSN)].units)\n #define INSN_REG_WEIGHT(INSN)\t(h_i_d[INSN_UID (INSN)].reg_weight)"}]}