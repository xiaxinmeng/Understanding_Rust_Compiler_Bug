{"sha": "8fd05f4d87084929be12624d3f21000ef593d2c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZkMDVmNGQ4NzA4NDkyOWJlMTI2MjRkM2YyMTAwMGVmNTkzZDJjMw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2013-12-13T16:38:53Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2013-12-13T16:38:53Z"}, "message": "arc.h (BITS_PER_UNIT): Removed.\n\n2013-12-13  Kenneth Zadeck  <zadeck@naturalbridge.com>\n\n\t* config/arc/arc.h (BITS_PER_UNIT): Removed.\n\t* config/bfin/bfin.h (BITS_PER_UNIT): Removed.\n\t* config/lm32/lm32.h (BITS_PER_UNIT): Removed.\n\t* config/m32c/m32c.h (BITS_PER_UNIT): Removed.\n\t* config/microblaze/microblaze.h (BITS_PER_UNIT): Removed.\n\t* config/picochip/picochip.h (BITS_PER_UNIT): Removed.\n\t* config/spu/spu.h (BITS_PER_UNIT): Removed.\n\t* defaults.h (BITS_PER_UNIT): Removed.\n\t* config/i386/i386-modes.def (MAX_BITSIZE_MODE_ANY_INT): New.\n\t* doc/rtl (BITS_PER_UNIT): Moved from tm.texi.\n\t(MAX_BITSIZE_MODE_ANY_INT): Updated.\n\t* doc/tm.texi (BITS_PER_UNIT): Removed.\n\t* doc/tm.texi.in (BITS_PER_UNIT): Removed.\n\t* genmodes.c (bits_per_unit, max_bitsize_mode_any_int): New.\n\t(create_modes): Added code to set bits_per_unit and\n\tmax_bitsize_mode_any_int.\n\t(emit_max_int): Changed code generation.\n\t* mkconfig.sh: Added insn-modes.h.\n\nFrom-SVN: r205964", "tree": {"sha": "974155cc0ff2cb4d9b49bd4bd46084ad9e23ce18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/974155cc0ff2cb4d9b49bd4bd46084ad9e23ce18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fd05f4d87084929be12624d3f21000ef593d2c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd05f4d87084929be12624d3f21000ef593d2c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd05f4d87084929be12624d3f21000ef593d2c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd05f4d87084929be12624d3f21000ef593d2c3/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62c6e26e3326d13b47fba3b4375b261a8431d422", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62c6e26e3326d13b47fba3b4375b261a8431d422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62c6e26e3326d13b47fba3b4375b261a8431d422"}], "stats": {"total": 118, "additions": 78, "deletions": 40}, "files": [{"sha": "a238cac62a66877762ec08a06ea627c5c39ae09a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -1,3 +1,24 @@\n+2013-12-13  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\n+\t* config/arc/arc.h (BITS_PER_UNIT): Removed.\n+\t* config/bfin/bfin.h (BITS_PER_UNIT): Removed.\n+\t* config/lm32/lm32.h (BITS_PER_UNIT): Removed.\n+\t* config/m32c/m32c.h (BITS_PER_UNIT): Removed.\n+\t* config/microblaze/microblaze.h (BITS_PER_UNIT): Removed.\n+\t* config/picochip/picochip.h (BITS_PER_UNIT): Removed.\n+\t* config/spu/spu.h (BITS_PER_UNIT): Removed.\n+\t* defaults.h (BITS_PER_UNIT): Removed.\n+\t* config/i386/i386-modes.def (MAX_BITSIZE_MODE_ANY_INT): New.\n+\t* doc/rtl (BITS_PER_UNIT): Moved from tm.texi.\n+\t(MAX_BITSIZE_MODE_ANY_INT): Updated.\n+\t* doc/tm.texi (BITS_PER_UNIT): Removed.\n+\t* doc/tm.texi.in (BITS_PER_UNIT): Removed.\n+\t* genmodes.c (bits_per_unit, max_bitsize_mode_any_int): New.\n+\t(create_modes): Added code to set bits_per_unit and\n+\tmax_bitsize_mode_any_int.\n+\t(emit_max_int): Changed code generation.\n+\t* mkconfig.sh: Added insn-modes.h.\n+\n 2013-12-13  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/45685"}, {"sha": "88102f0a532de18ef82ddae287a074f8b497eac7", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -303,9 +303,6 @@ along with GCC; see the file COPYING3.  If not see\n    numbered.  */\n #define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN)\n \n-/* Number of bits in an addressable storage unit.  */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "85ab0b0f5b8baf4db33ec9b387a774486b521bf6", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -859,9 +859,6 @@ typedef struct {\n /* Define this if most significant word of a multiword number is numbered. */\n #define WORDS_BIG_ENDIAN 0\n \n-/* number of bits in an addressable storage unit */\n-#define BITS_PER_UNIT 8\n-\n /* Width in bits of a \"word\", which is the contents of a machine register.\n    Note that this is not necessarily the width of data type `int';\n    if using 16-bit ints on a 68000, this would still be 32."}, {"sha": "57d08fb1b687d3d87630339a1687e424b63ef974", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -90,5 +90,10 @@ VECTOR_MODE (INT, QI, 2);     /*                   V2QI */\n INT_MODE (OI, 32);\n INT_MODE (XI, 64);\n \n+/* Keep the OI and XI modes from confusing the compiler into thinking\n+   that these modes could actually be used for computation.  They are\n+   only holders for vectors during data movement.  */\n+#define MAX_BITSIZE_MODE_ANY_INT (128)\n+\n /* The symbol Pmode stands for one of the above machine modes (usually SImode).\n    The tm.h file specifies which one.  It is not a distinct mode.  */"}, {"sha": "edb96b7b0b2c67458db3b16fc98ba9cd2f6485d4", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -73,7 +73,6 @@\n #define BYTES_BIG_ENDIAN 1\n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_UNIT 8\n #define BITS_PER_WORD 32\n #define UNITS_PER_WORD 4\n "}, {"sha": "b7b5aa4692419ddc8b29c3fd1b44b0b5b8ea4dbf", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -140,7 +140,6 @@ machine_function;\n    matches \"int\".  Pointers are 16 bits for R8C/M16C (when TARGET_A16\n    is true) and 24 bits for M32CM/M32C (when TARGET_A24 is true), but\n    24-bit pointers are stored in 32-bit words.  */\n-#define BITS_PER_UNIT 8\n #define UNITS_PER_WORD 2\n #define POINTER_SIZE (TARGET_A16 ? 16 : 32)\n #define POINTERS_EXTEND_UNSIGNED 1"}, {"sha": "dcca4ac9f5f11815ed85fd0bfd873dd4c4af615b", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -193,7 +193,6 @@ extern enum pipeline_type microblaze_pipe;\n #define BITS_BIG_ENDIAN 0\n #define BYTES_BIG_ENDIAN (TARGET_LITTLE_ENDIAN == 0)\n #define WORDS_BIG_ENDIAN (BYTES_BIG_ENDIAN)\n-#define BITS_PER_UNIT           8\n #define BITS_PER_WORD           32\n #define UNITS_PER_WORD          4\n #define MIN_UNITS_PER_WORD      4"}, {"sha": "3621f3d1b1c9c912298ca609c9f4ace45bf35133", "filename": "gcc/config/picochip/picochip.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fpicochip%2Fpicochip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -92,8 +92,6 @@ extern enum picochip_dfa_type picochip_schedule_type;\n #define BYTES_BIG_ENDIAN 0\n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_UNIT 8\n-\n #define BITS_PER_WORD 16\n #define UNITS_PER_WORD (BITS_PER_WORD / BITS_PER_UNIT)\n "}, {"sha": "ad4405ae3d9e70a3c23185dff54e6db8cbd88b3d", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -54,8 +54,6 @@ extern GTY(()) int spu_tune;\n \n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_UNIT 8\n-\n /* GCC uses word_mode in many places, assuming that it is the fastest\n    integer mode.  That is not the case for SPU though.  We can't use\n    32 here because (of some reason I can't remember.) */"}, {"sha": "1d12aef801d358de9bfd0e0f21ded086440bcf78", "filename": "gcc/defaults.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -471,10 +471,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n    your target, you should override these values by defining the\n    appropriate symbols in your tm.h file.  */\n \n-#ifndef BITS_PER_UNIT\n-#define BITS_PER_UNIT 8\n-#endif\n-\n #ifndef BITS_PER_WORD\n #define BITS_PER_WORD (BITS_PER_UNIT * UNITS_PER_WORD)\n #endif"}, {"sha": "15290f23fba4367b45eabb5b6160920b9f408daf", "filename": "gcc/doc/rtl.texi", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Frtl.texi?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -1462,14 +1462,25 @@ Returns the number of units contained in a mode, i.e.,\n Returns the narrowest mode in mode class @var{c}.\n @end table\n \n-The following 4 variables are defined on every target.   They can be\n+The following 3 variables are defined on every target.   They can be\n used to allocate buffers that are guaranteed to be large enough to\n-hold any value that can be represented on the target.   \n+hold any value that can be represented on the target.   The first two\n+can be overridden by defining them in the target's mode.def file,\n+however, the value must be a constant that can determined very early\n+in the compilation process.   The third symbol cannot be overridden.\n \n @table @code\n+@findex BITS_PER_UNIT\n+@item BITS_PER_UNIT\n+The number of bits in an addressable storage unit (byte).  If you do\n+not define this, the default is 8.\n+\n @findex MAX_BITSIZE_MODE_ANY_INT\n @item MAX_BITSIZE_MODE_ANY_INT\n-The maximum of MAX_BITSIZE_MODE_INT and MAX_BITSIZE_MODE_PARTIAL_INT.\n+The maximum bitsize of any mode that is used in integer math.  This\n+should be overridden by the target if it uses large integers as\n+containers for larger vectors but otherwise never uses the contents to\n+compute integer values.\n \n @findex MAX_BITSIZE_MODE_ANY_MODE\n @item MAX_BITSIZE_MODE_ANY_MODE"}, {"sha": "8abb3effff46e75a8b3bfc386919e654268c4b5f", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -879,11 +879,6 @@ You need not define this macro if the ordering is the same as for\n multi-word integers.\n @end defmac\n \n-@defmac BITS_PER_UNIT\n-Define this macro to be the number of bits in an addressable storage\n-unit (byte).  If you do not define this macro the default is 8.\n-@end defmac\n-\n @defmac BITS_PER_WORD\n Number of bits in a word.  If you do not define this macro, the default\n is @code{BITS_PER_UNIT * UNITS_PER_WORD}."}, {"sha": "deedb41d3b243cbba28a76f8913acb2f51fd5e1f", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -853,11 +853,6 @@ You need not define this macro if the ordering is the same as for\n multi-word integers.\n @end defmac\n \n-@defmac BITS_PER_UNIT\n-Define this macro to be the number of bits in an addressable storage\n-unit (byte).  If you do not define this macro the default is 8.\n-@end defmac\n-\n @defmac BITS_PER_WORD\n Number of bits in a word.  If you do not define this macro, the default\n is @code{BITS_PER_UNIT * UNITS_PER_WORD}."}, {"sha": "641623d385e4220e4ec6d5d8e2a9a52e6f0798c4", "filename": "gcc/genmodes.c", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -711,10 +711,27 @@ make_vector_mode (enum mode_class bclass,\n #define ADJUST_IBIT(M, X)  _ADD_ADJUST (ibit, M, X, ACCUM, UACCUM)\n #define ADJUST_FBIT(M, X)  _ADD_ADJUST (fbit, M, X, FRACT, UACCUM)\n \n+static int bits_per_unit;\n+static int max_bitsize_mode_any_int;\n+\n static void\n create_modes (void)\n {\n #include \"machmode.def\"\n+\n+  /* So put the default value unless the target needs a non standard\n+     value. */\n+#ifdef BITS_PER_UNIT\n+  bits_per_unit = BITS_PER_UNIT;\n+#else\n+  bits_per_unit = 8;\n+#endif\n+\n+#ifdef MAX_BITSIZE_MODE_ANY_INT\n+  max_bitsize_mode_any_int = MAX_BITSIZE_MODE_ANY_INT;\n+#else\n+  max_bitsize_mode_any_int = 0;\n+#endif\n }\n \n /* Processing.  */\n@@ -860,16 +877,24 @@ emit_max_int (void)\n   int j;\n \n   puts (\"\");\n-  for (max = 1, i = modes[MODE_INT]; i; i = i->next)\n-    if (max < i->bytesize)\n-\tmax = i->bytesize;\n-  mmax = max;\n-  for (max = 1, i = modes[MODE_PARTIAL_INT]; i; i = i->next)\n-    if (max < i->bytesize)\n-\tmax = i->bytesize;\n-  if (max > mmax)\n-    mmax = max;\n-  printf (\"#define MAX_BITSIZE_MODE_ANY_INT %d*BITS_PER_UNIT\\n\", mmax);\n+\n+  printf (\"#define BITS_PER_UNIT (%d)\\n\", bits_per_unit); \n+ \n+  if (max_bitsize_mode_any_int == 0)\n+    {\n+      for (max = 1, i = modes[MODE_INT]; i; i = i->next)\n+\tif (max < i->bytesize)\n+\t  max = i->bytesize;\n+      mmax = max;\n+      for (max = 1, i = modes[MODE_PARTIAL_INT]; i; i = i->next)\n+\tif (max < i->bytesize)\n+\t  max = i->bytesize;\n+      if (max > mmax)\n+\tmmax = max;\n+      printf (\"#define MAX_BITSIZE_MODE_ANY_INT %d*BITS_PER_UNIT\\n\", mmax);\n+    }\n+  else\n+    printf (\"#define MAX_BITSIZE_MODE_ANY_INT %d\\n\", max_bitsize_mode_any_int);\n \n   mmax = 0;\n   for (j = 0; j < MAX_MODE_CLASS; j++)"}, {"sha": "a5b116d4483dc601e49ecc5f12ced05257f12529", "filename": "gcc/mkconfig.sh", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fmkconfig.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fd05f4d87084929be12624d3f21000ef593d2c3/gcc%2Fmkconfig.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkconfig.sh?ref=8fd05f4d87084929be12624d3f21000ef593d2c3", "patch": "@@ -97,6 +97,9 @@ case $output in\n #if defined IN_GCC && !defined GENERATOR_FILE && !defined USED_FOR_TARGET\n # include \"insn-flags.h\"\n #endif\n+#if defined IN_GCC && !defined GENERATOR_FILE\n+# include \"insn-modes.h\"\n+#endif\n EOF\n     ;;\n esac"}]}