{"sha": "16c0e295094c8f7721d838378f8b692331576887", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTZjMGUyOTUwOTRjOGY3NzIxZDgzODM3OGY4YjY5MjMzMTU3Njg4Nw==", "commit": {"author": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-07T22:25:08Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2010-09-07T22:25:08Z"}, "message": "trans.h (gfor_fndecl_clz128, [...]): Remove.\n\n\t* trans.h (gfor_fndecl_clz128, gfor_fndecl_ctz128): Remove.\n\t* trans-decl.c (gfor_fndecl_clz128, gfor_fndecl_ctz128): Remove.\n\t(gfc_build_intrinsic_function_decls): Don't build the\n\tgfor_fndecl_clz128 and gfor_fndecl_ctz128.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n\tgfc_conv_intrinsic_trailz): Generate inline arithmetic instead\n\tof calling clz128/ctz128 library functions.\n\nFrom-SVN: r163976", "tree": {"sha": "79d5b55ac565ae07c2478c721b8819a796a18229", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79d5b55ac565ae07c2478c721b8819a796a18229"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16c0e295094c8f7721d838378f8b692331576887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c0e295094c8f7721d838378f8b692331576887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16c0e295094c8f7721d838378f8b692331576887", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16c0e295094c8f7721d838378f8b692331576887/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237e9c04cd786379d85273faa6fed98119ac0c0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/237e9c04cd786379d85273faa6fed98119ac0c0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/237e9c04cd786379d85273faa6fed98119ac0c0d"}], "stats": {"total": 155, "additions": 123, "deletions": 32}, "files": [{"sha": "7a9f6781931083c4e9afad5dec574f2e30547aba", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=16c0e295094c8f7721d838378f8b692331576887", "patch": "@@ -1,6 +1,17 @@\n+2010-09-08  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\t* trans.h (gfor_fndecl_clz128, gfor_fndecl_ctz128): Remove.\n+\t* trans-decl.c (gfor_fndecl_clz128, gfor_fndecl_ctz128): Remove.\n+\t(gfc_build_intrinsic_function_decls): Don't build the\n+\tgfor_fndecl_clz128 and gfor_fndecl_ctz128.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_leadz,\n+\tgfc_conv_intrinsic_trailz): Generate inline arithmetic instead\n+\tof calling clz128/ctz128 library functions.\n+\n 2010-09-07  Jan Hubicka  <jh@suse.cz>\n \n-\t* trans-expr.c (gfc_conv_initializer): Set STATIC flags for initializers.\n+\t* trans-expr.c (gfc_conv_initializer): Set STATIC flags for\n+\tinitializers.\n \n 2010-09-07  Tobias Burnus <burnus@net-b.de>\n \t"}, {"sha": "d3d15dbf3aff55dcc02e7a7cf4e632596be49af7", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=16c0e295094c8f7721d838378f8b692331576887", "patch": "@@ -150,12 +150,9 @@ tree gfor_fndecl_convert_char4_to_char1;\n \n \n /* Other misc. runtime library functions.  */\n-\n tree gfor_fndecl_size0;\n tree gfor_fndecl_size1;\n tree gfor_fndecl_iargc;\n-tree gfor_fndecl_clz128;\n-tree gfor_fndecl_ctz128;\n \n /* Intrinsic functions implemented in Fortran.  */\n tree gfor_fndecl_sc_kind;\n@@ -2775,21 +2772,6 @@ gfc_build_intrinsic_function_decls (void)\n   gfor_fndecl_iargc = gfc_build_library_function_decl (\n \tget_identifier (PREFIX (\"iargc\")), gfc_int4_type_node, 0);\n   TREE_NOTHROW (gfor_fndecl_iargc) = 1;\n-\n-  if (gfc_type_for_size (128, true))\n-    {\n-      tree uint128 = gfc_type_for_size (128, true);\n-\n-      gfor_fndecl_clz128 = gfc_build_library_function_decl (\n-\tget_identifier (PREFIX (\"clz128\")), integer_type_node, 1, uint128);\n-      TREE_READONLY (gfor_fndecl_clz128) = 1;\n-      TREE_NOTHROW (gfor_fndecl_clz128) = 1;\n-\n-      gfor_fndecl_ctz128 = gfc_build_library_function_decl (\n-\tget_identifier (PREFIX (\"ctz128\")), integer_type_node, 1, uint128);\n-      TREE_READONLY (gfor_fndecl_ctz128) = 1;\n-      TREE_NOTHROW (gfor_fndecl_ctz128) = 1;\n-    }\n }\n \n "}, {"sha": "53cbc99e2c140bce2881cd5cd428b1b6b6f48189", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 111, "deletions": 11, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=16c0e295094c8f7721d838378f8b692331576887", "patch": "@@ -3433,6 +3433,7 @@ gfc_conv_intrinsic_ishftc (gfc_se * se, gfc_expr * expr)\n \t\t\t      rrot);\n }\n \n+\n /* LEADZ (i) = (i == 0) ? BIT_SIZE (i)\n \t\t\t: __builtin_clz(i) - (BIT_SIZE('int') - BIT_SIZE(i))\n \n@@ -3477,24 +3478,76 @@ gfc_conv_intrinsic_leadz (gfc_se * se, gfc_expr * expr)\n     }\n   else\n     {\n-      gcc_assert (argsize == 128);\n+      gcc_assert (argsize == 2 * LONG_LONG_TYPE_SIZE);\n       arg_type = gfc_build_uint_type (argsize);\n-      func = gfor_fndecl_clz128;\n+      func = NULL_TREE;\n     }\n \n   /* Convert the actual argument twice: first, to the unsigned type of the\n      same size; then, to the proper argument type for the built-in\n      function.  But the return type is of the default INTEGER kind.  */\n   arg = fold_convert (gfc_build_uint_type (argsize), arg);\n   arg = fold_convert (arg_type, arg);\n+  arg = gfc_evaluate_now (arg, &se->pre);\n   result_type = gfc_get_int_type (gfc_default_integer_kind);\n \n   /* Compute LEADZ for the case i .ne. 0.  */\n-  s = TYPE_PRECISION (arg_type) - argsize;\n-  tmp = fold_convert (result_type, build_call_expr_loc (input_location, func,\n-\t\t\t\t\t\t\t1, arg));\n-  leadz = fold_build2_loc (input_location, MINUS_EXPR, result_type,\n-\t\t\t   tmp, build_int_cst (result_type, s));\n+  if (func)\n+    {\n+      s = TYPE_PRECISION (arg_type) - argsize;\n+      tmp = fold_convert (result_type,\n+\t\t\t  build_call_expr_loc (input_location, func,\n+\t\t\t\t\t       1, arg));\n+      leadz = fold_build2_loc (input_location, MINUS_EXPR, result_type,\n+\t\t\t       tmp, build_int_cst (result_type, s));\n+    }\n+  else\n+    {\n+      /* We end up here if the argument type is larger than 'long long'.\n+\t We generate this code:\n+  \n+\t    if (x & (ULL_MAX << ULL_SIZE) != 0)\n+\t      return clzll ((unsigned long long) (x >> ULLSIZE));\n+\t    else\n+\t      return ULL_SIZE + clzll ((unsigned long long) x);\n+\n+\t where ULL_MAX is the largest value that a ULL_MAX can hold\n+\t (0xFFFFFFFFFFFFFFFF for a 64-bit long long type), and ULLSIZE\n+\t is the bit-size of the long long type (64 in this example).  */\n+      tree ullsize, ullmax, tmp1, tmp2;\n+\n+      ullsize = build_int_cst (result_type, LONG_LONG_TYPE_SIZE);\n+      ullmax = fold_build1_loc (input_location, BIT_NOT_EXPR,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tbuild_int_cst (long_long_unsigned_type_node,\n+\t\t\t\t\t       0));\n+\n+      cond = fold_build2_loc (input_location, LSHIFT_EXPR, arg_type,\n+\t\t\t      fold_convert (arg_type, ullmax), ullsize);\n+      cond = fold_build2_loc (input_location, BIT_AND_EXPR, arg_type,\n+\t\t\t      arg, cond);\n+      cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,\n+\t\t\t      cond, build_int_cst (arg_type, 0));\n+\n+      tmp1 = fold_build2_loc (input_location, RSHIFT_EXPR, arg_type,\n+\t\t\t      arg, ullsize);\n+      tmp1 = fold_convert (long_long_unsigned_type_node, tmp1);\n+      tmp1 = fold_convert (result_type,\n+\t\t\t   build_call_expr_loc (input_location,\t\n+\t\t\t\t\t\tbuilt_in_decls[BUILT_IN_CLZLL],\n+\t\t\t\t\t\t1, tmp1));\n+\n+      tmp2 = fold_convert (long_long_unsigned_type_node, arg);\n+      tmp2 = fold_convert (result_type,\n+\t\t\t   build_call_expr_loc (input_location,\n+\t\t\t\t\t\tbuilt_in_decls[BUILT_IN_CLZLL],\n+\t\t\t\t\t\t1, tmp2));\n+      tmp2 = fold_build2_loc (input_location, PLUS_EXPR, result_type,\n+\t\t\t      tmp2, ullsize);\n+\n+      leadz = fold_build3_loc (input_location, COND_EXPR, result_type,\n+\t\t\t       cond, tmp1, tmp2);\n+    }\n \n   /* Build BIT_SIZE.  */\n   bit_size = build_int_cst (result_type, argsize);\n@@ -3505,6 +3558,7 @@ gfc_conv_intrinsic_leadz (gfc_se * se, gfc_expr * expr)\n \t\t\t      bit_size, leadz);\n }\n \n+\n /* TRAILZ(i) = (i == 0) ? BIT_SIZE (i) : __builtin_ctz(i)\n \n    The conditional expression is necessary because the result of TRAILZ(0)\n@@ -3544,21 +3598,67 @@ gfc_conv_intrinsic_trailz (gfc_se * se, gfc_expr *expr)\n     }\n   else\n     {\n-      gcc_assert (argsize == 128);\n+      gcc_assert (argsize == 2 * LONG_LONG_TYPE_SIZE);\n       arg_type = gfc_build_uint_type (argsize);\n-      func = gfor_fndecl_ctz128;\n+      func = NULL_TREE;\n     }\n \n   /* Convert the actual argument twice: first, to the unsigned type of the\n      same size; then, to the proper argument type for the built-in\n      function.  But the return type is of the default INTEGER kind.  */\n   arg = fold_convert (gfc_build_uint_type (argsize), arg);\n   arg = fold_convert (arg_type, arg);\n+  arg = gfc_evaluate_now (arg, &se->pre);\n   result_type = gfc_get_int_type (gfc_default_integer_kind);\n \n   /* Compute TRAILZ for the case i .ne. 0.  */\n-  trailz = fold_convert (result_type, build_call_expr_loc (input_location,\n-\t\t\t\t\t\t       func, 1, arg));\n+  if (func)\n+    trailz = fold_convert (result_type, build_call_expr_loc (input_location,\n+\t\t\t\t\t\t\t     func, 1, arg));\n+  else\n+    {\n+      /* We end up here if the argument type is larger than 'long long'.\n+\t We generate this code:\n+  \n+\t    if ((x & ULL_MAX) == 0)\n+\t      return ULL_SIZE + ctzll ((unsigned long long) (x >> ULLSIZE));\n+\t    else\n+\t      return ctzll ((unsigned long long) x);\n+\n+\t where ULL_MAX is the largest value that a ULL_MAX can hold\n+\t (0xFFFFFFFFFFFFFFFF for a 64-bit long long type), and ULLSIZE\n+\t is the bit-size of the long long type (64 in this example).  */\n+      tree ullsize, ullmax, tmp1, tmp2;\n+\n+      ullsize = build_int_cst (result_type, LONG_LONG_TYPE_SIZE);\n+      ullmax = fold_build1_loc (input_location, BIT_NOT_EXPR,\n+\t\t\t\tlong_long_unsigned_type_node,\n+\t\t\t\tbuild_int_cst (long_long_unsigned_type_node, 0));\n+\n+      cond = fold_build2_loc (input_location, BIT_AND_EXPR, arg_type, arg,\n+\t\t\t      fold_convert (arg_type, ullmax));\n+      cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node, cond,\n+\t\t\t      build_int_cst (arg_type, 0));\n+\n+      tmp1 = fold_build2_loc (input_location, RSHIFT_EXPR, arg_type,\n+\t\t\t      arg, ullsize);\n+      tmp1 = fold_convert (long_long_unsigned_type_node, tmp1);\n+      tmp1 = fold_convert (result_type,\n+\t\t\t   build_call_expr_loc (input_location,\t\n+\t\t\t\t\t\tbuilt_in_decls[BUILT_IN_CTZLL],\n+\t\t\t\t\t\t1, tmp1));\n+      tmp1 = fold_build2_loc (input_location, PLUS_EXPR, result_type,\n+\t\t\t      tmp1, ullsize);\n+\n+      tmp2 = fold_convert (long_long_unsigned_type_node, arg);\n+      tmp2 = fold_convert (result_type,\n+\t\t\t   build_call_expr_loc (input_location,\n+\t\t\t\t\t\tbuilt_in_decls[BUILT_IN_CTZLL],\n+\t\t\t\t\t\t1, tmp2));\n+\n+      trailz = fold_build3_loc (input_location, COND_EXPR, result_type,\n+\t\t\t\tcond, tmp1, tmp2);\n+    }\n \n   /* Build BIT_SIZE.  */\n   bit_size = build_int_cst (result_type, argsize);"}, {"sha": "a803b53306fe2a0f4426091d6ba128ba617d5b86", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16c0e295094c8f7721d838378f8b692331576887/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=16c0e295094c8f7721d838378f8b692331576887", "patch": "@@ -647,8 +647,6 @@ extern GTY(()) tree gfor_fndecl_convert_char4_to_char1;\n extern GTY(()) tree gfor_fndecl_size0;\n extern GTY(()) tree gfor_fndecl_size1;\n extern GTY(()) tree gfor_fndecl_iargc;\n-extern GTY(()) tree gfor_fndecl_clz128;\n-extern GTY(()) tree gfor_fndecl_ctz128;\n \n /* Implemented in Fortran.  */\n extern GTY(()) tree gfor_fndecl_sc_kind;"}]}