{"sha": "39cc8c3d6bc5bd2d202a368bec2770c86497a408", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzljYzhjM2Q2YmM1YmQyZDIwMmEzNjhiZWMyNzcwYzg2NDk3YTQwOA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-11-18T15:13:54Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-11-18T15:13:54Z"}, "message": "re PR tree-optimization/50605 (ice in ipa_get_jf_pass_through_result with -O3)\n\n2011-11-18  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/50605\n\t* gimple.c (is_gimple_ip_invariant_address): Also handle MEM_REFs\n\tof IPA invariant decls.\n\n\t* testsuite/g++.dg/ipa/pr50605.C: New test.\n\nFrom-SVN: r181477", "tree": {"sha": "ac6d85de16d80fdad124ecf877b09fc745dc5d89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ac6d85de16d80fdad124ecf877b09fc745dc5d89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39cc8c3d6bc5bd2d202a368bec2770c86497a408", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cc8c3d6bc5bd2d202a368bec2770c86497a408", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39cc8c3d6bc5bd2d202a368bec2770c86497a408", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39cc8c3d6bc5bd2d202a368bec2770c86497a408/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f252165363acf536369823939446bf1459862852", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f252165363acf536369823939446bf1459862852", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f252165363acf536369823939446bf1459862852"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "6fb03faab6fa0981837de81b60de42e96f5f553f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39cc8c3d6bc5bd2d202a368bec2770c86497a408", "patch": "@@ -1,3 +1,9 @@\n+2011-11-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50605\n+\t* gimple.c (is_gimple_ip_invariant_address): Also handle MEM_REFs\n+\tof IPA invariant decls.\n+\n 2011-11-18  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* tree-outof-ssa.c (insert_back_edge_copies):  Add call to"}, {"sha": "071c6515b4cae3f008672714d3937b890968bf71", "filename": "gcc/gimple.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=39cc8c3d6bc5bd2d202a368bec2770c86497a408", "patch": "@@ -2858,8 +2858,18 @@ is_gimple_ip_invariant_address (const_tree t)\n     return false;\n \n   op = strip_invariant_refs (TREE_OPERAND (t, 0));\n+  if (!op)\n+    return false;\n+\n+  if (TREE_CODE (op) == MEM_REF)\n+    {\n+      const_tree op0 = TREE_OPERAND (op, 0);\n+      return (TREE_CODE (op0) == ADDR_EXPR\n+\t      && (CONSTANT_CLASS_P (TREE_OPERAND (op0, 0))\n+\t\t  || decl_address_ip_invariant_p (TREE_OPERAND (op0, 0))));\n+    }\n \n-  return op && (CONSTANT_CLASS_P (op) || decl_address_ip_invariant_p (op));\n+  return CONSTANT_CLASS_P (op) || decl_address_ip_invariant_p (op);\n }\n \n /* Return true if T is a GIMPLE minimal invariant.  It's a restricted"}, {"sha": "1edc46c4e19f2b7b4ef96caa5bef9c24abc4a7bd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=39cc8c3d6bc5bd2d202a368bec2770c86497a408", "patch": "@@ -1,3 +1,8 @@\n+2011-11-18  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/50605\n+\t* g++.dg/ipa/pr50605.C: New test.\n+\n 2011-11-18  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/51191"}, {"sha": "4910a37f8f2ac534979fe52fb4649563dcc24161", "filename": "gcc/testsuite/g++.dg/ipa/pr50605.C", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr50605.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39cc8c3d6bc5bd2d202a368bec2770c86497a408/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr50605.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr50605.C?ref=39cc8c3d6bc5bd2d202a368bec2770c86497a408", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -fno-early-inlining\" } */\n+\n+class A\n+{\n+public:\n+  int a;\n+  void *stuff;\n+};\n+\n+class B\n+{\n+public:\n+  int b;\n+  void *other_stuff;\n+  A array[50];\n+};\n+\n+extern B gb;\n+\n+int process_A (A *a)\n+{\n+  return a->a;\n+}\n+\n+int process_A_complex (A *a)\n+{\n+  return process_A (a+3);\n+}\n+\n+int process_B (B *b)\n+{\n+  return process_A_complex (&b->array[0]);\n+}\n+\n+int foo (void)\n+{\n+  return process_B (&gb);\n+}\n+"}]}