{"sha": "30c9604c2c04587094207b3dc91f472acb6f331d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjOTYwNGMyYzA0NTg3MDk0MjA3YjNkYzkxZjQ3MmFjYjZmMzMxZA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:17Z"}, "message": "libcc1: use unique_ptr more\n\nThis changes libcc1 to use unique_ptr in a few more places, removing\nsome manual memory management.\n\nlibcc1\n\n\t* libcp1.cc (struct libcp1) <connection, compilerp>: Use\n\tunique_ptr.\n\t(~libcp1): Remove.\n\t(libcp1_compile, libcp1_set_triplet_regexp)\n\t(libcp1_set_driver_filename): Update.\n\t* libcc1.cc (struct libcc1) <connection, compilerp>: Use\n\tunique_ptr.\n\t(~libcc1): Remove.\n\t(libcc1_set_triplet_regexp, libcc1_set_driver_filename)\n\t(libcc1_compile): Update.", "tree": {"sha": "ca7aab1ad8c8d17ffbdbbeeb1ce9d4d27729f448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca7aab1ad8c8d17ffbdbbeeb1ce9d4d27729f448"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c9604c2c04587094207b3dc91f472acb6f331d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c9604c2c04587094207b3dc91f472acb6f331d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c9604c2c04587094207b3dc91f472acb6f331d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c9604c2c04587094207b3dc91f472acb6f331d/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f237df286ecaf366e19601917bedaf6224929d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f237df286ecaf366e19601917bedaf6224929d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f237df286ecaf366e19601917bedaf6224929d0"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "e00355955b6ea2ca02359b8bc21c20c6cf5b6e12", "filename": "libcc1/libcc1.cc", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c9604c2c04587094207b3dc91f472acb6f331d/libcc1%2Flibcc1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c9604c2c04587094207b3dc91f472acb6f331d/libcc1%2Flibcc1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcc1.cc?ref=30c9604c2c04587094207b3dc91f472acb6f331d", "patch": "@@ -49,15 +49,14 @@ class libcc1_connection;\n struct libcc1 : public gcc_c_context\n {\n   libcc1 (const gcc_base_vtable *, const gcc_c_fe_vtable *);\n-  ~libcc1 ();\n \n   // A convenience function to print something.\n   void print (const char *str)\n   {\n     this->print_function (this->print_datum, str);\n   }\n \n-  libcc1_connection *connection;\n+  std::unique_ptr<libcc1_connection> connection;\n \n   gcc_c_oracle_function *binding_oracle;\n   gcc_c_symbol_address_function *address_oracle;\n@@ -85,7 +84,9 @@ struct libcc1 : public gcc_c_context\n     virtual ~compiler ()\n     {\n     }\n-  } *compilerp;\n+  };\n+\n+  std::unique_ptr<compiler> compilerp;\n \n   /* Compiler to set by set_triplet_regexp.  */\n   class compiler_triplet_regexp : public compiler\n@@ -142,8 +143,7 @@ class libcc1_connection : public cc1_plugin::connection\n \n libcc1::libcc1 (const gcc_base_vtable *v,\n \t\tconst gcc_c_fe_vtable *cv)\n-  : connection (NULL),\n-    binding_oracle (NULL),\n+  : binding_oracle (NULL),\n     address_oracle (NULL),\n     oracle_datum (NULL),\n     print_function (NULL),\n@@ -157,12 +157,6 @@ libcc1::libcc1 (const gcc_base_vtable *v,\n   c_ops = cv;\n }\n \n-libcc1::~libcc1 ()\n-{\n-  delete connection;\n-  delete compilerp;\n-}\n-\n \f\n \n // Enclose these functions in an anonymous namespace because they\n@@ -220,7 +214,7 @@ R rpc (struct gcc_c_context *s, Arg... rest)\n   libcc1 *self = (libcc1 *) s;\n   R result;\n \n-  if (!cc1_plugin::call (self->connection, NAME, &result, rest...))\n+  if (!cc1_plugin::call (self->connection.get (), NAME, &result, rest...))\n     return 0;\n   return result;\n }\n@@ -380,8 +374,8 @@ libcc1_set_triplet_regexp (struct gcc_base_context *s,\n {\n   libcc1 *self = (libcc1 *) s;\n \n-  delete self->compilerp;\n-  self->compilerp = new libcc1::compiler_triplet_regexp (self, triplet_regexp);\n+  self->compilerp.reset (new libcc1::compiler_triplet_regexp (self,\n+\t\t\t\t\t\t\t      triplet_regexp));\n   return NULL;\n }\n \n@@ -391,9 +385,8 @@ libcc1_set_driver_filename (struct gcc_base_context *s,\n {\n   libcc1 *self = (libcc1 *) s;\n \n-  delete self->compilerp;\n-  self->compilerp = new libcc1::compiler_driver_filename (self,\n-\t\t\t\t\t\t\t  driver_filename);\n+  self->compilerp.reset (new libcc1::compiler_driver_filename (self,\n+\t\t\t\t\t\t\t       driver_filename));\n   return NULL;\n }\n \n@@ -464,7 +457,8 @@ fork_exec (libcc1 *self, char **argv, int spair_fds[2], int stderr_fds[2])\n \n       cc1_plugin::status result = cc1_plugin::FAIL;\n       if (self->connection->send ('H')\n-\t  && ::cc1_plugin::marshall (self->connection, GCC_C_FE_VERSION_1))\n+\t  && ::cc1_plugin::marshall (self->connection.get (),\n+\t\t\t\t     GCC_C_FE_VERSION_1))\n \tresult = self->connection->wait_for_query ();\n \n       close (spair_fds[0]);\n@@ -527,7 +521,7 @@ libcc1_compile (struct gcc_base_context *s,\n   if (self->verbose)\n     self->args.push_back (\"-v\");\n \n-  self->connection = new libcc1_connection (fds[0], stderr_fds[0], self);\n+  self->connection.reset (new libcc1_connection (fds[0], stderr_fds[0], self));\n \n   cc1_plugin::callback_ftype *fun\n     = cc1_plugin::callback<int,"}, {"sha": "4bd8c6b00b657de45d4bb25551c3e19ee24e7e02", "filename": "libcc1/libcp1.cc", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c9604c2c04587094207b3dc91f472acb6f331d/libcc1%2Flibcp1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c9604c2c04587094207b3dc91f472acb6f331d/libcc1%2Flibcp1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1.cc?ref=30c9604c2c04587094207b3dc91f472acb6f331d", "patch": "@@ -48,15 +48,14 @@ class libcp1_connection;\n struct libcp1 : public gcc_cp_context\n {\n   libcp1 (const gcc_base_vtable *, const gcc_cp_fe_vtable *);\n-  ~libcp1 ();\n \n   // A convenience function to print something.\n   void print (const char *str)\n   {\n     this->print_function (this->print_datum, str);\n   }\n \n-  libcp1_connection *connection;\n+  std::unique_ptr<libcp1_connection> connection;\n \n   gcc_cp_oracle_function *binding_oracle;\n   gcc_cp_symbol_address_function *address_oracle;\n@@ -86,7 +85,9 @@ struct libcp1 : public gcc_cp_context\n     virtual ~compiler ()\n     {\n     }\n-  } *compilerp;\n+  };\n+\n+  std::unique_ptr<compiler> compilerp;\n \n   /* Compiler to set by set_triplet_regexp.  */\n   class compiler_triplet_regexp : public compiler\n@@ -143,8 +144,7 @@ class libcp1_connection : public cc1_plugin::connection\n \n libcp1::libcp1 (const gcc_base_vtable *v,\n \t\t  const gcc_cp_fe_vtable *cv)\n-  : connection (NULL),\n-    binding_oracle (NULL),\n+  : binding_oracle (NULL),\n     address_oracle (NULL),\n     oracle_datum (NULL),\n     print_function (NULL),\n@@ -158,12 +158,6 @@ libcp1::libcp1 (const gcc_base_vtable *v,\n   cp_ops = cv;\n }\n \n-libcp1::~libcp1 ()\n-{\n-  delete connection;\n-  delete compilerp;\n-}\n-\n \f\n \n // Enclose these functions in an anonymous namespace because they\n@@ -243,7 +237,7 @@ R rpc (struct gcc_cp_context *s, Arg... rest)\n   libcp1 *self = (libcp1 *) s;\n   R result;\n \n-  if (!cc1_plugin::call (self->connection, NAME, &result, rest...))\n+  if (!cc1_plugin::call (self->connection.get (), NAME, &result, rest...))\n     return 0;\n   return result;\n }\n@@ -403,8 +397,8 @@ libcp1_set_triplet_regexp (struct gcc_base_context *s,\n {\n   libcp1 *self = (libcp1 *) s;\n \n-  delete self->compilerp;\n-  self->compilerp = new libcp1::compiler_triplet_regexp (self, triplet_regexp);\n+  self->compilerp.reset (new libcp1::compiler_triplet_regexp (self,\n+\t\t\t\t\t\t\t      triplet_regexp));\n   return NULL;\n }\n \n@@ -414,9 +408,8 @@ libcp1_set_driver_filename (struct gcc_base_context *s,\n {\n   libcp1 *self = (libcp1 *) s;\n \n-  delete self->compilerp;\n-  self->compilerp = new libcp1::compiler_driver_filename (self,\n-\t\t\t\t\t\t\t  driver_filename);\n+  self->compilerp.reset (new libcp1::compiler_driver_filename (self,\n+\t\t\t\t\t\t\t       driver_filename));\n   return NULL;\n }\n \n@@ -487,7 +480,8 @@ fork_exec (libcp1 *self, char **argv, int spair_fds[2], int stderr_fds[2])\n \n       cc1_plugin::status result = cc1_plugin::FAIL;\n       if (self->connection->send ('H')\n-\t  && ::cc1_plugin::marshall (self->connection, GCC_CP_FE_VERSION_0))\n+\t  && ::cc1_plugin::marshall (self->connection.get (),\n+\t\t\t\t     GCC_CP_FE_VERSION_0))\n \tresult = self->connection->wait_for_query ();\n \n       close (spair_fds[0]);\n@@ -550,7 +544,7 @@ libcp1_compile (struct gcc_base_context *s,\n   if (self->verbose)\n     self->args.push_back (\"-v\");\n \n-  self->connection = new libcp1_connection (fds[0], stderr_fds[0], self);\n+  self->connection.reset (new libcp1_connection (fds[0], stderr_fds[0], self));\n \n   cc1_plugin::callback_ftype *fun\n     = cc1_plugin::callback<int,"}]}