{"sha": "bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwMmY4ZDNmNzQxNzNmYTQ2Zjc0OTM0ZWJjYzFmYzM1MDFiOTRkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-11-20T09:43:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-11-20T09:43:20Z"}, "message": "combine.c (force_to_mode): Only replace with (not Y) if all bits in fuller_mask (not just mask) are set in C.\n\n\t* combine.c (force_to_mode): Only replace with (not Y) if all bits in fuller_mask\n\t(not just mask) are set in C.\n\n\t* gcc.c-torture/execute/20021118-3.c: New test.\n\nFrom-SVN: r59295", "tree": {"sha": "1e060a427d4c2565937c168544fb2f897a55521f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e060a427d4c2565937c168544fb2f897a55521f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13b42735b6bfac31dfb14246e995f68b9c16e08f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b42735b6bfac31dfb14246e995f68b9c16e08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b42735b6bfac31dfb14246e995f68b9c16e08f"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "52386836e024093037bfc63d607ad9324e0ab7a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "patch": "@@ -1,3 +1,8 @@\n+2002-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* combine.c (force_to_mode): Only replace with (not Y) if all bits in fuller_mask\n+\t(not just mask) are set in C.\n+\n 2002-11-19  Andreas Jaeger  <aj@suse.de>\n \n \t* loop.c (record_giv): Initialize not_replaceable."}, {"sha": "a0214d195674a4f217b5e06e1e80dc4ccd80a092", "filename": "gcc/combine.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "patch": "@@ -6978,10 +6978,10 @@ force_to_mode (x, mode, mask, reg, just_select)\n \t  return force_to_mode (x, mode, mask, reg, next_select);\n \t}\n \n-      /* Similarly, if C contains every bit in the mask, then we may\n+      /* Similarly, if C contains every bit in the fuller_mask, then we may\n \t replace with (not Y).  */\n       if (GET_CODE (XEXP (x, 0)) == CONST_INT\n-\t  && ((INTVAL (XEXP (x, 0)) | (HOST_WIDE_INT) mask)\n+\t  && ((INTVAL (XEXP (x, 0)) | (HOST_WIDE_INT) fuller_mask)\n \t      == INTVAL (XEXP (x, 0))))\n \t{\n \t  x = simplify_gen_unary (NOT, GET_MODE (x),"}, {"sha": "a09e7c7235f825edf2dd251ac9458166e78bdfbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "patch": "@@ -1,3 +1,7 @@\n+2002-11-20  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20021118-3.c: New test.\n+\n 2002-11-19 \ufffdEric Botcazou \ufffd<ebotcazou@libertysurf.fr>\n \n \t* gcc.c-torture/compile/20021119-1.c: New test."}, {"sha": "8ec01caa5dda2ee21ab47e62c5aa1fddbad40209", "filename": "gcc/testsuite/gcc.c-torture/execute/20021118-3.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc02f8d3f74173fa46f74934ebcc1fc3501b94da/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20021118-3.c?ref=bc02f8d3f74173fa46f74934ebcc1fc3501b94da", "patch": "@@ -0,0 +1,18 @@\n+extern void abort (void);\n+extern void exit (int);\n+\n+int\n+foo (int x)\n+{\n+  if (x == -2 || -x - 100 >= 0)\n+    abort ();\n+  return 0;\n+}\n+           \n+int\n+main ()\n+{\n+  foo (-3);\n+  foo (-99);\n+  exit (0);\n+}"}]}