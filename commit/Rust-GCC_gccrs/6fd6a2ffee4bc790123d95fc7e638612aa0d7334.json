{"sha": "6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZkNmEyZmZlZTRiYzc5MDEyM2Q5NWZjN2U2Mzg2MTJhYTBkNzMzNA==", "commit": {"author": {"name": "Qing Zhao", "email": "qing.zhao@oracle.com", "date": "2018-11-29T16:06:03Z"}, "committer": {"name": "Qing Zhao", "email": "qinzhao@gcc.gnu.org", "date": "2018-11-29T16:06:03Z"}, "message": "Add a new option -flive-patching={inline-only-static|inline-clone}\nto support live patching in GCC.\n\n2018-11-29  qing zhao  <qing.zhao@oracle.com>\n\ngcc/ChangeLog:\n\n\t* cif-code.def (EXTERN_LIVE_ONLY_STATIC): New CIF code.\n\t* common.opt: Add -flive-patching flag.\n\t* doc/invoke.texi: Document -flive-patching.\n\t* flag-types.h (enum live_patching_level): New enum.\n\t* ipa-inline.c (can_inline_edge_p): Disable external functions from\n\tinlining when flag_live_patching is LIVE_PATCHING_INLINE_ONLY_STATIC.\n\t* opts.c (control_options_for_live_patching): New function.\n\t(finish_options): Make flag_live_patching incompatible with flag_lto.\n\tControl IPA optimizations based on different levels of \n\tflag_live_patching.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/live-patching-1.c: New test.\n\t* gcc.dg/live-patching-2.c: New test.\n\t* gcc.dg/live-patching-3.c: New test.\n\t* gcc.dg/tree-ssa/writeonly-3.c: New test.\n\t* gcc.target/i386/ipa-stack-alignment-2.c: New test.\n\nFrom-SVN: r266627", "tree": {"sha": "f2ee949591c3fb81f413986103f972a776d98c52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2ee949591c3fb81f413986103f972a776d98c52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/comments", "author": {"login": "qingzhao69", "id": 89154636, "node_id": "MDQ6VXNlcjg5MTU0NjM2", "avatar_url": "https://avatars.githubusercontent.com/u/89154636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qingzhao69", "html_url": "https://github.com/qingzhao69", "followers_url": "https://api.github.com/users/qingzhao69/followers", "following_url": "https://api.github.com/users/qingzhao69/following{/other_user}", "gists_url": "https://api.github.com/users/qingzhao69/gists{/gist_id}", "starred_url": "https://api.github.com/users/qingzhao69/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qingzhao69/subscriptions", "organizations_url": "https://api.github.com/users/qingzhao69/orgs", "repos_url": "https://api.github.com/users/qingzhao69/repos", "events_url": "https://api.github.com/users/qingzhao69/events{/privacy}", "received_events_url": "https://api.github.com/users/qingzhao69/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4aff6d17446ade686d1746716906e8b32499a619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aff6d17446ade686d1746716906e8b32499a619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aff6d17446ade686d1746716906e8b32499a619"}], "stats": {"total": 346, "additions": 346, "deletions": 0}, "files": [{"sha": "49b78305a50f86de1ed65456c0b9e01a14462482", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -1,3 +1,16 @@\n+2018-11-29  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* cif-code.def (EXTERN_LIVE_ONLY_STATIC): New CIF code.\n+\t* common.opt: Add -flive-patching flag.\n+\t* doc/invoke.texi: Document -flive-patching.\n+\t* flag-types.h (enum live_patching_level): New enum.\n+\t* ipa-inline.c (can_inline_edge_p): Disable external functions from\n+\tinlining when flag_live_patching is LIVE_PATCHING_INLINE_ONLY_STATIC.\n+\t* opts.c (control_options_for_live_patching): New function.\n+\t(finish_options): Make flag_live_patching incompatible with flag_lto.\n+\tControl IPA optimizations based on different levels of \n+\tflag_live_patching.\n+\n 2018-11-29  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* match.pd (sinh (atanh (x))): New simplification rules."}, {"sha": "ac3f73c0094757eee0fd0b6cb178b93e1c1bf70e", "filename": "gcc/cif-code.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fcif-code.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fcif-code.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcif-code.def?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -132,6 +132,12 @@ DEFCIFCODE(USES_COMDAT_LOCAL, CIF_FINAL_ERROR,\n DEFCIFCODE(ATTRIBUTE_MISMATCH, CIF_FINAL_ERROR,\n \t   N_(\"function attribute mismatch\"))\n \n+/* We can't inline because the user requests only static functions\n+   but the function has external linkage for live patching purpose.  */\n+DEFCIFCODE(EXTERN_LIVE_ONLY_STATIC, CIF_FINAL_ERROR,\n+\t   N_(\"function has external linkage when the user requests only\"\n+\t      \" inlining static for live patching\"))\n+\n /* We proved that the call is unreachable.  */\n DEFCIFCODE(UNREACHABLE, CIF_FINAL_ERROR,\n \t   N_(\"unreachable\"))"}, {"sha": "08bffdf2c2d6bc51ab3118c5035ea28f3b5708bb", "filename": "gcc/common.opt", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -2181,6 +2181,24 @@ starts and when the destructor finishes.\n flifetime-dse=\n Common Joined RejectNegative UInteger Var(flag_lifetime_dse) Optimization IntegerRange(0, 2)\n \n+flive-patching\n+Common RejectNegative Alias(flive-patching=,inline-clone) Optimization\n+\n+flive-patching=\n+Common Report Joined RejectNegative Enum(live_patching_level) Var(flag_live_patching) Init(LIVE_PATCHING_NONE) Optimization\n+-flive-patching=[inline-only-static|inline-clone]\tControl IPA\n+optimizations to provide a safe compilation for live-patching.  At the same\n+time, provides multiple-level control on the enabled IPA optimizations.\n+\n+Enum\n+Name(live_patching_level) Type(enum live_patching_level) UnknownError(unknown Live-Patching Level %qs)\n+\n+EnumValue\n+Enum(live_patching_level) String(inline-only-static) Value(LIVE_PATCHING_INLINE_ONLY_STATIC)\n+\n+EnumValue\n+Enum(live_patching_level) String(inline-clone) Value(LIVE_PATCHING_INLINE_CLONE)\n+\n flive-range-shrinkage\n Common Report Var(flag_live_range_shrinkage) Init(0) Optimization\n Relief of register pressure through live range shrinkage."}, {"sha": "6a694a695a1d0b962e7f06952cfed875948f2e98", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -417,6 +417,7 @@ Objective-C and Objective-C++ Dialects}.\n -fipa-bit-cp  -fipa-vrp  -fipa-pta  -fipa-profile  -fipa-pure-const @gol\n -fipa-reference  -fipa-reference-addressable @gol\n -fipa-stack-alignment  -fipa-icf  -fira-algorithm=@var{algorithm} @gol\n+-flive-patching=@var{level} @gol\n -fira-region=@var{region}  -fira-hoist-pressure @gol\n -fira-loop-pressure  -fno-ira-share-save-slots @gol\n -fno-ira-share-spill-slots @gol\n@@ -9291,6 +9292,65 @@ equivalences that are found only by GCC and equivalences found only by Gold.\n \n This flag is enabled by default at @option{-O2} and @option{-Os}.\n \n+@item -flive-patching=@var{level}\n+@opindex flive-patching\n+Control GCC's optimizations to provide a safe compilation for live-patching.\n+\n+If the compiler's optimization uses a function's body or information extracted\n+from its body to optimize/change another function, the latter is called an\n+impacted function of the former.  If a function is patched, its impacted\n+functions should be patched too.\n+\n+The impacted functions are decided by the compiler's interprocedural\n+optimizations.  For example, inlining a function into its caller, cloning\n+a function and changing its caller to call this new clone, or extracting\n+a function's pureness/constness information to optimize its direct or\n+indirect callers, etc.\n+\n+Usually, the more IPA optimizations enabled, the larger the number of\n+impacted functions for each function.  In order to control the number of\n+impacted functions and computed the list of impacted function easily,\n+we provide control to partially enable IPA optimizations on two different\n+levels.\n+\n+The @var{level} argument should be one of the following:\n+\n+@table @samp\n+\n+@item inline-clone\n+\n+Only enable inlining and cloning optimizations, which includes inlining,\n+cloning, interprocedural scalar replacement of aggregates and partial inlining.\n+As a result, when patching a function, all its callers and its clones'\n+callers need to be patched as well.\n+\n+@option{-flive-patching=inline-clone} disables the following optimization flags:\n+@gccoptlist{-fwhole-program  -fipa-pta  -fipa-reference  -fipa-ra @gol\n+-fipa-icf  -fipa-icf-functions  -fipa-icf-variables @gol\n+-fipa-bit-cp  -fipa-vrp  -fipa-pure-const  -fipa-reference-addressable @gol\n+-fipa-stack-alignment}\n+\n+@item inline-only-static\n+\n+Only enable inlining of static functions.\n+As a result, when patching a static function, all its callers need to be\n+patches as well.\n+\n+In addition to all the flags that -flive-patching=inline-clone disables,\n+@option{-flive-patching=inline-only-static} disables the following additional\n+optimization flags:\n+@gccoptlist{-fipa-cp-clone  -fipa-sra  -fpartial-inlining  -fipa-cp}\n+\n+@end table\n+\n+When -flive-patching specified without any value, the default value\n+is \"inline-clone\".\n+\n+This flag is disabled by default.\n+\n+Note that -flive-patching is not supported with link-time optimizer.\n+(@option{-flto}).\n+\n @item -fisolate-erroneous-paths-dereference\n @opindex fisolate-erroneous-paths-dereference\n Detect paths that trigger erroneous or undefined behavior due to"}, {"sha": "2bbca6531b30f8d40601dfe54a7a6467740e5cfc", "filename": "gcc/flag-types.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -123,6 +123,14 @@ enum stack_reuse_level\n   SR_ALL\n };\n \n+/* The live patching level.  */\n+enum live_patching_level\n+{\n+  LIVE_PATCHING_NONE = 0,\n+  LIVE_PATCHING_INLINE_ONLY_STATIC,\n+  LIVE_PATCHING_INLINE_CLONE\n+};\n+\n /* The algorithm used for basic block reordering.  */\n enum reorder_blocks_algorithm\n {"}, {"sha": "bd6ab22c5a85030c139650fa31306ed765db9535", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -379,6 +379,12 @@ can_inline_edge_p (struct cgraph_edge *e, bool report,\n       e->inline_failed = CIF_ATTRIBUTE_MISMATCH;\n       inlinable = false;\n     }\n+  else if (callee->externally_visible\n+\t   && flag_live_patching == LIVE_PATCHING_INLINE_ONLY_STATIC)\n+    {\n+      e->inline_failed = CIF_EXTERN_LIVE_ONLY_STATIC;\n+      inlinable = false;\n+    }\n   if (!inlinable && report)\n     report_inline_failed_reason (e);\n   return inlinable;"}, {"sha": "c16b5a448559cde17e83817c15cfe957d29d86bf", "filename": "gcc/opts.c", "status": "modified", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -702,6 +702,148 @@ default_options_optimization (struct gcc_options *opts,\n \t\t\t lang_mask, handlers, loc, dc);\n }\n \n+/* Control IPA optimizations based on different live patching LEVEL.  */\n+static void\n+control_options_for_live_patching (struct gcc_options *opts,\n+\t\t\t\t   struct gcc_options *opts_set,\n+\t\t\t\t   enum live_patching_level level,\n+\t\t\t\t   location_t loc)\n+{\n+  gcc_assert (level > LIVE_PATCHING_NONE);\n+\n+  switch (level)\n+    {\n+    case LIVE_PATCHING_INLINE_ONLY_STATIC:\n+      if (opts_set->x_flag_ipa_cp_clone && opts->x_flag_ipa_cp_clone)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-cp-clone%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static%>\");\n+      else\n+\topts->x_flag_ipa_cp_clone = 0;\n+\n+      if (opts_set->x_flag_ipa_sra && opts->x_flag_ipa_sra)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-sra%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static%>\");\n+      else\n+\topts->x_flag_ipa_sra = 0;\n+\n+      if (opts_set->x_flag_partial_inlining && opts->x_flag_partial_inlining)\n+\terror_at (loc,\n+\t\t  \"%<-fpartial-inlining%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static%>\");\n+      else\n+\topts->x_flag_partial_inlining = 0;\n+\n+      if (opts_set->x_flag_ipa_cp && opts->x_flag_ipa_cp)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-cp%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static%>\");\n+      else\n+\topts->x_flag_ipa_cp = 0;\n+\n+      /* FALLTHROUGH.  */\n+    case LIVE_PATCHING_INLINE_CLONE:\n+      /* live patching should disable whole-program optimization.  */\n+      if (opts_set->x_flag_whole_program && opts->x_flag_whole_program)\n+\terror_at (loc,\n+\t\t  \"%<-fwhole-program%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_whole_program = 0;\n+\n+      /* visibility change should be excluded by !flag_whole_program\n+\t && !in_lto_p && !flag_ipa_cp_clone && !flag_ipa_sra\n+\t && !flag_partial_inlining.  */\n+\n+      if (opts_set->x_flag_ipa_pta && opts->x_flag_ipa_pta)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-pta%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_pta = 0;\n+\n+      if (opts_set->x_flag_ipa_reference && opts->x_flag_ipa_reference)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-reference%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_reference = 0;\n+\n+      if (opts_set->x_flag_ipa_ra && opts->x_flag_ipa_ra)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-ra%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_ra = 0;\n+\n+      if (opts_set->x_flag_ipa_icf && opts->x_flag_ipa_icf)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-icf%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_icf = 0;\n+\n+      if (opts_set->x_flag_ipa_icf_functions && opts->x_flag_ipa_icf_functions)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-icf-functions%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_icf_functions = 0;\n+\n+      if (opts_set->x_flag_ipa_icf_variables && opts->x_flag_ipa_icf_variables)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-icf-variables%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_icf_variables = 0;\n+\n+      if (opts_set->x_flag_ipa_bit_cp && opts->x_flag_ipa_bit_cp)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-bit-cp%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_bit_cp = 0;\n+\n+      if (opts_set->x_flag_ipa_vrp && opts->x_flag_ipa_vrp)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-vrp%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_vrp = 0;\n+\n+      if (opts_set->x_flag_ipa_pure_const && opts->x_flag_ipa_pure_const)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-pure-const%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_pure_const = 0;\n+\n+      /* FIXME: disable unreachable code removal.  */\n+\n+      /* discovery of functions/variables with no address taken.  */\n+      if (opts_set->x_flag_ipa_reference_addressable\n+\t  && opts->x_flag_ipa_reference_addressable)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-reference-addressable%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_reference_addressable = 0;\n+\n+      /* ipa stack alignment propagation.  */\n+      if (opts_set->x_flag_ipa_stack_alignment\n+\t  && opts->x_flag_ipa_stack_alignment)\n+\terror_at (loc,\n+\t\t  \"%<-fipa-stack-alignment%> is incompatible with \"\n+\t\t  \"%<-flive-patching=inline-only-static|inline-clone%>\");\n+      else\n+\topts->x_flag_ipa_stack_alignment = 0;\n+      break;\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n /* After all options at LOC have been read into OPTS and OPTS_SET,\n    finalize settings of those options and diagnose incompatible\n    combinations.  */\n@@ -1051,6 +1193,18 @@ finish_options (struct gcc_options *opts, struct gcc_options *opts_set,\n   if ((opts->x_flag_sanitize & SANITIZE_KERNEL_ADDRESS) && opts->x_flag_tm)\n     sorry (\"transactional memory is not supported with \"\n \t   \"%<-fsanitize=kernel-address%>\");\n+\n+  /* Currently live patching is not support for LTO.  */\n+  if (opts->x_flag_live_patching && opts->x_flag_lto)\n+    sorry (\"live patching is not supported with LTO\");\n+\n+  /* Control IPA optimizations based on different -flive-patching level.  */\n+  if (opts->x_flag_live_patching)\n+    {\n+      control_options_for_live_patching (opts, opts_set,\n+\t\t\t\t\t opts->x_flag_live_patching,\n+\t\t\t\t\t loc);\n+    }\n }\n \n #define LEFT_COLUMN\t27"}, {"sha": "5dcc0b4f29feb771773d6f41babdbe0f134e2776", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -1,3 +1,11 @@\n+2018-11-29  qing zhao  <qing.zhao@oracle.com>\n+\n+\t* gcc.dg/live-patching-1.c: New test.\n+\t* gcc.dg/live-patching-2.c: New test.\n+\t* gcc.dg/live-patching-3.c: New test.\n+\t* gcc.dg/tree-ssa/writeonly-3.c: New test.\n+\t* gcc.target/i386/ipa-stack-alignment-2.c: New test.\n+\n 2018-11-29  Giuliano Belinassi  <giuliano.belinassi@usp.br>\n \n \t* gcc.dg/sinhatanh-1.c: New test."}, {"sha": "6a1ea38c4916489d5805615417a6d29b32b09880", "filename": "gcc/testsuite/gcc.dg/live-patching-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-1.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flive-patching=inline-only-static -fdump-ipa-inline\" } */\n+\n+extern int sum, n, m;\n+\n+int foo (int a)\n+{\n+  return a + n;\n+}\n+\n+static int bar (int b)\n+{\n+  return b * m;\n+}\n+\n+int main()\n+{\n+  sum = foo (m) + bar (n); \n+  return 0;\n+}\n+\n+/* { dg-final { scan-ipa-dump \"foo/0 function has external linkage when the user requests only inlining static for live patching\"  \"inline\" } } */"}, {"sha": "b418aaf2245f6aa55c3af5a463ac6c14bd2504eb", "filename": "gcc/testsuite/gcc.dg/live-patching-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-2.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -flive-patching -flto\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-message \"sorry, unimplemented: live patching is not supported with LTO\" \"-flive-patching and -flto together\" { target *-*-* } 0 } */"}, {"sha": "b86f3c6e08a3cb470a84a0519b57b10fab763c3a", "filename": "gcc/testsuite/gcc.dg/live-patching-3.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flive-patching-3.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -flive-patching -fwhole-program\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-message \"'-fwhole-program' is incompatible with '-flive-patching=inline-only-static|inline-clone\u2019\" \"\" {target \"*-*-*\"} 0 } */"}, {"sha": "4be4cf7faf5c853763a26761a19eb8819617f628", "filename": "gcc/testsuite/gcc.dg/tree-ssa/writeonly-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fwriteonly-3.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -fdump-tree-optimized -flive-patching\" } */\n+static struct a {int magic1,b;} a;\n+volatile int magic2;\n+static struct b {int a,b,c,d,e,f;} magic3;\n+\n+struct b foo();\n+\n+void\n+t()\n+{\n+ a.magic1 = 1;\n+ magic2 = 1;\n+ magic3 = foo();\n+}\n+/* { dg-final { scan-tree-dump \"magic1\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"magic3\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"magic2\" \"optimized\"} } */\n+/* { dg-final { scan-tree-dump \"foo\" \"optimized\"} } */\n+ "}, {"sha": "8ba70000b7e90ac7d6694329c78de32495a33591", "filename": "gcc/testsuite/gcc.target/i386/ipa-stack-alignment-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fipa-stack-alignment-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fd6a2ffee4bc790123d95fc7e638612aa0d7334/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fipa-stack-alignment-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fipa-stack-alignment-2.c?ref=6fd6a2ffee4bc790123d95fc7e638612aa0d7334", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-flive-patching -O\" } */\n+\n+typedef struct {\n+  long a;\n+  long b[];\n+} c;\n+\n+c *d;\n+void e() { d->b[0] = 5; }\n+void f() { e(); }\n+\n+/* { dg-final { scan-assembler \"sub.*%.sp\" } } */"}]}