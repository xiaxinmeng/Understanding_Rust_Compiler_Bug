{"sha": "338818c7ef0ab479acea6382f08332e2a8b9d1a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzM4ODE4YzdlZjBhYjQ3OWFjZWE2MzgyZjA4MzMyZTJhOGI5ZDFhNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T20:17:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-03-03T20:17:10Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r382", "tree": {"sha": "30dd8dce95ed72eaa451a316667d31a79659f9f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/30dd8dce95ed72eaa451a316667d31a79659f9f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/338818c7ef0ab479acea6382f08332e2a8b9d1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338818c7ef0ab479acea6382f08332e2a8b9d1a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/338818c7ef0ab479acea6382f08332e2a8b9d1a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/338818c7ef0ab479acea6382f08332e2a8b9d1a6/comments", "author": null, "committer": null, "parents": [{"sha": "ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab408a8674e078f1d6abfd902630ac8cb3d0fc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab408a8674e078f1d6abfd902630ac8cb3d0fc05"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "20ffc410bc7f707c3067311d5d863dbcf9c4b953", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338818c7ef0ab479acea6382f08332e2a8b9d1a6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338818c7ef0ab479acea6382f08332e2a8b9d1a6/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=338818c7ef0ab479acea6382f08332e2a8b9d1a6", "patch": "@@ -92,30 +92,30 @@ output_function_prologue (stream, size)\n       if (fsize < 0x8000 && !TARGET_68040)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%0I%d\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%0I%d\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else if (TARGET_68020)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.l %s,%I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.l %s,%0I%d\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%I%d\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%0I%d\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tlink.w %s,%I0\\n\\tadd.l %I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink.w %s,%I0\\n\\tadd.l %0I%d,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #else\n-\t  asm_fprintf (stream, \"\\tlink %s,%I0\\n\\taddl %I%d,%Rsp\\n\",\n+\t  asm_fprintf (stream, \"\\tlink %s,%I0\\n\\taddl %0I%d,%Rsp\\n\",\n \t\t       reg_names[FRAME_POINTER_REGNUM], -fsize);\n #endif\n \t}\n@@ -126,17 +126,17 @@ output_function_prologue (stream, size)\n       if (fsize + 4 < 0x8000)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.w %I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", - (fsize + 4));\n #else\n-\t  asm_fprintf (stream, \"\\taddw %I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", - (fsize + 4));\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", - (fsize + 4));\n #else\n-\t  asm_fprintf (stream, \"\\taddl %I%d,%Rsp\\n\", - (fsize + 4));\n+\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", - (fsize + 4));\n #endif\n \t}\n     }\n@@ -303,9 +303,9 @@ output_function_epilogue (stream, size)\n       && (mask || fmask || fpoffset))\n     {\n #ifdef MOTOROLA\n-      asm_fprintf (stream, \"\\tmov.l %I%d,%Ra0\\n\", -fsize);\n+      asm_fprintf (stream, \"\\tmov.l %0I%d,%Ra0\\n\", -fsize);\n #else\n-      asm_fprintf (stream, \"\\tmovel %I%d,%Ra0\\n\", -fsize);\n+      asm_fprintf (stream, \"\\tmovel %0I%d,%Ra0\\n\", -fsize);\n #endif\n       fsize = 0, big = 1;\n     }\n@@ -485,22 +485,22 @@ output_function_epilogue (stream, size)\n       if (fsize + 4 < 0x8000)\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.w %I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\tadd.w %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t  asm_fprintf (stream, \"\\taddw %I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\taddw %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t}\n       else\n \t{\n #ifdef MOTOROLA\n-\t  asm_fprintf (stream, \"\\tadd.l %I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\tadd.l %0I%d,%Rsp\\n\", fsize + 4);\n #else\n-\t  asm_fprintf (stream, \"\\taddl %I%d,%Rsp\\n\", fsize + 4);\n+\t  asm_fprintf (stream, \"\\taddl %0I%d,%Rsp\\n\", fsize + 4);\n #endif\n \t}\n     }\n   if (current_function_pops_args)\n-    asm_fprintf (stream, \"\\trtd %I%d\\n\", current_function_pops_args);\n+    asm_fprintf (stream, \"\\trtd %0I%d\\n\", current_function_pops_args);\n   else\n     fprintf (stream, \"\\trts\\n\");\n }"}, {"sha": "52dc7539126caa391302a6413d50abb44b0c4c01", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/338818c7ef0ab479acea6382f08332e2a8b9d1a6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/338818c7ef0ab479acea6382f08332e2a8b9d1a6/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=338818c7ef0ab479acea6382f08332e2a8b9d1a6", "patch": "@@ -970,8 +970,8 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\\\n   register char *a0 asm (\"%a0\");\t\t\t\t\\\n   asm (\"___trampoline:\");\t\t\t\t\t\\\n-  asm volatile (\"mov%.l %0,%@\" : : \"m\" (a0[22]));\t\t\\\n-  asm volatile (\"mov%.l %1,%0\" : \"=a\" (a0) : \"m\" (a0[18]));\t\\\n+  asm volatile (\"move%.l %0,%@\" : : \"m\" (a0[22]));\t\t\\\n+  asm volatile (\"move%.l %1,%0\" : \"=a\" (a0) : \"m\" (a0[18]));\t\\\n   asm (\"rts\":);\t\t\t\t\t\t\t\\\n }\n \f\n@@ -1472,13 +1472,13 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n    `assemble_name' uses this.  */\n \n #define ASM_OUTPUT_LABELREF(FILE,NAME)\t\\\n-  asm_fprintf (FILE, \"%U%s\", NAME)\n+  asm_fprintf (FILE, \"%0U%s\", NAME)\n \n /* This is how to output an internal numbered label where\n    PREFIX is the class of label and NUM is the number within the class.  */\n \n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\\\n-  asm_fprintf (FILE, \"%L%s%d:\\n\", PREFIX, NUM)\n+  asm_fprintf (FILE, \"%0L%s%d:\\n\", PREFIX, NUM)\n \n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where"}]}