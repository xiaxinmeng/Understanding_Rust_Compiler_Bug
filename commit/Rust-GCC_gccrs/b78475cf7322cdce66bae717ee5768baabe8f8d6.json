{"sha": "b78475cf7322cdce66bae717ee5768baabe8f8d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc4NDc1Y2Y3MzIyY2RjZTY2YmFlNzE3ZWU1NzY4YmFhYmU4ZjhkNg==", "commit": {"author": {"name": "Yury Gribov", "email": "y.gribov@samsung.com", "date": "2014-08-11T06:06:29Z"}, "committer": {"name": "Yury Gribov", "email": "ygribov@gcc.gnu.org", "date": "2014-08-11T06:06:29Z"}, "message": "Added fnspec to internal functions.\n\n2014-08-11  Yury Gribov  <y.gribov@samsung.com>\n\ngcc/\n        * gimple.c (gimple_call_fnspec): Support internal functions.\n        (gimple_call_return_flags): Use const.\n        * Makefile.in (GTFILES): Add internal-fn.h to list of GC files.\n        * internal-fn.def: Add fnspec information.\n        * internal-fn.h (internal_fn_fnspec): New function.\n        (init_internal_fns): Declare new function.\n        * internal-fn.c (internal_fn_fnspec_array): New global variable.\n        (init_internal_fns): New function.\n        * tree-core.h: Update macro call.\n        * tree.c (build_common_builtin_nodes): Initialize internal fns.\n\nFrom-SVN: r213806", "tree": {"sha": "cc507b413e35529d1cebf6d68425ef2f41fa5366", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cc507b413e35529d1cebf6d68425ef2f41fa5366"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b78475cf7322cdce66bae717ee5768baabe8f8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78475cf7322cdce66bae717ee5768baabe8f8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b78475cf7322cdce66bae717ee5768baabe8f8d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b78475cf7322cdce66bae717ee5768baabe8f8d6/comments", "author": null, "committer": null, "parents": [{"sha": "f473c082d8c9ddbc0d310160f12fad3f11a229e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f473c082d8c9ddbc0d310160f12fad3f11a229e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f473c082d8c9ddbc0d310160f12fad3f11a229e0"}], "stats": {"total": 112, "additions": 82, "deletions": 30}, "files": [{"sha": "247d567dbca34de01fa2f0450a5d1c1fdc1a2db3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -1,3 +1,16 @@\n+2014-08-11  Yury Gribov  <y.gribov@samsung.com>\n+\n+\t* gimple.c (gimple_call_fnspec): Support internal functions.\n+\t(gimple_call_return_flags): Use const.\n+\t* Makefile.in (GTFILES): Add internal-fn.h to list of GC files.\n+\t* internal-fn.def: Add fnspec information.\n+\t* internal-fn.h (internal_fn_fnspec): New function.\n+\t(init_internal_fns): Declare new function.\n+\t* internal-fn.c (internal_fn_fnspec_array): New global variable.\n+\t(init_internal_fns): New function.\n+\t* tree-core.h: Update macro call.\n+\t* tree.c (build_common_builtin_nodes): Initialize internal fns.\n+\n 2014-08-10  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* lto-streamer.h (struct output_block::symbol): Change from"}, {"sha": "76ceca89f8b2c6a1d4011bc888e321428a2d9bba", "filename": "gcc/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -2296,7 +2296,9 @@ GTFILES = $(CPP_ID_DATA_H) $(srcdir)/input.h $(srcdir)/coretypes.h \\\n   $(srcdir)/vtable-verify.c \\\n   $(srcdir)/asan.c \\\n   $(srcdir)/ubsan.c \\\n-  $(srcdir)/tsan.c $(srcdir)/ipa-devirt.c \\\n+  $(srcdir)/tsan.c \\\n+  $(srcdir)/ipa-devirt.c \\\n+  $(srcdir)/internal-fn.h \\\n   @all_gtfiles@\n \n # Compute the list of GT header files from the corresponding C sources,"}, {"sha": "db7617418e58c57de711572c8ece80f99d15496c", "filename": "gcc/gimple.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -1342,11 +1342,14 @@ gimple_call_flags (const_gimple stmt)\n \n /* Return the \"fn spec\" string for call STMT.  */\n \n-static tree\n+static const_tree\n gimple_call_fnspec (const_gimple stmt)\n {\n   tree type, attr;\n \n+  if (gimple_call_internal_p (stmt))\n+    return internal_fn_fnspec (gimple_call_internal_fn (stmt));\n+\n   type = gimple_call_fntype (stmt);\n   if (!type)\n     return NULL_TREE;\n@@ -1363,7 +1366,7 @@ gimple_call_fnspec (const_gimple stmt)\n int\n gimple_call_arg_flags (const_gimple stmt, unsigned arg)\n {\n-  tree attr = gimple_call_fnspec (stmt);\n+  const_tree attr = gimple_call_fnspec (stmt);\n \n   if (!attr || 1 + arg >= (unsigned) TREE_STRING_LENGTH (attr))\n     return 0;\n@@ -1397,7 +1400,7 @@ gimple_call_arg_flags (const_gimple stmt, unsigned arg)\n int\n gimple_call_return_flags (const_gimple stmt)\n {\n-  tree attr;\n+  const_tree attr;\n \n   if (gimple_call_flags (stmt) & ECF_MALLOC)\n     return ERF_NOALIAS;"}, {"sha": "11213469088ec6a86fe41d96b1dae9cab7d03294", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -40,20 +40,34 @@ along with GCC; see the file COPYING3.  If not see\n \n /* The names of each internal function, indexed by function number.  */\n const char *const internal_fn_name_array[] = {\n-#define DEF_INTERNAL_FN(CODE, FLAGS) #CODE,\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) #CODE,\n #include \"internal-fn.def\"\n #undef DEF_INTERNAL_FN\n   \"<invalid-fn>\"\n };\n \n /* The ECF_* flags of each internal function, indexed by function number.  */\n const int internal_fn_flags_array[] = {\n-#define DEF_INTERNAL_FN(CODE, FLAGS) FLAGS,\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) FLAGS,\n #include \"internal-fn.def\"\n #undef DEF_INTERNAL_FN\n   0\n };\n \n+/* Fnspec of each internal function, indexed by function number.  */\n+const_tree internal_fn_fnspec_array[IFN_LAST + 1];\n+\n+void\n+init_internal_fns ()\n+{\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) \\\n+  if (FNSPEC) internal_fn_fnspec_array[IFN_##CODE] = \\\n+    build_string ((int) sizeof (FNSPEC) + 1, FNSPEC ? FNSPEC : \"\");\n+#include \"internal-fn.def\"\n+#undef DEF_INTERNAL_FN\n+  internal_fn_fnspec_array[IFN_LAST] = 0;\n+}\n+\n /* ARRAY_TYPE is an array of vector modes.  Return the associated insn\n    for load-lanes-style optab OPTAB.  The insn must exist.  */\n \n@@ -897,7 +911,7 @@ expand_BUILTIN_EXPECT (gimple stmt)\n \n    where STMT is the statement that performs the call. */\n static void (*const internal_fn_expanders[]) (gimple) = {\n-#define DEF_INTERNAL_FN(CODE, FLAGS) expand_##CODE,\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) expand_##CODE,\n #include \"internal-fn.def\"\n #undef DEF_INTERNAL_FN\n   0"}, {"sha": "9857542c7f1d0d44667b8b08b7eb6938dfed9192", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -28,29 +28,30 @@ along with GCC; see the file COPYING3.  If not see\n \n    Each entry in this file has the form:\n \n-     DEF_INTERNAL_FN (NAME, FLAGS)\n+     DEF_INTERNAL_FN (NAME, FLAGS, FNSPEC)\n \n-   where NAME is the name of the function and FLAGS is a set of\n-   ECF_* flags.  Each entry must have a corresponding expander\n-   of the form:\n+   where NAME is the name of the function, FLAGS is a set of\n+   ECF_* flags and FNSPEC is a string describing functions fnspec.\n+   \n+   Each entry must have a corresponding expander of the form:\n \n      void expand_NAME (gimple stmt)\n \n    where STMT is the statement that performs the call.  */\n \n-DEF_INTERNAL_FN (LOAD_LANES, ECF_CONST | ECF_LEAF)\n-DEF_INTERNAL_FN (STORE_LANES, ECF_CONST | ECF_LEAF)\n-DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (LOOP_VECTORIZED, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (MASK_LOAD, ECF_PURE | ECF_LEAF)\n-DEF_INTERNAL_FN (MASK_STORE, ECF_LEAF)\n-DEF_INTERNAL_FN (ANNOTATE,  ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (UBSAN_NULL, ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (UBSAN_BOUNDS, ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (UBSAN_CHECK_ADD, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (UBSAN_CHECK_SUB, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (UBSAN_CHECK_MUL, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n-DEF_INTERNAL_FN (ABNORMAL_DISPATCHER, ECF_NORETURN)\n-DEF_INTERNAL_FN (BUILTIN_EXPECT, ECF_CONST | ECF_LEAF | ECF_NOTHROW)\n+DEF_INTERNAL_FN (LOAD_LANES, ECF_CONST | ECF_LEAF, NULL)\n+DEF_INTERNAL_FN (STORE_LANES, ECF_CONST | ECF_LEAF, NULL)\n+DEF_INTERNAL_FN (GOMP_SIMD_LANE, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (GOMP_SIMD_VF, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (GOMP_SIMD_LAST_LANE, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (LOOP_VECTORIZED, ECF_NOVOPS | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (MASK_LOAD, ECF_PURE | ECF_LEAF, NULL)\n+DEF_INTERNAL_FN (MASK_STORE, ECF_LEAF, NULL)\n+DEF_INTERNAL_FN (ANNOTATE,  ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (UBSAN_NULL, ECF_LEAF | ECF_NOTHROW, \".W.\")\n+DEF_INTERNAL_FN (UBSAN_BOUNDS, ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (UBSAN_CHECK_ADD, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (UBSAN_CHECK_SUB, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (UBSAN_CHECK_MUL, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)\n+DEF_INTERNAL_FN (ABNORMAL_DISPATCHER, ECF_NORETURN, NULL)\n+DEF_INTERNAL_FN (BUILTIN_EXPECT, ECF_CONST | ECF_LEAF | ECF_NOTHROW, NULL)"}, {"sha": "14573aa767b3a52bce6ab844b9d864bf55f548b2", "filename": "gcc/internal-fn.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Finternal-fn.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.h?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -20,6 +20,12 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_INTERNAL_FN_H\n #define GCC_INTERNAL_FN_H\n \n+#include \"coretypes.h\"\n+\n+/* Initialize internal function tables.  */\n+\n+extern void init_internal_fns ();\n+\n /* Return the name of internal function FN.  The name is only meaningful\n    for dumps; it has no linkage.  */\n \n@@ -41,6 +47,16 @@ internal_fn_flags (enum internal_fn fn)\n   return internal_fn_flags_array[(int) fn];\n }\n \n+/* Return fnspec for function FN.  */\n+\n+extern GTY(()) const_tree internal_fn_fnspec_array[IFN_LAST + 1];\n+\n+static inline const_tree\n+internal_fn_fnspec (enum internal_fn fn)\n+{\n+  return internal_fn_fnspec_array[(int) fn];\n+}\n+\n extern void expand_internal_call (gimple);\n \n #endif"}, {"sha": "9e9ca8c072d9b1a5fbe157fa209f85cf11bdd1a5", "filename": "gcc/tree-core.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -667,7 +667,7 @@ enum annot_expr_kind {\n \n /* Internal functions.  */\n enum internal_fn {\n-#define DEF_INTERNAL_FN(CODE, FLAGS) IFN_##CODE,\n+#define DEF_INTERNAL_FN(CODE, FLAGS, FNSPEC) IFN_##CODE,\n #include \"internal-fn.def\"\n #undef DEF_INTERNAL_FN\n   IFN_LAST"}, {"sha": "65ce642dccd2baa785481d378878a3d23f37c5e0", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b78475cf7322cdce66bae717ee5768baabe8f8d6/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=b78475cf7322cdce66bae717ee5768baabe8f8d6", "patch": "@@ -9869,8 +9869,9 @@ local_define_builtin (const char *name, tree type, enum built_in_function code,\n }\n \n /* Call this function after instantiating all builtins that the language\n-   front end cares about.  This will build the rest of the builtins that\n-   are relied upon by the tree optimizers and the middle-end.  */\n+   front end cares about.  This will build the rest of the builtins\n+   and internal function that are relied upon by the tree optimizers and\n+   the middle-end.  */\n \n void\n build_common_builtin_nodes (void)\n@@ -10103,6 +10104,8 @@ build_common_builtin_nodes (void)\n \t\t\t      ECF_CONST | ECF_NOTHROW | ECF_LEAF);\n       }\n   }\n+\n+  init_internal_fns ();\n }\n \n /* HACK.  GROSS.  This is absolutely disgusting.  I wish there was a"}]}