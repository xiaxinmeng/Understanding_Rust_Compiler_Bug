{"sha": "d817ed3b10f38c21cda334293e0fb969cb03e2c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxN2VkM2IxMGYzOGMyMWNkYTMzNDI5M2UwZmI5NjljYjAzZTJjNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-15T18:55:18Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-15T18:55:18Z"}, "message": "fold-const.c (fold_truth_not_expr): Rename from invert_truthvalue.\n\n2006-06-15  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (fold_truth_not_expr): Rename from\n\tinvert_truthvalue.  Give it fold_* semantics to avoid\n\tgenerating garbage.\n\t(invert_truthvalue): New function.  Wrapper around\n\tfold_truth_not_expr.\n\t(optimize_minmax_comparison): Avoid creating garbage.\n\t(fold_unary): Use fold_truth_not_expr for folding\n\tTRUTH_NOT_EXPR.\n\t(fold_ternary): Replace uses of invert_truthvalue with\n\tfold_truth_not_expr where applicable.\n\t* tree.h (fold_truth_not_expr): Prototype.\n\nFrom-SVN: r114683", "tree": {"sha": "caac830c9d00c0c5dec714e1584bbeae8d74ae22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/caac830c9d00c0c5dec714e1584bbeae8d74ae22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d817ed3b10f38c21cda334293e0fb969cb03e2c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d817ed3b10f38c21cda334293e0fb969cb03e2c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d817ed3b10f38c21cda334293e0fb969cb03e2c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d817ed3b10f38c21cda334293e0fb969cb03e2c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5cf0aa0a315f54b23f311605171579367a8258f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cf0aa0a315f54b23f311605171579367a8258f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cf0aa0a315f54b23f311605171579367a8258f5"}], "stats": {"total": 89, "additions": 59, "deletions": 30}, "files": [{"sha": "13d07af57b4940fc6e421f86369e4f90f188509e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d817ed3b10f38c21cda334293e0fb969cb03e2c5", "patch": "@@ -1,3 +1,17 @@\n+2006-06-15  Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (fold_truth_not_expr): Rename from\n+\tinvert_truthvalue.  Give it fold_* semantics to avoid\n+\tgenerating garbage.\n+\t(invert_truthvalue): New function.  Wrapper around\n+\tfold_truth_not_expr.\n+\t(optimize_minmax_comparison): Avoid creating garbage.\n+\t(fold_unary): Use fold_truth_not_expr for folding\n+\tTRUTH_NOT_EXPR.\n+\t(fold_ternary): Replace uses of invert_truthvalue with\n+\tfold_truth_not_expr where applicable.\n+\t* tree.h (fold_truth_not_expr): Prototype.\n+\n 2006-06-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/27781"}, {"sha": "6522afd7108df344b211f05652e15b2350222b3c", "filename": "gcc/fold-const.c", "status": "modified", "additions": 44, "deletions": 30, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=d817ed3b10f38c21cda334293e0fb969cb03e2c5", "patch": "@@ -3049,15 +3049,13 @@ omit_two_operands (tree type, tree result, tree omitted1, tree omitted2)\n \n    FIXME: one would think we would fold the result, but it causes\n    problems with the dominator optimizer.  */\n+\n tree\n-invert_truthvalue (tree arg)\n+fold_truth_not_expr (tree arg)\n {\n   tree type = TREE_TYPE (arg);\n   enum tree_code code = TREE_CODE (arg);\n \n-  if (code == ERROR_MARK)\n-    return arg;\n-\n   /* If this is a comparison, we can simply invert it, except for\n      floating-point non-equality comparisons, in which case we just\n      enclose a TRUTH_NOT_EXPR around what we have.  */\n@@ -3069,13 +3067,13 @@ invert_truthvalue (tree arg)\n \t  && flag_trapping_math\n \t  && code != ORDERED_EXPR && code != UNORDERED_EXPR\n \t  && code != NE_EXPR && code != EQ_EXPR)\n-\treturn build1 (TRUTH_NOT_EXPR, type, arg);\n+\treturn NULL_TREE;\n       else\n \t{\n \t  code = invert_tree_comparison (code,\n \t\t\t\t\t HONOR_NANS (TYPE_MODE (op_type)));\n \t  if (code == ERROR_MARK)\n-\t    return build1 (TRUTH_NOT_EXPR, type, arg);\n+\t    return NULL_TREE;\n \t  else\n \t    return build2 (code, type,\n \t\t\t   TREE_OPERAND (arg, 0), TREE_OPERAND (arg, 1));\n@@ -3147,7 +3145,7 @@ invert_truthvalue (tree arg)\n \n     case NOP_EXPR:\n       if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE)\n-        break;\n+\treturn build1 (TRUTH_NOT_EXPR, type, arg);\n \n     case CONVERT_EXPR:\n     case FLOAT_EXPR:\n@@ -3170,8 +3168,30 @@ invert_truthvalue (tree arg)\n     default:\n       break;\n     }\n-  gcc_assert (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE);\n-  return build1 (TRUTH_NOT_EXPR, type, arg);\n+\n+  return NULL_TREE;\n+}\n+\n+/* Return a simplified tree node for the truth-negation of ARG.  This\n+   never alters ARG itself.  We assume that ARG is an operation that\n+   returns a truth value (0 or 1).\n+\n+   FIXME: one would think we would fold the result, but it causes\n+   problems with the dominator optimizer.  */\n+\n+tree\n+invert_truthvalue (tree arg)\n+{\n+  tree tem;\n+\n+  if (TREE_CODE (arg) == ERROR_MARK)\n+    return arg;\n+\n+  tem = fold_truth_not_expr (arg);\n+  if (!tem)\n+    tem = build1 (TRUTH_NOT_EXPR, TREE_TYPE (arg), arg);\n+\n+  return tem;\n }\n \n /* Given a bit-wise operation CODE applied to ARG0 and ARG1, see if both\n@@ -5258,15 +5278,11 @@ optimize_minmax_comparison (enum tree_code code, tree type, tree op0, tree op1)\n     {\n     case NE_EXPR:  case LT_EXPR:  case LE_EXPR:\n       {\n-\t/* FIXME: We should be able to invert code without building a\n-\t   scratch tree node, but doing so would require us to\n-\t   duplicate a part of invert_truthvalue here.  */\n-\ttree tem = invert_truthvalue (build2 (code, type, op0, op1));\n-\ttem = optimize_minmax_comparison (TREE_CODE (tem),\n-\t\t\t\t\t  TREE_TYPE (tem),\n-\t\t\t\t\t  TREE_OPERAND (tem, 0),\n-\t\t\t\t\t  TREE_OPERAND (tem, 1));\n-\treturn invert_truthvalue (tem);\n+\ttree tem = optimize_minmax_comparison (invert_tree_comparison (code, false),\n+\t\t\t\t\t  type, op0, op1);\n+\tif (tem)\n+\t  return invert_truthvalue (tem);\n+\treturn NULL_TREE;\n       }\n \n     case GE_EXPR:\n@@ -7616,9 +7632,8 @@ fold_unary (enum tree_code code, tree type, tree op0)\n \t and its values must be 0 or 1.\n \t (\"true\" is a fixed value perhaps depending on the language,\n \t but we don't handle values other than 1 correctly yet.)  */\n-      tem = invert_truthvalue (arg0);\n-      /* Avoid infinite recursion.  */\n-      if (TREE_CODE (tem) == TRUTH_NOT_EXPR)\n+      tem = fold_truth_not_expr (arg0);\n+      if (!tem)\n \treturn NULL_TREE;\n       return fold_convert (type, tem);\n \n@@ -11114,8 +11129,8 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t\t\t\t\t     TREE_OPERAND (arg0, 1))\n \t  && !HONOR_SIGNED_ZEROS (TYPE_MODE (TREE_TYPE (op2))))\n \t{\n-\t  tem = invert_truthvalue (arg0);\n-\t  if (COMPARISON_CLASS_P (tem))\n+\t  tem = fold_truth_not_expr (arg0);\n+\t  if (tem && COMPARISON_CLASS_P (tem))\n \t    {\n \t      tem = fold_cond_expr_with_comparison (type, tem, op2, op1);\n \t      if (tem)\n@@ -11131,9 +11146,8 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  /* See if this can be inverted.  If it can't, possibly because\n \t     it was a floating-point inequality comparison, don't do\n \t     anything.  */\n-\t  tem = invert_truthvalue (arg0);\n-\n-\t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n+\t  tem = fold_truth_not_expr (arg0);\n+\t  if (tem)\n \t    return fold_build3 (code, type, tem, op2, op1);\n \t}\n \n@@ -11210,8 +11224,8 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  && truth_value_p (TREE_CODE (arg1)))\n \t{\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n-\t  tem = invert_truthvalue (arg0);\n-\t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n+\t  tem = fold_truth_not_expr (arg0);\n+\t  if (tem)\n \t    return fold_build2 (TRUTH_ORIF_EXPR, type,\n \t\t\t\tfold_convert (type, tem),\n \t\t\t\targ1);\n@@ -11223,8 +11237,8 @@ fold_ternary (enum tree_code code, tree type, tree op0, tree op1, tree op2)\n \t  && truth_value_p (TREE_CODE (op2)))\n \t{\n \t  /* Only perform transformation if ARG0 is easily inverted.  */\n-\t  tem = invert_truthvalue (arg0);\n-\t  if (TREE_CODE (tem) != TRUTH_NOT_EXPR)\n+\t  tem = fold_truth_not_expr (arg0);\n+\t  if (tem)\n \t    return fold_build2 (TRUTH_ANDIF_EXPR, type,\n \t\t\t\tfold_convert (type, tem),\n \t\t\t\top2);"}, {"sha": "ad21877733a2acb73d643357b192508c1c505b17", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d817ed3b10f38c21cda334293e0fb969cb03e2c5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=d817ed3b10f38c21cda334293e0fb969cb03e2c5", "patch": "@@ -4208,6 +4208,7 @@ extern int operand_equal_p (tree, tree, unsigned int);\n extern tree omit_one_operand (tree, tree, tree);\n extern tree omit_two_operands (tree, tree, tree, tree);\n extern tree invert_truthvalue (tree);\n+extern tree fold_truth_not_expr (tree);\n extern tree fold_unary_to_constant (enum tree_code, tree, tree);\n extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);\n extern tree fold_read_from_constant_string (tree);"}]}