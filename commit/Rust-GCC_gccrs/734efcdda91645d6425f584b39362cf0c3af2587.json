{"sha": "734efcdda91645d6425f584b39362cf0c3af2587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0ZWZjZGRhOTE2NDVkNjQyNWY1ODRiMzkzNjJjZjBjM2FmMjU4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-01-10T11:23:53Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2020-01-10T11:23:53Z"}, "message": "re PR tree-optimization/93199 (Compile time hog in sink_clobbers)\n\n2020-01-10  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/93199\n\t* tree-eh.c (sink_clobbers): Move clobbers to out-of-IL\n\tsequences to avoid walking them again for secondary opportunities.\n\t(pass_lower_eh_dispatch::execute): Instead actually insert\n\tthem here.\n\nFrom-SVN: r280102", "tree": {"sha": "a10a2ca745e6a7d0835082eba4315b24a8bcc059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a10a2ca745e6a7d0835082eba4315b24a8bcc059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/734efcdda91645d6425f584b39362cf0c3af2587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734efcdda91645d6425f584b39362cf0c3af2587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734efcdda91645d6425f584b39362cf0c3af2587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734efcdda91645d6425f584b39362cf0c3af2587/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5eaf0c498f718f60591b06fa81fc51ace6a16c01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eaf0c498f718f60591b06fa81fc51ace6a16c01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eaf0c498f718f60591b06fa81fc51ace6a16c01"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "f93e9190c4606f322d285645a387ae9f9b9786e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734efcdda91645d6425f584b39362cf0c3af2587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734efcdda91645d6425f584b39362cf0c3af2587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=734efcdda91645d6425f584b39362cf0c3af2587", "patch": "@@ -1,3 +1,11 @@\n+2020-01-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-end/93199\n+\t* tree-eh.c (sink_clobbers): Move clobbers to out-of-IL\n+\tsequences to avoid walking them again for secondary opportunities.\n+\t(pass_lower_eh_dispatch::execute): Instead actually insert\n+\tthem here.\n+\n 2020-01-10  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/93199"}, {"sha": "dc80f574a2cb9eb66e1d4dc9d2f14cef0f906d53", "filename": "gcc/tree-eh.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734efcdda91645d6425f584b39362cf0c3af2587/gcc%2Ftree-eh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734efcdda91645d6425f584b39362cf0c3af2587/gcc%2Ftree-eh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-eh.c?ref=734efcdda91645d6425f584b39362cf0c3af2587", "patch": "@@ -3550,11 +3550,15 @@ optimize_clobbers (basic_block bb)\n }\n \n /* Try to sink var = {v} {CLOBBER} stmts followed just by\n-   internal throw to successor BB.  If FOUND_OPPORTUNITY is not NULL\n-   then do not perform the optimization but set *FOUND_OPPORTUNITY to true.  */\n+   internal throw to successor BB.\n+   SUNK, if not NULL, is an array of sequences indexed by basic-block\n+   index to sink to and to pick up sinking opportunities from.\n+   If FOUND_OPPORTUNITY is not NULL then do not perform the optimization\n+   but set *FOUND_OPPORTUNITY to true.  */\n \n static int\n-sink_clobbers (basic_block bb, bool *found_opportunity = NULL)\n+sink_clobbers (basic_block bb,\n+\t       gimple_seq *sunk = NULL, bool *found_opportunity = NULL)\n {\n   edge e;\n   edge_iterator ei;\n@@ -3589,7 +3593,7 @@ sink_clobbers (basic_block bb, bool *found_opportunity = NULL)\n \treturn 0;\n       any_clobbers = true;\n     }\n-  if (!any_clobbers)\n+  if (!any_clobbers && (!sunk || gimple_seq_empty_p (sunk[bb->index])))\n     return 0;\n \n   /* If this was a dry run, tell it we found clobbers to sink.  */\n@@ -3618,7 +3622,10 @@ sink_clobbers (basic_block bb, bool *found_opportunity = NULL)\n \n   gimple *first_sunk = NULL;\n   gimple *last_sunk = NULL;\n-  dgsi = gsi_after_labels (succbb);\n+  if (sunk)\n+    dgsi = gsi_start (sunk[succbb->index]);\n+  else\n+    dgsi = gsi_after_labels (succbb);\n   gsi = gsi_last_bb (bb);\n   for (gsi_prev (&gsi); !gsi_end_p (gsi); gsi_prev (&gsi))\n     {\n@@ -3653,6 +3660,15 @@ sink_clobbers (basic_block bb, bool *found_opportunity = NULL)\n \tfirst_sunk = stmt;\n       last_sunk = stmt;\n     }\n+  if (sunk && !gimple_seq_empty_p (sunk[bb->index]))\n+    {\n+      if (!first_sunk)\n+\tfirst_sunk = gsi_stmt (gsi_last (sunk[bb->index]));\n+      last_sunk = gsi_stmt (gsi_start (sunk[bb->index]));\n+      gsi_insert_seq_before_without_update (&dgsi,\n+\t\t\t\t\t    sunk[bb->index], GSI_NEW_STMT);\n+      sunk[bb->index] = NULL;\n+    }\n   if (first_sunk)\n     {\n       /* Adjust virtual operands if we sunk across a virtual PHI.  */\n@@ -3892,7 +3908,7 @@ pass_lower_eh_dispatch::execute (function *fun)\n \t  if (stmt_can_throw_external (fun, last))\n \t    optimize_clobbers (bb);\n \t  else if (!any_resx_to_process)\n-\t    sink_clobbers (bb, &any_resx_to_process);\n+\t    sink_clobbers (bb, NULL, &any_resx_to_process);\n \t}\n     }\n   if (redirected)\n@@ -3908,16 +3924,25 @@ pass_lower_eh_dispatch::execute (function *fun)\n \t and unreachable block removal.  */\n       int *rpo = XNEWVEC  (int, n_basic_blocks_for_fn (fun));\n       int rpo_n = pre_and_rev_post_order_compute_fn (fun, NULL, rpo, false);\n+      gimple_seq *sunk = XCNEWVEC (gimple_seq, last_basic_block_for_fn (fun));\n       for (int i = 0; i < rpo_n; ++i)\n \t{\n \t  bb = BASIC_BLOCK_FOR_FN (fun, rpo[i]);\n \t  gimple *last = last_stmt (bb);\n \t  if (last\n \t      && gimple_code (last) == GIMPLE_RESX\n \t      && !stmt_can_throw_external (fun, last))\n-\t    flags |= sink_clobbers (bb);\n+\t    flags |= sink_clobbers (bb, sunk);\n+\t  /* If there were any clobbers sunk into this BB, insert them now.  */\n+\t  if (!gimple_seq_empty_p (sunk[bb->index]))\n+\t    {\n+\t      gimple_stmt_iterator gsi = gsi_after_labels (bb);\n+\t      gsi_insert_seq_before (&gsi, sunk[bb->index], GSI_NEW_STMT);\n+\t      sunk[bb->index] = NULL;\n+\t    }\n \t}\n       free (rpo);\n+      free (sunk);\n     }\n \n   return flags;"}]}