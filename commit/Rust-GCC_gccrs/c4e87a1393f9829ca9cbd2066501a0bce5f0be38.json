{"sha": "c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRlODdhMTM5M2Y5ODI5Y2E5Y2JkMjA2NjUwMWEwYmNlNWYwYmUzOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-07-02T11:54:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-07-02T11:54:09Z"}, "message": "re PR tree-optimization/57741 (ICE in tree.c:build_int_cst_wide starting in revision 200394)\n\n\tPR tree-optimization/57741\n\t* tree-vect-loop.c (vect_is_simple_iv_evolution): Disallow\n\tnon-INTEGRAL_TYPE_P non-SCALAR_FLOAT_TYPE_P SSA_NAME step_exprs,\n\tor SCALAR_FLOAT_TYPE_P SSA_NAMEs if !flag_associative_math.\n\tAllow REAL_CST step_exprs if flag_associative_math.\n\t(get_initial_def_for_induction): Handle SCALAR_FLOAT_TYPE_P step_expr.\n\n\t* gcc.dg/vect/pr57741-1.c: New test.\n\t* gcc.dg/vect/pr57741-2.c: New test.\n\t* gcc.dg/vect/pr57741-3.c: New test.\n\nFrom-SVN: r200600", "tree": {"sha": "536b79dc2d2049d0001860af4f3197fa19933676", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536b79dc2d2049d0001860af4f3197fa19933676"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8411fcce91e66df8d6dae01b1e6444e57428228", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8411fcce91e66df8d6dae01b1e6444e57428228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8411fcce91e66df8d6dae01b1e6444e57428228"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "e3b19141dba87d0f30d41e00af2a4dae0186c828", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -1,3 +1,12 @@\n+2013-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/57741\n+\t* tree-vect-loop.c (vect_is_simple_iv_evolution): Disallow\n+\tnon-INTEGRAL_TYPE_P non-SCALAR_FLOAT_TYPE_P SSA_NAME step_exprs,\n+\tor SCALAR_FLOAT_TYPE_P SSA_NAMEs if !flag_associative_math.\n+\tAllow REAL_CST step_exprs if flag_associative_math.\n+\t(get_initial_def_for_induction): Handle SCALAR_FLOAT_TYPE_P step_expr.\n+\n 2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (absdi2): Support abs for"}, {"sha": "abc573237c7c8f5851e09d0e9bbe5b7f3ec867ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -1,3 +1,10 @@\n+2013-07-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/57741\n+\t* gcc.dg/vect/pr57741-1.c: New test.\n+\t* gcc.dg/vect/pr57741-2.c: New test.\n+\t* gcc.dg/vect/pr57741-3.c: New test.\n+\n 2013-07-02  Ian Bolton  <ian.bolton@arm.com>\n \n \t* gcc.target/config/aarch64/insv_1.c: Update to show it doesn't work"}, {"sha": "780f870e317774fb5eba05cf2ee1878013fff2c4", "filename": "gcc/testsuite/gcc.dg/vect/pr57741-1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-1.c?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -0,0 +1,21 @@\n+/* PR tree-optimization/57741 */\n+/* { dg-do compile } */\n+\n+void\n+foo (float *p, float *q, float x)\n+{\n+  int i;\n+  float f = 1.0f, g = 2.0f;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      *p++ = f;\n+      f += x;\n+    }\n+  for (i = 0; i < 1024; i++)\n+    {\n+      *q++ = g;\n+      g += 0.5f;\n+    }\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b3b5f7008b1b5659fa7c7009f745f9b8b976a148", "filename": "gcc/testsuite/gcc.dg/vect/pr57741-2.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-2.c?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -0,0 +1,44 @@\n+/* PR tree-optimization/57741 */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ffast-math\" } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+\n+__attribute__((noinline, noclone)) void\n+foo (float *p, float *q, float x)\n+{\n+  int i;\n+  p = (float *) __builtin_assume_aligned (p, 32);\n+  q = (float *) __builtin_assume_aligned (q, 32);\n+  float f = 1.0f, g = 2.0f;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      *p++ = f;\n+      f += x;\n+    }\n+  for (i = 0; i < 1024; i++)\n+    {\n+      *q++ = g;\n+      g += 0.5f;\n+    }\n+}\n+\n+float p[1024] __attribute__((aligned (32))) = { 17.0f };\n+float q[1024] __attribute__((aligned (32))) = { 17.0f };\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  foo (p, q, 1.5f);\n+  for (i = 0; i < 1024; i++)\n+    if (p[i] != 1.0f + i * 1.5f || q[i] != 2.0f + i * 0.5f)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loop\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "8c1a4f454b373e36075ceec4b62095c4093403f8", "filename": "gcc/testsuite/gcc.dg/vect/pr57741-3.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr57741-3.c?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -0,0 +1,42 @@\n+/* PR tree-optimization/57741 */\n+/* { dg-do run } */\n+/* { dg-additional-options \"-ffast-math\" } */\n+\n+#include \"tree-vect.h\"\n+\n+extern void abort (void);\n+\n+float p[1024] __attribute__((aligned (32))) = { 17.0f };\n+float q[1024] __attribute__((aligned (32))) = { 17.0f };\n+char r[1024] __attribute__((aligned (32))) = { 1 };\n+\n+__attribute__((noinline, noclone)) void\n+foo (float x)\n+{\n+  int i;\n+  float f = 1.0f, g = 2.0f;\n+  for (i = 0; i < 1024; i++)\n+    {\n+      p[i] = f;\n+      f += x;\n+      q[i] = g;\n+      g += 0.5f;\n+      r[i]++;\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int i;\n+  check_vect ();\n+  r[0] = 0;\n+  foo (1.5f);\n+  for (i = 0; i < 1024; i++)\n+    if (p[i] != 1.0f + i * 1.5f || q[i] != 2.0f + i * 0.5f || r[i] != 1)\n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loop\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "41eac972a97c90c062ccfb8313a377c16a84cd66", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4e87a1393f9829ca9cbd2066501a0bce5f0be38/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c4e87a1393f9829ca9cbd2066501a0bce5f0be38", "patch": "@@ -538,7 +538,12 @@ vect_is_simple_iv_evolution (unsigned loop_nb, tree access_fn, tree * init,\n   if (TREE_CODE (step_expr) != INTEGER_CST\n       && (TREE_CODE (step_expr) != SSA_NAME\n \t  || ((bb = gimple_bb (SSA_NAME_DEF_STMT (step_expr)))\n-\t      && flow_bb_inside_loop_p (get_loop (cfun, loop_nb), bb))))\n+\t      && flow_bb_inside_loop_p (get_loop (cfun, loop_nb), bb))\n+\t  || (!INTEGRAL_TYPE_P (TREE_TYPE (step_expr))\n+\t      && (!SCALAR_FLOAT_TYPE_P (TREE_TYPE (step_expr))\n+\t\t  || !flag_associative_math)))\n+      && (TREE_CODE (step_expr) != REAL_CST\n+\t  || !flag_associative_math))\n     {\n       if (dump_enabled_p ())\n         dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n@@ -3276,7 +3281,13 @@ get_initial_def_for_induction (gimple iv_phi)\n     {\n       /* iv_loop is the loop to be vectorized. Generate:\n \t  vec_step = [VF*S, VF*S, VF*S, VF*S]  */\n-      expr = build_int_cst (TREE_TYPE (step_expr), vf);\n+      if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (step_expr)))\n+\t{\n+\t  expr = build_int_cst (integer_type_node, vf);\n+\t  expr = fold_convert (TREE_TYPE (step_expr), expr);\n+\t}\n+      else\n+\texpr = build_int_cst (TREE_TYPE (step_expr), vf);\n       new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t      expr, step_expr);\n       if (TREE_CODE (step_expr) == SSA_NAME)\n@@ -3339,7 +3350,13 @@ get_initial_def_for_induction (gimple iv_phi)\n       gcc_assert (!nested_in_vect_loop);\n \n       /* Create the vector that holds the step of the induction.  */\n-      expr = build_int_cst (TREE_TYPE (step_expr), nunits);\n+      if (SCALAR_FLOAT_TYPE_P (TREE_TYPE (step_expr)))\n+\t{\n+\t  expr = build_int_cst (integer_type_node, nunits);\n+\t  expr = fold_convert (TREE_TYPE (step_expr), expr);\n+\t}\n+      else\n+\texpr = build_int_cst (TREE_TYPE (step_expr), nunits);\n       new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n \t\t\t      expr, step_expr);\n       if (TREE_CODE (step_expr) == SSA_NAME)"}]}