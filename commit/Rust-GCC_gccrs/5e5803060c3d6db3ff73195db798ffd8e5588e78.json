{"sha": "5e5803060c3d6db3ff73195db798ffd8e5588e78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1ODAzMDYwYzNkNmRiM2ZmNzMxOTVkYjc5OGZmZDhlNTU4OGU3OA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2019-06-25T09:41:17Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2019-06-25T09:41:17Z"}, "message": "Implement alternate \"__intN__\" form of \"__intN\" type\n\ngcc/ChangeLog:\n\n\t* gcc/c-family/c-common.c (c_common_nodes_and_builtins): Define\n\talternate \"__intN__\" name for \"__intN\" types.\n\t* gcc/c/c-parser.c (c_parse_init): Create keyword for \"__intN__\" type.\n\t* gcc/cp/lex.c (init_reswords): Likewise.\n\t* gcc/config/msp430/msp430.h: Use __int20__ for SIZE_TYPE and\n\tPTRDIFF_TYPE.\n\t* gcc/cp/cp-tree.h (cp_decl_specifier_seq): New bitfield \"int_n_alt\".\n\t* gcc/c/c-decl.c (declspecs_add_type): Don't pedwarn about \"__intN\" ISO\n\tC incompatibility if alternate \"__intN__\" form is used.\n\t* gcc/cp/decl.c (grokdeclarator): Likewise.\n\t* gcc/cp/parser.c (cp_parser_simple_type_specifier): Set\n\tdecl_specs->int_n_alt if \"__intN__\" form is used.\n\t* gcc/gimple-ssa-sprintf.c (build_intmax_type_nodes): Accept \"__intN__\"\n\tformat of \"__intN\" types for UINTMAX_TYPE.\n\t* gcc/brig/brig-lang.c (brig_build_c_type_nodes): Accept \"__intN__\"\n\tformat of \"__intN\" types for SIZE_TYPE.\n\t* gcc/lto/lto-lang.c (lto_build_c_type_nodes): Likewise.\n\t* gcc/stor-layout.c (initialize_sizetypes): Accept \"__intN__\"\n\tformat of \"__intN\" types for SIZETYPE.\n\t* gcc/tree.c (build_common_tree_nodes): Accept \"__intN__\"\n\tformat of \"__intN\" types for SIZE_TYPE and PTRDIFF_TYPE.\n\t* gcc/doc/invoke.texi: Document that __intN__ disables pedantic\n\twarnings.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/msp430/mlarge-pedwarns.c: New test.\n\nFrom-SVN: r272640", "tree": {"sha": "fda90c008ced20c186f8f9f0ce033275edfd0dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fda90c008ced20c186f8f9f0ce033275edfd0dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e5803060c3d6db3ff73195db798ffd8e5588e78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5803060c3d6db3ff73195db798ffd8e5588e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5803060c3d6db3ff73195db798ffd8e5588e78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5803060c3d6db3ff73195db798ffd8e5588e78/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7e8a463cd1dbaccf6e7c4fa888768fcd257a30f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7e8a463cd1dbaccf6e7c4fa888768fcd257a30f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7e8a463cd1dbaccf6e7c4fa888768fcd257a30f"}], "stats": {"total": 127, "additions": 109, "deletions": 18}, "files": [{"sha": "1fa1c2f2180c371e6cf5e321b6fdd39b3bf177a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -1,3 +1,29 @@\n+2019-06-25  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc/c-family/c-common.c (c_common_nodes_and_builtins): Define\n+\talternate \"__intN__\" name for \"__intN\" types.\n+\t* gcc/c/c-parser.c (c_parse_init): Create keyword for \"__intN__\" type.\n+\t* gcc/cp/lex.c (init_reswords): Likewise.\n+\t* gcc/config/msp430/msp430.h: Use __int20__ for SIZE_TYPE and\n+\tPTRDIFF_TYPE.\n+\t* gcc/cp/cp-tree.h (cp_decl_specifier_seq): New bitfield \"int_n_alt\".\n+\t* gcc/c/c-decl.c (declspecs_add_type): Don't pedwarn about \"__intN\" ISO\n+\tC incompatibility if alternate \"__intN__\" form is used.\n+\t* gcc/cp/decl.c (grokdeclarator): Likewise.\n+\t* gcc/cp/parser.c (cp_parser_simple_type_specifier): Set\n+\tdecl_specs->int_n_alt if \"__intN__\" form is used.\n+\t* gcc/gimple-ssa-sprintf.c (build_intmax_type_nodes): Accept \"__intN__\"\n+\tformat of \"__intN\" types for UINTMAX_TYPE.\n+\t* gcc/brig/brig-lang.c (brig_build_c_type_nodes): Accept \"__intN__\"\n+\tformat of \"__intN\" types for SIZE_TYPE.\n+\t* gcc/lto/lto-lang.c (lto_build_c_type_nodes): Likewise.\n+\t* gcc/stor-layout.c (initialize_sizetypes): Accept \"__intN__\"\n+\tformat of \"__intN\" types for SIZETYPE.\n+\t* gcc/tree.c (build_common_tree_nodes): Accept \"__intN__\"\n+\tformat of \"__intN\" types for SIZE_TYPE and PTRDIFF_TYPE.\n+\t* gcc/doc/invoke.texi: Document that __intN__ disables pedantic\n+\twarnings.\n+\n 2019-06-25  Jan Hubicka  <jh@suse.cz>\n \n \t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Check that"}, {"sha": "1c3a3b00c4123b7abc241ff01b1112867462e664", "filename": "gcc/brig/brig-lang.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fbrig%2Fbrig-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fbrig%2Fbrig-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbrig%2Fbrig-lang.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -864,10 +864,12 @@ brig_build_c_type_nodes (void)\n       for (i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n+\t    sprintf (altname, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, SIZE_TYPE) == 0)\n+\t    if (strcmp (name, SIZE_TYPE) == 0\n+\t\t|| strcmp (altname, SIZE_TYPE) == 0)\n \t      {\n \t\tintmax_type_node = int_n_trees[i].signed_type;\n \t\tuintmax_type_node = int_n_trees[i].unsigned_type;"}, {"sha": "da4aadbc59060ccfc2836acd90640dfe6e91fef3", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -4024,8 +4024,14 @@ c_common_nodes_and_builtins (void)\n       sprintf (name, \"__int%d\", int_n_data[i].bitsize);\n       record_builtin_type ((enum rid)(RID_FIRST_INT_N + i), name,\n \t\t\t   int_n_trees[i].signed_type);\n+      sprintf (name, \"__int%d__\", int_n_data[i].bitsize);\n+      record_builtin_type ((enum rid)(RID_FIRST_INT_N + i), name,\n+\t\t\t   int_n_trees[i].signed_type);\n+\n       sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n       record_builtin_type (RID_MAX, name, int_n_trees[i].unsigned_type);\n+      sprintf (name, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n+      record_builtin_type (RID_MAX, name, int_n_trees[i].unsigned_type);\n     }\n \n   if (c_dialect_cxx ())"}, {"sha": "cb2f49fa5a2c1da3a9c223523aaec805050ade4e", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -10637,7 +10637,11 @@ declspecs_add_type (location_t loc, struct c_declspecs *specs,\n \t    case RID_INT_N_2:\n \t    case RID_INT_N_3:\n \t      specs->int_n_idx = i - RID_INT_N_0;\n-\t      if (!in_system_header_at (input_location))\n+\t      if (!in_system_header_at (input_location)\n+\t\t  /* If the INT_N type ends in \"__\", and so is of the format\n+\t\t     \"__intN__\", don't pedwarn.  */\n+\t\t  && (strncmp (IDENTIFIER_POINTER (type)\n+\t\t\t       + (IDENTIFIER_LENGTH (type) - 2), \"__\", 2) != 0))\n \t\tpedwarn (loc, OPT_Wpedantic,\n \t\t\t \"ISO C does not support %<__int%d%> types\",\n \t\t\t int_n_data[specs->int_n_idx].bitsize);"}, {"sha": "98508721ed9a6aa008cde664c7236cc9ba675652", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -157,6 +157,11 @@ c_parse_init (void)\n       id = get_identifier (name);\n       C_SET_RID_CODE (id, RID_FIRST_INT_N + i);\n       C_IS_RESERVED_WORD (id) = 1;\n+\n+      sprintf (name, \"__int%d__\", int_n_data[i].bitsize);\n+      id = get_identifier (name);\n+      C_SET_RID_CODE (id, RID_FIRST_INT_N + i);\n+      C_IS_RESERVED_WORD (id) = 1;\n     }\n }\n \f"}, {"sha": "1288b1a263dbabb6aca68ecfe7cbe2794f4269ba", "filename": "gcc/config/msp430/msp430.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fconfig%2Fmsp430%2Fmsp430.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.h?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -185,9 +185,11 @@ extern const char * msp430_select_hwmult_lib (int, const char **);\n /* Layout of Source Language Data Types */\n \n #undef  SIZE_TYPE\n-#define SIZE_TYPE\t\t\t(TARGET_LARGE ? \"__int20 unsigned\" : \"unsigned int\")\n+#define SIZE_TYPE\t\t\t(TARGET_LARGE \\\n+\t\t\t\t\t ? \"__int20__ unsigned\" \\\n+\t\t\t\t\t : \"unsigned int\")\n #undef  PTRDIFF_TYPE\n-#define PTRDIFF_TYPE\t\t\t(TARGET_LARGE ? \"__int20\" : \"int\")\n+#define PTRDIFF_TYPE\t\t\t(TARGET_LARGE ? \"__int20__\" : \"int\")\n #undef  WCHAR_TYPE\n #define WCHAR_TYPE\t\t\t\"long int\"\n #undef  WCHAR_TYPE_SIZE"}, {"sha": "d42be7584851183d463faaf8fe60ff42d3236c86", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -5866,6 +5866,9 @@ struct cp_decl_specifier_seq {\n   BOOL_BITFIELD gnu_thread_keyword_p : 1;\n   /* True iff the type is a decltype.  */\n   BOOL_BITFIELD decltype_p : 1;\n+  /* True iff the alternate \"__intN__\" form of the __intN type has been\n+     used.  */\n+  BOOL_BITFIELD int_n_alt: 1;\n };\n \n /* The various kinds of declarators.  */"}, {"sha": "96cd4843a1c2b483477f76bfdd449c20b7061744", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -10368,6 +10368,7 @@ grokdeclarator (const cp_declarator *declarator,\n   tree type = NULL_TREE;\n   int longlong = 0;\n   int explicit_intN = 0;\n+  int int_n_alt = 0;\n   int virtualp, explicitp, friendp, inlinep, staticp;\n   int explicit_int = 0;\n   int explicit_char = 0;\n@@ -10441,6 +10442,7 @@ grokdeclarator (const cp_declarator *declarator,\n   long_p = decl_spec_seq_has_spec_p (declspecs, ds_long);\n   longlong = decl_spec_seq_has_spec_p (declspecs, ds_long_long);\n   explicit_intN = declspecs->explicit_intN_p;\n+  int_n_alt = declspecs->int_n_alt;\n   thread_p = decl_spec_seq_has_spec_p (declspecs, ds_thread);\n \n   // Was concept_p specified? Note that ds_concept\n@@ -10843,7 +10845,9 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t int_n_data[declspecs->int_n_idx].bitsize);\n \t  explicit_intN = false;\n \t}\n-      else if (pedantic && ! in_system_header_at (input_location))\n+      /* Don't pedwarn if the alternate \"__intN__\" form has been used instead\n+\t of \"__intN\".  */\n+      else if (!int_n_alt && pedantic && ! in_system_header_at (input_location))\n \tpedwarn (input_location, OPT_Wpedantic,\n \t\t \"ISO C++ does not support %<__int%d%> for %qs\",\n \t\t int_n_data[declspecs->int_n_idx].bitsize, name);"}, {"sha": "5bfb1e51408536676cd170e07627ed0a24c43be6", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -262,6 +262,11 @@ init_reswords (void)\n       id = get_identifier (name);\n       C_SET_RID_CODE (id, RID_FIRST_INT_N + i);\n       set_identifier_kind (id, cik_keyword);\n+\n+      sprintf (name, \"__int%d__\", int_n_data[i].bitsize);\n+      id = get_identifier (name);\n+      C_SET_RID_CODE (id, RID_FIRST_INT_N + i);\n+      set_identifier_kind (id, cik_keyword);\n     }\n }\n "}, {"sha": "4d46cb3eac73d9a2177872f5c56edf43fe2a0997", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -17622,6 +17622,12 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t{\n \t  decl_specs->explicit_intN_p = true;\n \t  decl_specs->int_n_idx = idx;\n+\t  /* Check if the alternate \"__intN__\" form has been used instead of\n+\t     \"__intN\".  */\n+\t  if (strncmp (IDENTIFIER_POINTER (token->u.value)\n+\t\t\t+ (IDENTIFIER_LENGTH (token->u.value) - 2),\n+\t\t\t\"__\", 2) == 0)\n+\t    decl_specs->int_n_alt = true;\n \t}\n       type = int_n_trees [idx].signed_type;\n       break;"}, {"sha": "7c096804881ddc979b7b81dc0ef5baf4edc80018", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -4337,8 +4337,10 @@ without this option, certain GNU extensions and traditional C and C++\n features are supported as well.  With this option, they are rejected.\n \n @option{-Wpedantic} does not cause warning messages for use of the\n-alternate keywords whose names begin and end with @samp{__}.  Pedantic\n-warnings are also disabled in the expression that follows\n+alternate keywords whose names begin and end with @samp{__}.  This alternate\n+format can also be used to disable warnings for non-ISO @samp{__intN} types,\n+i.e. @samp{__intN__}.\n+Pedantic warnings are also disabled in the expression that follows\n @code{__extension__}.  However, only system header files should use\n these escape routes; application programs should avoid them.\n @xref{Alternate Keywords}."}, {"sha": "a0934bcaf87c05f6c52cd50139e3b5200b3e8d53", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -1019,10 +1019,12 @@ build_intmax_type_nodes (tree *pintmax, tree *puintmax)\n       for (int i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n+\t    sprintf (altname, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, UINTMAX_TYPE) == 0)\n+\t    if (strcmp (name, UINTMAX_TYPE) == 0\n+\t\t|| strcmp (altname, UINTMAX_TYPE) == 0)\n \t      {\n \t        *pintmax = int_n_trees[i].signed_type;\n \t        *puintmax = int_n_trees[i].unsigned_type;"}, {"sha": "cc44afc048cf5d5b007cb06d84f9dc2f942021f2", "filename": "gcc/lto/lto-lang.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Flto%2Flto-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Flto%2Flto-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto-lang.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -1259,10 +1259,12 @@ lto_build_c_type_nodes (void)\n       for (i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n+\t    sprintf (altname, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, SIZE_TYPE) == 0)\n+\t    if (strcmp (name, SIZE_TYPE) == 0\n+\t\t|| strcmp (altname, SIZE_TYPE) == 0)\n \t      {\n \t\tintmax_type_node = int_n_trees[i].signed_type;\n \t\tuintmax_type_node = int_n_trees[i].unsigned_type;"}, {"sha": "583516c4a93fbe6f8a5c18c14d93ca6ba5a4dd3d", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -2716,10 +2716,12 @@ initialize_sizetypes (void)\n       for (i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n+\t    sprintf (altname, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, SIZETYPE) == 0)\n+\t    if (strcmp (name, SIZETYPE) == 0\n+\t\t|| strcmp (altname, SIZETYPE) == 0)\n \t      {\n \t\tprecision = int_n_data[i].bitsize;\n \t      }"}, {"sha": "47542cc1208b0d6288863f3e89683fafe78e7891", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -1,3 +1,7 @@\n+2019-06-25  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* gcc.target/msp430/mlarge-pedwarns.c: New test.\n+\n 2019-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/90954"}, {"sha": "a16f53342db22007b91e14a7019e12cae9a768ef", "filename": "gcc/testsuite/gcc.target/msp430/mlarge-pedwarns.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-pedwarns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-pedwarns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fmlarge-pedwarns.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"\" { \"*-*-*\" } { \"-mcpu=msp430\" } { \"\" } } */\n+/* { dg-options \"-mlarge -pedantic-errors\" } */\n+\n+/* Ensure the use of builtin macros that contain __int20__ in their\n+   expansion don't cause ISO C errors when -pedantic-errors is passed.  */\n+\n+__SIZE_TYPE__ a;\n+__INTPTR_TYPE__ b;\n+__UINTPTR_TYPE__ c;\n+__PTRDIFF_TYPE__ d;"}, {"sha": "c97facd7ce50a87b3fb9111f2f9fec85a3356e50", "filename": "gcc/tree.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e5803060c3d6db3ff73195db798ffd8e5588e78/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5e5803060c3d6db3ff73195db798ffd8e5588e78", "patch": "@@ -10385,10 +10385,12 @@ build_common_tree_nodes (bool signed_char)\n       for (i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d unsigned\", int_n_data[i].bitsize);\n+\t    sprintf (altname, \"__int%d__ unsigned\", int_n_data[i].bitsize);\n \n-\t    if (strcmp (name, SIZE_TYPE) == 0)\n+\t    if (strcmp (name, SIZE_TYPE) == 0\n+\t\t|| strcmp (altname, SIZE_TYPE) == 0)\n \t      {\n \t\tsize_type_node = int_n_trees[i].unsigned_type;\n \t      }\n@@ -10412,9 +10414,12 @@ build_common_tree_nodes (bool signed_char)\n       for (int i = 0; i < NUM_INT_N_ENTS; i++)\n \tif (int_n_enabled_p[i])\n \t  {\n-\t    char name[50];\n+\t    char name[50], altname[50];\n \t    sprintf (name, \"__int%d\", int_n_data[i].bitsize);\n-\t    if (strcmp (name, PTRDIFF_TYPE) == 0)\n+\t    sprintf (altname, \"__int%d__\", int_n_data[i].bitsize);\n+\n+\t    if (strcmp (name, PTRDIFF_TYPE) == 0\n+\t\t|| strcmp (altname, PTRDIFF_TYPE) == 0)\n \t      ptrdiff_type_node = int_n_trees[i].signed_type;\n \t  }\n       if (ptrdiff_type_node == NULL_TREE)"}]}