{"sha": "2b00e20179db709e3307edde65d8c6cd053528af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwMGUyMDE3OWRiNzA5ZTMzMDdlZGRlNjVkOGM2Y2QwNTM1MjhhZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-12-09T02:08:28Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-12-09T02:08:28Z"}, "message": "re PR c++/46348 ([C++0x] ICE with constexpr default constructor and array member)\n\n\tPR c++/46348\n\t* semantics.c (cxx_eval_vec_init_1): Handle value-init.\n\t(cxx_eval_vec_init): Pass value_init arg.\n\nFrom-SVN: r167623", "tree": {"sha": "acd0f83508376a22a1ca944aed505e614a544152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acd0f83508376a22a1ca944aed505e614a544152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b00e20179db709e3307edde65d8c6cd053528af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b00e20179db709e3307edde65d8c6cd053528af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b00e20179db709e3307edde65d8c6cd053528af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b00e20179db709e3307edde65d8c6cd053528af/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5fc85d14789d6676f8b1389e0bdf4d62a4ee708", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5fc85d14789d6676f8b1389e0bdf4d62a4ee708", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5fc85d14789d6676f8b1389e0bdf4d62a4ee708"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "fb148620b4134f39c2e5f16523f07f41ca93ab89", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2b00e20179db709e3307edde65d8c6cd053528af", "patch": "@@ -1,3 +1,9 @@\n+2010-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46348\n+\t* semantics.c (cxx_eval_vec_init_1): Handle value-init.\n+\t(cxx_eval_vec_init): Pass value_init arg.\n+\n 2010-12-08  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/45329"}, {"sha": "db0d0a19ba2148ceabedb67c7ba0e46060da87aa", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2b00e20179db709e3307edde65d8c6cd053528af", "patch": "@@ -6391,15 +6391,16 @@ cxx_eval_bare_aggregate (const constexpr_call *call, tree t,\n    initialization of a non-static data member of array type.  Reduce it to a\n    CONSTRUCTOR.\n \n-   Note that this is only intended to support the initializations done by\n-   defaulted constructors for classes with non-static data members of array\n-   type.  In this case, VEC_INIT_EXPR_INIT will either be NULL_TREE for the\n-   default constructor, or a COMPONENT_REF for the copy/move\n-   constructor.  */\n+   Note that apart from value-initialization (when VALUE_INIT is true),\n+   this is only intended to support value-initialization and the\n+   initializations done by defaulted constructors for classes with\n+   non-static data members of array type.  In this case, VEC_INIT_EXPR_INIT\n+   will either be NULL_TREE for the default constructor, or a COMPONENT_REF\n+   for the copy/move constructor.  */\n \n static tree\n cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n-\t\t     bool allow_non_constant, bool addr,\n+\t\t     bool value_init, bool allow_non_constant, bool addr,\n \t\t     bool *non_constant_p)\n {\n   tree elttype = TREE_TYPE (atype);\n@@ -6412,7 +6413,9 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n      here, as for a constructor to be constexpr, all members must be\n      initialized, which for a defaulted default constructor means they must\n      be of a class type with a constexpr default constructor.  */\n-  if (!init)\n+  if (value_init)\n+    gcc_assert (!init);\n+  else if (!init)\n     {\n       VEC(tree,gc) *argvec = make_tree_vector ();\n       init = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n@@ -6433,12 +6436,21 @@ cxx_eval_vec_init_1 (const constexpr_call *call, tree atype, tree init,\n       if (TREE_CODE (elttype) == ARRAY_TYPE)\n \t{\n \t  /* A multidimensional array; recurse.  */\n-\t  eltinit = cp_build_array_ref (input_location, init, idx,\n-\t\t\t\t\ttf_warning_or_error);\n-\t  eltinit = cxx_eval_vec_init_1 (call, elttype, eltinit,\n+\t  if (value_init)\n+\t    eltinit = NULL_TREE;\n+\t  else\n+\t    eltinit = cp_build_array_ref (input_location, init, idx,\n+\t\t\t\t\t  tf_warning_or_error);\n+\t  eltinit = cxx_eval_vec_init_1 (call, elttype, eltinit, value_init,\n \t\t\t\t\t allow_non_constant, addr,\n \t\t\t\t\t non_constant_p);\n \t}\n+      else if (value_init)\n+\t{\n+\t  eltinit = build_value_init (elttype, tf_warning_or_error);\n+\t  eltinit = cxx_eval_constant_expression\n+\t    (call, eltinit, allow_non_constant, addr, non_constant_p);\n+\t}\n       else if (TREE_CODE (init) == CONSTRUCTOR)\n \t{\n \t  /* Initializing an element using the call to the default\n@@ -6488,8 +6500,9 @@ cxx_eval_vec_init (const constexpr_call *call, tree t,\n {\n   tree atype = TREE_TYPE (t);\n   tree init = VEC_INIT_EXPR_INIT (t);\n-  tree r = cxx_eval_vec_init_1 (call, atype, init, allow_non_constant,\n-\t\t\t\taddr, non_constant_p);\n+  tree r = cxx_eval_vec_init_1 (call, atype, init,\n+\t\t\t\tVEC_INIT_EXPR_VALUE_INIT (t),\n+\t\t\t\tallow_non_constant, addr, non_constant_p);\n   if (*non_constant_p)\n     return t;\n   else"}, {"sha": "303d40bf14643ea59e9638f8ca389c1383271b7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b00e20179db709e3307edde65d8c6cd053528af", "patch": "@@ -1,3 +1,8 @@\n+2010-12-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/46348\n+\t* g++.dg/cpp0x/constexpr-array2.C: New.\n+\n 2010-12-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/sse2-init-v2di-2.c: Add \"-dp\" and update"}, {"sha": "9577f75d9fd89cf0d8fcd7ae9afcc98503e89383", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array2.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b00e20179db709e3307edde65d8c6cd053528af/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array2.C?ref=2b00e20179db709e3307edde65d8c6cd053528af", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/46348\n+// { dg-options -std=c++0x }\n+\n+template<__SIZE_TYPE__ _Nw>\n+  struct _Base\n+  {\n+    typedef unsigned long _WordT;\n+\n+    _WordT _M_w[_Nw];\n+\n+    constexpr\n+    _Base()\n+    : _M_w() { }\n+  };\n+\n+int main()\n+{\n+  _Base<256> bs;\n+}"}]}