{"sha": "bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNkNzdiN2I5ZjM1YmQ1YjU1OWVkNTkzYzNiM2UzNDZjMWU2ZjM2NA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-24T04:14:29Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-24T04:14:29Z"}, "message": "c++: do_class_deduction and dependent init [PR93383]\n\nHere we're crashing during CTAD with a dependent initializer (performed\nfrom convert_template_argument) because one of the initializer's\nelements has an empty TREE_TYPE, which ends up making resolve_args\nunhappy.\n\nBesides the case where we're initializing one template placeholder\nfrom another, which is already specifically handled earlier in\ndo_class_deduction, it seems we can't in general correctly resolve a\ntemplate placeholder using a dependent initializer, so this patch makes\nthe function just punt until instantiation time instead.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/89565\n\tPR c++/93383\n\tPR c++/95291\n\tPR c++/99200\n\tPR c++/99683\n\t* pt.c (do_class_deduction): Punt if the initializer is\n\ttype-dependent.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/89565\n\tPR c++/93383\n\tPR c++/95291\n\tPR c++/99200\n\tPR c++/99683\n\t* g++.dg/cpp2a/nontype-class39.C: Remove dg-ice directive.\n\t* g++.dg/cpp2a/nontype-class45.C: New test.\n\t* g++.dg/cpp2a/nontype-class46.C: New test.\n\t* g++.dg/cpp2a/nontype-class47.C: New test.\n\t* g++.dg/cpp2a/nontype-class48.C: New test.", "tree": {"sha": "e88f062f4be1c92aecddaf6953f76ade32c1b36f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e88f062f4be1c92aecddaf6953f76ade32c1b36f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/comments", "author": null, "committer": null, "parents": [{"sha": "5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1a2cb9c2dc09eed53da5d5787d14bec700b10b"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "8c3c814ce5595cd24d77828c5b048abc7796a232", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -29368,6 +29368,10 @@ do_class_deduction (tree ptype, tree tmpl, tree init,\n       return error_mark_node;\n     }\n \n+  /* Wait until the initializer is non-dependent.  */\n+  if (type_dependent_expression_p (init))\n+    return ptype;\n+\n   tree type = TREE_TYPE (tmpl);\n \n   bool try_list_ctor = false;"}, {"sha": "9b4da4f02ea025f64d02b36221d3325c9e55f9fd", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class39.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class39.C?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -1,7 +1,5 @@\n // PR c++/89565\n // { dg-do compile { target c++20 } }\n-// { dg-additional-options \"-fchecking\" }\n-// { dg-ice \"resolve_args\" }\n \n template <auto>\n struct N{};"}, {"sha": "e7addf5f2912d1785cdbb1d450a295a840cf7a8f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class45.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class45.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class45.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class45.C?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/99200\n+// { dg-do compile { target c++20 } }\n+\n+template <int N>\n+struct A\n+{\n+  constexpr A (const char (&s)[N]) { for (int i = 0; i < N; i++) v[i] = s[i]; v[N] = 0; }\n+  char v[N + 1];\n+};\n+\n+template <A s>\n+struct B\n+{\n+  constexpr operator const char *() { return s.v; }\n+};\n+\n+template <typename T>\n+const char *\n+foo ()\n+{ \n+  return B<__PRETTY_FUNCTION__>{};\n+}\n+\n+template <typename T>\n+const char *\n+bar ()\n+{ \n+  return B<__FUNCTION__>{};\n+}\n+\n+auto a = foo <int> ();\n+auto b = bar <double> ();"}, {"sha": "d91e800424fcf56155c7673b67e1d264d1131b22", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class46.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class46.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class46.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class46.C?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/93383\n+// { dg-do compile { target c++20 } }\n+\n+template <int> struct A {};\n+\n+template <A a> struct B {\n+  void foo(B<+a>);\n+  void bar(B<a.x>);\n+  template <class T> using type = B<T{}>;\n+  template <class> static inline auto y = A{0}; // { dg-error \"deduction|no match\" }\n+};"}, {"sha": "1f31b9bd5306783ca506b6e8d786d5be9f9ac40e", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class47.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class47.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class47.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class47.C?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/95291\n+// { dg-do compile { target c++20 } }\n+\n+template <typename T = int>\n+class xy { };\n+\n+template <xy _size>\n+struct window_root { };\n+\n+template <typename minion>\n+struct flip_horizontally : window_root<minion::size> { };"}, {"sha": "9024436cad85ea1ca28260ebb3ec6d0581a6661f", "filename": "gcc/testsuite/g++.dg/cpp2a/nontype-class48.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class48.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class48.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fnontype-class48.C?ref=bcd77b7b9f35bd5b559ed593c3b3e346c1e6f364", "patch": "@@ -0,0 +1,36 @@\n+// PR c++/99683\n+// { dg-do compile { target c++20 } }\n+\n+template<auto V>\n+struct nttp_tag {};\n+\n+template<typename T>\n+struct type_tag {};\n+\n+\n+/************************************************/\n+template<bool is_type>\n+struct use_ctad\n+{\n+    template<auto V> requires (!is_type)\n+    constexpr use_ctad(nttp_tag<V>) {}\n+};\n+\n+template<auto V>\n+use_ctad(nttp_tag<V>) -> use_ctad<false>;\n+\n+/**********************************************/\n+template<use_ctad t>\n+struct wrapper \n+{\n+    template<typename Tag>\n+    wrapper(Tag);\n+};\n+\n+template<typename Tag>\n+wrapper(Tag) -> wrapper<use_ctad{Tag()}>;\n+\n+int main()\n+{\n+    wrapper t{nttp_tag<42>{}};\n+}"}]}