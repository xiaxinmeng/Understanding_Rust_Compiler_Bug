{"sha": "e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "node_id": "C_kwDOANBUbNoAKGU0ZmJjZmMwYjEzMGY4NzJiOGRkOWQ1MDg5ZmI3MWVlNWVkOTQ1OWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-11T11:28:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-08-11T13:01:21Z"}, "message": "Tame path_range_query::compute_imports\n\nThis avoids going BBs outside of the path when adding def chains\nto the set of imports.  It also syncs the code with\nrange_def_chain::get_def_chain to not miss out on some imports\nthis function would identify.\n\n\t* gimple-range-path.cc (path_range_query::compute_imports):\n\tRestrict walking SSA defs to blocks inside the path.  Track\n\tthe same operands as range_def_chain::get_def_chain does.", "tree": {"sha": "1af9b3d1d6f460e538920b9ff8f383760da81fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1af9b3d1d6f460e538920b9ff8f383760da81fff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16b013c9d9b4d950f89821476e791bf18c1295df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16b013c9d9b4d950f89821476e791bf18c1295df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16b013c9d9b4d950f89821476e791bf18c1295df"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "5ff2c733b4eda8450c41bb6f8605e576c3f2aa67", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=e4fbcfc0b130f872b8dd9d5089fb71ee5ed9459a", "patch": "@@ -575,18 +575,11 @@ path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n     {\n       tree name = worklist.pop ();\n       gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n+      if (SSA_NAME_IS_DEFAULT_DEF (name)\n+\t  || !path.contains (gimple_bb (def_stmt)))\n+\tcontinue;\n \n-      if (is_gimple_assign (def_stmt))\n-\t{\n-\t  add_to_imports (gimple_assign_rhs1 (def_stmt), imports);\n-\t  tree rhs = gimple_assign_rhs2 (def_stmt);\n-\t  if (rhs && add_to_imports (rhs, imports))\n-\t    worklist.safe_push (rhs);\n-\t  rhs = gimple_assign_rhs3 (def_stmt);\n-\t  if (rhs && add_to_imports (rhs, imports))\n-\t    worklist.safe_push (rhs);\n-\t}\n-      else if (gphi *phi = dyn_cast <gphi *> (def_stmt))\n+      if (gphi *phi = dyn_cast <gphi *> (def_stmt))\n \t{\n \t  for (size_t i = 0; i < gimple_phi_num_args (phi); ++i)\n \t    {\n@@ -599,6 +592,30 @@ path_range_query::compute_imports (bitmap imports, const vec<basic_block> &path)\n \t\tworklist.safe_push (arg);\n \t    }\n \t}\n+      else if (gassign *ass = dyn_cast <gassign *> (def_stmt))\n+\t{\n+\t  tree ssa[3];\n+\t  if (range_op_handler (ass))\n+\t    {\n+\t      ssa[0] = gimple_range_ssa_p (gimple_range_operand1 (ass));\n+\t      ssa[1] = gimple_range_ssa_p (gimple_range_operand2 (ass));\n+\t      ssa[2] = NULL_TREE;\n+\t    }\n+\t  else if (gimple_assign_rhs_code (ass) == COND_EXPR)\n+\t    {\n+\t      ssa[0] = gimple_range_ssa_p (gimple_assign_rhs1 (ass));\n+\t      ssa[1] = gimple_range_ssa_p (gimple_assign_rhs2 (ass));\n+\t      ssa[2] = gimple_range_ssa_p (gimple_assign_rhs3 (ass));\n+\t    }\n+\t  else\n+\t    continue;\n+\t  for (unsigned j = 0; j < 3; ++j)\n+\t    {\n+\t      tree rhs = ssa[j];\n+\t      if (rhs && add_to_imports (rhs, imports))\n+\t\tworklist.safe_push (rhs);\n+\t    }\n+\t}\n     }\n   // Exported booleans along the path, may help conditionals.\n   if (m_resolve)"}]}