{"sha": "1084128584fe3cb13ba54924a80d1647b7f73387", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4NDEyODU4NGZlM2NiMTNiYTU0OTI0YTgwZDE2NDdiN2Y3MzM4Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-25T20:00:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-05-25T20:00:59Z"}, "message": "builtins.def: Encode additional information, such as names and types, here.\n\n\t* builtins.def: Encode additional information, such as names and\n\ttypes, here.\n\t* builtin-types.def: New file.\n\t* builtins.c (built_in_names): Adjust use of DEF_BUILTIN.\n\t(built_in_decls): Likewise.  Don't explicitly initialize global\n\tdata to NULL.\n\t(expand_builtin_mathfn): Handle float and long double variants of\n\tmath builtins.\n\t(expand_builtin): Likewise.\n\t* c-common.c (c_common_nodes_and_builtins): Make it table-driven.\n\t(expand_tree_builtin): Handle long, long long, float, and long\n\tdouble variants of math functions.\n\t* c-common.h (c_tree_index): Remove some unused nodes.\n\t(void_ftype): Remove.\n\t(void_type_ptr): Likewise.\n\t(int_ftype_int): Likewise.\n\t(ptr_ftype_sizetype): Likewise.\n\t* c-decl.c (init_decl_processing): Remove creation of DWARF\n\tbuiltins.\n\t* defaults.h (MD_INIT_BUILTINS): Provide default definition.\n\t* tree.h (built_in_function): Adjust definition of DEF_BUILTIN.\n\t* Makefile.in (c-common.o): Depend on builtin-types.def.\n\n\t* decl.c (init_decl_processing): Tweak.\n\nFrom-SVN: r42583", "tree": {"sha": "a6b2476cc75872ea15f87872782af87262afe2cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6b2476cc75872ea15f87872782af87262afe2cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1084128584fe3cb13ba54924a80d1647b7f73387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1084128584fe3cb13ba54924a80d1647b7f73387", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1084128584fe3cb13ba54924a80d1647b7f73387", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1084128584fe3cb13ba54924a80d1647b7f73387/comments", "author": null, "committer": null, "parents": [{"sha": "c132505efe4f642232b69b6e2dca1349148d9b74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c132505efe4f642232b69b6e2dca1349148d9b74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c132505efe4f642232b69b6e2dca1349148d9b74"}], "stats": {"total": 1555, "additions": 842, "deletions": 713}, "files": [{"sha": "0f074d6ba73e6af802e25428dc53c86f0bf46c29", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -1,3 +1,28 @@\n+2001-05-26  Mark  <mark@codesourcery.com>\n+\n+\t* builtins.def: Encode additional information, such as names and\n+\ttypes, here.\n+\t* builtin-types.def: New file.\n+\t* builtins.c (built_in_names): Adjust use of DEF_BUILTIN.\n+\t(built_in_decls): Likewise.  Don't explicitly initialize global\n+\tdata to NULL.\n+\t(expand_builtin_mathfn): Handle float and long double variants of\n+\tmath builtins.\n+\t(expand_builtin): Likewise.\n+\t* c-common.c (c_common_nodes_and_builtins): Make it table-driven.\n+\t(expand_tree_builtin): Handle long, long long, float, and long\n+\tdouble variants of math functions.\n+\t* c-common.h (c_tree_index): Remove some unused nodes.\n+\t(void_ftype): Remove.\n+\t(void_type_ptr): Likewise.\n+\t(int_ftype_int): Likewise.\n+\t(ptr_ftype_sizetype): Likewise.\n+\t* c-decl.c (init_decl_processing): Remove creation of DWARF\n+\tbuiltins.\n+\t* defaults.h (MD_INIT_BUILTINS): Provide default definition.\n+\t* tree.h (built_in_function): Adjust definition of DEF_BUILTIN.\n+\t* Makefile.in (c-common.o): Depend on builtin-types.def.\n+\t\n 2001-05-25  Dale Johannesen  <dalej@apple.com>\n \n \t* config/rs6000/t-darwin: Fix dependencies for darwin.o."}, {"sha": "55322cdbb68c97ac4e31f68a9884fbc8d304ac10", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -1227,7 +1227,7 @@ s-under: $(GCC_PASSES)\n \n c-common.o : c-common.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(OBSTACK_H) \\\n \t$(C_COMMON_H) flags.h toplev.h output.h c-pragma.h $(RTL_H) $(GGC_H) \\\n-\t$(EXPR_H) $(TM_P_H)\n+\t$(EXPR_H) $(TM_P_H) builtin-types.def\n \n c-format.o : c-format.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n \t$(C_COMMON_H) flags.h toplev.h intl.h diagnostic.h"}, {"sha": "dd5c5aebddc0bfbb614a5e5152841ba5bdfa0928", "filename": "gcc/builtin-types.def", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -0,0 +1,177 @@\n+/* Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+/* This header provides a declaritive way of describing the types that\n+   are used when declaring builtin functions.\n+\n+   Before including this header, you must define the following macros:\n+\n+   DEF_PRIMITIVE_TYPE (ENUM, TYPE)\n+\n+     The ENUM is an identifier indicating which type is being defined.\n+     TYPE is an expression for a `tree' that represents the type.\n+\n+   DEF_FUNCTION_TYPE_0 (ENUM, RETURN)\n+   DEF_FUNCTION_TYPE_1 (ENUM, RETURN, ARG1)\n+   DEF_FUNCTION_TYPE_2 (ENUM, RETURN, ARG1, ARG2)\n+   DEF_FUNCTION_TYPE_3 (ENUM, RETURN, ARG1, ARG2, ARG3)\n+   DEF_FUNCTION_TYPE_4 (ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\n+\n+     These macros describe function types.  ENUM is as above.  The\n+     RETURN type is one of the enumerals already defined.  ARG1, ARG2,\n+     and ARG3 give the types of the arguments, similarly.\n+\n+   DEF_FUNCTION_TYPE_VAR_0 (ENUM, RETURN)\n+   DEF_FUNCTION_TYPE_VAR_1 (ENUM, RETURN, ARG1)\n+   DEF_FUNCTION_TYPE_VAR_2 (ENUM, RETURN, ARG1, ARG2)\n+\n+     Similar, but for function types that take variable arguments.\n+     For example:\n+\n+       DEF_FUNCTION_TYPE_1 (BT_INT_DOUBLE, BT_INT, BT_DOUBLE)\n+\n+     describes the type `int ()(double)', using the enumeral\n+     BT_INT_DOUBLE, whereas:\n+\n+       DEF_FUNCTION_TYPE_VAR_1 (BT_INT_DOUBLE_VAR, BT_INT, BT_DOUBLE)\n+\n+     describes the type `int ()(double, ...)'.\n+ \n+  DEF_POINTER_TYPE (ENUM, TYPE)\n+\n+    This macro describes a pointer type.  ENUM is as above; TYPE is\n+    the type pointed to.  */\n+\n+DEF_PRIMITIVE_TYPE (BT_VOID, void_type_node)\n+DEF_PRIMITIVE_TYPE (BT_INT, integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_UNSIGNED, unsigned_type_node)\n+DEF_PRIMITIVE_TYPE (BT_LONG, long_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_LONGLONG, long_long_integer_type_node)\n+DEF_PRIMITIVE_TYPE (BT_FLOAT, float_type_node)\n+DEF_PRIMITIVE_TYPE (BT_INTMAX, intmax_type_node)\n+DEF_PRIMITIVE_TYPE (BT_DOUBLE, double_type_node)\n+DEF_PRIMITIVE_TYPE (BT_LONG_DOUBLE, long_double_type_node)\n+DEF_PRIMITIVE_TYPE (BT_COMPLEX_FLOAT, complex_float_type_node)\n+DEF_PRIMITIVE_TYPE (BT_COMPLEX_DOUBLE, complex_double_type_node)\n+DEF_PRIMITIVE_TYPE (BT_COMPLEX_LONG_DOUBLE, complex_long_double_type_node)\n+\n+DEF_PRIMITIVE_TYPE (BT_PTR, ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_CONST_PTR, const_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_TRAD_PTR, traditional_ptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_TRAD_CONST_PTR, traditional_cptr_type_node)\n+DEF_PRIMITIVE_TYPE (BT_PTRMODE, type_for_mode (ptr_mode, 0))\n+DEF_PRIMITIVE_TYPE (BT_SIZE, c_size_type_node)\n+DEF_PRIMITIVE_TYPE (BT_STRING, string_type_node)\n+DEF_PRIMITIVE_TYPE (BT_CONST_STRING, const_string_type_node)\n+DEF_PRIMITIVE_TYPE (BT_LEN, traditional_len_type_node)\n+\n+DEF_PRIMITIVE_TYPE (BT_VALIST_REF, va_list_ref_type_node)\n+DEF_PRIMITIVE_TYPE (BT_VALIST_ARG, va_list_arg_type_node)\n+\n+DEF_FUNCTION_TYPE_0 (BT_FN_VOID, BT_VOID)\n+DEF_FUNCTION_TYPE_0 (BT_FN_PTR, BT_PTR)\n+DEF_FUNCTION_TYPE_0 (BT_FN_UNSIGNED, BT_UNSIGNED)\n+\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_LONG, BT_LONG, BT_LONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONGLONG_LONGLONG, BT_LONGLONG, BT_LONGLONG)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INTMAX_INTMAX, BT_INTMAX, BT_INTMAX)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_FLOAT, BT_FLOAT, BT_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_DOUBLE, BT_DOUBLE, BT_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE_LONG_DOUBLE, \n+\t             BT_LONG_DOUBLE, BT_LONG_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT, \n+\t\t     BT_COMPLEX_FLOAT, BT_COMPLEX_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE, \n+\t\t     BT_COMPLEX_DOUBLE, BT_COMPLEX_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_COMPLEX_LONG_DOUBLE_COMPLEX_LONG_DOUBLE, \n+\t             BT_COMPLEX_LONG_DOUBLE, BT_COMPLEX_LONG_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_FLOAT_COMPLEX_FLOAT, \n+                     BT_FLOAT, BT_COMPLEX_FLOAT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_DOUBLE_COMPLEX_DOUBLE,\n+                     BT_DOUBLE, BT_COMPLEX_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n+                     BT_LONG_DOUBLE, BT_COMPLEX_LONG_DOUBLE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_UNSIGNED, BT_PTR, BT_UNSIGNED)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_SIZE, BT_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_INT, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_PTR, BT_INT, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_VOID_PTR, BT_VOID, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_LEN_CONST_STRING, BT_LEN, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_INT_CONST_STRING, BT_INT, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_1 (BT_FN_PTR_PTR, BT_PTR, BT_PTR)\n+DEF_FUNCTION_TYPE_1 (BT_FN_VOID_VALIST_REF, BT_VOID, BT_VALIST_REF)\n+DEF_FUNCTION_TYPE_1 (BT_FN_VOID_INT, BT_VOID, BT_INT)\n+\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTR_INT, BT_VOID, BT_PTR, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_STRING_STRING_CONST_STRING, \n+                     BT_STRING, BT_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_CONST_STRING,\n+\t             BT_INT, BT_CONST_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_2 (BT_FN_STRING_CONST_STRING_CONST_STRING,\n+\t\t     BT_STRING, BT_CONST_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_2 (BT_FN_SIZE_CONST_STRING_CONST_STRING,\n+\t             BT_SIZE, BT_CONST_STRING, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_2 (BT_FN_STRING_CONST_STRING_INT,\n+\t             BT_STRING, BT_CONST_STRING, BT_INT)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_CONST_STRING_PTR,\n+\t\t     BT_INT, BT_CONST_STRING, BT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_INT_PTR,\n+\t\t     BT_INT, BT_INT, BT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_PTRMODE_PTR,\n+\t\t     BT_VOID, BT_PTRMODE, BT_PTR)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_VALIST_REF_VALIST_ARG, \n+\t\t     BT_VOID, BT_VALIST_REF, BT_VALIST_ARG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_LONG_LONG_LONG,\n+\t\t     BT_LONG, BT_LONG, BT_LONG)\n+DEF_FUNCTION_TYPE_2 (BT_FN_INT_PTR_CONST_STRING,\n+\t\t     BT_INT, BT_PTR, BT_CONST_STRING)\n+DEF_FUNCTION_TYPE_2 (BT_FN_VOID_TRAD_PTR_LEN,\n+\t\t     BT_VOID, BT_TRAD_PTR, BT_LEN)\n+\n+DEF_FUNCTION_TYPE_3 (BT_FN_STRING_STRING_CONST_STRING_SIZE,\n+\t\t     BT_STRING, BT_STRING, BT_CONST_STRING, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_STRING_CONST_STRING_SIZE,\n+\t\t     BT_INT, BT_CONST_STRING, BT_CONST_STRING, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_TRAD_PTR_PTR_CONST_PTR_SIZE,\n+\t\t     BT_TRAD_PTR, BT_PTR, BT_CONST_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_CONST_PTR_CONST_PTR_SIZE,\n+\t             BT_INT, BT_CONST_PTR, BT_CONST_PTR, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_TRAD_PTR_PTR_INT_SIZE,\n+\t             BT_TRAD_PTR, BT_PTR, BT_INT, BT_SIZE)\n+DEF_FUNCTION_TYPE_3 (BT_FN_INT_TRAD_CONST_PTR_TRAD_CONST_PTR_LEN,\n+\t\t     BT_INT, BT_TRAD_CONST_PTR, BT_TRAD_CONST_PTR, BT_LEN)\n+\n+DEF_FUNCTION_TYPE_4 (BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR,\n+\t\t     BT_SIZE, BT_CONST_PTR, BT_SIZE, BT_SIZE, BT_PTR)\n+\n+DEF_FUNCTION_TYPE_VAR_0 (BT_FN_VOID_VAR, BT_VOID)\n+DEF_FUNCTION_TYPE_VAR_0 (BT_FN_INT_VAR, BT_INT)\n+DEF_FUNCTION_TYPE_VAR_0 (BT_FN_PTR_VAR, BT_PTR)\n+\n+DEF_FUNCTION_TYPE_VAR_1 (BT_FN_VOID_VALIST_REF_VAR, \n+\t\t\t BT_VOID, BT_VALIST_REF)\n+DEF_FUNCTION_TYPE_VAR_1 (BT_FN_INT_CONST_STRING_VAR,\n+\t                 BT_INT, BT_CONST_STRING)\n+\n+DEF_FUNCTION_TYPE_VAR_2 (BT_FN_INT_PTR_CONST_STRING_VAR,\n+\t                 BT_INT, BT_PTR, BT_CONST_STRING)\n+\n+DEF_POINTER_TYPE (BT_PTR_FN_VOID_VAR, BT_FN_VOID_VAR)\n+DEF_FUNCTION_TYPE_3 (BT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE,\n+\t\t     BT_PTR, BT_PTR_FN_VOID_VAR, BT_PTR, BT_SIZE)"}, {"sha": "0d71b292b12f69657533e330d88d20f1874dd9c3", "filename": "gcc/builtins.c", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -57,7 +57,7 @@ Boston, MA 02111-1307, USA.  */\n const char *const built_in_class_names[4]\n   = {\"NOT_BUILT_IN\", \"BUILT_IN_FRONTEND\", \"BUILT_IN_MD\", \"BUILT_IN_NORMAL\"};\n \n-#define DEF_BUILTIN(x) STRINGX(x),\n+#define DEF_BUILTIN(X, N, C, T, LT, B, F, NA) STRINGX(X),\n const char *const built_in_names[(int) END_BUILTINS] =\n {\n #include \"builtins.def\"\n@@ -66,12 +66,7 @@ const char *const built_in_names[(int) END_BUILTINS] =\n \n /* Setup an array of _DECL trees, make sure each element is\n    initialized to NULL_TREE.  */\n-#define DEF_BUILTIN(x) NULL_TREE,\n-tree built_in_decls[(int) END_BUILTINS] =\n-{\n-#include \"builtins.def\"\n-};\n-#undef DEF_BUILTIN\n+tree built_in_decls[(int) END_BUILTINS];\n \n tree (*lang_type_promotes_to) PARAMS ((tree));\n \n@@ -1409,11 +1404,17 @@ expand_builtin_mathfn (exp, target, subtarget)\n \n   switch (DECL_FUNCTION_CODE (fndecl))\n     {\n-     case BUILT_IN_SIN:\n+    case BUILT_IN_SIN:\n+    case BUILT_IN_SINF:\n+    case BUILT_IN_SINL:\n       builtin_optab = sin_optab; break;\n-     case BUILT_IN_COS:\n+    case BUILT_IN_COS:\n+    case BUILT_IN_COSF:\n+    case BUILT_IN_COSL:\n       builtin_optab = cos_optab; break;\n-     case BUILT_IN_FSQRT:\n+    case BUILT_IN_FSQRT:\n+    case BUILT_IN_SQRTF:\n+    case BUILT_IN_SQRTL:\n       builtin_optab = sqrt_optab; break;\n      default:\n       abort ();\n@@ -3300,7 +3301,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n      set of builtins.  */\n   if (! optimize && ! CALLED_AS_BUILT_IN (fndecl)\n       && (fcode == BUILT_IN_SIN || fcode == BUILT_IN_COS\n-\t  || fcode == BUILT_IN_FSQRT || fcode == BUILT_IN_MEMSET\n+\t  || fcode == BUILT_IN_FSQRT || fcode == BUILT_IN_SQRTF\n+\t  || fcode == BUILT_IN_SQRTL || fcode == BUILT_IN_MEMSET\n \t  || fcode == BUILT_IN_MEMCPY || fcode == BUILT_IN_MEMCMP\n \t  || fcode == BUILT_IN_BCMP || fcode == BUILT_IN_BZERO\n \t  || fcode == BUILT_IN_INDEX || fcode == BUILT_IN_RINDEX\n@@ -3319,24 +3321,41 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n   switch (fcode)\n     {\n     case BUILT_IN_ABS:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n     case BUILT_IN_FABS:\n+    case BUILT_IN_FABSF:\n+    case BUILT_IN_FABSL:\n       /* build_function_call changes these into ABS_EXPR.  */\n       abort ();\n \n     case BUILT_IN_CONJ:\n+    case BUILT_IN_CONJF:\n+    case BUILT_IN_CONJL:\n     case BUILT_IN_CREAL:\n+    case BUILT_IN_CREALF:\n+    case BUILT_IN_CREALL:\n     case BUILT_IN_CIMAG:\n+    case BUILT_IN_CIMAGF:\n+    case BUILT_IN_CIMAGL:\n       /* expand_tree_builtin changes these into CONJ_EXPR, REALPART_EXPR\n \t and IMAGPART_EXPR.  */\n       abort ();\n \n     case BUILT_IN_SIN:\n+    case BUILT_IN_SINF:\n+    case BUILT_IN_SINL:\n     case BUILT_IN_COS:\n+    case BUILT_IN_COSF:\n+    case BUILT_IN_COSL:\n       /* Treat these like sqrt only if unsafe math optimizations are allowed,\n \t because of possible accuracy problems.  */\n       if (! flag_unsafe_math_optimizations)\n \tbreak;\n     case BUILT_IN_FSQRT:\n+    case BUILT_IN_SQRTF:\n+    case BUILT_IN_SQRTL:\n       target = expand_builtin_mathfn (exp, target, subtarget);\n       if (target)\n \treturn target;"}, {"sha": "a6f4f5157242847e2c94544c29172f55c84b8d9e", "filename": "gcc/builtins.def", "status": "modified", "additions": 413, "deletions": 89, "changes": 502, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -19,94 +19,418 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-DEF_BUILTIN(BUILT_IN_ALLOCA)\n-DEF_BUILTIN(BUILT_IN_ABS)\n-DEF_BUILTIN(BUILT_IN_FABS)\n-DEF_BUILTIN(BUILT_IN_CONJ)\n-DEF_BUILTIN(BUILT_IN_CREAL)\n-DEF_BUILTIN(BUILT_IN_CIMAG)\n-DEF_BUILTIN(BUILT_IN_FFS)\n-DEF_BUILTIN(BUILT_IN_DIV)\n-DEF_BUILTIN(BUILT_IN_LDIV)\n-DEF_BUILTIN(BUILT_IN_FFLOOR)\n-DEF_BUILTIN(BUILT_IN_FCEIL)\n-DEF_BUILTIN(BUILT_IN_FMOD)\n-DEF_BUILTIN(BUILT_IN_FREM)\n-DEF_BUILTIN(BUILT_IN_MEMCPY)\n-DEF_BUILTIN(BUILT_IN_MEMCMP)\n-DEF_BUILTIN(BUILT_IN_MEMSET)\n-DEF_BUILTIN(BUILT_IN_BZERO)\n-DEF_BUILTIN(BUILT_IN_BCMP)\n-DEF_BUILTIN(BUILT_IN_INDEX)\n-DEF_BUILTIN(BUILT_IN_RINDEX)\n-DEF_BUILTIN(BUILT_IN_STRCAT)\n-DEF_BUILTIN(BUILT_IN_STRNCAT)\n-DEF_BUILTIN(BUILT_IN_STRCPY)\n-DEF_BUILTIN(BUILT_IN_STRNCPY)\n-DEF_BUILTIN(BUILT_IN_STRCMP)\n-DEF_BUILTIN(BUILT_IN_STRNCMP)\n-DEF_BUILTIN(BUILT_IN_STRLEN)\n-DEF_BUILTIN(BUILT_IN_STRSTR)\n-DEF_BUILTIN(BUILT_IN_STRPBRK)\n-DEF_BUILTIN(BUILT_IN_STRSPN)\n-DEF_BUILTIN(BUILT_IN_STRCSPN)\n-DEF_BUILTIN(BUILT_IN_STRCHR)\n-DEF_BUILTIN(BUILT_IN_STRRCHR)\n-DEF_BUILTIN(BUILT_IN_FSQRT)\n-DEF_BUILTIN(BUILT_IN_SIN)\n-DEF_BUILTIN(BUILT_IN_COS)\n-DEF_BUILTIN(BUILT_IN_GETEXP)\n-DEF_BUILTIN(BUILT_IN_GETMAN)\n-DEF_BUILTIN(BUILT_IN_SAVEREGS)\n-DEF_BUILTIN(BUILT_IN_CLASSIFY_TYPE)\n-DEF_BUILTIN(BUILT_IN_NEXT_ARG)\n-DEF_BUILTIN(BUILT_IN_ARGS_INFO)\n-DEF_BUILTIN(BUILT_IN_CONSTANT_P)\n-DEF_BUILTIN(BUILT_IN_FRAME_ADDRESS)\n-DEF_BUILTIN(BUILT_IN_RETURN_ADDRESS)\n-DEF_BUILTIN(BUILT_IN_AGGREGATE_INCOMING_ADDRESS)\n-DEF_BUILTIN(BUILT_IN_APPLY_ARGS)\n-DEF_BUILTIN(BUILT_IN_APPLY)\n-DEF_BUILTIN(BUILT_IN_RETURN)\n-DEF_BUILTIN(BUILT_IN_SETJMP)\n-DEF_BUILTIN(BUILT_IN_LONGJMP)\n-DEF_BUILTIN(BUILT_IN_TRAP)\n-\n-  /* Stdio builtins.  */\n-DEF_BUILTIN(BUILT_IN_PUTCHAR)\n-DEF_BUILTIN(BUILT_IN_PUTS)\n-DEF_BUILTIN(BUILT_IN_PRINTF)\n-DEF_BUILTIN(BUILT_IN_FPUTC)\n-DEF_BUILTIN(BUILT_IN_FPUTS)\n-DEF_BUILTIN(BUILT_IN_FWRITE)\n-DEF_BUILTIN(BUILT_IN_FPRINTF)\n+/* Before including this file, you should define a macro:\n+\n+     DEF_BUILTIN (ENUM, NAME, CLASS, TYPE, LIBTYPE, BOTH_P,\n+                  FALLBACK_P, NONANSI_P)\n+\n+   This macro will be called once for each builtin function.  The\n+   ENUM will be of type `enum built_in_function', and will indicate\n+   which builtin function is being processed.  The NAME of the builtin\n+   function (which will always start with `__builtin_') is a string\n+   literal.  The CLASS is of type `enum built_in_class' and indicates\n+   what kind of builtin is being processed.\n+\n+   Some builtins are actually two separate functions.  For example,\n+   for `strcmp' there are two builtin functions; `__builtin_strcmp'\n+   and `strcmp' itself.  Both behave identically.  Other builtins\n+   define only the `__builtin' variant.  If BOTH_P is TRUE, then this\n+   builtin has both variants; otherwise, it is has only the first\n+   variant.\n+\n+   TYPE indicates the type of the function.  The symbols correspond to\n+   enumerals from builtin-types.def.  If BOTH_P is true, then LIBTYPE\n+   is the type of the non-`__builtin_' variant.  Otherwise, LIBTYPE\n+   should be ignored.\n+\n+   If FALLBACK_P is true then, if for some reason, the compiler cannot\n+   expand the builtin function directly, it will call the\n+   corresponding library function (which does not have the\n+   `__builtin_' prefix.\n+\n+   If NONANSI_P is true, then the non-`__builtin_' variant is not an\n+   ANSI/ISO library function, and so we should pretend it does not\n+   exist when compiling in ANSI conformant mode.  */\n+   \n+/* A GCC builtin (like __builtin_saveregs) is provided by the\n+   compiler, but does not correspond to a function in the standard\n+   library.  */\n+#undef DEF_GCC_BUILTIN\n+#define DEF_GCC_BUILTIN(ENUM, NAME, TYPE)\t\t\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, BT_LAST,\t\\\n+               false, false, false)\n+\n+\n+/* A fallback builtin is a builtin (like __builtin_puts) that falls\n+   back to the corresopnding library function if necessary -- but\n+   for which we should not introduce the non-`__builtin' variant of\n+   the name.  */\n+#undef DEF_FALLBACK_BUILTIN\t\t\t\t\n+#define DEF_FALLBACK_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       false, true, false)\n+\n+/* A library builtin (like __builtin_strchr) is a builtin equivalent\n+   of an ANSI/ISO standard library function.  In addition to the\n+   `__builtin' version, we will create a an ordinary version (e.g,\n+   `strchr') as well.  If we cannot compute the answer using the\n+   builtin function, we will fall back to the standard library\n+   version. */\n+#undef DEF_LIB_BUILTIN\t\t\t\t\t\n+#define DEF_LIB_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+\t       true, true, false)\n+\n+/* Like DEF_LIB_BUILTIN, except that a call to the builtin should\n+   never fall back to the library version.  */\n+#undef DEF_LIB_ALWAYS_BUILTIN\t\t\t\t\n+#define DEF_LIB_ALWAYS_BUILTIN(ENUM, NAME, TYPE)\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+    \t       true, false, true)\n+\n+/* Like DEF_LIB_BUILTIN, except that the function is not one that is\n+   specified by ANSI/ISO C.  So, when we're being fully conformant we\n+   ignore the version of these builtins that does not begin with\n+   __builtin.  */\n+#undef DEF_EXT_LIB_BUILTIN\t\t\t\t\n+#define DEF_EXT_LIB_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+   \t       true, true, true)\n+\n+/* Like DEF_LIB_BUILTIN, except that the function is only a part of\n+   the standard in C99 or above.  */\n+#undef DEF_C99_BUILTIN\t\t\t\t\t\n+#define DEF_C99_BUILTIN(ENUM, NAME, TYPE)\t\t\\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_NORMAL, TYPE, TYPE,\t\\\n+   \t       true, !flag_isoc99, true)\n+\n+/* Like DEF_LIB_BUILTIN, except that the function is expanded in the\n+   front-end.  */\n+#undef DEF_FRONT_END_LIB_BUILTIN\t\t\t\n+#define DEF_FRONT_END_LIB_BUILTIN(ENUM, NAME, TYPE)\t        \\\n+  DEF_BUILTIN (ENUM, NAME, BUILT_IN_FRONTEND, TYPE, TYPE,\t\\\n+\t       true, true, false)\n+\n+/* A built-in that is not currently used.  */\n+#undef DEF_UNUSED_BUILTIN\t\t\t\t\t\n+#define DEF_UNUSED_BUILTIN(X)\t\t\t\t\t\\\n+  DEF_BUILTIN (X, (const char *) NULL, NOT_BUILT_IN, BT_LAST,\t\\\n+\t       BT_LAST, false, false, false)\n+\n+/* If SMALL_STACK is defined, then `alloca' is only defined in its\n+   `__builtin' form.  */\n+#if SMALL_STACK  \n+DEF_FALLBACK_BUILTIN(BUILT_IN_ALLOCA,\n+\t\t     \"__builtin_alloca\",\n+\t\t     BT_FN_PTR_SIZE)\n+#else\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_ALLOCA,\n+\t\t    \"__builtin_alloca\",\n+\t\t    BT_FN_PTR_SIZE)\n+#endif\n+\n+DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_ABS,\n+\t\t       \"__builtin_abs\",\n+\t\t       BT_FN_INT_INT)\n+DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_LABS,\n+\t\t       \"__builtin_labs\",\n+\t\t       BT_FN_LONG_LONG)\n+\n+DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABS,\n+\t\t       \"__builtin_fabs\",\n+\t\t       BT_FN_DOUBLE_DOUBLE)\n+DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSF,\n+\t\t       \"__builtin_fabsf\",\n+\t\t       BT_FN_FLOAT_FLOAT)\n+DEF_LIB_ALWAYS_BUILTIN(BUILT_IN_FABSL,\n+\t\t       \"__builtin_fabsl\",\n+\t\t       BT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\n+DEF_C99_BUILTIN(BUILT_IN_LLABS,\n+\t\t\"__builtin_llabs\",\n+\t\tBT_FN_LONGLONG_LONGLONG)\n+DEF_C99_BUILTIN(BUILT_IN_IMAXABS,\n+\t\t\"__builtin_imaxabs\",\n+\t\tBT_FN_INTMAX_INTMAX)\n+DEF_C99_BUILTIN(BUILT_IN_CONJ,\n+\t\t\"__builtin_conj\",\n+\t\tBT_FN_COMPLEX_DOUBLE_COMPLEX_DOUBLE)\n+DEF_C99_BUILTIN(BUILT_IN_CONJF,\n+\t\t\"__builtin_conjf\",\n+\t\tBT_FN_COMPLEX_FLOAT_COMPLEX_FLOAT)\n+DEF_C99_BUILTIN(BUILT_IN_CONJL,\n+\t\t\"__builtin_conjl\",\n+\t\tBT_FN_COMPLEX_LONG_DOUBLE_COMPLEX_LONG_DOUBLE)\n+DEF_C99_BUILTIN(BUILT_IN_CREAL,\n+\t\t\"__builtin_creal\",\n+\t\tBT_FN_DOUBLE_COMPLEX_DOUBLE)\n+DEF_C99_BUILTIN(BUILT_IN_CREALF,\n+\t\t\"__builtin_crealf\",\n+\t\tBT_FN_FLOAT_COMPLEX_FLOAT)\n+DEF_C99_BUILTIN(BUILT_IN_CREALL,\n+\t\t\"__builtin_creall\",\n+\t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE)\n+DEF_C99_BUILTIN(BUILT_IN_CIMAG,\n+\t\t\"__builtin_cimag\",\n+\t\tBT_FN_DOUBLE_COMPLEX_DOUBLE)\n+DEF_C99_BUILTIN(BUILT_IN_CIMAGF,\n+\t\t\"__builtin_cimagf\",\n+\t\tBT_FN_FLOAT_COMPLEX_FLOAT)\n+DEF_C99_BUILTIN(BUILT_IN_CIMAGL,\n+\t\t\"__builtin_cimagl\",\n+\t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE)\n+\n+DEF_UNUSED_BUILTIN(BUILT_IN_DIV)\n+DEF_UNUSED_BUILTIN(BUILT_IN_LDIV)\n+DEF_UNUSED_BUILTIN(BUILT_IN_FFLOOR)\n+DEF_UNUSED_BUILTIN(BUILT_IN_FCEIL)\n+DEF_UNUSED_BUILTIN(BUILT_IN_FMOD)\n+DEF_UNUSED_BUILTIN(BUILT_IN_FREM)\n+\n+/* The system prototypes for `bzero' and `bcmp' functions have many\n+   variations, so don't specify parameters to avoid conflicts.  The\n+   expand_* functions check the argument types anyway.  */\n+DEF_BUILTIN (BUILT_IN_BZERO,\n+\t     \"__builtin_bzero\",\n+\t     BUILT_IN_NORMAL,\n+\t     BT_FN_VOID_TRAD_PTR_LEN, \n+\t     BT_FN_VOID_VAR,\n+\t     true, true, true)\n+DEF_BUILTIN (BUILT_IN_BCMP,\n+\t     \"__builtin_bcmp\",\n+\t     BUILT_IN_NORMAL,\n+\t     BT_FN_INT_TRAD_CONST_PTR_TRAD_CONST_PTR_LEN,\n+\t     BT_FN_INT_VAR,\n+\t     true, true, true)\n+\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_FFS,\n+\t\t    \"__builtin_ffs\",\n+\t\t    BT_FN_INT_INT)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_INDEX,\n+\t\t    \"__builtin_index\",\n+\t\t    BT_FN_STRING_CONST_STRING_INT)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_RINDEX,\n+\t\t    \"__builtin_rindex\",\n+\t\t    BT_FN_STRING_CONST_STRING_INT)\n+\n+DEF_LIB_BUILTIN(BUILT_IN_MEMCPY,\n+\t\t\"__builtin_memcpy\",\n+\t\tBT_FN_TRAD_PTR_PTR_CONST_PTR_SIZE)\n+DEF_LIB_BUILTIN(BUILT_IN_MEMCMP,\n+\t\t\"__builtin_memcmp\",\n+\t\tBT_FN_INT_CONST_PTR_CONST_PTR_SIZE)\n+DEF_LIB_BUILTIN(BUILT_IN_MEMSET,\n+\t\t\"__builtin_memset\",\n+\t\tBT_FN_TRAD_PTR_PTR_INT_SIZE)\n+\n+DEF_LIB_BUILTIN(BUILT_IN_STRCAT,\n+\t\t\"__builtin_strcat\",\n+\t\tBT_FN_STRING_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRNCAT,\n+\t\t\"__builtin_strncat\",\n+\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE)\n+DEF_LIB_BUILTIN(BUILT_IN_STRCPY,\n+\t\t\"__builtin_strcpy\",\n+\t\tBT_FN_STRING_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRNCPY,\n+\t\t\"__builtin_strncpy\",\n+\t\tBT_FN_STRING_STRING_CONST_STRING_SIZE)\n+DEF_LIB_BUILTIN(BUILT_IN_STRCMP,\n+\t\t\"__builtin_strcmp\",\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRNCMP,\n+\t\t\"__builtin_strncmp\",\n+\t\tBT_FN_INT_CONST_STRING_CONST_STRING_SIZE)\n+DEF_LIB_BUILTIN(BUILT_IN_STRLEN,\n+\t\t\"__builtin_strlen\",\n+\t\tBT_FN_LEN_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRSTR,\n+\t\t\"__builtin_strstr\",\n+\t\tBT_FN_STRING_CONST_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRPBRK,\n+\t\t\"__builtin_strpbrk\",\n+\t\tBT_FN_STRING_CONST_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRSPN,\n+\t\t\"__builtin_strspn\",\n+\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRCSPN,\n+\t\t\"__builtin_strcspn\",\n+\t\tBT_FN_SIZE_CONST_STRING_CONST_STRING)\n+DEF_LIB_BUILTIN(BUILT_IN_STRCHR,\n+\t\t\"__builtin_strchr\",\n+\t\tBT_FN_STRING_CONST_STRING_INT)\n+DEF_LIB_BUILTIN(BUILT_IN_STRRCHR,\n+\t\t\"__builtin_strrchr\",\n+\t\tBT_FN_STRING_CONST_STRING_INT)\n+\n+DEF_LIB_BUILTIN(BUILT_IN_FSQRT,\n+\t\t\"__builtin_fsqrt\",\n+\t\tBT_FN_DOUBLE_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_SIN,\n+\t\t\"__builtin_sin\",\n+\t\tBT_FN_DOUBLE_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_COS,\n+\t\t\"__builtin_cos\",\n+\t\tBT_FN_DOUBLE_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_SQRTF,\n+\t\t\"__builtin_sqrtf\",\n+\t\tBT_FN_FLOAT_FLOAT)\n+DEF_LIB_BUILTIN(BUILT_IN_SINF,\n+\t\t\"__builtin_sinf\",\n+\t\tBT_FN_FLOAT_FLOAT)\n+DEF_LIB_BUILTIN(BUILT_IN_COSF,\n+\t\t\"__builtin_cosf\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_SQRTL,\n+\t\t\"__builtin_sqrtl\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_SINL,\n+\t\t\"__builtin_sinl\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+DEF_LIB_BUILTIN(BUILT_IN_COSL,\n+\t\t\"__builtin_cosl\",\n+\t\tBT_FN_LONG_DOUBLE_LONG_DOUBLE)\n+\n+DEF_UNUSED_BUILTIN(BUILT_IN_GETEXP)\n+DEF_UNUSED_BUILTIN(BUILT_IN_GETMAN)\n+\n+DEF_GCC_BUILTIN(BUILT_IN_SAVEREGS,\n+\t\t\"__builtin_saveregs\",\n+\t\tBT_FN_PTR_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_CLASSIFY_TYPE,\n+\t\t\"__builtin_classify_type\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_NEXT_ARG,\n+\t\t\"__builtin_next_arg\",\n+\t\tBT_FN_PTR_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ARGS_INFO,\n+\t\t\"__builtin_args_info\",\n+\t\tBT_FN_INT_INT)\n+DEF_GCC_BUILTIN(BUILT_IN_CONSTANT_P, \n+\t\t\"__builtin_constant_p\", \n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_FRAME_ADDRESS,\n+\t\t\"__builtin_frame_address\",\n+\t\tBT_FN_PTR_UNSIGNED)\n+DEF_GCC_BUILTIN(BUILT_IN_RETURN_ADDRESS, \n+\t\t\"__builtin_return_address\",\n+\t\tBT_FN_PTR_UNSIGNED)\n+DEF_GCC_BUILTIN(BUILT_IN_AGGREGATE_INCOMING_ADDRESS,\n+\t\t\"__builtin_aggregate_incoming_address\",\n+\t\tBT_FN_PTR_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_APPLY_ARGS,\n+\t\t\"__builtin_apply_args\",\n+\t\tBT_FN_PTR_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_APPLY,\n+\t\t\"__builtin_apply\",\n+\t\tBT_FN_PTR_PTR_FN_VOID_VAR_PTR_SIZE)\n+DEF_GCC_BUILTIN(BUILT_IN_RETURN,\n+\t\t\"__builtin_return\",\n+\t\tBT_FN_VOID_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_SETJMP,\n+\t\t\"__builtin_setjmp\",\n+\t\tBT_FN_INT_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_LONGJMP,\n+\t\t\"__builtin_longjmp\",\n+\t\tBT_FN_VOID_PTR_INT)\n+DEF_GCC_BUILTIN(BUILT_IN_TRAP,\n+\t\t\"__builtin_trap\",\n+\t\tBT_FN_VOID)\n+\n+/* Stdio builtins.  */\n+DEF_FALLBACK_BUILTIN(BUILT_IN_PUTCHAR,\n+\t\t    \"__builtin_putchar\",\n+\t\t     BT_FN_INT_INT)\n+DEF_FALLBACK_BUILTIN(BUILT_IN_PUTS,\n+\t\t     \"__builtin_puts\",\n+\t\t     BT_FN_INT_CONST_STRING)\n+DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_PRINTF,\n+\t\t\t  \"__builtin_printf\",\n+\t\t\t  BT_FN_INT_CONST_STRING_VAR)\n+DEF_FALLBACK_BUILTIN(BUILT_IN_FPUTC,\n+\t\t     \"__builtin_fputc\",\n+\t\t     BT_FN_INT_INT_PTR)\n+/* Declare the __builtin_ style with arguments and the regular style\n+   without them.  We rely on stdio.h to supply the arguments for the\n+   regular style declaration since we had to use void* instead of\n+   FILE* in the __builtin_ prototype supplied here.  */\n+DEF_BUILTIN (BUILT_IN_FPUTS,\n+\t     \"__builtin_fputs\",\n+\t     BUILT_IN_NORMAL,\n+\t     BT_FN_INT_CONST_STRING_PTR,\n+\t     BT_FN_INT_VAR,\n+\t     true, true, false)\n+DEF_FALLBACK_BUILTIN(BUILT_IN_FWRITE,\n+\t\t     \"__builtin_fwrite\",\n+\t\t     BT_FN_SIZE_CONST_PTR_SIZE_SIZE_PTR)\n+DEF_FRONT_END_LIB_BUILTIN(BUILT_IN_FPRINTF,\n+\t\t\t \"__builtin_fprintf\",\n+\t\t\t BT_FN_INT_PTR_CONST_STRING_VAR)\n \n   /* ISO C99 floating point unordered comparisons.  */\n-DEF_BUILTIN(BUILT_IN_ISGREATER)\n-DEF_BUILTIN(BUILT_IN_ISGREATEREQUAL)\n-DEF_BUILTIN(BUILT_IN_ISLESS)\n-DEF_BUILTIN(BUILT_IN_ISLESSEQUAL)\n-DEF_BUILTIN(BUILT_IN_ISLESSGREATER)\n-DEF_BUILTIN(BUILT_IN_ISUNORDERED)\n-\n-  /* Various hooks for the DWARF 2 __throw routine.  */\n-DEF_BUILTIN(BUILT_IN_UNWIND_INIT)\n-DEF_BUILTIN(BUILT_IN_DWARF_CFA)\n-DEF_BUILTIN(BUILT_IN_DWARF_FP_REGNUM)\n-DEF_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES)\n-DEF_BUILTIN(BUILT_IN_FROB_RETURN_ADDR)\n-DEF_BUILTIN(BUILT_IN_EXTRACT_RETURN_ADDR)\n-DEF_BUILTIN(BUILT_IN_EH_RETURN)\n-DEF_BUILTIN(BUILT_IN_EH_RETURN_DATA_REGNO)\n-\n-DEF_BUILTIN(BUILT_IN_VARARGS_START)\n-DEF_BUILTIN(BUILT_IN_STDARG_START)\n-DEF_BUILTIN(BUILT_IN_VA_END)\n-DEF_BUILTIN(BUILT_IN_VA_COPY)\n-DEF_BUILTIN(BUILT_IN_EXPECT)\n-\n-  /* C++ extensions */\n-DEF_BUILTIN(BUILT_IN_NEW)\n-DEF_BUILTIN(BUILT_IN_VEC_NEW)\n-DEF_BUILTIN(BUILT_IN_DELETE)\n-DEF_BUILTIN(BUILT_IN_VEC_DELETE)\n+DEF_GCC_BUILTIN(BUILT_IN_ISGREATER, \n+\t\t\"__builtin_isgreater\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ISGREATEREQUAL,\n+\t\t\"__builtin_isgreaterequal\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ISLESS,\n+\t\t\"__builtin_isless\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ISLESSEQUAL,\n+\t\t\"__builtin_islessequal\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ISLESSGREATER,\n+\t\t\"__builtin_islessgreater\",\n+\t\tBT_FN_INT_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_ISUNORDERED,\n+\t\t\"__builtin_isunordered\",\n+\t\tBT_FN_INT_VAR)\n+\n+/* Various hooks for the DWARF 2 __throw routine.  */\n+DEF_GCC_BUILTIN(BUILT_IN_UNWIND_INIT,\n+\t\t\"__builtin_unwind_init\",\n+\t\tBT_FN_VOID)\n+DEF_GCC_BUILTIN(BUILT_IN_DWARF_CFA,\n+\t\t\"__builtin_dwarf_cfa\",\n+\t\tBT_FN_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_DWARF_FP_REGNUM,\n+\t\t\"__builtin_dwarf_fp_regnum\",\n+\t\tBT_FN_UNSIGNED)\n+DEF_GCC_BUILTIN(BUILT_IN_INIT_DWARF_REG_SIZES,\n+\t\t\"__builtin_init_dwarf_reg_size_table\",\n+\t\tBT_FN_VOID_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_FROB_RETURN_ADDR,\n+\t\t\"__builtin_frob_return_addr\",\n+\t\tBT_FN_PTR_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_EXTRACT_RETURN_ADDR,\n+\t\t\"__builtin_extract_return_addr\",\n+\t\tBT_FN_PTR_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN,\n+\t\t\"__builtin_eh_return\",\n+\t\tBT_FN_VOID_PTRMODE_PTR)\n+DEF_GCC_BUILTIN(BUILT_IN_EH_RETURN_DATA_REGNO,\n+\t\t\"__builtin_eh_return_data_regno\",\n+\t\tBT_FN_INT_INT)\n+\n+DEF_GCC_BUILTIN(BUILT_IN_VARARGS_START,\n+\t\t\"__builtin_varargs_start\",\n+\t\tBT_FN_VOID_VALIST_REF)\n+DEF_GCC_BUILTIN(BUILT_IN_STDARG_START,\n+\t\t\"__builtin_stdarg_start\",\n+\t\tBT_FN_VOID_VALIST_REF_VAR)\n+DEF_GCC_BUILTIN(BUILT_IN_VA_END,\n+\t\t\"__builtin_va_end\",\n+\t\tBT_FN_VOID_VALIST_REF)\n+DEF_GCC_BUILTIN(BUILT_IN_VA_COPY,\n+\t\t\"__builtin_va_copy\",\n+\t\tBT_FN_VOID_VALIST_REF_VALIST_ARG)\n+DEF_GCC_BUILTIN(BUILT_IN_EXPECT,\n+\t\t\"__builtin_expect\",\n+\t\tBT_FN_LONG_LONG_LONG)\n+\n+/* C++ extensions */\n+DEF_UNUSED_BUILTIN(BUILT_IN_NEW)\n+DEF_UNUSED_BUILTIN(BUILT_IN_VEC_NEW)\n+DEF_UNUSED_BUILTIN(BUILT_IN_DELETE)\n+DEF_UNUSED_BUILTIN(BUILT_IN_VEC_DELETE)"}, {"sha": "30030c64b26ee33796566250f5c04b65b32f8641", "filename": "gcc/c-common.c", "status": "modified", "additions": 169, "deletions": 571, "changes": 740, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -152,14 +152,6 @@ cpp_reader *parse_in;\t\t/* Declared in c-lex.h.  */\n \n \ttree default_function_type;\n \n-   Function types `int (int)', etc.\n-\n-\ttree int_ftype_int;\n-\ttree void_ftype;\n-\ttree void_ftype_ptr;\n-\ttree int_ftype_int;\n-\ttree ptr_ftype_sizetype;\n-\n    A VOID_TYPE node, packaged in a TREE_LIST.\n \n \ttree void_list_node;\n@@ -2869,33 +2861,42 @@ lang_get_alias_set (t)\n void\n c_common_nodes_and_builtins ()\n {\n+  enum builtin_type \n+  {\n+#define DEF_PRIMITIVE_TYPE(NAME, VALUE) NAME,\n+#define DEF_FUNCTION_TYPE_0(NAME, RETURN) NAME,\n+#define DEF_FUNCTION_TYPE_1(NAME, RETURN, ARG1) NAME,\n+#define DEF_FUNCTION_TYPE_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_FUNCTION_TYPE_3(NAME, RETURN, ARG1, ARG2, ARG3) NAME,\n+#define DEF_FUNCTION_TYPE_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_1(NAME, RETURN, ARG1) NAME,\n+#define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,\n+#define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n+#include \"builtin-types.def\"\n+#undef DEF_PRIMITIVE_TYPE\n+#undef DEF_FUNCTION_TYPE_0\n+#undef DEF_FUNCTION_TYPE_1\n+#undef DEF_FUNCTION_TYPE_2\n+#undef DEF_FUNCTION_TYPE_3\n+#undef DEF_FUNCTION_TYPE_4\n+#undef DEF_FUNCTION_TYPE_VAR_0\n+#undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_FUNCTION_TYPE_VAR_2\n+#undef DEF_POINTER_TYPE\n+    BT_LAST\n+  };\n+\n+  typedef enum builtin_type builtin_type;\n+\n+  tree builtin_types[(int)BT_LAST];\n   int wchar_type_size;\n   tree array_domain_type;\n-  tree temp;\n-  tree memcpy_ftype, memset_ftype, strlen_ftype;\n-  tree bzero_ftype, bcmp_ftype, puts_ftype, printf_ftype;\n-  tree fputs_ftype, fputc_ftype, fwrite_ftype, fprintf_ftype;\n-  tree endlink, int_endlink, double_endlink, unsigned_endlink;\n-  tree cstring_endlink, sizetype_endlink;\n-  tree ptr_ftype, ptr_ftype_unsigned;\n-  tree void_ftype_any, void_ftype_int, int_ftype_any;\n-  tree double_ftype_double, double_ftype_double_double;\n-  tree float_ftype_float, ldouble_ftype_ldouble;\n-  tree cfloat_ftype_cfloat, cdouble_ftype_cdouble, cldouble_ftype_cldouble;\n-  tree float_ftype_cfloat, double_ftype_cdouble, ldouble_ftype_cldouble;\n-  tree int_ftype_cptr_cptr_sizet, sizet_ftype_cstring_cstring;\n-  tree int_ftype_cstring_cstring, string_ftype_string_cstring;\n-  tree string_ftype_cstring_int, string_ftype_cstring_cstring;\n-  tree string_ftype_string_cstring_sizet, int_ftype_cstring_cstring_sizet;\n-  tree long_ftype_long;\n-  tree longlong_ftype_longlong;\n-  tree intmax_ftype_intmax;\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n   /* Either const char* or const void*.  */\n   tree traditional_cptr_type_node;\n   tree traditional_len_type_node;\n-  tree traditional_len_endlink;\n   tree va_list_ref_type_node;\n   tree va_list_arg_type_node;\n \n@@ -2986,6 +2987,9 @@ c_common_nodes_and_builtins ()\n \n   record_builtin_type (RID_VOID, NULL, void_type_node);\n \n+  void_zero_node = build_int_2 (0, 0);\n+  TREE_TYPE (void_zero_node) = void_type_node;\n+\n   void_list_node = build_void_list_node ();\n \n   /* Make a type to be the domain of a few array types\n@@ -3005,9 +3009,19 @@ c_common_nodes_and_builtins ()\n   int_array_type_node\n     = build_array_type (integer_type_node, array_domain_type);\n \n-#ifdef MD_INIT_BUILTINS\n+  string_type_node = build_pointer_type (char_type_node);\n+  const_string_type_node\n+    = build_pointer_type (build_qualified_type\n+\t\t\t  (char_type_node, TYPE_QUAL_CONST));\n+\n+  traditional_ptr_type_node = ((flag_traditional && \n+\t\t\t\tc_language != clk_cplusplus)\n+\t\t\t       ? string_type_node : ptr_type_node);\n+  traditional_cptr_type_node = ((flag_traditional && \n+\t\t\t\t c_language != clk_cplusplus)\n+\t\t\t       ? const_string_type_node : const_ptr_type_node);\n+\n   MD_INIT_BUILTINS;\n-#endif\n \n   /* This is special for C++ so functions can be overloaded.  */\n   wchar_type_node = get_identifier (flag_short_wchar\n@@ -3033,10 +3047,6 @@ c_common_nodes_and_builtins ()\n   wchar_array_type_node\n     = build_array_type (wchar_type_node, array_domain_type);\n \n-  string_type_node = build_pointer_type (char_type_node);\n-  const_string_type_node\n-    = build_pointer_type (build_type_variant (char_type_node, 1, 0));\n-\n   wint_type_node =\n     TREE_TYPE (identifier_global_value (get_identifier (WINT_TYPE)));\n \n@@ -3070,564 +3080,141 @@ c_common_nodes_and_builtins ()\n       va_list_ref_type_node = build_reference_type (va_list_type_node);\n     }\n  \n-  endlink = void_list_node;\n-  int_endlink = tree_cons (NULL_TREE, integer_type_node, endlink);\n-  double_endlink = tree_cons (NULL_TREE, double_type_node, endlink);\n-  unsigned_endlink = tree_cons (NULL_TREE, unsigned_type_node, endlink);\n-  cstring_endlink = tree_cons (NULL_TREE, const_string_type_node, endlink);\n-\n-  ptr_ftype = build_function_type (ptr_type_node, NULL_TREE);\n-  ptr_ftype_unsigned = build_function_type (ptr_type_node, unsigned_endlink);\n-  sizetype_endlink = tree_cons (NULL_TREE, TYPE_DOMAIN (sizetype), endlink);\n-  /* We realloc here because sizetype could be int or unsigned.  S'ok.  */\n-  ptr_ftype_sizetype = build_function_type (ptr_type_node, sizetype_endlink);\n-\n-  int_ftype_any = build_function_type (integer_type_node, NULL_TREE);\n-  void_ftype_any = build_function_type (void_type_node, NULL_TREE);\n-  void_ftype = build_function_type (void_type_node, endlink);\n-  void_ftype_int = build_function_type (void_type_node, int_endlink);\n-  void_ftype_ptr\n-    = build_function_type (void_type_node,\n- \t\t\t   tree_cons (NULL_TREE, ptr_type_node, endlink));\n-\n-  float_ftype_float\n-    = build_function_type (float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, float_type_node, endlink));\n-\n-  double_ftype_double\n-    = build_function_type (double_type_node, double_endlink);\n-\n-  ldouble_ftype_ldouble\n-    = build_function_type (long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_double_type_node,\n-\t\t\t\t      endlink));\n-\n-  double_ftype_double_double\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, double_type_node,\n-\t\t\t\t      double_endlink));\n-\n-  cfloat_ftype_cfloat\n-    = build_function_type (complex_float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_float_type_node,\n-\t\t\t\t      endlink));\n-  cdouble_ftype_cdouble\n-    = build_function_type (complex_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_double_type_node,\n-\t\t\t\t      endlink));\n-  cldouble_ftype_cldouble\n-    = build_function_type (complex_long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_long_double_type_node,\n-\t\t\t\t      endlink));\n-\n-  float_ftype_cfloat\n-    = build_function_type (float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_float_type_node,\n-\t\t\t\t      endlink));\n-  double_ftype_cdouble\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_double_type_node,\n-\t\t\t\t      endlink));\n-  ldouble_ftype_cldouble\n-    = build_function_type (long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, complex_long_double_type_node,\n-\t\t\t\t      endlink));\n-\n-  int_ftype_int\n-    = build_function_type (integer_type_node, int_endlink);\n-\n-  long_ftype_long\n-    = build_function_type (long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_integer_type_node,\n-\t\t\t\t      endlink));\n-\n-  longlong_ftype_longlong\n-    = build_function_type (long_long_integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n-\t\t\t\t      endlink));\n-\n-  intmax_ftype_intmax\n-    = build_function_type (intmax_type_node,\n-\t\t\t   tree_cons (NULL_TREE, intmax_type_node,\n-\t\t\t\t      endlink));\n-\n-  int_ftype_cptr_cptr_sizet\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_ptr_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n-  void_zero_node = build_int_2 (0, 0);\n-  TREE_TYPE (void_zero_node) = void_type_node;\n-\n-  /* Prototype for strcpy/strcat.  */\n-  string_ftype_string_cstring\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, string_type_node,\n-\t\t\t\t      cstring_endlink));\n-\n-  /* Prototype for strncpy/strncat.  */\n-  string_ftype_string_cstring_sizet\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n   traditional_len_type_node = ((flag_traditional && \n \t\t\t\tc_language != clk_cplusplus)\n \t\t\t       ? integer_type_node : sizetype);\n-  traditional_len_endlink = tree_cons (NULL_TREE, traditional_len_type_node,\n-\t\t\t\t       endlink);\n-\n-  /* Prototype for strcmp.  */\n-  int_ftype_cstring_cstring\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      cstring_endlink));\n-\n-  /* Prototype for strspn/strcspn.  */\n-  sizet_ftype_cstring_cstring\n-    = build_function_type (c_size_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      cstring_endlink));\n-\n-  /* Prototype for strncmp.  */\n-  int_ftype_cstring_cstring_sizet\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n-  /* Prototype for strstr, strpbrk, etc.  */\n-  string_ftype_cstring_cstring\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      cstring_endlink));\n-\n-  /* Prototype for strchr.  */\n-  string_ftype_cstring_int\n-    = build_function_type (string_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      int_endlink));\n-\n-  /* Prototype for strlen.  */\n-  strlen_ftype\n-    = build_function_type (traditional_len_type_node, cstring_endlink);\n-\n-  traditional_ptr_type_node = ((flag_traditional && \n-\t\t\t\tc_language != clk_cplusplus)\n-\t\t\t       ? string_type_node : ptr_type_node);\n-  traditional_cptr_type_node = ((flag_traditional && \n-\t\t\t\t c_language != clk_cplusplus)\n-\t\t\t       ? const_string_type_node : const_ptr_type_node);\n \n-  /* Prototype for memcpy.  */\n-  memcpy_ftype\n-    = build_function_type (traditional_ptr_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n-  /* Prototype for memset.  */\n-  memset_ftype\n-    = build_function_type (traditional_ptr_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t\t\t sizetype_endlink)));\n-\n-  /* Prototype for bzero.  */\n-  bzero_ftype\n-    = build_function_type (void_type_node,\n-\t\t\t   tree_cons (NULL_TREE, traditional_ptr_type_node,\n-\t\t\t\t      traditional_len_endlink));\n-\n-  /* Prototype for bcmp.  */\n-  bcmp_ftype\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, traditional_cptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t traditional_cptr_type_node,\n-\t\t\t\t\t\t traditional_len_endlink)));\n-\n-  /* Prototype for puts.  */\n-  puts_ftype\n-    = build_function_type (integer_type_node, cstring_endlink);\n-\n-  /* Prototype for printf.  */\n-  printf_ftype\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+#define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \\\n+  builtin_types[(int) ENUM] = VALUE;\n+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN)\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\\\n+    = build_function_type (builtin_types[(int) RETURN],\t\\\n+\t\t\t   void_list_node);\n+#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1)\t\t\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = build_function_type (builtin_types[(int) RETURN],\t\t\t\\\n+\t\t\t   tree_cons (NULL_TREE,\t\t\t\\\n+\t\t\t\t      builtin_types[(int) ARG1],\t\\\n+\t\t\t\t      void_list_node));\n+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2)\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\\\n+    = build_function_type \t\t\t\t\\\n+      (builtin_types[(int) RETURN],\t\t\t\\\n+       tree_cons (NULL_TREE,\t\t\t\t\\\n+\t\t  builtin_types[(int) ARG1],\t\t\\\n+\t\t  tree_cons (NULL_TREE,\t\t\t\\\n+\t\t\t     builtin_types[(int) ARG2],\t\\\n+\t\t\t     void_list_node)));\n+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3)\t\t \\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t \\\n+    = build_function_type\t\t\t\t\t\t \\\n+      (builtin_types[(int) RETURN],\t\t\t\t\t \\\n+       tree_cons (NULL_TREE,\t\t\t\t\t\t \\\n+\t\t  builtin_types[(int) ARG1],\t\t\t\t \\\n+\t\t  tree_cons (NULL_TREE,\t\t\t\t\t \\\n+\t\t\t     builtin_types[(int) ARG2],\t\t\t \\\n+\t\t\t     tree_cons (NULL_TREE,\t\t\t \\\n+\t\t\t\t\tbuiltin_types[(int) ARG3],\t \\\n+\t\t\t\t\tvoid_list_node))));\n+#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4)\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = build_function_type\t\t\t\t\t\t\\\n+      (builtin_types[(int) RETURN],\t\t\t\t\t\\\n+       tree_cons (NULL_TREE,\t\t\t\t\t\t\\\n+\t\t  builtin_types[(int) ARG1],\t\t\t\t\\\n+\t\t  tree_cons (NULL_TREE,\t\t\t\t\t\\\n+\t\t\t     builtin_types[(int) ARG2],\t\t\t\\\n+\t\t\t     tree_cons \t\t\t\t\t\\\n+\t\t\t     (NULL_TREE,\t\t\t\t\\\n+\t\t\t      builtin_types[(int) ARG3],\t \t\\\n+\t\t\t      tree_cons (NULL_TREE,\t\t\t\\\n+\t\t\t\t\t builtin_types[(int) ARG4],\t\\\n+\t\t\t\t\t void_list_node)))));\n+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN)\t\t\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\t\t\\\n+    = build_function_type (builtin_types[(int) RETURN], NULL_TREE);\n+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1)\t\t\t \\\n+   builtin_types[(int) ENUM]\t\t\t\t\t\t \\\n+    = build_function_type (builtin_types[(int) RETURN], \t\t \\\n+\t\t\t   tree_cons (NULL_TREE,\t\t\t \\\n+\t\t\t\t      builtin_types[(int) ARG1],\t \\\n \t\t\t\t      NULL_TREE));\n \n-  /* These stdio prototypes are declared using void* in place of\n-     FILE*.  They are only used for __builtin_ style calls, regular\n-     style builtin prototypes omit the arguments and merge those\n-     provided by stdio.h.  */\n-  /* Prototype for fwrite.  */\n-  fwrite_ftype\n-    = build_function_type (c_size_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, c_size_type_node,\n-\t\t\t\t\t\t tree_cons (NULL_TREE, c_size_type_node,\n-\t\t\t\t\t\t\t    tree_cons (NULL_TREE, ptr_type_node, endlink)))));\n-\n-  /* Prototype for fputc.  */\n-  fputc_ftype\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, integer_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node, endlink)));\n-\n-  /* Prototype for fputs.  */\n-  fputs_ftype\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE, ptr_type_node, endlink)));\n-\n-  /* Prototype for fprintf.  */\n-  fprintf_ftype\n-    = build_function_type (integer_type_node,\n-\t\t\t   tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t      tree_cons (NULL_TREE,\n-\t\t\t\t\t\t const_string_type_node,\n-\t\t\t\t\t\t NULL_TREE)));\n-\n-  builtin_function (\"__builtin_constant_p\", default_function_type,\n-\t\t    BUILT_IN_CONSTANT_P, BUILT_IN_NORMAL, NULL);\n-\n-  builtin_function (\"__builtin_return_address\", ptr_ftype_unsigned,\n-\t\t    BUILT_IN_RETURN_ADDRESS, BUILT_IN_NORMAL, NULL);\n-\n-  builtin_function (\"__builtin_frame_address\", ptr_ftype_unsigned,\n-\t\t    BUILT_IN_FRAME_ADDRESS, BUILT_IN_NORMAL, NULL);\n-\n-#ifdef EH_RETURN_DATA_REGNO\n-  builtin_function (\"__builtin_eh_return_data_regno\", int_ftype_int,\n-\t\t    BUILT_IN_EH_RETURN_DATA_REGNO, BUILT_IN_NORMAL, NULL);\n-#endif\n+#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2)\t\\\n+   builtin_types[(int) ENUM]\t\t\t\t\t\\\n+    = build_function_type \t\t\t\t\t\\\n+      (builtin_types[(int) RETURN],\t\t\t\t\\\n+       tree_cons (NULL_TREE,\t\t\t\t\t\\\n+\t\t  builtin_types[(int) ARG1],\t\t\t\\\n+\t\t  tree_cons (NULL_TREE,\t\t\t\t\\\n+\t\t\t     builtin_types[(int) ARG2],\t\t\\\n+\t\t\t     NULL_TREE)));\n+#define DEF_POINTER_TYPE(ENUM, TYPE)\t\t\t\\\n+  builtin_types[(int) ENUM]\t\t\t\t\\\n+    = build_pointer_type (builtin_types[(int) TYPE]);\n+#include \"builtin-types.def\"\n+#undef DEF_PRIMITIVE_TYPE\n+#undef DEF_FUNCTION_TYPE_1\n+#undef DEF_FUNCTION_TYPE_2\n+#undef DEF_FUNCTION_TYPE_3\n+#undef DEF_FUNCTION_TYPE_4\n+#undef DEF_FUNCTION_TYPE_VAR_0\n+#undef DEF_FUNCTION_TYPE_VAR_1\n+#undef DEF_POINTER_TYPE\n+\n+#define DEF_BUILTIN(ENUM, NAME, CLASS,\t\t\t\t\t\\\n+                    TYPE, LIBTYPE, BOTH_P, FALLBACK_P, NONANSI_P)\t\\\n+  if (NAME)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      tree decl;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (strncmp (NAME, \"__builtin_\", strlen (\"__builtin_\")) != 0)\t\\\n+\tabort ();\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      if (!BOTH_P)\t\t\t\t\t\t\t\\\n+\tdecl = builtin_function (NAME, builtin_types[TYPE], ENUM,\t\\\n+\t\t\t\t CLASS,\t\t\t\t\t\\\n+\t\t\t\t (FALLBACK_P\t\t\t\t\\\n+\t\t\t\t  ? (NAME + strlen (\"__builtin_\"))\t\\\n+\t\t\t\t  : NULL));\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\tdecl = builtin_function_2 (NAME,\t\t\t\t\\\n+\t\t\t\t   NAME + strlen (\"__builtin_\"),\t\\\n+\t\t\t\t   builtin_types[TYPE],\t\t\t\\\n+\t\t\t\t   builtin_types[LIBTYPE],\t\t\\\n+\t\t\t\t   ENUM,\t\t\t\t\\\n+\t\t\t\t   CLASS,\t\t\t\t\\\n+\t\t\t\t   FALLBACK_P,\t\t\t\t\\\n+\t\t\t\t   NONANSI_P,\t\t\t\t\\\n+\t\t\t\t   /*noreturn_p=*/0);\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      built_in_decls[(int) ENUM] = decl;\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\n+#include \"builtins.def\"\n+#undef DEF_BUILTIN\n \n-  builtin_function (\"__builtin_alloca\", ptr_ftype_sizetype,\n-\t\t    BUILT_IN_ALLOCA, BUILT_IN_NORMAL, \"alloca\");\n-  builtin_function_2 (\"__builtin_ffs\", \"ffs\",\n-\t\t      int_ftype_int, int_ftype_int,\n-\t\t      BUILT_IN_FFS, BUILT_IN_NORMAL, 0, 1, 0);\n-  /* Define alloca as builtin, unless SMALL_STACK.  */\n-#ifndef SMALL_STACK\n-  builtin_function_2 (NULL, \"alloca\", NULL_TREE, ptr_ftype_sizetype,\n-\t\t      BUILT_IN_ALLOCA, BUILT_IN_NORMAL, 0, 1, 0);\n-#endif\n   /* Declare _exit and _Exit just to mark them as non-returning.  */\n-  builtin_function_2 (NULL, \"_exit\", NULL_TREE, void_ftype_int,\n+  builtin_function_2 (NULL, \"_exit\", NULL_TREE, \n+\t\t      builtin_types[BT_FN_VOID_INT],\n \t\t      0, NOT_BUILT_IN, 0, 1, 1);\n-  builtin_function_2 (NULL, \"_Exit\", NULL_TREE, void_ftype_int,\n+  builtin_function_2 (NULL, \"_Exit\", NULL_TREE, \n+\t\t      builtin_types[BT_FN_VOID_INT],\n \t\t      0, NOT_BUILT_IN, 0, !flag_isoc99, 1);\n \n-  builtin_function_2 (\"__builtin_index\", \"index\",\n-\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n-\t\t      BUILT_IN_INDEX, BUILT_IN_NORMAL, 1, 1, 0);\n-  builtin_function_2 (\"__builtin_rindex\", \"rindex\",\n-\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n-\t\t      BUILT_IN_RINDEX, BUILT_IN_NORMAL, 1, 1, 0);\n-\n-  /* The system prototypes for these functions have many\n-     variations, so don't specify parameters to avoid conflicts.\n-     The expand_* functions check the argument types anyway.  */\n-  builtin_function_2 (\"__builtin_bzero\", \"bzero\",\n-\t\t      bzero_ftype, void_ftype_any,\n-\t\t      BUILT_IN_BZERO, BUILT_IN_NORMAL, 1, 1, 0);\n-  builtin_function_2 (\"__builtin_bcmp\", \"bcmp\",\n-\t\t      bcmp_ftype, int_ftype_any,\n-\t\t      BUILT_IN_BCMP, BUILT_IN_NORMAL, 1, 1, 0);\n-\n-  builtin_function_2 (\"__builtin_abs\", \"abs\",\n-\t\t      int_ftype_int, int_ftype_int,\n-\t\t      BUILT_IN_ABS, BUILT_IN_NORMAL, 0, 0, 0);\n-  builtin_function_2 (\"__builtin_fabsf\", \"fabsf\",\n-\t\t      float_ftype_float, float_ftype_float,\n-\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n-  builtin_function_2 (\"__builtin_fabs\", \"fabs\",\n-\t\t      double_ftype_double, double_ftype_double,\n-\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n-  builtin_function_2 (\"__builtin_fabsl\", \"fabsl\",\n-\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n-\t\t      BUILT_IN_FABS, BUILT_IN_NORMAL, 0, 0, 0);\n-  builtin_function_2 (\"__builtin_labs\", \"labs\",\n-\t\t      long_ftype_long, long_ftype_long,\n-\t\t      BUILT_IN_ABS, BUILT_IN_NORMAL, 0, 0, 0);\n-  builtin_function_2 (\"__builtin_llabs\", \"llabs\",\n-\t\t      longlong_ftype_longlong, longlong_ftype_longlong,\n-\t\t      BUILT_IN_ABS, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_imaxabs\", \"imaxabs\",\n-\t\t      intmax_ftype_intmax, intmax_ftype_intmax,\n-\t\t      BUILT_IN_ABS, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-\n-  builtin_function (\"__builtin_saveregs\", ptr_ftype, BUILT_IN_SAVEREGS,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_classify_type\", default_function_type,\n-\t\t    BUILT_IN_CLASSIFY_TYPE, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_next_arg\", ptr_ftype, BUILT_IN_NEXT_ARG,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_args_info\", int_ftype_int, BUILT_IN_ARGS_INFO,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_setjmp\",\n-\t\t    build_function_type (integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_SETJMP, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_longjmp\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE, ptr_type_node,\n-\t\t\t\t\t\t    int_endlink)),\n-\t\t    BUILT_IN_LONGJMP, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_trap\", void_ftype, BUILT_IN_TRAP,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-\n-  /* ISO C99 IEEE Unordered compares.  */\n-  builtin_function (\"__builtin_isgreater\", default_function_type,\n-\t\t    BUILT_IN_ISGREATER, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_isgreaterequal\", default_function_type,\n-\t\t    BUILT_IN_ISGREATEREQUAL, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_isless\", default_function_type,\n-\t\t    BUILT_IN_ISLESS, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_islessequal\", default_function_type,\n-\t\t    BUILT_IN_ISLESSEQUAL, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_islessgreater\", default_function_type,\n-\t\t    BUILT_IN_ISLESSGREATER, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_isunordered\", default_function_type,\n-\t\t    BUILT_IN_ISUNORDERED, BUILT_IN_NORMAL, NULL);\n-\n-  /* Untyped call and return.  */\n-  builtin_function (\"__builtin_apply_args\", ptr_ftype,\n-\t\t    BUILT_IN_APPLY_ARGS, BUILT_IN_NORMAL, NULL);\n-\n-  temp = tree_cons (NULL_TREE,\n-\t\t    build_pointer_type (build_function_type (void_type_node,\n-\t\t\t\t\t\t\t     NULL_TREE)),\n-\t\t    tree_cons (NULL_TREE, ptr_type_node, sizetype_endlink));\n-  builtin_function (\"__builtin_apply\",\n-\t\t    build_function_type (ptr_type_node, temp),\n-\t\t    BUILT_IN_APPLY, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_return\", void_ftype_ptr,\n-\t\t    BUILT_IN_RETURN, BUILT_IN_NORMAL, NULL);\n-\n-  /* Support for varargs.h and stdarg.h.  */\n-  builtin_function (\"__builtin_varargs_start\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ref_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_VARARGS_START, BUILT_IN_NORMAL, NULL);\n-\n-  builtin_function (\"__builtin_stdarg_start\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ref_type_node,\n-\t\t\t\t\t\t    NULL_TREE)),\n-\t\t    BUILT_IN_STDARG_START, BUILT_IN_NORMAL, NULL);\n-\n-  builtin_function (\"__builtin_va_end\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ref_type_node,\n-\t\t\t\t\t\t    endlink)),\n-\t\t    BUILT_IN_VA_END, BUILT_IN_NORMAL, NULL);\n-\n-  builtin_function (\"__builtin_va_copy\",\n-\t\t    build_function_type (void_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    va_list_ref_type_node,\n-\t\t\t\t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t\t\t      va_list_arg_type_node,\n-\t\t\t\t\t\t      endlink))),\n-\t\t    BUILT_IN_VA_COPY, BUILT_IN_NORMAL, NULL);\n-\n-  /* ??? Ought to be `T __builtin_expect(T, T)' for any type T.  */\n-  builtin_function (\"__builtin_expect\",\n-\t\t    build_function_type (long_integer_type_node,\n-\t\t\t\t\t tree_cons (NULL_TREE,\n-\t\t\t\t\t\t    long_integer_type_node,\n-\t\t\t\t\t\t    tree_cons (NULL_TREE,\n-\t\t\t\t\t\t\tlong_integer_type_node,\n-\t\t\t\t\t\t\tendlink))),\n-\t\t    BUILT_IN_EXPECT, BUILT_IN_NORMAL, NULL);\n-\n-  /* Currently under experimentation.  */\n-  builtin_function_2 (\"__builtin_memcpy\", \"memcpy\",\n-\t\t      memcpy_ftype, memcpy_ftype,\n-\t\t      BUILT_IN_MEMCPY, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_memcmp\", \"memcmp\",\n-\t\t      int_ftype_cptr_cptr_sizet, int_ftype_cptr_cptr_sizet,\n-\t\t      BUILT_IN_MEMCMP, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_memset\", \"memset\",\n-\t\t      memset_ftype, memset_ftype,\n-\t\t      BUILT_IN_MEMSET, BUILT_IN_NORMAL, 1, 0, 0);\n-  built_in_decls[BUILT_IN_STRCMP] =\n-    builtin_function_2 (\"__builtin_strcmp\", \"strcmp\",\n-\t\t\tint_ftype_cstring_cstring, int_ftype_cstring_cstring,\n-\t\t\tBUILT_IN_STRCMP, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strncmp\", \"strncmp\",\n-\t\t      int_ftype_cstring_cstring_sizet,\n-\t\t      int_ftype_cstring_cstring_sizet,\n-\t\t      BUILT_IN_STRNCMP, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strstr\", \"strstr\",\n-\t\t      string_ftype_cstring_cstring, string_ftype_cstring_cstring,\n-\t\t      BUILT_IN_STRSTR, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strpbrk\", \"strpbrk\",\n-\t\t      string_ftype_cstring_cstring, string_ftype_cstring_cstring,\n-\t\t      BUILT_IN_STRPBRK, BUILT_IN_NORMAL, 1, 0, 0);\n-  built_in_decls[BUILT_IN_STRCHR] =\n-    builtin_function_2 (\"__builtin_strchr\", \"strchr\",\n-\t\t\tstring_ftype_cstring_int, string_ftype_cstring_int,\n-\t\t\tBUILT_IN_STRCHR, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strrchr\", \"strrchr\",\n-\t\t      string_ftype_cstring_int, string_ftype_cstring_int,\n-\t\t      BUILT_IN_STRRCHR, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strcpy\", \"strcpy\",\n-\t\t      string_ftype_string_cstring, string_ftype_string_cstring,\n-\t\t      BUILT_IN_STRCPY, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strncpy\", \"strncpy\",\n-\t\t      string_ftype_string_cstring_sizet,\n-\t\t      string_ftype_string_cstring_sizet,\n-\t\t      BUILT_IN_STRNCPY, BUILT_IN_NORMAL, 1, 0, 0);\n-  built_in_decls[BUILT_IN_STRCAT] =\n-    builtin_function_2 (\"__builtin_strcat\", \"strcat\",\n-\t\t\tstring_ftype_string_cstring,\n-\t\t\tstring_ftype_string_cstring,\n-\t\t\tBUILT_IN_STRCAT, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strncat\", \"strncat\",\n-\t\t      string_ftype_string_cstring_sizet,\n-\t\t      string_ftype_string_cstring_sizet,\n-\t\t      BUILT_IN_STRNCAT, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strspn\", \"strspn\",\n-\t\t      sizet_ftype_cstring_cstring, sizet_ftype_cstring_cstring,\n-\t\t      BUILT_IN_STRSPN, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_strcspn\", \"strcspn\",\n-\t\t      sizet_ftype_cstring_cstring, sizet_ftype_cstring_cstring,\n-\t\t      BUILT_IN_STRCSPN, BUILT_IN_NORMAL, 1, 0, 0);\n-  built_in_decls[BUILT_IN_STRLEN] =\n-    builtin_function_2 (\"__builtin_strlen\", \"strlen\",\n-\t\t\tstrlen_ftype, strlen_ftype,\n-\t\t\tBUILT_IN_STRLEN, BUILT_IN_NORMAL, 1, 0, 0);\n-\n-  builtin_function_2 (\"__builtin_sqrtf\", \"sqrtf\",\n-\t\t      float_ftype_float, float_ftype_float,\n-\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_fsqrt\", \"sqrt\",\n-\t\t      double_ftype_double, double_ftype_double,\n-\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_sqrtl\", \"sqrtl\",\n-\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n-\t\t      BUILT_IN_FSQRT, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_sinf\", \"sinf\",\n-\t\t      float_ftype_float, float_ftype_float,\n-\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_sin\", \"sin\",\n-\t\t      double_ftype_double, double_ftype_double,\n-\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_sinl\", \"sinl\",\n-\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n-\t\t      BUILT_IN_SIN, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_cosf\", \"cosf\",\n-\t\t      float_ftype_float, float_ftype_float,\n-\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_cos\", \"cos\",\n-\t\t      double_ftype_double, double_ftype_double,\n-\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_cosl\", \"cosl\",\n-\t\t      ldouble_ftype_ldouble, ldouble_ftype_ldouble,\n-\t\t      BUILT_IN_COS, BUILT_IN_NORMAL, 1, 0, 0);\n-\n-  /* ISO C99 complex arithmetic functions.  */\n-  builtin_function_2 (\"__builtin_conjf\", \"conjf\",\n-\t\t      cfloat_ftype_cfloat, cfloat_ftype_cfloat,\n-\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_conj\", \"conj\",\n-\t\t      cdouble_ftype_cdouble, cdouble_ftype_cdouble,\n-\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_conjl\", \"conjl\",\n-\t\t      cldouble_ftype_cldouble, cldouble_ftype_cldouble,\n-\t\t      BUILT_IN_CONJ, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_crealf\", \"crealf\",\n-\t\t      float_ftype_cfloat, float_ftype_cfloat,\n-\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_creal\", \"creal\",\n-\t\t      double_ftype_cdouble, double_ftype_cdouble,\n-\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_creall\", \"creall\",\n-\t\t      ldouble_ftype_cldouble, ldouble_ftype_cldouble,\n-\t\t      BUILT_IN_CREAL, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_cimagf\", \"cimagf\",\n-\t\t      float_ftype_cfloat, float_ftype_cfloat,\n-\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_cimag\", \"cimag\",\n-\t\t      double_ftype_cdouble, double_ftype_cdouble,\n-\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-  builtin_function_2 (\"__builtin_cimagl\", \"cimagl\",\n-\t\t      ldouble_ftype_cldouble, ldouble_ftype_cldouble,\n-\t\t      BUILT_IN_CIMAG, BUILT_IN_NORMAL, 0, !flag_isoc99, 0);\n-\n-  built_in_decls[BUILT_IN_PUTCHAR] =\n-    builtin_function (\"__builtin_putchar\", int_ftype_int,\n-\t\t      BUILT_IN_PUTCHAR, BUILT_IN_NORMAL, \"putchar\");\n-  built_in_decls[BUILT_IN_PUTS] =\n-    builtin_function (\"__builtin_puts\", puts_ftype,\n-\t\t      BUILT_IN_PUTS, BUILT_IN_NORMAL, \"puts\");\n-  builtin_function_2 (\"__builtin_printf\", \"printf\",\n-\t\t      printf_ftype, printf_ftype,\n-\t\t      BUILT_IN_PRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n-  builtin_function_2 (\"__builtin_fprintf\", \"fprintf\",\n-\t\t      fprintf_ftype, fprintf_ftype,\n-\t\t      BUILT_IN_FPRINTF, BUILT_IN_FRONTEND, 1, 0, 0);\n-  built_in_decls[BUILT_IN_FWRITE] =\n-    builtin_function (\"__builtin_fwrite\", fwrite_ftype,\n-\t\t      BUILT_IN_FWRITE, BUILT_IN_NORMAL, \"fwrite\");\n-  built_in_decls[BUILT_IN_FPUTC] =\n-    builtin_function (\"__builtin_fputc\", fputc_ftype,\n-\t\t      BUILT_IN_FPUTC, BUILT_IN_NORMAL, \"fputc\");\n-  /* Declare the __builtin_ style with arguments and the regular style\n-     without them.  We rely on stdio.h to supply the arguments for the\n-     regular style declaration since we had to use void* instead of\n-     FILE* in the __builtin_ prototype supplied here.  */\n-  built_in_decls[BUILT_IN_FPUTS] =\n-    builtin_function_2 (\"__builtin_fputs\", \"fputs\",\n-\t\t\tfputs_ftype, int_ftype_any,\n-\t\t\tBUILT_IN_FPUTS, BUILT_IN_NORMAL, 1, 0, 0);\n-\n   /* Declare these functions non-returning\n      to avoid spurious \"control drops through\" warnings.  */\n   builtin_function_2 (NULL, \"abort\",\n \t\t      NULL_TREE, ((c_language == clk_cplusplus)\n-\t\t\t\t  ? void_ftype : void_ftype_any),\n+\t\t\t\t  ? builtin_types[BT_FN_VOID]\n+\t\t\t\t  : builtin_types[BT_FN_VOID_VAR]),\n \t\t      0, NOT_BUILT_IN, 0, 0, 1);\n \n   builtin_function_2 (NULL, \"exit\",\n \t\t      NULL_TREE, ((c_language == clk_cplusplus)\n-\t\t\t\t  ? void_ftype_int : void_ftype_any),\n+\t\t\t\t  ? builtin_types[BT_FN_VOID_INT]\n+\t\t\t\t  : builtin_types[BT_FN_VOID_VAR]),\n \t\t      0, NOT_BUILT_IN, 0, 0, 1);\n \n-#if 0\n-  /* Support for these has not been written in either expand_builtin\n-     or build_function_call.  */\n-  builtin_function (\"__builtin_div\", default_ftype, BUILT_IN_DIV,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_ldiv\", default_ftype, BUILT_IN_LDIV,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_ffloor\", double_ftype_double, BUILT_IN_FFLOOR,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_fceil\", double_ftype_double, BUILT_IN_FCEIL,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_fmod\", double_ftype_double_double,\n-\t\t    BUILT_IN_FMOD, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_frem\", double_ftype_double_double,\n-\t\t    BUILT_IN_FREM, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_getexp\", double_ftype_double, BUILT_IN_GETEXP,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_getman\", double_ftype_double, BUILT_IN_GETMAN,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-#endif\n-\n   main_identifier_node = get_identifier (\"main\");\n \n   /* ??? Perhaps there's a better place to do this.  But it is related\n@@ -3815,22 +3402,33 @@ expand_tree_builtin (function, params, coerced_params)\n   switch (DECL_FUNCTION_CODE (function))\n     {\n     case BUILT_IN_ABS:\n+    case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n+    case BUILT_IN_IMAXABS:\n     case BUILT_IN_FABS:\n+    case BUILT_IN_FABSL:\n+    case BUILT_IN_FABSF:\n       if (coerced_params == 0)\n \treturn integer_zero_node;\n       return build_unary_op (ABS_EXPR, TREE_VALUE (coerced_params), 0);\n \n     case BUILT_IN_CONJ:\n+    case BUILT_IN_CONJF:\n+    case BUILT_IN_CONJL:\n       if (coerced_params == 0)\n \treturn integer_zero_node;\n       return build_unary_op (CONJ_EXPR, TREE_VALUE (coerced_params), 0);\n \n     case BUILT_IN_CREAL:\n+    case BUILT_IN_CREALF:\n+    case BUILT_IN_CREALL:\n       if (coerced_params == 0)\n \treturn integer_zero_node;\n       return build_unary_op (REALPART_EXPR, TREE_VALUE (coerced_params), 0);\n \n     case BUILT_IN_CIMAG:\n+    case BUILT_IN_CIMAGF:\n+    case BUILT_IN_CIMAGL:\n       if (coerced_params == 0)\n \treturn integer_zero_node;\n       return build_unary_op (IMAGPART_EXPR, TREE_VALUE (coerced_params), 0);"}, {"sha": "c1b273e6e30177fb32edd3c316518a7344a1bd81", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -148,11 +148,6 @@ enum c_tree_index\n     CTI_C_BOOL_FALSE,\n     CTI_DEFAULT_FUNCTION_TYPE,\n \n-    CTI_VOID_FTYPE,\n-    CTI_VOID_FTYPE_PTR,\n-    CTI_INT_FTYPE_INT,\n-    CTI_PTR_FTYPE_SIZETYPE,\n-\n     CTI_G77_INTEGER_TYPE,\n     CTI_G77_UINTEGER_TYPE,\n     CTI_G77_LONGINT_TYPE,\n@@ -207,10 +202,6 @@ struct c_common_identifier\n #define const_string_type_node\t\tc_global_trees[CTI_CONST_STRING_TYPE]\n \n #define default_function_type\t\tc_global_trees[CTI_DEFAULT_FUNCTION_TYPE]\n-#define void_ftype\t\t\tc_global_trees[CTI_VOID_FTYPE]\n-#define void_ftype_ptr\t\t\tc_global_trees[CTI_VOID_FTYPE_PTR]\n-#define int_ftype_int\t\t\tc_global_trees[CTI_INT_FTYPE_INT]\n-#define ptr_ftype_sizetype\t\tc_global_trees[CTI_PTR_FTYPE_SIZETYPE]\n \n /* g77 integer types, which which must be kept in sync with f/com.h */\n #define g77_integer_type_node\t\tc_global_trees[CTI_G77_INTEGER_TYPE]"}, {"sha": "75c8f8a3012c456e1c59303bca8b3b28a46095d7", "filename": "gcc/c-decl.c", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -3056,36 +3056,6 @@ init_decl_processing ()\n \t\t\t    g77_ulongint_type_node));\n     }\n \n-  builtin_function (\"__builtin_aggregate_incoming_address\",\n-\t\t    build_function_type (ptr_type_node, NULL_TREE),\n-\t\t    BUILT_IN_AGGREGATE_INCOMING_ADDRESS,\n-\t\t    BUILT_IN_NORMAL, NULL);\n-\n-  /* Hooks for the DWARF 2 __throw routine.  */\n-  builtin_function (\"__builtin_unwind_init\",\n-\t\t    build_function_type (void_type_node, endlink),\n-\t\t    BUILT_IN_UNWIND_INIT, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_dwarf_cfa\", ptr_ftype_void,\n-\t\t    BUILT_IN_DWARF_CFA, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_dwarf_fp_regnum\",\n-\t\t    build_function_type (unsigned_type_node, endlink),\n-\t\t    BUILT_IN_DWARF_FP_REGNUM, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_init_dwarf_reg_size_table\", void_ftype_ptr,\n-\t\t    BUILT_IN_INIT_DWARF_REG_SIZES, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_frob_return_addr\", ptr_ftype_ptr,\n-\t\t    BUILT_IN_FROB_RETURN_ADDR, BUILT_IN_NORMAL, NULL);\n-  builtin_function (\"__builtin_extract_return_addr\", ptr_ftype_ptr,\n-\t\t    BUILT_IN_EXTRACT_RETURN_ADDR, BUILT_IN_NORMAL, NULL);\n-  builtin_function\n-    (\"__builtin_eh_return\",\n-     build_function_type (void_type_node,\n-\t\t\t  tree_cons (NULL_TREE,\n-\t\t\t\t     type_for_mode (ptr_mode, 0),\n-\t\t\t\t     tree_cons (NULL_TREE,\n-\t\t\t\t\t\tptr_type_node,\n-\t\t\t\t\t\tendlink))),\n-     BUILT_IN_EH_RETURN, BUILT_IN_NORMAL, NULL);\n-\n   pedantic_lvalues = pedantic;\n \n   make_fname_decl = c_make_fname_decl;"}, {"sha": "bf9bd893529b5181e789a95b3ada52cdf7c1d3a8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -1,3 +1,7 @@\n+2001-05-26  Mark Mitchell <mark@codesourcery.com>\n+\n+\t* decl.c (init_decl_processing): Tweak.\n+\n 2001-05-24  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl.c (duplicate_decls): Tidy."}, {"sha": "06f19cdeb0bfea0d34e08f93b603cddb4c842082", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -6325,6 +6325,8 @@ void\n init_decl_processing ()\n {\n   tree fields[20];\n+  tree void_ftype;\n+  tree void_ftype_ptr;\n \n   /* Check to see that the user did not specify an invalid combination\n      of command-line options.  */\n@@ -6452,6 +6454,11 @@ init_decl_processing ()\n   vtt_parm_type = build_pointer_type (const_ptr_type_node);\n   lang_type_promotes_to = convert_type_from_ellipsis;\n \n+  void_ftype = build_function_type (void_type_node, void_list_node);\n+  void_ftype_ptr = build_function_type (void_type_node,\n+\t\t\t\t\ttree_cons (NULL_TREE,\n+\t\t\t\t\t\t   ptr_type_node, \n+\t\t\t\t\t\t   void_list_node));\n   void_ftype_ptr\n     = build_exception_variant (void_ftype_ptr, empty_except_spec);\n \n@@ -6528,13 +6535,19 @@ init_decl_processing ()\n \n   {\n     tree bad_alloc_type_node, newtype, deltype;\n-    \n+    tree ptr_ftype_sizetype;\n+\n     if (flag_honor_std)\n       push_namespace (std_identifier);\n     bad_alloc_type_node = xref_tag\n       (class_type_node, get_identifier (\"bad_alloc\"), 1);\n     if (flag_honor_std)\n       pop_namespace ();\n+    ptr_ftype_sizetype \n+      = build_function_type (ptr_type_node,\n+\t\t\t     tree_cons (NULL_TREE,\n+\t\t\t\t\tc_size_type_node,\n+\t\t\t\t\tvoid_list_node));\n     newtype = build_exception_variant\n       (ptr_ftype_sizetype, add_exception_specifier\n        (NULL_TREE, bad_alloc_type_node, -1));"}, {"sha": "3b8d0a17c495cb70baafa008eea730e9912aef7c", "filename": "gcc/defaults.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -343,5 +343,13 @@ do {\t\t\t\t\t\t\t\t\\\n #define TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER true\n #endif\n \n+/* Define this macro if you have any machine-specific builtin\n+   functions that need to be defined.  It should be a C expression\n+   that performs the necessary setup. */\n+\n+#ifndef MD_INIT_BUILTINS\n+#define MD_INIT_BUILTINS\n+#endif\n+\n #endif  /* GCC_DEFAULTS_H */\n "}, {"sha": "838368bb07d299c034227918d4c0bb1729d7b346", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1084128584fe3cb13ba54924a80d1647b7f73387/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1084128584fe3cb13ba54924a80d1647b7f73387", "patch": "@@ -84,7 +84,7 @@ extern const char *const built_in_class_names[4];\n /* Codes that identify the various built in functions\n    so that expand_call can identify them quickly.  */\n \n-#define DEF_BUILTIN(x) x,\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA) ENUM,\n enum built_in_function\n {\n #include \"builtins.def\""}]}