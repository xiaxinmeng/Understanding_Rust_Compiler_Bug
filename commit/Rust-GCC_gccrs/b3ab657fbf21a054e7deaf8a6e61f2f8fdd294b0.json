{"sha": "b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNhYjY1N2ZiZjIxYTA1NGU3ZGVhZjhhNmU2MWYyZjhmZGQyOTRiMA==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-18T00:10:29Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-11-18T00:10:29Z"}, "message": "Initial revision\n\nFrom-SVN: r8497", "tree": {"sha": "18f486589a6fd5ce1fd03312d65698762fcf929b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18f486589a6fd5ce1fd03312d65698762fcf929b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/comments", "author": null, "committer": null, "parents": [{"sha": "0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d64f74cb323b4f1d9ea6b8b1b4d525bf9cee469"}], "stats": {"total": 914, "additions": 914, "deletions": 0}, "files": [{"sha": "265d9ba63fff0b95a1f9102ed7721e9022d7fbd2", "filename": "gcc/config/sparc/aout.h", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Faout.h?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,25 @@\n+/* Definitions of target machine for GNU compiler, for SPARC using a.out.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Contributed by Michael Tiemann (tiemann@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"aoutos.h\"\t\t/* A.out definitions */\n+#include \"sparc/sparc.h\"\t/* SPARC definitions */\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dsparc -D__GCC_NEW_VARARGS__\""}, {"sha": "c74ef6a93a5cd4e2346a96ed9ed6fc95788b2a86", "filename": "gcc/config/sparc/lb1spc.asm", "status": "added", "additions": 486, "deletions": 0, "changes": 486, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flb1spc.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spc.asm?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,486 @@\n+/* This is an assembly language implementation of libgcc1.c for the sparc\n+   processor.\n+\n+   These routines are derived from the Sparc Architecture Manual, version 8,\n+   slightly edited to match the desired calling convention, and also to\n+   optimize them for our purposes.  */\n+\n+#ifdef L_mulsi3\n+.text\n+\t.align 4\n+\t.global .umul\n+\t.proc 4\n+.umul:\n+\tor\t%o0, %o1, %o4\t! logical or of multiplier and multiplicand\n+\tmov\t%o0, %y\t\t! multiplier to Y register\n+\tandncc\t%o4, 0xfff, %o5\t! mask out lower 12 bits\n+\tbe\tmul_shortway\t! can do it the short way\n+\tandcc\t%g0, %g0, %o4\t! zero the partial product and clear NV cc\n+\t!\n+\t! long multiply\n+\t!\n+\tmulscc\t%o4, %o1, %o4\t! first iteration of 33\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\t! 32nd iteration\n+\tmulscc\t%o4, %g0, %o4\t! last iteration only shifts\n+\t! the upper 32 bits of product are wrong, but we do not care\n+\tretl\n+\trd\t%y, %o0\n+\t!\n+\t! short multiply\n+\t!\n+mul_shortway:\n+\tmulscc\t%o4, %o1, %o4\t! first iteration of 13\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\n+\tmulscc\t%o4, %o1, %o4\t! 12th iteration\n+\tmulscc\t%o4, %g0, %o4\t! last iteration only shifts\n+\trd\t%y, %o5\n+\tsll\t%o4, 12, %o4\t! left shift partial product by 12 bits\n+\tsrl\t%o5, 20, %o5\t! right shift partial product by 20 bits\n+\tretl\n+\tor\t%o5, %o4, %o0\t! merge for true product\n+#endif\n+\n+#ifdef L_divsi3\n+.text\n+\t.align 4\n+\t.global\t.udiv\n+\t.proc 4\n+.udiv:\n+\tsave\t%sp, -64, %sp\n+\tb\tdivide\n+\tmov\t0, %i2\t\t! result always positive\n+\t.global .div\n+\t.proc 4\n+.div:\n+\tsave\t%sp, -64, %sp\n+\torcc\t%i1, %i0, %g0\t! is either operand negative\n+\tbge\tdivide\t\t! if not, skip this junk\n+\txor\t%i1, %i0, %i2\t! record sign of result in sign of %i2\n+\ttst\t%i1\n+\tbge\t2f\n+\ttst\t%i0\n+\t! %i1 < 0\n+\tbge\tdivide\n+\tneg\t%i1\n+2:\t! %i0 < 0\n+\tneg\t%i0\n+\t!\tFALL THROUGH\n+divide:\n+\t! Compute size of quotient, scale comparand.\n+\torcc\t%i1, %g0, %l1\t\t! movcc %i1, %l1\n+\tte\t2\t\t\t! if %i1 = 0\n+\tmov\t%i0, %i3\n+\tmov\t0, %i2\n+\tsethi\t%hi(1<<(32-2-1)), %l3\n+\tcmp \t%i3, %l3\n+\tblu\tnot_really_big\n+\tmov\t0, %l0\n+\t!\n+\t! Here, the %i0 is >= 2^(31-3) or so.  We must be careful here,\n+\t! as our usual 3-at-a-shot divide step will cause overflow and havoc.\n+\t! The total number of bits in the result here is 3*%l0+%l4, where\n+\t! %l4 <= 3.\n+\t! Compute %l0 in an unorthodox manner: know we need to Shift %l1 into\n+\t! the top decade: so do not even bother to compare to %i3.\n+1:\tcmp\t%l1, %l3\n+\tbgeu\t3f\n+\tmov\t1, %l4\n+\tsll\t%l1, 3, %l1\n+\tb\t1b\n+\tinc\t%l0\n+\t!\n+\t! Now compute %l4\n+\t!\n+2:\taddcc\t%l1, %l1, %l1\n+\tbcc\tnot_too_big\n+\tadd\t%l4, 1, %l4\n+\t!\n+\t! We are here if the %i1 overflowed when Shifting.\n+\t! This means that %i3 has the high-order bit set.\n+\t! Restore %l1 and subtract from %i3.\n+\tsll\t%l3, 2, %l3\n+\tsrl\t%l1, 1, %l1\n+\tadd\t%l1, %l3, %l1\n+\tb\tdo_single_div\n+\tdec\t%l4\n+not_too_big:\n+3:\tcmp\t%l1, %i3\n+\tblu\t2b\n+\tnop\n+\tbe\tdo_single_div\n+\tnop\n+\t! %l1 > %i3: went too far: back up 1 step\n+\t! \tsrl\t%l1, 1, %l1\n+\t!\tdec\t%l4\n+\t! do single-bit divide steps\n+\t!\n+\t! We have to be careful here.  We know that %i3 >= %l1, so we can do the\n+\t! first divide step without thinking.  BUT, the others are conditional,\n+\t! and are only done if %i3 >= 0.  Because both %i3 and %l1 may have the\n+\t! high-order bit set in the first step, just falling into the regular\n+\t! division loop will mess up the first time around.\n+\t! So we unroll slightly...\n+do_single_div:\n+\tdeccc\t%l4\n+\tbl\tend_regular_divide\n+\tnop\n+\tsub\t%i3, %l1, %i3\n+\tmov\t1, %i2\n+\tb\tend_single_divloop\n+\tnop\n+single_divloop:\n+\tsll\t%i2, 1, %i2\n+\tbl\t1f\n+\tsrl\t%l1, 1, %l1\n+\t! %i3 >= 0\n+\tsub\t%i3, %l1, %i3\n+\tb\t2f\n+\tinc\t%i2\n+1:\t! %i3 < 0\n+\tadd\t%i3, %l1, %i3\n+\tdec\t%i2\n+end_single_divloop:\n+2:\tdeccc\t%l4\n+\tbge\tsingle_divloop\n+\ttst\t%i3\n+\tb\tend_regular_divide\n+\tnop\n+not_really_big:\n+1:\tsll\t%l1, 3, %l1\n+\tcmp\t%l1, %i3\n+\tbleu\t1b\n+\tinccc\t%l0\n+\tbe\tgot_result\n+\tdec\t%l0\n+do_regular_divide:\n+\t! Do the main division iteration\n+\ttst\t%i3\n+\t! Fall through into divide loop\n+divloop:\n+\tsll\t%i2, 3, %i2\n+\t! depth 1, accumulated bits 0\n+\tbl\tL.1.8\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 2, accumulated bits 1\n+\tbl\tL.2.9\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits 3\n+\tbl\tL.3.11\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (3*2+1), %i2\n+L.3.11:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (3*2-1), %i2\n+L.2.9:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits 1\n+\tbl\tL.3.9\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (1*2+1), %i2\n+L.3.9:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (1*2-1), %i2\n+L.1.8:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 2, accumulated bits -1\n+\tbl\tL.2.7\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits -1\n+\tbl\tL.3.7\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-1*2+1), %i2\n+L.3.7:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-1*2-1), %i2\n+L.2.7:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits -3\n+\tbl\tL.3.5\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-3*2+1), %i2\n+L.3.5:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-3*2-1), %i2\n+end_regular_divide:\n+9:\tdeccc\t%l0\n+\tbge\tdivloop\n+\ttst\t%i3\n+\tbge\tgot_result\n+\tnop\n+\t! non-restoring fixup here\n+\tdec\t%i2\n+got_result:\n+\ttst\t%i2\n+\tbge\t1f\n+\trestore\n+\t! answer < 0\n+\tretl\t\t! leaf-routine return\n+\tneg\t%o2, %o0\t! quotient <- -%i2\n+1:\tretl\t\t! leaf-routine return\n+\tmov\t%o2, %o0\t! quotient <- %i2\n+#endif\n+\n+#ifdef L_modsi3\n+.text\n+\t.align 4\n+\t.global\t.urem\n+\t.proc 4\n+.urem:\n+\tsave\t%sp, -64, %sp\n+\tb\tdivide\n+\tmov\t0, %i2\t\t! result always positive\n+\t.global .rem\n+\t.proc 4\n+.rem:\n+\tsave\t%sp, -64, %sp\n+\torcc\t%i1, %i0, %g0\t! is either operand negative\n+\tbge\tdivide\t\t! if not, skip this junk\n+\tmov\t%i0, %i2\t! record sign of result in sign of %i2\n+\ttst\t%i1\n+\tbge\t2f\n+\ttst\t%i0\n+\t! %i1 < 0\n+\tbge\tdivide\n+\tneg\t%i1\n+2:\t! %i0 < 0\n+\tneg\t%i0\n+\t!\tFALL THROUGH\n+divide:\n+\t! Compute size of quotient, scale comparand.\n+\torcc\t%i1, %g0, %l1\t\t! movcc %i1, %l1\n+\tte\t2\t\t\t! if %i1 = 0\n+\tmov\t%i0, %i3\n+\tmov\t0, %i2\n+\tsethi\t%hi(1<<(32-2-1)), %l3\n+\tcmp \t%i3, %l3\n+\tblu\tnot_really_big\n+\tmov\t0, %l0\n+\t!\n+\t! Here, the %i0 is >= 2^(31-3) or so.  We must be careful here,\n+\t! as our usual 3-at-a-shot divide step will cause overflow and havoc.\n+\t! The total number of bits in the result here is 3*%l0+%l4, where\n+\t! %l4 <= 3.\n+\t! Compute %l0 in an unorthodox manner: know we need to Shift %l1 into\n+\t! the top decade: so do not even bother to compare to %i3.\n+1:\tcmp\t%l1, %l3\n+\tbgeu\t3f\n+\tmov\t1, %l4\n+\tsll\t%l1, 3, %l1\n+\tb\t1b\n+\tinc\t%l0\n+\t!\n+\t! Now compute %l4\n+\t!\n+2:\taddcc\t%l1, %l1, %l1\n+\tbcc\tnot_too_big\n+\tadd\t%l4, 1, %l4\n+\t!\n+\t! We are here if the %i1 overflowed when Shifting.\n+\t! This means that %i3 has the high-order bit set.\n+\t! Restore %l1 and subtract from %i3.\n+\tsll\t%l3, 2, %l3\n+\tsrl\t%l1, 1, %l1\n+\tadd\t%l1, %l3, %l1\n+\tb\tdo_single_div\n+\tdec\t%l4\n+not_too_big:\n+3:\tcmp\t%l1, %i3\n+\tblu\t2b\n+\tnop\n+\tbe\tdo_single_div\n+\tnop\n+\t! %l1 > %i3: went too far: back up 1 step\n+\t! \tsrl\t%l1, 1, %l1\n+\t!\tdec\t%l4\n+\t! do single-bit divide steps\n+\t!\n+\t! We have to be careful here.  We know that %i3 >= %l1, so we can do the\n+\t! first divide step without thinking.  BUT, the others are conditional,\n+\t! and are only done if %i3 >= 0.  Because both %i3 and %l1 may have the\n+\t! high-order bit set in the first step, just falling into the regular\n+\t! division loop will mess up the first time around.\n+\t! So we unroll slightly...\n+do_single_div:\n+\tdeccc\t%l4\n+\tbl\tend_regular_divide\n+\tnop\n+\tsub\t%i3, %l1, %i3\n+\tmov\t1, %i2\n+\tb\tend_single_divloop\n+\tnop\n+single_divloop:\n+\tsll\t%i2, 1, %i2\n+\tbl\t1f\n+\tsrl\t%l1, 1, %l1\n+\t! %i3 >= 0\n+\tsub\t%i3, %l1, %i3\n+\tb\t2f\n+\tinc\t%i2\n+1:\t! %i3 < 0\n+\tadd\t%i3, %l1, %i3\n+\tdec\t%i2\n+end_single_divloop:\n+2:\tdeccc\t%l4\n+\tbge\tsingle_divloop\n+\ttst\t%i3\n+\tb\tend_regular_divide\n+\tnop\n+not_really_big:\n+1:\tsll\t%l1, 3, %l1\n+\tcmp\t%l1, %i3\n+\tbleu\t1b\n+\tinccc\t%l0\n+\tbe\tgot_result\n+\tdec\t%l0\n+do_regular_divide:\n+\t! Do the main division iteration\n+\ttst\t%i3\n+\t! Fall through into divide loop\n+divloop:\n+\tsll\t%i2, 3, %i2\n+\t! depth 1, accumulated bits 0\n+\tbl\tL.1.8\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 2, accumulated bits 1\n+\tbl\tL.2.9\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits 3\n+\tbl\tL.3.11\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (3*2+1), %i2\n+L.3.11:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (3*2-1), %i2\n+L.2.9:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits 1\n+\tbl\tL.3.9\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (1*2+1), %i2\n+L.3.9:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (1*2-1), %i2\n+L.1.8:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 2, accumulated bits -1\n+\tbl\tL.2.7\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits -1\n+\tbl\tL.3.7\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-1*2+1), %i2\n+L.3.7:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-1*2-1), %i2\n+L.2.7:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\t! depth 3, accumulated bits -3\n+\tbl\tL.3.5\n+\tsrl\t%l1,1,%l1\n+\t! remainder is positive\n+\tsubcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-3*2+1), %i2\n+L.3.5:\t! remainder is negative\n+\taddcc\t%i3,%l1,%i3\n+\tb\t9f\n+\tadd\t%i2, (-3*2-1), %i2\n+end_regular_divide:\n+9:\tdeccc\t%l0\n+\tbge\tdivloop\n+\ttst\t%i3\n+\tbge\tgot_result\n+\tnop\n+\t! non-restoring fixup here\n+\tadd\t%i3, %i1, %i3\n+got_result:\n+\ttst\t%i2\n+\tbge\t1f\n+\trestore\n+\t! answer < 0\n+\tretl\t\t! leaf-routine return\n+\tneg\t%o3, %o0\t! remainder <- -%i3\n+1:\tretl\t\t! leaf-routine return\n+\tmov\t%o3, %o0\t! remainder <- %i3\n+#endif\n+\n+"}, {"sha": "4c8bc30b83d5ab3141b684573246f063c2e37899", "filename": "gcc/config/sparc/lb1spl.asm", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flb1spl.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flb1spl.asm?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,246 @@\n+/* This is an assembly language implementation of libgcc1.c for the sparclite\n+   processor.\n+\n+   These routines are all from the Sparclite User's Guide, slightly edited\n+   to match the desired calling convention, and also to optimize them.  */\n+\n+#ifdef L_udivsi3\n+.text\n+\t.align 4\n+\t.global .udiv\n+\t.proc\t04\n+.udiv:\n+\twr\t%g0,%g0,%y\t! Not a delayed write for sparclite\n+\ttst\t%g0\n+\tdivscc\t%o0,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tretl\n+\tdivscc\t%g1,%o1,%o0\n+#endif\n+\n+#ifdef L_umodsi3\n+.text\n+\t.align 4\n+\t.global .urem\n+\t.proc\t04\n+.urem:\n+\twr\t%g0,%g0,%y\t! Not a delayed write for sparclite\n+\ttst\t%g0\n+\tdivscc\t%o0,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tdivscc\t%g1,%o1,%g1\n+\tbl 1f\n+\trd\t%y,%o0\n+\tretl\n+\tnop\n+1:\tretl\n+\tadd\t%o0,%o1,%o0\n+#endif\n+\n+#ifdef L_divsi3\n+.text\n+\t.align 4\n+\t.global .div\n+\t.proc\t04\n+! ??? This routine could be made faster if was optimized, and if it was\n+! rewritten to only calculate the quotient.\n+.div:\n+\twr\t%g0,%g0,%y\t! Not a delayed write for sparclite\n+\tmov\t%o1,%o4\n+\ttst\t%o1\n+\tbl,a\t1f\n+\tsub\t%g0,%o4,%o4\n+1:\ttst\t%o0\n+\tbl,a\t2f\n+\tmov\t-1,%y\n+2:\tdivscc\t%o0,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tbe\t6f\n+\tmov\t%y,%o3\n+\tbg\t4f\n+\taddcc\t%o3,%o4,%g0\n+\tbe,a\t6f\n+\tmov\t%g0,%o3\n+\ttst\t%o0\n+\tbl\t5f\n+\ttst\t%g1\n+\tba\t5f\n+\tadd\t%o3,%o4,%o3\n+4:\tsubcc\t%o3,%o4,%g0\n+\tbe,a\t6f\n+\tmov\t%g0,%o3\n+\ttst\t%o0\n+\tbge\t5f\n+\ttst\t%g1\n+\tsub\t%o3,%o4,%o3\n+5:\tbl,a\t6f\n+\tadd\t%g1,1,%g1\n+6:\ttst\t%o1\n+\tbl,a\t7f\n+\tsub\t%g0,%g1,%g1\n+7:\tretl\n+\tmov\t%g1,%o0\t\t! Quotient is in %g1.\n+#endif\n+\n+#ifdef L_modsi3\n+.text\n+\t.align 4\n+\t.global .rem\n+\t.proc\t04\n+! ??? This routine could be made faster if was optimized, and if it was\n+! rewritten to only calculate the remainder.\n+.rem:\n+\twr\t%g0,%g0,%y\t! Not a delayed write for sparclite\n+\tmov\t%o1,%o4\n+\ttst\t%o1\n+\tbl,a\t1f\n+\tsub\t%g0,%o4,%o4\n+1:\ttst\t%o0\n+\tbl,a\t2f\n+\tmov\t-1,%y\n+2:\tdivscc\t%o0,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tdivscc\t%g1,%o4,%g1\n+\tbe\t6f\n+\tmov\t%y,%o3\n+\tbg\t4f\n+\taddcc\t%o3,%o4,%g0\n+\tbe,a\t6f\n+\tmov\t%g0,%o3\n+\ttst\t%o0\n+\tbl\t5f\n+\ttst\t%g1\n+\tba\t5f\n+\tadd\t%o3,%o4,%o3\n+4:\tsubcc\t%o3,%o4,%g0\n+\tbe,a\t6f\n+\tmov\t%g0,%o3\n+\ttst\t%o0\n+\tbge\t5f\n+\ttst\t%g1\n+\tsub\t%o3,%o4,%o3\n+5:\tbl,a\t6f\n+\tadd\t%g1,1,%g1\n+6:\ttst\t%o1\n+\tbl,a\t7f\n+\tsub\t%g0,%g1,%g1\n+7:\tretl\n+\tmov\t%o3,%o0\t\t! Remainder is in %o3.\n+#endif"}, {"sha": "a471cb3194a5119d78362ed3a742b665be70b7e4", "filename": "gcc/config/sparc/litecoff.h", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Flitecoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Flitecoff.h?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,126 @@\n+/* Definitions of target machine for GNU compiler, for SPARClite w/o FPU, COFF.\n+   Copyright (C) 1994 Free Software Foundation, Inc.\n+   Written by Ken Raeburn (raeburn@cygnus.com).\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+#include \"sparc/lite.h\"\n+\n+#undef ASM_OUTPUT_IDENT\n+\n+/* This is copied from final.c and sparc.h.  */\n+#undef ASM_OUTPUT_SOURCE_LINE\n+#define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n+{ if (write_symbols == SDB_DEBUG) {\t\t\t\t\\\n+    fprintf ((FILE), \"\\t.ln\\t%d\\n\",\t\t\t\t\\\n+\t     ((sdb_begin_function_line > -1)\t\t\t\\\n+\t      ? (LINE) - sdb_begin_function_line : 1));\t\t\\\n+  } else if (write_symbols == DBX_DEBUG) {\t\t\t\\\n+    static int sym_lineno = 1;\t\t\t\t\t\\\n+    fprintf ((FILE), \".stabn 68,0,%d,LM%d\\nLM%d:\\n\",\t\t\\\n+\t     (LINE), sym_lineno, sym_lineno);\t\t\t\\\n+    sym_lineno += 1;\t\t\t\t\t\t\\\n+  } }\n+\n+#undef SELECT_SECTION\n+#undef SELECT_RTX_SECTION\n+#define BSS_SECTION_ASM_OP\t\".section\\t\\\".bss\\\"\"\n+\n+#include \"svr3.h\"\n+\n+#undef CPP_PREDEFINES\n+#define CPP_PREDEFINES \"-Dsparc -Dsparclite -Acpu(sparc) -Amachine(sparc)\"\n+\n+/* just in case */\n+#undef DBX_DEBUGGING_INFO\n+#undef PREFERRED_DEBUGGING_TYPE\n+#define DBX_DEBUGGING_INFO\n+#define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n+\n+/* Support the ctors and dtors sections for g++.  */\n+\n+#undef INIT_SECTION_ASM_OP\n+\n+/* Support the ctors and dtors sections for g++.  */\n+\n+#undef CTORS_SECTION_ASM_OP\n+#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"x\\\"\"\n+#undef DTORS_SECTION_ASM_OP\n+#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"x\\\"\"\n+\n+/* A list of other sections which the compiler might be \"in\" at any\n+   given time.  */\n+\n+#undef EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_const, in_bss, in_ctors, in_dtors\n+\n+/* A list of extra section function definitions.  */\n+\n+#undef EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n+  CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+  DTORS_SECTION_FUNCTION\n+\n+#define CTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+ctors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_ctors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", CTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_ctors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define DTORS_SECTION_FUNCTION\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\t\\\n+dtors_section ()\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (in_section != in_dtors)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (asm_out_file, \"%s\\n\", DTORS_SECTION_ASM_OP);\t\t\\\n+      in_section = in_dtors;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define INT_ASM_OP \".long\"\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global constructors.  */\n+#undef ASM_OUTPUT_CONSTRUCTOR\n+#define ASM_OUTPUT_CONSTRUCTOR(FILE,NAME)\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    ctors_section ();\t\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);\t\t\t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+/* A C statement (sans semicolon) to output an element in the table of\n+   global destructors.  */\n+#undef ASM_OUTPUT_DESTRUCTOR\n+#define ASM_OUTPUT_DESTRUCTOR(FILE,NAME)       \t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\t\\\n+    dtors_section ();                   \t\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP);\t\t\t\t\\\n+    assemble_name (FILE, NAME);              \t\t\t\t\\\n+    fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#undef DO_GLOBAL_CTORS_BODY\n+#undef DO_GLOBAL_DTORS_BODY"}, {"sha": "5cda0642a8bfe0b04f3f7122d72d6974a834eaed", "filename": "gcc/config/sparc/t-sparcbare", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Ft-sparcbare", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Ft-sparcbare", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparcbare?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,14 @@\n+# configuration file for a bare sparc cpu, aout format files\n+\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = sparc/lb1spc.asm\n+LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3\n+\n+# MULTILIB_OPTIONS should have msparclite too, but we'd have to make\n+# gas build...\n+MULTILIB_OPTIONS=msoft-float mv8\n+MULTILIB_DIRNAMES=soft v8\n+MULTILIB_MATCHES=msoft-float=mno-fpu\n+\n+LIBGCC = stmp-multilib\n+INSTALL_LIBGCC = install-multilib"}, {"sha": "84a4d50098f1040e375e96233b09a5f32b6f1652", "filename": "gcc/config/sparc/t-sparclite", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Ft-sparclite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0/gcc%2Fconfig%2Fsparc%2Ft-sparclite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Ft-sparclite?ref=b3ab657fbf21a054e7deaf8a6e61f2f8fdd294b0", "patch": "@@ -0,0 +1,17 @@\n+CROSS_LIBGCC1 = libgcc1-asm.a\n+LIB1ASMSRC = sparc/lb1spl.asm\n+LIB1ASMFUNCS = _divsi3 _udivsi3 _modsi3 _umodsi3\n+\n+# These are really part of libgcc1, but this will cause them to be\n+# built correctly, so...\n+\n+LIB2FUNCS_EXTRA = fp-bit.c dp-bit.c\n+\n+dp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' > dp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> dp-bit.c\n+\n+fp-bit.c: $(srcdir)/config/fp-bit.c\n+\techo '#define FLOAT' > fp-bit.c\n+\techo '#define US_SOFTWARE_GOFAST' >> fp-bit.c\n+\tcat $(srcdir)/config/fp-bit.c >> fp-bit.c"}]}