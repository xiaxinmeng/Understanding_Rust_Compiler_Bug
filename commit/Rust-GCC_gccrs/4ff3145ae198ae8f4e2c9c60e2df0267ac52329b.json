{"sha": "4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmMzE0NWFlMTk4YWU4ZjRlMmM5YzYwZTJkZjAyNjdhYzUyMzI5Yg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2015-12-04T18:41:46Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2015-12-04T18:41:46Z"}, "message": "nvptx.c (nvptx_assemble_decl_begin): New, replacing ...\n\n\tgcc/\n\t* config/nvptx/nvptx.c (nvptx_assemble_decl_begin): New,\n\treplacing ...\n\t(init_output_initializer): ... this.\n\t(nvptx_output_aligned_decl, nvptx_asm_declare_constant_name,\n\tnvptx_declare_object_name, nvptx_assemble_undefined_decl): Use\n\tnvptx_assemble_decl_begin.\n\n\tgcc/testsuite/\n\t* gcc.target/nvptx/ary-init.c: New.\n\nFrom-SVN: r231298", "tree": {"sha": "44838ac9694be578f3b08cf100cb00462111694a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44838ac9694be578f3b08cf100cb00462111694a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e7bbb8d60c2725ff2cdd0cdd9f35942debb599"}], "stats": {"total": 166, "additions": 101, "deletions": 65}, "files": [{"sha": "96e0c46f9e71ba529332c42c1a7d4d75563da2b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "patch": "@@ -1,3 +1,12 @@\n+2015-12-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* config/nvptx/nvptx.c (nvptx_assemble_decl_begin): New,\n+\treplacing ...\n+\t(init_output_initializer): ... this.\n+\t(nvptx_output_aligned_decl, nvptx_asm_declare_constant_name,\n+\tnvptx_declare_object_name, nvptx_assemble_undefined_decl): Use\n+\tnvptx_assemble_decl_begin.\n+\n 2015-12-04  Dmitry Vyukov  <dvyukov@google.com>\n \n \t* sancov.c: New file."}, {"sha": "fc0e9b8a9df10825ae13fca4c08ed4b8000d38a9", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 67, "deletions": 65, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "patch": "@@ -1628,6 +1628,50 @@ nvptx_output_ascii (FILE *, const char *str, unsigned HOST_WIDE_INT size)\n     nvptx_assemble_value (str[i], 1);\n }\n \n+/* Emit a PTX variable decl and prepare for emission of its\n+   initializer.  NAME is the symbol name and SETION the PTX data\n+   area. The type is TYPE, object size SIZE and alignment is ALIGN.\n+   The caller has already emitted any indentation and linkage\n+   specifier.  It is responsible for any initializer, terminating ;\n+   and newline.  SIZE is in bytes, ALIGN is in bits -- confusingly\n+   this is the opposite way round that PTX wants them!  */\n+\n+static void\n+nvptx_assemble_decl_begin (FILE *file, const char *name, const char *section,\n+\t\t\t   const_tree type, HOST_WIDE_INT size, unsigned align)\n+{\n+  while (TREE_CODE (type) == ARRAY_TYPE)\n+    type = TREE_TYPE (type);\n+\n+  if (!INTEGRAL_TYPE_P (type) && !SCALAR_FLOAT_TYPE_P (type))\n+    type = ptr_type_node;\n+  unsigned elt_size = int_size_in_bytes (type);\n+  if (elt_size > UNITS_PER_WORD)\n+    {\n+      type = ptr_type_node;\n+      elt_size = int_size_in_bytes (type);\n+    }\n+\n+  decl_chunk_size = elt_size;\n+  decl_chunk_mode = int_mode_for_mode (TYPE_MODE (type));\n+  decl_offset = 0;\n+  init_part = 0;\n+\n+  object_size = size;\n+  object_finished = !size;\n+\n+  fprintf (file, \"%s .align %d .u%d \",\n+\t   section, align / BITS_PER_UNIT,\n+\t   elt_size * BITS_PER_UNIT);\n+  assemble_name (file, name);\n+\n+  if (size)\n+    /* We make everything an array, to simplify any initialization\n+       emission.  */\n+    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC \"]\",\n+\t     (size + elt_size - 1) / elt_size);\n+}\n+\n /* Called when the initializer for a decl has been completely output through\n    combinations of the three functions above.  */\n \n@@ -1644,33 +1688,6 @@ nvptx_assemble_decl_end (void)\n   fprintf (asm_out_file, \";\\n\");\n }\n \n-/* Start a declaration of a variable of TYPE with NAME to\n-   FILE.  IS_PUBLIC says whether this will be externally visible.\n-   Here we just write the linker hint and decide on the chunk size\n-   to use.  */\n-\n-static void\n-init_output_initializer (FILE *file, const char *name, const_tree type,\n-\t\t\t bool is_public)\n-{\n-  write_var_marker (file, true, is_public, name);\n-\n-  if (TREE_CODE (type) == ARRAY_TYPE)\n-    type = TREE_TYPE (type);\n-  int sz = int_size_in_bytes (type);\n-  if ((TREE_CODE (type) != INTEGER_TYPE\n-       && TREE_CODE (type) != ENUMERAL_TYPE\n-       && TREE_CODE (type) != REAL_TYPE)\n-      || sz < 0\n-      || sz > HOST_BITS_PER_WIDE_INT)\n-    type = ptr_type_node;\n-  decl_chunk_size = int_size_in_bytes (type);\n-  decl_chunk_mode = int_mode_for_mode (TYPE_MODE (type));\n-  decl_offset = 0;\n-  init_part = 0;\n-  object_finished = false;\n-}\n-\n /* Output an uninitialized common or file-scope variable.  */\n \n void\n@@ -1681,13 +1698,10 @@ nvptx_output_aligned_decl (FILE *file, const char *name,\n \n   /* If this is public, it is common.  The nearest thing we have to\n      common is weak.  */\n-  fprintf (file, \"\\t%s%s .align %d .b8 \",\n-\t   TREE_PUBLIC (decl) ? \".weak \" : \"\",\n-\t   section_for_decl (decl),\n-\t   align / BITS_PER_UNIT);\n-  assemble_name (file, name);\n-  if (size > 0)\n-    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n+  fprintf (file, \"\\t%s\", TREE_PUBLIC (decl) ? \".weak \" : \"\");\n+\n+  nvptx_assemble_decl_begin (file, name, section_for_decl (decl),\n+\t\t\t     TREE_TYPE (decl), size, align);\n   fprintf (file, \";\\n\");\n }\n \n@@ -1697,17 +1711,15 @@ nvptx_output_aligned_decl (FILE *file, const char *name,\n \n static void\n nvptx_asm_declare_constant_name (FILE *file, const char *name,\n-\t\t\t\t const_tree exp, HOST_WIDE_INT size)\n+\t\t\t\t const_tree exp, HOST_WIDE_INT obj_size)\n {\n+  write_var_marker (file, true, false, name);\n+\n+  fprintf (file, \"\\t\");\n+\n   tree type = TREE_TYPE (exp);\n-  init_output_initializer (file, name, type, false);\n-  fprintf (file, \"\\t.const .align %d .u%d \",\n-\t   TYPE_ALIGN (TREE_TYPE (exp)) / BITS_PER_UNIT,\n-\t   decl_chunk_size * BITS_PER_UNIT);\n-  assemble_name (file, name);\n-  fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC \"]\",\n-\t   (size + decl_chunk_size - 1) / decl_chunk_size);\n-  object_size = size;\n+  nvptx_assemble_decl_begin (file, name, \".const\", type, obj_size,\n+\t\t\t     TYPE_ALIGN (type));\n }\n \n /* Implement the ASM_DECLARE_OBJECT_NAME macro.  Used to start writing\n@@ -1716,24 +1728,15 @@ nvptx_asm_declare_constant_name (FILE *file, const char *name,\n void\n nvptx_declare_object_name (FILE *file, const char *name, const_tree decl)\n {\n-  tree type = TREE_TYPE (decl);\n+  write_var_marker (file, true, TREE_PUBLIC (decl), name);\n \n-  init_output_initializer (file, name, type, TREE_PUBLIC (decl));\n-  fprintf (file, \"\\t%s%s .align %d .u%d \",\n-\t   !TREE_PUBLIC (decl) ? \"\"\n-\t   : DECL_WEAK (decl) ? \".weak \" : \".visible \",\n-\t   section_for_decl (decl),\n-\t   DECL_ALIGN (decl) / BITS_PER_UNIT,\n-\t   decl_chunk_size * BITS_PER_UNIT);\n-  assemble_name (file, name);\n+  fprintf (file, \"\\t%s\", (!TREE_PUBLIC (decl) ? \"\"\n+\t\t\t  : DECL_WEAK (decl) ? \".weak \" : \".visible \"));\n \n-  unsigned HOST_WIDE_INT size = tree_to_uhwi (DECL_SIZE_UNIT (decl));\n-  if (size > 0)\n-    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC \"]\",\n-\t     (size + decl_chunk_size - 1) / decl_chunk_size);\n-  else\n-    object_finished = true;\n-  object_size = size;\n+  tree type = TREE_TYPE (decl);\n+  HOST_WIDE_INT obj_size = tree_to_shwi (DECL_SIZE_UNIT (decl));\n+  nvptx_assemble_decl_begin (file, name, section_for_decl (decl),\n+\t\t\t     type, obj_size, DECL_ALIGN (decl));\n }\n \n /* Implement TARGET_ASM_GLOBALIZE_LABEL by doing nothing.  */\n@@ -1751,12 +1754,11 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n {\n   write_var_marker (file, false, TREE_PUBLIC (decl), name);\n \n-  fprintf (file, \"\\t.extern %s .b8 \", section_for_decl (decl));\n-  assemble_name_raw (file, name);\n-\n-  HOST_WIDE_INT size = int_size_in_bytes (TREE_TYPE (decl));\n-  if (size > 0)\n-    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n+  fprintf (file, \"\\t.extern \");\n+  tree size = DECL_SIZE_UNIT (decl);\n+  nvptx_assemble_decl_begin (file, name, section_for_decl (decl),\n+\t\t\t     TREE_TYPE (decl), size ? tree_to_shwi (size) : 0,\n+\t\t\t     DECL_ALIGN (decl));\n   fprintf (file, \";\\n\");\n }\n "}, {"sha": "40ae4fbf6a7f833bab131a786099d6a7ff25a7b9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "patch": "@@ -1,3 +1,7 @@\n+2015-12-04  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* gcc.target/nvptx/ary-init.c: New.\n+\n 2015-12-04  David Malcolm  <dmalcolm@redhat.com>\n \n \t* g++.dg/cpp0x/nsdmi-template14.C: Move dg-error directive."}, {"sha": "dd9e0504d25909ac535447eb31f61423fc5bf6a4", "filename": "gcc/testsuite/gcc.target/nvptx/ary-init.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff3145ae198ae8f4e2c9c60e2df0267ac52329b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fary-init.c?ref=4ff3145ae198ae8f4e2c9c60e2df0267ac52329b", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-additional-options \"-Wno-long-long\" } */\n+\n+char ca1[2] = {'a', 'b'};\n+short sa1[2] = { 1, 2 };\n+int ia1[2] = { 3, 4 };\n+long long la1[2] = { 5, 6 };\n+\n+char ca2[2][2] = {'A', 'B', 'C', 'D'};\n+short sa2[2][2] = { 7, 8, 9, 10 };\n+int ia2[2][2] = { 11, 12, 13, 14 };\n+long long la2[2][2] = { 15, 16, 17, 18 };\n+\n+/* dg-final { scan-assembler \" .align 8 .u64 la1\\\\\\[2\\\\\\] = { 5, 6 };\" } } */\n+/* dg-final { scan-assembler \" .align 4 .u32 ia1\\\\\\[2\\\\\\] = { 3, 4 };\" } } */\n+/* dg-final { scan-assembler \" .align 2 .u16 sa1\\\\\\[2\\\\\\] = { 1, 2 };\" } } */\n+/* dg-final { scan-assembler \" .align 1 .u8 ca1\\\\\\[2\\\\\\] = { 97, 98 };\" } } */\n+\n+/* dg-final { scan-assembler \" .align 8 .u64 la2\\\\\\[4\\\\\\] = { 15, 16, 17, 18 };\" } } */\n+/* dg-final { scan-assembler \" .align 4 .u32 ia2\\\\\\[4\\\\\\] = { 11, 12, 13, 14 };\" } } */\n+/* dg-final { scan-assembler \" .align 2 .u16 sa2\\\\\\[4\\\\\\] = { 7, 8, 9, 10 };\" } } */\n+/* dg-final { scan-assembler \" .align 1 .u8 ca2\\\\\\[4\\\\\\] = { 65, 66, 67, 68 };\" } } */"}]}