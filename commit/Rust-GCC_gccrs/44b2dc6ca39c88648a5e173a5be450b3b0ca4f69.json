{"sha": "44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRiMmRjNmNhMzljODg2NDhhNWUxNzNhNWJlNDUwYjNiMGNhNGY2OQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-13T17:24:52Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-13T17:24:52Z"}, "message": "call.c (type_decays_to): Check MAYBE_CLASS_TYPE_P instead of CLASS_TYPE_P.\n\n\t* call.c (type_decays_to): Check MAYBE_CLASS_TYPE_P instead of\n\tCLASS_TYPE_P.\n\t* parser.c (cp_parser_lambda_expression): Complain about lambda in\n\tunevaluated context.\n\t* pt.c (iterative_hash_template_arg): Don't crash on lambda.\n\nFrom-SVN: r158277", "tree": {"sha": "977b0cff78060a6f7983494f751b2ac5b4fbd765", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/977b0cff78060a6f7983494f751b2ac5b4fbd765"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "d6be4b4773482caab84e14512cb658f94d91463c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -1,3 +1,11 @@\n+2010-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (type_decays_to): Check MAYBE_CLASS_TYPE_P instead of\n+\tCLASS_TYPE_P.\n+\t* parser.c (cp_parser_lambda_expression): Complain about lambda in\n+\tunevaluated context.\n+\t* pt.c (iterative_hash_template_arg): Don't crash on lambda.\n+\n 2010-04-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43641"}, {"sha": "90f84e020ae9d3c7ce4bddf1a5f26554761594f2", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -2263,7 +2263,7 @@ type_decays_to (tree type)\n     return build_pointer_type (TREE_TYPE (type));\n   if (TREE_CODE (type) == FUNCTION_TYPE)\n     return build_pointer_type (type);\n-  if (!CLASS_TYPE_P (type))\n+  if (!MAYBE_CLASS_TYPE_P (type))\n     type = cv_unqualified (type);\n   return type;\n }"}, {"sha": "e41a6d7850cc43522bd11ff84e0e459624e3fb2c", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -7081,6 +7081,10 @@ cp_parser_lambda_expression (cp_parser* parser)\n   LAMBDA_EXPR_LOCATION (lambda_expr)\n     = cp_lexer_peek_token (parser->lexer)->location;\n \n+  if (cp_unevaluated_operand)\n+    error_at (LAMBDA_EXPR_LOCATION (lambda_expr),\n+\t      \"lambda-expression in unevaluated context\");\n+\n   /* We may be in the middle of deferred access check.  Disable\n      it now.  */\n   push_deferring_access_checks (dk_no_deferred);"}, {"sha": "29489b6337c366be3049be5c4c3a0f77c1bbfda4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -1563,6 +1563,12 @@ iterative_hash_template_arg (tree arg, hashval_t val)\n       val = iterative_hash_template_arg (TREE_TYPE (arg), val);\n       return iterative_hash_template_arg (TYPE_DOMAIN (arg), val);\n \n+    case LAMBDA_EXPR:\n+      /* A lambda can't appear in a template arg, but don't crash on\n+\t erroneous input.  */\n+      gcc_assert (errorcount > 0);\n+      return val;\n+\n     default:\n       switch (tclass)\n \t{"}, {"sha": "04274bad79c3e2ec859204f2b170480e17ce52f7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -1,3 +1,8 @@\n+2010-04-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/lambda/lambda-deduce2.C: Remove.\n+\t* g++.dg/cpp0x/lambda/lambda-uneval.C: New.\n+\n 2010-04-13  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* gcc.dg/cpp/cpp.exp: Test also c-c++-common/cpp."}, {"sha": "e92f6f2752cda185d2404507dfff397fd7fd7877", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-deduce2.C", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-deduce2.C?ref=4867a0c6f8bc1a070e0a9a8613666246e9fdc6b8", "patch": "@@ -1,15 +0,0 @@\n-// Test that cv-quals are dropped from non-class return type\n-// { dg-options \"-std=c++0x\" }\n-\n-template <class T, class U>\n-struct assert_same_type;\n-template <class T>\n-struct assert_same_type<T,T> { };\n-\n-struct A\n-{\n-  int i;\n-};\n-\n-extern const int i;\n-assert_same_type <decltype ([]{ return i; }()), int> x;"}, {"sha": "33ba7b0a4366c6965eae46a946083fcfc00d5e7d", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-uneval.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44b2dc6ca39c88648a5e173a5be450b3b0ca4f69/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-uneval.C?ref=44b2dc6ca39c88648a5e173a5be450b3b0ca4f69", "patch": "@@ -0,0 +1,7 @@\n+// 5.1.2/2: A lambda-expression shall not appear in an unevaluated operand.\n+// { dg-options \"-std=c++0x\" }\n+\n+template <class T>\n+struct A { };\n+A<decltype([]{ return 1; }())> a; // { dg-error \"lambda.*unevaluated context\" }\n+"}]}