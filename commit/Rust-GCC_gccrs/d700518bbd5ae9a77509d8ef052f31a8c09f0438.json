{"sha": "d700518bbd5ae9a77509d8ef052f31a8c09f0438", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcwMDUxOGJiZDVhZTlhNzc1MDlkOGVmMDUyZjMxYThjMDlmMDQzOA==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-12-01T11:42:25Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-12-01T11:42:25Z"}, "message": "re PR fortran/58410 (Bogus uninitialized variable warning for allocatable derived type array function result)\n\n2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/58410\n\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Do not\n\tuse the array bounds of an unallocated array but set its size\n\tto zero instead.\n\nFrom-SVN: r205566", "tree": {"sha": "5bc7c2f999384e26db3c53c4daa0bfb75df21569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bc7c2f999384e26db3c53c4daa0bfb75df21569"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d700518bbd5ae9a77509d8ef052f31a8c09f0438", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d700518bbd5ae9a77509d8ef052f31a8c09f0438", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d700518bbd5ae9a77509d8ef052f31a8c09f0438", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d700518bbd5ae9a77509d8ef052f31a8c09f0438/comments", "author": null, "committer": null, "parents": [{"sha": "49560f0c747c5d62ee46c9118b1ab634e985def5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49560f0c747c5d62ee46c9118b1ab634e985def5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49560f0c747c5d62ee46c9118b1ab634e985def5"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "5e4294a930a04321cab973fa3ad73f4a1ebf84be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d700518bbd5ae9a77509d8ef052f31a8c09f0438/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d700518bbd5ae9a77509d8ef052f31a8c09f0438/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d700518bbd5ae9a77509d8ef052f31a8c09f0438", "patch": "@@ -1,3 +1,10 @@\n+2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/58410\n+\t* trans-array.c (gfc_alloc_allocatable_for_assignment): Do not\n+\tuse the array bounds of an unallocated array but set its size\n+\tto zero instead.\n+\n 2013-12-01  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/34547"}, {"sha": "7e73e23a77ec6139ca4f72f8e336a6f79888f0a2", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d700518bbd5ae9a77509d8ef052f31a8c09f0438/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d700518bbd5ae9a77509d8ef052f31a8c09f0438/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d700518bbd5ae9a77509d8ef052f31a8c09f0438", "patch": "@@ -8068,6 +8068,7 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   tree size1;\n   tree size2;\n   tree array1;\n+  tree cond_null;\n   tree cond;\n   tree tmp;\n   tree tmp2;\n@@ -8143,9 +8144,9 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   jump_label2 = gfc_build_label_decl (NULL_TREE);\n \n   /* Allocate if data is NULL.  */\n-  cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n+  cond_null = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n \t\t\t array1, build_int_cst (TREE_TYPE (array1), 0));\n-  tmp = build3_v (COND_EXPR, cond,\n+  tmp = build3_v (COND_EXPR, cond_null,\n \t\t  build1_v (GOTO_EXPR, jump_label1),\n \t\t  build_empty_stmt (input_location));\n   gfc_add_expr_to_block (&fblock, tmp);\n@@ -8197,13 +8198,25 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   tmp = build1_v (LABEL_EXPR, jump_label1);\n   gfc_add_expr_to_block (&fblock, tmp);\n \n-  size1 = gfc_conv_descriptor_size (desc, expr1->rank);\n+  /* If the lhs has not been allocated, its bounds will not have been\n+     initialized and so its size is set to zero.  */\n+  size1 = gfc_create_var (gfc_array_index_type, NULL);\n+  gfc_init_block (&alloc_block);\n+  gfc_add_modify (&alloc_block, size1, gfc_index_zero_node);\n+  gfc_init_block (&realloc_block);\n+  gfc_add_modify (&realloc_block, size1,\n+\t\t  gfc_conv_descriptor_size (desc, expr1->rank));\n+  tmp = build3_v (COND_EXPR, cond_null,\n+\t\t  gfc_finish_block (&alloc_block),\n+\t\t  gfc_finish_block (&realloc_block));\n+  gfc_add_expr_to_block (&fblock, tmp);\n \n-  /* Get the rhs size.  Fix both sizes.  */\n+  /* Get the rhs size and fix it.  */\n   if (expr2)\n     desc2 = rss->info->data.array.descriptor;\n   else\n     desc2 = NULL_TREE;\n+\n   size2 = gfc_index_one_node;\n   for (n = 0; n < expr2->rank; n++)\n     {\n@@ -8217,8 +8230,6 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n \t\t\t       gfc_array_index_type,\n \t\t\t       tmp, size2);\n     }\n-\n-  size1 = gfc_evaluate_now (size1, &fblock);\n   size2 = gfc_evaluate_now (size2, &fblock);\n \n   cond = fold_build2_loc (input_location, NE_EXPR, boolean_type_node,"}]}