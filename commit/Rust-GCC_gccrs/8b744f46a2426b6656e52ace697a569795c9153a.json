{"sha": "8b744f46a2426b6656e52ace697a569795c9153a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI3NDRmNDZhMjQyNmI2NjU2ZTUyYWNlNjk3YTU2OTc5NWM5MTUzYQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-23T00:16:25Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-03-23T00:16:25Z"}, "message": "Daily bump.", "tree": {"sha": "acbdb055e63b372b605e0d8b83ff9ff43093aa85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/acbdb055e63b372b605e0d8b83ff9ff43093aa85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b744f46a2426b6656e52ace697a569795c9153a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b744f46a2426b6656e52ace697a569795c9153a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b744f46a2426b6656e52ace697a569795c9153a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b744f46a2426b6656e52ace697a569795c9153a/comments", "author": null, "committer": null, "parents": [{"sha": "7c1006135ddeab216f376adc5f6135a22bfc0ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1006135ddeab216f376adc5f6135a22bfc0ff6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1006135ddeab216f376adc5f6135a22bfc0ff6"}], "stats": {"total": 198, "additions": 197, "deletions": 1}, "files": [{"sha": "c1d9b52bec76998eea1960fb80428892e7288f91", "filename": "contrib/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,7 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* mklog.py: Add --directory argument.\n+\n 2021-03-19  Matthias Klose  <doko@ubuntu.com>\n \n \t* texi2pod.pl: Substitute @tie{} with a space for the man pages."}, {"sha": "56bf67da998865a2a6f97cba723b66122316e0da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,104 @@\n+2021-03-22  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99581\n+\t* config/aarch64/constraints.md (UtQ): Use\n+\tdefine_relaxed_memory_constraint for it.\n+\t* doc/md.texi (define_relaxed_memory_constraint): Describe it.\n+\t* genoutput.c (main): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n+\t* genpreds.c (constraint_data): Add bitfield is_relaxed_memory.\n+\t(have_relaxed_memory_constraints): New static var.\n+\t(relaxed_memory_start, relaxed_memory_end): Ditto.\n+\t(add_constraint): Add arg is_relaxed_memory.  Check name for\n+\trelaxed memory.  Set up is_relaxed_memory in constraint_data and\n+\thave_relaxed_memory_constraints.  Adjust calls.\n+\t(choose_enum_order): Process relaxed memory.\n+\t(write_tm_preds_h): Ditto.\n+\t(main): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n+\t* gensupport.c (process_rtx): Process DEFINE_RELAXED_MEMORY_CONSTRAINT.\n+\t* ira-costs.c (record_reg_classes): Process CT_RELAXED_MEMORY.\n+\t* ira-lives.c (single_reg_class): Use\n+\tinsn_extra_relaxed_memory_constraint.\n+\t* ira.c (ira_setup_alts): CT_RELAXED_MEMORY.\n+\t* lra-constraints.c (valid_address_p): Use\n+\tinsn_extra_relaxed_memory_constraint instead of other memory\n+\tconstraints.\n+\t(process_alt_operands): Process CT_RELAXED_MEMORY.\n+\t(curr_insn_transform): Use insn_extra_relaxed_memory_constraint.\n+\t* recog.c (asm_operand_ok, preprocess_constraints): Process\n+\tCT_RELAXED_MEMORY.\n+\t* reload.c (find_reloads): Ditto.\n+\t* rtl.def (DEFINE_RELAXED_MEMORY_CONSTRAINT): New.\n+\t* stmt.c (parse_input_constraint): Use\n+\tinsn_extra_relaxed_memory_constraint.\n+\n+2021-03-22  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR target/97926\n+\t* ubsan.c (ubsan_instrument_float_cast): Don't test for unordered if\n+\tthere are no NaNs.\n+\n+2021-03-22  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/97252\n+\t* config/arm/arm-protos.h (neon_make_constant): Add generate\n+\targument to guard emitting insns, default to true.\n+\t* config/arm/arm.c (arm_legitimate_constant_p_1): Reject\n+\tCONST_VECTORs which neon_make_constant can't handle.\n+\t(neon_vdup_constant): Add generate argument, avoid emitting\n+\tinsns if it's not set.\n+\t(neon_make_constant): Plumb new generate argument through.\n+\t* config/arm/constraints.md (Ui): New. Use it...\n+\t* config/arm/mve.md (*mve_mov<mode>): ... here.\n+\t* config/arm/vec-common.md (movv8hf): Use neon_make_constant to\n+\tsynthesize constants.\n+\n+2021-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\t* debug.h: Add deprecation warning.\n+\n+2021-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99694\n+\t* tree-ssa-sccvn.c (visit_phi): Ignore edges with the\n+\tPHI result.\n+\n+2021-03-22  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/99702\n+\t* config/riscv/riscv.c (riscv_expand_block_move): Get RTL value\n+\tafter type checking.\n+\n+2021-03-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/99562\n+\tPR debug/66728\n+\t* dwarf2out.c (get_full_len): Use get_precision rather than\n+\tmin_precision.\n+\t(add_const_value_attribute): Make sure add_AT_wide argument has\n+\tprecision prec rather than some very wide one.\n+\n+2021-03-22  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* config/rs6000/rs6000.md (*rotldi3_insert_sf,\n+\t*mov<SFDF:mode><SFDF2:mode>cc_p9, floatsi<mode>2_lfiwax,\n+\tfloatsi<mode>2_lfiwax_mem, floatunssi<mode>2_lfiwzx,\n+\tfloatunssi<mode>2_lfiwzx_mem, *floatsidf2_internal,\n+\t*floatunssidf2_internal, fix_trunc<mode>si2_stfiwx,\n+\tfix_trunc<mode>si2_internal, fixuns_trunc<mode>si2_stfiwx,\n+\t*round32<mode>2_fprs, *roundu32<mode>2_fprs,\n+\t*fix_trunc<mode>si2_internal): Fix empty split condition.\n+\t* config/rs6000/vsx.md (*vsx_le_undo_permute_<mode>,\n+\tvsx_reduc_<VEC_reduc_name>_v2df, vsx_reduc_<VEC_reduc_name>_v4sf,\n+\t*vsx_reduc_<VEC_reduc_name>_v2df_scalar,\n+\t*vsx_reduc_<VEC_reduc_name>_v4sf_scalar): Likewise.\n+\n+2021-03-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/98914\n+\t* config/rs6000/rs6000.c (rs6000_expand_vector_set_var_p9):\n+\tConvert idx to DImode.\n+\t(rs6000_expand_vector_set_var_p8): Likewise.\n+\n 2021-03-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/99388"}, {"sha": "c3b41601deecef6f20a7bb10492db3df7fd0037d", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1 +1 @@\n-20210322\n+20210323"}, {"sha": "fb2978e646b7c71d6c52d1a798441b425b6897fa", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,29 @@\n+2021-03-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99480\n+\t* module.cc (depset::hash::make_dependency): Propagate flags for\n+\tpartial specialization.\n+\t(module_may_redeclare): Handle partial specialization.\n+\n+2021-03-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99425\n+\t* cp-tree.h (map_context_from, map_context_to): Delete.\n+\t(add_mergeable_specialization): Add is_alias parm.\n+\t* pt.c (add_mergeable_specialization): Add is_alias parm, add them.\n+\t* module.cc (map_context_from, map_context_to): Delete.\n+\t(trees_in::decl_value): Add specializations later, adjust call.\n+\tDrop useless alias lookup. Set duplicate fn parm context.\n+\t(check_mergeable_decl): Drop context mapping.\n+\t(trees_in::is_matching_decl): Likewise.\n+\t(trees_in::read_function_def): Drop parameter context adjustment\n+\there.\n+\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/99687\n+\t* module.cc (fini_modules): Call vec_free instead of delete.\n+\n 2021-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/99230"}, {"sha": "ff3839945e4974a4527958638737b3815b59d721", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,10 @@\n+2021-03-22  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/99688\n+\t* match.c (select_type_set_tmp, gfc_match_select_type,\n+\tgfc_match_select_rank): Fix 'name' buffersize to avoid out of bounds.\n+\t* resolve.c (resolve_select_type): Likewise.\n+\n 2021-03-19  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* frontend-passes.c (inline_limit_check): Add rank_a"}, {"sha": "809fc2ff5f0a9b54582a339f0b7031cd4f525fba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,40 @@\n+2021-03-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99480\n+\t* g++.dg/modules/pr99480_a.H: New.\n+\t* g++.dg/modules/pr99480_b.H: New.\n+\n+2021-03-22  Vladimir N. Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/99581\n+\t* gcc.target/powerpc/pr99581.c: New.\n+\n+2021-03-22  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/99425\n+\t* g++.dg/modules/pr99425-1.h: New.\n+\t* g++.dg/modules/pr99425-1_a.H: New.\n+\t* g++.dg/modules/pr99425-1_b.H: New.\n+\t* g++.dg/modules/pr99425-1_c.C: New.\n+\t* g++.dg/modules/pr99425-2_a.X: New.\n+\t* g++.dg/modules/pr99425-2_b.X: New.\n+\t* g++.dg/template/pr99425.C: New.\n+\n+2021-03-22  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/99694\n+\t* gcc.dg/torture/pr99694.c: New testcase.\n+\n+2021-03-22  Kito Cheng  <kito.cheng@sifive.com>\n+\n+\tPR target/99702\n+\t* gcc.target/riscv/pr99702.c: New.\n+\n+2021-03-22  Xionghu Luo  <luoxhu@linux.ibm.com>\n+\n+\tPR target/98914\n+\t* gcc.target/powerpc/pr98914.c: New test.\n+\n 2021-03-20  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/99679"}, {"sha": "e89ad6fc3fbee124b789b1e7a1056e4f534bd855", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b744f46a2426b6656e52ace697a569795c9153a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b744f46a2426b6656e52ace697a569795c9153a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8b744f46a2426b6656e52ace697a569795c9153a", "patch": "@@ -1,3 +1,24 @@\n+2021-03-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/string_view (basic_string_view(Range&&)): Define new\n+\tconstructor and deduction guide.\n+\t* testsuite/21_strings/basic_string_view/cons/char/range_c++20.cc: New test.\n+\t* testsuite/21_strings/basic_string_view/cons/wchar_t/range_c++20.cc: New test.\n+\n+2021-03-22  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/range_access.h (begin(T (&)[N]), end(T (&)[N])):\n+\tAdd missing 'noexcept' as per LWG 2280.\n+\t(rbegin(T (&)[N]), rend(T (&)[N]), rbegin(initializer_list<T>))\n+\t(rend(initializer_list<T>)): Add 'noexcept' as per LWG 3537.\n+\t* testsuite/24_iterators/range_access/range_access.cc: Check for\n+\texpected noexcept specifiers. Check result types of generic\n+\tstd::begin and std::end overloads.\n+\t* testsuite/24_iterators/range_access/range_access_cpp14.cc:\n+\tCheck for expected noexcept specifiers.\n+\t* testsuite/24_iterators/range_access/range_access_cpp17.cc:\n+\tLikewise.\n+\n 2021-03-19  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/type_traits (is_scoped_enum): Define."}]}