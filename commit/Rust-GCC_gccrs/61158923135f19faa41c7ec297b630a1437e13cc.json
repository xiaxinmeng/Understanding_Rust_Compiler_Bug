{"sha": "61158923135f19faa41c7ec297b630a1437e13cc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjExNTg5MjMxMzVmMTlmYWE0MWM3ZWMyOTdiNjMwYTE0MzdlMTNjYw==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2005-03-23T03:55:36Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2005-03-23T03:55:36Z"}, "message": "tm.texi (TARGET_MD_ASM_CLOBBERS): Adjust wording to not imply that this is called once, independent of asms in code.\n\n\t* doc/tm.texi (TARGET_MD_ASM_CLOBBERS): Adjust wording to not\n\timply that this is called once, independent of asms in code.\n\tAdjust to now being pased output and input lists.  Mention helper\n\tfunction decl_overlaps_hard_reg_set_p.\n\t* hooks.c (hook_tree_tree_tree_tree_3rd_identity): Rename from\n\thook_tree_tree_identity and to take three trees, returning third.\n\t* hooks.h (hook_tree_tree_tree_tree_3rd_identity): Adjust the\n\tprototype.\n\t* stmt.c: include hard-reg-set.h before tree.h.\n\t(decl_overlaps_hard_reg_set_p): New function, broken out from...\n\t(decl_conflicts_with_clobbers_p): Call\n\tdecl_overlaps_hard_reg_set_p.\n\t(expand_asm_operands): Pass output and input lists in call to\n\ttargetm.md_asm_clobbers.\n\t* target-def.h (TARGET_MD_ASM_CLOBBERS): Define as\n\thook_tree_tree_tree_tree_3rd_identity.\n\t* target.h (struct gcc_target.md_asm_clobbers): Take three tree\n\tparameters.\n\t* tree.h [HARD_CONST] (decl_overlaps_hard_reg_set_p): Prototype.\n\t* config/i386/i386.c (ix86_md_asm_clobbers): Adjust to three\n\tparameters, first two unused.\n\t* config/cris/cris.c (cris_md_asm_clobbers): Adjust to added\n\tparameters.  Only add MOF to clobbers if there's no 'h' mentioned\n\tin constraint letters and MOF is not mentioned as a asm-declared\n\tregister in neither of the input and output lists.\n\nFrom-SVN: r96923", "tree": {"sha": "1170a3a1c1f2485f21dace07e688e18f211fa1b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1170a3a1c1f2485f21dace07e688e18f211fa1b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61158923135f19faa41c7ec297b630a1437e13cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61158923135f19faa41c7ec297b630a1437e13cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61158923135f19faa41c7ec297b630a1437e13cc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61158923135f19faa41c7ec297b630a1437e13cc/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "06cd9d722014967a0769f4771edf4a3f3953b087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06cd9d722014967a0769f4771edf4a3f3953b087", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06cd9d722014967a0769f4771edf4a3f3953b087"}], "stats": {"total": 150, "additions": 116, "deletions": 34}, "files": [{"sha": "d52a4a7abff029db5617c70b5f24f48ebbcc90fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -1,3 +1,31 @@\n+2005-03-23  Hans-Peter Nilsson  <hp@axis.com>\n+\n+\t* doc/tm.texi (TARGET_MD_ASM_CLOBBERS): Adjust wording to not\n+\timply that this is called once, independent of asms in code.\n+\tAdjust to now being pased output and input lists.  Mention helper\n+\tfunction decl_overlaps_hard_reg_set_p.\n+\t* hooks.c (hook_tree_tree_tree_tree_3rd_identity): Rename from\n+\thook_tree_tree_identity and to take three trees, returning third.\n+\t* hooks.h (hook_tree_tree_tree_tree_3rd_identity): Adjust the\n+\tprototype.\n+\t* stmt.c: include hard-reg-set.h before tree.h.\n+\t(decl_overlaps_hard_reg_set_p): New function, broken out from...\n+\t(decl_conflicts_with_clobbers_p): Call\n+\tdecl_overlaps_hard_reg_set_p.\n+\t(expand_asm_operands): Pass output and input lists in call to\n+\ttargetm.md_asm_clobbers.\n+\t* target-def.h (TARGET_MD_ASM_CLOBBERS): Define as\n+\thook_tree_tree_tree_tree_3rd_identity.\n+\t* target.h (struct gcc_target.md_asm_clobbers): Take three tree\n+\tparameters.\n+\t* tree.h [HARD_CONST] (decl_overlaps_hard_reg_set_p): Prototype.\n+\t* config/i386/i386.c (ix86_md_asm_clobbers): Adjust to three\n+\tparameters, first two unused.\n+\t* config/cris/cris.c (cris_md_asm_clobbers): Adjust to added\n+\tparameters.  Only add MOF to clobbers if there's no 'h' mentioned\n+\tin constraint letters and MOF is not mentioned as a asm-declared\n+\tregister in neither of the input and output lists.\n+\n 2005-03-23  DJ Delorie  <dj@redhat.com>\n \n \t* optabs.c (expand_binop): Make sure the first subword's result"}, {"sha": "314ae0f7e4e5df3fc76ce2060056fa795d358c39", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -125,7 +125,7 @@ static bool cris_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n static int cris_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   tree, bool);\n-static tree cris_md_asm_clobbers (tree);\n+static tree cris_md_asm_clobbers (tree, tree, tree);\n \n /* This is the argument from the \"-max-stack-stackframe=\" option.  */\n const char *cris_max_stackframe_str;\n@@ -3060,8 +3060,38 @@ cris_arg_partial_bytes (CUMULATIVE_ARGS *ca, enum machine_mode mode,\n /* Worker function for TARGET_MD_ASM_CLOBBERS.  */\n \n static tree\n-cris_md_asm_clobbers (tree clobbers)\n+cris_md_asm_clobbers (tree outputs, tree inputs, tree clobbers)\n {\n+  HARD_REG_SET mof_set;\n+  tree t;\n+\n+  CLEAR_HARD_REG_SET (mof_set);\n+  SET_HARD_REG_BIT (mof_set, CRIS_MOF_REGNUM);\n+\n+  for (t = outputs; t != NULL; t = TREE_CHAIN (t))\n+    {\n+      tree val = TREE_VALUE (t);\n+\n+      /* The constraint letter for the singleton register class of MOF\n+\t is 'h'.  If it's mentioned in the constraints, the asm is\n+\t MOF-aware and adding it to the clobbers would cause it to have\n+\t impossible constraints.  */\n+      if (strchr (TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t))),\n+\t\t  'h') != NULL\n+\t  || decl_overlaps_hard_reg_set_p (val, mof_set))\n+\treturn clobbers;\n+    }\n+\n+  for (t = inputs; t != NULL; t = TREE_CHAIN (t))\n+    {\n+      tree val = TREE_VALUE (t);\n+\n+      if (strchr (TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t))),\n+\t\t  'h') != NULL\n+\t  || decl_overlaps_hard_reg_set_p (val, mof_set))\n+\treturn clobbers;\n+    }\n+\n   return tree_cons (NULL_TREE,\n \t\t    build_string (strlen (reg_names[CRIS_MOF_REGNUM]),\n \t\t\t\t  reg_names[CRIS_MOF_REGNUM]),"}, {"sha": "e2540173819112f967e2830af1c1f142ccc82711", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -923,7 +923,7 @@ static tree ix86_handle_struct_attribute (tree *, tree, tree, int, bool *);\n static int extended_reg_mentioned_1 (rtx *, void *);\n static bool ix86_rtx_costs (rtx, int, int, int *);\n static int min_insn_size (rtx);\n-static tree ix86_md_asm_clobbers (tree clobbers);\n+static tree ix86_md_asm_clobbers (tree outputs, tree inputs, tree clobbers);\n static bool ix86_must_pass_in_stack (enum machine_mode mode, tree type);\n static bool ix86_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    tree, bool);\n@@ -16880,7 +16880,9 @@ ix86_vector_mode_supported_p (enum machine_mode mode)\n    with the old cc0-based compiler.  */\n \n static tree\n-ix86_md_asm_clobbers (tree clobbers)\n+ix86_md_asm_clobbers (tree outputs ATTRIBUTE_UNUSED,\n+\t\t      tree inputs ATTRIBUTE_UNUSED,\n+\t\t      tree clobbers)\n {\n   clobbers = tree_cons (NULL_TREE, build_string (5, \"flags\"),\n \t\t\tclobbers);"}, {"sha": "af269f2a97c60ea53917d1cd3946a66041c50ce3", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -9314,11 +9314,15 @@ from shared libraries (DLLs).\n You need not define this macro if it would always evaluate to zero.\n @end defmac\n \n-@deftypefn {Target Hook} tree TARGET_MD_ASM_CLOBBERS (tree @var{clobbers})\n+@deftypefn {Target Hook} tree TARGET_MD_ASM_CLOBBERS (tree @var{outputs}, tree @var{inputs}, tree @var{clobbers})\n This target hook should add to @var{clobbers} @code{STRING_CST} trees for\n-any hard regs the port wishes to automatically clobber for all asms.\n+any hard regs the port wishes to automatically clobber for an asm.\n It should return the result of the last @code{tree_cons} used to add a\n-clobber.\n+clobber.  The @var{outputs}, @var{inputs} and @var{clobber} lists are the\n+corresponding parameters to the asm and may be inspected to avoid\n+clobbering a register that is an input or output of the asm.  You can use\n+@code{decl_overlaps_hard_reg_set_p}, declared in @file{tree.h}, to test\n+for overlap with regards to asm-declared registers.\n @end deftypefn\n \n @defmac MATH_LIBRARY"}, {"sha": "6e6e7c70321206121b3bcae63e684a862f7db4c3", "filename": "gcc/hooks.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -228,11 +228,12 @@ hook_rtx_tree_int_null (tree a ATTRIBUTE_UNUSED, int b ATTRIBUTE_UNUSED)\n   return NULL;\n }\n \n-/* Generic hook that takes a tree and returns it as is.  */\n+/* Generic hook that takes three trees and returns the last one as is.  */\n tree\n-hook_tree_tree_identity (tree a)\n+hook_tree_tree_tree_tree_3rd_identity (tree a ATTRIBUTE_UNUSED,\n+\t\t\t\t       tree b ATTRIBUTE_UNUSED, tree c)\n {\n-  return a;\n+  return c;\n }\n \n /* Generic hook that takes a tree and returns a NULL string.  */"}, {"sha": "b799a8c0709c8d87b29cd7128409021fb4de5e05", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -62,7 +62,7 @@ extern bool hook_bool_tree_tree_false (tree, tree);\n extern rtx hook_rtx_rtx_identity (rtx);\n extern rtx hook_rtx_rtx_null (rtx);\n extern rtx hook_rtx_tree_int_null (tree, int);\n-extern tree hook_tree_tree_identity (tree a);\n+extern tree hook_tree_tree_tree_tree_3rd_identity (tree, tree, tree);\n extern const char *hook_constcharptr_tree_null (tree);\n extern tree hook_tree_tree_tree_bool_null (tree, tree, bool);\n #endif"}, {"sha": "2e292028bdb548d3fe4e5a13b588792fb17a6a06", "filename": "gcc/stmt.c", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -31,6 +31,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"tm.h\"\n \n #include \"rtl.h\"\n+#include \"hard-reg-set.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n #include \"flags.h\"\n@@ -39,7 +40,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"insn-config.h\"\n #include \"expr.h\"\n #include \"libfuncs.h\"\n-#include \"hard-reg-set.h\"\n #include \"recog.h\"\n #include \"machmode.h\"\n #include \"toplev.h\"\n@@ -558,15 +558,12 @@ parse_input_constraint (const char **constraint_p, int input_num,\n   return true;\n }\n \n-/* Check for overlap between registers marked in CLOBBERED_REGS and\n-   anything inappropriate in DECL.  Emit error and return TRUE for error,\n-   FALSE for ok.  */\n+/* Return true iff there's an overlap between REGS and DECL, where DECL\n+   can be an asm-declared register.  */\n \n-static bool\n-decl_conflicts_with_clobbers_p (tree decl, const HARD_REG_SET clobbered_regs)\n+bool\n+decl_overlaps_hard_reg_set_p (tree decl, const HARD_REG_SET regs)\n {\n-  /* Conflicts between asm-declared register variables and the clobber\n-     list are not allowed.  */\n   if ((TREE_CODE (decl) == VAR_DECL || TREE_CODE (decl) == PARM_DECL)\n       && DECL_REGISTER (decl)\n       && REG_P (DECL_RTL (decl))\n@@ -579,18 +576,34 @@ decl_conflicts_with_clobbers_p (tree decl, const HARD_REG_SET clobbered_regs)\n \t   regno < (REGNO (reg)\n \t\t    + hard_regno_nregs[REGNO (reg)][GET_MODE (reg)]);\n \t   regno++)\n-\tif (TEST_HARD_REG_BIT (clobbered_regs, regno))\n-\t  {\n-\t    error (\"asm-specifier for variable %qs conflicts with \"\n-\t\t   \"asm clobber list\",\n-\t\t   IDENTIFIER_POINTER (DECL_NAME (decl)));\n-\n-\t    /* Reset registerness to stop multiple errors emitted for a\n-\t       single variable.  */\n-\t    DECL_REGISTER (decl) = 0;\n-\t    return true;\n-\t  }\n+\tif (TEST_HARD_REG_BIT (regs, regno))\n+\t  return true;\n+    }\n+\n+  return false;\n+}\n+\n+\n+/* Check for overlap between registers marked in CLOBBERED_REGS and\n+   anything inappropriate in DECL.  Emit error and return TRUE for error,\n+   FALSE for ok.  */\n+\n+static bool\n+decl_conflicts_with_clobbers_p (tree decl, const HARD_REG_SET clobbered_regs)\n+{\n+  /* Conflicts between asm-declared register variables and the clobber\n+     list are not allowed.  */\n+  if (decl_overlaps_hard_reg_set_p (decl, clobbered_regs))\n+    {\n+      error (\"asm-specifier for variable %qs conflicts with asm clobber list\",\n+\t     IDENTIFIER_POINTER (DECL_NAME (decl)));\n+\n+      /* Reset registerness to stop multiple errors emitted for a single\n+\t variable.  */\n+      DECL_REGISTER (decl) = 0;\n+      return true;\n     }\n+\n   return false;\n }\n \n@@ -656,7 +669,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n      Case in point is when the i386 backend moved from cc0 to a hard reg --\n      maintaining source-level compatibility means automatically clobbering\n      the flags register.  */\n-  clobbers = targetm.md_asm_clobbers (clobbers);\n+  clobbers = targetm.md_asm_clobbers (outputs, inputs, clobbers);\n \n   /* Count the number of meaningful clobbered registers, ignoring what\n      we would ignore later.  */"}, {"sha": "6c9b4758a70727e45a1ca20f0a8482859367e124", "filename": "gcc/target-def.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -379,7 +379,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n #define TARGET_BUILTIN_SETJMP_FRAME_VALUE default_builtin_setjmp_frame_value\n \n-#define TARGET_MD_ASM_CLOBBERS hook_tree_tree_identity\n+#define TARGET_MD_ASM_CLOBBERS hook_tree_tree_tree_tree_3rd_identity\n \n #define TARGET_DWARF_CALLING_CONVENTION hook_int_tree_0\n "}, {"sha": "bb914da70372cad6e2b211f12ce4b1b6916bc463", "filename": "gcc/target.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -487,8 +487,8 @@ struct gcc_target\n   rtx (* builtin_setjmp_frame_value) (void);\n \n   /* This target hook should add STRING_CST trees for any hard regs\n-     the port wishes to automatically clobber for all asms.  */\n-  tree (* md_asm_clobbers) (tree);\n+     the port wishes to automatically clobber for an asm.  */\n+  tree (* md_asm_clobbers) (tree, tree, tree);\n \n   /* This target hook allows the backend to specify a calling convention\n      in the debug information.  This function actually returns an"}, {"sha": "6a96e092d739b331c7211fb10bcb8eb5b41bf7c6", "filename": "gcc/tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61158923135f19faa41c7ec297b630a1437e13cc/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=61158923135f19faa41c7ec297b630a1437e13cc", "patch": "@@ -3756,6 +3756,10 @@ extern tree resolve_asm_operand_names (tree, tree, tree);\n extern void expand_case (tree);\n extern void expand_decl (tree);\n extern void expand_anon_union_decl (tree, tree, tree);\n+#ifdef HARD_CONST\n+/* Silly ifdef to avoid having all includers depend on hard-reg-set.h.  */\n+extern bool decl_overlaps_hard_reg_set_p (tree, const HARD_REG_SET);\n+#endif\n \n /* In gimplify.c.  */\n extern tree create_artificial_label (void);"}]}