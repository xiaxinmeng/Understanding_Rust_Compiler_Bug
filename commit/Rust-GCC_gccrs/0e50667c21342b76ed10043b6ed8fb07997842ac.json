{"sha": "0e50667c21342b76ed10043b6ed8fb07997842ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU1MDY2N2MyMTM0MmI3NmVkMTAwNDNiNmVkOGZiMDc5OTc4NDJhYw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-01-26T20:23:20Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-01-26T20:23:20Z"}, "message": "basic_string.h (_M_replace_aux): Use the __N marker in throw message.\n\n2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/basic_string.h (_M_replace_aux): Use the\n\t__N marker in throw message.\n\t* include/bits/basic_string.tcc (assign(const _CharT*,\n\tsize_type), insert(size_type, const _CharT*, size_type),\n\treplace(size_type, size_type, const _CharT*, size_type),\n\treserve, _Rep::_S_create, resize, _M_replace_dispatch):\n\tLikewise.\n\n\t* include/bits/basic_string.h, include/bits/basic_string.tcc:\n\tFold overlong lines, minor formatting changes.\n\nFrom-SVN: r76664", "tree": {"sha": "a1222ff3c00327231d163fb68fd8467a1236558f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1222ff3c00327231d163fb68fd8467a1236558f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e50667c21342b76ed10043b6ed8fb07997842ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50667c21342b76ed10043b6ed8fb07997842ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e50667c21342b76ed10043b6ed8fb07997842ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e50667c21342b76ed10043b6ed8fb07997842ac/comments", "author": null, "committer": null, "parents": [{"sha": "d6456562b6801f0147fd10fa00c4fd76709d6b2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6456562b6801f0147fd10fa00c4fd76709d6b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6456562b6801f0147fd10fa00c4fd76709d6b2b"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "e18870b79a64c2b223bd0dbac8be35f871bf22de", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e50667c21342b76ed10043b6ed8fb07997842ac", "patch": "@@ -1,3 +1,16 @@\n+2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/basic_string.h (_M_replace_aux): Use the\n+\t__N marker in throw message.\n+\t* include/bits/basic_string.tcc (assign(const _CharT*,\n+\tsize_type), insert(size_type, const _CharT*, size_type),\n+\treplace(size_type, size_type, const _CharT*, size_type),\n+\treserve, _Rep::_S_create, resize, _M_replace_dispatch):\n+\tLikewise.\n+\n+\t* include/bits/basic_string.h, include/bits/basic_string.tcc:\n+\tFold overlong lines, minor formatting changes.\n+\n 2004-01-26  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/basic_string.h (replace(iterator, iterator,"}, {"sha": "ae81259c32b4a3c4b4f65039a878460be9bd5085", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=0e50667c21342b76ed10043b6ed8fb07997842ac", "patch": "@@ -1362,7 +1362,7 @@ namespace std\n \t\t     _CharT __c)\n       {\n \tif (this->max_size() - (this->size() - __n1) < __n2)\n-\t  __throw_length_error(\"basic_string::_M_replace_aux\");\n+\t  __throw_length_error(__N(\"basic_string::_M_replace_aux\"));\n \t_M_mutate(__pos1, __n1, __n2);\n \tif (__n2)\n \t  traits_type::assign(_M_data() + __pos1, __n2, __c);\n@@ -1383,21 +1383,19 @@ namespace std\n       // requires special behaviour if _InIter is an integral type\n       template<class _InIterator>\n         static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n-\t\t\t __false_type)\n+        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\t\t\t const _Alloc& __a, __false_type)\n \t{\n           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;\n           return _S_construct(__beg, __end, __a, _Tag());\n \t}\n \n       template<class _InIterator>\n         static _CharT*\n-        _S_construct_aux(_InIterator __beg, _InIterator __end, const _Alloc& __a,\n-\t\t\t __true_type)\n-\t{\n-\t  return _S_construct(static_cast<size_type>(__beg),\n-\t\t\t      static_cast<value_type>(__end), __a);\n-\t}\n+        _S_construct_aux(_InIterator __beg, _InIterator __end,\n+\t\t\t const _Alloc& __a, __true_type)\n+\t{ return _S_construct(static_cast<size_type>(__beg),\n+\t\t\t      static_cast<value_type>(__end), __a); }\n \n       template<class _InIterator>\n         static _CharT*\n@@ -1457,8 +1455,7 @@ namespace std\n        *  happen.\n       */\n       const _CharT*\n-      c_str() const\n-      { return _M_data(); }\n+      c_str() const { return _M_data(); }\n \n       /**\n        *  @brief  Return const pointer to contents.\n@@ -1845,7 +1842,8 @@ namespace std\n       */\n       basic_string\n       substr(size_type __pos = 0, size_type __n = npos) const\n-      { return basic_string(*this, _M_check(__pos, \"basic_string::substr\"), __n); }\n+      { return basic_string(*this,\n+\t\t\t    _M_check(__pos, \"basic_string::substr\"), __n); }\n \n       /**\n        *  @brief  Compare to a string.\n@@ -1958,9 +1956,10 @@ namespace std\n        *  at @a pos1.  Form a string from the first @a n2 characters of @a s.\n        *  Returns an integer < 0 if this substring is ordered before the string\n        *  from @a s, 0 if their values are equivalent, or > 0 if this substring\n-       *  is ordered after the string from @a s. If the lengths of this substring\n-       *  and @a n2 are different, the shorter one is ordered first.  If they are\n-       *  the same, returns the result of traits::compare(substring.data(),s,size());\n+       *  is ordered after the string from @a s. If the lengths of this\n+       *  substring and @a n2 are different, the shorter one is ordered first. \n+       *  If they are the same, returns the result of\n+       *  traits::compare(substring.data(),s,size());\n        *\n        *  NB: s must have at least n2 characters, '\\0' has no special\n        *  meaning."}, {"sha": "1e9d33e65c19aa65402f6fba309a5193e0716846", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e50667c21342b76ed10043b6ed8fb07997842ac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=0e50667c21342b76ed10043b6ed8fb07997842ac", "patch": "@@ -153,9 +153,10 @@ namespace std\n \n \t// NB: Not required, but considered best practice. \n \tif (__builtin_expect(__is_null_pointer(__beg), 0))\n-\t  __throw_logic_error(\"basic_string::_S_construct NULL not valid\");\n+\t  __throw_logic_error(__N(\"basic_string::_S_construct NULL not valid\"));\n \n-\tconst size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));\n+\tconst size_type __dnew = static_cast<size_type>(std::distance(__beg,\n+\t\t\t\t\t\t\t\t      __end));\n \t\n \t// Check for out_of_range and length_error exceptions.\n \t_Rep* __r = _Rep::_S_create(__dnew, __a);\n@@ -207,8 +208,10 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::\n     basic_string(const basic_string& __str, size_type __pos, size_type __n)\n     : _M_dataplus(_S_construct(__str._M_ibegin()\n-\t\t\t       + __str._M_check(__pos, \"basic_string::basic_string\"), \n-\t\t\t       __str._M_ibegin() + __pos + __str._M_limit(__pos, __n),\n+\t\t\t       + __str._M_check(__pos,\n+\t\t\t\t\t\t\"basic_string::basic_string\"),\n+\t\t\t       __str._M_ibegin() + __pos\n+\t\t\t       + __str._M_limit(__pos, __n),\n \t\t\t       _Alloc()), _Alloc())\n     { }\n \n@@ -217,9 +220,10 @@ namespace std\n     basic_string(const basic_string& __str, size_type __pos,\n \t\t size_type __n, const _Alloc& __a)\n     : _M_dataplus(_S_construct(__str._M_ibegin()\n-\t\t\t       + __str._M_check(__pos, \"basic_string::basic_string\"), \n-\t\t\t       __str._M_ibegin() + __pos + __str._M_limit(__pos, __n),\n-\t\t\t       __a), __a)\n+\t\t\t       + __str._M_check(__pos,\n+\t\t\t\t\t\t\"basic_string::basic_string\"),\n+\t\t\t       __str._M_ibegin() + __pos\n+\t\t\t       + __str._M_limit(__pos, __n), __a), __a)\n     { }\n \n   // TBD: DPG annotate\n@@ -274,7 +278,7 @@ namespace std\n      {\n        __glibcxx_requires_string_len(__s, __n);\n        if (__n > this->max_size())\n-\t __throw_length_error(\"basic_string::assign\");\n+\t __throw_length_error(__N(\"basic_string::assign\"));\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n \t return _M_replace_safe(size_type(0), this->size(), __s, __n);\n@@ -300,7 +304,7 @@ namespace std\n        __glibcxx_requires_string_len(__s, __n);\n        _M_check(__pos, \"basic_string::insert\");\n        if (this->max_size() - this->size() < __n)\n-\t __throw_length_error(\"basic_string::insert\");\n+\t __throw_length_error(__N(\"basic_string::insert\"));\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n            || less<const _CharT*>()(_M_data() + this->size(), __s))\n          return _M_replace_safe(__pos, size_type(0), __s, __n);\n@@ -337,7 +341,7 @@ namespace std\n        _M_check(__pos, \"basic_string::replace\");\n        __n1 = _M_limit(__pos, __n1);\n        if (this->max_size() - (this->size() - __n1) < __n2)\n-         __throw_length_error(\"basic_string::replace\");\n+         __throw_length_error(__N(\"basic_string::replace\"));\n        bool __left;\n        if (_M_rep()->_M_is_shared() || less<const _CharT*>()(__s, _M_data())\n \t   || less<const _CharT*>()(_M_data() + this->size(), __s))\n@@ -451,7 +455,7 @@ namespace std\n       if (__res != this->capacity() || _M_rep()->_M_is_shared())\n         {\n \t  if (__res > this->max_size())\n-\t    __throw_length_error(\"basic_string::reserve\");\n+\t    __throw_length_error(__N(\"basic_string::reserve\"));\n \t  // Make sure we don't shrink below the current size\n \t  if (__res < this->size())\n \t    __res = this->size();\n@@ -478,9 +482,10 @@ namespace std\n       // The code below can usually be optimized away.\n       else \n \t{\n-\t  basic_string __tmp1(_M_ibegin(), _M_iend(), __s.get_allocator());\n-\t  basic_string __tmp2(__s._M_ibegin(), __s._M_iend(), \n-\t\t\t      this->get_allocator());\n+\t  const basic_string __tmp1(_M_ibegin(), _M_iend(),\n+\t\t\t\t    __s.get_allocator());\n+\t  const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(), \n+\t\t\t\t    this->get_allocator());\n \t  *this = __tmp2;\n \t  __s = __tmp1;\n \t}\n@@ -495,7 +500,7 @@ namespace std\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n       if (__capacity > _S_max_size)\n-\t__throw_length_error(\"basic_string::_S_create\");\n+\t__throw_length_error(__N(\"basic_string::_S_create\"));\n \n       // NB: Need an array of char_type[__capacity], plus a\n       // terminating null char_type() element, plus enough for the\n@@ -591,7 +596,7 @@ namespace std\n     basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)\n     {\n       if (__n > max_size())\n-\t__throw_length_error(\"basic_string::resize\");\n+\t__throw_length_error(__N(\"basic_string::resize\"));\n       const size_type __size = this->size();\n       if (__size < __n)\n \tthis->append(__n - __size, __c);\n@@ -610,7 +615,7 @@ namespace std\n \tconst basic_string __s(__k1, __k2);\n \tconst size_type __n1 = __i2 - __i1;\n \tif (this->max_size() - (this->size() - __n1) < __s.size())\n-\t  __throw_length_error(\"basic_string::_M_replace_dispatch\");\n+\t  __throw_length_error(__N(\"basic_string::_M_replace_dispatch\"));\n \treturn _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),\n \t\t\t       __s.size());\n       }"}]}