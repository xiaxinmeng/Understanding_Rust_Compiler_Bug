{"sha": "3b10cf4be76c929ba27a62c3dfd70b8017155635", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2IxMGNmNGJlNzZjOTI5YmEyN2E2MmMzZGZkNzBiODAxNzE1NTYzNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-19T16:04:01Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-19T16:04:01Z"}, "message": "rtl.h (insns_safe_to_move_p): New function.\n\n\t* rtl.h (insns_safe_to_move_p): New function.\n\t* loop.c (find_and_verify_loops): Use it.\n\t* rtlanal.c (insns_safe_to_move_p): Define it.\n\nFrom-SVN: r29509", "tree": {"sha": "07f4f7a539e15cea1a65dc0b43285692ada2a516", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07f4f7a539e15cea1a65dc0b43285692ada2a516"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3b10cf4be76c929ba27a62c3dfd70b8017155635", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b10cf4be76c929ba27a62c3dfd70b8017155635", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3b10cf4be76c929ba27a62c3dfd70b8017155635", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3b10cf4be76c929ba27a62c3dfd70b8017155635/comments", "author": null, "committer": null, "parents": [{"sha": "47d7090eeb4503fa6123cf1089a560b6379bff56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47d7090eeb4503fa6123cf1089a560b6379bff56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47d7090eeb4503fa6123cf1089a560b6379bff56"}], "stats": {"total": 114, "additions": 110, "deletions": 4}, "files": [{"sha": "a8ff106d887243b5a94f8501e98b75db06d1f013", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3b10cf4be76c929ba27a62c3dfd70b8017155635", "patch": "@@ -1,3 +1,9 @@\n+Sun Sep 19 09:03:40 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* rtl.h (insns_safe_to_move_p): New function.\n+\t* loop.c (find_and_verify_loops): Use it.\n+\t* rtlanal.c (insns_safe_to_move_p): Define it.\n+\n Sat Sep 18 16:01:18 1999  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* config/i386/sol2.h (CPP_SPEC): Support -[p]threads"}, {"sha": "cc278dce84844c8a20361f0ab8759ded9efd761f", "filename": "gcc/loop.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=3b10cf4be76c929ba27a62c3dfd70b8017155635", "patch": "@@ -2779,6 +2779,7 @@ find_and_verify_loops (f)\n \t  {\n \t    rtx p;\n \t    rtx our_next = next_real_insn (insn);\n+\t    rtx last_insn_to_move = NEXT_INSN (insn);\n \t    int dest_loop;\n \t    int outer_loop = -1;\n \n@@ -2830,7 +2831,11 @@ find_and_verify_loops (f)\n \t\t&& INSN_UID (JUMP_LABEL (p)) != 0\n \t\t&& condjump_p (p)\n \t\t&& ! simplejump_p (p)\n-\t\t&& next_real_insn (JUMP_LABEL (p)) == our_next)\n+\t\t&& next_real_insn (JUMP_LABEL (p)) == our_next\n+\t\t/* If it's not safe to move the sequence, then we\n+\t\t   mustn't try.  */\n+\t\t&& insns_safe_to_move_p (p, NEXT_INSN (insn), \n+\t\t\t\t\t &last_insn_to_move))\n \t      {\n \t\trtx target\n \t\t  = JUMP_LABEL (insn) ? JUMP_LABEL (insn) : get_last_insn ();\n@@ -2885,11 +2890,13 @@ find_and_verify_loops (f)\n \n \t\t       /* Include the BARRIER after INSN and copy the\n \t\t\t  block after LOC.  */\n-\t\t       new_label = squeeze_notes (new_label, NEXT_INSN (insn));\n-\t\t       reorder_insns (new_label, NEXT_INSN (insn), loc);\n+\t\t       new_label = squeeze_notes (new_label, \n+\t\t\t\t\t\t  last_insn_to_move);\n+\t\t       reorder_insns (new_label, last_insn_to_move, loc);\n \n \t\t       /* All those insns are now in TARGET_LOOP_NUM.  */\n-\t\t       for (q = new_label; q != NEXT_INSN (NEXT_INSN (insn));\n+\t\t       for (q = new_label; \n+\t\t\t    q != NEXT_INSN (last_insn_to_move);\n \t\t\t    q = NEXT_INSN (q))\n \t\t\t uid_loop_num[INSN_UID (q)] = target_loop_num;\n "}, {"sha": "94790a6e19e9010ebc9810b945e73a72e036947c", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3b10cf4be76c929ba27a62c3dfd70b8017155635", "patch": "@@ -1130,6 +1130,7 @@ extern int for_each_rtx                 PROTO((rtx *, rtx_function, void *));\n extern rtx regno_use_in\t\t\tPROTO((int, rtx));\n extern int auto_inc_p\t\t\tPROTO((rtx));\n extern void remove_node_from_expr_list\tPROTO((rtx, rtx *));\n+extern int insns_safe_to_move_p         PROTO((rtx, rtx, rtx *));\n \n /* flow.c */\n "}, {"sha": "b02be3e2e53cfd22009ea608ee37f3045d047b60", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=3b10cf4be76c929ba27a62c3dfd70b8017155635", "patch": "@@ -2293,3 +2293,73 @@ auto_inc_p (x)\n     }\n   return 0;\n }\n+\n+/* Return 1 if the sequence of instructions beginning with FROM and up\n+   to and including TO is safe to move.  If NEW_TO is non-NULL, and\n+   the sequence is not already safe to move, but can be easily\n+   extended to a sequence which is safe, then NEW_TO will point to the\n+   end of the extended sequence.  */\n+\n+int\n+insns_safe_to_move_p (from, to, new_to)\n+     rtx from;\n+     rtx to;\n+     rtx *new_to;\n+{\n+  int eh_region_count = 0;\n+  int past_to_p = 0;\n+  rtx r = from;\n+\n+  while (r)\n+    {\n+      if (GET_CODE (r) == NOTE)\n+\t{\n+\t  switch (NOTE_LINE_NUMBER (r))\n+\t    {\n+\t    case NOTE_INSN_EH_REGION_BEG:\n+\t      ++eh_region_count;\n+\t      break;\n+\n+\t    case NOTE_INSN_EH_REGION_END:\n+\t      if (eh_region_count == 0)\n+\t\t/* This sequence of instructions contains the end of\n+\t\t   an exception region, but not he beginning.  Moving\n+\t\t   it will cause chaos.  */\n+\t\treturn 0;\n+\n+\t      --eh_region_count;\n+\t      break;\n+\n+\t    default:\n+\t      break;\n+\t    }\n+\t}\n+      else if (past_to_p)\n+\t/* If we've passed TO, and we see a non-note instruction, we\n+\t   can't extend the sequence to a movable sequence.  */\n+\treturn 0;\n+\n+      if (r == to)\n+\t{\n+\t  if (!new_to)\n+\t    /* It's OK to move the sequence if there were matched sets of\n+\t       exception region notes.  */\n+\t    return eh_region_count == 0;\n+\t  \n+\t  past_to_p = 1;\n+\t}\n+\n+      /* It's OK to move the sequence if there were matched sets of\n+\t exception region notes.  */\n+      if (past_to_p && eh_region_count == 0)\n+\t{\n+\t  *new_to = r;\n+\t  return 1;\n+\t}\n+\n+      /* Go to the next instruction.  */\n+      r = NEXT_INSN (r);\n+    }\n+  \n+  return 0;\n+}"}, {"sha": "6ba4d0854b128247043282fc550abb3a0f831c55", "filename": "gcc/testsuite/g++.old-deja/g++.eh/crash1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3b10cf4be76c929ba27a62c3dfd70b8017155635/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.eh%2Fcrash1.C?ref=3b10cf4be76c929ba27a62c3dfd70b8017155635", "patch": "@@ -0,0 +1,22 @@\n+// Build don't link:\n+// Special g++ Options: -O1 -fno-inline-functions\n+\n+struct A\n+{\n+  ~A ();\n+};\n+\n+bool foo ();\n+\n+int i;\n+int j;\n+\n+A bar ()\n+{\n+  for (i = 0; i < 1; ++i)\n+    if (j)\n+      {\n+\tA tmp;\n+\treturn tmp;\n+      }\n+}"}]}