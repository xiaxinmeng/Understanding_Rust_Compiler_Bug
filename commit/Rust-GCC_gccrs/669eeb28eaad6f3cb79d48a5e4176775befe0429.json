{"sha": "669eeb28eaad6f3cb79d48a5e4176775befe0429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY5ZWViMjhlYWFkNmYzY2I3OWQ0OGE1ZTQxNzY3NzViZWZlMDQyOQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2008-10-29T16:37:22Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2008-10-29T16:37:22Z"}, "message": "bfin-protos.h (WA_05000257, [...]): New.\n\n\t* config/bfin/bfin-protos.h (WA_05000257, WA_05000283, WA_05000315,\n\tENABLE_WA_05000257, ENABLE_WA_05000283, ENABLE_WA_05000315): New.\n\t* config/bfin/bfin.c (bfin_cpus): Add these workaround bits as\n\tappropriate.\n\t(must_save_p): For some workarounds, interrupts need to clobber a\n\tP register.\n\t(expand_prologue_reg_save, expand_epilogue_reg_restore): Save LC0\n\tand LC1 for WA_05000257.\n\t(expand_interrupt_handler_prologue): Add dummy read of CHIPID for\n\tWA_05000283 and WA_05000315.\n\t* config/bfin/bfin.md (UNSPEC_VOLATILE_DUMMY): New constant.\n\t(movbi): Add alternative to set CC to 1; improve code for setting\n\tCC to 0.\n\t(dummy_load): New pattern.\n\nFrom-SVN: r141431", "tree": {"sha": "d61be8371b2ef75e91eba7b067eff08cc5f1eaf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61be8371b2ef75e91eba7b067eff08cc5f1eaf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/669eeb28eaad6f3cb79d48a5e4176775befe0429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669eeb28eaad6f3cb79d48a5e4176775befe0429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/669eeb28eaad6f3cb79d48a5e4176775befe0429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/669eeb28eaad6f3cb79d48a5e4176775befe0429/comments", "author": null, "committer": null, "parents": [{"sha": "7d293b587a78e9a779620da1519fab0c577de19a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d293b587a78e9a779620da1519fab0c577de19a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d293b587a78e9a779620da1519fab0c577de19a"}], "stats": {"total": 148, "additions": 111, "deletions": 37}, "files": [{"sha": "2a0f5ecd9a41fecb4018a1aeca215127a21bc3fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=669eeb28eaad6f3cb79d48a5e4176775befe0429", "patch": "@@ -1,3 +1,20 @@\n+2008-10-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\t\n+\t* config/bfin/bfin-protos.h (WA_05000257, WA_05000283, WA_05000315,\n+\tENABLE_WA_05000257, ENABLE_WA_05000283, ENABLE_WA_05000315): New.\n+\t* config/bfin/bfin.c (bfin_cpus): Add these workaround bits as\n+\tappropriate.\n+\t(must_save_p): For some workarounds, interrupts need to clobber a\n+\tP register.\n+\t(expand_prologue_reg_save, expand_epilogue_reg_restore): Save LC0\n+\tand LC1 for WA_05000257.\n+\t(expand_interrupt_handler_prologue): Add dummy read of CHIPID for\n+\tWA_05000283 and WA_05000315.\n+\t* config/bfin/bfin.md (UNSPEC_VOLATILE_DUMMY): New constant.\n+\t(movbi): Add alternative to set CC to 1; improve code for setting\n+\tCC to 0.\n+\t(dummy_load): New pattern.\n+\n 2008-10-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/37870"}, {"sha": "523c673ba4386b4f217775ac38abe3e6c93b4a53", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=669eeb28eaad6f3cb79d48a5e4176775befe0429", "patch": "@@ -75,6 +75,17 @@ extern unsigned int bfin_workarounds;\n #define ENABLE_WA_RETS \\\n   (bfin_workarounds & WA_RETS)\n \n+#define WA_05000257 0x00000040\n+#define ENABLE_WA_05000257 \\\n+  (bfin_workarounds & WA_05000257)\n+\n+#define WA_05000283 0x00000010\n+#define ENABLE_WA_05000283 \\\n+  (bfin_workarounds & WA_05000283)\n+\n+#define WA_05000315 0x00000020\n+#define ENABLE_WA_05000315 \\\n+  (bfin_workarounds & WA_05000315)\n \n #define Mmode enum machine_mode\n "}, {"sha": "3f3f9dcb7645043b84b30b43b08f946db64bfd07", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 64, "deletions": 30, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=669eeb28eaad6f3cb79d48a5e4176775befe0429", "patch": "@@ -175,68 +175,83 @@ struct bfin_cpu bfin_cpus[] =\n   {\"bf531\", BFIN_CPU_BF531, 0x0006,\n    WA_SPECULATIVE_LOADS},\n   {\"bf531\", BFIN_CPU_BF531, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315},\n   {\"bf531\", BFIN_CPU_BF531, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf531\", BFIN_CPU_BF531, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf532\", BFIN_CPU_BF532, 0x0006,\n    WA_SPECULATIVE_LOADS},\n   {\"bf532\", BFIN_CPU_BF532, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315},\n   {\"bf532\", BFIN_CPU_BF532, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf532\", BFIN_CPU_BF532, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf533\", BFIN_CPU_BF533, 0x0006,\n    WA_SPECULATIVE_LOADS},\n   {\"bf533\", BFIN_CPU_BF533, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315},\n   {\"bf533\", BFIN_CPU_BF533, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf533\", BFIN_CPU_BF533, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf534\", BFIN_CPU_BF534, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf534\", BFIN_CPU_BF534, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf534\", BFIN_CPU_BF534, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf536\", BFIN_CPU_BF536, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf536\", BFIN_CPU_BF536, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf536\", BFIN_CPU_BF536, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf537\", BFIN_CPU_BF537, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf537\", BFIN_CPU_BF537, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf537\", BFIN_CPU_BF537, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf538\", BFIN_CPU_BF538, 0x0005,\n    WA_SPECULATIVE_LOADS},\n   {\"bf538\", BFIN_CPU_BF538, 0x0004,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf538\", BFIN_CPU_BF538, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000315},\n   {\"bf538\", BFIN_CPU_BF538, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf539\", BFIN_CPU_BF539, 0x0005,\n    WA_SPECULATIVE_LOADS},\n   {\"bf539\", BFIN_CPU_BF539, 0x0004,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n   {\"bf539\", BFIN_CPU_BF539, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000315},\n   {\"bf539\", BFIN_CPU_BF539, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {\"bf542\", BFIN_CPU_BF542, 0x0002,\n    WA_SPECULATIVE_LOADS},\n@@ -273,11 +288,14 @@ struct bfin_cpu bfin_cpus[] =\n   {\"bf549\", BFIN_CPU_BF549, 0x0000,\n    WA_SPECULATIVE_LOADS | WA_RETS},\n \n-  {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS},\n+  {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS\n+   | WA_05000283 | WA_05000315},\n   {\"bf561\", BFIN_CPU_BF561, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n   {\"bf561\", BFIN_CPU_BF561, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n+   | WA_05000283 | WA_05000257 | WA_05000315},\n \n   {NULL, 0, 0, 0}\n };\n@@ -457,6 +475,9 @@ must_save_p (bool is_inthandler, unsigned regno)\n       return ((df_regs_ever_live_p (regno)\n \t       && !fixed_regs[regno]\n \t       && (is_inthandler || !call_used_regs[regno]))\n+\t      || (is_inthandler\n+\t\t  && (ENABLE_WA_05000283 || ENABLE_WA_05000315)\n+\t\t  && regno == REG_P5)\n \t      || (!TARGET_FDPIC\n \t\t  && regno == PIC_OFFSET_TABLE_REGNUM\n \t\t  && (crtl->uses_pic_offset_table\n@@ -550,10 +571,12 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n       rtx insn = emit_move_insn (predec, gen_rtx_REG (SImode, REG_ASTAT));\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n-      if (! current_function_is_leaf\n-\t  || cfun->machine->has_hardware_loops\n-\t  || cfun->machine->has_loopreg_clobber)\n-\tfor (dregno = REG_LT0; dregno <= REG_LB1; dregno++)\n+      for (dregno = REG_LT0; dregno <= REG_LB1; dregno++)\n+\tif (! current_function_is_leaf\n+\t    || cfun->machine->has_hardware_loops\n+\t    || cfun->machine->has_loopreg_clobber\n+\t    || (ENABLE_WA_05000257\n+\t\t&& (dregno == REG_LC0 || dregno == REG_LC1)))\n \t  {\n \t    insn = emit_move_insn (predec, gen_rtx_REG (SImode, dregno));\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n@@ -728,10 +751,11 @@ expand_epilogue_reg_restore (rtx spreg, bool saveall, bool is_inthandler)\n     }\n   if (saveall || is_inthandler)\n     {\n-      if (! current_function_is_leaf\n-\t  || cfun->machine->has_hardware_loops\n-\t  || cfun->machine->has_loopreg_clobber)\n-\tfor (regno = REG_LB1; regno >= REG_LT0; regno--)\n+      for (regno = REG_LB1; regno >= REG_LT0; regno--)\n+\tif (! current_function_is_leaf\n+\t    || cfun->machine->has_hardware_loops\n+\t    || cfun->machine->has_loopreg_clobber\n+\t    || (ENABLE_WA_05000257 && (regno == REG_LC0 || regno == REG_LC1)))\n \t  emit_move_insn (gen_rtx_REG (SImode, regno), postinc);\n \n       emit_move_insn (gen_rtx_REG (SImode, REG_ASTAT), postinc);\n@@ -1150,6 +1174,16 @@ expand_interrupt_handler_prologue (rtx spreg, e_funkind fkind, bool all)\n     all = true;\n   expand_prologue_reg_save (spreg, all, true);\n \n+  if (ENABLE_WA_05000283 || ENABLE_WA_05000315)\n+    {\n+      rtx chipid = GEN_INT (trunc_int_for_mode (0xFFC00014, SImode));\n+      rtx p5reg = gen_rtx_REG (Pmode, REG_P5);\n+      emit_insn (gen_movbi (bfin_cc_rtx, const1_rtx));\n+      emit_insn (gen_movsi_high (p5reg, chipid));\n+      emit_insn (gen_movsi_low (p5reg, p5reg, chipid));\n+      emit_insn (gen_dummy_load (p5reg, bfin_cc_rtx));\n+    }\n+  \n   if (lookup_attribute (\"nesting\", attrs))\n     {\n       rtx srcreg = gen_rtx_REG (Pmode, (fkind == EXCPT_HANDLER ? REG_RETX"}, {"sha": "3199666231171c3b8b871915fcb40faabdae1a92", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/669eeb28eaad6f3cb79d48a5e4176775befe0429/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=669eeb28eaad6f3cb79d48a5e4176775befe0429", "patch": "@@ -145,7 +145,8 @@\n    (UNSPEC_VOLATILE_CSYNC 1)\n    (UNSPEC_VOLATILE_SSYNC 2)\n    (UNSPEC_VOLATILE_LOAD_FUNCDESC 3)\n-   (UNSPEC_VOLATILE_STORE_EH_HANDLER 4)])\n+   (UNSPEC_VOLATILE_STORE_EH_HANDLER 4)\n+   (UNSPEC_VOLATILE_DUMMY 5)])\n \n (define_constants\n   [(MACFLAG_NONE 0)\n@@ -458,8 +459,8 @@\n })\n \n (define_insn \"movbi\"\n-  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,md,C,d,C\")\n-        (match_operand:BI 1 \"general_operand\" \"x,xKs3,md,d,d,C,P0\"))]\n+  [(set (match_operand:BI 0 \"nonimmediate_operand\" \"=x,x,d,md,C,d,C,P1\")\n+        (match_operand:BI 1 \"general_operand\" \"x,xKs3,md,d,d,C,P0,P1\"))]\n \n   \"\"\n   \"@\n@@ -469,10 +470,11 @@\n    B %0 = %1;\n    CC = %1;\n    %0 = CC;\n-   R0 = R0 | R0; CC = AC0;\"\n-  [(set_attr \"type\" \"move,mvi,mcld,mcst,compare,compare,alu0\")\n-   (set_attr \"length\" \"2,2,*,*,2,2,4\")\n-   (set_attr \"seq_insns\" \"*,*,*,*,*,*,multi\")])\n+   CC = R0 < R0;\n+   CC = R0 == R0;\"\n+  [(set_attr \"type\" \"move,mvi,mcld,mcst,compare,compare,compare,compare\")\n+   (set_attr \"length\" \"2,2,*,*,2,2,2,2\")\n+   (set_attr \"seq_insns\" \"*,*,*,*,*,*,*,*\")])\n \n (define_insn \"movpdi\"\n   [(set (match_operand:PDI 0 \"nonimmediate_operand\" \"=e,<,e\")\n@@ -2826,6 +2828,16 @@\n   gcc_unreachable ();\n })\n \n+(define_insn \"dummy_load\"\n+  [(unspec_volatile [(match_operand 0 \"register_operand\" \"a\")\n+\t\t     (match_operand 1 \"register_operand\" \"C\")]\n+\t\t    UNSPEC_VOLATILE_DUMMY)]\n+  \"\"\n+  \"if cc jump 4;\\n\\tr7 = [%0];\"\n+ [(set_attr \"type\" \"misc\")\n+  (set_attr \"length\" \"4\")\n+  (set_attr \"seq_insns\" \"multi\")])\n+\n (define_insn \"csync\"\n   [(unspec_volatile [(const_int 0)] UNSPEC_VOLATILE_CSYNC)]\n   \"\""}]}