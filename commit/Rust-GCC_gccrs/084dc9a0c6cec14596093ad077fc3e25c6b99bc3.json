{"sha": "084dc9a0c6cec14596093ad077fc3e25c6b99bc3", "node_id": "C_kwDOANBUbNoAKDA4NGRjOWEwYzZjZWMxNDU5NjA5M2FkMDc3ZmMzZTI1YzZiOTliYzM", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-09T21:10:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-09-09T21:10:08Z"}, "message": "analyzer: add test coverage for flexible array members [PR98247]\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/98247\n\t* gcc.dg/analyzer/flexible-array-member-1.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "90c661eee07195bf9c16316ddfbde66fd7312923", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90c661eee07195bf9c16316ddfbde66fd7312923"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/084dc9a0c6cec14596093ad077fc3e25c6b99bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084dc9a0c6cec14596093ad077fc3e25c6b99bc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/084dc9a0c6cec14596093ad077fc3e25c6b99bc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/084dc9a0c6cec14596093ad077fc3e25c6b99bc3/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "007680f946eaffa3c6321624129e1ec18e673091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/007680f946eaffa3c6321624129e1ec18e673091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/007680f946eaffa3c6321624129e1ec18e673091"}], "stats": {"total": 100, "additions": 100, "deletions": 0}, "files": [{"sha": "2df085a43f2331f452718b9d9b1d7a4c04237bcc", "filename": "gcc/testsuite/gcc.dg/analyzer/flexible-array-member-1.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/084dc9a0c6cec14596093ad077fc3e25c6b99bc3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflexible-array-member-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/084dc9a0c6cec14596093ad077fc3e25c6b99bc3/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflexible-array-member-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fflexible-array-member-1.c?ref=084dc9a0c6cec14596093ad077fc3e25c6b99bc3", "patch": "@@ -0,0 +1,100 @@\n+#include <stdlib.h>\n+#include <string.h>\n+\n+struct str {\n+  size_t len;\n+  char data[];\n+};\n+\n+struct str *\n+test_const_size (void)\n+{\n+  struct str *str = malloc(sizeof(str) + 10);\n+  if (str) {\n+    str->len = 10;\n+    memset(str->data, 'x', 10);\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_const_size_oob_1 (void)\n+{\n+  /* Forgetting to add space for the trailing array.  */\n+  struct str *str = malloc(sizeof(str));\n+  if (str) {\n+    str->len = 10;\n+    memset(str->data, 'x', 10); /* { dg-warning \"heap-based buffer overflow\" \"Wanalyzer-out-of-bounds\" } */\n+    /* { dg-warning \"'memset' writing 10 bytes into a region of size 0 overflows the destination\" \"Wstringop-overflow\" { target *-*-* } .-1 } */\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_const_size_oob_2 (void)\n+{\n+  struct str *str = malloc(sizeof(str) + 10);\n+  if (str) {\n+    str->len = 10;\n+    /* Using the wrong size here.  */\n+    memset(str->data, 'x', 11); /* { dg-warning \"heap-based buffer overflow\" \"Wanalyzer-out-of-bounds\" } */\n+    /* { dg-warning \"'memset' writing 11 bytes into a region of size 10 overflows the destination\" \"Wstringop-overflow\" { target *-*-* } .-1 } */\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_symbolic_size (size_t len)\n+{\n+  struct str *str = malloc(sizeof(str) + len);\n+  if (str) {\n+    str->len = len;\n+    memset(str->data, 'x', len);\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_symbolic_size_oob (size_t len)\n+{\n+  /* Forgetting to add space for the trailing array.  */\n+  struct str *str = malloc(sizeof(str));\n+  if (str) {\n+    str->len = len;\n+    memset(str->data, 'x', len); /* { dg-warning \"heap-based buffer overflow\" \"PR analyzer/98247\" { xfail *-*-* } } */\n+    // TODO(xfail): we don't yet complain about this case, which occurs when len > 0\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_symbolic_size_with_terminator (size_t len)\n+{\n+  struct str *str = malloc(sizeof(str) + len + 1);\n+  if (str) {\n+    str->len = len;\n+    memset(str->data, 'x', len);\n+    str->data[len] = '\\0';\n+    return str;\n+  }\n+  return NULL;\n+}\n+\n+struct str *\n+test_symbolic_size_with_terminator_oob (size_t len)\n+{\n+  /* Forgetting to add 1 for the terminator.  */\n+  struct str *str = malloc(sizeof(str) + len);\n+  if (str) {\n+    str->len = len;\n+    memset(str->data, 'x', len);\n+    str->data[len] = '\\0'; /* { dg-warning \"heap-based buffer overflow\" } */\n+    return str;\n+  }\n+  return NULL;\n+}"}]}