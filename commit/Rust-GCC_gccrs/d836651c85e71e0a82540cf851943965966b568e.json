{"sha": "d836651c85e71e0a82540cf851943965966b568e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgzNjY1MWM4NWU3MWUwYTgyNTQwY2Y4NTE5NDM5NjU5NjZiNTY4ZQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2012-01-16T19:51:44Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-01-16T19:51:44Z"}, "message": "re PR fortran/50981 ([OOP] Wrong-code for scalarizing ELEMENTAL call with absent OPTIONAL argument)\n\n2012-01-16  Mikael Morin  <mikael@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50981\n        * trans-array.c (gfc_walk_elemental_function_args): Fix\n        passing of deallocated allocatables/pointers as absent argument. \n\n2012-01-16  Mikael Morin  <mikael@gcc.gnu.org>\n            Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/50981\n        * gfortran.dg/elemental_optional_args_3.f90: New\n        * gfortran.dg/elemental_optional_args_4.f90: New\n\n\nCo-Authored-By: Tobias Burnus <burnus@net-b.de>\n\nFrom-SVN: r183220", "tree": {"sha": "dc5fb2bde8f185a80653d7bfa19eab6fc8c53928", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc5fb2bde8f185a80653d7bfa19eab6fc8c53928"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d836651c85e71e0a82540cf851943965966b568e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d836651c85e71e0a82540cf851943965966b568e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d836651c85e71e0a82540cf851943965966b568e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d836651c85e71e0a82540cf851943965966b568e/comments", "author": null, "committer": null, "parents": [{"sha": "22c30bc09a6ff27638521bd82ac5e25c525f1273", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22c30bc09a6ff27638521bd82ac5e25c525f1273", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22c30bc09a6ff27638521bd82ac5e25c525f1273"}], "stats": {"total": 190, "additions": 187, "deletions": 3}, "files": [{"sha": "a4838ab63315c675e4a72b533519ed7173200f1b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d836651c85e71e0a82540cf851943965966b568e", "patch": "@@ -1,3 +1,10 @@\n+2012-01-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50981\n+\t* trans-array.c (gfc_walk_elemental_function_args): Fix\n+\tpassing of deallocated allocatables/pointers as absent argument. \n+\n 2012-01-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51809"}, {"sha": "b4ed58fe084be9a06f49ef614dd9fa8e3efac520", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=d836651c85e71e0a82540cf851943965966b568e", "patch": "@@ -8423,9 +8423,10 @@ gfc_walk_elemental_function_args (gfc_ss * ss, gfc_actual_arglist *arg,\n \n \t  if (dummy_arg != NULL\n \t      && dummy_arg->sym->attr.optional\n-\t      && arg->expr->symtree\n-\t      && arg->expr->symtree->n.sym->attr.optional\n-\t      && arg->expr->ref == NULL)\n+\t      && arg->expr->expr_type == EXPR_VARIABLE\n+\t      && (gfc_expr_attr (arg->expr).optional\n+\t\t  || gfc_expr_attr (arg->expr).allocatable\n+\t\t  || gfc_expr_attr (arg->expr).pointer))\n \t    newss->info->data.scalar.can_be_null_ref = true;\n \t}\n       else"}, {"sha": "82f9dd35e1f16e82abf0a900e8c6154e89d587ce", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d836651c85e71e0a82540cf851943965966b568e", "patch": "@@ -1,3 +1,10 @@\n+2012-01-16  Mikael Morin  <mikael@gcc.gnu.org>\n+\t    Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/50981\n+\t* gfortran.dg/elemental_optional_args_3.f90: New\n+\t* gfortran.dg/elemental_optional_args_4.f90: New\n+\n 2012-01-16  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/51809"}, {"sha": "c1098b34eb9e0a6505c2de0f1c4887d5ea68b58b", "filename": "gcc/testsuite/gfortran.dg/elemental_optional_args_3.f90", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_3.f90?ref=d836651c85e71e0a82540cf851943965966b568e", "patch": "@@ -0,0 +1,85 @@\n+! { dg-do run }\n+!\n+! PR fortran/50981\n+! The program used to dereference a NULL pointer when trying to access\n+! a pointer dummy argument to be passed to an elemental subprocedure.\n+!\n+! Original testcase from Andriy Kostyuk <kostyuk@fias.uni-frankfurt.de>\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+  REAL(KIND=8), DIMENSION(2) :: aa, rr\n+  INTEGER, TARGET  :: c\n+  INTEGER, POINTER :: b\n+\n+  aa(1)=10.\n+  aa(2)=11.\n+\n+  b=>c\n+  b=1\n+\n+  ! WRITE(*,*) 'Both f1 and ff work if the optional parameter is present:'\n+\n+  rr=f1(aa,b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr=0\n+  rr=ff(aa,b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+  b => NULL()\n+  ! WRITE(*,*) 'But only f1 works if the optional parameter is absent:'\n+\n+  rr=0\n+  rr=f1(aa, b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr = 0\n+  rr=ff(aa, b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+CONTAINS \n+\n+    FUNCTION ff(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a(:)\n+      REAL(KIND=8), DIMENSION(SIZE(a)) :: ff\n+      INTEGER, INTENT(IN), POINTER :: b\n+      REAL(KIND=8), DIMENSION(2, SIZE(a)) :: ac\n+      ac(1,:)=a\n+      ac(2,:)=a**2\n+      ff=SUM(gg(ac,b), dim=1)\n+    END FUNCTION ff\n+\n+    FUNCTION f1(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a(:)\n+      REAL(KIND=8), DIMENSION(SIZE(a)) :: f1\n+      INTEGER, INTENT(IN), POINTER :: b\n+      REAL(KIND=8), DIMENSION(2, SIZE(a)) :: ac\n+      ac(1,:)=a\n+      ac(2,:)=a**2\n+      f1=gg(ac(1,:),b)+gg(ac(2,:),b) ! This is the same as in ff, but without using the elemental feature of gg\n+    END FUNCTION f1\n+\n+    ELEMENTAL REAL(KIND=8) FUNCTION gg(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a\n+      INTEGER, INTENT(IN), OPTIONAL :: b\n+      INTEGER ::b1\n+      IF(PRESENT(b)) THEN\n+        b1=b\n+      ELSE\n+        b1=1\n+      ENDIF\n+      gg=a**b1\n+    END FUNCTION gg\n+\n+\n+END PROGRAM test"}, {"sha": "fa359fb1b9d5c20dc657e2458e4a9123959489e0", "filename": "gcc/testsuite/gfortran.dg/elemental_optional_args_4.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d836651c85e71e0a82540cf851943965966b568e/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_optional_args_4.f90?ref=d836651c85e71e0a82540cf851943965966b568e", "patch": "@@ -0,0 +1,84 @@\n+! { dg-do run }\n+!\n+! PR fortran/50981\n+! The program used to dereference a NULL pointer when trying to access\n+! an allocatable dummy argument to be passed to an elemental subprocedure.\n+!\n+! Original testcase from Andriy Kostyuk <kostyuk@fias.uni-frankfurt.de>\n+\n+PROGRAM test\n+  IMPLICIT NONE\n+  REAL(KIND=8), DIMENSION(2) :: aa, rr\n+  INTEGER, ALLOCATABLE :: b\n+\n+  aa(1)=10.\n+  aa(2)=11.\n+\n+  ALLOCATE(b)\n+  b=1\n+\n+  ! WRITE(*,*) 'Both f1 and ff work if the optional parameter is present:'\n+\n+  rr=f1(aa,b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr=0\n+  rr=ff(aa,b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+  DEALLOCATE(b)\n+  ! WRITE(*,*) 'But only f1 works if the optional parameter is absent:'\n+\n+  rr=0\n+  rr=f1(aa, b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+  rr = 0\n+  rr=ff(aa, b)\n+  ! WRITE(*,*) ' rr(1)=', rr(1), '  rr(2)=', rr(2)\n+  IF (ANY(rr /= (/ 110, 132 /))) CALL ABORT\n+\n+\n+CONTAINS \n+\n+    FUNCTION ff(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a(:)\n+      REAL(KIND=8), DIMENSION(SIZE(a)) :: ff\n+      INTEGER, INTENT(IN), ALLOCATABLE :: b\n+      REAL(KIND=8), DIMENSION(2, SIZE(a)) :: ac\n+      ac(1,:)=a\n+      ac(2,:)=a**2\n+      ff=SUM(gg(ac,b), dim=1)\n+    END FUNCTION ff\n+\n+    FUNCTION f1(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a(:)\n+      REAL(KIND=8), DIMENSION(SIZE(a)) :: f1\n+      INTEGER, INTENT(IN), ALLOCATABLE :: b\n+      REAL(KIND=8), DIMENSION(2, SIZE(a)) :: ac\n+      ac(1,:)=a\n+      ac(2,:)=a**2\n+      f1=gg(ac(1,:),b)+gg(ac(2,:),b) ! This is the same as in ff, but without using the elemental feature of gg\n+    END FUNCTION f1\n+\n+    ELEMENTAL REAL(KIND=8) FUNCTION gg(a,b)\n+      IMPLICIT NONE\n+      REAL(KIND=8), INTENT(IN) :: a\n+      INTEGER, INTENT(IN), OPTIONAL :: b\n+      INTEGER ::b1\n+      IF(PRESENT(b)) THEN\n+        b1=b\n+      ELSE\n+        b1=1\n+      ENDIF\n+      gg=a**b1\n+    END FUNCTION gg\n+\n+\n+END PROGRAM test"}]}