{"sha": "3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EwYjI4ZjgzZDEyY2MwNTM5ZGExOGJmYzQ4NTFlZjRhZDQyZjc1OQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-18T19:10:41Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-18T19:10:41Z"}, "message": "tree-ssa-threadupdate.c: Fix file block comment.\n\n        * tree-ssa-threadupdate.c: Fix file block comment.\n        Fix minor indention issue.\n\nFrom-SVN: r204978", "tree": {"sha": "44df1a766a74a7a86bf2170c72a60c4820364d8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44df1a766a74a7a86bf2170c72a60c4820364d8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a0b28f83d12cc0539da18bfc4851ef4ad42f759/comments", "author": null, "committer": null, "parents": [{"sha": "30d0460982f52318cf569435d76e2312fa712369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d0460982f52318cf569435d76e2312fa712369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d0460982f52318cf569435d76e2312fa712369"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "d61b4946aa8493cafae5db5bf9e921565c71b5ff", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0b28f83d12cc0539da18bfc4851ef4ad42f759/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0b28f83d12cc0539da18bfc4851ef4ad42f759/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c: Fix file block comment.\n+\tFix minor indention issue.\n+\n 2013-11-18  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_decompose_address): Use REG_P instead of"}, {"sha": "7cca91ad26821da8efe0435b1eb9e740ebbbdcd2", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a0b28f83d12cc0539da18bfc4851ef4ad42f759/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a0b28f83d12cc0539da18bfc4851ef4ad42f759/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=3a0b28f83d12cc0539da18bfc4851ef4ad42f759", "patch": "@@ -73,19 +73,16 @@ along with GCC; see the file COPYING3.  If not see\n    set of unique destination blocks that the incoming edges should\n    be threaded to.\n \n-   Block duplication can be further minimized by using B instead of\n-   creating B' for one destination if all edges into B are going to be\n-   threaded to a successor of B.  We had code to do this at one time, but\n-   I'm not convinced it is correct with the changes to avoid mucking up\n-   the loop structure (which may cancel threading requests, thus a block\n-   which we thought was going to become unreachable may still be reachable).\n-   This code was also going to get ugly with the introduction of the ability\n-   for a single jump thread request to bypass multiple blocks.\n+   We reduce the number of edges and statements we create by not copying all\n+   the outgoing edges and the control statement in step #1.  We instead create\n+   a template block without the outgoing edges and duplicate the template.\n \n-   We further reduce the number of edges and statements we create by\n-   not copying all the outgoing edges and the control statement in\n-   step #1.  We instead create a template block without the outgoing\n-   edges and duplicate the template.  */\n+   Another case this code handles is threading through a \"joiner\" block.  In\n+   this case, we do not know the destination of the joiner block, but one\n+   of the outgoing edges from the joiner block leads to a threadable path.  This\n+   case largely works as outlined above, except the duplicate of the joiner\n+   block still contains a full set of outgoing edges and its control statement.\n+   We just redirect one of its outgoing edges to our jump threading path.  */\n \n \n /* Steps #5 and #6 of the above algorithm are best implemented by walking\n@@ -389,7 +386,7 @@ create_edge_and_update_destination_phis (struct redirection_data *rd,\n \t    = new jump_thread_edge ((*path)[i]->e, (*path)[i]->type);\n \t  copy->safe_push (x);\n \t}\n-     e->aux = (void *)copy;\n+      e->aux = (void *)copy;\n     }\n   else\n     {"}]}