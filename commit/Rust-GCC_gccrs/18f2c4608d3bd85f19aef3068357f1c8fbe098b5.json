{"sha": "18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MThmMmM0NjA4ZDNiZDg1ZjE5YWVmMzA2ODM1N2YxYzhmYmUwOThiNQ==", "commit": {"author": {"name": "Pascal Obry", "email": "obry@adacore.com", "date": "2014-07-18T10:56:54Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-18T10:56:54Z"}, "message": "a-textio.adb: Rename Is_Text_File to Text_Encoding.\n\n2014-07-18  Pascal Obry  <obry@adacore.com>\n\n\t* a-textio.adb: Rename Is_Text_File to Text_Encoding.\n\t* a-ztexio.adb: Likewise.\n\t* a-witeio.adb: Likewise.\n\t(Open): Pass file's translation mode to set_text_mode.\n\t* s-ficobl.ads (Content_Encoding): New type.\n\t(Text_Content_Encoding): New subtype.\n\t(AFCB): Rename Is_Text_File to Text_Encoding.\n\t* s-fileio.adb (Open): Handles new text_translation\n\tvalues. Remove Is_Text_File which is equivalent to Text_Encoding\n\tin Text_Content_Encoding.\n\t* adaint.h (__gnat_set_mode): New routine.\n\t* sysdep.c (__gnat_set_wide_text_mode): Removed.\n\t(__gnat_set_mode): New routine.\n\nFrom-SVN: r212810", "tree": {"sha": "623ebcb7d17d16425291f23fee7e8a60a5be9602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/623ebcb7d17d16425291f23fee7e8a60a5be9602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/comments", "author": {"login": "TurboGit", "id": 467069, "node_id": "MDQ6VXNlcjQ2NzA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TurboGit", "html_url": "https://github.com/TurboGit", "followers_url": "https://api.github.com/users/TurboGit/followers", "following_url": "https://api.github.com/users/TurboGit/following{/other_user}", "gists_url": "https://api.github.com/users/TurboGit/gists{/gist_id}", "starred_url": "https://api.github.com/users/TurboGit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TurboGit/subscriptions", "organizations_url": "https://api.github.com/users/TurboGit/orgs", "repos_url": "https://api.github.com/users/TurboGit/repos", "events_url": "https://api.github.com/users/TurboGit/events{/privacy}", "received_events_url": "https://api.github.com/users/TurboGit/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19ac960acdc4d8b2212e49ff427c181c78a815cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ac960acdc4d8b2212e49ff427c181c78a815cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ac960acdc4d8b2212e49ff427c181c78a815cb"}], "stats": {"total": 194, "additions": 155, "deletions": 39}, "files": [{"sha": "149e8bdbf24fc1ce914f743946ce136f7dd6068f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -1,3 +1,19 @@\n+2014-07-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* a-textio.adb: Rename Is_Text_File to Text_Encoding.\n+\t* a-ztexio.adb: Likewise.\n+\t* a-witeio.adb: Likewise.\n+\t(Open): Pass file's translation mode to set_text_mode.\n+\t* s-ficobl.ads (Content_Encoding): New type.\n+\t(Text_Content_Encoding): New subtype.\n+\t(AFCB): Rename Is_Text_File to Text_Encoding.\n+\t* s-fileio.adb (Open): Handles new text_translation\n+\tvalues. Remove Is_Text_File which is equivalent to Text_Encoding\n+\tin Text_Content_Encoding.\n+\t* adaint.h (__gnat_set_mode): New routine.\n+\t* sysdep.c (__gnat_set_wide_text_mode): Removed.\n+\t(__gnat_set_mode): New routine.\n+\n 2014-07-18  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/decl.c, gcc-interface/trans.c,"}, {"sha": "433d4ba55867e8d93f973fd0f1013890ff556631", "filename": "gcc/ada/a-textio.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-textio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-textio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-textio.adb?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -921,7 +921,7 @@ package body Ada.Text_IO is\n       Standard_Err.Is_Regular_File   := is_regular_file (fileno (stderr)) /= 0;\n       Standard_Err.Is_Temporary_File := False;\n       Standard_Err.Is_System_File    := True;\n-      Standard_Err.Is_Text_File      := True;\n+      Standard_Err.Text_Encoding     := FCB.Default_Text;\n       Standard_Err.Access_Method     := 'T';\n       Standard_Err.Self              := Standard_Err;\n       Standard_Err.WC_Method         := Default_WCEM;\n@@ -933,7 +933,7 @@ package body Ada.Text_IO is\n       Standard_In.Is_Regular_File    := is_regular_file (fileno (stdin)) /= 0;\n       Standard_In.Is_Temporary_File  := False;\n       Standard_In.Is_System_File     := True;\n-      Standard_In.Is_Text_File       := True;\n+      Standard_In.Text_Encoding      := FCB.Default_Text;\n       Standard_In.Access_Method      := 'T';\n       Standard_In.Self               := Standard_In;\n       Standard_In.WC_Method          := Default_WCEM;\n@@ -945,7 +945,7 @@ package body Ada.Text_IO is\n       Standard_Out.Is_Regular_File   := is_regular_file (fileno (stdout)) /= 0;\n       Standard_Out.Is_Temporary_File := False;\n       Standard_Out.Is_System_File    := True;\n-      Standard_Out.Is_Text_File      := True;\n+      Standard_Out.Text_Encoding     := FCB.Default_Text;\n       Standard_Out.Access_Method     := 'T';\n       Standard_Out.Self              := Standard_Out;\n       Standard_Out.WC_Method         := Default_WCEM;"}, {"sha": "684f4609c2c2af066d2bb1ce7468e99c20ebcb8e", "filename": "gcc/ada/a-witeio.adb", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-witeio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-witeio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-witeio.adb?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -892,7 +892,7 @@ package body Ada.Wide_Text_IO is\n       Standard_Err.Is_Regular_File   := is_regular_file (fileno (stderr)) /= 0;\n       Standard_Err.Is_Temporary_File := False;\n       Standard_Err.Is_System_File    := True;\n-      Standard_Err.Is_Text_File      := True;\n+      Standard_Err.Text_Encoding     := FCB.Default_Text;\n       Standard_Err.Access_Method     := 'T';\n       Standard_Err.Self              := Standard_Err;\n       Standard_Err.WC_Method         := Default_WCEM;\n@@ -904,7 +904,7 @@ package body Ada.Wide_Text_IO is\n       Standard_In.Is_Regular_File    := is_regular_file (fileno (stdin)) /= 0;\n       Standard_In.Is_Temporary_File  := False;\n       Standard_In.Is_System_File     := True;\n-      Standard_In.Is_Text_File       := True;\n+      Standard_In.Text_Encoding      := FCB.Default_Text;\n       Standard_In.Access_Method      := 'T';\n       Standard_In.Self               := Standard_In;\n       Standard_In.WC_Method          := Default_WCEM;\n@@ -916,7 +916,7 @@ package body Ada.Wide_Text_IO is\n       Standard_Out.Is_Regular_File   := is_regular_file (fileno (stdout)) /= 0;\n       Standard_Out.Is_Temporary_File := False;\n       Standard_Out.Is_System_File    := True;\n-      Standard_Out.Is_Text_File      := True;\n+      Standard_Out.Text_Encoding     := FCB.Default_Text;\n       Standard_Out.Access_Method     := 'T';\n       Standard_Out.Self              := Standard_Out;\n       Standard_Out.WC_Method         := Default_WCEM;\n@@ -1227,6 +1227,8 @@ package body Ada.Wide_Text_IO is\n      (File : File_Type;\n       Item : Wide_Character)\n    is\n+      use type FCB.Content_Encoding;\n+\n       wide_text_translation_required : Boolean;\n       for wide_text_translation_required'Size use Character'Size;\n       pragma Import (C, wide_text_translation_required,\n@@ -1256,8 +1258,12 @@ package body Ada.Wide_Text_IO is\n    begin\n       FIO.Check_Write_Status (AP (File));\n \n-      if wide_text_translation_required then\n-         set_wide_text_mode (fileno (File.Stream));\n+      if wide_text_translation_required\n+        or else File.Text_Encoding /= FCB.Default_Text\n+      then\n+         set_mode\n+           (fileno (File.Stream),\n+            FCB.Text_Content_Encoding'Pos (File.Text_Encoding));\n          Discard := fputwc (Wide_Character'Pos (Item), File.Stream);\n       else\n          WC_Out (Item, File.WC_Method);"}, {"sha": "197a8ad387b26e469d91f21504f3eec13f927428", "filename": "gcc/ada/a-ztexio.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-ztexio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fa-ztexio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztexio.adb?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -892,7 +892,7 @@ package body Ada.Wide_Wide_Text_IO is\n       Standard_Err.Is_Regular_File   := is_regular_file (fileno (stderr)) /= 0;\n       Standard_Err.Is_Temporary_File := False;\n       Standard_Err.Is_System_File    := True;\n-      Standard_Err.Is_Text_File      := True;\n+      Standard_Err.Text_Encoding     := FCB.Default_Text;\n       Standard_Err.Access_Method     := 'T';\n       Standard_Err.Self              := Standard_Err;\n       Standard_Err.WC_Method         := Default_WCEM;\n@@ -904,7 +904,7 @@ package body Ada.Wide_Wide_Text_IO is\n       Standard_In.Is_Regular_File    := is_regular_file (fileno (stdin)) /= 0;\n       Standard_In.Is_Temporary_File  := False;\n       Standard_In.Is_System_File     := True;\n-      Standard_In.Is_Text_File       := True;\n+      Standard_In.Text_Encoding      := FCB.Default_Text;\n       Standard_In.Access_Method      := 'T';\n       Standard_In.Self               := Standard_In;\n       Standard_In.WC_Method          := Default_WCEM;\n@@ -916,7 +916,7 @@ package body Ada.Wide_Wide_Text_IO is\n       Standard_Out.Is_Regular_File   := is_regular_file (fileno (stdout)) /= 0;\n       Standard_Out.Is_Temporary_File := False;\n       Standard_Out.Is_System_File    := True;\n-      Standard_Out.Is_Text_File      := True;\n+      Standard_Out.Text_Encoding     := FCB.Default_Text;\n       Standard_Out.Access_Method     := 'T';\n       Standard_Out.Self              := Standard_Out;\n       Standard_Out.WC_Method         := Default_WCEM;"}, {"sha": "2330a7945151ebcafeb232d3917a73811e1531de", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -244,6 +244,7 @@ extern int    __gnat_pipe\t\t\t   (int *);\n extern int    __gnat_expect_poll\t\t   (int *, int, int, int *);\n extern void   __gnat_set_binary_mode\t\t   (int);\n extern void   __gnat_set_text_mode\t\t   (int);\n+extern void   __gnat_set_mode\t\t\t   (int,int);\n extern char  *__gnat_ttyname\t\t\t   (int);\n extern int    __gnat_lseek\t\t\t   (int, long, int);\n extern int    __gnat_set_close_on_exec\t\t   (int, int);"}, {"sha": "29165c9883317a6cf86f8ea27627c8baecc35b19", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -17367,7 +17367,7 @@ between values.  The order of the entries is not important.  Currently\n the following keywords defined.\n \n @smallexample\n-TEXT_TRANSLATION=[YES|NO]\n+TEXT_TRANSLATION=[YES|NO|TEXT|BINARY|U8TEXT|WTEXT|U16TEXT]\n SHARED=[YES|NO]\n WCEM=[n|h|u|s|e|8|b]\n ENCODING=[UTF8|8BITS]\n@@ -18096,14 +18096,35 @@ manner described for stream attributes.\n \n @noindent\n @samp{Text_Translation=@var{xxx}} may be used as the Form parameter\n-passed to Text_IO.Create and Text_IO.Open:\n-@samp{Text_Translation=@var{Yes}} is the default, which means to\n+passed to Text_IO.Create and Text_IO.Open. @samp{Text_Translation=@var{xxx}}\n+has no effect on Unix systems. Possible values are:\n+\n+@itemize @bullet\n+\n+@item\n+@samp{@var{Yes} or @var{Text}} is the default, which means to\n translate LF to/from CR/LF on Windows systems.\n-@samp{Text_Translation=@var{No}} disables this translation; i.e. it\n+\n+@samp{@var{No}} disables this translation; i.e. it\n uses binary mode. For output files, @samp{Text_Translation=@var{No}}\n may be used to create Unix-style files on\n-Windows. @samp{Text_Translation=@var{xxx}} has no effect on Unix\n-systems.\n+Windows.\n+\n+@item\n+@samp{@var{wtext}} translation enabled in Unicode mode.\n+(corresponds to _O_WTEXT).\n+\n+@item\n+@samp{@var{u8text}} translation enabled in Unicode UTF-8 mode.\n+(corresponds to O_U8TEXT).\n+\n+@item\n+@samp{@var{u16text}} translation enabled in Unicode UTF-16\n+mode. (corresponds to_O_U16TEXT).\n+\n+@end itemize\n+\n+\n \n @node Shared Files\n @section Shared Files"}, {"sha": "add85b33bf8920a86bf3280c2159780ae6865bdb", "filename": "gcc/ada/i-cstrea.ads", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fi-cstrea.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fi-cstrea.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-cstrea.ads?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -228,11 +228,17 @@ package Interfaces.C_Streams is\n    --  versa. These functions have no effect if text_translation_required is\n    --  false (e.g. in normal unix mode). Use fileno to get a stream handle.\n \n-   procedure set_wide_text_mode (handle : int);\n-   --  This is similar to set_text_mode but switches the translation to 16-bit\n-   --  wide-character instead of 8-bit character. Again, this routine has no\n-   --  effect if text_translation_required is false. On Windows this is used\n-   --  to have proper 16-bit wide-string output on the console for example.\n+   procedure set_mode (handle : int; Mode : int);\n+   --  As above but can set the handle to any mode. On Windows this can be used\n+   --  to have proper 16-bit wide-string output on the console for example. The\n+   --  mode value corresponds to Content_Encoding'Pos:\n+   --     0 = binary, equivalent to set_binary_mode\n+   --     1 = default mode, as set by the GNAT_CCS_ENCODING or equivalent to 2\n+   --     2 = text, equivalent to set_text_mode\n+   --     3 = u8text, set encoding to Unicode UTF-8\n+   --     4 = wide-text, set encoding to Unicode\n+   --     5 = u16text, set encoding to Unicode UTF-16\n+   --  Wouldn't it be better to use an enumeration type here???\n \n    ----------------------------\n    -- Full Path Name support --\n@@ -264,7 +270,7 @@ private\n \n    pragma Import (C, set_binary_mode, \"__gnat_set_binary_mode\");\n    pragma Import (C, set_text_mode, \"__gnat_set_text_mode\");\n-   pragma Import (C, set_wide_text_mode, \"__gnat_set_wide_text_mode\");\n+   pragma Import (C, set_mode, \"__gnat_set_mode\");\n \n    pragma Import (C, max_path_len, \"__gnat_max_path_len\");\n    pragma Import (C, full_name, \"__gnat_full_name\");"}, {"sha": "e826ffac6afefd0bd2caf21a3e7bc89ceaf49ac5", "filename": "gcc/ada/s-ficobl.ads", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fs-ficobl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fs-ficobl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-ficobl.ads?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1992-2012, Free Software Foundation, Inc.       --\n+--            Copyright (C) 1992-2014, Free Software Foundation, Inc.       --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -78,6 +78,25 @@ package System.File_Control_Block is\n    --  stream with the semantics specified in the RM for file sharing. All\n    --  files opened with \"shared=no\" will have their own stream.\n \n+   type Content_Encoding is (None, Default_Text, Text, U8text, Wtext, U16text);\n+   --  Described the text encoding for file content:\n+   --    None         : No text encoding, this file is treated as a binary file\n+   --    Default_Text : A text file but not from Text_Translation form string\n+   --                   In this mode we are eventually using the system-wide\n+   --                   translation if activated.\n+   --    Text         : Text encoding activated\n+   --    Wtext        : Unicode mode\n+   --    U16text      : Unicode UTF-16 encoding\n+   --    U8text       : Unicode UTF-8 encoding\n+   --\n+   --  This encoding is system dependent and only used on Windows systems.\n+   --\n+   --  Note that modifications to Content_Encoding must be synchronized\n+   --  with sysdep.c:__gnat_set_mode.\n+\n+   subtype Text_Content_Encoding\n+     is Content_Encoding range Default_Text .. U16text;\n+\n    type AFCB is tagged;\n    type AFCB_Ptr is access all AFCB'Class;\n \n@@ -116,8 +135,8 @@ package System.File_Control_Block is\n       Is_System_File : Boolean;\n       --  A flag set only for system files (stdin, stdout, stderr)\n \n-      Is_Text_File : Boolean;\n-      --  A flag set if the file was opened in text mode\n+      Text_Encoding : Content_Encoding;\n+      --  A flag set to describe file content encoding\n \n       Shared_Status : Shared_Status_Type;\n       --  Indicates sharing status of file, see description of type above"}, {"sha": "627224f3dbffbc4a003aedd252e6e32f903fb10f", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -36,6 +36,7 @@ with Interfaces.C;\n with Interfaces.C_Streams; use Interfaces.C_Streams;\n \n with System.CRTL;\n+\n with System.Case_Util;    use System.Case_Util;\n with System.OS_Lib;\n with System.Soft_Links;\n@@ -958,7 +959,7 @@ package body System.File_IO is\n       Formstr : aliased String (1 .. Form'Length + 1);\n       --  Form string with ASCII.NUL appended, folded to lower case\n \n-      Is_Text_File : Boolean;\n+      Text_Encoding : Content_Encoding;\n \n       Tempfile : constant Boolean := (Name'Length = 0);\n       --  Indicates temporary file case\n@@ -1042,11 +1043,37 @@ package body System.File_IO is\n       --  if the Form says Text_Translation=No, we use binary mode, so new-line\n       --  will be just LF, even on Windows.\n \n-      Is_Text_File := Text;\n+      if Text then\n+         Text_Encoding := Default_Text;\n+      else\n+         Text_Encoding := None;\n+      end if;\n \n-      if Is_Text_File then\n-         Is_Text_File :=\n-           Form_Boolean (Formstr, \"text_translation\", Default => True);\n+      if Text_Encoding in Text_Content_Encoding then\n+         declare\n+            V1, V2 : Natural;\n+\n+         begin\n+            Form_Parameter (Formstr, \"text_translation\", V1, V2);\n+\n+            if V1 = 0 then\n+               null;\n+            elsif Formstr (V1 .. V2) = \"no\" then\n+               Text_Encoding := None;\n+            elsif Formstr (V1 .. V2) = \"text\"\n+              or else Formstr (V1 .. V2) = \"yes\"\n+            then\n+               Text_Encoding := File_Control_Block.Text;\n+            elsif Formstr (V1 .. V2) = \"wtext\" then\n+               Text_Encoding := Wtext;\n+            elsif Formstr (V1 .. V2) = \"u8text\" then\n+               Text_Encoding := U8text;\n+            elsif Formstr (V1 .. V2) = \"u16text\" then\n+               Text_Encoding := U16text;\n+            else\n+               raise Use_Error with \"invalid Form\";\n+            end if;\n+         end;\n       end if;\n \n       --  Acquire settings of target specific form parameters on VMS. Only\n@@ -1200,7 +1227,9 @@ package body System.File_IO is\n          --  Open specified file if we did not find an existing stream\n \n          if Stream = NULL_Stream then\n-            Fopen_Mode (Mode, Is_Text_File, Creat, Amethod, Fopstr);\n+            Fopen_Mode\n+              (Mode, Text_Encoding in Text_Content_Encoding,\n+               Creat, Amethod, Fopstr);\n \n             --  A special case, if we are opening (OPEN case) a file and the\n             --  mode returned by Fopen_Mode is not \"r\" or \"r+\", then we first\n@@ -1274,7 +1303,7 @@ package body System.File_IO is\n \n       File_Ptr.Is_Regular_File   := (is_regular_file (fileno (Stream)) /= 0);\n       File_Ptr.Is_System_File    := False;\n-      File_Ptr.Is_Text_File      := Is_Text_File;\n+      File_Ptr.Text_Encoding     := Text_Encoding;\n       File_Ptr.Shared_Status     := Shared;\n       File_Ptr.Access_Method     := Amethod;\n       File_Ptr.Stream            := Stream;\n@@ -1398,7 +1427,8 @@ package body System.File_IO is\n \n       else\n          Fopen_Mode\n-           (Mode, File.Is_Text_File, False, File.Access_Method, Fopstr);\n+           (Mode, File.Text_Encoding in Text_Content_Encoding,\n+            False, File.Access_Method, Fopstr);\n \n          Form_VMS_RMS_Keys (File.Form.all, VMS_Formstr);\n "}, {"sha": "e2187e7472027bc792b0b1898e6918ca66b7372d", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18f2c4608d3bd85f19aef3068357f1c8fbe098b5/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=18f2c4608d3bd85f19aef3068357f1c8fbe098b5", "patch": "@@ -152,9 +152,26 @@ __gnat_set_text_mode (int handle)\n }\n \n void\n-__gnat_set_wide_text_mode (int handle)\n+__gnat_set_mode (int handle, int mode)\n {\n-  WIN_SETMODE (handle, CurrentCCSEncoding);\n+  /*  the values here must be synchronized with\n+      System.File_Control_Block.Content_Encodding:\n+\n+      None         = 0\n+      Default_Text = 1\n+      Text         = 2\n+      U8text       = 3\n+      Wtext        = 4\n+      U16text      = 5  */\n+\n+ switch (mode) {\n+    case 0 : WIN_SETMODE (handle, _O_BINARY);          break;\n+    case 1 : WIN_SETMODE (handle, CurrentCCSEncoding); break;\n+    case 2 : WIN_SETMODE (handle, _O_TEXT);            break;\n+    case 3 : WIN_SETMODE (handle, _O_U8TEXT);          break;\n+    case 4 : WIN_SETMODE (handle, _O_WTEXT);           break;\n+    case 5 : WIN_SETMODE (handle, _O_U16TEXT);         break;\n+ }\n }\n \n #ifdef __CYGWIN__\n@@ -254,7 +271,7 @@ __gnat_set_text_mode (int handle ATTRIBUTE_UNUSED)\n }\n \n void\n-__gnat_set_wide_text_mode (int handle ATTRIBUTE_UNUSED)\n+__gnat_set_mode (int handle ATTRIBUTE_UNUSED, int mode ATTRIBUTE_UNUSED)\n {\n }\n "}]}