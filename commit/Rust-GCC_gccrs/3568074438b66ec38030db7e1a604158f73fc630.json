{"sha": "3568074438b66ec38030db7e1a604158f73fc630", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU2ODA3NDQzOGI2NmVjMzgwMzBkYjdlMWE2MDQxNThmNzNmYzYzMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchell@usa.net", "date": "1998-05-20T10:04:25Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-20T10:04:25Z"}, "message": "cp-tree.h (MAIN_NAME_P): New macro.\n\n\t* cp-tree.h (MAIN_NAME_P): New macro.\n\t(DECL_MAIN_P): Likwise.\n\t* decl.c (pushdecl): Avoid crashing on redefinitions of `main'.\n\t(grokfndecl): Use the new macros.\n\t(grokdeclarator): Likewise.\n\t(start_function): Likewise.\n\t(store_parm_decls): Likewise.\n\t(finsh_function): Likewise.\n\t* friend.c (do_friend): Likewise.\n\t* typeck.c (build_function_call_real): Likewise.\n\t(build_unary_op): Likewise.\n\nFrom-SVN: r19907", "tree": {"sha": "a65451c103401649edab63a17b403de48f8b42ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a65451c103401649edab63a17b403de48f8b42ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3568074438b66ec38030db7e1a604158f73fc630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3568074438b66ec38030db7e1a604158f73fc630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3568074438b66ec38030db7e1a604158f73fc630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3568074438b66ec38030db7e1a604158f73fc630/comments", "author": null, "committer": null, "parents": [{"sha": "3e98dfd1cb277152daf7d1b2146fb9f0386f75f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e98dfd1cb277152daf7d1b2146fb9f0386f75f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e98dfd1cb277152daf7d1b2146fb9f0386f75f3"}], "stats": {"total": 85, "additions": 53, "deletions": 32}, "files": [{"sha": "153aedc220b6cd485265f222078a160781e7a4d3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3568074438b66ec38030db7e1a604158f73fc630", "patch": "@@ -1,3 +1,17 @@\n+1998-05-20  Mark Mitchell  <mmitchell@usa.net>\n+\n+\t* cp-tree.h (MAIN_NAME_P): New macro.\n+\t(DECL_MAIN_P): Likwise.\n+\t* decl.c (pushdecl): Avoid crashing on redefinitions of `main'.\n+\t(grokfndecl): Use the new macros.\n+\t(grokdeclarator): Likewise.\n+\t(start_function): Likewise.\n+\t(store_parm_decls): Likewise.\n+\t(finsh_function): Likewise.\n+\t* friend.c (do_friend): Likewise.\n+\t* typeck.c (build_function_call_real): Likewise.\n+\t(build_unary_op): Likewise.\n+\n Wed May 20 02:16:01 1998  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl2.c (start_objects, finish_objects, do_dtors,"}, {"sha": "12ca0275e18abffaa9eddc80c92c0fb1befc9bca", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=3568074438b66ec38030db7e1a604158f73fc630", "patch": "@@ -1918,6 +1918,21 @@ extern int current_function_parms_stored;\n #define ANON_PARMNAME_P(ID_NODE) (IDENTIFIER_POINTER (ID_NODE)[0] == '_' \\\n \t\t\t\t  && IDENTIFIER_POINTER (ID_NODE)[1] <= '9')\n #endif /* !defined(NO_DOLLAR_IN_LABEL) || !defined(NO_DOT_IN_LABEL) */\n+\n+/* Returns non-zero iff ID_NODE is an IDENTIFIER_NODE whose name is\n+   `main'.  */\n+#define MAIN_NAME_P(ID_NODE) \\\n+   (strcmp (IDENTIFIER_POINTER (ID_NODE), \"main\") == 0)\n+\n+/* Returns non-zero iff NODE is a declaration for the global function\n+   `main'.  */\n+#define DECL_MAIN_P(NODE)\t\t\t\t\\\n+   (TREE_CODE (NODE) == FUNCTION_DECL\t\t\t\\\n+    && (DECL_CONTEXT (NODE) == global_namespace \t\\\n+\t|| DECL_CONTEXT (NODE) == NULL_TREE)\t\t\\\n+    && DECL_NAME (NODE) != NULL_TREE\t\t\t\\\n+    && MAIN_NAME_P (DECL_NAME (NODE)))\n+\n \f\n /* Define the sets of attributes that member functions and baseclasses\n    can have.  These are sensible combinations of {public,private,protected}"}, {"sha": "0550db7e24e59ee632b0b429eeaf59b2b2a8cbb1", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3568074438b66ec38030db7e1a604158f73fc630", "patch": "@@ -3345,6 +3345,20 @@ pushdecl (x)\n \n \t      return t;\n \t    }\n+\t  else if (DECL_MAIN_P (x))\n+\t    {\n+\t      /* A redeclaration of main, but not a duplicate of the\n+\t\t previous one. \n+\n+\t\t [basic.start.main]\n+\n+\t         This function shall not be overloaded.  */\n+\t      cp_error_at (\"invalid redeclaration of `%D'\", t);\n+\t      cp_error (\"as `%D'\", x);\n+\t      /* We don't try to push this declaration since that\n+\t\t causes a crash.  */\n+\t      return x;\n+\t    }\n \t}\n \n       if (TREE_CODE (x) == FUNCTION_DECL && ! DECL_FUNCTION_MEMBER_P (x))\n@@ -7545,7 +7559,7 @@ grokfndecl (ctype, type, declarator, orig_declarator, virtualp, flags, quals,\n   if (ctype)\n     DECL_CLASS_CONTEXT (decl) = ctype;\n \n-  if (ctype == NULL_TREE && ! strcmp (IDENTIFIER_POINTER (declarator), \"main\"))\n+  if (ctype == NULL_TREE && MAIN_NAME_P (declarator))\n     {\n       if (inlinep)\n \terror (\"cannot declare `main' to be inline\");\n@@ -10077,9 +10091,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \n \t    if (current_lang_name == lang_name_cplusplus\n \t\t&& ! processing_template_decl\n-\t\t&& ! (IDENTIFIER_LENGTH (original_name) == 4\n-\t\t      && IDENTIFIER_POINTER (original_name)[0] == 'm'\n-\t\t      && strcmp (IDENTIFIER_POINTER (original_name), \"main\") == 0)\n+\t\t&& ! MAIN_NAME_P (original_name)\n \t\t&& ! (IDENTIFIER_LENGTH (original_name) > 10\n \t\t      && IDENTIFIER_POINTER (original_name)[0] == '_'\n \t\t      && IDENTIFIER_POINTER (original_name)[1] == '_'\n@@ -11724,9 +11736,7 @@ start_function (declspecs, declarator, attrs, pre_parsed_p)\n \n       if (TREE_CODE (fntype) == METHOD_TYPE)\n \tctype = TYPE_METHOD_BASETYPE (fntype);\n-      else if (IDENTIFIER_LENGTH (DECL_NAME (decl1)) == 4\n-\t       && ! strcmp (IDENTIFIER_POINTER (DECL_NAME (decl1)), \"main\")\n-\t       && DECL_CONTEXT (decl1) == NULL_TREE)\n+      else if (DECL_MAIN_P (decl1))\n \t{\n \t  /* If this doesn't return integer_type, complain.  */\n \t  if (TREE_TYPE (TREE_TYPE (decl1)) != integer_type_node)\n@@ -12121,10 +12131,8 @@ store_parm_decls ()\n \n   /* If this function is `main', emit a call to `__main'\n      to run global initializers, etc.  */\n-  if (DECL_NAME (fndecl)\n-      && IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 4\n-      && strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), \"main\") == 0\n-      && DECL_CONTEXT (fndecl) == global_namespace)\n+  if (DECL_MAIN_P (fndecl))\n+    expand_main_function ();\n     {\n       expand_main_function ();\n     }\n@@ -12576,9 +12584,7 @@ finish_function (lineno, call_poplevel, nested)\n \t  current_function_assigns_this = 0;\n \t  current_function_just_assigned_this = 0;\n \t}\n-      else if (IDENTIFIER_LENGTH (DECL_NAME (fndecl)) == 4\n-\t       && ! strcmp (IDENTIFIER_POINTER (DECL_NAME (fndecl)), \"main\")\n-\t       && DECL_CONTEXT (fndecl) == global_namespace)\n+      else if (DECL_MAIN_P (fndecl))\n \t{\n \t  /* Make it so that `main' always returns 0 by default.  */\n #ifdef VMS"}, {"sha": "6f40f0adad8c5416e5cb2319a051f8887748dbcd", "filename": "gcc/cp/friend.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Ffriend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Ffriend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ffriend.c?ref=3568074438b66ec38030db7e1a604158f73fc630", "patch": "@@ -364,9 +364,7 @@ do_friend (ctype, declarator, decl, parmdecls, flags, quals, funcdef_flag)\n \t}\n     }\n   else if (TREE_CODE (decl) == FUNCTION_DECL\n-\t   && ((IDENTIFIER_LENGTH (declarator) == 4\n-\t\t&& IDENTIFIER_POINTER (declarator)[0] == 'm'\n-\t\t&& ! strcmp (IDENTIFIER_POINTER (declarator), \"main\"))\n+\t   && (MAIN_NAME_P (declarator)\n \t       || (IDENTIFIER_LENGTH (declarator) > 10\n \t\t   && IDENTIFIER_POINTER (declarator)[0] == '_'\n \t\t   && IDENTIFIER_POINTER (declarator)[1] == '_'"}, {"sha": "98f94fa1f65750ddc6ad3491bc3ffe66a933c509", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3568074438b66ec38030db7e1a604158f73fc630/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3568074438b66ec38030db7e1a604158f73fc630", "patch": "@@ -2744,14 +2744,8 @@ build_function_call_real (function, params, require_complete, flags)\n       fndecl = function;\n \n       /* Convert anything with function type to a pointer-to-function.  */\n-      if (pedantic\n-\t  && name\n-\t  && IDENTIFIER_LENGTH (name) == 4\n-\t  && ! strcmp (IDENTIFIER_POINTER (name), \"main\")\n-\t  && DECL_CONTEXT (function) == global_namespace)\n-\t{\n-\t  pedwarn (\"ANSI C++ forbids calling `main' from within program\");\n-\t}\n+      if (pedantic && DECL_MAIN_P (function))\n+\tpedwarn (\"ANSI C++ forbids calling `main' from within program\");\n \n       /* Differs from default_conversion by not setting TREE_ADDRESSABLE\n \t (because calling an inline function does not mean the function\n@@ -4509,13 +4503,7 @@ build_unary_op (code, xarg, noconvert)\n \t  TREE_CONSTANT (arg) = TREE_CONSTANT (TREE_OPERAND (arg, 0));\n \t  return arg;\n \t}\n-      else if (pedantic\n-\t       && TREE_CODE (arg) == FUNCTION_DECL\n-\t       && DECL_NAME (arg)\n-\t       && DECL_CONTEXT (arg) == global_namespace\n-\t       && IDENTIFIER_LENGTH (DECL_NAME (arg)) == 4\n-\t       && IDENTIFIER_POINTER (DECL_NAME (arg))[0] == 'm'\n-\t       && ! strcmp (IDENTIFIER_POINTER (DECL_NAME (arg)), \"main\"))\n+      else if (pedantic && DECL_MAIN_P (arg))\n \t/* ARM $3.4 */\n \tpedwarn (\"taking address of function `main'\");\n "}]}