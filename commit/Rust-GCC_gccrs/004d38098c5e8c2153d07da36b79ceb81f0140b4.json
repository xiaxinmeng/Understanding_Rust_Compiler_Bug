{"sha": "004d38098c5e8c2153d07da36b79ceb81f0140b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDA0ZDM4MDk4YzVlOGMyMTUzZDA3ZGEzNmI3OWNlYjgxZjAxNDBiNA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2014-05-29T09:39:07Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2014-05-29T09:39:07Z"}, "message": "iterators.md (shiftable_ops): New code iterator.\n\n        * arm/iterators.md (shiftable_ops): New code iterator.\n        (t2_binop0, arith_shift_insn): New code attributes.\n\t* arm/predicates.md (shift_nomul_operator): New predicate.\n        * arm/arm.md (insn_enabled): Delete.\n        (enabled): Remove insn_enabled test.\n        (*arith_shiftsi): Delete.  Replace with ...\n        (*<arith_shift_insn>_multsi): ... new pattern.\n\t(*<arith_shift_insn>_shiftsi): ... new pattern.\n\t* config/arm/arm.c (arm_print_operand): Handle operand format 'b'.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r211050", "tree": {"sha": "54a60f968af1ecc6bc7cf4112ee10001cb8cf78d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54a60f968af1ecc6bc7cf4112ee10001cb8cf78d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/004d38098c5e8c2153d07da36b79ceb81f0140b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004d38098c5e8c2153d07da36b79ceb81f0140b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004d38098c5e8c2153d07da36b79ceb81f0140b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004d38098c5e8c2153d07da36b79ceb81f0140b4/comments", "author": null, "committer": null, "parents": [{"sha": "c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2db3f3d39a5e955c0739367332cb4f3ee5ca890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2db3f3d39a5e955c0739367332cb4f3ee5ca890"}], "stats": {"total": 121, "additions": 83, "deletions": 38}, "files": [{"sha": "99c1ffc292f225f20aca4323881638a8cae82ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=004d38098c5e8c2153d07da36b79ceb81f0140b4", "patch": "@@ -1,3 +1,16 @@\n+2014-05-29  Richard Earnshaw <rearnsha@arm.com>\n+\tRichard Sandiford  <rdsandiford@googlemail.com>\n+\n+        * arm/iterators.md (shiftable_ops): New code iterator.\n+        (t2_binop0, arith_shift_insn): New code attributes.\n+\t* arm/predicates.md (shift_nomul_operator): New predicate.\n+        * arm/arm.md (insn_enabled): Delete.\n+        (enabled): Remove insn_enabled test.\n+        (*arith_shiftsi): Delete.  Replace with ...\n+        (*<arith_shift_insn>_multsi): ... new pattern.\n+\t(*<arith_shift_insn>_shiftsi): ... new pattern.\n+\t* config/arm/arm.c (arm_print_operand): Handle operand format 'b'.\n+\n 2014-05-29  Radovan Obradovic  <robradovic@mips.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "1117bd49a5a55c29e2c5529c3dfff6752978cec2", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=004d38098c5e8c2153d07da36b79ceb81f0140b4", "patch": "@@ -21271,7 +21271,15 @@ arm_print_condition (FILE *stream)\n }\n \n \n-/* If CODE is 'd', then the X is a condition operand and the instruction\n+/* Globally reserved letters: acln\n+   Puncutation letters currently used: @_|?().!#\n+   Lower case letters currently used: bcdefhimpqtvwxyz\n+   Upper case letters currently used: ABCDFGHJKLMNOPQRSTU\n+   Letters previously used, but now deprecated/obsolete: sVWXYZ.\n+\n+   Note that the global reservation for 'c' is only for CONSTANT_ADDRESS_P.\n+\n+   If CODE is 'd', then the X is a condition operand and the instruction\n    should only be executed if the condition is true.\n    if CODE is 'D', then the X is a condition operand and the instruction\n    should only be executed if the condition is false: however, if the mode\n@@ -21411,6 +21419,19 @@ arm_print_operand (FILE *stream, rtx x, int code)\n \t}\n       return;\n \n+    case 'b':\n+      /* Print the log2 of a CONST_INT.  */\n+      {\n+\tHOST_WIDE_INT val;\n+\n+\tif (!CONST_INT_P (x)\n+\t    || (val = exact_log2 (INTVAL (x) & 0xffffffff)) < 0)\n+\t  output_operand_lossage (\"Unsupported operand for code '%c'\", code);\n+\telse\n+\t  fprintf (stream, \"#\" HOST_WIDE_INT_PRINT_DEC, val);\n+      }\n+      return;\n+\n     case 'L':\n       /* The low 16 bits of an immediate constant.  */\n       fprintf (stream, HOST_WIDE_INT_PRINT_DEC, INTVAL(x) & 0xffff);"}, {"sha": "75d054116f31e941dc76ed88c1041be1a2280e1b", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 25, "deletions": 37, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=004d38098c5e8c2153d07da36b79ceb81f0140b4", "patch": "@@ -200,17 +200,9 @@\n \t  (const_string \"yes\")]\n \t (const_string \"no\")))\n \n-; Allows an insn to disable certain alternatives for reasons other than\n-; arch support.\n-(define_attr \"insn_enabled\" \"no,yes\"\n-  (const_string \"yes\"))\n-\n ; Enable all alternatives that are both arch_enabled and insn_enabled.\n  (define_attr \"enabled\" \"no,yes\"\n-   (cond [(eq_attr \"insn_enabled\" \"no\")\n-\t  (const_string \"no\")\n-\n-\t  (and (eq_attr \"predicable_short_it\" \"no\")\n+   (cond [(and (eq_attr \"predicable_short_it\" \"no\")\n \t       (and (eq_attr \"predicated\" \"yes\")\n \t            (match_test \"arm_restrict_it\")))\n \t  (const_string \"no\")\n@@ -9876,38 +9868,34 @@\n \f\n ;; Patterns to allow combination of arithmetic, cond code and shifts\n \n-(define_insn \"*arith_shiftsi\"\n-  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r,r\")\n-        (match_operator:SI 1 \"shiftable_operator\"\n-          [(match_operator:SI 3 \"shift_operator\"\n-             [(match_operand:SI 4 \"s_register_operand\" \"r,r,r,r\")\n-              (match_operand:SI 5 \"shift_amount_operand\" \"M,M,M,r\")])\n-           (match_operand:SI 2 \"s_register_operand\" \"rk,rk,r,rk\")]))]\n+(define_insn \"*<arith_shift_insn>_multsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r\")\n+\t(shiftable_ops:SI\n+\t (mult:SI (match_operand:SI 2 \"s_register_operand\" \"r,r\")\n+\t\t  (match_operand:SI 3 \"power_of_two_operand\" \"\"))\n+\t (match_operand:SI 1 \"s_register_operand\" \"rk,<t2_binop0>\")))]\n   \"TARGET_32BIT\"\n-  \"%i1%?\\\\t%0, %2, %4%S3\"\n+  \"<arith_shift_insn>%?\\\\t%0, %1, %2, lsl %b3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"predicable_short_it\" \"no\")\n+   (set_attr \"shift\" \"4\")\n+   (set_attr \"arch\" \"a,t2\")\n+   (set_attr \"type\" \"alu_shift_imm\")])\n+\n+(define_insn \"*<arith_shift_insn>_shiftsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r,r,r\")\n+\t(shiftable_ops:SI\n+\t (match_operator:SI 2 \"shift_nomul_operator\"\n+\t  [(match_operand:SI 3 \"s_register_operand\" \"r,r,r\")\n+\t   (match_operand:SI 4 \"shift_amount_operand\" \"M,M,r\")])\n+\t (match_operand:SI 1 \"s_register_operand\" \"rk,<t2_binop0>,rk\")))]\n+  \"TARGET_32BIT && GET_CODE (operands[3]) != MULT\"\n+  \"<arith_shift_insn>%?\\\\t%0, %1, %3%S2\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")\n    (set_attr \"shift\" \"4\")\n-   (set_attr \"arch\" \"a,t2,t2,a\")\n-   ;; Thumb2 doesn't allow the stack pointer to be used for \n-   ;; operand1 for all operations other than add and sub. In this case \n-   ;; the minus operation is a candidate for an rsub and hence needs\n-   ;; to be disabled.\n-   ;; We have to make sure to disable the fourth alternative if\n-   ;; the shift_operator is MULT, since otherwise the insn will\n-   ;; also match a multiply_accumulate pattern and validate_change\n-   ;; will allow a replacement of the constant with a register\n-   ;; despite the checks done in shift_operator.\n-   (set_attr_alternative \"insn_enabled\"\n-\t\t\t [(const_string \"yes\")\n-\t\t\t  (if_then_else\n-\t\t\t   (match_operand:SI 1 \"add_operator\" \"\")\n-\t\t\t   (const_string \"yes\") (const_string \"no\"))\n-\t\t\t  (const_string \"yes\")\n-\t\t\t  (if_then_else\n-\t\t\t   (match_operand:SI 3 \"mult_operator\" \"\")\n-\t\t\t   (const_string \"no\") (const_string \"yes\"))])\n-   (set_attr \"type\" \"alu_shift_imm,alu_shift_imm,alu_shift_imm,alu_shift_reg\")])\n+   (set_attr \"arch\" \"a,t2,a\")\n+   (set_attr \"type\" \"alu_shift_imm,alu_shift_imm,alu_shift_reg\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"s_register_operand\" \"\")"}, {"sha": "6fe6eef2736da6a99c7021157dd8f3f6fdb8117c", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=004d38098c5e8c2153d07da36b79ceb81f0140b4", "patch": "@@ -194,6 +194,20 @@\n ;; Right shifts\n (define_code_iterator rshifts [ashiftrt lshiftrt])\n \n+;; Binary operators whose second operand can be shifted.\n+(define_code_iterator shiftable_ops [plus minus ior xor and])\n+\n+;; plus and minus are the only shiftable_ops for which Thumb2 allows\n+;; a stack pointer opoerand.  The minus operation is a candidate for an rsub\n+;; and hence only plus is supported.\n+(define_code_attr t2_binop0\n+  [(plus \"rk\") (minus \"r\") (ior \"r\") (xor \"r\") (and \"r\")])\n+\n+;; The instruction to use when a shiftable_ops has a shift operation as\n+;; its first operand.\n+(define_code_attr arith_shift_insn\n+  [(plus \"add\") (minus \"rsb\") (ior \"orr\") (xor \"eor\") (and \"and\")])\n+\n ;;----------------------------------------------------------------------------\n ;; Int iterators\n ;;----------------------------------------------------------------------------"}, {"sha": "032808c5a6281575c7e1dc330d2a16e0d5d21f91", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/004d38098c5e8c2153d07da36b79ceb81f0140b4/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=004d38098c5e8c2153d07da36b79ceb81f0140b4", "patch": "@@ -291,6 +291,15 @@\n \t\t\t      || ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\")))\n        (match_test \"mode == GET_MODE (op)\")))\n \n+(define_special_predicate \"shift_nomul_operator\"\n+  (and (ior (and (match_code \"rotate\")\n+\t\t (match_test \"CONST_INT_P (XEXP (op, 1))\n+\t\t\t      && ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\"))\n+\t    (and (match_code \"ashift,ashiftrt,lshiftrt,rotatert\")\n+\t\t (match_test \"!CONST_INT_P (XEXP (op, 1))\n+\t\t\t      || ((unsigned HOST_WIDE_INT) INTVAL (XEXP (op, 1))) < 32\")))\n+       (match_test \"mode == GET_MODE (op)\")))\n+\n ;; True for shift operators which can be used with saturation instructions.\n (define_special_predicate \"sat_shift_operator\"\n   (and (ior (and (match_code \"mult\")"}]}