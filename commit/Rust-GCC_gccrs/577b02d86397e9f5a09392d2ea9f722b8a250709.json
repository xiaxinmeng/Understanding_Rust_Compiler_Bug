{"sha": "577b02d86397e9f5a09392d2ea9f722b8a250709", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc3YjAyZDg2Mzk3ZTlmNWEwOTM5MmQyZWE5ZjcyMmI4YTI1MDcwOQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-01-20T03:07:58Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-01-20T03:07:58Z"}, "message": "re PR c++/22136 (Rejects old-style using declaration)\n\n\tPR c++/22136\n\t* name-lookup.c (do_class_using_decl): Don't try to look up base\n\tclasses in templates with dependent base types.\n\tPR c++/22136\n\t* g++.dg/template/using10.C: New test.\n\t* g++.dg/temlpate/using11.C: Likewise.\n\t* g++.dg/inherit/using5.C: Tweak error messages.\n\nFrom-SVN: r110017", "tree": {"sha": "ce8c5bfa7c9da0c60a66b1fa7ea7ce89663aebd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce8c5bfa7c9da0c60a66b1fa7ea7ce89663aebd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/577b02d86397e9f5a09392d2ea9f722b8a250709", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577b02d86397e9f5a09392d2ea9f722b8a250709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577b02d86397e9f5a09392d2ea9f722b8a250709", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577b02d86397e9f5a09392d2ea9f722b8a250709/comments", "author": null, "committer": null, "parents": [{"sha": "577092baab16702676b8694c5a6706135d4c9ecf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/577092baab16702676b8694c5a6706135d4c9ecf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/577092baab16702676b8694c5a6706135d4c9ecf"}], "stats": {"total": 133, "additions": 95, "deletions": 38}, "files": [{"sha": "5fabf49df71ef90a3c9fbc2c52f3028ec21594f9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -1,3 +1,9 @@\n+2006-01-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22136\n+\t* name-lookup.c (do_class_using_decl): Don't try to look up base\n+\tclasses in templates with dependent base types.\n+\n 2006-01-19  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \tPR c++/25854"}, {"sha": "190ae24cd94e29b17b81564614d137c0c469652f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 62, "deletions": 37, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -2722,35 +2722,28 @@ push_class_level_binding (tree name, tree x)\n tree\n do_class_using_decl (tree scope, tree name)\n {\n-  tree value, decl, binfo;\n-  base_kind b_kind;\n-  bool dependent_p;\n+  /* The USING_DECL returned by this function.  */\n+  tree value;\n+  /* The declaration (or declarations) name by this using\n+     declaration.  NULL if we are in a template and cannot figure out\n+     what has been named.  */\n+  tree decl;\n+  /* True if SCOPE is a dependent type.  */\n+  bool scope_dependent_p;\n+  /* True if SCOPE::NAME is dependent.  */\n+  bool name_dependent_p;\n+  /* True if any of the bases of CURRENT_CLASS_TYPE are dependent.  */\n+  bool bases_dependent_p;\n+  tree binfo;\n+  tree base_binfo;\n+  int i;\n \n   if (!scope || !TYPE_P (scope))\n     {\n       error (\"using-declaration for non-member at class scope\");\n       return NULL_TREE;\n     }\n \n-  /* Make sure the scope is a base.  */\n-  dependent_p = dependent_type_p (scope);\n-  if (!dependent_p)\n-    binfo = lookup_base (current_class_type, scope, ba_any, &b_kind);\n-  else\n-    {\n-      binfo = NULL;\n-      if (same_type_p (current_class_type, scope))\n-\tb_kind = bk_same_type;\n-      else\n-\tb_kind = bk_proper_base;\n-    }\n-\n-  if (b_kind < bk_proper_base)\n-    {\n-      error_not_base_type (scope, current_class_type);\n-      return NULL_TREE;\n-    }\n-\n   /* Make sure the name is not invalid */\n   if (TREE_CODE (name) == BIT_NOT_EXPR)\n     {\n@@ -2769,32 +2762,64 @@ do_class_using_decl (tree scope, tree name)\n       return NULL_TREE;\n     }\n \n-  if (!dependent_p\n-      && IDENTIFIER_OPNAME_P (name) && dependent_type_p (TREE_TYPE (name)))\n-    dependent_p = 1;\n+  scope_dependent_p = dependent_type_p (scope);\n+  name_dependent_p = (scope_dependent_p \n+\t\t      || (IDENTIFIER_OPNAME_P (name)\n+\t\t\t  && dependent_type_p (TREE_TYPE (name))));\n+\n+  bases_dependent_p = false;\n+  if (processing_template_decl)\n+    for (binfo = TYPE_BINFO (current_class_type), i = 0;\n+\t BINFO_BASE_ITERATE (binfo, i, base_binfo); \n+\t i++)\n+      if (dependent_type_p (TREE_TYPE (base_binfo)))\n+\t{\n+\t  bases_dependent_p = true;\n+\t  break;\n+\t}\n \n-  /* See if there are any members of the base. */\n-  if (!dependent_p)\n-    {\n-      decl = lookup_member (binfo, name, 0, false);\n+  decl = NULL_TREE;\n+\n+  /* From [namespace.udecl]:\n \n-      if (!decl)\n+       A using-declaration used as a member-declaration shall refer to a\n+       member of a base class of the class being defined.  \n+     \n+     In general, we cannot check this constraint in a template because\n+     we do not know the entire set of base classes of the current\n+     class type.  However, if all of the base classes are\n+     non-dependent, then we can avoid delaying the check until\n+     instantiation.  */\n+  if (!scope_dependent_p && !bases_dependent_p)\n+    {\n+      base_kind b_kind;\n+      tree binfo;\n+      binfo = lookup_base (current_class_type, scope, ba_any, &b_kind);\n+      if (b_kind < bk_proper_base)\n \t{\n-\t  error (\"no members matching %<%T::%D%> in %q#T\", scope, name, scope);\n+\t  error_not_base_type (scope, current_class_type);\n \t  return NULL_TREE;\n \t}\n \n-      if (BASELINK_P (decl))\n-\t/* Ignore base type this came from.  */\n-\tdecl = BASELINK_FUNCTIONS (decl);\n+      if (!name_dependent_p)\n+\t{\n+\t  decl = lookup_member (binfo, name, 0, false);\n+\t  if (!decl)\n+\t    {\n+\t      error (\"no members matching %<%T::%D%> in %q#T\", scope, name, \n+\t\t     scope);\n+\t      return NULL_TREE;\n+\t    }\n+\t  /* The binfo from which the functions came does not matter.  */\n+\t  if (BASELINK_P (decl))\n+\t    decl = BASELINK_FUNCTIONS (decl);\n+\t}\n    }\n-  else\n-    decl = NULL_TREE;\n \n   value = build_lang_decl (USING_DECL, name, NULL_TREE);\n   USING_DECL_DECLS (value) = decl;\n   USING_DECL_SCOPE (value) = scope;\n-  DECL_DEPENDENT_P (value) = dependent_p;\n+  DECL_DEPENDENT_P (value) = !decl;\n \n   return value;\n }"}, {"sha": "b41928e4d82c0762b9b37b01c34a9f268305fa63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -1,3 +1,10 @@\n+2006-01-19  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/22136\n+\t* g++.dg/template/using10.C: New test.\n+\t* g++.dg/temlpate/using11.C: Likewise.\n+\t* g++.dg/inherit/using5.C: Tweak error messages.\n+\n 2006-01-20  Alan Modra  <amodra@bigpond.net.au>\n \n \t* gcc.target/powerpc/rs6000-ldouble-1.c: Tweak powerpc linux"}, {"sha": "89c7ca03ba69a8e7953642793b7d440d5a41f812", "filename": "gcc/testsuite/g++.dg/inherit/using5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finherit%2Fusing5.C?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -6,7 +6,7 @@\n \n template<int> struct A\n {\n-  A::A; // { dg-error \"not a base\" }\n+  A::A; // { dg-error \"constructor\" }\n };\n \n struct B"}, {"sha": "8f0cbda2a8881f5841a7e339ca5b0c70ef203761", "filename": "gcc/testsuite/g++.dg/template/using10.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing10.C?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/22136\n+\n+struct B { \n+  void foo(); \n+}; \n+ \n+template <typename T> class I : public B {}; \n+ \n+template <typename T> class D : private I<T> { \n+  I<T>::B::foo; \n+}; "}, {"sha": "21cc5d2ef2da84ac24d99e88189e0011ca1ceda8", "filename": "gcc/testsuite/g++.dg/template/using11.C", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/577b02d86397e9f5a09392d2ea9f722b8a250709/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fusing11.C?ref=577b02d86397e9f5a09392d2ea9f722b8a250709", "patch": "@@ -0,0 +1,8 @@\n+struct X {\n+  void f();\n+};\n+\n+template <typename T> \n+struct S : public T {\n+  using X::f;\n+};"}]}