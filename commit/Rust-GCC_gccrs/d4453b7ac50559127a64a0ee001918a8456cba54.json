{"sha": "d4453b7ac50559127a64a0ee001918a8456cba54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0NTNiN2FjNTA1NTkxMjdhNjRhMGVlMDAxOTE4YTg0NTZjYmE1NA==", "commit": {"author": {"name": "Paul Brook", "email": "paul@codesourcery.com", "date": "2004-04-08T18:26:09Z"}, "committer": {"name": "Paul Brook", "email": "pbrook@gcc.gnu.org", "date": "2004-04-08T18:26:09Z"}, "message": "explow.c (promote_mode): Use PROMOTE_FUNCTION_MODE instead of PROMOTE_FOR_CALL_ONLY.\n\n\t* explow.c (promote_mode): Use PROMOTE_FUNCTION_MODE instead of\n\tPROMOTE_FOR_CALL_ONLY.\n\t* config/arm/arm-protos.h (arm_function_value): Declare.\n\t* config/arm/arm.h (TARGET_PROMOTE_FUNCTION_ARGS): Define.\n\t(TARGET_PROMOTE_PROTOTYPES): Return false.\n\t(arm_function_value): New function.\n\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Define.\n\t(FUNCTION_VALUE): Call arm_function_value.\n\t* config/cris/cris.h (PROMOTE_MODE): Rename ...\n\t(PROMOTE_FUNCTION_MODE): ... to this.\n\t(PROMOTE_FOR_CALL_ONLY): Remove.\n\t* config/mmix/mmix.h: Likewise.\n\t* config/s390/s390.h: Likewise.\n\t* config/sparc/sparc.h: Likewise.\n\t* config/sparc/sparc.c: Update comments about PROMOTE_MODE.\n\t* doc/tm.texi (PROMOTE_FUNCTION_MODE): Document.\n\t(TARGET_PROMOTE_FUNCTION_MODE, TARGET_PROMOTE_FUNCTION_RETURN): Update.\n\t(PROMOTE_FOR_CALL_ONLY): Remove.\n\nFrom-SVN: r80518", "tree": {"sha": "975bc90ebcfbd9e00b4fc643af4ffb7ff6029bf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/975bc90ebcfbd9e00b4fc643af4ffb7ff6029bf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4453b7ac50559127a64a0ee001918a8456cba54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4453b7ac50559127a64a0ee001918a8456cba54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4453b7ac50559127a64a0ee001918a8456cba54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4453b7ac50559127a64a0ee001918a8456cba54/comments", "author": null, "committer": null, "parents": [{"sha": "c00e272ed3f6c7cb31b9f6777a9f0753ed414340", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e272ed3f6c7cb31b9f6777a9f0753ed414340", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00e272ed3f6c7cb31b9f6777a9f0753ed414340"}], "stats": {"total": 150, "additions": 98, "deletions": 52}, "files": [{"sha": "231b9e76e70816f38ed06ff2f6b93d45c9e756d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -1,3 +1,24 @@\n+2004-04-08  Paul Brook  <paul@codesourcery.com>\n+\n+\t* explow.c (promote_mode): Use PROMOTE_FUNCTION_MODE instead of\n+\tPROMOTE_FOR_CALL_ONLY.\n+\t* config/arm/arm-protos.h (arm_function_value): Declare.\n+\t* config/arm/arm.h (TARGET_PROMOTE_FUNCTION_ARGS): Define.\n+\t(TARGET_PROMOTE_PROTOTYPES): Return false.\n+\t(arm_function_value): New function.\n+\t* config/arm/arm.h (PROMOTE_FUNCTION_MODE): Define.\n+\t(FUNCTION_VALUE): Call arm_function_value.\n+\t* config/cris/cris.h (PROMOTE_MODE): Rename ...\n+\t(PROMOTE_FUNCTION_MODE): ... to this.\n+\t(PROMOTE_FOR_CALL_ONLY): Remove.\n+\t* config/mmix/mmix.h: Likewise.\n+\t* config/s390/s390.h: Likewise.\n+\t* config/sparc/sparc.h: Likewise.\n+\t* config/sparc/sparc.c: Update comments about PROMOTE_MODE.\n+\t* doc/tm.texi (PROMOTE_FUNCTION_MODE): Document.\n+\t(TARGET_PROMOTE_FUNCTION_MODE, TARGET_PROMOTE_FUNCTION_RETURN): Update.\n+\t(PROMOTE_FOR_CALL_ONLY): Remove.\n+\n 2004-04-08  Joel Sherrill <joel@oarcorp.com>\n \n \tPR ada/14538"}, {"sha": "0359fe7711687a347241d97fcccadb7768c5cced", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -159,6 +159,7 @@ extern rtx arm_va_arg (tree, tree);\n extern int arm_function_arg_pass_by_reference (CUMULATIVE_ARGS *,\n \t\t\t\t\t       enum machine_mode, tree, int);\n extern bool arm_needs_doubleword_align (enum machine_mode, tree);\n+extern rtx arm_function_value(tree, tree);\n #endif\n \n #if defined AOF_ASSEMBLER "}, {"sha": "6f340df7a909d2f714a1bb6990076da8fe460376", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -244,8 +244,10 @@ static void arm_setup_incoming_varargs (CUMULATIVE_ARGS *, enum machine_mode,\n \n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n+#undef TARGET_PROMOTE_FUNCTION_RETURN\n+#define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n #undef TARGET_PROMOTE_PROTOTYPES\n-#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_true\n+#define TARGET_PROMOTE_PROTOTYPES hook_bool_tree_false\n \n #undef TARGET_STRUCT_VALUE_RTX\n #define TARGET_STRUCT_VALUE_RTX arm_struct_value_rtx\n@@ -2117,6 +2119,24 @@ arm_canonicalize_comparison (enum rtx_code code, rtx * op1)\n   return code;\n }\n \n+\n+/* Define how to find the value returned by a function.  */\n+\n+rtx arm_function_value(tree type, tree func ATTRIBUTE_UNUSED)\n+{\n+  enum machine_mode mode;\n+  int unsignedp ATTRIBUTE_UNUSED;\n+  rtx r ATTRIBUTE_UNUSED;\n+\n+  \n+  mode = TYPE_MODE (type);\n+  /* Promote integer types.  */\n+  if (INTEGRAL_TYPE_P (type))\n+    PROMOTE_FUNCTION_MODE (mode, unsignedp, type);\n+  return LIBCALL_VALUE(mode);\n+}\n+\n+\n /* Decide whether a type should be returned in memory (true)\n    or in a register (false).  This is called by the macro\n    RETURN_IN_MEMORY.  */"}, {"sha": "0c3f2fe326ec7276cdd55c51079adacdea896307", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -798,6 +798,11 @@ extern int arm_is_6_or_7;\n       (MODE) = SImode;\t\t\t\t\\\n     }\n \n+#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n+  if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n+      && GET_MODE_SIZE (MODE) < 4)      \t\\\n+    (MODE) = SImode;\t\t\t\t\\\n+\n /* Define this if most significant bit is lowest numbered\n    in instructions that operate on numbered bit-fields.  */\n #define BITS_BIG_ENDIAN  0\n@@ -1726,7 +1731,7 @@ enum reg_class\n    If the precise function being called is known, FUNC is its FUNCTION_DECL;\n    otherwise, FUNC is 0.  */\n #define FUNCTION_VALUE(VALTYPE, FUNC) \\\n-  LIBCALL_VALUE (TYPE_MODE (VALTYPE))\n+  arm_function_value (VALTYPE, FUNC);\n \n /* 1 if N is a possible register number for a function value.\n    On the ARM, only r0 and f0 can return results.  */"}, {"sha": "7b028e062e91db1e2e3abf2f6cc6a0e58592237e", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -511,15 +511,15 @@ extern int target_flags;\n \n #define UNITS_PER_WORD 4\n \n-/* A combination of defining PROMOTE_MODE,\n-   TARGET_PROMOTE_FUNCTION_ARGS that always returns true,\n-   PROMOTE_FOR_CALL_ONLY and *not* defining TARGET_PROMOTE_PROTOTYPES gives the\n+/* A combination of defining PROMOTE_FUNCTION_MODE,\n+   TARGET_PROMOTE_FUNCTION_ARGS that always returns true\n+   and *not* defining TARGET_PROMOTE_PROTOTYPES or PROMOTE_MODE gives the\n    best code size and speed for gcc, ipps and products in gcc-2.7.2.  */\n #define CRIS_PROMOTED_MODE(MODE, UNSIGNEDP, TYPE) \\\n  (GET_MODE_CLASS (MODE) == MODE_INT && GET_MODE_SIZE (MODE) < 4) \\\n   ? SImode : MODE\n \n-#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)  \\\n+#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)  \\\n   (MODE) = CRIS_PROMOTED_MODE (MODE, UNSIGNEDP, TYPE)\n \n /* Defining PROMOTE_FUNCTION_RETURN in gcc-2.7.2 uncovers bug 981110 (even\n@@ -528,7 +528,6 @@ extern int target_flags;\n    FIXME: Report this when cris.h is part of GCC, so others can easily\n    see the problem.  Maybe check other systems that define\n    TARGET_PROMOTE_FUNCTION_RETURN that always returns true.  */\n-#define PROMOTE_FOR_CALL_ONLY\n \n /* We will be using prototype promotion, so they will be 32 bit.  */\n #define PARM_BOUNDARY 32"}, {"sha": "01090b7771a9f10be5358ef6d652cde4e0cd8e8e", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -280,8 +280,10 @@ extern int target_flags;\n \n /* FIXME: Promotion of modes currently generates slow code, extending\n    before every operation.  */\n+/* I'm a little bit undecided about this one.  It might be beneficial to\n+   promote all operations.  */\n \n-#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n+#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\\\n  do {\t\t\t\t\t\t\\\n   if (GET_MODE_CLASS (MODE) == MODE_INT\t\t\\\n       && GET_MODE_SIZE (MODE) < 8)\t\t\\\n@@ -293,10 +295,6 @@ extern int target_flags;\n    }\t\t\t\t\t\t\\\n  } while (0)\n \n-/* I'm a little bit undecided about this one.  It might be beneficial to\n-   promote all operations.  */\n-#define PROMOTE_FOR_CALL_ONLY\n-\n /* We need to align everything to 64 bits that can affect the alignment\n    of other types.  Since address N is interpreted in MMIX as (N modulo\n    access_size), we must align.  */"}, {"sha": "3354f45beedccd84853a755dffae0a5a6175899a", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -208,9 +208,7 @@ extern int target_flags;\n #define MAX_BITS_PER_WORD 64\n \n /* Function arguments and return values are promoted to word size.  */\n-#define PROMOTE_FOR_CALL_ONLY\n-\n-#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE)\t\t\\\n+#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE)\t\t\\\n if (INTEGRAL_MODE_P (MODE) &&\t        \t    \t\\\n     GET_MODE_SIZE (MODE) < UNITS_PER_WORD) { \t\t\\\n   (MODE) = Pmode;\t\t\t\t\t\\"}, {"sha": "76ccb34eade3ee4c5571e6c2990d4c3a5b73d68d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -274,20 +274,15 @@ enum processor_type sparc_cpu;\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n-/* Return TRUE if the promotion described by PROMOTE_MODE should also be done\n-   for outgoing function arguments.\n-   This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n-   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n-   for this value.  */\n+/* This is only needed for TARGET_ARCH64, but since PROMOTE_FUNCTION_MODE is a\n+   no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n+   test for this value.  */\n #undef TARGET_PROMOTE_FUNCTION_ARGS\n #define TARGET_PROMOTE_FUNCTION_ARGS hook_bool_tree_true\n \n-/* Return TRUE if the promotion described by PROMOTE_MODE should also be done\n-   for the return value of functions.  If this macro is defined, FUNCTION_VALUE\n-   must perform the same promotions done by PROMOTE_MODE.\n-   This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n-   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n-   for this value.  */\n+/* This is only needed for TARGET_ARCH64, but since PROMOTE_FUNCTION_MODE is a\n+   no-op for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime\n+   test for this value.  */\n #undef TARGET_PROMOTE_FUNCTION_RETURN\n #define TARGET_PROMOTE_FUNCTION_RETURN hook_bool_tree_true\n "}, {"sha": "33c1256e805beafd7dab69b7e08e760d40958adb", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -712,24 +712,16 @@ extern struct sparc_cpu_select sparc_select[];\n    if ptr_mode and Pmode are the same.  */\n #define POINTERS_EXTEND_UNSIGNED 1\n \n-/* A macro to update MODE and UNSIGNEDP when an object whose type\n-   is TYPE and which has the specified mode and signedness is to be\n-   stored in a register.  This macro is only called when TYPE is a\n-   scalar type.  */\n-#define PROMOTE_MODE(MODE, UNSIGNEDP, TYPE) \\\n+/* For TARGET_ARCH64 we need this, as we don't have instructions\n+   for arithmetic operations which do zero/sign extension at the same time,\n+   so without this we end up with a srl/sra after every assignment to an\n+   user variable,  which means very very bad code.  */\n+#define PROMOTE_FUNCTION_MODE(MODE, UNSIGNEDP, TYPE) \\\n if (TARGET_ARCH64\t\t\t\t\\\n     && GET_MODE_CLASS (MODE) == MODE_INT\t\\\n     && GET_MODE_SIZE (MODE) < UNITS_PER_WORD)\t\\\n   (MODE) = word_mode;\n \n-/* This is only needed for TARGET_ARCH64, but since PROMOTE_MODE is a no-op\n-   for TARGET_ARCH32 this is ok.  Otherwise we'd need to add a runtime test\n-   for this value.  For TARGET_ARCH64 we need it, as we don't have instructions\n-   for arithmetic operations which do zero/sign extension at the same time,\n-   so without this we end up with a srl/sra after every assignment to an\n-   user variable,  which means very very bad code.  */\n-#define PROMOTE_FOR_CALL_ONLY\n-\n /* Allocation boundary (in *bits*) for storing arguments in argument list.  */\n #define PARM_BOUNDARY (TARGET_ARCH64 ? 64 : 32)\n "}, {"sha": "b2fe858a013a4a4118b530c5134ef607d0ba533b", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -1071,27 +1071,29 @@ sign-extend the result to 64 bits.  On such machines, set\n Do not define this macro if it would never modify @var{m}.\n @end defmac\n \n+@defmac PROMOTE_FUNCTION_MODE\n+Like @code{PROMOTE_MODE}, but is applied to outgoing function arguments or\n+function return values, as specified by @code{TARGET_PROMOTE_FUNCTION_ARGS}\n+and @code{TARGET_PROMOTE_FUNCTION_RETURN}, respectively.\n+\n+The default is @code{PROMOTE_MODE}.\n+@end defmac\n+\n @deftypefn {Target Hook} bool TARGET_PROMOTE_FUNCTION_ARGS (tree @var{fntype})\n This target hook should return @code{true} if the promotion described by\n-@code{PROMOTE_MODE} should also be done for outgoing function arguments.\n+@code{PROMOTE_FUNCTION_MODE} should be done for outgoing function\n+arguments.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_PROMOTE_FUNCTION_RETURN (tree @var{fntype})\n This target hook should return @code{true} if the promotion described by\n-@code{PROMOTE_MODE} should also be done for the return value of\n+@code{PROMOTE_FUNCTION_MODE} should be done for the return value of\n functions.\n \n If this target hook returns @code{true}, @code{FUNCTION_VALUE} must\n-perform the same promotions done by @code{PROMOTE_MODE}.\n+perform the same promotions done by @code{PROMOTE_FUNCTON_MODE}.\n @end deftypefn\n \n-@defmac PROMOTE_FOR_CALL_ONLY\n-Define this macro if the promotion described by @code{PROMOTE_MODE}\n-should @emph{only} be performed for outgoing function arguments or\n-function return values, as specified by @code{TARGET_PROMOTE_FUNCTION_ARGS}\n-and @code{TARGET_PROMOTE_FUNCTION_RETURN}, respectively.\n-@end defmac\n-\n @defmac PARM_BOUNDARY\n Normal alignment required for function parameters on the stack, in\n bits.  All stack parameters receive at least this much alignment"}, {"sha": "1629fa85582aa981fe68af64b0146105bc2518de", "filename": "gcc/explow.c", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4453b7ac50559127a64a0ee001918a8456cba54/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=d4453b7ac50559127a64a0ee001918a8456cba54", "patch": "@@ -799,24 +799,39 @@ copy_to_suggested_reg (rtx x, rtx target, enum machine_mode mode)\n \n    FOR_CALL is nonzero if this call is promoting args for a call.  */\n \n+#if defined(PROMOTE_MODE) && !defined(PROMOTE_FUNCTION_MODE)\n+#define PROMOTE_FUNCTON_MODE PROMOTE_MODE\n+#endif\n+\n enum machine_mode\n promote_mode (tree type, enum machine_mode mode, int *punsignedp,\n \t      int for_call ATTRIBUTE_UNUSED)\n {\n   enum tree_code code = TREE_CODE (type);\n   int unsignedp = *punsignedp;\n \n-#ifdef PROMOTE_FOR_CALL_ONLY\n+#ifndef PROMOTE_MODE\n   if (! for_call)\n     return mode;\n #endif\n \n   switch (code)\n     {\n-#ifdef PROMOTE_MODE\n+#ifdef PROMOTE_FUNCTION_MODE\n     case INTEGER_TYPE:   case ENUMERAL_TYPE:   case BOOLEAN_TYPE:\n     case CHAR_TYPE:      case REAL_TYPE:       case OFFSET_TYPE:\n-      PROMOTE_MODE (mode, unsignedp, type);\n+#ifdef PROMOTE_MODE\n+      if (for_call)\n+\t{\n+#endif\n+\t  PROMOTE_FUNCTION_MODE (mode, unsignedp, type);\n+#ifdef PROMOTE_MODE\n+\t}\n+      else\n+\t{\n+\t  PROMOTE_MODE (mode, unsignedp, type);\n+\t}\n+#endif\n       break;\n #endif\n "}]}