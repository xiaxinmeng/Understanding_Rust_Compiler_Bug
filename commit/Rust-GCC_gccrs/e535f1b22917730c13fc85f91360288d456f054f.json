{"sha": "e535f1b22917730c13fc85f91360288d456f054f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTUzNWYxYjIyOTE3NzMwYzEzZmM4NWY5MTM2MDI4OGQ0NTZmMDU0Zg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2011-08-15T20:10:51Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2011-08-15T20:10:51Z"}, "message": "resolve.c (resolve_symbol): Fix coarray result-var check.\n\n2011-08-15  Tobias Burnus  <burnus@net-b.de>\n\n        * resolve.c (resolve_symbol): Fix coarray result-var check.\n\n2011-08-15  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_26.f90: New.\n\nFrom-SVN: r177767", "tree": {"sha": "3e3ced47c50e00114f6067e157741e6e0950b08c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e3ced47c50e00114f6067e157741e6e0950b08c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e535f1b22917730c13fc85f91360288d456f054f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e535f1b22917730c13fc85f91360288d456f054f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e535f1b22917730c13fc85f91360288d456f054f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e535f1b22917730c13fc85f91360288d456f054f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "efec771ab9763b9c16645a2993d87141dfa734e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efec771ab9763b9c16645a2993d87141dfa734e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efec771ab9763b9c16645a2993d87141dfa734e4"}], "stats": {"total": 135, "additions": 111, "deletions": 24}, "files": [{"sha": "8112ecc70ce5d287baa6d6552d233ee169f3f653", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e535f1b22917730c13fc85f91360288d456f054f", "patch": "@@ -1,3 +1,7 @@\n+2011-08-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* resolve.c (resolve_symbol): Fix coarray result-var check.\n+\n 2011-08-14  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \t* module.c (use_iso_fortran_env_module):  Spell 'referrenced' correctly."}, {"sha": "a9bfbcf6f9c262ec84ee7912a1e4d5a2ceae6c6d", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e535f1b22917730c13fc85f91360288d456f054f", "patch": "@@ -12246,29 +12246,41 @@ resolve_symbol (gfc_symbol *sym)\n   /* F2008, C542.  */\n   if (sym->ts.type == BT_DERIVED && sym->attr.dummy\n       && sym->attr.intent == INTENT_OUT && sym->attr.lock_comp)\n-    gfc_error (\"Dummy argument '%s' at %L of LOCK_TYPE shall not be \"\n-\t       \"INTENT(OUT)\", sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Dummy argument '%s' at %L of LOCK_TYPE shall not be \"\n+\t\t \"INTENT(OUT)\", sym->name, &sym->declared_at);\n+      return;\n+    }\n \n-  /* F2008, C526.  */\n+  /* F2008, C525.  */\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n        || sym->attr.codimension)\n-      && sym->attr.result)\n-    gfc_error (\"Function result '%s' at %L shall not be a coarray or have \"\n-\t       \"a coarray component\", sym->name, &sym->declared_at);\n+      && (sym->attr.result || sym->result == sym))\n+    {\n+      gfc_error (\"Function result '%s' at %L shallolvnot be a coarray or have \"\n+\t         \"a coarray component\", sym->name, &sym->declared_at);\n+      return;\n+    }\n \n   /* F2008, C524.  */\n   if (sym->attr.codimension && sym->ts.type == BT_DERIVED\n       && sym->ts.u.derived->ts.is_iso_c)\n-    gfc_error (\"Variable '%s' at %L of TYPE(C_PTR) or TYPE(C_FUNPTR) \"\n-\t       \"shall not be a coarray\", sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Variable '%s' at %L of TYPE(C_PTR) or TYPE(C_FUNPTR) \"\n+\t\t \"shall not be a coarray\", sym->name, &sym->declared_at);\n+      return;\n+    }\n \n   /* F2008, C525.  */\n   if (sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp\n       && (sym->attr.codimension || sym->attr.pointer || sym->attr.dimension\n \t  || sym->attr.allocatable))\n-    gfc_error (\"Variable '%s' at %L with coarray component \"\n-\t       \"shall be a nonpointer, nonallocatable scalar\",\n-\t       sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Variable '%s' at %L with coarray component \"\n+\t\t \"shall be a nonpointer, nonallocatable scalar\",\n+\t\t sym->name, &sym->declared_at);\n+      return;\n+    }\n \n   /* F2008, C526.  The function-result case was handled above.  */\n   if (sym->attr.codimension\n@@ -12277,32 +12289,46 @@ resolve_symbol (gfc_symbol *sym)\n \t   || sym->ns->proc_name->attr.flavor == FL_MODULE\n \t   || sym->ns->proc_name->attr.is_main_program\n \t   || sym->attr.function || sym->attr.result || sym->attr.use_assoc))\n-    gfc_error (\"Variable '%s' at %L is a coarray and is not ALLOCATABLE, SAVE \"\n-\t       \"nor a dummy argument\", sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Variable '%s' at %L is a coarray and is not ALLOCATABLE, SAVE \"\n+\t\t \"nor a dummy argument\", sym->name, &sym->declared_at);\n+      return;\n+    }\n   /* F2008, C528.  */  /* FIXME: sym->as check due to PR 43412.  */\n   else if (sym->attr.codimension && !sym->attr.allocatable\n       && sym->as && sym->as->cotype == AS_DEFERRED)\n-    gfc_error (\"Coarray variable '%s' at %L shall not have codimensions with \"\n-\t\t\"deferred shape\", sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Coarray variable '%s' at %L shall not have codimensions with \"\n+\t\t \"deferred shape\", sym->name, &sym->declared_at);\n+      return;\n+    }\n   else if (sym->attr.codimension && sym->attr.allocatable\n       && (sym->as->type != AS_DEFERRED || sym->as->cotype != AS_DEFERRED))\n-    gfc_error (\"Allocatable coarray variable '%s' at %L must have \"\n-\t       \"deferred shape\", sym->name, &sym->declared_at);\n-\n+    {\n+      gfc_error (\"Allocatable coarray variable '%s' at %L must have \"\n+\t\t \"deferred shape\", sym->name, &sym->declared_at);\n+      return;\n+    }\n \n   /* F2008, C541.  */\n   if (((sym->ts.type == BT_DERIVED && sym->ts.u.derived->attr.coarray_comp)\n        || (sym->attr.codimension && sym->attr.allocatable))\n       && sym->attr.dummy && sym->attr.intent == INTENT_OUT)\n-    gfc_error (\"Variable '%s' at %L is INTENT(OUT) and can thus not be an \"\n-\t       \"allocatable coarray or have coarray components\",\n-\t       sym->name, &sym->declared_at);\n+    {\n+      gfc_error (\"Variable '%s' at %L is INTENT(OUT) and can thus not be an \"\n+\t\t \"allocatable coarray or have coarray components\",\n+\t\t sym->name, &sym->declared_at);\n+      return;\n+    }\n \n   if (sym->attr.codimension && sym->attr.dummy\n       && sym->ns->proc_name && sym->ns->proc_name->attr.is_bind_c)\n-    gfc_error (\"Coarray dummy variable '%s' at %L not allowed in BIND(C) \"\n-\t       \"procedure '%s'\", sym->name, &sym->declared_at,\n-\t       sym->ns->proc_name->name);\n+    {\n+      gfc_error (\"Coarray dummy variable '%s' at %L not allowed in BIND(C) \"\n+\t\t \"procedure '%s'\", sym->name, &sym->declared_at,\n+\t\t sym->ns->proc_name->name);\n+      return;\n+    }\n \n   switch (sym->attr.flavor)\n     {"}, {"sha": "ed36c9f284df705653f22df9b67197c46f96f680", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e535f1b22917730c13fc85f91360288d456f054f", "patch": "@@ -1,3 +1,7 @@\n+2011-08-15  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_26.f90: New.\n+\n 2011-08-15  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* gcc.dg/tree-ssa/vrp61.c: Use -fdump-tree-vrp1-nouid instead of"}, {"sha": "06ff4cf79f724214e503ba25f954b6956e1ef08e", "filename": "gcc/testsuite/gfortran.dg/coarray_26.f90", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_26.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e535f1b22917730c13fc85f91360288d456f054f/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_26.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_26.f90?ref=e535f1b22917730c13fc85f91360288d456f054f", "patch": "@@ -0,0 +1,53 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=single\" }\n+!\n+! Coarray declaration constraint checks\n+!\n+\n+function foo3a() result(res)\n+  implicit none\n+  integer :: res\n+  codimension :: res[*] ! { dg-error \"CODIMENSION attribute conflicts with RESULT\" }\n+end\n+\n+function foo2a() result(res)\n+  integer :: res[*] ! { dg-error \"CODIMENSION attribute conflicts with RESULT\" }\n+end\n+\n+function fooa() result(res) ! { dg-error \"shall not be a coarray or have a coarray component\" }\n+  implicit none\n+  type t\n+    integer, allocatable :: A[:]\n+  end type t\n+  type(t):: res\n+end\n+\n+function foo3() ! { dg-error \"shall not be a coarray or have a coarray component\" }\n+  implicit none\n+  integer :: foo3\n+  codimension :: foo3[*]\n+end\n+\n+function foo2() ! { dg-error \"shall not be a coarray or have a coarray component\" }\n+  implicit none\n+  integer :: foo2[*]\n+end\n+\n+function foo() ! { dg-error \"shall not be a coarray or have a coarray component\" }\n+  type t\n+    integer, allocatable :: A[:]\n+  end type t\n+  type(t):: foo\n+end\n+\n+subroutine test()\n+  use iso_c_binding\n+  implicit none\n+  type(c_ptr), save :: caf[*] ! { dg-error \"shall not be a coarray\" }\n+end subroutine test\n+\n+subroutine test2()\n+  use iso_c_binding\n+  implicit none\n+  type(c_funptr), save :: caf[*] ! { dg-error \"shall not be a coarray\" }\n+end subroutine test2"}]}