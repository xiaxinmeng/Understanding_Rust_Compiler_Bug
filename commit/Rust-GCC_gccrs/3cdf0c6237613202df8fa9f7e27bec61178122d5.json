{"sha": "3cdf0c6237613202df8fa9f7e27bec61178122d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NkZjBjNjIzNzYxMzIwMmRmOGZhOWY3ZTI3YmVjNjExNzgxMjJkNQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-10-18T18:15:14Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-10-18T18:15:14Z"}, "message": "i386.md (unnamed peephole2): Do not force memory operands of arith or logical instructions into registers...\n\n\t* config/i386/i386.md (unnamed peephole2): Do not force memory\n\toperands of arith or logical instructions into registers for\n\tnon-TARGET_READ_MODIFY targets.\n\n\t(ffs_cmove): Change operand 0 predicate to register_operand.\n\tChange operand 1 predicate to nonimmediate_operand.\n\t(ffsdi2): Ditto.\n\t(*ffs_no_cmove): Change operand 0 predicate to register_operand.\n\nFrom-SVN: r141213", "tree": {"sha": "19d0e7291b3c632e896dcfe0b73a96940e3bd6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/19d0e7291b3c632e896dcfe0b73a96940e3bd6bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cdf0c6237613202df8fa9f7e27bec61178122d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cdf0c6237613202df8fa9f7e27bec61178122d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cdf0c6237613202df8fa9f7e27bec61178122d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cdf0c6237613202df8fa9f7e27bec61178122d5/comments", "author": null, "committer": null, "parents": [{"sha": "73a5f1995f887b8511c8168d00149e7da92cf77f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a5f1995f887b8511c8168d00149e7da92cf77f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a5f1995f887b8511c8168d00149e7da92cf77f"}], "stats": {"total": 161, "additions": 86, "deletions": 75}, "files": [{"sha": "393a8bae3119343ee6d2476a05f3e7a69baea0b9", "filename": "MAINTAINERS", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cdf0c6237613202df8fa9f7e27bec61178122d5/MAINTAINERS", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cdf0c6237613202df8fa9f7e27bec61178122d5/MAINTAINERS", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/MAINTAINERS?ref=3cdf0c6237613202df8fa9f7e27bec61178122d5", "patch": "@@ -220,8 +220,8 @@ auto-vectorizer\t\tDorit Nuzman\t\tdorit@il.ibm.com\n loop infrastructure\tZdenek Dvorak\t\took@ucw.cz\n OpenMP\t\t\tJakub Jelinek\t\tjakub@redhat.com\n \n-Note that individuals who maintain parts of the compiler need approval to check\n-in changes outside of the parts of the compiler they maintain.\n+Note that individuals who maintain parts of the compiler need approval to\n+check in changes outside of the parts of the compiler they maintain.\n \n \t\t\tNon-Algorithmic Maintainers\n "}, {"sha": "79aee0bb2c0b88f854d834a3b6334e580c8a3238", "filename": "gcc/ChangeLog", "status": "modified", "additions": 74, "deletions": 63, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3cdf0c6237613202df8fa9f7e27bec61178122d5", "patch": "@@ -1,3 +1,14 @@\n+2008-10-18  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (unnamed peephole2): Do not force memory\n+\toperands of arith or logical instructions into registers for\n+\tnon-TARGET_READ_MODIFY targets.\n+\n+\t(ffs_cmove): Change operand 0 predicate to register_operand.\n+\tChange operand 1 predicate to nonimmediate_operand.\n+\t(ffsdi2): Ditto.\n+\t(*ffs_no_cmove): Change operand 0 predicate to register_operand.\n+\n 2008-10-18  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Guard\n@@ -69,8 +80,7 @@\n \tmark_hard_reg_early_clobbers): New functions.\n \t(process_bb_node_lives): Call\n \tmake_early_clobber_and_input_conflicts and\n-\tmark_hard_reg_early_clobbers.  Make hard register inputs live\n-\tagain.\n+\tmark_hard_reg_early_clobbers.  Make hard register inputs live again.\n \n \t* doc/rtl.texi (clobber): Change descriotion of RA behaviour for\n \tearly clobbers of pseudo-registers.\n@@ -107,7 +117,7 @@\n \t* config/mn10300/constraints.md (S): Allow UNSPEC_GOTSYM_OFF.\n \n 2008-10-15  Jan Sjodin  <jan.sjodin@amd.com>\n-    \t    Harsha Jagasia  <harsha.jagasia@amd.com>\n+\t    Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \tPR tree-optimization/37485\n \t* graphite.c (gmp_cst_to_tree): Moved.\n@@ -143,7 +153,7 @@\n \t(limit_scops): Same.\n \n 2008-10-15  Sebastian Pop  <sebastian.pop@amd.com>\n-    \t    Harsha Jagasia  <harsha.jagasia@amd.com>\n+\t    Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \tPR tree-optimization/37828\n \t* graphite.c (graphite_trans_loop_block): Do not loop block\n@@ -215,12 +225,12 @@\n \n 2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/37553\n-       * tree.c (build_type_attribute_qual_variant): Hash on the\n-       unqualified type, and don't overwrite an existing\n-       (type_hash_eq): Make the TYPE_NAME of the types significant, to\n-       allow distinguishing between wchar_t and its underlying type. This\n-       also means that we'll retain a little more typedef information.\n+\tPR c++/37553\n+\t* tree.c (build_type_attribute_qual_variant): Hash on the\n+\tunqualified type, and don't overwrite an existing\n+\t(type_hash_eq): Make the TYPE_NAME of the types significant, to\n+\tallow distinguishing between wchar_t and its underlying type. This\n+\talso means that we'll retain a little more typedef information.\n \n 2008-10-14  Andrey Belevantsev  <abel@ispras.ru>\n \t    Dmitry Melnik  <dm@ispras.ru>\n@@ -238,67 +248,67 @@\n \t(ia64_gen_spec_insn): Removed.\n \t(get_spec_check_gen_function, insn_can_be_in_speculative_p,\n \tia64_gen_spec_check): New static functions.\n-\t(ia64_alloc_sched_context, ia64_init_sched_context, \n-\tia64_set_sched_context, ia64_clear_sched_context, \n-\tia64_free_sched_context, ia64_get_insn_spec_ds, \n+\t(ia64_alloc_sched_context, ia64_init_sched_context,\n+\tia64_set_sched_context, ia64_clear_sched_context,\n+\tia64_free_sched_context, ia64_get_insn_spec_ds,\n \tia64_get_insn_checked_ds, ia64_skip_rtx_p): Declare functions.\n \t(ia64_needs_block_p): Change prototype.\n \t(ia64_gen_check): Rename to ia64_gen_spec_check.\n-\t(ia64_adjust_cost): Rename to ia64_adjust_cost_2.  Add new parameter \n+\t(ia64_adjust_cost): Rename to ia64_adjust_cost_2.  Add new parameter\n \tinto declaration, add special memory dependencies handling.\n \t(TARGET_SCHED_ALLOC_SCHED_CONTEXT, TARGET_SCHED_INIT_SCHED_CONTEXT,\n \tTARGET_SCHED_SET_SCHED_CONTEXT, TARGET_SCHED_CLEAR_SCHED_CONTEXT,\n \tTARGET_SCHED_FREE_SCHED_CONTEXT, TARGET_SCHED_GET_INSN_SPEC_DS,\n-\tTARGET_SCHED_GET_INSN_CHECKED_DS, TARGET_SCHED_SKIP_RTX_P): \n+\tTARGET_SCHED_GET_INSN_CHECKED_DS, TARGET_SCHED_SKIP_RTX_P):\n \tDefine new target hooks.\n \t(TARGET_SCHED_GEN_CHECK): Rename to TARGET_SCHED_GEN_SPEC_CHECK.\n-\t(ia64_optimization_options): Turn on selective scheduling with -O3, \n+\t(ia64_optimization_options): Turn on selective scheduling with -O3,\n \tdisable -fauto-inc-dec. Set mflag_sched_control_spec to true by default\n \twith selective scheduling.\n-\t(ia64_override_options): Initialize align_loops and align_functions \n-\tto 32 and 64, respectively.  Set global selective scheduling flags \n+\t(ia64_override_options): Initialize align_loops and align_functions\n+\tto 32 and 64, respectively.  Set global selective scheduling flags\n \taccording to target-dependent flags.\n \t(rtx_needs_barrier): Support UNSPEC_LDS_A.\n-\t(group_barrier_needed): Use new mstop-bit-before-check flag. \n+\t(group_barrier_needed): Use new mstop-bit-before-check flag.\n \tAdd heuristic.\n \t(dfa_state_size): Make global.\n \t(spec_check_no, max_uid): Remove.\n-        (mem_ops_in_group, current_cycle): New variables.\n+\t(mem_ops_in_group, current_cycle): New variables.\n \t(ia64_sched_init): Disable checks for !SCHED_GROUP_P after reload.\n-        Initialize new variables.\n-        (is_load_p, record_memory_reference): New functions.\n-        (ia64_dfa_sched_reorder): Lower priority of loads when limit is\n-        reached.\n-\t(ia64_variable_issue): Change use of current_sched_info to \n+\tInitialize new variables.\n+\t(is_load_p, record_memory_reference): New functions.\n+\t(ia64_dfa_sched_reorder): Lower priority of loads when limit is\n+\treached.\n+\t(ia64_variable_issue): Change use of current_sched_info to\n \tsched_deps_info.  Update comment.  Note if a load or a store is issued.\n-        (ia64_first_cycle_multipass_dfa_lookahead_guard_spec): Require a cycle\n-        advance if maximal number of loads or stores was issued on current \n-        cycle.\n+\t(ia64_first_cycle_multipass_dfa_lookahead_guard_spec): Require a cycle\n+\tadvance if maximal number of loads or stores was issued on current\n+\tcycle.\n \t(scheduled_good_insn): New static helper function.\n-        (ia64_dfa_new_cycle): Assert that last_scheduled_insn is set when \n-        a group barrier is needed.  Fix vertical spacing.  Guard the code\n-        doing state transition with last_scheduled_insn check.                \n-        Mark that a stop bit should be before current insn if there was a \n-        cycle advance.  Update current_cycle and mem_ops_in_group.\n+\t(ia64_dfa_new_cycle): Assert that last_scheduled_insn is set when\n+\ta group barrier is needed.  Fix vertical spacing.  Guard the code\n+\tdoing state transition with last_scheduled_insn check.\n+\tMark that a stop bit should be before current insn if there was a \n+\tcycle advance.  Update current_cycle and mem_ops_in_group.\n \t(ia64_h_i_d_extended): Change use of current_sched_info to\n-        sched_deps_info. Reallocate stops_p by larger chunks.\n+\tsched_deps_info. Reallocate stops_p by larger chunks.\n \t(struct _ia64_sched_context): New structure.\n \t(ia64_sched_context_t): New typedef.\n-\t(ia64_alloc_sched_context, ia64_init_sched_context, \n+\t(ia64_alloc_sched_context, ia64_init_sched_context,\n \tia64_set_sched_context, ia64_clear_sched_context,\n \tia64_free_sched_context): New static functions.\n \t(gen_func_t): New typedef.\n \t(get_spec_load_gen_function): New function.\n \t(SPEC_GEN_EXTEND_OFFSET): Declare.\t\n \t(ia64_set_sched_flags): Check common_sched_info instead of *flags.\n-\t(get_mode_no_for_insn): Change the condition that prevents use of \n+\t(get_mode_no_for_insn): Change the condition that prevents use of\n \tspecial hardware registers so it can now handle pseudos.\n \t(get_spec_unspec_code): New function.\n \t(ia64_skip_rtx_p, get_insn_spec_code, ia64_get_insn_spec_ds,\n \tia64_get_insn_checked_ds, ia64_gen_spec_load): New static functions.\n \t(ia64_speculate_insn, ia64_needs_block_p): Support branchy checks\n \tduring selective scheduling.\n-\t(ia64_speculate_insn): Use ds_get_speculation_types when \n+\t(ia64_speculate_insn): Use ds_get_speculation_types when\n \tdetermining whether we need to change the pattern.\n \t(SPEC_GEN_LD_MAP, SPEC_GEN_CHECK_OFFSET): Declare.\n \t(ia64_spec_check_src_p): Support new speculation/check codes.\n@@ -307,38 +317,39 @@\n \t(insert_bundle_state): Minimize mid-bundle stop bits.\n \t(important_for_bundling_p): New function.\n \t(get_next_important_insn): Use important_for_bundling_p.\n-\t(bundling): When shifting TImode from unimportant insns, ignore \n-\talso group barriers.  Assert that best state is found before \n-\tthe backward bundling pass.  Print number of mid-bundle stop bits.  \n-\tMinimize mid-bundle stop bits.  Check correct calculation of \n+\t(bundling): When shifting TImode from unimportant insns, ignore\n+\talso group barriers.  Assert that best state is found before\n+\tthe backward bundling pass.  Print number of mid-bundle stop bits.\n+\tMinimize mid-bundle stop bits.  Check correct calculation of\n \tmid-bundle stop bits.\n \t(ia64_sched_finish, final_emit_insn_group_barriers): Fix formatting.\n \t(final_emit_insn_group_barriers): Emit stop bits before insns starting\n \ta new cycle.\n \t(sel2_run): New variable.\n-\t(ia64_reorg): When flag_selective_scheduling2 is set, run the selective \n-\tscheduling pass instead of schedule_ebbs.  \n+\t(ia64_reorg): When flag_selective_scheduling2 is set, run the selective\n+\tscheduling pass instead of schedule_ebbs.\n \t\n \t* config/ia64/ia64.md (speculable1, speculable2): New attributes.\n \t(UNSPEC_LDS_A): New UNSPEC.\n-\t(movqi_internal, movhi_internal, movsi_internal, movdi_internal, \n-\tmovti_internal, movsf_internal, movdf_internal, \n+\t(movqi_internal, movhi_internal, movsi_internal, movdi_internal,\n+\tmovti_internal, movsf_internal, movdf_internal,\n \tmovxf_internal): Make visible.  Add speculable* attributes.\n \t(output_c_nc): New mode attribute.\n \t(mov<mode>_speculative_a, zero_extend<mode>di2_speculative_a,\n-\tmov<mode>_nc, zero_extend<mode>di2_nc, \n+\tmov<mode>_nc, zero_extend<mode>di2_nc,\n \tadvanced_load_check_nc_<mode>): New insns.\n \t(zero_extend*): Add speculable* attributes.\n \n \t* config/ia64/ia64.opt (msched_fp_mem_deps_zero_cost): New option.\n \t(msched-stop-bits-after-every-cycle): Likewise.\n-\t(msched-max-memory-insns,\n-        msched-max-memory-insns-hard-limit): Likewise.\n+\t(msched-max-memory-insns, msched-max-memory-insns-hard-limit):\n+\tLikewise.\n \t(msched-spec-verbose): Remove.\n \t(msched-prefer-non-data-spec-insns,\n-        msched-prefer-non-control-spec-insns, msched-count-spec-in-critical-path,\n-\tmsel-sched-dont-check-control-spec): Use Target \n-        Report Var instead of Common Report Var.\n+\tmsched-prefer-non-control-spec-insns,\n+\tmsched-count-spec-in-critical-path,\n+\tmsel-sched-dont-check-control-spec): Use Target  Report Var\n+\tinstead of Common Report Var.\n \n \t* config/ia64/itanium2.md: Remove incorrect bypass.\n \t\n@@ -365,15 +376,16 @@\n \tfor hppa64-linux-gnu targets.\n \n 2008-10-13  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n-            Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\n-            Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n-            Grace Cao  <grace_cao@playstation.sony.com>\n+\t    Kaushal Kantawala <Kaushal_Kantawala@playstation.sony.com>\n+\t    Trevor Smigiel  <Trevor_Smigiel@playstation.sony.com>\n+\t    Grace Cao  <grace_cao@playstation.sony.com>\n \n \t* doc/invoke.texi (-mgen-cell-microcode): Document.\n \t(-mwarn-cell-microcode): Document.\n \t* cfglayout.c (locator_location): Export.\n \t* rtl.h (locator_location): Define prototype.\n-\t* config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand): New predicate.\n+\t* config/rs6000/predicates.md (cc_reg_not_micro_cr0_operand):\n+\tNew predicate.\n \t* rs6000/rs6000-protos.h (rs6000_final_prescan_insn): Define prototype.\n \t* config/rs6000/rs6000.opt (mgen-cell-microcode): New option.\n \t(mwarn-cell-microcode): New option.\n@@ -386,9 +398,10 @@\n \t* config/rs6000/rs6000.h (FINAL_PRESCAN_INSN): Define.\n \t* config/rs6000/rs6000.md\n \tReplace cc_reg_not_cr0_operand with cc_reg_not_micro_cr0_operand if\n-\tthe instruction would have been microcoded on the Cell.\n-\tSet cell_micro to always on unnamed patterns for the string instructions.\n-\t(cell_micro): Update definition, remove load/store conditional microcoded.\n+\tthe instruction would have been microcoded on the Cell.  Set cell_micro\n+\tto always on unnamed patterns for the string instructions.\n+\t(cell_micro): Update definition, remove load/store conditional\n+\tmicrocoded.\n \t(sign_extend:DI): Define new pattern for non microcoded version.\n \t(sign_extend:SI): Likewise.\n \t(compare (div:P)): Set cell_micro to not.\n@@ -522,9 +535,8 @@\n \tDF_REF_CLASS, DF_REF_TYPE, DF_REF_CHAIN, DF_REF_ID, DF_REF_FLAGS,\n \tDF_REF_ORDER, DF_REF_IS_ARTIFICIAL, DF_REF_NEXT_REG,\n \tDF_REF_PREV_REG, DF_REF_EXTRACT_WIDTH, DF_REF_EXTRACT_OFFSET,\n-\tDF_REF_EXTRACT_MODE): Replaced definition to access union\n-\tdf_ref_d.\n-       \t(DF_MWS_REG_DEF_P, DF_MWS_REG_USE_P, DF_MWS_TYPE): New macros.\n+\tDF_REF_EXTRACT_MODE): Replaced definition to access union df_ref_d.\n+\t(DF_MWS_REG_DEF_P, DF_MWS_REG_USE_P, DF_MWS_TYPE): New macros.\n \t(df_scan_bb_info, df_bb_regno_first_def_find,\n \tdf_bb_regno_last_def_find, df_find_def, df_find_use,\n \tdf_refs_chain_dump, df_regs_chain_dump, df_ref_debug,\n@@ -548,8 +560,7 @@\n \tdf_ref * with df_ref.\n \t(df_ref_record, df_uses_record, df_ref_create_structure): Added\n \tdf_ref_class parameter.\n-\t(df_scan_problem_data): Added new pools for different types of\n-\trefs.\n+\t(df_scan_problem_data): Added new pools for different types of refs.\n \t(df_scan_free_internal, df_scan_alloc, df_free_ref,\n \tdf_ref_create_structure): Processed new ref pools.\n \t(df_scan_start_dump): Added counts of refs and insns."}, {"sha": "055add495feb16ef6b16dadd8c9b11f62e1dcb83", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3cdf0c6237613202df8fa9f7e27bec61178122d5", "patch": "@@ -15366,9 +15366,9 @@\n (define_expand \"ffs_cmove\"\n   [(set (match_dup 2) (const_int -1))\n    (parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ (match_operand:SI 1 \"register_operand\" \"\")\n+\t\t   (compare:CCZ (match_operand:SI 1 \"nonimmediate_operand\" \"\")\n \t\t\t\t(const_int 0)))\n-\t      (set (match_operand:SI 0 \"nonimmediate_operand\" \"\")\n+\t      (set (match_operand:SI 0 \"register_operand\" \"\")\n \t\t   (ctz:SI (match_dup 1)))])\n    (set (match_dup 0) (if_then_else:SI\n \t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n@@ -15380,7 +15380,7 @@\n   \"operands[2] = gen_reg_rtx (SImode);\")\n \n (define_insn_and_split \"*ffs_no_cmove\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=r\")\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(ffs:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")))\n    (clobber (match_scratch:SI 2 \"=&q\"))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -15416,9 +15416,9 @@\n (define_expand \"ffsdi2\"\n   [(set (match_dup 2) (const_int -1))\n    (parallel [(set (reg:CCZ FLAGS_REG)\n-\t\t   (compare:CCZ (match_operand:DI 1 \"register_operand\" \"\")\n+\t\t   (compare:CCZ (match_operand:DI 1 \"nonimmediate_operand\" \"\")\n \t\t\t\t(const_int 0)))\n-\t      (set (match_operand:DI 0 \"nonimmediate_operand\" \"\")\n+\t      (set (match_operand:DI 0 \"register_operand\" \"\")\n \t\t   (ctz:DI (match_dup 1)))])\n    (set (match_dup 0) (if_then_else:DI\n \t\t\t(eq (reg:CCZ FLAGS_REG) (const_int 0))\n@@ -20684,7 +20684,7 @@\n                      [(match_dup 0)\n                       (match_operand:SI 1 \"memory_operand\" \"\")]))\n               (clobber (reg:CC FLAGS_REG))])]\n-  \"optimize_insn_for_speed_p ()\"\n+  \"optimize_insn_for_speed_p () && ! TARGET_READ_MODIFY\"\n   [(set (match_dup 2) (match_dup 1))\n    (parallel [(set (match_dup 0)\n                    (match_op_dup 3 [(match_dup 0) (match_dup 2)]))"}, {"sha": "eaf1f2b8853963a20ac2d4e3a41512d1e1a2b3be", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cdf0c6237613202df8fa9f7e27bec61178122d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3cdf0c6237613202df8fa9f7e27bec61178122d5", "patch": "@@ -42,13 +42,13 @@\n \t* gfortran.dg/reshape_order_4.f90:  Likewise.\n \n 2008-10-15  Jan Sjodin  <jan.sjodin@amd.com>\n-    \t    Harsha Jagasia  <harsha.jagasia@amd.com>\n+\t    Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \tPR tree-optimization/37485\n \t* gcc.dg/graphite/pr37485.c: New.\n \n 2008-10-15  Sebastian Pop  <sebastian.pop@amd.com>\n-    \t    Harsha Jagasia  <harsha.jagasia@amd.com>\n+\t    Harsha Jagasia  <harsha.jagasia@amd.com>\n \n \tPR tree-optimization/37828\n \t* testsuite/gcc.dg/graphite/pr37828.c: New.\n@@ -75,8 +75,8 @@\n \n 2008-10-14  Douglas Gregor  <doug.gregor@gmail.com>\n \n-       PR c++/37553\n-       * g++.dg/ext/alias-canon2.C: New.\n+\tPR c++/37553\n+\t* g++.dg/ext/alias-canon2.C: New.\n \n 2008-10-13  Jerry DeLisle  <jvdelisle@gcc.gnu.org\n "}]}