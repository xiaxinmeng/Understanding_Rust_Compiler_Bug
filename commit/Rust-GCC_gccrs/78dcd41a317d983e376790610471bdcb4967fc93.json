{"sha": "78dcd41a317d983e376790610471bdcb4967fc93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhkY2Q0MWEzMTdkOTgzZTM3Njc5MDYxMDQ3MWJkY2I0OTY3ZmM5Mw==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-02-24T21:55:15Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-02-24T21:55:15Z"}, "message": "call.c, [...]: Fix comment typo(s).\n\n\t* call.c, class.c, cp-tree.h, decl2.c, error.c, init.c, mangle.c,\n        parser.c: Fix comment typo(s).\n\nFrom-SVN: r95517", "tree": {"sha": "eb97d91b98de2dfcb8bb5c867dfa39c69b60df87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb97d91b98de2dfcb8bb5c867dfa39c69b60df87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78dcd41a317d983e376790610471bdcb4967fc93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78dcd41a317d983e376790610471bdcb4967fc93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78dcd41a317d983e376790610471bdcb4967fc93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78dcd41a317d983e376790610471bdcb4967fc93/comments", "author": null, "committer": null, "parents": [{"sha": "3f1176568bb51d0d953470763a715ec12dcbfea6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f1176568bb51d0d953470763a715ec12dcbfea6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f1176568bb51d0d953470763a715ec12dcbfea6"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "d11e3215997ff9f0bad1236e1e8732927ccf9a84", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -1,3 +1,8 @@\n+2005-02-24  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* call.c, class.c, cp-tree.h, decl2.c, error.c, init.c, mangle.c,\n+\tparser.c: Fix comment typo(s).\n+\n 2005-02-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/20175"}, {"sha": "5737e4fc0a11ffd1b21d5410c3cddb54de5c2909", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -538,8 +538,7 @@ build_conv (conversion_kind code, tree type, conversion *from)\n }\n \n /* Build a representation of the identity conversion from EXPR to\n-   itself.  The TYPE should match the the type of EXPR, if EXPR is\n-   non-NULL.  */\n+   itself.  The TYPE should match the type of EXPR, if EXPR is non-NULL.  */\n \n static conversion *\n build_identity_conv (tree type, tree expr)\n@@ -2450,7 +2449,7 @@ print_z_candidates (struct z_candidate *candidates)\n /* USER_SEQ is a user-defined conversion sequence, beginning with a\n    USER_CONV.  STD_SEQ is the standard conversion sequence applied to\n    the result of the conversion function to convert it to the final\n-   desired type.  Merge the the two sequences into a single sequence,\n+   desired type.  Merge the two sequences into a single sequence,\n    and return the merged sequence.  */\n \n static conversion *"}, {"sha": "f6ba914cb84e4335adc6ff340c6f2208937141a7", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -3505,7 +3505,7 @@ layout_empty_base (tree binfo, tree eoc, splay_tree offsets)\n   return atend;\n }\n \n-/* Layout the the base given by BINFO in the class indicated by RLI.\n+/* Layout the base given by BINFO in the class indicated by RLI.\n    *BASE_ALIGN is a running maximum of the alignments of\n    any base class.  OFFSETS gives the location of empty base\n    subobjects.  T is the most derived type.  Return nonzero if the new\n@@ -4035,7 +4035,7 @@ check_bases_and_members (tree t)\n   /* Nonzero if the implicitly generated copy constructor should take\n      a non-const reference argument.  */\n   int cant_have_const_ctor;\n-  /* Nonzero if the the implicitly generated assignment operator\n+  /* Nonzero if the implicitly generated assignment operator\n      should take a non-const reference argument.  */\n   int no_const_asn_ref;\n   tree access_decls;\n@@ -7680,8 +7680,8 @@ build_rtti_vtbl_entries (tree binfo, vtbl_init_data* vid)\n   *vid->last_init = build_tree_list (NULL_TREE, init);\n   vid->last_init = &TREE_CHAIN (*vid->last_init);\n \n-  /* Add the offset-to-top entry.  It comes earlier in the vtable that\n-     the the typeinfo entry.  Convert the offset to look like a\n+  /* Add the offset-to-top entry.  It comes earlier in the vtable than\n+     the typeinfo entry.  Convert the offset to look like a\n      function pointer, so that we can put it in the vtable.  */\n   init = build_nop (vfunc_ptr_type_node, offset);\n   *vid->last_init = build_tree_list (NULL_TREE, init);"}, {"sha": "caac8b24fb6d6898045fc40e0d68b077abd4f8cd", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -1683,7 +1683,7 @@ struct lang_decl GTY(())\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a destructor, but not the\n    specialized in-charge constructor, in-charge deleting constructor,\n-   or the the base destructor.  */\n+   or the base destructor.  */\n #define DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P(NODE)\t\t\t\\\n   (DECL_DESTRUCTOR_P (NODE) && !DECL_CLONED_FUNCTION_P (NODE))\n \n@@ -2836,7 +2836,7 @@ struct lang_decl GTY(())\n \n /* Nonzero if this VAR_DECL or FUNCTION_DECL has already been\n    instantiated, i.e. its definition has been generated from the\n-   pattern given in the the template.  */\n+   pattern given in the template.  */\n #define DECL_TEMPLATE_INSTANTIATED(NODE) \\\n   DECL_LANG_FLAG_1 (VAR_OR_FUNCTION_DECL_CHECK (NODE))\n \n@@ -4371,7 +4371,7 @@ extern tree mangle_ref_init_variable            (tree);\n /* in dump.c */\n extern bool cp_dump_tree                         (void *, tree);\n \n-/* in cp-simplify.c */\n+/* in cp-gimplify.c */\n extern int cp_gimplify_expr\t\t        (tree *, tree *, tree *);\n extern void cp_genericize\t\t\t(tree);\n "}, {"sha": "474e04e2faa73009e8a9fd5b06a9180c940ffdc1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -2437,7 +2437,7 @@ do_static_initialization (tree decl, tree init)\n   if (init)\n     finish_expr_stmt (init);\n \n-  /* If we're using __cxa_atexit, register a a function that calls the\n+  /* If we're using __cxa_atexit, register a function that calls the\n      destructor for the object.  */\n   if (flag_use_cxa_atexit)\n     finish_expr_stmt (register_dtor_fn (decl));"}, {"sha": "c53e0328cd01946148da5123637bc728688ec495", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -2201,7 +2201,7 @@ print_instantiation_full_context (diagnostic_context *context)\n       else\n \t{\n \t  if (current_function_decl == TINST_DECL (p))\n-\t    /* Avoid redundancy with the the \"In function\" line.  */;\n+\t    /* Avoid redundancy with the \"In function\" line.  */;\n \t  else\n \t    pp_verbatim (context->printer,\n                          \"%s: In instantiation of %qs:\\n\","}, {"sha": "087868674f31c223f85b7960e3198ff7aaabd6d5", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -1762,7 +1762,7 @@ build_new_1 (tree exp)\n      from ELT_TYPE for a multi-dimensional array; ELT_TYPE is never an\n      ARRAY_TYPE, but TYPE may be an ARRAY_TYPE.  */\n   tree type;\n-  /* A pointer type pointing to to the FULL_TYPE.  */\n+  /* A pointer type pointing to the FULL_TYPE.  */\n   tree full_pointer_type;\n   tree outer_nelts = NULL_TREE;\n   tree nelts = NULL_TREE;"}, {"sha": "1d49490a81d514a1f3eb0794513777949efc5302", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -2230,7 +2230,7 @@ write_template_arg (tree node)\n   MANGLE_TRACE_TREE (\"template-arg\", node);\n \n   /* A template template parameter's argument list contains TREE_LIST\n-     nodes of which the value field is the the actual argument.  */\n+     nodes of which the value field is the actual argument.  */\n   if (code == TREE_LIST)\n     {\n       node = TREE_VALUE (node);"}, {"sha": "3db7f2ee9f6d253ecc6100c4c5124910e088ab0e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78dcd41a317d983e376790610471bdcb4967fc93/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=78dcd41a317d983e376790610471bdcb4967fc93", "patch": "@@ -9580,7 +9580,7 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n    typedef-name:\n      identifier\n \n-   Returns a TYPE_DECL for the the type.  */\n+   Returns a TYPE_DECL for the type.  */\n \n static tree\n cp_parser_type_name (cp_parser* parser)\n@@ -14333,7 +14333,7 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n \t     lookup_member, we must enter the scope here.  */\n \t  if (dependent_p)\n \t    pushed_scope = push_scope (parser->scope);\n-\t  /* If the PARSER->SCOPE is a a template specialization, it\n+\t  /* If the PARSER->SCOPE is a template specialization, it\n \t     may be instantiated during name lookup.  In that case,\n \t     errors may be issued.  Even if we rollback the current\n \t     tentative parse, those errors are valid.  */"}]}