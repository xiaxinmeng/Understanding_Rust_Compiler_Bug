{"sha": "c716e67fa2df61cf4082c75088a0adc1a067d848", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcxNmU2N2ZhMmRmNjFjZjQwODJjNzUwODhhMGFkYzFhMDY3ZDg0OA==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2013-09-03T18:19:04Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2013-09-03T18:19:04Z"}, "message": "Delay base decl's alignment adjustment until transformation happens\n\nFrom-SVN: r202229", "tree": {"sha": "564768cce71a061b16e27811fc16551567b1b217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/564768cce71a061b16e27811fc16551567b1b217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c716e67fa2df61cf4082c75088a0adc1a067d848", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c716e67fa2df61cf4082c75088a0adc1a067d848", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c716e67fa2df61cf4082c75088a0adc1a067d848", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c716e67fa2df61cf4082c75088a0adc1a067d848/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "db8800bc5f38a732fd5a33d6bfbbff71b186076d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db8800bc5f38a732fd5a33d6bfbbff71b186076d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db8800bc5f38a732fd5a33d6bfbbff71b186076d"}], "stats": {"total": 129, "additions": 114, "deletions": 15}, "files": [{"sha": "e572d2c4162ac4fd5b0d15d302265472e0bd722b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -1,3 +1,21 @@\n+2013-08-29  Xinliang David Li  <davidxl@google.com>\n+\n+\t* tree-vect-slp.c (destroy_bb_vec_info): Data ref cleanup.\n+\t* tree-vect-loop.c (destroy_bb_vec_info): Ditto.\n+\t* tree-vect-data-refs.c (vect_compute_data_ref_alignment):\n+\tDelay base decl alignment adjustment.\n+\t* tree-vectorizer.c (vect_destroy_datarefs): New function.\n+\t* tree-vectorizer.h: New data structure.\n+\t(set_dr_misalignment): New function.\n+\t(dr_misalignment): Ditto.\n+\t* tree-vect-stmts.c (vectorizable_store): Ensure alignment.\n+\t(vectorizable_load): Ditto.\n+\t(ensure_base_align): New function.\n+\t(vectorize_loops): Add dbg_cnt support.\n+\t(execute_vect_slp): Ditto.\n+\t* dbgcnt.def: New debug counter.\n+\t* Makefile: New dependency.\n+\n 2013-09-03  Meador Inge  <meadori@codesourcery.com>\n \n \tRevert:"}, {"sha": "f0ee2d272947fb9dabb8b561b63323b67a55e51b", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -2656,7 +2656,7 @@ tree-vect-data-refs.o: tree-vect-data-refs.c $(CONFIG_H) $(SYSTEM_H) \\\n tree-vectorizer.o: tree-vectorizer.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(DUMPFILE_H) $(TM_H) $(GGC_H) $(TREE_H) $(TREE_FLOW_H) \\\n    $(CFGLOOP_H) $(TREE_PASS_H) $(TREE_VECTORIZER_H) \\\n-   $(TREE_PRETTY_PRINT_H)\n+   $(TREE_PRETTY_PRINT_H) $(DBGCNT_H)\n vtable-verify.o: vtable-verify.c vtable-verify.h $(CONFIG_H) \\\n    $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) cp/cp-tree.h $(TM_P_H) \\\n    $(BASIC_BLOCK_H) output.h $(TREE_FLOW_H) $(TREE_DUMP_H) $(TREE_PASS_H) \\"}, {"sha": "45b8eed85afbfe8bfb6045fdb4f89cfa66ec227d", "filename": "gcc/dbgcnt.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Fdbgcnt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Fdbgcnt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbgcnt.def?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -172,6 +172,8 @@ DEBUG_COUNTER (pre_insn)\n DEBUG_COUNTER (treepre_insert)\n DEBUG_COUNTER (tree_sra)\n DEBUG_COUNTER (eipa_sra)\n+DEBUG_COUNTER (vect_loop)\n+DEBUG_COUNTER (vect_slp)\n DEBUG_COUNTER (sched2_func)\n DEBUG_COUNTER (sched_block)\n DEBUG_COUNTER (sched_func)"}, {"sha": "8bd8aeaefcb10a7d3b544756a751d6a4bff42d7f", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -763,15 +763,11 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n           dump_generic_expr (MSG_NOTE, TDF_SLIM, ref);\n         }\n \n-      DECL_ALIGN (base) = TYPE_ALIGN (vectype);\n-      DECL_USER_ALIGN (base) = 1;\n+      gcc_assert (dr->aux);\n+      ((dataref_aux *)dr->aux)->base_decl = base;\n+      ((dataref_aux *)dr->aux)->base_misaligned = true;\n     }\n \n-  /* At this point we assume that the base is aligned.  */\n-  gcc_assert (base_aligned\n-\t      || (TREE_CODE (base) == VAR_DECL\n-\t\t  && DECL_ALIGN (base) >= TYPE_ALIGN (vectype)));\n-\n   /* If this is a backward running DR then first access in the larger\n      vectype actually is N-1 elements before the address in the DR.\n      Adjust misalign accordingly.  */"}, {"sha": "055538f7e9c6ea0a24b96194dfc6d8aaf9db4199", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -957,7 +957,7 @@ destroy_loop_vec_info (loop_vec_info loop_vinfo, bool clean_stmts)\n     }\n \n   free (LOOP_VINFO_BBS (loop_vinfo));\n-  free_data_refs (LOOP_VINFO_DATAREFS (loop_vinfo));\n+  vect_destroy_datarefs (loop_vinfo, NULL);\n   free_dependence_relations (LOOP_VINFO_DDRS (loop_vinfo));\n   LOOP_VINFO_LOOP_NEST (loop_vinfo).release ();\n   LOOP_VINFO_MAY_MISALIGN_STMTS (loop_vinfo).release ();"}, {"sha": "4217f2be54c25c022f6616d4a34a73c4b9f93668", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -1825,7 +1825,7 @@ destroy_bb_vec_info (bb_vec_info bb_vinfo)\n         free_stmt_vec_info (stmt);\n     }\n \n-  free_data_refs (BB_VINFO_DATAREFS (bb_vinfo));\n+  vect_destroy_datarefs (NULL, bb_vinfo);\n   free_dependence_relations (BB_VINFO_DDRS (bb_vinfo));\n   BB_VINFO_GROUPED_STORES (bb_vinfo).release ();\n   slp_instances = BB_VINFO_SLP_INSTANCES (bb_vinfo);"}, {"sha": "7b8e7087b688c54f89ea741c6c607f4e7f400bf3", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -3809,6 +3809,26 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n   return true;\n }\n \n+/* A helper function to ensure data reference DR's base alignment\n+   for STMT_INFO.  */\n+\n+static void\n+ensure_base_align (stmt_vec_info stmt_info, struct data_reference *dr)\n+{\n+  if (!dr->aux)\n+    return;\n+\n+  if (((dataref_aux *)dr->aux)->base_misaligned)\n+    {\n+      tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n+      tree base_decl = ((dataref_aux *)dr->aux)->base_decl;\n+\n+      DECL_ALIGN (base_decl) = TYPE_ALIGN (vectype);\n+      DECL_USER_ALIGN (base_decl) = 1;\n+      ((dataref_aux *)dr->aux)->base_misaligned = false;\n+    }\n+}\n+\n \n /* Function vectorizable_store.\n \n@@ -3820,7 +3840,7 @@ vectorizable_operation (gimple stmt, gimple_stmt_iterator *gsi,\n \n static bool\n vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n-\t\t    slp_tree slp_node)\n+                    slp_tree slp_node)\n {\n   tree scalar_dest;\n   tree data_ref;\n@@ -3982,6 +4002,8 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n   /** Transform.  **/\n \n+  ensure_base_align (stmt_info, dr);\n+\n   if (grouped_store)\n     {\n       first_dr = STMT_VINFO_DATA_REF (vinfo_for_stmt (first_stmt));\n@@ -4364,7 +4386,7 @@ permute_vec_elements (tree x, tree y, tree mask_vec, gimple stmt,\n \n static bool\n vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n-\t\t   slp_tree slp_node, slp_instance slp_node_instance)\n+                   slp_tree slp_node, slp_instance slp_node_instance)\n {\n   tree scalar_dest;\n   tree vec_dest = NULL;\n@@ -4375,7 +4397,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   struct loop *loop = NULL;\n   struct loop *containing_loop = (gimple_bb (stmt))->loop_father;\n   bool nested_in_vect_loop = false;\n-  struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info), *first_dr;\n+  struct data_reference *dr = STMT_VINFO_DATA_REF (stmt_info), *first_dr = NULL;\n   tree vectype = STMT_VINFO_VECTYPE (stmt_info);\n   tree elem_type;\n   tree new_temp;\n@@ -4575,6 +4597,8 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \n   /** Transform.  **/\n \n+  ensure_base_align (stmt_info, dr);\n+\n   if (STMT_VINFO_GATHER_P (stmt_info))\n     {\n       tree vec_oprnd0 = NULL_TREE, op;"}, {"sha": "575cb756245a8279730c466611ac006cc3f36cba", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -68,6 +68,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"hash-table.h\"\n #include \"tree-ssa-propagate.h\"\n+#include \"dbgcnt.h\"\n \n /* Loop or bb location.  */\n LOC vect_location;\n@@ -279,6 +280,31 @@ note_simd_array_uses (hash_table <simd_array_to_simduid> *htab)\n       }\n }\n \f\n+/* A helper function to free data refs.  */\n+\n+void\n+vect_destroy_datarefs (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n+{\n+  vec<data_reference_p> datarefs;\n+  struct data_reference *dr;\n+  unsigned int i;\n+\n+ if (loop_vinfo)\n+    datarefs = LOOP_VINFO_DATAREFS (loop_vinfo);\n+  else\n+    datarefs = BB_VINFO_DATAREFS (bb_vinfo);\n+\n+  FOR_EACH_VEC_ELT (datarefs, i, dr)\n+    if (dr->aux)\n+      {\n+        free (dr->aux);\n+        dr->aux = NULL;\n+      }\n+\n+  free_data_refs (datarefs);\n+}\n+\n+\n /* Function vectorize_loops.\n \n    Entry point to loop vectorization phase.  */\n@@ -331,6 +357,9 @@ vectorize_loops (void)\n \tif (!loop_vinfo || !LOOP_VINFO_VECTORIZABLE_P (loop_vinfo))\n \t  continue;\n \n+        if (!dbg_cnt (vect_loop))\n+\t  break;\n+\n         if (LOCATION_LOCUS (vect_location) != UNKNOWN_LOC\n \t    && dump_enabled_p ())\n           dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,\n@@ -440,6 +469,9 @@ execute_vect_slp (void)\n \n       if (vect_slp_analyze_bb (bb))\n         {\n+          if (!dbg_cnt (vect_slp))\n+            break;\n+\n           vect_slp_transform_bb (bb);\n           if (dump_enabled_p ())\n             dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, vect_location,"}, {"sha": "9c7753e2eaf441f3580a14fdfa1589f58281a138", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c716e67fa2df61cf4082c75088a0adc1a067d848/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=c716e67fa2df61cf4082c75088a0adc1a067d848", "patch": "@@ -629,6 +629,12 @@ typedef struct _stmt_vec_info {\n #define PURE_SLP_STMT(S)                  ((S)->slp_type == pure_slp)\n #define STMT_SLP_TYPE(S)                   (S)->slp_type\n \n+struct dataref_aux {\n+  tree base_decl;\n+  bool base_misaligned;\n+  int misalignment;\n+};\n+\n #define VECT_MAX_COST 1000\n \n /* The maximum number of intermediate steps required in multi-step type\n@@ -831,11 +837,31 @@ destroy_cost_data (void *data)\n /*-----------------------------------------------------------------*/\n /* Info on data references alignment.                              */\n /*-----------------------------------------------------------------*/\n+inline void\n+set_dr_misalignment (struct data_reference *dr, int val)\n+{\n+  dataref_aux *data_aux = (dataref_aux *) dr->aux;\n+\n+  if (!data_aux)\n+    {\n+      data_aux = XCNEW (dataref_aux);\n+      dr->aux = data_aux;\n+    }\n+\n+  data_aux->misalignment = val;\n+}\n+\n+inline int\n+dr_misalignment (struct data_reference *dr)\n+{\n+  gcc_assert (dr->aux);\n+  return ((dataref_aux *) dr->aux)->misalignment;\n+}\n \n /* Reflects actual alignment of first access in the vectorized loop,\n    taking into account peeling/versioning if applied.  */\n-#define DR_MISALIGNMENT(DR)   ((int) (size_t) (DR)->aux)\n-#define SET_DR_MISALIGNMENT(DR, VAL)   ((DR)->aux = (void *) (size_t) (VAL))\n+#define DR_MISALIGNMENT(DR) dr_misalignment (DR)\n+#define SET_DR_MISALIGNMENT(DR, VAL) set_dr_misalignment (DR, VAL)\n \n /* Return TRUE if the data access is aligned, and FALSE otherwise.  */\n \n@@ -1014,5 +1040,6 @@ void vect_pattern_recog (loop_vec_info, bb_vec_info);\n \n /* In tree-vectorizer.c.  */\n unsigned vectorize_loops (void);\n+void vect_destroy_datarefs (loop_vec_info, bb_vec_info);\n \n #endif  /* GCC_TREE_VECTORIZER_H  */"}]}