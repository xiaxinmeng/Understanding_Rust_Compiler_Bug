{"sha": "48137d59c3cf49628dee903213567c9556cb6adb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxMzdkNTljM2NmNDk2MjhkZWU5MDMyMTM1NjdjOTU1NmNiNmFkYg==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@apple.com", "date": "2007-03-10T01:03:36Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2007-03-10T01:03:36Z"}, "message": "gcc.c: Document %{, in big comment at top.\n\n\t* gcc.c: Document %{, in big comment at top.\n\t(input_suffix_matches): Remove special handling for .s and\n\t.S.\n\t(input_spec_matches): New.\n\t(handle_braces): Handle %{,.\n\t(validate_switches): ',' indicates a value which is not a switch.\n\t* config/alpha/osf.h (ASM_FINAL_SPEC): Use %{, rather than %{.\n\tto detect assembler input.\n\t* config/i386/sol2.h (CPP_SPEC): Likewise.\n\t* config/rs6000/sysv4.h (ASM_SPEC): Likewise.\n\t* config/rs6000/vxworks.h (ASM_SPEC): Likewise.\n\t* config/rs6000/lynx.h (ASM_SPEC): Likewise.\n\t* config/rs6000/linux64.h (ASM_SPEC_COMMON): Likewise.\n\t* config/i386/darwin.h (DARWIN_MINVERSION_SPEC): Objective-C plus\n\t-m64 causes deployment target to default to 10.5.\n\t* config/rs6000/darwin.h (DARWIN_MINVERSION_SPEC): Likewise.\n\nFrom-SVN: r122783", "tree": {"sha": "3d90d17a264baf824bedf4f6733f3e706c71f2e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d90d17a264baf824bedf4f6733f3e706c71f2e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48137d59c3cf49628dee903213567c9556cb6adb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48137d59c3cf49628dee903213567c9556cb6adb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48137d59c3cf49628dee903213567c9556cb6adb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48137d59c3cf49628dee903213567c9556cb6adb/comments", "author": {"login": "geoffk01", "id": 31905243, "node_id": "MDQ6VXNlcjMxOTA1MjQz", "avatar_url": "https://avatars.githubusercontent.com/u/31905243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/geoffk01", "html_url": "https://github.com/geoffk01", "followers_url": "https://api.github.com/users/geoffk01/followers", "following_url": "https://api.github.com/users/geoffk01/following{/other_user}", "gists_url": "https://api.github.com/users/geoffk01/gists{/gist_id}", "starred_url": "https://api.github.com/users/geoffk01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/geoffk01/subscriptions", "organizations_url": "https://api.github.com/users/geoffk01/orgs", "repos_url": "https://api.github.com/users/geoffk01/repos", "events_url": "https://api.github.com/users/geoffk01/events{/privacy}", "received_events_url": "https://api.github.com/users/geoffk01/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b580a0b53a3e81eef0656670c4a4a09a5683b42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b580a0b53a3e81eef0656670c4a4a09a5683b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b580a0b53a3e81eef0656670c4a4a09a5683b42"}], "stats": {"total": 151, "additions": 93, "deletions": 58}, "files": [{"sha": "ea4a8d8b192556151d084f184b832351c1377b0a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -1,3 +1,22 @@\n+2007-03-09  Geoffrey Keating  <geoffk@apple.com>\n+\n+\t* gcc.c: Document %{, in big comment at top.\n+\t(input_suffix_matches): Remove special handling for .s and\n+\t.S.\n+\t(input_spec_matches): New.\n+\t(handle_braces): Handle %{,.\n+\t(validate_switches): ',' indicates a value which is not a switch.\n+\t* config/alpha/osf.h (ASM_FINAL_SPEC): Use %{, rather than %{.\n+\tto detect assembler input.\n+\t* config/i386/sol2.h (CPP_SPEC): Likewise.\n+\t* config/rs6000/sysv4.h (ASM_SPEC): Likewise.\n+\t* config/rs6000/vxworks.h (ASM_SPEC): Likewise.\n+\t* config/rs6000/lynx.h (ASM_SPEC): Likewise.\n+\t* config/rs6000/linux64.h (ASM_SPEC_COMMON): Likewise.\n+\t* config/i386/darwin.h (DARWIN_MINVERSION_SPEC): Objective-C plus\n+\t-m64 causes deployment target to default to 10.5.\n+\t* config/rs6000/darwin.h (DARWIN_MINVERSION_SPEC): Likewise.\n+\n 2007-03-09  Richard Henderson  <rth@redhat.com>\n \n \tPR target/26090"}, {"sha": "f7aaf4d4606ed9c8d99e7cbe552eb7cfdcc91eac", "filename": "gcc/config/alpha/osf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Falpha%2Fosf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Falpha%2Fosf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -121,7 +121,7 @@ Boston, MA 02110-1301, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\t\t%{,assembler:%i;:%g.s}}}\"\n \n #else\n #define ASM_FINAL_SPEC \"\\\n@@ -130,7 +130,7 @@ Boston, MA 02110-1301, USA.  */\n \t\t%{K: -I %b.o~} \\\n \t\t%{!K: %{save-temps: -I %b.o~}} \\\n \t\t%{c:%W{o*}%{!o*:-o %b.o}}%{!c:-o %U.o} \\\n-\t\t%{.s:%i} %{!.s:%g.s}}}\"\n+\t\t%{,assembler:%i;:%g.s}}}\"\n \n #endif\n "}, {"sha": "15fbd88f5b6004aa944b9eda408943533efcbd4b", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -84,7 +84,11 @@ Boston, MA 02110-1301, USA.  */\n #define DARWIN_SUBARCH_SPEC DARWIN_ARCH_SPEC\n \n /* Determine a minimum version based on compiler options.  */\n-#define DARWIN_MINVERSION_SPEC\t\"10.4\"\n+#define DARWIN_MINVERSION_SPEC\t\t\t\t\\\n+ \"%{!m64|fgnu-runtime:10.4;\t\t\t\t\\\n+    ,objective-c|,objc-cpp-output:10.5;\t\t\t\\\n+    ,objective-c++|,objective-c++-cpp-output:10.5;\t\\\n+    :10.4}\n \n #undef SUBTARGET_EXTRA_SPECS\n #define SUBTARGET_EXTRA_SPECS                                   \\"}, {"sha": "8df92e3b29c4052d2e05a6e49d3ff1bc288c258e", "filename": "gcc/config/i386/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Fi386%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Fi386%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsol2.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -51,7 +51,7 @@ Boston, MA 02110-1301, USA.  */\n \n /* Solaris 2/Intel as chokes on #line directives.  */\n #undef CPP_SPEC\n-#define CPP_SPEC \"%{.S:-P} %(cpp_subtarget)\"\n+#define CPP_SPEC \"%{,assembler-with-cpp:-P} %(cpp_subtarget)\"\n \n /* FIXME: Removed -K PIC from generic Solaris 2 ASM_SPEC: the native assembler\n    gives many warnings: R_386_32 relocation is used for symbol \".text\".  */"}, {"sha": "23e387b21fccf5a9cb9d3cd52147f73de86d743e", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -122,9 +122,12 @@\n   \"%{!m64:%:version-compare(!> 10.4 mmacosx-version-min= crt2.o%s)}\"\n \n /* Determine a minimum version based on compiler options.  */\n-#define DARWIN_MINVERSION_SPEC\t\\\n-  \"%{m64:10.4;\t\t\t\\\n-     shared-libgcc:10.3;\t\\\n+#define DARWIN_MINVERSION_SPEC\t\t\t\t\t\\\n+  \"%{m64:%{fgnu-runtime:10.4;\t\t\t\t\t\\\n+\t   ,objective-c|,objc-cpp-output:10.5;\t\t\t\\\n+\t   ,objective-c++|,objective-c++-cpp-output:10.5;\t\\\n+\t   :10.4};\t\t\t\t\t\t\\\n+     shared-libgcc:10.3;\t\t\t\t\t\\\n      :10.1}\"\n \n #undef SUBTARGET_EXTRA_SPECS"}, {"sha": "00853fe34d7dc82ceca9a3c9d5fe6ed7026f4127", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -165,7 +165,7 @@ extern int dot_symbols;\n #define ASM_SPEC64 \"-a64\"\n \n #define ASM_SPEC_COMMON \"%(asm_cpu) \\\n-%{.s: %{mregnames} %{mno-regnames}} %{.S: %{mregnames} %{mno-regnames}} \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{Wa,*:%*} \\\n %{mlittle} %{mlittle-endian} %{mbig} %{mbig-endian}\"\n "}, {"sha": "0dbd747aab548af1f6d547061e10adeb5662400f", "filename": "gcc/config/rs6000/lynx.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Flynx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Flynx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flynx.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -54,8 +54,7 @@\n #undef ASM_SPEC\n #define ASM_SPEC \\\n \"%(asm_cpu) \\\n- %{.s: %{mregnames} %{mno-regnames}} \\\n- %{.S: %{mregnames} %{mno-regnames}}\"\n+ %{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}}\"\n \n #undef STARTFILE_SPEC\n #undef ENDFILE_SPEC"}, {"sha": "1aad6afe6d72c7d1b6cd6069af8ea32dafa66f3d", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -578,7 +578,7 @@ extern int fixuplabelno;\n /* Override svr4.h definition.  */\n #undef\tASM_SPEC\n #define\tASM_SPEC \"%(asm_cpu) \\\n-%{.s: %{mregnames} %{mno-regnames}} %{.S: %{mregnames} %{mno-regnames}} \\\n+%{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n %{v:-V} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n %{mrelocatable} %{mrelocatable-lib} %{fpic|fpie|fPIC|fPIE:-K PIC} \\\n %{memb|msdata|msdata=eabi: -memb} \\"}, {"sha": "2bd7872f8c3b05694bc6f7d1d205e3dac6dace36", "filename": "gcc/config/rs6000/vxworks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fconfig%2Frs6000%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvxworks.h?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -84,7 +84,7 @@ VXWORKS_ADDITIONAL_CPP_SPEC\n \n #define ASM_SPEC \\\n \"%(asm_cpu) \\\n- %{.s: %{mregnames} %{mno-regnames}} %{.S: %{mregnames} %{mno-regnames}} \\\n+ %{,assembler|,assembler-with-cpp: %{mregnames} %{mno-regnames}} \\\n  %{v:-v} %{Qy:} %{!Qn:-Qy} %{n} %{T} %{Ym,*} %{Yd,*} %{Wa,*:%*} \\\n  %{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} -mbig\"\n "}, {"sha": "878f04412299978066149926aad64c69c314895c", "filename": "gcc/gcc.c", "status": "modified", "additions": 56, "deletions": 46, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48137d59c3cf49628dee903213567c9556cb6adb/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=48137d59c3cf49628dee903213567c9556cb6adb", "patch": "@@ -516,15 +516,18 @@ or with constant text in a single argument.\n           part of that switch that matched the '*'.\n  %{.S:X}  substitutes X, if processing a file with suffix S.\n  %{!.S:X} substitutes X, if NOT processing a file with suffix S.\n-\n+ %{,S:X}  substitutes X, if processing a file which will use spec S.\n+ %{!,S:X} substitutes X, if NOT processing a file which will use spec S.\n+\t  \n  %{S|T:X} substitutes X if either -S or -T was given to CC.  This may be\n-\t  combined with !, ., and * as above binding stronger than the OR.\n+\t  combined with '!', '.', ',', and '*' as above binding stronger\n+\t  than the OR.\n \t  If %* appears in X, all of the alternatives must be starred, and\n \t  only the first matching alternative is substituted.\n  %{S:X;   if S was given to CC, substitutes X;\n    T:Y;   else if T was given to CC, substitutes Y;\n     :D}   else substitutes D.  There can be as many clauses as you need.\n-          This may be combined with ., !, |, and * as above.\n+          This may be combined with '.', '!', ',', '|', and '*' as above.\n \n  %(Spec) processes a specification defined in a specs file as *Spec:\n  %[Spec] as above, but put __ around -D arguments\n@@ -5529,27 +5532,24 @@ handle_spec_function (const char *p)\n static inline bool\n input_suffix_matches (const char *atom, const char *end_atom)\n {\n-  /* We special case the semantics of {.s:...} and {.S:...} and their\n-     negative variants.  Instead of testing the input filename suffix,\n-     we test whether the input source file is an assembler file or an\n-     assembler-with-cpp file respectively.  This allows us to correctly\n-     handle the -x command line option.  */\n-\n-  if (atom + 1 == end_atom\n-      && input_file_compiler\n-      && input_file_compiler->suffix)\n-    {\n-      if (*atom == 's')\n-\treturn !strcmp (input_file_compiler->suffix, \"@assembler\");\n-      if (*atom == 'S')\n-\treturn !strcmp (input_file_compiler->suffix, \"@assembler-with-cpp\");\n-    }\n-\n   return (input_suffix\n \t  && !strncmp (input_suffix, atom, end_atom - atom)\n \t  && input_suffix[end_atom - atom] == '\\0');\n }\n \n+/* Subroutine of handle_braces.  Returns true if the current\n+   input file's spec name matches the atom bracketed by ATOM and END_ATOM.  */\n+static bool\n+input_spec_matches (const char *atom, const char *end_atom)\n+{\n+  return (input_file_compiler\n+\t  && input_file_compiler->suffix\n+\t  && input_file_compiler->suffix[0] != '\\0'\n+\t  && !strncmp (input_file_compiler->suffix + 1, atom,\n+\t\t       end_atom - atom)\n+\t  && input_file_compiler->suffix[end_atom - atom + 1] == '\\0');\n+}\n+\n /* Subroutine of handle_braces.  Returns true if a switch\n    matching the atom bracketed by ATOM and END_ATOM appeared on the\n    command line.  */\n@@ -5613,6 +5613,7 @@ handle_braces (const char *p)\n   const char *orig = p;\n \n   bool a_is_suffix;\n+  bool a_is_spectype;\n   bool a_is_starred;\n   bool a_is_negated;\n   bool a_matched;\n@@ -5633,8 +5634,12 @@ handle_braces (const char *p)\n \tgoto invalid;\n \n       /* Scan one \"atom\" (S in the description above of %{}, possibly\n-\t with !, ., or * modifiers).  */\n-      a_matched = a_is_suffix = a_is_starred = a_is_negated = false;\n+\t with '!', '.', '@', ',', or '*' modifiers).  */\n+      a_matched = false;\n+      a_is_suffix = false;\n+      a_is_starred = false;\n+      a_is_negated = false;\n+      a_is_spectype = false;\n \n       SKIP_WHITE();\n       if (*p == '!')\n@@ -5643,6 +5648,8 @@ handle_braces (const char *p)\n       SKIP_WHITE();\n       if (*p == '.')\n \tp++, a_is_suffix = true;\n+      else if (*p == ',')\n+\tp++, a_is_spectype = true;\n \n       atom = p;\n       while (ISIDNUM(*p) || *p == '-' || *p == '+' || *p == '='\n@@ -5660,7 +5667,7 @@ handle_braces (const char *p)\n \t  /* Substitute the switch(es) indicated by the current atom.  */\n \t  ordered_set = true;\n \t  if (disjunct_set || n_way_choice || a_is_negated || a_is_suffix\n-\t      || atom == end_atom)\n+\t      || a_is_spectype || atom == end_atom)\n \t    goto invalid;\n \n \t  mark_matching_switches (atom, end_atom, a_is_starred);\n@@ -5679,7 +5686,8 @@ handle_braces (const char *p)\n \t  if (atom == end_atom)\n \t    {\n \t      if (!n_way_choice || disj_matched || *p == '|'\n-\t\t  || a_is_negated || a_is_suffix || a_is_starred)\n+\t\t  || a_is_negated || a_is_suffix || a_is_spectype \n+\t\t  || a_is_starred)\n \t\tgoto invalid;\n \n \t      /* An empty term may appear as the last choice of an\n@@ -5690,28 +5698,30 @@ handle_braces (const char *p)\n \t    }\n \t  else\n \t    {\n-\t       if (a_is_suffix && a_is_starred)\n-\t\t goto invalid;\n-\n-\t       if (!a_is_starred)\n-\t\t disj_starred = false;\n-\n-\t       /* Don't bother testing this atom if we already have a\n-                  match.  */\n-\t       if (!disj_matched && !n_way_matched)\n-\t\t {\n-\t\t   if (a_is_suffix)\n-\t\t     a_matched = input_suffix_matches (atom, end_atom);\n-\t\t   else\n-\t\t     a_matched = switch_matches (atom, end_atom, a_is_starred);\n-\n-\t\t   if (a_matched != a_is_negated)\n-\t\t     {\n-\t\t       disj_matched = true;\n-\t\t       d_atom = atom;\n-\t\t       d_end_atom = end_atom;\n-\t\t     }\n-\t\t }\n+\t      if ((a_is_suffix || a_is_spectype) && a_is_starred)\n+\t\tgoto invalid;\n+\t      \n+\t      if (!a_is_starred)\n+\t\tdisj_starred = false;\n+\n+\t      /* Don't bother testing this atom if we already have a\n+\t\t match.  */\n+\t      if (!disj_matched && !n_way_matched)\n+\t\t{\n+\t\t  if (a_is_suffix)\n+\t\t    a_matched = input_suffix_matches (atom, end_atom);\n+\t\t  else if (a_is_spectype)\n+\t\t    a_matched = input_spec_matches (atom, end_atom);\n+\t\t  else\n+\t\t    a_matched = switch_matches (atom, end_atom, a_is_starred);\n+\t\t  \n+\t\t  if (a_matched != a_is_negated)\n+\t\t    {\n+\t\t      disj_matched = true;\n+\t\t      d_atom = atom;\n+\t\t      d_end_atom = end_atom;\n+\t\t    }\n+\t\t}\n \t    }\n \n \t  if (*p == ':')\n@@ -6940,7 +6950,7 @@ validate_switches (const char *start)\n     p++;\n \n   SKIP_WHITE ();\n-  if (*p == '.')\n+  if (*p == '.' || *p == ',')\n     suffix = true, p++;\n \n   atom = p;"}]}