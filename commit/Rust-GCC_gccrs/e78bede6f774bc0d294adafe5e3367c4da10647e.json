{"sha": "e78bede6f774bc0d294adafe5e3367c4da10647e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc4YmVkZTZmNzc0YmMwZDI5NGFkYWZlNWUzMzY3YzRkYTEwNjQ3ZQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-11-11T14:47:03Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-11-11T14:47:03Z"}, "message": "re PR c/68107 (Non-VLA type whose size is half or more of the address space constructed via a pointer)\n\n\tPR c/68107\n\tPR c++/68266\n\t* c-common.c (valid_array_size_p): New function.\n\t* c-common.h (valid_array_size_p): Declare.\n\n\t* c-decl.c (grokdeclarator): Call valid_array_size_p.  Remove code\n\tchecking the size of an array.\n\n\t* decl.c (grokdeclarator): Call valid_array_size_p.  Remove code\n\tchecking the size of an array.\n\n\t* c-c++-common/pr68107.c: New test.\n\t* g++.dg/init/new38.C (large_array_char): Adjust dg-error.\n\t(large_array_char_template): Likewise.\n\t* g++.dg/init/new44.C: Adjust dg-error.\n\nFrom-SVN: r230174", "tree": {"sha": "48b3e7d70614879dd48b43b013beb7831d9ad8ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48b3e7d70614879dd48b43b013beb7831d9ad8ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e78bede6f774bc0d294adafe5e3367c4da10647e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78bede6f774bc0d294adafe5e3367c4da10647e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e78bede6f774bc0d294adafe5e3367c4da10647e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e78bede6f774bc0d294adafe5e3367c4da10647e/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a5b50aa1fb086c90dd0119f8cb9e0a88ea9cce58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b50aa1fb086c90dd0119f8cb9e0a88ea9cce58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b50aa1fb086c90dd0119f8cb9e0a88ea9cce58"}], "stats": {"total": 370, "additions": 219, "deletions": 151}, "files": [{"sha": "eb4d5bfbae20ac9cc799abf8f8bf3792401efa69", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -1,3 +1,10 @@\n+2015-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68107\n+\tPR c++/68266\n+\t* c-common.c (valid_array_size_p): New function.\n+\t* c-common.h (valid_array_size_p): Declare.\n+\n 2015-11-11  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR bootstrap/68271"}, {"sha": "6e2ce0a736cc429d762ef4fc91ffa7be60735ab0", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -13107,4 +13107,26 @@ warn_duplicated_cond_add_or_warn (location_t loc, tree cond, vec<tree> **chain)\n     (*chain)->safe_push (cond);\n }\n \n+/* Check if array size calculations overflow or if the array covers more\n+   than half of the address space.  Return true if the size of the array\n+   is valid, false otherwise.  TYPE is the type of the array and NAME is\n+   the name of the array, or NULL_TREE for unnamed arrays.  */\n+\n+bool\n+valid_array_size_p (location_t loc, tree type, tree name)\n+{\n+  if (type != error_mark_node\n+      && COMPLETE_TYPE_P (type)\n+      && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST\n+      && !valid_constant_size_p (TYPE_SIZE_UNIT (type)))\n+    {\n+      if (name)\n+\terror_at (loc, \"size of array %qE is too large\", name);\n+      else\n+\terror_at (loc, \"size of unnamed array is too large\");\n+      return false;\n+    }\n+  return true;\n+}\n+\n #include \"gt-c-family-c-common.h\""}, {"sha": "bad8d05e620ebf9e19daa521c3a2ffbd20a3be7e", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -1463,5 +1463,6 @@ extern bool check_no_cilk (tree, const char *, const char *,\n \t\t           location_t loc = UNKNOWN_LOCATION);\n extern bool reject_gcc_builtin (const_tree, location_t = UNKNOWN_LOCATION);\n extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);\n+extern bool valid_array_size_p (location_t, tree, tree);\n \n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "87f6a2d30e3b9a80eb9049f65d2dee74c3b4224d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -1,3 +1,10 @@\n+2015-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68107\n+\tPR c++/68266\n+\t* c-decl.c (grokdeclarator): Call valid_array_size_p.  Remove code\n+\tchecking the size of an array.\n+\n 2015-11-11  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* c-array-notation.c: Remove unused header files."}, {"sha": "a636474862d6e866a3c848612001663d4716e037", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -6000,14 +6000,18 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t    TYPE_SIZE_UNIT (type) = size_zero_node;\n \t\t    SET_TYPE_STRUCTURAL_EQUALITY (type);\n \t\t  }\n+\n+\t\tif (!valid_array_size_p (loc, type, name))\n+\t\t  type = error_mark_node;\n \t      }\n \n \t    if (decl_context != PARM\n \t\t&& (array_ptr_quals != TYPE_UNQUALIFIED\n \t\t    || array_ptr_attrs != NULL_TREE\n \t\t    || array_parm_static))\n \t      {\n-\t\terror_at (loc, \"static or type qualifiers in non-parameter array declarator\");\n+\t\terror_at (loc, \"static or type qualifiers in non-parameter \"\n+\t\t\t  \"array declarator\");\n \t\tarray_ptr_quals = TYPE_UNQUALIFIED;\n \t\tarray_ptr_attrs = NULL_TREE;\n \t\tarray_parm_static = 0;\n@@ -6286,22 +6290,6 @@ grokdeclarator (const struct c_declarator *declarator,\n \t}\n     }\n \n-  /* Did array size calculations overflow or does the array cover more\n-     than half of the address-space?  */\n-  if (TREE_CODE (type) == ARRAY_TYPE\n-      && COMPLETE_TYPE_P (type)\n-      && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST\n-      && ! valid_constant_size_p (TYPE_SIZE_UNIT (type)))\n-    {\n-      if (name)\n-\terror_at (loc, \"size of array %qE is too large\", name);\n-      else\n-\terror_at (loc, \"size of unnamed array is too large\");\n-      /* If we proceed with the array type as it is, we'll eventually\n-\t crash in tree_to_[su]hwi().  */\n-      type = error_mark_node;\n-    }\n-\n   /* If this is declaring a typedef name, return a TYPE_DECL.  */\n \n   if (storage_class == csc_typedef)"}, {"sha": "62992eef6ef1d3bdb9899f3a2e49871daafcf59d", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -1,3 +1,10 @@\n+2015-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68107\n+\tPR c++/68266\n+\t* decl.c (grokdeclarator): Call valid_array_size_p.  Remove code\n+\tchecking the size of an array.\n+\n 2015-11-11  Dominique d'Humieres <dominiq@lps.ens.fr>\n \n \tPR bootstrap/68271"}, {"sha": "76cc1d176e54dcc7b5dd67342bd36fa56b704725", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -9939,6 +9939,9 @@ grokdeclarator (const cp_declarator *declarator,\n \tcase cdk_array:\n \t  type = create_array_type_for_decl (dname, type,\n \t\t\t\t\t     declarator->u.array.bounds);\n+\t  if (!valid_array_size_p (input_location, type, dname))\n+\t    type = error_mark_node;\n+\n \t  if (declarator->std_attributes)\n \t    /* [dcl.array]/1:\n \n@@ -10502,19 +10505,6 @@ grokdeclarator (const cp_declarator *declarator,\n         error (\"non-parameter %qs cannot be a parameter pack\", name);\n     }\n \n-  /* Did array size calculations overflow or does the array cover more\n-     than half of the address-space?  */\n-  if (TREE_CODE (type) == ARRAY_TYPE\n-      && COMPLETE_TYPE_P (type)\n-      && TREE_CODE (TYPE_SIZE_UNIT (type)) == INTEGER_CST\n-      && ! valid_constant_size_p (TYPE_SIZE_UNIT (type)))\n-    {\n-      error (\"size of array %qs is too large\", name);\n-      /* If we proceed with the array type as it is, we'll eventually\n-\t crash in tree_to_[su]hwi().  */\n-      type = error_mark_node;\n-    }\n-\n   if ((decl_context == FIELD || decl_context == PARM)\n       && !processing_template_decl\n       && variably_modified_type_p (type, NULL_TREE))"}, {"sha": "8e973115215e62c2503d2a5dca8073d01c995cb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -1,3 +1,12 @@\n+2015-11-11  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/68107\n+\tPR c++/68266\n+\t* c-c++-common/pr68107.c: New test.\n+\t* g++.dg/init/new38.C (large_array_char): Adjust dg-error.\n+\t(large_array_char_template): Likewise.\n+\t* g++.dg/init/new44.C: Adjust dg-error.\n+\n 2015-11-11  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* gfortran.dg/goacc/private-3.f95: Remove xfail."}, {"sha": "f1ed465e078702d4149a7e3e8fafffb462054374", "filename": "gcc/testsuite/c-c++-common/pr68107.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr68107.c?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -0,0 +1,37 @@\n+/* PR c/68107 */\n+/* { dg-do compile } */\n+\n+#define N ((__SIZE_MAX__ / sizeof (int)) / 2 + 1)\n+\n+typedef int (*T1)[N]; /* { dg-error \"too large\" } */\n+typedef int (*T2)[N - 1];\n+typedef int (*T3)[N][N]; /* { dg-error \"too large\" } */\n+typedef int (*T4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n+typedef int (**T5)[N]; /* { dg-error \"too large\" } */\n+\n+struct S {\n+  int (*q1)[N]; /* { dg-error \"too large\" } */\n+  int (*q2)[N - 1];\n+  int (*q3)[N][N]; /* { dg-error \"too large\" } */\n+  int (*q4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n+  int (**q5)[N]; /* { dg-error \"too large\" } */\n+};\n+\n+void fn1 (int (*p1)[N]); /* { dg-error \"too large\" } */\n+void fn2 (int (*p1)[N - 1]);\n+void fn3 (int (*p3)[N][N]); /* { dg-error \"too large\" } */\n+void fn4 (int (*p4)[N - 1][N - 1]); /* { dg-error \"too large\" } */\n+void fn5 (int (**p5)[N]); /* { dg-error \"too large\" } */\n+\n+void\n+fn (void)\n+{\n+  int (*n1)[N]; /* { dg-error \"too large\" } */\n+  int (*n2)[N - 1];\n+  int (*n3)[N][N]; /* { dg-error \"too large\" } */\n+  int (*n4)[N - 1][N - 1]; /* { dg-error \"too large\" } */\n+  int (**n5)[N]; /* { dg-error \"too large\" } */\n+\n+  sizeof (int (*)[N]); /* { dg-error \"too large\" } */\n+  sizeof (int [N]); /* { dg-error \"too large\" } */\n+}"}, {"sha": "37da525bf7811aeed197038bf7494a9688f18f1e", "filename": "gcc/testsuite/g++.dg/init/new38.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew38.C?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -5,7 +5,7 @@ large_array_char(int n)\n {\n   new char[n]\n     [1ULL << (sizeof(void *) * 4)]\n-    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of array\" }\n+    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of unnamed array\" }\n }\n \n template <typename T>\n@@ -14,7 +14,7 @@ large_array_char_template(int n)\n {\n   new char[n]\n     [1ULL << (sizeof(void *) * 4)]\n-    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of array\" }\n+    [1ULL << (sizeof(void *) * 4)]; // { dg-error \"size of unnamed array\" }\n }\n \n "}, {"sha": "ab6e3484cc8989b098af5d556804db849da58a37", "filename": "gcc/testsuite/g++.dg/init/new44.C", "status": "modified", "additions": 119, "deletions": 119, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e78bede6f774bc0d294adafe5e3367c4da10647e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew44.C?ref=e78bede6f774bc0d294adafe5e3367c4da10647e", "patch": "@@ -87,10 +87,10 @@ test_one_dim_short_array ()\n static void __attribute__ ((used))\n test_two_dim_char_array ()\n {\n-    p = new char [1][MAX];              // { dg-error \"size of array\" }\n-    p = new char [1][MAX - 1];          // { dg-error \"size of array\" }\n-    p = new char [1][MAX - 2];          // { dg-error \"size of array\" }\n-    p = new char [1][MAX - 99];         // { dg-error \"size of array\" }\n+    p = new char [1][MAX];              // { dg-error \"size of unnamed array\" }\n+    p = new char [1][MAX - 1];          // { dg-error \"size of unnamed array\" }\n+    p = new char [1][MAX - 2];          // { dg-error \"size of unnamed array\" }\n+    p = new char [1][MAX - 99];         // { dg-error \"size of unnamed array\" }\n     p = new char [1][MAX / 2];          // { dg-error \"size of array\" }\n     p = new char [1][MAX / 2 - 1];      // { dg-error \"size of array\" }\n     p = new char [1][MAX / 2 - 2];      // { dg-error \"size of array\" }\n@@ -104,18 +104,18 @@ test_two_dim_char_array ()\n     p = new char [1][MAX / 2 - 7];      // okay\n     p = new char [1][MAX / 2 - 8];      // okay\n \n-    p = new char [2][MAX];              // { dg-error \"size of array\" }\n-    p = new char [2][MAX - 1];          // { dg-error \"size of array\" }\n-    p = new char [2][MAX - 2];          // { dg-error \"size of array\" }\n+    p = new char [2][MAX];              // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX - 1];          // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX - 2];          // { dg-error \"size of unnamed array\" }\n     p = new char [2][MAX / 2];          // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 1];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 2];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 7];      // { dg-error \"size of array\" }\n     p = new char [2][MAX / 2 - 8];      // { dg-error \"size of array\" }\n \n-    p = new char [MAX][MAX];            // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX - 1];        // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX - 2];        // { dg-error \"size of array\" }\n+    p = new char [MAX][MAX];            // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX - 1];        // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX - 2];        // { dg-error \"size of unnamed array\" }\n     p = new char [MAX][MAX / 2];        // { dg-error \"size of array\" }\n     p = new char [MAX][MAX / 2 - 1];    // { dg-error \"size of array\" }\n     p = new char [MAX][MAX / 2 - 2];    // { dg-error \"size of array\" }\n@@ -142,10 +142,10 @@ test_two_dim_char_array ()\n static __attribute__ ((used)) void\n test_three_dim_char_array ()\n {\n-    p = new char [1][1][MAX];           // { dg-error \"size of array\" }\n-    p = new char [1][1][MAX - 1];       // { dg-error \"size of array\" }\n-    p = new char [1][1][MAX - 2];       // { dg-error \"size of array\" }\n-    p = new char [1][1][MAX - 99];      // { dg-error \"size of array\" }\n+    p = new char [1][1][MAX];           // { dg-error \"size of unnamed array\" }\n+    p = new char [1][1][MAX - 1];       // { dg-error \"size of unnamed array\" }\n+    p = new char [1][1][MAX - 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [1][1][MAX - 99];      // { dg-error \"size of unnamed array\" }\n     p = new char [1][1][MAX / 2];       // { dg-error \"size of array\" }\n     p = new char [1][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new char [1][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -159,19 +159,19 @@ test_three_dim_char_array ()\n     p = new char [1][1][MAX / 2 - 7];   // okay\n     p = new char [1][1][MAX / 2 - 8];   // okay\n \n-    p = new char [1][2][MAX];           // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX - 1];       // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX - 2];       // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX - 99];      // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2];       // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size of array\" }\n-    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size of array\" }\n+    p = new char [1][2][MAX];           // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX - 1];       // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX - 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX - 99];      // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 1];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 3];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 4];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 5];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 6];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 7];   // { dg-error \"size of unnamed array\" }\n+    p = new char [1][2][MAX / 2 - 8];   // { dg-error \"size of unnamed array\" }\n     p = new char [1][2][MAX / 4];       // { dg-error \"size of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n@@ -181,10 +181,10 @@ test_three_dim_char_array ()\n     p = new char [1][2][MAX / 4 - 3];   // okay\n     p = new char [1][2][MAX / 4 - 4];   // okay\n \n-    p = new char [2][1][MAX];           // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX - 1];       // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX - 2];       // { dg-error \"size of array\" }\n-    p = new char [2][1][MAX - 99];      // { dg-error \"size of array\" }\n+    p = new char [2][1][MAX];           // { dg-error \"size of unnamed array\" }\n+    p = new char [2][1][MAX - 1];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][1][MAX - 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][1][MAX - 99];      // { dg-error \"size of unnamed array\" }\n     p = new char [2][1][MAX / 2];       // { dg-error \"size of array\" }\n     p = new char [2][1][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new char [2][1][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -203,19 +203,19 @@ test_three_dim_char_array ()\n     p = new char [2][1][MAX / 4 - 3];   // okay\n     p = new char [2][1][MAX / 4 - 4];   // okay\n \n-    p = new char [2][2][MAX];           // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX - 1];       // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX - 2];       // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX - 99];      // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2];       // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size of array\" }\n-    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size of array\" }\n+    p = new char [2][2][MAX];           // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX - 1];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX - 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX - 99];      // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 1];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 3];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 4];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 5];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 6];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 7];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][2][MAX / 2 - 8];   // { dg-error \"size of unnamed array\" }\n     p = new char [2][2][MAX / 4];       // { dg-error \"size of array\" }\n     p = new char [2][2][MAX / 4 - 1];   // { dg-error \"size of array\" }\n     p = new char [2][2][MAX / 4 - 2];   // { dg-error \"size of array\" }\n@@ -227,19 +227,19 @@ test_three_dim_char_array ()\n     p = new char [2][2][MAX / 8 - 2];\n     p = new char [2][2][MAX / 8 - 3];\n \n-    p = new char [2][MAX][2];           // { dg-error \"size of array\" }\n-    p = new char [2][MAX - 1][2];       // { dg-error \"size of array\" }\n-    p = new char [2][MAX - 2][2];       // { dg-error \"size of array\" }\n-    p = new char [2][MAX - 99][2];      // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2][2];       // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size of array\" }\n-    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size of array\" }\n+    p = new char [2][MAX][2];           // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX - 1][2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX - 2][2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX - 99][2];      // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2][2];       // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 1][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 2][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 3][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 4][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 5][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 6][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 7][2];   // { dg-error \"size of unnamed array\" }\n+    p = new char [2][MAX / 2 - 8][2];   // { dg-error \"size of unnamed array\" }\n     p = new char [2][MAX / 4][2];       // { dg-error \"size of array\" }\n     p = new char [2][MAX / 4 - 1][2];   // { dg-error \"size of array\" }\n     p = new char [2][MAX / 4 - 2][2];   // { dg-error \"size of array\" }\n@@ -275,11 +275,11 @@ test_three_dim_char_array ()\n     p = new char [MAX / 8 - 2][2][2];\n     p = new char [MAX / 8 - 3][2][2];\n \n-    p = new char [MAX][MAX][MAX];         // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size of array\" }\n-    p = new char [MAX][MAX / 2][MAX / 2]; // { dg-error \"size of array\" }\n-    p = new char [MAX / 2][MAX / 2][MAX / 2]; // { dg-error \"size of array\" }\n+    p = new char [MAX][MAX][MAX];         // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX][MAX / 2];     // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX / 2][MAX];     // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX][MAX / 2][MAX / 2]; // { dg-error \"size of unnamed array\" }\n+    p = new char [MAX / 2][MAX / 2][MAX / 2]; // { dg-error \"size of unnamed array\" }\n }\n \n // Exercise new expression with N-dimensional arrays where N is\n@@ -342,10 +342,10 @@ test_one_dim_byte_array (void *p)\n static void __attribute__ ((used))\n test_placement_two_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][MAX];             // { dg-error \"size of array\" }\n-    p = new (p) B [1][MAX - 1];         // { dg-error \"size of array\" }\n-    p = new (p) B [1][MAX - 2];         // { dg-error \"size of array\" }\n-    p = new (p) B [1][MAX - 99];        // { dg-error \"size of array\" }\n+    p = new (p) B [1][MAX];             // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][MAX - 1];         // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][MAX - 2];         // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][MAX - 99];        // { dg-error \"size of unnamed array\" }\n     p = new (p) B [1][MAX / 2];         // { dg-error \"size of array\" }\n     p = new (p) B [1][MAX / 2 - 1];     // { dg-error \"size of array\" }\n     p = new (p) B [1][MAX / 2 - 2];     // { dg-error \"size of array\" }\n@@ -359,18 +359,18 @@ test_placement_two_dim_byte_struct_array (void *p)\n     p = new (p) B [1][MAX / 2 - 7];      // okay\n     p = new (p) B [1][MAX / 2 - 8];      // okay\n \n-    p = new (p) B [2][MAX];             // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX - 1];         // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX - 2];         // { dg-error \"size of array\" }\n+    p = new (p) B [2][MAX];             // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX - 1];         // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX - 2];         // { dg-error \"size of unnamed array\" }\n     p = new (p) B [2][MAX / 2];         // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 1];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 2];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 7];     // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 2 - 8];     // { dg-error \"size of array\" }\n \n-    p = new (p) B [MAX][MAX];           // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size of array\" }\n-    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size of array\" }\n+    p = new (p) B [MAX][MAX];           // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [MAX][MAX - 1];       // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [MAX][MAX - 2];       // { dg-error \"size of unnamed array\" }\n     p = new (p) B [MAX][MAX / 2];       // { dg-error \"size of array\" }\n     p = new (p) B [MAX][MAX / 2 - 1];   // { dg-error \"size of array\" }\n     p = new (p) B [MAX][MAX / 2 - 2];   // { dg-error \"size of array\" }\n@@ -397,10 +397,10 @@ test_placement_two_dim_byte_struct_array (void *p)\n static __attribute__ ((used)) void\n test_placement_three_dim_byte_struct_array (void *p)\n {\n-    p = new (p) B [1][1][MAX];          // { dg-error \"size of array\" }\n-    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size of array\" }\n+    p = new (p) B [1][1][MAX];          // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][1][MAX - 1];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][1][MAX - 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][1][MAX - 99];     // { dg-error \"size of unnamed array\" }\n     p = new (p) B [1][1][MAX / 2];      // { dg-error \"size of array\" }\n     p = new (p) B [1][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [1][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n@@ -414,19 +414,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][1][MAX / 2 - 7];   // okay\n     p = new (p) B [1][1][MAX / 2 - 8];   // okay\n \n-    p = new (p) B [1][2][MAX];          // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size of array\" }\n-    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size of array\" }\n+    p = new (p) B [1][2][MAX];          // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX - 1];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX - 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX - 99];     // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 1];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 3];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 4];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 5];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 6];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 7];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [1][2][MAX / 2 - 8];  // { dg-error \"size of unnamed array\" }\n     p = new (p) B [1][2][MAX / 4];      // { dg-error \"size of array\" }\n \n     // Avoid exercising data model-dependent expressions.\n@@ -436,10 +436,10 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [1][2][MAX / 4 - 3];   // okay\n     p = new (p) B [1][2][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][1][MAX];          // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size of array\" }\n+    p = new (p) B [2][1][MAX];          // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][1][MAX - 1];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][1][MAX - 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][1][MAX - 99];     // { dg-error \"size of unnamed array\" }\n     p = new (p) B [2][1][MAX / 2];      // { dg-error \"size of array\" }\n     p = new (p) B [2][1][MAX / 2 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [2][1][MAX / 2 - 2];  // { dg-error \"size of array\" }\n@@ -458,19 +458,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][1][MAX / 4 - 3];   // okay\n     p = new (p) B [2][1][MAX / 4 - 4];   // okay\n \n-    p = new (p) B [2][2][MAX];          // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size of array\" }\n+    p = new (p) B [2][2][MAX];          // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX - 1];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX - 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX - 99];     // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 1];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 3];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 4];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 5];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 6];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 7];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][2][MAX / 2 - 8];  // { dg-error \"size of unnamed array\" }\n     p = new (p) B [2][2][MAX / 4];      // { dg-error \"size of array\" }\n     p = new (p) B [2][2][MAX / 4 - 1];  // { dg-error \"size of array\" }\n     p = new (p) B [2][2][MAX / 4 - 2];  // { dg-error \"size of array\" }\n@@ -482,19 +482,19 @@ test_placement_three_dim_byte_struct_array (void *p)\n     p = new (p) B [2][2][MAX / 8 - 2];\n     p = new (p) B [2][2][MAX / 8 - 3];\n \n-    p = new (p) B [2][MAX][2];          // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size of array\" }\n-    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size of array\" }\n+    p = new (p) B [2][MAX][2];          // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX - 1][2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX - 2][2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX - 99][2];     // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2][2];      // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 1][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 2][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 3][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 4][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 5][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 6][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 7][2];  // { dg-error \"size of unnamed array\" }\n+    p = new (p) B [2][MAX / 2 - 8][2];  // { dg-error \"size of unnamed array\" }\n     p = new (p) B [2][MAX / 4][2];      // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 4 - 1][2];  // { dg-error \"size of array\" }\n     p = new (p) B [2][MAX / 4 - 2][2];  // { dg-error \"size of array\" }"}]}