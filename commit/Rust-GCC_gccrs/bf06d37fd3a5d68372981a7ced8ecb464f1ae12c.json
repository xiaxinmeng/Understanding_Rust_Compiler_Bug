{"sha": "bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmYwNmQzN2ZkM2E1ZDY4MzcyOTgxYTdjZWQ4ZWNiNDY0ZjFhZTEyYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:14:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:14:40Z"}, "message": "[multiple changes]\n\n2009-04-20  Jerome Lambourg  <lambourg@adacore.com>\n\n\t* impunit.adb: Add i-cil and i-cilobj packages, now needed by the\n\tgenerated bindings for cil.\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_aggr.adb (Resolve_Record_Aggregate): If the type has unknown\n\tdiscriminants, collect components from the Underlying_Record_View,\n\twhich will be used in the expansion of the aggregate into assignments.\n\n\t* sem_ch3.adb: Do not label derived type with unknown discriminants as\n\thaving a private declaration.\n\nFrom-SVN: r146415", "tree": {"sha": "8b124c5fe5eadf9ecad86541f6d147274856a29c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b124c5fe5eadf9ecad86541f6d147274856a29c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/comments", "author": null, "committer": null, "parents": [{"sha": "58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58a9d876fccd9c28dd4d5eb346cd2c695a3406fc"}], "stats": {"total": 46, "additions": 40, "deletions": 6}, "files": [{"sha": "6a2a01201ffd3ea13fd3de57c7fe8b4185cb912d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "patch": "@@ -1,3 +1,17 @@\n+2009-04-20  Jerome Lambourg  <lambourg@adacore.com>\n+\n+\t* impunit.adb: Add i-cil and i-cilobj packages, now needed by the\n+\tgenerated bindings for cil.\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_aggr.adb (Resolve_Record_Aggregate): If the type has unknown\n+\tdiscriminants, collect components from the Underlying_Record_View,\n+\twhich will be used in the expansion of the aggregate into assignments.\n+\n+\t* sem_ch3.adb: Do not label derived type with unknown discriminants as\n+\thaving a private declaration.\n+\n 2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_util.adb (Expand_Subtype_From_Expr): use the"}, {"sha": "4c308baeea5d7fdbed00d7dd4a2e01331c4d774d", "filename": "gcc/ada/impunit.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fimpunit.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fimpunit.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fimpunit.adb?ref=bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "patch": "@@ -300,6 +300,8 @@ package body Impunit is\n    ------------------------------------------\n \n      \"i-cexten\",    -- Interfaces.C.Extensions\n+     \"i-cil   \",    -- Interfaces.CIL\n+     \"i-cilobj\",    -- Interfaces.CIL.Object\n      \"i-cpp   \",    -- Interfaces.CPP\n      \"i-cstrea\",    -- Interfaces.C.Streams\n      \"i-java  \",    -- Interfaces.Java"}, {"sha": "2e7ba8ee63b2bc53d1a1467dac5aed644e86b095", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "patch": "@@ -3100,11 +3100,22 @@ package body Sem_Aggr is\n                end if;\n             end loop;\n \n-            --  Now collect components from all other ancestors\n+            --  Now collect components from all other ancestors, beginning\n+            --  with the current type. If the type has unknown discriminants\n+            --  use the component list of the underlying_record_view, which\n+            --  needs to be used for the subsequent expansion of the aggregate\n+            --  into assignments.\n \n             Parent_Elmt := First_Elmt (Parent_Typ_List);\n             while Present (Parent_Elmt) loop\n                Parent_Typ := Node (Parent_Elmt);\n+\n+               if Has_Unknown_Discriminants (Parent_Typ)\n+                 and then Present (Underlying_Record_View (Typ))\n+               then\n+                  Parent_Typ := Underlying_Record_View (Parent_Typ);\n+               end if;\n+\n                Record_Def := Type_Definition (Parent (Base_Type (Parent_Typ)));\n                Gather_Components (Empty,\n                  Component_List (Record_Extension_Part (Record_Def)),\n@@ -3120,12 +3131,21 @@ package body Sem_Aggr is\n \n             if Null_Present (Record_Def) then\n                null;\n-            else\n+\n+            elsif not Has_Unknown_Discriminants (Typ) then\n                Gather_Components (Base_Type (Typ),\n                  Component_List (Record_Def),\n                  Governed_By   => New_Assoc_List,\n                  Into          => Components,\n                  Report_Errors => Errors_Found);\n+\n+            else\n+               Gather_Components\n+                 (Base_Type (Underlying_Record_View (Typ)),\n+                 Component_List (Record_Def),\n+                 Governed_By   => New_Assoc_List,\n+                 Into          => Components,\n+                 Report_Errors => Errors_Found);\n             end if;\n          end if;\n "}, {"sha": "be87d0c87935e7d5d0e052e93ef5bbccdde1866d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf06d37fd3a5d68372981a7ced8ecb464f1ae12c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=bf06d37fd3a5d68372981a7ced8ecb464f1ae12c", "patch": "@@ -5557,7 +5557,8 @@ package body Sem_Ch3 is\n                  (N, Parent_Type, Derived_Type, Derive_Subps);\n \n                --  Build anonymous completion, as a derivation from the full\n-               --  view of the parent.\n+               --  view of the parent. This is not a completion in the usual\n+               --  sense, because the current type is not private.\n \n                Decl :=\n                  Make_Full_Type_Declaration (Loc,\n@@ -5569,9 +5570,6 @@ package body Sem_Ch3 is\n                            (Subtype_Indication (Type_Definition (N))),\n                        Record_Extension_Part => New_Ext));\n \n-               Set_Has_Private_Declaration (Full_Der);\n-               Set_Has_Private_Declaration (Derived_Type);\n-\n                --  If the parent type has an underlying record view, use it\n                --  here to build the new underlying record view.\n "}]}