{"sha": "8c6812476a028328a11c68079d1714c9f81b6279", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGM2ODEyNDc2YTAyODMyOGExMWM2ODA3OWQxNzE0YzlmODFiNjI3OQ==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2016-07-13T02:44:52Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2016-07-13T02:44:52Z"}, "message": "use auto_vec for more local variables\n\ngcc/c/ChangeLog:\n\n2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* c-parser.c (c_parser_generic_selection): Make type of variable\n\tauto_vec.\n\t(c_parser_omp_declare_simd): Likewise.\n\ngcc/ChangeLog:\n\n2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* cfgexpand.c (expand_used_vars): Make the type of a local variable auto_vec.\n\t* genmatch.c (lower_for): Likewise.\n\t* haifa-sched.c (haifa_sched_init): Likewise.\n\t(add_to_speculative_block): Likewise.\n\t(create_check_block_twin): Likewise.\n\t* predict.c (handle_missing_profiles): Likewise.\n\t* tree-data-ref.c (loop_nest_has_data_refs): Likewise.\n\t* tree-diagnostic.c (maybe_unwind_expanded_macro_loc): Likewise.\n\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk): Likewise.\n\t(maybe_lower_iteration_bound): Likewise.\n\t* tree-ssa-sccvn.c (DFS): Likewise.\n\t* tree-stdarg.c (reachable_at_most_once): Likewise.\n\t* tree-vect-stmts.c (vectorizable_conversion): Likewise.\n\t(vectorizable_store): Likewise.\n\nFrom-SVN: r238285", "tree": {"sha": "b23b2bc969495367f8ea5f18416b898c1494be56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23b2bc969495367f8ea5f18416b898c1494be56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c6812476a028328a11c68079d1714c9f81b6279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6812476a028328a11c68079d1714c9f81b6279", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c6812476a028328a11c68079d1714c9f81b6279", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c6812476a028328a11c68079d1714c9f81b6279/comments", "author": null, "committer": null, "parents": [{"sha": "fcd215916e0991815853999267824defe1963379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcd215916e0991815853999267824defe1963379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcd215916e0991815853999267824defe1963379"}], "stats": {"total": 121, "additions": 50, "deletions": 71}, "files": [{"sha": "3a1fc40628a9da297a436cdaad8a47bd82a0a9da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -1,3 +1,20 @@\n+2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* cfgexpand.c (expand_used_vars): Make the type of a local variable auto_vec.\n+\t* genmatch.c (lower_for): Likewise.\n+\t* haifa-sched.c (haifa_sched_init): Likewise.\n+\t(add_to_speculative_block): Likewise.\n+\t(create_check_block_twin): Likewise.\n+\t* predict.c (handle_missing_profiles): Likewise.\n+\t* tree-data-ref.c (loop_nest_has_data_refs): Likewise.\n+\t* tree-diagnostic.c (maybe_unwind_expanded_macro_loc): Likewise.\n+\t* tree-ssa-loop-niter.c (discover_iteration_bound_by_body_walk): Likewise.\n+\t(maybe_lower_iteration_bound): Likewise.\n+\t* tree-ssa-sccvn.c (DFS): Likewise.\n+\t* tree-stdarg.c (reachable_at_most_once): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_conversion): Likewise.\n+\t(vectorizable_store): Likewise.\n+\n 2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* tree-ssa-sccvn.c (sccvn_dom_walker::~sccvn_dom_walker): remove."}, {"sha": "96dbf6b922cee58b007a12ccb2c66ee90b9e73cd", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -1,3 +1,9 @@\n+2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* c-parser.c (c_parser_generic_selection): Make type of variable\n+\tauto_vec.\n+\t(c_parser_omp_declare_simd): Likewise.\n+\n 2016-07-12  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* c-decl.c (struct c_struct_parse_info): Change member types"}, {"sha": "8fb4e4dd14f0426268d065598a080825b1f45dec", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -7243,7 +7243,6 @@ struct c_generic_association\n static struct c_expr\n c_parser_generic_selection (c_parser *parser)\n {\n-  vec<c_generic_association> associations = vNULL;\n   struct c_expr selector, error_expr;\n   tree selector_type;\n   struct c_generic_association matched_assoc;\n@@ -7300,6 +7299,7 @@ c_parser_generic_selection (c_parser *parser)\n       return error_expr;\n     }\n \n+  auto_vec<c_generic_association> associations;\n   while (1)\n     {\n       struct c_generic_association assoc, *iter;\n@@ -7320,13 +7320,13 @@ c_parser_generic_selection (c_parser *parser)\n \t  if (type_name == NULL)\n \t    {\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      goto error_exit;\n+\t      return error_expr;\n \t    }\n \t  assoc.type = groktypename (type_name, NULL, NULL);\n \t  if (assoc.type == error_mark_node)\n \t    {\n \t      c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t      goto error_exit;\n+\t      return error_expr;\n \t    }\n \n \t  if (TREE_CODE (assoc.type) == FUNCTION_TYPE)\n@@ -7345,14 +7345,14 @@ c_parser_generic_selection (c_parser *parser)\n       if (!c_parser_require (parser, CPP_COLON, \"expected %<:%>\"))\n \t{\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t  goto error_exit;\n+\t  return error_expr;\n \t}\n \n       assoc.expression = c_parser_expr_no_commas (parser, NULL);\n       if (assoc.expression.value == error_mark_node)\n \t{\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n-\t  goto error_exit;\n+\t  return error_expr;\n \t}\n \n       for (ix = 0; associations.iterate (ix, &iter); ++ix)\n@@ -7408,8 +7408,6 @@ c_parser_generic_selection (c_parser *parser)\n       c_parser_consume_token (parser);\n     }\n \n-  associations.release ();\n-\n   if (!c_parser_require (parser, CPP_CLOSE_PAREN, \"expected %<)%>\"))\n     {\n       c_parser_skip_until_found (parser, CPP_CLOSE_PAREN, NULL);\n@@ -7425,10 +7423,6 @@ c_parser_generic_selection (c_parser *parser)\n     }\n \n   return matched_assoc.expression;\n-\n- error_exit:\n-  associations.release ();\n-  return error_expr;\n }\n \n /* Parse a postfix expression (C90 6.3.1-6.3.2, C99 6.5.1-6.5.2).\n@@ -16366,14 +16360,13 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context, bool *if_p)\n static void\n c_parser_omp_declare_simd (c_parser *parser, enum pragma_context context)\n {\n-  vec<c_token> clauses = vNULL;\n+  auto_vec<c_token> clauses;\n   while (c_parser_next_token_is_not (parser, CPP_PRAGMA_EOL))\n     {\n       c_token *token = c_parser_peek_token (parser);\n       if (token->type == CPP_EOF)\n \t{\n \t  c_parser_skip_to_pragma_eol (parser);\n-\t  clauses.release ();\n \t  return;\n \t}\n       clauses.safe_push (*token);\n@@ -16395,7 +16388,6 @@ c_parser_omp_declare_simd (c_parser *parser, enum pragma_context context)\n \t\t\t  \"%<#pragma omp declare simd%> must be followed by \"\n \t\t\t  \"function declaration or definition or another \"\n \t\t\t  \"%<#pragma omp declare simd%>\");\n-\t  clauses.release ();\n \t  return;\n \t}\n       c_parser_consume_pragma (parser);\n@@ -16405,7 +16397,6 @@ c_parser_omp_declare_simd (c_parser *parser, enum pragma_context context)\n \t  if (token->type == CPP_EOF)\n \t    {\n \t      c_parser_skip_to_pragma_eol (parser);\n-\t      clauses.release ();\n \t      return;\n \t    }\n \t  clauses.safe_push (*token);\n@@ -16477,7 +16468,6 @@ c_parser_omp_declare_simd (c_parser *parser, enum pragma_context context)\n     default:\n       gcc_unreachable ();\n     }\n-  clauses.release ();\n }\n \n /* Finalize #pragma omp declare simd clauses after FNDECL has been parsed,"}, {"sha": "984ac4a0f2278ecc65d197ca6fd71051f9df2f16", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -2012,7 +2012,7 @@ static rtx_insn *\n expand_used_vars (void)\n {\n   tree var, outer_block = DECL_INITIAL (current_function_decl);\n-  vec<tree> maybe_local_decls = vNULL;\n+  auto_vec<tree> maybe_local_decls;\n   rtx_insn *var_end_seq = NULL;\n   unsigned i;\n   unsigned len;\n@@ -2253,7 +2253,6 @@ expand_used_vars (void)\n       if (rtl && (MEM_P (rtl) || GET_CODE (rtl) == CONCAT))\n \tadd_local_decl (cfun, var);\n     }\n-  maybe_local_decls.release ();\n \n   /* If the target requires that FRAME_OFFSET be aligned, do it.  */\n   if (STACK_ALIGNMENT_NEEDED)"}, {"sha": "02e945af71d8bb0fdfa4c0589654228d6b0a7ac8", "filename": "gcc/genmatch.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fgenmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fgenmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmatch.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -1416,8 +1416,7 @@ lower_for (simplify *sin, vec<simplify *>& simplifiers)\n \t    {\n \t      operand *match_op = s->match;\n \t      operand *result_op = s->result;\n-\t      vec<std::pair<user_id *, id_base *> > subst;\n-\t      subst.create (n_ids);\n+\t      auto_vec<std::pair<user_id *, id_base *> > subst (n_ids);\n \t      bool skip = false;\n \t      for (unsigned i = 0; i < n_ids; ++i)\n \t\t{\n@@ -1437,18 +1436,15 @@ lower_for (simplify *sin, vec<simplify *>& simplifiers)\n \t\t    result_op = replace_id (result_op, id, oper);\n \t\t}\n \t      if (skip)\n-\t\t{\n-\t\t  subst.release ();\n-\t\t  continue;\n-\t\t}\n+\t\tcontinue;\n+\n \t      simplify *ns = new simplify (s->kind, match_op, result_op,\n \t\t\t\t\t   vNULL, s->capture_ids);\n \t      ns->for_subst_vec.safe_splice (s->for_subst_vec);\n \t      if (result_op\n \t\t  && can_delay_subst)\n \t\tns->for_subst_vec.safe_splice (subst);\n-\t      else\n-\t\tsubst.release ();\n+\n \t      worklist.safe_push (ns);\n \t    }\n \t}"}, {"sha": "95035762915ae8aa31ea5e9051b04b3401d093ab", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -7416,20 +7416,16 @@ haifa_sched_init (void)\n   /* Initialize luids, dependency caches, target and h_i_d for the\n      whole function.  */\n   {\n-    bb_vec_t bbs;\n-    bbs.create (n_basic_blocks_for_fn (cfun));\n-    basic_block bb;\n-\n     sched_init_bbs ();\n \n+    auto_vec<basic_block> bbs (n_basic_blocks_for_fn (cfun));\n+    basic_block bb;\n     FOR_EACH_BB_FN (bb, cfun)\n       bbs.quick_push (bb);\n     sched_init_luids (bbs);\n     sched_deps_init (true);\n     sched_extend_target ();\n     haifa_init_h_i_d (bbs);\n-\n-    bbs.release ();\n   }\n \n   sched_init_only_bb = haifa_init_only_bb;\n@@ -7996,7 +7992,6 @@ add_to_speculative_block (rtx_insn *insn)\n   sd_iterator_def sd_it;\n   dep_t dep;\n   rtx_insn_list *twins = NULL;\n-  rtx_vec_t priorities_roots;\n \n   ts = TODO_SPEC (insn);\n   gcc_assert (!(ts & ~BE_IN_SPEC));\n@@ -8029,7 +8024,7 @@ add_to_speculative_block (rtx_insn *insn)\n \tsd_iterator_next (&sd_it);\n     }\n \n-  priorities_roots.create (0);\n+  auto_vec<rtx_insn *> priorities_roots;\n   clear_priorities (insn, &priorities_roots);\n \n   while (1)\n@@ -8124,7 +8119,6 @@ add_to_speculative_block (rtx_insn *insn)\n     }\n \n   calc_priorities (priorities_roots);\n-  priorities_roots.release ();\n }\n \n /* Extends and fills with zeros (only the new part) array pointed to by P.  */\n@@ -8620,11 +8614,10 @@ create_check_block_twin (rtx_insn *insn, bool mutate_p)\n     /* Fix priorities.  If MUTATE_P is nonzero, this is not necessary,\n        because it'll be done later in add_to_speculative_block.  */\n     {\n-      rtx_vec_t priorities_roots = rtx_vec_t ();\n+      auto_vec<rtx_insn *> priorities_roots;\n \n       clear_priorities (twin, &priorities_roots);\n       calc_priorities (priorities_roots);\n-      priorities_roots.release ();\n     }\n }\n "}, {"sha": "7fbd404de2e590c306ad5206fb1407efad866127", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -3149,8 +3149,7 @@ handle_missing_profiles (void)\n {\n   struct cgraph_node *node;\n   int unlikely_count_fraction = PARAM_VALUE (UNLIKELY_BB_COUNT_FRACTION);\n-  vec<struct cgraph_node *> worklist;\n-  worklist.create (64);\n+  auto_vec<struct cgraph_node *, 64> worklist;\n \n   /* See if 0 count function has non-0 count callers.  In this case we\n      lost some profile.  Drop its function profile to PROFILE_GUESSED.  */\n@@ -3207,7 +3206,6 @@ handle_missing_profiles (void)\n             }\n         }\n     }\n-  worklist.release ();\n }\n \n /* Convert counts measured by profile driven feedback to frequencies."}, {"sha": "44d5db0026d3010005f6f61f3f44c933a5f94401", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -3942,8 +3942,7 @@ bool\n loop_nest_has_data_refs (loop_p loop)\n {\n   basic_block *bbs = get_loop_body (loop);\n-  vec<data_ref_loc> references;\n-  references.create (3);\n+  auto_vec<data_ref_loc, 3> references;\n \n   for (unsigned i = 0; i < loop->num_nodes; i++)\n     {\n@@ -3957,13 +3956,11 @@ loop_nest_has_data_refs (loop_p loop)\n \t  if (references.length ())\n \t    {\n \t      free (bbs);\n-\t      references.release ();\n \t      return true;\n \t    }\n \t}\n     }\n   free (bbs);\n-  references.release ();\n \n   if (loop->inner)\n     {"}, {"sha": "234d0fd0bc9a93b279f539eddd4d5d23d8112434", "filename": "gcc/tree-diagnostic.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-diagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-diagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-diagnostic.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -102,7 +102,7 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n                                  source_location where)\n {\n   const struct line_map *map;\n-  vec<loc_map_pair> loc_vec = vNULL;\n+  auto_vec<loc_map_pair> loc_vec;\n   unsigned ix;\n   loc_map_pair loc, *iter;\n \n@@ -219,8 +219,6 @@ maybe_unwind_expanded_macro_loc (diagnostic_context *context,\n                                 \"in expansion of macro %qs\",\n                                 linemap_map_get_macro_name (iter->map));\n       }\n-\n-  loc_vec.release ();\n }\n \n /*  This is a diagnostic finalizer implementation that is aware of"}, {"sha": "732e06a3553d7fa0ecb66f18945b895b23590846", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -3438,7 +3438,7 @@ static void\n discover_iteration_bound_by_body_walk (struct loop *loop)\n {\n   struct nb_iter_bound *elt;\n-  vec<widest_int> bounds = vNULL;\n+  auto_vec<widest_int> bounds;\n   vec<vec<basic_block> > queues = vNULL;\n   vec<basic_block> queue = vNULL;\n   ptrdiff_t queue_index;\n@@ -3593,7 +3593,6 @@ discover_iteration_bound_by_body_walk (struct loop *loop)\n     }\n \n   queues.release ();\n-  bounds.release ();\n }\n \n /* See if every path cross the loop goes through a statement that is known\n@@ -3606,7 +3605,7 @@ maybe_lower_iteration_bound (struct loop *loop)\n   hash_set<gimple *> *not_executed_last_iteration = NULL;\n   struct nb_iter_bound *elt;\n   bool found_exit = false;\n-  vec<basic_block> queue = vNULL;\n+  auto_vec<basic_block> queue;\n   bitmap visited;\n \n   /* Collect all statements with interesting (i.e. lower than\n@@ -3698,7 +3697,6 @@ maybe_lower_iteration_bound (struct loop *loop)\n     }\n \n   BITMAP_FREE (visited);\n-  queue.release ();\n   delete not_executed_last_iteration;\n }\n "}, {"sha": "9427bfc60622ac1201fce773273e910ef539d171", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -4120,8 +4120,8 @@ extract_and_process_scc_for_name (tree name)\n static bool\n DFS (tree name)\n {\n-  vec<ssa_op_iter> itervec = vNULL;\n-  vec<tree> namevec = vNULL;\n+  auto_vec<ssa_op_iter> itervec;\n+  auto_vec<tree> namevec;\n   use_operand_p usep = NULL;\n   gimple *defstmt;\n   tree use;\n@@ -4158,19 +4158,11 @@ DFS (tree name)\n \t  /* See if we found an SCC.  */\n \t  if (VN_INFO (name)->low == VN_INFO (name)->dfsnum)\n \t    if (!extract_and_process_scc_for_name (name))\n-\t      {\n-\t\tnamevec.release ();\n-\t\titervec.release ();\n-\t\treturn false;\n-\t      }\n+\t      return false;\n \n \t  /* Check if we are done.  */\n \t  if (namevec.is_empty ())\n-\t    {\n-\t      namevec.release ();\n-\t      itervec.release ();\n-\t      return true;\n-\t    }\n+\t    return true;\n \n \t  /* Restore the last use walker and continue walking there.  */\n \t  use = name;"}, {"sha": "81a380e36a57104d1e24f1f2de34edb735a86142", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -53,7 +53,7 @@ along with GCC; see the file COPYING3.  If not see\n static bool\n reachable_at_most_once (basic_block va_arg_bb, basic_block va_start_bb)\n {\n-  vec<edge> stack = vNULL;\n+  auto_vec<edge, 10> stack;\n   edge e;\n   edge_iterator ei;\n   sbitmap visited;\n@@ -105,7 +105,6 @@ reachable_at_most_once (basic_block va_arg_bb, basic_block va_start_bb)\n \t}\n     }\n \n-  stack.release ();\n   sbitmap_free (visited);\n   return ret;\n }"}, {"sha": "87684f1e2491ccd879932c1b38fa57bb944bbf26", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c6812476a028328a11c68079d1714c9f81b6279/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=8c6812476a028328a11c68079d1714c9f81b6279", "patch": "@@ -3911,7 +3911,6 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n   bb_vec_info bb_vinfo = STMT_VINFO_BB_VINFO (stmt_info);\n   vec_info *vinfo = stmt_info->vinfo;\n   int multi_step_cvt = 0;\n-  vec<tree> vec_dsts = vNULL;\n   vec<tree> interm_types = vNULL;\n   tree last_oprnd, intermediate_type, cvt_type = NULL_TREE;\n   int op_type;\n@@ -4210,7 +4209,7 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n      We create vector destinations for the intermediate type (TYPES) received\n      from supportable_*_operation, and store them in the correct order\n      for future use in vect_create_vectorized_*_stmts ().  */\n-  vec_dsts.create (multi_step_cvt + 1);\n+  auto_vec<tree> vec_dsts (multi_step_cvt + 1);\n   vec_dest = vect_create_destination_var (scalar_dest,\n \t\t\t\t\t  (cvt_type && modifier == WIDEN)\n \t\t\t\t\t  ? cvt_type : vectype_out);\n@@ -4461,7 +4460,6 @@ vectorizable_conversion (gimple *stmt, gimple_stmt_iterator *gsi,\n \n   vec_oprnds0.release ();\n   vec_oprnds1.release ();\n-  vec_dsts.release ();\n   interm_types.release ();\n \n   return true;\n@@ -5469,7 +5467,6 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n   gimple *next_stmt, *first_stmt;\n   bool grouped_store;\n   unsigned int group_size, i;\n-  vec<tree> dr_chain = vNULL;\n   vec<tree> oprnds = vNULL;\n   vec<tree> result_chain = vNULL;\n   bool inv_p;\n@@ -5972,7 +5969,7 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n       return true;\n     }\n \n-  dr_chain.create (group_size);\n+  auto_vec<tree> dr_chain (group_size);\n   oprnds.create (group_size);\n \n   alignment_support_scheme = vect_supportable_dr_alignment (first_dr, false);\n@@ -6246,7 +6243,6 @@ vectorizable_store (gimple *stmt, gimple_stmt_iterator *gsi, gimple **vec_stmt,\n \t}\n     }\n \n-  dr_chain.release ();\n   oprnds.release ();\n   result_chain.release ();\n   vec_oprnds.release ();"}]}