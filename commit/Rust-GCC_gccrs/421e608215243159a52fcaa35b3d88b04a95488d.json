{"sha": "421e608215243159a52fcaa35b3d88b04a95488d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDIxZTYwODIxNTI0MzE1OWE1MmZjYWEzNWIzZDg4YjA0YTk1NDg4ZA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-04-18T08:55:41Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-04-18T08:55:41Z"}, "message": "cfgloop.h (estimate_numbers_of_iterations_loop): Remove use_undefined_p parameter.\n\n2012-04-18  Richard Guenther  <rguenther@suse.de>\n\n\t* cfgloop.h (estimate_numbers_of_iterations_loop): Remove\n\tuse_undefined_p parameter.\n\t* tree-flow.h (estimate_numbers_of_iterations): Likewise.\n\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n\tLikewise.\n\t(estimate_numbers_of_iterations): Likewise.\n\t(estimated_loop_iterations): Adjust.\n\t(max_loop_iterations): Likewise.\n\t(scev_probably_wraps_p): Likewise.\n\t* tree-ssa-loop.c (tree_ssa_loop_bounds): Likewise.\n\t* tree-vrp.c (adjust_range_with_scev): Use max_stmt_executions,\n\tnot max_loop_iterations.\n\t(execute_vrp): Remove explicit number of iterations estimation.\n\nFrom-SVN: r186562", "tree": {"sha": "9450082e7078447f707234f42e62f4aacd729bcd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9450082e7078447f707234f42e62f4aacd729bcd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/421e608215243159a52fcaa35b3d88b04a95488d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421e608215243159a52fcaa35b3d88b04a95488d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/421e608215243159a52fcaa35b3d88b04a95488d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/421e608215243159a52fcaa35b3d88b04a95488d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dcc186d607f8fc8ce3984ab6ae59997dbf2f3d31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcc186d607f8fc8ce3984ab6ae59997dbf2f3d31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcc186d607f8fc8ce3984ab6ae59997dbf2f3d31"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "d60c8bad4a4f3ba1040d3b5cac77819accea531e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -1,3 +1,19 @@\n+2012-04-18  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cfgloop.h (estimate_numbers_of_iterations_loop): Remove\n+\tuse_undefined_p parameter.\n+\t* tree-flow.h (estimate_numbers_of_iterations): Likewise.\n+\t* tree-ssa-loop-niter.c (estimate_numbers_of_iterations_loop):\n+\tLikewise.\n+\t(estimate_numbers_of_iterations): Likewise.\n+\t(estimated_loop_iterations): Adjust.\n+\t(max_loop_iterations): Likewise.\n+\t(scev_probably_wraps_p): Likewise.\n+\t* tree-ssa-loop.c (tree_ssa_loop_bounds): Likewise.\n+\t* tree-vrp.c (adjust_range_with_scev): Use max_stmt_executions,\n+\tnot max_loop_iterations.\n+\t(execute_vrp): Remove explicit number of iterations estimation.\n+\n 2012-04-18  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \t* config/i386/linux-common.h: New."}, {"sha": "14cc8e81a7c596ac4c526f76cff4e1b27fbe47fb", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -278,7 +278,7 @@ gcov_type expected_loop_iterations_unbounded (const struct loop *);\n extern unsigned expected_loop_iterations (const struct loop *);\n extern rtx doloop_condition_get (rtx);\n \n-void estimate_numbers_of_iterations_loop (struct loop *, bool);\n+void estimate_numbers_of_iterations_loop (struct loop *);\n bool estimated_loop_iterations (struct loop *, double_int *);\n bool max_loop_iterations (struct loop *, double_int *);\n HOST_WIDE_INT estimated_loop_iterations_int (struct loop *);"}, {"sha": "2a17ff171ec5ee11659e7a7f9233b3151b2a6a32", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -685,7 +685,7 @@ bool number_of_iterations_exit (struct loop *, edge,\n tree find_loop_niter (struct loop *, edge *);\n tree loop_niter_by_eval (struct loop *, edge);\n tree find_loop_niter_by_eval (struct loop *, edge *);\n-void estimate_numbers_of_iterations (bool);\n+void estimate_numbers_of_iterations (void);\n bool scev_probably_wraps_p (tree, tree, gimple, struct loop *, bool);\n bool convert_affine_scev (struct loop *, tree, tree *, tree *, gimple, bool);\n "}, {"sha": "ab7441b3ff97c0dedeae781d1fc02c3d6a648828", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -2950,7 +2950,7 @@ gcov_type_to_double_int (gcov_type val)\n    is true also use estimates derived from undefined behavior.  */\n \n void\n-estimate_numbers_of_iterations_loop (struct loop *loop, bool use_undefined_p)\n+estimate_numbers_of_iterations_loop (struct loop *loop)\n {\n   VEC (edge, heap) *exits;\n   tree niter, type;\n@@ -2984,8 +2984,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop, bool use_undefined_p)\n     }\n   VEC_free (edge, heap, exits);\n \n-  if (use_undefined_p)\n-    infer_loop_bounds_from_undefined (loop);\n+  infer_loop_bounds_from_undefined (loop);\n \n   /* If we have a measured profile, use it to estimate the number of\n      iterations.  */\n@@ -3013,7 +3012,7 @@ estimate_numbers_of_iterations_loop (struct loop *loop, bool use_undefined_p)\n bool\n estimated_loop_iterations (struct loop *loop, double_int *nit)\n {\n-  estimate_numbers_of_iterations_loop (loop, true);\n+  estimate_numbers_of_iterations_loop (loop);\n   if (!loop->any_estimate)\n     return false;\n \n@@ -3028,7 +3027,7 @@ estimated_loop_iterations (struct loop *loop, double_int *nit)\n bool\n max_loop_iterations (struct loop *loop, double_int *nit)\n {\n-  estimate_numbers_of_iterations_loop (loop, true);\n+  estimate_numbers_of_iterations_loop (loop);\n   if (!loop->any_upper_bound)\n     return false;\n \n@@ -3155,7 +3154,7 @@ estimated_stmt_executions (struct loop *loop, double_int *nit)\n /* Records estimates on numbers of iterations of loops.  */\n \n void\n-estimate_numbers_of_iterations (bool use_undefined_p)\n+estimate_numbers_of_iterations (void)\n {\n   loop_iterator li;\n   struct loop *loop;\n@@ -3166,7 +3165,7 @@ estimate_numbers_of_iterations (bool use_undefined_p)\n \n   FOR_EACH_LOOP (li, loop, 0)\n     {\n-      estimate_numbers_of_iterations_loop (loop, use_undefined_p);\n+      estimate_numbers_of_iterations_loop (loop);\n     }\n \n   fold_undefer_and_ignore_overflow_warnings ();\n@@ -3362,7 +3361,7 @@ scev_probably_wraps_p (tree base, tree step,\n \n   valid_niter = fold_build2 (FLOOR_DIV_EXPR, unsigned_type, delta, step_abs);\n \n-  estimate_numbers_of_iterations_loop (loop, true);\n+  estimate_numbers_of_iterations_loop (loop);\n   for (bound = loop->bounds; bound; bound = bound->next)\n     {\n       if (n_of_executions_at_most (at_stmt, bound, valid_niter))"}, {"sha": "3d650bfcbfd4cd2930d5a26835fbeda00fd1d774", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -420,7 +420,7 @@ tree_ssa_loop_bounds (void)\n   if (number_of_loops () <= 1)\n     return 0;\n \n-  estimate_numbers_of_iterations (true);\n+  estimate_numbers_of_iterations ();\n   scev_reset ();\n   return 0;\n }"}, {"sha": "6602afb9b330092eeaee61d16fc4be71d2497e1a", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/421e608215243159a52fcaa35b3d88b04a95488d/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=421e608215243159a52fcaa35b3d88b04a95488d", "patch": "@@ -3420,7 +3420,7 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop,\n     {\n       double_int nit;\n \n-      if (max_loop_iterations (loop, &nit))\n+      if (max_stmt_executions (loop, &nit))\n \t{\n \t  value_range_t maxvr = { VR_UNDEFINED, NULL_TREE, NULL_TREE, NULL };\n \t  double_int dtmp;\n@@ -8272,12 +8272,6 @@ execute_vrp (void)\n \n   insert_range_assertions ();\n \n-  /* Estimate number of iterations - but do not use undefined behavior\n-     for this.  We can't do this lazily as other functions may compute\n-     this using undefined behavior.  */\n-  free_numbers_of_iterations_estimates ();\n-  estimate_numbers_of_iterations (false);\n-\n   to_remove_edges = VEC_alloc (edge, heap, 10);\n   to_update_switch_stmts = VEC_alloc (switch_update, heap, 5);\n   threadedge_initialize_values ();"}]}