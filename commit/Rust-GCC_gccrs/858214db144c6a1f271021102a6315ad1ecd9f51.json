{"sha": "858214db144c6a1f271021102a6315ad1ecd9f51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU4MjE0ZGIxNDRjNmExZjI3MTAyMTEwMmE2MzE1YWQxZWNkOWY1MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2006-06-25T17:16:25Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-06-25T17:16:25Z"}, "message": "re PR middle-end/28151 (ICE with complex math)\n\n\tPR middle-end/28151\n\t* fold-const.c (const_binop): Be prepared for self returning zero.\n\tSimplify code handling complex values.\n\nFrom-SVN: r114992", "tree": {"sha": "d395a0feadd03e36c4eaeb8eebbcadbbf09fdb76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d395a0feadd03e36c4eaeb8eebbcadbbf09fdb76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/858214db144c6a1f271021102a6315ad1ecd9f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858214db144c6a1f271021102a6315ad1ecd9f51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/858214db144c6a1f271021102a6315ad1ecd9f51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/858214db144c6a1f271021102a6315ad1ecd9f51/comments", "author": null, "committer": null, "parents": [{"sha": "036d1f6aacb3383406872c5410e83b3e91fb6e1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/036d1f6aacb3383406872c5410e83b3e91fb6e1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/036d1f6aacb3383406872c5410e83b3e91fb6e1b"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "25513c68bff89f7e363153c5edf57692622ec9c2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=858214db144c6a1f271021102a6315ad1ecd9f51", "patch": "@@ -1,3 +1,9 @@\n+2006-06-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR middle-end/28151\n+\t* fold-const.c (const_binop): Be prepared for self returning zero.\n+\tSimplify code handling complex values.\n+\n 2006-06-24  Olivier Hainque  <hainque@adacore.com>\n \n \t* gimplify.c (gimplify_scalar_mode_aggregate_compare): New function."}, {"sha": "5c592c3d87d4ae3e8bcc58f672e613bcd5fee0ad", "filename": "gcc/fold-const.c", "status": "modified", "additions": 34, "deletions": 48, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=858214db144c6a1f271021102a6315ad1ecd9f51", "patch": "@@ -1544,13 +1544,18 @@ int_const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n /* Combine two constants ARG1 and ARG2 under operation CODE to produce a new\n    constant.  We assume ARG1 and ARG2 have the same data type, or at least\n-   are the same kind of constant and the same machine mode.\n+   are the same kind of constant and the same machine mode.  Return zero if\n+   combining the constants is not allowed in the current operating mode.\n \n    If NOTRUNC is nonzero, do not truncate the result to fit the data type.  */\n \n static tree\n const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n {\n+  /* Sanity check for the recursive cases.  */\n+  if (!arg1 || !arg2)\n+    return NULL_TREE;\n+\n   STRIP_NOPS (arg1);\n   STRIP_NOPS (arg2);\n \n@@ -1613,7 +1618,6 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n       /* Don't constant fold this floating point operation if\n \t the result has overflowed and flag_trapping_math.  */\n-\n       if (flag_trapping_math\n \t  && MODE_HAS_INFINITIES (mode)\n \t  && REAL_VALUE_ISINF (result)\n@@ -1625,7 +1629,6 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \t result may dependent upon the run-time rounding mode and\n \t flag_rounding_math is set, or if GCC's software emulation\n \t is unable to accurately represent the result.  */\n-      \n       if ((flag_rounding_math\n \t   || (REAL_MODE_FORMAT_COMPOSITE_P (mode)\n \t       && !flag_unsafe_math_optimizations))\n@@ -1649,78 +1652,61 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n       tree i1 = TREE_IMAGPART (arg1);\n       tree r2 = TREE_REALPART (arg2);\n       tree i2 = TREE_IMAGPART (arg2);\n-      tree t;\n+      tree real, imag;\n \n       switch (code)\n \t{\n \tcase PLUS_EXPR:\n-\t  t = build_complex (type,\n-\t\t\t     const_binop (PLUS_EXPR, r1, r2, notrunc),\n-\t\t\t     const_binop (PLUS_EXPR, i1, i2, notrunc));\n-\t  break;\n-\n \tcase MINUS_EXPR:\n-\t  t = build_complex (type,\n-\t\t\t     const_binop (MINUS_EXPR, r1, r2, notrunc),\n-\t\t\t     const_binop (MINUS_EXPR, i1, i2, notrunc));\n+\t  real = const_binop (code, r1, r2, notrunc);\n+\t  imag = const_binop (code, i1, i2, notrunc);\n \t  break;\n \n \tcase MULT_EXPR:\n-\t  t = build_complex (type,\n-\t\t\t     const_binop (MINUS_EXPR,\n-\t\t\t\t\t  const_binop (MULT_EXPR,\n-\t\t\t\t\t\t       r1, r2, notrunc),\n-\t\t\t\t\t  const_binop (MULT_EXPR,\n-\t\t\t\t\t\t       i1, i2, notrunc),\n-\t\t\t\t\t  notrunc),\n-\t\t\t     const_binop (PLUS_EXPR,\n-\t\t\t\t\t  const_binop (MULT_EXPR,\n-\t\t\t\t\t\t       r1, i2, notrunc),\n-\t\t\t\t\t  const_binop (MULT_EXPR,\n-\t\t\t\t\t\t       i1, r2, notrunc),\n-\t\t\t\t\t  notrunc));\n+\t  real = const_binop (MINUS_EXPR,\n+\t\t\t      const_binop (MULT_EXPR, r1, r2, notrunc),\n+\t\t\t      const_binop (MULT_EXPR, i1, i2, notrunc),\n+\t\t\t      notrunc);\n+\t  imag = const_binop (PLUS_EXPR,\n+\t\t\t      const_binop (MULT_EXPR, r1, i2, notrunc),\n+\t\t\t      const_binop (MULT_EXPR, i1, r2, notrunc),\n+\t\t\t      notrunc);\n \t  break;\n \n \tcase RDIV_EXPR:\n \t  {\n-\t    tree t1, t2, real, imag;\n \t    tree magsquared\n \t      = const_binop (PLUS_EXPR,\n \t\t\t     const_binop (MULT_EXPR, r2, r2, notrunc),\n \t\t\t     const_binop (MULT_EXPR, i2, i2, notrunc),\n \t\t\t     notrunc);\n-\n-\t    t1 = const_binop (PLUS_EXPR,\n-\t\t\t      const_binop (MULT_EXPR, r1, r2, notrunc),\n-\t\t\t      const_binop (MULT_EXPR, i1, i2, notrunc),\n-\t\t\t      notrunc);\n-\t    t2 = const_binop (MINUS_EXPR,\n-\t\t\t      const_binop (MULT_EXPR, i1, r2, notrunc),\n-\t\t\t      const_binop (MULT_EXPR, r1, i2, notrunc),\n-\t\t\t      notrunc);\n+\t    tree t1\n+\t      = const_binop (PLUS_EXPR,\n+\t\t\t     const_binop (MULT_EXPR, r1, r2, notrunc),\n+\t\t\t     const_binop (MULT_EXPR, i1, i2, notrunc),\n+\t\t\t     notrunc);\n+\t    tree t2\n+\t      = const_binop (MINUS_EXPR,\n+\t\t\t     const_binop (MULT_EXPR, i1, r2, notrunc),\n+\t\t\t     const_binop (MULT_EXPR, r1, i2, notrunc),\n+\t\t\t     notrunc);\n \n \t    if (INTEGRAL_TYPE_P (TREE_TYPE (r1)))\n-\t      {\n-\t\treal = const_binop (TRUNC_DIV_EXPR, t1, magsquared, notrunc);\n-\t\timag = const_binop (TRUNC_DIV_EXPR, t2, magsquared, notrunc);\n-\t      }\n-\t    else\n-\t      {\n-\t\treal = const_binop (RDIV_EXPR, t1, magsquared, notrunc);\n-\t\timag = const_binop (RDIV_EXPR, t2, magsquared, notrunc);\n-\t\tif (!real || !imag)\n-\t\t  return NULL_TREE;\n-\t      }\n+\t      code = TRUNC_DIV_EXPR;\n \n-\t    t = build_complex (type, real, imag);\n+\t    real = const_binop (code, t1, magsquared, notrunc);\n+\t    imag = const_binop (code, t2, magsquared, notrunc);\n \t  }\n \t  break;\n \n \tdefault:\n \t  return NULL_TREE;\n \t}\n-      return t;\n+\n+      if (real && imag)\n+\treturn build_complex (type, real, imag);\n     }\n+\n   return NULL_TREE;\n }\n "}, {"sha": "f1e1480f00860be55e95bbd482fdd51a56fd9aa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=858214db144c6a1f271021102a6315ad1ecd9f51", "patch": "@@ -1,3 +1,7 @@\n+2006-06-25  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.c-torture/compile/20060625-1.c: New test.\n+\n 2006-06-25  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/20867"}, {"sha": "37efb9da602c09d011db02fc2edd12cb538f688c", "filename": "gcc/testsuite/gcc.c-torture/compile/20060625-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20060625-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/858214db144c6a1f271021102a6315ad1ecd9f51/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20060625-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20060625-1.c?ref=858214db144c6a1f271021102a6315ad1ecd9f51", "patch": "@@ -0,0 +1,10 @@\n+/* PR middle-end/28151 */\n+/* Testcase by Steven Bosscher <stevenb.gcc@gmail.com> */\n+\n+_Complex float b;\n+\n+void foo (void)\n+{\n+  _Complex float a = __FLT_MAX__;\n+  b = __FLT_MAX__ + a;\n+}"}]}