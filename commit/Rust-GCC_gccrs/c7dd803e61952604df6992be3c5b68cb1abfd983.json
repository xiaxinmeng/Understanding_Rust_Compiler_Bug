{"sha": "c7dd803e61952604df6992be3c5b68cb1abfd983", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkZDgwM2U2MTk1MjYwNGRmNjk5MmJlM2M1YjY4Y2IxYWJmZDk4Mw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-02-14T17:59:10Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-02-14T17:59:10Z"}, "message": "re PR tree-optimization/46494 (ICE: verify_flow_info failed when casting-out attribute noreturn with -fno-tree-ccp -fno-tree-fre -ftree-vrp)\n\n\tPR tree-optimization/46494\n\t* loop-unroll.c (split_edge_and_insert): Adjust comment.\n\t* loop-init.c (loop_optimizer_finalize): Do not call verify_flow_info.\n\t(pass_rtl_loop_done): Add TODO_verify_flow.\n\t* fwprop.c (pass_rtl_fwprop): Likewise.\n\t* modulo-sched.c (pass_sms): Likewise.\n\t* tree-ssa-dom.c (pass_dominator): Likewise.\n\t* tree-ssa-loop-ch.c (pass_ch): Likewise.\n\t* tree-ssa-loop.c (pass_complete_unrolli): Likewise.\n\t(pass_tree_loop_done): Likewise.\n\t* tree-ssa-pre.c (execute_pre): Likewise.\n\t* tree-ssa-reassoc.c (pass_reassoc): Likewise.\n\t* tree-ssa-sink.c (pass_sink_code): Likewise.\n\t* tree-vrp.c (pass_vrp): Likewise.\n\nFrom-SVN: r170141", "tree": {"sha": "320a3607dd8780b767137a8f417688b91a15da32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/320a3607dd8780b767137a8f417688b91a15da32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7dd803e61952604df6992be3c5b68cb1abfd983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dd803e61952604df6992be3c5b68cb1abfd983", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7dd803e61952604df6992be3c5b68cb1abfd983", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7dd803e61952604df6992be3c5b68cb1abfd983/comments", "author": null, "committer": null, "parents": [{"sha": "c6150df67f5d7cb05a5784509d9158e0ecc471d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6150df67f5d7cb05a5784509d9158e0ecc471d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6150df67f5d7cb05a5784509d9158e0ecc471d8"}], "stats": {"total": 124, "additions": 83, "deletions": 41}, "files": [{"sha": "c9b7f3544717e4b24657d8f30230e611d8bbce8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -1,18 +1,35 @@\n+2011-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR tree-optimization/46494\n+\t* loop-unroll.c (split_edge_and_insert): Adjust comment.\n+\t* loop-init.c (loop_optimizer_finalize): Do not call verify_flow_info.\n+\t(pass_rtl_loop_done): Add TODO_verify_flow.\n+\t* fwprop.c (pass_rtl_fwprop): Likewise.\n+\t* modulo-sched.c (pass_sms): Likewise.\n+\t* tree-ssa-dom.c (pass_dominator): Likewise.\n+\t* tree-ssa-loop-ch.c (pass_ch): Likewise.\n+\t* tree-ssa-loop.c (pass_complete_unrolli): Likewise.\n+\t(pass_tree_loop_done): Likewise.\n+\t* tree-ssa-pre.c (execute_pre): Likewise.\n+\t* tree-ssa-reassoc.c (pass_reassoc): Likewise.\n+\t* tree-ssa-sink.c (pass_sink_code): Likewise.\n+\t* tree-vrp.c (pass_vrp): Likewise.\n+\n 2011-02-14  Nathan Froyd  <froydnj@codesourcery.com>\n \n-        * config/v850/constraints.md: New file.\n-        * config/v850/v850.md: Include it.\n-        * config/v850/predicates.md (reg_or_0_operand): Use\n-        satisfies_constraint_G.\n-        (special_symbolref_operand): Use satisfies_constraint_K.\n-        * config/v850/v850.h (CONSTANT_ADDRESS_P): Use constraint_satisfied_p.\n-        (GO_IF_LEGITIMATE_ADDRESS): Likewise.\n-        (REG_CLASS_FROM_LETTER, INT_7_BITS, INT_8_BITS): Delete.\n-        (CONST_OK_FOR_P, CONST_OK_FOR_LETTER_P): Delete.\n-        (EXTRA_CONSTRAINT): Delete.\n-        (CONST_OK_FOR_I, CONST_OK_FOR_J): Use insn_const_int_ok_for_constraint.\n-        (CONST_OK_FOR_K, CONST_OK_FOR_L, CONST_OK_FOR_M): Likewise.\n-        (CONST_OK_FOR_N, CONST_OK_FOR_O): Likewise.\n+\t* config/v850/constraints.md: New file.\n+\t* config/v850/v850.md: Include it.\n+\t* config/v850/predicates.md (reg_or_0_operand): Use\n+\tsatisfies_constraint_G.\n+\t(special_symbolref_operand): Use satisfies_constraint_K.\n+\t* config/v850/v850.h (CONSTANT_ADDRESS_P): Use constraint_satisfied_p.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Likewise.\n+\t(REG_CLASS_FROM_LETTER, INT_7_BITS, INT_8_BITS): Delete.\n+\t(CONST_OK_FOR_P, CONST_OK_FOR_LETTER_P): Delete.\n+\t(EXTRA_CONSTRAINT): Delete.\n+\t(CONST_OK_FOR_I, CONST_OK_FOR_J): Use insn_const_int_ok_for_constraint.\n+\t(CONST_OK_FOR_K, CONST_OK_FOR_L, CONST_OK_FOR_M): Likewise.\n+\t(CONST_OK_FOR_N, CONST_OK_FOR_O): Likewise.\n \n 2011-02-14  Anatoly Sokolov  <aesok@post.ru>\n "}, {"sha": "b2fd9556bbbcf9ea4a3dfb53c0c569953a741df3", "filename": "gcc/fwprop.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ffwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ffwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffwprop.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -1471,8 +1471,10 @@ struct rtl_opt_pass pass_rtl_fwprop =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func                        /* todo_flags_finish */\n+  TODO_df_finish\n+    | TODO_verify_flow\n+    | TODO_verify_rtl_sharing\n+    | TODO_dump_func                    /* todo_flags_finish */\n  }\n };\n "}, {"sha": "bd4af30c5c5d3d32fc849bbe98a01c43754e575f", "filename": "gcc/loop-init.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Floop-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Floop-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -123,14 +123,6 @@ loop_optimizer_finalize (void)\n     {\n       bb->loop_father = NULL;\n     }\n-\n-  /* Checking.  */\n-#ifdef ENABLE_CHECKING\n-  /* FIXME: no point to verify flow info after bundling on ia64.  Use this\n-     hack for achieving this.  */\n-  if (!reload_completed)\n-    verify_flow_info ();\n-#endif\n }\n \n \f\n@@ -235,7 +227,9 @@ struct rtl_opt_pass pass_rtl_loop_done =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   0,                                    /* todo_flags_start */\n-  TODO_dump_func | TODO_verify_rtl_sharing /* todo_flags_finish */\n+  TODO_verify_flow\n+    | TODO_verify_rtl_sharing\n+    | TODO_dump_func                    /* todo_flags_finish */\n  }\n };\n "}, {"sha": "6deff4141a36eaafa84616d59bd3eeff7e620c76", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -900,7 +900,7 @@ split_edge_and_insert (edge e, rtx insns)\n      CFG.  For this purpose we used to set the BB_SUPERBLOCK flag on BB\n      and call break_superblocks when going out of cfglayout mode.  But it\n      turns out that this never happens; and that if it does ever happen,\n-     the verify_flow_info call in loop_optimizer_finalize would fail.\n+     the TODO_verify_flow at the end of the RTL loop passes would fail.\n \n      There are two reasons why we expected we could have control flow insns\n      in INSNS.  The first is when a comparison has to be done in parts, and"}, {"sha": "2ae267c81a3887dcdcdeaaf472a89795c50ca95b", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -2897,9 +2897,11 @@ struct rtl_opt_pass pass_sms =\n   0,                                    /* properties_provided */\n   0,                                    /* properties_destroyed */\n   TODO_dump_func,                       /* todo_flags_start */\n-  TODO_df_finish | TODO_verify_rtl_sharing |\n-  TODO_dump_func |\n-  TODO_ggc_collect                      /* todo_flags_finish */\n+  TODO_df_finish\n+    | TODO_verify_flow\n+    | TODO_verify_rtl_sharing\n+    | TODO_dump_func\n+    | TODO_ggc_collect                  /* todo_flags_finish */\n  }\n };\n "}, {"sha": "823ca7d6624b122d1d600c32ce4d7ab7d3774e53", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -1,3 +1,7 @@\n+2011-02-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr46494.c: New test.\n+\n 2011-02-14  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/attr-weak-hidden-1.c: Make definition of foo strong."}, {"sha": "29f96856b1d7dfdf74d41de893fcd32eab8ae92f", "filename": "gcc/testsuite/gcc.dg/pr46494.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46494.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46494.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr46494.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile }\n+/* { dg-options \"-O -fno-tree-ccp -fno-tree-fre -ftree-vrp\" } */\n+\n+extern void foo (void) __attribute__((noreturn));\n+void g (void)\n+{\n+  void (*f) (void) = foo;\n+  f ();\n+}"}, {"sha": "fc87c4604c730473f1b518fb5a0c2b873bf91333", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -799,10 +799,11 @@ struct gimple_opt_pass pass_dominator =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\n+  TODO_cleanup_cfg\n     | TODO_update_ssa\n-    | TODO_cleanup_cfg\n-    | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+    | TODO_verify_ssa\n+    | TODO_verify_flow\n+    | TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };\n "}, {"sha": "c58cb5f8bba545ac4d713342d7f8b76d2a591f8f", "filename": "gcc/tree-ssa-loop-ch.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-loop-ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-loop-ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ch.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -276,7 +276,9 @@ struct gimple_opt_pass pass_ch =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_cleanup_cfg | TODO_dump_func\n-  | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+  TODO_cleanup_cfg\n+    | TODO_verify_ssa\n+    | TODO_verify_flow\n+    | TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };"}, {"sha": "a1edb51c13d378d91ec9ba0ca2dc259e2b7e5a15", "filename": "gcc/tree-ssa-loop.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -528,7 +528,8 @@ struct gimple_opt_pass pass_complete_unrolli =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func\n+  TODO_verify_flow\n+    | TODO_dump_func\n     | TODO_ggc_collect \t\t\t/* todo_flags_finish */\n  }\n };\n@@ -670,6 +671,8 @@ struct gimple_opt_pass pass_tree_loop_done =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_cleanup_cfg | TODO_dump_func\t/* todo_flags_finish */\n+  TODO_cleanup_cfg\n+    | TODO_verify_flow\n+    | TODO_dump_func\t\t\t/* todo_flags_finish */\n  }\n };"}, {"sha": "3056723e2ec07ce6a4ed29698f96b6bc8fae824d", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -4909,7 +4909,10 @@ execute_pre (bool do_fre)\n   clear_expression_ids ();\n   free_scc_vn ();\n   if (!do_fre)\n-    remove_dead_inserted_code ();\n+    {\n+      remove_dead_inserted_code ();\n+      todo |= TODO_verify_flow;\n+    }\n \n   scev_finalize ();\n   fini_pre (do_fre);"}, {"sha": "904fef804475e102b4c8453676d955f529838148", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -2282,7 +2282,10 @@ struct gimple_opt_pass pass_reassoc =\n   0,\t\t\t\t\t/* properties_provided */\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n-  TODO_dump_func | TODO_ggc_collect | TODO_verify_ssa /* todo_flags_finish */\n+  TODO_verify_ssa\n+    | TODO_verify_flow\n+    | TODO_dump_func\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n  }\n };\n "}, {"sha": "962c2955e26eada93684b8852004723553a3e87f", "filename": "gcc/tree-ssa-sink.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-sink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-ssa-sink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sink.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -604,8 +604,9 @@ struct gimple_opt_pass pass_sink_code =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_update_ssa\n+    | TODO_verify_ssa\n+    | TODO_verify_flow\n     | TODO_dump_func\n-    | TODO_ggc_collect\n-    | TODO_verify_ssa\t\t\t/* todo_flags_finish */\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n  }\n };"}, {"sha": "65d249f9ae2f930d8f7865ae5b07da604ca88c54", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7dd803e61952604df6992be3c5b68cb1abfd983/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=c7dd803e61952604df6992be3c5b68cb1abfd983", "patch": "@@ -7766,9 +7766,10 @@ struct gimple_opt_pass pass_vrp =\n   0,\t\t\t\t\t/* properties_destroyed */\n   0,\t\t\t\t\t/* todo_flags_start */\n   TODO_cleanup_cfg\n-    | TODO_ggc_collect\n+    | TODO_update_ssa\n     | TODO_verify_ssa\n+    | TODO_verify_flow\n     | TODO_dump_func\n-    | TODO_update_ssa\t\t\t/* todo_flags_finish */\n+    | TODO_ggc_collect\t\t\t/* todo_flags_finish */\n  }\n };"}]}