{"sha": "2e4182ae07e16f30b8917af3c0581a6c8af31357", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU0MTgyYWUwN2UxNmYzMGI4OTE3YWYzYzA1ODFhNmM4YWYzMTM1Nw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-03-21T20:13:44Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-03-21T20:13:44Z"}, "message": "[PR72741] Properly handle clauses specifying the level of parallelism for 'external' Fortran OpenACC routines\n\n..., so as to also for these enable the generic middle end OMP code to verify\nproper nesting of loops/routines regarding their levels of parallelism.\n\n\tgcc/fortran/\n\tPR fortran/72741\n\t* openmp.c (gfc_match_oacc_routine): Set the level of parallelism\n\tfor all variants.\n\t(gfc_resolve_oacc_routines): Call gfc_add_omp_declare_target.\n\tgcc/testsuite/\n\tPR fortran/72741\n\t* c-c++-common/goacc/routine-3-extern.c: New file.\n\t* c-c++-common/goacc/routine-3.c: Adjust.\n\t* c-c++-common/goacc/routine-4-extern.c: New file.\n\t* c-c++-common/goacc/routine-4.c: Adjust.\n\t* gfortran.dg/goacc/routine-module-3.f90: New file.\n\t* gfortran.dg/goacc/routine-external-level-of-parallelism-1.f: New\n\tfile.\n\t* gfortran.dg/goacc/routine-external-level-of-parallelism-2.f:\n\tLikewise.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r269858", "tree": {"sha": "5742c92f31f9bcc01fcd42222b7d0761eda5f2c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5742c92f31f9bcc01fcd42222b7d0761eda5f2c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e4182ae07e16f30b8917af3c0581a6c8af31357", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4182ae07e16f30b8917af3c0581a6c8af31357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e4182ae07e16f30b8917af3c0581a6c8af31357", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e4182ae07e16f30b8917af3c0581a6c8af31357/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6bf4bc14d8ab24acad0b0d42cde5e08d1c3a879", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6bf4bc14d8ab24acad0b0d42cde5e08d1c3a879", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6bf4bc14d8ab24acad0b0d42cde5e08d1c3a879"}], "stats": {"total": 968, "additions": 968, "deletions": 0}, "files": [{"sha": "dd4347ef3d1b97af42641aac188f4b360574c948", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -1,5 +1,10 @@\n 2019-03-21  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR fortran/72741\n+\t* openmp.c (gfc_match_oacc_routine): Set the level of parallelism\n+\tfor all variants.\n+\t(gfc_resolve_oacc_routines): Call gfc_add_omp_declare_target.\n+\n \tPR fortran/89773\n \t* gfortran.h (gfc_oacc_routine_name): Add loc member.\n \t(gfc_resolve_oacc_routines): Declare."}, {"sha": "9fc236760a1c6d0fed7b5ecebddafef22f5cf421", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -2391,6 +2391,8 @@ gfc_match_oacc_routine (void)\n \n       if (add)\n \t{\n+\t  sym->attr.oacc_routine_lop = lop;\n+\n \t  n = gfc_get_oacc_routine_name ();\n \t  n->sym = sym;\n \t  n->clauses = c;\n@@ -6085,6 +6087,12 @@ gfc_resolve_oacc_routines (gfc_namespace *ns)\n \t\t     \" in !$ACC ROUTINE ( NAME ) at %L\", sym->name, &orn->loc);\n \t  continue;\n \t}\n+      if (!gfc_add_omp_declare_target (&sym->attr, sym->name, &orn->loc))\n+\t{\n+\t  gfc_error (\"NAME %qs invalid\"\n+\t\t     \" in !$ACC ROUTINE ( NAME ) at %L\", sym->name, &orn->loc);\n+\t  continue;\n+\t}\n     }\n }\n "}, {"sha": "f575c0f59a9f00d7b340846fe08060a26e4e14c0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -1,4 +1,20 @@\n 2019-03-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\tPR fortran/72741\n+\t* gfortran.dg/goacc/routine-external-level-of-parallelism-1.f: New\n+\tfile.\n+\t* gfortran.dg/goacc/routine-external-level-of-parallelism-2.f:\n+\tLikewise.\n+\n+2019-03-21  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/72741\n+\t* c-c++-common/goacc/routine-3-extern.c: New file.\n+\t* c-c++-common/goacc/routine-3.c: Adjust.\n+\t* c-c++-common/goacc/routine-4-extern.c: New file.\n+\t* c-c++-common/goacc/routine-4.c: Adjust.\n+\t* gfortran.dg/goacc/routine-module-3.f90: New file.\n \n \tPR fortran/89773\n \t* gfortran.dg/goacc/pr89773.f90: New file."}, {"sha": "e32cfdefd2a2cc50c201750c8ceffdd6dc2c7ab5", "filename": "gcc/testsuite/c-c++-common/goacc/routine-3-extern.c", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3-extern.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3-extern.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3-extern.c?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -0,0 +1,89 @@\n+/* Test invalid calls to routines.  */\n+/* Variant of 'routine-3.c', moving the callees 'extern'.  */\n+\n+#pragma acc routine gang\n+extern int extern_gang (); /* { dg-message \"declared here\" \"3\" } */\n+\n+#pragma acc routine worker\n+extern int extern_worker (); /* { dg-message \"declared here\" \"2\" } */\n+\n+#pragma acc routine vector\n+extern int extern_vector (); /* { dg-message \"declared here\" } */\n+\n+#pragma acc routine seq\n+extern int extern_seq ();\n+\n+int\n+main ()\n+{\n+  int red = 0;\n+#pragma acc parallel copy (red)\n+  {\n+    /* Independent/seq loop tests.  */\n+#pragma acc loop reduction (+:red) // { dg-warning \"insufficient partitioning\" }\n+    for (int i = 0; i < 10; i++)\n+      red += extern_gang ();\n+\n+#pragma acc loop reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_worker ();\n+\n+#pragma acc loop reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_vector ();\n+\n+    /* Gang routine tests.  */\n+#pragma acc loop gang reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_gang (); // { dg-error \"routine call uses same\" }\n+\n+#pragma acc loop worker reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_gang (); // { dg-error \"routine call uses same\" }\n+\n+#pragma acc loop vector reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_gang (); // { dg-error \"routine call uses same\" }\n+\n+    /* Worker routine tests.  */\n+#pragma acc loop gang reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_worker ();\n+\n+#pragma acc loop worker reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_worker (); // { dg-error \"routine call uses same\" }\n+\n+#pragma acc loop vector reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_worker (); // { dg-error \"routine call uses same\" }\n+\n+    /* Vector routine tests.  */\n+#pragma acc loop gang reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_vector ();\n+\n+#pragma acc loop worker reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_vector ();\n+\n+#pragma acc loop vector reduction (+:red)  /* { dg-message \"containing loop\" } */\n+    for (int i = 0; i < 10; i++)\n+      red += extern_vector (); // { dg-error \"routine call uses same\" }\n+\n+    /* Seq routine tests.  */\n+#pragma acc loop gang reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_seq ();\n+\n+#pragma acc loop worker reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_seq ();\n+\n+#pragma acc loop vector reduction (+:red)\n+    for (int i = 0; i < 10; i++)\n+      red += extern_seq ();\n+  }\n+\n+  return 0;\n+}"}, {"sha": "364c8ad9ff5c5c4c5ee4724f3634a0d38a1eb686", "filename": "gcc/testsuite/c-c++-common/goacc/routine-3.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-3.c?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -1,4 +1,5 @@\n /* Test invalid calls to routines.  */\n+/* See also variant 'routine-3-extern.c', moving the callees 'extern'.  */\n \n #pragma acc routine gang\n int"}, {"sha": "ec21db1c31947e95ebcc90aa38622d20142bca9c", "filename": "gcc/testsuite/c-c++-common/goacc/routine-4-extern.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4-extern.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4-extern.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4-extern.c?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -0,0 +1,124 @@\n+/* Test invalid intra-routine parallelism.  */\n+/* Variant of 'routine-4.c', moving the callees 'extern'.  */\n+\n+extern void extern_gang (void);\n+#pragma acc routine (extern_gang) gang\n+extern void extern_worker (void);\n+#pragma acc routine (extern_worker) worker\n+extern void extern_vector (void);\n+#pragma acc routine (extern_vector) vector\n+extern void extern_seq (void);\n+#pragma acc routine (extern_seq) seq\n+\n+void gang (void);\n+void worker (void);\n+void vector (void);\n+\n+#pragma acc routine (gang) gang\n+#pragma acc routine (worker) worker\n+#pragma acc routine (vector) vector\n+  \n+#pragma acc routine seq\n+void seq (void)\n+{\n+  extern_gang ();  /* { dg-error \"routine call uses\" } */\n+  extern_worker ();  /* { dg-error \"routine call uses\" } */\n+  extern_vector ();  /* { dg-error \"routine call uses\" } */\n+  extern_seq ();\n+\n+  int red;\n+\n+#pragma acc loop reduction (+:red) // { dg-warning \"insufficient partitioning\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop gang reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop worker reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop vector reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+}\n+\n+void vector (void)\n+{\n+  extern_gang ();  /* { dg-error \"routine call uses\" } */\n+  extern_worker ();  /* { dg-error \"routine call uses\" } */\n+  extern_vector ();\n+  extern_seq ();\n+\n+  int red;\n+\n+#pragma acc loop reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop gang reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop worker reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop vector reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+}\n+\n+void worker (void)\n+{\n+  extern_gang ();  /* { dg-error \"routine call uses\" } */\n+  extern_worker ();\n+  extern_vector ();\n+  extern_seq ();\n+\n+  int red;\n+\n+#pragma acc loop reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop gang reduction (+:red) // { dg-error \"disallowed by containing routine\" }\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop worker reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop vector reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+}\n+\n+void gang (void)\n+{\n+  extern_gang ();\n+  extern_worker ();\n+  extern_vector ();\n+  extern_seq ();\n+\n+  int red;\n+\n+#pragma acc loop reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop gang reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop worker reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+\n+#pragma acc loop vector reduction (+:red)\n+  for (int i = 0; i < 10; i++)\n+    red ++;\n+}"}, {"sha": "5f2194c3f6238dae9cd708d932914b15cb4213bd", "filename": "gcc/testsuite/c-c++-common/goacc/routine-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-4.c?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -1,4 +1,5 @@\n /* Test invalid intra-routine parallelism.  */\n+/* See also variant 'routine-4-extern.c', moving the callees 'extern'.  */\n \n void gang (void);\n void worker (void);"}, {"sha": "c27fe7924ed51b7597642ddd4be1aa9ec0dc8fcc", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-external-level-of-parallelism-1.f", "status": "added", "additions": 347, "deletions": 0, "changes": 347, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-1.f?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -0,0 +1,347 @@\n+! Check valid calls to 'external' OpenACC routines.\n+\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+\n+      subroutine sub\n+      implicit none\n+      integer, parameter :: n = 100\n+      integer :: a(n), i, j\n+      external :: gangr, workerr, vectorr, seqr\n+!$acc routine (gangr) gang\n+!$acc routine (workerr) worker\n+!$acc routine (vectorr) vector\n+!$acc routine (seqr) seq\n+\n+!\n+! Test subroutine calls inside nested loops.\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+!$acc loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+         do j = 1, n\n+            call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+!$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+         do j = 1, n\n+            call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to seq routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to gang routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to worker routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to vector routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+      end subroutine sub\n+\n+      subroutine func\n+      implicit none\n+      integer, parameter :: n = 100\n+      integer :: a(n), i, j\n+      integer, external :: gangf, workerf, vectorf, seqf\n+!$acc routine (gangf) gang\n+!$acc routine (workerf) worker\n+!$acc routine (vectorf) vector\n+!$acc routine (seqf) seq\n+\n+!\n+! Test subroutine calls inside nested loops.\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+!$acc loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+         do j = 1, n\n+            a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+!$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+         do j = 1, n\n+            a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to seq routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to gang routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to worker routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to vector routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+      end subroutine func"}, {"sha": "0e8dfb19e2b43f37671aae80e6121dd83736f4e5", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-external-level-of-parallelism-2.f", "status": "added", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-external-level-of-parallelism-2.f?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -0,0 +1,361 @@\n+! Check invalid calls to 'external' OpenACC routines.\n+\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+\n+      subroutine sub\n+      implicit none\n+      integer, parameter :: n = 100\n+      integer :: a(n), i, j\n+      external :: gangr, workerr, vectorr, seqr\n+!$acc routine (gangr) gang\n+!$acc routine (workerr) worker\n+!$acc routine (vectorr) vector\n+!$acc routine (seqr) seq\n+\n+!\n+! Test subroutine calls inside nested loops.\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+!$acc loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+         do j = 1, n\n+            call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+!$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+         do j = 1, n\n+            call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to seq routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call seqr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to gang routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call gangr (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to worker routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call workerr (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to vector routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         call vectorr (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+      end subroutine sub\n+\n+      subroutine func\n+      implicit none\n+      integer, parameter :: n = 100\n+      integer :: a(n), i, j\n+      integer, external :: gangf, workerf, vectorf, seqf\n+!$acc routine (gangf) gang\n+!$acc routine (workerf) worker\n+!$acc routine (vectorf) vector\n+!$acc routine (seqf) seq\n+\n+!\n+! Test subroutine calls inside nested loops.\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+!$acc loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+         do j = 1, n\n+            a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+!$acc loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+         do j = 1, n\n+            a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+         end do\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to seq routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = seqf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to gang routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-warning \"insufficient partitioning available to parallelize loop\" \"\" { target *-*-* } .-1 }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = gangf (a, n) ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to worker routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = workerf (a, n) ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!\n+! Test calls to vector routines\n+!\n+\n+!$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+! { dg-error \"routine call uses same OpenACC parallelism as containing loop\" \"\" { target *-*-* } .-1 }\n+      end do\n+!$acc end parallel loop\n+\n+!$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+      do i = 1, n\n+         a(i) = vectorf (a, n) ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+      end do\n+!$acc end parallel loop\n+      end subroutine func"}, {"sha": "a4ff54954afa428c5c1daf31a2aeab7c91722315", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-3.f90", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e4182ae07e16f30b8917af3c0581a6c8af31357/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-3.f90?ref=2e4182ae07e16f30b8917af3c0581a6c8af31357", "patch": "@@ -0,0 +1,16 @@\n+! Invalid use of routines defined inside a Fortran module.\n+\n+! { dg-compile-aux-modules \"routine-module-mod-1.f90\" }\n+\n+program main\n+  use routine_module_mod_1\n+  implicit none\n+  !$acc routine (s_1) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_1\" }\n+   ! { dg-error \"NAME 's_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (s_2) seq ! { dg-error \"Cannot change attributes of USE-associated symbol s_2\" }\n+   ! { dg-error \"NAME 's_2' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (v_1) seq ! { dg-error \"Cannot change attributes of USE-associated symbol v_1\" }\n+   ! { dg-error \"NAME 'v_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+  !$acc routine (w_1) gang ! { dg-error \"Cannot change attributes of USE-associated symbol w_1\" }\n+   ! { dg-error \"NAME 'w_1' invalid in \\\\!\\\\\\$ACC ROUTINE \\\\( NAME \\\\)\" \"\" { target *-*-* } .-1 }\n+end program main"}]}