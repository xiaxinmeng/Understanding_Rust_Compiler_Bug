{"sha": "0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJjMWI3N2YzMjE5ZjNmODAzOGZjYzM0ZjEzZWRkYzA4YmE4NmNlOA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2009-11-11T19:08:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2009-11-11T19:08:44Z"}, "message": "lto-cgraph.c: Include gcov-io.h\n\n\t* lto-cgraph.c: Include gcov-io.h\n\t(output_profile_summary): New function.\n\t(output_cgraph): Use it.\n\t(input_profile_summary): New function.\n\t(input_cgraph): Use it.\n\t* coverage.c (build_ctr_info_value): Use varpool; initalize\n\tDECL_ASSEMBLER_NAME.\n\t(create_coverage): Likewise.\n\t* tree-profile.c (tree_init_ic_make_global_vars): Likewise.\n\t(tree_init_edge_profiler): Likewise.\n\t* Makefile.in (lto-cgraph.o): Add dependency on gcov-io.h.\n\nFrom-SVN: r154100", "tree": {"sha": "866b6afdd093937e7194ff58fa04991fef160e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/866b6afdd093937e7194ff58fa04991fef160e5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/comments", "author": null, "committer": null, "parents": [{"sha": "17e7cb855000baa6598005571d7dd49cfac5282a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17e7cb855000baa6598005571d7dd49cfac5282a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17e7cb855000baa6598005571d7dd49cfac5282a"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "d3cf19511d2fce42f971125cf99db17f8c6f2b10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "patch": "@@ -1,3 +1,17 @@\n+2009-11-11  Jan Hubicka  <jh@suse.cz>\n+\n+\t* lto-cgraph.c: Include gcov-io.h\n+\t(output_profile_summary): New function.\n+\t(output_cgraph): Use it.\n+\t(input_profile_summary): New function.\n+\t(input_cgraph): Use it.\n+\t* coverage.c (build_ctr_info_value): Use varpool; initalize\n+\tDECL_ASSEMBLER_NAME.\n+\t(create_coverage): Likewise.\n+\t* tree-profile.c (tree_init_ic_make_global_vars): Likewise.\n+\t(tree_init_edge_profiler): Likewise.\n+\t* Makefile.in (lto-cgraph.o): Add dependency on gcov-io.h.\n+\n 2009-11-11  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* config/i386/cygming.h (HANDLE_PRAGMA_PUSH_POP_MACRO):"}, {"sha": "4e153092c06c20da662cddfdaba4df03f2f79acc", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "patch": "@@ -2199,7 +2199,7 @@ lto-cgraph.o: lto-cgraph.c $(CONFIG_H) $(SYSTEM_H) coretypes.h   \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h \\\n    $(VARRAY_H) $(HASHTAB_H) langhooks.h $(BASIC_BLOCK_H) \\\n    $(TREE_FLOW_H) $(CGRAPH_H) $(FUNCTION_H) $(GGC_H) $(DIAGNOSTIC_H) \\\n-   except.h $(TIMEVAR_H) output.h pointer-set.h $(LTO_STREAMER_H)\n+   except.h $(TIMEVAR_H) output.h pointer-set.h $(LTO_STREAMER_H) $(GCOV_IO_H)\n lto-streamer-in.o: lto-streamer-in.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TM_H) $(TOPLEV_H) $(EXPR_H) $(FLAGS_H) $(PARAMS_H) input.h $(VARRAY_H) \\\n    $(HASHTAB_H) $(BASIC_BLOCK_H) $(TREE_FLOW_H) $(TREE_PASS_H) $(CGRAPH_H) \\"}, {"sha": "a223bc067e61d7a0ee36b6f951447e286979d4fc", "filename": "gcc/coverage.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "patch": "@@ -776,7 +776,7 @@ build_ctr_info_value (unsigned int counter, tree type)\n       TREE_TYPE (tree_ctr_tables[counter]) = array_type;\n       DECL_SIZE (tree_ctr_tables[counter]) = TYPE_SIZE (array_type);\n       DECL_SIZE_UNIT (tree_ctr_tables[counter]) = TYPE_SIZE_UNIT (array_type);\n-      assemble_variable (tree_ctr_tables[counter], 0, 0, 0);\n+      varpool_finalize_decl (tree_ctr_tables[counter]);\n \n       value = tree_cons (fields,\n \t\t\t build1 (ADDR_EXPR, TREE_TYPE (fields), \n@@ -795,6 +795,7 @@ build_ctr_info_value (unsigned int counter, tree type)\n   TREE_PUBLIC (fn) = 1;\n   DECL_ARTIFICIAL (fn) = 1;\n   TREE_NOTHROW (fn) = 1;\n+  DECL_ASSEMBLER_NAME (fn);  /* Initialize assembler name so we can stream out. */\n   value = tree_cons (fields,\n \t\t     build1 (ADDR_EXPR, TREE_TYPE (fields), fn),\n \t\t     value);\n@@ -971,7 +972,7 @@ create_coverage (void)\n   DECL_INITIAL (gcov_info) = t;\n \n   /* Build structure.  */\n-  assemble_variable (gcov_info, 0, 0, 0);\n+  varpool_finalize_decl (gcov_info);\n \n   /* Build a decl for __gcov_init.  */\n   t = build_pointer_type (TREE_TYPE (gcov_info));\n@@ -980,6 +981,7 @@ create_coverage (void)\n \t\t  FUNCTION_DECL, get_identifier (\"__gcov_init\"), t);\n   TREE_PUBLIC (t) = 1;\n   DECL_EXTERNAL (t) = 1;\n+  DECL_ASSEMBLER_NAME (t);  /* Initialize assembler name so we can stream out. */\n   gcov_init = t;\n \n   /* Generate a call to __gcov_init(&gcov_info).  */"}, {"sha": "38d02b8317578af642803da422e164bc3a5ba6a7", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "patch": "@@ -45,6 +45,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"output.h\"\n #include \"pointer-set.h\"\n #include \"lto-streamer.h\"\n+#include \"gcov-io.h\"\n \n /* Create a new cgraph encoder.  */\n \n@@ -307,6 +308,24 @@ lto_output_node (struct lto_simple_output_block *ob, struct cgraph_node *node,\n   lto_output_uleb128_stream (ob->main_stream, node->global.inlined);\n }\n \n+/* Stream out profile_summary to OB.  */\n+\n+static void\n+output_profile_summary (struct lto_simple_output_block *ob)\n+{\n+  if (profile_info)\n+    {\n+      /* We do not output num, it is not terribly useful.  */\n+      gcc_assert (profile_info->runs);\n+      lto_output_uleb128_stream (ob->main_stream, profile_info->runs);\n+      lto_output_sleb128_stream (ob->main_stream, profile_info->sum_all);\n+      lto_output_sleb128_stream (ob->main_stream, profile_info->run_max);\n+      lto_output_sleb128_stream (ob->main_stream, profile_info->sum_max);\n+    }\n+  else\n+    lto_output_uleb128_stream (ob->main_stream, 0);\n+}\n+\n \n /* Output the part of the cgraph in SET.  */\n \n@@ -324,6 +343,8 @@ output_cgraph (cgraph_node_set set)\n \n   ob = lto_create_simple_output_block (LTO_section_cgraph);\n \n+  output_profile_summary (ob);\n+\n   /* An encoder for cgraph nodes should have been created by\n      ipa_write_summaries_1.  */\n   gcc_assert (ob->decl_state->cgraph_node_encoder);\n@@ -642,6 +663,35 @@ input_cgraph_1 (struct lto_file_decl_data *file_data,\n   VEC_free (cgraph_node_ptr, heap, nodes);\n }\n \n+static struct gcov_ctr_summary lto_gcov_summary;\n+\n+/* Input profile_info from IB.  */\n+static void\n+input_profile_summary (struct lto_input_block *ib)\n+{\n+  unsigned int runs = lto_input_uleb128 (ib);\n+  if (runs)\n+    {\n+      if (!profile_info)\n+        {\n+\t  profile_info = &lto_gcov_summary;\n+\t  lto_gcov_summary.runs = runs;\n+\t  lto_gcov_summary.sum_all = lto_input_sleb128 (ib);\n+\t  lto_gcov_summary.run_max = lto_input_sleb128 (ib);\n+\t  lto_gcov_summary.sum_max = lto_input_sleb128 (ib);\n+\t}\n+      /* We can support this by scaling all counts to nearest common multiple\n+         of all different runs, but it is perhaps not worth the effort.  */\n+      else if (profile_info->runs != runs\n+\t       || profile_info->sum_all != lto_input_sleb128 (ib)\n+\t       || profile_info->run_max != lto_input_sleb128 (ib)\n+\t       || profile_info->sum_max != lto_input_sleb128 (ib))\n+\tsorry (\"Combining units with different profiles is not supported.\");\n+      /* We allow some units to have profile and other to not have one.  This will\n+         just make unprofiled units to be size optimized that is sane.  */\n+    }\n+\n+}\n \n /* Input and merge the cgraph from each of the .o files passed to\n    lto1.  */\n@@ -662,6 +712,7 @@ input_cgraph (void)\n \n       ib = lto_create_simple_input_block (file_data, LTO_section_cgraph, \n \t\t\t\t\t  &data, &len);\n+      input_profile_summary (ib);\n       file_data->cgraph_node_encoder = lto_cgraph_encoder_new ();\n       input_cgraph_1 (file_data, ib);\n       lto_destroy_simple_input_block (file_data, LTO_section_cgraph, "}, {"sha": "2b75461b1885c1f86bccd44826e10f34e678f344", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=0bc1b77f3219f3f8038fcc34f13eddc08ba86ce8", "patch": "@@ -82,7 +82,7 @@ tree_init_ic_make_global_vars (void)\n   TREE_PUBLIC (ic_void_ptr_var) = 0;\n   DECL_ARTIFICIAL (ic_void_ptr_var) = 1;\n   DECL_INITIAL (ic_void_ptr_var) = NULL;\n-  assemble_variable (ic_void_ptr_var, 0, 0, 0);\n+  varpool_finalize_decl (ic_void_ptr_var);\n \n   gcov_type_ptr = build_pointer_type (get_gcov_type ());\n   ic_gcov_type_ptr_var \n@@ -93,7 +93,7 @@ tree_init_ic_make_global_vars (void)\n   TREE_PUBLIC (ic_gcov_type_ptr_var) = 0;\n   DECL_ARTIFICIAL (ic_gcov_type_ptr_var) = 1;\n   DECL_INITIAL (ic_gcov_type_ptr_var) = NULL;\n-  assemble_variable (ic_gcov_type_ptr_var, 0, 0, 0);\n+  varpool_finalize_decl (ic_gcov_type_ptr_var);\n }\n \n static void\n@@ -159,6 +159,14 @@ tree_init_edge_profiler (void)\n       tree_ior_profiler_fn\n \t      = build_fn_decl (\"__gcov_ior_profiler\",\n \t\t\t\t     average_profiler_fn_type);\n+      /* LTO streamer needs assembler names.  Because we create these decls\n+         late, we need to initialize them by hand.  */\n+      DECL_ASSEMBLER_NAME (tree_interval_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_pow2_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_one_value_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_indirect_call_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_average_profiler_fn);\n+      DECL_ASSEMBLER_NAME (tree_ior_profiler_fn);\n     }\n }\n "}]}