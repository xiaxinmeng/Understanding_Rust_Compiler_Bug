{"sha": "c22d8787165e1d8f835bfc3a5e5802c286ace31a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzIyZDg3ODcxNjVlMWQ4ZjgzNWJmYzNhNWU1ODAyYzI4NmFjZTMxYQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-11-08T16:04:20Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-11-08T16:04:20Z"}, "message": "[2/2] Add store merging unit tests\n\n\t* gimple-ssa-store-merging.c: Include selftest.h\n\t(verify_array_eq): New function.\n\t(verify_shift_bytes_in_array): Likewise.\n\t(verify_shift_bytes_in_array_right): Likewise.\n\t(verify_clear_bit_region): Likewise.\n\t(verify_clear_bit_region_be): Likewise.\n\t(store_merging_c_tests): Likewise.\n\t* selftest.h (store_merging_c_tests): Declare prototype.\n\t* selftest-run-tests.c (selftest::run_tests): Run\n\tstore_merging_c_tests.\n\nFrom-SVN: r241971", "tree": {"sha": "f87abbe64a4b0d2286f097cc546392dda1375be9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f87abbe64a4b0d2286f097cc546392dda1375be9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c22d8787165e1d8f835bfc3a5e5802c286ace31a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22d8787165e1d8f835bfc3a5e5802c286ace31a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c22d8787165e1d8f835bfc3a5e5802c286ace31a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c22d8787165e1d8f835bfc3a5e5802c286ace31a/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fad3660129f9fc5563eb2f877598a3cd5269b72a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fad3660129f9fc5563eb2f877598a3cd5269b72a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fad3660129f9fc5563eb2f877598a3cd5269b72a"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "09889f987d52409d9e9083f4c21d325c8bcab5ea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c22d8787165e1d8f835bfc3a5e5802c286ace31a", "patch": "@@ -1,3 +1,16 @@\n+2016-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gimple-ssa-store-merging.c: Include selftest.h\n+\t(verify_array_eq): New function.\n+\t(verify_shift_bytes_in_array): Likewise.\n+\t(verify_shift_bytes_in_array_right): Likewise.\n+\t(verify_clear_bit_region): Likewise.\n+\t(verify_clear_bit_region_be): Likewise.\n+\t(store_merging_c_tests): Likewise.\n+\t* selftest.h (store_merging_c_tests): Declare prototype.\n+\t* selftest-run-tests.c (selftest::run_tests): Run\n+\tstore_merging_c_tests.\n+\n 2016-11-08  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.opt (mold-rtx-costs): Delete."}, {"sha": "bd9ba28ee51782eee04e1a35bc05061c2b6e70a1", "filename": "gcc/gimple-ssa-store-merging.c", "status": "modified", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fgimple-ssa-store-merging.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fgimple-ssa-store-merging.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-store-merging.c?ref=c22d8787165e1d8f835bfc3a5e5802c286ace31a", "patch": "@@ -126,6 +126,7 @@\n #include \"tree-eh.h\"\n #include \"target.h\"\n #include \"gimplify-me.h\"\n+#include \"selftest.h\"\n \n /* The maximum size (in bits) of the stores this pass should generate.  */\n #define MAX_STORE_BITSIZE (BITS_PER_WORD)\n@@ -1501,3 +1502,141 @@ make_pass_store_merging (gcc::context *ctxt)\n {\n   return new pass_store_merging (ctxt);\n }\n+\n+#if CHECKING_P\n+\n+namespace selftest {\n+\n+/* Selftests for store merging helpers.  */\n+\n+/* Assert that all elements of the byte arrays X and Y, both of length N\n+   are equal.  */\n+\n+static void\n+verify_array_eq (unsigned char *x, unsigned char *y, unsigned int n)\n+{\n+  for (unsigned int i = 0; i < n; i++)\n+    {\n+      if (x[i] != y[i])\n+\t{\n+\t  fprintf (stderr, \"Arrays do not match.  X:\\n\");\n+\t  dump_char_array (stderr, x, n);\n+\t  fprintf (stderr, \"Y:\\n\");\n+\t  dump_char_array (stderr, y, n);\n+\t}\n+      ASSERT_EQ (x[i], y[i]);\n+    }\n+}\n+\n+/* Test shift_bytes_in_array and that it carries bits across between\n+   bytes correctly.  */\n+\n+static void\n+verify_shift_bytes_in_array (void)\n+{\n+   /* byte 1   | byte 0\n+      00011111 | 11100000.  */\n+  unsigned char orig[2] = { 0xe0, 0x1f };\n+  unsigned char in[2];\n+  memcpy (in, orig, sizeof orig);\n+\n+  unsigned char expected[2] = { 0x80, 0x7f };\n+  shift_bytes_in_array (in, sizeof (in), 2);\n+  verify_array_eq (in, expected, sizeof (in));\n+\n+  memcpy (in, orig, sizeof orig);\n+  memcpy (expected, orig, sizeof orig);\n+  /* Check that shifting by zero doesn't change anything.  */\n+  shift_bytes_in_array (in, sizeof (in), 0);\n+  verify_array_eq (in, expected, sizeof (in));\n+\n+}\n+\n+/* Test shift_bytes_in_array_right and that it carries bits across between\n+   bytes correctly.  */\n+\n+static void\n+verify_shift_bytes_in_array_right (void)\n+{\n+   /* byte 1   | byte 0\n+      00011111 | 11100000.  */\n+  unsigned char orig[2] = { 0x1f, 0xe0};\n+  unsigned char in[2];\n+  memcpy (in, orig, sizeof orig);\n+  unsigned char expected[2] = { 0x07, 0xf8};\n+  shift_bytes_in_array_right (in, sizeof (in), 2);\n+  verify_array_eq (in, expected, sizeof (in));\n+\n+  memcpy (in, orig, sizeof orig);\n+  memcpy (expected, orig, sizeof orig);\n+  /* Check that shifting by zero doesn't change anything.  */\n+  shift_bytes_in_array_right (in, sizeof (in), 0);\n+  verify_array_eq (in, expected, sizeof (in));\n+}\n+\n+/* Test clear_bit_region that it clears exactly the bits asked and\n+   nothing more.  */\n+\n+static void\n+verify_clear_bit_region (void)\n+{\n+  /* Start with all bits set and test clearing various patterns in them.  */\n+  unsigned char orig[3] = { 0xff, 0xff, 0xff};\n+  unsigned char in[3];\n+  unsigned char expected[3];\n+  memcpy (in, orig, sizeof in);\n+\n+  /* Check zeroing out all the bits.  */\n+  clear_bit_region (in, 0, 3 * BITS_PER_UNIT);\n+  expected[0] = expected[1] = expected[2] = 0;\n+  verify_array_eq (in, expected, sizeof in);\n+\n+  memcpy (in, orig, sizeof in);\n+  /* Leave the first and last bits intact.  */\n+  clear_bit_region (in, 1, 3 * BITS_PER_UNIT - 2);\n+  expected[0] = 0x1;\n+  expected[1] = 0;\n+  expected[2] = 0x80;\n+  verify_array_eq (in, expected, sizeof in);\n+}\n+\n+/* Test verify_clear_bit_region_be that it clears exactly the bits asked and\n+   nothing more.  */\n+\n+static void\n+verify_clear_bit_region_be (void)\n+{\n+  /* Start with all bits set and test clearing various patterns in them.  */\n+  unsigned char orig[3] = { 0xff, 0xff, 0xff};\n+  unsigned char in[3];\n+  unsigned char expected[3];\n+  memcpy (in, orig, sizeof in);\n+\n+  /* Check zeroing out all the bits.  */\n+  clear_bit_region_be (in, BITS_PER_UNIT - 1, 3 * BITS_PER_UNIT);\n+  expected[0] = expected[1] = expected[2] = 0;\n+  verify_array_eq (in, expected, sizeof in);\n+\n+  memcpy (in, orig, sizeof in);\n+  /* Leave the first and last bits intact.  */\n+  clear_bit_region_be (in, BITS_PER_UNIT - 2, 3 * BITS_PER_UNIT - 2);\n+  expected[0] = 0x80;\n+  expected[1] = 0;\n+  expected[2] = 0x1;\n+  verify_array_eq (in, expected, sizeof in);\n+}\n+\n+\n+/* Run all of the selftests within this file.  */\n+\n+void\n+store_merging_c_tests (void)\n+{\n+  verify_shift_bytes_in_array ();\n+  verify_shift_bytes_in_array_right ();\n+  verify_clear_bit_region ();\n+  verify_clear_bit_region_be ();\n+}\n+\n+} // namespace selftest\n+#endif /* CHECKING_P.  */"}, {"sha": "a4cdb555436b5488f2f936cc4a047186520daed2", "filename": "gcc/selftest-run-tests.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fselftest-run-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fselftest-run-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-run-tests.c?ref=c22d8787165e1d8f835bfc3a5e5802c286ace31a", "patch": "@@ -82,6 +82,8 @@ selftest::run_tests ()\n   if (targetm.run_target_selftests)\n     targetm.run_target_selftests ();\n \n+  store_merging_c_tests ();\n+\n   /* Run any lang-specific selftests.  */\n   lang_hooks.run_lang_selftests ();\n "}, {"sha": "dcce474be6e1899e46f7a9c0d1560e0b7eb60369", "filename": "gcc/selftest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c22d8787165e1d8f835bfc3a5e5802c286ace31a/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=c22d8787165e1d8f835bfc3a5e5802c286ace31a", "patch": "@@ -179,6 +179,7 @@ extern void selftest_c_tests ();\n extern void spellcheck_c_tests ();\n extern void spellcheck_tree_c_tests ();\n extern void sreal_c_tests ();\n+extern void store_merging_c_tests ();\n extern void typed_splay_tree_c_tests ();\n extern void tree_c_tests ();\n extern void tree_cfg_c_tests ();"}]}