{"sha": "72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkMTk1MDVlZWY2NGQyZDljMzdkOGFhYmYxZmZmYjMyNjdkNWQwZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-19T07:11:18Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-19T07:11:18Z"}, "message": "regs.h (END_HARD_REGNO): Delete.\n\ngcc/\n\t* regs.h (END_HARD_REGNO): Delete.\n\t(END_REGNO): Move to...\n\t* rtl.h: ...here.\n\t* bt-load.c (note_btr_set): Use END_REGNO instead of END_HARD_REGNO.\n\t* caller-save.c (mark_set_regs): Likewise.\n\t* combine.c (move_deaths, distribute_notes): Likewise.\n\t* cse.c (invalidate, invalidate_for_call): Likewise.\n\t* df-scan.c (df_ref_record): Likewise.\n\t* postreload-gcse.c (reg_changed_after_insn_p): Likewise.\n\t(record_last_reg_set_info): Likewise.\n\t* reg-stack.c (convert_regs_exit): Likewise.\n\t* reload.c (reg_overlap_mentioned_for_reload_p): Likewise.\n\t* resource.c (update_live_status): Likewise.\n\t* rtlanal.c (find_reg_fusage, find_regno_fusage): Likewise.\n\nFrom-SVN: r223343", "tree": {"sha": "beb548b65d6faefd74cb108441dc434970a741e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beb548b65d6faefd74cb108441dc434970a741e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9188b2863c0a2b6c91dbd6e6e373fada6b34f225", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9188b2863c0a2b6c91dbd6e6e373fada6b34f225"}], "stats": {"total": 66, "additions": 41, "deletions": 25}, "files": [{"sha": "1cb488ece91f2094b3fc5186faea9cfcbe4ffec7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -1,3 +1,20 @@\n+2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* regs.h (END_HARD_REGNO): Delete.\n+\t(END_REGNO): Move to...\n+\t* rtl.h: ...here.\n+\t* bt-load.c (note_btr_set): Use END_REGNO instead of END_HARD_REGNO.\n+\t* caller-save.c (mark_set_regs): Likewise.\n+\t* combine.c (move_deaths, distribute_notes): Likewise.\n+\t* cse.c (invalidate, invalidate_for_call): Likewise.\n+\t* df-scan.c (df_ref_record): Likewise.\n+\t* postreload-gcse.c (reg_changed_after_insn_p): Likewise.\n+\t(record_last_reg_set_info): Likewise.\n+\t* reg-stack.c (convert_regs_exit): Likewise.\n+\t* reload.c (reg_overlap_mentioned_for_reload_p): Likewise.\n+\t* resource.c (update_live_status): Likewise.\n+\t* rtlanal.c (find_reg_fusage, find_regno_fusage): Likewise.\n+\n 2015-05-19  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* rtl.h (reg_info): Add an nregs field."}, {"sha": "fe646619c7354e968764045459e890230bac55ef", "filename": "gcc/bt-load.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fbt-load.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fbt-load.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbt-load.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -443,7 +443,7 @@ note_btr_set (rtx dest, const_rtx set ATTRIBUTE_UNUSED, void *data)\n   if (!REG_P (dest))\n     return;\n   regno = REGNO (dest);\n-  end_regno = END_HARD_REGNO (dest);\n+  end_regno = END_REGNO (dest);\n   for (; regno < end_regno; regno++)\n     if (TEST_HARD_REG_BIT (all_btrs, regno))\n       {"}, {"sha": "673a47051da184e80bb9fb9046b93ef10cb764a6", "filename": "gcc/caller-save.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -992,7 +992,7 @@ mark_set_regs (rtx reg, const_rtx setter ATTRIBUTE_UNUSED, void *data)\n \t   && REGNO (reg) < FIRST_PSEUDO_REGISTER)\n     {\n       regno = REGNO (reg);\n-      endregno = END_HARD_REGNO (reg);\n+      endregno = END_REGNO (reg);\n     }\n   else\n     return;"}, {"sha": "a90849ed0e98dc23fbd56f0eb733b5f0bc8adf2b", "filename": "gcc/combine.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -13454,8 +13454,8 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx_insn *to_insn,\n \t\t  > GET_MODE_SIZE (GET_MODE (x))))\n \t    {\n \t      unsigned int deadregno = REGNO (XEXP (note, 0));\n-\t      unsigned int deadend = END_HARD_REGNO (XEXP (note, 0));\n-\t      unsigned int ourend = END_HARD_REGNO (x);\n+\t      unsigned int deadend = END_REGNO (XEXP (note, 0));\n+\t      unsigned int ourend = END_REGNO (x);\n \t      unsigned int i;\n \n \t      for (i = deadregno; i < deadend; i++)\n@@ -13475,7 +13475,7 @@ move_deaths (rtx x, rtx maybe_kill_insn, int from_luid, rtx_insn *to_insn,\n \t\t   && regno < FIRST_PSEUDO_REGISTER\n \t\t   && REG_NREGS (x) > 1)\n \t    {\n-\t      unsigned int ourend = END_HARD_REGNO (x);\n+\t      unsigned int ourend = END_REGNO (x);\n \t      unsigned int i, offset;\n \t      rtx oldnotes = 0;\n \n@@ -14070,7 +14070,7 @@ distribute_notes (rtx notes, rtx_insn *from_insn, rtx_insn *i3, rtx_insn *i2,\n \n \t      if (place && REG_NREGS (XEXP (note, 0)) > 1)\n \t\t{\n-\t\t  unsigned int endregno = END_HARD_REGNO (XEXP (note, 0));\n+\t\t  unsigned int endregno = END_REGNO (XEXP (note, 0));\n \t\t  bool all_used = true;\n \t\t  unsigned int i;\n "}, {"sha": "aa65b1e72d0eed235ff4fb22270443f3e6a4ccfb", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -1894,7 +1894,7 @@ invalidate (rtx x, machine_mode full_mode)\n \t  {\n \t    HOST_WIDE_INT in_table\n \t      = TEST_HARD_REG_BIT (hard_regs_in_table, regno);\n-\t    unsigned int endregno = END_HARD_REGNO (x);\n+\t    unsigned int endregno = END_REGNO (x);\n \t    unsigned int tregno, tendregno, rn;\n \t    struct table_elt *p, *next;\n \n@@ -1920,7 +1920,7 @@ invalidate (rtx x, machine_mode full_mode)\n \t\t      continue;\n \n \t\t    tregno = REGNO (p->exp);\n-\t\t    tendregno = END_HARD_REGNO (p->exp);\n+\t\t    tendregno = END_REGNO (p->exp);\n \t\t    if (tendregno > regno && tregno < endregno)\n \t\t      remove_from_table (p, hash);\n \t\t  }\n@@ -2139,7 +2139,7 @@ invalidate_for_call (void)\n \t    continue;\n \n \t  regno = REGNO (p->exp);\n-\t  endregno = END_HARD_REGNO (p->exp);\n+\t  endregno = END_REGNO (p->exp);\n \n \t  for (i = regno; i < endregno; i++)\n \t    if (TEST_HARD_REG_BIT (regs_invalidated_by_call, i))"}, {"sha": "7aaa0f964ca5296fe909de04c328b64d357f8873", "filename": "gcc/df-scan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -2624,7 +2624,7 @@ df_ref_record (enum df_ref_class cl,\n \t  endregno = regno + subreg_nregs (reg);\n \t}\n       else\n-\tendregno = END_HARD_REGNO (reg);\n+\tendregno = END_REGNO (reg);\n \n       /*  If this is a multiword hardreg, we create some extra\n \t  datastructures that will enable us to easily build REG_DEAD"}, {"sha": "81887678ee157827622dee0f6234c84c39bc20c6", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -551,7 +551,7 @@ reg_changed_after_insn_p (rtx x, int cuid)\n   unsigned int regno, end_regno;\n \n   regno = REGNO (x);\n-  end_regno = END_HARD_REGNO (x);\n+  end_regno = END_REGNO (x);\n   do\n     if (reg_avail_info[regno] > cuid)\n       return true;\n@@ -720,7 +720,7 @@ record_last_reg_set_info (rtx_insn *insn, rtx reg)\n   unsigned int regno, end_regno;\n \n   regno = REGNO (reg);\n-  end_regno = END_HARD_REGNO (reg);\n+  end_regno = END_REGNO (reg);\n   do\n     reg_avail_info[regno] = INSN_CUID (insn);\n   while (++regno < end_regno);"}, {"sha": "5c8b83b20cbfffa96d4b8946d1eaa97e748c4935", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -2677,7 +2677,7 @@ convert_regs_exit (void)\n   if (retvalue)\n     {\n       value_reg_low = REGNO (retvalue);\n-      value_reg_high = END_HARD_REGNO (retvalue) - 1;\n+      value_reg_high = END_REGNO (retvalue) - 1;\n     }\n \n   output_stack = &BLOCK_INFO (EXIT_BLOCK_PTR_FOR_FN (cfun))->stack_in;"}, {"sha": "023d631ea4614cc3065d24ca00f42bf2db08e3c8", "filename": "gcc/regs.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -286,14 +286,6 @@ end_hard_regno (machine_mode mode, unsigned int regno)\n   return regno + hard_regno_nregs[regno][(int) mode];\n }\n \n-/* Likewise for hard register X.  */\n-\n-#define END_HARD_REGNO(X) END_REGNO (X)\n-\n-/* Likewise for hard or pseudo register X.  */\n-\n-#define END_REGNO(X) (REGNO (X) + REG_NREGS (X))\n-\n /* Add to REGS all the registers required to store a value of mode MODE\n    in register REGNO.  */\n "}, {"sha": "f2482fcae215ccea451c6e3428897e37b5911930", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -6590,7 +6590,7 @@ reg_overlap_mentioned_for_reload_p (rtx x, rtx in)\n \t  return 0;\n \t}\n \n-      endregno = END_HARD_REGNO (x);\n+      endregno = END_REGNO (x);\n \n       return refers_to_regno_for_reload_p (regno, endregno, in, (rtx*) 0);\n     }"}, {"sha": "a9c0d0ad639081dd24a9fd4b72ffc0cb4a1fb6f4", "filename": "gcc/resource.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -115,7 +115,7 @@ update_live_status (rtx dest, const_rtx x, void *data ATTRIBUTE_UNUSED)\n   else\n     {\n       first_regno = REGNO (dest);\n-      last_regno = END_HARD_REGNO (dest);\n+      last_regno = END_REGNO (dest);\n     }\n \n   if (GET_CODE (x) == CLOBBER)"}, {"sha": "fb7b6416d3f88e29b3f8c15de9adcb654f29849d", "filename": "gcc/rtl.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -1733,6 +1733,13 @@ rhs_regno (const_rtx x)\n   return REG_CHECK (x)->regno;\n }\n \n+/* Return the final register in REG X plus one.  */\n+static inline unsigned int\n+END_REGNO (const_rtx x)\n+{\n+  return REGNO (x) + REG_NREGS (x);\n+}\n+\n /* Change the REGNO and REG_NREGS of REG X to the specified values,\n    bypassing the df machinery.  */\n static inline void"}, {"sha": "1b59e32ff1ad1e52d6504347fa105f3b428215b2", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d19505eef64d2d9c37d8aabf1fffb3267d5d0e/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=72d19505eef64d2d9c37d8aabf1fffb3267d5d0e", "patch": "@@ -2018,7 +2018,7 @@ find_reg_fusage (const_rtx insn, enum rtx_code code, const_rtx datum)\n \n       if (regno < FIRST_PSEUDO_REGISTER)\n \t{\n-\t  unsigned int end_regno = END_HARD_REGNO (datum);\n+\t  unsigned int end_regno = END_REGNO (datum);\n \t  unsigned int i;\n \n \t  for (i = regno; i < end_regno; i++)\n@@ -2052,7 +2052,7 @@ find_regno_fusage (const_rtx insn, enum rtx_code code, unsigned int regno)\n       if (GET_CODE (op = XEXP (link, 0)) == code\n \t  && REG_P (reg = XEXP (op, 0))\n \t  && REGNO (reg) <= regno\n-\t  && END_HARD_REGNO (reg) > regno)\n+\t  && END_REGNO (reg) > regno)\n \treturn 1;\n     }\n "}]}