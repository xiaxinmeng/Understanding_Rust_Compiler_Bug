{"sha": "f1384257847568aae219dcd8c629f13281b81557", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjEzODQyNTc4NDc1NjhhYWUyMTlkY2Q4YzYyOWYxMzI4MWI4MTU1Nw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2003-03-13T10:35:47Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2003-03-13T10:35:47Z"}, "message": "rs6000.c (rs6000_flag_pic): Delete.\n\n\t* config/rs6000/rs6000.c (rs6000_flag_pic): Delete.\n\t(rs6000_xcoff_encode_section_info): #ifdef TARGET_XCOFF.\n\t(rs6000_binds_local_p, TARGET_BINDS_LOCAL_P): #if TARGET_MACHO.\n\t(rs6000_override_options): Don't clear flag_pic for ABI_AIX.\n\t(rs6000_legitimize_address): Formatting.\n\t(rs6000_emit_move): Likewise.\n\t(rs6000_return_addr): Test ABI_AIX as well as flag_pic.\n\t(rs6000_emit_prologue <save_LR_around_toc_setup>): Likewise.\n\t(rs6000_elf_select_section): Comment reason for shlib being\n\tset for ABI_AIX.\n\t(rs6000_elf_unique_section): Likewise.\n\t(rs6000_elf_encode_section_info): Test !TARGET_AIX as well as ABI_AIX.\n\t* config/rs6000/rs6000.h (LEGITIMATE_LO_SUM_ADDRESS_P): Test ABI_AIX\n\tas well as flag_pic.\n\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n\t* config/rs6000/linux64.h (TARGET_ENCODE_SECTION_INFO): Don't define.\n\nFrom-SVN: r64304", "tree": {"sha": "aec664e89b8aa98830d138a2b534718720f3110a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aec664e89b8aa98830d138a2b534718720f3110a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1384257847568aae219dcd8c629f13281b81557", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1384257847568aae219dcd8c629f13281b81557", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1384257847568aae219dcd8c629f13281b81557", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1384257847568aae219dcd8c629f13281b81557/comments", "author": null, "committer": null, "parents": [{"sha": "599aedd920f72277c37d7651805f3719e9ff25f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599aedd920f72277c37d7651805f3719e9ff25f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599aedd920f72277c37d7651805f3719e9ff25f0"}], "stats": {"total": 89, "additions": 56, "deletions": 33}, "files": [{"sha": "506f73c9f9f79943399d52477cfbe7f3b0989581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1384257847568aae219dcd8c629f13281b81557/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1384257847568aae219dcd8c629f13281b81557/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1384257847568aae219dcd8c629f13281b81557", "patch": "@@ -1,3 +1,23 @@\n+2003-03-13  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* config/rs6000/rs6000.c (rs6000_flag_pic): Delete.\n+\t(rs6000_xcoff_encode_section_info): #ifdef TARGET_XCOFF.\n+\t(rs6000_binds_local_p, TARGET_BINDS_LOCAL_P): #if TARGET_MACHO.\n+\t(rs6000_override_options): Don't clear flag_pic for ABI_AIX.\n+\t(rs6000_legitimize_address): Formatting.\n+\t(rs6000_emit_move): Likewise.\n+\t(rs6000_return_addr): Test ABI_AIX as well as flag_pic.\n+\t(rs6000_emit_prologue <save_LR_around_toc_setup>): Likewise.\n+\t(rs6000_elf_select_section): Comment reason for shlib being\n+\tset for ABI_AIX.\n+\t(rs6000_elf_unique_section): Likewise.\n+\t(rs6000_elf_encode_section_info): Test !TARGET_AIX as well as ABI_AIX.\n+\t* config/rs6000/rs6000.h (LEGITIMATE_LO_SUM_ADDRESS_P): Test ABI_AIX\n+\tas well as flag_pic.\n+\t* config/rs6000/sysv4.h (SUBTARGET_OVERRIDE_OPTIONS): Likewise.\n+\t(MINIMAL_TOC_SECTION_ASM_OP): Likewise.\n+\t* config/rs6000/linux64.h (TARGET_ENCODE_SECTION_INFO): Don't define.\n+\n 2003-03-13  Richard Henderson  <rth@redhat.com>\n \n \t* emit-rtl.c (try_split): Handle 1-1 splits of call insns properly."}, {"sha": "494dc7ac0d146ad6fca5895e1edc599440b422f5", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=f1384257847568aae219dcd8c629f13281b81557", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler,\n    for 64 bit PowerPC linux.\n-   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -221,9 +221,6 @@ Boston, MA 02111-1307, USA.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-#undef  TARGET_ENCODE_SECTION_INFO\n-#define TARGET_ENCODE_SECTION_INFO  rs6000_xcoff_encode_section_info\n-\n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */\n "}, {"sha": "d8ceb4a71acfaa8e531b72be2e68562285e64d2a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f1384257847568aae219dcd8c629f13281b81557", "patch": "@@ -97,9 +97,6 @@ const char *rs6000_isel_string;\n /* Set to nonzero once AIX common-mode calls have been defined.  */\n static GTY(()) int common_mode_defined;\n \n-/* Private copy of original value of flag_pic for ABI_AIX.  */\n-static int rs6000_flag_pic;\n-\n /* Save information from a \"cmpxx\" operation until the branch or scc is\n    emitted.  */\n rtx rs6000_compare_op0, rs6000_compare_op1;\n@@ -225,10 +222,12 @@ static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n static const char * rs6000_xcoff_strip_name_encoding PARAMS ((const char *));\n static unsigned int rs6000_xcoff_section_type_flags PARAMS ((tree, const char *, int));\n-#endif\n static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n      ATTRIBUTE_UNUSED;\n+#endif\n+#if TARGET_MACHO\n static bool rs6000_binds_local_p PARAMS ((tree));\n+#endif\n static int rs6000_use_dfa_pipeline_interface PARAMS ((void));\n static int rs6000_variable_issue PARAMS ((FILE *, int, rtx, int));\n static bool rs6000_rtx_costs PARAMS ((rtx, int, int, int *));\n@@ -403,8 +402,10 @@ static const char alt_reg_names[][8] =\n #undef TARGET_EXPAND_BUILTIN\n #define TARGET_EXPAND_BUILTIN rs6000_expand_builtin\n \n+#if TARGET_MACHO\n #undef TARGET_BINDS_LOCAL_P\n #define TARGET_BINDS_LOCAL_P rs6000_binds_local_p\n+#endif\n \n #undef TARGET_ASM_OUTPUT_MI_THUNK\n #define TARGET_ASM_OUTPUT_MI_THUNK rs6000_output_mi_thunk\n@@ -637,12 +638,6 @@ rs6000_override_options (default_cpu)\n \t}\n     }\n \n-  if (flag_pic != 0 && DEFAULT_ABI == ABI_AIX)\n-    {\n-      rs6000_flag_pic = flag_pic;\n-      flag_pic = 0;\n-    }\n-\n   /* Set debug flags */\n   if (rs6000_debug_name)\n     {\n@@ -2215,7 +2210,10 @@ rs6000_legitimize_address (x, oldx, mode)\n \n       return force_reg (Pmode, x);\n     }\n-  else if (TARGET_ELF && TARGET_32BIT && TARGET_NO_TOC && ! flag_pic\n+  else if (TARGET_ELF\n+\t   && TARGET_32BIT\n+\t   && TARGET_NO_TOC\n+\t   && ! flag_pic\n \t   && GET_CODE (x) != CONST_INT\n \t   && GET_CODE (x) != CONST_DOUBLE \n \t   && CONSTANT_P (x)\n@@ -2770,7 +2768,8 @@ rs6000_emit_move (dest, source, mode)\n \t}\n \n       if ((TARGET_ELF || DEFAULT_ABI == ABI_DARWIN)\n-\t  && TARGET_NO_TOC && ! flag_pic\n+\t  && TARGET_NO_TOC\n+\t  && ! flag_pic\n \t  && mode == Pmode\n \t  && CONSTANT_P (operands[1])\n \t  && GET_CODE (operands[1]) != HIGH\n@@ -9650,7 +9649,7 @@ rs6000_return_addr (count, frame)\n   /* Currently we don't optimize very well between prolog and body\n      code and for PIC code the code can be actually quite bad, so\n      don't try to be too clever here.  */\n-  if (count != 0 || flag_pic != 0)\n+  if (count != 0 || (DEFAULT_ABI != ABI_AIX && flag_pic))\n     {\n       cfun->machine->ra_needs_full_frame = 1;\n \n@@ -10761,7 +10760,9 @@ rs6000_emit_prologue ()\n        it.  We use R11 for this purpose because emit_load_toc_table\n        can use register 0.  This allows us to use a plain 'blr' to return\n        from the procedure more often.  */\n-    int save_LR_around_toc_setup = (TARGET_ELF && flag_pic != 0\n+    int save_LR_around_toc_setup = (TARGET_ELF\n+\t\t\t\t    && DEFAULT_ABI != ABI_AIX\n+\t\t\t\t    && flag_pic\n \t\t\t\t    && ! info->lr_save_p\n \t\t\t\t    && EXIT_BLOCK_PTR->pred != NULL);\n     if (save_LR_around_toc_setup)\n@@ -12715,6 +12716,10 @@ rs6000_elf_select_section (decl, reloc, align)\n      int reloc;\n      unsigned HOST_WIDE_INT align;\n {\n+  /* Pretend that we're always building for a shared library when\n+     ABI_AIX, because otherwise we end up with dynamic relocations\n+     in read-only sections.  This happens for function pointers,\n+     references to vtables in typeinfo, and probably other cases.  */\n   default_elf_select_section_1 (decl, reloc, align,\n \t\t\t\tflag_pic || DEFAULT_ABI == ABI_AIX);\n }\n@@ -12732,10 +12737,11 @@ rs6000_elf_unique_section (decl, reloc)\n      tree decl;\n      int reloc;\n {\n+  /* As above, pretend that we're always building for a shared library\n+     when ABI_AIX, to avoid dynamic relocations in read-only sections.  */\n   default_unique_section_1 (decl, reloc,\n \t\t\t    flag_pic || DEFAULT_ABI == ABI_AIX);\n }\n-\n \f\n /* If we are referencing a function that is static or is known to be\n    in this file, make the SYMBOL_REF special.  We can use this to indicate\n@@ -12759,7 +12765,7 @@ rs6000_elf_encode_section_info (decl, first)\n       if ((*targetm.binds_local_p) (decl))\n \tSYMBOL_REF_FLAG (sym_ref) = 1;\n \n-      if (DEFAULT_ABI == ABI_AIX)\n+      if (!TARGET_AIX && DEFAULT_ABI == ABI_AIX)\n \t{\n \t  size_t len1 = (DEFAULT_ABI == ABI_AIX) ? 1 : 2;\n \t  size_t len2 = strlen (XSTR (sym_ref, 0));\n@@ -13438,10 +13444,6 @@ rs6000_xcoff_section_type_flags (decl, name, reloc)\n   return flags | (exact_log2 (align) & SECTION_ENTSIZE);\n }\n \n-#endif /* TARGET_XCOFF */\n-\n-/* Note that this is also used for PPC64 Linux.  */\n-\n static void\n rs6000_xcoff_encode_section_info (decl, first)\n      tree decl;\n@@ -13451,18 +13453,19 @@ rs6000_xcoff_encode_section_info (decl, first)\n       && (*targetm.binds_local_p) (decl))\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n }\n+#endif /* TARGET_XCOFF */\n \n-/* Cross-module name binding.  For AIX and PPC64 Linux, which always are\n-   PIC, use private copy of flag_pic.  Darwin does not support overriding\n+#if TARGET_MACHO\n+/* Cross-module name binding.  Darwin does not support overriding\n    functions at dynamic-link time.  */\n \n static bool\n rs6000_binds_local_p (decl)\n      tree decl;\n {\n-  return default_binds_local_p_1 (decl, \n-\tDEFAULT_ABI == ABI_DARWIN ? 0 : flag_pic || rs6000_flag_pic);\n+  return default_binds_local_p_1 (decl, 0);\n }\n+#endif\n \n /* Compute a (partial) cost for rtx X.  Return true if the complete\n    cost has been computed, and false if subexpressions should be"}, {"sha": "84aad60a28bb3ba23ca1a9d99b076f8590864930", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f1384257847568aae219dcd8c629f13281b81557", "patch": "@@ -2103,7 +2103,8 @@ typedef struct rs6000_args\n \n #define LEGITIMATE_LO_SUM_ADDRESS_P(MODE, X, STRICT)\t\\\n   (TARGET_ELF\t\t\t\t\t\t\\\n-   && ! flag_pic && ! TARGET_TOC\t\t\t\\\n+   && (DEFAULT_ABI == ABI_AIX || ! flag_pic)\t\t\\\n+   && ! TARGET_TOC\t\t\t\t\t\\\n    && GET_MODE_NUNITS (MODE) == 1\t\t\t\\\n    && (GET_MODE_BITSIZE (MODE) <= 32 \t\t\t\\\n        || (TARGET_HARD_FLOAT && TARGET_FPRS && (MODE) == DFmode))\t\\"}, {"sha": "b046f3e51be40c4355d11732836b88183fe0c360", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1384257847568aae219dcd8c629f13281b81557/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=f1384257847568aae219dcd8c629f13281b81557", "patch": "@@ -247,8 +247,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n \t     rs6000_sdata_name);\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-  else if (flag_pic &&\t\t\t\t\t\t\t\\\n-\t   (rs6000_sdata == SDATA_EABI || rs6000_sdata == SDATA_SYSV))\t\\\n+  else if (flag_pic && DEFAULT_ABI != ABI_AIX\t\t\t\t\\\n+\t   && (rs6000_sdata == SDATA_EABI\t\t\t\t\\\n+\t       || rs6000_sdata == SDATA_SYSV))\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       rs6000_sdata = SDATA_DATA;\t\t\t\t\t\\\n       error (\"-f%s and -msdata=%s are incompatible\",\t\t\t\\\n@@ -292,7 +293,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n   /* Treat -fPIC the same as -mrelocatable.  */\t\t\t\t\\\n-  if (flag_pic > 1)\t\t\t\t\t\t\t\\\n+  if (flag_pic > 1 && DEFAULT_ABI != ABI_AIX)\t\t\t\t\\\n     target_flags |= MASK_RELOCATABLE | MASK_MINIMAL_TOC | MASK_NO_FP_IN_TOC; \\\n \t\t\t\t\t\t\t\t\t\\\n   else if (TARGET_RELOCATABLE)\t\t\t\t\t\t\\\n@@ -421,7 +422,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Put PC relative got entries in .got2.  */\n #define\tMINIMAL_TOC_SECTION_ASM_OP \\\n-  ((TARGET_RELOCATABLE || flag_pic) ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n+  (TARGET_RELOCATABLE || (flag_pic && DEFAULT_ABI != ABI_AIX)\t\t\\\n+   ? \"\\t.section\\t\\\".got2\\\",\\\"aw\\\"\" : \"\\t.section\\t\\\".got1\\\",\\\"aw\\\"\")\n \n #define\tSDATA_SECTION_ASM_OP \"\\t.section\\t\\\".sdata\\\",\\\"aw\\\"\"\n #define\tSDATA2_SECTION_ASM_OP \"\\t.section\\t\\\".sdata2\\\",\\\"a\\\"\""}]}