{"sha": "2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEzZWRhYzlhZDZmMDM1Nzg0YjFlZWNjZmE2ZmM3ZDgyMjQ4MDc3Zg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-05-20T22:44:58Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-05-20T22:44:58Z"}, "message": "warn_summary, [...]: New scripts from Kaveh Ghazi and Alexandre Oliva respectively.\n\n        * warn_summary, test_summary: New scripts from\n        Kaveh Ghazi and Alexandre Oliva respectively.\n\nFrom-SVN: r19917", "tree": {"sha": "5267bf1e22e678ebdd30f1423f999e956347db92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5267bf1e22e678ebdd30f1423f999e956347db92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/comments", "author": null, "committer": null, "parents": [{"sha": "6601d02b2305194f515df78de2ec9f307c9b9a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6601d02b2305194f515df78de2ec9f307c9b9a77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6601d02b2305194f515df78de2ec9f307c9b9a77"}], "stats": {"total": 167, "additions": 167, "deletions": 0}, "files": [{"sha": "6d4de03b257687bea5185c607fbcbeda2bc678dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "patch": "@@ -1,5 +1,8 @@\n Wed May 20 22:28:34 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* warn_summary, test_summary: New scripts from\n+\tKaveh Ghazi and Alexandre Oliva respectively.\n+\n \t* gcse.c (current_function_calls_longjmp): Declare.\n \n 1998-05-20  Jason Merrill  <jason@yorick.cygnus.com>"}, {"sha": "bc4a538ab617c104858b8526e9ac8f91eeabefc7", "filename": "gcc/test_summary", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2Ftest_summary", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2Ftest_summary", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftest_summary?ref=2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "patch": "@@ -0,0 +1,112 @@\n+#! /bin/sh\n+\n+# (C) 1998 Alexandre Oliva <oliva@dcc.unicamp.br>\n+\n+# This script is Free Software, and it can be copied, distributed and\n+# modified as defined in the GNU General Public License.  A copy of\n+# its license can be downloaded from http://www.gnu.org/copyleft/gpl.html\n+\n+# This script processes *.{sum,log} files, producing a shell-script\n+# that sends e-mail to the appropriate lists and renames files to\n+# *.sent.  It currently handles gcc and egcs, but it should be quite\n+# easy to modify it to handle other packages and its mailing lists.\n+\n+# The scripts assumes it is run in the root directory of the build\n+# tree, and it will include all .sum files it finds in the mail\n+# report.\n+\n+# configure flags are extracted from ./config.status\n+\n+# if the BOOT_CFLAGS environment variable is set, it will be included\n+# in the mail report too.\n+\n+# The usage pattern of this script is as follows:\n+\n+# summarize | more   # so as to observe what should be done\n+\n+# summarize | sh     # so as to actually send e-mail and move log files\n+\n+# It accepts a few command line arguments.  For example:\n+# -o: re-reads logs that have been mailed already (.sum.sent)\n+# -t: prevents logs from being renamed\n+# -m: specify the e-mail address to send notes to.  An appropriate default should be selected from the log files.\n+# -f: force reports to be mailed; if omitted, only reports that differ from the sent.* version are sent\n+: ${filesuffix=}; export fileprefix\n+: ${move=true}; export move\n+: ${forcemail=false}; export forcemail\n+while true; do\n+    case \"$1\" in \n+      -o) filesuffix=.sent; move=false; : ${mailto=nobody}; shift;;\n+      -t) move=false; shift;;\n+      -m) mailto=$2; forcemail=true; shift 2;;\n+      -f) unset mailto; forcemail=true; shift;;\n+      *) break;;\n+    esac\n+done\n+: ${mailto=\"\\\" address \\\"\"}; export mailto\n+files=`find . -name \\*.sum$filesuffix -print`\n+anyfile=false anychange=$forcemail &&\n+for file in $files; do\n+    [ -f $file ] &&\n+    anyfile=true &&\n+    { $anychange ||\n+      anychange=`diff -u $file.sent $file 2>/dev/null |\n+\tif test ! -f $file.sent ||\n+\t   egrep '^[-+](XPASS|FAIL)' >/dev/null; then\n+\t    echo true\n+\telse\n+\t    echo false\n+\tfi\n+      `\n+    }\n+    true\n+done &&\n+$anyfile &&\n+if $forcemail || $anychange; then :; else mailto=nobody; fi &&\n+gawk '\n+BEGIN {\n+  lang=\"\";\n+  print \"cat <<EOF |\";\n+}\n+$1 ~ /\\/configure$/ { $1 = \"configure flags:\"; configflags = $0 }\n+/^Target / { if (host != \"\") next; else host = $3; }\n+/^Native / { if (host != \"\") next; else host = $4; }\n+/^[ \t]*=== [^ \t]+ tests ===/ {\n+  if (lang == \"\") lang = \" \"$2\" \"; else lang = \" \";\n+}\n+/\\/ss(\\/|c? )/ {\n+  program=\"ss\"; comment=\"\";\n+  if (lang == \" \") address=\"nobody\";\n+  else if (lang == \" gcc \") address=\"gcc2@cygnus.com\";\n+  else address=\"g++@cygnus.com\";\n+}\n+/\\/egcsh?((-[^ ]*)?\\/|c?[ -])/ {\n+  address=\"egcs@cygnus.com\";\n+  if (version == 0) version=\"egcs\";\n+}\n+/--disable-haifa/ { prefix=\"haifa-disabled \"; }\n+/--enable-haifa/ { prefix=\"haifa-enabled \"; }\n+$2 == \"version\" { save = $0; $1 = \"\"; $2 = \"\"; version = $0; gsub(/^ */, \"\", version); $0 = save; }\n+/Summary ===/ { print \"\"; print; blanks=1; }\n+/tests ===/ || /^(Target|Host|Native)/ || $2 == \"version\" { print; blanks=1; }\n+/^(XPASS|FAIL|# of )/ { print; }\n+# dumpall != 0 && /^X?(PASS|FAIL|UNTESTED)|^testcase/ { dumpall=0; }\n+# dumpall != 0 { print; }\n+# /^FAIL/ { dumpall=1; }\n+/^$/ && blanks>0 { print; --blanks; }\n+END { if (lang != \"\") {\n+  print configflags;\n+  '${BOOT_CFLAGS+'print \"BOOT_CFLAGS='\"${BOOT_CFLAGS}\"'\";'}'\n+  if (boot_cflags != 0) print boot_cflags;\n+  print \"EOF\";\n+  print \"Mail -s \\\"Results for \" prefix version lang \"testsuite on \" host \"\\\" '\"${mailto}\"' &&\";\n+}}\n+{ next; }\n+' ./config.status $files | sed \"s/\\([\\`\\$\\\\\\\\]\\)/\\\\\\\\\\\\1/g\" &&\n+if $move; then\n+    for file in $files `ls -1 $files | sed s/sum$/log/`; do\n+      [ -f $file ] && echo \"mv `pwd`/$file `pwd`/$file.sent &&\"\n+    done\n+fi &&\n+echo true\n+exit 0"}, {"sha": "1fb62b03e6cea3644e7f7601bfeeb4c3b5a3fd9c", "filename": "gcc/warn_summary", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2Fwarn_summary", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a3edac9ad6f035784b1eeccfa6fc7d82248077f/gcc%2Fwarn_summary", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwarn_summary?ref=2a3edac9ad6f035784b1eeccfa6fc7d82248077f", "patch": "@@ -0,0 +1,52 @@\n+#!/bin/sh\n+# This script parses the output of a gcc bootstrap when using warning\n+# flags and determines various statistics.\n+#\n+# By Kaveh Ghazi  (ghazi@caip.rutgers.edu)  12/13/97.\n+\n+# This function displays all warnings from stage3 of the bootstrap.\n+stage3warns()\n+{\n+# Some awks choke on long lines so grep them out.\n+  grep -v libf2c.a $1 | \\\n+\t$AWK '/ warning: /{if(t==1)print} ; /stage2/{if(t==0)t=1}'\n+}\n+\n+# Find a good awk.\n+if test -z \"$AWK\" ; then\n+  for AWK in gawk nawk awk ; do\n+    if type $AWK 2>&1 | grep 'not found' > /dev/null 2>&1 ; then\n+      :\n+    else\n+      break\n+    fi\n+  done\n+fi\n+\n+for file in \"$@\" ; do\n+\n+  count=`stage3warns $file | wc -l`\n+  echo There are $count warnings in stage3 of this bootstrap.\n+\n+  echo\n+  echo Number of warnings per file:\n+  stage3warns $file | $AWK -F: '{print$1}' | sort | uniq -c | sort -nr\n+\n+  echo\n+  echo Number of warning types:\n+  stage3warns $file | sed 's/.*warning: //; \n+\t\ts/`\\(int\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(char\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(inline\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(else\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(return\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(static\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(extern\\)'\"'\"'/\"\\1\"/g;\n+\t\ts/`\\(longjmp\\)'\"'\"' or `\\(vfork\\)'\"'\"'/\"\\1\" or \"\\2\"/g;\n+\t\ts/`'\"[^']*'/\"'`???'\"'/g;\"'\n+\t\ts/.*format, .* arg (arg [0-9]*)/??? format, ??? arg (arg ???)/;\n+\t\ts/(arg [0-9]*)/(arg ???)/;\n+\t\ts/\"\\([^\"]*\\)\"/`\\1'\"'\"'/g' | \\\n+\tsort | uniq -c | sort -nr\n+\n+done"}]}