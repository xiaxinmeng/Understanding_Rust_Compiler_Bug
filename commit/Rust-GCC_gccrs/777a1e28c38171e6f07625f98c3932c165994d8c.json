{"sha": "777a1e28c38171e6f07625f98c3932c165994d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzc3YTFlMjhjMzgxNzFlNmYwNzYyNWY5OGMzOTMyYzE2NTk5NGQ4Yw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-10-29T15:11:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-10-29T15:11:47Z"}, "message": "stl_function.h (_Select1st<>::operator()): Add templatized overloads.\n\n2010-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_function.h (_Select1st<>::operator()): Add\n\ttemplatized overloads.\n\t* include/bits/hashtable_policy.h (_Select1st): Remove; revert\n\teverything to std::_Select1st.\n\t* include/bits/unordered_map.h: Likewise.\n\nFrom-SVN: r166062", "tree": {"sha": "2e6e2a78af9027099a85be853bab33b84d1386ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e6e2a78af9027099a85be853bab33b84d1386ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/777a1e28c38171e6f07625f98c3932c165994d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777a1e28c38171e6f07625f98c3932c165994d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777a1e28c38171e6f07625f98c3932c165994d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777a1e28c38171e6f07625f98c3932c165994d8c/comments", "author": null, "committer": null, "parents": [{"sha": "f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f87bd04b07ddd4c86f6da5c82585bd6de2ce1e73"}], "stats": {"total": 72, "additions": 42, "deletions": 30}, "files": [{"sha": "88918491263c7a43536907e37f17aaa9338e73cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=777a1e28c38171e6f07625f98c3932c165994d8c", "patch": "@@ -1,3 +1,11 @@\n+2010-10-29  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_function.h (_Select1st<>::operator()): Add\n+\ttemplatized overloads.\n+\t* include/bits/hashtable_policy.h (_Select1st): Remove; revert\n+\teverything to std::_Select1st.\n+\t* include/bits/unordered_map.h: Likewise.\n+\n 2010-10-28  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR libstdc++/44436 (partial)"}, {"sha": "d8d2af5d64ecbbcade87334776f5f23d351324bf", "filename": "libstdc++-v3/include/bits/hashtable_policy.h", "status": "modified", "additions": 12, "deletions": 20, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fhashtable_policy.h?ref=777a1e28c38171e6f07625f98c3932c165994d8c", "patch": "@@ -56,14 +56,6 @@ namespace __detail\n       return __distance_fw(__first, __last, _Tag());\n     }\n \n-  struct _Select1st\n-  {\n-    template<typename _Pair>\n-      const typename _Pair::first_type&\n-      operator()(const _Pair& __pair) const\n-      { return __pair.first; }\n-  };\n-\n   // Auxiliary types used for all instantiations of _Hashtable: nodes\n   // and iterators.\n   \n@@ -511,13 +503,13 @@ namespace __detail\n     struct _Map_base { };\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    struct _Map_base<_Key, _Pair, _Select1st, false, _Hashtable>\n+    struct _Map_base<_Key, _Pair, std::_Select1st<_Pair>, false, _Hashtable>\n     {\n       typedef typename _Pair::second_type mapped_type;\n     };\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    struct _Map_base<_Key, _Pair, _Select1st, true, _Hashtable>\n+    struct _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>\n     {\n       typedef typename _Pair::second_type mapped_type;\n \n@@ -537,9 +529,9 @@ namespace __detail\n     };\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    typename _Map_base<_Key, _Pair, _Select1st,\n+    typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n \t\t       true, _Hashtable>::mapped_type&\n-    _Map_base<_Key, _Pair, _Select1st, true, _Hashtable>::\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n     operator[](const _Key& __k)\n     {\n       _Hashtable* __h = static_cast<_Hashtable*>(this);\n@@ -556,9 +548,9 @@ namespace __detail\n     }\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    typename _Map_base<_Key, _Pair, _Select1st,\n+    typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n \t\t       true, _Hashtable>::mapped_type&\n-    _Map_base<_Key, _Pair, _Select1st, true, _Hashtable>::\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n     operator[](_Key&& __k)\n     {\n       _Hashtable* __h = static_cast<_Hashtable*>(this);\n@@ -576,10 +568,10 @@ namespace __detail\n     }\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    typename _Map_base<_Key, _Pair, _Select1st,\n+    typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n \t\t       true, _Hashtable>::mapped_type&\n-    _Map_base<_Key, _Pair, _Select1st, true, _Hashtable>::\n-     at(const _Key& __k)\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n+    at(const _Key& __k)\n     {\n       _Hashtable* __h = static_cast<_Hashtable*>(this);\n       typename _Hashtable::_Hash_code_type __code = __h->_M_hash_code(__k);\n@@ -594,10 +586,10 @@ namespace __detail\n     }\n \n   template<typename _Key, typename _Pair, typename _Hashtable>\n-    const typename _Map_base<_Key, _Pair, _Select1st,\n+    const typename _Map_base<_Key, _Pair, std::_Select1st<_Pair>,\n \t\t\t     true, _Hashtable>::mapped_type&\n-    _Map_base<_Key, _Pair, _Select1st, true, _Hashtable>::\n-     at(const _Key& __k) const\n+    _Map_base<_Key, _Pair, std::_Select1st<_Pair>, true, _Hashtable>::\n+    at(const _Key& __k) const\n     {\n       const _Hashtable* __h = static_cast<const _Hashtable*>(this);\n       typename _Hashtable::_Hash_code_type __code = __h->_M_hash_code(__k);"}, {"sha": "a5f5e2558253e3d4e2abf25dd708ee3b85f204a7", "filename": "libstdc++-v3/include/bits/stl_function.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_function.h?ref=777a1e28c38171e6f07625f98c3932c165994d8c", "patch": "@@ -487,6 +487,18 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const typename _Pair::first_type&\n       operator()(const _Pair& __x) const\n       { return __x.first; }\n+\n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      template<typename _Pair2>\n+        typename _Pair2::first_type&\n+        operator()(_Pair2& __x) const\n+        { return __x.first; }\n+\n+      template<typename _Pair2>\n+        const typename _Pair2::first_type&\n+        operator()(const _Pair2& __x) const\n+        { return __x.first; }\n+#endif\n     };\n \n   template<typename _Pair>"}, {"sha": "08058c1a94f8df2164ad4184111148220e0698e9", "filename": "libstdc++-v3/include/bits/unordered_map.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/777a1e28c38171e6f07625f98c3932c165994d8c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funordered_map.h?ref=777a1e28c38171e6f07625f98c3932c165994d8c", "patch": "@@ -41,14 +41,14 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t   bool __cache_hash_code = false>\n     class __unordered_map\n     : public _Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc,\n-\t\t\t__detail::_Select1st, _Pred, \n+\t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred, \n \t\t\t_Hash, __detail::_Mod_range_hashing,\n \t\t\t__detail::_Default_ranged_hash,\n \t\t\t__detail::_Prime_rehash_policy,\n \t\t\t__cache_hash_code, false, true>\n     {\n       typedef _Hashtable<_Key, std::pair<const _Key, _Tp>, _Alloc,\n-\t\t\t __detail::_Select1st, _Pred,\n+\t\t\t std::_Select1st<std::pair<const _Key, _Tp> >, _Pred,\n \t\t\t _Hash, __detail::_Mod_range_hashing,\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n@@ -69,7 +69,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t      const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n-\t      __eql, __detail::_Select1st(), __a)\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n       template<typename _InputIterator>\n@@ -80,7 +80,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\tconst allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n-\t\t__eql, __detail::_Select1st(), __a)\n+\t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n \t{ }\n \n       __unordered_map(initializer_list<value_type> __l,\n@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _Base(__l.begin(), __l.end(), __n, __hf,\n \t      __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n-\t      __eql, __detail::_Select1st(), __a)\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n       __unordered_map&\n@@ -111,15 +111,15 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n     class __unordered_multimap\n     : public _Hashtable<_Key, std::pair<const _Key, _Tp>,\n \t\t\t_Alloc,\n-\t\t\t__detail::_Select1st, _Pred,\n+\t\t\tstd::_Select1st<std::pair<const _Key, _Tp> >, _Pred,\n \t\t\t_Hash, __detail::_Mod_range_hashing,\n \t\t\t__detail::_Default_ranged_hash,\n \t\t\t__detail::_Prime_rehash_policy,\n \t\t\t__cache_hash_code, false, false>\n     {\n       typedef _Hashtable<_Key, std::pair<const _Key, _Tp>,\n \t\t\t _Alloc,\n-\t\t\t __detail::_Select1st, _Pred,\n+\t\t\t std::_Select1st<std::pair<const _Key, _Tp> >, _Pred,\n \t\t\t _Hash, __detail::_Mod_range_hashing,\n \t\t\t __detail::_Default_ranged_hash,\n \t\t\t __detail::_Prime_rehash_policy,\n@@ -140,7 +140,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t   const allocator_type& __a = allocator_type())\n       : _Base(__n, __hf, __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n-\t      __eql, __detail::_Select1st(), __a)\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n \n@@ -152,7 +152,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n \t\t\t     const allocator_type& __a = allocator_type())\n \t: _Base(__f, __l, __n, __hf, __detail::_Mod_range_hashing(),\n \t\t__detail::_Default_ranged_hash(),\n-\t\t__eql, __detail::_Select1st(), __a)\n+\t\t__eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n         { }\n \n       __unordered_multimap(initializer_list<value_type> __l,\n@@ -163,7 +163,7 @@ _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)\n       : _Base(__l.begin(), __l.end(), __n, __hf,\n \t      __detail::_Mod_range_hashing(),\n \t      __detail::_Default_ranged_hash(),\n-\t      __eql, __detail::_Select1st(), __a)\n+\t      __eql, std::_Select1st<std::pair<const _Key, _Tp> >(), __a)\n       { }\n \n       __unordered_multimap&"}]}