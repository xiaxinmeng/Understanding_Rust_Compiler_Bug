{"sha": "92646d25778952a1fd24fa9a6f407cd421606195", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI2NDZkMjU3Nzg5NTJhMWZkMjRmYTlhNmY0MDdjZDQyMTYwNjE5NQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-10-19T19:50:02Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-10-19T19:50:02Z"}, "message": "gccint.texi: add user experience guidelines\n\ngcc/ChangeLog:\n\t* Makefile.in (TEXI_GCCINT_FILES): Add ux.texi.\n\t* doc/gccint.texi: Include ux.texi and use it in top-level menu.\n\t* doc/ux.texi: New file.\n\nFrom-SVN: r265322", "tree": {"sha": "8f71613320dac04f2964783c9ea1675b39227969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f71613320dac04f2964783c9ea1675b39227969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/92646d25778952a1fd24fa9a6f407cd421606195", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92646d25778952a1fd24fa9a6f407cd421606195", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92646d25778952a1fd24fa9a6f407cd421606195", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92646d25778952a1fd24fa9a6f407cd421606195/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12d5ebf9630364515229268e48c04cffd069dd32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d5ebf9630364515229268e48c04cffd069dd32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d5ebf9630364515229268e48c04cffd069dd32"}], "stats": {"total": 610, "additions": 609, "deletions": 1}, "files": [{"sha": "3875841b5fb5213c2b17a283b8c185787ad5c0fd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=92646d25778952a1fd24fa9a6f407cd421606195", "patch": "@@ -1,3 +1,9 @@\n+2018-10-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* Makefile.in (TEXI_GCCINT_FILES): Add ux.texi.\n+\t* doc/gccint.texi: Include ux.texi and use it in top-level menu.\n+\t* doc/ux.texi: New file.\n+\n 2018-10-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/rs6000.h (REG_ALLOC_ORDER): Move 68 (that is, CR0) to"}, {"sha": "d2da9ff5f07d5f1a71c4f576805a48ca37de2872", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=92646d25778952a1fd24fa9a6f407cd421606195", "patch": "@@ -3134,7 +3134,7 @@ TEXI_GCCINT_FILES = gccint.texi gcc-common.texi gcc-vers.texi\t\t\\\n \t gnu.texi gpl_v3.texi fdl.texi contrib.texi languages.texi\t\\\n \t sourcebuild.texi gty.texi libgcc.texi cfg.texi tree-ssa.texi\t\\\n \t loop.texi generic.texi gimple.texi plugins.texi optinfo.texi   \\\n-\t match-and-simplify.texi poly-int.texi\n+\t match-and-simplify.texi ux.texi poly-int.texi\n \n TEXI_GCCINSTALL_FILES = install.texi install-old.texi fdl.texi\t\t\\\n \t gcc-common.texi gcc-vers.texi"}, {"sha": "2554b31a952ef7cf5ea8752a2f6fc4889abf00de", "filename": "gcc/doc/gccint.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2Fdoc%2Fgccint.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2Fdoc%2Fgccint.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgccint.texi?ref=92646d25778952a1fd24fa9a6f407cd421606195", "patch": "@@ -125,6 +125,7 @@ Additional tutorial information is linked to from\n * LTO::             Using Link-Time Optimization.\n \n * Match and Simplify:: How to write expression simplification patterns for GIMPLE and GENERIC\n+* User Experience Guidelines:: Guidelines for implementing diagnostics and options.\n * Funding::         How to help assure funding for free software.\n * GNU Project::     The GNU Project and GNU/Linux.\n \n@@ -162,6 +163,7 @@ Additional tutorial information is linked to from\n @include plugins.texi\n @include lto.texi\n @include match-and-simplify.texi\n+@include ux.texi\n \n @include funding.texi\n @include gnu.texi"}, {"sha": "9185f68c58cc34459080521e8a5694aee1476187", "filename": "gcc/doc/ux.texi", "status": "added", "additions": 600, "deletions": 0, "changes": 600, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2Fdoc%2Fux.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/92646d25778952a1fd24fa9a6f407cd421606195/gcc%2Fdoc%2Fux.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fux.texi?ref=92646d25778952a1fd24fa9a6f407cd421606195", "patch": "@@ -0,0 +1,600 @@\n+@c Copyright (C) 2018 Free Software Foundation, Inc.\n+@c Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@node User Experience Guidelines\n+@chapter User Experience Guidelines\n+@cindex user experience guidelines\n+@cindex guidelines, user experience\n+\n+To borrow a slogan from\n+ @uref{https://elm-lang.org/blog/compilers-as-assistants, Elm},\n+\n+@quotation\n+@strong{Compilers should be assistants, not adversaries.}  A compiler should\n+not just detect bugs, it should then help you understand why there is a bug.\n+It should not berate you in a robot voice, it should give you specific hints\n+that help you write better code. Ultimately, a compiler should make\n+programming faster and more fun!\n+@author Evan Czaplicki\n+@end quotation\n+\n+This chapter provides guidelines on how to implement diagnostics and\n+command-line options in ways that we hope achieve the above ideal.\n+\n+@menu\n+* Guidelines for Diagnostics::       How to implement diagnostics.\n+* Guidelines for Options::           Guidelines for command-line options.\n+@end menu\n+\n+\n+@node Guidelines for Diagnostics\n+@cindex guidelines for diagnostics\n+@cindex diagnostics, guidelines for\n+\n+@section Guidelines for Diagnostics\n+\n+@subsection Talk in terms of the user's code\n+\n+Diagnostics should be worded in terms of the user's source code, and the\n+source language, rather than GCC's own implementation details.\n+\n+@subsection Diagnostics are actionable\n+@cindex diagnostics, actionable\n+\n+A good diagnostic is @dfn{actionable}: it should assist the user in\n+taking action.\n+\n+Consider what an end user will want to do when encountering a diagnostic.\n+\n+Given an error, an end user will think: ``How do I fix this?''\n+\n+Given a warning, an end user will think:\n+\n+@itemize @bullet\n+@item\n+``Is this a real problem?''\n+@item\n+``Do I care?''\n+@item\n+if they decide it's genuine: ``How do I fix this?''\n+@end itemize\n+\n+A good diagnostic provides pertinent information to allow the user to\n+easily answer the above questions.\n+\n+@subsection The user's attention is important\n+\n+A perfect compiler would issue a warning on every aspect of the user's\n+source code that ought to be fixed, and issue no other warnings.\n+Naturally, this ideal is impossible to achieve.\n+\n+@cindex signal-to-noise ratio (metaphorical usage for diagnostics)\n+@cindex diagnostics, false positive\n+@cindex diagnostics, true positive\n+@cindex false positive\n+@cindex true positive\n+\n+Warnings should have a good @dfn{signal-to-noise ratio}: we should have few\n+@dfn{false positives} (falsely issuing a warning when no warning is\n+warranted) and few @dfn{false negatives} (failing to issue a warning when\n+one @emph{is} justified).\n+\n+Note that a false positive can mean, in practice, a warning that the\n+user doesn't agree with.  Ideally a diagnostic should contain enough\n+information to allow the user to make an informed choice about whether\n+they should care (and how to fix it), but a balance must be drawn against\n+overloading the user with irrelevant data.\n+\n+@subsection Precision of Wording\n+\n+Provide the user with details that allow them to identify what the\n+problem is.  For example, the vaguely-worded message:\n+\n+@smallexample\n+demo.c:1:1: warning: 'noinline' attribute ignored [-Wattributes]\n+    1 | int foo __attribute__((noinline));\n+      | ^~~\n+@end smallexample\n+\n+@noindent\n+doesn't tell the user why the attribute was ignored, or what kind of\n+entity the compiler thought the attribute was being applied to (the\n+source location for the diagnostic is also poor;\n+@pxref{input_location_example,,discussion of @code{input_location}}).\n+A better message would be:\n+\n+@smallexample\n+demo.c:1:24: warning: attribute 'noinline' on variable 'foo' was\n+   ignored [-Wattributes]\n+    1 | int foo __attribute__((noinline));\n+      |     ~~~ ~~~~~~~~~~~~~~~^~~~~~~~~\n+demo.c:1:24: note: attribute 'noinline' is only applicable to functions\n+@end smallexample\n+\n+@noindent\n+which spells out the missing information (and fixes the location\n+information, as discussed below).\n+\n+The above example uses a note to avoid a combinatorial explosion of possible\n+messages.\n+\n+@subsection Try the diagnostic on real-world code\n+\n+It's worth testing a new warning on many instances of real-world code,\n+written by different people, and seeing what it complains about, and\n+what it doesn't complain about.\n+\n+This may suggest heuristics that silence common false positives.\n+\n+It may also suggest ways to improve the precision of the message.\n+\n+@subsection Make mismatches clear\n+\n+Many diagnostics relate to a mismatch between two different places in the\n+user's source code.  Examples include:\n+@itemize @bullet\n+  @item\n+  a type mismatch, where the type at a usage site does not match the type\n+  at a declaration\n+\n+  @item\n+  the argument count at a call site does not match the parameter count\n+  at the declaration\n+\n+  @item\n+  something is erroneously duplicated (e.g. an error, due to breaking a\n+  uniqueness requirement, or a warning, if it's suggestive of a bug)\n+\n+  @item\n+  an ``opened'' syntactic construct (such as an open-parenthesis) is not\n+  closed\n+\n+  @c TODO: more examples?\n+@end itemize\n+\n+In each case, the diagnostic should indicate @strong{both} pertinent\n+locations (so that the user can easily see the problem and how to fix it).\n+\n+The standard way to do this is with a note (via @code{inform}).  For\n+example:\n+\n+@smallexample\n+  auto_diagnostic_group d;\n+  if (warning_at (loc, OPT_Wduplicated_cond,\n+                  \"duplicated %<if%> condition\"))\n+    inform (EXPR_LOCATION (t), \"previously used here\");\n+@end smallexample\n+\n+@noindent\n+which leads to:\n+\n+@smallexample\n+demo.c: In function 'test':\n+demo.c:5:17: warning: duplicated 'if' condition [-Wduplicated-cond]\n+    5 |   else if (flag > 3)\n+      |            ~~~~~^~~\n+demo.c:3:12: note: previously used here\n+    3 |   if (flag > 3)\n+      |       ~~~~~^~~\n+@end smallexample\n+\n+@noindent\n+The @code{inform} call should be guarded by the return value from the\n+@code{warning_at} call so that the note isn't emitted when the warning\n+is suppressed.\n+\n+For cases involving punctuation where the locations might be near\n+each other, they can be conditionally consolidated via\n+@code{gcc_rich_location::add_location_if_nearby}:\n+\n+@smallexample\n+    auto_diagnostic_group d;\n+    gcc_rich_location richloc (primary_loc);\n+    bool added secondary = richloc.add_location_if_nearby (secondary_loc);\n+    error_at (&richloc, \"main message\");\n+    if (!added secondary)\n+      inform (secondary_loc, \"message for secondary\");\n+@end smallexample\n+\n+@noindent\n+This will emit either one diagnostic with two locations:\n+@smallexample\n+  demo.c:42:10: error: main message\n+    (foo)\n+    ~   ^\n+@end smallexample\n+\n+@noindent\n+or two diagnostics:\n+\n+@smallexample\n+  demo.c:42:4: error: main message\n+    foo)\n+       ^\n+  demo.c:40:2: note: message for secondary\n+    (\n+    ^\n+@end smallexample\n+\n+@subsection Location Information\n+@cindex diagnostics, locations\n+@cindex location information\n+@cindex source code, location information\n+@cindex caret\n+\n+GCC's @code{location_t} type can support both ordinary locations,\n+and locations relating to a macro expansion.\n+\n+As of GCC 6, ordinary locations changed from supporting just a\n+point in the user's source code to supporting three points: the\n+@dfn{caret} location, plus a start and a finish:\n+\n+@smallexample\n+      a = foo && bar;\n+          ~~~~^~~~~~\n+          |   |    |\n+          |   |    finish\n+          |   caret\n+          start\n+@end smallexample\n+\n+Tokens coming out of libcpp have locations of the form @code{caret == start},\n+such as for @code{foo} here:\n+\n+@smallexample\n+      a = foo && bar;\n+          ^~~\n+          | |\n+          | finish\n+          caret == start\n+@end smallexample\n+\n+Compound expressions should be reported using the location of the\n+expression as a whole, rather than just of one token within it.\n+\n+For example, in @code{-Wformat}, rather than underlining just the first\n+token of a bad argument:\n+\n+@smallexample\n+   printf(\"hello %i %s\", (long)0, \"world\");\n+                 ~^      ~\n+                 %li\n+@end smallexample\n+\n+@noindent\n+the whole of the expression should be underlined, so that the user can\n+easily identify what is being referred to:\n+\n+@smallexample\n+   printf(\"hello %i %s\", (long)0, \"world\");\n+                 ~^      ~~~~~~~\n+                 %li\n+@end smallexample\n+\n+@c this was r251239\n+\n+Avoid using the @code{input_location} global, and the diagnostic functions\n+that implicitly use it---use @code{error_at} and @code{warning_at} rather\n+than @code{error} and @code{warning}, and provide the most appropriate\n+@code{location_t} value available at that phase of the compilation.  It's\n+possible to supply secondary @code{location_t} values via\n+@code{rich_location}.\n+\n+@noindent\n+@anchor{input_location_example}\n+For example, in the example of imprecise wording above, generating the\n+diagnostic using @code{warning}:\n+\n+@smallexample\n+  // BAD: implicitly uses @code{input_location}\n+  warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+@end smallexample\n+\n+@noindent\n+leads to:\n+\n+@smallexample\n+// BAD: uses @code{input_location}\n+demo.c:1:1: warning: 'noinline' attribute ignored [-Wattributes]\n+    1 | int foo __attribute__((noinline));\n+      | ^~~\n+@end smallexample\n+\n+@noindent\n+which thus happened to use the location of the @code{int} token, rather\n+than that of the attribute.  Using @code{warning_at} with the location of\n+the attribute, providing the location of the declaration in question\n+as a secondary location, and adding a note:\n+\n+@smallexample\n+  auto_diagnostic_group d;\n+  gcc_rich_location richloc (attrib_loc);\n+  richloc.add_range (decl_loc);\n+  if (warning_at (OPT_Wattributes, &richloc,\n+                  \"attribute %qE on variable %qE was ignored\", name))\n+    inform (attrib_loc, \"attribute %qE is only applicable to functions\");\n+@end smallexample\n+\n+@noindent\n+would lead to:\n+\n+@smallexample\n+// OK: use location of attribute, with a secondary location\n+demo.c:1:24: warning: attribute 'noinline' on variable 'foo' was\n+   ignored [-Wattributes]\n+    1 | int foo __attribute__((noinline));\n+      |     ~~~ ~~~~~~~~~~~~~~~^~~~~~~~~\n+demo.c:1:24: note: attribute 'noinline' is only applicable to functions\n+@end smallexample\n+\n+@c TODO labelling of ranges\n+\n+@subsection Coding Conventions\n+\n+See the @uref{https://gcc.gnu.org/codingconventions.html#Diagnostics,\n+diagnostics section} of the GCC coding conventions.\n+\n+In the C++ front end, when comparing two types in a message, use @samp{%H}\n+and @samp{%I} rather than @samp{%T}, as this allows the diagnostics\n+subsystem to highlight differences between template-based types.\n+For example, rather than using @samp{%qT}:\n+\n+@smallexample\n+  // BAD: a pair of %qT used in C++ front end for type comparison\n+  error_at (loc, \"could not convert %qE from %qT to %qT\", expr,\n+            TREE_TYPE (expr), type);\n+@end smallexample\n+\n+@noindent\n+which could lead to:\n+\n+@smallexample\n+error: could not convert 'map<int, double>()' from 'map<int,double>'\n+   to 'map<int,int>'\n+@end smallexample\n+\n+@noindent\n+using @samp{%H} and @samp{%I} (via @samp{%qH} and @samp{%qI}):\n+\n+@smallexample\n+  // OK: compare types in C++ front end via %qH and %qI\n+  error_at (loc, \"could not convert %qE from %qH to %qI\", expr,\n+            TREE_TYPE (expr), type);\n+@end smallexample\n+\n+@noindent\n+allows the above output to be simplified to:\n+\n+@smallexample\n+error: could not convert 'map<int, double>()' from 'map<[...],double>'\n+   to 'map<[...],int>'\n+@end smallexample\n+\n+@noindent\n+where the @code{double} and @code{int} are colorized to highlight them.\n+\n+@c %H and %I were added in r248698.\n+\n+Use @code{auto_diagnostic_group} when issuing multiple related\n+diagnostics (seen in various examples on this page).  This informs the\n+diagnostic subsystem that all diagnostics issued within the lifetime\n+of the @code{auto_diagnostic_group} are related.  (Currently it doesn't\n+do anything with this information, but we may implement that in the\n+future).\n+\n+@subsection Spelling and Terminology\n+\n+See the @uref{https://gcc.gnu.org/codingconventions.html#Spelling\n+Spelling, terminology and markup} section of the GCC coding conventions.\n+\n+@subsection Fix-it hints\n+@cindex fix-it hints\n+@cindex diagnostics guidelines, fix-it hints\n+\n+GCC's diagnostic subsystem can emit @dfn{fix-it hints}: small suggested\n+edits to the user's source code.\n+\n+They are printed by default underneath the code in question.  They\n+can also be viewed via @option{-fdiagnostics-generate-patch} and\n+@option{-fdiagnostics-parseable-fixits}.  With the latter, an IDE\n+ought to be able to offer to automatically apply the suggested fix.\n+\n+Fix-it hints can be added to a diagnostic by using a @code{rich_location}\n+rather than a @code{location_t} - the fix-it hints are added to the\n+@code{rich_location} using one of the various @code{add_fixit} member\n+functions of @code{rich_location}.  They are documented with\n+@code{rich_location} in @file{libcpp/line-map.h}.\n+It's easiest to use the @code{gcc_rich_location} subclass of\n+@code{rich_location} found in @file{gcc-rich-location.h}, as this\n+implicitly supplies the @code{line_table} variable.\n+\n+For example:\n+\n+@smallexample\n+   if (const char *suggestion = hint.suggestion ())\n+     @{\n+       gcc_rich_location richloc (location);\n+       richloc.add_fixit_replace (suggestion);\n+       error_at (&richloc,\n+                 \"%qE does not name a type; did you mean %qs?\",\n+                 id, suggestion);\n+     @}\n+@end smallexample\n+\n+@noindent\n+which can lead to:\n+\n+@smallexample\n+spellcheck-typenames.C:73:1: error: 'singed' does not name a type; did\n+   you mean 'signed'?\n+   73 | singed char ch;\n+      | ^~~~~~\n+      | signed\n+@end smallexample\n+\n+Non-trivial edits can be built up by adding multiple fix-it hints to one\n+@code{rich_location}.  It's best to express the edits in terms of the\n+locations of individual tokens.  Various handy functions for adding\n+fix-it hints for idiomatic C and C++ can be seen in\n+@file{gcc-rich-location.h}.\n+\n+@subsubsection Fix-it hints should work\n+\n+When implementing a fix-it hint, please verify that the suggested edit\n+leads to fixed, compilable code.  (Unfortunately, this currently must be\n+done by hand using @option{-fdiagnostics-generate-patch}.  It would be\n+good to have an automated way of verifying that fix-it hints actually fix\n+the code).\n+\n+For example, a ``gotcha'' here is to forget to add a space when adding a\n+missing reserved word.  Consider a C++ fix-it hint that adds\n+@code{typename} in front of a template declaration.  A naive way to\n+implement this might be:\n+\n+@smallexample\n+gcc_rich_location richloc (loc);\n+// BAD: insertion is missing a trailing space\n+richloc.add_fixit_insert_before (\"typename\");\n+error_at (&richloc, \"need %<typename%> before %<%T::%E%> because \"\n+                     \"%qT is a dependent scope\",\n+                     parser->scope, id, parser->scope);\n+@end smallexample\n+\n+@noindent\n+When applied to the code, this might lead to:\n+\n+@smallexample\n+T::type x;\n+@end smallexample\n+\n+@noindent\n+being ``corrected'' to:\n+\n+@smallexample\n+typenameT::type x;\n+@end smallexample\n+\n+@noindent\n+In this case, the correct thing to do is to add a trailing space after\n+@code{typename}:\n+\n+@smallexample\n+gcc_rich_location richloc (loc);\n+// OK: note that here we have a trailing space\n+richloc.add_fixit_insert_before (\"typename \");\n+error_at (&richloc, \"need %<typename%> before %<%T::%E%> because \"\n+                     \"%qT is a dependent scope\",\n+                     parser->scope, id, parser->scope);\n+@end smallexample\n+\n+@noindent\n+leading to this corrected code:\n+\n+@smallexample\n+typename T::type x;\n+@end smallexample\n+\n+@subsubsection Express deletion in terms of deletion, not replacement\n+\n+It's best to express deletion suggestions in terms of deletion fix-it\n+hints, rather than replacement fix-it hints.  For example, consider this:\n+\n+@smallexample\n+    auto_diagnostic_group d;\n+    gcc_rich_location richloc (location_of (retval));\n+    tree name = DECL_NAME (arg);\n+    richloc.add_fixit_replace (IDENTIFIER_POINTER (name));\n+    warning_at (&richloc, OPT_Wredundant_move,\n+                \"redundant move in return statement\");\n+@end smallexample\n+\n+@noindent\n+which is intended to e.g. replace a @code{std::move} with the underlying\n+value:\n+\n+@smallexample\n+   return std::move (retval);\n+          ~~~~~~~~~~^~~~~~~~\n+          retval\n+@end smallexample\n+\n+@noindent\n+where the change has been expressed as replacement, replacing\n+with the name of the declaration.\n+This works for simple cases, but consider this case:\n+\n+@smallexample\n+#ifdef SOME_CONFIG_FLAG\n+# define CONFIGURY_GLOBAL global_a\n+#else\n+# define CONFIGURY_GLOBAL global_b\n+#endif\n+\n+int fn ()\n+@{\n+  return std::move (CONFIGURY_GLOBAL /* some comment */);\n+@}\n+@end smallexample\n+\n+@noindent\n+The above implementation erroneously strips out the macro and the\n+comment in the fix-it hint:\n+\n+@smallexample\n+   return std::move (CONFIGURY_GLOBAL /* some comment */);\n+          ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+          global_a\n+@end smallexample\n+\n+@noindent\n+and thus this resulting code:\n+\n+@smallexample\n+   return global_a;\n+@end smallexample\n+\n+@noindent\n+It's better to do deletions in terms of deletions; deleting the\n+@code{std::move (} and the trailing close-paren, leading to\n+this:\n+\n+@smallexample\n+   return std::move (CONFIGURY_GLOBAL /* some comment */);\n+          ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+          CONFIGURY_GLOBAL /* some comment */\n+@end smallexample\n+\n+@noindent\n+and thus this result:\n+\n+@smallexample\n+   return CONFIGURY_GLOBAL /* some comment */;\n+@end smallexample\n+\n+@noindent\n+Unfortunately, the pertinent @code{location_t} values are not always\n+available.\n+\n+@c the above was https://gcc.gnu.org/ml/gcc-patches/2018-08/msg01474.html\n+\n+@subsubsection Multiple suggestions\n+\n+In the rare cases where you need to suggest more than one mutually\n+exclusive solution to a problem, this can be done by emitting\n+multiple notes and calling\n+@code{rich_location::fixits_cannot_be_auto_applied} on each note's\n+@code{rich_location}.  If this is called, then the fix-it hints in\n+the @code{rich_location} will be printed, but will not be added to\n+generated patches.\n+\n+\n+@node Guidelines for Options\n+@cindex command-line options, guidelines for\n+@cindex options, guidelines for\n+@cindex guidelines for options\n+\n+@section Guidelines for Options\n+\n+@c TODO"}]}