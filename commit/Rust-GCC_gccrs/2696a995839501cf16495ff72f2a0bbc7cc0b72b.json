{"sha": "2696a995839501cf16495ff72f2a0bbc7cc0b72b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjY5NmE5OTU4Mzk1MDFjZjE2NDk1ZmY3MmYyYTBiYmM3Y2MwYjcyYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2008-08-06T17:22:05Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2008-08-06T17:22:05Z"}, "message": "matrix-reorg.c (compute_offset): Avoid C++ keywords.\n\n\t* matrix-reorg.c (compute_offset): Avoid C++ keywords.\n\n\t* c-common.c: Fix typo.\n\t(c_common_reswords): Activate more C++ keyword warnings.\n\ntestsuite:\n\t* gcc.dg/Wcxx-compat-2.c: Adjust test for more warnings.\n\nFrom-SVN: r138817", "tree": {"sha": "3e47f8eaa74dd8fb5ddab5434721cdb24a7e8c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3e47f8eaa74dd8fb5ddab5434721cdb24a7e8c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2696a995839501cf16495ff72f2a0bbc7cc0b72b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2696a995839501cf16495ff72f2a0bbc7cc0b72b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2696a995839501cf16495ff72f2a0bbc7cc0b72b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2696a995839501cf16495ff72f2a0bbc7cc0b72b/comments", "author": null, "committer": null, "parents": [{"sha": "7e99f74bbbb709c118fef4991219f83e55bc9b98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e99f74bbbb709c118fef4991219f83e55bc9b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e99f74bbbb709c118fef4991219f83e55bc9b98"}], "stats": {"total": 125, "additions": 70, "deletions": 55}, "files": [{"sha": "f461410957e9ab3d52c863bdc70f031474f1f221", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2696a995839501cf16495ff72f2a0bbc7cc0b72b", "patch": "@@ -1,3 +1,10 @@\n+2008-08-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* c-common.c: Fix typo.\n+\t(c_common_reswords): Activate more C++ keyword warnings.\n+\n+\t* matrix-reorg.c (compute_offset): Avoid C++ keywords.\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n        \n \tPR 26785"}, {"sha": "da3dc3bc48bdef029d8b9fd85f03897e0b9049e8", "filename": "gcc/c-common.c", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=2696a995839501cf16495ff72f2a0bbc7cc0b72b", "patch": "@@ -598,7 +598,7 @@ static int resort_field_decl_cmp (const void *, const void *);\n    If -fno-asm is used, D_ASM is added to the mask.  If\n    -fno-gnu-keywords is used, D_EXT is added.  If -fno-asm and C in\n    C89 mode, D_EXT89 is added for both -fno-asm and -fno-gnu-keywords.\n-   In C with -Wcxx-compat, we warn if D_CXXWARN is set.  */\n+   In C with -Wc++-compat, we warn if D_CXXWARN is set.  */\n \n const struct c_common_resword c_common_reswords[] =\n {\n@@ -668,41 +668,41 @@ const struct c_common_resword c_common_reswords[] =\n   { \"bool\",\t\tRID_BOOL,\tD_CXXONLY },\n   { \"break\",\t\tRID_BREAK,\t0 },\n   { \"case\",\t\tRID_CASE,\t0 },\n-  { \"catch\",\t\tRID_CATCH,\tD_CXX_OBJC },\n+  { \"catch\",\t\tRID_CATCH,\tD_CXX_OBJC | D_CXXWARN },\n   { \"char\",\t\tRID_CHAR,\t0 },\n-  { \"char16_t\",\t\tRID_CHAR16,\tD_CXXONLY | D_CXX0X },\n-  { \"char32_t\",\t\tRID_CHAR32,\tD_CXXONLY | D_CXX0X },\n-  { \"class\",\t\tRID_CLASS,\tD_CXX_OBJC },\n+  { \"char16_t\",\t\tRID_CHAR16,\tD_CXXONLY | D_CXX0X | D_CXXWARN },\n+  { \"char32_t\",\t\tRID_CHAR32,\tD_CXXONLY | D_CXX0X | D_CXXWARN },\n+  { \"class\",\t\tRID_CLASS,\tD_CXX_OBJC | D_CXXWARN },\n   { \"const\",\t\tRID_CONST,\t0 },\n   { \"const_cast\",\tRID_CONSTCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"continue\",\t\tRID_CONTINUE,\t0 },\n-  { \"decltype\",         RID_DECLTYPE,   D_CXXONLY | D_CXX0X },\n+  { \"decltype\",         RID_DECLTYPE,   D_CXXONLY | D_CXX0X | D_CXXWARN },\n   { \"default\",\t\tRID_DEFAULT,\t0 },\n-  { \"delete\",\t\tRID_DELETE,\tD_CXXONLY },\n+  { \"delete\",\t\tRID_DELETE,\tD_CXXONLY | D_CXXWARN },\n   { \"do\",\t\tRID_DO,\t\t0 },\n   { \"double\",\t\tRID_DOUBLE,\t0 },\n   { \"dynamic_cast\",\tRID_DYNCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"else\",\t\tRID_ELSE,\t0 },\n   { \"enum\",\t\tRID_ENUM,\t0 },\n-  { \"explicit\",\t\tRID_EXPLICIT,\tD_CXXONLY },\n-  { \"export\",\t\tRID_EXPORT,\tD_CXXONLY },\n+  { \"explicit\",\t\tRID_EXPLICIT,\tD_CXXONLY | D_CXXWARN },\n+  { \"export\",\t\tRID_EXPORT,\tD_CXXONLY | D_CXXWARN },\n   { \"extern\",\t\tRID_EXTERN,\t0 },\n-  { \"false\",\t\tRID_FALSE,\tD_CXXONLY },\n+  { \"false\",\t\tRID_FALSE,\tD_CXXONLY | D_CXXWARN },\n   { \"float\",\t\tRID_FLOAT,\t0 },\n   { \"for\",\t\tRID_FOR,\t0 },\n-  { \"friend\",\t\tRID_FRIEND,\tD_CXXONLY },\n+  { \"friend\",\t\tRID_FRIEND,\tD_CXXONLY | D_CXXWARN },\n   { \"goto\",\t\tRID_GOTO,\t0 },\n   { \"if\",\t\tRID_IF,\t\t0 },\n   { \"inline\",\t\tRID_INLINE,\tD_EXT89 },\n   { \"int\",\t\tRID_INT,\t0 },\n   { \"long\",\t\tRID_LONG,\t0 },\n   { \"mutable\",\t\tRID_MUTABLE,\tD_CXXONLY | D_CXXWARN },\n-  { \"namespace\",\tRID_NAMESPACE,\tD_CXXONLY },\n-  { \"new\",\t\tRID_NEW,\tD_CXXONLY },\n-  { \"operator\",\t\tRID_OPERATOR,\tD_CXXONLY },\n-  { \"private\",\t\tRID_PRIVATE,\tD_CXX_OBJC },\n-  { \"protected\",\tRID_PROTECTED,\tD_CXX_OBJC },\n-  { \"public\",\t\tRID_PUBLIC,\tD_CXX_OBJC },\n+  { \"namespace\",\tRID_NAMESPACE,\tD_CXXONLY | D_CXXWARN },\n+  { \"new\",\t\tRID_NEW,\tD_CXXONLY | D_CXXWARN },\n+  { \"operator\",\t\tRID_OPERATOR,\tD_CXXONLY | D_CXXWARN },\n+  { \"private\",\t\tRID_PRIVATE,\tD_CXX_OBJC | D_CXXWARN },\n+  { \"protected\",\tRID_PROTECTED,\tD_CXX_OBJC | D_CXXWARN },\n+  { \"public\",\t\tRID_PUBLIC,\tD_CXX_OBJC | D_CXXWARN },\n   { \"register\",\t\tRID_REGISTER,\t0 },\n   { \"reinterpret_cast\",\tRID_REINTCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"restrict\",\t\tRID_RESTRICT,\tD_CONLY | D_C99 },\n@@ -715,19 +715,19 @@ const struct c_common_resword c_common_reswords[] =\n   { \"static_cast\",\tRID_STATCAST,\tD_CXXONLY | D_CXXWARN },\n   { \"struct\",\t\tRID_STRUCT,\t0 },\n   { \"switch\",\t\tRID_SWITCH,\t0 },\n-  { \"template\",\t\tRID_TEMPLATE,\tD_CXXONLY },\n-  { \"this\",\t\tRID_THIS,\tD_CXXONLY },\n-  { \"throw\",\t\tRID_THROW,\tD_CXX_OBJC },\n-  { \"true\",\t\tRID_TRUE,\tD_CXXONLY },\n-  { \"try\",\t\tRID_TRY,\tD_CXX_OBJC },\n+  { \"template\",\t\tRID_TEMPLATE,\tD_CXXONLY | D_CXXWARN },\n+  { \"this\",\t\tRID_THIS,\tD_CXXONLY | D_CXXWARN },\n+  { \"throw\",\t\tRID_THROW,\tD_CXX_OBJC | D_CXXWARN },\n+  { \"true\",\t\tRID_TRUE,\tD_CXXONLY | D_CXXWARN },\n+  { \"try\",\t\tRID_TRY,\tD_CXX_OBJC | D_CXXWARN },\n   { \"typedef\",\t\tRID_TYPEDEF,\t0 },\n-  { \"typename\",\t\tRID_TYPENAME,\tD_CXXONLY },\n-  { \"typeid\",\t\tRID_TYPEID,\tD_CXXONLY },\n+  { \"typename\",\t\tRID_TYPENAME,\tD_CXXONLY | D_CXXWARN },\n+  { \"typeid\",\t\tRID_TYPEID,\tD_CXXONLY | D_CXXWARN },\n   { \"typeof\",\t\tRID_TYPEOF,\tD_ASM | D_EXT },\n   { \"union\",\t\tRID_UNION,\t0 },\n   { \"unsigned\",\t\tRID_UNSIGNED,\t0 },\n-  { \"using\",\t\tRID_USING,\tD_CXXONLY },\n-  { \"virtual\",\t\tRID_VIRTUAL,\tD_CXXONLY },\n+  { \"using\",\t\tRID_USING,\tD_CXXONLY | D_CXXWARN },\n+  { \"virtual\",\t\tRID_VIRTUAL,\tD_CXXONLY | D_CXXWARN },\n   { \"void\",\t\tRID_VOID,\t0 },\n   { \"volatile\",\t\tRID_VOLATILE,\t0 },\n   { \"wchar_t\",\t\tRID_WCHAR,\tD_CXXONLY },"}, {"sha": "66145518f533221e9c1d0132e845649a3b4ecfee", "filename": "gcc/matrix-reorg.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Fmatrix-reorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Fmatrix-reorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatrix-reorg.c?ref=2696a995839501cf16495ff72f2a0bbc7cc0b72b", "patch": "@@ -1755,16 +1755,20 @@ record_all_accesses_in_func (void)\n   sbitmap_free (visited_stmts_1);\n }\n \n-/* Used when we want to convert the expression: RESULT =  something * ORIG to RESULT = something * NEW. If ORIG and NEW are power of 2, shift operations can be done, else division and multiplication.  */\n+/* Used when we want to convert the expression: RESULT = something *\n+   ORIG to RESULT = something * NEW_VAL. If ORIG and NEW_VAL are power\n+   of 2, shift operations can be done, else division and\n+   multiplication.  */\n+\n static tree\n-compute_offset (HOST_WIDE_INT orig, HOST_WIDE_INT new, tree result)\n+compute_offset (HOST_WIDE_INT orig, HOST_WIDE_INT new_val, tree result)\n {\n \n   int x, y;\n   tree result1, ratio, log, orig_tree, new_tree;\n \n   x = exact_log2 (orig);\n-  y = exact_log2 (new);\n+  y = exact_log2 (new_val);\n \n   if (x != -1 && y != -1)\n     {\n@@ -1783,7 +1787,7 @@ compute_offset (HOST_WIDE_INT orig, HOST_WIDE_INT new, tree result)\n       return result1;\n     }\n   orig_tree = build_int_cst (TREE_TYPE (result), orig);\n-  new_tree = build_int_cst (TREE_TYPE (result), new);\n+  new_tree = build_int_cst (TREE_TYPE (result), new_val);\n   ratio = fold_build2 (TRUNC_DIV_EXPR, TREE_TYPE (result), result, orig_tree);\n   result1 = fold_build2 (MULT_EXPR, TREE_TYPE (result), ratio, new_tree);\n "}, {"sha": "e53ea0b28148ff1310e92c48c1fde620a2183554", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2696a995839501cf16495ff72f2a0bbc7cc0b72b", "patch": "@@ -1,3 +1,7 @@\n+2008-08-06  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/Wcxx-compat-2.c: Adjust test for more warnings.\n+\n 2008-08-06  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \tPR 26785"}, {"sha": "43149aa6500f31c048566767cc0024b82b3d3b62", "filename": "gcc/testsuite/gcc.dg/Wcxx-compat-2.c", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2696a995839501cf16495ff72f2a0bbc7cc0b72b/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWcxx-compat-2.c?ref=2696a995839501cf16495ff72f2a0bbc7cc0b72b", "patch": "@@ -1,35 +1,35 @@\n /* { dg-options \"-Wc++-compat\" } */\n \n int bool;\n-int catch;\n-int char16_t;\n-int char32_t;\n-int class;\n+int catch;\t\t\t/* { dg-warning \"keyword\" } */\n+int char16_t;\t\t\t/* { dg-warning \"keyword\" } */\n+int char32_t;\t\t\t/* { dg-warning \"keyword\" } */\n+int class;\t\t\t/* { dg-warning \"keyword\" } */\n int const_cast;\t\t\t/* { dg-warning \"keyword\" } */\n-int decltype;\n-int delete;\n+int decltype;\t\t\t/* { dg-warning \"keyword\" } */\n+int delete;\t\t\t/* { dg-warning \"keyword\" } */\n int dynamic_cast;\t\t/* { dg-warning \"keyword\" } */\n-int explicit;\n-int export;\n-int false;\n-int friend;\n+int explicit;\t\t\t/* { dg-warning \"keyword\" } */\n+int export;\t\t\t/* { dg-warning \"keyword\" } */\n+int false;\t\t\t/* { dg-warning \"keyword\" } */\n+int friend;\t\t\t/* { dg-warning \"keyword\" } */\n int mutable;\t\t\t/* { dg-warning \"keyword\" } */\n-int namespace;\n-int new;\n-int operator;\n-int private;\n-int protected;\n-int public;\n+int namespace;\t\t\t/* { dg-warning \"keyword\" } */\n+int new;\t\t\t/* { dg-warning \"keyword\" } */\n+int operator;\t\t\t/* { dg-warning \"keyword\" } */\n+int private;\t\t\t/* { dg-warning \"keyword\" } */\n+int protected;\t\t\t/* { dg-warning \"keyword\" } */\n+int public;\t\t\t/* { dg-warning \"keyword\" } */\n int reinterpret_cast;\t\t/* { dg-warning \"keyword\" } */\n int static_assert;\t\t/* { dg-warning \"keyword\" } */\n int static_cast;\t\t/* { dg-warning \"keyword\" } */\n-int template;\n-int this;\n-int throw;\n-int true;\n-int try;\n-int typename;\n-int typeid;\n-int using;\n-int virtual;\n+int template;\t\t\t/* { dg-warning \"keyword\" } */\n+int this;\t\t\t/* { dg-warning \"keyword\" } */\n+int throw;\t\t\t/* { dg-warning \"keyword\" } */\n+int true;\t\t\t/* { dg-warning \"keyword\" } */\n+int try;\t\t\t/* { dg-warning \"keyword\" } */\n+int typename;\t\t\t/* { dg-warning \"keyword\" } */\n+int typeid;\t\t\t/* { dg-warning \"keyword\" } */\n+int using;\t\t\t/* { dg-warning \"keyword\" } */\n+int virtual;\t\t\t/* { dg-warning \"keyword\" } */\n int wchar_t;"}]}