{"sha": "0b0a3cdbff64d97e7de3e0e2c26e965708064193", "node_id": "C_kwDOANBUbNoAKDBiMGEzY2RiZmY2NGQ5N2U3ZGUzZTBlMmMyNmU5NjU3MDgwNjQxOTM", "commit": {"author": {"name": "Simon Rainer", "email": "gcc.gnu@vvalter.com", "date": "2022-08-31T21:00:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-09-02T06:06:14Z"}, "message": "ipa: Fix throw in multi-versioned functions [PR106627]\n\nAny multi-versioned function was implicitly declared as noexcept, which\nleads to an abort if an exception is thrown inside the function.\nThe reason for this is that the function declaration is replaced by a\nnewly created dispatcher declaration, which has TREE_NOTHROW always set\nto 1. Instead we need to set TREE_NOTHROW to the value of the original\ndeclaration.\n\n\tPR ipa/106627\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-features.cc (ix86_get_function_versions_dispatcher):\n\tSet TREE_NOTHROW correctly for dispatcher declaration.\n\t* config/rs6000/rs6000.cc (rs6000_get_function_versions_dispatcher):\n\tLikewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.target/i386/pr106627.C: New test.", "tree": {"sha": "d285ecf1c0f7d1242fa58571fa94f0cc03796d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d285ecf1c0f7d1242fa58571fa94f0cc03796d7d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b0a3cdbff64d97e7de3e0e2c26e965708064193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0a3cdbff64d97e7de3e0e2c26e965708064193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b0a3cdbff64d97e7de3e0e2c26e965708064193", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b0a3cdbff64d97e7de3e0e2c26e965708064193/comments", "author": null, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb0a1556df79d02cf570f5eb17a1b02a509f0be4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb0a1556df79d02cf570f5eb17a1b02a509f0be4"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "fd212262f503d8b2dd716f0f972525b8b906aed9", "filename": "gcc/config/i386/i386-features.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Fconfig%2Fi386%2Fi386-features.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-features.cc?ref=0b0a3cdbff64d97e7de3e0e2c26e965708064193", "patch": "@@ -3268,6 +3268,7 @@ ix86_get_function_versions_dispatcher (void *decl)\n \n       /* Right now, the dispatching is done via ifunc.  */\n       dispatch_decl = make_dispatcher_decl (default_node->decl);\n+      TREE_NOTHROW (dispatch_decl) = TREE_NOTHROW (fn);\n \n       dispatcher_node = cgraph_node::get_create (dispatch_decl);\n       gcc_assert (dispatcher_node != NULL);"}, {"sha": "937954b6351c58cd7d2f6057e18e86b0a36a2f19", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=0b0a3cdbff64d97e7de3e0e2c26e965708064193", "patch": "@@ -24861,6 +24861,7 @@ rs6000_get_function_versions_dispatcher (void *decl)\n \n       /* Right now, the dispatching is done via ifunc.  */\n       dispatch_decl = make_dispatcher_decl (default_node->decl);\n+      TREE_NOTHROW (dispatch_decl) = TREE_NOTHROW (fn);\n \n       dispatcher_node = cgraph_node::get_create (dispatch_decl);\n       gcc_assert (dispatcher_node != NULL);"}, {"sha": "e993d825f20ca004ce05831ee6ae6d9359b36431", "filename": "gcc/testsuite/g++.target/i386/pr106627.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106627.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b0a3cdbff64d97e7de3e0e2c26e965708064193/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106627.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fpr106627.C?ref=0b0a3cdbff64d97e7de3e0e2c26e965708064193", "patch": "@@ -0,0 +1,28 @@\n+/* PR c++/103012 Exception handling with multiversioned functions */\n+/* { dg-do run } */\n+/* { dg-require-ifunc \"\" }  */\n+\n+extern \"C\" void abort (void);\n+\n+__attribute__((target(\"default\")))\n+void f() {\n+    throw 1;\n+}\n+\n+__attribute__((target(\"sse4.2,bmi\")))\n+void f() {\n+    throw 2;\n+}\n+\n+int main()\n+{\n+    try {\n+        f();\n+    }\n+    catch(...)\n+    {\n+        return 0;\n+    }\n+\n+    abort ();\n+}"}]}