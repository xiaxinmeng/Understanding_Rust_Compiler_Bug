{"sha": "52eb4ab4092228369cea5d7ca2717d32cc666c5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJlYjRhYjQwOTIyMjgzNjljZWE1ZDdjYTI3MTdkMzJjYzY2NmM1Yw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-12T19:29:52Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-12T19:29:52Z"}, "message": "compiler: error on func declaration/definition\n    \n    Long long long ago Go permitted writing\n        func F()\n    in one file and writing\n        func F() {}\n    in another file.  This was removed from the language, and that is now\n    considered to be a multiple definition error.  Gccgo never caught up\n    to that, and it has been permitting this invalid code for some time.\n    \n    Stop permitting it, so that we give correct errors.  Since we've\n    supported it for a long time, the compiler uses it in a couple of\n    cases: it predeclares the hash/equal methods if it decides to create\n    them while compiling another function, and it predeclares main.main as\n    a mechanism for getting the right warning if a program uses the wrong\n    signature for main.  For simplicity, keep those existing uses.\n    \n    This required a few minor changes in libgo which were relying,\n    unnecessarily, on the current behavior.\n    \n    Reviewed-on: https://go-review.googlesource.com/93083\n\nFrom-SVN: r257600", "tree": {"sha": "48902ea09d6ebb6b6a26f1aa463e3e48e00381a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48902ea09d6ebb6b6a26f1aa463e3e48e00381a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52eb4ab4092228369cea5d7ca2717d32cc666c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eb4ab4092228369cea5d7ca2717d32cc666c5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52eb4ab4092228369cea5d7ca2717d32cc666c5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52eb4ab4092228369cea5d7ca2717d32cc666c5c/comments", "author": null, "committer": null, "parents": [{"sha": "86ff185365dbc40b64f907be9e2f35d756776e20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86ff185365dbc40b64f907be9e2f35d756776e20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86ff185365dbc40b64f907be9e2f35d756776e20"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "ea7ae4bf16e10d1b0e118f679f743840eb7e2955", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -1,4 +1,4 @@\n-cebdbf3f293f5b0f3120c009c47da0ceadc113cb\n+7998e29eec43ede1cee925d87eef0b09da67d90b\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "0eac1993402f776f1c300358a84db99c757e313d", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -7762,33 +7762,29 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n       go_unreachable();\n \n     case Named_object::NAMED_OBJECT_FUNC:\n-      if (new_object->is_function_declaration())\n-\t{\n-\t  if (!new_object->func_declaration_value()->asm_name().empty())\n-\t    go_error_at(Linemap::unknown_location(),\n-\t\t\t(\"sorry, not implemented: \"\n-\t\t\t \"__asm__ for function definitions\"));\n-\t  Function_type* old_type = old_object->func_value()->type();\n-\t  Function_type* new_type =\n-\t    new_object->func_declaration_value()->type();\n-\t  if (old_type->is_valid_redeclaration(new_type, &reason))\n-\t    return old_object;\n-\t}\n       break;\n \n     case Named_object::NAMED_OBJECT_FUNC_DECLARATION:\n       {\n-\tif (new_object->is_function())\n+\t// We declare the hash and equality functions before defining\n+\t// them, because we sometimes see that we need the declaration\n+\t// while we are in the middle of a different function.  We\n+\t// declare the main function before the user defines it, to\n+\t// give better error messages.\n+\tif (new_object->is_function()\n+\t    && ((Linemap::is_predeclared_location(old_object->location())\n+\t\t && Linemap::is_predeclared_location(new_object->location()))\n+\t\t|| (Gogo::unpack_hidden_name(old_object->name()) == \"main\"\n+\t\t    && Linemap::is_unknown_location(old_object->location()))))\n \t  {\n             Function_type* old_type =\n                 old_object->func_declaration_value()->type();\n \t    Function_type* new_type = new_object->func_value()->type();\n \t    if (old_type->is_valid_redeclaration(new_type, &reason))\n \t      {\n-\t\tif (!old_object->func_declaration_value()->asm_name().empty())\n-\t\t  go_error_at(Linemap::unknown_location(),\n-\t\t\t      (\"sorry, not implemented: \"\n-\t\t\t       \"__asm__ for function definitions\"));\n+\t\tFunction_declaration* fd =\n+\t\t  old_object->func_declaration_value();\n+\t\tgo_assert(fd->asm_name().empty());\n \t\told_object->set_function_value(new_object->func_value());\n \t\tthis->named_objects_.push_back(old_object);\n \t\treturn old_object;\n@@ -7810,8 +7806,10 @@ Bindings::new_definition(Named_object* old_object, Named_object* new_object)\n   old_object->set_is_redefinition();\n   new_object->set_is_redefinition();\n \n-  go_inform(old_object->location(), \"previous definition of %qs was here\",\n-            n.c_str());\n+  if (!Linemap::is_unknown_location(old_object->location())\n+      && !Linemap::is_predeclared_location(old_object->location()))\n+    go_inform(old_object->location(), \"previous definition of %qs was here\",\n+\t      n.c_str());\n \n   return old_object;\n }"}, {"sha": "b3afd10ed6d18f9b96a40add2bb99d89d3bd4fba", "filename": "libgo/go/runtime/extern.go", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fgo%2Fruntime%2Fextern.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fgo%2Fruntime%2Fextern.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fextern.go?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -157,10 +157,6 @@ package runtime\n \n import \"runtime/internal/sys\"\n \n-// Gosched yields the processor, allowing other goroutines to run.  It does not\n-// suspend the current goroutine, so execution resumes automatically.\n-func Gosched()\n-\n // Caller reports file and line number information about function invocations on\n // the calling goroutine's stack. The argument skip is the number of stack frames\n // to ascend, with 0 identifying the caller of Caller.  (For historical reasons the"}, {"sha": "bda2c694ac67ab79c47c3752b83f693d9f1a08a2", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -306,37 +306,20 @@ func setSupportAES(v bool) {\n \tsupport_aes = v\n }\n \n-// Here for gccgo until we port lock_*.go.\n-func lock(l *mutex)\n-func unlock(l *mutex)\n-\n // Here for gccgo.\n func errno() int\n \n // Temporary for gccgo until we port proc.go.\n func entersyscall(int32)\n func entersyscallblock(int32)\n \n-// Here for gccgo until we port mgc.go.\n-func GC()\n-\n // For gccgo to call from C code, so that the C code and the Go code\n // can share the memstats variable for now.\n //go:linkname getMstats runtime.getMstats\n func getMstats() *mstats {\n \treturn &memstats\n }\n \n-// Temporary for gccgo until we port mem_GOOS.go.\n-func sysAlloc(n uintptr, sysStat *uint64) unsafe.Pointer\n-func sysFree(v unsafe.Pointer, n uintptr, sysStat *uint64)\n-\n-// Temporary for gccgo until we port malloc.go\n-func persistentalloc(size, align uintptr, sysStat *uint64) unsafe.Pointer\n-\n-// Temporary for gccgo until we port mheap.go\n-func setprofilebucket(p unsafe.Pointer, b *bucket)\n-\n // Get signal trampoline, written in C.\n func getSigtramp() uintptr\n "}, {"sha": "a9b62b07a044045989e0eac4a8769db6fc30c925", "filename": "libgo/misc/cgo/test/issue9400/gccgo.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fgccgo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fgccgo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fgccgo.go?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -16,6 +16,8 @@ import (\n // without writing more assembly code, which we haven't bothered to\n // do.  So this is not much of a test.\n \n+var Baton int32\n+\n func RewindAndSetgid() {\n \tatomic.StoreInt32(&Baton, 1)\n \tfor atomic.LoadInt32(&Baton) != 0 {"}, {"sha": "7b50cefc3a824dfc511d6bc91f51fe1e4613fbd1", "filename": "libgo/misc/cgo/test/issue9400/stubs.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52eb4ab4092228369cea5d7ca2717d32cc666c5c/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fmisc%2Fcgo%2Ftest%2Fissue9400%2Fstubs.go?ref=52eb4ab4092228369cea5d7ca2717d32cc666c5c", "patch": "@@ -2,6 +2,8 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n+// +build !gccgo\n+\n package issue9400\n \n var Baton int32"}]}