{"sha": "96123432ff850b1e62e60e429605b0b98a17bf68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxMjM0MzJmZjg1MGIxZTYyZTYwZTQyOTYwNWIwYjk4YTE3YmY2OA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-09-18T15:06:02Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-09-18T15:06:02Z"}, "message": "tree.def (FFS_EXPR, [...]): Delete unused tree codes.\n\n\n\t* tree.def (FFS_EXPR, CLZ_EXPR, CTZ_EXPR, POPCOUNT_EXPR,\n\tPARITY_EXPR): Delete unused tree codes.\n\t* c-common.c (c_common_truthvalue_conversion): Delete references\n\tto FFS_EXPR and POPCOUNT_EXPR.\n\t* c-pretty-print.c (pp_c_postfix_expression): Remove FFS_EXPR.\n\t(pp_c_expression): Likewise.\n\t* expr.c (expand_expr): Delete RTL expansion of FFS_EXPR, CLZ_EXPR,\n\tCTZ_EXPR, POPCOUNT_EXPR and PARITY_EXPR.\n\t* fold-const.c (tree_expr_nonnegative_p): Remove FFS_EXPR, CLZ_EXPR,\n\tCTZ_EXPR, POPCOUNT_EXPR and PARITY_EXPR.  Add support for calls to\n\tBUILT_IN_FFS, BUILT_IN_PARITY and BUILT_IN_POPCOUNT and their long\n\tand long long variants.\n\n\t* cp/lex.c (init_operators): Remove operator_name_info for FFS_EXPR.\n\t* cp/class.c (instantiate_type): Remove FFS_EXPR case.\n\n\t* f/com.c (ffecom_overlap_): Remove FFS_EXPR case.\n\t(ffecom_tree_canonize_ref_): Likewise.\n\t(ffe_truthvalue_conversion): Likewise.\n\n\t* java/expr.c (java_truthvalue_conversion): Remove FFS_EXPR case.\n\t* java/check-init.c (check_init): Likewise.\n\nFrom-SVN: r71525", "tree": {"sha": "61cbcebb8d43a0d12906c59d8095e18e373d5eb6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61cbcebb8d43a0d12906c59d8095e18e373d5eb6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96123432ff850b1e62e60e429605b0b98a17bf68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96123432ff850b1e62e60e429605b0b98a17bf68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96123432ff850b1e62e60e429605b0b98a17bf68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96123432ff850b1e62e60e429605b0b98a17bf68/comments", "author": null, "committer": null, "parents": [{"sha": "a490d1be3fa7903ddd0161c9c33bc0a4a9b8aaf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a490d1be3fa7903ddd0161c9c33bc0a4a9b8aaf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a490d1be3fa7903ddd0161c9c33bc0a4a9b8aaf5"}], "stats": {"total": 114, "additions": 44, "deletions": 70}, "files": [{"sha": "3f2cff373748f6398e0dbfb8f55a63b7b47769c6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1,3 +1,18 @@\n+2003-09-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.def (FFS_EXPR, CLZ_EXPR, CTZ_EXPR, POPCOUNT_EXPR,\n+\tPARITY_EXPR): Delete unused tree codes.\n+\t* c-common.c (c_common_truthvalue_conversion): Delete references\n+\tto FFS_EXPR and POPCOUNT_EXPR.\n+\t* c-pretty-print.c (pp_c_postfix_expression): Remove FFS_EXPR.\n+\t(pp_c_expression): Likewise.\n+\t* expr.c (expand_expr): Delete RTL expansion of FFS_EXPR, CLZ_EXPR,\n+\tCTZ_EXPR, POPCOUNT_EXPR and PARITY_EXPR.\n+\t* fold-const.c (tree_expr_nonnegative_p): Remove FFS_EXPR, CLZ_EXPR,\n+\tCTZ_EXPR, POPCOUNT_EXPR and PARITY_EXPR.  Add support for calls to\n+\tBUILT_IN_FFS, BUILT_IN_PARITY and BUILT_IN_POPCOUNT and their long\n+\tand long long variants.\n+\n 2003-09-18  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-pretty-print.h (pp_type_specifier_seq): Fix thinko."}, {"sha": "e6d4197d42ca42a1964048a898a5e0d6f8e9dd10", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -2644,8 +2644,6 @@ c_common_truthvalue_conversion (tree expr)\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n-    case FFS_EXPR:\n-    case POPCOUNT_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n       return c_common_truthvalue_conversion (TREE_OPERAND (expr, 0));\n "}, {"sha": "1ddc1d036c7f961b840056683fe104a352550786", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1187,9 +1187,7 @@ pp_c_postfix_expression (c_pretty_printer *pp, tree e)\n       break;\n \n     case ABS_EXPR:\n-    case FFS_EXPR:\n-      pp_c_identifier (pp,\n-\t\t       code == ABS_EXPR ? \"__builtin_abs\" : \"__builtin_ffs\");\n+      pp_c_identifier (pp, \"__builtin_abs\");\n       pp_c_left_paren (pp);\n       pp_expression (pp, TREE_OPERAND (e, 0));\n       pp_c_right_paren (pp);\n@@ -1707,7 +1705,6 @@ pp_c_expression (c_pretty_printer *pp, tree e)\n     case COMPLEX_EXPR:\n     case VECTOR_CST:\n     case ABS_EXPR:\n-    case FFS_EXPR:\n     case CONSTRUCTOR:\n     case COMPOUND_LITERAL_EXPR:\n     case VA_ARG_EXPR:"}, {"sha": "1d3c8b207e01feca1f457106afe9c168c6ac6ba3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1,3 +1,8 @@\n+2003-09-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* lex.c (init_operators): Remove operator_name_info for FFS_EXPR.\n+\t* class.c (instantiate_type): Remove FFS_EXPR case.\n+\n 2003-09-18  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* ChangeLog: Fix recent commit."}, {"sha": "17ff0e49674d5b0c1ad100651ff204d863941c59", "filename": "gcc/cp/class.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -6130,7 +6130,6 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n     case ABS_EXPR:\n     case MAX_EXPR:\n     case MIN_EXPR:\n-    case FFS_EXPR:\n \n     case BIT_AND_EXPR:\n     case BIT_IOR_EXPR:"}, {"sha": "6d5482330b2efb0633450e434f6e139b8b122e77", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -205,7 +205,6 @@ init_operators (void)\n   operator_name_info [(int) FLOOR_MOD_EXPR].name = \"(floor %)\";\n   operator_name_info [(int) ROUND_MOD_EXPR].name = \"(round %)\";\n   operator_name_info [(int) ABS_EXPR].name = \"abs\";\n-  operator_name_info [(int) FFS_EXPR].name = \"ffs\";\n   operator_name_info [(int) TRUTH_AND_EXPR].name = \"strict &&\";\n   operator_name_info [(int) TRUTH_OR_EXPR].name = \"strict ||\";\n   operator_name_info [(int) IN_EXPR].name = \"in\";"}, {"sha": "0b6a93b3a16031a07ee303e035aec97222238103", "filename": "gcc/expr.c", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -8525,43 +8525,6 @@ expand_expr (tree exp, rtx target, enum machine_mode tmode,\n \tabort ();\n       return temp;\n \n-    case FFS_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      if (modifier == EXPAND_STACK_PARM)\n-\ttarget = 0;\n-      temp = expand_unop (mode, ffs_optab, op0, target, 1);\n-      if (temp == 0)\n-\tabort ();\n-      return temp;\n-\n-    case CLZ_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      temp = expand_unop (mode, clz_optab, op0, target, 1);\n-      if (temp == 0)\n-\tabort ();\n-      return temp;\n-\n-    case CTZ_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      temp = expand_unop (mode, ctz_optab, op0, target, 1);\n-      if (temp == 0)\n-\tabort ();\n-      return temp;\n-\n-    case POPCOUNT_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      temp = expand_unop (mode, popcount_optab, op0, target, 1);\n-      if (temp == 0)\n-\tabort ();\n-      return temp;\n-\n-    case PARITY_EXPR:\n-      op0 = expand_expr (TREE_OPERAND (exp, 0), subtarget, VOIDmode, 0);\n-      temp = expand_unop (mode, parity_optab, op0, target, 1);\n-      if (temp == 0)\n-\tabort ();\n-      return temp;\n-\n       /* ??? Can optimize bitwise operations with one arg constant.\n \t Can optimize (a bitwise1 n) bitwise2 (a bitwise3 b)\n \t and (a bitwise1 b) bitwise2 b (etc)"}, {"sha": "73d2a42ad3610912d4726ca77f61e2a0d768a2d5", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1,3 +1,9 @@\n+2003-09-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* com.c (ffecom_overlap_): Remove FFS_EXPR case.\n+\t(ffecom_tree_canonize_ref_): Likewise.\n+\t(ffe_truthvalue_conversion): Likewise.\n+\n 2003-09-01  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* com.c (ffecom_overlap_): Kill BIT_ANDTC_EXPR."}, {"sha": "a5100d9bfa9297448ff5cb6489bf3dad87ebb1d0", "filename": "gcc/f/com.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1573,7 +1573,6 @@ ffecom_overlap_ (tree dest_decl, tree dest_offset, tree dest_size,\n     case MIN_EXPR:\n     case MAX_EXPR:\n     case ABS_EXPR:\n-    case FFS_EXPR:\n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n@@ -8882,7 +8881,6 @@ ffecom_tree_canonize_ref_ (tree *decl, tree *offset, tree *size, tree t)\n     case MIN_EXPR:\n     case MAX_EXPR:\n     case ABS_EXPR:\n-    case FFS_EXPR:\n     case LSHIFT_EXPR:\n     case RSHIFT_EXPR:\n     case LROTATE_EXPR:\n@@ -14801,7 +14799,6 @@ ffe_truthvalue_conversion (tree expr)\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n-    case FFS_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n       return ffe_truthvalue_conversion (TREE_OPERAND (expr, 0));\n "}, {"sha": "24f6b02ec70c8a8cf5ca967e54a5a380ca446a5d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -8494,18 +8494,8 @@ tree_expr_nonnegative_p (tree t)\n   switch (TREE_CODE (t))\n     {\n     case ABS_EXPR:\n-    case FFS_EXPR:\n-    case POPCOUNT_EXPR:\n-    case PARITY_EXPR:\n       return 1;\n \n-    case CLZ_EXPR:\n-    case CTZ_EXPR:\n-      /* These are undefined at zero.  This is true even if\n-\t C[LT]Z_DEFINED_VALUE_AT_ZERO is set, since what we're\n-\t computing here is a user-visible property.  */\n-      return 0;\n-\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n \n@@ -8649,12 +8639,21 @@ tree_expr_nonnegative_p (tree t)\n \t    case BUILT_IN_EXP10:\n \t    case BUILT_IN_EXP10F:\n \t    case BUILT_IN_EXP10L:\n-\t    case BUILT_IN_POW10:\n-\t    case BUILT_IN_POW10F:\n-\t    case BUILT_IN_POW10L:\n \t    case BUILT_IN_FABS:\n \t    case BUILT_IN_FABSF:\n \t    case BUILT_IN_FABSL:\n+\t    case BUILT_IN_FFS:\n+\t    case BUILT_IN_FFSL:\n+\t    case BUILT_IN_FFSLL:\n+\t    case BUILT_IN_PARITY:\n+\t    case BUILT_IN_PARITYL:\n+\t    case BUILT_IN_PARITYLL:\n+\t    case BUILT_IN_POPCOUNT:\n+\t    case BUILT_IN_POPCOUNTL:\n+\t    case BUILT_IN_POPCOUNTLL:\n+\t    case BUILT_IN_POW10:\n+\t    case BUILT_IN_POW10F:\n+\t    case BUILT_IN_POW10L:\n \t    case BUILT_IN_SQRT:\n \t    case BUILT_IN_SQRTF:\n \t    case BUILT_IN_SQRTL:"}, {"sha": "6c6b157eb2034909976b4d9383567b99507ba8a8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -1,3 +1,8 @@\n+2003-09-18  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* expr.c (java_truthvalue_conversion): Remove FFS_EXPR case.\n+\t* check-init.c (check_init): Likewise.\n+\n 2003-09-18  Roger Sayle  <roger@eyesopen.com>\n \n \t* jcf-write.c (generate_bytecode_insns): Add support for fconst_2."}, {"sha": "04ce354f5351eea5c8958435d7cebe6c603f162f", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -792,7 +792,6 @@ check_init (tree exp, words before)\n     case FIX_FLOOR_EXPR:\n     case FIX_ROUND_EXPR:\n     case ABS_EXPR:\n-    case FFS_EXPR:\n       /* Avoid needless recursion. */\n       exp = TREE_OPERAND (exp, 0);\n       goto again;"}, {"sha": "94f23f3661dec35fef9dbaf19334f610282ec399", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -175,7 +175,6 @@ java_truthvalue_conversion (tree expr)\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case FLOAT_EXPR:\n-    case FFS_EXPR:\n       /* These don't change whether an object is nonzero or zero.  */\n       return java_truthvalue_conversion (TREE_OPERAND (expr, 0));\n "}, {"sha": "4b6d236dde6efa2b4d2757a97cc2db3646a71d23", "filename": "gcc/tree.def", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96123432ff850b1e62e60e429605b0b98a17bf68/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=96123432ff850b1e62e60e429605b0b98a17bf68", "patch": "@@ -615,13 +615,6 @@ DEFTREECODE (MAX_EXPR, \"max_expr\", '2', 2)\n    operand of the ABS_EXPR must have the same type.  */\n DEFTREECODE (ABS_EXPR, \"abs_expr\", '1', 1)\n \n-/* Bit scanning and counting.  */\n-DEFTREECODE (FFS_EXPR, \"ffs_expr\", '1', 1)\n-DEFTREECODE (CLZ_EXPR, \"clz_expr\", '1', 1)\n-DEFTREECODE (CTZ_EXPR, \"ctz_expr\", '1', 1)\n-DEFTREECODE (POPCOUNT_EXPR, \"popcount_expr\", '1', 1)\n-DEFTREECODE (PARITY_EXPR, \"parity_expr\", '1', 1)\n-\n /* Shift operations for shift and rotate.\n    Shift means logical shift if done on an\n    unsigned type, arithmetic shift if done on a signed type."}]}