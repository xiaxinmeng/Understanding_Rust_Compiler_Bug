{"sha": "5d64ee190c8875dec5f15c0287a425a1e62041a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2NGVlMTkwYzg4NzVkZWM1ZjE1YzAyODdhNDI1YTFlNjIwNDFhOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-09-22T17:50:36Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-09-22T17:50:36Z"}, "message": "functional_hash.h (__hash_base): Add.\n\n2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/functional_hash.h (__hash_base): Add.\n\t(hash): Derive from __hash_base instead.\n\t* include/debug/bitset (hash): Likewise.\n\t* include/debug/vector (hash): Likewise.\n\t* include/std/system_error (hash): Likewise.\n\t* include/std/thread (hash): Likewise.\n\t* include/std/bitset (hash): Likewise.\n\t* include/profile/bitset (hash): Likewise.\n\t* include/profile/vector (hash): Likewise.\n\t* include/bits/basic_string.h (hash): Likewise.\n\t* include/bits/stl_bvector.h (hash): Likewise.\n\t* include/std/typeindex (hash): Do not derive from unary_function,\n\tadd result_type and argument_type typedefs; trim includes.\n\nFrom-SVN: r164528", "tree": {"sha": "b73cdce0684496f719170bd56a651d918abf795d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b73cdce0684496f719170bd56a651d918abf795d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d64ee190c8875dec5f15c0287a425a1e62041a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d64ee190c8875dec5f15c0287a425a1e62041a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d64ee190c8875dec5f15c0287a425a1e62041a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d64ee190c8875dec5f15c0287a425a1e62041a9/comments", "author": null, "committer": null, "parents": [{"sha": "1cf2589d14da2dd092bc8e4423953b99343a3ba7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf2589d14da2dd092bc8e4423953b99343a3ba7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf2589d14da2dd092bc8e4423953b99343a3ba7"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "8f5dc71af88c0a7f2596b41361e27f22058c5a93", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -1,3 +1,19 @@\n+2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/functional_hash.h (__hash_base): Add.\n+\t(hash): Derive from __hash_base instead.\n+\t* include/debug/bitset (hash): Likewise.\n+\t* include/debug/vector (hash): Likewise.\n+\t* include/std/system_error (hash): Likewise.\n+\t* include/std/thread (hash): Likewise.\n+\t* include/std/bitset (hash): Likewise.\n+\t* include/profile/bitset (hash): Likewise.\n+\t* include/profile/vector (hash): Likewise.\n+\t* include/bits/basic_string.h (hash): Likewise.\n+\t* include/bits/stl_bvector.h (hash): Likewise.\n+\t* include/std/typeindex (hash): Do not derive from unary_function,\n+\tadd result_type and argument_type typedefs; trim includes.\n+\n 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/std/typeindex: New."}, {"sha": "308285bec86dea1083be0324696c28f11fb388a6", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -2925,7 +2925,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for string.\n   template<>\n     struct hash<string>\n-    : public std::unary_function<string, size_t>\n+    : public __hash_base<size_t, string>\n     {\n       size_t\n       operator()(const string& __s) const\n@@ -2936,7 +2936,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for wstring.\n   template<>\n     struct hash<wstring>\n-    : public std::unary_function<wstring, size_t>\n+    : public __hash_base<size_t, wstring>\n     {\n       size_t\n       operator()(const wstring& __s) const\n@@ -2950,7 +2950,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for u16string.\n   template<>\n     struct hash<u16string>\n-    : public std::unary_function<u16string, size_t>\n+    : public __hash_base<size_t, u16string>\n     {\n       size_t\n       operator()(const u16string& __s) const\n@@ -2961,7 +2961,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for u32string.\n   template<>\n     struct hash<u32string>\n-    : public std::unary_function<u32string, size_t>\n+    : public __hash_base<size_t, u32string>\n     {\n       size_t\n       operator()(const u32string& __s) const"}, {"sha": "a132cce76896bdb83c0e06883a739940d5d92121", "filename": "libstdc++-v3/include/bits/functional_hash.h", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffunctional_hash.h?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -33,7 +33,6 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <bits/stl_function.h>\n \n namespace std\n {\n@@ -45,17 +44,24 @@ namespace std\n    *  @{\n    */\n \n+  template<typename _Result, typename _Arg>\n+    struct __hash_base\n+    {\n+      typedef _Result     result_type;\n+      typedef _Arg      argument_type;\n+    };\n+\n   /// Primary class template hash.\n   template<typename _Tp>\n-    struct hash : public std::unary_function<_Tp, size_t>\n+    struct hash : public __hash_base<size_t, _Tp>\n     {\n       size_t\n       operator()(_Tp __val) const;\n     };\n \n   /// Partial specializations for pointer types.\n   template<typename _Tp>\n-    struct hash<_Tp*> : public std::unary_function<_Tp*, size_t>\n+    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>\n     {\n       size_t\n       operator()(_Tp* __p) const"}, {"sha": "74c2e85fd70a4c7da770f25429b039bf05f576d9", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -1038,7 +1038,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>\n     struct hash<_GLIBCXX_STD_D::vector<bool, _Alloc>>\n-    : public std::unary_function<_GLIBCXX_STD_D::vector<bool, _Alloc>, size_t>\n+    : public __hash_base<size_t, _GLIBCXX_STD_D::vector<bool, _Alloc>>\n     {\n       size_t\n       operator()(const _GLIBCXX_STD_D::vector<bool, _Alloc>& __b) const;"}, {"sha": "017c9e020dd9108c9877c1dbc5799c883f876485", "filename": "libstdc++-v3/include/debug/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fbitset?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -385,7 +385,7 @@ namespace __debug\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>\n     struct hash<__debug::bitset<_Nb>>\n-    : public std::unary_function<__debug::bitset<_Nb>, size_t>\n+    : public __hash_base<size_t, __debug::bitset<_Nb>>\n     {\n       size_t\n       operator()(const __debug::bitset<_Nb>& __b) const"}, {"sha": "9004f2902aeaedffb79561e90dce0edc159fe5d1", "filename": "libstdc++-v3/include/debug/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fvector?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -584,7 +584,7 @@ namespace __debug\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>\n     struct hash<__debug::vector<bool, _Alloc>>\n-    : public std::unary_function<__debug::vector<bool, _Alloc>, size_t>\n+    : public __hash_base<size_t, __debug::vector<bool, _Alloc>>\n     {\n       size_t\n       operator()(const __debug::vector<bool, _Alloc>& __b) const"}, {"sha": "79175244bed3c26a8db4456cf293e20816db4a90", "filename": "libstdc++-v3/include/profile/bitset", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fbitset?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -359,7 +359,7 @@ namespace __profile\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>\n     struct hash<__profile::bitset<_Nb>>\n-    : public std::unary_function<__profile::bitset<_Nb>, size_t>\n+    : public __hash_base<size_t, __profile::bitset<_Nb>>\n     {\n       size_t\n       operator()(const __profile::bitset<_Nb>& __b) const"}, {"sha": "cd04b5155996ef0bda702ad998f6cb9f1861587a", "filename": "libstdc++-v3/include/profile/vector", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fvector?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -505,7 +505,7 @@ namespace __profile\n   /// std::hash specialization for vector<bool>.\n   template<typename _Alloc>\n     struct hash<__profile::vector<bool, _Alloc>>\n-    : public std::unary_function<__profile::vector<bool, _Alloc>, size_t>\n+    : public __hash_base<size_t, __profile::vector<bool, _Alloc>>\n     {\n       size_t\n       operator()(const __profile::vector<bool, _Alloc>& __b) const"}, {"sha": "d263fae645acf98bb20ba8fb3b41e5359eed24ed", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -1495,7 +1495,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for bitset.\n   template<size_t _Nb>\n     struct hash<_GLIBCXX_STD_D::bitset<_Nb>>\n-    : public std::unary_function<_GLIBCXX_STD_D::bitset<_Nb>, size_t>\n+    : public __hash_base<size_t, _GLIBCXX_STD_D::bitset<_Nb>>\n     {\n       size_t\n       operator()(const _GLIBCXX_STD_D::bitset<_Nb>& __b) const\n@@ -1507,7 +1507,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<>\n     struct hash<_GLIBCXX_STD_D::bitset<0>>\n-    : public std::unary_function<_GLIBCXX_STD_D::bitset<0>, size_t>\n+    : public __hash_base<size_t, _GLIBCXX_STD_D::bitset<0>>\n     {\n       size_t\n       operator()(const _GLIBCXX_STD_D::bitset<0>&) const"}, {"sha": "ce4e23825a34a580e156febab518ad52b8469a16", "filename": "libstdc++-v3/include/std/system_error", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsystem_error?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -353,7 +353,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   /// std::hash specialization for error_code.\n   template<>\n     struct hash<error_code>\n-    : public std::unary_function<error_code, size_t>\n+    : public __hash_base<size_t, error_code>\n     {\n       size_t\n       operator()(const error_code& __e) const"}, {"sha": "d5bbf6e0146299ceec141066c9b59b657e7a0547", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -56,9 +56,6 @@ namespace std\n    * @{\n    */\n \n-  template<typename _Tp>\n-    struct hash;\n-\n   /// thread\n   class thread\n   {\n@@ -224,7 +221,7 @@ namespace std\n   /// std::hash specialization for thread::id.\n   template<>\n     struct hash<thread::id>\n-    : public std::unary_function<thread::id, size_t>\n+    : public __hash_base<size_t, thread::id>\n     {\n       size_t\n       operator()(const thread::id& __id) const"}, {"sha": "44836f67ea3e6d26d528a2ef95cfd129e99cac32", "filename": "libstdc++-v3/include/std/typeindex", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d64ee190c8875dec5f15c0287a425a1e62041a9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftypeindex?ref=5d64ee190c8875dec5f15c0287a425a1e62041a9", "patch": "@@ -35,9 +35,7 @@\n # include <bits/c++0x_warning.h>\n #else\n \n-#include <bits/c++config.h>\n #include <typeinfo>\n-#include <bits/stl_function.h> // For unary_function\n \n namespace std\n {\n@@ -92,8 +90,10 @@ namespace std\n   /// std::hash specialization for type_index.\n   template<>\n     struct hash<type_index>\n-    : public std::unary_function<type_index, size_t>\n     {\n+      typedef size_t        result_type;\n+      typedef type_index  argument_type;\n+\n       size_t\n       operator()(const type_index& __ti) const\n       { return __ti.hash_code(); }"}]}