{"sha": "113b21bdaf45d2b80d1585b4b2c9cb20395667be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzYjIxYmRhZjQ1ZDJiODBkMTU4NWI0YjJjOWNiMjAzOTU2NjdiZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-03-24T16:49:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-03-24T16:49:19Z"}, "message": "random.h (negative_binomial_distribution<>:: negative_binomial_distribution(_IntType, double), [...]): Fix construction of _M_gd.\n\n2011-03-24  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/random.h (negative_binomial_distribution<>::\n\tnegative_binomial_distribution(_IntType, double),\n\tnegative_binomial_distribution<>::\n\tnegative_binomial_distribution(const param_type&)): Fix\n\tconstruction of _M_gd.\n\t* include/bits/random.tcc (negative_binomial_distribution<>::\n\toperator()): Fix computation, per Leger's algorithm.\n\t* testsuite/util/testsuite_random.h (discrete_pdf,\n\tnegative_binomial_pdf, poisson_pdf, uniform_int_pdf): New.\n\t(binomial_pdf): Swap last two parameters.\n\t* testsuite/26_numerics/random/discrete_distribution/\n\toperators/values.cc: New.\n\t* testsuite/26_numerics/random/negative_binomial_distribution/\n\toperators/values.cc: Likewise.\n\t* testsuite/26_numerics/random/poisson_distribution/\n\toperators/values.cc: Likewise.\n\t* testsuite/26_numerics/random/uniform_int_distribution/\n\toperators/values.cc: Likewise.\n\t* testsuite/26_numerics/random/binomial_distribution/\n\toperators/values.cc: Adjust.\n\nFrom-SVN: r171411", "tree": {"sha": "910868d6c7c42cdefee69efc97a8e2516cb71df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/910868d6c7c42cdefee69efc97a8e2516cb71df2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113b21bdaf45d2b80d1585b4b2c9cb20395667be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113b21bdaf45d2b80d1585b4b2c9cb20395667be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113b21bdaf45d2b80d1585b4b2c9cb20395667be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113b21bdaf45d2b80d1585b4b2c9cb20395667be/comments", "author": null, "committer": null, "parents": [{"sha": "67295642aaa617fe2419ab877e66aa280fb32802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67295642aaa617fe2419ab877e66aa280fb32802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67295642aaa617fe2419ab877e66aa280fb32802"}], "stats": {"total": 336, "additions": 313, "deletions": 23}, "files": [{"sha": "9182dc0ae4e6e0fc45c05f1c1f31b2d43ff9332c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -1,3 +1,26 @@\n+2011-03-24  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/random.h (negative_binomial_distribution<>::\n+\tnegative_binomial_distribution(_IntType, double),\n+\tnegative_binomial_distribution<>::\n+\tnegative_binomial_distribution(const param_type&)): Fix\n+\tconstruction of _M_gd.\n+\t* include/bits/random.tcc (negative_binomial_distribution<>::\n+\toperator()): Fix computation, per Leger's algorithm.\n+\t* testsuite/util/testsuite_random.h (discrete_pdf,\n+\tnegative_binomial_pdf, poisson_pdf, uniform_int_pdf): New.\n+\t(binomial_pdf): Swap last two parameters.\n+\t* testsuite/26_numerics/random/discrete_distribution/\n+\toperators/values.cc: New.\n+\t* testsuite/26_numerics/random/negative_binomial_distribution/\n+\toperators/values.cc: Likewise.\n+\t* testsuite/26_numerics/random/poisson_distribution/\n+\toperators/values.cc: Likewise.\n+\t* testsuite/26_numerics/random/uniform_int_distribution/\n+\toperators/values.cc: Likewise.\n+\t* testsuite/26_numerics/random/binomial_distribution/\n+\toperators/values.cc: Adjust.\n+\n 2011-03-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config/abi/post/solaris2.8/baseline_symbols.txt: Regenerate."}, {"sha": "8b09a98c37bc89c17ccc949b56b8882db4feed6f", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -3611,8 +3611,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tparam_type(double __p = 0.5)\n \t: _M_p(__p)\n \t{\n-\t  _GLIBCXX_DEBUG_ASSERT((_M_p > 0.0)\n-\t\t\t     && (_M_p < 1.0));\n+\t  _GLIBCXX_DEBUG_ASSERT((_M_p > 0.0) && (_M_p < 1.0));\n \t  _M_initialize();\n \t}\n \n@@ -3782,7 +3781,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \texplicit\n \tparam_type(_IntType __k = 1, double __p = 0.5)\n \t: _M_k(__k), _M_p(__p)\n-\t{ }\n+\t{\n+\t  _GLIBCXX_DEBUG_ASSERT((_M_k > 0) && (_M_p > 0.0) && (_M_p <= 1.0));\n+\t}\n \n \t_IntType\n \tk() const\n@@ -3803,12 +3804,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       explicit\n       negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)\n-      : _M_param(__k, __p), _M_gd(__k, __p / (1.0 - __p))\n+      : _M_param(__k, __p), _M_gd(__k, 1.0)\n       { }\n \n       explicit\n       negative_binomial_distribution(const param_type& __p)\n-      : _M_param(__p), _M_gd(__p.k(), __p.p() / (1.0 - __p.p()))\n+      : _M_param(__p), _M_gd(__p.k(), 1.0)\n       { }\n \n       /**"}, {"sha": "0bbc9fd400d45798f49b642185b322341a6b9cb1", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -1075,7 +1075,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       return __is;\n     }\n \n-\n+  // This is Leger's algorithm.\n   template<typename _IntType>\n     template<typename _UniformRandomNumberGenerator>\n       typename negative_binomial_distribution<_IntType>::result_type\n@@ -1085,7 +1085,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tconst double __y = _M_gd(__urng);\n \n \t// XXX Is the constructor too slow?\n-\tstd::poisson_distribution<result_type> __poisson(__y);\n+\tstd::poisson_distribution<result_type> __poisson(__y * (1.0 - p())\n+\t\t\t\t\t\t\t / p());\n \treturn __poisson(__urng);\n       }\n \n@@ -1099,10 +1100,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \ttypedef typename std::gamma_distribution<result_type>::param_type\n \t  param_type;\n \t\n-\tconst double __y =\n-\t  _M_gd(__urng, param_type(__p.k(), __p.p() / (1.0 - __p.p())));\n+\tconst double __y = _M_gd(__urng, param_type(__p.k(), 1.0));\n \n-\tstd::poisson_distribution<result_type> __poisson(__y);\n+\tstd::poisson_distribution<result_type> __poisson(__y * (1.0 - __p.p())\n+\t\t\t\t\t\t\t / __p.p() );\n \treturn __poisson(__urng);\n       }\n "}, {"sha": "9fa8f033dff58b023a755bc73aac08ec7f5acc0e", "filename": "libstdc++-v3/testsuite/26_numerics/random/binomial_distribution/operators/values.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fbinomial_distribution%2Foperators%2Fvalues.cc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -33,16 +33,16 @@ void test01()\n \n   std::binomial_distribution<> bd1(5, 0.3);\n   auto bbd1 = std::bind(bd1, eng);\n-  testDiscreteDist(bbd1, [](int n) { return binomial_pdf(n, 0.3, 5); } );\n+  testDiscreteDist(bbd1, [](int n) { return binomial_pdf(n, 5, 0.3); } );\n \n   std::binomial_distribution<> bd2(55, 0.3);\n   auto bbd2 = std::bind(bd2, eng);\n-  testDiscreteDist(bbd2, [](int n) { return binomial_pdf(n, 0.3, 55); } );\n+  testDiscreteDist(bbd2, [](int n) { return binomial_pdf(n, 55, 0.3); } );\n \n   // libstdc++/48114\n   std::binomial_distribution<> bd3(10, 0.75);\n   auto bbd3 = std::bind(bd3, eng);\n-  testDiscreteDist(bbd3, [](int n) { return binomial_pdf(n, 0.75, 10); } );\n+  testDiscreteDist(bbd3, [](int n) { return binomial_pdf(n, 10, 0.75); } );\n }\n \n int main()"}, {"sha": "171087554da0cbc6b95046b791b853635eef668a", "filename": "libstdc++-v3/testsuite/26_numerics/random/discrete_distribution/operators/values.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscrete_distribution%2Foperators%2Fvalues.cc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.6.1 Class template discrete_distribution [rand.dist.samp.discrete]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::discrete_distribution<> dd1({ });\n+  auto bdd1 = std::bind(dd1, eng);\n+  testDiscreteDist(bdd1, [](int n) { return discrete_pdf(n, { }); } );\n+\n+  std::discrete_distribution<> dd2({ 1.0, 3.0, 2.0});\n+  auto bdd2 = std::bind(dd2, eng);\n+  testDiscreteDist(bdd2, [](int n)\n+\t\t   { return discrete_pdf(n, { 1.0, 3.0, 2.0}); } );\n+\n+  std::discrete_distribution<> dd3({ 2.0, 2.0, 1.0, 0.0, 4.0});\n+  auto bdd3 = std::bind(dd3, eng);\n+  testDiscreteDist(bdd3, [](int n)\n+\t\t   { return discrete_pdf(n, { 2.0, 2.0, 1.0, 0.0, 4.0}); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "fb5194aebcaafda3eb464e8a8b3eb6e3ae11c4a2", "filename": "libstdc++-v3/testsuite/26_numerics/random/negative_binomial_distribution/operators/values.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fnegative_binomial_distribution%2Foperators%2Fvalues.cc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -0,0 +1,55 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-cmath \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.3.4 Class template negative_binomial_distribution\n+// [rand.dist.bern.negbin]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::negative_binomial_distribution<> nbd1(5, 0.3);\n+  auto bnbd1 = std::bind(nbd1, eng);\n+  testDiscreteDist(bnbd1, [](int n)\n+\t\t   { return negative_binomial_pdf(n, 5, 0.3); } );\n+\n+  std::negative_binomial_distribution<> nbd2(55, 0.3);\n+  auto bnbd2 = std::bind(nbd2, eng);\n+  testDiscreteDist(bnbd2, [](int n)\n+\t\t   { return negative_binomial_pdf(n, 55, 0.3); } );\n+\n+  std::negative_binomial_distribution<> nbd3(10, 0.75);\n+  auto bnbd3 = std::bind(nbd3, eng);\n+  testDiscreteDist(bnbd3, [](int n)\n+\t\t   { return negative_binomial_pdf(n, 10, 0.75); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "adfe9b7528e9861061ff440503bb642e0c4481a6", "filename": "libstdc++-v3/testsuite/26_numerics/random/poisson_distribution/operators/values.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpoisson_distribution%2Foperators%2Fvalues.cc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-cmath \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.4.1 Class template poisson_distribution [rand.dist.pois.poisson]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::poisson_distribution<> pd1(3.0);\n+  auto bpd1 = std::bind(pd1, eng);\n+  testDiscreteDist(bpd1, [](int n) { return poisson_pdf(n, 3.0); } );\n+\n+  std::poisson_distribution<> pd2(15.0);\n+  auto bpd2 = std::bind(pd2, eng);\n+  testDiscreteDist(bpd2, [](int n) { return poisson_pdf(n, 15.0); } );\n+\n+  std::poisson_distribution<> pd3(30.0);\n+  auto bpd3 = std::bind(pd3, eng);\n+  testDiscreteDist(bpd3, [](int n) { return poisson_pdf(n, 30.0); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "8cb99a1a55dbd312252a0bf232e74c0c2e5f2c8c", "filename": "libstdc++-v3/testsuite/26_numerics/random/uniform_int_distribution/operators/values.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Funiform_int_distribution%2Foperators%2Fvalues.cc?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-cstdint \"\" }\n+//\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 26.5.8.2.1 Class template uniform_int_distribution [rand.dist.uni.int]\n+\n+#include <random>\n+#include <functional>\n+#include <testsuite_random.h>\n+\n+void test01()\n+{\n+  using namespace __gnu_test;\n+\n+  std::mt19937 eng;\n+\n+  std::uniform_int_distribution<> uid1(0, 2);\n+  auto buid1 = std::bind(uid1, eng);\n+  testDiscreteDist(buid1, [](int n) { return uniform_int_pdf(n, 0, 2); } );\n+\n+  std::uniform_int_distribution<> uid2(3, 7);\n+  auto buid2 = std::bind(uid2, eng);\n+  testDiscreteDist(buid2, [](int n) { return uniform_int_pdf(n, 3, 7); } );\n+\n+  std::uniform_int_distribution<> uid3(1, 20);\n+  auto buid3 = std::bind(uid3, eng);\n+  testDiscreteDist(buid3, [](int n) { return uniform_int_pdf(n, 1, 20); } );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5b5575571d796f89e32dd03c59f6b56056fd061e", "filename": "libstdc++-v3/testsuite/util/testsuite_random.h", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113b21bdaf45d2b80d1585b4b2c9cb20395667be/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_random.h?ref=113b21bdaf45d2b80d1585b4b2c9cb20395667be", "patch": "@@ -25,6 +25,7 @@\n #define _GLIBCXX_TESTSUITE_RANDOM_H\n \n #include <cmath>\n+#include <initializer_list>\n #include <testsuite_hooks.h>\n \n namespace __gnu_test\n@@ -79,27 +80,27 @@ namespace __gnu_test\n     else if (k == 1)\n       return p;\n     else\n-      return 0;\n+      return 0.0;\n   }\n \n #ifdef _GLIBCXX_USE_C99_MATH_TR1\n   inline double\n-  binomial_pdf(int k, double p, int n)\n+  binomial_pdf(int k, int n, double p)\n   {\n     if (k < 0 || k > n)\n-      return 0;\n+      return 0.0;\n     else\n       {\n \tdouble q;\n \n-\tif (p == 0) \n-\t  q = (k == 0) ? 1 : 0;\n-\telse if (p == 1)\n-\t  q = (k == n) ? 1 : 0;\n+\tif (p == 0.0)\n+\t  q = (k == 0) ? 1.0 : 0.0;\n+\telse if (p == 1.0)\n+\t  q = (k == n) ? 1.0 : 0.0;\n \telse\n \t  {\n-\t    double ln_Cnk = (std::lgamma(n + 1) - std::lgamma(k + 1)\n-\t\t\t     - std::lgamma(n - k + 1));\n+\t    double ln_Cnk = (std::lgamma(n + 1.0) - std::lgamma(k + 1.0)\n+\t\t\t     - std::lgamma(n - k + 1.0));\n \t    q = ln_Cnk + k * std::log(p) + (n - k) * std::log1p(-p);\n \t    q = std::exp(q);\n \t  }\n@@ -109,16 +110,72 @@ namespace __gnu_test\n   }\n #endif\n \n+  inline double\n+  discrete_pdf(int k, std::initializer_list<double> wl)\n+  {\n+    if (!wl.size())\n+      wl = { 1.0 };\n+\n+    if (k < 0 || k >= wl.size())\n+      return 0.0;\n+    else\n+      {\n+\tdouble sum = 0.0;\n+\tfor (auto it = wl.begin(); it != wl.end(); ++it)\n+\t  sum += *it;\n+\treturn wl.begin()[k] / sum;\n+      }\n+  }\n+\n   inline double\n   geometric_pdf(int k, double p)\n   {\n     if (k < 0)\n-      return 0;\n+      return 0.0;\n     else if (k == 0)\n       return p;\n     else\n       return p * std::pow(1 - p, k);\n   }\n+\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+  inline double\n+  negative_binomial_pdf(int k, int n, double p)\n+  {\n+    if (k < 0)\n+      return 0.0;\n+    else\n+      {\n+\tdouble f = std::lgamma(k + (double)n);\n+\tdouble a = std::lgamma(n);\n+\tdouble b = std::lgamma(k + 1.0);\n+ \n+\treturn std::exp(f - a - b) * std::pow(p, n) * std::pow(1 - p, k);\n+      }\n+  }\n+\n+  inline double\n+  poisson_pdf(int k, double mu)\n+  {\n+    if (k < 0)\n+      return 0.0;\n+    else\n+      {\n+\tdouble lf = std::lgamma(k + 1.0); \n+\treturn std::exp(std::log(mu) * k - lf - mu);\n+      }\n+  }\n+#endif\n+\n+  inline double\n+  uniform_int_pdf(int k, int a, int b)\n+  {\n+    if (k < 0 || k < a || k > b)\n+      return 0.0;\n+    else\n+      return 1.0 / (b - a + 1.0);\n+  }\n+\n } // namespace __gnu_test\n \n #endif // #ifndef _GLIBCXX_TESTSUITE_RANDOM_H"}]}