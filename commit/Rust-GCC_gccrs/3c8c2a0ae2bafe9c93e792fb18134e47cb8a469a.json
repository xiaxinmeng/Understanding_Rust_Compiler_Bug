{"sha": "3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M4YzJhMGFlMmJhZmU5YzkzZTc5MmZiMTgxMzRlNDdjYjhhNDY5YQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-01-02T15:20:30Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-01-02T15:20:30Z"}, "message": "typeck.c (strip_all_pointer_quals): Also strip quals from pointer-to-member types.\n\n        * typeck.c (strip_all_pointer_quals): Also strip quals from\n        pointer-to-member types.\n\n        * Make-lang.in (cp/TAGS): Use --no-globals.  Ignore parse.c, and treat\n        parse.y as C.\n\n        * call.c (build_new_method_call): Do evaluate the object parameter\n        when accessing a static member.\n        * typeck.c (build_component_ref): Likewise.\n\nFrom-SVN: r38619", "tree": {"sha": "cd408a5dd602099854e1d566db6edd18575f2d07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd408a5dd602099854e1d566db6edd18575f2d07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8515dc81527794ee3437aa38b56fbfe7e887fc70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8515dc81527794ee3437aa38b56fbfe7e887fc70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8515dc81527794ee3437aa38b56fbfe7e887fc70"}], "stats": {"total": 82, "additions": 73, "deletions": 9}, "files": [{"sha": "43ca3b47189850ddbb03e42d74ffc88d6ea64e77", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -1,3 +1,15 @@\n+2001-01-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (strip_all_pointer_quals): Also strip quals from \n+\tpointer-to-member types.\n+\n+\t* Make-lang.in (cp/TAGS): Use --no-globals.  Ignore parse.c, and treat\n+\tparse.y as C.\n+\n+\t* call.c (build_new_method_call): Do evaluate the object parameter\n+\twhen accessing a static member.\n+\t* typeck.c (build_component_ref): Likewise.\n+\n 2001-01-02  Andreas Jaeger  <aj@suse.de>\n \n \t* decl.c (cp_missing_noreturn_ok_p): New.\n@@ -32,6 +44,9 @@\n \n 2000-12-22  Jason Merrill  <jason@redhat.com>\n \n+\t* pt.c (more_specialized): Don't optimize len==0.\n+\t(fn_type_unification): If we're adding the return type, increase len.\n+\n \t* typeck.c (build_binary_op): Fix pmf comparison logic.\n \n \t* call.c (joust): Use DECL_NONSTATIC_MEMBER_FUNCTION_P, not"}, {"sha": "ba03731214063e7568c4fb5d182e37e1ff88b6f0", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -279,9 +279,7 @@ cp/parse.o: cp/parse.c $(CXX_TREE_H) flags.h cp/lex.h except.h output.h \\\n # Update the tags table.\n cp/TAGS: force\n \tcd $(srcdir)/cp ;\t\t\t\\\n-\tetags *.c *.h ;\t\t\t\t\\\n-\techo 'l' | tr 'l' '\\f' >> TAGS ;\t\\\n-\techo 'parse.y,0' >> TAGS ; \t\t\\\n-\tetags -a ../*.h ../*.c;\n+\tetags --no-globals -l c `echo *.c | sed 's/parse.c//'` \\\n+\t  parse.y *.h ../*.c ../*.h;\n \n .PHONY: cp/TAGS"}, {"sha": "3c1f9aa245ba2162980972bc17178d3e8314f66b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -4278,6 +4278,7 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n   tree pretty_name;\n   tree user_args;\n   tree templates = NULL_TREE;\n+  tree call;\n   int template_only = 0;\n \n   if (TREE_CODE (name) == TEMPLATE_ID_EXPR)\n@@ -4492,10 +4493,18 @@ build_new_method_call (instance, name, args, basetype_path, flags)\n \t  || resolves_to_fixed_type_p (instance, 0)))\n     flags |= LOOKUP_NONVIRTUAL;\n \n-  return build_over_call\n-    (cand,\n-     TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE ? mem_args : args,\n-     flags);\n+  if (TREE_CODE (TREE_TYPE (cand->fn)) == METHOD_TYPE)\n+    call = build_over_call (cand, mem_args, flags);\n+  else\n+    {\n+      call = build_over_call (cand, args, flags);\n+      /* Do evaluate the object parameter in a call to a static member\n+\t function.  */\n+      if (TREE_SIDE_EFFECTS (instance))\n+\tcall = build (COMPOUND_EXPR, TREE_TYPE (call), instance, call);\n+    }\n+\n+  return call;\n }\n \n /* Returns non-zero iff standard conversion sequence ICS1 is a proper"}, {"sha": "443fb2d4b8fabf6b9bdca073862a25bc1c7a973a", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -2208,6 +2208,11 @@ build_component_ref (datum, component, basetype_path, protect)\n \t    mark_used (field);\n \t  else\n \t    TREE_USED (field) = 1;\n+\n+\t  /* Do evaluate the object when accessing a static member.  */\n+\t  if (TREE_SIDE_EFFECTS (datum))\n+\t    field = build (COMPOUND_EXPR, TREE_TYPE (field), datum, field);\n+\n \t  return field;\n \t}\n     }\n@@ -7131,6 +7136,9 @@ strip_all_pointer_quals (type)\n {\n   if (TREE_CODE (type) == POINTER_TYPE)\n     return build_pointer_type (strip_all_pointer_quals (TREE_TYPE (type)));\n+  else if (TREE_CODE (type) == OFFSET_TYPE)\n+    return build_offset_type (TYPE_OFFSET_BASETYPE (type),\n+\t\t\t      strip_all_pointer_quals (TREE_TYPE (type)));\n   else\n     return TYPE_MAIN_VARIANT (type);\n }"}, {"sha": "6488da5be6d17c39075b2b995b5240ded06bd4fd", "filename": "gcc/testsuite/g++.old-deja/g++.martin/eval1.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Feval1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Feval1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.martin%2Feval1.C?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -1,5 +1,4 @@\n // Postfix expression must be evaluated even if accessing a static member.\n-// execution test - XFAIL *-*-*\n \n struct S\n {"}, {"sha": "8cdaa99613546faacd240435e1c1e1985d7d09c1", "filename": "gcc/testsuite/g++.old-deja/g++.other/cast7.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fcast7.C?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -0,0 +1,11 @@\n+// Test that we can add cv-quals in a static cast to a pointer-to-base type.\n+\n+struct A { int i; };\n+struct B : public A {};\n+\n+int main()\n+{\n+  int B::* bp = &B::i;\n+  const int A::* ap = static_cast<const int A::*>(bp);\n+  return ap != bp;\n+}"}, {"sha": "0fbaea86b3b2677fabb84e78db08657e8dbe0c1b", "filename": "gcc/testsuite/g++.old-deja/g++.other/static16.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Fstatic16.C?ref=3c8c2a0ae2bafe9c93e792fb18134e47cb8a469a", "patch": "@@ -0,0 +1,24 @@\n+// Test that we properly evaluate the object parameter when accessing static\n+// members.\n+\n+struct A {\n+  static void f () {}\n+  static int i;\n+};\n+\n+int A::i;\n+\n+int c = 0;\n+\n+A g ()\n+{\n+  ++c;\n+  return A();\n+}\n+\n+int main ()\n+{\n+  g().f();\n+  g().i = 42;\n+  return (c != 2);\n+}"}]}