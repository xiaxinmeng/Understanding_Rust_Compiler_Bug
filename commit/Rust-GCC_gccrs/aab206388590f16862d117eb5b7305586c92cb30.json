{"sha": "aab206388590f16862d117eb5b7305586c92cb30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFiMjA2Mzg4NTkwZjE2ODYyZDExN2ViNWI3MzA1NTg2YzkyY2IzMA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-02-17T15:53:07Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2018-02-17T15:53:07Z"}, "message": "re PR fortran/84270 (optimization bug with assumed size array argument)\n\n2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/84270\n\t* frontend-passes (scalarized_expr):  If the expression\n\tis an assumed size array, leave in the last reference\n\tand pass AR_SECTION instead of AR_FULL to gfc_resolve\n\tin order to avoid an error.\n\n2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/84270\n\t* gfortran.dg/inline_matmul_22.f90: New test.\n\nFrom-SVN: r257783", "tree": {"sha": "ddc78ca39acdca2320f2e6933008c5ee7dc897ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddc78ca39acdca2320f2e6933008c5ee7dc897ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aab206388590f16862d117eb5b7305586c92cb30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab206388590f16862d117eb5b7305586c92cb30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab206388590f16862d117eb5b7305586c92cb30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab206388590f16862d117eb5b7305586c92cb30/comments", "author": null, "committer": null, "parents": [{"sha": "7d6ce202609bd8bcbd8618507cef32e793b477e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6ce202609bd8bcbd8618507cef32e793b477e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6ce202609bd8bcbd8618507cef32e793b477e4"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "ce98b760ec8457d1a08599789b8a79674f524e8e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=aab206388590f16862d117eb5b7305586c92cb30", "patch": "@@ -1,3 +1,11 @@\n+2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/84270\n+\t* frontend-passes (scalarized_expr):  If the expression\n+\tis an assumed size array, leave in the last reference\n+\tand pass AR_SECTION instead of AR_FULL to gfc_resolve\n+\tin order to avoid an error.\n+\n 2018-02-17  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/84115"}, {"sha": "d07d142faa443c5df2167c91a82d491df0751c1d", "filename": "gcc/fortran/frontend-passes.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ffortran%2Ffrontend-passes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ffortran%2Ffrontend-passes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ffrontend-passes.c?ref=aab206388590f16862d117eb5b7305586c92cb30", "patch": "@@ -3567,10 +3567,26 @@ scalarized_expr (gfc_expr *e_in, gfc_expr **index, int count_index)\n \t\t\t is the lbound of a full ref.  */\n \t\t      int j;\n \t\t      gfc_array_ref *ar;\n+\t\t      int to;\n \n \t\t      ar = &ref->u.ar;\n-\t\t      ar->type = AR_FULL;\n-\t\t      for (j = 0; j < ar->dimen; j++)\n+\n+\t\t      /* For assumed size, we need to keep around the final\n+\t\t\t reference in order not to get an error on resolution\n+\t\t\t below, and we cannot use AR_FULL.  */\n+\t\t\t \n+\t\t      if (ar->as->type == AS_ASSUMED_SIZE)\n+\t\t\t{\n+\t\t\t  ar->type = AR_SECTION;\n+\t\t\t  to = ar->dimen - 1;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  to = ar->dimen;\n+\t\t\t  ar->type = AR_FULL;\n+\t\t\t}\n+\n+\t\t      for (j = 0; j < to; j++)\n \t\t\t{\n \t\t\t  gfc_free_expr (ar->start[j]);\n \t\t\t  ar->start[j] = NULL;"}, {"sha": "76d8f4982957285e1eaaf20e89ca651483634c70", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aab206388590f16862d117eb5b7305586c92cb30", "patch": "@@ -1,3 +1,8 @@\n+2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/84270\n+\t* gfortran.dg/inline_matmul_22.f90: New test.\n+\n 2018-02-17  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/84381"}, {"sha": "702e32e74671cb03d493fe70772cbb41627756ec", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_22.f90", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aab206388590f16862d117eb5b7305586c92cb30/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_22.f90?ref=aab206388590f16862d117eb5b7305586c92cb30", "patch": "@@ -0,0 +1,44 @@\n+! { dg-do compile }\n+! { dg-additional-options \"-ffrontend-optimize\" }\n+! PR 84270 - this used to be rejected.\n+! Test case by Michael Weinert\n+\n+module fp_precision\n+\n+   integer, parameter   :: fp = selected_real_kind(13)\n+\n+end module fp_precision\n+\n+      subroutine lhcal(nrot,orth,ngpts,vgauss,vr_0)\n+\n+      use fp_precision  ! floating point precision\n+\n+      implicit none\n+\n+!--->    rotation matrices and rotations (input)\n+      integer,          intent(in)  :: nrot\n+!     real(kind=fp),    intent(in)  :: orth(3,3,nrot)  ! fine at all -O\n+      real(kind=fp),    intent(in)  :: orth(3,3,*)\n+\n+!--->    gaussian integration points\n+      integer,          intent(in)  :: ngpts\n+      real(kind=fp),    intent(in)  :: vgauss(3,*)\n+\n+!--->    output results\n+      real(kind=fp),    intent(out) :: vr_0(3)\n+\n+      real(kind=fp)     :: v(3),vr(3)\n+      integer           :: n,nn\n+\n+      vr_0 = 0\n+      do nn=1,ngpts\n+         v(:) = vgauss(:,nn)\n+!--->    apply rotations\n+         do n=2,nrot\n+            vr = matmul( orth(:,:,n), v )\n+            vr_0 = vr_0 + vr\n+         enddo\n+      enddo\n+\n+      return\n+      end subroutine lhcal"}]}