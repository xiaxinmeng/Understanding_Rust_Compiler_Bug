{"sha": "329d586fe57ac58fb541855cf8e329b9f5cb5cff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzI5ZDU4NmZlNTdhYzU4ZmI1NDE4NTVjZjhlMzI5YjlmNWNiNWNmZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-06-29T13:40:24Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-06-29T13:40:24Z"}, "message": "expr.c (emit_single_push_insn): If padding is needed downward...\n\n\t* expr.c (emit_single_push_insn): If padding is needed\n\tdownward, adjust the stack pointer first, and then store the\n\tdata into the stack location using an offset.\n\nFrom-SVN: r68670", "tree": {"sha": "a9e4d6a272ba2deeafa435b5c0094f8604354c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e4d6a272ba2deeafa435b5c0094f8604354c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/329d586fe57ac58fb541855cf8e329b9f5cb5cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329d586fe57ac58fb541855cf8e329b9f5cb5cff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/329d586fe57ac58fb541855cf8e329b9f5cb5cff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/329d586fe57ac58fb541855cf8e329b9f5cb5cff/comments", "author": null, "committer": null, "parents": [{"sha": "159b3be1f3f7f43d37cbe60b4e8c46a113755b73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/159b3be1f3f7f43d37cbe60b4e8c46a113755b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/159b3be1f3f7f43d37cbe60b4e8c46a113755b73"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "b1eea532f46b4b694d9eb58a84d5471a6d3a9786", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329d586fe57ac58fb541855cf8e329b9f5cb5cff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329d586fe57ac58fb541855cf8e329b9f5cb5cff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=329d586fe57ac58fb541855cf8e329b9f5cb5cff", "patch": "@@ -1,3 +1,9 @@\n+2003-06-29  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.c (emit_single_push_insn): If padding is needed\n+\tdownward, adjust the stack pointer first, and then store the\n+\tdata into the stack location using an offset.\n+\n 2003-06-29  Andreas Jaeger  <aj@suse.de>\n \n \t* collect2.h: Convert prototypes to ISO C90."}, {"sha": "31c3fa4a205cea404b504fcd2ca1724490837059", "filename": "gcc/expr.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/329d586fe57ac58fb541855cf8e329b9f5cb5cff/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/329d586fe57ac58fb541855cf8e329b9f5cb5cff/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=329d586fe57ac58fb541855cf8e329b9f5cb5cff", "patch": "@@ -3802,12 +3802,48 @@ emit_single_push_insn (mode, x, type)\n     }\n   if (GET_MODE_SIZE (mode) == rounded_size)\n     dest_addr = gen_rtx_fmt_e (STACK_PUSH_CODE, Pmode, stack_pointer_rtx);\n+  /* If we are to pad downward, adjust the stack pointer first and\n+     then store X into the stack location using an offset.  This is\n+     because emit_move_insn does not know how to pad; it does not have\n+     access to type.  */\n+  else if (FUNCTION_ARG_PADDING (mode, type) == downward)\n+    {\n+      unsigned padding_size = rounded_size - GET_MODE_SIZE (mode);\n+      HOST_WIDE_INT offset;\n+\n+      emit_move_insn (stack_pointer_rtx,\n+\t\t      expand_binop (Pmode,\n+#ifdef STACK_GROWS_DOWNWARD\n+\t\t\t\t    sub_optab,\n+#else\n+\t\t\t\t    add_optab,\n+#endif\n+\t\t\t\t    stack_pointer_rtx,\n+\t\t\t\t    GEN_INT (rounded_size),\n+\t\t\t\t    NULL_RTX, 0, OPTAB_LIB_WIDEN));\n+\n+      offset = (HOST_WIDE_INT) padding_size;\n+#ifdef STACK_GROWS_DOWNWARD\n+      if (STACK_PUSH_CODE == POST_DEC)\n+\t/* We have already decremented the stack pointer, so get the\n+\t   previous value.  */\n+\toffset += (HOST_WIDE_INT) rounded_size;\n+#else\n+      if (STACK_PUSH_CODE == POST_INC)\n+\t/* We have already incremented the stack pointer, so get the\n+\t   previous value.  */\n+\toffset -= (HOST_WIDE_INT) rounded_size;\n+#endif\n+      dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (offset));\n+    }\n   else\n     {\n #ifdef STACK_GROWS_DOWNWARD\n+      /* ??? This seems wrong if STACK_PUSH_CODE == POST_DEC.  */\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\tGEN_INT (-(HOST_WIDE_INT) rounded_size));\n #else\n+      /* ??? This seems wrong if STACK_PUSH_CODE == POST_INC.  */\n       dest_addr = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\tGEN_INT (rounded_size));\n #endif"}]}