{"sha": "eac400810bc34aae9f5142ff14ea7bcefc404cf8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWFjNDAwODEwYmMzNGFhZTlmNTE0MmZmMTRlYTdiY2VmYzQwNGNmOA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-27T21:54:55Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-27T21:54:55Z"}, "message": "(high_{block,function}_linenum): New variables.\n\n(final_start_function): Initialize them.\n(final_end_function): Pass highest line number to function end debugging\nroutines.\n(final_scan_insn): Pass highest line number in block to block end debugging\nfunction.\n(output_source_line): Update highest line in block and function.\n\nFrom-SVN: r8827", "tree": {"sha": "4f46e954f705e3c687af0d3cd22a95d985814a47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f46e954f705e3c687af0d3cd22a95d985814a47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eac400810bc34aae9f5142ff14ea7bcefc404cf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac400810bc34aae9f5142ff14ea7bcefc404cf8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eac400810bc34aae9f5142ff14ea7bcefc404cf8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eac400810bc34aae9f5142ff14ea7bcefc404cf8/comments", "author": null, "committer": null, "parents": [{"sha": "bbff01697a0eaecb5e53bb4515fede8ba1c2b869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbff01697a0eaecb5e53bb4515fede8ba1c2b869", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbff01697a0eaecb5e53bb4515fede8ba1c2b869"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "5d62c92d21291fc124b4ffd85f8312e6f91a4ce1", "filename": "gcc/final.c", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eac400810bc34aae9f5142ff14ea7bcefc404cf8/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eac400810bc34aae9f5142ff14ea7bcefc404cf8/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=eac400810bc34aae9f5142ff14ea7bcefc404cf8", "patch": "@@ -1,5 +1,5 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n-   Copyright (C) 1987, 88, 89, 92, 93, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 89, 92, 93, 94, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -121,6 +121,12 @@ static rtx debug_insn = 0;\n /* Line number of last NOTE.  */\n static int last_linenum;\n \n+/* Highest line number in current block.  */\n+static int high_block_linenum;\n+\n+/* Likewise for function.  */\n+static int high_function_linenum;\n+\n /* Filename of last NOTE.  */\n static char *last_filename;\n \n@@ -877,19 +883,19 @@ final_start_function (first, file, optimize)\n      in the last statement of the preceding function.  */\n   if (NOTE_LINE_NUMBER (first) != NOTE_INSN_DELETED)\n     {\n+      last_linenum = high_block_linenum = high_function_linenum\n+\t= NOTE_LINE_NUMBER (first);\n+\n       if (write_symbols == SDB_DEBUG)\n \t/* For sdb, let's not, but say we did.\n \t   We need to set last_linenum for sdbout_function_begin,\n \t   but we can't have an actual line number before the .bf symbol.\n \t   (sdb_begin_function_line is not set,\n \t   and other compilers don't do it.)  */\n-\tlast_linenum = NOTE_LINE_NUMBER (first);\n+\t;\n #ifdef XCOFF_DEBUGGING_INFO\n       else if (write_symbols == XCOFF_DEBUG)\n-\t{\n-\t  last_linenum = NOTE_LINE_NUMBER (first);\n-\t  xcoffout_output_first_source_line (file, last_linenum);\n-\t}\n+\txcoffout_output_first_source_line (file, last_linenum);\n #endif\t  \n       else\n \toutput_source_line (file, first);\n@@ -1033,7 +1039,7 @@ final_end_function (first, file, optimize)\n \n #ifdef SDB_DEBUGGING_INFO\n   if (write_symbols == SDB_DEBUG)\n-    sdbout_end_function (last_linenum);\n+    sdbout_end_function (high_function_linenum);\n #endif\n \n #ifdef DWARF_DEBUGGING_INFO\n@@ -1043,7 +1049,7 @@ final_end_function (first, file, optimize)\n \n #ifdef XCOFF_DEBUGGING_INFO\n   if (write_symbols == XCOFF_DEBUG)\n-    xcoffout_end_function (file, last_linenum);\n+    xcoffout_end_function (file, high_function_linenum);\n #endif\n \n #ifdef FUNCTION_EPILOGUE\n@@ -1344,6 +1350,8 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t    }\n \t  pending_blocks[block_depth++] = next_block_index;\n \n+\t  high_block_linenum = last_linenum;\n+\n \t  /* Output debugging info about the symbol-block beginning.  */\n \n #ifdef SDB_DEBUGGING_INFO\n@@ -1381,7 +1389,8 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \n #ifdef XCOFF_DEBUGGING_INFO\n \t  if (write_symbols == XCOFF_DEBUG && block_depth >= 0)\n-\t    xcoffout_end_block (file, last_linenum, pending_blocks[block_depth]);\n+\t    xcoffout_end_block (file, high_block_linenum,\n+\t\t\t\tpending_blocks[block_depth]);\n #endif\n #ifdef DBX_DEBUGGING_INFO\n \t  if (write_symbols == DBX_DEBUG && block_depth >= 0)\n@@ -1390,7 +1399,8 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #endif\n #ifdef SDB_DEBUGGING_INFO\n \t  if (write_symbols == SDB_DEBUG && block_depth >= 0)\n-\t    sdbout_end_block (file, last_linenum, pending_blocks[block_depth]);\n+\t    sdbout_end_block (file, high_block_linenum,\n+\t\t\t      pending_blocks[block_depth]);\n #endif\n #ifdef DWARF_DEBUGGING_INFO\n \t  if (write_symbols == DWARF_DEBUG && block_depth >= 1)\n@@ -2018,6 +2028,8 @@ output_source_line (file, insn)\n \n   last_filename = filename;\n   last_linenum = NOTE_LINE_NUMBER (insn);\n+  high_block_linenum = MAX (last_linenum, high_block_linenum);\n+  high_function_linenum = MAX (last_linenum, high_function_linenum);\n \n   if (write_symbols != NO_DEBUG)\n     {"}]}