{"sha": "a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJmNWE3ODIxNGVkYzQ3MTZlNmY5N2I5N2ZiNzgzOWEyMTFlOGZmNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-13T21:15:41Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2018-02-13T21:15:41Z"}, "message": "compiler: don't export function descriptors for unexported names\n    \n    They aren't needed, and could potentially cause unlikely symbol name\n    collisions.  Also, the runtime package's reference to main could cause\n    the runtime package to define main.main..f, which could also be\n    defined in the main package if it does something like fmt.Print(main).\n    That will normally work but will fail with a multiple symbol\n    definition error when using -static-libgo.\n    \n    Reviewed-on: https://go-review.googlesource.com/93656\n\nFrom-SVN: r257637", "tree": {"sha": "f5e4bbb1924e4046c38bbf624a3a029efd08be5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5e4bbb1924e4046c38bbf624a3a029efd08be5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2f5a78214edc4716e6f97b97fb7839a211e8ff7/comments", "author": null, "committer": null, "parents": [{"sha": "4155fafc7f43234fc0c819a6f9c6ebaffc59e8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4155fafc7f43234fc0c819a6f9c6ebaffc59e8cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4155fafc7f43234fc0c819a6f9c6ebaffc59e8cc"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "baf77e31e70cd3772ed1fd1e0ed9d49844e3fa89", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f5a78214edc4716e6f97b97fb7839a211e8ff7/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f5a78214edc4716e6f97b97fb7839a211e8ff7/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "patch": "@@ -1,4 +1,4 @@\n-7998e29eec43ede1cee925d87eef0b09da67d90b\n+5d5ea2fd05dbf369ccc53c93d4846623cdea0c47\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "9792faaa0e4f91af0b87bc0085ca9553a32ad97a", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2f5a78214edc4716e6f97b97fb7839a211e8ff7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2f5a78214edc4716e6f97b97fb7839a211e8ff7/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=a2f5a78214edc4716e6f97b97fb7839a211e8ff7", "patch": "@@ -1330,9 +1330,24 @@ Func_descriptor_expression::do_get_backend(Translate_context* context)\n   else\n     {\n       Location bloc = Linemap::predeclared_location();\n+\n+      // The runtime package has hash/equality functions that are\n+      // referenced by type descriptors outside of the runtime, so the\n+      // function descriptors must be visible even though they are not\n+      // exported.\n+      bool is_exported_runtime = false;\n+      if (gogo->compiling_runtime()\n+\t  && gogo->package_name() == \"runtime\"\n+\t  && (no->name().find(\"hash\") != std::string::npos\n+\t      || no->name().find(\"equal\") != std::string::npos))\n+\tis_exported_runtime = true;\n+\n       bool is_hidden = ((no->is_function()\n \t\t\t && no->func_value()->enclosing() != NULL)\n+\t\t\t|| (Gogo::is_hidden_name(no->name())\n+\t\t\t    && !is_exported_runtime)\n \t\t\t|| Gogo::is_thunk(no));\n+\n       bvar = context->backend()->immutable_struct(var_name, asm_name,\n                                                   is_hidden, false,\n \t\t\t\t\t\t  btype, bloc);"}]}