{"sha": "7b267e3e9269822cd55dbd4e4e8071270a1e0984", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IyNjdlM2U5MjY5ODIyY2Q1NWRiZDRlNGU4MDcxMjcwYTFlMDk4NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gnu.org", "date": "2000-05-10T00:23:47Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-05-10T00:23:47Z"}, "message": "acinclude.m4 (GLIBCPP_CHECK_CPU): Change powerpc bits to -mcpu=powerpc.\n\n\n2000-05-09  Benjamin Kosnik  <bkoz@gnu.org>\n\n\t* acinclude.m4 (GLIBCPP_CHECK_CPU): Change powerpc bits to\n\t-mcpu=powerpc.\n\n\t* config/generic/bits/ctype_specializations.h (ctype<char>::is):\n\tMake more generic.\n\n\t* config/bsd: New directory.\n\t* config/bsd/ctype.cc: New.\n\t* config/bsd/bits/ctype_base.h (ctype_base): New.\n\t* config/bsd/bits/ctype_specializations.h: New.\n\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE): Add bsd tests.\n\nFrom-SVN: r33810", "tree": {"sha": "fc92ef74c4e91a6afe0ae68fa9a5d707641a34fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc92ef74c4e91a6afe0ae68fa9a5d707641a34fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b267e3e9269822cd55dbd4e4e8071270a1e0984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b267e3e9269822cd55dbd4e4e8071270a1e0984", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b267e3e9269822cd55dbd4e4e8071270a1e0984", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b267e3e9269822cd55dbd4e4e8071270a1e0984/comments", "author": {"login": "bdekoz", "id": 997439, "node_id": "MDQ6VXNlcjk5NzQzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/997439?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bdekoz", "html_url": "https://github.com/bdekoz", "followers_url": "https://api.github.com/users/bdekoz/followers", "following_url": "https://api.github.com/users/bdekoz/following{/other_user}", "gists_url": "https://api.github.com/users/bdekoz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bdekoz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bdekoz/subscriptions", "organizations_url": "https://api.github.com/users/bdekoz/orgs", "repos_url": "https://api.github.com/users/bdekoz/repos", "events_url": "https://api.github.com/users/bdekoz/events{/privacy}", "received_events_url": "https://api.github.com/users/bdekoz/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2238de654fe0eb5e098c7986aaa9148b627ee441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2238de654fe0eb5e098c7986aaa9148b627ee441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2238de654fe0eb5e098c7986aaa9148b627ee441"}], "stats": {"total": 390, "additions": 357, "deletions": 33}, "files": [{"sha": "d435457a7a5d5e6ca60e8bcfa2115038dce73c7f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -1,3 +1,17 @@\n+2000-05-09  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* acinclude.m4 (GLIBCPP_CHECK_CPU): Change powerpc bits to\n+\t-mcpu=powerpc.\n+\n+\t* config/generic/bits/ctype_specializations.h (ctype<char>::is):\n+\tMake more generic.\n+\n+\t* config/bsd: New directory.\n+\t* config/bsd/ctype.cc: New.\n+\t* config/bsd/bits/ctype_base.h (ctype_base): New.\n+\t* config/bsd/bits/ctype_specializations.h: New.\n+\t* acinclude.m4 (GLIBCPP_CHECK_CTYPE): Add bsd tests.\n+\t\n 2000-05-09  Phil Edwards  <pme@sourceware.cygnus.com>\n \n \t* acinclude.m4:  New macro, GLIBCPP_ENABLE_CXX_FLAGS."}, {"sha": "b2a688c8b867c9448136ba3959a45ef1f3cc69d5", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -76,6 +76,7 @@ CXXCPP = @CXXCPP@\n DEBUGFLAGS = @DEBUGFLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCC_OBJDIR = @GCC_OBJDIR@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@"}, {"sha": "a8a9adaf5ced8653018f79cfb0328a27fe75092a", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -263,7 +263,7 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n       powerpc | rs6000)\n \tcpu_include_dir=\"config/cpu/powerpc\"\n-    \tCPUFLAGS='-mnew-mnemonics -Wa,-mppc -mpowerpc'\n+    \tCPUFLAGS='-mcpu=powerpc'\n         ;;\n       sparc64 | ultrasparc)\n \tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n@@ -311,6 +311,20 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       ctype_default=no\n     fi\n \n+    dnl Test for <ctype> functionality -- BSD\n+    AC_MSG_CHECKING([<ctype> for bsd ])\n+    AC_TRY_COMPILE([#include <ctype.h>],\n+    [int\n+    foo (int a)\n+    { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n+\t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n+    ctype_bsd=yes, ctype_bsd=no)\n+    AC_MSG_RESULT($ctype_bsd)\n+    if test $ctype_bsd = \"yes\"; then\n+      ctype_include_dir=\"config/bsd\"\n+      ctype_default=no\n+    fi\n+\n     dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n     if test $ctype_default = \"yes\"; then\n     AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])"}, {"sha": "45c7328eec7220c8ef0e5d117c717a8c0f9bbb1e", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -275,7 +275,7 @@ AC_DEFUN(GLIBCPP_CHECK_CPU, [\n         ;;\n       powerpc | rs6000)\n \tcpu_include_dir=\"config/cpu/powerpc\"\n-    \tCPUFLAGS='-mnew-mnemonics -Wa,-mppc -mpowerpc'\n+    \tCPUFLAGS='-mcpu=powerpc'\n         ;;\n       sparc64 | ultrasparc)\n \tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n@@ -323,6 +323,20 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE, [\n       ctype_default=no\n     fi\n \n+    dnl Test for <ctype> functionality -- BSD\n+    AC_MSG_CHECKING([<ctype> for bsd ])\n+    AC_TRY_COMPILE([#include <ctype.h>],\n+    [int\n+    foo (int a)\n+    { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n+\t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}], \\\n+    ctype_bsd=yes, ctype_bsd=no)\n+    AC_MSG_RESULT($ctype_bsd)\n+    if test $ctype_bsd = \"yes\"; then\n+      ctype_include_dir=\"config/bsd\"\n+      ctype_default=no\n+    fi\n+\n     dnl Test for <ctype> functionality -- solaris 2.6 and 2.7\n     if test $ctype_default = \"yes\"; then\n     AC_MSG_CHECKING([<ctype> for solaris 2.[6,7,8] ])"}, {"sha": "0ec8927f56447ac9d46190f954f184d3b942fa48", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -3,6 +3,13 @@\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n+// If using the namespace std, you need this. Eventually this should\n+// not be an option. In the meantime, and as things like std_ctype.h\n+// need to be hacked out, give people the option. If this is set to 1,\n+// CXXFLAGS should include -fhonor-std. If this is undefined, CXXFLAGS\n+// should include -fno-honor-std.\n+#undef _GLIBCPP_USE_NAMESPACES\n+\n // Include support for 'long long' and 'unsigned long long'.\n #undef _GLIBCPP_USE_LONG_LONG\n "}, {"sha": "97209efc87134b8d84b4f17b8e63ca734fbe5b19", "filename": "libstdc++-v3/config/bsd/bits/ctype_base.h", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_base.h?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -0,0 +1,59 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h on FreeBSD 4.0\n+  \n+  struct ctype_base\n+  {\n+    typedef unsigned long \tmask;\n+    // Non-standard typedefs.\n+    typedef const int* \t\t__to_type;\n+\n+    enum\n+    {\n+      space = _CTYPE_S,\n+      print = _CTYPE_R,\n+      cntrl = _CTYPE_C,\n+      upper = _CTYPE_U,\n+      lower = _CTYPE_L,\n+      alpha = _CTYPE_A,\n+      digit = _CTYPE_D,\n+      punct = _CTYPE_P,\n+      xdigit = _CTYPE_X,\n+      alnum = _CTYPE_A | _CTYPE_D,\n+      graph = _CTYPE_G\n+    };\n+  };\n+\n+\n+"}, {"sha": "c156a5a2a2d80e67397d3542e0090ca093c7e49f", "filename": "libstdc++-v3/config/bsd/bits/ctype_specializations.h", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fbits%2Fctype_specializations.h?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -0,0 +1,78 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)\n+// functions go in ctype.cc\n+  \n+  bool\n+  ctype<char>::\n+  is(mask __m, char __c) const throw()\n+  { \n+    if (__m & digit || __m & xdigit)\n+      return __isctype(__c, __m);\n+    else\n+      return __istype(__c);\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  is(const char* __low, const char* __high, mask* __vec) const throw()\n+  {\n+    // XXX\n+    while (__low < __high)\n+      *__vec++ = _M_table[(unsigned char)(*__low++)];\n+    return __high;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_is(mask __m, const char* __low, const char* __high) const throw()\n+  {\n+    while (__low < __high && !this->is(__m, *__low))\n+      ++__low;\n+    return __low;\n+  }\n+\n+  const char*\n+  ctype<char>::\n+  scan_not(mask __m, const char* __low, const char* __high) const throw()\n+  {\n+    while (__low < __high && this->is(__m, *__low) != 0)\n+      ++__low;\n+    return __low;\n+  }\n+\n+\n+\n+\n+"}, {"sha": "5695dcd300f635aa7cdd7498496848f8c6d16205", "filename": "libstdc++-v3/config/bsd/ctype.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fbsd%2Fctype.cc?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -0,0 +1,106 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 2000 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+  \n+// Information as gleaned from /usr/include/ctype.h\n+  \n+  ctype<char>::ctype(const mask* __table = 0, bool __del = false, \n+\tsize_t __refs = 0) throw()\n+    : _Ctype_nois<char>(__refs), _M_del(__table != 0 && __del), \n+      _M_toupper(NULL), _M_tolower(NULL),\n+      _M_ctable(NULL), _M_table(__table == 0 ? _M_ctable: __table) \n+    { }\n+\n+  char\n+  ctype<char>::do_toupper(char __c) const\n+  { return toupper((int) __c); }\n+\n+  const char*\n+  ctype<char>::do_toupper(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = toupper((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+  char\n+  ctype<char>::do_tolower(char __c) const\n+  { return tolower((int) __c); }\n+\n+  const char* \n+  ctype<char>::do_tolower(char* __low, const char* __high) const\n+  {\n+    while (__low < __high)\n+      {\n+\t*__low = tolower((int) *__low);\n+\t++__low;\n+      }\n+    return __high;\n+  }\n+\n+#ifdef _GLIBCPP_USE_WCHAR_T  \n+  ctype<wchar_t>::ctype(size_t /*__refs*/) throw()\n+    : _M_toupper(NULL), _M_tolower(NULL),\n+      _M_ctable(NULL)\n+    { }\n+\n+  wchar_t\n+  ctype<wchar_t>::do_toupper(char_type __c) const\n+  { return (__c < _S_table_size) ? _S_toupper[__c] : __c; }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_toupper(char_type* low, const char_type* high) const\n+  {\n+    for (;low < high; ++low)\n+      if (*low < _S_table_size)\n+        *low = _S_toupper[*low];\n+    return high;\n+  }\n+  \n+  wchar_t\n+  ctype<wchar_t>::do_tolower(char_type __c) const\n+  { return (__c < _S_table_size) ? _S_tolower[__c] : __c; }\n+  \n+  const wchar_t*\n+  ctype<wchar_t>::do_tolower(char_type* __low, const char_type* __high) const\n+  {\n+    for (; __low < __high; ++__low)\n+      if (*__low < _S_table_size)\n+        *__low = _S_toupper[*__low];\n+    return __high;\n+  }\n+#endif\n+\n+"}, {"sha": "952b0da8c9808c7fb5e2297070ee5be2744ed436", "filename": "libstdc++-v3/config/generic/bits/ctype_specializations.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fbits%2Fctype_specializations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fbits%2Fctype_specializations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fgeneric%2Fbits%2Fctype_specializations.h?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -52,7 +52,7 @@\n   ctype<char>::\n   scan_is(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high && !(_M_table[(unsigned char)(*__low)] & __m))\n+    while (__low < __high && !this->is(__m, *__low))\n       ++__low;\n     return __low;\n   }\n@@ -61,8 +61,7 @@\n   ctype<char>::\n   scan_not(mask __m, const char* __low, const char* __high) const throw()\n   {\n-    while (__low < __high \n-\t   && (_M_table[(unsigned char)(*__low)] & __m) != 0)\n+    while (__low < __high && this->is(__m, *__low) != 0)\n       ++__low;\n     return __low;\n   }"}, {"sha": "e93f4b2f7494e2a1d574e0473ae19b2909bc3082", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 58, "deletions": 28, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -2144,7 +2144,7 @@ echo \"configure:2134: checking for cpu primitives directory\" >&5\n         ;;\n       powerpc | rs6000)\n \tcpu_include_dir=\"config/cpu/powerpc\"\n-    \tCPUFLAGS='-mnew-mnemonics -Wa,-mppc -mpowerpc'\n+    \tCPUFLAGS='-mcpu=powerpc'\n         ;;\n       sparc64 | ultrasparc)\n \tcpu_include_dir=\"config/cpu/sparc/sparc64\"\n@@ -3524,11 +3524,41 @@ rm -f conftest*\n       ctype_default=no\n     fi\n \n+        echo $ac_n \"checking <ctype> for bsd \"\"... $ac_c\" 1>&6\n+echo \"configure:3529: checking <ctype> for bsd \" >&5\n+    cat > conftest.$ac_ext <<EOF\n+#line 3531 \"configure\"\n+#include \"confdefs.h\"\n+#include <ctype.h>\n+int main() {\n+int\n+    foo (int a)\n+    { return _CTYPE_S + _CTYPE_R + _CTYPE_C + _CTYPE_U + _CTYPE_L + _CTYPE_A \\\n+\t+ _CTYPE_D + _CTYPE_P + _CTYPE_X + _CTYPE_G ;}\n+; return 0; }\n+EOF\n+if { (eval echo configure:3541: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+  rm -rf conftest*\n+  \\\n+    ctype_bsd=yes\n+else\n+  echo \"configure: failed program was:\" >&5\n+  cat conftest.$ac_ext >&5\n+  rm -rf conftest*\n+  ctype_bsd=no\n+fi\n+rm -f conftest*\n+    echo \"$ac_t\"\"$ctype_bsd\" 1>&6\n+    if test $ctype_bsd = \"yes\"; then\n+      ctype_include_dir=\"config/bsd\"\n+      ctype_default=no\n+    fi\n+\n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.6,7,8 \"\"... $ac_c\" 1>&6\n-echo \"configure:3530: checking <ctype> for solaris 2.6,7,8 \" >&5\n+echo \"configure:3560: checking <ctype> for solaris 2.6,7,8 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 3532 \"configure\"\n+#line 3562 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -3539,7 +3569,7 @@ int\n \t+ __trans_lower[a] + __trans_upper[a] + __ctype_mask[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:3543: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:3573: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris=yes\n@@ -3554,7 +3584,7 @@ rm -f conftest*\n \n     if test $ctype_solaris = \"yes\"; then\n       echo $ac_n \"checking   for version\"\"... $ac_c\" 1>&6\n-echo \"configure:3558: checking   for version\" >&5\n+echo \"configure:3588: checking   for version\" >&5\n       ac_ext=C\n # CXXFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n ac_cpp='$CXXCPP $CPPFLAGS'\n@@ -3563,14 +3593,14 @@ ac_link='${CXX-g++} -o conftest${ac_exeext} $CXXFLAGS $CPPFLAGS $LDFLAGS conftes\n cross_compiling=$ac_cv_prog_cxx_cross\n  \n       cat > conftest.$ac_ext <<EOF\n-#line 3567 \"configure\"\n+#line 3597 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n typedef long* __to_type; __to_type const& _M_toupper = __trans_upper;\n ; return 0; }\n EOF\n-if { (eval echo configure:3574: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:3604: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n       ctype_solaris26=yes\n@@ -3602,9 +3632,9 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for solaris 2.5.1 \"\"... $ac_c\" 1>&6\n-echo \"configure:3606: checking <ctype> for solaris 2.5.1 \" >&5\n+echo \"configure:3636: checking <ctype> for solaris 2.5.1 \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 3608 \"configure\"\n+#line 3638 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -3614,7 +3644,7 @@ int\n \t+ __ctype[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:3618: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:3648: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_solaris25=yes\n@@ -3634,9 +3664,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for aix \"\"... $ac_c\" 1>&6\n-echo \"configure:3638: checking <ctype> for aix \" >&5\n+echo \"configure:3668: checking <ctype> for aix \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 3640 \"configure\"\n+#line 3670 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -3647,7 +3677,7 @@ int\n \t+ _VALC('a') + _IS('c', 0);}\n ; return 0; }\n EOF\n-if { (eval echo configure:3651: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:3681: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_aix=yes\n@@ -3667,9 +3697,9 @@ rm -f conftest*\n \n         if test $ctype_default = \"yes\"; then\n     echo $ac_n \"checking <ctype> for newlib \"\"... $ac_c\" 1>&6\n-echo \"configure:3671: checking <ctype> for newlib \" >&5\n+echo \"configure:3701: checking <ctype> for newlib \" >&5\n     cat > conftest.$ac_ext <<EOF\n-#line 3673 \"configure\"\n+#line 3703 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n int main() {\n@@ -3679,7 +3709,7 @@ int\n \t+ _ctype_[a];}\n ; return 0; }\n EOF\n-if { (eval echo configure:3683: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n+if { (eval echo configure:3713: \\\"$ac_compile\\\") 1>&5; (eval $ac_compile) 2>&5; }; then\n   rm -rf conftest*\n   \\\n     ctype_newlib=yes\n@@ -3713,17 +3743,17 @@ fi\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:3717: checking for $ac_hdr\" >&5\n+echo \"configure:3747: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 3722 \"configure\"\n+#line 3752 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:3727: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:3757: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -3752,12 +3782,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:3756: checking for $ac_func\" >&5\n+echo \"configure:3786: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 3761 \"configure\"\n+#line 3791 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -3780,7 +3810,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:3784: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:3814: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -3805,15 +3835,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:3809: checking for working mmap\" >&5\n+echo \"configure:3839: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 3817 \"configure\"\n+#line 3847 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -3953,7 +3983,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:3957: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:3987: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -4016,19 +4046,19 @@ fi\n \n if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:4020: checking for LC_MESSAGES\" >&5\n+echo \"configure:4050: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4025 \"configure\"\n+#line 4055 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:4032: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4062: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   ac_cv_val_LC_MESSAGES=yes\n else"}, {"sha": "920f55e563832f8f9a3a8d2b7c71c0f060ca1e60", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -76,6 +76,7 @@ CXXCPP = @CXXCPP@\n DEBUGFLAGS = @DEBUGFLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCC_OBJDIR = @GCC_OBJDIR@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@"}, {"sha": "123716e5bdd672016e588a6ae33a91a0045c33be", "filename": "libstdc++-v3/math/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b267e3e9269822cd55dbd4e4e8071270a1e0984/libstdc%2B%2B-v3%2Fmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmath%2FMakefile.in?ref=7b267e3e9269822cd55dbd4e4e8071270a1e0984", "patch": "@@ -76,6 +76,7 @@ CXXCPP = @CXXCPP@\n DEBUGFLAGS = @DEBUGFLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n+EXTRA_CXX_FLAGS = @EXTRA_CXX_FLAGS@\n GCC_OBJDIR = @GCC_OBJDIR@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@"}]}