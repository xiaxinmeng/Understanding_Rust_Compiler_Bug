{"sha": "eb79f4db49c5f5a807555e9d374524664eb537bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI3OWY0ZGI0OWM1ZjVhODA3NTU1ZTlkMzc0NTI0NjY0ZWI1MzdiZg==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-12-04T19:27:23Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2020-12-04T19:29:27Z"}, "message": "doc/implement-c.texi: About same-as-scalar-type volatile aggregate accesses, PR94600\n\nWe say very little about reads and writes to aggregate /\ncompound objects, just scalar objects (i.e. assignments don't\ncause reads).  Let's lets say something safe about aggregate\nobjects, but only for those that are the same size as a scalar\ntype.\n\nThere's an equal-sounding section (Volatiles) in extend.texi,\nbut this seems a more appropriate place, as specifying the\nbehavior of a standard qualifier.\n\ngcc:\n\n2020-12-04  Hans-Peter Nilsson  <hp@axis.com>\n\t    Martin Sebor  <msebor@redhat.com>\n\n\tPR middle-end/94600\n\t* doc/implement-c.texi (Qualifiers implementation): Add blurb\n\tabout access to the whole of a volatile aggregate object, only for\n\tsame-size as a scalar object.", "tree": {"sha": "21d2016631f24ef996758f88fbdc631e4bb9848e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21d2016631f24ef996758f88fbdc631e4bb9848e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb79f4db49c5f5a807555e9d374524664eb537bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb79f4db49c5f5a807555e9d374524664eb537bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb79f4db49c5f5a807555e9d374524664eb537bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb79f4db49c5f5a807555e9d374524664eb537bf/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78c4a9feceaccf487516aa1eff417e0741556e10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78c4a9feceaccf487516aa1eff417e0741556e10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78c4a9feceaccf487516aa1eff417e0741556e10"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "d7433ba5213f40dbc592dab6b19f0302154e4220", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb79f4db49c5f5a807555e9d374524664eb537bf/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb79f4db49c5f5a807555e9d374524664eb537bf/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=eb79f4db49c5f5a807555e9d374524664eb537bf", "patch": "@@ -576,6 +576,11 @@ are of scalar types, the expression is interpreted by GCC as a read of\n the volatile object; in the other cases, the expression is only evaluated\n for its side effects.\n \n+When an object of an aggregate type, with the same size and alignment as a\n+scalar type @code{S}, is the subject of a volatile access by an assignment\n+expression or an atomic function, the access to it is performed as if the\n+object's declared type were @code{volatile S}.\n+\n @end itemize\n \n @node Declarators implementation"}]}