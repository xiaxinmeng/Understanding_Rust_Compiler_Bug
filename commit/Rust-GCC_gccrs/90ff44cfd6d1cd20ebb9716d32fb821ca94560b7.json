{"sha": "90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmZjQ0Y2ZkNmQxY2QyMGViYjk3MTZkMzJmYjgyMWNhOTQ1NjBiNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-05-17T01:40:45Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-05-17T01:40:45Z"}, "message": "cfgloopanal.c (test_for_iteration): Use string concatentation on HOST_WIDE_INT_PRINT_* format specifier to collapse...\n\ngcc:\n\t* cfgloopanal.c (test_for_iteration): Use string concatentation on\n\tHOST_WIDE_INT_PRINT_* format specifier to collapse multiple\n\tfunction calls into one.\n\t* dbxout.c (dbxout_symbol): Likewise.\n\t* defaults.h (ASM_OUTPUT_SIZE_DIRECTIVE): Likewise.\n\t* dwarf2asm.c (dw2_asm_output_data_uleb128,\n\tdw2_asm_output_data_sleb128): Likewise.\n\t* genrecog.c (debug_decision_2): Likewise.\n\t* loop.c (emit_prefetch_instructions): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* print-tree.c (print_node_brief, print_node): Likewise.\n\t* ra-debug.c (dump_igraph, dump_graph_cost,\n\tdump_static_insn_cost): Likewise.\n\t* ra-rewrite.c (dump_cost): Likewise.\n\t* sdbout.c (PUT_SDB_INT_VAL, PUT_SDB_SIZE): Likewise.\n\t* sreal.c (dump_sreal): Likewise.\n\t* unroll.c (unroll_loop, precondition_loop_p): Likewise.\n\t* varasm.c (assemble_vtable_entry): Likewise.\n\ncp:\n\t* ptree.c (cxx_print_type, cxx_print_xnode): Use string\n\tconcatentation on HOST_WIDE_INT_PRINT_* format specifier to\n\tcollapse multiple function calls into one.\n\t* tree.c (debug_binfo): Likewise.\n\njava:\n\t* parse.y (print_int_node): Use string concatentation on\n\tHOST_WIDE_INT_PRINT_* format specifier to collapse multiple\n\tfunction calls into one.\n\nFrom-SVN: r66900", "tree": {"sha": "c019ef32abbdcab9b8ee28ff9f140a9c8687ed6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c019ef32abbdcab9b8ee28ff9f140a9c8687ed6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/comments", "author": null, "committer": null, "parents": [{"sha": "40fd18b5d6e1597f7775a138e1937120510c2168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40fd18b5d6e1597f7775a138e1937120510c2168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40fd18b5d6e1597f7775a138e1937120510c2168"}], "stats": {"total": 287, "additions": 130, "deletions": 157}, "files": [{"sha": "c7a2db97ccd4353025bc26c6844eb69f2746b1e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -1,5 +1,24 @@\n 2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* cfgloopanal.c (test_for_iteration): Use string concatentation on\n+\tHOST_WIDE_INT_PRINT_* format specifier to collapse multiple\n+\tfunction calls into one.\n+\t* dbxout.c (dbxout_symbol): Likewise.\n+\t* defaults.h (ASM_OUTPUT_SIZE_DIRECTIVE): Likewise.\n+\t* dwarf2asm.c (dw2_asm_output_data_uleb128,\n+\tdw2_asm_output_data_sleb128): Likewise.\n+\t* genrecog.c (debug_decision_2): Likewise.\n+\t* loop.c (emit_prefetch_instructions): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* print-tree.c (print_node_brief, print_node): Likewise.\n+\t* ra-debug.c (dump_igraph, dump_graph_cost,\n+\tdump_static_insn_cost): Likewise.\n+\t* ra-rewrite.c (dump_cost): Likewise.\n+\t* sdbout.c (PUT_SDB_INT_VAL, PUT_SDB_SIZE): Likewise.\n+\t* sreal.c (dump_sreal): Likewise.\n+\t* unroll.c (unroll_loop, precondition_loop_p): Likewise.\n+\t* varasm.c (assemble_vtable_entry): Likewise.\n+\n \t* avr.c (avr_output_function_prologue,\n \tavr_output_function_epilogue, print_operand): Fix format specifier\n \twarnings."}, {"sha": "88eaa2ce3848790a94e4b69857b57e64e2bdf799", "filename": "gcc/cfgloopanal.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcfgloopanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcfgloopanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloopanal.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -648,9 +648,8 @@ test_for_iteration (desc, iter)\n \n   if (rtl_dump_file)\n     {\n-      fprintf (rtl_dump_file, \";  Conditional to continue loop at \");\n-      fprintf (rtl_dump_file, HOST_WIDE_INT_PRINT_UNSIGNED, iter);\n-      fprintf (rtl_dump_file, \"th iteration: \");\n+      fprintf (rtl_dump_file, \";  Conditional to continue loop at \"\n+\t       HOST_WIDE_INT_PRINT_UNSIGNED \"th iteration: \", iter);\n       print_simple_rtl (rtl_dump_file, exp);\n       fprintf (rtl_dump_file, \"\\n\");\n     }"}, {"sha": "217d447745745961958d06a8f1a5e928e6f14390", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -1,3 +1,10 @@\n+2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ptree.c (cxx_print_type, cxx_print_xnode): Use string\n+\tconcatentation on HOST_WIDE_INT_PRINT_* format specifier to\n+\tcollapse multiple function calls into one.\n+\t* tree.c (debug_binfo): Likewise.\t\n+\n 2003-05-15  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/5388"}, {"sha": "900e8b0d19a04de31c98737217d508766fa946e7", "filename": "gcc/cp/ptree.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2Fptree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2Fptree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fptree.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -73,12 +73,10 @@ cxx_print_type (FILE *file, tree node, int indent)\n     case TEMPLATE_TEMPLATE_PARM:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n       indent_to (file, indent + 3);\n-      fputs (\"index \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_TYPE_IDX (node));\n-      fputs (\" level \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_TYPE_LEVEL (node));\n-      fputs (\" orig_level \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_TYPE_ORIG_LEVEL (node));\n+      fprintf (file, \"index \" HOST_WIDE_INT_PRINT_DEC \" level \"\n+\t       HOST_WIDE_INT_PRINT_DEC \" orig_level \" HOST_WIDE_INT_PRINT_DEC,\n+\t       TEMPLATE_TYPE_IDX (node), TEMPLATE_TYPE_LEVEL (node),\n+\t       TEMPLATE_TYPE_ORIG_LEVEL (node));\n       return;\n \n     case FUNCTION_TYPE:\n@@ -185,12 +183,10 @@ cxx_print_xnode (FILE *file, tree node, int indent)\n       break;\n     case TEMPLATE_PARM_INDEX:\n       indent_to (file, indent + 3);\n-      fputs (\"index \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_PARM_IDX (node));\n-      fputs (\" level \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_PARM_LEVEL (node));\n-      fputs (\" orig_level \", file);\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TEMPLATE_PARM_ORIG_LEVEL (node));\n+      fprintf (file, \"index \" HOST_WIDE_INT_PRINT_DEC \" level \"\n+\t       HOST_WIDE_INT_PRINT_DEC \" orig_level \" HOST_WIDE_INT_PRINT_DEC,\n+\t       TEMPLATE_PARM_IDX (node), TEMPLATE_PARM_LEVEL (node),\n+\t       TEMPLATE_PARM_ORIG_LEVEL (node));\n       break;\n     default:\n       break;"}, {"sha": "c333612e6fee5cd699358123023e448c50f63fba", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -984,11 +984,10 @@ debug_binfo (elem)\n   HOST_WIDE_INT n;\n   tree virtuals;\n \n-  fprintf (stderr, \"type \\\"%s\\\", offset = \",\n-\t   TYPE_NAME_STRING (BINFO_TYPE (elem)));\n-  fprintf (stderr, HOST_WIDE_INT_PRINT_DEC,\n+  fprintf (stderr, \"type \\\"%s\\\", offset = \" HOST_WIDE_INT_PRINT_DEC\n+\t   \"\\nvtable type:\\n\",\n+\t   TYPE_NAME_STRING (BINFO_TYPE (elem)),\n \t   TREE_INT_CST_LOW (BINFO_OFFSET (elem)));\n-  fprintf (stderr, \"\\nvtable type:\\n\");\n   debug_tree (BINFO_TYPE (elem));\n   if (BINFO_VTABLE (elem))\n     fprintf (stderr, \"vtable decl \\\"%s\\\"\\n\","}, {"sha": "15d2756a2f82abad9ac83b071c3dd9a85bb23d03", "filename": "gcc/dbxout.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -2253,10 +2253,9 @@ dbxout_symbol (decl, local)\n #ifdef DBX_OUTPUT_CONSTANT_SYMBOL\n \t\t  DBX_OUTPUT_CONSTANT_SYMBOL (asmfile, name, ival);\n #else\n-\t\t  fprintf (asmfile, \"%s\\\"%s:c=i\", ASM_STABS_OP, name);\n-\n-\t\t  fprintf (asmfile, HOST_WIDE_INT_PRINT_DEC, ival);\n-\t\t  fprintf (asmfile, \"\\\",0x%x,0,0,0\\n\", N_LSYM);\n+\t\t  fprintf (asmfile, \"%s\\\"%s:c=i\" HOST_WIDE_INT_PRINT_DEC\n+\t\t\t   \"\\\",0x%x,0,0,0\\n\",\n+\t\t\t   ASM_STABS_OP, name, ival, N_LSYM);\n #endif\n \t\t  return 1;\n \t\t}"}, {"sha": "f0f38a5204e086ae38918452cb35329072fae701", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -213,9 +213,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n       HOST_WIDE_INT size_ = (SIZE);\t\t\t\\\n       fputs (SIZE_ASM_OP, STREAM);\t\t\t\\\n       assemble_name (STREAM, NAME);\t\t\t\\\n-      fputs (\", \", STREAM);\t\t\t\t\\\n-      fprintf (STREAM, HOST_WIDE_INT_PRINT_DEC, size_);\t\\\n-      putc ('\\n', STREAM);\t\t\t\t\\\n+      fprintf (STREAM, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", size_); \\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "00a7b41b05a4c2d318d171d337fb53e59d55c6e1", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -514,8 +514,7 @@ dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n   VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n-  fputs (\"\\t.uleb128 \", asm_out_file);\n-  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_HEX, value);\n+  fprintf (asm_out_file, \"\\t.uleb128 \" HOST_WIDE_INT_PRINT_HEX , value);\n \n   if (flag_debug_asm && comment)\n     {\n@@ -550,8 +549,8 @@ dw2_asm_output_data_uleb128 VPARAMS ((unsigned HOST_WIDE_INT value,\n \n   if (flag_debug_asm)\n     {\n-      fprintf (asm_out_file, \"\\t%s uleb128 \", ASM_COMMENT_START);\n-      fprintf (asm_out_file, HOST_WIDE_INT_PRINT_HEX, value);\n+      fprintf (asm_out_file, \"\\t%s uleb128 \" HOST_WIDE_INT_PRINT_HEX,\n+\t       ASM_COMMENT_START, value);\n       if (comment)\n \t{\n \t  fputs (\"; \", asm_out_file);\n@@ -576,8 +575,7 @@ dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n   VA_FIXEDARG (ap, const char *, comment);\n \n #ifdef HAVE_AS_LEB128\n-  fputs (\"\\t.sleb128 \", asm_out_file);\n-  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, value);\n+  fprintf (asm_out_file, \"\\t.sleb128 \" HOST_WIDE_INT_PRINT_DEC, value);\n \n   if (flag_debug_asm && comment)\n     {\n@@ -615,8 +613,8 @@ dw2_asm_output_data_sleb128 VPARAMS ((HOST_WIDE_INT value,\n \n   if (flag_debug_asm)\n     {\n-      fprintf (asm_out_file, \"\\t%s sleb128 \", ASM_COMMENT_START);\n-      fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, value);\n+      fprintf (asm_out_file, \"\\t%s sleb128 \" HOST_WIDE_INT_PRINT_DEC,\n+\t       ASM_COMMENT_START, value);\n       if (comment)\n \t{\n \t  fputs (\"; \", asm_out_file);"}, {"sha": "e1dc9b205ba093382fb06207af31481be33d102e", "filename": "gcc/genrecog.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -2786,12 +2786,10 @@ debug_decision_2 (test)\n       fprintf (stderr, \"elt1_i=%d\", (int) test->u.intval);\n       break;\n     case DT_elt_zero_wide:\n-      fprintf (stderr, \"elt0_w=\");\n-      fprintf (stderr, HOST_WIDE_INT_PRINT_DEC, test->u.intval);\n+      fprintf (stderr, \"elt0_w=\" HOST_WIDE_INT_PRINT_DEC, test->u.intval);\n       break;\n     case DT_elt_zero_wide_safe:\n-      fprintf (stderr, \"elt0_ws=\");\n-      fprintf (stderr, HOST_WIDE_INT_PRINT_DEC, test->u.intval);\n+      fprintf (stderr, \"elt0_ws=\" HOST_WIDE_INT_PRINT_DEC, test->u.intval);\n       break;\n     case DT_veclen_ge:\n       fprintf (stderr, \"veclen>=%d\", test->u.veclen);"}, {"sha": "066601b140e48d1b30b37161dcc8054860b9dbd2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -1,3 +1,9 @@\n+2003-05-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* parse.y (print_int_node): Use string concatentation on\n+\tHOST_WIDE_INT_PRINT_* format specifier to collapse multiple\n+\tfunction calls into one.\n+\n 2003-05-13  Zack Weinberg  <zack@codesourcery.com>\n \n \t* jcf-parse.c, jcf-write.c, lex.c: Replace all calls to"}, {"sha": "62b796f6879a6ffd9f3f80c1a651fd91b9d83045", "filename": "gcc/java/parse.y", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -12569,11 +12569,8 @@ print_int_node (tree node)\n \t     TREE_INT_CST_LOW (node));\n   else if (TREE_INT_CST_HIGH (node) == -1\n \t   && TREE_INT_CST_LOW (node) != 0)\n-    {\n-      buffer [0] = '-';\n-      sprintf (&buffer [1], HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t       -TREE_INT_CST_LOW (node));\n-    }\n+    sprintf (buffer, \"-\" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t     -TREE_INT_CST_LOW (node));\n   else\n     sprintf (buffer, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t     TREE_INT_CST_HIGH (node), TREE_INT_CST_LOW (node));"}, {"sha": "e5ae479027a8a9843d0a1135655ad1647efce29c", "filename": "gcc/loop.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -4197,11 +4197,9 @@ emit_prefetch_instructions (loop)\n \t\t   \" density: %d%%; bytes_accessed: %u; total_bytes: %u\\n\",\n \t\t   (int) (info[i].bytes_accessed * 100 / info[i].stride),\n \t\t   info[i].bytes_accessed, info[i].total_bytes);\n-\t  fprintf (loop_dump_stream, \" index: \");\n-\t  fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC, info[i].index);\n-\t  fprintf (loop_dump_stream, \"; stride: \");\n-\t  fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC, info[i].stride);\n-\t  fprintf (loop_dump_stream, \"; address: \");\n+\t  fprintf (loop_dump_stream, \" index: \" HOST_WIDE_INT_PRINT_DEC\n+\t\t   \"; stride: \" HOST_WIDE_INT_PRINT_DEC \"; address: \",\n+\t\t   info[i].index, info[i].stride);\n \t  print_rtl (loop_dump_stream, info[i].base_address);\n \t  fprintf (loop_dump_stream, \"\\n\");\n \t}"}, {"sha": "3002ccb382b931c843ac07c184d307de3e3e2bd3", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -374,11 +374,8 @@ print_rtx (in_rtx)\n \t  fprintf (outfile, \" \");\n \tfprintf (outfile, HOST_WIDE_INT_PRINT_DEC, XWINT (in_rtx, i));\n \tif (! flag_simple)\n-\t  {\n-\t    fprintf (outfile, \" [\");\n-\t    fprintf (outfile, HOST_WIDE_INT_PRINT_HEX, XWINT (in_rtx, i));\n-\t    fprintf (outfile, \"]\");\n-\t  }\n+\t  fprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_HEX \"]\",\n+\t\t   XWINT (in_rtx, i));\n \tbreak;\n \n       case 'i':\n@@ -431,11 +428,8 @@ print_rtx (in_rtx)\n \t\t  print_mem_expr (outfile, REG_EXPR (in_rtx));\n \n \t\tif (REG_OFFSET (in_rtx))\n-\t\t  {\n-\t\t    fputc ('+', outfile);\n-\t\t    fprintf (outfile, HOST_WIDE_INT_PRINT_DEC,\n-\t\t\t     REG_OFFSET (in_rtx));\n-\t\t  }\n+\t\t  fprintf (outfile, \"+\" HOST_WIDE_INT_PRINT_DEC,\n+\t\t\t   REG_OFFSET (in_rtx));\n \t\tfputs (\" ]\", outfile);\n \t      }\n \n@@ -525,25 +519,18 @@ print_rtx (in_rtx)\n     {\n #ifndef GENERATOR_FILE\n     case MEM:\n-      fputs (\" [\", outfile);\n-      fprintf (outfile, HOST_WIDE_INT_PRINT_DEC, MEM_ALIAS_SET (in_rtx));\n+      fprintf (outfile, \" [\" HOST_WIDE_INT_PRINT_DEC, MEM_ALIAS_SET (in_rtx));\n \n       if (MEM_EXPR (in_rtx))\n \tprint_mem_expr (outfile, MEM_EXPR (in_rtx));\n \n       if (MEM_OFFSET (in_rtx))\n-\t{\n-\t  fputc ('+', outfile);\n-\t  fprintf (outfile, HOST_WIDE_INT_PRINT_DEC,\n-\t\t   INTVAL (MEM_OFFSET (in_rtx)));\n-\t}\n+\tfprintf (outfile, \"+\" HOST_WIDE_INT_PRINT_DEC,\n+\t\t INTVAL (MEM_OFFSET (in_rtx)));\n \n       if (MEM_SIZE (in_rtx))\n-\t{\n-\t  fputs (\" S\", outfile);\n-\t  fprintf (outfile, HOST_WIDE_INT_PRINT_DEC,\n-\t\t   INTVAL (MEM_SIZE (in_rtx)));\n-\t}\n+\tfprintf (outfile, \" S\" HOST_WIDE_INT_PRINT_DEC,\n+\t\t INTVAL (MEM_SIZE (in_rtx)));\n \n       if (MEM_ALIGN (in_rtx) != 1)\n \tfprintf (outfile, \" A%u\", MEM_ALIGN (in_rtx));"}, {"sha": "606e07ac50fe66bd315bf2db8daf927e4879fe5e", "filename": "gcc/print-tree.c", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -111,11 +111,8 @@ print_node_brief (file, prefix, node, indent)\n \tfprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED, TREE_INT_CST_LOW (node));\n       else if (TREE_INT_CST_HIGH (node) == -1\n \t       && TREE_INT_CST_LOW (node) != 0)\n-\t{\n-\t  fprintf (file, \"-\");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t   -TREE_INT_CST_LOW (node));\n-\t}\n+\tfprintf (file, \"-\" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t -TREE_INT_CST_LOW (node));\n       else\n \tfprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t TREE_INT_CST_HIGH (node), TREE_INT_CST_LOW (node));\n@@ -400,11 +397,8 @@ print_node (file, prefix, node, indent)\n \n \t  fprintf (file, \" align %d\", DECL_ALIGN (node));\n \t  if (TREE_CODE (node) == FIELD_DECL)\n-\t    {\n-\t      fprintf (file, \" offset_align \");\n-\t      fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t       DECL_OFFSET_ALIGN (node));\n-\t    }\n+\t    fprintf (file, \" offset_align \" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t     DECL_OFFSET_ALIGN (node));\n \t}\n       else if (DECL_BUILT_IN (node))\n \t{\n@@ -417,11 +411,8 @@ print_node (file, prefix, node, indent)\n \t}\n \n       if (DECL_POINTER_ALIAS_SET_KNOWN_P (node))\n-\t{\n-\t  fprintf (file, \" alias set \");\n-\t  fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n-\t\t   DECL_POINTER_ALIAS_SET (node));\n-\t}\n+\tfprintf (file, \" alias set \" HOST_WIDE_INT_PRINT_DEC,\n+\t\t DECL_POINTER_ALIAS_SET (node));\n \n       if (TREE_CODE (node) == FIELD_DECL)\n \t{\n@@ -538,10 +529,9 @@ print_node (file, prefix, node, indent)\n       if (TYPE_USER_ALIGN (node))\n \tfprintf (file, \" user\");\n \n-      fprintf (file, \" align %d\", TYPE_ALIGN (node));\n-      fprintf (file, \" symtab %d\", TYPE_SYMTAB_ADDRESS (node));\n-      fprintf (file, \" alias set \");\n-      fprintf (file, HOST_WIDE_INT_PRINT_DEC, TYPE_ALIAS_SET (node));\n+      fprintf (file, \" align %d symtab %d alias set \" HOST_WIDE_INT_PRINT_DEC,\n+\t       TYPE_ALIGN (node), TYPE_SYMTAB_ADDRESS (node),\n+\t       TYPE_ALIAS_SET (node));\n \n       print_node (file, \"attributes\", TYPE_ATTRIBUTES (node), indent + 4);\n \n@@ -662,11 +652,8 @@ print_node (file, prefix, node, indent)\n \t\t     TREE_INT_CST_LOW (node));\n \t  else if (TREE_INT_CST_HIGH (node) == -1\n \t\t   && TREE_INT_CST_LOW (node) != 0)\n-\t    {\n-\t      fprintf (file, \"-\");\n-\t      fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED,\n-\t\t       -TREE_INT_CST_LOW (node));\n-\t    }\n+\t    fprintf (file, \"-\" HOST_WIDE_INT_PRINT_UNSIGNED,\n+\t\t     -TREE_INT_CST_LOW (node));\n \t  else\n \t    fprintf (file, HOST_WIDE_INT_PRINT_DOUBLE_HEX,\n \t\t     TREE_INT_CST_HIGH (node), TREE_INT_CST_LOW (node));"}, {"sha": "b84bf619755c51d1f417d266bf4387c2199a575b", "filename": "gcc/ra-debug.c", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fra-debug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fra-debug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-debug.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -714,10 +714,10 @@ dump_igraph (df)\n \t  ra_debug_msg (DUMP_WEBS, \" sub %d\", SUBREG_BYTE (web->orig_x));\n \t  ra_debug_msg (DUMP_WEBS, \" par %d\", find_web_for_subweb (web)->id);\n \t}\n-      ra_debug_msg (DUMP_WEBS, \" +%d (span %d, cost \",\n-\t\t    web->add_hardregs, web->span_deaths);\n-      ra_debug_msg (DUMP_WEBS, HOST_WIDE_INT_PRINT_DEC, web->spill_cost);\n-      ra_debug_msg (DUMP_WEBS, \") (%s)\", reg_class_names[web->regclass]);\n+      ra_debug_msg (DUMP_WEBS, \" +%d (span %d, cost \"\n+\t\t    HOST_WIDE_INT_PRINT_DEC \") (%s)\",\n+\t\t    web->add_hardregs, web->span_deaths, web->spill_cost,\n+\t\t    reg_class_names[web->regclass]);\n       if (web->spill_temp == 1)\n \tra_debug_msg (DUMP_WEBS, \" (spilltemp)\");\n       else if (web->spill_temp == 2)\n@@ -870,9 +870,9 @@ dump_graph_cost (level, msg)\n       if (alias (web)->type == SPILLED)\n \tcost += web->orig_spill_cost;\n     }\n-  ra_debug_msg (level, \" spill cost of graph (%s) = \", msg ? msg : \"\");\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, cost);\n-  ra_debug_msg (level, \"\\n\");\n+  ra_debug_msg (level, \" spill cost of graph (%s) = \"\n+\t\tHOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\tmsg ? msg : \"\", cost);\n }\n \n /* Dump the color assignment per web, the coalesced and spilled webs.  */\n@@ -985,21 +985,21 @@ dump_static_insn_cost (file, message, prefix)\n   if (!prefix)\n     prefix = \"\";\n   fprintf (file, \"static insn cost %s\\n\", message ? message : \"\");\n-  fprintf (file, \"  %soverall:\\tnum=%6d\\tcost=\", prefix, overall.count);\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC_SPACE, 8, overall.cost);\n-  fprintf (file, \"\\n\");\n-  fprintf (file, \"  %sloads:\\tnum=%6d\\tcost=\", prefix, load.count);\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC_SPACE, 8, load.cost);\n-  fprintf (file, \"\\n\");\n-  fprintf (file, \"  %sstores:\\tnum=%6d\\tcost=\", prefix, store.count);\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC_SPACE, 8, store.cost);\n-  fprintf (file, \"\\n\");\n-  fprintf (file, \"  %sregcopy:\\tnum=%6d\\tcost=\", prefix, regcopy.count);\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC_SPACE, 8, regcopy.cost);\n-  fprintf (file, \"\\n\");\n-  fprintf (file, \"  %sselfcpy:\\tnum=%6d\\tcost=\", prefix, selfcopy.count);\n-  fprintf (file, HOST_WIDE_INT_PRINT_DEC_SPACE, 8, selfcopy.cost);\n-  fprintf (file, \"\\n\");\n+  fprintf (file, \"  %soverall:\\tnum=%6d\\tcost=\"\n+\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n+\t   prefix, overall.count, 8, overall.cost);\n+  fprintf (file, \"  %sloads:\\tnum=%6d\\tcost=\"\n+\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n+\t   prefix, load.count, 8, load.cost);\n+  fprintf (file, \"  %sstores:\\tnum=%6d\\tcost=\"\n+\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n+\t   prefix, store.count, 8, store.cost);\n+  fprintf (file, \"  %sregcopy:\\tnum=%6d\\tcost=\"\n+\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n+\t   prefix, regcopy.count, 8, regcopy.cost);\n+  fprintf (file, \"  %sselfcpy:\\tnum=%6d\\tcost=\"\n+\t   HOST_WIDE_INT_PRINT_DEC_SPACE \"\\n\",\n+\t   prefix, selfcopy.count, 8, selfcopy.cost);\n }\n \n /* Returns nonzero, if WEB1 and WEB2 have some possible"}, {"sha": "df498ab651871c756285eafa90ea10afc3cb7a30", "filename": "gcc/ra-rewrite.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fra-rewrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fra-rewrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-rewrite.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -1954,17 +1954,17 @@ dump_cost (level)\n      unsigned int level;\n {\n   ra_debug_msg (level, \"Instructions for spilling\\n added:\\n\");\n-  ra_debug_msg (level, \"  loads =%d cost=\", emitted_spill_loads);\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, spill_load_cost);\n-  ra_debug_msg (level, \"\\n  stores=%d cost=\", emitted_spill_stores);\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, spill_store_cost);\n-  ra_debug_msg (level, \"\\n  remat =%d cost=\", emitted_remat);\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, spill_remat_cost);\n-  ra_debug_msg (level, \"\\n removed:\\n  moves =%d cost=\", deleted_move_insns);\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, deleted_move_cost);\n-  ra_debug_msg (level, \"\\n  others=%d cost=\", deleted_def_insns);\n-  ra_debug_msg (level, HOST_WIDE_INT_PRINT_UNSIGNED, deleted_def_cost);\n-  ra_debug_msg (level, \"\\n\");\n+  ra_debug_msg (level, \"  loads =%d cost=\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\temitted_spill_loads, spill_load_cost);\n+  ra_debug_msg (level, \"  stores=%d cost=\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\temitted_spill_stores, spill_store_cost);\n+  ra_debug_msg (level, \"  remat =%d cost=\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\temitted_remat, spill_remat_cost);\n+  ra_debug_msg (level, \" removed:\\n  moves =%d cost=\"\n+\t\tHOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\tdeleted_move_insns, deleted_move_cost);\n+  ra_debug_msg (level, \"  others=%d cost=\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\n+\t\tdeleted_def_insns, deleted_def_cost);\n }\n \n /* Initialization of the rewrite phase.  */"}, {"sha": "9ad9f4295d56591835d38745fc9c15edd6dcee6c", "filename": "gcc/sdbout.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -155,9 +155,8 @@ static void sdbout_global_decl\t\tPARAMS ((tree));\n #ifndef PUT_SDB_INT_VAL\n #define PUT_SDB_INT_VAL(a) \\\n  do {\t\t\t\t\t\t\t\t\t\\\n-   fputs (\"\\t.val\\t\", asm_out_file);\t\t       \t\t\t\\\n-   fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n-   fprintf (asm_out_file, \"%s\", SDB_DELIM);\t\t\t\t\\\n+   fprintf (asm_out_file, \"\\t.val\\t\" HOST_WIDE_INT_PRINT_DEC \"%s\",\t\\\n+\t    (HOST_WIDE_INT) (a), SDB_DELIM);\t\t\t\t\\\n  } while (0)\n \n #endif\n@@ -191,9 +190,8 @@ do { fprintf (asm_out_file, \"\\t.def\\t\");\t\\\n #ifndef PUT_SDB_SIZE\n #define PUT_SDB_SIZE(a) \\\n  do {\t\t\t\t\t\t\t\t\t\\\n-   fputs (\"\\t.size\\t\", asm_out_file);\t\t\t\t\t\\\n-   fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, (HOST_WIDE_INT) (a)); \\\n-   fprintf (asm_out_file, \"%s\", SDB_DELIM);\t\t\t\t\\\n+   fprintf (asm_out_file, \"\\t.size\\t\" HOST_WIDE_INT_PRINT_DEC \"%s\",\t\\\n+\t    (HOST_WIDE_INT) (a), SDB_DELIM);\t\t\t\t\\\n  } while(0)\n #endif\n "}, {"sha": "0468a9631b08fd80488cfe611c93509f18adc51a", "filename": "gcc/sreal.c", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fsreal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fsreal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsreal.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -69,15 +69,11 @@ dump_sreal (file, x)\n      sreal *x;\n {\n #if SREAL_PART_BITS < 32\n-  fprintf (file, \"((\");\n-  fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED, x->sig_hi);\n-  fprintf (file, \" * 2^16 + \");\n-  fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED, x->sig_lo);\n-  fprintf (file, \") * 2^%d)\", x->exp);\n+  fprintf (file, \"((\" HOST_WIDE_INT_PRINT_UNSIGNED \" * 2^16 + \"\n+\t   HOST_WIDE_INT_PRINT_UNSIGNED \") * 2^%d)\",\n+\t   x->sig_hi, x->sig_lo, x->exp);\n #else\n-  fprintf (file, \"(\");\n-  fprintf (file, HOST_WIDE_INT_PRINT_UNSIGNED, x->sig);\n-  fprintf (file, \" * 2^%d)\", x->exp);\n+  fprintf (file, \"(\" HOST_WIDE_INT_PRINT_UNSIGNED \" * 2^%d)\", x->sig, x->exp);\n #endif\n }\n "}, {"sha": "396ec42b93b56a8f346d6aaac952361bd4b5d6cd", "filename": "gcc/unroll.c", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -285,12 +285,8 @@ unroll_loop (loop, insn_count, strength_reduce_p)\n     loop_info->n_iterations = 0;\n \n   if (loop_dump_stream && loop_info->n_iterations > 0)\n-    {\n-      fputs (\"Loop unrolling: \", loop_dump_stream);\n-      fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC,\n-\t       loop_info->n_iterations);\n-      fputs (\" iterations.\\n\", loop_dump_stream);\n-    }\n+    fprintf (loop_dump_stream, \"Loop unrolling: \" HOST_WIDE_INT_PRINT_DEC\n+\t     \" iterations.\\n\", loop_info->n_iterations);\n \n   /* Find and save a pointer to the last nonnote insn in the loop.  */\n \n@@ -1416,13 +1412,10 @@ precondition_loop_p (loop, initial_value, final_value, increment, mode)\n       *mode = word_mode;\n \n       if (loop_dump_stream)\n-\t{\n-\t  fputs (\"Preconditioning: Success, number of iterations known, \",\n-\t\t loop_dump_stream);\n-\t  fprintf (loop_dump_stream, HOST_WIDE_INT_PRINT_DEC,\n-\t\t   loop_info->n_iterations);\n-\t  fputs (\".\\n\", loop_dump_stream);\n-\t}\n+\tfprintf (loop_dump_stream,\n+\t\t \"Preconditioning: Success, number of iterations known, \"\n+\t\t HOST_WIDE_INT_PRINT_DEC \".\\n\",\n+\t\t loop_info->n_iterations);\n       return 1;\n     }\n "}, {"sha": "0e9014aaa2fefb0293af3ef600bbda76e17913e9", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90ff44cfd6d1cd20ebb9716d32fb821ca94560b7/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=90ff44cfd6d1cd20ebb9716d32fb821ca94560b7", "patch": "@@ -4825,9 +4825,7 @@ assemble_vtable_entry (symbol, offset)\n {\n   fputs (\"\\t.vtable_entry \", asm_out_file);\n   output_addr_const (asm_out_file, symbol);\n-  fputs (\", \", asm_out_file);\n-  fprintf (asm_out_file, HOST_WIDE_INT_PRINT_DEC, offset);\n-  fputc ('\\n', asm_out_file);\n+  fprintf (asm_out_file, \", \" HOST_WIDE_INT_PRINT_DEC \"\\n\", offset);\n }\n \n /* Used for vtable gc in GNU binutils.  Record the class hierarchy by noting"}]}