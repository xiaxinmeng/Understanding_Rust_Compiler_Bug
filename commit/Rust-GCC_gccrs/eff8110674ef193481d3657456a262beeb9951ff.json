{"sha": "eff8110674ef193481d3657456a262beeb9951ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZmODExMDY3NGVmMTkzNDgxZDM2NTc0NTZhMjYyYmVlYjk5NTFmZg==", "commit": {"author": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2021-04-05T20:47:17Z"}, "committer": {"name": "Stafford Horne", "email": "shorne@gmail.com", "date": "2021-08-14T22:22:58Z"}, "message": "or1k: Add mcmodel option to handle large GOTs\n\nWhen building libgeos we get an error with:\n\n    linux-uclibc/9.3.0/crtbeginS.o: in function `__do_global_dtors_aux':\n    crtstuff.c:(.text+0x118): relocation truncated to fit: R_OR1K_GOT16 against symbol `__cxa_finalize' defined in .text section in\n    /home/shorne/work/openrisc/3eb9f9d0f6d8274b2d19753c006bd83f7d536e3c/output/host/or1k-buildroot-linux-uclibc/sysroot/lib/libc.so.\n\nThis is caused by GOT code having a limit of 64k.  In OpenRISC this\nlooks to be the only relocation code pattern to be limited to 64k.\n\nThis patch allows specifying a new option -mcmodel=large which can be\nused to generate 2 more instructions to construct 32-bit addresses for\nup to 4G GOTs.\n\ngcc/ChangeLog:\n\n\tPR target/99783\n\t* config/or1k/or1k-opts.h: New file.\n\t* config/or1k/or1k.c (or1k_legitimize_address_1, print_reloc):\n\tSupport generating gotha relocations if -mcmodel=large is\n\tspecified.\n\t* config/or1k/or1k.h (TARGET_CMODEL_SMALL, TARGET_CMODEL_LARGE):\n\tNew macros.\n\t* config/or1k/or1k.opt (mcmodel=): New option.\n\t* doc/invoke.texi (OpenRISC Options): Document mcmodel.", "tree": {"sha": "71adf5ce89c9c912662179f49f2167eaecfec53b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71adf5ce89c9c912662179f49f2167eaecfec53b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eff8110674ef193481d3657456a262beeb9951ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff8110674ef193481d3657456a262beeb9951ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eff8110674ef193481d3657456a262beeb9951ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eff8110674ef193481d3657456a262beeb9951ff/comments", "author": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stffrdhrn", "id": 2404255, "node_id": "MDQ6VXNlcjI0MDQyNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stffrdhrn", "html_url": "https://github.com/stffrdhrn", "followers_url": "https://api.github.com/users/stffrdhrn/followers", "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}", "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}", "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions", "organizations_url": "https://api.github.com/users/stffrdhrn/orgs", "repos_url": "https://api.github.com/users/stffrdhrn/repos", "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}", "received_events_url": "https://api.github.com/users/stffrdhrn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96194a07bdbc57dd9733892a791d87dbe25f0802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96194a07bdbc57dd9733892a791d87dbe25f0802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96194a07bdbc57dd9733892a791d87dbe25f0802"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "f791b894fdd2653ea8a7d54d64d47cb749761fe2", "filename": "gcc/config/or1k/or1k-opts.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k-opts.h?ref=eff8110674ef193481d3657456a262beeb9951ff", "patch": "@@ -0,0 +1,30 @@\n+/* Definitions for option handling for OpenRISC.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Stafford Horne.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with GCC; see the file COPYING3.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GCC_OR1K_OPTS_H\n+#define GCC_OR1K_OPTS_H\n+\n+/* The OpenRISC code generation models available.  */\n+enum or1k_cmodel_type {\n+  CMODEL_SMALL,\n+  CMODEL_LARGE\n+};\n+\n+#endif /* GCC_OR1K_OPTS_H */"}, {"sha": "27d3fa1799500d724066a2a36c9e1d6400542772", "filename": "gcc/config/or1k/or1k.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.c?ref=eff8110674ef193481d3657456a262beeb9951ff", "patch": "@@ -750,7 +750,14 @@ or1k_legitimize_address_1 (rtx x, rtx scratch)\n \t    {\n \t      base = gen_sym_unspec (base, UNSPEC_GOT);\n \t      crtl->uses_pic_offset_table = 1;\n-\t      t2 = gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx, base);\n+\t      if (TARGET_CMODEL_LARGE)\n+\t\t{\n+\t          emit_insn (gen_rtx_SET (t1, gen_rtx_HIGH (Pmode, base)));\n+\t          emit_insn (gen_add3_insn (t1, t1, pic_offset_table_rtx));\n+\t          t2 = gen_rtx_LO_SUM (Pmode, t1, base);\n+\t\t}\n+\t      else\n+\t        t2 = gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx, base);\n \t      t2 = gen_const_mem (Pmode, t2);\n \t      emit_insn (gen_rtx_SET (t1, t2));\n \t      base = t1;\n@@ -1089,7 +1096,7 @@ print_reloc (FILE *stream, rtx x, HOST_WIDE_INT add, reloc_kind kind)\n      no special markup.  */\n   static const char * const relocs[RKIND_MAX][RTYPE_MAX] = {\n     { \"lo\", \"got\", \"gotofflo\", \"tpofflo\", \"gottpofflo\", \"tlsgdlo\" },\n-    { \"ha\", NULL,  \"gotoffha\", \"tpoffha\", \"gottpoffha\", \"tlsgdhi\" },\n+    { \"ha\", \"gotha\", \"gotoffha\", \"tpoffha\", \"gottpoffha\", \"tlsgdhi\" },\n   };\n   reloc_type type = RTYPE_DIRECT;\n "}, {"sha": "669907e7e7411af9b3de1803161dccfba74a21f3", "filename": "gcc/config/or1k/or1k.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.h?ref=eff8110674ef193481d3657456a262beeb9951ff", "patch": "@@ -21,6 +21,8 @@\n #ifndef GCC_OR1K_H\n #define GCC_OR1K_H\n \n+#include \"config/or1k/or1k-opts.h\"\n+\n /* Names to predefine in the preprocessor for this target machine.  */\n #define TARGET_CPU_CPP_BUILTINS()\t\t\\\n   do\t\t\t\t\t\t\\\n@@ -37,6 +39,11 @@\n     }\t\t\t\t\t\t\\\n   while (0)\n \n+#define TARGET_CMODEL_SMALL \\\n+  (or1k_code_model == CMODEL_SMALL)\n+#define TARGET_CMODEL_LARGE \\\n+  (or1k_code_model == CMODEL_LARGE)\n+\n /* Storage layout.  */\n \n #define DEFAULT_SIGNED_CHAR 1"}, {"sha": "cc23e3b88566fa77be9a46c0eafab89088722f11", "filename": "gcc/config/or1k/or1k.opt", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fconfig%2For1k%2For1k.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2For1k%2For1k.opt?ref=eff8110674ef193481d3657456a262beeb9951ff", "patch": "@@ -21,6 +21,9 @@\n ; See the GCC internals manual (options.texi) for a description of\n ; this file's format.\n \n+HeaderInclude\n+config/or1k/or1k-opts.h\n+\n mhard-div\n Target RejectNegative InverseMask(SOFT_DIV)\n Enable generation of hardware divide (l.div, l.divu) instructions.  This is the\n@@ -63,6 +66,22 @@ When -mhard-float is selected, enables generation of unordered floating point\n compare and set flag (lf.sfun*) instructions.  By default functions from libgcc\n are used to perform unordered floating point compare and set flag operations.\n \n+mcmodel=\n+Target RejectNegative Joined Enum(or1k_cmodel_type) Var(or1k_code_model) Init(CMODEL_SMALL)\n+Specify the code model used for accessing memory addresses.  Specifying large\n+enables generating binaries with large global offset tables.  By default the\n+value is small.\n+\n+Enum\n+Name(or1k_cmodel_type) Type(enum or1k_cmodel_type)\n+Known code model types (for use with the -mcmodel= option):\n+\n+EnumValue\n+Enum(or1k_cmodel_type) String(small) Value(CMODEL_SMALL)\n+\n+EnumValue\n+Enum(or1k_cmodel_type) String(large) Value(CMODEL_LARGE)\n+\n mcmov\n Target RejectNegative Mask(CMOV)\n Enable generation of conditional move (l.cmov) instructions.  By default the"}, {"sha": "d8a6b0b60c9aa16ceb9b30c7f764b4fc21444359", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eff8110674ef193481d3657456a262beeb9951ff/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eff8110674ef193481d3657456a262beeb9951ff", "patch": "@@ -1141,7 +1141,8 @@ Objective-C and Objective-C++ Dialects}.\n @gccoptlist{-mboard=@var{name}  -mnewlib  -mhard-mul  -mhard-div @gol\n -msoft-mul  -msoft-div @gol\n -msoft-float  -mhard-float  -mdouble-float -munordered-float @gol\n--mcmov  -mror  -mrori  -msext  -msfimm  -mshftimm}\n+-mcmov  -mror  -mrori  -msext  -msfimm  -mshftimm @gol\n+-mcmodel=@var{code-model}}\n \n @emph{PDP-11 Options}\n @gccoptlist{-mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10 @gol\n@@ -26684,6 +26685,15 @@ Enable generation of shift with immediate (@code{l.srai}, @code{l.srli},\n @code{l.slli}) instructions.  By default extra instructions will be generated\n to store the immediate to a register first.\n \n+@item -mcmodel=small\n+@opindex mcmodel=small\n+Generate OpenRISC code for the small model: The GOT is limited to 64k. This is\n+the default model.\n+\n+@item -mcmodel=large\n+@opindex mcmodel=large\n+Generate OpenRISC code for the large model: The GOT may grow up to 4G in size.\n+\n \n @end table\n "}]}