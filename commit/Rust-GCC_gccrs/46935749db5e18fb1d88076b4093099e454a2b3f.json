{"sha": "46935749db5e18fb1d88076b4093099e454a2b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5MzU3NDlkYjVlMThmYjFkODgwNzZiNDA5MzA5OWU0NTRhMmIzZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-10-19T17:40:58Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-10-19T17:40:58Z"}, "message": "Add FMA patterns for ia64.\n\nFrom-SVN: r165702", "tree": {"sha": "27c93b1884d048e1981a5a3725fe426e06805f1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27c93b1884d048e1981a5a3725fe426e06805f1f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46935749db5e18fb1d88076b4093099e454a2b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46935749db5e18fb1d88076b4093099e454a2b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46935749db5e18fb1d88076b4093099e454a2b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46935749db5e18fb1d88076b4093099e454a2b3f/comments", "author": null, "committer": null, "parents": [{"sha": "16a1a239c289bb97157a1e1b50ba7b0e3d4a38be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a1a239c289bb97157a1e1b50ba7b0e3d4a38be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a1a239c289bb97157a1e1b50ba7b0e3d4a38be"}], "stats": {"total": 140, "additions": 140, "deletions": 0}, "files": [{"sha": "fdd86cae2e0933cf1f5d531c0de2be2900849f26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46935749db5e18fb1d88076b4093099e454a2b3f", "patch": "@@ -1,3 +1,9 @@\n+2010-10-19  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/ia64/ia64.md (fmasf4, *fmssf4, *nfmasf4): New.\n+\t(fmadf4, *fmsdf4, *nfmadf4): New.\n+\t(fmaxf4, *fmsxf4, *nfmaxf4): New.\n+\n 2010-10-19  Michael Eager  <eager@eagercon.com>\n \n \t* config/microblaze/microblaze.c (TARGET_EXCEPT_UNWIND_INFO): "}, {"sha": "73e57b6cb3334baec97744edb1c7a253e3503224", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=46935749db5e18fb1d88076b4093099e454a2b3f", "patch": "@@ -2791,6 +2791,36 @@\n   \"TARGET_FUSED_MADD\"\n   \"fnma.s %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; Official C99 versions of the fmaf family of operations.\n+(define_insn \"fmasf4\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:SF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fma.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"*fmssf4\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(neg:SF\n+\t\t  (match_operand:SF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fms.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; This insn is officially \"-(a * b) + c\" which is \"(-a * b) + c\".\n+(define_insn \"*nfmasf4\"\n+  [(set (match_operand:SF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:SF (neg:SF (match_operand:SF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n+\t\t(match_operand:SF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:SF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fnma.s %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -2977,6 +3007,36 @@\n   \"TARGET_FUSED_MADD\"\n   \"fnma.s %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; Official C99 versions of the fma family of operations.\n+(define_insn \"fmadf4\"\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fma.d %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"*fmsdf4\"\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(neg:DF\n+\t\t  (match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fms.d %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; See comment for nfmasf4.\n+(define_insn \"*nfmadf4\"\n+  [(set (match_operand:DF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:DF (neg:DF (match_operand:DF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n+\t\t(match_operand:DF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:DF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fnma.d %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::\n@@ -3234,6 +3294,36 @@\n   \"TARGET_FUSED_MADD\"\n   \"fnma.d %0 = %F1, %F2, %F3\"\n   [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; Official C99 versions of the fmal family of operations.\n+(define_insn \"fmaxf4\"\n+  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fma %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+(define_insn \"*fmsxf4\"\n+  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(neg:XF\n+\t\t  (match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\"))))]\n+  \"\"\n+  \"fms %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n+\n+;; See comment for nfmasf4.\n+(define_insn \"*nfmaxf4\"\n+  [(set (match_operand:XF 0 \"fr_register_operand\" \"=f\")\n+\t(fma:XF (neg:XF (match_operand:XF 1 \"fr_reg_or_fp01_operand\" \"fG\"))\n+\t\t(match_operand:XF 2 \"fr_reg_or_fp01_operand\" \"fG\")\n+\t\t(match_operand:XF 3 \"fr_reg_or_signed_fp01_operand\" \"fZ\")))]\n+  \"\"\n+  \"fnma %0 = %F1, %F2, %F3\"\n+  [(set_attr \"itanium_class\" \"fmac\")])\n \f\n ;; ::::::::::::::::::::\n ;; ::"}, {"sha": "a4b2e063ce25bf89039f74e5552650c3a506147c", "filename": "gcc/testsuite/gcc.target/ia64/builtin-fma-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-1.c?ref=46935749db5e18fb1d88076b4093099e454a2b3f", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+/* Don't confuse the fma insn with the fma in the filename.  */\n+/* { dg-final { scan-assembler-times \"fma\\\\.\" 4 } } */\n+/* { dg-final { scan-assembler-times \"fms\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fnma\" 4 } } */\n+\n+#ifndef __FP_FAST_FMAF\n+# error \"__FP_FAST_FMAF should be defined\"\n+#endif\n+#ifndef __FP_FAST_FMA\n+# error \"__FP_FAST_FMA should be defined\"\n+#endif\n+\n+float f0(float x, float y, float z) { return __builtin_fmaf(x,y,z); }\n+float f1(float x, float y, float z) { return __builtin_fmaf(x,y,-z); }\n+float f2(float x, float y, float z) { return __builtin_fmaf(-x,y,z); }\n+float f3(float x, float y, float z) { return __builtin_fmaf(x,-y,z); }\n+float f4(float x, float y, float z) { return __builtin_fmaf(-x,-y,z); }\n+\n+double d0(double x, double y, double z) { return __builtin_fma(x,y,z); }\n+double d1(double x, double y, double z) { return __builtin_fma(x,y,-z); }\n+double d2(double x, double y, double z) { return __builtin_fma(-x,y,z); }\n+double d3(double x, double y, double z) { return __builtin_fma(x,-y,z); }\n+double d4(double x, double y, double z) { return __builtin_fma(-x,-y,z); }"}, {"sha": "16d95b70ce45481d0543af87920002542a7e0f43", "filename": "gcc/testsuite/gcc.target/ia64/builtin-fma-2.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46935749db5e18fb1d88076b4093099e454a2b3f/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2Fbuiltin-fma-2.c?ref=46935749db5e18fb1d88076b4093099e454a2b3f", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"128-bit long double\" { *-*-hpux* } { \"*\" } { \"\" } } */\n+/* { dg-options \"-O\" } */\n+/* Don't confuse the fma insn with the fma in the filename.  */\n+/* { dg-final { scan-assembler-times \"fma\\[ \t\\]\" 2 } } */\n+/* { dg-final { scan-assembler-times \"fms\" 1 } } */\n+/* { dg-final { scan-assembler-times \"fnma\" 2 } } */\n+\n+#ifndef __FP_FAST_FMAL\n+# error \"__FP_FAST_FMAL should be defined\"\n+#endif\n+\n+typedef long double LD;\n+\n+LD L0(LD x, LD y, LD z) { return __builtin_fmal(x,y,z); }\n+LD L1(LD x, LD y, LD z) { return __builtin_fmal(x,y,-z); }\n+LD L2(LD x, LD y, LD z) { return __builtin_fmal(-x,y,z); }\n+LD L3(LD x, LD y, LD z) { return __builtin_fmal(x,-y,z); }\n+LD L4(LD x, LD y, LD z) { return __builtin_fmal(-x,-y,z); }"}]}