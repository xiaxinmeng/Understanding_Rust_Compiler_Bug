{"sha": "e477cbcb75b30e7e216ff619736bdc3168bc5db4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3N2NiY2I3NWIzMGU3ZTIxNmZmNjE5NzM2YmRjMzE2OGJjNWRiNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2007-10-09T15:54:00Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2007-10-09T15:54:00Z"}, "message": "m68k.c (print_operand): Handle '{' and '}'.\n\n\t* config/m68k/m68k.c (print_operand): Handle '{' and '}'.\n\t* config/m68k/m68k.h (PRINT_OPERAND_PUNCT_VALID_P): Accept '{'\n\tand '}'.\n\t* config/m68k/m68k.md: Replace '{' with '%{' where '{' is\n\tmeant to be output.\n\nFrom-SVN: r129168", "tree": {"sha": "10d148f75ff3f1e823a4aa5dab88ab70aa6c0b8a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10d148f75ff3f1e823a4aa5dab88ab70aa6c0b8a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e477cbcb75b30e7e216ff619736bdc3168bc5db4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e477cbcb75b30e7e216ff619736bdc3168bc5db4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e477cbcb75b30e7e216ff619736bdc3168bc5db4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e477cbcb75b30e7e216ff619736bdc3168bc5db4/comments", "author": null, "committer": null, "parents": [{"sha": "b26c6d55aa4b4388dcf2028874a6f173ea15a41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b26c6d55aa4b4388dcf2028874a6f173ea15a41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b26c6d55aa4b4388dcf2028874a6f173ea15a41a"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "3a6eda7b4d720f72a53d1613738e723e8c70da3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e477cbcb75b30e7e216ff619736bdc3168bc5db4", "patch": "@@ -1,3 +1,11 @@\n+2007-10-09  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* config/m68k/m68k.c (print_operand): Handle '{' and '}'.\n+\t* config/m68k/m68k.h (PRINT_OPERAND_PUNCT_VALID_P): Accept '{'\n+\tand '}'.\n+\t* config/m68k/m68k.md: Replace '{' with '%{' where '{' is\n+\tmeant to be output.\n+\n 2007-10-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/33692"}, {"sha": "456f245d44e1266c5115aabf2e1b2d80fd634827", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=e477cbcb75b30e7e216ff619736bdc3168bc5db4", "patch": "@@ -3710,6 +3710,8 @@ floating_exact_log2 (rtx x)\n    '&' for the letter `d' in an op code, but only on the 68040.\n    '/' for register prefix needed by longlong.h.\n    '?' for m68k_library_id_string\n+   '{' for '{'\n+   '}' for '}'\n \n    'b' for byte insn (no effect, on the Sun; this is for the ISI).\n    'd' to force memory addressing to be absolute, not relative.\n@@ -3727,6 +3729,10 @@ print_operand (FILE *file, rtx op, int letter)\n       if (MOTOROLA)\n \tfprintf (file, \".\");\n     }\n+  else if (letter == '{')\n+    fprintf (file, \"{\");\n+  else if (letter == '}')\n+    fprintf (file, \"}\");\n   else if (letter == '#')\n     asm_fprintf (file, \"%I\");\n   else if (letter == '-')"}, {"sha": "a346b8169ba795aa66dffc2c81f96487b8636d80", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e477cbcb75b30e7e216ff619736bdc3168bc5db4", "patch": "@@ -1057,6 +1057,8 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n    '&' for the letter `d' in an op code, but only on the 68040.\n    '/' for register prefix needed by longlong.h.\n    '?' for m68k_library_id_string\n+   '{' for '{'\n+   '}' for '}'\n \n    'b' for byte insn (no effect, on the Sun; this is for the ISI).\n    'd' to force memory addressing to be absolute, not relative.\n@@ -1067,7 +1069,8 @@ do { if (cc_prev_status.flags & CC_IN_68881)\t\t\t\\\n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n   ((CODE) == '.' || (CODE) == '#' || (CODE) == '-'\t\t\t\\\n    || (CODE) == '+' || (CODE) == '@' || (CODE) == '!'\t\t\t\\\n-   || (CODE) == '$' || (CODE) == '&' || (CODE) == '/' || (CODE) == '?')\n+   || (CODE) == '$' || (CODE) == '&' || (CODE) == '/' || (CODE) == '?'\t\\\n+   || (CODE) == '{' || (CODE) == '}')\n \n \n /* See m68k.c for the m68k specific codes.  */"}, {"sha": "3191aecb31acc2ae4427058889aa1a6e9283478e", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e477cbcb75b30e7e216ff619736bdc3168bc5db4/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=e477cbcb75b30e7e216ff619736bdc3168bc5db4", "patch": "@@ -5487,7 +5487,7 @@\n   if (REG_P (operands[0]))\n     {\n       if (INTVAL (operands[1]) + INTVAL (operands[2]) != 32)\n-        return \"bfins %3,%0{%b2:%b1}\";\n+        return \"bfins %3,%0%{%b2:%b1%}\";\n     }\n   else\n     operands[0] = adjust_address (operands[0],\n@@ -5542,7 +5542,7 @@\n   if (REG_P (operands[1]))\n     {\n       if (INTVAL (operands[2]) + INTVAL (operands[3]) != 32)\n-\treturn \"bfextu %1{%b3:%b2},%0\";\n+\treturn \"bfextu %1%{%b3:%b2%},%0\";\n     }\n   else\n     operands[1]\n@@ -5595,7 +5595,7 @@\n   if (REG_P (operands[1]))\n     {\n       if (INTVAL (operands[2]) + INTVAL (operands[3]) != 32)\n-\treturn \"bfexts %1{%b3:%b2},%0\";\n+\treturn \"bfexts %1%{%b3:%b2%},%0\";\n     }\n   else\n     operands[1]\n@@ -5626,7 +5626,7 @@\n \t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"dn\")\n \t\t\t (match_operand:SI 3 \"nonmemory_operand\" \"dn\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n-  \"bfexts %1{%b3:%b2},%0\")\n+  \"bfexts %1%{%b3:%b2%},%0\")\n \n (define_expand \"extzv\"\n   [(set (match_operand:SI 0 \"register_operand\" \"\")\n@@ -5652,7 +5652,7 @@\n     {\n       CC_STATUS_INIT;\n     }\n-  return \"bfextu %1{%b3:%b2},%0\";\n+  return \"bfextu %1%{%b3:%b2%},%0\";\n })\n \n (define_insn \"\"\n@@ -5667,7 +5667,7 @@\n            && (~ INTVAL (operands[3]) & ((1 << INTVAL (operands[1]))- 1)) == 0))\"\n {\n   CC_STATUS_INIT;\n-  return \"bfchg %0{%b2:%b1}\";\n+  return \"bfchg %0%{%b2:%b1%}\";\n })\n \n (define_insn \"\"\n@@ -5678,7 +5678,7 @@\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   CC_STATUS_INIT;\n-  return \"bfclr %0{%b2:%b1}\";\n+  return \"bfclr %0%{%b2:%b1%}\";\n })\n \n (define_insn \"\"\n@@ -5689,7 +5689,7 @@\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   CC_STATUS_INIT;\n-  return \"bfset %0{%b2:%b1}\";\n+  return \"bfset %0%{%b2:%b1%}\";\n })\n \n (define_expand \"insv\"\n@@ -5706,7 +5706,7 @@\n \t\t\t (match_operand:SI 2 \"nonmemory_operand\" \"dn\"))\n \t(match_operand:SI 3 \"register_operand\" \"d\"))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n-  \"bfins %3,%0{%b2:%b1}\")\n+  \"bfins %3,%0%{%b2:%b1%}\")\n \n ;; Now recognize bit-field insns that operate on registers\n ;; (or at least were intended to do so).\n@@ -5717,7 +5717,7 @@\n \t\t\t (match_operand:SI 2 \"const_int_operand\" \"n\")\n \t\t\t (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n   \"TARGET_68020 && TARGET_BITFIELD\"\n-  \"bfexts %1{%b3:%b2},%0\")\n+  \"bfexts %1%{%b3:%b2%},%0\")\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=d\")\n@@ -5735,7 +5735,7 @@\n     {\n       CC_STATUS_INIT;\n     }\n-  return \"bfextu %1{%b3:%b2},%0\";\n+  return \"bfextu %1%{%b3:%b2%},%0\";\n })\n \n (define_insn \"\"\n@@ -5746,7 +5746,7 @@\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   CC_STATUS_INIT;\n-  return \"bfclr %0{%b2:%b1}\";\n+  return \"bfclr %0%{%b2:%b1%}\";\n })\n \n (define_insn \"\"\n@@ -5757,7 +5757,7 @@\n   \"TARGET_68020 && TARGET_BITFIELD\"\n {\n   CC_STATUS_INIT;\n-  return \"bfset %0{%b2:%b1}\";\n+  return \"bfset %0%{%b2:%b1%}\";\n })\n \n (define_insn \"\"\n@@ -5776,7 +5776,7 @@\n       && INTVAL (operands[1]) == 24 && INTVAL (operands[2]) == 8)\n     return \"move%.b %3,%0\";\n #endif\n-  return \"bfins %3,%0{%b2:%b1}\";\n+  return \"bfins %3,%0%{%b2:%b1%}\";\n })\n \f\n ;; Special patterns for optimizing bit-field instructions.\n@@ -5801,7 +5801,7 @@\n     }\n   if (INTVAL (operands[1]) != 32)\n     cc_status.flags = CC_NOT_NEGATIVE;\n-  return \"bftst %0{%b2:%b1}\";\n+  return \"bftst %0%{%b2:%b1%}\";\n })\n \n \n@@ -5825,7 +5825,7 @@\n     }\n   if (INTVAL (operands[1]) != 32)\n     cc_status.flags = CC_NOT_NEGATIVE;\n-  return \"bftst %0{%b2:%b1}\";\n+  return \"bftst %0%{%b2:%b1%}\";\n })\n \f\n (define_insn \"scc0_di\""}]}