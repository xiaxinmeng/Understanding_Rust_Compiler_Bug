{"sha": "3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FlMGNkOTRhYmMxNWUzM2RjMDZjYTdhNWY3NmYxNGIxZDc0MTI5Zg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:51:48Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-27T01:53:04Z"}, "message": "libstdc++: Implement remaining piece of LWG 3448\n\nAlmost all of the proposed resolution for LWG 3448 is already\nimplemented; the only part left is to adjust the return type of\ntransform_view::sentinel::operator-.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95322\n\t* include/std/ranges (transform_view::sentinel::__distance_from):\n\tGive this a deduced return type.\n\t(transform_view::sentinel::operator-): Adjust the return type so\n\tthat it's based on the constness of the iterator rather than\n\tthat of the sentinel.\n\t* testsuite/std/ranges/adaptors/95322.cc: Refer to LWG 3488.", "tree": {"sha": "1121fa585c1da2b5f06a7f1bdb976d25c0c9423c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1121fa585c1da2b5f06a7f1bdb976d25c0c9423c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f/comments", "author": null, "committer": null, "parents": [{"sha": "4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4be16d1c1cfa6d151d2853ce509c1a797189c9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4be16d1c1cfa6d151d2853ce509c1a797189c9ad"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "2d0017f17506676855e50cb0e330eb7c944baf95", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "patch": "@@ -1865,7 +1865,7 @@ namespace views\n \t  using _Base = __detail::__maybe_const_t<_Const, _Vp>;\n \n \t  template<bool _Const2>\n-\t    constexpr range_difference_t<_Base>\n+\t    constexpr auto\n \t    __distance_from(const _Iterator<_Const2>& __i) const\n \t    { return _M_end - __i._M_current; }\n \n@@ -1902,17 +1902,17 @@ namespace views\n \t    operator==(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n \t    { return __y.__equal(__x); }\n \n-\t  template<bool _Const2>\n-\t    requires sized_sentinel_for<sentinel_t<_Base>,\n-\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n-\t    friend constexpr range_difference_t<_Base>\n+\t  template<bool _Const2,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_Const2, _Vp>>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t    friend constexpr range_difference_t<_Base2>\n \t    operator-(const _Iterator<_Const2>& __x, const _Sentinel& __y)\n \t    { return -__y.__distance_from(__x); }\n \n-\t  template<bool _Const2>\n-\t    requires sized_sentinel_for<sentinel_t<_Base>,\n-\t\t       iterator_t<__detail::__maybe_const_t<_Const2, _Vp>>>\n-\t    friend constexpr range_difference_t<_Base>\n+\t  template<bool _Const2,\n+\t\t   typename _Base2 = __detail::__maybe_const_t<_Const2, _Vp>>\n+\t    requires sized_sentinel_for<sentinel_t<_Base>, iterator_t<_Base2>>\n+\t    friend constexpr range_difference_t<_Base2>\n \t    operator-(const _Sentinel& __y, const _Iterator<_Const2>& __x)\n \t    { return __y.__distance_from(__x); }\n "}, {"sha": "67bc7d33917bac840fb54c06c9718d61d49ef003", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/95322.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc?ref=3ae0cd94abc15e33dc06ca7a5f76f14b1d74129f", "patch": "@@ -26,7 +26,7 @@ using __gnu_test::test_forward_range;\n void\n test01()\n {\n-  // PR libstdc++/95322\n+  // PR libstdc++/95322 and LWG 3488\n   int a[2]{1, 2};\n   test_forward_range<int> v{a};\n   auto view1 = v | std::views::take(2);"}]}