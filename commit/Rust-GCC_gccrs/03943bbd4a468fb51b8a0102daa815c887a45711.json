{"sha": "03943bbd4a468fb51b8a0102daa815c887a45711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5NDNiYmQ0YTQ2OGZiNTFiOGEwMTAyZGFhODE1Yzg4N2E0NTcxMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-01-11T19:08:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-01-11T19:08:41Z"}, "message": "PR c++/82728 - wrong -Wunused-but-set-variable\n\n\tPR c++/82799\n\tPR c++/83690\n\t* call.c (perform_implicit_conversion_flags): Call mark_rvalue_use.\n\t* decl.c (case_conversion): Likewise.\n\t* semantics.c (finish_static_assert): Call\n\tperform_implicit_conversion_flags.\n\nFrom-SVN: r256550", "tree": {"sha": "d12a1dcfa3cae23d8b6a5ca567328d57a251cd47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d12a1dcfa3cae23d8b6a5ca567328d57a251cd47"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03943bbd4a468fb51b8a0102daa815c887a45711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03943bbd4a468fb51b8a0102daa815c887a45711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03943bbd4a468fb51b8a0102daa815c887a45711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03943bbd4a468fb51b8a0102daa815c887a45711/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2893c6e1fbaef291cf69c4444cc45e77069eb3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2893c6e1fbaef291cf69c4444cc45e77069eb3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2893c6e1fbaef291cf69c4444cc45e77069eb3f"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "840cbd4f3e1205d8af50473ab9d3ab2c90e2c57e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -1,3 +1,13 @@\n+2018-01-11  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/82728 - wrong -Wunused-but-set-variable\n+\tPR c++/82799\n+\tPR c++/83690\n+\t* call.c (perform_implicit_conversion_flags): Call mark_rvalue_use.\n+\t* decl.c (case_conversion): Likewise.\n+\t* semantics.c (finish_static_assert): Call\n+\tperform_implicit_conversion_flags.\n+\n 2018-01-11  Nathan Sidwell  <nathan@acm.org>\n \n \t* method.c (enum mangling_flags): Delete long-dead enum."}, {"sha": "5f2c6becb350591e373b58a5a248ea4ccc9dde9a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -10514,6 +10514,11 @@ perform_implicit_conversion_flags (tree type, tree expr,\n   void *p;\n   location_t loc = EXPR_LOC_OR_LOC (expr, input_location);\n \n+  if (TREE_CODE (type) == REFERENCE_TYPE)\n+    expr = mark_lvalue_use (expr);\n+  else\n+    expr = mark_rvalue_use (expr);\n+\n   if (error_operand_p (expr))\n     return error_mark_node;\n "}, {"sha": "ee469d35137001733be648262c96a93590b1767b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -3541,6 +3541,8 @@ case_conversion (tree type, tree value)\n   if (value == NULL_TREE)\n     return value;\n \n+  value = mark_rvalue_use (value);\n+\n   if (cxx_dialect >= cxx11\n       && (SCOPED_ENUM_P (type)\n \t  || !INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (TREE_TYPE (value))))"}, {"sha": "f9c5285f724e72e5c7083a9a7b5bbdcc29071629", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -8608,6 +8608,8 @@ void\n finish_static_assert (tree condition, tree message, location_t location, \n                       bool member_p)\n {\n+  tsubst_flags_t complain = tf_warning_or_error;\n+\n   if (message == NULL_TREE\n       || message == error_mark_node\n       || condition == NULL_TREE\n@@ -8640,9 +8642,9 @@ finish_static_assert (tree condition, tree message, location_t location,\n     }\n \n   /* Fold the expression and convert it to a boolean value. */\n-  condition = instantiate_non_dependent_expr (condition);\n-  condition = cp_convert (boolean_type_node, condition, tf_warning_or_error);\n-  condition = maybe_constant_value (condition);\n+  condition = perform_implicit_conversion_flags (boolean_type_node, condition,\n+\t\t\t\t\t\t complain, LOOKUP_NORMAL);\n+  condition = fold_non_dependent_expr (condition);\n \n   if (TREE_CODE (condition) == INTEGER_CST && !integer_zerop (condition))\n     /* Do nothing; the condition is satisfied. */"}, {"sha": "677f3056bf8be8d7dce1fab810791b27a4aaf59f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-switch2.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-switch2.C?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/82728\n+// { dg-do compile { target c++11 } }\n+\n+void\n+foo ()\n+{\n+  const int i = 1;\n+\n+  [=]()\n+    {\n+      switch (0)\n+\t{\n+\tcase i:\n+\t  break;\n+\t}\n+      static_assert (i, \"i\");\n+    };\n+}"}, {"sha": "0ef7153128430d2aeaee1240ae299f0d07fba551", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-27.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-27.C?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/82728\n+// { dg-do compile }\n+// { dg-options \"-Wunused-but-set-variable\" }\n+\n+void\n+foo ()\n+{\n+  const int i = 1;\t\t// { dg-bogus \"set but not used\" }\n+  switch (0)\n+    {\n+    case i:\n+      break;\n+    }\n+}"}, {"sha": "696016715351f4ad6803d8beef977ecdf73bf1d1", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-28.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-28.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-28.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-28.C?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/82799\n+// { dg-do compile }\n+// { dg-options \"-Wunused-but-set-variable\" }\n+\n+enum E { b };     \n+struct C {\n+  template <E>\n+  int foo ()\n+  {\n+    const bool i = 0;\t\t// { dg-bogus \"set but not used\" }\n+    const int r = i ? 7 : 9;\n+    return r;\n+  }\n+  void bar () { foo <b> (); }\n+};"}, {"sha": "24eeb958f4a903039a6ea22b6cec876c8c424f3d", "filename": "gcc/testsuite/g++.dg/warn/Wunused-var-29.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-29.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03943bbd4a468fb51b8a0102daa815c887a45711/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-29.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-var-29.C?ref=03943bbd4a468fb51b8a0102daa815c887a45711", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/83690\n+// { dg-do compile { target c++11 } }\n+// { dg-options \"-Wunused-but-set-variable\" }\n+\n+void\n+foo ()\n+{\n+  constexpr bool foo = true;\t\t// { dg-bogus \"set but not used\" }\n+  static_assert (foo, \"foo\");\n+}"}]}