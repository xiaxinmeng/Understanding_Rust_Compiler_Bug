{"sha": "efd6ef80ca7d6de864faeb5835712729da984b62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkNmVmODBjYTdkNmRlODY0ZmFlYjU4MzU3MTI3MjlkYTk4NGI2Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2006-10-31T17:54:58Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2006-10-31T17:54:58Z"}, "message": "re PR target/24071 (__gthread_active_p vs __gthread_once)\n\n\tPR target/24071\n\t* gthr-posix.h (__gthread_active_p): New implementation on Solaris.\n\t* gthr-posix95.h (__gthread_active_p): Likewise.\n\nFrom-SVN: r118259", "tree": {"sha": "274d7a9848d373cc18d1f3edae2892b3119c8f28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/274d7a9848d373cc18d1f3edae2892b3119c8f28"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd6ef80ca7d6de864faeb5835712729da984b62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd6ef80ca7d6de864faeb5835712729da984b62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd6ef80ca7d6de864faeb5835712729da984b62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd6ef80ca7d6de864faeb5835712729da984b62/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e5ac75fe2ea2e33a9f0cfa512d0567cad12272d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e5ac75fe2ea2e33a9f0cfa512d0567cad12272d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e5ac75fe2ea2e33a9f0cfa512d0567cad12272d"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "bb44011e05caa573f27e9253ad3ae45024343bd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efd6ef80ca7d6de864faeb5835712729da984b62", "patch": "@@ -1,3 +1,9 @@\n+2006-10-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/24071\n+\t* gthr-posix.h (__gthread_active_p): New implementation on Solaris.\n+\t* gthr-posix95.h (__gthread_active_p): Likewise.\n+\n 2006-10-31  Richard Guenther  <rguenther@suse.de>\n \n \t* config/i386/i386.md (asindf2, asinsf2, asinxf2, acosdf2,"}, {"sha": "fb58be94ea6ab15425f5a643a50e7c4084028411", "filename": "gcc/gthr-posix.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix.h?ref=efd6ef80ca7d6de864faeb5835712729da984b62", "patch": "@@ -142,6 +142,59 @@ __gthrw(pthread_setschedparam)\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n \n+/* On Solaris 2.6 up to 9, the libc exposes a POSIX threads interface even if\n+   -pthreads is not specified.  The functions are dummies and most return an\n+   error value.  However pthread_once returns 0 without invoking the routine\n+   it is passed so we cannot pretend that the interface is active if -pthreads\n+   is not specified.  On Solaris 2.5.1, the interface is not exposed at all so\n+   we need to play the usual game with weak symbols.  On Solaris 10 and up, a\n+   working interface is always exposed.  */\n+\n+#if defined(__sun) && defined(__svr4__)\n+\n+static volatile int __gthread_active = -1;\n+\n+static void\n+__gthread_trigger (void)\n+{\n+  __gthread_active = 1;\n+}\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  static pthread_mutex_t __gthread_active_mutex = PTHREAD_MUTEX_INITIALIZER;\n+  static pthread_once_t __gthread_active_once = PTHREAD_ONCE_INIT;\n+\n+  /* Avoid reading __gthread_active twice on the main code path.  */\n+  int __gthread_active_latest_value = __gthread_active;\n+\n+  /* This test is not protected to avoid taking a lock on the main code\n+     path so every update of __gthread_active in a threaded program must\n+     be atomic with regard to the result of the test.  */\n+  if (__builtin_expect (__gthread_active_latest_value < 0, 0))\n+    {\n+      if (__gthrw_(pthread_once))\n+\t{\n+\t  /* If this really is a threaded program, then we must ensure that\n+\t     __gthread_active has been set to 1 before exiting this block.  */\n+\t  __gthrw_(pthread_mutex_lock) (&__gthread_active_mutex);\n+\t  __gthrw_(pthread_once) (&__gthread_active_once, __gthread_trigger);\n+\t  __gthrw_(pthread_mutex_unlock) (&__gthread_active_mutex);\n+\t}\n+\n+      /* Make sure we'll never enter this block again.  */\n+      if (__gthread_active < 0)\n+\t__gthread_active = 0;\n+\n+      __gthread_active_latest_value = __gthread_active;\n+    }\n+\n+  return __gthread_active_latest_value != 0;\n+}\n+\n+#else /* not Solaris */\n+\n static inline int\n __gthread_active_p (void)\n {\n@@ -150,6 +203,8 @@ __gthread_active_p (void)\n   return __gthread_active_ptr != 0;\n }\n \n+#endif /* Solaris */\n+\n #else /* not SUPPORTS_WEAK */\n \n static inline int"}, {"sha": "fde264594f84da6800aa2e8a39fcefb7a4c44564", "filename": "gcc/gthr-posix95.h", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2Fgthr-posix95.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd6ef80ca7d6de864faeb5835712729da984b62/gcc%2Fgthr-posix95.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgthr-posix95.h?ref=efd6ef80ca7d6de864faeb5835712729da984b62", "patch": "@@ -109,6 +109,59 @@ __gthrw(pthread_setschedparam)\n \n #if SUPPORTS_WEAK && GTHREAD_USE_WEAK\n \n+/* On Solaris 2.6 up to 9, the libc exposes a POSIX threads interface even if\n+   -pthreads is not specified.  The functions are dummies and most return an\n+   error value.  However pthread_once returns 0 without invoking the routine\n+   it is passed so we cannot pretend that the interface is active if -pthreads\n+   is not specified.  On Solaris 2.5.1, the interface is not exposed at all so\n+   we need to play the usual game with weak symbols.  On Solaris 10 and up, a\n+   working interface is always exposed.  */\n+\n+#if defined(__sun) && defined(__svr4__)\n+\n+static volatile int __gthread_active = -1;\n+\n+static void\n+__gthread_trigger (void)\n+{\n+  __gthread_active = 1;\n+}\n+\n+static inline int\n+__gthread_active_p (void)\n+{\n+  static pthread_mutex_t __gthread_active_mutex = PTHREAD_MUTEX_INITIALIZER;\n+  static pthread_once_t __gthread_active_once = PTHREAD_ONCE_INIT;\n+\n+  /* Avoid reading __gthread_active twice on the main code path.  */\n+  int __gthread_active_latest_value = __gthread_active;\n+\n+  /* This test is not protected to avoid taking a lock on the main code\n+     path so every update of __gthread_active in a threaded program must\n+     be atomic with regard to the result of the test.  */\n+  if (__builtin_expect (__gthread_active_latest_value < 0, 0))\n+    {\n+      if (__gthrw_(pthread_once))\n+\t{\n+\t  /* If this really is a threaded program, then we must ensure that\n+\t     __gthread_active has been set to 1 before exiting this block.  */\n+\t  __gthrw_(pthread_mutex_lock) (&__gthread_active_mutex);\n+\t  __gthrw_(pthread_once) (&__gthread_active_once, __gthread_trigger);\n+\t  __gthrw_(pthread_mutex_unlock) (&__gthread_active_mutex);\n+\t}\n+\n+      /* Make sure we'll never enter this block again.  */\n+      if (__gthread_active < 0)\n+\t__gthread_active = 0;\n+\n+      __gthread_active_latest_value = __gthread_active;\n+    }\n+\n+  return __gthread_active_latest_value != 0;\n+}\n+\n+#else /* not Solaris */\n+\n static inline int\n __gthread_active_p (void)\n {\n@@ -117,6 +170,8 @@ __gthread_active_p (void)\n   return __gthread_active_ptr != 0;\n }\n \n+#endif /* Solaris */\n+\n #else /* not SUPPORTS_WEAK */\n \n static inline int"}]}