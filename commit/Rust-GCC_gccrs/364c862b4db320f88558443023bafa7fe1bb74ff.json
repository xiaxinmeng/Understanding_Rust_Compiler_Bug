{"sha": "364c862b4db320f88558443023bafa7fe1bb74ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY0Yzg2MmI0ZGIzMjBmODg1NTg0NDMwMjNiYWZhN2ZlMWJiNzRmZg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-07-21T19:56:36Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2011-07-21T19:56:36Z"}, "message": "safe_unordered_sequence.h, [...]: Rename respectively in...\n\n2011-07-21  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n\n        * include/debug/safe_unordered_sequence.h,\n        safe_unordered_sequence.tcc: Rename respectively in...\n        * include/debug/safe_unordered_container.h,\n        safe_unordered_container.tcc: ...those. _Safe_unordered_sequence\n        rename _Safe_unordered_container.\n        * include/debug/safe_unordered_base.h: _Safe_unordered_sequence_base\n        rename _Safe_unordered_container_base.\n        * include/debug/unordered_map, unordered_set: Adapt to previous\n        modifications.\n        * config/abi/pre/gnu.ver: Likewise.\n        * src/debug.cc: Likewise.\n        * include/Makefile.am: Likewise.\n        * include/Makefile.in: Regenerate.\n\nFrom-SVN: r176584", "tree": {"sha": "70702a6a8c175845ee2ccfeade84908e722ccf59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70702a6a8c175845ee2ccfeade84908e722ccf59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/364c862b4db320f88558443023bafa7fe1bb74ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364c862b4db320f88558443023bafa7fe1bb74ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/364c862b4db320f88558443023bafa7fe1bb74ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/364c862b4db320f88558443023bafa7fe1bb74ff/comments", "author": null, "committer": null, "parents": [{"sha": "777a4e9acc49f2d98ab6e16de9a1b89f4f3bbd0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/777a4e9acc49f2d98ab6e16de9a1b89f4f3bbd0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/777a4e9acc49f2d98ab6e16de9a1b89f4f3bbd0a"}], "stats": {"total": 208, "additions": 107, "deletions": 101}, "files": [{"sha": "bd3924569508d6ba6b38f9c891d8119dcc1d6e27", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -1284,9 +1284,9 @@ GLIBCXX_3.4.17 {\n     # std::thread::hardware_concurrency\n     _ZNSt6thread20hardware_concurrencyEv;\n \n-    # __gnu_debug::_Safe_unordered_sequence_base and _Safe_local_iterator_base\n-    _ZN11__gnu_debug29_Safe_unordered_sequence_base7_M_swapERS0_;\n-    _ZN11__gnu_debug29_Safe_unordered_sequence_base13_M_detach_allEv;\n+    # __gnu_debug::_Safe_unordered_container_base and _Safe_local_iterator_base\n+    _ZN11__gnu_debug30_Safe_unordered_container_base7_M_swapERS0_;\n+    _ZN11__gnu_debug30_Safe_unordered_container_base13_M_detach_allEv;\n     _ZN11__gnu_debug25_Safe_local_iterator_base9_M_attachEPNS_19_Safe_sequence_baseEb;\n     _ZN11__gnu_debug25_Safe_local_iterator_base9_M_detachEv;\n "}, {"sha": "401688247f0c8bf041dab87c8ccc47b2775f9f8c", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -706,8 +706,8 @@ debug_headers = \\\n \t${debug_srcdir}/safe_sequence.h \\\n \t${debug_srcdir}/safe_sequence.tcc \\\n \t${debug_srcdir}/safe_unordered_base.h \\\n-\t${debug_srcdir}/safe_unordered_sequence.h \\\n-\t${debug_srcdir}/safe_unordered_sequence.tcc \\\n+\t${debug_srcdir}/safe_unordered_container.h \\\n+\t${debug_srcdir}/safe_unordered_container.tcc \\\n \t${debug_srcdir}/set \\\n \t${debug_srcdir}/set.h \\\n \t${debug_srcdir}/string \\"}, {"sha": "65da567cf07283cedc1dd95b20c8987104096814", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -951,8 +951,8 @@ debug_headers = \\\n \t${debug_srcdir}/safe_sequence.h \\\n \t${debug_srcdir}/safe_sequence.tcc \\\n \t${debug_srcdir}/safe_unordered_base.h \\\n-\t${debug_srcdir}/safe_unordered_sequence.h \\\n-\t${debug_srcdir}/safe_unordered_sequence.tcc \\\n+\t${debug_srcdir}/safe_unordered_container.h \\\n+\t${debug_srcdir}/safe_unordered_container.tcc \\\n \t${debug_srcdir}/set \\\n \t${debug_srcdir}/set.h \\\n \t${debug_srcdir}/string \\"}, {"sha": "9d1131df40e3596ed715de03f9f3f84c2fd2c6dd", "filename": "libstdc++-v3/include/debug/safe_unordered_base.h", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_base.h?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -1,4 +1,4 @@\n-// Safe sequence/iterator base implementation  -*- C++ -*-\n+// Safe container/iterator base implementation  -*- C++ -*-\n \n // Copyright (C) 2011 Free Software Foundation, Inc.\n //\n@@ -33,13 +33,13 @@\n \n namespace __gnu_debug\n {\n-  class _Safe_unordered_sequence_base;\n+  class _Safe_unordered_container_base;\n \n   /** \\brief Basic functionality for a @a safe iterator.\n    *\n    *  The %_Safe_local_iterator_base base class implements the functionality\n    *  of a safe local iterator that is not specific to a particular iterator\n-   *  type. It contains a pointer back to the sequence it references\n+   *  type. It contains a pointer back to the container it references\n    *  along with iterator version information and pointers to form a\n    *  doubly-linked list of local iterators referenced by the container.\n    *\n@@ -54,7 +54,7 @@ namespace __gnu_debug\n     _Safe_local_iterator_base()\n     { }\n \n-    /** Initialize the iterator to reference the sequence pointed to\n+    /** Initialize the iterator to reference the container pointed to\n      *  by @p__seq. @p __constant is true when we are initializing a\n      *  constant local iterator, and false if it is a mutable local iterator.\n      *  Note that @p __seq may be NULL, in which case the iterator will be\n@@ -64,7 +64,7 @@ namespace __gnu_debug\n     _Safe_local_iterator_base(const _Safe_sequence_base* __seq, bool __constant)\n     { this->_M_attach(const_cast<_Safe_sequence_base*>(__seq), __constant); }\n \n-    /** Initializes the iterator to reference the same sequence that\n+    /** Initializes the iterator to reference the same container that\n \t@p __x does. @p __constant is true if this is a constant\n \titerator, and false if it is mutable. */\n     _Safe_local_iterator_base(const _Safe_local_iterator_base& __x,\n@@ -79,21 +79,21 @@ namespace __gnu_debug\n \n     ~_Safe_local_iterator_base() { this->_M_detach(); }\n \n-    _Safe_unordered_sequence_base*\n-    _M_get_sequence() const _GLIBCXX_NOEXCEPT;\n+    _Safe_unordered_container_base*\n+    _M_get_container() const _GLIBCXX_NOEXCEPT;\n \n   public:\n-    /** Attaches this iterator to the given sequence, detaching it\n-     *\tfrom whatever sequence it was attached to originally. If the\n-     *\tnew sequence is the NULL pointer, the iterator is left\n+    /** Attaches this iterator to the given container, detaching it\n+     *\tfrom whatever container it was attached to originally. If the\n+     *\tnew container is the NULL pointer, the iterator is left\n      *\tunattached.\n      */\n     void _M_attach(_Safe_sequence_base* __seq, bool __constant);\n \n     /** Likewise, but not thread-safe. */\n     void _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ();\n \n-    /** Detach the iterator for whatever sequence it is attached to,\n+    /** Detach the iterator for whatever container it is attached to,\n      *\tif any.\n     */\n     void _M_detach();\n@@ -104,23 +104,23 @@ namespace __gnu_debug\n \n   /**\n    * @brief Base class that supports tracking of local iterators that\n-   * reference an unordered sequence.\n+   * reference an unordered container.\n    *\n-   * The %_Safe_unordered_sequence_base class provides basic support for\n-   * tracking iterators into an unordered sequence. Sequences that track\n-   * iterators must derived from %_Safe_sequence_base publicly, so\n+   * The %_Safe_unordered_container_base class provides basic support for\n+   * tracking iterators into an unordered container. Containers that track\n+   * iterators must derived from %_Safe_unordered_container_base publicly, so\n    * that safe iterators (which inherit _Safe_iterator_base) can\n    * attach to them. This class contains four linked lists of\n    * iterators, one for constant iterators, one for mutable\n    * iterators, one for constant local iterators, one for mutable local\n-   * iterator and a version number that allows very fast\n+   * iterators and a version number that allows very fast\n    * invalidation of all iterators that reference the container.\n    *\n    * This class must ensure that no operation on it may throw an\n-   * exception, otherwise @a safe sequences may fail to provide the\n+   * exception, otherwise @a safe containers may fail to provide the\n    * exception-safety guarantees required by the C++ standard.\n    */\n-  class _Safe_unordered_sequence_base : public _Safe_sequence_base\n+  class _Safe_unordered_container_base : public _Safe_sequence_base\n   {\n     typedef _Safe_sequence_base _Base;\n   public:\n@@ -132,37 +132,37 @@ namespace __gnu_debug\n \n   protected:\n     // Initialize with a version number of 1 and no iterators\n-    _Safe_unordered_sequence_base()\n+    _Safe_unordered_container_base()\n     : _M_local_iterators(0), _M_const_local_iterators(0)\n     { }\n \n-    /** Notify all iterators that reference this sequence that the\n-\tsequence is being destroyed. */\n-    ~_Safe_unordered_sequence_base()\n+    /** Notify all iterators that reference this container that the\n+\tcontainer is being destroyed. */\n+    ~_Safe_unordered_container_base()\n     { this->_M_detach_all(); }\n \n     /** Detach all iterators, leaving them singular. */\n     void\n     _M_detach_all();\n \n-    /** Swap this sequence with the given sequence. This operation\n+    /** Swap this container with the given container. This operation\n      *  also swaps ownership of the iterators, so that when the\n      *  operation is complete all iterators that originally referenced\n      *  one container now reference the other container.\n      */\n     void\n-    _M_swap(_Safe_unordered_sequence_base& __x);\n+    _M_swap(_Safe_unordered_container_base& __x);\n \n   public:\n-    /** Attach an iterator to this sequence. */\n+    /** Attach an iterator to this container. */\n     void\n     _M_attach_local(_Safe_iterator_base* __it, bool __constant);\n \n     /** Likewise but not thread safe. */\n     void\n     _M_attach_local_single(_Safe_iterator_base* __it, bool __constant) throw ();\n \n-    /** Detach an iterator from this sequence */\n+    /** Detach an iterator from this container */\n     void\n     _M_detach_local(_Safe_iterator_base* __it);\n "}, {"sha": "ce15f9cfb498281a60d8e7ebb5044d5641ec5fd6", "filename": "libstdc++-v3/include/debug/safe_unordered_container.h", "status": "renamed", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.h?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -1,4 +1,4 @@\n-// Safe sequence implementation  -*- C++ -*-\n+// Safe container implementation  -*- C++ -*-\n \n // Copyright (C) 2011 Free Software Foundation, Inc.\n //\n@@ -22,12 +22,12 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file debug/safe_unordered_sequence.h\n+/** @file debug/safe_unordered_container.h\n  *  This file is a GNU debug extension to the Standard C++ Library.\n  */\n \n-#ifndef _GLIBCXX_DEBUG_SAFE_UNORDERED_SEQUENCE_H\n-#define _GLIBCXX_DEBUG_SAFE_UNORDERED_SEQUENCE_H 1\n+#ifndef _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H\n+#define _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_H 1\n \n #include <debug/debug.h>\n #include <debug/macros.h>\n@@ -37,39 +37,45 @@\n namespace __gnu_debug\n {\n   /**\n-   * @brief Base class for constructing a @a safe unordered sequence type\n+   * @brief Base class for constructing a @a safe unordered container type\n    * that tracks iterators that reference it.\n    *\n-   * The class template %_Safe_unordered_sequence simplifies the\n-   * construction of @a safe unordered sequences that track the iterators\n-   * that reference the sequence, so that the iterators are notified of\n-   * changes in the sequence that may affect their operation, e.g., if\n+   * The class template %_Safe_unordered_container simplifies the\n+   * construction of @a safe unordered containers that track the iterators\n+   * that reference the container, so that the iterators are notified of\n+   * changes in the container that may affect their operation, e.g., if\n    * the container invalidates its iterators or is destructed. This class\n    * template may only be used by deriving from it and passing the name\n    * of the derived class as its template parameter via the curiously\n    * recurring template pattern. The derived class must have @c\n    * iterator and @const_iterator types that are instantiations of\n-   * class template _Safe_iterator for this sequence. Iterators will\n+   * class template _Safe_iterator for this container and @c local_iterator\n+   * and @const_local_iterator types that are instantiations of class\n+   * template _Safe_local_iterator for this container. Iterators will\n    * then be tracked automatically.\n    */\n-  template<typename _Sequence>\n-    class _Safe_unordered_sequence : public _Safe_unordered_sequence_base\n+  template<typename _Container>\n+    class _Safe_unordered_container : public _Safe_unordered_container_base\n     {\n     public:\n-      /** Invalidates all iterators @c x that reference this sequence,\n+      /** Invalidates all iterators @c x that reference this container,\n \t  are not singular, and for which @c pred(x) returns @c\n \t  true. @c pred will be invoked with the normal iterators nested\n \t  in the safe ones. */\n       template<typename _Predicate>\n \tvoid\n \t_M_invalidate_if(_Predicate __pred);\n \n+      /** Invalidates all local iterators @c x that reference this container,\n+\t  are not singular, and for which @c pred(x) returns @c\n+\t  true. @c pred will be invoked with the normal ilocal iterators\n+\t  nested in the safe ones. */\n       template<typename _Predicate>\n \tvoid\n \t_M_invalidate_local_if(_Predicate __pred);\n     };\n } // namespace __gnu_debug\n \n-#include <debug/safe_unordered_sequence.tcc>\n+#include <debug/safe_unordered_container.tcc>\n \n #endif", "previous_filename": "libstdc++-v3/include/debug/safe_unordered_sequence.h"}, {"sha": "69aafa8e819486fea96c8b828699387ba450dab6", "filename": "libstdc++-v3/include/debug/safe_unordered_container.tcc", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fsafe_unordered_container.tcc?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -1,4 +1,4 @@\n-// Safe sequence implementation  -*- C++ -*-\n+// Safe container implementation  -*- C++ -*-\n \n // Copyright (C) 2011 Free Software Foundation, Inc.\n //\n@@ -22,23 +22,23 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-/** @file debug/safe_unordered_sequence.tcc\n+/** @file debug/safe_unordered_container.tcc\n  *  This file is a GNU debug extension to the Standard C++ Library.\n  */\n \n-#ifndef _GLIBCXX_DEBUG_SAFE_UNORDERED_SEQUENCE_TCC\n-#define _GLIBCXX_DEBUG_SAFE_UNORDERED_SEQUENCE_TCC 1\n+#ifndef _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_TCC\n+#define _GLIBCXX_DEBUG_SAFE_UNORDERED_CONTAINER_TCC 1\n \n namespace __gnu_debug\n {\n-  template<typename _Sequence>\n+  template<typename _Container>\n     template<typename _Predicate>\n       void\n-      _Safe_unordered_sequence<_Sequence>::\n+      _Safe_unordered_container<_Container>::\n       _M_invalidate_if(_Predicate __pred)\n       {\n-\ttypedef typename _Sequence::iterator iterator;\n-\ttypedef typename _Sequence::const_iterator const_iterator;\n+\ttypedef typename _Container::iterator iterator;\n+\ttypedef typename _Container::const_iterator const_iterator;\n \n \t__gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n \tfor (_Safe_iterator_base* __iter = _M_iterators; __iter;)\n@@ -63,14 +63,14 @@ namespace __gnu_debug\n       }\n \n \n-  template<typename _Sequence>\n+  template<typename _Container>\n     template<typename _Predicate>\n       void\n-      _Safe_unordered_sequence<_Sequence>::\n+      _Safe_unordered_container<_Container>::\n       _M_invalidate_local_if(_Predicate __pred)\n       {\n-\ttypedef typename _Sequence::local_iterator local_iterator;\n-\ttypedef typename _Sequence::const_local_iterator const_local_iterator;\n+\ttypedef typename _Container::local_iterator local_iterator;\n+\ttypedef typename _Container::const_local_iterator const_local_iterator;\n \n \t__gnu_cxx::__scoped_lock sentry(this->_M_get_mutex());\n \tfor (_Safe_iterator_base* __iter = _M_local_iterators; __iter;)", "previous_filename": "libstdc++-v3/include/debug/safe_unordered_sequence.tcc"}, {"sha": "0e300983bdae25bce14937ed9d9d74ae7ea76d76", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -35,7 +35,7 @@\n #else\n # include <unordered_map>\n \n-#include <debug/safe_unordered_sequence.h>\n+#include <debug/safe_unordered_container.h>\n #include <debug/safe_iterator.h>\n #include <debug/safe_local_iterator.h>\n \n@@ -50,12 +50,12 @@ namespace __debug\n \t   typename _Alloc = std::allocator<_Key> >\n     class unordered_map\n     : public _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>,\n-      public __gnu_debug::_Safe_unordered_sequence<unordered_map<_Key, _Tp,\n+      public __gnu_debug::_Safe_unordered_container<unordered_map<_Key, _Tp,\n \t\t\t\t\t\t\t_Hash, _Pred, _Alloc> >\n     {\n       typedef _GLIBCXX_STD_C::unordered_map<_Key, _Tp, _Hash,\n \t\t\t\t\t    _Pred, _Alloc> _Base;\n-      typedef __gnu_debug::_Safe_unordered_sequence<unordered_map> _Safe_base;\n+      typedef __gnu_debug::_Safe_unordered_container<unordered_map> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef typename _Base::const_local_iterator _Base_const_local_iterator;\n@@ -430,12 +430,12 @@ namespace __debug\n     class unordered_multimap\n     : public _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t_Pred, _Alloc>,\n-      public __gnu_debug::_Safe_unordered_sequence<unordered_multimap<_Key,\n+      public __gnu_debug::_Safe_unordered_container<unordered_multimap<_Key,\n \t\t\t\t\t\t_Tp, _Hash, _Pred, _Alloc> >\n     {\n       typedef _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t _Pred, _Alloc> _Base;\n-      typedef __gnu_debug::_Safe_unordered_sequence<unordered_multimap>\n+      typedef __gnu_debug::_Safe_unordered_container<unordered_multimap>\n \t_Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;"}, {"sha": "5be372475843b7fac3fa9d27f44d28204202ce10", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -35,7 +35,7 @@\n #else\n # include <unordered_set>\n \n-#include <debug/safe_unordered_sequence.h>\n+#include <debug/safe_unordered_container.h>\n #include <debug/safe_iterator.h>\n #include <debug/safe_local_iterator.h>\n \n@@ -50,12 +50,12 @@ namespace __debug\n \t   typename _Alloc = std::allocator<_Value> >\n     class unordered_set\n     : public _GLIBCXX_STD_C::unordered_set<_Value, _Hash, _Pred, _Alloc>,\n-      public __gnu_debug::_Safe_unordered_sequence<unordered_set<_Value, _Hash,\n+      public __gnu_debug::_Safe_unordered_container<unordered_set<_Value, _Hash,\n \t\t\t\t\t\t       _Pred, _Alloc> >\n     {\n       typedef _GLIBCXX_STD_C::unordered_set<_Value, _Hash,\n \t\t\t\t\t    _Pred, _Alloc> _Base;\n-      typedef __gnu_debug::_Safe_unordered_sequence<unordered_set> _Safe_base;\n+      typedef __gnu_debug::_Safe_unordered_container<unordered_set> _Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;\n       typedef typename _Base::const_local_iterator _Base_const_local_iterator;\n@@ -425,12 +425,12 @@ namespace __debug\n \t   typename _Alloc = std::allocator<_Value> >\n     class unordered_multiset\n     : public _GLIBCXX_STD_C::unordered_multiset<_Value, _Hash, _Pred, _Alloc>,\n-      public __gnu_debug::_Safe_unordered_sequence<\n+      public __gnu_debug::_Safe_unordered_container<\n \t\tunordered_multiset<_Value, _Hash, _Pred, _Alloc> >\n     {\n       typedef _GLIBCXX_STD_C::unordered_multiset<_Value, _Hash,\n \t\t\t\t\t\t _Pred, _Alloc> _Base;\n-      typedef __gnu_debug::_Safe_unordered_sequence<unordered_multiset>\n+      typedef __gnu_debug::_Safe_unordered_container<unordered_multiset>\n \t\t_Safe_base;\n       typedef typename _Base::const_iterator _Base_const_iterator;\n       typedef typename _Base::iterator _Base_iterator;"}, {"sha": "cb66f70b25f4b545146d73031ba71e1a6375758c", "filename": "libstdc++-v3/src/debug.cc", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/364c862b4db320f88558443023bafa7fe1bb74ff/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fdebug.cc?ref=364c862b4db320f88558443023bafa7fe1bb74ff", "patch": "@@ -25,7 +25,7 @@\n \n #include <debug/debug.h>\n #include <debug/safe_sequence.h>\n-#include <debug/safe_unordered_sequence.h>\n+#include <debug/safe_unordered_container.h>\n #include <debug/safe_iterator.h>\n #include <debug/safe_local_iterator.h>\n #include <algorithm>\n@@ -78,8 +78,8 @@ namespace\n   }\n \n   void\n-  swap_useq(__gnu_debug::_Safe_unordered_sequence_base& __lhs,\n-\t    __gnu_debug::_Safe_unordered_sequence_base& __rhs)\n+  swap_ucont(__gnu_debug::_Safe_unordered_container_base& __lhs,\n+\t    __gnu_debug::_Safe_unordered_container_base& __rhs)\n   {\n     swap_seq(__lhs, __rhs);\n     swap_its(__lhs, __lhs._M_local_iterators,\n@@ -174,8 +174,8 @@ namespace __gnu_debug\n     \" by a dereferenceable one\",\n     \"function requires a valid iterator range (%2.name;, %3.name;)\"\n     \", \\\"%2.name;\\\" shall be before and not equal to \\\"%3.name;\\\"\",\n-    // std::unordered_sequence::local_iterator\n-    \"attempt to compare local iterators from different unordered sequence\"\n+    // std::unordered_container::local_iterator\n+    \"attempt to compare local iterators from different unordered container\"\n     \" buckets\"\n   };\n \n@@ -374,38 +374,38 @@ namespace __gnu_debug\n   _M_get_mutex() throw ()\n   { return get_safe_base_mutex(_M_sequence); }\n \n-  _Safe_unordered_sequence_base*\n+  _Safe_unordered_container_base*\n   _Safe_local_iterator_base::\n-  _M_get_sequence() const _GLIBCXX_NOEXCEPT\n-  { return static_cast<_Safe_unordered_sequence_base*>(_M_sequence); }\n+  _M_get_container() const _GLIBCXX_NOEXCEPT\n+  { return static_cast<_Safe_unordered_container_base*>(_M_sequence); }\n \n   void\n   _Safe_local_iterator_base::\n-  _M_attach(_Safe_sequence_base* __seq, bool __constant)\n+  _M_attach(_Safe_sequence_base* __cont, bool __constant)\n   {\n     _M_detach();\n     \n-    // Attach to the new sequence (if there is one)\n-    if (__seq)\n+    // Attach to the new container (if there is one)\n+    if (__cont)\n       {\n-\t_M_sequence = __seq;\n+\t_M_sequence = __cont;\n \t_M_version = _M_sequence->_M_version;\n-\t_M_get_sequence()->_M_attach_local(this, __constant);\n+\t_M_get_container()->_M_attach_local(this, __constant);\n       }\n   }\n   \n   void\n   _Safe_local_iterator_base::\n-  _M_attach_single(_Safe_sequence_base* __seq, bool __constant) throw ()\n+  _M_attach_single(_Safe_sequence_base* __cont, bool __constant) throw ()\n   {\n     _M_detach_single();\n     \n-    // Attach to the new sequence (if there is one)\n-    if (__seq)\n+    // Attach to the new container (if there is one)\n+    if (__cont)\n       {\n-\t_M_sequence = __seq;\n+\t_M_sequence = __cont;\n \t_M_version = _M_sequence->_M_version;\n-\t_M_get_sequence()->_M_attach_local_single(this, __constant);\n+\t_M_get_container()->_M_attach_local_single(this, __constant);\n       }\n   }\n \n@@ -414,7 +414,7 @@ namespace __gnu_debug\n   _M_detach()\n   {\n     if (_M_sequence)\n-      _M_get_sequence()->_M_detach_local(this);\n+      _M_get_container()->_M_detach_local(this);\n \n     _M_reset();\n   }\n@@ -424,13 +424,13 @@ namespace __gnu_debug\n   _M_detach_single() throw ()\n   {\n     if (_M_sequence)\n-      _M_get_sequence()->_M_detach_local_single(this);\n+      _M_get_container()->_M_detach_local_single(this);\n \n     _M_reset();\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n+  _Safe_unordered_container_base::\n   _M_detach_all()\n   {\n     __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n@@ -448,38 +448,38 @@ namespace __gnu_debug\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n-  _M_swap(_Safe_unordered_sequence_base& __x)\n+  _Safe_unordered_container_base::\n+  _M_swap(_Safe_unordered_container_base& __x)\n   {\n-    // We need to lock both sequences to swap\n+    // We need to lock both containers to swap\n     using namespace __gnu_cxx;\n     __mutex *__this_mutex = &_M_get_mutex();\n     __mutex *__x_mutex = &__x._M_get_mutex();\n     if (__this_mutex == __x_mutex)\n       {\n \t__scoped_lock __lock(*__this_mutex);\n-\tswap_useq(*this, __x);\n+\tswap_ucont(*this, __x);\n       }\n     else\n       {\n \t__scoped_lock __l1(__this_mutex < __x_mutex\n \t\t\t     ? *__this_mutex : *__x_mutex);\n \t__scoped_lock __l2(__this_mutex < __x_mutex\n \t\t\t     ? *__x_mutex : *__this_mutex);\n-\tswap_useq(*this, __x);\n+\tswap_ucont(*this, __x);\n       }\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n+  _Safe_unordered_container_base::\n   _M_attach_local(_Safe_iterator_base* __it, bool __constant)\n   {\n     __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     _M_attach_local_single(__it, __constant);\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n+  _Safe_unordered_container_base::\n   _M_attach_local_single(_Safe_iterator_base* __it, bool __constant) throw ()\n   {\n     _Safe_iterator_base*& __its =\n@@ -491,19 +491,19 @@ namespace __gnu_debug\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n+  _Safe_unordered_container_base::\n   _M_detach_local(_Safe_iterator_base* __it)\n   {\n-    // Remove __it from this sequence's list\n+    // Remove __it from this container's list\n     __gnu_cxx::__scoped_lock sentry(_M_get_mutex());\n     _M_detach_local_single(__it);\n   }\n \n   void\n-  _Safe_unordered_sequence_base::\n+  _Safe_unordered_container_base::\n   _M_detach_local_single(_Safe_iterator_base* __it) throw ()\n   {\n-    // Remove __it from this sequence's list\n+    // Remove __it from this container's list\n     __it->_M_unlink();\n     if (_M_const_local_iterators == __it)\n       _M_const_local_iterators = __it->_M_next;"}]}