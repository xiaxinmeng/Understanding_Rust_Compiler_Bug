{"sha": "a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "node_id": "C_kwDOANBUbNoAKGE4YTI4MmQ1MjAyZjNlMzMwNWJkNWY0YjQwYWRjMGNlNzQzYzliOTg", "commit": {"author": {"name": "marxin", "email": "mliska@suse.cz", "date": "2022-07-25T09:15:25Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2022-07-28T10:37:03Z"}, "message": "jit,docs: various fixes\n\ngcc/jit/ChangeLog:\n\n\t* docs/cp/intro/tutorial02.rst: Use proper reference.\n\t* docs/cp/topics/contexts.rst: Likewise.\n\t* docs/cp/topics/functions.rst: Put `class` directive before a\n\tfunction as it is not allowed declaring a class in a fn.\n\t* docs/cp/topics/types.rst: Add template keyword.\n\t* docs/examples/tut04-toyvm/toyvm.c (toyvm_function_compile):\n\tAdd removed comment used for code snippet ending detection.\n\t* docs/intro/tutorial04.rst: Fix to match the real comment.", "tree": {"sha": "ce48b0756ea290dcd88481868c9a4b1b960964ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce48b0756ea290dcd88481868c9a4b1b960964ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c994f9aa8a60e69d080693f0cbef119ab65886", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68c994f9aa8a60e69d080693f0cbef119ab65886", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68c994f9aa8a60e69d080693f0cbef119ab65886"}], "stats": {"total": 55, "additions": 28, "deletions": 27}, "files": [{"sha": "55675cc7398f2f0ac33126e941c435925d09004d", "filename": "gcc/jit/docs/cp/intro/tutorial02.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial02.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial02.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Fintro%2Ftutorial02.rst?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -121,7 +121,7 @@ in this case just one:\n   params.push_back (param_i);\n \n Now we can create the function, using\n-:c:func:`gccjit::context::new_function`:\n+:cpp:func:`gccjit::context::new_function`:\n \n .. code-block:: c++\n "}, {"sha": "f60f2102b3eb6f5e087273d501b0d94a4786bf7d", "filename": "gcc/jit/docs/cp/topics/contexts.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -141,7 +141,7 @@ Debugging\n    If \"update_locations\" is true, then also set up :class:`gccjit::location`\n    information throughout the context, pointing at the dump file as if it\n    were a source file.  This may be of use in conjunction with\n-   :c:macro:`GCCJIT::BOOL_OPTION_DEBUGINFO` to allow stepping through the\n+   :c:macro:`GCC_JIT_BOOL_OPTION_DEBUGINFO` to allow stepping through the\n    code in a debugger.\n \n .. function:: void\\"}, {"sha": "4e325ac3fef28d2c31b6301b397cfa49388ee750", "filename": "gcc/jit/docs/cp/topics/functions.rst", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ffunctions.rst?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -243,6 +243,29 @@ Statements\n \n       return;\n \n+.. class:: gccjit::case_\n+\n+   A `gccjit::case_` represents a case within a switch statement, and\n+   is created within a particular :class:`gccjit::context` using\n+   :func:`gccjit::context::new_case`.  It is a subclass of\n+   :class:`gccjit::object`.\n+\n+   Each case expresses a multivalued range of integer values.  You\n+   can express single-valued cases by passing in the same value for\n+   both `min_value` and `max_value`.\n+\n+.. function:: gccjit::case_ *\\\n+               gccjit::context::new_case (gccjit::rvalue min_value,\\\n+                                          gccjit::rvalue max_value,\\\n+                                          gccjit::block dest_block)\n+\n+    Create a new gccjit::case for use in a switch statement.\n+    `min_value` and `max_value` must be constants of an integer type,\n+    which must match that of the expression of the switch statement.\n+\n+    `dest_block` must be within the same function as the switch\n+    statement.\n+\n .. function:: void\\\n               gccjit::block::end_with_switch (gccjit::rvalue expr,\\\n                                               gccjit::block default_block,\\\n@@ -292,29 +315,6 @@ Statements\n \n       #ifdef LIBGCCJIT_HAVE_SWITCH_STATEMENTS\n \n-   .. class:: gccjit::case_\n-\n-   A `gccjit::case_` represents a case within a switch statement, and\n-   is created within a particular :class:`gccjit::context` using\n-   :func:`gccjit::context::new_case`.  It is a subclass of\n-   :class:`gccjit::object`.\n-\n-   Each case expresses a multivalued range of integer values.  You\n-   can express single-valued cases by passing in the same value for\n-   both `min_value` and `max_value`.\n-\n-   .. function:: gccjit::case_ *\\\n-                 gccjit::context::new_case (gccjit::rvalue min_value,\\\n-                                            gccjit::rvalue max_value,\\\n-                                            gccjit::block dest_block)\n-\n-      Create a new gccjit::case for use in a switch statement.\n-      `min_value` and `max_value` must be constants of an integer type,\n-      which must match that of the expression of the switch statement.\n-\n-      `dest_block` must be within the same function as the switch\n-      statement.\n-\n    Here's an example of creating a switch statement:\n \n      .. literalinclude:: ../../../../testsuite/jit.dg/test-switch.cc"}, {"sha": "5d50a39b9d02fa92b882437c33c76214efdb9d18", "filename": "gcc/jit/docs/cp/topics/types.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Ftypes.rst?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -65,7 +65,7 @@ Standard types\n \n    Access the integer type of the given size.\n \n-.. function:: gccjit::type \\\n+.. function:: template<typename T> gccjit::type \\\n               gccjit::context::get_int_type <T> ()\n \n    Access the given integer type.  For example, you could map the"}, {"sha": "c2333f0de891ce65ef844e24fb82571902812084", "filename": "gcc/jit/docs/examples/tut04-toyvm/toyvm.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fexamples%2Ftut04-toyvm%2Ftoyvm.c?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -764,6 +764,7 @@ toyvm_function_compile (toyvm_function *fn)\n   toyvm_result->cf_code =\n     (toyvm_compiled_code)gcc_jit_result_get_code (jit_result,\n \t\t\t\t\t\t  funcname);\n+  /* (this leaks \"jit_result\" and \"funcname\") */\n \n   free (funcname);\n "}, {"sha": "890988765307f4e389417bc8915641bff381bb6b", "filename": "gcc/jit/docs/intro/tutorial04.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a8a282d5202f3e3305bd5f4b40adc0ce743c9b98/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fintro%2Ftutorial04.rst?ref=a8a282d5202f3e3305bd5f4b40adc0ce743c9b98", "patch": "@@ -308,7 +308,7 @@ We can now compile it, and extract machine code from the result:\n \n    .. literalinclude:: ../examples/tut04-toyvm/toyvm.c\n     :start-after: /* We've now finished populating the context.  Compile it.  */\n-    :end-before: /* (this leaks \"result\" and \"funcname\") */\n+    :end-before: /* (this leaks \"jit_result\" and \"funcname\") */\n     :language: c\n \n We can now run the result:"}]}