{"sha": "685885b773c21a431e87d59de0620b0098fc6dc2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1ODg1Yjc3M2MyMWE0MzFlODdkNTlkZTA2MjBiMDA5OGZjNmRjMg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-01-19T21:54:09Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-01-19T21:54:09Z"}, "message": "i386.md (push): Prohibit symbolic constants if flag_pic.\n\n* i386.md (push): Prohibit symbolic constants if flag_pic.\n(movsi+1): Likewise for move to non-register.\n\nFrom-SVN: r17425", "tree": {"sha": "ee89068efeafb38e07b6fa28de76236b8ce5e80c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee89068efeafb38e07b6fa28de76236b8ce5e80c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/685885b773c21a431e87d59de0620b0098fc6dc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685885b773c21a431e87d59de0620b0098fc6dc2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/685885b773c21a431e87d59de0620b0098fc6dc2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/685885b773c21a431e87d59de0620b0098fc6dc2/comments", "author": null, "committer": null, "parents": [{"sha": "11ea364a691943c03275f081d97c75f75777d83c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11ea364a691943c03275f081d97c75f75777d83c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11ea364a691943c03275f081d97c75f75777d83c"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "3413a8910bb73439ae7312bc55daa5482dc3c18a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685885b773c21a431e87d59de0620b0098fc6dc2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685885b773c21a431e87d59de0620b0098fc6dc2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=685885b773c21a431e87d59de0620b0098fc6dc2", "patch": "@@ -1,3 +1,8 @@\n+Mon Jan 19 21:57:00 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* i386.md (push): Prohibit symbolic constants if flag_pic.\n+\t(movsi+1): Likewise for move to non-register.\n+\n Mon Jan 19 11:15:38 1998  Jim Wilson  <wilson@cygnus.com>\n \n \t* alpha.c (mode_mask_operand): Accept 0xffffffff on 32 bit host."}, {"sha": "7deee6c8e88d1e81f11a28f89e1a5179c331f70d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/685885b773c21a431e87d59de0620b0098fc6dc2/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/685885b773c21a431e87d59de0620b0098fc6dc2/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=685885b773c21a431e87d59de0620b0098fc6dc2", "patch": "@@ -832,10 +832,16 @@\n ;; and each is preceded by a corresponding push-insn pattern\n ;; (since pushes are not general_operands on the 386).\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n+\t(match_operand:SI 1 \"nonmemory_operand\" \"rn\"))]\n+  \"flag_pic\"\n+  \"* return AS1 (push%L0,%1);\")\n+\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"push_operand\" \"=<\")\n \t(match_operand:SI 1 \"nonmemory_operand\" \"ri\"))]\n-  \"\"\n+  \"!flag_pic\"\n   \"* return AS1 (push%L0,%1);\")\n \n ;; On a 386, it is faster to push MEM directly.\n@@ -876,8 +882,10 @@\n \n (define_insn \"\"\n   [(set (match_operand:SI 0 \"general_operand\" \"=g,r\")\n-\t(match_operand:SI 1 \"general_operand\" \"ri,m\"))]\n-  \"(!TARGET_MOVE || GET_CODE (operands[0]) != MEM) || (GET_CODE (operands[1]) != MEM)\"\n+\t(match_operand:SI 1 \"general_operand\" \"rn,im\"))]\n+  \"((!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n+    || (GET_CODE (operands[1]) != MEM))\n+   && flag_pic\"\n   \"*\n {\n   rtx link;\n@@ -896,12 +904,39 @@\n     /* Fastest way to change a 0 to a 1.  */\n     return AS1 (inc%L0,%0);\n \n-  if (flag_pic && SYMBOLIC_CONST (operands[1]))\n+  if (SYMBOLIC_CONST (operands[1]))\n     return AS2 (lea%L0,%a1,%0);\n \n   return AS2 (mov%L0,%1,%0);\n }\")\n \n+(define_insn \"\"\n+  [(set (match_operand:SI 0 \"general_operand\" \"=g,r\")\n+\t(match_operand:SI 1 \"general_operand\" \"ri,m\"))]\n+  \"((!TARGET_MOVE || GET_CODE (operands[0]) != MEM)\n+    || (GET_CODE (operands[1]) != MEM))\n+   && !flag_pic\"\n+  \"*\n+{\n+  rtx link;\n+  if (operands[1] == const0_rtx && REG_P (operands[0]))\n+    return AS2 (xor%L0,%0,%0);\n+\n+  if (operands[1] == const1_rtx\n+      && (link = find_reg_note (insn, REG_WAS_0, 0))\n+      /* Make sure the insn that stored the 0 is still present.  */\n+      && ! INSN_DELETED_P (XEXP (link, 0))\n+      && GET_CODE (XEXP (link, 0)) != NOTE\n+      /* Make sure cross jumping didn't happen here.  */\n+      && no_labels_between_p (XEXP (link, 0), insn)\n+      /* Make sure the reg hasn't been clobbered.  */\n+      && ! reg_set_between_p (operands[0], XEXP (link, 0), insn))\n+    /* Fastest way to change a 0 to a 1.  */\n+    return AS1 (inc%L0,%0);\n+\n+  return AS2 (mov%L0,%1,%0);\n+}\")\n+\n (define_insn \"\"\n   [(set (match_operand:HI 0 \"push_operand\" \"=<\")\n \t(match_operand:HI 1 \"nonmemory_operand\" \"ri\"))]"}]}