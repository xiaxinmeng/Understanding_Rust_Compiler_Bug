{"sha": "e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "node_id": "C_kwDOANBUbNoAKGU0NzVhZTliYmYwYzg1YTdkNjBmMjM2YzVhNzQ0ZTE2M2E5ZWY3Yjg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-27T14:41:01Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-09-28T06:17:29Z"}, "message": "Control all jump threading passes with -fjump-threads.\n\nLast year I mentioned that -fthread-jumps was being ignored by the\nmajority of our jump threading passes, and Jeff said he'd be in favor\nof fixing this.\n\nThis patch remedies the situation, but it does change existing behavior.\nCurrently -fthread-jumps is only enabled for -O2, -O3, and -Os.  This\nmeans that even if we restricted all jump threading passes with\n-fthread-jumps, DOM jump threading would still seep through since it\nruns at -O1.\n\nI propose this patch, but it does mean that DOM jump threading would\nhave to be explicitly enabled with -O1 -fthread-jumps.\n\ngcc/ChangeLog:\n\n\t* tree-ssa-threadbackward.c (pass_thread_jumps::gate): Check\n\tflag_thread_jumps.\n\t(pass_early_thread_jumps::gate): Same.\n\t* tree-ssa-threadedge.c (jump_threader::thread_outgoing_edges):\n\tReturn if !flag_thread_jumps.\n\t* tree-ssa-threadupdate.c\n\t(jt_path_registry::register_jump_thread): Assert that\n\tflag_thread_jumps is true.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/auto-init-uninit-1.c: Add -fthread-jumps.\n\t* gcc.dg/auto-init-uninit-15.c: Same.\n\t* gcc.dg/guality/example.c: Same.\n\t* gcc.dg/loop-8.c: Same.\n\t* gcc.dg/strlenopt-40.c: Same.\n\t* gcc.dg/tree-ssa/pr18133-2.c: Same.\n\t* gcc.dg/tree-ssa/pr18134.c: Same.\n\t* gcc.dg/uninit-1.c: Same.\n\t* gcc.dg/uninit-pr44547.c: Same.\n\t* gcc.dg/uninit-pr59970.c: Same.", "tree": {"sha": "edf942bb62820aa08cba690bfa55461e4397699b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edf942bb62820aa08cba690bfa55461e4397699b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfb95f9b92326e86e99b50350ebf04fa9cd2477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfb95f9b92326e86e99b50350ebf04fa9cd2477"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "ce8909623ab386ef862de217ab660c88cbb39a20", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-1.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,5 +1,5 @@\n /* Spurious uninitialized variable warnings, case 1.\n    Taken from cppfiles.c (merge_include_chains) */\n /* { dg-do compile } */\n-/* { dg-options \"-O -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-O -Wuninitialized -fthread-jumps -ftrivial-auto-var-init=zero\" } */\n #include \"uninit-1.c\""}, {"sha": "b8f6e2b57d59b67be55188b1332c78b4fe6ccd1d", "filename": "gcc/testsuite/gcc.dg/auto-init-uninit-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fauto-init-uninit-15.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -5,7 +5,7 @@\n    But it is of course ok if we warn in bar about uninitialized use\n    of j.  (not xfailed alternative)  */\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -Wuninitialized -ftrivial-auto-var-init=zero\" } */\n+/* { dg-options \"-O1 -Wuninitialized -fthread-jumps -ftrivial-auto-var-init=zero\" } */\n \n inline int\n foo (int i)"}, {"sha": "37564e55cd1997d8a5ac54f78cce5478d63e26dd", "filename": "gcc/testsuite/gcc.dg/guality/example.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fguality%2Fexample.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-do run { xfail { ! aarch64*-*-* } } } */\n /* { dg-options \"-g\" } */\n /* { dg-xfail-run-if \"\" aarch64*-*-* \"*\" { \"-O[01g]\" } } */\n "}, {"sha": "e5218eb4053b188964b3f24a0d5af0276b7e4292", "filename": "gcc/testsuite/gcc.dg/loop-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Floop-8.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-rtl-loop2_invariant\" } */\n+/* { dg-options \"-O1 -fthread-jumps -fdump-rtl-loop2_invariant\" } */\n /* { dg-skip-if \"unexpected IV\" { \"hppa*-*-* mips*-*-* visium-*-* powerpc*-*-* riscv*-*-* mmix-*-* vax-*-*\" } } */\n /* Load immediate on condition is available from z13 on and prevents moving\n    the load out of the loop, so always run this test with -march=zEC12 that"}, {"sha": "7b7991047081df3aeda23536a3a0b0da2c7def45", "filename": "gcc/testsuite/gcc.dg/strlenopt-40.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-40.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/83671 - fix for false positive reported by\n    -Wstringop-overflow does not work with inlining\n    { dg-do compile }\n-   { dg-options \"-O1 -fdump-tree-optimized\" } */\n+   { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized\" } */\n \n #include \"strlenopt.h\"\n "}, {"sha": "1b409852189f6e409c14976aae53811a32f4ee9c", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18133-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18133-2.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized-blocks\" } */\n+/* { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized-blocks\" } */\n \n int c, d;\n "}, {"sha": "d7f5d241eb9b0755289f14b620a8cf5b50ec4e45", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr18134.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr18134.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O1 -fdump-tree-optimized\" } */\n+/* { dg-options \"-O1 -fthread-jumps -fdump-tree-optimized\" } */\n \n int  foo (int a)\n {"}, {"sha": "156d34ff732e1aacc0651f5aa8ede825e42b6555", "filename": "gcc/testsuite/gcc.dg/uninit-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-1.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,7 +1,7 @@\n /* Spurious uninitialized variable warnings, case 1.\n    Taken from cppfiles.c (merge_include_chains) */\n /* { dg-do compile } */\n-/* { dg-options \"-O -Wuninitialized\" } */\n+/* { dg-options \"-O -Wuninitialized -fthread-jumps\" } */\n \n struct list\n {"}, {"sha": "f1c3b034d14d8aa0caf843512c9f3626e98e848a", "filename": "gcc/testsuite/gcc.dg/uninit-pr44547.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr44547.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1,7 +1,7 @@\n /* PR tree-optimization/44547 - -Wuninitialized reports false warning\n    in nested switch statements\n    { dg-do compile }\n-   { dg-options \"-O1 -Wall\" } */\n+   { dg-options \"-O1 -Wall -fthread-jumps\" } */\n \n __attribute__ ((noipa)) int test_O1 (int argc)\n {"}, {"sha": "d0c41b8480dbc2c3724d89d9ed41d6a7cf9151c9", "filename": "gcc/testsuite/gcc.dg/uninit-pr59970.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr59970.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -41,7 +41,7 @@ d_demangle_callback_O1 (const char *mangled)\n #pragma GCC pop_options\n \n \n-#pragma GCC optimize (\"Og\")\n+#pragma GCC optimize (\"Og,thread-jumps\")\n \n __attribute__ ((noipa)) int\n d_demangle_callback_Og (const char *mangled)"}, {"sha": "28c7ef8c872b14be6b3ac32ab055f163a10bdc41", "filename": "gcc/tree-ssa-threadbackward.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadbackward.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadbackward.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -943,7 +943,7 @@ class pass_thread_jumps : public gimple_opt_pass\n bool\n pass_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n {\n-  return flag_expensive_optimizations;\n+  return flag_thread_jumps && flag_expensive_optimizations;\n }\n \n // Try to thread blocks in FUN.  Return TRUE if any jump thread paths were\n@@ -1013,7 +1013,7 @@ class pass_early_thread_jumps : public gimple_opt_pass\n bool\n pass_early_thread_jumps::gate (function *fun ATTRIBUTE_UNUSED)\n {\n-  return true;\n+  return flag_thread_jumps;\n }\n \n unsigned int"}, {"sha": "a63a9764ff87040f97e4eb0c6bca58d6232b3c9d", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -1196,6 +1196,9 @@ jump_threader::thread_outgoing_edges (basic_block bb)\n   int flags = (EDGE_IGNORE | EDGE_COMPLEX | EDGE_ABNORMAL);\n   gimple *last;\n \n+  if (!flag_thread_jumps)\n+    return;\n+\n   /* If we have an outgoing edge to a block with multiple incoming and\n      outgoing edges, then we may be able to thread the edge, i.e., we\n      may be able to statically determine which of the outgoing edges"}, {"sha": "cf96c9036683c619628568d179e12ce7690ec7ed", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=e475ae9bbf0c85a7d60f236c5a744e163a9ef7b8", "patch": "@@ -2822,6 +2822,8 @@ jt_path_registry::cancel_invalid_paths (vec<jump_thread_edge *> &path)\n bool\n jt_path_registry::register_jump_thread (vec<jump_thread_edge *> *path)\n {\n+  gcc_checking_assert (flag_thread_jumps);\n+\n   if (!dbg_cnt (registered_jump_thread))\n     {\n       path->release ();"}]}