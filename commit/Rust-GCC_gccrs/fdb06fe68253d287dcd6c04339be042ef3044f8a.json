{"sha": "fdb06fe68253d287dcd6c04339be042ef3044f8a", "node_id": "C_kwDOANBUbNoAKGZkYjA2ZmU2ODI1M2QyODdkY2Q2YzA0MzM5YmUwNDJlZjMwNDRmOGE", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-24T23:52:08Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-24T23:52:08Z"}, "message": "docs, analyzer: improvements to \"Debugging the Analyzer\"\n\ngcc/ChangeLog:\n\t* doc/analyzer.texi (Debugging the Analyzer): Add notes on useful\n\tdebugging options.\n\t(Special Functions for Debugging the Analyzer): Convert to a\n\ttable, and rewrite in places.\n\t(Other Debugging Techniques): Add notes on how to compare two\n\tdifferent exploded graphs.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "1641d3f86ca73df77f235984f607a0df9e69a81a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1641d3f86ca73df77f235984f607a0df9e69a81a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdb06fe68253d287dcd6c04339be042ef3044f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb06fe68253d287dcd6c04339be042ef3044f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdb06fe68253d287dcd6c04339be042ef3044f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdb06fe68253d287dcd6c04339be042ef3044f8a/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0849a188d539d78101a32deea63db4cb39fb55ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0849a188d539d78101a32deea63db4cb39fb55ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0849a188d539d78101a32deea63db4cb39fb55ac"}], "stats": {"total": 125, "additions": 116, "deletions": 9}, "files": [{"sha": "2692b0e3ece5a73d9d41b7a4029c0ddb04444d73", "filename": "gcc/doc/analyzer.texi", "status": "modified", "additions": 116, "deletions": 9, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdb06fe68253d287dcd6c04339be042ef3044f8a/gcc%2Fdoc%2Fanalyzer.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdb06fe68253d287dcd6c04339be042ef3044f8a/gcc%2Fdoc%2Fanalyzer.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fanalyzer.texi?ref=fdb06fe68253d287dcd6c04339be042ef3044f8a", "patch": "@@ -437,13 +437,97 @@ than printing the underlying variable name.\n @cindex analyzer, debugging\n @cindex static analyzer, debugging\n \n+When debugging the analyzer I normally use all of these options\n+together:\n+\n+@smallexample\n+./xgcc -B. \\\n+  -S \\\n+  -fanalyzer \\\n+  OTHER_GCC_ARGS \\\n+  -wrapper gdb,--args \\\n+  -fdump-analyzer-stderr \\\n+  -fanalyzer-fine-grained \\\n+  -fdump-ipa-analyzer=stderr\n+@end smallexample\n+\n+where:\n+\n+@itemize @bullet\n+@item @code{./xgcc -B.}\n+is the usual way to invoke a self-built GCC from within the @file{BUILDDIR/gcc}\n+subdirectory.\n+\n+@item @code{-S}\n+so that the driver (@code{./xgcc}) invokes @code{cc1}, but doesn't bother\n+running the assembler or linker (since the analyzer runs inside @code{cc1}).\n+\n+@item @code{-fanalyzer}\n+enables the analyzer, obviously.\n+\n+@item @code{-wrapper gdb,--args}\n+invokes @code{cc1} under the debugger so that I can debug @code{cc1} and\n+set breakpoints and step through things.\n+\n+@item @code{-fdump-analyzer-stderr}\n+so that the logging interface is enabled and goes to stderr, which often\n+gives valuable context into what's happening when stepping through the\n+analyzer\n+\n+@item @code{-fanalyzer-fine-grained}\n+which splits the effect of every statement into its own\n+exploded_node, rather than the default (which tries to combine\n+successive stmts to reduce the size of the exploded_graph).  This makes\n+it easier to see exactly where a particular change happens.\n+\n+@item @code{-fdump-ipa-analyzer=stderr}\n+which dumps the GIMPLE IR seen by the analyzer pass to stderr\n+\n+@end itemize\n+\n+Other useful options:\n+\n+@itemize @bullet\n+@item @code{-fdump-analyzer-exploded-graph}\n+which dumps a @file{SRC.eg.dot} GraphViz file that I can look at (with\n+python-xdot)\n+\n+@item @code{-fdump-analyzer-exploded-nodes-2}\n+which dumps a @file{SRC.eg.txt} file containing the full @code{exploded_graph}.\n+\n+@end itemize\n+\n+Assuming that you have the\n+@uref{https://gcc-newbies-guide.readthedocs.io/en/latest/debugging.html,,python support scripts for gdb}\n+installed, you can use:\n+\n+@smallexample\n+(gdb) break-on-saved-diagnostic\n+@end smallexample\n+\n+to put a breakpoint at the place where a diagnostic is saved during\n+@code{exploded_graph} exploration, to see where a particular diagnostic\n+is being saved, and:\n+\n+@smallexample\n+(gdb) break-on-diagnostic\n+@end smallexample\n+\n+to put a breakpoint at the place where diagnostics are actually emitted.\n+\n @subsection Special Functions for Debugging the Analyzer\n \n The analyzer recognizes various special functions by name, for use\n-in debugging the analyzer.  Declarations can be seen in the testsuite\n+in debugging the analyzer, and for use in DejaGnu tests.\n+\n+The declarations of these functions can be seen in the testsuite\n in @file{analyzer-decls.h}.  None of these functions are actually\n-implemented.\n+implemented in terms of code, merely as @code{known_function} subclasses\n+(in @file{gcc/analyzer/kf-analyzer.cc}).\n+\n+@table @code\n \n+@item __analyzer_break\n Add:\n @smallexample\n   __analyzer_break ();\n@@ -452,6 +536,7 @@ to the source being analyzed to trigger a breakpoint in the analyzer when\n that source is reached.  By putting a series of these in the source, it's\n much easier to effectively step through the program state as it's analyzed.\n \n+@item __analyzer_describe\n The analyzer handles:\n \n @smallexample\n@@ -462,20 +547,23 @@ by emitting a warning describing the 2nd argument (which can be of any\n type), at a verbosity level given by the 1st argument.  This is for use when\n debugging, and may be of use in DejaGnu tests.\n \n+@item __analyzer_dump\n @smallexample\n __analyzer_dump ();\n @end smallexample\n \n will dump the copious information about the analyzer's state each time it\n reaches the call in its traversal of the source.\n \n+@item __analyzer_dump_capacity\n @smallexample\n extern void __analyzer_dump_capacity (const void *ptr);\n @end smallexample\n \n will emit a warning describing the capacity of the base region of\n the region pointed to by the 1st argument.\n \n+@item __analyzer_dump_escaped\n @smallexample\n extern void __analyzer_dump_escaped (void);\n @end smallexample\n@@ -484,16 +572,19 @@ will emit a warning giving the number of decls that have escaped on this\n analysis path, followed by a comma-separated list of their names,\n in alphabetical order.\n \n+@item __analyzer_dump_path\n @smallexample\n __analyzer_dump_path ();\n @end smallexample\n \n will emit a placeholder ``note'' diagnostic with a path to that call site,\n-if the analyzer finds a feasible path to it.\n+if the analyzer finds a feasible path to it.  This can be useful for\n+writing DejaGnu tests for constraint-tracking and feasibility checking.\n \n-The builtin @code{__analyzer_dump_exploded_nodes} will emit a warning\n-after analysis containing information on all of the exploded nodes at that\n-program point:\n+@item __analyzer_dump_exploded_nodes\n+For every callsite to @code{__analyzer_dump_exploded_nodes} the analyzer\n+will emit a warning after it finished the analysis containing information\n+on all of the exploded nodes at that program point.\n \n @smallexample\n   __analyzer_dump_exploded_nodes (0);\n@@ -514,8 +605,9 @@ With a non-zero argument\n \n it will also dump all of the states within the ``processed'' nodes.\n \n-The builtin @code{__analyzer_dump_named_constant} will emit a warning\n-during analysis describing what is known about the value of a given\n+@item __analyzer_dump_named_constant\n+When the analyzer sees a call to @code{__analyzer_dump_named_constant} it\n+will emit a warning describing what is known about the value of a given\n named constant, for parts of the analyzer that interact with target\n headers.\n \n@@ -525,17 +617,19 @@ For example:\n __analyzer_dump_named_constant (\"O_RDONLY\");\n @end smallexample\n \n-might emit the warning:\n+might lead to the analyzer emitting the warning:\n \n @smallexample\n warning: named constant 'O_RDONLY' has value '1'\n @end smallexample\n \n+@item __analyzer_dump_region_model\n @smallexample\n    __analyzer_dump_region_model ();\n @end smallexample\n will dump the region_model's state to stderr.\n \n+@item __analyzer_dump_state\n @smallexample\n __analyzer_dump_state (\"malloc\", ptr);\n @end smallexample\n@@ -545,19 +639,32 @@ will emit a warning describing the state of the 2nd argument\n a name matching the 1st argument (which must be a string literal).\n This is for use when debugging, and may be of use in DejaGnu tests.\n \n+@item __analyzer_eval\n @smallexample\n __analyzer_eval (expr);\n @end smallexample\n will emit a warning with text \"TRUE\", FALSE\" or \"UNKNOWN\" based on the\n truthfulness of the argument.  This is useful for writing DejaGnu tests.\n \n+@item __analyzer_get_unknown_ptr\n @smallexample\n __analyzer_get_unknown_ptr ();\n @end smallexample\n will obtain an unknown @code{void *}.\n \n+@end table\n+\n @subsection Other Debugging Techniques\n \n+To compare two different exploded graphs, try\n+@code{-fdump-analyzer-exploded-nodes-2 -fdump-noaddr -fanalyzer-fine-grained}.\n+This will dump a @file{SRC.eg.txt} file containing the full\n+@code{exploded_graph}. I use @code{diff -u50 -p} to compare two different\n+such files (e.g. before and after a patch) to find the first place where the\n+two graphs diverge.  The option @option{-fdump-noaddr} will suppress\n+printing pointers withihn the dumps (which would otherwise hide the real\n+differences with irrelevent churn).\n+\n The option @option{-fdump-analyzer-json} will dump both the supergraph\n and the exploded graph in compressed JSON form.\n "}]}