{"sha": "d918c3a221434521f90cc9b63d5d87f5129e9231", "node_id": "C_kwDOANBUbNoAKGQ5MThjM2EyMjE0MzQ1MjFmOTBjYzliNjNkNWQ4N2Y1MTI5ZTkyMzE", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-22T00:13:59Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2023-02-28T15:15:27Z"}, "message": "c++: variable template and targ deduction [PR108550]\n\nIn this test, we get a bogus error because we failed to deduce the auto in\nconstexpr auto is_pointer_v = is_pointer<Tp>::value;\nto bool.  Then ensure_literal_type_for_constexpr_object thinks the object\nisn't literal and an error is reported.\n\nThis is another case of the interaction between tf_partial and 'auto',\nwhere the auto was not reduced so the deduction failed.  In more detail:\nwe have\n\n  Wrap1<int>()\n\nin the code and we need to perform OR -> fn_type_unification.  The targ\nlist is incomplete, so we do\n      tsubst_flags_t ecomplain = complain | tf_partial | tf_fndecl_type;\n      fntype = tsubst (TREE_TYPE (fn), explicit_targs, ecomplain, NULL_TREE);\nwhere TREE_TYPE (fn) is struct integral_constant <T402> (void).  Then\nwe substitute the return type, which results in tsubsting is_pointer_v<int>.\nis_pointer_v is a variable template with a placeholder type:\n\n  template <class Tp>\n  constexpr auto is_pointer_v = is_pointer<Tp>::value;\n\nso we find ourselves in lookup_and_finish_template_variable.  tf_partial is\nstill set, so finish_template_variable -> instantiate_template -> tsubst\nwon't reduce the level of auto.  But then we do mark_used which eventually\ncalls do_auto_deduction which clears tf_partial, because we want to replace\nthe auto now.  But we hadn't reduced auto's level so this fails.  And\nsince we're not in an immediate context, we emit a hard error.\n\nI suppose that when we reach lookup_and_finish_template_variable it's\nprobably time to clear tf_partial.  (I added an assert and our testsuite\ndoesn't have a test whereby we get to lookup_and_finish_template_variable\nwhile tf_partial is still active.)\n\n\tPR c++/108550\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (lookup_and_finish_template_variable): Clear tf_partial.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1y/var-templ70.C: New test.\n\t* g++.dg/cpp1y/var-templ71.C: New test.\n\t* g++.dg/cpp1y/var-templ72.C: New test.", "tree": {"sha": "9ae4fb652e053a53ce4049cd42a6704e6fe8ba95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ae4fb652e053a53ce4049cd42a6704e6fe8ba95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d918c3a221434521f90cc9b63d5d87f5129e9231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d918c3a221434521f90cc9b63d5d87f5129e9231", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d918c3a221434521f90cc9b63d5d87f5129e9231", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d918c3a221434521f90cc9b63d5d87f5129e9231/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea718febab2a1f6e58806738abf70f1c73c6a308", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea718febab2a1f6e58806738abf70f1c73c6a308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea718febab2a1f6e58806738abf70f1c73c6a308"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "f636bac54134423e2a2713a7e4d3bf27ef051acc", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=d918c3a221434521f90cc9b63d5d87f5129e9231", "patch": "@@ -10355,6 +10355,12 @@ lookup_and_finish_template_variable (tree templ, tree targs,\n   if (TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (templ)) == 1\n       && !any_dependent_template_arguments_p (targs))\n     {\n+      /* We may be called while doing a partial substitution, but the\n+\t type of the variable template may be auto, in which case we\n+\t will call do_auto_deduction in mark_used (which clears tf_partial)\n+\t and the auto must be properly reduced at that time for the\n+\t deduction to work.  */\n+      complain &= ~tf_partial;\n       var = finish_template_variable (var, complain);\n       mark_used (var);\n     }"}, {"sha": "1d35c38c7cc4efeff4778ecbadc12f032513e5e9", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ70.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ70.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ70.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ70.C?ref=d918c3a221434521f90cc9b63d5d87f5129e9231", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/108550\n+// { dg-do compile { target c++14 } }\n+\n+template<class T>\n+struct is_pointer\n+{\n+  static constexpr bool value = false;\n+};\n+\n+template<class T, T T1>\n+struct integral_constant\n+{\n+  static constexpr T value = T1;\n+};\n+\n+\n+template <class Tp>\n+constexpr auto is_pointer_v = is_pointer<Tp>::value;\n+\n+template <class Tp, int = 0>\n+integral_constant<bool, is_pointer_v<int>> Wrap1();\n+\n+int main() {\n+  static_assert(!decltype(Wrap1<int>())::value, \"\");\n+}"}, {"sha": "e0cf55230d934992a3511d5786c13ec395ef265d", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ71.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ71.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ71.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ71.C?ref=d918c3a221434521f90cc9b63d5d87f5129e9231", "patch": "@@ -0,0 +1,26 @@\n+// PR c++/108550\n+// { dg-do compile { target c++14 } }\n+\n+template<class T, T T1>\n+struct integral_constant\n+{\n+  static constexpr T value = T1;\n+};\n+\n+template <typename T>\n+struct S {\n+  template <typename U, typename V>\n+  static constexpr void foo(V) { }\n+\n+  constexpr bool bar () const { foo<int>(10); return false; }\n+};\n+\n+template <class Tp>\n+constexpr auto is_pointer_v = S<Tp>{}.bar();\n+\n+template <class Tp, int = 0>\n+integral_constant<bool, is_pointer_v<int>> Wrap1();\n+\n+int main() {\n+  static_assert(!decltype(Wrap1<int>())::value, \"\");\n+}"}, {"sha": "7426bad4a6ccb14f0a0667cea6cd193ce4a25b9f", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ72.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ72.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d918c3a221434521f90cc9b63d5d87f5129e9231/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ72.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ72.C?ref=d918c3a221434521f90cc9b63d5d87f5129e9231", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/108550\n+// { dg-do compile { target c++14 } }\n+\n+template<class T>\n+struct is_pointer\n+{\n+  static constexpr bool value = false;\n+};\n+\n+template<class T, T T1>\n+struct integral_constant\n+{\n+  static constexpr T value = T1;\n+};\n+\n+template<typename T>\n+using PTR_P = is_pointer<T>;\n+\n+template <class Tp>\n+constexpr auto is_pointer_v = PTR_P<Tp>::value;\n+\n+template <class Tp, int = 0>\n+integral_constant<bool, is_pointer_v<Tp>> Wrap1();\n+\n+int main() {\n+  static_assert(!decltype(Wrap1<int>())::value, \"\");\n+}"}]}