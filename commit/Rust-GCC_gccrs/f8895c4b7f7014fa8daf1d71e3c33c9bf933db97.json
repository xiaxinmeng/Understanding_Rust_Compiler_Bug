{"sha": "f8895c4b7f7014fa8daf1d71e3c33c9bf933db97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjg4OTVjNGI3ZjcwMTRmYThkYWYxZDcxZTNjMzNjOWJmOTMzZGI5Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-08-23T17:31:56Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-08-23T17:31:56Z"}, "message": "Add missing file\n\nFrom-SVN: r163473", "tree": {"sha": "56cabbad8d8e9924b0c6ef335c3305284bfa71f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56cabbad8d8e9924b0c6ef335c3305284bfa71f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97/comments", "author": null, "committer": null, "parents": [{"sha": "b36cf9d28f68d00e8b24e38a028c8076342b06a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36cf9d28f68d00e8b24e38a028c8076342b06a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36cf9d28f68d00e8b24e38a028c8076342b06a6"}], "stats": {"total": 554, "additions": 554, "deletions": 0}, "files": [{"sha": "445dc1992d91859de183b21015fe56e7465edf78", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-mass-1.c", "status": "added", "additions": 554, "deletions": 0, "changes": 554, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-mass-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8895c4b7f7014fa8daf1d71e3c33c9bf933db97/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-mass-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-mass-1.c?ref=f8895c4b7f7014fa8daf1d71e3c33c9bf933db97", "patch": "@@ -0,0 +1,554 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O3 -ftree-vectorize -mcpu=power7 -ffast-math -mveclibabi=mass\" } */\n+/* { dg-final { scan-assembler \"bl atan2d2\" } } */\n+/* { dg-final { scan-assembler \"bl atan2f4\" } } */\n+/* { dg-final { scan-assembler \"bl hypotd2\" } } */\n+/* { dg-final { scan-assembler \"bl hypotf4\" } } */\n+/* { dg-final { scan-assembler \"bl powd2\" } } */\n+/* { dg-final { scan-assembler \"bl powf4\" } } */\n+/* { dg-final { scan-assembler \"bl acosd2\" } } */\n+/* { dg-final { scan-assembler \"bl acosf4\" } } */\n+/* { dg-final { scan-assembler \"bl acoshd2\" } } */\n+/* { dg-final { scan-assembler \"bl acoshf4\" } } */\n+/* { dg-final { scan-assembler \"bl asind2\" } } */\n+/* { dg-final { scan-assembler \"bl asinf4\" } } */\n+/* { dg-final { scan-assembler \"bl asinhd2\" } } */\n+/* { dg-final { scan-assembler \"bl asinhf4\" } } */\n+/* { dg-final { scan-assembler \"bl atand2\" } } */\n+/* { dg-final { scan-assembler \"bl atanf4\" } } */\n+/* { dg-final { scan-assembler \"bl atanhd2\" } } */\n+/* { dg-final { scan-assembler \"bl atanhf4\" } } */\n+/* { dg-final { scan-assembler \"bl cbrtd2\" } } */\n+/* { dg-final { scan-assembler \"bl cbrtf4\" } } */\n+/* { dg-final { scan-assembler \"bl cosd2\" } } */\n+/* { dg-final { scan-assembler \"bl cosf4\" } } */\n+/* { dg-final { scan-assembler \"bl coshd2\" } } */\n+/* { dg-final { scan-assembler \"bl coshf4\" } } */\n+/* { dg-final { scan-assembler \"bl erfd2\" } } */\n+/* { dg-final { scan-assembler \"bl erff4\" } } */\n+/* { dg-final { scan-assembler \"bl erfcd2\" } } */\n+/* { dg-final { scan-assembler \"bl erfcf4\" } } */\n+/* { dg-final { scan-assembler \"bl exp2d2\" } } */\n+/* { dg-final { scan-assembler \"bl exp2f4\" } } */\n+/* { dg-final { scan-assembler \"bl expd2\" } } */\n+/* { dg-final { scan-assembler \"bl expf4\" } } */\n+/* { dg-final { scan-assembler \"bl expm1d2\" } } */\n+/* { dg-final { scan-assembler \"bl expm1f4\" } } */\n+/* { dg-final { scan-assembler \"bl lgamma\" } } */\n+/* { dg-final { scan-assembler \"bl lgammaf\" } } */\n+/* { dg-final { scan-assembler \"bl log10d2\" } } */\n+/* { dg-final { scan-assembler \"bl log10f4\" } } */\n+/* { dg-final { scan-assembler \"bl log1pd2\" } } */\n+/* { dg-final { scan-assembler \"bl log1pf4\" } } */\n+/* { dg-final { scan-assembler \"bl log2d2\" } } */\n+/* { dg-final { scan-assembler \"bl log2f4\" } } */\n+/* { dg-final { scan-assembler \"bl logd2\" } } */\n+/* { dg-final { scan-assembler \"bl logf4\" } } */\n+/* { dg-final { scan-assembler \"bl sind2\" } } */\n+/* { dg-final { scan-assembler \"bl sinf4\" } } */\n+/* { dg-final { scan-assembler \"bl sinhd2\" } } */\n+/* { dg-final { scan-assembler \"bl sinhf4\" } } */\n+/* { dg-final { scan-assembler \"bl tand2\" } } */\n+/* { dg-final { scan-assembler \"bl tanf4\" } } */\n+/* { dg-final { scan-assembler \"bl tanhd2\" } } */\n+/* { dg-final { scan-assembler \"bl tanhf4\" } } */\n+\n+#ifndef SIZE\n+#define SIZE 1024\n+#endif\n+\n+double d1[SIZE] __attribute__((__aligned__(32)));\n+double d2[SIZE] __attribute__((__aligned__(32)));\n+double d3[SIZE] __attribute__((__aligned__(32)));\n+\n+float f1[SIZE] __attribute__((__aligned__(32)));\n+float f2[SIZE] __attribute__((__aligned__(32)));\n+float f3[SIZE] __attribute__((__aligned__(32)));\n+\n+void\n+test_double_atan2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_atan2 (d2[i], d3[i]);\n+}\n+\n+void\n+test_float_atan2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_atan2f (f2[i], f3[i]);\n+}\n+\n+void\n+test_double_hypot (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_hypot (d2[i], d3[i]);\n+}\n+\n+void\n+test_float_hypot (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_hypotf (f2[i], f3[i]);\n+}\n+\n+void\n+test_double_pow (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_pow (d2[i], d3[i]);\n+}\n+\n+void\n+test_float_pow (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_powf (f2[i], f3[i]);\n+}\n+\n+void\n+test_double_acos (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_acos (d2[i]);\n+}\n+\n+void\n+test_float_acos (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_acosf (f2[i]);\n+}\n+\n+void\n+test_double_acosh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_acosh (d2[i]);\n+}\n+\n+void\n+test_float_acosh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_acoshf (f2[i]);\n+}\n+\n+void\n+test_double_asin (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_asin (d2[i]);\n+}\n+\n+void\n+test_float_asin (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_asinf (f2[i]);\n+}\n+\n+void\n+test_double_asinh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_asinh (d2[i]);\n+}\n+\n+void\n+test_float_asinh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_asinhf (f2[i]);\n+}\n+\n+void\n+test_double_atan (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_atan (d2[i]);\n+}\n+\n+void\n+test_float_atan (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_atanf (f2[i]);\n+}\n+\n+void\n+test_double_atanh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_atanh (d2[i]);\n+}\n+\n+void\n+test_float_atanh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_atanhf (f2[i]);\n+}\n+\n+void\n+test_double_cbrt (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_cbrt (d2[i]);\n+}\n+\n+void\n+test_float_cbrt (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_cbrtf (f2[i]);\n+}\n+\n+void\n+test_double_cos (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_cos (d2[i]);\n+}\n+\n+void\n+test_float_cos (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_cosf (f2[i]);\n+}\n+\n+void\n+test_double_cosh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_cosh (d2[i]);\n+}\n+\n+void\n+test_float_cosh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_coshf (f2[i]);\n+}\n+\n+void\n+test_double_erf (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_erf (d2[i]);\n+}\n+\n+void\n+test_float_erf (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_erff (f2[i]);\n+}\n+\n+void\n+test_double_erfc (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_erfc (d2[i]);\n+}\n+\n+void\n+test_float_erfc (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_erfcf (f2[i]);\n+}\n+\n+void\n+test_double_exp2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_exp2 (d2[i]);\n+}\n+\n+void\n+test_float_exp2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_exp2f (f2[i]);\n+}\n+\n+void\n+test_double_exp (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_exp (d2[i]);\n+}\n+\n+void\n+test_float_exp (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_expf (f2[i]);\n+}\n+\n+void\n+test_double_expm1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_expm1 (d2[i]);\n+}\n+\n+void\n+test_float_expm1 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_expm1f (f2[i]);\n+}\n+\n+void\n+test_double_lgamma (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_lgamma (d2[i]);\n+}\n+\n+void\n+test_float_lgamma (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_lgammaf (f2[i]);\n+}\n+\n+void\n+test_double_log10 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_log10 (d2[i]);\n+}\n+\n+void\n+test_float_log10 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_log10f (f2[i]);\n+}\n+\n+void\n+test_double_log1p (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_log1p (d2[i]);\n+}\n+\n+void\n+test_float_log1p (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_log1pf (f2[i]);\n+}\n+\n+void\n+test_double_log2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_log2 (d2[i]);\n+}\n+\n+void\n+test_float_log2 (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_log2f (f2[i]);\n+}\n+\n+void\n+test_double_log (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_log (d2[i]);\n+}\n+\n+void\n+test_float_log (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_logf (f2[i]);\n+}\n+\n+void\n+test_double_sin (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_sin (d2[i]);\n+}\n+\n+void\n+test_float_sin (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_sinf (f2[i]);\n+}\n+\n+void\n+test_double_sinh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_sinh (d2[i]);\n+}\n+\n+void\n+test_float_sinh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_sinhf (f2[i]);\n+}\n+\n+void\n+test_double_sqrt (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_sqrt (d2[i]);\n+}\n+\n+void\n+test_float_sqrt (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_sqrtf (f2[i]);\n+}\n+\n+void\n+test_double_tan (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_tan (d2[i]);\n+}\n+\n+void\n+test_float_tan (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_tanf (f2[i]);\n+}\n+\n+void\n+test_double_tanh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    d1[i] = __builtin_tanh (d2[i]);\n+}\n+\n+void\n+test_float_tanh (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE; i++)\n+    f1[i] = __builtin_tanhf (f2[i]);\n+}"}]}