{"sha": "162c40a4c127cc55d701bb8760e17708d0ca2fe0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYyYzQwYTRjMTI3Y2M1NWQ3MDFiYjg3NjBlMTc3MDhkMGNhMmZlMA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-28T22:26:21Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-04-28T22:39:38Z"}, "message": "libstdc++: Fix regression in std::_Construct (PR 94831)\n\nBy trying to reuse the existing std::_Construct function as a wrapper\nfor std::construct_at I introduced regressions, because changing\nstd::_Construct to return non-void made it ill-formed for array types.\n\nThe solution is to revert _Construct to its former state, and change\nallocator_traits::construct to explicitly call construct_at instead.\nThis decouples all the existing callers of _Construct from the new\nconstruct_at requirements.\n\n\tPR libstdc++/94831\n\t* include/bits/alloc_traits.h (_S_construct): Restore placement\n\tnew-expression for C++11/14/17 and call std::construct_at directly\n\tfor C++20.\n\t* include/bits/stl_construct.h (_Construct): Revert to non-constexpr\n\tfunction returning void.\n\t* testsuite/20_util/specialized_algorithms/\n\tuninitialized_value_construct/94831.cc: New test.\n\t* testsuite/23_containers/vector/cons/94831.cc: New test.", "tree": {"sha": "79244a5440aa1ad1b33afbf2433de764ed0fb673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79244a5440aa1ad1b33afbf2433de764ed0fb673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/162c40a4c127cc55d701bb8760e17708d0ca2fe0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162c40a4c127cc55d701bb8760e17708d0ca2fe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/162c40a4c127cc55d701bb8760e17708d0ca2fe0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/162c40a4c127cc55d701bb8760e17708d0ca2fe0/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50714f45eeaf315a0b55d3db3de3bf8df8e94b04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50714f45eeaf315a0b55d3db3de3bf8df8e94b04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50714f45eeaf315a0b55d3db3de3bf8df8e94b04"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "a5b6769ce887560b1ddbc7f8e038673bcd28b563", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=162c40a4c127cc55d701bb8760e17708d0ca2fe0", "patch": "@@ -1,3 +1,15 @@\n+2020-04-28  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94831\n+\t* include/bits/alloc_traits.h (_S_construct): Restore placement\n+\tnew-expression for C++11/14/17 and call std::construct_at directly\n+\tfor C++20.\n+\t* include/bits/stl_construct.h (_Construct): Revert to non-constexpr\n+\tfunction returning void.\n+\t* testsuite/20_util/specialized_algorithms/\n+\tuninitialized_value_construct/94831.cc: New test.\n+\t* testsuite/23_containers/vector/cons/94831.cc: New test.\n+\n 2020-04-28  Patrick Palka  <ppalka@redhat.com>\n \n \tLWG 3433 subrange::advance(n) has UB when n < 0"}, {"sha": "6066f48d24cc031a69848ce328111c2ad42c4e8d", "filename": "libstdc++-v3/include/bits/alloc_traits.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Falloc_traits.h?ref=162c40a4c127cc55d701bb8760e17708d0ca2fe0", "patch": "@@ -253,7 +253,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)\n \tnoexcept(noexcept(::new((void*)__p)\n \t\t\t  _Tp(std::forward<_Args>(__args)...)))\n-\t{ std::_Construct(__p, std::forward<_Args>(__args)...); }\n+\t{\n+#if __cplusplus <= 201703L\n+\t  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);\n+#else\n+\t  std::construct_at(__p, std::forward<_Args>(__args)...);\n+#endif\n+\t}\n \n       template<typename _Alloc2, typename _Tp>\n \tstatic _GLIBCXX14_CONSTEXPR auto"}, {"sha": "72a7cb4712c32f224d45027320f41446949d1c03", "filename": "libstdc++-v3/include/bits/stl_construct.h", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_construct.h?ref=162c40a4c127cc55d701bb8760e17708d0ca2fe0", "patch": "@@ -65,9 +65,9 @@\n  * std::destroy_n, and the C++20 function std::construct_at.\n  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions\n  * which are defined in all standard modes and so can be used in C++98-14 code.\n- * The _Construct and _Destroy functions will dispatch to construct_at and\n- * destroy_at during constant evaluation, because calls to those functions are\n- * intercepted by the compiler to allow use in constant expressions.\n+ * The _Destroy functions will dispatch to destroy_at during constant\n+ * evaluation, because calls to that function are intercepted by the compiler\n+ * to allow use in constant expressions.\n  */\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -104,23 +104,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n #if __cplusplus >= 201103L\n   template<typename _Tp, typename... _Args>\n-    constexpr _Tp*\n+    inline void\n     _Construct(_Tp* __p, _Args&&... __args)\n-    {\n-#if __cplusplus > 201703L\n-      return std::construct_at(__p, std::forward<_Args>(__args)...);\n-#else\n-      return ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...);\n-#endif\n-    }\n+    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }\n #else\n   template<typename _T1, typename _T2>\n-    inline _T1*\n+    inline void\n     _Construct(_T1* __p, const _T2& __value)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 402. wrong new expression in [some_]allocator::construct\n-      return ::new(static_cast<void*>(__p)) _T1(__value);\n+      ::new(static_cast<void*>(__p)) _T1(__value);\n     }\n #endif\n "}, {"sha": "27506fae09f09e845f252c3cc7f93cb6597bfbbb", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/uninitialized_value_construct/94831.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94831.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94831.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Funinitialized_value_construct%2F94831.cc?ref=162c40a4c127cc55d701bb8760e17708d0ca2fe0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile { target c++17 } }\n+\n+#include <memory>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/94831\n+  float i[2];\n+  std::uninitialized_value_construct(&i, &i + 1);\n+}"}, {"sha": "72dfcaae9affd0f270e02036cf8f9af1804d5a6b", "filename": "libstdc++-v3/testsuite/23_containers/vector/cons/94831.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94831.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/162c40a4c127cc55d701bb8760e17708d0ca2fe0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94831.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fcons%2F94831.cc?ref=162c40a4c127cc55d701bb8760e17708d0ca2fe0", "patch": "@@ -0,0 +1,29 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <vector>\n+\n+void\n+test01()\n+{\n+  // PR libstdc++/94831.cc\n+  // We allow this in C++11 and later as a GNU extension.\n+  // FIXME: make it ill-formed when __STRICT_ANSI__ is defined.\n+  std::vector<float[2]> v(1u);\n+}"}]}