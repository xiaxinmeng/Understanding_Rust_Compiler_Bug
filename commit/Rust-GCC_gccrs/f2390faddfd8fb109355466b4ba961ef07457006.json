{"sha": "f2390faddfd8fb109355466b4ba961ef07457006", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIzOTBmYWRkZmQ4ZmIxMDkzNTU0NjZiNGJhOTYxZWYwNzQ1NzAwNg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-06-21T05:39:33Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-06-21T05:39:33Z"}, "message": "Reformat JDBC classes and add new JDK 1.4 classes and methods.\n\n\t* java/sql/ParameterMetaData.java, java/sql/SQLPermission.java,\n\tjava/sql/Savepoint.java: New files.\n\t* java/sql/Array.java, java/sql/BatchUpdateException.java,\n\tjava/sql/Blob.java, java/sql/CallableStatement.java,\n\tjava/sql/Clob.java, java/sql/Connection.java,\n\tjava/sql/DataTruncation.java, java/sql/DatabaseMetaData.java,\n\tjava/sql/Date.java, java/sql/Driver.java,\n\tjava/sql/DriverManager.java,\n\tjava/sql/DriverPropertyInfo.java, java/sql/PreparedStatement.java,\n\tjava/sql/Ref.java, java/sql/ResultSet.java,\n\tjava/sql/ResultSetMetaData.java, java/sql/SQLData.java\n\tjava/sql/SQLException.java, java/sql/SQLInput.java,\n\tjava/sql/SQLOutput.java, java/sql/SQLWarning.java\n\tjava/sql/Statement.java, java/sql/Struct.java, java/sql/Time.java,\n\tjava/sql/Timestamp.java, java/sql/Types.java: Updated to JDBC 3.0\n\t(JDK 1.4) specification.\n\t* javax/sql/ConnectionEvent.java,\n\tjavax/sql/ConnectionEventListener.java,\n\tjavax/sql/ConnectionPoolDataSource.java,\n\tjavax/sql/DataSource.java, javax/sql/PooledConnection.java,\n\tjavax/sql/RowSetEvent.java, javax/sql/RowSetInternal.java,\n\tjavax/sql/RowSet.java, javax/sql/RowSetListener.java,\n\tjavax/sql/RowSetMetaData.java, javax/sql/RowSetReader.java,\n\tjavax/sql/RowSetWriter.java, javax/sql/XAConnection.java,\n\tjavax/sql/XADataSource.java: New files.\n\t* Makefile.am: Add new files.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r54871", "tree": {"sha": "d61a972368a3bd024fed477ac2ab03e86b96d2f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d61a972368a3bd024fed477ac2ab03e86b96d2f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f2390faddfd8fb109355466b4ba961ef07457006", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2390faddfd8fb109355466b4ba961ef07457006", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2390faddfd8fb109355466b4ba961ef07457006", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2390faddfd8fb109355466b4ba961ef07457006/comments", "author": null, "committer": null, "parents": [{"sha": "00b94a4440d95cc009c4434782a00eced71e2745", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b94a4440d95cc009c4434782a00eced71e2745", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b94a4440d95cc009c4434782a00eced71e2745"}], "stats": {"total": 18606, "additions": 9199, "deletions": 9407}, "files": [{"sha": "d02000a2067d9b51b58def03703fdee53a3f8c93", "filename": "libjava/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,3 +1,34 @@\n+2002-06-21  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\tReformat JDBC classes and add new JDK 1.4 classes and methods.\n+\n+\t* java/sql/ParameterMetaData.java, java/sql/SQLPermission.java,\n+\tjava/sql/Savepoint.java: New files.\n+\t* java/sql/Array.java, java/sql/BatchUpdateException.java,\n+\tjava/sql/Blob.java, java/sql/CallableStatement.java,\n+\tjava/sql/Clob.java, java/sql/Connection.java,\n+\tjava/sql/DataTruncation.java, java/sql/DatabaseMetaData.java,\n+\tjava/sql/Date.java, java/sql/Driver.java, java/sql/DriverManager.java,\n+\tjava/sql/DriverPropertyInfo.java, java/sql/PreparedStatement.java,\n+\tjava/sql/Ref.java, java/sql/ResultSet.java,\n+\tjava/sql/ResultSetMetaData.java, java/sql/SQLData.java\n+\tjava/sql/SQLException.java, java/sql/SQLInput.java,\n+\tjava/sql/SQLOutput.java, java/sql/SQLWarning.java\n+\tjava/sql/Statement.java, java/sql/Struct.java, java/sql/Time.java,\n+\tjava/sql/Timestamp.java, java/sql/Types.java: Updated to JDBC 3.0\n+\t(JDK 1.4) specification.\n+\t* javax/sql/ConnectionEvent.java, \n+\tjavax/sql/ConnectionEventListener.java,\n+\tjavax/sql/ConnectionPoolDataSource.java,\n+\tjavax/sql/DataSource.java, javax/sql/PooledConnection.java,\n+\tjavax/sql/RowSetEvent.java, javax/sql/RowSetInternal.java,\n+\tjavax/sql/RowSet.java, javax/sql/RowSetListener.java,\n+\tjavax/sql/RowSetMetaData.java, javax/sql/RowSetReader.java,\n+\tjavax/sql/RowSetWriter.java, javax/sql/XAConnection.java,\n+\tjavax/sql/XADataSource.java: New files.\n+\t* Makefile.am: Add new files.\n+\t* Makefile.in: Rebuilt.\n+\t\n 2002-06-20  Tom Tromey  <tromey@redhat.com>\n \n \tFor PR libgcj/7073:"}, {"sha": "6064f9d7d49496133830149514a2149e79fafa4c", "filename": "libjava/Makefile.am", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -997,6 +997,20 @@ javax/naming/ldap/UnsolicitedNotification.java \\\n javax/naming/ldap/UnsolicitedNotificationEvent.java \\\n javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n+javax/sql/ConnectionEvent.java \\\n+javax/sql/ConnectionEventListener.java \\\n+javax/sql/ConnectionPoolDataSource.java \\\n+javax/sql/DataSource.java \\\n+javax/sql/PooledConnection.java \\\n+javax/sql/RowSetEvent.java \\\n+javax/sql/RowSetInternal.java \\\n+javax/sql/RowSet.java \\\n+javax/sql/RowSetListener.java \\\n+javax/sql/RowSetMetaData.java \\\n+javax/sql/RowSetReader.java \\\n+javax/sql/RowSetWriter.java \\\n+javax/sql/XAConnection.java \\\n+javax/sql/XADataSource.java \\\n javax/transaction/xa/XAException.java \\\n javax/transaction/xa/XAResource.java \\\n javax/transaction/xa/Xid.java \\\n@@ -1604,14 +1618,17 @@ java/sql/Date.java \\\n java/sql/Driver.java \\\n java/sql/DriverManager.java \\\n java/sql/DriverPropertyInfo.java \\\n+java/sql/ParameterMetaData.java \\\n java/sql/PreparedStatement.java\t\\\n java/sql/Ref.java \\\n java/sql/ResultSet.java\t\\\n java/sql/ResultSetMetaData.java\t\\\n+java/sql/Savepoint.java \\\n java/sql/SQLData.java \\\n java/sql/SQLException.java \\\n java/sql/SQLInput.java \\\n java/sql/SQLOutput.java \\\n+java/sql/SQLPermission.java \\\n java/sql/SQLWarning.java \\\n java/sql/Statement.java\t\\\n java/sql/Struct.java\t\\"}, {"sha": "ab8c26f8cf126594efdb67b9b17784e3e9544ae7", "filename": "libjava/Makefile.in", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -768,6 +768,20 @@ javax/naming/ldap/UnsolicitedNotification.java \\\n javax/naming/ldap/UnsolicitedNotificationEvent.java \\\n javax/naming/ldap/UnsolicitedNotificationListener.java \\\n javax/naming/OperationNotSupportedException.java \\\n+javax/sql/ConnectionEvent.java \\\n+javax/sql/ConnectionEventListener.java \\\n+javax/sql/ConnectionPoolDataSource.java \\\n+javax/sql/DataSource.java \\\n+javax/sql/PooledConnection.java \\\n+javax/sql/RowSetEvent.java \\\n+javax/sql/RowSetInternal.java \\\n+javax/sql/RowSet.java \\\n+javax/sql/RowSetListener.java \\\n+javax/sql/RowSetMetaData.java \\\n+javax/sql/RowSetReader.java \\\n+javax/sql/RowSetWriter.java \\\n+javax/sql/XAConnection.java \\\n+javax/sql/XADataSource.java \\\n javax/transaction/xa/XAException.java \\\n javax/transaction/xa/XAResource.java \\\n javax/transaction/xa/Xid.java \\\n@@ -1366,14 +1380,17 @@ java/sql/Date.java \\\n java/sql/Driver.java \\\n java/sql/DriverManager.java \\\n java/sql/DriverPropertyInfo.java \\\n+java/sql/ParameterMetaData.java \\\n java/sql/PreparedStatement.java\t\\\n java/sql/Ref.java \\\n java/sql/ResultSet.java\t\\\n java/sql/ResultSetMetaData.java\t\\\n+java/sql/Savepoint.java \\\n java/sql/SQLData.java \\\n java/sql/SQLException.java \\\n java/sql/SQLInput.java \\\n java/sql/SQLOutput.java \\\n+java/sql/SQLPermission.java \\\n java/sql/SQLWarning.java \\\n java/sql/Statement.java\t\\\n java/sql/Struct.java\t\\\n@@ -2506,13 +2523,15 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/sql/Connection.P .deps/java/sql/DataTruncation.P \\\n .deps/java/sql/DatabaseMetaData.P .deps/java/sql/Date.P \\\n .deps/java/sql/Driver.P .deps/java/sql/DriverManager.P \\\n-.deps/java/sql/DriverPropertyInfo.P .deps/java/sql/PreparedStatement.P \\\n-.deps/java/sql/Ref.P .deps/java/sql/ResultSet.P \\\n-.deps/java/sql/ResultSetMetaData.P .deps/java/sql/SQLData.P \\\n-.deps/java/sql/SQLException.P .deps/java/sql/SQLInput.P \\\n-.deps/java/sql/SQLOutput.P .deps/java/sql/SQLWarning.P \\\n-.deps/java/sql/Statement.P .deps/java/sql/Struct.P \\\n-.deps/java/sql/Time.P .deps/java/sql/Timestamp.P .deps/java/sql/Types.P \\\n+.deps/java/sql/DriverPropertyInfo.P .deps/java/sql/ParameterMetaData.P \\\n+.deps/java/sql/PreparedStatement.P .deps/java/sql/Ref.P \\\n+.deps/java/sql/ResultSet.P .deps/java/sql/ResultSetMetaData.P \\\n+.deps/java/sql/SQLData.P .deps/java/sql/SQLException.P \\\n+.deps/java/sql/SQLInput.P .deps/java/sql/SQLOutput.P \\\n+.deps/java/sql/SQLPermission.P .deps/java/sql/SQLWarning.P \\\n+.deps/java/sql/Savepoint.P .deps/java/sql/Statement.P \\\n+.deps/java/sql/Struct.P .deps/java/sql/Time.P \\\n+.deps/java/sql/Timestamp.P .deps/java/sql/Types.P \\\n .deps/java/text/Annotation.P \\\n .deps/java/text/AttributedCharacterIterator.P \\\n .deps/java/text/AttributedString.P \\\n@@ -2659,6 +2678,14 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/javax/naming/spi/ObjectFactoryBuilder.P \\\n .deps/javax/naming/spi/ResolveResult.P \\\n .deps/javax/naming/spi/Resolver.P .deps/javax/naming/spi/StateFactory.P \\\n+.deps/javax/sql/ConnectionEvent.P \\\n+.deps/javax/sql/ConnectionEventListener.P \\\n+.deps/javax/sql/ConnectionPoolDataSource.P .deps/javax/sql/DataSource.P \\\n+.deps/javax/sql/PooledConnection.P .deps/javax/sql/RowSet.P \\\n+.deps/javax/sql/RowSetEvent.P .deps/javax/sql/RowSetInternal.P \\\n+.deps/javax/sql/RowSetListener.P .deps/javax/sql/RowSetMetaData.P \\\n+.deps/javax/sql/RowSetReader.P .deps/javax/sql/RowSetWriter.P \\\n+.deps/javax/sql/XAConnection.P .deps/javax/sql/XADataSource.P \\\n .deps/javax/transaction/HeuristicCommitException.P \\\n .deps/javax/transaction/HeuristicMixedException.P \\\n .deps/javax/transaction/HeuristicRollbackException.P \\"}, {"sha": "51c4ee8fa8e6f9b36b81ffa7e3d4c7ff9199c7b0", "filename": "libjava/java/sql/Array.java", "status": "modified", "additions": 143, "deletions": 195, "changes": 338, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FArray.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FArray.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FArray.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Array.java -- Interface for accessing SQL array object\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,203 +35,151 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.util.Map;\n \n /**\n-  * This interface provides methods for accessing SQL array types\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Array\n+ * This interface provides methods for accessing SQL array types.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Array \n {\n-\n-/**\n-  * This method returns the name of the SQL type of the elements in this\n-  * array.  This name is database specific.\n-  *\n-  * @param The name of the SQL type of the elements in this array.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getBaseTypeName() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the JDBC type identifier of the elements in this\n-  * array.  This will be one of the values defined in the <code>Types</code>\n-  * class.\n-  *\n-  * @return The JDBC type of the elements in this array.\n-  *\n-  * @exception SQLException If an error occurs.\n-  * \n-  * @see Types\n-  */\n-public abstract int\n-getBaseType() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the contents of this array.  This object returned\n-  * will be an array of Java objects of the appropriate types.\n-  *\n-  * @return The contents of the array as an array of Java objects.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getArray() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the contents of this array.  The specified\n-  * <code>Map</code> will be used to override selected mappings between\n-  * SQL types and Java classes.\n-  * \n-  * @param map A mapping of SQL types to Java classes.\n-  *\n-  * @return The contents of the array as an array of Java objects.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getArray(Map map) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a portion of this array starting at index\n-  * <code>offset</code> into the array and continuing for <code>length</code>\n-  * elements.  Fewer than the requested number of elements will be\n-  * returned if the array does not contain the requested number of elements.\n-  * The object returned will be an array of Java objects of\n-  * the appropriate types.\n-  *\n-  * @param offset The offset into this array to start returning elements from.\n-  * @param count The requested number of elements to return.\n-  *\n-  * @return The requested portion of the array.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getArray(long offset, int count) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a portion of this array starting at index\n-  * <code>offset</code> into the array and continuing for <code>length</code>\n-  * elements.  Fewer than the requested number of elements will be\n-  * returned if the array does not contain the requested number of elements.\n-  * The object returned will be an array of Java objects.  The specified\n-  * <code>Map</code> will be used for overriding selected SQL type to\n-  * Java class mappings.\n-  *\n-  * @param offset The offset into this array to start returning elements from.\n-  * @param count The requested number of elements to return.\n-  * @param map A mapping of SQL types to Java classes.\n-  *\n-  * @return The requested portion of the array.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getArray(long index, int count, Map map) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the elements in the array as a <code>ResultSet</code>.\n-  * Each row of the result set will have two columns.  The first will be\n-  * the index into the array of that row's contents.  The second will be\n-  * the actual value of that array element.\n-  *\n-  * @return The elements of this array as a <code>ResultSet</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract ResultSet\n-getResultSet() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the elements in the array as a <code>ResultSet</code>.\n-  * Each row of the result set will have two columns.  The first will be\n-  * the index into the array of that row's contents.  The second will be\n-  * the actual value of that array element.  The specified <code>Map</code>\n-  * will be used to override selected default mappings of SQL types to\n-  * Java classes.\n-  *\n-  * @param map A mapping of SQL types to Java classes.\n-  *\n-  * @return The elements of this array as a <code>ResultSet</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract ResultSet\n-getResultSet(Map map) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a portion of the array as a <code>ResultSet</code>.\n-  * The returned portion will start at index <code>offset</code> into the\n-  * array and up to <code>length</code> elements will be returned.\n-  * <p>\n-  * Each row of the result set will have two columns.  The first will be\n-  * the index into the array of that row's contents.  The second will be\n-  * the actual value of that array element.\n-  *\n-  * @param offset The index into the array to start returning elements from.\n-  * @param length The requested number of elements to return.\n-  *\n-  * @return The requested elements of this array as a <code>ResultSet</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract ResultSet\n-getResultSet(long index, int count) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a portion of the array as a <code>ResultSet</code>.\n-  * The returned portion will start at index <code>offset</code> into the\n-  * array and up to <code>length</code> elements will be returned.\n-  * <p>\n-  * Each row of the result set will have two columns.  The first will be\n-  * the index into the array of that row's contents.  The second will be\n-  * the actual value of that array element.  The specified <code>Map</code>\n-  * will be used to override selected default mappings of SQL types to\n-  * Java classes.\n-  *\n-  * @param offset The index into the array to start returning elements from.\n-  * @param length The requested number of elements to return.\n-  * @param map A mapping of SQL types to Java classes.\n-  *\n-  * @return The requested elements of this array as a <code>ResultSet</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract ResultSet\n-getResultSet(long index, int count, Map map) throws SQLException;\n-\n-} // interface Array\n-\n+  /**\n+   * Returns the name of the SQL type of the elements in this\n+   * array.  This name is database specific.\n+   *\n+   * @param The name of the SQL type of the elements in this array.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getBaseTypeName() throws SQLException;\n+\n+  /**\n+   * Returns the JDBC type identifier of the elements in this\n+   * array.  This will be one of the values defined in the \n+   * <code>Types</code> class.\n+   *\n+   * @return The JDBC type of the elements in this array.\n+   * @exception SQLException If an error occurs.\n+   * @see Types\n+   */\n+  public int getBaseType() throws SQLException;\n+\n+  /**\n+   * Returns the contents of this array.  This object returned\n+   * will be an array of Java objects of the appropriate types.\n+   *\n+   * @return The contents of the array as an array of Java objects.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object getArray() throws SQLException;\n+\n+  /**\n+   * Returns the contents of this array.  The specified\n+   * <code>Map</code> will be used to override selected mappings \n+   * between SQL types and Java classes.\n+   * \n+   * @param map A mapping of SQL types to Java classes.\n+   * @return The contents of the array as an array of Java objects.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object getArray(Map map) throws SQLException;\n+\n+  /**\n+   * Returns a portion of this array starting at <code>index</code>\n+   * into the array and continuing for <code>count</code>\n+   * elements.  Fewer than the requested number of elements will be\n+   * returned if the array does not contain the requested number of elements.\n+   * The object returned will be an array of Java objects of\n+   * the appropriate types.\n+   *\n+   * @param offset The offset into this array to start returning elements from.\n+   * @param count The requested number of elements to return.\n+   * @return The requested portion of the array.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object getArray(long index, int count) throws SQLException;\n+\n+  /**\n+   * This method returns a portion of this array starting at <code>index</code>\n+   * into the array and continuing for <code>count</code>\n+   * elements.  Fewer than the requested number of elements will be\n+   * returned if the array does not contain the requested number of elements.\n+   * The object returned will be an array of Java objects.  The specified\n+   * <code>Map</code> will be used for overriding selected SQL type to\n+   * Java class mappings.\n+   *\n+   * @param offset The offset into this array to start returning elements from.\n+   * @param count The requested number of elements to return.\n+   * @param map A mapping of SQL types to Java classes.\n+   * @return The requested portion of the array.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object getArray(long index, int count, Map map) throws SQLException;\n+\n+  /**\n+   * Returns the elements in the array as a <code>ResultSet</code>.\n+   * Each row of the result set will have two columns.  The first will be\n+   * the index into the array of that row's contents.  The second will be\n+   * the actual value of that array element.\n+   *\n+   * @return The elements of this array as a <code>ResultSet</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */\n+  public ResultSet getResultSet() throws SQLException;\n+\n+  /**\n+   * This method returns the elements in the array as a <code>ResultSet</code>.\n+   * Each row of the result set will have two columns.  The first will be\n+   * the index into the array of that row's contents.  The second will be\n+   * the actual value of that array element.  The specified <code>Map</code>\n+   * will be used to override selected default mappings of SQL types to\n+   * Java classes.\n+   *\n+   * @param map A mapping of SQL types to Java classes.\n+   * @return The elements of this array as a <code>ResultSet</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */\n+  public ResultSet getResultSet(Map map) throws SQLException;\n+\n+  /**\n+   * This method returns a portion of the array as a <code>ResultSet</code>.\n+   * The returned portion will start at <code>index</code> into the\n+   * array and up to <code>count</code> elements will be returned.\n+   * <p>\n+   * Each row of the result set will have two columns.  The first will be\n+   * the index into the array of that row's contents.  The second will be\n+   * the actual value of that array element.\n+   *\n+   * @param offset The index into the array to start returning elements from.\n+   * @param length The requested number of elements to return.\n+   * @return The requested elements of this array as a <code>ResultSet</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */\n+  public ResultSet getResultSet(long index, int count) throws SQLException;\n+  \n+  /**\n+   * This method returns a portion of the array as a <code>ResultSet</code>.\n+   * The returned portion will start at <code>index</code> into the\n+   * array and up to <cod>count</code> elements will be returned.\n+   * <p>\n+   * Each row of the result set will have two columns.  The first will be\n+   * the index into the array of that row's contents.  The second will be\n+   * the actual value of that array element.  The specified <code>Map</code>\n+   * will be used to override selected default mappings of SQL types to\n+   * Java classes.\n+   *\n+   * @param offset The index into the array to start returning elements from.\n+   * @param length The requested number of elements to return.\n+   * @param map A mapping of SQL types to Java classes.\n+   * @return The requested elements of this array as a <code>ResultSet</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */  \n+  public ResultSet getResultSet(long index, int count, Map map)\n+    throws SQLException;\n+}"}, {"sha": "515f1d4662f692455b266e29cb2d41975116a1c1", "filename": "libjava/java/sql/BatchUpdateException.java", "status": "modified", "additions": 99, "deletions": 138, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FBatchUpdateException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FBatchUpdateException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FBatchUpdateException.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* BatchUpdateException.java -- Exception for batch oriented SQL errors\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,146 +35,107 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n /**\n-  * This class extends <code>SQLException</code> to count the successful\n-  * updates in each statement in a batch that was successfully updated prior \n-  * to the error.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class BatchUpdateException extends SQLException \n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * This is the array of update counts for the commands which completed\n-  * successfully prior to the error.\n-  * @serialized\n-  */\n-private int[] updateCounts;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>BatchUpdateException</code>\n-  * with no descriptive error message.  The SQL state and update count will\n-  * be initialized to <code>null</code> and the vendor specific error code will \n-  * initialized to 0.\n-  */\n-public\n-BatchUpdateException()\n-{\n-  super();\n-} \n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>BatchUpdateException</code>\n-  * with the specified update count information and no descriptive error\n-  * message.  This SQL state will be initialized to <code>null</code> and\n-  * the vendor specific error code will be initialized to 0.\n-  *\n-  * @param updateCounts The update count array.\n-  */\n-public\n-BatchUpdateException(int[] updateCounts)\n-{\n-  super();\n-  \n-  this.updateCounts = updateCounts;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>BatchUpdateException</code>\n-  * with the specified descriptive error message and update count information.\n-  * The SQL state will be initialized to <code>null</code> and the vendor\n-  * specific error code will be initialized to 0.\n-  *\n-  * @param message The descriptive error message.\n-  * @param updateCounts The update count information for this error.\n-  */\n-public\n-BatchUpdateException(String message, int[] updateCounts)\n-{\n-  super(message);\n-\n-  this.updateCounts = updateCounts;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>BatchUpdateException</code>\n-  * with the specified descriptive error message, SQL state, and update count\n-  * information.  The vendor specific error code will be initialized to 0.\n-  *\n-  * @param message The descriptive error message.\n-  * @param SQLState The SQL state information for this error.\n-  * @param updateCounts The update count information for this error.\n-  */\n-public\n-BatchUpdateException(String message, String SQLState, int[] updateCounts)\n-{\n-  super(message, SQLState);\n-\n-  this.updateCounts = updateCounts;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>BatchUpdateException</code>\n-  * with the specified descriptive error message, SQL state, vendor\n-  * specific error code and update count information.\n-  *\n-  * @param message The descriptive error message.\n-  * @param SQLState The SQL state information for this error.\n-  * @param vendorCode The vendor specific error code for this error.\n-  * @param updateCounts The update count information for this error.\n-  */\n-public\n-BatchUpdateException(String message, String SQLState, int vendorCode,\n-                     int[] updateCounts)\n-{\n-  super(message, SQLState, vendorCode);\n-\n-  this.updateCounts = updateCounts;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n+ * This class extends <code>SQLException</code> to count the successful\n+ * updates in each statement in a batch that was successfully updated prior \n+ * to the error.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This method returns the update count information for this error.  If\n-  * not <code>null</code> this is an array of <code>int</code>'s that are\n-  * the update accounts for each command that was successfully executed.\n-  * The array elements are in the order that the commands were executed.\n-  *\n-  * @return The update count information, which may be <code>null</code>.\n-  */\n-public int[]\n-getUpdateCounts()\n+public class BatchUpdateException extends SQLException \n {\n-  return(updateCounts);\n+  static final long serialVersionUID = 5977529877145521757L;\n+\n+  /**\n+   * This is the array of update counts for the commands which completed\n+   * successfully prior to the error.\n+   */\n+  private int[] updateCounts;\n+\n+  /**\n+   * This method initializes a new instance of <code>BatchUpdateException</code>\n+   * with the specified descriptive error message, SQL state, and update count\n+   * information.  The vendor specific error code will be initialized to 0.\n+   *\n+   * @param message The descriptive error message.\n+   * @param SQLState The SQL state information for this error.\n+   * @param vendorCode\n+   * @param updateCounts The update count information for this error.\n+   */\n+  public BatchUpdateException(String message, String SQLState, int vendorCode,\n+    int[] updateCounts)\n+  {\n+    super(message, SQLState, vendorCode);\n+    this.updateCounts = updateCounts;\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>BatchUpdateException</code>\n+   * with the specified descriptive error message, SQL state, and update count\n+   * information.  The vendor specific error code will be initialized to 0.\n+   *\n+   * @param message The descriptive error message.\n+   * @param SQLState The SQL state information for this error.\n+   * @param updateCounts The update count information for this error.\n+   */\n+  public BatchUpdateException(String message, String SQLState,\n+    int[] updateCounts)\n+  {\n+    super(message, SQLState);\n+    this.updateCounts = updateCounts;  \n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>BatchUpdateException</code>\n+   * with the specified descriptive error message and update count information.\n+   * The SQL state will be initialized to <code>null</code> and the vendor\n+   * specific error code will be initialized to 0.\n+   *\n+   * @param message The descriptive error message.\n+   * @param updateCounts The update count information for this error.\n+   */\n+  public BatchUpdateException(String message, int[] updateCounts)\n+  {\n+    super(message);\n+    this.updateCounts = updateCounts;\n+  }\n+\n+  /**\n+   * Initializes a new instance of <code>BatchUpdateException</code>\n+   * with the specified update count information and no descriptive error\n+   * message.  This SQL state will be initialized to <code>null</code> and\n+   * the vendor specific error code will be initialized to 0.\n+   *\n+   * @param updateCounts The update count array.\n+   */\n+  public BatchUpdateException(int[] updateCounts)\n+  {\n+    this.updateCounts = updateCounts;\n+  }\n+\n+  /**\n+   * Initializes a new instance of <code>BatchUpdateException</code>\n+   * with no descriptive error message.  The SQL state and update count will\n+   * be initialized to <code>null</code> and the vendor specific error code will \n+   * initialized to 0.\n+   */\n+  public BatchUpdateException()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method returns the update count information for this error.  If\n+   * not <code>null</code> this is an array of <code>int</code>'s that are\n+   * the update accounts for each command that was successfully executed.\n+   * The array elements are in the order that the commands were executed.\n+   *\n+   * @return The update count information, which may be <code>null</code>.\n+   */\n+  public int[] getUpdateCounts()\n+  {\n+    return updateCounts;\n+  }\n }\n-\n-} // class BatchUpdateException\n-"}, {"sha": "495fec10d04425edd7b8cfd7a9524944791639ee", "filename": "libjava/java/sql/Blob.java", "status": "modified", "additions": 89, "deletions": 89, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FBlob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FBlob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FBlob.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Blob.java -- Access a SQL Binary Large OBject.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,97 +35,97 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.io.InputStream;\n+import java.io.OutputStream;\n \n /**\n-  * This interface specified methods for accessing a SQL BLOB (Binary\n-  * Large OBject) type.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Blob\n+ * This interface specified methods for accessing a SQL BLOB (Binary\n+ * Large OBject) type.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.2\n+ */\n+public interface Blob \n {\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the number of bytes in the BLOB.\n-  *\n-  * @return The number of bytes in the BLOB.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-length() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns up to the requested bytes of this BLOB as a \n-  * <code>byte</code> array.\n-  *\n-  * @param offset The index into the BLOB to start returning bytes from.\n-  * @param length The requested number of bytes to return.\n-  *\n-  * @return The requested bytes from the BLOB.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract byte[]\n-getBytes(long offset, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a stream that will read the bytes of the BLOB.\n-  *\n-  * @return A stream that will read the bytes of the BLOB.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract InputStream\n-getBinaryStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the index into the BLOB at which the first instance\n-  * of the specified bytes occur.  The searching starts at the specified\n-  * index into the BLOB.\n-  *\n-  * @param pattern The byte pattern to search for.\n-  * @param offset The index into the BLOB to starting searching for the pattern.\n-  *\n-  * @return The offset at which the pattern is first found, or -1 if the\n-  * pattern is not found.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-position(byte[] pattern, long offset) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the index into the BLOB at which the first instance\n-  * of the specified pattern occurs.  The searching starts at the specified\n-  * index into this BLOB.  The bytes in the specified <code>Blob</code> are\n-  * used as the search pattern.\n-  *\n-  * @param pattern The <code>Blob</code> containing the byte pattern to\n-  * search for.\n-  * @param offset The index into the BLOB to starting searching for the pattern.\n-  *\n-  * @return The offset at which the pattern is first found, or -1 if the\n-  * pattern is not found.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-position(Blob pattern, long offset) throws SQLException;\n-\n-} // interface Blob\n-\n+  /**\n+   * This method returns the number of bytes in the BLOB.\n+   *\n+   * @return The number of bytes in the BLOB.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public long length() throws SQLException;\n+\n+  /**\n+   * This method returns up to the requested bytes of this BLOB as a \n+   * <code>byte</code> array.\n+   *\n+   * @param pos The index into the BLOB to start returning bytes from.\n+   * @param length The requested number of bytes to return.\n+   * @return The requested bytes from the BLOB.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public byte[] getBytes(long pos, int length) throws SQLException;\n+\n+  /**\n+   * This method returns a stream that will read the bytes of the BLOB.\n+   *\n+   * @return A stream that will read the bytes of the BLOB.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public InputStream getBinaryStream() throws SQLException;\n+\n+  /**\n+   * This method returns the index into the BLOB at which the first instance\n+   * of the specified bytes occur.  The searching starts at the specified\n+   * index into the BLOB.\n+   *\n+   * @param pattern The byte pattern to search for.\n+   * @param offset The index into the BLOB to starting searching for the pattern.\n+   * @return The offset at which the pattern is first found, or -1 if the\n+   *         pattern is not found.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public long position(byte[] pattern, long start) throws SQLException;\n+\n+  /**\n+   * This method returns the index into the BLOB at which the first instance\n+   * of the specified pattern occurs.  The searching starts at the specified\n+   * index into this BLOB.  The bytes in the specified <code>Blob</code> are\n+   * used as the search pattern.\n+   *\n+   * @param pattern The <code>Blob</code> containing the byte pattern to\n+   *        search for.\n+   * @param offset The index into the BLOB to starting searching for the pattern.\n+   * @return The offset at which the pattern is first found, or -1 if the\n+   *         pattern is not found.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public long position(Blob pattern, long start) throws SQLException;\n+\n+  /**\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public int setBytes(long pos, byte[] bytes) throws SQLException;\n+\n+  /**\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public int setBytes(long pos, byte[] bytes, int offset, int len)\n+    throws SQLException;\n+\n+  /**\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public OutputStream setBinaryStream(long pos) throws SQLException;\n+\n+  /**\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public void truncate(long len) throws SQLException;\n+}"}, {"sha": "e706ba401f36b955f679814263d974724cff9543", "filename": "libjava/java/sql/CallableStatement.java", "status": "modified", "additions": 605, "deletions": 419, "changes": 1024, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FCallableStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FCallableStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FCallableStatement.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* CallableStatement.java -- A statement for calling stored procedures.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,431 +35,617 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.net.URL;\n import java.util.Calendar;\n import java.util.Map;\n \n /**\n-  * This interface provides a mechanism for calling stored procedures.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface CallableStatement extends PreparedStatement\n+ * This interface provides a mechanism for calling stored procedures.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface CallableStatement extends PreparedStatement \n {\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether the value of the last parameter that was fetched\n-  * was actually a SQL NULL value.\n-  *\n-  * @return <code>true</code> if the last parameter fetched was a NULL,\n-  * <code>false</code> otherwise.\n-  * \n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-wasNull() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>String</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>String</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getString(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Object</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as an <code>Object</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getObject(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Object</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  * @param map The mapping to use for conversion from SQL to Java types.\n-  *\n-  * @return The parameter value as an <code>Object</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-getObject(int index, Map map) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>boolean</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>boolean</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-getBoolean(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>byte</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>byte</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract byte\n-getByte(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>short</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>short</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract short\n-getShort(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>int</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>int</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getInt(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>long</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>long</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-getLong(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>float</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>float</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract float\n-getFloat(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>double</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>double</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract double\n-getDouble(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>BigDecimal</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>BigDecimal</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract BigDecimal\n-getBigDecimal(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>BigDecimal</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  * @param scale The number of digits to the right of the decimal to return.\n-  *\n-  * @return The parameter value as a <code>BigDecimal</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract BigDecimal\n-getBigDecimal(int index, int scale) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * byte array.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a byte array\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract byte[]\n-getBytes(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Date</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>java.sql.Date</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Date\n-getDate(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Date</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @return The parameter value as a <code>java.sql.Date</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Date\n-getDate(int index, Calendar calendar) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Time</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>java.sql.Time</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Time\n-getTime(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Time</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @return The parameter value as a <code>java.sql.Time</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Time\n-getTime(int index, Calendar calendar) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Timestamp</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>java.sql.Timestamp</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Timestamp\n-getTimestamp(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>java.sql.Timestamp</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @return The parameter value as a <code>java.sql.Timestamp</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Timestamp\n-getTimestamp(int index, Calendar calendar) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Ref</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>Ref</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Ref\n-getRef(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Blob</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>Blob</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Blob\n-getBlob(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Clob</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>Clob</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Clob\n-getClob(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the value of the specified parameter as a Java\n-  * <code>Array</code>.\n-  *\n-  * @param index The index of the parameter to return.\n-  *\n-  * @return The parameter value as a <code>Array</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Array\n-getArray(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method registers the specified parameter as an output parameter\n-  * of the specified SQL type.\n-  *\n-  * @param index The index of the parameter to register as output.\n-  * @param type The SQL type value from <code>Types</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-registerOutParameter(int index, int type) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method registers the specified parameter as an output parameter\n-  * of the specified SQL type.\n-  *\n-  * @param index The index of the parameter to register as output.\n-  * @param type The SQL type value from <code>Types</code>.\n-  * @param name The user defined data type name.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-registerOutParameter(int index, int type, String name) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method registers the specified parameter as an output parameter\n-  * of the specified SQL type and scale.\n-  *\n-  * @param index The index of the parameter to register as output.\n-  * @param type The SQL type value from <code>Types</code>.\n-  * @param scale The scale of the value that will be returned.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-registerOutParameter(int index, int type, int scale) throws SQLException;\n-\n-} // interface CallableStatement\n-\n-\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type.\n+   *\n+   * @param index The index of the parameter to register as output.\n+   * @param type The SQL type value from <code>Types</code>.\n+   * @exception SQLException If an error occurs.\n+   */   \n+  public void registerOutParameter(int parameterIndex, int sqlType)\n+    throws SQLException;\n+\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type and scale.\n+   *\n+   * @param index The index of the parameter to register as output.\n+   * @param type The SQL type value from <code>Types</code>.\n+   * @param scale The scale of the value that will be returned.\n+   * @exception SQLException If an error occurs.\n+   */   \n+  public void registerOutParameter(int parameterIndex, int sqlType, int scale)\n+    throws SQLException;\n+\n+  /**\n+   * This method tests whether the value of the last parameter that was fetched\n+   * was actually a SQL NULL value.\n+   *\n+   * @return <code>true</code> if the last parameter fetched was a NULL,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean wasNull() throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>String</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>String</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getString(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>boolean</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>boolean</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean getBoolean(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>byte</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>byte</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public byte getByte(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>short</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>short</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public short getShort(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>int</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>int</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getInt(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>long</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>long</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public long getLong(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>float</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>float</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public float getFloat(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>double</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>double</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public double getDouble(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>BigDecimal</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @param scale The number of digits to the right of the decimal to return.\n+   * @return The parameter value as a <code>BigDecimal</code>.\n+   * @exception SQLException If an error occurs.\n+   * @deprecated Use getBigDecimal(int parameterIndex)\n+   *             or getBigDecimal(String parameterName) instead.\n+   */\n+  public BigDecimal getBigDecimal(int parameterIndex, int scale)\n+    throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * byte array.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @return The parameter value as a byte array\n+   * @exception SQLException If an error occurs.\n+   */\n+  public byte[] getBytes(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Date</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>java.sql.Date</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Date getDate(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Time</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>java.sql.Time</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Time getTime(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Timestamp</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>java.sql.Timestamp</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Timestamp getTimestamp(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Object</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @return The parameter value as an <code>Object</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Object getObject(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>BigDecimal</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @return The parameter value as a <code>BigDecimal</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public BigDecimal getBigDecimal(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Object</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @param map The mapping to use for conversion from SQL to Java types.\n+   * @return The parameter value as an <code>Object</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Object getObject(int index, Map map) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Ref</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>Ref</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Ref getRef(int index) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Blob</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>Blob</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */   \n+  public Blob getBlob(int index) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Clob</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>Clob</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Clob getClob(int index) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>Array</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @return The parameter value as a <code>Array</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Array getArray(int index) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Date</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @param cal The <code>Calendar</code> to use for timezone and locale.\n+   * @return The parameter value as a <code>java.sql.Date</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Date getDate(int parameterIndex, Calendar cal) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Time</code>.\n+   *\n+   * @param parameterIndex The index of the parameter to return.\n+   * @param cal The <code>Calendar</code> to use for timezone and locale.\n+   * @return The parameter value as a <code>java.sql.Time</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Time getTime(int parameterIndex, Calendar cal) throws SQLException;\n+\n+  /**\n+   * This method returns the value of the specified parameter as a Java\n+   * <code>java.sql.Timestamp</code>.\n+   *\n+   * @param index The index of the parameter to return.\n+   * @return The parameter value as a <code>java.sql.Timestamp</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Timestamp getTimestamp(int parameterIndex, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type.\n+   *\n+   * @param index The index of the parameter to register as output.\n+   * @param type The SQL type value from <code>Types</code>.\n+   * @param name The user defined data type name.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public void registerOutParameter(int paramIndex, int sqlType,\n+\t\t\t\t   String typeName)\n+    throws SQLException;\n+\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type.\n+   *\n+   * @param parameterName The name of the parameter to register as output.\n+   * @param sqlType The SQL type value from <code>Types</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public void registerOutParameter(String parameterName, int sqlType)\n+    throws SQLException;\n+\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type.  This version of registerOutParameter is used \n+   * for NUMERIC or DECIMAL types.\n+   *\n+   * @param parameterName The name of the parameter to register as output.\n+   * @param sqlType The SQL type value from <code>Types</code>.\n+   * @param scale Number of digits to the right of the decimal point.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public void registerOutParameter(String parameterName, int sqlType,\n+\t\t\t\t   int scale)\n+    throws SQLException;\n+\n+\n+  /**\n+   * This method registers the specified parameter as an output parameter\n+   * of the specified SQL type.  This version of registerOutParameter is used \n+   * for user-named or REF types. If the type of the output parameter does\n+   * not have such a type, the typeName argument is ignored.\n+   *\n+   * @param parameterName The name of the parameter to register as output.\n+   * @param sqlType The SQL type value from <code>Types</code>.\n+   * @param typeName The SQL structured type name.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.4\n+   */\n+  public void registerOutParameter(String parameterName, int sqlType,\n+\t\t\t\t   String typeName) \n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public URL getURL(int parameterIndex) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setURL(String parameterName, URL val) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setNull(String parameterName, int sqlType) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBoolean(String parameterName, boolean x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setByte(String parameterName, byte x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setShort(String parameterName, short x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setInt(String parameterName, int x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLong(String parameterName, long x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setFloat(String parameterName, float x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDouble(String parameterName, double x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBigDecimal(String parameterName, BigDecimal x)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setString(String parameterName, String x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBytes(String parameterName, byte[] x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDate(String parameterName, Date x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTime(String parameterName, Time x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTimestamp(String parameterName, Timestamp x)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setAsciiStream(String parameterName, InputStream x, int length)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBinaryStream(String parameterName, InputStream x, int length)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(String parameterName, Object x, int targetSqlType,\n+\t\t\tint scale)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(String parameterName, Object x, int targetSqlType)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(String parameterName, Object x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCharacterStream(String parameterName, Reader reader,\n+\t\t\t\t int length)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDate(String parameterName, Date x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTime(String parameterName, Time x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTimestamp(String parameterName, Timestamp x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setNull(String parameterName, int sqlType, String typeName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getString(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean getBoolean(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public byte getByte(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public short getShort(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getInt(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public long getLong(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public float getFloat(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public double getDouble(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public byte[] getBytes(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Date getDate(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Time getTime(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Timestamp getTimestamp(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Object getObject(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public BigDecimal getBigDecimal(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Object getObject(String parameterName, Map map) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Ref getRef(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Blob getBlob(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Clob getClob(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Array getArray(String parameterName) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Date getDate(String parameterName, Calendar cal) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Time getTime(String parameterName, Calendar cal) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Timestamp getTimestamp(String parameterName, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public URL getURL(String parameterName) throws SQLException;\n+}"}, {"sha": "a256512550bb4cbc8f2d1dad6818d07f10113ef8", "filename": "libjava/java/sql/Clob.java", "status": "modified", "additions": 104, "deletions": 99, "changes": 203, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FClob.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FClob.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FClob.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Clob.java -- Access Character Large OBjects\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,113 +35,118 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.io.InputStream;\n+import java.io.OutputStream;\n import java.io.Reader;\n+import java.io.Writer;\n \n /**\n-  * This interface contains methods for accessing a SQL CLOB (Character\n-  * Large OBject) type.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Clob\n+ * This interface contains methods for accessing a SQL CLOB (Character\n+ * Large OBject) type.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Clob \n {\n-\n-/**\n+ /**\n   * This method returns the number of characters in the CLOB.\n   *\n   * @return The number of characters in the CLOB.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-length() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the specified portion of the CLOB as a \n-  * <code>String</code>. \n-  *\n-  * @param offset The index into the CLOB (index values start at 1) to \n-  * start returning characters from.\n-  * @param length The requested number of characters to return.\n-  *\n-  * @return The requested CLOB section, as a <code>String</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getSubString(long offset, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a byte stream that reads the contents of the\n-  * CLOB as a series of ASCII bytes.\n-  *\n-  * @return A stream to read the CLOB's contents.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract InputStream\n-getAsciiStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a character stream that reads the contents of the\n-  * CLOB.\n-  *\n-  * @return A character stream to read the CLOB's contents.\n-  *\n   * @exception SQLException If an error occurs.\n+  * @since 1.2\n   */\n-public abstract Reader\n-getCharacterStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the index into the CLOB of the first occurrence of\n-  * the specified character pattern (supplied by the caller as a\n-  * <code>String</code>).  The search begins at the specified index.\n-  *\n-  * @param pattern The character pattern to search for, passed as a\n-  * <code>String</code>.\n-  * @param offset.  The index into the CLOB to start search (indexes start\n-  * at 1).\n-  *\n-  * @return The index at which the pattern was found (indexes start at 1),\n-  * or -1 if the pattern was not found.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-position(String pattern, long offset) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the index into the CLOB of the first occurrence of\n-  * the specified character pattern (supplied by the caller as a\n-  * <code>Clob</code>).  The search begins at the specified index.\n-  *\n-  * @param pattern The character pattern to search for, passed as a\n-  * <code>Clob</code>.\n-  * @param offset.  The index into the CLOB to start search (indexes start\n-  * at 1).\n-  *\n-  * @return The index at which the pattern was found (indexes start at 1),\n-  * or -1 if the pattern was not found.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-position(Clob pattern, long offset) throws SQLException;\n-\n-} // interface Clob\n-\n+  public long length() throws SQLException;\n+\n+  /**\n+   * This method returns the specified portion of the CLOB as a \n+   * <code>String</code>. \n+   *\n+   * @param offset The index into the CLOB (index values start at 1) to \n+   *        start returning characters from.\n+   * @param length The requested number of characters to return.\n+   * @return The requested CLOB section, as a <code>String</code>.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public String getSubString(long pos, int length) throws SQLException;\n+\n+  /**\n+   * This method returns a character stream that reads the contents of the\n+   * CLOB.\n+   *\n+   * @return A character stream to read the CLOB's contents.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public Reader getCharacterStream() throws SQLException;\n+\n+  /**\n+   * This method returns a byte stream that reads the contents of the\n+   * CLOB as a series of ASCII bytes.\n+   *\n+   * @return A stream to read the CLOB's contents.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public InputStream getAsciiStream() throws SQLException;\n+\n+  /**\n+   * This method returns the index into the CLOB of the first occurrence of\n+   * the specified character pattern (supplied by the caller as a\n+   * <code>String</code>).  The search begins at the specified index.\n+   *\n+   * @param searchstr The character pattern to search for, passed as a\n+   *        <code>String</code>.\n+   * @param start.  The index into the CLOB to start search (indexes start\n+   *        at 1).\n+   * @return The index at which the pattern was found (indexes start at 1),\n+   *         or -1 if the pattern was not found.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public long position(String searchstr, long start) throws SQLException;\n+\n+  /**\n+   * This method returns the index into the CLOB of the first occurrence of\n+   * the specified character pattern (supplied by the caller as a\n+   * <code>Clob</code>).  The search begins at the specified index.\n+   *\n+   * @param searchstr The character pattern to search for, passed as a\n+   *        <code>Clob</code>.\n+   * @param start.  The index into the CLOB to start search (indexes start\n+   *        at 1).\n+   * @return The index at which the pattern was found (indexes start at 1),\n+   *         or -1 if the pattern was not found.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public long position(Clob searchstr, long start) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int setString(long pos, String str) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int setString(long pos, String str, int offset, int len)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public OutputStream setAsciiStream(long pos) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Writer setCharacterStream(long pos) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void truncate(long len) throws SQLException;\n+}"}, {"sha": "3f4d7deea195954276bfe58b1b4de3a4bc2a854d", "filename": "libjava/java/sql/Connection.java", "status": "modified", "additions": 372, "deletions": 414, "changes": 786, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FConnection.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Connection.java -- Manage a database connection.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,422 +41,380 @@\n import java.util.Map;\n \n /**\n-  * This interface provides methods for managing a connection to a database.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Connection\n+ * This interface provides methods for managing a connection to a database.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Connection \n {\n-\n-/**\n-  * This transaction isolation level indicates that transactions are not\n-  * supported.\n-  */\n-public static final int TRANSACTION_NONE = 0;\n-\n-/**\n-  * This transaction isolation level indicates that one transaction can\n-  * read modifications by other transactions before the other transactions\n-  * have committed their changes.  This could result in invalid reads.\n-  */\n-public static final int TRANSACTION_READ_UNCOMMITTED = 1;\n-\n-/**\n-  * This transaction isolation leve indicates that only committed data from\n-  * other transactions will be read.  If a transaction reads a row, then\n-  * another transaction commits a change to that row, the first transaction\n-  * would retrieve the changed row on subsequent reads of the same row.\n-  */\n-public static final int TRANSACTION_READ_COMMITTED = 2;\n-\n-/**\n-  * This transaction isolation level indicates that only committed data from\n-  * other transactions will be read.  It also ensures that data read from\n-  * a row will not be different on a subsequent read even if another\n-  * transaction commits a change.\n-  */\n-public static final int TRANSACTION_REPEATABLE_READ = 4;\n-\n-/**\n-  * This transaction isolation level indicates that only committed data from\n-  * other transactions will be read.  It also ensures that data read from\n-  * a row will not be different on a subsequent read even if another\n-  * transaction commits a change.  Additionally, rows modified by other\n-  * transactions will not affect the result set returned during subsequent\n-  * executions of the same WHERE clause in this transaction.\n-  */\n-public static final int TRANSACTION_SERIALIZABLE = 8;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new SQL statement.  The default result set type\n-  * and concurrency will be used.\n-  *\n-  * @return A new <code>Statement</code> object. \n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see Statement\n-  */\n-public abstract Statement\n-createStatement() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new SQL statement with the specified type and\n-  * concurrency.  Valid values for these parameters are specified in the\n-  * <code>ResultSet</code> class.\n-  *\n-  * @param resultSetType The type of result set to use for this statement.\n-  * @param resultSetConcurrency.  The type of concurrency to be used in\n-  * the result set for this statement.\n-  *\n-  * @return A new <code>Statement</code> object.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see Statement\n-  * @see ResultSet\n-  */\n-public abstract Statement\n-createStatement(int resultSetType, int resultSetConcurrency) \n-                throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new <code>PreparedStatement</code> for the specified\n-  * SQL string.  This method is designed for use with parameterized\n-  * statements.  The default result set type and concurrency will be used.\n-  *\n-  * @param The SQL statement to use in creating this \n-  * <code>PreparedStatement</code>.\n-  *\n-  * @return A new <code>PreparedStatement</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see PreparedStatement\n-  */\n-public abstract PreparedStatement\n-prepareStatement(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new <code>PreparedStatement</code> for the specified\n-  * SQL string.  This method is designed for use with parameterized\n-  * statements.  The specified result set type and concurrency will be used.\n-  * Valid values for these parameters are specified in the\n-  * <code>ResultSet</code> class.\n-  *\n-  * @param The SQL statement to use in creating this \n-  * <code>PreparedStatement</code>.\n-  * @param resultSetType The type of result set to use for this statement.\n-  * @param resultSetConcurrency.  The type of concurrency to be used in\n-  * the result set for this statement.\n-  *\n-  * @return A new <code>PreparedStatement</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see PreparedStatement\n-  * @see ResultSet\n-  */\n-public abstract PreparedStatement\n-prepareStatement(String sql, int resultSetType, int resultSetConcurrency) \n-                 throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new <code>CallableStatement</code> for the \n-  * specified SQL string.  Thie method is designed to be used with\n-  * stored procedures.  The default result set type and concurrency\n-  * will be used.\n-  *\n-  * @param The SQL statement to use in creating this \n-  * <code>CallableStatement</code>.\n-  *\n-  * @return A new <code>CallableStatement</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see CallableStatement\n-  */\n-public abstract CallableStatement\n-prepareCall(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method creates a new <code>CallableStatement</code> for the \n-  * specified SQL string.  Thie method is designed to be used with\n-  * stored procedures.  The specified result set type and concurrency\n-  * will be used.  Valid values for these parameters are specified in the\n-  * <code>ResultSet</code> class.\n-  *\n-  * @param The SQL statement to use in creating this \n-  * <code>PreparedStatement</code>.\n-  * @param resultSetType The type of result set to use for this statement.\n-  * @param resultSetConcurrency.  The type of concurrency to be used in\n-  * the result set for this statement.\n-  *\n-  * @return A new <code>CallableStatement</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see CallableStatement\n-  * @see ResultSet\n-  */\n-public abstract CallableStatement\n-prepareCall(String sql, int resultSetType, int resultSetConcurrency) \n-            throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method converts the specified generic SQL statement into the\n-  * native grammer of the database this object is connected to.\n-  *\n-  * @param The JDBC generic SQL statement.\n-  *\n-  * @return The native SQL statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-nativeSQL(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not auto commit mode is currently enabled.\n-  * In auto commit mode,  every SQL statement is committed its own transaction.\n-  * Otherwise a transaction must be explicitly committed or rolled back.\n-  *\n-  * @return <code>true</code> if auto commit mode is enabled, \n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see commit\n-  * @see rollback\n-  */\n-public abstract boolean\n-getAutoCommit() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method turns auto commit mode on or off.  In auto commit mode,\n-  * every SQL statement is committed its own transaction.  Otherwise a\n-  * transaction must be explicitly committed or rolled back.\n-  *\n-  * @param autoCommit <code>true</code> to enable auto commit mode,\n-  * <code>false</code> to disable it.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see commit\n-  * @see rollback\n-  */\n-public abstract void\n-setAutoCommit(boolean autoCommit) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n+  /**\n+   * This transaction isolation level indicates that transactions are not\n+   * supported.\n+   */\n+  public static final int TRANSACTION_NONE = 0;\n+\n+  /**\n+   * This transaction isolation level indicates that one transaction can\n+   * read modifications by other transactions before the other transactions\n+   * have committed their changes.  This could result in invalid reads.\n+   */\n+  public static final int TRANSACTION_READ_UNCOMMITTED = 1;\n+\n+  /**\n+   * This transaction isolation leve indicates that only committed data from\n+   * other transactions will be read.  If a transaction reads a row, then\n+   * another transaction commits a change to that row, the first transaction\n+   * would retrieve the changed row on subsequent reads of the same row.\n+   */\n+  public static final int TRANSACTION_READ_COMMITTED = 2;\n+\n+  /**\n+   * This transaction isolation level indicates that only committed data from\n+   * other transactions will be read.  It also ensures that data read from\n+   * a row will not be different on a subsequent read even if another\n+   * transaction commits a change.\n+   */\n+  public static final int TRANSACTION_REPEATABLE_READ = 4;\n+\n+  /**\n+   * This transaction isolation level indicates that only committed data from\n+   * other transactions will be read.  It also ensures that data read from\n+   * a row will not be different on a subsequent read even if another\n+   * transaction commits a change.  Additionally, rows modified by other\n+   * transactions will not affect the result set returned during subsequent\n+   * executions of the same WHERE clause in this transaction.\n+   */\n+  public static final int TRANSACTION_SERIALIZABLE = 8;\n+\n+  /**\n+   * This method creates a new SQL statement.  The default result set type\n+   * and concurrency will be used.\n+   *\n+   * @return A new <code>Statement</code> object. \n+   * @exception SQLException If an error occurs.\n+   * @see Statement\n+   */\n+  public Statement createStatement() throws SQLException;\n+\n+  /**\n+   * This method creates a new <code>PreparedStatement</code> for the specified\n+   * SQL string.  This method is designed for use with parameterized\n+   * statements.  The default result set type and concurrency will be used.\n+   *\n+   * @param The SQL statement to use in creating this \n+   *        <code>PreparedStatement</code>.\n+   * @return A new <code>PreparedStatement</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see PreparedStatement\n+   */\n+  public PreparedStatement prepareStatement(String sql) throws SQLException;\n+\n+  /**\n+   * This method creates a new <code>CallableStatement</code> for the \n+   * specified SQL string.  Thie method is designed to be used with\n+   * stored procedures.  The default result set type and concurrency\n+   * will be used.\n+   *\n+   * @param The SQL statement to use in creating this \n+   *        <code>CallableStatement</code>.\n+   * @return A new <code>CallableStatement</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see CallableStatement\n+   */\n+  public CallableStatement prepareCall(String sql) throws SQLException;\n+\n+  /**\n+   * This method converts the specified generic SQL statement into the\n+   * native grammer of the database this object is connected to.\n+   *\n+   * @param The JDBC generic SQL statement.\n+   * @return The native SQL statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String nativeSQL(String sql) throws SQLException;\n+\n+  /**\n+   * This method turns auto commit mode on or off.  In auto commit mode,\n+   * every SQL statement is committed its own transaction.  Otherwise a\n+   * transaction must be explicitly committed or rolled back.\n+   *\n+   * @param autoCommit <code>true</code> to enable auto commit mode,\n+   *        <code>false</code> to disable it.\n+   * @exception SQLException If an error occurs.\n+   * @see commit\n+   * @see rollback\n+   */\n+  public void setAutoCommit(boolean autoCommit) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not auto commit mode is currently enabled.\n+   * In auto commit mode,  every SQL statement is committed its own transaction.\n+   * Otherwise a transaction must be explicitly committed or rolled back.\n+   *\n+   * @return <code>true</code> if auto commit mode is enabled, \n+   * <code>false</code> otherwise.\n+   *\n+   * @exception SQLException If an error occurs.\n+   *\n+   * @see commit\n+   * @see rollback\n+   */\n+  public boolean getAutoCommit() throws SQLException;\n+\n+ /**\n   * This method commits any SQL statements executed on this connection since \n   * the last commit or rollback.\n   *\n   * @exception SQLException If an error occurs.\n   */\n-public abstract void\n-commit() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method rolls back any SQL statements executed on this connection\n-  * since the last commit or rollback.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-rollback() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method immediately closes this database connection.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-close() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not this connection has been closed. \n-  *\n-  * @return <code>true</code> if the connection is closed, <code>false</code>\n-  * otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isClosed() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the meta data for this database connection.\n-  *\n-  * @return The meta data for this database.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see DatabaseMetaData\n-  */\n-public abstract DatabaseMetaData\n-getMetaData() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not this connection is in read only mode.\n-  *\n-  * @return <code>true</code> if the connection is read only <code>false</code>\n-  * otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isReadOnly() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method turns read only mode on or off.  It may not be called while\n-  * a transaction is in progress.\n-  *\n-  * @param readOnly <code>true</code> if this connection is read only,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setReadOnly(boolean readOnly) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the catalog in use by this connection,\n-  * if any.\n-  *\n-  * @return The name of the catalog, or <code>null</code> if one does not\n-  * exist or catalogs are not supported by this database.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getCatalog() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the name of the catalog in use by this connection.\n-  * Note that this method does nothing if catalogs are not supported by\n-  * this database.\n-  *\n-  * @param catalog The name of the catalog to use for this connection.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setCatalog(String catalog) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the current transaction isolation mode.  This will\n-  * be one of the constants defined in this interface.\n-  *\n-  * @return The transaction isolation level.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getTransactionIsolation() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the current transaction isolation mode.  This must\n-  * be one of the constants defined in this interface.\n-  *\n-  * @param level The transaction isolation level.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTransactionIsolation(int level) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the first warning that occurred on this connection,\n-  * if any.  If there were any subsequence warnings, they will be chained\n-  * to the first one.\n-  *\n-  * @return The first <code>SQLWarning</code> that occurred, or \n-  * <code>null</code> if there have been no warnings.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract SQLWarning\n-getWarnings() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method clears all warnings that have occurred on this connection.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-clearWarnings() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the mapping of SQL types to Java classes\n-  * currently in use by this connection.  This mapping will have no\n-  * entries unless they have been manually added.\n-  *\n-  * @return The SQL type to Java class mapping.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Map\n-getTypeMap() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the mapping table for SQL types to Java classes.\n-  * Any entries in this map override the defaults.\n-  *\n-  * @param map The new SQL mapping table.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTypeMap(Map map) throws SQLException;\n-\n-} // interface Connection\n-\n+  public void commit() throws SQLException;\n+\n+  /**\n+   * This method rolls back any SQL statements executed on this connection\n+   * since the last commit or rollback.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void rollback() throws SQLException;\n+\n+  /**\n+   * This method immediately closes this database connection.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void close() throws SQLException;\n+\n+  /**\n+   * This method tests whether or not this connection has been closed. \n+   *\n+   * @return <code>true</code> if the connection is closed, <code>false</code>\n+   *         otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isClosed() throws SQLException;\n+\n+  /**\n+   * This method returns the meta data for this database connection.\n+   *\n+   * @return The meta data for this database.\n+   * @exception SQLException If an error occurs.\n+   * @see DatabaseMetaData\n+   */\n+  public DatabaseMetaData getMetaData() throws SQLException;\n+\n+  /**\n+   * This method turns read only mode on or off.  It may not be called while\n+   * a transaction is in progress.\n+   *\n+   * @param readOnly <code>true</code> if this connection is read only,\n+   *        <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setReadOnly(boolean readOnly) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not this connection is in read only mode.\n+   *\n+   * @return <code>true</code> if the connection is read only <code>false</code>\n+   *         otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isReadOnly() throws SQLException;\n+\n+  /**\n+   * This method sets the name of the catalog in use by this connection.\n+   * Note that this method does nothing if catalogs are not supported by\n+   * this database.\n+   *\n+   * @param catalog The name of the catalog to use for this connection.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setCatalog(String catalog) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the catalog in use by this connection,\n+   * if any.\n+   *\n+   * @return The name of the catalog, or <code>null</code> if one does not\n+   *         exist or catalogs are not supported by this database.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getCatalog() throws SQLException;\n+\n+  /**\n+   * This method sets the current transaction isolation mode.  This must\n+   * be one of the constants defined in this interface.\n+   *\n+   * @param level The transaction isolation level.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTransactionIsolation(int level) throws SQLException;\n+\n+  /**\n+   * This method returns the current transaction isolation mode.  This will\n+   * be one of the constants defined in this interface.\n+   *\n+   * @return The transaction isolation level.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getTransactionIsolation() throws SQLException;\n+\n+  /**\n+   * This method returns the first warning that occurred on this connection,\n+   * if any.  If there were any subsequence warnings, they will be chained\n+   * to the first one.\n+   *\n+   * @return The first <code>SQLWarning</code> that occurred, or \n+   *         <code>null</code> if there have been no warnings.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public SQLWarning getWarnings() throws SQLException;\n+\n+  /**\n+   * This method clears all warnings that have occurred on this connection.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void clearWarnings() throws SQLException;\n+\n+  /**\n+   * This method creates a new SQL statement with the specified type and\n+   * concurrency.  Valid values for these parameters are specified in the\n+   * <code>ResultSet</code> class.\n+   *\n+   * @param resultSetType The type of result set to use for this statement.\n+   * @param resultSetConcurrency.  The type of concurrency to be used in\n+   *        the result set for this statement.\n+   * @return A new <code>Statement</code> object.\n+   * @exception SQLException If an error occurs.\n+   * @see Statement\n+   * @see ResultSet\n+   */\n+  public Statement createStatement(int resultSetType, int resultSetConcurrency)\n+    throws SQLException;\n+\n+  /**\n+   * This method creates a new <code>PreparedStatement</code> for the specified\n+   * SQL string.  This method is designed for use with parameterized\n+   * statements.  The specified result set type and concurrency will be used.\n+   * Valid values for these parameters are specified in the\n+   * <code>ResultSet</code> class.\n+   *\n+   * @param The SQL statement to use in creating this \n+   *        <code>PreparedStatement</code>.\n+   * @param resultSetType The type of result set to use for this statement.\n+   * @param resultSetConcurrency.  The type of concurrency to be used in\n+   *        the result set for this statement.\n+   * @return A new <code>PreparedStatement</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see PreparedStatement\n+   * @see ResultSet\n+   */\n+  public PreparedStatement prepareStatement(String sql, int resultSetType, \n+    int resultSetConcurrency) throws SQLException;\n+\n+  /**\n+   * This method creates a new <code>CallableStatement</code> for the \n+   * specified SQL string.  Thie method is designed to be used with\n+   * stored procedures.  The specified result set type and concurrency\n+   * will be used.  Valid values for these parameters are specified in the\n+   * <code>ResultSet</code> class.\n+   *\n+   * @param The SQL statement to use in creating this \n+   *        <code>PreparedStatement</code>.\n+   * @param resultSetType The type of result set to use for this statement.\n+   * @param resultSetConcurrency.  The type of concurrency to be used in\n+   *        the result set for this statement.\n+   * @return A new <code>CallableStatement</code>.\n+   * @exception SQLException If an error occurs.\n+   * @see CallableStatement\n+   * @see ResultSet\n+   */\n+  public CallableStatement prepareCall(String sql, int resultSetType, int\n+    resultSetConcurrency) throws SQLException;\n+\n+  /**\n+   * This method returns the mapping of SQL types to Java classes\n+   * currently in use by this connection.  This mapping will have no\n+   * entries unless they have been manually added.\n+   *\n+   * @return The SQL type to Java class mapping.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Map getTypeMap() throws SQLException;\n+\n+  /**\n+   * This method sets the mapping table for SQL types to Java classes.\n+   * Any entries in this map override the defaults.\n+   *\n+   * @param map The new SQL mapping table.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTypeMap(Map map) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setHoldability(int holdability) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getHoldability() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Savepoint setSavepoint() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Savepoint setSavepoint(String name) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void rollback(Savepoint savepoint) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void releaseSavepoint(Savepoint savepoint) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Statement createStatement(int resultSetType, int\n+      resultSetConcurrency, int resultSetHoldability) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PreparedStatement prepareStatement(String sql, int resultSetType, int\n+      resultSetConcurrency, int resultSetHoldability) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public CallableStatement prepareCall(String sql, int resultSetType, int\n+      resultSetConcurrency, int resultSetHoldability) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PreparedStatement prepareStatement(String sql, int[] columnIndexes)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PreparedStatement prepareStatement(String sql, String[] columnNames)\n+      throws SQLException;\n+}"}, {"sha": "9892cd03449d6b708bbf5a999d6cb61e023a923a", "filename": "libjava/java/sql/DataTruncation.java", "status": "modified", "additions": 111, "deletions": 161, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDataTruncation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDataTruncation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDataTruncation.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* DataTruncation.java -- Warning when data has been truncated.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,7 +35,6 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n /**\n@@ -44,164 +43,115 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class DataTruncation extends SQLWarning\n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * The original size of the data.\n-  * @serialized\n-  */\n-private int dataSize;\n-\n-/**\n-  * The index of the parameter or column whose value was truncated.\n-  * @serialized\n-  */\n-private int index;\n-\n-/**\n-  * Indicates whether or not a parameter value was truncated.\n-  * @serialized\n-  */\n-private boolean parameter;\n-\n-/**\n-  * Indicates whether or not a data column value was truncated.\n-  * @serialized\n-  */\n-private boolean read;\n-\n-/**\n-  * This is the size of the data after truncation.\n-  * @serialized\n-  */\n-private int transferSize;\n-\n-/*************************************************************************/\n-\n-/**\n-  * Static Variables\n-  */\n-\n-/**\n-  * This is the serialization UID for this class\n-  */\n-private static final long serialVersionUID = 6464298989504059473L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>DataTruncation</code>\n-  * with the specified values.  The descriptive error message for this \n-  * exception will be \"Data truncation\", the SQL state will be \"01004\"\n-  * and the vendor specific error code will be set to 0.\n-  *\n-  * @param index The index of the parameter or column that was truncated.\n-  * @param parameter <code>true</code> if a parameter was truncated,\n-  * <code>false</code> otherwise.\n-  * @param read <code>true</code> if a data column was truncated,\n-  * <code>false</code> otherwise.\n-  * @param dataSize The original size of the data.\n-  * @param transferSize The size of the data after truncation.\n-  */\n-public\n-DataTruncation(int index, boolean parameter, boolean read, int dataSize,\n-               int transferSize)\n+public class DataTruncation extends SQLWarning \n {\n-  super(\"Data truncation\", \"01004\");\n-\n-  this.index = index;\n-  this.parameter = parameter;\n-  this.read = read;\n-  this.dataSize = dataSize;\n-  this.transferSize = transferSize;\n+  static final long serialVersionUID = 6464298989504059473L;\n+\n+  /**\n+   * The original size of the data.\n+   */\n+  private int dataSize;\n+\n+  /**\n+   * The index of the parameter or column whose value was truncated.\n+   */\n+  private int index;\n+\n+  /**\n+   * Indicates whether or not a parameter value was truncated.\n+   */\n+  private boolean parameter;\n+\n+  /**\n+   * Indicates whether or not a data column value was truncated.\n+   */\n+  private boolean read;\n+\n+  /**\n+   * This is the size of the data after truncation.\n+   */\n+  private int transferSize;\n+\n+  /**\n+   * This method initializes a new instance of <code>DataTruncation</code>\n+   * with the specified values.  The descriptive error message for this \n+   * exception will be \"Data truncation\", the SQL state will be \"01004\"\n+   * and the vendor specific error code will be set to 0.\n+   *\n+   * @param index The index of the parameter or column that was truncated.\n+   * @param parameter <code>true</code> if a parameter was truncated,\n+   *        <code>false</code> otherwise.\n+   * @param read <code>true</code> if a data column was truncated,\n+   *        <code>false</code> otherwise.\n+   * @param dataSize The original size of the data.\n+   * @param transferSize The size of the data after truncation.\n+   */\n+  public DataTruncation(int index, boolean parameter, boolean read, int\n+    dataSize, int transferSize)\n+  {\n+    super(\"Data truncation\", \"01004\");\n+\n+    this.index = index;\n+    this.parameter = parameter;\n+    this.read = read;\n+    this.dataSize = dataSize;\n+    this.transferSize = transferSize;\n+  }\n+\n+  /**\n+   * This method returns the index of the column or parameter that was\n+   * truncated.\n+   *\n+   * @return The index of the column or parameter that was truncated.\n+   */\n+  public int getIndex()\n+  {\n+    return index;\n+  }\n+\n+  /**\n+   * This method determines whether or not it was a parameter that was\n+   * truncated.\n+   *\n+   * @return <code>true</code> if a parameter was truncated, <code>false</code>\n+   * otherwise.\n+   */\n+  public boolean getParameter()\n+  {\n+    return parameter;\n+  }\n+\n+  /**\n+   * This method determines whether or not it was a column that was\n+   * truncated.\n+   *\n+   * @return <code>true</code> if a column was truncated, <code>false</code>\n+   * otherwise.\n+   */\n+  public boolean getRead()\n+  {\n+    return read;\n+  }\n+\n+  /**\n+   * This method returns the original size of the parameter or column that\n+   * was truncated.\n+   *\n+   * @return The original size of the parameter or column that was truncated.\n+   */\n+  public int getDataSize()\n+  {\n+    return dataSize;\n+  }\n+\n+  /**\n+   * This method returns the size of the parameter or column after it was\n+   * truncated.\n+   *\n+   * @return The size of the parameter or column after it was truncated.\n+   */\n+  public int getTransferSize()\n+  {\n+    return transferSize;\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the index of the column or parameter that was\n-  * truncated.\n-  *\n-  * @return The index of the column or parameter that was truncated.\n-  */\n-public int\n-getIndex()\n-{\n-  return(index);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method determines whether or not it was a parameter that was\n-  * truncated.\n-  *\n-  * @return <code>true</code> if a parameter was truncated, <code>false</code>\n-  * otherwise.\n-  */\n-public boolean\n-getParameter()\n-{\n-  return(parameter);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method determines whether or not it was a column that was\n-  * truncated.\n-  *\n-  * @return <code>true</code> if a column was truncated, <code>false</code>\n-  * otherwise.\n-  */\n-public boolean\n-getRead()\n-{\n-  return(read);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the original size of the parameter or column that\n-  * was truncated.\n-  *\n-  * @return The original size of the parameter or column that was truncated.\n-  */\n-public int\n-getDataSize()\n-{\n-  return(dataSize);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the size of the parameter or column after it was\n-  * truncated.\n-  *\n-  * @return The size of the parameter or column after it was truncated.\n-  */\n-public int\n-getTransferSize()\n-{\n-  return(transferSize);\n-}\n-\n-} // class DataTruncation\n-"}, {"sha": "58d724163dc6eeefacd277f33c2e9ac9d2db3f3c", "filename": "libjava/java/sql/DatabaseMetaData.java", "status": "modified", "additions": 2175, "deletions": 2708, "changes": 4883, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDatabaseMetaData.java?ref=f2390faddfd8fb109355466b4ba961ef07457006"}, {"sha": "59c8f1a3fc38ae71e9653faf06cbf603960aeaec", "filename": "libjava/java/sql/Date.java", "status": "modified", "additions": 64, "deletions": 100, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDate.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDate.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDate.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -35,7 +35,6 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.text.SimpleDateFormat;\n@@ -46,104 +45,69 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public class Date extends java.util.Date\n-{\n-\n-/*\n- * Class Variables\n- */\n-\n-/**\n-  * Used for parsing and formatting this date.\n-  */\n-private static SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-\n-/**\n-  * This is the serialization UID for this class.\n-  */\n-private static final long serialVersionUID = 1511598038487230103L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Methods\n- */\n-\n-/**\n-  * This method returns a new instance of this class by parsing a\n-  * date in JDBC format into a Java date.\n-  *\n-  * @param str The string to parse.\n-  *\n-  * @return The resulting <code>java.sql.Date</code> value. \n-  */\n-public static Date\n-valueOf(String str)\n-{\n-  try\n-    {\n-      java.util.Date d = (java.util.Date)sdf.parseObject(str);\n-      return(new Date(d.getTime()));\n-    }\n-  catch(Exception e)\n-    {\n-      return(null);\n-    }\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified year, month, and day.\n-  *\n-  * @param year The year of this date minue 1900.\n-  * @param month The month of this date (0-11).\n-  * @param day The day of this date (1-31).\n-  *\n-  * @deprecated\n-  */\n-public \n-Date(int year, int month, int day)\n-{\n-  super(year, month, day);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified time value representing the number of seconds since \n-  * Jan 1, 1970 at 12:00 midnight GMT.\n-  *\n-  * @param time The time value to intialize this date to.\n-  */\n-public\n-Date(long date)\n+public class Date extends java.util.Date \n {\n-  super(date);\n+  static final long serialVersionUID = 1511598038487230103L;\n+\n+  /**\n+   * Used for parsing and formatting this date.\n+   */\n+  private static SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  /**\n+   * This method initializes a new instance of this class with the\n+   * specified year, month, and day.\n+   *\n+   * @param year The year of this date minue 1900.\n+   * @param month The month of this date (0-11).\n+   * @param day The day of this date (1-31).\n+   *\n+   * @deprecated\n+   */\n+  public Date(int year, int month, int day)\n+  {\n+    super(year, month, day);  \n+  }\n+\n+  /**\n+   * This method initializes a new instance of this class with the\n+   * specified time value representing the number of seconds since \n+   * Jan 1, 1970 at 12:00 midnight GMT.\n+   *\n+   * @param time The time value to intialize this date to.\n+   */\n+  public Date(long date)\n+  {\n+    super(date);\n+  }\n+\n+  /**\n+   * This method returns a new instance of this class by parsing a\n+   * date in JDBC format into a Java date.\n+   *\n+   * @param str The string to parse.\n+   * @return The resulting <code>java.sql.Date</code> value. \n+   */\n+  public static Date valueOf(String str)\n+  {\n+    try\n+      {\n+\tjava.util.Date d = (java.util.Date) sdf.parseObject(str);\n+\treturn(new Date(d.getTime()));\n+      }\n+    catch(Exception e)\n+      {\n+\treturn(null);\n+      }\n+  }\n+\n+  /**\n+   * This method returns this date in JDBC format.\n+   *\n+   * @return This date as a string.\n+   */\n+  public String toString()\n+  {\n+    return(sdf.format(this));\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns this date in JDBC format.\n-  *\n-  * @return This date as a string.\n-  */\n-public String\n-toString()\n-{\n-  return(sdf.format(this));\n-}\n-\n-} // class Date\n-"}, {"sha": "5e5731d1839fe67393bfc416bafa879eada6814e", "filename": "libjava/java/sql/Driver.java", "status": "modified", "additions": 67, "deletions": 92, "changes": 159, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriver.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriver.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriver.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -35,7 +35,6 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.util.Properties;\n@@ -54,95 +53,71 @@\n   *\n   * @author Aaron M. Renn (arenn@urbanophile.com)\n   */\n-public interface Driver\n+public interface Driver \n {\n-\n-/**\n-  * This method returns the major version number of the driver.\n-  *\n-  * @return The major version number of the driver.\n-  */\n-public abstract int\n-getMajorVersion();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the minor version number of the driver.\n-  *\n-  * @return The minor version number of the driver.\n-  */\n-public abstract int\n-getMinorVersion();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the driver is JDBC compliant.  This\n-  * method should only return <code>true</code> if the driver has been\n-  * certified as JDBC compliant.\n-  *\n-  * @return <code>true</code> if the driver has been certified JDBC compliant,\n-  * <code>false</code> otherwise.\n-  */\n-public abstract boolean\n-jdbcCompliant();\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns an array of possible properties that could be\n-  * used to connect to the specified database.\n-  *\n-  * @param url The URL string of the database to connect to.\n-  * @param properties The list of properties the caller is planning to use\n-  * to connect to the database.\n-  *\n-  * @return A list of possible additional properties for a connection to this\n-  * database.  This list may be empty.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract DriverPropertyInfo[]\n-getPropertyInfo(String url, Properties properties) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the driver believes it can connect to\n-  * the specified database.  The driver should only test whether it \n-  * understands and accepts the URL. It should not necessarily attempt to \n-  * probe the database for a connection.\n-  *\n-  * @param The database URL string.\n-  *\n-  * @return <code>true</code> if the drivers can connect to the database, \n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-acceptsURL(String url) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method connects to the specified database using the connection\n-  * properties supplied.  If the driver does not understand the database\n-  * URL, it should return <code>null</code> instead of throwing an\n-  * exception since the <code>DriverManager</code> will probe a driver\n-  * in this manner.\n-  * \n-  * @param url The URL string for this connection.\n-  * @param properties The list of database connection properties.\n-  *\n-  * @return A <code>Connection</code> object for the newly established\n-  * connection, or <code>null</code> if the URL is not understood.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Connection\n-connect(String url, Properties properties) throws SQLException;\n-\n-} // interface Driver\n-\n+  /**\n+   * This method connects to the specified database using the connection\n+   * properties supplied.  If the driver does not understand the database\n+   * URL, it should return <code>null</code> instead of throwing an\n+   * exception since the <code>DriverManager</code> will probe a driver\n+   * in this manner.\n+   * \n+   * @param url The URL string for this connection.\n+   * @param properties The list of database connection properties.\n+   * @return A <code>Connection</code> object for the newly established\n+   *         connection, or <code>null</code> if the URL is not understood.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Connection connect(String url, Properties info) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the driver believes it can connect to\n+   * the specified database.  The driver should only test whether it \n+   * understands and accepts the URL. It should not necessarily attempt to \n+   * probe the database for a connection.\n+   *\n+   * @param The database URL string.\n+   * @return <code>true</code> if the drivers can connect to the database, \n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean acceptsURL(String url) throws SQLException;\n+\n+   /**\n+   * This method returns an array of possible properties that could be\n+   * used to connect to the specified database.\n+   *\n+   * @param url The URL string of the database to connect to.\n+   * @param properties The list of properties the caller is planning to use\n+   *        to connect to the database.\n+   * @return A list of possible additional properties for a connection to this\n+   *         database.  This list may be empty.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public DriverPropertyInfo[] getPropertyInfo(String url, Properties properties)\n+    throws SQLException;\n+\n+  /**\n+   * This method returns the major version number of the driver.\n+   *\n+   * @return The major version number of the driver.\n+   */      \n+  public int getMajorVersion();\n+\n+  /**\n+   * This method returns the minor version number of the driver.\n+   *\n+   * @return The minor version number of the driver.\n+   */\n+  public int getMinorVersion();\n+\n+  /**\n+   * This method tests whether or not the driver is JDBC compliant.  This\n+   * method should only return <code>true</code> if the driver has been\n+   * certified as JDBC compliant.\n+   *\n+   * @return <code>true</code> if the driver has been certified JDBC compliant,\n+   *         <code>false</code> otherwise.\n+   */\n+  public boolean jdbcCompliant();\n+}"}, {"sha": "229450ad0572e0a826aace65e399f60c723f1ee6", "filename": "libjava/java/sql/DriverManager.java", "status": "modified", "additions": 260, "deletions": 322, "changes": 582, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriverManager.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriverManager.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverManager.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -35,15 +35,14 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.util.Enumeration;\n import java.util.Properties;\n-import java.util.StringTokenizer;\n import java.util.Vector;\n+import java.util.StringTokenizer;\n \n /**\n   * This class manages the JDBC drivers in the system. It maintains a\n@@ -65,341 +64,280 @@\n   */\n public class DriverManager \n {\n-\n-/*\n- * Class Variables\n- */\n-\n-/**\n-  * This is the log stream for JDBC drivers.\n-  */\n-private static PrintStream log_stream;\n-\n-/**\n-  * This is the log writer for JDBC drivers.\n-  */\n-private static PrintWriter log_writer;\n-\n-/**\n-  * This is the login timeout used by JDBC drivers.\n-  */\n-private static int login_timeout;\n-\n-/**\n-  * This is the list of JDBC drivers that are loaded.\n-  */\n-private static Vector drivers;\n- // Hmm, seems like we might want to do a Hashtable and lookup by something,\n- // but what would it be?\n-\n-// Load all drivers on startup\n-static\n-{\n-  drivers = new Vector();\n-\n-  String driver_string = System.getProperty(\"jdbc.drivers\");\n-  if (driver_string != null)\n-    {\n-      StringTokenizer st = new StringTokenizer(driver_string);\n-      while (st.hasMoreTokens())\n-        {\n-          String driver_classname = st.nextToken();\n-\n-          try\n-            {\n-              Class.forName(driver_classname); // The driver registers itself\n-            }\n-          catch (Exception e) { ; } // Ignore not founds\n-        }\n-    }\n-\n-}\n+  /**\n+   * This is the log stream for JDBC drivers.\n+   */\n+  private static PrintStream log_stream;\n+\n+  /**\n+   * This is the log writer for JDBC drivers.\n+   */\n+  private static PrintWriter log_writer;\n+\n+  /**\n+   * This is the login timeout used by JDBC drivers.\n+   */\n+  private static int login_timeout;\n+\n+  /**\n+   * This is the list of JDBC drivers that are loaded.\n+   */\n+  private static Vector drivers;\n+   // Hmm, seems like we might want to do a Hashtable and lookup by something,\n+   // but what would it be?\n+\n+  // Load all drivers on startup\n+  static\n+  {\n+    drivers = new Vector();\n+\n+    String driver_string = System.getProperty(\"jdbc.drivers\");\n+    if (driver_string != null)\n+      {\n+\tStringTokenizer st = new StringTokenizer(driver_string);\n+\twhile (st.hasMoreTokens())\n+          {\n+            String driver_classname = st.nextToken();\n+\n+            try\n+              {\n+        \tClass.forName(driver_classname); // The driver registers itself\n+              }\n+            catch (Exception e) { ; } // Ignore not founds\n+          }\n+      }\n+\n+  }\n+\n+  /** Can't be instantiated. */\n+  private DriverManager()\n+  {\n+  }\n+\n+  /**\n+   * This method returns the log writer being used by all JDBC drivers.\n+   * This method should be used in place of the deprecated\n+   * <code>getLogStream</code> method.\n+   *\n+   * @return The log writer in use by JDBC drivers.\n+   */\n+  public static PrintWriter getLogWriter()\n+  {\n+    return log_writer;\n+  }\n   \n-/*************************************************************************/\n-\n-/*\n- * Class Methods\n- */\n-\n-/**\n-  * This method returns the login timeout in use by JDBC drivers systemwide.\n-  *\n-  * @return The login timeout.\n-  */\n-public static int\n-getLoginTimeout()\n-{\n-  return(login_timeout);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method set the login timeout used by JDBC drivers.  This is a\n-  * system-wide parameter that applies to all drivers.\n-  *\n-  * @param login_timeout The new login timeout value.\n-  */\n-public static void\n-setLoginTimeout(int login_timeout)\n-{\n-  DriverManager.login_timeout = login_timeout;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the log writer being used by all JDBC drivers.\n-  * This method should be used in place of the deprecated\n-  * <code>getLogStream</code> method.\n-  *\n-  * @return The log writer in use by JDBC drivers.\n-  */\n-public static PrintWriter\n-getLogWriter()\n-{\n-  return(log_writer);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the log writer being used by JDBC drivers.  This is a\n-  * system-wide parameter that affects all drivers.  Note that since there\n-  * is no way to retrieve a <code>PrintStream</code> from a \n-  * <code>PrintWriter</code>, this method cannot set the log stream in\n-  * use by JDBC.  Thus any older drivers may not see this setting.\n-  *\n-  * @param log_writer The new log writer for JDBC.\n-  */\n-public static void\n-setLogWriter(PrintWriter log_writer)\n-{\n-  DriverManager.log_writer = log_writer;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the log stream in use by JDBC.\n-  *\n-  * @return The log stream in use by JDBC.\n-  *\n-  * @deprecated Use <code>getLogWriter()</code> instead.\n-  */\n-public static PrintStream\n-getLogStream()\n-{\n-  return(log_stream);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the log stream in use by JDBC.\n-  *\n-  * @param log_stream The log stream in use by JDBC.\n-  *\n-  * @deprecated Use <code>setLogWriter</code> instead.\n-  */\n-public static void\n-setLogStream(PrintStream log_stream)\n-{\n-  DriverManager.log_stream = log_stream;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method prints the specified line to the log stream.\n-  *\n-  * @param str The string to write to the log stream.\n-  */\n-public static void\n-println(String str)\n-{\n-  if (log_stream != null) // Watch for user not using logging\n-    log_stream.println(str);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method registers a new driver with the manager.  This is normally\n-  * called by the driver itself in a static initializer.\n-  *\n-  * @param driver The new <code>Driver</code> to add.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public static void\n-registerDriver(Driver driver) throws SQLException\n-{\n-  if (!drivers.contains(driver))\n-    drivers.addElement(driver);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method de-registers a driver from the manager.\n-  *\n-  * @param driver The <code>Driver</code> to unregister.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public static void\n-deregisterDriver(Driver driver) throws SQLException\n-{\n-  if (drivers.contains(driver))\n-    drivers.removeElement(driver);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a list of all the currently registered JDBC drivers\n-  * that were loaded by the current <code>ClassLoader</code>.\n-  *\n-  * @return An <code>Enumeration</code> of all currently loaded JDBC drivers.\n-  */\n-public static Enumeration\n-getDrivers()\n-{\n-  Vector v = new Vector();\n-  Enumeration e = drivers.elements();\n-\n-  // Is this right?\n-  ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-\n-  while(e.hasMoreElements())\n-    {\n-      Object obj = e.nextElement();\n-\n-      ClassLoader loader = obj.getClass().getClassLoader();\n-\n-      if (loader == null)\n-\tloader = ClassLoader.getSystemClassLoader();\n-      if (!loader.equals(cl))\n-\tcontinue;\n-\n-      v.addElement(obj);\n-    } \n-\n-  return(v.elements());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a driver that can connect to the specified\n-  * JDBC URL string.  This will be selected from among drivers loaded\n-  * at initialization time and those drivers manually loaded by the\n-  * same class loader as the caller.\n-  *\n-  * @param url The JDBC URL string to find a driver for.\n-  *\n-  * @return A <code>Driver</code> that can connect to the specified\n-  * URL, or <code>null</code> if a suitable driver cannot be found.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public static Driver\n-getDriver(String url) throws SQLException\n-{\n-  // FIXME: Limit driver search to the appropriate subset of loaded drivers.\n-\n-  Enumeration e = drivers.elements();\n-  while(e.hasMoreElements())\n-    {\n-      Driver d = (Driver)e.nextElement();\n-      if (d.acceptsURL(url))\n-        return(d);\n-    }\n-\n-  return(null);\n-}\n-\n-/*************************************************************************/\n+  /**\n+   * This method sets the log writer being used by JDBC drivers.  This is a\n+   * system-wide parameter that affects all drivers.  Note that since there\n+   * is no way to retrieve a <code>PrintStream</code> from a \n+   * <code>PrintWriter</code>, this method cannot set the log stream in\n+   * use by JDBC.  Thus any older drivers may not see this setting.\n+   *\n+   * @param out The new log writer for JDBC.\n+   */\n+  public static void setLogWriter(PrintWriter out)\n+  {\n+    DriverManager.log_writer = out;\n+  }\n \n /**\n   * This method attempts to return a connection to the specified\n-  * JDBC URL string.\n-  *\n-  * @param url The JDBC URL string to connect to.\n-  *\n-  * @return A <code>Connection</code> to that URL.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public static Connection\n-getConnection(String url) throws SQLException\n-{\n-  return(getConnection(url, new Properties()));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method attempts to return a connection to the specified\n-  * JDBC URL string using the specified username and password.\n+  * JDBC URL string using the specified connection properties.\n   *\n   * @param url The JDBC URL string to connect to.\n-  * @param user The username to connect with.\n-  * @param password The password to connect with.\n+  * @param properties The connection properties.\n   *\n   * @return A <code>Connection</code> to that URL.\n   *\n   * @exception SQLException If an error occurs.\n   */\n-public static Connection\n-getConnection(String url, String user, String password) throws SQLException\n-{\n-  Properties p = new Properties();\n-\n-  if (user != null)\n-    p.setProperty(\"user\", user);\n-  if (password != null)\n-    p.setProperty(\"password\", password);\n-\n-  return(getConnection(url, p));\n-}\n-\n-/*************************************************************************/\n+  public static Connection getConnection(String url, Properties properties)\n+    throws SQLException\n+  {\n+    Driver d = getDriver(url);\n+    if (d == null)\n+      throw new SQLException(\"Driver not found for URL: \" + url);\n+\n+    return d.connect(url, properties);\n+  }\n+\n+\n+  /**\n+   * This method attempts to return a connection to the specified\n+   * JDBC URL string using the specified username and password.\n+   *\n+   * @param url The JDBC URL string to connect to.\n+   * @param user The username to connect with.\n+   * @param password The password to connect with.\n+   * @return A <code>Connection</code> to that URL.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public static Connection getConnection(String url, String user,\n+    String password) throws SQLException\n+  {\n+    Properties p = new Properties();\n+\n+    if (user != null)\n+      p.setProperty(\"user\", user);\n+    if (password != null)\n+      p.setProperty(\"password\", password);\n+\n+    return getConnection(url, p);\n+  }\n+\n+  /**\n+   * This method attempts to return a connection to the specified\n+   * JDBC URL string.\n+   *\n+   * @param url The JDBC URL string to connect to.\n+   *\n+   * @return A <code>Connection</code> to that URL.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public static Connection getConnection(String url) throws SQLException\n+  {\n+    return getConnection(url, new Properties());\n+  }\n+\n+  /**\n+   * This method returns a driver that can connect to the specified\n+   * JDBC URL string.  This will be selected from among drivers loaded\n+   * at initialization time and those drivers manually loaded by the\n+   * same class loader as the caller.\n+   *\n+   * @param url The JDBC URL string to find a driver for.\n+   *\n+   * @return A <code>Driver</code> that can connect to the specified\n+   * URL, or <code>null</code> if a suitable driver cannot be found.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public static Driver getDriver(String url) throws SQLException\n+  {\n+    // FIXME: Limit driver search to the appropriate subset of loaded drivers.\n+    Enumeration e = drivers.elements();\n+    while(e.hasMoreElements())\n+      {\n+\tDriver d = (Driver)e.nextElement();\n+\tif (d.acceptsURL(url))\n+          return d;\n+      }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * This method registers a new driver with the manager.  This is normally\n+   * called by the driver itself in a static initializer.\n+   *\n+   * @param driver The new <code>Driver</code> to add.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public static void registerDriver(Driver driver) throws SQLException\n+  {\n+    if (! drivers.contains(driver))\n+      drivers.addElement(driver);  \n+  }\n \n /**\n-  * This method attempts to return a connection to the specified\n-  * JDBC URL string using the specified connection properties.\n-  *\n-  * @param url The JDBC URL string to connect to.\n-  * @param properties The connection properties.\n+  * This method de-registers a driver from the manager.\n   *\n-  * @return A <code>Connection</code> to that URL.\n+  * @param driver The <code>Driver</code> to unregister.\n   *\n   * @exception SQLException If an error occurs.\n   */\n-public static Connection\n-getConnection(String url, Properties properties) throws SQLException\n-{\n-  Driver d = getDriver(url);\n-  if (d == null)\n-    throw new SQLException(\"Driver not found for URL: \" + url);\n-\n-  return(d.connect(url, properties));\n+  public static void deregisterDriver(Driver driver) throws SQLException\n+  {\n+    if (drivers.contains(driver))\n+      drivers.removeElement(driver);\n+  }\n+\n+  /**\n+   * This method returns a list of all the currently registered JDBC drivers\n+   * that were loaded by the current <code>ClassLoader</code>.\n+   *\n+   * @return An <code>Enumeration</code> of all currently loaded JDBC drivers.\n+   */\n+  public static Enumeration getDrivers()\n+  {\n+    Vector v = new Vector();\n+    Enumeration e = drivers.elements();\n+\n+    // Is this right?\n+    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n+\n+    while(e.hasMoreElements())\n+      {\n+\tObject obj = e.nextElement();\n+\n+\tClassLoader loader = obj.getClass().getClassLoader();\n+\n+\tif (loader == null)\n+\t  loader = ClassLoader.getSystemClassLoader();\n+\tif (! loader.equals(cl))\n+\t  continue;\n+\n+\tv.addElement(obj);\n+      } \n+\n+    return v.elements();\n+  }\n+\n+  /**\n+   * This method set the login timeout used by JDBC drivers.  This is a\n+   * system-wide parameter that applies to all drivers.\n+   *\n+   * @param login_timeout The new login timeout value.\n+   */\n+  public static void setLoginTimeout(int seconds)\n+  {\n+    DriverManager.login_timeout = login_timeout;  \n+  }\n+\n+  /**\n+   * This method returns the login timeout in use by JDBC drivers systemwide.\n+   *\n+   * @return The login timeout.\n+   */\n+  public static int getLoginTimeout()\n+  {\n+    return login_timeout;\n+  }\n+\n+  /**\n+   * This method sets the log stream in use by JDBC.\n+   *\n+   * @param log_stream The log stream in use by JDBC.\n+   *\n+   * @deprecated Use <code>setLogWriter</code> instead.\n+   */\n+  public static void setLogStream(PrintStream out)\n+  {\n+    DriverManager.log_stream = log_stream;\n+  }\n+\n+  /**\n+   * This method returns the log stream in use by JDBC.\n+   *\n+   * @return The log stream in use by JDBC.\n+   *\n+   * @deprecated Use <code>getLogWriter()</code> instead.\n+   */\n+  public static PrintStream getLogStream()\n+  {\n+    return log_stream;\n+  }\n+\n+  /**\n+   * This method prints the specified line to the log stream.\n+   *\n+   * @param str The string to write to the log stream.\n+   */\n+  public static void println(String message)\n+  {\n+    if (log_stream != null) // Watch for user not using logging\n+      log_stream.println(message);\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-// Keep bozos from trying to instantiate us.\n-private\n-DriverManager()\n-{\n-  ;\n-}\n-\n-} // class DriverManager \n-"}, {"sha": "12382e33b7e60c7a73ab5b278aceabdf91a1a9f3", "filename": "libjava/java/sql/DriverPropertyInfo.java", "status": "modified", "additions": 44, "deletions": 58, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FDriverPropertyInfo.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -39,64 +39,50 @@\n package java.sql;\n \n /**\n-  * This class holds a driver property that can be used for querying or\n-  * setting driver configuration parameters.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class DriverPropertyInfo\n-{\n-\n-/*\n- * Instance Variables\n+ * This class holds a driver property that can be used for querying or\n+ * setting driver configuration parameters.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * The name of the property.\n-  */\n-public String name;\n-\n-/**\n-  * This is the value of the property.\n-  */\n-public String value;\n-\n-/**\n-  * A description of the property, possibly <code>null</code>.\n-  */\n-public String description;\n-\n-/**\n-  * A flag indicating whether or not a value for this property is required\n-  * in order to connect to the database.\n-  */\n-public boolean required;\n-\n-/**\n-  * If values are restricted to certain choices, this is the list of valid\n-  * ones.  Otherwise it is <code>null</code>.\n-  */\n-public String[] choices;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>DriverPropertyInfo</code>\n-  * with the specified name and value.  All other fields are defaulted.\n-  *\n-  * @param name The name of the property.\n-  * @param value The value to assign to the property.\n-  */\n-public\n-DriverPropertyInfo(String name, String value)\n+public class DriverPropertyInfo \n {\n-  this.name = name;\n-  this.value = value;\n+  /**\n+   * The name of the property.\n+   */\n+  public String name;\n+\n+  /**\n+   * A description of the property, possibly <code>null</code>.\n+   */\n+  public String description;\n+\n+  /**\n+   * A flag indicating whether or not a value for this property is required\n+   * in order to connect to the database.\n+   */\n+  public boolean required;\n+\n+  /**\n+   * This is the value of the property.\n+   */\n+  public String value;\n+\n+  /**\n+    * If values are restricted to certain choices, this is the list of valid\n+    * ones.  Otherwise it is <code>null</code>.\n+    */\n+  public String[] choices;\n+\n+  /**\n+   * This method initializes a new instance of <code>DriverPropertyInfo</code>\n+   * with the specified name and value.  All other fields are defaulted.\n+   *\n+   * @param name The name of the property.\n+   * @param value The value to assign to the property.\n+   */\n+  public DriverPropertyInfo(String name, String value)\n+  {\n+    this.name = name;\n+    this.value = value;\n+  }\n }\n-\n-} // DriverPropertyInfo\n-"}, {"sha": "a84bbd4c93d6479809199ebf606b92fcf41a6126", "filename": "libjava/java/sql/ParameterMetaData.java", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FParameterMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FParameterMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FParameterMetaData.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,103 @@\n+/* ParameterMetaData.java\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package java.sql;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface ParameterMetaData \n+{\n+  public static final int parameterNoNulls = 0;\n+\n+  public static final int parameterNullable = 1;\n+\n+  public static final int parameterNullableUnknown = 2;\n+\n+  public static final int parameterModeUnknown = 0;\n+\n+  public static final int parameterModeIn = 1;\n+\n+  public static final int parameterModeInOut = 2;\n+\n+  public static final int parameterModeOut = 4;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getParameterCount() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int isNullable(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isSigned(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getPrecision(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getScale(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getParameterType(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getParameterTypeName(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getParameterClassName(int param) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getParameterMode(int param) throws SQLException;\n+}"}, {"sha": "3507886a6bea7d63a91ab2d9ada3ab06a33cf36b", "filename": "libjava/java/sql/PreparedStatement.java", "status": "modified", "additions": 392, "deletions": 511, "changes": 903, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FPreparedStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FPreparedStatement.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -35,523 +35,404 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.net.URL;\n import java.util.Calendar;\n \n /**\n-  * This interface provides a mechanism for executing pre-compiled\n-  * statements.  This provides greater efficiency when calling the same\n-  * statement multiple times.  Parameters are allowed in a statement,\n-  * providings for maximum reusability.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface PreparedStatement extends Statement\n+ * This interface provides a mechanism for executing pre-compiled\n+ * statements.  This provides greater efficiency when calling the same\n+ * statement multiple times.  Parameters are allowed in a statement,\n+ * providings for maximum reusability.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface PreparedStatement extends Statement \n {\n-\n-/**\n-  * This method populates the specified parameter with a SQL NULL value\n-  * for the specified type.\n-  *\n-  * @param index The index of the parameter to set.\n-  * @param type The SQL type identifier of the parameter from <code>Types</code>\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setNull(int index, int type) throws SQLException;\n-  \n-/*************************************************************************/\n-\n-/**\n-  * This method populates the specified parameter with a SQL NULL value\n-  * for the specified type.\n-  *\n-  * @param index The index of the parameter to set.\n-  * @param type The SQL type identifier of the parameter from <code>Types</code>\n-  * @param name The name of the data type, for user defined types.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setNull(int index, int type, String name) throws SQLException;\n-  \n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>boolean</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setBoolean(int index, boolean value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>byte</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setByte(int index, byte value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>short</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setShort(int index, short value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>int</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setInt(int index, int value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>long</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setLong(int index, long value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>float</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setFloat(int index, float value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>double</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setDouble(int index, double value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>String</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setString(int index, String value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>byte</code> array value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setBytes(int index, byte[] value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.math.BigDecimal</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setBigDecimal(int index, java.math.BigDecimal value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Date</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setDate(int index, java.sql.Date value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Date</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setDate(int index, java.sql.Date value, Calendar calendar) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Time</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTime(int index, java.sql.Time value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Time</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTime(int index, java.sql.Time value, Calendar calendar) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Timestamp</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTimestamp(int index, java.sql.Timestamp value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>java.sql.Timestamp</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param calendar The <code>Calendar</code> to use for timezone and locale.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setTimestamp(int index, java.sql.Timestamp value, Calendar calendar) \n-             throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * ASCII <code>InputStream</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param length The number of bytes in the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setAsciiStream(int index, InputStream value, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * Unicode UTF-8 <code>InputStream</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param length The number of bytes in the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setUnicodeStream(int index, InputStream value, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * binary <code>InputStream</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param length The number of bytes in the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setBinaryStream(int index, InputStream value, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * character <code>Reader</code> value.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param length The number of bytes in the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setCharacterStream(int index, Reader value, int length) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Ref</code> value.  The default object type to SQL type mapping\n-  * will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setRef(int index, Ref value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Blob</code> value.  The default object type to SQL type mapping\n-  * will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setBlob(int index, Blob value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Clob</code> value.  The default object type to SQL type mapping\n-  * will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setClob(int index, Clob value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Array</code> value.  The default object type to SQL type mapping\n-  * will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setArray(int index, Array value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Object</code> value.  The default object type to SQL type mapping\n-  * will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setObject(int index, Object value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Object</code> value.  The specified SQL object type will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param type The SQL type to use for the parameter, from <code>Types</code>\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see Types\n-  */\n-public abstract void\n-setObject(int index, Object value, int type) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the specified parameter from the given Java\n-  * <code>Object</code> value.  The specified SQL object type will be used.\n-  *\n-  * @param index The index of the parameter value to set.\n-  * @param value The value of the parameter.\n-  * @param type The SQL type to use for the parameter, from <code>Types</code>\n-  * @param scale The scale of the value, for numeric values only.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see Types\n-  */\n-public abstract void\n-setObject(int index, Object value, int type, int scale) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method adds a set of parameters to the batch for JDBC 2.0.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-addBatch() throws SQLException;\n-  \n-/*************************************************************************/\n-\n-/**\n-  * This method clears all of the input parameter that have been\n-  * set on this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-clearParameters() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns meta data for the result set from this statement.\n-  *\n-  * @return Meta data for the result set from this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract ResultSetMetaData\n-getMetaData() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes a prepared SQL query.\n-  * Some prepared statements return multiple results; the execute method\n-  * handles these complex statements as well as the simpler form of\n-  * statements handled by executeQuery and executeUpdate.\n-  *\n-  * @return The result of the SQL statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-execute() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes a prepared SQL query and returns its ResultSet.\n-  *\n-  * @return The ResultSet of the SQL statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract ResultSet\n-executeQuery() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes an SQL INSERT, UPDATE or DELETE statement.  SQL\n-  * statements that return nothing such as SQL DDL statements can be executed.\n-  *\n-  * @return The result is either the row count for INSERT, UPDATE or DELETE\n-  * statements; or 0 for SQL statements that return nothing.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-executeUpdate() throws SQLException;\n-\n-} // interface PreparedStatement\n-\n+  /**\n+   * This method executes a prepared SQL query and returns its ResultSet.\n+   *\n+   * @return The ResultSet of the SQL statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public ResultSet executeQuery() throws SQLException;\n+\n+  /**\n+   * This method executes an SQL INSERT, UPDATE or DELETE statement.  SQL\n+   * statements that return nothing such as SQL DDL statements can be executed.\n+   *\n+   * @return The result is either the row count for INSERT, UPDATE or DELETE\n+   *         statements; or 0 for SQL statements that return nothing.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int executeUpdate() throws SQLException;\n+\n+  /**\n+   * This method populates the specified parameter with a SQL NULL value\n+   * for the specified type.\n+   *\n+   * @param index The index of the parameter to set.\n+   * @param type The SQL type identifier of the parameter from <code>Types</code>\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setNull(int parameterIndex, int sqlType) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>boolean</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setBoolean(int parameterIndex, boolean x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>byte</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setByte(int parameterIndex, byte x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>short</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setShort(int parameterIndex, short x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>int</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setInt(int parameterIndex, int x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>long</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setLong(int parameterIndex, long x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>float</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setFloat(int parameterIndex, float x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>double</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setDouble(int parameterIndex, double x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.math.BigDecimal</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n+      SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>String</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setString(int parameterIndex, String x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>byte</code> array value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setBytes(int parameterIndex, byte[] x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Date</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setDate(int parameterIndex, Date x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Time</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTime(int parameterIndex, Time x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Timestamp</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTimestamp(int parameterIndex, Timestamp x)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * ASCII <code>InputStream</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param length The number of bytes in the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setAsciiStream(int parameterIndex, InputStream x, int length)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * Unicode UTF-8 <code>InputStream</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param length The number of bytes in the stream.\n+   * @exception SQLException If an error occurs.\n+   * @deprecated\n+   */\n+  public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * binary <code>InputStream</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param length The number of bytes in the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setBinaryStream(int parameterIndex, InputStream x, int length)\n+    throws SQLException;\n+\n+  /**\n+   * This method clears all of the input parameter that have been\n+   * set on this statement.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void clearParameters() throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Object</code> value.  The specified SQL object type will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param type The SQL type to use for the parameter, from <code>Types</code>\n+   * @param scale The scale of the value, for numeric values only.\n+   * @exception SQLException If an error occurs.\n+   * @see Types\n+   */\n+  public void setObject(int parameterIndex, Object x, int targetSqlType,\n+    int scale) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Object</code> value.  The specified SQL object type will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param type The SQL type to use for the parameter, from <code>Types</code>\n+   * @exception SQLException If an error occurs.\n+   * @see Types\n+   */\n+  public void setObject(int parameterIndex, Object x, int targetSqlType)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Object</code> value.  The default object type to SQL type mapping\n+   * will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setObject(int parameterIndex, Object x) throws SQLException;\n+\n+  /**\n+   * This method executes a prepared SQL query.\n+   * Some prepared statements return multiple results; the execute method\n+   * handles these complex statements as well as the simpler form of\n+   * statements handled by executeQuery and executeUpdate.\n+   *\n+   * @return The result of the SQL statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean execute() throws SQLException;\n+\n+  /**\n+   * This method adds a set of parameters to the batch for JDBC 2.0.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void addBatch() throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * character <code>Reader</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param length The number of bytes in the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setCharacterStream(int parameterIndex, Reader reader,\n+    int length) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Ref</code> value.  The default object type to SQL type mapping\n+   * will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setRef(int i, Ref x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Blob</code> value.  The default object type to SQL type mapping\n+   * will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setBlob(int i, Blob x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Clob</code> value.  The default object type to SQL type mapping\n+   * will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setClob(int i, Clob x) throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>Array</code> value.  The default object type to SQL type mapping\n+   * will be used.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setArray(int i, Array x) throws SQLException;\n+\n+  /**\n+   * This method returns meta data for the result set from this statement.\n+   *\n+   * @return Meta data for the result set from this statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public ResultSetMetaData getMetaData() throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Date</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setDate(int parameterIndex, Date x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Time</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTime(int parameterIndex, Time x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * This method sets the specified parameter from the given Java\n+   * <code>java.sql.Timestamp</code> value.\n+   *\n+   * @param index The index of the parameter value to set.\n+   * @param value The value of the parameter.\n+   * @param calendar The <code>Calendar</code> to use for timezone and locale.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)\n+    throws SQLException;\n+\n+  /**\n+   * This method populates the specified parameter with a SQL NULL value\n+   * for the specified type.\n+   *\n+   * @param index The index of the parameter to set.\n+   * @param type The SQL type identifier of the parameter from <code>Types</code>\n+   * @param name The name of the data type, for user defined types.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setNull(int paramIndex, int sqlType, String typeName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setURL(int parameterIndex, URL x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ParameterMetaData getParameterMetaData() throws SQLException;\n+}"}, {"sha": "207d75ed21d0010382ca9146bfdd69ccd595c28a", "filename": "libjava/java/sql/Ref.java", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FRef.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -35,28 +35,41 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.sql;\n \n+import java.util.Map;\n+\n /**\n-  * This interface provides a mechanism for obtaining information about\n-  * a SQL structured type\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Ref\n+ * This interface provides a mechanism for obtaining information about\n+ * a SQL structured type\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ * @since 1.2\n+ */\n+public interface Ref \n {\n+  /**\n+   * This method returns the fully qualified name of the SQL structured\n+   * type of the referenced item.\n+   *\n+   * @return The fully qualified name of the SQL structured type.\n+   * @exception SQLException If an error occurs.\n+   * @since 1.2\n+   */\n+  public String getBaseTypeName() throws SQLException;\n \n-/**\n-  * This method returns the fully qualified name of the SQL structured\n-  * type of the referenced item.\n-  *\n-  * @return The fully qualified name of the SQL structured type.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getBaseTypeName() throws SQLException;\n-\n-} // interface Ref\n+  /**\n+   * @since 1.4\n+   */\n+  public Object getObject(Map map) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Object getObject() throws SQLException;\n \n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(Object value) throws SQLException;\n+}"}, {"sha": "de294d8a36d94dad5cd433dd0e498e0b9eb4efe0", "filename": "libjava/java/sql/ResultSet.java", "status": "modified", "additions": 1483, "deletions": 1970, "changes": 3453, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FResultSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FResultSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSet.java?ref=f2390faddfd8fb109355466b4ba961ef07457006"}, {"sha": "889128975e5db36dc128c9181b5c8729f9ab825a", "filename": "libjava/java/sql/ResultSetMetaData.java", "status": "modified", "additions": 240, "deletions": 348, "changes": 588, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FResultSetMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FResultSetMetaData.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* ResultSetMetaData.java -- Returns information about the ResultSet\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,351 +39,243 @@\n package java.sql;\n \n /**\n-  * This interface provides a mechanism for obtaining information about\n-  * the columns that are present in a <code>ResultSet</code>.\n-  * <p>\n-  * Note that in this class column indexes start at 1, not 0.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface ResultSetMetaData\n+ * This interface provides a mechanism for obtaining information about\n+ * the columns that are present in a <code>ResultSet</code>.\n+ * <p>\n+ * Note that in this class column indexes start at 1, not 0.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface ResultSetMetaData \n {\n-\n-/**\n-  * The column does not allow NULL's.\n-  */\n-public static final int columnNoNulls = 0;\n-\n-/**\n-  * The column allows NULL's.\n-  */\n-public static final int columnNullable = 1;\n-\n-/**\n-  * It is unknown whether or not the column allows NULL's.\n-  */\n-public static final int columnNullableUnknown = 2;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the number of columns in the result set.\n-  *\n-  * @return The number of columns in the result set.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getColumnCount() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method test whether or not the column is an auto-increment column.\n-  * Auto-increment columns are read-only.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return <code>true</code> if the column is auto-increment, <code>false</code>\n-  * otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isAutoIncrement(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not a column is case sensitive in its values.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return <code>true</code> if the column value is case sensitive,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isCaseSensitive(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether not the specified column can be used in \n-  * a WHERE clause.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return <code>true</code> if the column may be used in a WHERE clause,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isSearchable(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the column stores a monetary value.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return <code>true</code> if the column contains a monetary value,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isCurrency(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a value indicating whether or not the specified\n-  * column may contain a NULL value.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return A constant indicating whether or not the column can contain NULL,\n-  * which will be one of <code>columnNoNulls</code>,\n-  * <code>columnNullable</code>, or <code>columnNullableUnknown</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-isNullable(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the value of the specified column\n-  * is signed or unsigned.\n-  *\n-  * @param index The index of the column to test.\n-  *\n-  * @return <code>true</code> if the column value is signed, <code>false</code>\n-  * otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isSigned(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the maximum number of characters that can be used\n-  * to display a value in this column.\n-  *\n-  * @param index The index of the column to check.\n-  *\n-  * @return The maximum number of characters that can be used to display a\n-  * value for this column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getColumnDisplaySize(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns a string that should be used as a caption for this\n-  * column for user display purposes.\n-  *\n-  * @param index The index of the column to check.\n-  *\n-  * @return A display string for the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getColumnLabel(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the specified column.\n-  *\n-  * @param index The index of the column to return the name of.\n-  *\n-  * @return The name of the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getColumnName(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the schema that contains the specified\n-  * column.\n-  *\n-  * @param index The index of the column to check the schema name for.\n-  *\n-  * @return The name of the schema that contains the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getSchemaName(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the precision of the specified column, which is the\n-  * number of decimal digits it contains.\n-  *\n-  * @param index The index of the column to check the precision on.\n-  *\n-  * @return The precision of the specified column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getPrecision(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the scale of the specified column, which is the\n-  * number of digits to the right of the decimal point.\n-  *\n-  * @param index The index column to check the scale of.\n-  *\n-  * @return The scale of the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getScale(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the table containing the specified\n-  * column.\n-  *\n-  * @param index The index of the column to check the table name for.\n-  *\n-  * @return The name of the table containing the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getTableName(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the catalog containing the specified\n-  * column.\n-  *\n-  * @param index The index of the column to check the catalog name for.\n-  *\n-  * @return The name of the catalog containing the column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getCatalogName(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the SQL type of the specified column.  This will\n-  * be one of the constants from <code>Types</code>.\n-  *\n-  * @param index The index of the column to check the SQL type of.\n-  *\n-  * @return The SQL type for this column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see Types\n-  */\n-public abstract int\n-getColumnType(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the SQL type for this column.\n-  *\n-  * @param index The index of the column to check the SQL type name for.\n-  *\n-  * @return The name of the SQL type for this column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getColumnTypeName(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the specified column is read only.\n-  *\n-  * @param index The index of the column to check.\n-  *\n-  * @return <code>true</code> if the column is read only, <code>false</code>\n-  * otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isReadOnly(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the column may be writable.  This\n-  * does not guarantee that a write will be successful.\n-  *\n-  * @param index The index of the column to check for writability.\n-  *\n-  * @return <code>true</code> if the column may be writable,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isWritable(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the column is writable.  This\n-  * does guarantee that a write will be successful.\n-  *\n-  * @param index The index of the column to check for writability.\n-  *\n-  * @return <code>true</code> if the column is writable,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-isDefinitelyWritable(int index) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the name of the Java class which will be used to\n-  * create objects representing the data in this column.\n-  *\n-  * @param index The index of the column to check.\n-  *\n-  * @return The name of the Java class that will be used for values in\n-  * this column.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getColumnClassName(int index) throws SQLException;\n-\n-} // interface ResultSetMetaData\n-\n+  /**\n+   * The column does not allow NULL's.\n+   */\n+  public static final int columnNoNulls = 0;\n+\n+  /**\n+   * The column allows NULL's.\n+   */\n+  public static final int columnNullable = 1;\n+\n+  /**\n+   * It is unknown whether or not the column allows NULL's.\n+   */\n+  public static final int columnNullableUnknown = 2;\n+\n+  /**\n+   * This method returns the number of columns in the result set.\n+   *\n+   * @return The number of columns in the result set.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getColumnCount() throws SQLException;\n+\n+  /**\n+   * This method test whether or not the column is an auto-increment column.\n+   * Auto-increment columns are read-only.\n+   *\n+   * @param index The index of the column to test.\n+   * @return <code>true</code> if the column is auto-increment, <code>false</code>\n+   *         otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isAutoIncrement(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not a column is case sensitive in its values.\n+   *\n+   * @param index The index of the column to test.\n+   * @return <code>true</code> if the column value is case sensitive,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isCaseSensitive(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether not the specified column can be used in \n+   * a WHERE clause.\n+   *\n+   * @param index The index of the column to test.\n+   * @return <code>true</code> if the column may be used in a WHERE clause,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isSearchable(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the column stores a monetary value.\n+   *\n+   * @param index The index of the column to test.\n+   * @return <code>true</code> if the column contains a monetary value,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isCurrency(int column) throws SQLException;\n+\n+  /**\n+   * This method returns a value indicating whether or not the specified\n+   * column may contain a NULL value.\n+   *\n+   * @param index The index of the column to test.\n+   * @return A constant indicating whether or not the column can contain NULL,\n+   *         which will be one of <code>columnNoNulls</code>,\n+   *         <code>columnNullable</code>, or <code>columnNullableUnknown</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int isNullable(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the value of the specified column\n+   * is signed or unsigned.\n+   *\n+   * @param index The index of the column to test.\n+   * @return <code>true</code> if the column value is signed, <code>false</code>\n+   *         otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isSigned(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the maximum number of characters that can be used\n+   * to display a value in this column.\n+   *\n+   * @param index The index of the column to check.\n+   * @return The maximum number of characters that can be used to display a\n+   *         value for this column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getColumnDisplaySize(int column) throws SQLException;\n+\n+  /**\n+   * This method returns a string that should be used as a caption for this\n+   * column for user display purposes.\n+   *\n+   * @param index The index of the column to check.\n+   * @return A display string for the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getColumnLabel(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the specified column.\n+   *\n+   * @param index The index of the column to return the name of.\n+   * @return The name of the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getColumnName(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the schema that contains the specified\n+   * column.\n+   *\n+   * @param index The index of the column to check the schema name for.\n+   * @return The name of the schema that contains the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getSchemaName(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the precision of the specified column, which is the\n+   * number of decimal digits it contains.\n+   *\n+   * @param index The index of the column to check the precision on.\n+   * @return The precision of the specified column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getPrecision(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the scale of the specified column, which is the\n+   * number of digits to the right of the decimal point.\n+   *\n+   * @param index The index column to check the scale of.\n+   * @return The scale of the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getScale(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the table containing the specified\n+   * column.\n+   *\n+   * @param index The index of the column to check the table name for.\n+   * @return The name of the table containing the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getTableName(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the catalog containing the specified\n+   * column.\n+   *\n+   * @param index The index of the column to check the catalog name for.\n+   * @return The name of the catalog containing the column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getCatalogName(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the SQL type of the specified column.  This will\n+   * be one of the constants from <code>Types</code>.\n+   *\n+   * @param index The index of the column to check the SQL type of.\n+   * @return The SQL type for this column.\n+   * @exception SQLException If an error occurs.\n+   * @see Types\n+   */\n+  public int getColumnType(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the SQL type for this column.\n+   *\n+   * @param index The index of the column to check the SQL type name for.\n+   * @return The name of the SQL type for this column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getColumnTypeName(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the specified column is read only.\n+   *\n+   * @param index The index of the column to check.\n+   * @return <code>true</code> if the column is read only, <code>false</code>\n+   *         otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isReadOnly(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the column may be writable.  This\n+   * does not guarantee that a write will be successful.\n+   *\n+   * @param index The index of the column to check for writability.\n+   * @return <code>true</code> if the column may be writable,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isWritable(int column) throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the column is writable.  This\n+   * does guarantee that a write will be successful.\n+   *\n+   * @param index The index of the column to check for writability.\n+   * @return <code>true</code> if the column is writable,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean isDefinitelyWritable(int column) throws SQLException;\n+\n+  /**\n+   * This method returns the name of the Java class which will be used to\n+   * create objects representing the data in this column.\n+   *\n+   * @param index The index of the column to check.\n+   * @return The name of the Java class that will be used for values in\n+   *         this column.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getColumnClassName(int column) throws SQLException;\n+}"}, {"sha": "1d1c205ec56696480bf5678a9cab04607754e7cb", "filename": "libjava/java/sql/SQLData.java", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLData.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -39,47 +39,34 @@\n package java.sql;\n \n /**\n-  * This interface is used for mapping SQL data to user defined datatypes.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface SQLData\n+ * This interface is used for mapping SQL data to user defined datatypes.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface SQLData \n {\n+  /**\n+   * This method returns the user defined datatype name for this object.\n+   *\n+   * @return The user defined data type name for this object.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getSQLTypeName() throws SQLException;\n \n-/**\n-  * This method returns the user defined datatype name for this object.\n-  *\n-  * @return The user defined data type name for this object.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getSQLTypeName() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method populates the data in the object from the specified stream.\n-  *\n-  * @param stream The stream to read the data from.\n-  * @param name The data type name of the data on the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-readSQL(SQLInput stream, String name) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the data in this object to the specified stream.\n-  *\n-  * @param stream The stream to write the data to.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeSQL(SQLOutput stream) throws SQLException;\n-\n-} // interface SQLData\n+  /**\n+   * This method populates the data in the object from the specified stream.\n+   *\n+   * @param stream The stream to read the data from.\n+   * @param name The data type name of the data on the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void readSQL(SQLInput stream, String typeName) throws SQLException;\n \n+  /**\n+   * This method writes the data in this object to the specified stream.\n+   *\n+   * @param stream The stream to write the data to.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeSQL(SQLOutput stream) throws SQLException;\n+}"}, {"sha": "892330228dbc704b3f3c851de610f21e5d055601", "filename": "libjava/java/sql/SQLException.java", "status": "modified", "additions": 123, "deletions": 177, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLException.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -39,183 +39,129 @@\n package java.sql;\n \n /**\n-  * This exception is thrown when a database error occurs.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class SQLException extends Exception\n-{\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n+ * This exception is thrown when a database error occurs.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This is the next exception in the chain\n-  * @serialized\n-  */\n-private SQLException next;\n-\n-/**\n-  * This is the state of the SQL statement at the time of the error.\n-  * @serialized\n-  */\n-private String SQLState;\n-\n-/**\n-  * The vendor error code for this error\n-  * @serialized\n-  */\n-private int vendorCode;\n-\n-/*************************************************************************/\n-\n-/**\n-  * Static Variables\n-  */\n-\n-/**\n-  * This is the serialization UID for this class\n-  */\n-private static final long serialVersionUID = 2135244094396331484L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of <code>SQLException</code>\n-  * that does not have a descriptive messages and SQL state, and which\n-  * has a vendor error code of 0.\n-  */\n-public \n-SQLException()\n-{\n-  this(null, null, 0);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>SQLException</code>\n-  * with the specified descriptive error message.  The SQL state of this\n-  * instance will be <code>null</code> and the vendor error code will be 0.\n-  *\n-  * @param message A string describing the nature of the error.\n-  */\n-public \n-SQLException(String message)\n+public class SQLException extends Exception \n {\n-  this(message, null, 0);\n+  static final long serialVersionUID = 2135244094396331484L;\n+\n+  /**\n+   * This is the next exception in the chain\n+   */\n+  private SQLException next;\n+\n+  /**\n+   * This is the state of the SQL statement at the time of the error.\n+   */\n+  private String SQLState;\n+\n+  /**\n+   * The vendor error code for this error\n+   */\n+  private int vendorCode;\n+\n+  /**\n+   * This method initializes a nwe instance of <code>SQLException</code>\n+   * with the specified descriptive error message, SQL state string, and\n+   * vendor code.\n+   *\n+   * @param message A string describing the nature of the error.\n+   * @param SQLState A string containing the SQL state of the error.\n+   * @param vendorCode The vendor error code associated with this error.\n+   */\n+  public SQLException(String message, String SQLState, int vendorCode)\n+  {\n+    super(message);\n+    this.SQLState = SQLState;\n+    this.vendorCode = vendorCode;  \n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLException</code>\n+   * with the specified descriptive error message and SQL state string.\n+   * The vendor error code of this instance will be 0.\n+   *\n+   * @param message A string describing the nature of the error.\n+   * @param SQLState A string containing the SQL state of the error.\n+   */\n+  public SQLException(String message, String SQLState)\n+  {\n+    this(message, SQLState, 0);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLException</code>\n+   * with the specified descriptive error message.  The SQL state of this\n+   * instance will be <code>null</code> and the vendor error code will be 0.\n+   *\n+   * @param message A string describing the nature of the error.\n+   */\n+  public SQLException(String message)\n+  {\n+    this(message, null, 0);  \n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLException</code>\n+   * that does not have a descriptive messages and SQL state, and which\n+   * has a vendor error code of 0.\n+   */\n+  public SQLException()\n+  {\n+    this(null, null, 0);  \n+  }\n+\n+  /**\n+   * This method returns the SQLState information associated with this\n+   * error.  The value returned is a <code>String</code> which is formatted\n+   * using the XOPEN SQL state conventions.\n+   *\n+   * @return The SQL state, which may be <code>null</code>.\n+   */\n+  public String getSQLState()\n+  {\n+    return SQLState;\n+  }\n+\n+  /**\n+   * This method returns the vendor specific error code associated with \n+   * this error.\n+   *\n+   * @return The vendor specific error code associated with this error.\n+   */\n+  public int getErrorCode()\n+  {\n+    return vendorCode;\n+  }\n+\n+  /**\n+   * This method returns the exception that is chained to this object.\n+   *\n+   * @return The exception chained to this object, which may be \n+   *         <code>null</code>.\n+   */\n+  public SQLException getNextException()\n+  {\n+    return next;\n+  }\n+\n+  /**\n+   * This method adds a new exception to the end of the chain of exceptions\n+   * that are chained to this object.\n+   *\n+   * @param e The exception to add to the end of the chain.\n+   */\n+  public void setNextException(SQLException e)\n+  {\n+    if (e == null)\n+      return;\n+\n+    SQLException list_entry = this;\n+    while (list_entry.getNextException() != null)\n+      list_entry = list_entry.getNextException();\n+\n+    list_entry.next = e;\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>SQLException</code>\n-  * with the specified descriptive error message and SQL state string.\n-  * The vendor error code of this instance will be 0.\n-  *\n-  * @param message A string describing the nature of the error.\n-  * @param SQLState A string containing the SQL state of the error.\n-  */\n-public\n-SQLException(String message, String SQLState)\n-{\n-  this(message, SQLState, 0);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a nwe instance of <code>SQLException</code>\n-  * with the specified descriptive error message, SQL state string, and\n-  * vendor code.\n-  *\n-  * @param message A string describing the nature of the error.\n-  * @param SQLState A string containing the SQL state of the error.\n-  * @param vendorCode The vendor error code associated with this error.\n-  */\n-public\n-SQLException(String message, String SQLState, int vendorCode)\n-{\n-  super(message);\n-\n-  this.SQLState = SQLState;\n-  this.vendorCode = vendorCode;\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the SQLState information associated with this\n-  * error.  The value returned is a <code>String</code> which is formatted\n-  * using the XOPEN SQL state conventions.\n-  *\n-  * @return The SQL state, which may be <code>null</code>.\n-  */\n-public String\n-getSQLState()\n-{\n-  return(SQLState);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the vendor specific error code associated with \n-  * this error.\n-  *\n-  * @return The vendor specific error code associated with this error.\n-  */\n-public int\n-getErrorCode()\n-{\n-  return(vendorCode);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the exception that is chained to this object.\n-  *\n-  * @return The exception chained to this object, which may be \n-  * <code>null</code>.\n-  */\n-public SQLException\n-getNextException()\n-{\n-  return(next);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method adds a new exception to the end of the chain of exceptions\n-  * that are chained to this object.\n-  *\n-  * @param e The exception to add to the end of the chain.\n-  */\n-public void\n-setNextException(SQLException e)\n-{\n-  if (e == null)\n-    return;\n-\n-  SQLException list_entry = this;\n-  while (list_entry.getNextException() != null)\n-    list_entry = list_entry.getNextException();\n-\n-  list_entry.next = e;\n-}\n-\n-} // class SQLException\n-"}, {"sha": "6fcec1fe4c43a400648c5dc572acec1227abff15", "filename": "libjava/java/sql/SQLInput.java", "status": "modified", "additions": 213, "deletions": 297, "changes": 510, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLInput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLInput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLInput.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* SQLInput.java -- Read SQL values from a stream\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,303 +41,219 @@\n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.net.URL;\n \n /**\n-  * This interface provides methods for reading values from a stream\n-  * that is connected to a SQL structured or distinct type.  It is used\n-  * for custom mapping of user defined data types.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface SQLInput\n+ * This interface provides methods for reading values from a stream\n+ * that is connected to a SQL structured or distinct type.  It is used\n+ * for custom mapping of user defined data types.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface SQLInput \n {\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>String</code>.\n-  *\n-  * @return The value read from the stream as a <code>String</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-readString() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>boolean</code>.\n-  *\n-  * @return The value read from the stream as a <code>boolean</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-readBoolean() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>byte</code>.\n-  *\n-  * @return The value read from the stream as a <code>byte</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract byte\n-readByte() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>short</code>.\n-  *\n-  * @return The value read from the stream as a <code>short</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract short\n-readShort() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>int</code>.\n-  *\n-  * @return The value read from the stream as an <code>int</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-readInt() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>long</code>.\n-  *\n-  * @return The value read from the stream as a <code>long</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract long\n-readLong() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>float</code>.\n-  *\n-  * @return The value read from the stream as a <code>float</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract float\n-readFloat() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>double</code>.\n-  *\n-  * @return The value read from the stream as a <code>double</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract double\n-readDouble() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>BigDecimal</code>.\n-  *\n-  * @return The value read from the stream as a <code>BigDecimal</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract BigDecimal\n-readBigDecimal() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * byte array\n-  *\n-  * @return The value read from the stream as a byte array. \n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract byte[]\n-readBytes() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>java.sql.Date</code>.\n-  *\n-  * @return The value read from the stream as a <code>java.sql.Date</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Date\n-readDate() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>java.sql.Time</code>.\n-  *\n-  * @return The value read from the stream as a <code>java.sql.Time</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Time\n-readTime() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>java.sql.Timestamp</code>.\n-  *\n-  * @return The value read from the stream as a <code>java.sql.Timestamp</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract java.sql.Timestamp\n-readTimestamp() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a ASCII text\n-  * <code>InputStream</code>.\n-  *\n-  * @return The value read from the stream as an <code>InputStream</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract InputStream\n-readAsciiStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a binary\n-  * <code>InputStream</code>.\n-  *\n-  * @return The value read from the stream as an <code>InputStream</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract InputStream\n-readBinaryStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a character\n-  * <code>Reader</code>.\n-  *\n-  * @return The value read from the stream as a <code>Reader</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Reader\n-readCharacterStream() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java\n-  * <code>Object</code>.\n-  *\n-  * @return The value read from the stream as an <code>Object</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object\n-readObject() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java SQL\n-  * <code>Ref</code>.\n-  *\n-  * @return The value read from the stream as an <code>Ref</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Ref\n-readRef() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java SQL\n-  * <code>Blob</code>.\n-  *\n-  * @return The value read from the stream as a <code>Blob</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Blob\n-readBlob() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java SQL\n-  * <code>Clob</code>.\n-  *\n-  * @return The value read from the stream as a <code>Clob</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Clob\n-readClob() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method reads the next item from the stream a Java SQL\n-  * <code>Array</code>.\n-  *\n-  * @return The value read from the stream as an <code>Array</code>.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Array\n-readArray() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests whether or not the last value read was a SQL\n-  * NULL value.\n-  *\n-  * @return <code>true</code> if the last value read was a NULL,\n-  * <code>false</code> otherwise.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-wasNull() throws SQLException;\n-\n-} // interface SQLInput\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>String</code>.\n+   *\n+   * @return The value read from the stream as a <code>String</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String readString() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>boolean</code>.\n+   *\n+   * @return The value read from the stream as a <code>boolean</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean readBoolean() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>byte</code>.\n+   *\n+   * @return The value read from the stream as a <code>byte</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public byte readByte() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>short</code>.\n+   *\n+   * @return The value read from the stream as a <code>short</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public short readShort() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>int</code>.\n+   *\n+   * @return The value read from the stream as an <code>int</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int readInt() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>long</code>.\n+   *\n+   * @return The value read from the stream as a <code>long</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public long readLong() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>float</code>.\n+   *\n+   * @return The value read from the stream as a <code>float</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public float readFloat() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>double</code>.\n+   *\n+   * @return The value read from the stream as a <code>double</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public double readDouble() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>BigDecimal</code>.\n+   *\n+   * @return The value read from the stream as a <code>BigDecimal</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public BigDecimal readBigDecimal() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * byte array\n+   *\n+   * @return The value read from the stream as a byte array. \n+   * @exception SQLException If an error occurs.\n+   */\n+  public byte[] readBytes() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>java.sql.Date</code>.\n+   *\n+   * @return The value read from the stream as a <code>java.sql.Date</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Date readDate() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>java.sql.Time</code>.\n+   *\n+   * @return The value read from the stream as a <code>java.sql.Time</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Time readTime() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>java.sql.Timestamp</code>.\n+   *\n+   * @return The value read from the stream as a <code>java.sql.Timestamp</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Timestamp readTimestamp() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a character\n+   * <code>Reader</code>.\n+   *\n+   * @return The value read from the stream as a <code>Reader</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Reader readCharacterStream() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a ASCII text\n+   * <code>InputStream</code>.\n+   *\n+   * @return The value read from the stream as an <code>InputStream</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public InputStream readAsciiStream() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a binary\n+   * <code>InputStream</code>.\n+   *\n+   * @return The value read from the stream as an <code>InputStream</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public InputStream readBinaryStream() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java\n+   * <code>Object</code>.\n+   *\n+   * @return The value read from the stream as an <code>Object</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object readObject() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java SQL\n+   * <code>Ref</code>.\n+   *\n+   * @return The value read from the stream as an <code>Ref</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Ref readRef() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java SQL\n+   * <code>Blob</code>.\n+   *\n+   * @return The value read from the stream as a <code>Blob</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Blob readBlob() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java SQL\n+   * <code>Clob</code>.\n+   *\n+   * @return The value read from the stream as a <code>Clob</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Clob readClob() throws SQLException;\n+\n+  /**\n+   * This method reads the next item from the stream a Java SQL\n+   * <code>Array</code>.\n+   *\n+   * @return The value read from the stream as an <code>Array</code>.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Array readArray() throws SQLException;\n+\n+  /**\n+   * This method tests whether or not the last value read was a SQL\n+   * NULL value.\n+   *\n+   * @return <code>true</code> if the last value read was a NULL,\n+   *         <code>false</code> otherwise.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean wasNull() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public URL readURL() throws SQLException;\n+}\n "}, {"sha": "730e0c0589202a2d9b68983b7b050e6044a009f8", "filename": "libjava/java/sql/SQLOutput.java", "status": "modified", "additions": 212, "deletions": 297, "changes": 509, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLOutput.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLOutput.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLOutput.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* SQLOutput.java -- Write SQL values to a stream\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,302 +41,217 @@\n import java.io.InputStream;\n import java.io.Reader;\n import java.math.BigDecimal;\n+import java.net.URL;\n \n /**\n-  * This interface provides methods for writing Java types to a SQL stream.\n-  * It is used for implemented custom type mappings for user defined data\n-  * types.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface SQLOutput\n+ * This interface provides methods for writing Java types to a SQL stream.\n+ * It is used for implemented custom type mappings for user defined data\n+ * types.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface SQLOutput \n {\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>String</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeString(String value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>boolean</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeBoolean(boolean value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>byte</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeByte(byte value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>short</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeShort(short value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>int</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeInt(int value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>long</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeLong(long value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>float</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeFloat(float value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>double</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeDouble(double value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>BigDecimal</code>\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeBigDecimal(BigDecimal value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>byte</code> array\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeBytes(byte[] value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>java.sql.Date</code> \n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeDate(java.sql.Date value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>java.sql.Time</code> \n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeTime(java.sql.Time value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>java.sql.Timestamp</code> \n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeTimestamp(java.sql.Timestamp value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java character stream\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeCharacterStream(Reader value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified uninterpreted binary byte stream\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  * \n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeBinaryStream(InputStream value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified ASCII text stream\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  * \n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeAsciiStream(InputStream value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java <code>SQLData</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeObject(SQLData value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java SQL <code>Ref</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeRef(Ref value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java SQL <code>Blob</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeBlob(Blob value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java SQL <code>Clob</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeClob(Clob value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java SQL <code>Struct</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeStruct(Struct value) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method writes the specified Java SQL <code>Array</code> object\n-  * to the SQL stream.\n-  *\n-  * @param value The value to write to the stream.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-writeArray(Array value) throws SQLException;\n-\n-} // interface SQLOutput\n-\n+  /**\n+   * This method writes the specified Java <code>String</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeString(String x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>boolean</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeBoolean(boolean x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>byte</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeByte(byte x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>short</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeShort(short x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>int</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeInt(int x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>long</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeLong(long x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>float</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeFloat(float x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>double</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeDouble(double x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>BigDecimal</code>\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeBigDecimal(BigDecimal x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>byte</code> array\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeBytes(byte[] x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>java.sql.Date</code> \n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeDate(Date x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>java.sql.Time</code> \n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeTime(Time x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>java.sql.Timestamp</code> \n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeTimestamp(Timestamp x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java character stream\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeCharacterStream(Reader x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified ASCII text stream\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeAsciiStream(InputStream x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified uninterpreted binary byte stream\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeBinaryStream(InputStream x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java <code>SQLData</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeObject(SQLData x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java SQL <code>Ref</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeRef(Ref x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java SQL <code>Blob</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeBlob(Blob x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java SQL <code>Clob</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeClob(Clob x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java SQL <code>Struct</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeStruct(Struct x) throws SQLException;\n+\n+  /**\n+   * This method writes the specified Java SQL <code>Array</code> object\n+   * to the SQL stream.\n+   *\n+   * @param value The value to write to the stream.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void writeArray(Array x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void writeURL(URL x) throws SQLException;\n+}"}, {"sha": "10c6d78714fb800990f220fa8d90b21edac4318d", "filename": "libjava/java/sql/SQLPermission.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLPermission.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,57 @@\n+/* SQLPermission.java\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.sql;\n+\n+import java.security.BasicPermission;\n+\n+/**\n+ * @since 1.3\n+ */\n+public final class SQLPermission extends BasicPermission \n+{\n+  public SQLPermission(String name)\n+  {\n+    super(name);\n+  }\n+\n+  public SQLPermission(String name, String actions)\n+  {\n+    super(name, actions);\n+  }\n+}"}, {"sha": "fafb9b7c5ffc3a1123e3d8bf3a73163a331e447e", "filename": "libjava/java/sql/SQLWarning.java", "status": "modified", "additions": 77, "deletions": 115, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLWarning.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSQLWarning.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSQLWarning.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* SQLWarning.java -- Database access warnings.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,120 +39,82 @@\n package java.sql;\n \n /**\n-  * This exception is thrown when a database warning occurs.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class SQLWarning extends SQLException\n-{\n-\n-/*************************************************************************/\n-\n-/**\n-  * Static Variables\n-  */\n-\n-/**\n-  * This is the serialization UID for this class\n-  */\n-private static final long serialVersionUID = 3917336774604784856L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n+ * This exception is thrown when a database warning occurs.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This method initializes a new instance of <code>SQLWarning</code>\n-  * that does not have a descriptive messages and SQL state, and which\n-  * has a vendor error code of 0.\n-  */\n-public \n-SQLWarning()\n-{\n-  this(null, null, 0);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>SQLWarning</code>\n-  * with the specified descriptive error message.  The SQL state of this\n-  * instance will be <code>null</code> and the vendor error code will be 0.\n-  *\n-  * @param message A string describing the nature of the error.\n-  */\n-public \n-SQLWarning(String message)\n-{\n-  this(message, null, 0);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of <code>SQLWarning</code>\n-  * with the specified descriptive error message and SQL state string.\n-  * The vendor error code of this instance will be 0.\n-  *\n-  * @param message A string describing the nature of the error.\n-  * @param SQLState A string containing the SQL state of the error.\n-  */\n-public\n-SQLWarning(String message, String SQLState)\n+public class SQLWarning extends SQLException \n {\n-  this(message, SQLState, 0);\n+  static final long serialVersionUID = 3917336774604784856L;\n+\n+  /**\n+   * This method initializes a nwe instance of <code>SQLWarning</code>\n+   * with the specified descriptive error message, SQL state string, and\n+   * vendor code.\n+   *\n+   * @param message A string describing the nature of the error.\n+   * @param SQLState A string containing the SQL state of the error.\n+   * @param vendorCode The vendor error code associated with this error.\n+   */\n+  public SQLWarning(String reason, String SQLState, int vendorCode)\n+  {\n+    super(reason, SQLState, vendorCode);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLWarning</code>\n+   * with the specified descriptive error message and SQL state string.\n+   * The vendor error code of this instance will be 0.\n+   *\n+   * @param message A string describing the nature of the error.\n+   * @param SQLState A string containing the SQL state of the error.\n+   */\n+  public SQLWarning(String message, String SQLState)\n+  {\n+    super(message, SQLState);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLWarning</code>\n+   * with the specified descriptive error message.  The SQL state of this\n+   * instance will be <code>null</code> and the vendor error code will be 0.\n+   *\n+   * @param message A string describing the nature of the error.\n+   */\n+  public SQLWarning(String message)\n+  {\n+    super(message);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of <code>SQLWarning</code>\n+   * that does not have a descriptive messages and SQL state, and which\n+   * has a vendor error code of 0.\n+   */\n+  public SQLWarning()\n+  {\n+    super();\n+  }\n+\n+  /**\n+   * This method returns the exception that is chained to this object.\n+   *\n+   * @return The exception chained to this object, which may be \n+   *         <code>null</code>.\n+   */\n+  public SQLWarning getNextWarning()\n+  {\n+    return (SQLWarning) super.getNextException();\n+  }\n+\n+  /**\n+   * This method adds a new exception to the end of the chain of exceptions\n+   * that are chained to this object.\n+   *\n+   * @param w The exception to add to the end of the chain.\n+   */\n+  public void setNextWarning(SQLWarning w)\n+  {\n+    super.setNextException(w);\n+  }\n }\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a nwe instance of <code>SQLWarning</code>\n-  * with the specified descriptive error message, SQL state string, and\n-  * vendor code.\n-  *\n-  * @param message A string describing the nature of the error.\n-  * @param SQLState A string containing the SQL state of the error.\n-  * @param vendorCode The vendor error code associated with this error.\n-  */\n-public\n-SQLWarning(String message, String SQLState, int vendorCode)\n-{\n-  super(message, SQLState, vendorCode);\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns the exception that is chained to this object.\n-  *\n-  * @return The exception chained to this object, which may be \n-  * <code>null</code>.\n-  */\n-public SQLWarning\n-getNextWarning()\n-{\n-  return((SQLWarning)super.getNextException());\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method adds a new exception to the end of the chain of exceptions\n-  * that are chained to this object.\n-  *\n-  * @param e The exception to add to the end of the chain.\n-  */\n-public void\n-setNextWarning(SQLWarning e)\n-{\n-  super.setNextException(e);\n-}\n-\n-} // class SQLWarning\n-"}, {"sha": "f9b839ba8c74f857730de032aac55483d823e648", "filename": "libjava/java/sql/Savepoint.java", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSavepoint.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FSavepoint.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FSavepoint.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,55 @@\n+/* SavePoint.java -- Returns information about the ResultSet\n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.sql;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface Savepoint \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public int getSavepointId() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getSavepointName() throws SQLException;\n+}"}, {"sha": "fd8a99950d2f5adbf7cdb03d981a05d3fe137779", "filename": "libjava/java/sql/Statement.java", "status": "modified", "additions": 325, "deletions": 383, "changes": 708, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FStatement.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FStatement.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStatement.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Statement.java -- Interface for executing SQL statements.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -39,386 +39,328 @@\n package java.sql;\n \n /**\n-  * This interface provides a mechanism for executing SQL statements.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Statement\n+ * This interface provides a mechanism for executing SQL statements.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Statement \n {\n-\n-/**\n-  * This method executes the specified SQL SELECT statement and returns a\n-  * (possibly empty) <code>ResultSet</code> with the results of the query.\n-  *\n-  * @param sql The SQL statement to execute.\n-  *\n-  * @return The result set of the SQL statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract ResultSet\n-executeQuery(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes the specified SQL INSERT, UPDATE, or DELETE statement\n-  * and returns the number of rows affected, which may be 0.\n-  * \n-  * @param sql The SQL statement to execute.\n-  *\n-  * @return The number of rows affected by the SQL statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-executeUpdate(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method closes the statement and frees any associated resources.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-close() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the maximum length of any column value in bytes.\n-  *\n-  * @return The maximum length of any column value in bytes.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getMaxFieldSize() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the limit for the maximum length of any column in bytes.\n-  *\n-  * @param maxsize The new maximum length of any column in bytes.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setMaxFieldSize(int maxsize) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the maximum possible number of rows in a result set.\n-  *\n-  * @return The maximum possible number of rows in a result set.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getMaxRows() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the maximum number of rows that can be present in a\n-  * result set.\n-  *\n-  * @param maxrows The maximum possible number of rows in a result set.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setMaxRows(int maxrows) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the local escape processing mode on or off.  The\n-  * default value is on.\n-  *\n-  * @param escape <code>true</code> to enable local escape processing, \n-  * <code>false</code> to disable it.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setEscapeProcessing(boolean esacpe) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * The method returns the number of seconds a statement may be in process\n-  * before timing out.  A value of 0 means there is no timeout.\n-  *\n-  * @return The SQL statement timeout in seconds.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getQueryTimeout() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the number of seconds a statement may be in process\n-  * before timing out.  A value of 0 means there is no timeout.\n-  *\n-  * @param timeout The new SQL statement timeout value.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setQueryTimeout(int timeout) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method cancels an outstanding statement, if the database supports\n-  * that operation.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-cancel() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the first SQL warning attached to this statement.\n-  * Subsequent warnings will be chained to this one.\n-  *\n-  * @return The first SQL warning for this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract SQLWarning\n-getWarnings() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method clears any SQL warnings that have been attached to this\n-  * statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-clearWarnings() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the cursor name that will be used by the result set.\n-  *\n-  * @param name The cursor name to use for this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setCursorName(String name) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes an arbitrary SQL statement of any time.  The\n-  * methods <code>getResultSet</code>, <code>getMoreResults</code> and\n-  * <code>getUpdateCount</code> retrieve the results.\n-  *\n-  * @return <code>true</code> if a result set was returned, <code>false</code>\n-  * if an update count was returned.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract boolean\n-execute(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the result set of the SQL statement that was\n-  * executed.  This should be called only once per result set returned.\n-  *\n-  * @return The result set of the query, or <code>null</code> if there was\n-  * no result set (for example, if the statement was an UPDATE).\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see execute\n-  */\n-public abstract ResultSet\n-getResultSet() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the update count of the SQL statement that was\n-  * executed.  This should be called only once per executed SQL statement.\n-  *\n-  * @return The update count of the query, or -1 if there was no update\n-  * count (for example, if the statement was a SELECT).\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see execute\n-  */\n-public abstract int\n-getUpdateCount() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method advances the result set pointer to the next result set, \n-  * which can then be retrieved using <code>getResultSet</code>\n-  *\n-  * @return <code>true</code> if there is another result set, \n-  * <code>false</code> otherwise (for example, the next result is an\n-  * update count).\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see execute\n-  */\n-public abstract boolean\n-getMoreResults() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the current direction that the driver thinks the\n-  * result set will be accessed int.\n-  *\n-  * @return The direction the result set will be accessed in (????)\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getFetchDirection() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method informs the driver which direction the result set will\n-  * be accessed in.\n-  *\n-  * @param direction The direction the result set will be accessed in (?????)\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setFetchDirection(int direction) throws SQLException;\n-  \n-/*************************************************************************/\n-\n-/**\n-  * This method returns the number of rows the driver believes should be\n-  * fetched from the database at a time.\n-  *\n-  * @return The number of rows that will be fetched from the database at a time.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int\n-getFetchSize() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method informs the driver how many rows it should fetch from the\n-  * database at a time.\n-  *\n-  * @param numrows The number of rows the driver should fetch at a time\n-  * to populate the result set.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-setFetchSize(int numrows) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the concurrency type of the result set for this\n-  * statement. This will be one of the concurrency types defined in\n-  * <code>ResultSet</code>.\n-  *\n-  * @return The concurrency type of the result set for this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract int\n-getResultSetConcurrency() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the result set type for this statement.  This will\n-  * be one of the result set types defined in <code>ResultSet</code>.\n-  *\n-  * @return The result set type for this statement.\n-  *\n-  * @exception SQLException If an error occurs.\n-  *\n-  * @see ResultSet\n-  */\n-public abstract int\n-getResultSetType() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method adds a SQL statement to a SQL batch.  A driver is not\n-  * required to implement this method.\n-  *\n-  * @param sql The sql statement to add to the batch.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-addBatch(String sql) throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method clears out any SQL statements that have been populated in\n-  * the current batch.  A driver is not required to implement this method.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract void\n-clearBatch() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method executes the SQL batch and returns an array of update\n-  * counts - one for each SQL statement in the batch - ordered in the same\n-  * order the statements were added to the batch.  A driver is not required\n-  * to implement this method.\n-  *\n-  * @return An array of update counts for this batch.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract int[]\n-executeBatch() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the <code>Connection</code> instance that was\n-  * used to create this object.\n-  *\n-  * @return The connection used to create this object.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Connection\n-getConnection() throws SQLException;\n-\n-} // interface Statement\n-\n+  public static final int CLOSE_CURRENT_RESULT = 1;\n+  public static final int KEEP_CURRENT_RESULT = 2;\n+  public static final int CLOSE_ALL_RESULTS = 3;\n+  public static final int SUCCESS_NO_INFO = -2;\n+  public static final int EXECUTE_FAILED = -3;\n+  public static final int RETURN_GENERATED_KEYS = 1;\n+  public static final int NO_GENERATED_KEYS = 2;\n+\n+  /**\n+   * This method executes the specified SQL SELECT statement and returns a\n+   * (possibly empty) <code>ResultSet</code> with the results of the query.\n+   *\n+   * @param sql The SQL statement to execute.\n+   * @return The result set of the SQL statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public ResultSet executeQuery(String sql) throws SQLException;\n+\n+  /**\n+   * This method executes the specified SQL INSERT, UPDATE, or DELETE statement\n+   * and returns the number of rows affected, which may be 0.\n+   * \n+   * @param sql The SQL statement to execute.\n+   * @return The number of rows affected by the SQL statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int executeUpdate(String sql) throws SQLException;\n+\n+  /**\n+   * This method closes the statement and frees any associated resources.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void close() throws SQLException;\n+\n+  /**\n+   * This method returns the maximum length of any column value in bytes.\n+   *\n+   * @return The maximum length of any column value in bytes.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getMaxFieldSize() throws SQLException;\n+\n+  /**\n+   * This method sets the limit for the maximum length of any column in bytes.\n+   *\n+   * @param maxsize The new maximum length of any column in bytes.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setMaxFieldSize(int max) throws SQLException;\n+\n+  /**\n+   * This method returns the maximum possible number of rows in a result set.\n+   *\n+   * @return The maximum possible number of rows in a result set.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getMaxRows() throws SQLException;\n+\n+  /**\n+   * This method sets the maximum number of rows that can be present in a\n+   * result set.\n+   *\n+   * @param maxrows The maximum possible number of rows in a result set.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setMaxRows(int max) throws SQLException;\n+\n+  /**\n+   * This method sets the local escape processing mode on or off.  The\n+   * default value is on.\n+   *\n+   * @param escape <code>true</code> to enable local escape processing, \n+   *        <code>false</code> to disable it.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setEscapeProcessing(boolean enable) throws SQLException;\n+\n+  /**\n+   * The method returns the number of seconds a statement may be in process\n+   * before timing out.  A value of 0 means there is no timeout.\n+   *\n+   * @return The SQL statement timeout in seconds.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getQueryTimeout() throws SQLException;\n+\n+  /**\n+   * This method sets the number of seconds a statement may be in process\n+   * before timing out.  A value of 0 means there is no timeout.\n+   *\n+   * @param timeout The new SQL statement timeout value.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setQueryTimeout(int seconds) throws SQLException;\n+\n+  /**\n+   * This method cancels an outstanding statement, if the database supports\n+   * that operation.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void cancel() throws SQLException;\n+\n+  /**\n+   * This method returns the first SQL warning attached to this statement.\n+   * Subsequent warnings will be chained to this one.\n+   *\n+   * @return The first SQL warning for this statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public SQLWarning getWarnings() throws SQLException;\n+\n+  /**\n+   * This method clears any SQL warnings that have been attached to this\n+   * statement.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void clearWarnings() throws SQLException;\n+\n+  /**\n+   * This method sets the cursor name that will be used by the result set.\n+   *\n+   * @param name The cursor name to use for this statement.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setCursorName(String name) throws SQLException;\n+\n+  /**\n+   * This method executes an arbitrary SQL statement of any time.  The\n+   * methods <code>getResultSet</code>, <code>getMoreResults</code> and\n+   * <code>getUpdateCount</code> retrieve the results.\n+   *\n+   * @return <code>true</code> if a result set was returned, <code>false</code>\n+   *         if an update count was returned.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public boolean execute(String sql) throws SQLException;\n+\n+  /**\n+   * This method returns the result set of the SQL statement that was\n+   * executed.  This should be called only once per result set returned.\n+   *\n+   * @return The result set of the query, or <code>null</code> if there was\n+   *         no result set (for example, if the statement was an UPDATE).\n+   * @exception SQLException If an error occurs.\n+   * @see execute\n+   */\n+  public ResultSet getResultSet() throws SQLException;\n+\n+  /**\n+   * This method returns the update count of the SQL statement that was\n+   * executed.  This should be called only once per executed SQL statement.\n+   *\n+   * @return The update count of the query, or -1 if there was no update\n+   *         count (for example, if the statement was a SELECT).\n+   * @exception SQLException If an error occurs.\n+   * @see execute\n+   */\n+  public int getUpdateCount() throws SQLException;\n+\n+  /**\n+   * This method advances the result set pointer to the next result set, \n+   * which can then be retrieved using <code>getResultSet</code>\n+   *\n+   * @return <code>true</code> if there is another result set, \n+   *         <code>false</code> otherwise (for example, the next result is an\n+   *         update count).\n+   * @exception SQLException If an error occurs.\n+   * @see execute\n+   */\n+  public boolean getMoreResults() throws SQLException;\n+\n+  /**\n+   * This method informs the driver which direction the result set will\n+   * be accessed in.\n+   *\n+   * @param direction The direction the result set will be accessed in (?????)\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setFetchDirection(int direction) throws SQLException;\n+\n+  /**\n+   * This method returns the current direction that the driver thinks the\n+   * result set will be accessed int.\n+   *\n+   * @return The direction the result set will be accessed in (????)\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getFetchDirection() throws SQLException;\n+\n+  /**\n+   * This method informs the driver how many rows it should fetch from the\n+   * database at a time.\n+   *\n+   * @param numrows The number of rows the driver should fetch at a time\n+   *        to populate the result set.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void setFetchSize(int rows) throws SQLException;\n+\n+  /**\n+   * This method returns the number of rows the driver believes should be\n+   * fetched from the database at a time.\n+   *\n+   * @return The number of rows that will be fetched from the database at a time.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int getFetchSize() throws SQLException;\n+\n+  /**\n+   * This method returns the concurrency type of the result set for this\n+   * statement. This will be one of the concurrency types defined in\n+   * <code>ResultSet</code>.\n+   *\n+   * @return The concurrency type of the result set for this statement.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */\n+  public int getResultSetConcurrency() throws SQLException;\n+\n+  /**\n+   * This method returns the result set type for this statement.  This will\n+   * be one of the result set types defined in <code>ResultSet</code>.\n+   *\n+   * @return The result set type for this statement.\n+   * @exception SQLException If an error occurs.\n+   * @see ResultSet\n+   */\n+  public int getResultSetType() throws SQLException;\n+\n+  /**\n+   * This method adds a SQL statement to a SQL batch.  A driver is not\n+   * required to implement this method.\n+   *\n+   * @param sql The sql statement to add to the batch.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void addBatch(String sql) throws SQLException;\n+\n+  /**\n+   * This method clears out any SQL statements that have been populated in\n+   * the current batch.  A driver is not required to implement this method.\n+   *\n+   * @exception SQLException If an error occurs.\n+   */\n+  public void clearBatch() throws SQLException;\n+\n+  /**\n+   * This method executes the SQL batch and returns an array of update\n+   * counts - one for each SQL statement in the batch - ordered in the same\n+   * order the statements were added to the batch.  A driver is not required\n+   * to implement this method.\n+   *\n+   * @return An array of update counts for this batch.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public int[] executeBatch() throws SQLException;\n+\n+  /**\n+   * This method returns the <code>Connection</code> instance that was\n+   * used to create this object.\n+   *\n+   * @return The connection used to create this object.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Connection getConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean getMoreResults(int current) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ResultSet getGeneratedKeys() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int executeUpdate(String sql, int autoGeneratedKeys)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int executeUpdate(String sql, int[] columnIndexes)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int executeUpdate(String sql, String[] columnNames)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean execute(String sql, int autoGeneratedKeys)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean execute(String sql, int[] columnIndexes) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean execute(String sql, String[] columnNames)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getResultSetHoldability() throws SQLException;\n+}"}, {"sha": "beec072fa1da7149e47b521c350d71968beb64a1", "filename": "libjava/java/sql/Struct.java", "status": "modified", "additions": 34, "deletions": 48, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FStruct.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FStruct.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FStruct.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Struct.java -- Mapping for a SQL structured type.\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,51 +41,37 @@\n import java.util.Map;\n \n /**\n-  * This interface implements the standard type mapping for a SQL \n-  * structured type.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public interface Struct\n+ * This interface implements the standard type mapping for a SQL \n+ * structured type.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n+public interface Struct \n {\n-\n-/**\n-  * This method returns the name of the SQL structured type for this\n-  * object.\n-  *\n-  * @return The SQL structured type name.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract String\n-getSQLTypeName() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the attributes of this SQL structured type.\n-  *\n-  * @return The attributes of this structure type.\n-  *\n-  * @exception SQLException If an error occurs.\n-  */\n-public abstract Object[]\n-getAttributes() throws SQLException;\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the attributes of this SQL structured type.\n-  * The specified map of type mappings overrides the default mappings.\n-  *\n-  * @param map The map of SQL type mappings.\n-  *\n-  * @return The attributes of this structure type.\n-  *\n-  * @exception SQLException If a error occurs.\n-  */\n-public abstract Object[]\n-getAttributes(Map map) throws SQLException;\n-\n-} // interface Struct\n-\n+  /**\n+   * This method returns the name of the SQL structured type for this\n+   * object.\n+   *\n+   * @return The SQL structured type name.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public String getSQLTypeName() throws SQLException;\n+\n+  /**\n+   * This method returns the attributes of this SQL structured type.\n+   *\n+   * @return The attributes of this structure type.\n+   * @exception SQLException If an error occurs.\n+   */\n+  public Object[] getAttributes() throws SQLException;\n+\n+  /**\n+   * This method returns the attributes of this SQL structured type.\n+   * The specified map of type mappings overrides the default mappings.\n+   *\n+   * @param map The map of SQL type mappings.\n+   * @return The attributes of this structure type.\n+   * @exception SQLException If a error occurs.\n+   */\n+  public Object[] getAttributes(Map map) throws SQLException;\n+}"}, {"sha": "81f5d8cbf7bd73d1773e38e925d4537f93d88861", "filename": "libjava/java/sql/Time.java", "status": "modified", "additions": 74, "deletions": 106, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTime.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTime.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTime.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -1,5 +1,5 @@\n /* Time.java -- Wrapper around java.util.Date\n-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1999, 2000, 2002 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -41,113 +41,81 @@\n import java.text.SimpleDateFormat;\n \n /**\n-  * This class is a wrapper around java.util.Date to allow the JDBC\n-  * driver to identify the value as a SQL Time.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n-public class Time extends java.util.Date\n-{\n-\n-/*\n- * Class Variables\n- */\n-\n-/**\n-  * Used for parsing and formatting this date.\n-  */\n-private static SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n-\n-/**\n-  * This is the serialization UID for this class.\n-  */\n-private static final long serialVersionUID = 8397324403548013681L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Methods\n- */\n-\n-/**\n-  * This method returns a new instance of this class by parsing a\n-  * date in JDBC format into a Java date.\n-  *\n-  * @param str The string to parse.\n-  *\n-  * @return The resulting <code>java.sql.Time</code> value. \n-  */\n-public static Time\n-valueOf(String str)\n-{\n-  try\n-    {\n-      java.util.Date d = (java.util.Date)sdf.parseObject(str);\n-      return(new Time(d.getTime()));\n-    }\n-  catch(Exception e)\n-    {\n-      return(null);\n-    }\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n+ * This class is a wrapper around java.util.Date to allow the JDBC\n+ * driver to identify the value as a SQL Time.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n  */\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified year, month, and day.\n-  *\n-  * @param hour The hour for this Time (0-23)\n-  * @param minute The minute for this time (0-59)\n-  * @param second The second for this time (0-59)\n-  *\n-  * @deprecated\n-  */\n-public \n-Time(int hour, int minute, int second)\n-{\n-  super(System.currentTimeMillis());\n-\n-  setHours(hour);\n-  setMinutes(minute);\n-  setSeconds(second);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified time value representing the number of seconds since \n-  * Jan 1, 1970 at 12:00 midnight GMT.\n-  *\n-  * @param time The time value to intialize this <code>Time</code> to.\n-  */\n-public\n-Time(long date)\n+public class Time extends java.util.Date\n {\n-  super(date);\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n+  static final long serialVersionUID = 8397324403548013681L;\n+\n+  /**\n+   * Used for parsing and formatting this date.\n+   */\n+  private static SimpleDateFormat sdf = new SimpleDateFormat(\"HH:mm:ss\");\n+\n+\n+  /**\n+   * This method returns a new instance of this class by parsing a\n+   * date in JDBC format into a Java date.\n+   *\n+   * @param str The string to parse.\n+   * @return The resulting <code>java.sql.Time</code> value. \n+   */\n+  public static Time valueOf(String str)\n+  {\n+    try\n+      {\n+\tjava.util.Date d = (java.util.Date) sdf.parseObject(str);\n+\treturn new Time(d.getTime());\n+      }\n+    catch (Exception e)\n+      {\n+\treturn null;\n+      }\n+  }\n+\n+  /**\n+    * This method initializes a new instance of this class with the\n+    * specified year, month, and day.\n+    *\n+    * @param hour The hour for this Time (0-23)\n+    * @param minute The minute for this time (0-59)\n+    * @param second The second for this time (0-59)\n+    * @deprecated\n+    */\n+  public Time(int hour, int minute, int second)\n+  {\n+    super(System.currentTimeMillis());\n+\n+    setHours(hour);\n+    setMinutes(minute);\n+    setSeconds(second);\n+  }\n+\n+  /**\n+   * This method initializes a new instance of this class with the\n+   * specified time value representing the number of seconds since \n+   * Jan 1, 1970 at 12:00 midnight GMT.\n+   *\n+   * @param time The time value to intialize this <code>Time</code> to.\n+   */\n+  public Time(long date)\n+  {\n+    super(date);\n+  }\n+\n+  /**\n+   * This method returns this date in JDBC format.\n+   *\n+   * @return This date as a string.\n+   */\n+  public String\n+  toString()\n+  {\n+    return sdf.format(this);\n+  }\n \n-/**\n-  * This method returns this date in JDBC format.\n-  *\n-  * @return This date as a string.\n-  */\n-public String\n-toString()\n-{\n-  return(sdf.format(this));\n }\n \n-} // class Time\n-"}, {"sha": "c42ff3ca9e9a5c216c277d0b87cfe6628b8cd525", "filename": "libjava/java/sql/Timestamp.java", "status": "modified", "additions": 207, "deletions": 253, "changes": 460, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTimestamp.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTimestamp.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTimestamp.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -41,261 +41,215 @@\n import java.text.SimpleDateFormat;\n \n /**\n-  * This class is a wrapper around java.util.Date to allow the JDBC\n-  * driver to identify the value as a SQL Timestamp.  Note that this\n-  * class also adds an additional field for nano-seconds, and so \n-  * is not completely identical to <code>java.util.Date</code> as\n-  * the <code>java.sql.Date</code> and <code>java.sql.Time</code>\n-  * classes are.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This class is a wrapper around java.util.Date to allow the JDBC\n+ * driver to identify the value as a SQL Timestamp.  Note that this\n+ * class also adds an additional field for nano-seconds, and so \n+ * is not completely identical to <code>java.util.Date</code> as\n+ * the <code>java.sql.Date</code> and <code>java.sql.Time</code>\n+ * classes are.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public class Timestamp extends java.util.Date\n {\n+  static final long serialVersionUID = 3581463369166924961L;\n \n-/*\n- * Class Variables\n- */\n-\n-/**\n-  * Used for parsing and formatting this date.\n-  */\n+  /**\n+   * Used for parsing and formatting this date.\n+   */\n   // Millisecond will have to be close enough for now.\n-private static SimpleDateFormat parse_sdf = \n-  new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSS\");\n-\n-private static SimpleDateFormat format_sdf =\n-  new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-\n-/**\n-  * This is the serialization UID for this class.\n-  */\n-private static final long serialVersionUID = 3581463369166924961L;\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Variables\n- */\n-\n-/**\n-  * @serial The nanosecond value for this object\n-  */\n-private int nanos;\n-\n-/*************************************************************************/\n-\n-/*\n- * Class Methods\n- */\n-\n-/**\n-  * This method returns a new instance of this class by parsing a\n-  * date in JDBC format into a Java date.\n-  *\n-  * @param str The string to parse.\n-  *\n-  * @return The resulting <code>java.sql.Timestamp</code> value. \n-  */\n-public static Timestamp\n-valueOf(String str)\n-{\n-  try\n-    {\n-      Date d = (Date)parse_sdf.parseObject(str);\n-      return(new Timestamp(d.getTime()));\n-    }\n-  catch(Exception e)\n-    {\n-      return(null);\n-    }\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Constructors\n- */\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified year, month, and day.\n-  *\n-  * @param year The year for this Timestamp (year - 1900)\n-  * @param month The month for this Timestamp (0-11)\n-  * @param day The day for this Timestamp (1-31)\n-  * @param hour The hour for this Timestamp (0-23)\n-  * @param minute The minute for this Timestamp (0-59)\n-  * @param second The second for this Timestamp (0-59)\n-  * @param nanos The nanosecond value for this Timestamp (0 to 999,999,9999)\n-  *\n-  * @deprecated\n-  */\n-public \n-Timestamp(int year, int month, int day, int hour, int minute, int second,\n-          int nanos)\n-{\n-  super(year, month, day, hour, minute, second);\n-\n-  this.nanos = nanos;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method initializes a new instance of this class with the\n-  * specified time value representing the number of seconds since \n-  * Jan 1, 1970 at 12:00 midnight GMT.\n-  *\n-  * @param time The time value to intialize this <code>Time</code> to.\n-  */\n-public\n-Timestamp(long date)\n-{\n-  super(date);\n-}\n-\n-/*************************************************************************/\n-\n-/*\n- * Instance Methods\n- */\n-\n-/**\n-  * This method returns this date in JDBC format.\n-  *\n-  * @return This date as a string.\n-  */\n-public String\n-toString()\n-{\n-  return(format_sdf.format(this) + \".\" + getNanos());\n+  private static SimpleDateFormat parse_sdf = \n+    new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSSS\");\n+\n+  private static SimpleDateFormat format_sdf =\n+    new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+\n+  /**\n+    * The nanosecond value for this object\n+    */\n+  private int nanos;\n+\n+  /**\n+   * This method returns a new instance of this class by parsing a\n+   * date in JDBC format into a Java date.\n+   *\n+   * @param str The string to parse.\n+   * @return The resulting <code>java.sql.Timestamp</code> value. \n+   */\n+  public static Timestamp valueOf(String str)\n+  {\n+    try\n+      {\n+\tDate d = (Date) parse_sdf.parseObject(str);\n+\treturn new Timestamp(d.getTime());\n+      }\n+    catch (Exception e)\n+      {\n+\treturn null;\n+      }\n+  }\n+\n+  /**\n+   * This method initializes a new instance of this class with the\n+   * specified year, month, and day.\n+   *\n+   * @param year The year for this Timestamp (year - 1900)\n+   * @param month The month for this Timestamp (0-11)\n+   * @param day The day for this Timestamp (1-31)\n+   * @param hour The hour for this Timestamp (0-23)\n+   * @param minute The minute for this Timestamp (0-59)\n+   * @param second The second for this Timestamp (0-59)\n+   * @param nanos The nanosecond value for this Timestamp (0 to 999,999,9999)\n+   * @deprecated\n+   */\n+  public Timestamp(int year, int month, int day, int hour, int minute, \n+    int second, int nanos)\n+  {\n+    super(year, month, day, hour, minute, second);\n+    this.nanos = nanos;\n+  }\n+\n+  /**\n+   * This method initializes a new instance of this class with the\n+   * specified time value representing the number of seconds since \n+   * Jan 1, 1970 at 12:00 midnight GMT.\n+   *\n+   * @param time The time value to intialize this <code>Time</code> to.\n+   */\n+  public Timestamp(long date)\n+  {\n+    super(date);\n+  }\n+\n+  /**\n+   * This method returns this date in JDBC format.\n+   *\n+   * @return This date as a string.\n+   */\n+  public String toString()\n+  {\n+    return format_sdf.format(this) + \".\" + getNanos();\n+  }\n+\n+  /**\n+    * This method returns the nanosecond value for this object.\n+    * @return The nanosecond value for this object.\n+    */\n+  public int getNanos()\n+  {\n+    return nanos;\n+  }\n+\n+  /**\n+   * This method sets the nanosecond value for this object.\n+   *\n+   * @param nanos The nanosecond value for this object.\n+   */\n+  public void setNanos(int nanos)\n+  {\n+    this.nanos = nanos;\n+  }\n+\n+  /**\n+   * This methods tests whether this object is earlier than the specified\n+   * object.\n+   *\n+   * @param ts The other <code>Timestamp</code> to test against.\n+   * @return <code>true</code> if this object is earlier than the other object,\n+   *         <code>false</code> otherwise.\n+   */\n+  public boolean before(Timestamp ts)\n+  {\n+    if (ts.getTime() > getTime())\n+      return true;\n+\n+    if (ts.getNanos() > getNanos())\n+      return true;\n+\n+    return false;\n+  }\n+\n+  /**\n+   * This methods tests whether this object is later than the specified\n+   * object.\n+   *\n+   * @param ts The other <code>Timestamp</code> to test against.\n+   *\n+   * @return <code>true</code> if this object is later than the other object,\n+   * <code>false</code> otherwise.\n+   */\n+  public boolean after(Timestamp ts)\n+  {\n+    if (ts.getTime() < getTime())\n+      return true;\n+\n+    if (ts.getNanos() < getNanos())\n+      return true;\n+\n+    return false;\n+  }\n+\n+  /**\n+   * This method these the specified <code>Object</code> for equality\n+   * against this object.  This will be true if an only if the specified\n+   * object is an instance of <code>Timestamp</code> and has the same\n+   * time value fields.\n+   *\n+   * @param obj The object to test against for equality.\n+   *\n+   * @return <code>true</code> if the specified object is equal to this\n+   * object, <code>false</code> otherwise.\n+   */\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == null)\n+      return false;\n+\n+    if (!(obj instanceof Timestamp))\n+      return false;\n+\n+    return equals((Timestamp) obj);\n+  }\n+\n+  /**\n+   * This method tests the specified timestamp for equality against this\n+   * object.  This will be true if and only if the specified object is\n+   * not <code>null</code> and contains all the same time value fields\n+   * as this object.\n+   *\n+   * @param ts The <code>Timestamp</code> to test against for equality.\n+   *\n+   * @return <code>true</code> if the specified object is equal to this\n+   * object, <code>false</code> otherwise.\n+   */\n+  public boolean equals(Timestamp ts)\n+  {\n+    if (ts == null)\n+      return false;\n+\n+    if (ts.getTime() != getTime())\n+      return false;\n+\n+    if (ts.getNanos() != getNanos())\n+      return false;\n+\n+    return true;\n+  }\n+\n+  /**\n+   * @since 1.2\n+   */\n+   /*\n+  public int compareTo(Timestamp ts)\n+  {\n+    \n+  }*/\n+  \n+  /**\n+   * @since 1.2\n+   *//*\n+  public int compareTo(Object obj)\n+  {\n+    return compareTo((Timestamp) obj);\n+  }*/\n }\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method returns the nanosecond value for this object.\n-  *\n-  * @return The nanosecond value for this object.\n-  */\n-public int\n-getNanos()\n-{\n-  return(nanos);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method sets the nanosecond value for this object.\n-  *\n-  * @param nanos The nanosecond value for this object.\n-  */\n-public void\n-setNanos(int nanos)\n-{\n-  this.nanos = nanos;\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This methods tests whether this object is earlier than the specified\n-  * object.\n-  *\n-  * @param ts The other <code>Timestamp</code> to test against.\n-  *\n-  * @return <code>true</code> if this object is earlier than the other object,\n-  * <code>false</code> otherwise.\n-  */\n-public boolean\n-before(Timestamp ts)\n-{\n-  if (ts.getTime() > getTime())\n-    return(true);\n-\n-  if (ts.getNanos() > getNanos())\n-    return(true);\n-\n-  return(false);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This methods tests whether this object is later than the specified\n-  * object.\n-  *\n-  * @param ts The other <code>Timestamp</code> to test against.\n-  *\n-  * @return <code>true</code> if this object is later than the other object,\n-  * <code>false</code> otherwise.\n-  */\n-public boolean\n-after(Timestamp ts)\n-{\n-  if (ts.getTime() < getTime())\n-    return(true);\n-\n-  if (ts.getNanos() < getNanos())\n-    return(true);\n-\n-  return(false);\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method these the specified <code>Object</code> for equality\n-  * against this object.  This will be true if an only if the specified\n-  * object is an instance of <code>Timestamp</code> and has the same\n-  * time value fields.\n-  *\n-  * @param obj The object to test against for equality.\n-  *\n-  * @return <code>true</code> if the specified object is equal to this\n-  * object, <code>false</code> otherwise.\n-  */\n-public boolean\n-equals(Object obj)\n-{\n-  if (obj == null)\n-    return(false);\n-\n-  if (!(obj instanceof Timestamp))\n-    return(false);\n-\n-  return(equals((Timestamp)obj));\n-}\n-\n-/*************************************************************************/\n-\n-/**\n-  * This method tests the specified timestamp for equality against this\n-  * object.  This will be true if and only if the specified object is\n-  * not <code>null</code> and contains all the same time value fields\n-  * as this object.\n-  *\n-  * @param ts The <code>Timestamp</code> to test against for equality.\n-  *\n-  * @return <code>true</code> if the specified object is equal to this\n-  * object, <code>false</code> otherwise.\n-  */\n-public boolean\n-equals(Timestamp ts)\n-{\n-  if (ts == null)\n-    return(false);\n-\n-  if (ts.getTime() != getTime())\n-    return(false);\n-\n-  if (ts.getNanos() != getNanos())\n-    return(false);\n-\n-  return(true);\n-}\n-\n-} // class Timestamp\n-"}, {"sha": "7c4bc9107631589f86db8dfa1eb19ad60a154fab", "filename": "libjava/java/sql/Types.java", "status": "modified", "additions": 38, "deletions": 40, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTypes.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjava%2Fsql%2FTypes.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsql%2FTypes.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -39,49 +39,47 @@\n package java.sql;\n \n /**\n-  * This class contains constants that are used to identify SQL data types.\n-  *\n-  * @author Aaron M. Renn (arenn@urbanophile.com)\n-  */\n+ * This class contains constants that are used to identify SQL data types.\n+ *\n+ * @author Aaron M. Renn (arenn@urbanophile.com)\n+ */\n public class Types \n {\n-\n-// These should be self explanatory.  People need a SQL book, not\n-// Javadoc comments for these.\n-\n-public static final int BIT = -7;\n-public static final int TINYINT = -6;\n-public static final int SMALLINT = 5;\n-public static final int INTEGER = 4;\n-public static final int BIGINT = -5;\n-public static final int FLOAT = 6;\n-public static final int REAL = 7;\n-public static final int DOUBLE = 8;\n-public static final int NUMERIC = 2;\n-public static final int DECIMAL = 3;\n-public static final int CHAR = 1;\n-public static final int VARCHAR = 12;\n-public static final int LONGVARCHAR = -1;\n-public static final int DATE = 91;\n-public static final int TIME = 92;\n-public static final int TIMESTAMP = 93;\n-public static final int BINARY = -2;\n-public static final int VARBINARY = -3;\n-public static final int LONGVARBINARY = -4;\n-public static final int NULL = 0;\n-public static final int OTHER = 1111;\n-public static final int JAVA_OBJECT = 2000;\n-public static final int DISTINCT = 2001;\n-public static final int STRUCT = 2002;\n-public static final int ARRAY = 2003;\n-public static final int BLOB = 2004;\n-public static final int CLOB = 2005;\n-public static final int REF = 2006;\n+  // These should be self explanatory.  People need a SQL book, not\n+  // Javadoc comments for these.\n+  public static final int BIT = -7;\n+  public static final int TINYINT = -6;\n+  public static final int SMALLINT = 5;\n+  public static final int INTEGER = 4;\n+  public static final int BIGINT = -5;\n+  public static final int FLOAT = 6;\n+  public static final int REAL = 7;\n+  public static final int DOUBLE = 8;\n+  public static final int NUMERIC = 2;\n+  public static final int DECIMAL = 3;\n+  public static final int CHAR = 1;\n+  public static final int VARCHAR = 12;\n+  public static final int LONGVARCHAR = -1;\n+  public static final int DATE = 91;\n+  public static final int TIME = 92;\n+  public static final int TIMESTAMP = 93;\n+  public static final int BINARY = -2;\n+  public static final int VARBINARY = -3;\n+  public static final int LONGVARBINARY = -4;\n+  public static final int NULL = 0;\n+  public static final int OTHER = 1111;\n+  public static final int JAVA_OBJECT = 2000;\n+  public static final int DISTINCT = 2001;\n+  public static final int STRUCT = 2002;\n+  public static final int ARRAY = 2003;\n+  public static final int BLOB = 2004;\n+  public static final int CLOB = 2005;\n+  public static final int REF = 2006;\n+  public static final int DATALINK = 70;\n+  public static final int BOOLEAN = 16;\n \n   // This class can't be instantiated.\n-  private Types ()\n+  private Types()\n   {\n   }\n-\n-} // class Types \n-\n+}"}, {"sha": "1c4b5ef5b71dadfddb30e54fe8d1feafe7900e86", "filename": "libjava/javax/sql/ConnectionEvent.java", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FConnectionEvent.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,75 @@\n+/* ConnectionEvent.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.SQLException;\n+import java.util.EventObject;\n+\n+/**\n+ * @since 1.4\n+ */\n+public class ConnectionEvent extends EventObject \n+{\n+  private SQLException sqlException;\n+  \n+  /**\n+   * @since 1.4\n+   */\n+  public ConnectionEvent(PooledConnection con)\n+  {\n+    super(con);\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ConnectionEvent(PooledConnection con, SQLException ex)\n+  {\n+    super(con);\n+    this.sqlException = ex;\n+  }\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public SQLException getSQLException()\n+  {\n+    return sqlException;\n+  }\n+}"}, {"sha": "9358e694d7e59a971b6484af1f169f0bbc38d4dc", "filename": "libjava/javax/sql/ConnectionEventListener.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionEventListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionEventListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FConnectionEventListener.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,57 @@\n+/* ConnectionEventListener.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.util.EventListener;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface ConnectionEventListener extends EventListener \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public void connectionClosed(ConnectionEvent event);\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void connectionErrorOccurred(ConnectionEvent event);\n+}"}, {"sha": "e281840bd77578f41b7f1e169181be1ac28560ee", "filename": "libjava/javax/sql/ConnectionPoolDataSource.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionPoolDataSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FConnectionPoolDataSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FConnectionPoolDataSource.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,79 @@\n+/* ConnectionPoolDataSource.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface ConnectionPoolDataSource \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public PooledConnection getPooledConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PooledConnection getPooledConnection(String user, String password)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PrintWriter getLogWriter() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLogWriter(PrintWriter out) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLoginTimeout(int seconds) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getLoginTimeout() throws SQLException;\n+}"}, {"sha": "05f97fd4b70e779fb6dfa08de60c663cd2327d3d", "filename": "libjava/javax/sql/DataSource.java", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FDataSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FDataSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FDataSource.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,80 @@\n+/* DataSource.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.io.PrintWriter;\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface DataSource \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public Connection getConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Connection getConnection(String username, String password)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PrintWriter getLogWriter() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLogWriter(PrintWriter out) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLoginTimeout(int seconds) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getLoginTimeout() throws SQLException;\n+}"}, {"sha": "f76ab8c90e7494f1f259b13a9341bd2befcf6fce", "filename": "libjava/javax/sql/PooledConnection.java", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FPooledConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FPooledConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FPooledConnection.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,68 @@\n+/* PooledConnection.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface PooledConnection \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public Connection getConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void close() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void addConnectionEventListener(ConnectionEventListener listener);\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void removeConnectionEventListener(ConnectionEventListener listener);\n+}"}, {"sha": "f5f7d9b2595f6ecc87283b9f507099853ec08973", "filename": "libjava/javax/sql/RowSet.java", "status": "added", "additions": 361, "deletions": 0, "changes": 361, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSet.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSet.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSet.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,361 @@\n+/* RowSet.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.math.BigDecimal;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Clob;\n+import java.sql.Date;\n+import java.sql.Ref;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.util.Calendar;\n+import java.util.Map;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSet extends ResultSet \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public String getUrl() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setUrl(String url) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getDataSourceName();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDataSourceName(String name) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getUsername();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setUsername(String name) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getPassword();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setPassword(String password) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getTransactionIsolation();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTransactionIsolation(int level) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Map getTypeMap() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTypeMap(Map map) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public String getCommand();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCommand(String cmd) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean isReadOnly();\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setReadOnly(boolean value) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getMaxFieldSize() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setMaxFieldSize(int max) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getMaxRows() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setMaxRows(int max) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean getEscapeProcessing() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setEscapeProcessing(boolean enable) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getQueryTimeout() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setQueryTimeout(int seconds) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setType(int type) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setConcurrency(int concurrency) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setNull(int parameterIndex, int sqlType) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setNull(int paramIndex, int sqlType, String typeName) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBoolean(int parameterIndex, boolean x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setByte(int parameterIndex, byte x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setShort(int parameterIndex, short x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setInt(int parameterIndex, int x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLong(int parameterIndex, long x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setFloat(int parameterIndex, float x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDouble(int parameterIndex, double x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBigDecimal(int parameterIndex, BigDecimal x) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setString(int parameterIndex, String x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBytes(int parameterIndex, byte[] x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDate(int parameterIndex, Date x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTime(int parameterIndex, Time x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTimestamp(int parameterIndex, Timestamp x) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setAsciiStream(int parameterIndex, InputStream x, int length)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBinaryStream(int parameterIndex, InputStream x, int length)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCharacterStream(int parameterIndex, Reader reader, int\n+      length) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(int parameterIndex, Object x, int targetSqlType, int\n+      scale) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(int parameterIndex, Object x, int targetSqlType)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setObject(int parameterIndex, Object x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setRef(int i, Ref x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setBlob(int i, Blob x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setClob(int i, Clob x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setArray(int i, Array x) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setDate(int parameterIndex, Date x, Calendar cal) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTime(int parameterIndex, Time x, Calendar cal) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)\n+      throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void clearParameters() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void execute() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void addRowSetListener(RowSetListener listener);\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void removeRowSetListener(RowSetListener listener);\n+}"}, {"sha": "357e999ac5fff076c7b7c66ee63b897e5f0dc9e8", "filename": "libjava/javax/sql/RowSetEvent.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetEvent.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetEvent.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetEvent.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,52 @@\n+/* RowSetEvent.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.util.EventObject;\n+\n+/**\n+ * @since 1.4\n+ */\n+public class RowSetEvent extends EventObject \n+{\n+  public RowSetEvent(RowSet source)\n+  {\n+    super(source);\n+  }\n+}"}, {"sha": "1fd900bda855fd4aab75ea325c6672a4dffea103", "filename": "libjava/javax/sql/RowSetInternal.java", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetInternal.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetInternal.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetInternal.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,74 @@\n+/* RowSetInternal.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSetInternal \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public Object[] getParams() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public Connection getConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setMetaData(RowSetMetaData md) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ResultSet getOriginal() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public ResultSet getOriginalRow() throws SQLException;\n+}"}, {"sha": "a29623714a4e6a89b779f065a1d7f654ebf4ac21", "filename": "libjava/javax/sql/RowSetListener.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetListener.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,62 @@\n+/* RowSetListener.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.util.EventListener;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSetListener extends EventListener \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public void rowSetChanged(RowSetEvent event);\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void rowChanged(RowSetEvent event);\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void cursorMoved(RowSetEvent event);\n+}"}, {"sha": "9e667f6b97dfdc31f5344f70a42327efe6ee5114", "filename": "libjava/javax/sql/RowSetMetaData.java", "status": "added", "additions": 147, "deletions": 0, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetMetaData.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetMetaData.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetMetaData.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,147 @@\n+/* RowSetMetaData.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSetMetaData extends ResultSetMetaData \n+{\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnCount(int columnCount) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setAutoIncrement(int columnIndex, boolean property)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCaseSensitive(int columnIndex, boolean property)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setSearchable(int columnIndex, boolean property)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCurrency(int columnIndex, boolean property)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setNullable(int columnIndex, int property) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setSigned(int columnIndex, boolean property)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnDisplaySize(int columnIndex, int size)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnLabel(int columnIndex, String label)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnName(int columnIndex, String columnName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setSchemaName(int columnIndex, String schemaName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setPrecision(int columnIndex, int precision)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setScale(int columnIndex, int scale) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setTableName(int columnIndex, String tableName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setCatalogName(int columnIndex, String catalogName)\n+    throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnType(int columnIndex, int SQLType) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setColumnTypeName(int columnIndex, String typeName)\n+    throws SQLException;\n+}"}, {"sha": "d3000c01c668ea2430a1146713ac8eb5877f6eee", "filename": "libjava/javax/sql/RowSetReader.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetReader.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetReader.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetReader.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,52 @@\n+/* RowSetReader.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSetReader \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public void readData(RowSetInternal caller) throws SQLException;\n+}"}, {"sha": "4f5c0c2a78941aad8d7d1c040840e417d367547e", "filename": "libjava/javax/sql/RowSetWriter.java", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FRowSetWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FRowSetWriter.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,52 @@\n+/* RowSetWriter.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface RowSetWriter \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public boolean writeData(RowSetInternal caller) throws SQLException;\n+}"}, {"sha": "3c28c1740d81375b6a4aab800c95da207d7ef9e6", "filename": "libjava/javax/sql/XAConnection.java", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FXAConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FXAConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FXAConnection.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,53 @@\n+/* XAConnection.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.sql.SQLException;\n+import javax.transaction.xa.XAResource;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface XAConnection extends PooledConnection \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public XAResource getXAResource() throws SQLException;\n+}"}, {"sha": "1d552ddda7740625f005f924270f857adf98f6b7", "filename": "libjava/javax/sql/XADataSource.java", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FXADataSource.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f2390faddfd8fb109355466b4ba961ef07457006/libjava%2Fjavax%2Fsql%2FXADataSource.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fsql%2FXADataSource.java?ref=f2390faddfd8fb109355466b4ba961ef07457006", "patch": "@@ -0,0 +1,79 @@\n+/* XADataSource.java \n+   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.sql;\n+\n+import java.io.PrintWriter;\n+import java.sql.SQLException;\n+\n+/**\n+ * @since 1.4\n+ */\n+public interface XADataSource \n+{\n+  /**\n+   * @since 1.4\n+   */\n+  public XAConnection getXAConnection() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public XAConnection getXAConnection(String user, String password) throws\n+      SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public PrintWriter getLogWriter() throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLogWriter(PrintWriter out) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public void setLoginTimeout(int seconds) throws SQLException;\n+\n+  /**\n+   * @since 1.4\n+   */\n+  public int getLoginTimeout() throws SQLException;\n+}"}]}