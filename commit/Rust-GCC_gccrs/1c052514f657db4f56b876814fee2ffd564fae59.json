{"sha": "1c052514f657db4f56b876814fee2ffd564fae59", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMwNTI1MTRmNjU3ZGI0ZjU2Yjg3NjgxNGZlZTJmZmQ1NjRmYWU1OQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-05-31T10:18:36Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-31T10:18:36Z"}, "message": "tree-ssa-dom.c (record_equivalences_from_incoming_edge): Only look at case labels if the immediate dominator is also the only predecessor.\n\n\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge):\n\tOnly look at case labels if the immediate dominator is also\n\tthe only predecessor.  Don't look for more case labels if the\n\tfirst seen is a case range.\n\nFrom-SVN: r82480", "tree": {"sha": "03546cea2e85d029b448847ecd142555b3ffec6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03546cea2e85d029b448847ecd142555b3ffec6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c052514f657db4f56b876814fee2ffd564fae59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c052514f657db4f56b876814fee2ffd564fae59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c052514f657db4f56b876814fee2ffd564fae59", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c052514f657db4f56b876814fee2ffd564fae59/comments", "author": null, "committer": null, "parents": [{"sha": "58128b9da11df305d8e631bcbbaa6aad2ad970d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58128b9da11df305d8e631bcbbaa6aad2ad970d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58128b9da11df305d8e631bcbbaa6aad2ad970d6"}], "stats": {"total": 15, "additions": 13, "deletions": 2}, "files": [{"sha": "ca109d99911bf7565cb8b9869d90ee17e6d9902b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c052514f657db4f56b876814fee2ffd564fae59/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c052514f657db4f56b876814fee2ffd564fae59/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c052514f657db4f56b876814fee2ffd564fae59", "patch": "@@ -1,3 +1,10 @@\n+2004-05-31  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* tree-ssa-dom.c (record_equivalences_from_incoming_edge):\n+\tOnly look at case labels if the immediate dominator is also\n+\tthe only predecessor.  Don't look for more case labels if the\n+\tfirst seen is a case range.\n+\n 2004-05-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* builtins.c: Add a prototype for fold_builtin_strchr()."}, {"sha": "0ca36b09c80efd4a799964e1be734a90eb0609e7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c052514f657db4f56b876814fee2ffd564fae59/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c052514f657db4f56b876814fee2ffd564fae59/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=1c052514f657db4f56b876814fee2ffd564fae59", "patch": "@@ -1450,9 +1450,12 @@ record_equivalences_from_incoming_edge (struct dom_walk_data *walk_data,\n \t\t\t\t       &bd->avail_exprs,\n \t\t\t\t       bb,\n \t\t\t\t       &bd->vrp_variables);\n-  /* Similarly when the parent block ended in a SWITCH_EXPR.  */\n+  /* Similarly when the parent block ended in a SWITCH_EXPR.\n+     We can only know the value of the switch's condition if the dominator\n+     parent is also the only predecessor of this block.  */\n   else if (parent_block_last_stmt\n \t   && bb->pred->pred_next == NULL\n+\t   && bb->pred->src == parent\n \t   && TREE_CODE (parent_block_last_stmt) == SWITCH_EXPR)\n     {\n       tree switch_cond = SWITCH_COND (parent_block_last_stmt);\n@@ -1473,7 +1476,7 @@ record_equivalences_from_incoming_edge (struct dom_walk_data *walk_data,\n \t      tree elt = TREE_VEC_ELT (switch_vec, i);\n \t      if (label_to_block (CASE_LABEL (elt)) == bb)\n \t\t{\n-\t\t  if (++case_count > 1)\n+\t\t  if (++case_count > 1 || CASE_HIGH (elt))\n \t\t    break;\n \t\t  match_case = elt;\n \t\t}\n@@ -1484,6 +1487,7 @@ record_equivalences_from_incoming_edge (struct dom_walk_data *walk_data,\n \t     the exact value of SWITCH_COND which caused us to get to\n \t     this block.  Record that equivalence in EQ_EXPR_VALUE.  */\n \t  if (case_count == 1\n+\t      && match_case\n \t      && CASE_LOW (match_case)\n \t      && !CASE_HIGH (match_case))\n \t    {"}]}