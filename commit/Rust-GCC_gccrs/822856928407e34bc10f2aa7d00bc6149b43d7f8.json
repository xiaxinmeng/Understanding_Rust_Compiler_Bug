{"sha": "822856928407e34bc10f2aa7d00bc6149b43d7f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODIyODU2OTI4NDA3ZTM0YmMxMGYyYWE3ZDAwYmM2MTQ5YjQzZDdmOA==", "commit": {"author": {"name": "Andrew Waterman", "email": "andrew@sifive.com", "date": "2017-05-05T20:24:46Z"}, "committer": {"name": "Palmer Dabbelt", "email": "palmer@gcc.gnu.org", "date": "2017-05-05T20:24:46Z"}, "message": "RISC-V: Add -mstrict-align option\n\nThe RISC-V user ISA permits misaligned accesses, but they may trap\nand be emulated.  That emulation software needs to be compiled assuming\nstrict alignment.\n\nEven when strict alignment is not required, set SLOW_UNALIGNED_ACCESS\nbased upon -mtune to avoid a performance pitfall.\n\ngcc/ChangeLog:\n\n2017-05-04  Andrew Waterman  <andrew@sifive.com>\n\n\t* config/riscv/riscv.opt (mstrict-align): New option.\n\t* config/riscv/riscv.h (STRICT_ALIGNMENT): Use it.  Update comment.\n\t(SLOW_UNALIGNED_ACCESS): Define.\n\t(riscv_slow_unaligned_access): Declare.\n\t* config/riscv/riscv.c (riscv_tune_info): Add slow_unaligned_access\n\tfield.\n\t(riscv_slow_unaligned_access): New variable.\n\t(rocket_tune_info): Set slow_unaligned_access to true.\n\t(optimize_size_tune_info): Set slow_unaligned_access to false.\n\t(riscv_cpu_info_table): Add entry for optimize_size_tune_info.\n\t(riscv_valid_lo_sum_p): Use TARGET_STRICT_ALIGN.\n\t(riscv_option_override): Set riscv_slow_unaligned_access.\n        * doc/invoke.texi: Add -mstrict-align to RISC-V.\n\nFrom-SVN: r247659", "tree": {"sha": "74d82a779503a679e790d959716e3be28758d974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74d82a779503a679e790d959716e3be28758d974"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/822856928407e34bc10f2aa7d00bc6149b43d7f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822856928407e34bc10f2aa7d00bc6149b43d7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/822856928407e34bc10f2aa7d00bc6149b43d7f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/822856928407e34bc10f2aa7d00bc6149b43d7f8/comments", "author": {"login": "aswaterman", "id": 1031106, "node_id": "MDQ6VXNlcjEwMzExMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1031106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aswaterman", "html_url": "https://github.com/aswaterman", "followers_url": "https://api.github.com/users/aswaterman/followers", "following_url": "https://api.github.com/users/aswaterman/following{/other_user}", "gists_url": "https://api.github.com/users/aswaterman/gists{/gist_id}", "starred_url": "https://api.github.com/users/aswaterman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aswaterman/subscriptions", "organizations_url": "https://api.github.com/users/aswaterman/orgs", "repos_url": "https://api.github.com/users/aswaterman/repos", "events_url": "https://api.github.com/users/aswaterman/events{/privacy}", "received_events_url": "https://api.github.com/users/aswaterman/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "248710c431b94c250e8356211df6f82c753d7b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248710c431b94c250e8356211df6f82c753d7b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248710c431b94c250e8356211df6f82c753d7b34"}], "stats": {"total": 56, "additions": 49, "deletions": 7}, "files": [{"sha": "2e0e6ad525923214aaf71a729e6e19859ed8a6c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=822856928407e34bc10f2aa7d00bc6149b43d7f8", "patch": "@@ -1,3 +1,19 @@\n+2017-05-04  Andrew Waterman  <andrew@sifive.com>\n+\n+\t* config/riscv/riscv.opt (mstrict-align): New option.\n+\t* config/riscv/riscv.h (STRICT_ALIGNMENT): Use it.  Update comment.\n+\t(SLOW_UNALIGNED_ACCESS): Define.\n+\t(riscv_slow_unaligned_access): Declare.\n+\t* config/riscv/riscv.c (riscv_tune_info): Add slow_unaligned_access\n+\tfield.\n+\t(riscv_slow_unaligned_access): New variable.\n+\t(rocket_tune_info): Set slow_unaligned_access to true.\n+\t(optimize_size_tune_info): Set slow_unaligned_access to false.\n+\t(riscv_cpu_info_table): Add entry for optimize_size_tune_info.\n+\t(riscv_valid_lo_sum_p): Use TARGET_STRICT_ALIGN.\n+\t(riscv_option_override): Set riscv_slow_unaligned_access.\n+\t* doc/invoke.texi: Add -mstrict-align to RISC-V.\n+\n 2017-05-04  Kito Cheng  <kito.cheng@gmail.com>\n \n \t* config/riscv/riscv.md: Unify indentation."}, {"sha": "f7fec4bfcf8bd20d36c7a072e3cc86f766e92dda", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=822856928407e34bc10f2aa7d00bc6149b43d7f8", "patch": "@@ -255,6 +255,7 @@ struct riscv_tune_info\n   unsigned short issue_rate;\n   unsigned short branch_cost;\n   unsigned short memory_cost;\n+  bool slow_unaligned_access;\n };\n \n /* Information about one CPU we know about.  */\n@@ -268,6 +269,9 @@ struct riscv_cpu_info {\n \n /* Global variables for machine-dependent things.  */\n \n+/* Whether unaligned accesses execute very slowly.  */\n+bool riscv_slow_unaligned_access;\n+\n /* Which tuning parameters to use.  */\n static const struct riscv_tune_info *tune_info;\n \n@@ -301,7 +305,8 @@ static const struct riscv_tune_info rocket_tune_info = {\n   {COSTS_N_INSNS (6), COSTS_N_INSNS (6)},\t/* int_div */\n   1,\t\t\t\t\t\t/* issue_rate */\n   3,\t\t\t\t\t\t/* branch_cost */\n-  5\t\t\t\t\t\t/* memory_cost */\n+  5,\t\t\t\t\t\t/* memory_cost */\n+  true,\t\t\t\t\t\t/* slow_unaligned_access */\n };\n \n /* Costs to use when optimizing for size.  */\n@@ -313,12 +318,14 @@ static const struct riscv_tune_info optimize_size_tune_info = {\n   {COSTS_N_INSNS (1), COSTS_N_INSNS (1)},\t/* int_div */\n   1,\t\t\t\t\t\t/* issue_rate */\n   1,\t\t\t\t\t\t/* branch_cost */\n-  2\t\t\t\t\t\t/* memory_cost */\n+  2,\t\t\t\t\t\t/* memory_cost */\n+  false,\t\t\t\t\t/* slow_unaligned_access */\n };\n \n /* A table describing all the processors GCC knows about.  */\n static const struct riscv_cpu_info riscv_cpu_info_table[] = {\n   { \"rocket\", &rocket_tune_info },\n+  { \"size\", &optimize_size_tune_info },\n };\n \n /* Return the riscv_cpu_info entry for the given name string.  */\n@@ -726,7 +733,8 @@ riscv_valid_lo_sum_p (enum riscv_symbol_type sym_type, enum machine_mode mode)\n   /* We may need to split multiword moves, so make sure that each word\n      can be accessed without inducing a carry.  */\n   if (GET_MODE_SIZE (mode) > UNITS_PER_WORD\n-      && GET_MODE_BITSIZE (mode) > GET_MODE_ALIGNMENT (mode))\n+      && (!TARGET_STRICT_ALIGN\n+\t  || GET_MODE_BITSIZE (mode) > GET_MODE_ALIGNMENT (mode)))\n     return false;\n \n   return true;\n@@ -3773,6 +3781,12 @@ riscv_option_override (void)\n \t\t\t RISCV_TUNE_STRING_DEFAULT);\n   tune_info = optimize_size ? &optimize_size_tune_info : cpu->tune_info;\n \n+  /* Use -mtune's setting for slow_unaligned_access, even when optimizing\n+     for size.  For architectures that trap and emulate unaligned accesses,\n+     the performance cost is too great, even for -Os.  */\n+  riscv_slow_unaligned_access = (cpu->tune_info->slow_unaligned_access\n+\t\t\t\t || TARGET_STRICT_ALIGN);\n+\n   /* If the user hasn't specified a branch cost, use the processor's\n      default.  */\n   if (riscv_branch_cost == 0)"}, {"sha": "c5d134cbe57e6524732901acd267f0ba1e10d475", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=822856928407e34bc10f2aa7d00bc6149b43d7f8", "patch": "@@ -126,10 +126,11 @@ along with GCC; see the file COPYING3.  If not see\n /* There is no point aligning anything to a rounder boundary than this.  */\n #define BIGGEST_ALIGNMENT 128\n \n-/* The user-level ISA permits misaligned accesses, but they may execute\n-   extremely slowly and non-atomically.  Some privileged architectures\n-   do not permit them at all.  It is best to enforce strict alignment.  */\n-#define STRICT_ALIGNMENT 1\n+/* The user-level ISA permits unaligned accesses, but they are not required\n+   of the privileged architecture.  */\n+#define STRICT_ALIGNMENT TARGET_STRICT_ALIGN\n+\n+#define SLOW_UNALIGNED_ACCESS(MODE, ALIGN) riscv_slow_unaligned_access\n \n /* Define this if you wish to imitate the way many other C compilers\n    handle alignment of bitfields and the structures that contain\n@@ -864,6 +865,7 @@ while (0)\n #ifndef USED_FOR_TARGET\n extern const enum reg_class riscv_regno_to_class[];\n extern bool riscv_hard_regno_mode_ok[][FIRST_PSEUDO_REGISTER];\n+extern bool riscv_slow_unaligned_access;\n #endif\n \n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL) \\"}, {"sha": "cfd0335d082c14296602b2538a7040cad219d32e", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=822856928407e34bc10f2aa7d00bc6149b43d7f8", "patch": "@@ -84,6 +84,10 @@ mcmodel=\n Target Report RejectNegative Joined Enum(code_model) Var(riscv_cmodel) Init(TARGET_DEFAULT_CMODEL)\n Specify the code model.\n \n+mstrict-align\n+Target Report Mask(STRICT_ALIGN) Save\n+Do not generate unaligned memory accesses.\n+\n Enum\n Name(code_model) Type(enum riscv_code_model)\n Known code models (for use with the -mcmodel= option):"}, {"sha": "86e17fb79d693cf16dd031fab544bdcfe48bb61b", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/822856928407e34bc10f2aa7d00bc6149b43d7f8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=822856928407e34bc10f2aa7d00bc6149b43d7f8", "patch": "@@ -975,6 +975,7 @@ See RS/6000 and PowerPC Options.\n -mtune=@var{processor-string} @gol\n -msmall-data-limit=@var{N-bytes} @gol\n -msave-restore  -mno-save-restore @gol\n+-mstrict-align -mno-strict-align @gol\n -mcmodel=@var{code-model} @gol\n -mexplicit-relocs  -mno-explicit-relocs @gol}\n \n@@ -20914,6 +20915,11 @@ Put global and static data smaller than @var{n} bytes into a special section\n @opindex msave-restore\n Use smaller but slower prologue and epilogue code.\n \n+@item -mstrict-align\n+@itemx -mno-strict-align\n+@opindex mstrict-align\n+Do not generate unaligned memory accesses.\n+\n @item -mcmodel=@var{code-model}\n @opindex mcmodel\n Specify the code model."}]}