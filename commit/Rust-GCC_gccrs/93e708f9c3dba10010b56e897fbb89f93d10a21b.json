{"sha": "93e708f9c3dba10010b56e897fbb89f93d10a21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNlNzA4ZjljM2RiYTEwMDEwYjU2ZTg5N2ZiYjg5ZjkzZDEwYTIxYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-02-29T09:02:46Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-02-29T09:02:46Z"}, "message": "ada-tree.h (DECL_RETURN_VALUE_P): New macro.\n\n\t* gcc-interface/ada-tree.h (DECL_RETURN_VALUE_P): New macro.\n\t* gcc-interface/gigi.h (gigi): Remove useless attribute.\n\t(gnat_gimplify_expr): Likewise.\n\t(gnat_to_gnu_external): Declare.\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Factor out\n\tcode dealing with the expression of external constants into...\n\tInvoke gnat_to_gnu_external instead.\n\t<E_Variable>: Invoke gnat_to_gnu_external to translate renamed objects\n\twhen not for a definition.  Deal with COMPOUND_EXPR and variables with\n\tDECL_RETURN_VALUE_P set for renamings and with the case of a dangling\n\t'reference to a function call in a renaming.  Remove obsolete test and\n\tadjust associated comment.\n\t* gcc-interface/trans.c (Call_to_gnu): Set DECL_RETURN_VALUE_P on the\n\ttemporaries created to hold the return value, if any.\n\t(gnat_to_gnu_external): ...this.  New function.\n\t* gcc-interface/utils.c (create_var_decl): Detect a constant created\n\tto hold 'reference to function call.\n\t* gcc-interface/utils2.c (build_unary_op) <ADDR_EXPR>: Add folding\n\tfor COMPOUND_EXPR in the DECL_RETURN_VALUE_P case.\n\nFrom-SVN: r233804", "tree": {"sha": "393bcdf9df2f8ceab15cb45aae341cbc2d86146c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/393bcdf9df2f8ceab15cb45aae341cbc2d86146c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93e708f9c3dba10010b56e897fbb89f93d10a21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e708f9c3dba10010b56e897fbb89f93d10a21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93e708f9c3dba10010b56e897fbb89f93d10a21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93e708f9c3dba10010b56e897fbb89f93d10a21b/comments", "author": null, "committer": null, "parents": [{"sha": "6512bc931455f0437a0a8eab44232b4483ba16fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6512bc931455f0437a0a8eab44232b4483ba16fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6512bc931455f0437a0a8eab44232b4483ba16fb"}], "stats": {"total": 230, "additions": 190, "deletions": 40}, "files": [{"sha": "49c0632ef043ff00420dd68cb03c73cba5d296e4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -1,3 +1,25 @@\n+2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-tree.h (DECL_RETURN_VALUE_P): New macro.\n+\t* gcc-interface/gigi.h (gigi): Remove useless attribute.\n+\t(gnat_gimplify_expr): Likewise.\n+\t(gnat_to_gnu_external): Declare.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Constant>: Factor out\n+\tcode dealing with the expression of external constants into...\n+\tInvoke gnat_to_gnu_external instead.\n+\t<E_Variable>: Invoke gnat_to_gnu_external to translate renamed objects\n+\twhen not for a definition.  Deal with COMPOUND_EXPR and variables with\n+\tDECL_RETURN_VALUE_P set for renamings and with the case of a dangling\n+\t'reference to a function call in a renaming.  Remove obsolete test and\n+\tadjust associated comment.\n+\t* gcc-interface/trans.c (Call_to_gnu): Set DECL_RETURN_VALUE_P on the\n+\ttemporaries created to hold the return value, if any.\n+\t(gnat_to_gnu_external): ...this.  New function.\n+\t* gcc-interface/utils.c (create_var_decl): Detect a constant created\n+\tto hold 'reference to function call.\n+\t* gcc-interface/utils2.c (build_unary_op) <ADDR_EXPR>: Add folding\n+\tfor COMPOUND_EXPR in the DECL_RETURN_VALUE_P case.\n+\n 2016-02-17  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Indexed_Component): Active synchronization if"}, {"sha": "ac4ec2f81c4b0bb7e1c4a16b2f106069186901a7", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -457,6 +457,10 @@ do {\t\t\t\t\t\t   \\\n    a discriminant of a discriminated type without default expression.  */\n #define DECL_INVARIANT_P(NODE) DECL_LANG_FLAG_4 (FIELD_DECL_CHECK (NODE))\n \n+/* Nonzero in a VAR_DECL if it is a temporary created to hold the return\n+   value of a function call or 'reference to a function call.  */\n+#define DECL_RETURN_VALUE_P(NODE) DECL_LANG_FLAG_5 (VAR_DECL_CHECK (NODE))\n+\n /* In a FIELD_DECL corresponding to a discriminant, contains the\n    discriminant number.  */\n #define DECL_DISCRIMINANT_NUMBER(NODE) DECL_INITIAL (FIELD_DECL_CHECK (NODE))"}, {"sha": "b4ba8e51bce94a7f8447103e5cc094285d094da4", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 37, "deletions": 30, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -552,31 +552,10 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t  && Present (Expression (Declaration_Node (gnat_entity)))\n \t  && Nkind (Expression (Declaration_Node (gnat_entity)))\n \t     != N_Allocator)\n-\t{\n-\t  bool went_into_elab_proc = false;\n-\t  int save_force_global = force_global;\n-\n \t  /* The expression may contain N_Expression_With_Actions nodes and\n-\t     thus object declarations from other units.  In this case, even\n-\t     though the expression will eventually be discarded since not a\n-\t     constant, the declarations would be stuck either in the global\n-\t     varpool or in the current scope.  Therefore we force the local\n-\t     context and create a fake scope that we'll zap at the end.  */\n-\t  if (!current_function_decl)\n-\t    {\n-\t      current_function_decl = get_elaboration_procedure ();\n-\t      went_into_elab_proc = true;\n-\t    }\n-\t  force_global = 0;\n-\t  gnat_pushlevel ();\n-\n-\t  gnu_expr = gnat_to_gnu (Expression (Declaration_Node (gnat_entity)));\n-\n-\t  gnat_zaplevel ();\n-\t  force_global = save_force_global;\n-\t  if (went_into_elab_proc)\n-\t    current_function_decl = NULL_TREE;\n-\t}\n+\t     thus object declarations from other units.  Discard them.  */\n+\tgnu_expr\n+\t  = gnat_to_gnu_external (Expression (Declaration_Node (gnat_entity)));\n \n       /* ... fall through ... */\n \n@@ -611,13 +590,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \ttree renamed_obj = NULL_TREE;\n \ttree gnu_object_size;\n \n+\t/* We need to translate the renamed object even though we are only\n+\t   referencing the renaming.  But it may contain a call for which\n+\t   we'll generate a temporary to hold the return value and which\n+\t   is part of the definition of the renaming, so discard it.  */\n \tif (Present (Renamed_Object (gnat_entity)) && !definition)\n \t  {\n \t    if (kind == E_Exception)\n \t      gnu_expr = gnat_to_gnu_entity (Renamed_Entity (gnat_entity),\n \t\t\t\t\t     NULL_TREE, 0);\n \t    else\n-\t      gnu_expr = gnat_to_gnu (Renamed_Object (gnat_entity));\n+\t      gnu_expr = gnat_to_gnu_external (Renamed_Object (gnat_entity));\n \t  }\n \n \t/* Get the type after elaborating the renamed object.  */\n@@ -976,23 +959,47 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t      inner = TREE_OPERAND (inner, 0);\n \t    /* Expand_Dispatching_Call can prepend a comparison of the tags\n \t       before the call to \"=\".  */\n-\t    if (TREE_CODE (inner) == TRUTH_ANDIF_EXPR)\n+\t    if (TREE_CODE (inner) == TRUTH_ANDIF_EXPR\n+\t\t|| TREE_CODE (inner) == COMPOUND_EXPR)\n \t      inner = TREE_OPERAND (inner, 1);\n \t    if ((TREE_CODE (inner) == CALL_EXPR\n \t\t && !call_is_atomic_load (inner))\n \t\t|| TREE_CODE (inner) == ADDR_EXPR\n \t\t|| TREE_CODE (inner) == NULL_EXPR\n \t\t|| TREE_CODE (inner) == CONSTRUCTOR\n-\t\t|| CONSTANT_CLASS_P (inner))\n+\t\t|| CONSTANT_CLASS_P (inner)\n+\t\t/* We need to detect the case where a temporary is created to\n+\t\t   hold the return value, since we cannot safely rename it at\n+\t\t   top level as it lives only in the elaboration routine.  */\n+\t\t|| (TREE_CODE (inner) == VAR_DECL\n+\t\t    && DECL_RETURN_VALUE_P (inner))\n+\t\t/* We also need to detect the case where the front-end creates\n+\t\t   a dangling 'reference to a function call at top level and\n+\t\t   substitutes it in the renaming, for example:\n+\n+\t\t     q__b : boolean renames r__f.e (1);\n+\n+\t           can be rewritten into:\n+\n+\t\t     q__R1s : constant q__A2s := r__f'reference;\n+\t\t     [...]\n+\t\t     q__b : boolean renames q__R1s.all.e (1);\n+\n+\t\t   We cannot safely rename the rewritten expression since the\n+\t\t   underlying object lives only in the elaboration routine.  */\n+\t\t|| (TREE_CODE (inner) == INDIRECT_REF\n+\t\t    && (inner\n+\t\t\t  = remove_conversions (TREE_OPERAND (inner, 0), true))\n+\t\t    && TREE_CODE (inner) == VAR_DECL\n+\t\t    && DECL_RETURN_VALUE_P (inner)))\n \t      ;\n \n \t    /* Case 2: if the renaming entity need not be materialized, use\n \t       the elaborated renamed expression for the renaming.  But this\n \t       means that the caller is responsible for evaluating the address\n \t       of the renaming in the correct place for the definition case to\n \t       instantiate the SAVE_EXPRs.  */\n-\t    else if (TREE_CODE (inner) != COMPOUND_EXPR\n-\t\t     && !Materialize_Entity (gnat_entity))\n+\t    else if (!Materialize_Entity (gnat_entity))\n \t      {\n \t\ttree init = NULL_TREE;\n \n@@ -1001,7 +1008,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\t\t\t &init);\n \n \t\t/* We cannot evaluate the first arm of a COMPOUND_EXPR in the\n-\t\t   correct place for this case, hence the above test.  */\n+\t\t   correct place for this case.  */\n \t\tgcc_assert (!init);\n \n \t\t/* No DECL_EXPR will be created so the expression needs to be"}, {"sha": "2b58d4eadb91b9fb63bc57532856891358db2110", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -246,7 +246,7 @@ extern \"C\" {\n    structures and then generates code.  */\n extern void gigi (Node_Id gnat_root,\n \t          int max_gnat_node,\n-                  int number_name ATTRIBUTE_UNUSED,\n+                  int number_name,\n \t\t  struct Node *nodes_ptr,\n \t\t  struct Flags *Flags_Ptr,\n \t\t  Node_Id *next_node_ptr,\n@@ -270,17 +270,19 @@ extern void gigi (Node_Id gnat_root,\n #endif\n \n /* GNAT_NODE is the root of some GNAT tree.  Return the root of the\n-   GCC tree corresponding to that GNAT tree.  Normally, no code is generated;\n-   we just return an equivalent tree which is used elsewhere to generate\n-   code.  */\n+   GCC tree corresponding to that GNAT tree.  */\n extern tree gnat_to_gnu (Node_Id gnat_node);\n \n+/* Similar to gnat_to_gnu, but discard any object that might be created in\n+   the course of the translation of GNAT_NODE, which must be an \"external\"\n+   expression in the sense that it will be elaborated elsewhere.  */\n+extern tree gnat_to_gnu_external (Node_Id gnat_node);\n+\n /* GNU_STMT is a statement.  We generate code for that statement.  */\n extern void gnat_expand_stmt (tree gnu_stmt);\n \n /* Generate GIMPLE in place for the expression at *EXPR_P.  */\n-extern int gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p,\n-                               gimple_seq *post_p ATTRIBUTE_UNUSED);\n+extern int gnat_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *);\n \n /* Do the processing for the declaration of a GNAT_ENTITY, a type.  If\n    a separate Freeze node exists, delay the bulk of the processing.  Otherwise"}, {"sha": "f830a3d24900da16d4d131f5f1986432bae300d0", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -4336,7 +4336,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t      && TREE_CODE (TYPE_SIZE (TREE_TYPE (gnu_target)))\n \t\t\t == INTEGER_CST))\n \t      && TREE_CODE (TYPE_SIZE (gnu_result_type)) != INTEGER_CST)))\n-    gnu_retval = create_temporary (\"R\", gnu_result_type);\n+    {\n+      gnu_retval = create_temporary (\"R\", gnu_result_type);\n+      DECL_RETURN_VALUE_P (gnu_retval) = 1;\n+    }\n \n   /* Create the list of the actual parameters as GCC expects it, namely a\n      chain of TREE_LIST nodes in which the TREE_VALUE field of each node\n@@ -4461,7 +4464,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t     we need to create a temporary for the return value because we must\n \t     preserve it before copying back at the very end.  */\n \t  if (!in_param && returning_value && !gnu_retval)\n-\t    gnu_retval = create_temporary (\"R\", gnu_result_type);\n+\t    {\n+\t      gnu_retval = create_temporary (\"R\", gnu_result_type);\n+\t      DECL_RETURN_VALUE_P (gnu_retval) = 1;\n+\t    }\n \n \t  /* If we haven't pushed a binding level, push a new one.  This will\n \t     narrow the lifetime of the temporary we are about to make as much\n@@ -7808,6 +7814,37 @@ gnat_to_gnu (Node_Id gnat_node)\n \n   return gnu_result;\n }\n+\n+/* Similar to gnat_to_gnu, but discard any object that might be created in\n+   the course of the translation of GNAT_NODE, which must be an \"external\"\n+   expression in the sense that it will be elaborated elsewhere.  */\n+\n+tree\n+gnat_to_gnu_external (Node_Id gnat_node)\n+{\n+  const int save_force_global = force_global;\n+  bool went_into_elab_proc = false;\n+\n+  /* Force the local context and create a fake scope that we zap\n+     at the end so declarations will not be stuck either in the\n+     global varpool or in the current scope.  */\n+  if (!current_function_decl)\n+    {\n+      current_function_decl = get_elaboration_procedure ();\n+      went_into_elab_proc = true;\n+    }\n+  force_global = 0;\n+  gnat_pushlevel ();\n+\n+  tree gnu_result = gnat_to_gnu (gnat_node);\n+\n+  gnat_zaplevel ();\n+  force_global = save_force_global;\n+  if (went_into_elab_proc)\n+    current_function_decl = NULL_TREE;\n+\n+  return gnu_result;\n+}\n \f\n /* Subroutine of above to push the exception label stack.  GNU_STACK is\n    a pointer to the stack to update and GNAT_LABEL, if present, is the"}, {"sha": "6d4770df998b531426dd9f4ec25b97557c207f58", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -2464,6 +2464,22 @@ create_var_decl (tree name, tree asm_name, tree type, tree init,\n \t\t   && !AGGREGATE_TYPE_P (type)) ? CONST_DECL : VAR_DECL,\n \t\t  name, type);\n \n+  /* Detect constants created by the front-end to hold 'reference to function\n+     calls for stabilization purposes.  This is needed for renaming.  */\n+  if (const_flag && init && POINTER_TYPE_P (type))\n+    {\n+      tree inner = init;\n+      if (TREE_CODE (inner) == COMPOUND_EXPR)\n+\tinner = TREE_OPERAND (inner, 1);\n+      inner = remove_conversions (inner, true);\n+      if (TREE_CODE (inner) == ADDR_EXPR\n+\t  && ((TREE_CODE (TREE_OPERAND (inner, 0)) == CALL_EXPR\n+\t       && !call_is_atomic_load (TREE_OPERAND (inner, 0)))\n+\t      || (TREE_CODE (TREE_OPERAND (inner, 0)) == VAR_DECL\n+\t\t  && DECL_RETURN_VALUE_P (TREE_OPERAND (inner, 0)))))\n+\tDECL_RETURN_VALUE_P (var_decl) = 1;\n+    }\n+\n   /* If this is external, throw away any initializations (they will be done\n      elsewhere) unless this is a constant for which we would like to remain\n      able to get the initializer.  If we are defining a global here, leave a"}, {"sha": "c1bb74da287457d042f4e550acede72caeb0cdcf", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -1383,8 +1383,11 @@ build_unary_op (enum tree_code op_code, tree result_type, tree operand)\n \t     since the middle-end cannot handle it.  But we don't it in the\n \t     general case because it may introduce aliasing issues if the\n \t     first operand is an indirect assignment and the second operand\n-\t     the corresponding address, e.g. for an allocator.  */\n-\t  if (TREE_CODE (type) == UNCONSTRAINED_ARRAY_TYPE)\n+\t     the corresponding address, e.g. for an allocator.  However do\n+\t     it for a return value to expose it for later recognition.  */\n+\t  if (TREE_CODE (type) == UNCONSTRAINED_ARRAY_TYPE\n+\t      || (TREE_CODE (TREE_OPERAND (operand, 1)) == VAR_DECL\n+\t\t  && DECL_RETURN_VALUE_P (TREE_OPERAND (operand, 1))))\n \t    {\n \t      result = build_unary_op (ADDR_EXPR, result_type,\n \t\t\t\t       TREE_OPERAND (operand, 1));"}, {"sha": "d6803dabd7481808cc2ad4110ab6ee9287bd583a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -1,3 +1,10 @@\n+2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/renaming8.adb: New test.\n+\t* gnat.dg/renaming8_pkg1.ads: New helper.\n+\t* gnat.dg/renaming8_pkg2.ad[sb]: Likewise.\n+\t* gnat.dg/renaming8_pkg3.ad[sb]: Likewise.\n+\n 2016-02-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/69720"}, {"sha": "f41c8132ab0a9ed14d0423ceaee9bc28bdccf95f", "filename": "gcc/testsuite/gnat.dg/renaming8.adb", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8.adb?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,11 @@\n+-- { dg-do run }\n+-- { dg-options \"-gnatp\" }\n+\n+with Renaming8_Pkg1; use Renaming8_Pkg1;\n+\n+procedure Renaming8 is\n+begin\n+  if not B then\n+    raise Program_Error;\n+  end if;\n+end;"}, {"sha": "ff5768cc49a4c44c6000d8c13fff6cf1e1f10827", "filename": "gcc/testsuite/gnat.dg/renaming8_pkg1.ads", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg1.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg1.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg1.ads?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,7 @@\n+with Renaming8_Pkg2; use Renaming8_Pkg2;\n+\n+package Renaming8_Pkg1 is\n+\n+  B: Boolean renames F.E(1);\n+\n+end Renaming8_Pkg1;"}, {"sha": "c135b392f0bc3e3225f2eb56a14d494cd9225f34", "filename": "gcc/testsuite/gnat.dg/renaming8_pkg2.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.adb?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,8 @@\n+package body Renaming8_Pkg2 is\n+\n+  function F return Rec is\n+  begin\n+    return (E => (others => True));\n+  end;\n+\n+end Renaming8_Pkg2;"}, {"sha": "5d117dbfc26786b1acb770567cb53ab379f6def4", "filename": "gcc/testsuite/gnat.dg/renaming8_pkg2.ads", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg2.ads?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,13 @@\n+with Renaming8_Pkg3; use Renaming8_Pkg3;\n+\n+package Renaming8_Pkg2 is\n+\n+  type Arr is array (Positive range 1 .. Last_Index) of Boolean;\n+\n+  type Rec is record\n+     E : Arr;\n+  end record;\n+\n+  function F return Rec;\n+\n+end Renaming8_Pkg2;"}, {"sha": "c17786b4ef06036829413911580355c6a1034902", "filename": "gcc/testsuite/gnat.dg/renaming8_pkg3.adb", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.adb?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,8 @@\n+package body Renaming8_Pkg3 is\n+\n+  function Last_Index return Integer is\n+  begin\n+    return 16;\n+  end;\n+\n+end Renaming8_Pkg3;"}, {"sha": "dda8101518951a3bd097c048eb5297a03609c87f", "filename": "gcc/testsuite/gnat.dg/renaming8_pkg3.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93e708f9c3dba10010b56e897fbb89f93d10a21b/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Frenaming8_pkg3.ads?ref=93e708f9c3dba10010b56e897fbb89f93d10a21b", "patch": "@@ -0,0 +1,5 @@\n+package Renaming8_Pkg3 is\n+\n+  function Last_Index return Integer;\n+\n+end Renaming8_Pkg3;"}]}