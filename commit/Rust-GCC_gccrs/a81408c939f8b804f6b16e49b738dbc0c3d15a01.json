{"sha": "a81408c939f8b804f6b16e49b738dbc0c3d15a01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgxNDA4YzkzOWY4YjgwNGY2YjE2ZTQ5YjczOGRiYzBjM2QxNWEwMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-06-29T22:12:18Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-06-29T22:12:18Z"}, "message": "PR libstdc++/21244 (cont^2)\n\n2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/21244 (cont^2)\n\t* include/ext/bitmap_allocator.h: Convert everywhere\n\tbits_per_block to size_t.\n\nFrom-SVN: r101438", "tree": {"sha": "06ebcff5cd4f95ce75ab2d29c94cabc1a92db885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06ebcff5cd4f95ce75ab2d29c94cabc1a92db885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a81408c939f8b804f6b16e49b738dbc0c3d15a01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81408c939f8b804f6b16e49b738dbc0c3d15a01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a81408c939f8b804f6b16e49b738dbc0c3d15a01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a81408c939f8b804f6b16e49b738dbc0c3d15a01/comments", "author": null, "committer": null, "parents": [{"sha": "c64de75f40ec7f27630860a2950da995fff3771a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c64de75f40ec7f27630860a2950da995fff3771a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c64de75f40ec7f27630860a2950da995fff3771a"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "8bb77955808471718913d7f5e93fe89f4acfe758", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81408c939f8b804f6b16e49b738dbc0c3d15a01/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81408c939f8b804f6b16e49b738dbc0c3d15a01/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a81408c939f8b804f6b16e49b738dbc0c3d15a01", "patch": "@@ -1,3 +1,9 @@\n+2005-06-29  Paolo Carlini  <pcarlini@suse.de>\n+\t    \n+\tPR libstdc++/21244 (cont^2)\n+\t* include/ext/bitmap_allocator.h: Convert everywhere\n+\tbits_per_block to size_t.\t\n+\n 2005-06-29  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* include/bits/basic_string.h, include/bits/locale_facets.h: Fix"}, {"sha": "1d5bf2077d89f8ca2320bc4fe60ec3e03003cb22", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a81408c939f8b804f6b16e49b738dbc0c3d15a01/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a81408c939f8b804f6b16e49b738dbc0c3d15a01/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=a81408c939f8b804f6b16e49b738dbc0c3d15a01", "patch": "@@ -401,8 +401,8 @@ namespace __gnu_cxx\n \n     enum \n       { \n-\tbits_per_byte = 8, \n-\tbits_per_block = sizeof(size_t) * bits_per_byte \n+\tbits_per_byte = 8,\n+\tbits_per_block = sizeof(size_t) * size_t(bits_per_byte) \n       };\n \n     template<typename _ForwardIterator, typename _Tp, typename _Compare>\n@@ -459,7 +459,7 @@ namespace __gnu_cxx\n     template<typename _AddrPair>\n       inline size_t\n       __num_bitmaps(_AddrPair __ap)\n-      { return __num_blocks(__ap) / bits_per_block; }\n+      { return __num_blocks(__ap) / size_t(bits_per_block); }\n \n     // _Tp should be a pointer type.\n     template<typename _Tp>\n@@ -570,7 +570,7 @@ namespace __gnu_cxx\n \n \t_Counter_type\n \t_M_offset() const throw()\n-\t{ return _M_data_offset * bits_per_block; }\n+\t{ return _M_data_offset * size_t(bits_per_block); }\n       };\n \n \n@@ -620,7 +620,7 @@ namespace __gnu_cxx\n \t  _M_last_bmap_in_block = _M_curr_bmap\n \t    - ((_M_vbp[_M_curr_index].second \n \t\t- _M_vbp[_M_curr_index].first + 1) \n-\t       / bits_per_block - 1);\n+\t       / size_t(bits_per_block) - 1);\n \t}\n     \n \t// Dangerous Function! Use with extreme care. Pass to this\n@@ -660,7 +660,7 @@ namespace __gnu_cxx\n \t_Index_type\n \t_M_offset() const throw()\n \t{\n-\t  return bits_per_block\n+\t  return size_t(bits_per_block)\n \t    * ((reinterpret_cast<size_t*>(this->_M_base()) \n \t\t- _M_curr_bmap) - 1);\n \t}\n@@ -938,7 +938,8 @@ namespace __gnu_cxx\n \t_S_check_for_free_blocks();\n #endif\n \n-\tconst size_t __num_bitmaps = _S_block_size / balloc::bits_per_block;\n+\tconst size_t __num_bitmaps = (_S_block_size\n+\t\t\t\t      / size_t(balloc::bits_per_block));\n \tconst size_t __size_to_allocate = sizeof(size_t) \n \t  + _S_block_size * sizeof(_Alloc_block) \n \t  + __num_bitmaps * sizeof(size_t);\n@@ -1136,11 +1137,12 @@ namespace __gnu_cxx\n \t  }\n \n \t// Get the position of the iterator that has been found.\n-\tconst size_t __rotate = __displacement % balloc::bits_per_block;\n+\tconst size_t __rotate = (__displacement\n+\t\t\t\t % size_t(balloc::bits_per_block));\n \tsize_t* __bitmapC = \n \t  reinterpret_cast<size_t*>\n \t  (_S_mem_blocks[__diff].first) - 1;\n-\t__bitmapC -= (__displacement / balloc::bits_per_block);\n+\t__bitmapC -= (__displacement / size_t(balloc::bits_per_block));\n       \n \tballoc::__bit_free(__bitmapC, __rotate);\n \tsize_t* __puse_count = reinterpret_cast<size_t*>\n@@ -1267,7 +1269,7 @@ namespace __gnu_cxx\n \n   template<typename _Tp>\n     size_t bitmap_allocator<_Tp>::_S_block_size = \n-    2 * balloc::bits_per_block;\n+    2 * size_t(balloc::bits_per_block);\n \n   template<typename _Tp>\n     typename __gnu_cxx::bitmap_allocator<_Tp>::_BPVector::size_type "}]}