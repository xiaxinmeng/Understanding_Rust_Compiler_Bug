{"sha": "fe052134f692c852e092a94917dfdec7b13612c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwNTIxMzRmNjkyYzg1MmUwOTJhOTQ5MTdkZmRlYzdiMTM2MTJjMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-25T05:14:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-25T05:14:57Z"}, "message": "Remove closed function.  Fix tuple receive in select.\n\nFrom-SVN: r171440", "tree": {"sha": "ace019ab5161d52cce663b4c7408d746727efc5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ace019ab5161d52cce663b4c7408d746727efc5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe052134f692c852e092a94917dfdec7b13612c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe052134f692c852e092a94917dfdec7b13612c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe052134f692c852e092a94917dfdec7b13612c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe052134f692c852e092a94917dfdec7b13612c0/comments", "author": null, "committer": null, "parents": [{"sha": "e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a"}], "stats": {"total": 465, "additions": 256, "deletions": 209}, "files": [{"sha": "861d5c0ca9914291a20da8821faf42a24b4702d8", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 8, "deletions": 30, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -6530,7 +6530,6 @@ class Builtin_call_expression : public Call_expression\n       BUILTIN_APPEND,\n       BUILTIN_CAP,\n       BUILTIN_CLOSE,\n-      BUILTIN_CLOSED,\n       BUILTIN_COMPLEX,\n       BUILTIN_COPY,\n       BUILTIN_IMAG,\n@@ -6588,8 +6587,6 @@ Builtin_call_expression::Builtin_call_expression(Gogo* gogo,\n     this->code_ = BUILTIN_CAP;\n   else if (name == \"close\")\n     this->code_ = BUILTIN_CLOSE;\n-  else if (name == \"closed\")\n-    this->code_ = BUILTIN_CLOSED;\n   else if (name == \"complex\")\n     this->code_ = BUILTIN_COMPLEX;\n   else if (name == \"copy\")\n@@ -7185,9 +7182,6 @@ Builtin_call_expression::do_type()\n     case BUILTIN_PRINTLN:\n       return Type::make_void_type();\n \n-    case BUILTIN_CLOSED:\n-      return Type::lookup_bool_type();\n-\n     case BUILTIN_RECOVER:\n       return Type::make_interface_type(NULL, BUILTINS_LOCATION);\n \n@@ -7451,7 +7445,6 @@ Builtin_call_expression::do_check_types(Gogo*)\n       break;\n \n     case BUILTIN_CLOSE:\n-    case BUILTIN_CLOSED:\n       if (this->check_one_arg())\n \t{\n \t  if (this->one_arg()->type()->channel_type() == NULL)\n@@ -7936,36 +7929,21 @@ Builtin_call_expression::do_get_tree(Translate_context* context)\n       }\n \n     case BUILTIN_CLOSE:\n-    case BUILTIN_CLOSED:\n       {\n \tconst Expression_list* args = this->args();\n \tgcc_assert(args != NULL && args->size() == 1);\n \tExpression* arg = args->front();\n \ttree arg_tree = arg->get_tree(context);\n \tif (arg_tree == error_mark_node)\n \t  return error_mark_node;\n-\tif (this->code_ == BUILTIN_CLOSE)\n-\t  {\n-\t    static tree close_fndecl;\n-\t    return Gogo::call_builtin(&close_fndecl,\n-\t\t\t\t      location,\n-\t\t\t\t      \"__go_builtin_close\",\n-\t\t\t\t      1,\n-\t\t\t\t      void_type_node,\n-\t\t\t\t      TREE_TYPE(arg_tree),\n-\t\t\t\t      arg_tree);\n-\t  }\n-\telse\n-\t  {\n-\t    static tree closed_fndecl;\n-\t    return Gogo::call_builtin(&closed_fndecl,\n-\t\t\t\t      location,\n-\t\t\t\t      \"__go_builtin_closed\",\n-\t\t\t\t      1,\n-\t\t\t\t      boolean_type_node,\n-\t\t\t\t      TREE_TYPE(arg_tree),\n-\t\t\t\t      arg_tree);\n-\t  }\n+\tstatic tree close_fndecl;\n+\treturn Gogo::call_builtin(&close_fndecl,\n+\t\t\t\t  location,\n+\t\t\t\t  \"__go_builtin_close\",\n+\t\t\t\t  1,\n+\t\t\t\t  void_type_node,\n+\t\t\t\t  TREE_TYPE(arg_tree),\n+\t\t\t\t  arg_tree);\n       }\n \n     case BUILTIN_SIZEOF:"}, {"sha": "a6411d362c484a1a21c2f54479be72eb6f8aa7ba", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -173,15 +173,6 @@ Gogo::Gogo(int int_type_size, int pointer_size)\n   close_type->set_is_builtin();\n   this->globals_->add_function_declaration(\"close\", NULL, close_type, loc);\n \n-  Typed_identifier_list* closed_result = new Typed_identifier_list();\n-  closed_result->push_back(Typed_identifier(\"\", Type::lookup_bool_type(),\n-\t\t\t\t\t    loc));\n-  Function_type* closed_type = Type::make_function_type(NULL, NULL,\n-\t\t\t\t\t\t\tclosed_result, loc);\n-  closed_type->set_is_varargs();\n-  closed_type->set_is_builtin();\n-  this->globals_->add_function_declaration(\"closed\", NULL, closed_type, loc);\n-\n   Typed_identifier_list* copy_result = new Typed_identifier_list();\n   copy_result->push_back(Typed_identifier(\"\", int_type, loc));\n   Function_type* copy_type = Type::make_function_type(NULL, NULL,\n@@ -3506,12 +3497,15 @@ Variable::determine_type()\n \t\t\t\t\t  true);\n       this->init_ = NULL;\n     }\n+  else if (this->type_from_chan_element_)\n+    {\n+      Expression* init = this->init_;\n+      init->determine_type_no_context();\n+      this->type_ = this->type_from_chan_element(init, true);\n+      this->init_ = NULL;\n+    }\n   else\n     {\n-      // type_from_chan_element_ should have been cleared during\n-      // lowering.\n-      gcc_assert(!this->type_from_chan_element_);\n-\n       Type_context context(this->type_, false);\n       this->init_->determine_type(&context);\n       if (this->type_ == NULL)"}, {"sha": "f1b93429ff20c921e27b1d78ec264f4603263c71", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -1717,6 +1717,7 @@ Parse::init_vars_from_receive(const Typed_identifier_list* vars, Type* type,\n   Statement* s = Statement::make_tuple_receive_assignment(val_var,\n \t\t\t\t\t\t\t  received_var,\n \t\t\t\t\t\t\t  receive->channel(),\n+\t\t\t\t\t\t\t  false,\n \t\t\t\t\t\t\t  location);\n \n   if (!this->gogo_->in_global_scope())\n@@ -3629,6 +3630,7 @@ Parse::tuple_assignment(Expression_list* lhs, Range_clause* p_range_clause)\n       Expression* channel = receive->channel();\n       Statement* s = Statement::make_tuple_receive_assignment(val, success,\n \t\t\t\t\t\t\t      channel,\n+\t\t\t\t\t\t\t      false,\n \t\t\t\t\t\t\t      location);\n       this->gogo_->add_statement(s);\n     }"}, {"sha": "d24d98f4f88e28f4ea5c59e130b1176bfd17e4be", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 46, "deletions": 23, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -1148,10 +1148,10 @@ class Tuple_receive_assignment_statement : public Statement\n {\n  public:\n   Tuple_receive_assignment_statement(Expression* val, Expression* closed,\n-\t\t\t\t     Expression* channel,\n+\t\t\t\t     Expression* channel, bool for_select,\n \t\t\t\t     source_location location)\n     : Statement(STATEMENT_TUPLE_RECEIVE_ASSIGNMENT, location),\n-      val_(val), closed_(closed), channel_(channel)\n+      val_(val), closed_(closed), channel_(channel), for_select_(for_select)\n   { }\n \n  protected:\n@@ -1176,6 +1176,8 @@ class Tuple_receive_assignment_statement : public Statement\n   Expression* closed_;\n   // The channel on which we receive the value.\n   Expression* channel_;\n+  // Whether this is for a select statement.\n+  bool for_select_;\n };\n \n // Traversal.\n@@ -1228,6 +1230,7 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n   b->add_statement(closed_temp);\n \n   // func chanrecv2(c chan T, val *T) bool\n+  // func chanrecv3(c chan T, val *T) bool (if for_select)\n   source_location bloc = BUILTINS_LOCATION;\n   Typed_identifier_list* param_types = new Typed_identifier_list();\n   param_types->push_back(Typed_identifier(\"c\", channel_type, bloc));\n@@ -1239,12 +1242,22 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n \n   Function_type* fntype = Type::make_function_type(NULL, param_types,\n \t\t\t\t\t\t   ret_types, bloc);\n-  Named_object* chanrecv2 =\n-    Named_object::make_function_declaration(\"chanrecv2\", NULL, fntype, bloc);\n-  chanrecv2->func_declaration_value()->set_asm_name(\"runtime.chanrecv2\");\n+  Named_object* chanrecv;\n+  if (!this->for_select_)\n+    {\n+      chanrecv = Named_object::make_function_declaration(\"chanrecv2\", NULL,\n+\t\t\t\t\t\t\t fntype, bloc);\n+      chanrecv->func_declaration_value()->set_asm_name(\"runtime.chanrecv2\");\n+    }\n+  else\n+    {\n+      chanrecv = Named_object::make_function_declaration(\"chanrecv3\", NULL,\n+\t\t\t\t\t\t\t fntype, bloc);\n+      chanrecv->func_declaration_value()->set_asm_name(\"runtime.chanrecv3\");\n+    }\n \n-  // closed_temp = chanrecv2(channel, &val_temp)\n-  Expression* func = Expression::make_func_reference(chanrecv2, NULL, loc);\n+  // closed_temp = chanrecv[23](channel, &val_temp)\n+  Expression* func = Expression::make_func_reference(chanrecv, NULL, loc);\n   Expression_list* params = new Expression_list();\n   params->push_back(this->channel_);\n   Expression* ref = Expression::make_temporary_reference(val_temp, loc);\n@@ -1272,10 +1285,11 @@ Tuple_receive_assignment_statement::do_lower(Gogo*, Named_object*,\n Statement*\n Statement::make_tuple_receive_assignment(Expression* val, Expression* closed,\n \t\t\t\t\t Expression* channel,\n+\t\t\t\t\t bool for_select,\n \t\t\t\t\t source_location location)\n {\n   return new Tuple_receive_assignment_statement(val, closed, channel,\n-\t\t\t\t\t\tlocation);\n+\t\t\t\t\t\tfor_select, location);\n }\n \n // An assignment to a pair of values from a type guard.  This is a\n@@ -4151,7 +4165,7 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n \tthis->val_ = Expression::make_sink(loc);\n       Statement* s = Statement::make_tuple_receive_assignment(this->val_,\n \t\t\t\t\t\t\t      this->closed_,\n-\t\t\t\t\t\t\t      ref, loc);\n+\t\t\t\t\t\t\t      ref, true, loc);\n       init->add_statement(s);\n     }\n   else if (this->closedvar_ != NULL)\n@@ -4165,8 +4179,14 @@ Select_clauses::Select_clause::lower(Gogo* gogo, Named_object* function,\n       Expression* closed = Expression::make_var_reference(this->closedvar_,\n \t\t\t\t\t\t\t  loc);\n       Statement* s = Statement::make_tuple_receive_assignment(val, closed, ref,\n-\t\t\t\t\t\t\t      loc);\n-      init->add_statement(s);\n+\t\t\t\t\t\t\t      true, loc);\n+      // We have to put S in STATEMENTS_, because that is where the\n+      // variables are declared.\n+      gcc_assert(this->statements_ != NULL);\n+      this->statements_->add_statement_at_front(s);\n+      // We have to lower STATEMENTS_ again, to lower the tuple\n+      // receive assignment we just added.\n+      gogo->lower_block(function, this->statements_);\n     }\n   else\n     {\n@@ -5281,7 +5301,7 @@ For_range_statement::lower_range_map(Gogo* gogo,\n // Lower a for range over a channel.\n \n void\n-For_range_statement::lower_range_channel(Gogo* gogo,\n+For_range_statement::lower_range_channel(Gogo*,\n \t\t\t\t\t Block*,\n \t\t\t\t\t Block* body_block,\n \t\t\t\t\t Named_object* range_object,\n@@ -5299,12 +5319,11 @@ For_range_statement::lower_range_channel(Gogo* gogo,\n \n   // The loop we generate:\n   //   for {\n-  //           index_temp = <-range\n-  //           if closed(range) {\n+  //           index_temp, ok_temp = <-range\n+  //           if !ok_temp {\n   //                   break\n   //           }\n   //           index = index_temp\n-  //           value = value_temp\n   //           original body\n   //   }\n \n@@ -5315,26 +5334,30 @@ For_range_statement::lower_range_channel(Gogo* gogo,\n   *ppost = NULL;\n \n   // Set *PITER_INIT to\n-  //   index_temp = <-range\n-  //   if closed(range) {\n+  //   index_temp, ok_temp = <-range\n+  //   if !ok_temp {\n   //           break\n   //   }\n \n   Block* iter_init = new Block(body_block, loc);\n \n-  Expression* ref = this->make_range_ref(range_object, range_temp, loc);\n-  Expression* cond = this->call_builtin(gogo, \"closed\", ref, loc);\n+  Temporary_statement* ok_temp =\n+    Statement::make_temporary(Type::lookup_bool_type(), NULL, loc);\n+  iter_init->add_statement(ok_temp);\n \n-  ref = this->make_range_ref(range_object, range_temp, loc);\n-  Expression* recv = Expression::make_receive(ref, loc);\n-  ref = Expression::make_temporary_reference(index_temp, loc);\n-  Statement* s = Statement::make_assignment(ref, recv, loc);\n+  Expression* cref = this->make_range_ref(range_object, range_temp, loc);\n+  Expression* iref = Expression::make_temporary_reference(index_temp, loc);\n+  Expression* oref = Expression::make_temporary_reference(ok_temp, loc);\n+  Statement* s = Statement::make_tuple_receive_assignment(iref, oref, cref,\n+\t\t\t\t\t\t\t  false, loc);\n   iter_init->add_statement(s);\n \n   Block* then_block = new Block(iter_init, loc);\n   s = Statement::make_break_statement(this->break_label(), loc);\n   then_block->add_statement(s);\n \n+  oref = Expression::make_temporary_reference(ok_temp, loc);\n+  Expression* cond = Expression::make_unary(OPERATOR_NOT, oref, loc);\n   s = Statement::make_if_statement(cond, then_block, NULL, loc);\n   iter_init->add_statement(s);\n "}, {"sha": "5199981ea64e937036dab7f6f593737c9d6f60c2", "filename": "gcc/go/gofrontend/statements.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Fgo%2Fgofrontend%2Fstatements.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.h?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -160,10 +160,12 @@ class Statement\n \t\t      Expression* should_set, source_location);\n \n   // Make an assignment from a nonblocking receive to a pair of\n-  // variables.\n+  // variables.  FOR_SELECT is true is this is being created for a\n+  // case x, ok := <-c in a select statement.\n   static Statement*\n   make_tuple_receive_assignment(Expression* val, Expression* closed,\n-\t\t\t\tExpression* channel, source_location);\n+\t\t\t\tExpression* channel, bool for_select,\n+\t\t\t\tsource_location);\n \n   // Make an assignment from a type guard to a pair of variables.\n   static Statement*"}, {"sha": "3c7412ed6ab56f071f1428c02b397cf2e3039081", "filename": "gcc/testsuite/go.test/test/chan/doubleselect.go", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -21,6 +21,8 @@ var iterations *int = flag.Int(\"n\", 100000, \"number of iterations\")\n func sender(n int, c1, c2, c3, c4 chan<- int) {\n \tdefer close(c1)\n \tdefer close(c2)\n+\tdefer close(c3)\n+\tdefer close(c4)\n \n \tfor i := 0; i < n; i++ {\n \t\tselect {\n@@ -35,26 +37,18 @@ func sender(n int, c1, c2, c3, c4 chan<- int) {\n // mux receives the values from sender and forwards them onto another channel.\n // It would be simplier to just have sender's four cases all be the same\n // channel, but this doesn't actually trigger the bug.\n-func mux(out chan<- int, in <-chan int) {\n-\tfor {\n-\t\tv := <-in\n-\t\tif closed(in) {\n-\t\t\tclose(out)\n-\t\t\tbreak\n-\t\t}\n+func mux(out chan<- int, in <-chan int, done chan<- bool) {\n+\tfor v := range in {\n \t\tout <- v\n \t}\n+\tdone <- true\n }\n \n // recver gets a steam of values from the four mux's and checks for duplicates.\n func recver(in <-chan int) {\n \tseen := make(map[int]bool)\n \n-\tfor {\n-\t\tv := <-in\n-\t\tif closed(in) {\n-\t\t\tbreak\n-\t\t}\n+\tfor v := range in {\n \t\tif _, ok := seen[v]; ok {\n \t\t\tprintln(\"got duplicate value: \", v)\n \t\t\tpanic(\"fail\")\n@@ -70,15 +64,23 @@ func main() {\n \tc2 := make(chan int)\n \tc3 := make(chan int)\n \tc4 := make(chan int)\n+\tdone := make(chan bool)\n \tcmux := make(chan int)\n \tgo sender(*iterations, c1, c2, c3, c4)\n-\tgo mux(cmux, c1)\n-\tgo mux(cmux, c2)\n-\tgo mux(cmux, c3)\n-\tgo mux(cmux, c4)\n+\tgo mux(cmux, c1, done)\n+\tgo mux(cmux, c2, done)\n+\tgo mux(cmux, c3, done)\n+\tgo mux(cmux, c4, done)\n+\tgo func() {\n+\t\t<-done\n+\t\t<-done\n+\t\t<-done\n+\t\t<-done\n+\t\tclose(cmux)\n+\t}()\n \t// We keep the recver because it might catch more bugs in the future.\n \t// However, the result of the bug linked to at the top is that we'll\n-\t// end up panicing with: \"throw: bad g->status in ready\".\n+\t// end up panicking with: \"throw: bad g->status in ready\".\n \trecver(cmux)\n \tprint(\"PASS\\n\")\n }"}, {"sha": "038ff94e369b980baa7bed42b8fec65a9a52ee4e", "filename": "gcc/testsuite/go.test/test/chan/perm.go", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -22,21 +22,18 @@ func main() {\n \n \tc <- 0 // ok\n \t<-c    // ok\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t//\tx, ok := <-c\t// ok\n-\t//\t_, _ = x, ok\n+\tx, ok := <-c\t// ok\n+\t_, _ = x, ok\n \n \tcr <- 0 // ERROR \"send\"\n \t<-cr    // ok\n-\t//TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t//\tx, ok = <-cr\t// ok\n-\t//\t_, _ = x, ok\n+\tx, ok = <-cr\t// ok\n+\t_, _ = x, ok\n \n \tcs <- 0 // ok\n \t<-cs    // ERROR \"receive\"\n-\t////TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t////\tx, ok = <-cs\t// ERROR \"receive\"\n-\t////\t_, _ = x, ok\n+\tx, ok = <-cs\t// ERROR \"receive\"\n+\t_, _ = x, ok\n \n \tselect {\n \tcase c <- 0: // ok"}, {"sha": "b4e8f8e4bf9589e5ef7da9b79bbbad9e9a488f9e", "filename": "gcc/testsuite/go.test/test/chan/select3.go", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect3.go?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -88,12 +88,16 @@ func main() {\n \t\tch <- 7\n \t})\n \n-\t// receiving (a small number of times) from a closed channel never blocks\n+\t// receiving from a closed channel never blocks\n \ttestBlock(never, func() {\n \t\tfor i := 0; i < 10; i++ {\n \t\t\tif <-closedch != 0 {\n \t\t\t\tpanic(\"expected zero value when reading from closed channel\")\n \t\t\t}\n+\t\t\tif x, ok := <-closedch; x != 0 || ok {\n+\t\t\t\tprintln(\"closedch:\", x, ok)\n+\t\t\t\tpanic(\"expected 0, false from closed channel\")\n+\t\t\t}\n \t\t}\n \t})\n \n@@ -191,9 +195,30 @@ func main() {\n \t\tcase <-closedch:\n \t\t}\n \t})\n+\ttestBlock(never, func() {\n+\t\tselect {\n+\t\tcase x := <-closedch:\n+\t\t\t_ = x\n+\t\t}\n+\t})\n+\ttestBlock(never, func() {\n+\t\tselect {\n+\t\tcase x, ok := <-closedch:\n+\t\t\t_, _ = x, ok\n+\t\t}\n+\t})\n \ttestPanic(always, func() {\n \t\tselect {\n \t\tcase closedch <- 7:\n \t\t}\n \t})\n+\n+\t// select should not get confused if it sees itself\n+\ttestBlock(always, func() {\n+\t\tc := make(chan int)\n+\t\tselect {\n+\t\tcase c <- 1:\n+\t\tcase <-c:\n+\t\t}\n+\t})\n }"}, {"sha": "95314b3345e4475e1ba6492ae2a667a91c9a775b", "filename": "gcc/testsuite/go.test/test/closedchan.go", "status": "modified", "additions": 106, "deletions": 51, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosedchan.go?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -4,7 +4,7 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-// Test close(c), closed(c).\n+// Test close(c), receive of closed channel.\n //\n // TODO(rsc): Doesn't check behavior of close(c) when there\n // are blocked senders/receivers.\n@@ -14,10 +14,11 @@ package main\n type Chan interface {\n \tSend(int)\n \tNbsend(int) bool\n-\tRecv() int\n+\tRecv() (int)\n \tNbrecv() (int, bool)\n+\tRecv2() (int, bool)\n+\tNbrecv2() (int, bool, bool)\n \tClose()\n-\tClosed() bool\n \tImpl() string\n }\n \n@@ -52,12 +53,23 @@ func (c XChan) Nbrecv() (int, bool) {\n \tpanic(\"nbrecv\")\n }\n \n-func (c XChan) Close() {\n-\tclose(c)\n+func (c XChan) Recv2() (int, bool) {\n+\tx, ok := <-c\n+\treturn x, ok\n+}\n+\n+func (c XChan) Nbrecv2() (int, bool, bool) {\n+\tselect {\n+\tcase x, ok := <-c:\n+\t\treturn x, ok, true\n+\tdefault:\n+\t\treturn 0, false, false\n+\t}\n+\tpanic(\"nbrecv2\")\n }\n \n-func (c XChan) Closed() bool {\n-\treturn closed(c)\n+func (c XChan) Close() {\n+\tclose(c)\n }\n \n func (c XChan) Impl() string {\n@@ -101,12 +113,26 @@ func (c SChan) Nbrecv() (int, bool) {\n \tpanic(\"nbrecv\")\n }\n \n-func (c SChan) Close() {\n-\tclose(c)\n+func (c SChan) Recv2() (int, bool) {\n+\tselect {\n+\tcase x, ok := <-c:\n+\t\treturn x, ok\n+\t}\n+\tpanic(\"recv\")\n }\n \n-func (c SChan) Closed() bool {\n-\treturn closed(c)\n+func (c SChan) Nbrecv2() (int, bool, bool) {\n+\tselect {\n+\tdefault:\n+\t\treturn 0, false, false\n+\tcase x, ok := <-c:\n+\t\treturn x, ok, true\n+\t}\n+\tpanic(\"nbrecv\")\n+}\n+\n+func (c SChan) Close() {\n+\tclose(c)\n }\n \n func (c SChan) Impl() string {\n@@ -156,12 +182,28 @@ func (c SSChan) Nbrecv() (int, bool) {\n \tpanic(\"nbrecv\")\n }\n \n-func (c SSChan) Close() {\n-\tclose(c)\n+func (c SSChan) Recv2() (int, bool) {\n+\tselect {\n+\tcase <-dummy:\n+\tcase x, ok := <-c:\n+\t\treturn x, ok\n+\t}\n+\tpanic(\"recv\")\n }\n \n-func (c SSChan) Closed() bool {\n-\treturn closed(c)\n+func (c SSChan) Nbrecv2() (int, bool, bool) {\n+\tselect {\n+\tcase <-dummy:\n+\tdefault:\n+\t\treturn 0, false, false\n+\tcase x, ok := <-c:\n+\t\treturn x, ok, true\n+\t}\n+\tpanic(\"nbrecv\")\n+}\n+\n+func (c SSChan) Close() {\n+\tclose(c)\n }\n \n func (c SSChan) Impl() string {\n@@ -179,29 +221,23 @@ func shouldPanic(f func()) {\n }\n \n func test1(c Chan) {\n-\t// not closed until the close signal (a zero value) has been received.\n-\tif c.Closed() {\n-\t\tprintln(\"test1: Closed before Recv zero:\", c.Impl())\n-\t}\n-\n \tfor i := 0; i < 3; i++ {\n \t\t// recv a close signal (a zero value)\n \t\tif x := c.Recv(); x != 0 {\n-\t\t\tprintln(\"test1: recv on closed got non-zero:\", x, c.Impl())\n+\t\t\tprintln(\"test1: recv on closed:\", x, c.Impl())\n \t\t}\n-\n-\t\t// should now be closed.\n-\t\tif !c.Closed() {\n-\t\t\tprintln(\"test1: not closed after recv zero\", c.Impl())\n+\t\tif x, ok := c.Recv2(); x != 0 || ok {\n+\t\t\tprintln(\"test1: recv2 on closed:\", x, ok, c.Impl())\n \t\t}\n \n-\t\t// should work with ,ok: received a value without blocking, so ok == true.\n-\t\tx, ok := c.Nbrecv()\n-\t\tif !ok {\n-\t\t\tprintln(\"test1: recv on closed got not ok\", c.Impl())\n+\t\t// should work with select: received a value without blocking, so selected == true.\n+\t\tx, selected := c.Nbrecv()\n+\t\tif x != 0 || !selected {\n+\t\t\tprintln(\"test1: recv on closed nb:\", x, selected, c.Impl())\n \t\t}\n-\t\tif x != 0 {\n-\t\t\tprintln(\"test1: recv ,ok on closed got non-zero:\", x, c.Impl())\n+\t\tx, ok, selected := c.Nbrecv2()\n+\t\tif x != 0 || ok || !selected {\n+\t\t\tprintln(\"test1: recv2 on closed nb:\", x, ok, selected, c.Impl())\n \t\t}\n \t}\n \n@@ -221,11 +257,6 @@ func test1(c Chan) {\n }\n \n func testasync1(c Chan) {\n-\t// not closed until the close signal (a zero value) has been received.\n-\tif c.Closed() {\n-\t\tprintln(\"testasync1: Closed before Recv zero:\", c.Impl())\n-\t}\n-\n \t// should be able to get the last value via Recv\n \tif x := c.Recv(); x != 1 {\n \t\tprintln(\"testasync1: Recv did not get 1:\", x, c.Impl())\n@@ -235,19 +266,31 @@ func testasync1(c Chan) {\n }\n \n func testasync2(c Chan) {\n-\t// not closed until the close signal (a zero value) has been received.\n-\tif c.Closed() {\n-\t\tprintln(\"testasync2: Closed before Recv zero:\", c.Impl())\n+\t// should be able to get the last value via Recv2\n+\tif x, ok := c.Recv2(); x != 1 || !ok {\n+\t\tprintln(\"testasync1: Recv did not get 1, true:\", x, ok, c.Impl())\n \t}\n \n+\ttest1(c)\n+}\n+\n+func testasync3(c Chan) {\n \t// should be able to get the last value via Nbrecv\n-\tif x, ok := c.Nbrecv(); !ok || x != 1 {\n-\t\tprintln(\"testasync2: Nbrecv did not get 1, true:\", x, ok, c.Impl())\n+\tif x, selected := c.Nbrecv(); x != 1 || !selected {\n+\t\tprintln(\"testasync2: Nbrecv did not get 1, true:\", x, selected, c.Impl())\n \t}\n \n \ttest1(c)\n }\n \n+func testasync4(c Chan) {\n+\t// should be able to get the last value via Nbrecv2\n+\tif x, ok, selected := c.Nbrecv2(); x != 1 || !ok || !selected {\n+\t\tprintln(\"testasync2: Nbrecv did not get 1, true, true:\", x, ok, selected, c.Impl())\n+\t}\n+\ttest1(c)\n+}\n+\n func closedsync() chan int {\n \tc := make(chan int)\n \tclose(c)\n@@ -261,15 +304,27 @@ func closedasync() chan int {\n \treturn c\n }\n \n+var mks = []func(chan int) Chan {\n+\tfunc(c chan int) Chan { return XChan(c) },\n+\tfunc(c chan int) Chan { return SChan(c) },\n+\tfunc(c chan int) Chan { return SSChan(c) },\n+}\n+\n+var testcloseds = []func(Chan) {\n+\ttestasync1,\n+\ttestasync2,\n+\ttestasync3,\n+\ttestasync4,\n+}\n+\n func main() {\n-\ttest1(XChan(closedsync()))\n-\ttest1(SChan(closedsync()))\n-\ttest1(SSChan(closedsync()))\n-\n-\ttestasync1(XChan(closedasync()))\n-\ttestasync1(SChan(closedasync()))\n-\ttestasync1(SSChan(closedasync()))\n-\ttestasync2(XChan(closedasync()))\n-\ttestasync2(SChan(closedasync()))\n-\ttestasync2(SSChan(closedasync()))\n+\tfor _, mk := range mks {\n+\t\ttest1(mk(closedsync()))\n+\t}\n+\t\n+\tfor _, testclosed := range testcloseds {\n+\t\tfor _, mk := range mks {\n+\t\t\ttestclosed(mk(closedasync()))\n+\t\t}\n+\t}\n }"}, {"sha": "7e7aab9c1d815dd7b2f0a47a6e8bb8e487ac4ac3", "filename": "gcc/testsuite/go.test/test/named1.go", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnamed1.go?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -43,10 +43,6 @@ func main() {\n \t_, b = m[2] // ERROR \"cannot .* bool.*type Bool\"\n \tm[2] = 1, b // ERROR \"cannot use.*type Bool.*as type bool\"\n \n-\t////TODO(rsc): uncomment when this syntax is valid for receive+check closed\n-\t////\t_, b = <-c // ERROR \"cannot .* bool.*type Bool\"\n-\t////\t_ = b\n-\n \tvar inter interface{}\n \t_, b = inter.(Map) // ERROR \"cannot .* bool.*type Bool\"\n \t_ = b\n@@ -57,8 +53,9 @@ func main() {\n \t_, b = minter.(Map) // ERROR \"cannot .* bool.*type Bool\"\n \t_ = b\n \n-\tasBool(closed(c)) // ERROR \"cannot use.*type bool.*as type Bool\"\n-\tb = closed(c)     // ERROR \"cannot use.*type bool.*type Bool\"\n+\t_, bb := <-c\n+\tasBool(bb) // ERROR \"cannot use.*type bool.*as type Bool\"\n+\t_, b = <-c     // ERROR \"cannot .* bool.*type Bool\"\n \t_ = b\n \n \tasString(String(slice)) // ERROR \"cannot .*type Slice.*type String\""}, {"sha": "e761e3c37d659aaa8068ced1f5bd7e18c53cabdd", "filename": "libgo/Makefile.am", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -358,7 +358,6 @@ runtime_files = \\\n \truntime/go-chan-len.c \\\n \truntime/go-check-interface.c \\\n \truntime/go-close.c \\\n-\truntime/go-closed.c \\\n \truntime/go-construct-map.c \\\n \truntime/go-convert-interface.c \\\n \truntime/go-copy.c \\"}, {"sha": "5c2407bb027f2cbc1526cb0c2dfcc63fb0fb4975", "filename": "libgo/Makefile.in", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -174,11 +174,11 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n \truntime/go-caller.c runtime/go-can-convert-interface.c \\\n \truntime/go-cgo.c runtime/go-chan-cap.c runtime/go-chan-len.c \\\n \truntime/go-check-interface.c runtime/go-close.c \\\n-\truntime/go-closed.c runtime/go-construct-map.c \\\n-\truntime/go-convert-interface.c runtime/go-copy.c \\\n-\truntime/go-defer.c runtime/go-deferred-recover.c \\\n-\truntime/go-eface-compare.c runtime/go-eface-val-compare.c \\\n-\truntime/go-getgoroot.c runtime/go-go.c runtime/go-gomaxprocs.c \\\n+\truntime/go-construct-map.c runtime/go-convert-interface.c \\\n+\truntime/go-copy.c runtime/go-defer.c \\\n+\truntime/go-deferred-recover.c runtime/go-eface-compare.c \\\n+\truntime/go-eface-val-compare.c runtime/go-getgoroot.c \\\n+\truntime/go-go.c runtime/go-gomaxprocs.c \\\n \truntime/go-int-array-to-string.c runtime/go-int-to-string.c \\\n \truntime/go-interface-compare.c \\\n \truntime/go-interface-eface-compare.c \\\n@@ -219,7 +219,7 @@ am__libgo_la_SOURCES_DIST = runtime/go-append.c runtime/go-assert.c \\\n am__objects_3 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-byte-array-to-string.lo go-breakpoint.lo go-caller.lo \\\n \tgo-can-convert-interface.lo go-cgo.lo go-chan-cap.lo \\\n-\tgo-chan-len.lo go-check-interface.lo go-close.lo go-closed.lo \\\n+\tgo-chan-len.lo go-check-interface.lo go-close.lo \\\n \tgo-construct-map.lo go-convert-interface.lo go-copy.lo \\\n \tgo-defer.lo go-deferred-recover.lo go-eface-compare.lo \\\n \tgo-eface-val-compare.lo go-getgoroot.lo go-go.lo \\\n@@ -771,7 +771,6 @@ runtime_files = \\\n \truntime/go-chan-len.c \\\n \truntime/go-check-interface.c \\\n \truntime/go-close.c \\\n-\truntime/go-closed.c \\\n \truntime/go-construct-map.c \\\n \truntime/go-convert-interface.c \\\n \truntime/go-copy.c \\\n@@ -2177,7 +2176,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-chan-len.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-check-interface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-close.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-closed.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-construct-map.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-convert-interface.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-copy.Plo@am__quote@\n@@ -2383,13 +2381,6 @@ go-close.lo: runtime/go-close.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-close.lo `test -f 'runtime/go-close.c' || echo '$(srcdir)/'`runtime/go-close.c\n \n-go-closed.lo: runtime/go-closed.c\n-@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-closed.lo -MD -MP -MF $(DEPDIR)/go-closed.Tpo -c -o go-closed.lo `test -f 'runtime/go-closed.c' || echo '$(srcdir)/'`runtime/go-closed.c\n-@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-closed.Tpo $(DEPDIR)/go-closed.Plo\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-closed.c' object='go-closed.lo' libtool=yes @AMDEPBACKSLASH@\n-@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n-@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-closed.lo `test -f 'runtime/go-closed.c' || echo '$(srcdir)/'`runtime/go-closed.c\n-\n go-construct-map.lo: runtime/go-construct-map.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-construct-map.lo -MD -MP -MF $(DEPDIR)/go-construct-map.Tpo -c -o go-construct-map.lo `test -f 'runtime/go-construct-map.c' || echo '$(srcdir)/'`runtime/go-construct-map.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-construct-map.Tpo $(DEPDIR)/go-construct-map.Plo"}, {"sha": "9326f2689ae2ddc265699b644b9d7f2b3d5cc3b6", "filename": "libgo/runtime/chan.goc", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fchan.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fchan.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.goc?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -10,7 +10,7 @@ typedef _Bool bool;\n typedef unsigned char byte;\n typedef struct __go_channel chan;\n \n-/* Do a nonblocking channel receive.  */\n+/* Do a channel receive with closed status.  */\n \n func chanrecv2(c *chan, val *byte) (received bool) {\n \tif (c->element_size > 8) {\n@@ -31,3 +31,25 @@ func chanrecv2(c *chan, val *byte) (received bool) {\n \t\treturn received;\n \t}\n }\n+\n+/* Do a channel receive with closed status for a select statement.  */\n+\n+func chanrecv3(c *chan, val *byte) (received bool) {\n+\tif (c->element_size > 8) {\n+\t\treturn __go_receive_big(c, val, 1);\n+\t} else {\n+\t\tunion {\n+\t\t\tchar b[8];\n+\t\t\tuint64_t v;\n+\t\t} u;\n+\n+\t\tu.v = __go_receive_small_closed(c, 1, &received);\n+#ifndef WORDS_BIGENDIAN\n+\t\t__builtin_memcpy(val, u.b, c->element_size);\n+#else\n+\t\t__builtin_memcpy(val, u.b + 8 - c->element_size,\n+\t\t\t\t c->element_size);\n+#endif\n+\t\treturn received;\n+\t}\n+}"}, {"sha": "cd439bf4ccb7a942b050c08c6bd0f363a3275d09", "filename": "libgo/runtime/channel.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fchannel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fchannel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchannel.h?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -50,9 +50,6 @@ struct __go_channel\n   _Bool selected_for_receive;\n   /* True if this channel has been closed.  */\n   _Bool is_closed;\n-  /* True if at least one null value has been read from a closed\n-     channel.  */\n-  _Bool saw_close;\n   /* The list of select statements waiting to send on a synchronous\n      channel.  */\n   struct __go_channel_select *select_send_queue;"}, {"sha": "bfa9cd6f9cc6cafbde04e1f021dc2471d9bd47c3", "filename": "libgo/runtime/go-closed.c", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a/libgo%2Fruntime%2Fgo-closed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a/libgo%2Fruntime%2Fgo-closed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-closed.c?ref=e533b2a4c9ce8ee4fd207728dba3a9e2ffc5374a", "patch": "@@ -1,34 +0,0 @@\n-/* go-closed.c -- the builtin closed function.\n-\n-   Copyright 2009 The Go Authors. All rights reserved.\n-   Use of this source code is governed by a BSD-style\n-   license that can be found in the LICENSE file.  */\n-\n-#include \"go-assert.h\"\n-#include \"channel.h\"\n-\n-/* Return whether a channel is closed.  We only return true after at\n-   least one nil value has been read from the channel.  */\n-\n-_Bool\n-__go_builtin_closed (struct __go_channel *channel)\n-{\n-  int i;\n-  _Bool ret;\n-\n-  i = pthread_mutex_lock (&channel->lock);\n-  __go_assert (i == 0);\n-\n-  while (channel->selected_for_receive)\n-    {\n-      i = pthread_cond_wait (&channel->cond, &channel->lock);\n-      __go_assert (i == 0);\n-    }\n-\n-  ret = channel->saw_close;\n-\n-  i = pthread_mutex_unlock (&channel->lock);\n-  __go_assert (i == 0);\n-\n-  return ret;\n-}"}, {"sha": "3ddc205e05d01e09b276d573660417af3a1da375", "filename": "libgo/runtime/go-new-channel.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-new-channel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-new-channel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new-channel.c?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -44,7 +44,6 @@ __go_new_channel (size_t element_size, size_t entries)\n   ret->selected_for_send = 0;\n   ret->selected_for_receive = 0;\n   ret->is_closed = 0;\n-  ret->saw_close = 0;\n   ret->select_send_queue = NULL;\n   ret->select_receive_queue = NULL;\n   ret->select_mutex = NULL;"}, {"sha": "29cad9af620cc1ad2148185fbf6a6a26e0ed97ce", "filename": "libgo/runtime/go-rec-nb-small.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-rec-nb-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-rec-nb-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rec-nb-small.c?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -32,7 +32,6 @@ __go_receive_nonblocking_acquire (struct __go_channel *channel)\n \t  ? channel->next_store == 0\n \t  : channel->next_fetch == channel->next_store))\n     {\n-      channel->saw_close = 1;\n       __go_unlock_and_notify_selects (channel);\n       return RECEIVE_NONBLOCKING_ACQUIRE_CLOSED;\n     }"}, {"sha": "019b20a456ba8d63ed1c23992e039d53f88c9551", "filename": "libgo/runtime/go-rec-small.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-rec-small.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe052134f692c852e092a94917dfdec7b13612c0/libgo%2Fruntime%2Fgo-rec-small.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-rec-small.c?ref=fe052134f692c852e092a94917dfdec7b13612c0", "patch": "@@ -124,7 +124,6 @@ __go_receive_acquire (struct __go_channel *channel, _Bool for_select)\n \t      ? channel->next_store == 0\n \t      : channel->next_fetch == channel->next_store))\n \t{\n-\t  channel->saw_close = 1;\n \t  channel->selected_for_receive = 0;\n \t  __go_unlock_and_notify_selects (channel);\n \t  return 0;"}]}