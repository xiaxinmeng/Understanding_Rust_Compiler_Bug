{"sha": "b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjJiY2Y1NTc3YWU2YzViZmQyYjhmMWRjNzhjYmEyYjBjMjYwNzc0MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2007-01-20T01:31:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2007-01-20T01:31:06Z"}, "message": "tree-ssa-operands.h (struct vuse_vec_d): Change num_vuse field to unsigned.\n\n\t* tree-ssa-operands.h (struct vuse_vec_d): Change num_vuse field\n\tto unsigned.\n\t(VUSE_VECT_ELEMENT) [ENABLE_CHECKING]: Use unsigned comparison.\n\t(VUSE_ELEMENT_PTR) [ENABLE_CHECKING]: Likewise.\n\t(SET_VUSE_VECT_ELEMENT) [ENABLE_CHECKING]: Likewise.\n\t(SET_VUSE_ELEMENT_VAR) [ENABLE_CHECKING]: Likewise.\n\t(SET_VUSE_ELEMENT_PTR) [ENABLE_CHECKING]: Likewise.\n\t(realloc_vdef, realloc_vuse): Change second parameter to\n\tunsigned.\n\t(ssa_operand_iterator_d): Change vuse_index and mayuse_index\n\tfields to unsigned.\n\t* tree-ssa-operands.c (realloc_vop): Change num_elem parameter to\n\tunsigned. Change x and lim locals to unsigned.\n\t(realloc_vdef, realloc_vuse): Change num_elem parameter to\n\tunsigned.\n\t(finalize_ssa_vuse_ops): Change old_i local to unsigned.\n\t(copy_virtual_operands): Change i and n locals to unsigned.\n\nFrom-SVN: r120994", "tree": {"sha": "3cfdc7138a1a52acc7fa7a395dffecbf41e0546c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3cfdc7138a1a52acc7fa7a395dffecbf41e0546c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/comments", "author": null, "committer": null, "parents": [{"sha": "92d966284c9a0eb34f54568e223b40a3c335922c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92d966284c9a0eb34f54568e223b40a3c335922c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92d966284c9a0eb34f54568e223b40a3c335922c"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "d5eb9aec6864289ff642745a1e2a5ac189412b74", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "patch": "@@ -1,3 +1,23 @@\n+2007-01-19  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree-ssa-operands.h (struct vuse_vec_d): Change num_vuse field\n+\tto unsigned.\n+\t(VUSE_VECT_ELEMENT) [ENABLE_CHECKING]: Use unsigned comparison.\n+\t(VUSE_ELEMENT_PTR) [ENABLE_CHECKING]: Likewise.\n+\t(SET_VUSE_VECT_ELEMENT) [ENABLE_CHECKING]: Likewise.\n+\t(SET_VUSE_ELEMENT_VAR) [ENABLE_CHECKING]: Likewise.\n+\t(SET_VUSE_ELEMENT_PTR) [ENABLE_CHECKING]: Likewise.\n+\t(realloc_vdef, realloc_vuse): Change second parameter to\n+\tunsigned.\n+\t(ssa_operand_iterator_d): Change vuse_index and mayuse_index\n+\tfields to unsigned.\n+\t* tree-ssa-operands.c (realloc_vop): Change num_elem parameter to\n+\tunsigned. Change x and lim locals to unsigned.\n+\t(realloc_vdef, realloc_vuse): Change num_elem parameter to\n+\tunsigned.\n+\t(finalize_ssa_vuse_ops): Change old_i local to unsigned.\n+\t(copy_virtual_operands): Change i and n locals to unsigned.\n+\n 2007-01-19  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/29335"}, {"sha": "44e8707844fbd026b49c95c1ee8bdaac11554be3", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "patch": "@@ -1,5 +1,5 @@\n /* SSA operands management for trees.\n-   Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -671,9 +671,10 @@ add_vdef_op (tree stmt, tree op, int num, voptype_p last)\n    is the head of the operand list it belongs to.  */\n \n static inline struct voptype_d *\n-realloc_vop (struct voptype_d *ptr, int num_elem, struct voptype_d **root)\n+realloc_vop (struct voptype_d *ptr, unsigned int num_elem,\n+\t     struct voptype_d **root)\n {\n-  int x, lim;\n+  unsigned int x, lim;\n   tree stmt, val;\n   struct voptype_d *ret, *tmp;\n \n@@ -732,7 +733,7 @@ realloc_vop (struct voptype_d *ptr, int num_elem, struct voptype_d **root)\n /* Reallocate the PTR vdef so that it has NUM_ELEM use slots.  */\n \n struct voptype_d *\n-realloc_vdef (struct voptype_d *ptr, int num_elem)\n+realloc_vdef (struct voptype_d *ptr, unsigned int num_elem)\n {\n   tree val, stmt;\n   struct voptype_d *ret;\n@@ -748,7 +749,7 @@ realloc_vdef (struct voptype_d *ptr, int num_elem)\n /* Reallocate the PTR vuse so that it has NUM_ELEM use slots.  */\n \n struct voptype_d *\n-realloc_vuse (struct voptype_d *ptr, int num_elem)\n+realloc_vuse (struct voptype_d *ptr, unsigned int num_elem)\n {\n   tree stmt;\n   struct voptype_d *ret;\n@@ -982,8 +983,7 @@ finalize_ssa_vdefs (tree stmt)\n static inline void\n finalize_ssa_vuse_ops (tree stmt)\n {\n-  unsigned new_i;\n-  int old_i;\n+  unsigned new_i, old_i;\n   voptype_p old_ops, last;\n   VEC(tree,heap) *new_ops;\n   stmt_ann_t ann;\n@@ -2412,7 +2412,7 @@ update_stmt_operands (tree stmt)\n void\n copy_virtual_operands (tree dest, tree src)\n {\n-  int i, n;\n+  unsigned int i, n;\n   voptype_p src_vuses, dest_vuses;\n   voptype_p src_vdefs, dest_vdefs;\n   struct voptype_d vuse;"}, {"sha": "363b85866990e872570bfd8d6c696ee70ef00d70", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=b2bcf5577ae6c5bfd2b8f1dc78cba2b0c2607741", "patch": "@@ -1,5 +1,5 @@\n /* SSA operand management for trees.\n-   Copyright (C) 2003, 2005 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2005, 2006, 2007 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -58,7 +58,7 @@ typedef struct vuse_element_d\n \n typedef struct vuse_vec_d\n {\n-  int num_vuse;\n+  unsigned int num_vuse;\n   vuse_element_t uses[1];\n } vuse_vec_t;\n typedef struct vuse_vec_d *vuse_vec_p;\n@@ -70,23 +70,23 @@ typedef struct vuse_vec_d *vuse_vec_p;\n \n #ifdef ENABLE_CHECKING\n #define VUSE_VECT_ELEMENT(V,X)\t\t\t\t\t\t\\\n-    (gcc_assert ((X) >= 0 && (X) < VUSE_VECT_NUM_ELEM (V)),\t\t\\\n+    (gcc_assert (((unsigned int) (X)) < VUSE_VECT_NUM_ELEM (V)),\t\\\n      VUSE_VECT_ELEMENT_NC (V,X))\n \n #define VUSE_ELEMENT_PTR(V,X)\t\t\t\t\t\t\\\n-    (gcc_assert ((X) >= 0 && (X) < VUSE_VECT_NUM_ELEM (V)),\t\t\\\n+    (gcc_assert (((unsigned int) (X)) < VUSE_VECT_NUM_ELEM (V)),\t\\\n      VUSE_ELEMENT_PTR_NC (V, X))\n \n #define SET_VUSE_VECT_ELEMENT(V,X,N)\t\t\t\t\t\\\n-    (gcc_assert ((X) >= 0 && (X) < VUSE_VECT_NUM_ELEM (V)),\t\t\\\n+    (gcc_assert (((unsigned int) (X)) < VUSE_VECT_NUM_ELEM (V)),\t\\\n      VUSE_VECT_ELEMENT_NC (V,X) = (N))\n \n #define SET_VUSE_ELEMENT_VAR(V,X,N)\t\t\t\t\t\\\n-    (gcc_assert ((X) >= 0 && (X) < VUSE_VECT_NUM_ELEM (V)),\t\t\\\n+    (gcc_assert (((unsigned int) (X)) < VUSE_VECT_NUM_ELEM (V)),\t\\\n      VUSE_VECT_ELEMENT_NC ((V),(X)).use_var = (N))\n \n #define SET_VUSE_ELEMENT_PTR(V,X,N)\t\t\t\t\t\\\n-    (gcc_assert ((X) >= 0 && (X) < VUSE_VECT_NUM_ELEM (V)),\t\t\\\n+    (gcc_assert (((unsigned int) (X)) < VUSE_VECT_NUM_ELEM (V)),\t\\\n      VUSE_ELEMENT_PTR_NC (V, X) = (N))\n #else\n #define VUSE_VECT_ELEMENT(V,X) VUSE_VECT_ELEMENT_NC(V,X)\n@@ -203,8 +203,8 @@ typedef struct stmt_operands_d *stmt_operands_p;\n #define PHI_ARG_INDEX_FROM_USE(USE)   phi_arg_index_from_use (USE)\n \n \n-extern struct voptype_d *realloc_vdef (struct voptype_d *, int);\n-extern struct voptype_d *realloc_vuse (struct voptype_d *, int);\n+extern struct voptype_d *realloc_vdef (struct voptype_d *, unsigned int);\n+extern struct voptype_d *realloc_vuse (struct voptype_d *, unsigned int);\n \n extern void init_ssa_operands (void);\n extern void fini_ssa_operands (void);\n@@ -254,8 +254,8 @@ typedef struct ssa_operand_iterator_d\n   int num_phi;\n   tree phi_stmt;\n   bool done;\n-  int vuse_index;\n-  int mayuse_index;\n+  unsigned int vuse_index;\n+  unsigned int mayuse_index;\n } ssa_op_iter;\n \n /* These flags are used to determine which operands are returned during "}]}