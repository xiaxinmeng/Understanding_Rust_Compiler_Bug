{"sha": "81ad201ac5f609fb1f294b36045f4e3bfcb33695", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFhZDIwMWFjNWY2MDlmYjFmMjk0YjM2MDQ1ZjRlM2JmY2IzMzY5NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-05-17T15:01:07Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-05-17T15:01:07Z"}, "message": "md.texi (Canonicalization of Instructions): Describe the canonical form of instructions that inherently set a condition...\n\n\t* doc/md.texi (Canonicalization of Instructions): Describe the\n\tcanonical form of instructions that inherently set a condition\n\tcode register.\n\nFrom-SVN: r248156", "tree": {"sha": "0b4d9747254c1a08d9ad6d9f2eb3bc873abf93d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b4d9747254c1a08d9ad6d9f2eb3bc873abf93d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81ad201ac5f609fb1f294b36045f4e3bfcb33695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ad201ac5f609fb1f294b36045f4e3bfcb33695", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ad201ac5f609fb1f294b36045f4e3bfcb33695", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ad201ac5f609fb1f294b36045f4e3bfcb33695/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9853cb287243f9f3555b0c60a3b0d27998fe23b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9853cb287243f9f3555b0c60a3b0d27998fe23b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9853cb287243f9f3555b0c60a3b0d27998fe23b1"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "068ddd90d1e741a442c6f4625953f109cae4cab4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ad201ac5f609fb1f294b36045f4e3bfcb33695/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ad201ac5f609fb1f294b36045f4e3bfcb33695/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=81ad201ac5f609fb1f294b36045f4e3bfcb33695", "patch": "@@ -1,3 +1,9 @@\n+2017-05-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* doc/md.texi (Canonicalization of Instructions): Describe the\n+\tcanonical form of instructions that inherently set a condition\n+\tcode register.\n+\n 2017-05-17  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR middle-end/80775"}, {"sha": "e3daceacf52d8d067f05891598806d2820f22136", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81ad201ac5f609fb1f294b36045f4e3bfcb33695/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81ad201ac5f609fb1f294b36045f4e3bfcb33695/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=81ad201ac5f609fb1f294b36045f4e3bfcb33695", "patch": "@@ -7257,6 +7257,25 @@ the operations as far as possible.  For instance,\n For the @code{compare} operator, a constant is always the second operand\n if the first argument is a condition code register or @code{(cc0)}.\n \n+@item\n+For instructions that inherently set a condition code register, the\n+@code{compare} operator is always written as the first RTL expression of\n+the @code{parallel} instruction pattern.  For example,\n+\n+@smallexample\n+(define_insn \"\"\n+  [(set (reg:CCZ FLAGS_REG)\n+\t(compare:CCZ\n+\t  (plus:SI\n+\t    (match_operand:SI 1 \"register_operand\" \"%r\")\n+\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t  (const_int 0)))\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"\"\n+  \"addl %0, %1, %2\")\n+@end smallexample\n+\n @item\n An operand of @code{neg}, @code{not}, @code{mult}, @code{plus}, or\n @code{minus} is made the first operand under the same conditions as"}]}