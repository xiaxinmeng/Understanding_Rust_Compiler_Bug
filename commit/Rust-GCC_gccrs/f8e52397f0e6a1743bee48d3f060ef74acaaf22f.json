{"sha": "f8e52397f0e6a1743bee48d3f060ef74acaaf22f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlNTIzOTdmMGU2YTE3NDNiZWU0OGQzZjA2MGVmNzRhY2FhZjIyZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-11T23:54:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-01-11T23:54:53Z"}, "message": "alpha.h (TARGET_SWITCHES): Document switches.\n\n        * alpha.h (TARGET_SWITCHES): Document switches.\n        (TARGET_OPTIONS): Likewise.\n\nFrom-SVN: r24626", "tree": {"sha": "d2c568e394ef04543b0e47cf3b3b7459e16085dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2c568e394ef04543b0e47cf3b3b7459e16085dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8e52397f0e6a1743bee48d3f060ef74acaaf22f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e52397f0e6a1743bee48d3f060ef74acaaf22f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8e52397f0e6a1743bee48d3f060ef74acaaf22f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8e52397f0e6a1743bee48d3f060ef74acaaf22f/comments", "author": null, "committer": null, "parents": [{"sha": "5ad98185114ec29301d1befe714e74b387e4b4d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad98185114ec29301d1befe714e74b387e4b4d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad98185114ec29301d1befe714e74b387e4b4d6"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "c9e12e18af49de75f270d01b6f8235d47e0a1eaa", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8e52397f0e6a1743bee48d3f060ef74acaaf22f/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8e52397f0e6a1743bee48d3f060ef74acaaf22f/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=f8e52397f0e6a1743bee48d3f060ef74acaaf22f", "patch": "@@ -185,26 +185,30 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n    where VALUE is the bits to set or minus the bits to clear.\n    An empty string NAME is used to identify the default VALUE.  */\n \n-#define TARGET_SWITCHES\t\t\t\t\\\n-  { {\"no-soft-float\", MASK_FP},\t\t\t\\\n-    {\"soft-float\", - MASK_FP},\t\t\t\\\n-    {\"fp-regs\", MASK_FPREGS},\t\t\t\\\n-    {\"no-fp-regs\", - (MASK_FP|MASK_FPREGS)},\t\\\n-    {\"alpha-as\", -MASK_GAS},\t\t\t\\\n-    {\"gas\", MASK_GAS},\t\t\t\t\\\n-    {\"ieee-conformant\", MASK_IEEE_CONFORMANT},\t\\\n-    {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT},\t\\\n-    {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT}, \\\n-    {\"build-constants\", MASK_BUILD_CONSTANTS},  \\\n-    {\"float-vax\", MASK_FLOAT_VAX},\t\t\\\n-    {\"float-ieee\", -MASK_FLOAT_VAX},\t\t\\\n-    {\"bwx\", MASK_BWX},\t\t\t\t\\\n-    {\"no-bwx\", -MASK_BWX},\t\t\t\\\n-    {\"cix\", MASK_CIX},\t\t\t\t\\\n-    {\"no-cix\", -MASK_CIX},\t\t\t\\\n-    {\"max\", MASK_MAX},\t\t\t\t\\\n-    {\"no-max\", -MASK_MAX},\t\t\t\\\n-    {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT} }\n+#define TARGET_SWITCHES\t\t\t\t\t\t\t\\\n+  { {\"no-soft-float\", MASK_FP, \"Use hardware fp\"},\t\t\t\\\n+    {\"soft-float\", - MASK_FP, \"Do not use hardware fp\"},\t\t\\\n+    {\"fp-regs\", MASK_FPREGS, \"Use fp registers\"},\t\t\t\\\n+    {\"no-fp-regs\", - (MASK_FP|MASK_FPREGS), \"Do not use fp registers\"},\t\\\n+    {\"alpha-as\", -MASK_GAS, \"Do not assume GAS\"},\t\t\t\\\n+    {\"gas\", MASK_GAS, \"Assume GAS\"},\t\t\t\t\t\\\n+    {\"ieee-conformant\", MASK_IEEE_CONFORMANT,\t\t\t\t\\\n+     \"Request IEEE-conformant math library routines (OSF/1)\"},\t\t\\\n+    {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT,\t\t\t\t\\\n+     \"Emit IEEE-conformant code, without inexact exceptions\"},\t\t\\\n+    {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT,\t\\\n+     \"Emit IEEE-conformant code, with inexact exceptions\"},\t\t\\\n+    {\"build-constants\", MASK_BUILD_CONSTANTS,\t\t\t\t\\\n+     \"Do not emit complex integer constants to read-only memory\"},\t\\\n+    {\"float-vax\", MASK_FLOAT_VAX, \"Use VAX fp\"},\t\t\t\\\n+    {\"float-ieee\", -MASK_FLOAT_VAX, \"Do not use VAX fp\"},\t\t\\\n+    {\"bwx\", MASK_BWX, \"Emit code for the byte/word ISA extension\"},\t\\\n+    {\"no-bwx\", -MASK_BWX, \"\"},\t\t\t\t\t\t\\\n+    {\"cix\", MASK_CIX, \"Emit code for the counting ISA extension\"},\t\\\n+    {\"no-cix\", -MASK_CIX, \"\"},\t\t\t\t\t\t\\\n+    {\"max\", MASK_MAX, \"Emit code for the motion video ISA extension\"},\t\\\n+    {\"no-max\", -MASK_MAX, \"\"},\t\t\t\t\t\t\\\n+    {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT, \"\"} }\n \n #define TARGET_DEFAULT MASK_FP|MASK_FPREGS\n \n@@ -235,13 +239,18 @@ extern char *alpha_fptm_string;\t/* For -mfp-trap-mode=[n|u|su|sui]  */\n extern char *alpha_tp_string;\t/* For -mtrap-precision=[p|f|i] */\n extern char *alpha_mlat_string;\t/* For -mmemory-latency= */\n \n-#define TARGET_OPTIONS\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  {\"cpu=\",\t\t&alpha_cpu_string},\t\\\n-  {\"fp-rounding-mode=\",\t&alpha_fprm_string},\t\\\n-  {\"fp-trap-mode=\",\t&alpha_fptm_string},\t\\\n-  {\"trap-precision=\",\t&alpha_tp_string},\t\\\n-  {\"memory-latency=\",\t&alpha_mlat_string},\t\\\n+#define TARGET_OPTIONS\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  {\"cpu=\",\t\t&alpha_cpu_string,\t\t\\\n+   \"Generate code for a given CPU\"},\t\t\t\\\n+  {\"fp-rounding-mode=\",\t&alpha_fprm_string,\t\t\\\n+   \"Control the generated fp rounding mode\"},\t\t\\\n+  {\"fp-trap-mode=\",\t&alpha_fptm_string,\t\t\\\n+   \"Control the IEEE trap mode\"},\t\t\t\\\n+  {\"trap-precision=\",\t&alpha_tp_string,\t\t\\\n+   \"Control the precision given to fp exceptions\"},\t\\\n+  {\"memory-latency=\",\t&alpha_mlat_string,\t\t\\\n+   \"Tune expected memory latency\"},\t\t\t\\\n }\n \n /* Attempt to describe CPU characteristics to the preprocessor.  */"}]}