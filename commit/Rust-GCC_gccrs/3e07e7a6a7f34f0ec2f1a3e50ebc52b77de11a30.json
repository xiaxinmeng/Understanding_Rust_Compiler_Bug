{"sha": "3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UwN2U3YTZhN2YzNGYwZWMyZjFhM2U1MGViYzUyYjc3ZGUxMWEzMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-23T09:23:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-23T09:23:42Z"}, "message": "c++: Diagnose references to void in structured bindings [PR99650]\n\nWe ICE on the following testcase, because std::tuple_element<...,...>::type\nis void and for structured bindings we therefore need to create\nvoid & or void && which is invalid.  We created such REFERENCE_TYPE and\nlater ICEd in the middle-end.\nThe following patch fixes it by diagnosing that.\n\n2021-03-23  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/99650\n\t* decl.c (cp_finish_decomp): Diagnose void initializers when\n\tusing tuple_element and get.\n\n\t* g++.dg/cpp1z/decomp55.C: New test.", "tree": {"sha": "9de1e3a2da95fe61d4939efd2fba0bfa1813a0e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9de1e3a2da95fe61d4939efd2fba0bfa1813a0e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a28cc94a27529b3108ea85be9ef5557a3c95791d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a28cc94a27529b3108ea85be9ef5557a3c95791d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a28cc94a27529b3108ea85be9ef5557a3c95791d"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "b1d8e444b66ed2ac1a3e2e38d2cd3f63b14dcf9b", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "patch": "@@ -8629,6 +8629,12 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n \t\t\t : get_tuple_element_type (type, i));\n \t  input_location = sloc;\n \n+\t  if (VOID_TYPE_P (eltype))\n+\t    {\n+\t      error (\"%<std::tuple_element<%u, %T>::type%> is %<void%>\",\n+\t\t     i, type);\n+\t      eltype = error_mark_node;\n+\t    }\n \t  if (init == error_mark_node || eltype == error_mark_node)\n \t    {\n \t      inform (dloc, \"in initialization of structured binding \""}, {"sha": "bb4bf754abb64b88ca417c0696b7c2e4ee6bd5a7", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp55.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp55.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp55.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp55.C?ref=3e07e7a6a7f34f0ec2f1a3e50ebc52b77de11a30", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/99650\n+// { dg-do compile { target c++17 } }\n+\n+namespace std {\n+  template<typename T> struct tuple_size;\n+  template<int, typename> struct tuple_element;\n+}\n+\n+struct A {\n+  int i;\n+  template <int I> void get() { }\n+};\n+\n+template<> struct std::tuple_size<A> { static const int value = 2; };\n+template<int I> struct std::tuple_element<I,A> { using type = void; };\n+\n+A a = { 42 };\n+auto [ x, y ] = a;\t// { dg-error \".std::tuple_element<0, A>::type. is .void.\" }\n+// { dg-message \"in initialization of structured binding variable 'x'\" \"\" { target *-*-* } .-1 }"}]}