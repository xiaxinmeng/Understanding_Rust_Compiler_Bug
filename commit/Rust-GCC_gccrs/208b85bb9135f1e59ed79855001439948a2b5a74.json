{"sha": "208b85bb9135f1e59ed79855001439948a2b5a74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA4Yjg1YmI5MTM1ZjFlNTllZDc5ODU1MDAxNDM5OTQ4YTJiNWE3NA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-04-28T13:38:18Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-04-28T13:38:18Z"}, "message": "[internal-fn.c][committed] Convert conditional compilation on WORD_REGISTER_OPERATIONS\n\n\t* internal-fn.c (expand_arith_overflow): Convert preprocessor check\n\tfor WORD_REGISTER_OPERATIONS to runtime check.\n\nFrom-SVN: r235569", "tree": {"sha": "97fbc889e2e1cb2a36163410fb2b482504b5b669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97fbc889e2e1cb2a36163410fb2b482504b5b669"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/208b85bb9135f1e59ed79855001439948a2b5a74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208b85bb9135f1e59ed79855001439948a2b5a74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/208b85bb9135f1e59ed79855001439948a2b5a74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/208b85bb9135f1e59ed79855001439948a2b5a74/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "31ae5117dde03c3069598da1d92ba61127b6e4fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31ae5117dde03c3069598da1d92ba61127b6e4fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31ae5117dde03c3069598da1d92ba61127b6e4fe"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "b7237c2f7f3b9f67d1a7228003f07a30fa48821e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208b85bb9135f1e59ed79855001439948a2b5a74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208b85bb9135f1e59ed79855001439948a2b5a74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=208b85bb9135f1e59ed79855001439948a2b5a74", "patch": "@@ -1,3 +1,8 @@\n+2016-04-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* internal-fn.c (expand_arith_overflow): Convert preprocessor check\n+\tfor WORD_REGISTER_OPERATIONS to runtime check.\n+\n 2016-04-28  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.h (ASM_SPEC): Pass mfpuda to assembler."}, {"sha": "e70c73aba8a7f516626c6ae89add850cec8bfa5c", "filename": "gcc/internal-fn.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/208b85bb9135f1e59ed79855001439948a2b5a74/gcc%2Finternal-fn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/208b85bb9135f1e59ed79855001439948a2b5a74/gcc%2Finternal-fn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.c?ref=208b85bb9135f1e59ed79855001439948a2b5a74", "patch": "@@ -1807,11 +1807,7 @@ expand_arith_overflow (enum tree_code code, gimple *stmt)\n       /* For sub-word operations, retry with a wider type first.  */\n       if (orig_precres == precres && precop <= BITS_PER_WORD)\n \t{\n-#if WORD_REGISTER_OPERATIONS\n-\t  int p = BITS_PER_WORD;\n-#else\n-\t  int p = precop;\n-#endif\n+\t  int p = WORD_REGISTER_OPERATIONS ? BITS_PER_WORD : precop;\n \t  enum machine_mode m = smallest_mode_for_size (p, MODE_INT);\n \t  tree optype = build_nonstandard_integer_type (GET_MODE_PRECISION (m),\n \t\t\t\t\t\t\tuns0_p && uns1_p"}]}