{"sha": "e7785777738f0dc4cd53ec52252b72bf6a7a7020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc3ODU3Nzc3MzhmMGRjNGNkNTNlYzUyMjUyYjcyYmY2YTdhNzAyMA==", "commit": {"author": {"name": "Joshua Watt", "email": "jpewhacker@gmail.com", "date": "2018-05-09T15:25:27Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-05-09T15:25:27Z"}, "message": "Add ax_pthread.m4 for use in binutils-gdb\n\nconfig/\n\t* ax_pthread.m4: Add file\n\nFrom-SVN: r260083", "tree": {"sha": "1e21b607d28ace61b4cabd5dd5a0e1b3971a1ba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e21b607d28ace61b4cabd5dd5a0e1b3971a1ba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7785777738f0dc4cd53ec52252b72bf6a7a7020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7785777738f0dc4cd53ec52252b72bf6a7a7020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7785777738f0dc4cd53ec52252b72bf6a7a7020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7785777738f0dc4cd53ec52252b72bf6a7a7020/comments", "author": {"login": "JPEWdev", "id": 6453652, "node_id": "MDQ6VXNlcjY0NTM2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/6453652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JPEWdev", "html_url": "https://github.com/JPEWdev", "followers_url": "https://api.github.com/users/JPEWdev/followers", "following_url": "https://api.github.com/users/JPEWdev/following{/other_user}", "gists_url": "https://api.github.com/users/JPEWdev/gists{/gist_id}", "starred_url": "https://api.github.com/users/JPEWdev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JPEWdev/subscriptions", "organizations_url": "https://api.github.com/users/JPEWdev/orgs", "repos_url": "https://api.github.com/users/JPEWdev/repos", "events_url": "https://api.github.com/users/JPEWdev/events{/privacy}", "received_events_url": "https://api.github.com/users/JPEWdev/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "247f726f8a80c9cf7eccd66e42857a93dec493ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/247f726f8a80c9cf7eccd66e42857a93dec493ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/247f726f8a80c9cf7eccd66e42857a93dec493ef"}], "stats": {"total": 489, "additions": 489, "deletions": 0}, "files": [{"sha": "3a488a1ae351aabfcfd23a231c812002d04c4b68", "filename": "config/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7785777738f0dc4cd53ec52252b72bf6a7a7020/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7785777738f0dc4cd53ec52252b72bf6a7a7020/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=e7785777738f0dc4cd53ec52252b72bf6a7a7020", "patch": "@@ -1,3 +1,7 @@\n+2018-05-09  Joshua Watt <jpewhacker@gmail.com>\n+\n+        * ax_pthread.m4: Add file.\n+\n 2018-05-08  Richard Biener  <rguenther@suse.de>\n \n \tPR bootstrap/85571"}, {"sha": "5fbf9fe0d68616042f87a8365190211cb8ccfbf1", "filename": "config/ax_pthread.m4", "status": "added", "additions": 485, "deletions": 0, "changes": 485, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7785777738f0dc4cd53ec52252b72bf6a7a7020/config%2Fax_pthread.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7785777738f0dc4cd53ec52252b72bf6a7a7020/config%2Fax_pthread.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fax_pthread.m4?ref=e7785777738f0dc4cd53ec52252b72bf6a7a7020", "patch": "@@ -0,0 +1,485 @@\n+# ===========================================================================\n+#        https://www.gnu.org/software/autoconf-archive/ax_pthread.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])\n+#\n+# DESCRIPTION\n+#\n+#   This macro figures out how to build C programs using POSIX threads. It\n+#   sets the PTHREAD_LIBS output variable to the threads library and linker\n+#   flags, and the PTHREAD_CFLAGS output variable to any special C compiler\n+#   flags that are needed. (The user can also force certain compiler\n+#   flags/libs to be tested by setting these environment variables.)\n+#\n+#   Also sets PTHREAD_CC to any special C compiler that is needed for\n+#   multi-threaded programs (defaults to the value of CC otherwise). (This\n+#   is necessary on AIX to use the special cc_r compiler alias.)\n+#\n+#   NOTE: You are assumed to not only compile your program with these flags,\n+#   but also to link with them as well. For example, you might link with\n+#   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS\n+#\n+#   If you are only building threaded programs, you may wish to use these\n+#   variables in your default LIBS, CFLAGS, and CC:\n+#\n+#     LIBS=\"$PTHREAD_LIBS $LIBS\"\n+#     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+#     CC=\"$PTHREAD_CC\"\n+#\n+#   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant\n+#   has a nonstandard name, this macro defines PTHREAD_CREATE_JOINABLE to\n+#   that name (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n+#\n+#   Also HAVE_PTHREAD_PRIO_INHERIT is defined if pthread is found and the\n+#   PTHREAD_PRIO_INHERIT symbol is defined when compiling with\n+#   PTHREAD_CFLAGS.\n+#\n+#   ACTION-IF-FOUND is a list of shell commands to run if a threads library\n+#   is found, and ACTION-IF-NOT-FOUND is a list of commands to run it if it\n+#   is not found. If ACTION-IF-FOUND is not specified, the default action\n+#   will define HAVE_PTHREAD.\n+#\n+#   Please let the authors know if this macro fails on any platform, or if\n+#   you have any other suggestions or comments. This macro was based on work\n+#   by SGJ on autoconf scripts for FFTW (http://www.fftw.org/) (with help\n+#   from M. Frigo), as well as ac_pthread and hb_pthread macros posted by\n+#   Alejandro Forero Cuervo to the autoconf macro repository. We are also\n+#   grateful for the helpful feedback of numerous users.\n+#\n+#   Updated for Autoconf 2.68 by Daniel Richard G.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>\n+#   Copyright (c) 2011 Daniel Richard G. <skunk@iSKUNK.ORG>\n+#\n+#   This program is free software: you can redistribute it and/or modify it\n+#   under the terms of the GNU General Public License as published by the\n+#   Free Software Foundation, either version 3 of the License, or (at your\n+#   option) any later version.\n+#\n+#   This program is distributed in the hope that it will be useful, but\n+#   WITHOUT ANY WARRANTY; without even the implied warranty of\n+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n+#   Public License for more details.\n+#\n+#   You should have received a copy of the GNU General Public License along\n+#   with this program. If not, see <https://www.gnu.org/licenses/>.\n+#\n+#   As a special exception, the respective Autoconf Macro's copyright owner\n+#   gives unlimited permission to copy, distribute and modify the configure\n+#   scripts that are the output of Autoconf when processing the Macro. You\n+#   need not follow the terms of the GNU General Public License when using\n+#   or distributing such scripts, even though portions of the text of the\n+#   Macro appear in them. The GNU General Public License (GPL) does govern\n+#   all other use of the material that constitutes the Autoconf Macro.\n+#\n+#   This special exception to the GPL applies to versions of the Autoconf\n+#   Macro released by the Autoconf Archive. When you make and distribute a\n+#   modified version of the Autoconf Macro, you may extend this special\n+#   exception to the GPL to apply to your modified version as well.\n+\n+#serial 24\n+\n+AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n+AC_DEFUN([AX_PTHREAD], [\n+AC_REQUIRE([AC_CANONICAL_HOST])\n+AC_REQUIRE([AC_PROG_CC])\n+AC_REQUIRE([AC_PROG_SED])\n+AC_LANG_PUSH([C])\n+ax_pthread_ok=no\n+\n+# We used to check for pthread.h first, but this fails if pthread.h\n+# requires special compiler flags (e.g. on Tru64 or Sequent).\n+# It gets checked for in the link test anyway.\n+\n+# First of all, check if the user has set any of the PTHREAD_LIBS,\n+# etcetera environment variables, and if threads linking works using\n+# them:\n+if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n+        ax_pthread_save_CC=\"$CC\"\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        AS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+        AC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+        AC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        if test \"x$ax_pthread_ok\" = \"xno\"; then\n+                PTHREAD_LIBS=\"\"\n+                PTHREAD_CFLAGS=\"\"\n+        fi\n+        CC=\"$ax_pthread_save_CC\"\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+fi\n+\n+# We must check for the threads library under a number of different\n+# names; the ordering is very important because some systems\n+# (e.g. DEC) have both -lpthread and -lpthreads, where one of the\n+# libraries is broken (non-POSIX).\n+\n+# Create a list of thread flags to try.  Items starting with a \"-\" are\n+# C compiler flags, and other items are library names, except for \"none\"\n+# which indicates that we try without any flags at all, and \"pthread-config\"\n+# which is a program returning the flags for the Pth emulation library.\n+\n+ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n+\n+# The ordering *is* (sometimes) important.  Some notes on the\n+# individual items follow:\n+\n+# pthreads: AIX (must check this before -lpthread)\n+# none: in case threads are in libc; should be tried before -Kthread and\n+#       other compiler flags to prevent continual compiler warnings\n+# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)\n+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads), Tru64\n+#           (Note: HP C rejects this with \"bad form for `-t' option\")\n+# -pthreads: Solaris/gcc (Note: HP C also rejects)\n+# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it\n+#      doesn't hurt to check since this sometimes defines pthreads and\n+#      -D_REENTRANT too), HP C (must be checked before -lpthread, which\n+#      is present but should not be used directly; and before -mthreads,\n+#      because the compiler interprets this as \"-mt\" + \"-hreads\")\n+# -mthreads: Mingw32/gcc, Lynx/gcc\n+# pthread: Linux, etcetera\n+# --thread-safe: KAI C++\n+# pthread-config: use pthread-config program (for GNU Pth library)\n+\n+case $host_os in\n+\n+        freebsd*)\n+\n+        # -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+        # lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+\n+        ax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+        ;;\n+\n+        hpux*)\n+\n+        # From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+        # multi-threading and also sets -lpthread.\"\n+\n+        ax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+        ;;\n+\n+        openedition*)\n+\n+        # IBM z/OS requires a feature-test macro to be defined in order to\n+        # enable POSIX threads at all, so give the user a hint if this is\n+        # not set. (We don't define these ourselves, as they can affect\n+        # other portions of the system API in unpredictable ways.)\n+\n+        AC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+            [\n+#            if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+             AX_PTHREAD_ZOS_MISSING\n+#            endif\n+            ],\n+            [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+        ;;\n+\n+        solaris*)\n+\n+        # On Solaris (at least, for some versions), libc contains stubbed\n+        # (non-functional) versions of the pthreads routines, so link-based\n+        # tests will erroneously succeed. (N.B.: The stubs are missing\n+        # pthread_cleanup_push, or rather a function called by this macro,\n+        # so we could check for that, but who knows whether they'll stub\n+        # that too in a future libc.)  So we'll check first for the\n+        # standard Solaris way of linking pthreads (-mt -lpthread).\n+\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+        ;;\n+esac\n+\n+# GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n+\n+AS_IF([test \"x$GCC\" = \"xyes\"],\n+      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n+\n+# The presence of a feature test macro requesting re-entrant function\n+# definitions is, on some systems, a strong hint that pthreads support is\n+# correctly enabled\n+\n+case $host_os in\n+        darwin* | hpux* | linux* | osf* | solaris*)\n+        ax_pthread_check_macro=\"_REENTRANT\"\n+        ;;\n+\n+        aix*)\n+        ax_pthread_check_macro=\"_THREAD_SAFE\"\n+        ;;\n+\n+        *)\n+        ax_pthread_check_macro=\"--\"\n+        ;;\n+esac\n+AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n+      [ax_pthread_check_cond=0],\n+      [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n+\n+# Are we compiling with Clang?\n+\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+\n+ax_pthread_clang_warning=no\n+\n+# Clang needs special handling, because older versions handle the -pthread\n+# option in a rather... idiosyncratic way\n+\n+if test \"x$ax_pthread_clang\" = \"xyes\"; then\n+\n+        # Clang takes -pthread; it has never supported any other flag\n+\n+        # (Note 1: This will need to be revisited if a system that Clang\n+        # supports has POSIX threads in a separate library.  This tends not\n+        # to be the way of modern systems, but it's conceivable.)\n+\n+        # (Note 2: On some systems, notably Darwin, -pthread is not needed\n+        # to get POSIX threads support; the API is always present and\n+        # active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+        # -pthread does define _REENTRANT, and while the Darwin headers\n+        # ignore this macro, third-party headers might not.)\n+\n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n+        # However, older versions of Clang make a point of warning the user\n+        # that, in an invocation where only linking and no compilation is\n+        # taking place, the -pthread option has no effect (\"argument unused\n+        # during compilation\").  They expect -pthread to be passed in only\n+        # when source code is being compiled.\n+        #\n+        # Problem is, this is at odds with the way Automake and most other\n+        # C build frameworks function, which is that the same flags used in\n+        # compilation (CFLAGS) are also used in linking.  Many systems\n+        # supported by AX_PTHREAD require exactly this for POSIX threads\n+        # support, and in fact it is often not straightforward to specify a\n+        # flag that is used only in the compilation phase and not in\n+        # linking.  Such a scenario is extremely rare in practice.\n+        #\n+        # Even though use of the -pthread flag in linking would only print\n+        # a warning, this can be a nuisance for well-run software projects\n+        # that build with -Werror.  So if the active version of Clang has\n+        # this misfeature, we search for an option to squash it.\n+\n+        AC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+            [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+             # Create an alternate version of $ac_link that compiles and\n+             # links in two steps (.c -> .o, .o -> exe) instead of one\n+             # (.c -> exe), because the warning occurs only in the second\n+             # step\n+             ax_pthread_save_ac_link=\"$ac_link\"\n+             ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+             ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+             ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+             ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+             for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+                AS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+                CFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+                ac_link=\"$ax_pthread_save_ac_link\"\n+                AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                    [ac_link=\"$ax_pthread_2step_ac_link\"\n+                     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+                         [break])\n+                    ])\n+             done\n+             ac_link=\"$ax_pthread_save_ac_link\"\n+             CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+             AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+             ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+            ])\n+\n+        case \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+                no | unknown) ;;\n+                *) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+        esac\n+\n+fi # $ax_pthread_clang = yes\n+\n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n+\n+        case $ax_pthread_try_flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n+\n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+                ;;\n+        esac\n+\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n+                        static void routine(void *a) { a = 0; }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+            [ax_pthread_ok=yes],\n+            [])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n+done\n+fi\n+\n+# Various other checks:\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n+        AC_CACHE_CHECK([for joinable pthread attribute],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR],\n+            [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+             for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+                 AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+                                                 [int attr = $ax_pthread_attr; return attr /* ; */])],\n+                                [ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+                                [])\n+             done\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+               test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+               test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+              [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+                                  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+                                  [Define to necessary symbol if this constant\n+                                   uses a non-standard name on your system.])\n+               ax_pthread_joinable_attr_defined=yes\n+              ])\n+\n+        AC_CACHE_CHECK([whether more special flags are required for pthreads],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+            [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+             case $host_os in\n+             solaris*)\n+             ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+             ;;\n+             esac\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+               test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+              [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+               ax_pthread_special_flags_added=yes])\n+\n+        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n+            [ax_cv_PTHREAD_PRIO_INHERIT],\n+            [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+                            [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+            ])\n+        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+               test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+              [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+               ax_pthread_prio_inherit_defined=yes\n+              ])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        # More AIX lossage: compile with *_r variant\n+        if test \"x$GCC\" != \"xyes\"; then\n+            case $host_os in\n+                aix*)\n+                AS_CASE([\"x/$CC\"],\n+                    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+                    [#handle absolute path differently from PATH based program lookup\n+                     AS_CASE([\"x$CC\"],\n+                         [x/*],\n+                         [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+                         [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+                ;;\n+            esac\n+        fi\n+fi\n+\n+test -n \"$PTHREAD_CC\" || PTHREAD_CC=\"$CC\"\n+\n+AC_SUBST([PTHREAD_LIBS])\n+AC_SUBST([PTHREAD_CFLAGS])\n+AC_SUBST([PTHREAD_CC])\n+\n+# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+        ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n+        :\n+else\n+        ax_pthread_ok=no\n+        $2\n+fi\n+AC_LANG_POP\n+])dnl AX_PTHREAD"}]}