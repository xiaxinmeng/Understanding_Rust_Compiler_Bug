{"sha": "793fa2a437cec661509c8d7b2c7d967b1b225def", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzZmEyYTQzN2NlYzY2MTUwOWM4ZDdiMmM3ZDk2N2IxYjIyNWRlZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-12-07T09:32:46Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-12-07T09:32:46Z"}, "message": "rs6000: Split rs6000_cpu\n\nThis splits rs6000_cpu into rs6000_cpu and rs6000_tune.  Both are still\ninitialised identically, so there is no behaviour change.\n\nNow rs6000_cpu should be set by -mcpu=, and rs6000_tune by -mtune= (but\nboth still are set by -mtune=, fixed in a later patch in the series).\n\nAlso change rs6000_cpu to rs6000_tune in the appropriate cases (i.e.\nmost, but not those that enable using new insns).\n\n\n\t* config/rs6000/rs6000.opt (rs6000_tune): New variable.\n\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Also set\n\trs6000_tune.  Use rs6000_tune instead of rs6000_cpu where appropriate.\n\t(rs6000_loop_align): Use rs6000_tune instead of rs6000_cpu where\n\tappropriate.\n\t(rs6000_reassociation_width): Ditto.\n\t(rs6000_emit_epilogue): Ditto.\n\t(rs6000_adjust_cost): Ditto.\n\t(is_microcoded_insn): Ditto.\n\t(is_cracked_insn): Ditto.\n\t(rs6000_adjust_priority): Ditto.\n\t(rs6000_sched_reorder): Ditto.\n\t(rs6000_sched_reorder2): Ditto.\n\t(insn_must_be_first_in_group): Ditto.\n\t(insn_must_be_last_in_group): Ditto.\n\t(rs6000_register_move_cost): Ditto.\n\t* config/rs6000/rs6000.h (rs6000_cpu_attr): Use rs6000_tune instead of\n\trs6000_cpu.\n\nFrom-SVN: r255462", "tree": {"sha": "1962ebb0b30aa3a33ee94bbb6594be9333d1ea80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1962ebb0b30aa3a33ee94bbb6594be9333d1ea80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793fa2a437cec661509c8d7b2c7d967b1b225def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793fa2a437cec661509c8d7b2c7d967b1b225def", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793fa2a437cec661509c8d7b2c7d967b1b225def", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793fa2a437cec661509c8d7b2c7d967b1b225def/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69ddc3e5832aa384ffca1d0edfb22a3175bd9dc9"}], "stats": {"total": 145, "additions": 86, "deletions": 59}, "files": [{"sha": "e08568787a753686e601c4002d6592c5c30d25dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=793fa2a437cec661509c8d7b2c7d967b1b225def", "patch": "@@ -1,3 +1,24 @@\n+2017-12-07  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.opt (rs6000_tune): New variable.\n+\t* config/rs6000/rs6000.c (rs6000_option_override_internal): Also set\n+\trs6000_tune.  Use rs6000_tune instead of rs6000_cpu where appropriate.\n+\t(rs6000_loop_align): Use rs6000_tune instead of rs6000_cpu where\n+\tappropriate.\n+\t(rs6000_reassociation_width): Ditto.\n+\t(rs6000_emit_epilogue): Ditto.\n+\t(rs6000_adjust_cost): Ditto.\n+\t(is_microcoded_insn): Ditto.\n+\t(is_cracked_insn): Ditto.\n+\t(rs6000_adjust_priority): Ditto.\n+\t(rs6000_sched_reorder): Ditto.\n+\t(rs6000_sched_reorder2): Ditto.\n+\t(insn_must_be_first_in_group): Ditto.\n+\t(insn_must_be_last_in_group): Ditto.\n+\t(rs6000_register_move_cost): Ditto.\n+\t* config/rs6000/rs6000.h (rs6000_cpu_attr): Use rs6000_tune instead of\n+\trs6000_cpu.\n+\n 2017-12-07  Julia Koval  <julia.koval@intel.com>\n \n \t* config.gcc: Add vaesintrin.h."}, {"sha": "db85e6d1e302e69677e97f8cabdfac165195d8db", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 60, "deletions": 58, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=793fa2a437cec661509c8d7b2c7d967b1b225def", "patch": "@@ -4186,6 +4186,8 @@ rs6000_option_override_internal (bool global_init_p)\n \n   gcc_assert (tune_index >= 0);\n   rs6000_cpu = processor_target_table[tune_index].processor;\n+  gcc_assert (tune_index >= 0);\n+  rs6000_tune = processor_target_table[tune_index].processor;\n \n   if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n       || rs6000_cpu == PROCESSOR_PPCE500MC || rs6000_cpu == PROCESSOR_PPCE500MC64\n@@ -4674,10 +4676,10 @@ rs6000_option_override_internal (bool global_init_p)\n   /* E500mc does \"better\" if we inline more aggressively.  Respect the\n      user's opinion, though.  */\n   if (rs6000_block_move_inline_limit == 0\n-      && (rs6000_cpu == PROCESSOR_PPCE500MC\n-\t  || rs6000_cpu == PROCESSOR_PPCE500MC64\n-\t  || rs6000_cpu == PROCESSOR_PPCE5500\n-\t  || rs6000_cpu == PROCESSOR_PPCE6500))\n+      && (rs6000_tune == PROCESSOR_PPCE500MC\n+\t  || rs6000_tune == PROCESSOR_PPCE500MC64\n+\t  || rs6000_tune == PROCESSOR_PPCE5500\n+\t  || rs6000_tune == PROCESSOR_PPCE6500))\n     rs6000_block_move_inline_limit = 128;\n \n   /* store_one_arg depends on expand_block_move to handle at least the\n@@ -4835,29 +4837,29 @@ rs6000_option_override_internal (bool global_init_p)\n \t       \"point\");\n     }\n \n-  rs6000_always_hint = (rs6000_cpu != PROCESSOR_POWER4\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER5\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER6\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER7\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER8\n-\t\t\t&& rs6000_cpu != PROCESSOR_POWER9\n-\t\t\t&& rs6000_cpu != PROCESSOR_PPCA2\n-\t\t\t&& rs6000_cpu != PROCESSOR_CELL\n-\t\t\t&& rs6000_cpu != PROCESSOR_PPC476);\n-  rs6000_sched_groups = (rs6000_cpu == PROCESSOR_POWER4\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER5\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER7\n-\t\t\t || rs6000_cpu == PROCESSOR_POWER8);\n-  rs6000_align_branch_targets = (rs6000_cpu == PROCESSOR_POWER4\n-\t\t\t\t || rs6000_cpu == PROCESSOR_POWER5\n-\t\t\t\t || rs6000_cpu == PROCESSOR_POWER6\n-\t\t\t\t || rs6000_cpu == PROCESSOR_POWER7\n-\t\t\t\t || rs6000_cpu == PROCESSOR_POWER8\n-\t\t\t\t || rs6000_cpu == PROCESSOR_POWER9\n-\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC\n-\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC64\n-\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE5500\n-\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE6500);\n+  rs6000_always_hint = (rs6000_tune != PROCESSOR_POWER4\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER5\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER6\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER7\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER8\n+\t\t\t&& rs6000_tune != PROCESSOR_POWER9\n+\t\t\t&& rs6000_tune != PROCESSOR_PPCA2\n+\t\t\t&& rs6000_tune != PROCESSOR_CELL\n+\t\t\t&& rs6000_tune != PROCESSOR_PPC476);\n+  rs6000_sched_groups = (rs6000_tune == PROCESSOR_POWER4\n+\t\t\t || rs6000_tune == PROCESSOR_POWER5\n+\t\t\t || rs6000_tune == PROCESSOR_POWER7\n+\t\t\t || rs6000_tune == PROCESSOR_POWER8);\n+  rs6000_align_branch_targets = (rs6000_tune == PROCESSOR_POWER4\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER5\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER6\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER7\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER8\n+\t\t\t\t || rs6000_tune == PROCESSOR_POWER9\n+\t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC\n+\t\t\t\t || rs6000_tune == PROCESSOR_PPCE500MC64\n+\t\t\t\t || rs6000_tune == PROCESSOR_PPCE5500\n+\t\t\t\t || rs6000_tune == PROCESSOR_PPCE6500);\n \n   /* Allow debug switches to override the above settings.  These are set to -1\n      in rs6000.opt to indicate the user hasn't directly set the switch.  */\n@@ -4997,8 +4999,8 @@ rs6000_option_override_internal (bool global_init_p)\n \t{\n \t  /* Cell wants to be aligned 8byte for dual issue.  Titan wants to be\n \t     aligned 8byte to avoid misprediction by the branch predictor.  */\n-\t  if (rs6000_cpu == PROCESSOR_TITAN\n-\t      || rs6000_cpu == PROCESSOR_CELL)\n+\t  if (rs6000_tune == PROCESSOR_TITAN\n+\t      || rs6000_tune == PROCESSOR_CELL)\n \t    {\n \t      if (align_functions <= 0)\n \t\talign_functions = 8;\n@@ -5042,7 +5044,7 @@ rs6000_option_override_internal (bool global_init_p)\n   if (optimize_size)\n     rs6000_cost = TARGET_POWERPC64 ? &size64_cost : &size32_cost;\n   else\n-    switch (rs6000_cpu)\n+    switch (rs6000_tune)\n       {\n       case PROCESSOR_RS64A:\n \trs6000_cost = &rs64a_cost;\n@@ -5217,7 +5219,7 @@ rs6000_option_override_internal (bool global_init_p)\n      DERAT mispredict penalty.  However the LVE and STVE altivec instructions\n      need indexed accesses and the type used is the scalar type of the element\n      being loaded or stored.  */\n-    TARGET_AVOID_XFORM = (rs6000_cpu == PROCESSOR_POWER6 && TARGET_CMPB\n+    TARGET_AVOID_XFORM = (rs6000_tune == PROCESSOR_POWER6 && TARGET_CMPB\n \t\t\t  && !TARGET_ALTIVEC);\n \n   /* Set the -mrecip options.  */\n@@ -5286,7 +5288,7 @@ rs6000_option_override_internal (bool global_init_p)\n   /* If not explicitly specified via option, decide whether to generate the\n      extra blr's required to preserve the link stack on some cpus (eg, 476).  */\n   if (TARGET_LINK_STACK == -1)\n-    SET_TARGET_LINK_STACK (rs6000_cpu == PROCESSOR_PPC476 && flag_pic);\n+    SET_TARGET_LINK_STACK (rs6000_tune == PROCESSOR_PPC476 && flag_pic);\n \n   return ret;\n }\n@@ -5329,12 +5331,12 @@ rs6000_loop_align (rtx label)\n \n   /* Align small loops to 32 bytes to fit in an icache sector, otherwise return default. */\n   if (ninsns > 4 && ninsns <= 8\n-      && (rs6000_cpu == PROCESSOR_POWER4\n-\t  || rs6000_cpu == PROCESSOR_POWER5\n-\t  || rs6000_cpu == PROCESSOR_POWER6\n-\t  || rs6000_cpu == PROCESSOR_POWER7\n-\t  || rs6000_cpu == PROCESSOR_POWER8\n-\t  || rs6000_cpu == PROCESSOR_POWER9))\n+      && (rs6000_tune == PROCESSOR_POWER4\n+\t  || rs6000_tune == PROCESSOR_POWER5\n+\t  || rs6000_tune == PROCESSOR_POWER6\n+\t  || rs6000_tune == PROCESSOR_POWER7\n+\t  || rs6000_tune == PROCESSOR_POWER8\n+\t  || rs6000_tune == PROCESSOR_POWER9))\n     return 5;\n   else\n     return align_loops_log;\n@@ -9987,7 +9989,7 @@ static int\n rs6000_reassociation_width (unsigned int opc ATTRIBUTE_UNUSED,\n                             machine_mode mode)\n {\n-  switch (rs6000_cpu)\n+  switch (rs6000_tune)\n     {\n     case PROCESSOR_POWER8:\n     case PROCESSOR_POWER9:\n@@ -28249,9 +28251,9 @@ rs6000_emit_epilogue (int sibcall)\n   using_load_multiple = strategy & REST_MULTIPLE;\n   restoring_FPRs_inline = sibcall || (strategy & REST_INLINE_FPRS);\n   restoring_GPRs_inline = sibcall || (strategy & REST_INLINE_GPRS);\n-  using_mtcr_multiple = (rs6000_cpu == PROCESSOR_PPC601\n-\t\t\t || rs6000_cpu == PROCESSOR_PPC603\n-\t\t\t || rs6000_cpu == PROCESSOR_PPC750\n+  using_mtcr_multiple = (rs6000_tune == PROCESSOR_PPC601\n+\t\t\t || rs6000_tune == PROCESSOR_PPC603\n+\t\t\t || rs6000_tune == PROCESSOR_PPC750\n \t\t\t || optimize_size);\n   /* Restore via the backchain when we have a large frame, since this\n      is more efficient than an addis, addi pair.  The second condition\n@@ -30648,7 +30650,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \n           case TYPE_STORE:\n           case TYPE_FPSTORE:\n-            if ((rs6000_cpu == PROCESSOR_POWER6)\n+            if ((rs6000_tune == PROCESSOR_POWER6)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n               {\n@@ -30716,7 +30718,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n \t    break;\n \n           case TYPE_LOAD:\n-            if ((rs6000_cpu == PROCESSOR_POWER6)\n+            if ((rs6000_tune == PROCESSOR_POWER6)\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0))\n               {\n@@ -30779,7 +30781,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n             break;\n \n           case TYPE_FPLOAD:\n-            if ((rs6000_cpu == PROCESSOR_POWER6)\n+            if ((rs6000_tune == PROCESSOR_POWER6)\n                 && get_attr_update (insn) == UPDATE_NO\n                 && recog_memoized (dep_insn)\n                 && (INSN_CODE (dep_insn) >= 0)\n@@ -30797,7 +30799,7 @@ rs6000_adjust_cost (rtx_insn *insn, int dep_type, rtx_insn *dep_insn, int cost,\n     case REG_DEP_OUTPUT:\n       /* Output dependency; DEP_INSN writes a register that INSN writes some\n \t cycles later.  */\n-      if ((rs6000_cpu == PROCESSOR_POWER6)\n+      if ((rs6000_tune == PROCESSOR_POWER6)\n           && recog_memoized (dep_insn)\n           && (INSN_CODE (dep_insn) >= 0))\n         {\n@@ -30880,7 +30882,7 @@ is_microcoded_insn (rtx_insn *insn)\n     return get_attr_cell_micro (insn) == CELL_MICRO_ALWAYS;\n \n   if (rs6000_sched_groups\n-      && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n+      && (rs6000_tune == PROCESSOR_POWER4 || rs6000_tune == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n       if ((type == TYPE_LOAD\n@@ -30908,7 +30910,7 @@ is_cracked_insn (rtx_insn *insn)\n     return false;\n \n   if (rs6000_sched_groups\n-      && (rs6000_cpu == PROCESSOR_POWER4 || rs6000_cpu == PROCESSOR_POWER5))\n+      && (rs6000_tune == PROCESSOR_POWER4 || rs6000_tune == PROCESSOR_POWER5))\n     {\n       enum attr_type type = get_attr_type (insn);\n       if ((type == TYPE_LOAD\n@@ -31114,7 +31116,7 @@ rs6000_adjust_priority (rtx_insn *insn ATTRIBUTE_UNUSED, int priority)\n \treturn (priority + 1);\n     }\n \n-  if (rs6000_cpu == PROCESSOR_POWER6\n+  if (rs6000_tune == PROCESSOR_POWER6\n       && ((load_store_pendulum == -2 && is_load_insn (insn, &load_mem))\n           || (load_store_pendulum == 2 && is_store_insn (insn, &str_mem))))\n     /* Attach highest priority to insn if the scheduler has just issued two\n@@ -31630,7 +31632,7 @@ rs6000_sched_reorder (FILE *dump ATTRIBUTE_UNUSED, int sched_verbose,\n       std::swap (ready[n_ready - 1], ready[n_ready - 2]);\n   }\n \n-  if (rs6000_cpu == PROCESSOR_POWER6)\n+  if (rs6000_tune == PROCESSOR_POWER6)\n     load_store_pendulum = 0;\n \n   return rs6000_issue_rate ();\n@@ -31685,7 +31687,7 @@ rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx_insn **ready,\n              of the machine.  Those instructions are currently unaccounted\n              for to help minimize compile time overhead of this code.\n    */\n-  if (rs6000_cpu == PROCESSOR_POWER6 && last_scheduled_insn)\n+  if (rs6000_tune == PROCESSOR_POWER6 && last_scheduled_insn)\n     {\n       int pos;\n       int i;\n@@ -31839,7 +31841,7 @@ rs6000_sched_reorder2 (FILE *dump, int sched_verbose, rtx_insn **ready,\n     }\n \n   /* Do Power9 dependent reordering if necessary.  */\n-  if (rs6000_cpu == PROCESSOR_POWER9 && last_scheduled_insn\n+  if (rs6000_tune == PROCESSOR_POWER9 && last_scheduled_insn\n       && recog_memoized (last_scheduled_insn) >= 0)\n     return power9_sched_reorder2 (ready, *pn_ready - 1);\n \n@@ -31894,7 +31896,7 @@ insn_must_be_first_in_group (rtx_insn *insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  switch (rs6000_cpu)\n+  switch (rs6000_tune)\n     {\n     case PROCESSOR_POWER5:\n       if (is_cracked_insn (insn))\n@@ -32071,7 +32073,7 @@ insn_must_be_last_in_group (rtx_insn *insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER)\n     return false;\n \n-  switch (rs6000_cpu) {\n+  switch (rs6000_tune) {\n   case PROCESSOR_POWER4:\n   case PROCESSOR_POWER5:\n     if (is_microcoded_insn (insn))\n@@ -35077,10 +35079,10 @@ rs6000_register_move_cost (machine_mode mode,\n \n       /* For those processors that have slow LR/CTR moves, make them more\n          expensive than memory in order to bias spills to memory .*/\n-      else if ((rs6000_cpu == PROCESSOR_POWER6\n-\t\t|| rs6000_cpu == PROCESSOR_POWER7\n-\t\t|| rs6000_cpu == PROCESSOR_POWER8\n-\t\t|| rs6000_cpu == PROCESSOR_POWER9)\n+      else if ((rs6000_tune == PROCESSOR_POWER6\n+\t\t|| rs6000_tune == PROCESSOR_POWER7\n+\t\t|| rs6000_tune == PROCESSOR_POWER8\n+\t\t|| rs6000_tune == PROCESSOR_POWER9)\n \t       && reg_classes_intersect_p (rclass, LINK_OR_CTR_REGS))\n         ret = 6 * hard_regno_nregs (0, mode);\n "}, {"sha": "ed56e6933a95931c8487d03966a831b0ba21807a", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=793fa2a437cec661509c8d7b2c7d967b1b225def", "patch": "@@ -392,7 +392,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_XILINX_FPU   0\n \n /* Recast the processor type to the cpu attribute.  */\n-#define rs6000_cpu_attr ((enum attr_cpu)rs6000_cpu)\n+#define rs6000_cpu_attr ((enum attr_cpu)rs6000_tune)\n \n /* Define generic processor types based upon current deployment.  */\n #define PROCESSOR_COMMON    PROCESSOR_PPC601"}, {"sha": "fc38f402d3b9107b7f488b87e1606b616412ac09", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793fa2a437cec661509c8d7b2c7d967b1b225def/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=793fa2a437cec661509c8d7b2c7d967b1b225def", "patch": "@@ -40,6 +40,10 @@ HOST_WIDE_INT x_rs6000_isa_flags_explicit\n TargetVariable\n enum processor_type rs6000_cpu = PROCESSOR_PPC603\n \n+;; Current tuning\n+TargetVariable\n+enum processor_type rs6000_tune = PROCESSOR_PPC603\n+\n ;; Always emit branch hint bits.\n TargetVariable\n unsigned char rs6000_always_hint"}]}