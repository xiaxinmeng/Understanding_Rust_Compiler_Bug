{"sha": "e2909e105d26a13b860d071f7491923f318f999c", "node_id": "C_kwDOANBUbNoAKGUyOTA5ZTEwNWQyNmExM2I4NjBkMDcxZjc0OTE5MjNmMzE4Zjk5OWM", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-07-19T18:55:05Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-06T07:14:23Z"}, "message": "[Ada] Fix missing name for access type in generic instantiation\n\nPointer types aren't named types in C so we need to take extra care in Ada\nto make sure that the name of access types is preserved.\n\ngcc/ada/\n\n\t* gcc-interface/utils.cc (gnat_pushdecl): Preserve named\n\tTYPE_DECLs consistently for all kind of pointer types.", "tree": {"sha": "093cedee04857bf1b61248f8c0405f77cd8c8b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/093cedee04857bf1b61248f8c0405f77cd8c8b13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2909e105d26a13b860d071f7491923f318f999c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2909e105d26a13b860d071f7491923f318f999c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2909e105d26a13b860d071f7491923f318f999c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2909e105d26a13b860d071f7491923f318f999c/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a80e0583973cb1664adf663d499c43c0425018b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a80e0583973cb1664adf663d499c43c0425018b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a80e0583973cb1664adf663d499c43c0425018b6"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "3d4c1c14fc1b3cd5a88f391088d3f051f30e5c2a", "filename": "gcc/ada/gcc-interface/utils.cc", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2909e105d26a13b860d071f7491923f318f999c/gcc%2Fada%2Fgcc-interface%2Futils.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2909e105d26a13b860d071f7491923f318f999c/gcc%2Fada%2Fgcc-interface%2Futils.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.cc?ref=e2909e105d26a13b860d071f7491923f318f999c", "patch": "@@ -868,6 +868,13 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t}\n     }\n \n+/* Pointer types aren't named types in the C sense so we need to generate a\n+   typedef in DWARF for them.  Also do that for fat pointer types because,\n+   even though they are named types in the C sense, they are still the XUP\n+   types created for the base array type at this point.  */\n+#define TYPE_IS_POINTER_P(NODE) \\\n+  (TREE_CODE (NODE) == POINTER_TYPE || TYPE_IS_FAT_POINTER_P (NODE))\n+\n   /* For the declaration of a type, set its name either if it isn't already\n      set or if the previous type name was not derived from a source name.\n      We'd rather have the type named with a real name and all the pointer\n@@ -877,18 +884,14 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n     {\n       tree t = TREE_TYPE (decl);\n \n-      /* Pointer types aren't named types in the C sense so we need to generate\n-         a typedef in DWARF for them and make sure it is preserved, unless the\n-         type is artificial.  */\n+      /* For pointer types, make sure the typedef is generated and preserved\n+\t in DWARF, unless the type is artificial.  */\n       if (!(TYPE_NAME (t) && TREE_CODE (TYPE_NAME (t)) == TYPE_DECL)\n-\t  && (TREE_CODE (t) != POINTER_TYPE || DECL_ARTIFICIAL (decl)))\n+\t  && (!TYPE_IS_POINTER_P (t) || DECL_ARTIFICIAL (decl)))\n \t;\n       /* For pointer types, create the DECL_ORIGINAL_TYPE that will generate\n-\t the typedef in DWARF.  Also do that for fat pointer types because,\n-\t even though they are named types in the C sense, they are still the\n-\t XUP types created for the base array type at this point.  */\n-      else if (!DECL_ARTIFICIAL (decl)\n-\t       && (TREE_CODE (t) == POINTER_TYPE || TYPE_IS_FAT_POINTER_P (t)))\n+\t the typedef in DWARF.  */\n+      else if (TYPE_IS_POINTER_P (t) && !DECL_ARTIFICIAL (decl))\n \t{\n \t  tree tt = build_variant_type_copy (t);\n \t  TYPE_NAME (tt) = decl;\n@@ -920,9 +923,8 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t to all parallel types too thanks to gnat_set_type_context.  */\n       if (t)\n \tfor (t = TYPE_MAIN_VARIANT (t); t; t = TYPE_NEXT_VARIANT (t))\n-\t  /* ??? Because of the previous kludge, we can have variants of fat\n-\t     pointer types with different names.  */\n-\t  if (!(TYPE_IS_FAT_POINTER_P (t)\n+\t  /* Skip it for pointer types to preserve the typedef.  */\n+\t  if (!(TYPE_IS_POINTER_P (t)\n \t\t&& TYPE_NAME (t)\n \t\t&& TREE_CODE (TYPE_NAME (t)) == TYPE_DECL))\n \t    {\n@@ -932,6 +934,8 @@ gnat_pushdecl (tree decl, Node_Id gnat_node)\n \t\t\t\t\t deferred_decl_context);\n \t    }\n     }\n+\n+#undef TYPE_IS_POINTER_P\n }\n \n /* Create a record type that contains a SIZE bytes long field of TYPE with a"}]}