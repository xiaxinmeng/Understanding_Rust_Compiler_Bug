{"sha": "7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1MWIwYmZiZjA5ZmFlODMxYmI1ZDNkMmQ3YTMxMWU5ZDM3YjM5OA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-18T15:32:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-18T15:32:01Z"}, "message": "Fix vectorizable_mask_load_store handling of invariant masks\n\nvectorizable_mask_load_store was not passing the required mask type to\nvect_get_vec_def_for_operand.  This doesn't matter for masks that are\ndefined in the loop, since their STMT_VINFO_VECTYPE will be what we need\nanyway.  But it's not possible to tell which mask type the caller needs\nwhen looking at an invariant scalar boolean.  As the comment above the\nfunction says:\n\n   In case OP is an invariant or constant, a new stmt that creates a vector def\n   needs to be introduced.  VECTYPE may be used to specify a required type for\n   vector invariant.\n\nThis fixes the attached testcase for SVE.\n\n2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* tree-vect-stmts.c (vectorizable_mask_load_store): Pass mask_vectype\n\tto vect_get_vec_def_for_operand when getting the mask operand.\n\ngcc/testsuite/\n\t* gfortran.dg/vect/mask-store-1.f90: New test.\n\nFrom-SVN: r252932", "tree": {"sha": "9379eaf16d2d7e38dd329db4ae50c0e17c96aa3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9379eaf16d2d7e38dd329db4ae50c0e17c96aa3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/comments", "author": null, "committer": null, "parents": [{"sha": "e009b0558e8dd9bd9b17308104834ef5a1536975", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e009b0558e8dd9bd9b17308104834ef5a1536975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e009b0558e8dd9bd9b17308104834ef5a1536975"}], "stats": {"total": 26, "additions": 24, "deletions": 2}, "files": [{"sha": "70b73509c4ef7f48d5cbd16ffa4d0ae0248a7212", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "patch": "@@ -1,3 +1,8 @@\n+2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* tree-vect-stmts.c (vectorizable_mask_load_store): Pass mask_vectype\n+\tto vect_get_vec_def_for_operand when getting the mask operand.\n+\n 2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "a4662844f8450f142a48530eadff4d25be560fd2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "patch": "@@ -1,3 +1,7 @@\n+2017-09-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gfortran.dg/vect/mask-store-1.f90: New test.\n+\n 2017-09-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/45033"}, {"sha": "83cd8ddfea8cbe5e288c414c48956c1d76cd5ae4", "filename": "gcc/testsuite/gfortran.dg/vect/mask-store-1.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fmask-store-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fmask-store-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fmask-store-1.f90?ref=7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "patch": "@@ -0,0 +1,11 @@\n+subroutine foo(a, b, x, n)\n+  real(kind=8) :: a(n), b(n), tmp\n+  logical(kind=1) :: x\n+  integer(kind=4) :: i, n\n+  do i = 1, n\n+     if (x) then\n+        a(i) = b(i)\n+     end if\n+     b(i) = b(i) + 10\n+  end do\n+end subroutine"}, {"sha": "8f0d3d0909614c6e31c59df4983481c5e7983cbf", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7251b0bfbf09fae831bb5d3d2d7a311e9d37b398/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=7251b0bfbf09fae831bb5d3d2d7a311e9d37b398", "patch": "@@ -2331,7 +2331,8 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \t    {\n \t      tree rhs = gimple_call_arg (stmt, 3);\n \t      vec_rhs = vect_get_vec_def_for_operand (rhs, stmt);\n-\t      vec_mask = vect_get_vec_def_for_operand (mask, stmt);\n+\t      vec_mask = vect_get_vec_def_for_operand (mask, stmt,\n+\t\t\t\t\t\t       mask_vectype);\n \t      /* We should have catched mismatched types earlier.  */\n \t      gcc_assert (useless_type_conversion_p (vectype,\n \t\t\t\t\t\t     TREE_TYPE (vec_rhs)));\n@@ -2388,7 +2389,8 @@ vectorizable_mask_load_store (gimple *stmt, gimple_stmt_iterator *gsi,\n \n \t  if (i == 0)\n \t    {\n-\t      vec_mask = vect_get_vec_def_for_operand (mask, stmt);\n+\t      vec_mask = vect_get_vec_def_for_operand (mask, stmt,\n+\t\t\t\t\t\t       mask_vectype);\n \t      dataref_ptr = vect_create_data_ref_ptr (stmt, vectype, NULL,\n \t\t\t\t\t\t      NULL_TREE, &dummy, gsi,\n \t\t\t\t\t\t      &ptr_incr, false, &inv_p);"}]}