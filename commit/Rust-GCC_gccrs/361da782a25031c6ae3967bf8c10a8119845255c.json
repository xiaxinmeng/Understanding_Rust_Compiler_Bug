{"sha": "361da782a25031c6ae3967bf8c10a8119845255c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzYxZGE3ODJhMjUwMzFjNmFlMzk2N2JmOGMxMGE4MTE5ODQ1MjU1Yw==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:11Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2021-08-04T16:40:11Z"}, "message": "IBM Z: Implement TARGET_VECTORIZE_VEC_PERM_CONST for vpdi\n\nThis patch makes use of the vector permute double immediate\ninstruction for constant permute vectors.\n\ngcc/ChangeLog:\n\n\t* config/s390/s390.c (expand_perm_with_vpdi): New function.\n\t(vectorize_vec_perm_const_1): Call expand_perm_with_vpdi.\n\t* config/s390/vector.md (*vpdi1<mode>, @vpdi1<mode>): Enable a\n\tparameterized expander.\n\t(*vpdi4<mode>, @vpdi4<mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/s390/vector/perm-vpdi.c: New test.", "tree": {"sha": "c4e3fc2396f80bf46c2909346bd3dfae2ccd8395", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4e3fc2396f80bf46c2909346bd3dfae2ccd8395"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/361da782a25031c6ae3967bf8c10a8119845255c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361da782a25031c6ae3967bf8c10a8119845255c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/361da782a25031c6ae3967bf8c10a8119845255c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/361da782a25031c6ae3967bf8c10a8119845255c/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dc8c4656444153c9e2f98d382de39728a849672", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6dc8c4656444153c9e2f98d382de39728a849672", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6dc8c4656444153c9e2f98d382de39728a849672"}], "stats": {"total": 101, "additions": 98, "deletions": 3}, "files": [{"sha": "673a1340285accc32c1c646cfe9aa668a5e654b6", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=361da782a25031c6ae3967bf8c10a8119845255c", "patch": "@@ -16979,6 +16979,50 @@ expand_perm_with_merge (const struct expand_vec_perm_d &d)\n   return merge_lo_p || merge_hi_p;\n }\n \n+/* Try to expand the vector permute operation described by D using the\n+   vector permute doubleword immediate instruction vpdi.  Return true\n+   if vpdi could be used.\n+\n+   VPDI allows 4 different immediate values (0, 1, 4, 5). The 0 and 5\n+   cases are covered by vmrhg and vmrlg already.  So we only care\n+   about the 1, 4 cases here.\n+   1 - First element of src1 and second of src2\n+   4 - Second element of src1 and first of src2  */\n+static bool\n+expand_perm_with_vpdi (const struct expand_vec_perm_d &d)\n+{\n+  bool vpdi1_p = false;\n+  bool vpdi4_p = false;\n+  rtx op0_reg, op1_reg;\n+\n+  // Only V2DI and V2DF are supported here.\n+  if (d.nelt != 2)\n+    return false;\n+\n+  if (d.perm[0] == 0 && d.perm[1] == 3)\n+    vpdi1_p = true;\n+\n+  if (d.perm[0] == 1 && d.perm[1] == 2)\n+    vpdi4_p = true;\n+\n+  if (!vpdi1_p && !vpdi4_p)\n+    return false;\n+\n+  if (d.testing_p)\n+    return true;\n+\n+  op0_reg = force_reg (GET_MODE (d.op0), d.op0);\n+  op1_reg = force_reg (GET_MODE (d.op1), d.op1);\n+\n+  if (vpdi1_p)\n+    emit_insn (gen_vpdi1 (d.vmode, d.target, op0_reg, op1_reg));\n+\n+  if (vpdi4_p)\n+    emit_insn (gen_vpdi4 (d.vmode, d.target, op0_reg, op1_reg));\n+\n+  return true;\n+}\n+\n /* Try to find the best sequence for the vector permute operation\n    described by D.  Return true if the operation could be\n    expanded.  */\n@@ -16988,6 +17032,9 @@ vectorize_vec_perm_const_1 (const struct expand_vec_perm_d &d)\n   if (expand_perm_with_merge (d))\n     return true;\n \n+  if (expand_perm_with_vpdi (d))\n+    return true;\n+\n   return false;\n }\n "}, {"sha": "70274a6ab70426ca873c7abaf6cc8ec8154ba27f", "filename": "gcc/config/s390/vector.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Fconfig%2Fs390%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Fconfig%2Fs390%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fvector.md?ref=361da782a25031c6ae3967bf8c10a8119845255c", "patch": "@@ -768,7 +768,7 @@\n \n \n ; First DW of op1 and second DW of op2\n-(define_insn \"*vpdi1<mode>\"\n+(define_insn \"@vpdi1<mode>\"\n   [(set (match_operand:V_HW_2   0 \"register_operand\" \"=v\")\n \t(vec_select:V_HW_2\n \t (vec_concat:<vec_2x_nelts>\n@@ -780,7 +780,7 @@\n   [(set_attr \"op_type\" \"VRR\")])\n \n ; Second DW of op1 and first of op2\n-(define_insn \"*vpdi4<mode>\"\n+(define_insn \"@vpdi4<mode>\"\n   [(set (match_operand:V_HW_2   0 \"register_operand\" \"=v\")\n \t(vec_select:V_HW_2\n \t (vec_concat:<vec_2x_nelts>\n@@ -926,7 +926,6 @@\n   operands[5] = simplify_gen_subreg (DFmode, operands[1], TFmode, 8);\n })\n \n-; vec_perm_const for V2DI using vpdi?\n \n ;;\n ;; Vector integer arithmetic instructions"}, {"sha": "cc925315b377bb85ea81d5e87c7279c1dc84ee01", "filename": "gcc/testsuite/gcc.target/s390/vector/perm-vpdi.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fperm-vpdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/361da782a25031c6ae3967bf8c10a8119845255c/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fperm-vpdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fs390%2Fvector%2Fperm-vpdi.c?ref=361da782a25031c6ae3967bf8c10a8119845255c", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-do run { target { s390*-*-* } } } */\n+/* { dg-options \"-O3 -mzarch -march=z14 -mzvector --save-temps\" } */\n+\n+/* { dg-final { scan-assembler-times \"\\tvmrhg\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvmrlg\\t\" 3 } } */\n+/* { dg-final { scan-assembler-times \"\\tvpdi\\t\" 6 } } */\n+\n+#include \"vec-types.h\"\n+#include <vecintrin.h>\n+\n+#define GEN_PERMI_BITS(VEC_TYPE, BITS)\t\t\t\t\\\n+  VEC_TYPE __attribute__((noinline))\t\t\t\t\\\n+  permi_##BITS##_##VEC_TYPE(VEC_TYPE a, VEC_TYPE b) {\t\t\\\n+    return (VEC_TYPE){a[((BITS) & 2) >> 1], b[(BITS) & 1] }; }\n+\n+#define GEN_PERMI(VEC_TYPE)\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 0);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 1);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 2);\t\t\t\\\n+  GEN_PERMI_BITS(VEC_TYPE, 3);\t\t\t\\\n+\n+GEN_PERMI(v2di)\n+GEN_PERMI(uv2di)\n+GEN_PERMI(v2df)\n+\n+\n+#define CHECK_PERMI_BITS(VEC_TYPE, BITS)\t\t\\\n+  VEC_TYPE r##BITS = permi_##BITS##_##VEC_TYPE (a, b);\t\\\n+  if (r##BITS[0] != ((BITS) & 2) >> 1\t\t\t\\\n+      || r##BITS[1] != ((BITS) & 1) + 2)\t\t\\\n+    __builtin_abort();\n+\n+#define CHECK_PERMI(VEC_TYPE)\t\t\t\\\n+  {\t\t\t\t\t\t\\\n+    VEC_TYPE a = GEN_SEQ_VEC (VEC_TYPE, 0);\t\\\n+    VEC_TYPE b = GEN_SEQ_VEC (VEC_TYPE, 2);\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 0);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 1);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 2);\t\t\\\n+    CHECK_PERMI_BITS (VEC_TYPE, 3);\t\t\\\n+  }\n+\n+int\n+main ()\n+{\n+  CHECK_PERMI (v2di);\n+  CHECK_PERMI (uv2di);\n+  CHECK_PERMI (v2df);\n+}"}]}