{"sha": "0bf54ff468270dc60cb06dc1940e4bfb9e918c2b", "node_id": "C_kwDOANBUbNoAKDBiZjU0ZmY0NjgyNzBkYzYwY2IwNmRjMTk0MGU0YmZiOWU5MThjMmI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-27T12:52:57Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-07-28T09:27:31Z"}, "message": "util: Add StackedContext class", "tree": {"sha": "b4029c1cc8db17727288ad23c66f1bb81e7f360c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4029c1cc8db17727288ad23c66f1bb81e7f360c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "205096066a50f501eb1c1d1f7acb4b0daa8be15a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/205096066a50f501eb1c1d1f7acb4b0daa8be15a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/205096066a50f501eb1c1d1f7acb4b0daa8be15a"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "c34eb907f06dfcc61e0976345938d54ad497d22a", "filename": "gcc/rust/util/rust-stacked-contexts.h", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b/gcc%2Frust%2Futil%2Frust-stacked-contexts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0bf54ff468270dc60cb06dc1940e4bfb9e918c2b/gcc%2Frust%2Futil%2Frust-stacked-contexts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-stacked-contexts.h?ref=0bf54ff468270dc60cb06dc1940e4bfb9e918c2b", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_CONTEXT_STACK_H\n+#define RUST_CONTEXT_STACK_H\n+\n+#include \"rust-system.h\"\n+\n+namespace Rust {\n+\n+/**\n+ * Context stack util class. This class is useful for situations where you can\n+ * enter the same kind of context multiple times. For example, when dealing with\n+ * unsafe contexts, you might be tempted to simply keep a boolean value.\n+ *\n+ * ```rust\n+ * let a = 15;\n+ * unsafe { // we set the boolean to true\n+ *     // Now unsafe operations are allowed!\n+ *     let b = *(&a as *const i32);\n+ *     let c = std::mem::transmute<i32, f32>(b); // Urgh!\n+ * } // we set it to false\n+ * ```\n+ *\n+ * However, since the language allows nested unsafe blocks, you may run into\n+ * this situation:\n+ *\n+ * ```rust\n+ * unsafe { // we set the boolean to true\n+ *     unsafe { // we set the boolean to true\n+ *     } // we set it to false\n+ *\n+ *     // Now unsafe operations are forbidden again, the boolean is false\n+ *     let f = std::mem::transmute<i32, f32>(15); // Error!\n+ * } // we set it to false\n+ * ```\n+ */\n+template <typename T> class StackedContexts\n+{\n+public:\n+  /**\n+   * Enter a special context\n+   */\n+  void enter (T value) { stack.emplace_back (value); }\n+\n+  /**\n+   * Exit a special context\n+   */\n+  T exit ()\n+  {\n+    rust_assert (!stack.empty ());\n+\n+    auto last = stack.back ();\n+    stack.pop_back ();\n+\n+    return last;\n+  }\n+\n+  /**\n+   * Are we currently inside of a special context?\n+   */\n+  bool is_in_context () const { return !stack.empty (); }\n+\n+private:\n+  /* Actual data */\n+  std::vector<T> stack;\n+};\n+\n+} // namespace Rust\n+\n+#endif /* !RUST_CONTEXT_STACK_H */"}]}