{"sha": "87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwMDNiMjg1Mzg5YTc2ZmQ5YmI4YTM0NWEzNmVmMmE5ZWJjZTBhMQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-10-08T12:54:03Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-10-08T12:54:03Z"}, "message": "ali.adb: Set Allocator_In_Body if AB parameter present on M line\n\n2010-10-08  Robert Dewar  <dewar@adacore.com>\n\n\t* ali.adb: Set Allocator_In_Body if AB parameter present on M line\n\t* ali.ads (Allocator_In_Body): New flag\n\t* bcheck.adb (Check_Consistent_Restrictions): Handle case of main\n\tprogram violating No_Allocators_After_Elaboration restriction.\n\t* gnatbind.adb (No_Restriction_List): Add entries for\n\tNo_Anonymous_Allocators, and No_Allocators_After_Elaboration.\n\t* lib-load.adb: Initialize Has_Allocator flag\n\t* lib-writ.adb: Initialize Has_Allocator flag\n\t(M_Parameters): Set AB switch if Has_Allocator flag set\n\t* lib-writ.ads: Document AB flag on M line\n\t* lib.adb (Has_Allocator): New function\n\t(Set_Has_Allocator): New procedure\n\t* lib.ads (Has_Allocator): New function\n\t(Set_Has_Allocator): New procedure\n\t(Has_Allocator): New flag in Unit_Record\n\t* sem_ch4.adb (Analyze_Allocator): Add processing for\n\tNo_Allocators_After_Elaboration.\n\nFrom-SVN: r165171", "tree": {"sha": "2a0cb37f03e0c50944d29b876561a756b303f1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a0cb37f03e0c50944d29b876561a756b303f1f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/comments", "author": null, "committer": null, "parents": [{"sha": "0b89eea8926cb52d0b8c50b764a67572a9fde60d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b89eea8926cb52d0b8c50b764a67572a9fde60d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b89eea8926cb52d0b8c50b764a67572a9fde60d"}], "stats": {"total": 168, "additions": 153, "deletions": 15}, "files": [{"sha": "209013457414c2550a39369b8a92882e7acc986f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -1,3 +1,23 @@\n+2010-10-08  Robert Dewar  <dewar@adacore.com>\n+\n+\t* ali.adb: Set Allocator_In_Body if AB parameter present on M line\n+\t* ali.ads (Allocator_In_Body): New flag\n+\t* bcheck.adb (Check_Consistent_Restrictions): Handle case of main\n+\tprogram violating No_Allocators_After_Elaboration restriction.\n+\t* gnatbind.adb (No_Restriction_List): Add entries for\n+\tNo_Anonymous_Allocators, and No_Allocators_After_Elaboration.\n+\t* lib-load.adb: Initialize Has_Allocator flag\n+\t* lib-writ.adb: Initialize Has_Allocator flag\n+\t(M_Parameters): Set AB switch if Has_Allocator flag set\n+\t* lib-writ.ads: Document AB flag on M line\n+\t* lib.adb (Has_Allocator): New function\n+\t(Set_Has_Allocator): New procedure\n+\t* lib.ads (Has_Allocator): New function\n+\t(Set_Has_Allocator): New procedure\n+\t(Has_Allocator): New flag in Unit_Record\n+\t* sem_ch4.adb (Analyze_Allocator): Add processing for\n+\tNo_Allocators_After_Elaboration.\n+\n 2010-10-08  Geert Bosch  <bosch@adacore.com>\n \n \t* a-textio.adb (Get_Line): Rewrite to use fgets instead of fgetc."}, {"sha": "bf7ace87a45515206a370cea9a9b8074d42ba29a", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -828,6 +828,7 @@ package body ALI is\n         Sfile                      => No_File,\n         Task_Dispatching_Policy    => ' ',\n         Time_Slice_Value           => -1,\n+        Allocator_In_Body          => False,\n         WC_Encoding                => 'b',\n         Unit_Exception_Table       => False,\n         Ver                        => (others => ' '),\n@@ -910,6 +911,14 @@ package body ALI is\n \n                Skip_Space;\n \n+               if Nextc = 'A' then\n+                  P := P + 1;\n+                  Checkc ('B');\n+                  ALIs.Table (Id).Allocator_In_Body := True;\n+               end if;\n+\n+               Skip_Space;\n+\n                Checkc ('W');\n                Checkc ('=');\n                ALIs.Table (Id).WC_Encoding := Getc;"}, {"sha": "062652c4820e96fcd9a0de659bd7f2a70b55fcd3", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -136,6 +136,10 @@ package ALI is\n       --  line. A value of -1 indicates that no T=xxx parameter was found, or\n       --  no M line was present. Not set if 'M' appears in Ignore_Lines.\n \n+      Allocator_In_Body : Boolean;\n+      --  Set True if an AB switch appears on the main program line. False\n+      --  if no M line, or AB not present, or 'M appears in Ignore_Lines.\n+\n       WC_Encoding : Character;\n       --  Wide character encoding if main procedure. Otherwise not relevant.\n       --  Not set if 'M' appears in Ignore_Lines."}, {"sha": "796627e0d52d9b03bfbae2bc4a053353ec59261b", "filename": "gcc/ada/bcheck.adb", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fbcheck.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fbcheck.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbcheck.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -854,6 +854,22 @@ package body Bcheck is\n    --  Start of processing for Check_Consistent_Restrictions\n \n    begin\n+      --  A special test, if we have a main program, then if it has an\n+      --  allocator in the body, this is considered to be a violation of\n+      --  the restriction No_Allocators_After_Elaboration. We just mark\n+      --  this restriction and then the normal circuit will flag it.\n+\n+      if Bind_Main_Program\n+        and then ALIs.Table (ALIs.First).Main_Program /= None\n+        and then not No_Main_Subprogram\n+        and then ALIs.Table (ALIs.First).Allocator_In_Body\n+      then\n+         Cumulative_Restrictions.Violated\n+           (No_Allocators_After_Elaboration) := True;\n+         ALIs.Table (ALIs.First).Restrictions.Violated\n+           (No_Allocators_After_Elaboration) := True;\n+      end if;\n+\n       --  Loop through all restriction violations\n \n       for R in All_Restrictions loop"}, {"sha": "de3084f02677c5e2e0a5655a7a9b5194f1744871", "filename": "gcc/ada/gnatbind.adb", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fgnatbind.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fgnatbind.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatbind.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -143,34 +143,40 @@ procedure Gnatbind is\n       --  should not be listed.\n \n       No_Restriction_List : constant array (All_Restrictions) of Boolean :=\n-        (No_Exception_Propagation => True,\n+        (No_Allocators_After_Elaboration => True,\n+         --  This involves run-time conditions not checkable at compile time\n+\n+         No_Anonymous_Allocators         => True,\n+         --  Premature, since we have not implemented this yet\n+\n+         No_Exception_Propagation        => True,\n          --  Modifies code resulting in different exception semantics\n \n-         No_Exceptions            => True,\n+         No_Exceptions                   => True,\n          --  Has unexpected Suppress (All_Checks) effect\n \n-         No_Implicit_Conditionals => True,\n+         No_Implicit_Conditionals        => True,\n          --  This could modify and pessimize generated code\n \n-         No_Implicit_Dynamic_Code => True,\n+         No_Implicit_Dynamic_Code        => True,\n          --  This could modify and pessimize generated code\n \n-         No_Implicit_Loops        => True,\n+         No_Implicit_Loops               => True,\n          --  This could modify and pessimize generated code\n \n-         No_Recursion             => True,\n+         No_Recursion                    => True,\n          --  Not checkable at compile time\n \n-         No_Reentrancy            => True,\n+         No_Reentrancy                   => True,\n          --  Not checkable at compile time\n \n-         Max_Entry_Queue_Length    => True,\n+         Max_Entry_Queue_Length           => True,\n          --  Not checkable at compile time\n \n-         Max_Storage_At_Blocking  => True,\n+         Max_Storage_At_Blocking         => True,\n          --  Not checkable at compile time\n \n-         others => False);\n+         others                          => False);\n \n       Additional_Restrictions_Listed : Boolean := False;\n       --  Set True if we have listed header for restrictions"}, {"sha": "328bbeb6d033b04cc9dc655d2cdfc383348f61f8", "filename": "gcc/ada/lib-load.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-load.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-load.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-load.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -214,6 +214,7 @@ package body Lib.Load is\n         Expected_Unit    => Spec_Name,\n         Fatal_Error      => True,\n         Generate_Code    => False,\n+        Has_Allocator    => False,\n         Has_RACW         => False,\n         Is_Compiler_Unit => False,\n         Ident_String     => Empty,\n@@ -318,6 +319,7 @@ package body Lib.Load is\n            Expected_Unit    => No_Unit_Name,\n            Fatal_Error      => False,\n            Generate_Code    => False,\n+           Has_Allocator    => False,\n            Has_RACW         => False,\n            Is_Compiler_Unit => False,\n            Ident_String     => Empty,\n@@ -647,6 +649,7 @@ package body Lib.Load is\n               Expected_Unit    => Uname_Actual,\n               Fatal_Error      => False,\n               Generate_Code    => False,\n+              Has_Allocator    => False,\n               Has_RACW         => False,\n               Is_Compiler_Unit => False,\n               Ident_String     => Empty,"}, {"sha": "b7bc2cfcf59e393efd71fdaafcf0d7e97b3cfd3d", "filename": "gcc/ada/lib-writ.adb", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-writ.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-writ.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -80,6 +80,7 @@ package body Lib.Writ is\n          Dynamic_Elab     => False,\n          Fatal_Error      => False,\n          Generate_Code    => False,\n+         Has_Allocator    => False,\n          Has_RACW         => False,\n          Is_Compiler_Unit => False,\n          Ident_String     => Empty,\n@@ -135,6 +136,7 @@ package body Lib.Writ is\n         Dynamic_Elab     => False,\n         Fatal_Error      => False,\n         Generate_Code    => False,\n+        Has_Allocator    => False,\n         Has_RACW         => False,\n         Is_Compiler_Unit => False,\n         Ident_String     => Empty,\n@@ -925,6 +927,10 @@ package body Lib.Writ is\n                Write_Info_Nat (Opt.Time_Slice_Value);\n             end if;\n \n+            if Has_Allocator (Main_Unit) then\n+               Write_Info_Str (\" AB\");\n+            end if;\n+\n             Write_Info_Str (\" W=\");\n             Write_Info_Char\n               (WC_Encoding_Letters (Wide_Character_Encoding_Method));"}, {"sha": "b3ea32d1282f46458b1da1a0398bfce508c882f9", "filename": "gcc/ada/lib-writ.ads", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-writ.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib-writ.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-writ.ads?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -116,7 +116,7 @@ package Lib.Writ is\n    --  -- M  Main Program --\n    --  ---------------------\n \n-   --    M type [priority] [T=time-slice] W=?\n+   --    M type [priority] [T=time-slice] [AB] W=?\n \n    --      This line appears only if the main unit for this file is suitable\n    --      for use as a main program. The parameters are:\n@@ -141,6 +141,15 @@ package Lib.Writ is\n    --          milliseconds. The actual significance of this parameter is\n    --          target dependent.\n \n+   --        AB\n+\n+   --          Present if there is an allocator in the body of the procedure\n+   --          after the BEGIN. This will be a violation of the restriction\n+   --          No_Allocators_After_Elaboration if it is present, and this\n+   --          unit is used as a main program (only the binder can find the\n+   --          violation, since only the binder knows the main program).\n+   --\n+\n    --        W=?\n \n    --          This parameter indicates the wide character encoding method used"}, {"sha": "90577e481af8f827214d682c30cdfd0bc5b613ab", "filename": "gcc/ada/lib.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -113,6 +113,11 @@ package body Lib is\n       return Units.Table (U).Generate_Code;\n    end Generate_Code;\n \n+   function Has_Allocator (U : Unit_Number_Type) return Boolean is\n+   begin\n+      return Units.Table (U).Has_Allocator;\n+   end Has_Allocator;\n+\n    function Has_RACW (U : Unit_Number_Type) return Boolean is\n    begin\n       return Units.Table (U).Has_RACW;\n@@ -198,6 +203,11 @@ package body Lib is\n       Units.Table (U).Generate_Code := B;\n    end Set_Generate_Code;\n \n+   procedure Set_Has_Allocator (U : Unit_Number_Type; B : Boolean := True) is\n+   begin\n+      Units.Table (U).Has_Allocator := B;\n+   end Set_Has_Allocator;\n+\n    procedure Set_Has_RACW (U : Unit_Number_Type; B : Boolean := True) is\n    begin\n       Units.Table (U).Has_RACW := B;"}, {"sha": "13962528e3e79b2152810298c922727406da7452", "filename": "gcc/ada/lib.ads", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Flib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib.ads?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -357,6 +357,10 @@ package Lib is\n    --      that the default priority is to be used (and is also used for\n    --      entries that do not correspond to possible main programs).\n \n+   --    Has_Allocator\n+   --      This flag is set if a subprogram unit has an allocator after the\n+   --      BEGIN (it is used to set the AB flag in the M ALI line).\n+\n    --    OA_Setting\n    --      This is a character field containing L if Optimize_Alignment mode\n    --      was set locally, and O/T/S for Off/Time/Space default if not.\n@@ -397,6 +401,7 @@ package Lib is\n    function Fatal_Error      (U : Unit_Number_Type) return Boolean;\n    function Generate_Code    (U : Unit_Number_Type) return Boolean;\n    function Ident_String     (U : Unit_Number_Type) return Node_Id;\n+   function Has_Allocator    (U : Unit_Number_Type) return Boolean;\n    function Has_RACW         (U : Unit_Number_Type) return Boolean;\n    function Is_Compiler_Unit (U : Unit_Number_Type) return Boolean;\n    function Loading          (U : Unit_Number_Type) return Boolean;\n@@ -415,6 +420,7 @@ package Lib is\n    procedure Set_Fatal_Error      (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Generate_Code    (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Has_RACW         (U : Unit_Number_Type; B : Boolean := True);\n+   procedure Set_Has_Allocator    (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Is_Compiler_Unit (U : Unit_Number_Type; B : Boolean := True);\n    procedure Set_Ident_String     (U : Unit_Number_Type; N : Node_Id);\n    procedure Set_Loading          (U : Unit_Number_Type; B : Boolean := True);\n@@ -653,6 +659,7 @@ private\n    pragma Inline (Dependency_Num);\n    pragma Inline (Fatal_Error);\n    pragma Inline (Generate_Code);\n+   pragma Inline (Has_Allocator);\n    pragma Inline (Has_RACW);\n    pragma Inline (Is_Compiler_Unit);\n    pragma Inline (Increment_Serial_Number);\n@@ -664,6 +671,7 @@ private\n    pragma Inline (Set_Cunit_Entity);\n    pragma Inline (Set_Fatal_Error);\n    pragma Inline (Set_Generate_Code);\n+   pragma Inline (Set_Has_Allocator);\n    pragma Inline (Set_Has_RACW);\n    pragma Inline (Set_Loading);\n    pragma Inline (Set_Main_Priority);\n@@ -693,6 +701,7 @@ private\n       Is_Compiler_Unit : Boolean;\n       Dynamic_Elab     : Boolean;\n       Loading          : Boolean;\n+      Has_Allocator    : Boolean;\n       OA_Setting       : Character;\n    end record;\n \n@@ -720,7 +729,8 @@ private\n       Dynamic_Elab     at 55 range 0 ..  7;\n       Is_Compiler_Unit at 56 range 0 ..  7;\n       OA_Setting       at 57 range 0 ..  7;\n-      Loading          at 58 range 0 .. 15;\n+      Loading          at 58 range 0 ..  7;\n+      Has_Allocator    at 59 range 0 ..  7;\n    end record;\n \n    for Unit_Record'Size use 60 * 8;"}, {"sha": "183de2d36edcaca1508f99ea3733430afef324b6", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87003b285389a76fd9bb8a345a36ef2a9ebce0a1/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=87003b285389a76fd9bb8a345a36ef2a9ebce0a1", "patch": "@@ -364,15 +364,60 @@ package body Sem_Ch4 is\n       E        : Node_Id             := Expression (N);\n       Acc_Type : Entity_Id;\n       Type_Id  : Entity_Id;\n+      P        : Node_Id;\n+      C        : Node_Id;\n \n    begin\n+      --  Deal with allocator restrictions\n+\n       --  In accordance with H.4(7), the No_Allocators restriction only applies\n-      --  to user-written allocators.\n+      --  to user-written allocators. The same consideration applies to the\n+      --  No_Allocators_Before_Elaboration restriction.\n \n       if Comes_From_Source (N) then\n          Check_Restriction (No_Allocators, N);\n+\n+         --  Processing for No_Allocators_After_Elaboration, loop to look at\n+         --  enclosing context, checking task case and main subprogram case.\n+\n+         C := N;\n+         P := Parent (C);\n+         while Present (P) loop\n+\n+            --  In both cases we need a handled sequence of statements, where\n+            --  the occurrence of the allocator is within the statements.\n+\n+            if Nkind (P) = N_Handled_Sequence_Of_Statements\n+              and then Is_List_Member (C)\n+              and then List_Containing (C) = Statements (P)\n+            then\n+               --  Check for allocator within task body, this is a definite\n+               --  violation of No_Allocators_After_Elaboration we can detect.\n+\n+               if Nkind (Original_Node (Parent (P))) = N_Task_Body then\n+                  Check_Restriction (No_Allocators_After_Elaboration, N);\n+                  exit;\n+               end if;\n+\n+               --  The other case is appearence in a subprogram body. This may\n+               --  be a violation if this is a library level subprogram, and it\n+               --  turns out to be used as the main program, but only the\n+               --  binder knows that, so just record the occurrence.\n+\n+               if Nkind (Original_Node (Parent (P))) = N_Subprogram_Body\n+                 and then Nkind (Parent (Parent (P))) = N_Compilation_Unit\n+               then\n+                  Set_Has_Allocator (Current_Sem_Unit);\n+               end if;\n+            end if;\n+\n+            C := P;\n+            P := Parent (C);\n+         end loop;\n       end if;\n \n+      --  Analyze the allocator\n+\n       if Nkind (E) = N_Qualified_Expression then\n          Acc_Type := Create_Itype (E_Allocator_Type, N);\n          Set_Etype (Acc_Type, Acc_Type);"}]}