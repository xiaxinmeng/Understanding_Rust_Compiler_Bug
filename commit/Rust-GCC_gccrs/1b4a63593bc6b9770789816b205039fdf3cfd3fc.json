{"sha": "1b4a63593bc6b9770789816b205039fdf3cfd3fc", "node_id": "C_kwDOANBUbNoAKDFiNGE2MzU5M2JjNmI5NzcwNzg5ODE2YjIwNTAzOWZkZjNjZmQzZmM", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-04T17:36:08Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-11-04T17:36:08Z"}, "message": "AArch64: Lower intrinsics shift to GIMPLE when possible.\n\nThis lowers shifts to GIMPLE when the C interpretations of the shift operations\nmatches that of AArch64.\n\nIn C shifting right by BITSIZE is undefined, but the behavior is defined in\nAArch64.  Additionally negative shifts lefts are undefined for the register\nvariant of the instruction (SSHL, USHL) as being right shifts.\n\nSince we have a right shift by immediate I rewrite those cases into right shifts\n\nSo:\n\nint64x1_t foo3 (int64x1_t a)\n{\n  return vshl_s64 (a, vdup_n_s64(-6));\n}\n\nproduces:\n\nfoo3:\n        sshr    d0, d0, 6\n        ret\n\ninstead of:\n\nfoo3:\n        mov     x0, -6\n        fmov    d1, x0\n        sshl    d0, d0, d1\n        ret\n\nThis behavior isn't specifically mentioned for a left shift by immediate, but I\nbelieve that only the case because we do have a right shift by immediate but not\na right shift by register.  As such I do the same for left shift by immediate.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-builtins.c\n\t(aarch64_general_gimple_fold_builtin): Add ashl, sshl, ushl, ashr,\n\tashr_simd, lshr, lshr_simd.\n\t* config/aarch64/aarch64-simd-builtins.def (lshr): Use USHIFTIMM.\n\t* config/aarch64/arm_neon.h (vshr_n_u8, vshr_n_u16, vshr_n_u32,\n\tvshrq_n_u8, vshrq_n_u16, vshrq_n_u32, vshrq_n_u64): Fix type hack.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-1.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-2.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-3.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-4.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-5.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-6.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-7.c: New test.\n\t* gcc.target/aarch64/advsimd-intrinsics/vshl-opt-8.c: New test.\n\t* gcc.target/aarch64/signbit-2.c: New test.", "tree": {"sha": "896a17cffe705e24f789af4b40b694c509b666e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/896a17cffe705e24f789af4b40b694c509b666e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1b4a63593bc6b9770789816b205039fdf3cfd3fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a63593bc6b9770789816b205039fdf3cfd3fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b4a63593bc6b9770789816b205039fdf3cfd3fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b4a63593bc6b9770789816b205039fdf3cfd3fc/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70720c2382e687e192a9d666e80acb41bfda856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d70720c2382e687e192a9d666e80acb41bfda856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d70720c2382e687e192a9d666e80acb41bfda856"}], "stats": {"total": 188, "additions": 180, "deletions": 8}, "files": [{"sha": "5053bf0f8fd6638bf84a6df06c0987a0216b69e7", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -2719,6 +2719,54 @@ aarch64_general_gimple_fold_builtin (unsigned int fcode, gcall *stmt,\n \t\t\t\t\t       1, args[0]);\n \tgimple_call_set_lhs (new_stmt, gimple_call_lhs (stmt));\n \tbreak;\n+      BUILTIN_VSDQ_I_DI (BINOP, ashl, 3, NONE)\n+\tif (TREE_CODE (args[1]) == INTEGER_CST\n+\t    && wi::ltu_p (wi::to_wide (args[1]), element_precision (args[0])))\n+\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t  LSHIFT_EXPR, args[0], args[1]);\n+\tbreak;\n+      BUILTIN_VSDQ_I_DI (BINOP, sshl, 0, NONE)\n+      BUILTIN_VSDQ_I_DI (BINOP_UUS, ushl, 0, NONE)\n+\t{\n+\t  tree cst = args[1];\n+\t  tree ctype = TREE_TYPE (cst);\n+\t  /* Left shifts can be both scalar or vector, e.g. uint64x1_t is\n+\t     treated as a scalar type not a vector one.  */\n+\t  if ((cst = uniform_integer_cst_p (cst)) != NULL_TREE)\n+\t    {\n+\t      wide_int wcst = wi::to_wide (cst);\n+\t      tree unit_ty = TREE_TYPE (cst);\n+\n+\t      wide_int abs_cst = wi::abs (wcst);\n+\t      if (wi::geu_p (abs_cst, element_precision (args[0])))\n+\t\tbreak;\n+\n+\t      if (wi::neg_p (wcst, TYPE_SIGN (ctype)))\n+\t\t{\n+\t\t  tree final_cst;\n+\t\t  final_cst = wide_int_to_tree (unit_ty, abs_cst);\n+\t\t  if (TREE_CODE (cst) != INTEGER_CST)\n+\t\t    final_cst = build_uniform_cst (ctype, final_cst);\n+\n+\t\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\t  RSHIFT_EXPR, args[0],\n+\t\t\t\t\t\t  final_cst);\n+\t\t}\n+\t      else\n+\t\tnew_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t\tLSHIFT_EXPR, args[0], args[1]);\n+\t    }\n+\t}\n+\tbreak;\n+      BUILTIN_VDQ_I (SHIFTIMM, ashr, 3, NONE)\n+      VAR1 (SHIFTIMM, ashr_simd, 0, NONE, di)\n+      BUILTIN_VDQ_I (USHIFTIMM, lshr, 3, NONE)\n+      VAR1 (USHIFTIMM, lshr_simd, 0, NONE, di)\n+\tif (TREE_CODE (args[1]) == INTEGER_CST\n+\t    && wi::ltu_p (wi::to_wide (args[1]), element_precision (args[0])))\n+\t  new_stmt = gimple_build_assign (gimple_call_lhs (stmt),\n+\t\t\t\t\t  RSHIFT_EXPR, args[0], args[1]);\n+\tbreak;\n       BUILTIN_GPF (BINOP, fmulx, 0, ALL)\n \t{\n \t  gcc_assert (nargs == 2);"}, {"sha": "4a7e2cf4125fe674dbb31c8f068b3b9970e9ea80", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -436,7 +436,7 @@\n \n   BUILTIN_VDQ_I (SHIFTIMM, ashr, 3, NONE)\n   VAR1 (SHIFTIMM, ashr_simd, 0, NONE, di)\n-  BUILTIN_VDQ_I (SHIFTIMM, lshr, 3, NONE)\n+  BUILTIN_VDQ_I (USHIFTIMM, lshr, 3, NONE)\n   VAR1 (USHIFTIMM, lshr_simd, 0, NONE, di)\n   /* Implemented by aarch64_<sur>shr_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0, NONE)"}, {"sha": "398a2e3a021fc488519acf6b54ff114805340e8a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -24128,21 +24128,21 @@ __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshr_n_u8 (uint8x8_t __a, const int __b)\n {\n-  return (uint8x8_t) __builtin_aarch64_lshrv8qi ((int8x8_t) __a, __b);\n+  return __builtin_aarch64_lshrv8qi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshr_n_u16 (uint16x4_t __a, const int __b)\n {\n-  return (uint16x4_t) __builtin_aarch64_lshrv4hi ((int16x4_t) __a, __b);\n+  return __builtin_aarch64_lshrv4hi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshr_n_u32 (uint32x2_t __a, const int __b)\n {\n-  return (uint32x2_t) __builtin_aarch64_lshrv2si ((int32x2_t) __a, __b);\n+  return __builtin_aarch64_lshrv2si_uus (__a, __b);\n }\n \n __extension__ extern __inline uint64x1_t\n@@ -24184,28 +24184,28 @@ __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrq_n_u8 (uint8x16_t __a, const int __b)\n {\n-  return (uint8x16_t) __builtin_aarch64_lshrv16qi ((int8x16_t) __a, __b);\n+  return __builtin_aarch64_lshrv16qi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint16x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrq_n_u16 (uint16x8_t __a, const int __b)\n {\n-  return (uint16x8_t) __builtin_aarch64_lshrv8hi ((int16x8_t) __a, __b);\n+  return __builtin_aarch64_lshrv8hi_uus (__a, __b);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrq_n_u32 (uint32x4_t __a, const int __b)\n {\n-  return (uint32x4_t) __builtin_aarch64_lshrv4si ((int32x4_t) __a, __b);\n+  return __builtin_aarch64_lshrv4si_uus (__a, __b);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vshrq_n_u64 (uint64x2_t __a, const int __b)\n {\n-  return (uint64x2_t) __builtin_aarch64_lshrv2di ((int64x2_t) __a, __b);\n+  return __builtin_aarch64_lshrv2di_uus (__a, __b);\n }\n \n __extension__ extern __inline int64_t"}, {"sha": "6baed3a19a849544c46ca5da3361275b5ee6e713", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-1.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+uint8x8_t foo (uint8x8_t a)\n+{\n+  return vshr_n_u8 (a, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tushr\\t.+, 2} 1 } } */"}, {"sha": "df46ae31b19ec02917fb5436011e02f776830489", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-2.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int16x8_t foo (int16x8_t a)\n+{\n+  return vshrq_n_s16 (a, 8);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshr\\t.+, 8} 1 } } */"}, {"sha": "86fcc7ae7f2222a49b051327edd13e544efe517a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-3.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int16x8_t foo (int16x8_t a)\n+{\n+  return vshrq_n_s16 (a, 16);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshr\\t.+, 16} 1 } } */"}, {"sha": "11f8fec6d02d6e27a8bd947eb9062f4b4f84c749", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-4.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-4.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int64x1_t foo (int64x1_t a)\n+{\n+  return vshl_s64 (a, vdup_n_s64(80));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshl\\t.+, d[0-9]+} 1 } } */"}, {"sha": "e140e5f5fcaaaf8856797158fa0c15db9279b33c", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-5.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-5.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+/* { dg-skip-if \"no optimizations\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+int64x1_t foo (int64x1_t a)\n+{\n+  return vshl_s64 (a, vdup_n_s64(-6));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshr\\t.+, 6} 1 } } */"}, {"sha": "442e3163237e55978487f7fde798c98d3ffdd633", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-6.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-6.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int32x4_t foo (int32x4_t x) {\n+  return vshlq_s32(x, vdupq_n_s32(256));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshl\\t.+, v[0-9].4s} 1 } } */"}, {"sha": "20b4920912b860151c631480b21fa47aea868796", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-7.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-7.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+/* { dg-skip-if \"no optimizations\" { *-*-* } { \"-O0\" } { \"\" } } */\n+\n+#include <arm_neon.h>\n+\n+int32x4_t foo (int32x4_t x) {\n+  return vshlq_s32(vdupq_n_s32(1), vdupq_n_s32(10));\n+}\n+\n+/* { dg-final { scan-assembler-not {\\tsshl\\t} } } */\n+/* { dg-final { scan-assembler-times {\\tmovi\\t} 1 } } */"}, {"sha": "f586aa79cd6854951cef081d20c207de7dad0e25", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vshl-opt-8.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvshl-opt-8.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do assemble { target aarch64*-*-* } } */\n+/* { dg-additional-options \"--save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int32x4_t foo (int32x4_t x) {\n+  return vshlq_s32(x, vdupq_n_s32(-64));\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tsshl\\t.+, v[0-9]+.4s} 1 } } */"}, {"sha": "e4e9afc854317cb599fa8118a1117c5a52e6f497", "filename": "gcc/testsuite/gcc.target/aarch64/signbit-2.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1b4a63593bc6b9770789816b205039fdf3cfd3fc/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsignbit-2.c?ref=1b4a63593bc6b9770789816b205039fdf3cfd3fc", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+int32x2_t foo1 (int32x2_t a)\n+{\n+  return vshr_n_s32 (vneg_s32 (a), 31);\n+}\n+\n+int32x4_t foo2 (int32x4_t a)\n+{\n+  return vshrq_n_s32 (vnegq_s32 (a), 31);\n+}\n+\n+int16x8_t foo3 (int16x8_t a)\n+{\n+  return vshrq_n_s16 (vnegq_s16 (a), 15);\n+}\n+\n+int16x4_t foo4 (int16x4_t a)\n+{\n+  return vshr_n_s16 (vneg_s16 (a), 15);\n+}\n+\n+int8x16_t foo5 (int8x16_t a)\n+{\n+  return vshrq_n_s8 (vnegq_s8 (a), 7);\n+}\n+\n+int8x8_t foo6 (int8x8_t a)\n+{\n+  return vshr_n_s8 (vneg_s8 (a), 7);\n+}\n+\n+/* { dg-final { scan-assembler-times {\\tcmgt\\t} 6 } } */"}]}