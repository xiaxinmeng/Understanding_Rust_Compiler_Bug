{"sha": "b854ce130ebbfdf2f882ef08538746030513b44b", "node_id": "C_kwDOANBUbNoAKGI4NTRjZTEzMGViYmZkZjJmODgyZWYwODUzODc0NjAzMDUxM2I0NGI", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-27T03:54:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-28T13:35:58Z"}, "message": "c++: CTAD and member alias template [PR102123]\n\nWhen building a deduction guide from the Test constructor, we need to\nrewrite the use of _dummy into a dependent reference, i.e. Test<T>::template\n_dummy.  We were using SCOPE_REF for both type and non-type templates; we\nneed to use UNBOUND_CLASS_TEMPLATE for type templates.\n\n\tPR c++/102123\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (tsubst_copy): Use make_unbound_class_template for rewriting\n\ta type template reference.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/class-deduction110.C: New test.", "tree": {"sha": "014b61026e6fa7636eee1eedc7f30deb230550f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/014b61026e6fa7636eee1eedc7f30deb230550f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b854ce130ebbfdf2f882ef08538746030513b44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854ce130ebbfdf2f882ef08538746030513b44b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b854ce130ebbfdf2f882ef08538746030513b44b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b854ce130ebbfdf2f882ef08538746030513b44b/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7361eb36fa50307c9f7cfca36c9f58ce24f8f54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7361eb36fa50307c9f7cfca36c9f58ce24f8f54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7361eb36fa50307c9f7cfca36c9f58ce24f8f54"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "678063f6e4cc4f693392dc3ea9ac1e50187974a4", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854ce130ebbfdf2f882ef08538746030513b44b/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854ce130ebbfdf2f882ef08538746030513b44b/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=b854ce130ebbfdf2f882ef08538746030513b44b", "patch": "@@ -17021,6 +17021,9 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t      /* When rewriting a constructor into a deduction guide, a\n \t\t non-dependent name can become dependent, so memtmpl<args>\n \t\t becomes context::template memtmpl<args>.  */\n+\t      if (DECL_TYPE_TEMPLATE_P (t))\n+\t\treturn make_unbound_class_template (context, DECL_NAME (t),\n+\t\t\t\t\t\t    NULL_TREE, complain);\n \t      tree type = tsubst (TREE_TYPE (t), args, complain, in_decl);\n \t      return build_qualified_name (type, context, DECL_NAME (t),\n \t\t\t\t\t   /*template*/true);"}, {"sha": "8eb56478fe94a121d62f4a619443eed978a6e90a", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction110.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b854ce130ebbfdf2f882ef08538746030513b44b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction110.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b854ce130ebbfdf2f882ef08538746030513b44b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction110.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction110.C?ref=b854ce130ebbfdf2f882ef08538746030513b44b", "patch": "@@ -0,0 +1,28 @@\n+// PR c++/102123\n+// { dg-do compile { target c++17 } }\n+\n+template<template<typename...> typename Template, typename... Args>\n+struct _dummy_forwarder {\n+    using type = Template<Args...>;\n+};\n+\n+template<template<typename...> typename Template, typename... Args>\n+using dummy_forwarder = typename _dummy_forwarder<Template, Args...>::type;\n+\n+template<typename T>\n+struct Test {\n+    template<typename U> using _dummy = U;\n+\n+    using Element = dummy_forwarder<_dummy, T>;\n+\n+    Element _elem;\n+\n+    constexpr Test(const Element elem) : _elem(elem) { }\n+};\n+\n+template<typename T>\n+Test(T) -> Test<T>;\n+\n+void test() {\n+    const auto t = Test(1);\n+}"}]}