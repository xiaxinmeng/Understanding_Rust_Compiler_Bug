{"sha": "1aed535530fda367c1ec38d7db7450951ab2a003", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlZDUzNTUzMGZkYTM2N2MxZWMzOGQ3ZGI3NDUwOTUxYWIyYTAwMw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-05-27T07:07:24Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-05-27T07:07:24Z"}, "message": "decl.c (grokdeclarator): Don't try to use TYPE_OBSTACK on an error_mark_node.\n\n\t* decl.c (grokdeclarator): Don't try to use TYPE_OBSTACK on an\n\terror_mark_node.\n\nFrom-SVN: r20088", "tree": {"sha": "38e82b511a50dc8b1c0272b97bbdb85200c39b1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e82b511a50dc8b1c0272b97bbdb85200c39b1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aed535530fda367c1ec38d7db7450951ab2a003", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aed535530fda367c1ec38d7db7450951ab2a003", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aed535530fda367c1ec38d7db7450951ab2a003", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aed535530fda367c1ec38d7db7450951ab2a003/comments", "author": null, "committer": null, "parents": [{"sha": "d499463f267ac9eb8172a715c472588f96b6e1ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d499463f267ac9eb8172a715c472588f96b6e1ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d499463f267ac9eb8172a715c472588f96b6e1ba"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "cd341f73d22de00a917dc4971a30a415f701e5da", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1aed535530fda367c1ec38d7db7450951ab2a003", "patch": "@@ -1,3 +1,8 @@\n+1998-05-27  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* decl.c (grokdeclarator): Don't try to use TYPE_OBSTACK on an\n+\terror_mark_node.\n+\n 1998-05-27  Kevin Buhr  <buhr@stat.wisc.edu>\n \n \t* parse.y (base_class): Use is_aggr_type, not IS_AGGR_TYPE."}, {"sha": "a927b6c23602137774109afce5d37fe38f780043", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=1aed535530fda367c1ec38d7db7450951ab2a003", "patch": "@@ -9590,9 +9590,11 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n \t{\n \t  /* Make sure this typedef lives as long as its type,\n \t     since it might be used as a template parameter. */\n-\t  push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n+\t  if (type != error_mark_node)\n+\t    push_obstacks (TYPE_OBSTACK (type), TYPE_OBSTACK (type));\n \t  decl = build_decl (TYPE_DECL, declarator, type);\n-\t  pop_obstacks ();\n+\t  if (type != error_mark_node)\n+\t    pop_obstacks ();\n \t}\n \n       /* If the user declares \"struct {...} foo\" then `foo' will have"}, {"sha": "1e5b767cf106e99462bbadbda8c1d9d7be4f10cf", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aed535530fda367c1ec38d7db7450951ab2a003/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1aed535530fda367c1ec38d7db7450951ab2a003", "patch": "@@ -3572,17 +3572,17 @@ tsubst_friend_function (decl, args)\n   return new_friend;\n }\n \n-/* FRIEND_TYPE is a friend RECORD_TYPE or UNION_TYPE.  ARGS is the\n-   vector of template arguments, as for tsubst.\n+/* FRIEND_TMPL is a friend TEMPLATE_DECL.  ARGS is the vector of\n+   template arguments, as for tsubst.\n \n    Returns an appropriate tsbust'd friend type.  */\n \n static tree\n-tsubst_friend_class (friend_type, args)\n-     tree friend_type;\n+tsubst_friend_class (friend_tmpl, args)\n+     tree friend_tmpl;\n      tree args;\n {\n-  tree friend_tmpl = CLASSTYPE_TI_TEMPLATE (friend_type);\n+  tree friend_type;\n   tree tmpl = lookup_name (DECL_NAME (friend_tmpl), 1); \n \n   tmpl = maybe_get_template_decl_from_type_decl (tmpl);\n@@ -3591,9 +3591,8 @@ tsubst_friend_class (friend_type, args)\n     {\n       /* The friend template has already been declared.  Just\n \t check to see that the declarations match.  */\n-      if (tmpl != friend_tmpl)\n-\tredeclare_class_template (TREE_TYPE (tmpl),\n-\t\t\t\t  DECL_TEMPLATE_PARMS (friend_tmpl));\n+      redeclare_class_template (TREE_TYPE (tmpl),\n+\t\t\t\tDECL_TEMPLATE_PARMS (friend_tmpl));\n       friend_type = TREE_TYPE (tmpl);\n     }\n   else\n@@ -3886,19 +3885,29 @@ instantiate_class_template (type)\n        t = TREE_CHAIN (t))\n     {\n       tree friend_type = TREE_VALUE (t);\n+      tree new_friend_type;\n \n-      if (!CLASSTYPE_IS_TEMPLATE (friend_type))\n+      if (TREE_CODE (friend_type) != TEMPLATE_DECL)\n \t/* The call to xref_tag_from_type does injection for friend\n \t   classes.  */\n-\tfriend_type = \n+\tnew_friend_type = \n \t  xref_tag_from_type (tsubst (friend_type, args, NULL_TREE),\n \t\t\t      NULL_TREE, 1);\n       else\n-\tfriend_type = tsubst_friend_class (friend_type, args);\n+\tnew_friend_type = tsubst_friend_class (friend_type, args);\n+\n+      if (TREE_CODE (friend_type) == TEMPLATE_DECL)\n+\t/* Trick make_friend_class into realizing that the friend\n+\t   we're adding is a template, not an ordinary class.  It's\n+\t   important that we use make_friend_class since it will\n+\t   perform some error-checking and output cross-reference\n+\t   information.  */\n+\t++processing_template_decl;\n+\n+      make_friend_class (type, new_friend_type);\n \n-      CLASSTYPE_FRIEND_CLASSES (type) = \n-\ttree_cons (NULL_TREE, friend_type,\n-\t\t   CLASSTYPE_FRIEND_CLASSES (type));\n+      if (TREE_CODE (friend_type) == TEMPLATE_DECL)\n+\t--processing_template_decl;\n     }\n \n   /* This does injection for friend functions. */"}]}