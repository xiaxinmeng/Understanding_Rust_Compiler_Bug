{"sha": "5d6342ebc23344e8168b1589589b68f7b6781f66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ2MzQyZWJjMjMzNDRlODE2OGIxNTg5NTg5YjY4ZjdiNjc4MWY2Ng==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2008-05-21T21:52:57Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2008-05-21T21:52:57Z"}, "message": "re PR preprocessor/27777 (Bad diagnostic emission when #error contains a trigraph)\n\ngcc/testsuite\n\tPR preprocessor/27777:\n\t* gcc.dg/cpp/pr27777.c: New file.\nlibcpp\n\tPR preprocessor/27777:\n\t* lex.c (cpp_output_line_to_string): New function.\n\t* internal.h (_cpp_begin_message): Don't declare.\n\t* errors.c (_cpp_begin_message): Now static.\n\t* include/cpplib.h (cpp_output_line_to_string): Declare.\n\t* directives.c (do_diagnostic): Rewrote.  Use\n\tcpp_output_line_to_string.  Don't use _cpp_begin_message.\n\nFrom-SVN: r135740", "tree": {"sha": "a31b212aa429bae765ecae0b494fda6a486c56a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a31b212aa429bae765ecae0b494fda6a486c56a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d6342ebc23344e8168b1589589b68f7b6781f66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6342ebc23344e8168b1589589b68f7b6781f66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d6342ebc23344e8168b1589589b68f7b6781f66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d6342ebc23344e8168b1589589b68f7b6781f66/comments", "author": null, "committer": null, "parents": [{"sha": "0fda18dd70beee1713ba7b2bd8f04222fbe535bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fda18dd70beee1713ba7b2bd8f04222fbe535bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fda18dd70beee1713ba7b2bd8f04222fbe535bb"}], "stats": {"total": 100, "additions": 86, "deletions": 14}, "files": [{"sha": "3a88c77c1a96de10c1f593f723fcad75eaf08902", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -1,3 +1,8 @@\n+2008-05-21  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/27777:\n+\t* gcc.dg/cpp/pr27777.c: New file.\n+\n 2008-05-21  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/36023"}, {"sha": "89258b95e9f2907dee99ff7c07d96caf3462e865", "filename": "gcc/testsuite/gcc.dg/cpp/pr27777.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fpr27777.c?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -0,0 +1,8 @@\n+/* PR preprocessor/27777 */\n+/* { dg-do preprocess } */\n+/* { dg-options { -trigraphs -Wall } } */\n+\n+#error \"BUG??!\"\n+\n+/* { dg-error \"BUG\" \"\" { target *-*-* } 5 } */\n+/* { dg-warning \"trigraph\" \"\" { target *-*-* } 5 } */"}, {"sha": "7f31ff4e79a8990cde7c635e0d53a192ca9ac8ad", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -1,3 +1,13 @@\n+2008-05-21  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR preprocessor/27777:\n+\t* lex.c (cpp_output_line_to_string): New function.\n+\t* internal.h (_cpp_begin_message): Don't declare.\n+\t* errors.c (_cpp_begin_message): Now static.\n+\t* include/cpplib.h (cpp_output_line_to_string): Declare.\n+\t* directives.c (do_diagnostic): Rewrote.  Use\n+\tcpp_output_line_to_string.  Don't use _cpp_begin_message.\n+\n 2008-05-21  Tom Tromey  <tromey@redhat.com>\n \n \t* include/symtab.h (HT_ALLOCED): Remove."}, {"sha": "8e7778d12e29fc6b2756e5dac0b5742fd3bcb50c", "filename": "libcpp/directives.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -1016,14 +1016,20 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n static void\n do_diagnostic (cpp_reader *pfile, int code, int print_dir)\n {\n-  if (_cpp_begin_message (pfile, code, pfile->cur_token[-1].src_loc, 0))\n-    {\n-      if (print_dir)\n-\tfprintf (stderr, \"#%s \", pfile->directive->name);\n-      pfile->state.prevent_expansion++;\n-      cpp_output_line (pfile, stderr);\n-      pfile->state.prevent_expansion--;\n-    }\n+  const unsigned char *dir_name;\n+  unsigned char *line;\n+  source_location src_loc = pfile->cur_token[-1].src_loc;\n+\n+  if (print_dir)\n+    dir_name = pfile->directive->name;\n+  else\n+    dir_name = NULL;\n+  pfile->state.prevent_expansion++;\n+  line = cpp_output_line_to_string (pfile, dir_name);\n+  pfile->state.prevent_expansion--;\n+\n+  cpp_error_with_line (pfile, code, src_loc, 0, \"%s\", line);\n+  free (line);\n }\n \n static void"}, {"sha": "5e8e637276ddbfa3bcc121933fbcc5544b20c774", "filename": "libcpp/errors.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -76,7 +76,7 @@ print_location (cpp_reader *pfile, source_location line, unsigned int col)\n    big enough max_column_hint.)\n \n    Returns 0 if the error has been suppressed.  */\n-int\n+static int\n _cpp_begin_message (cpp_reader *pfile, int code,\n \t\t    source_location src_loc, unsigned int column)\n {"}, {"sha": "76288a9068cffca444ff5899cc3807e523dc44a2", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -844,6 +844,8 @@ extern void cpp_error_with_line (cpp_reader *, int, source_location, unsigned,\n /* In lex.c */\n extern int cpp_ideq (const cpp_token *, const char *);\n extern void cpp_output_line (cpp_reader *, FILE *);\n+extern unsigned char *cpp_output_line_to_string (cpp_reader *,\n+\t\t\t\t\t\t const unsigned char *);\n extern void cpp_output_token (const cpp_token *, FILE *);\n extern const char *cpp_type2name (enum cpp_ttype);\n /* Returns the value of an escape sequence, truncated to the correct"}, {"sha": "187b31140f33a2ff1d2e8c663a36f5fafcf83698", "filename": "libcpp/internal.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Finternal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Finternal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finternal.h?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -518,10 +518,6 @@ cpp_in_primary_file (cpp_reader *pfile)\n   return pfile->line_table->depth == 1;\n }\n \n-/* In errors.c  */\n-extern int _cpp_begin_message (cpp_reader *, int,\n-\t\t\t       source_location, unsigned int);\n-\n /* In macro.c */\n extern void _cpp_free_definition (cpp_hashnode *);\n extern bool _cpp_create_definition (cpp_reader *, cpp_hashnode *);"}, {"sha": "70897fd57db41683f8a5ee039998f824ee35b6a6", "filename": "libcpp/lex.c", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d6342ebc23344e8168b1589589b68f7b6781f66/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=5d6342ebc23344e8168b1589589b68f7b6781f66", "patch": "@@ -1,5 +1,5 @@\n /* CPP Library - lexical analysis.\n-   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n    Contributed by Per Bothner, 1994-95.\n    Based on CCCP program by Paul Rubin, June 1986\n    Adapted to ANSI C, Richard Stallman, Jan 1987\n@@ -1539,6 +1539,51 @@ cpp_output_line (cpp_reader *pfile, FILE *fp)\n   putc ('\\n', fp);\n }\n \n+/* Return a string representation of all the remaining tokens on the\n+   current line.  The result is allocated using xmalloc and must be\n+   freed by the caller.  */\n+unsigned char *\n+cpp_output_line_to_string (cpp_reader *pfile, const unsigned char *dir_name)\n+{\n+  const cpp_token *token;\n+  unsigned int out = dir_name ? ustrlen (dir_name) : 0;\n+  unsigned int alloced = 120 + out;\n+  unsigned char *result = (unsigned char *) xmalloc (alloced);\n+\n+  /* If DIR_NAME is empty, there are no initial contents.  */\n+  if (dir_name)\n+    {\n+      sprintf ((char *) result, \"#%s \", dir_name);\n+      out += 2;\n+    }\n+\n+  token = cpp_get_token (pfile);\n+  while (token->type != CPP_EOF)\n+    {\n+      unsigned char *last;\n+      /* Include room for a possible space and the terminating nul.  */\n+      unsigned int len = cpp_token_len (token) + 2;\n+\n+      if (out + len > alloced)\n+\t{\n+\t  alloced *= 2;\n+\t  if (out + len > alloced)\n+\t    alloced = out + len;\n+\t  result = (unsigned char *) xrealloc (result, alloced);\n+\t}\n+\n+      last = cpp_spell_token (pfile, token, &result[out], 0);\n+      out = last - result;\n+\n+      token = cpp_get_token (pfile);\n+      if (token->flags & PREV_WHITE)\n+\tresult[out++] = ' ';\n+    }\n+\n+  result[out] = '\\0';\n+  return result;\n+}\n+\n /* Memory buffers.  Changing these three constants can have a dramatic\n    effect on performance.  The values here are reasonable defaults,\n    but might be tuned.  If you adjust them, be sure to test across a"}]}