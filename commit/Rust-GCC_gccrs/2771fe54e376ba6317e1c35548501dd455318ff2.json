{"sha": "2771fe54e376ba6317e1c35548501dd455318ff2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc3MWZlNTRlMzc2YmE2MzE3ZTFjMzU1NDg1MDFkZDQ1NTMxOGZmMg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-05-31T23:55:54Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-05-31T23:55:54Z"}, "message": "java-tree.h (boolean_array_vtable, [...]): Declare.\n\n\t* java-tree.h (boolean_array_vtable, byte_array_vtable,\n\tchar_array_vtable, short_array_vtable, int_array_vtable,\n\tlong_array_vtable, float_array_vtable, double_array_vtable):\n\tDeclare.\n\t* expr.c (get_primitive_array_vtable): New function.\n\t(create_primitive_vtable): New function.\n\t(java_lang_expand_expr): Enable code to statically generate\n\tarrays.\n\t* decl.c (init_decl_processing): Create primitive vtables.\n\t(boolean_array_vtable, byte_array_vtable, char_array_vtable,\n\tshort_array_vtable, int_array_vtable, long_array_vtable,\n\tfloat_array_vtable, double_array_vtable): Define.\n\nFrom-SVN: r34314", "tree": {"sha": "4f3739aba4cbd6834e7170f2b709c69b16eff980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f3739aba4cbd6834e7170f2b709c69b16eff980"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2771fe54e376ba6317e1c35548501dd455318ff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2771fe54e376ba6317e1c35548501dd455318ff2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2771fe54e376ba6317e1c35548501dd455318ff2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2771fe54e376ba6317e1c35548501dd455318ff2/comments", "author": null, "committer": null, "parents": [{"sha": "9bcfe71d16f8de0e4ad005c0060511b20a4b3388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bcfe71d16f8de0e4ad005c0060511b20a4b3388", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bcfe71d16f8de0e4ad005c0060511b20a4b3388"}], "stats": {"total": 106, "additions": 98, "deletions": 8}, "files": [{"sha": "ee9f6e999ad78075a052b49b4d3fc13dedc49c6d", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=2771fe54e376ba6317e1c35548501dd455318ff2", "patch": "@@ -1,3 +1,18 @@\n+2000-05-31  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* java-tree.h (boolean_array_vtable, byte_array_vtable,\n+\tchar_array_vtable, short_array_vtable, int_array_vtable,\n+\tlong_array_vtable, float_array_vtable, double_array_vtable):\n+\tDeclare.\n+\t* expr.c (get_primitive_array_vtable): New function.\n+\t(create_primitive_vtable): New function.\n+\t(java_lang_expand_expr): Enable code to statically generate\n+\tarrays.\n+\t* decl.c (init_decl_processing): Create primitive vtables.\n+\t(boolean_array_vtable, byte_array_vtable, char_array_vtable,\n+\tshort_array_vtable, int_array_vtable, long_array_vtable,\n+\tfloat_array_vtable, double_array_vtable): Define.\n+\n 2000-05-26  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* java/parse.y (find_applicable_accessible_methods_list):"}, {"sha": "7619d636c4ab29a74ba818140c4a3a289ac7dd25", "filename": "gcc/java/decl.c", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=2771fe54e376ba6317e1c35548501dd455318ff2", "patch": "@@ -392,6 +392,16 @@ tree soft_irem_node;\n tree soft_ldiv_node;\n tree soft_lrem_node;\n \n+/* Declarations for vtables for primitive arrays.  */\n+tree boolean_array_vtable;\n+tree byte_array_vtable;\n+tree char_array_vtable;\n+tree short_array_vtable;\n+tree int_array_vtable;\n+tree long_array_vtable;\n+tree float_array_vtable;\n+tree double_array_vtable;\n+\n /* Build (and pushdecl) a \"promoted type\" for all standard\n    types shorter than int.  */\n \n@@ -451,6 +461,21 @@ builtin_function (name, type, function_code, class, library_name)\n   return decl;\n }\n \n+/* Return tree that represents a vtable for a primitive array.  */\n+static tree\n+create_primitive_vtable (name)\n+     const char *name;\n+{\n+  tree r;\n+  char buf[50];\n+\n+  sprintf (buf, \"_Jv_%sVTable\", name);\n+  r = build_decl (VAR_DECL, get_identifier (buf), ptr_type_node);\n+  DECL_EXTERNAL (r) = 1;\n+  make_decl_rtl (r, buf, 1);\n+  return r;\n+}\n+\n void\n init_decl_processing ()\n {\n@@ -573,7 +598,17 @@ init_decl_processing ()\n   float_zero_node = build_real (float_type_node, dconst0);\n   double_zero_node = build_real (double_type_node, dconst0);\n \n-  /* As your adding items here, please update the code right after\n+  /* These are the vtables for arrays of primitives.  */\n+  boolean_array_vtable = create_primitive_vtable (\"boolean\");\n+  byte_array_vtable = create_primitive_vtable (\"byte\");\n+  char_array_vtable = create_primitive_vtable (\"char\");\n+  short_array_vtable = create_primitive_vtable (\"short\");\n+  int_array_vtable = create_primitive_vtable (\"int\");\n+  long_array_vtable = create_primitive_vtable (\"long\");\n+  float_array_vtable = create_primitive_vtable (\"float\");\n+  double_array_vtable = create_primitive_vtable (\"double\");\n+\n+  /* As you're adding items here, please update the code right after\n      this section, so that the filename containing the source code of\n      the pre-defined class gets registered correctly. */\n   unqualified_object_id_node = get_identifier (\"Object\");"}, {"sha": "9a583b1ea25be65c2ba295d12f1266618e9a54fa", "filename": "gcc/java/expr.c", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=2771fe54e376ba6317e1c35548501dd455318ff2", "patch": "@@ -2251,6 +2251,33 @@ case_identity (t, v)\n   return v;\n }\n \n+/* Return the name of the vtable for an array of a given primitive\n+   type.  */\n+static tree\n+get_primitive_array_vtable (tree elt)\n+{\n+  tree r;\n+  if (elt == boolean_type_node)\n+    r = boolean_array_vtable;\n+  else if (elt == byte_type_node)\n+    r = byte_array_vtable;\n+  else if (elt == char_type_node)\n+    r = char_array_vtable;\n+  else if (elt == short_type_node)\n+    r = short_array_vtable;\n+  else if (elt == int_type_node)\n+    r = int_array_vtable;\n+  else if (elt == long_type_node)\n+    r = long_array_vtable;\n+  else if (elt == float_type_node)\n+    r = float_array_vtable;\n+  else if (elt == double_type_node)\n+    r = double_array_vtable;\n+  else\n+    abort ();\n+  return build_address_of (r);\n+}\n+\n struct rtx_def *\n java_lang_expand_expr (exp, target, tmode, modifier)\n      register tree exp;\n@@ -2272,22 +2299,25 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \ttree length = build_int_2 (ilength, 0);\n \ttree init = TREE_OPERAND (exp, 0);\n \ttree array_decl;\n-#if 0\n-\t/* Enable this once we can set the vtable field statically.  FIXME */\n+\n+\t/* See if we can generate the array statically.  */\n \tif (TREE_CONSTANT (init) && TREE_STATIC (exp)\n \t    && JPRIMITIVE_TYPE_P (element_type))\n \t  {\n \t    tree temp, value, init_decl;\n+\t    struct rtx_def *r;\n+\t    push_obstacks (&permanent_obstack, &permanent_obstack);\n \t    START_RECORD_CONSTRUCTOR (temp, object_type_node);\n \t    PUSH_FIELD_VALUE (temp, \"vtable\",\n-\t\t\t      null_pointer_node /* FIXME */\n-\t\t\t      );\n+\t\t\t      get_primitive_array_vtable (element_type));\n \t    if (! flag_hash_synchronization)\n \t      PUSH_FIELD_VALUE (temp, \"sync_info\", null_pointer_node);\n \t    FINISH_RECORD_CONSTRUCTOR (temp);\n \t    START_RECORD_CONSTRUCTOR (value, array_type);\n \t    PUSH_SUPER_VALUE (value, temp);\n-\t    PUSH_FIELD_VALUE (value, \"length\", length);\n+\t    /* FIXME: build a new `length' here to get it on the right\n+\t       obstack.  */\n+\t    PUSH_FIELD_VALUE (value, \"length\", build_int_2 (ilength, 0));\n \t    PUSH_FIELD_VALUE (value, \"data\", init);\n \t    FINISH_RECORD_CONSTRUCTOR (value);\n \n@@ -2299,9 +2329,11 @@ java_lang_expand_expr (exp, target, tmode, modifier)\n \t    TREE_READONLY (init_decl) = 1;\n \t    make_decl_rtl (init_decl, NULL, 1);\n \t    init = build1 (ADDR_EXPR, TREE_TYPE (exp), init_decl);\n-\t    return expand_expr (init, target, tmode, modifier);\n+\t    r = expand_expr (init, target, tmode, modifier);\n+\t    pop_obstacks ();\n+\t    return r;\n \t  }\n-#endif\n+\n \tarray_decl = build_decl (VAR_DECL, NULL_TREE, TREE_TYPE (exp));\n \texpand_decl (array_decl);\n \ttmp = expand_assignment (array_decl,"}, {"sha": "a05573f12e17e66e377ebcff765b9084ce296808", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2771fe54e376ba6317e1c35548501dd455318ff2/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=2771fe54e376ba6317e1c35548501dd455318ff2", "patch": "@@ -241,6 +241,14 @@ extern tree float_array_type_node;\n extern tree array_array_type_node;\n extern tree object_array_type_node;\n extern tree string_array_type_node;\n+extern tree boolean_array_vtable;\n+extern tree byte_array_vtable;\n+extern tree char_array_vtable;\n+extern tree short_array_vtable;\n+extern tree int_array_vtable;\n+extern tree long_array_vtable;\n+extern tree float_array_vtable;\n+extern tree double_array_vtable;\n extern tree TYPE_identifier_node;      /* \"TYPE\" */\n extern tree init_identifier_node;      /* \"<init>\" */\n extern tree clinit_identifier_node;      /* \"<clinit>\" */"}]}