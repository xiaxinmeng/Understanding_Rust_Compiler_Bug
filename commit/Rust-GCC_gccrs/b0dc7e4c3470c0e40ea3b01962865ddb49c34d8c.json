{"sha": "b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkYzdlNGMzNDcwYzBlNDBlYTNiMDE5NjI4NjVkZGI0OWMzNGQ4Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-11-21T22:10:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-11-21T22:10:06Z"}, "message": "Fix crtstuff merge error with transactional-memory branch.\n\n        * crtstuff.c (USE_TM_CLONE_REGISTRY): Default to 1 on ELF.\n        (__TMC_LIST__, __TMC_END__): New.\n        (__do_global_dtors_aux): Call _ITM_deregisterTMCloneTable.\n        (__do_global_dtors): Likewise.\n        (frame_dummy): Call _ITM_registerTMCloneTable.\n        (__do_global_ctors_1): Likewise.\n\nFrom-SVN: r181600", "tree": {"sha": "b84fc147599b3a6ace13d25fefbd9da58f8ec86a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b84fc147599b3a6ace13d25fefbd9da58f8ec86a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c/comments", "author": null, "committer": null, "parents": [{"sha": "98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98ccb32db43c4f2782ca59cd4e0d9ab1b4d37fab"}], "stats": {"total": 95, "additions": 90, "deletions": 5}, "files": [{"sha": "fc2331da9afaf6b61afbb008c9af5be90a8bf6e0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "patch": "@@ -1,3 +1,12 @@\n+2011-11-21  Richard Henderson  <rth@redhat.com>\n+\n+\t* crtstuff.c (USE_TM_CLONE_REGISTRY): Default to 1 on ELF.\n+\t(__TMC_LIST__, __TMC_END__): New.\n+\t(__do_global_dtors_aux): Call _ITM_deregisterTMCloneTable.\n+\t(__do_global_dtors): Likewise.\n+\t(frame_dummy): Call _ITM_registerTMCloneTable.\n+\t(__do_global_ctors_1): Likewise.\n+\n 2011-11-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* config.host (iq2000*-*-elf*): Add iq2000/t-iq2000 to tmake_file."}, {"sha": "6f06b6296020c13e71153058e76d1a53a711cf70", "filename": "libgcc/crtstuff.c", "status": "modified", "additions": 81, "deletions": 5, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c/libgcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c/libgcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fcrtstuff.c?ref=b0dc7e4c3470c0e40ea3b01962865ddb49c34d8c", "patch": "@@ -127,6 +127,10 @@ call_ ## FUNC (void)\t\t\t\t\t\\\n # define HIDDEN_DTOR_LIST_END\n #endif\n \n+#if !defined(USE_TM_CLONE_REGISTRY) && defined(OBJECT_FORMAT_ELF)\n+# define USE_TM_CLONE_REGISTRY 1\n+#endif\n+\n /* We do not want to add the weak attribute to the declarations of these\n    routines in unwind-dw2-fde.h because that will cause the definition of\n    these symbols to be weak as well.\n@@ -163,6 +167,10 @@ extern void __do_global_ctors_1 (void);\n /* Likewise for _Jv_RegisterClasses.  */\n extern void _Jv_RegisterClasses (void *) TARGET_ATTRIBUTE_WEAK;\n \n+/* Likewise for transactional memory clone tables.  */\n+extern void _ITM_registerTMCloneTable (void *, size_t) TARGET_ATTRIBUTE_WEAK;\n+extern void _ITM_deregisterTMCloneTable (void *) TARGET_ATTRIBUTE_WEAK;\n+\n #ifdef OBJECT_FORMAT_ELF\n \n /*  Declare a pointer to void function type.  */\n@@ -242,6 +250,13 @@ STATIC void *__JCR_LIST__[]\n   = { };\n #endif /* JCR_SECTION_NAME */\n \n+#if USE_TM_CLONE_REGISTRY\n+STATIC func_ptr __TMC_LIST__[]\n+  __attribute__((unused, section(\".tm_clone_table\"), aligned(sizeof(void*))))\n+  = { };\n+extern func_ptr __TMC_END__[] __attribute__((__visibility__ (\"hidden\")));\n+#endif /* USE_TM_CLONE_REGISTRY */\n+\n #if defined(INIT_SECTION_ASM_OP) || defined(INIT_ARRAY_SECTION_ASM_OP)\n \n #ifdef OBJECT_FORMAT_ELF\n@@ -331,6 +346,16 @@ __do_global_dtors_aux (void)\n   }\n #endif /* !defined(FINI_ARRAY_SECTION_ASM_OP) */\n \n+#if USE_TM_CLONE_REGISTRY\n+  if (__TMC_END__ - __TMC_LIST__ > 0)\n+    {\n+      void (*deregister_clones) (void *) = _ITM_deregisterTMCloneTable;\n+      __asm (\"\" : \"+r\" (deregister_clones));\n+      if (deregister_clones)\n+\tderegister_clones (__TMC_LIST__);\n+    }\n+#endif /* USE_TM_CLONE_REGISTRY */\n+\n #ifdef USE_EH_FRAME_REGISTRY\n #ifdef CRT_GET_RFIB_DATA\n   /* If we used the new __register_frame_info_bases interface,\n@@ -362,7 +387,9 @@ __do_global_dtors_aux_1 (void)\n CRT_CALL_STATIC_FUNCTION (INIT_SECTION_ASM_OP, __do_global_dtors_aux_1)\n #endif\n \n-#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) \\\n+    || defined(JCR_SECTION_NAME) \\\n+    || defined(USE_TM_CLONE_REGISTRY)\n /* Stick a call to __register_frame_info into the .init section.  For some\n    reason calls with no arguments work more reliably in .init, so stick the\n    call in another function.  */\n@@ -383,6 +410,7 @@ frame_dummy (void)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif /* CRT_GET_RFIB_DATA */\n #endif /* USE_EH_FRAME_REGISTRY */\n+\n #ifdef JCR_SECTION_NAME\n   if (__JCR_LIST__[0])\n     {\n@@ -392,6 +420,19 @@ frame_dummy (void)\n \tregister_classes (__JCR_LIST__);\n     }\n #endif /* JCR_SECTION_NAME */\n+\n+#if USE_TM_CLONE_REGISTRY\n+  if (__TMC_END__ - __TMC_LIST__ > 0)\n+    {\n+      void (*register_clones) (void *, size_t) = _ITM_registerTMCloneTable;\n+      __asm (\"\" : \"+r\" (register_clones));\n+      if (register_clones)\n+\t{\n+\t  size_t size = (size_t)(__TMC_END__ - __TMC_LIST__) / 2;\n+\t  _ITM_registerTMCloneTable (__TMC_LIST__, size);\n+\t}\n+    }\n+#endif /* USE_TM_CLONE_REGISTRY */\n }\n \n #ifdef INIT_SECTION_ASM_OP\n@@ -401,7 +442,7 @@ static func_ptr __frame_dummy_init_array_entry[]\n   __attribute__ ((__used__, section(\".init_array\")))\n   = { frame_dummy };\n #endif /* !defined(INIT_SECTION_ASM_OP) */\n-#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME */\n+#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME || USE_TM_CLONE_REGISTRY */\n \n #else  /* OBJECT_FORMAT_ELF */\n \n@@ -458,13 +499,25 @@ __do_global_dtors (void)\n   for (p = __DTOR_LIST__ + 1; (f = *p); p++)\n     f ();\n \n+#if USE_TM_CLONE_REGISTRY\n+  if (__TMC_END__ - __TMC_LIST__ > 0)\n+    {\n+      void (*deregister_clones) (void *) = _ITM_deregisterTMCloneTable;\n+      __asm (\"\" : \"+r\" (deregister_clones));\n+      if (deregister_clones)\n+\tderegister_clones (__TMC_LIST__);\n+    }\n+#endif /* USE_TM_CLONE_REGISTRY */\n+\n #ifdef USE_EH_FRAME_REGISTRY\n   if (__deregister_frame_info)\n     __deregister_frame_info (__EH_FRAME_BEGIN__);\n #endif\n }\n \n-#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) \\\n+    || defined(JCR_SECTION_NAME) \\\n+    || defined(USE_TM_CLONE_REGISTRY)\n /* A helper function for __do_global_ctors, which is in crtend.o.  Here\n    in crtbegin.o, we can reference a couple of symbols not visible there.\n    Plus, since we're before libgcc.a, we have no problems referencing\n@@ -477,6 +530,7 @@ __do_global_ctors_1(void)\n   if (__register_frame_info)\n     __register_frame_info (__EH_FRAME_BEGIN__, &object);\n #endif\n+\n #ifdef JCR_SECTION_NAME\n   if (__JCR_LIST__[0])\n     {\n@@ -486,8 +540,21 @@ __do_global_ctors_1(void)\n \tregister_classes (__JCR_LIST__);\n     }\n #endif\n+\n+#if USE_TM_CLONE_REGISTRY\n+  if (__TMC_END__ - __TMC_LIST__ > 0)\n+    {\n+      void (*register_clones) (void *, size_t) = _ITM_registerTMCloneTable;\n+      __asm (\"\" : \"+r\" (register_clones));\n+      if (register_clones)\n+\t{\n+\t  size_t size = (size_t)(__TMC_END__ - __TMC_LIST__) / 2;\n+\t  register_clones (__TMC_LIST__, size);\n+\t}\n+    }\n+#endif /* USE_TM_CLONE_REGISTRY */\n }\n-#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME */\n+#endif /* USE_EH_FRAME_REGISTRY || JCR_SECTION_NAME || USE_TM_CLONE_REGISTRY */\n \n #else /* ! INIT_SECTION_ASM_OP && ! HAS_INIT_SECTION */\n #error \"What are you doing with crtstuff.c, then?\"\n@@ -571,6 +638,13 @@ STATIC void *__JCR_END__[1]\n    = { 0 };\n #endif /* JCR_SECTION_NAME */\n \n+#if USE_TM_CLONE_REGISTRY\n+func_ptr __TMC_END__[]\n+  __attribute__((unused, section(\".tm_clone_table\"), aligned(sizeof(void *)),\n+\t\t __visibility__ (\"hidden\")))\n+  = { };\n+#endif /* USE_TM_CLONE_REGISTRY */\n+\n #ifdef INIT_ARRAY_SECTION_ASM_OP\n \n /* If we are using .init_array, there is nothing to do.  */\n@@ -635,7 +709,9 @@ void\n __do_global_ctors (void)\n {\n   func_ptr *p;\n-#if defined(USE_EH_FRAME_REGISTRY) || defined(JCR_SECTION_NAME)\n+#if defined(USE_EH_FRAME_REGISTRY) \\\n+    || defined(JCR_SECTION_NAME) \\\n+    || defined(USE_TM_CLONE_REGISTRY)\n   __do_global_ctors_1();\n #endif\n   for (p = __CTOR_END__ - 1; *p != (func_ptr) -1; p--)"}]}