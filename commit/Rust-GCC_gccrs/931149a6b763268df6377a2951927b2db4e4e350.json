{"sha": "931149a6b763268df6377a2951927b2db4e4e350", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTMxMTQ5YTZiNzYzMjY4ZGY2Mzc3YTI5NTE5MjdiMmRiNGU0ZTM1MA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-04-07T22:05:52Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2008-04-07T22:05:52Z"}, "message": "PR fortran/25829 28655\n\n2008-04-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR fortran/25829 28655\n\t* io/open.c (edit_modes): Set flags.async. (new_unit) Set flags.async\n\tand flags.status. (st_open): Initialize flags.async.\n\t* io/list_read.c (read_charactor): Use delim_status instead of\n\tflags.delim.\n\t* io/read.c (read_x): Use pad_status instead of flags.pad.\n\t* io/inquire.c (inquire_via_unit): Add new checks.\n\t(inquire_via_filename): Likewise.\n\t* io/io.h (st_parameter_inquire): Add new flags.\n\t(st_parameter_dt): Likewise.\n\t* io/unit.c (get_internal_unit): Set flags.async. (init_units): Set\n\tflags.async.\n\t* io/transfer.c: Add delim and pad option arrays. (read_sf): Use\n\tpad_status instead of flags.pad. (read_block): Likewise.\n\t(data_transfer_init): Set flags.async and add checks.\n\t* io/write.c (write_character): Use delim_status.\n\t(list_formatted_write_scalar): Likewise. (nml_write_obj): Likewise.\n\t(namelist_write): Likewise.\n\nFrom-SVN: r133988", "tree": {"sha": "90f2ab8b66ae1ee1e784d7a98a26d4d171ee74df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90f2ab8b66ae1ee1e784d7a98a26d4d171ee74df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/931149a6b763268df6377a2951927b2db4e4e350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931149a6b763268df6377a2951927b2db4e4e350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/931149a6b763268df6377a2951927b2db4e4e350", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/931149a6b763268df6377a2951927b2db4e4e350/comments", "author": null, "committer": null, "parents": [{"sha": "c2b58ba219a15e6ecac98559942d72433d0574ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2b58ba219a15e6ecac98559942d72433d0574ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2b58ba219a15e6ecac98559942d72433d0574ae"}], "stats": {"total": 286, "additions": 255, "deletions": 31}, "files": [{"sha": "631d1ac43f1155ca6a7cf0bbbe8229115d5f56ca", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -1,3 +1,24 @@\n+2008-04-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR fortran/25829 28655\n+\t* io/open.c (edit_modes): Set flags.async. (new_unit) Set flags.async\n+\tand flags.status. (st_open): Initialize flags.async.\n+\t* io/list_read.c (read_charactor): Use delim_status instead of\n+\tflags.delim.\n+\t* io/read.c (read_x): Use pad_status instead of flags.pad.\n+\t* io/inquire.c (inquire_via_unit): Add new checks.\n+\t(inquire_via_filename): Likewise.\n+\t* io/io.h (st_parameter_inquire): Add new flags.\n+\t(st_parameter_dt): Likewise.\n+\t* io/unit.c (get_internal_unit): Set flags.async. (init_units): Set\n+\tflags.async.\n+\t* io/transfer.c: Add delim and pad option arrays. (read_sf): Use\n+\tpad_status instead of flags.pad. (read_block): Likewise.\n+\t(data_transfer_init): Set flags.async and add checks.\n+\t* io/write.c (write_character): Use delim_status.\n+\t(list_formatted_write_scalar): Likewise. (nml_write_obj): Likewise.\n+\t(namelist_write): Likewise.\n+\n 2008-04-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/25829 28655"}, {"sha": "5e0cf3e646c3a5d1f75b848c2bd41e1aea82d63f", "filename": "libgfortran/io/inquire.c", "status": "modified", "additions": 162, "deletions": 3, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Finquire.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Finquire.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Finquire.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -43,6 +43,7 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n {\n   const char *p;\n   GFC_INTEGER_4 cf = iqp->common.flags;\n+  GFC_INTEGER_4 cf2 = iqp->flags2;\n \n   if ((cf & IOPARM_INQUIRE_HAS_EXIST) != 0)\n     {\n@@ -213,7 +214,7 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n \n   if ((cf & IOPARM_INQUIRE_HAS_BLANK) != 0)\n     {\n-      if (u == NULL)\n+      if (u == NULL || u->flags.form != FORM_FORMATTED)\n \tp = undefined;\n       else\n \tswitch (u->flags.blank)\n@@ -231,6 +232,148 @@ inquire_via_unit (st_parameter_inquire *iqp, gfc_unit * u)\n       cf_strcpy (iqp->blank, iqp->blank_len, p);\n     }\n \n+  if ((cf & IOPARM_INQUIRE_HAS_PAD) != 0)\n+    {\n+      if (u == NULL || u->flags.form != FORM_FORMATTED)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.pad)\n+\t  {\n+\t  case PAD_YES:\n+\t    p = \"YES\";\n+\t    break;\n+\t  case PAD_NO:\n+\t    p = \"NO\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad pad\");\n+\t  }\n+\n+      cf_strcpy (iqp->pad, iqp->pad_len, p);\n+    }\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_PENDING) != 0)\n+    *iqp->pending = 0;\n+  \n+  if ((cf2 & IOPARM_INQUIRE_HAS_ID) != 0)\n+    *iqp->id = 0;\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_ENCODING) != 0)\n+    {\n+      if (u == NULL || u->flags.form != FORM_FORMATTED)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.encoding)\n+\t  {\n+\t  case ENCODING_DEFAULT:\n+\t    p = \"UNKNOWN\";\n+\t    break;\n+\t  /* TODO: Enable UTF-8 case here when implemented.\n+\t  case ENCODING_UTF8:\n+\t    p = \"UTF-8\";\n+\t    break; */\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad encoding\");\n+\t  }\n+\n+      cf_strcpy (iqp->encoding, iqp->encoding_len, p);\n+    }\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_DECIMAL) != 0)\n+    {\n+      if (u == NULL || u->flags.form != FORM_FORMATTED)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.decimal)\n+\t  {\n+\t  case DECIMAL_POINT:\n+\t    p = \"POINT\";\n+\t    break;\n+\t  case DECIMAL_COMMA:\n+\t    p = \"COMMA\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad comma\");\n+\t  }\n+\n+      cf_strcpy (iqp->decimal, iqp->decimal_len, p);\n+    }\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_ASYNCHRONOUS) != 0)\n+    {\n+      if (u == NULL)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.async)\n+\t  {\n+\t  case ASYNC_YES:\n+\t    p = \"YES\";\n+\t    break;\n+\t  case ASYNC_NO:\n+\t    p = \"NO\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad async\");\n+\t  }\n+\n+      cf_strcpy (iqp->asynchronous, iqp->asynchronous_len, p);\n+    }\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_SIGN) != 0)\n+    {\n+      if (u == NULL)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.sign)\n+\t  {\n+\t  case SIGN_PROCDEFINED:\n+\t    p = \"PROCESSOR_DEFINED\";\n+\t    break;\n+\t  case SIGN_SUPPRESS:\n+\t    p = \"SUPPRESS\";\n+\t    break;\n+\t  case SIGN_PLUS:\n+\t    p = \"PLUS\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad sign\");\n+\t  }\n+\n+      cf_strcpy (iqp->sign, iqp->sign_len, p);\n+    }\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_ROUND) != 0)\n+    {\n+      if (u == NULL)\n+\tp = undefined;\n+      else\n+\tswitch (u->flags.round)\n+\t  {\n+\t  case ROUND_UP:\n+\t    p = \"UP\";\n+\t    break;\n+\t  case ROUND_DOWN:\n+\t    p = \"DOWN\";\n+\t    break;\n+\t  case ROUND_ZERO:\n+\t    p = \"ZERO\";\n+\t    break;\n+\t  case ROUND_NEAREST:\n+\t    p = \"NEAREST\";\n+\t    break;\n+\t  case ROUND_COMPATIBLE:\n+\t    p = \"COMPATIBLE\";\n+\t    break;\n+\t  case ROUND_PROCDEFINED:\n+\t    p = \"PROCESSOR_DEFINED\";\n+\t    break;\n+\t  default:\n+\t    internal_error (&iqp->common, \"inquire_via_unit(): Bad round\");\n+\t  }\n+\n+      cf_strcpy (iqp->round, iqp->round_len, p);\n+    }\n+\n   if ((cf & IOPARM_INQUIRE_HAS_POSITION) != 0)\n     {\n       if (u == NULL || u->flags.access == ACCESS_DIRECT)\n@@ -380,6 +523,7 @@ inquire_via_filename (st_parameter_inquire *iqp)\n {\n   const char *p;\n   GFC_INTEGER_4 cf = iqp->common.flags;\n+  GFC_INTEGER_4 cf2 = iqp->flags2;\n \n   if ((cf & IOPARM_INQUIRE_HAS_EXIST) != 0)\n     *iqp->exist = file_exists (iqp->file, iqp->file_len);\n@@ -435,6 +579,18 @@ inquire_via_filename (st_parameter_inquire *iqp)\n   if ((cf & IOPARM_INQUIRE_HAS_BLANK) != 0)\n     cf_strcpy (iqp->blank, iqp->blank_len, undefined);\n \n+  if ((cf & IOPARM_INQUIRE_HAS_PAD) != 0)\n+    cf_strcpy (iqp->pad, iqp->pad_len, undefined);\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_ENCODING) != 0)\n+    cf_strcpy (iqp->encoding, iqp->encoding_len, undefined);\n+  \n+  if ((cf2 & IOPARM_INQUIRE_HAS_DELIM) != 0)\n+    cf_strcpy (iqp->delim, iqp->delim_len, undefined);\n+\n+  if ((cf2 & IOPARM_INQUIRE_HAS_DECIMAL) != 0)\n+    cf_strcpy (iqp->decimal, iqp->decimal_len, undefined);\n+\n   if ((cf & IOPARM_INQUIRE_HAS_POSITION) != 0)\n     cf_strcpy (iqp->position, iqp->position_len, undefined);\n \n@@ -459,11 +615,14 @@ inquire_via_filename (st_parameter_inquire *iqp)\n       cf_strcpy (iqp->readwrite, iqp->readwrite_len, p);\n     }\n \n-  if ((cf & IOPARM_INQUIRE_HAS_DELIM) != 0)\n+  if ((cf2 & IOPARM_INQUIRE_HAS_DELIM) != 0)\n     cf_strcpy (iqp->delim, iqp->delim_len, undefined);\n \n-  if ((cf & IOPARM_INQUIRE_HAS_PAD) != 0)\n+  if ((cf2 & IOPARM_INQUIRE_HAS_PAD) != 0)\n     cf_strcpy (iqp->pad, iqp->pad_len, undefined);\n+  \n+  if ((cf2 & IOPARM_INQUIRE_HAS_ENCODING) != 0)\n+    cf_strcpy (iqp->encoding, iqp->encoding_len, undefined);\n }\n \n "}, {"sha": "30d4051f126cce09b7f1a01f561096cc656b1685", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -235,7 +235,7 @@ typedef enum\n unit_mode;\n \n typedef enum\n-{ ASYNC_YES, ASYNC_NO, AYSYNC_UNSPECIFIED }\n+{ ASYNC_YES, ASYNC_NO, ASYNC_UNSPECIFIED }\n unit_async;\n \n #define CHARACTER1(name) \\\n@@ -342,13 +342,13 @@ typedef struct\n   CHARACTER1 (convert);\n   GFC_INTEGER_4 flags2;\n   CHARACTER1 (asynchronous);\n-  CHARACTER1 (decimal);\n+  CHARACTER2 (decimal);\n   CHARACTER1 (encoding);\n-  CHARACTER1 (pending);\n+  CHARACTER2 (pending);\n   CHARACTER1 (round);\n-  CHARACTER1 (sign);\n+  CHARACTER2 (sign);\n   GFC_INTEGER_4 *size;\n-  GFC_IO_INT id;\n+  GFC_INTEGER_4 *id;\n }\n st_parameter_inquire;\n \n@@ -409,6 +409,7 @@ typedef struct st_parameter_dt\n \t  int item_count;\n \t  unit_mode mode;\n \t  unit_blank blank_status;\n+          unit_pad pad_status;\n \t  enum { SIGN_S, SIGN_SS, SIGN_SP } sign_status;\n \t  int scale_factor;\n \t  int max_pos; /* Maximum righthand column written to.  */\n@@ -423,6 +424,7 @@ typedef struct st_parameter_dt\n \t  int sf_seen_eor;\n \t  unit_advance advance_status;\n \t  unit_decimal decimal_status;\n+          unit_delim delim_status;\n \n \t  unsigned reversion_flag : 1; /* Format reversion has occurred.  */\n \t  unsigned first_item : 1;"}, {"sha": "89c55c7c51bc3d48ddc68cce676e09ec57005463", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -943,8 +943,8 @@ read_character (st_parameter_dt *dtp, int length __attribute__ ((unused)))\n     default:\n       if (dtp->u.p.namelist_mode)\n \t{\n-\t  if (dtp->u.p.current_unit->flags.delim == DELIM_APOSTROPHE\n-\t      || dtp->u.p.current_unit->flags.delim == DELIM_QUOTE\n+\t  if (dtp->u.p.delim_status == DELIM_APOSTROPHE\n+\t      || dtp->u.p.delim_status == DELIM_QUOTE\n \t      || c == '&' || c == '$' || c == '/')\n \t    {\n \t      unget_char (dtp, c);"}, {"sha": "4e904d37df9443e3cd68442d8774899b4ab53576", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -254,6 +254,8 @@ edit_modes (st_parameter_open *opp, gfc_unit * u, unit_flags * flags)\n \tu->flags.decimal = flags->decimal;\n       if (flags->encoding != ENCODING_UNSPECIFIED)\n \tu->flags.encoding = flags->encoding;\n+      if (flags->async != ASYNC_UNSPECIFIED)\n+\tu->flags.async = flags->async;\n       if (flags->round != ROUND_UNSPECIFIED)\n \tu->flags.round = flags->round;\n       if (flags->sign != SIGN_UNSPECIFIED)\n@@ -317,6 +319,13 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n     flags->form = (flags->access == ACCESS_SEQUENTIAL)\n       ? FORM_FORMATTED : FORM_UNFORMATTED;\n \n+  if (flags->async == ASYNC_UNSPECIFIED)\n+    flags->async = ASYNC_NO;\n+\n+  if (flags->status == STATUS_UNSPECIFIED)\n+    flags->status = STATUS_UNKNOWN;\n+\n+  /* Checks.  */\n \n   if (flags->delim == DELIM_UNSPECIFIED)\n     flags->delim = DELIM_NONE;\n@@ -424,12 +433,6 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n    if (flags->position == POSITION_UNSPECIFIED)\n      flags->position = POSITION_ASIS;\n \n-\n-  if (flags->status == STATUS_UNSPECIFIED)\n-    flags->status = STATUS_UNKNOWN;\n-\n-  /* Checks.  */\n-\n   if (flags->access == ACCESS_DIRECT\n       && (opp->common.flags & IOPARM_OPEN_HAS_RECL_IN) == 0)\n     {\n@@ -739,6 +742,10 @@ st_open (st_parameter_open *opp)\n     find_option (&opp->common, opp->encoding, opp->encoding_len,\n \t\t encoding_opt, \"Bad ENCODING parameter in OPEN statement\");\n \n+  flags.async = !(cf & IOPARM_OPEN_HAS_ASYNCHRONOUS) ? ASYNC_UNSPECIFIED :\n+    find_option (&opp->common, opp->asynchronous, opp->asynchronous_len,\n+\t\t async_opt, \"Bad ASYNCHRONOUS parameter in OPEN statement\");\n+\n   flags.round = !(cf & IOPARM_OPEN_HAS_ROUND) ? ROUND_UNSPECIFIED :\n     find_option (&opp->common, opp->round, opp->round_len,\n \t\t round_opt, \"Bad ROUND parameter in OPEN statement\");"}, {"sha": "ce86ec00b8f8c0c42abb579ce2ac31565e7ddc90", "filename": "libgfortran/io/read.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fread.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -854,7 +854,7 @@ read_x (st_parameter_dt *dtp, int n)\n {\n   if (!is_stream_io (dtp))\n     {\n-      if ((dtp->u.p.current_unit->flags.pad == PAD_NO || is_internal_unit (dtp))\n+      if ((dtp->u.p.pad_status == PAD_NO || is_internal_unit (dtp))\n \t  && dtp->u.p.current_unit->bytes_left < n)\n \tn = dtp->u.p.current_unit->bytes_left;\n "}, {"sha": "8741758e61d023dc5cc77f7ec1468772cc6f9183", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -114,6 +114,19 @@ static const st_option blank_opt[] = {\n   {NULL, 0}\n };\n \n+static const st_option delim_opt[] = {\n+  {\"apostrophe\", DELIM_APOSTROPHE},\n+  {\"quote\", DELIM_QUOTE},\n+  {\"none\", DELIM_NONE},\n+  {NULL, 0}\n+};\n+\n+static const st_option pad_opt[] = {\n+  {\"yes\", PAD_YES},\n+  {\"no\", PAD_NO},\n+  {NULL, 0}\n+};\n+\n typedef enum\n { FORMATTED_SEQUENTIAL, UNFORMATTED_SEQUENTIAL,\n   FORMATTED_DIRECT, UNFORMATTED_DIRECT, FORMATTED_STREAM, UNFORMATTED_STREAM\n@@ -242,7 +255,7 @@ read_sf (st_parameter_dt *dtp, int *length, int no_error)\n \t  /* Without padding, terminate the I/O statement without assigning\n \t     the value.  With padding, the value still needs to be assigned,\n \t     so we can just continue with a short read.  */\n-\t  if (dtp->u.p.current_unit->flags.pad == PAD_NO)\n+\t  if (dtp->u.p.pad_status == PAD_NO)\n \t    {\n \t      if (no_error)\n \t\tbreak;\n@@ -320,7 +333,7 @@ read_block (st_parameter_dt *dtp, int *length)\n           dtp->u.p.current_unit->bytes_left = dtp->u.p.current_unit->recl;\n \t  else\n \t    {\n-\t      if (dtp->u.p.current_unit->flags.pad == PAD_NO)\n+\t      if (dtp->u.p.pad_status == PAD_NO)\n \t\t{\n \t\t  /* Not enough data left.  */\n \t\t  generate_error (&dtp->common, LIBERROR_EOR, NULL);\n@@ -358,7 +371,7 @@ read_block (st_parameter_dt *dtp, int *length)\n \n   if (nread != *length)\n     {\t\t\t\t/* Short read, this shouldn't happen.  */\n-      if (dtp->u.p.current_unit->flags.pad == PAD_YES)\n+      if (dtp->u.p.pad_status == PAD_YES)\n \t*length = nread;\n       else\n \t{\n@@ -1802,6 +1815,7 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n      u_flags.pad = PAD_UNSPECIFIED;\n      u_flags.decimal = DECIMAL_UNSPECIFIED;\n      u_flags.encoding = ENCODING_UNSPECIFIED;\n+     u_flags.async = ASYNC_UNSPECIFIED;\n      u_flags.round = ROUND_UNSPECIFIED;\n      u_flags.sign = SIGN_UNSPECIFIED;\n      u_flags.status = STATUS_UNKNOWN;\n@@ -2020,8 +2034,25 @@ data_transfer_init (st_parameter_dt *dtp, int read_flag)\n   \n   if (dtp->u.p.blank_status == BLANK_UNSPECIFIED)\n     dtp->u.p.blank_status = dtp->u.p.current_unit->flags.blank;\n+  \n+  /* Check the delim mode.  */\n+  dtp->u.p.delim_status\n+    = !(cf & IOPARM_DT_HAS_DELIM) ? DELIM_UNSPECIFIED :\n+      find_option (&dtp->common, dtp->delim, dtp->delim_len, delim_opt,\n+\t\t   \"Bad DELIM parameter in data transfer statement\");\n+  \n+  if (dtp->u.p.delim_status == DELIM_UNSPECIFIED)\n+    dtp->u.p.delim_status = dtp->u.p.current_unit->flags.delim;\n+\n+  /* Check the pad mode.  */\n+  dtp->u.p.pad_status\n+    = !(cf & IOPARM_DT_HAS_PAD) ? PAD_UNSPECIFIED :\n+      find_option (&dtp->common, dtp->pad, dtp->pad_len, pad_opt,\n+\t\t   \"Bad PAD parameter in data transfer statement\");\n+  \n+  if (dtp->u.p.pad_status == PAD_UNSPECIFIED)\n+    dtp->u.p.pad_status = dtp->u.p.current_unit->flags.pad;\n  \n-\n   /* Sanity checks on the record number.  */\n   if ((cf & IOPARM_DT_HAS_REC) != 0)\n     {"}, {"sha": "9f9e3513dab0cd4a0941c9ac3baa861dcdaef59c", "filename": "libgfortran/io/unit.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Funit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Funit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Funit.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -443,6 +443,7 @@ get_internal_unit (st_parameter_dt *dtp)\n   iunit->flags.sign = SIGN_SUPPRESS;\n   iunit->flags.decimal = DECIMAL_POINT;\n   iunit->flags.encoding = ENCODING_DEFAULT;\n+  iunit->flags.async = ASYNC_NO;\n \n   /* Initialize the data transfer parameters.  */\n \n@@ -531,7 +532,8 @@ init_units (void)\n       u->flags.sign = SIGN_SUPPRESS;\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n-\n+      u->flags.async = ASYNC_NO;\n+     \n       u->recl = options.default_recl;\n       u->endfile = NO_ENDFILE;\n \n@@ -557,6 +559,7 @@ init_units (void)\n       u->flags.sign = SIGN_SUPPRESS;\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n+      u->flags.async = ASYNC_NO;\n \n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;\n@@ -583,6 +586,7 @@ init_units (void)\n       u->flags.sign = SIGN_SUPPRESS;\n       u->flags.decimal = DECIMAL_POINT;\n       u->flags.encoding = ENCODING_DEFAULT;\n+      u->flags.async = ASYNC_NO;\n \n       u->recl = options.default_recl;\n       u->endfile = AT_ENDFILE;"}, {"sha": "ea8ad94b8ca9f9d43029cd528d52859bcc80858e", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/931149a6b763268df6377a2951927b2db4e4e350/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=931149a6b763268df6377a2951927b2db4e4e350", "patch": "@@ -640,7 +640,7 @@ write_character (st_parameter_dt *dtp, const char *source, int length)\n   int i, extra;\n   char *p, d;\n \n-  switch (dtp->u.p.current_unit->flags.delim)\n+  switch (dtp->u.p.delim_status)\n     {\n     case DELIM_APOSTROPHE:\n       d = '\\'';\n@@ -779,7 +779,7 @@ list_formatted_write_scalar (st_parameter_dt *dtp, bt type, void *p, int kind,\n   else\n     {\n       if (type != BT_CHARACTER || !dtp->u.p.char_flag ||\n-\t  dtp->u.p.current_unit->flags.delim != DELIM_NONE)\n+\t  dtp->u.p.delim_status != DELIM_NONE)\n \twrite_separator (dtp);\n     }\n \n@@ -994,13 +994,13 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n               break;\n \n \t    case GFC_DTYPE_CHARACTER:\n-\t      tmp_delim = dtp->u.p.current_unit->flags.delim;\n+\t      tmp_delim = dtp->u.p.delim_status;\n \t      if (dtp->u.p.nml_delim == '\"')\n-\t\tdtp->u.p.current_unit->flags.delim = DELIM_QUOTE;\n+\t\tdtp->u.p.delim_status = DELIM_QUOTE;\n \t      if (dtp->u.p.nml_delim == '\\'')\n-\t\tdtp->u.p.current_unit->flags.delim = DELIM_APOSTROPHE;\n+\t\tdtp->u.p.delim_status = DELIM_APOSTROPHE;\n \t      write_character (dtp, p, obj->string_length);\n-\t      dtp->u.p.current_unit->flags.delim = tmp_delim;\n+\t      dtp->u.p.delim_status = tmp_delim;\n               break;\n \n \t    case GFC_DTYPE_REAL:\n@@ -1141,7 +1141,7 @@ namelist_write (st_parameter_dt *dtp)\n \n   /* Set the delimiter for namelist output.  */\n \n-  tmp_delim = dtp->u.p.current_unit->flags.delim;\n+  tmp_delim = dtp->u.p.delim_status;\n   switch (tmp_delim)\n     {\n     case (DELIM_QUOTE):\n@@ -1158,7 +1158,7 @@ namelist_write (st_parameter_dt *dtp)\n     }\n \n   /* Temporarily disable namelist delimters.  */\n-  dtp->u.p.current_unit->flags.delim = DELIM_NONE;\n+  dtp->u.p.delim_status = DELIM_NONE;\n \n   write_character (dtp, \"&\", 1);\n \n@@ -1186,7 +1186,7 @@ namelist_write (st_parameter_dt *dtp)\n #endif\n \n   /* Restore the original delimiter.  */\n-  dtp->u.p.current_unit->flags.delim = tmp_delim;\n+  dtp->u.p.delim_status = tmp_delim;\n }\n \n #undef NML_DIGITS"}]}