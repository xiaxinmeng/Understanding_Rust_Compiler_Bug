{"sha": "1431042ef1f76baf550557885af9945aa76148e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQzMTA0MmVmMWY3NmJhZjU1MDU1Nzg4NWFmOTk0NWFhNzYxNDhlOA==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-30T19:19:06Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2004-03-30T19:19:06Z"}, "message": "gengtype.c (create_option): New function.\n\n\t* gengtype.c (create_option): New function.\n\t* gengtype.h: Prototype it.\n\t* gengtype-yacc.y (stringseq): New rule.\n\t(option): Use create_option.  Add new bare ID production.  Use\n\tstringseq, not STRING directly.\n\n\t* alias.c, bitmap.c, c-decl.c, cgraph.h, cpplib.h, cselib.h\n\t* dwarf2out.c, emit-rtl.c, function.h, lists.c, tree.h\n\t* varray.h, config/alpha/alpha.c, cp/name-lookup.c, cp/parser.c\n\t* f/com.c, java/builtins.c, java/expr.c, java/jcf.h, java/parse.h:\n\tUse new shorter form of GTY markers.\n\n\t* doc/gty.texi: Rewrite.\n\nFrom-SVN: r80091", "tree": {"sha": "eb5c785a332c675110a75f8bdba7609d72204214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb5c785a332c675110a75f8bdba7609d72204214"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1431042ef1f76baf550557885af9945aa76148e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1431042ef1f76baf550557885af9945aa76148e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1431042ef1f76baf550557885af9945aa76148e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1431042ef1f76baf550557885af9945aa76148e8/comments", "author": null, "committer": null, "parents": [{"sha": "9ffab06b25e310701c8fd82d2c65e265b49ba299", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ffab06b25e310701c8fd82d2c65e265b49ba299", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ffab06b25e310701c8fd82d2c65e265b49ba299"}], "stats": {"total": 486, "additions": 295, "deletions": 191}, "files": [{"sha": "7500a8c7311c2b139082d285edb85bc7d91dc0c5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -1,3 +1,18 @@\n+2004-03-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* gengtype.c (create_option): New function.\n+\t* gengtype.h: Prototype it.\n+\t* gengtype-yacc.y (stringseq): New rule.\n+\t(option): Use create_option.  Add new bare ID production.  Use\n+\tstringseq, not STRING directly.\n+\n+\t* alias.c, bitmap.c, c-decl.c, cgraph.h, cpplib.h, cselib.h\n+\t* dwarf2out.c, emit-rtl.c, function.h, lists.c, tree.h\n+\t* varray.h, config/alpha/alpha.c:\n+\tUse new shorter form of GTY markers.\n+\n+\t* doc/gty.texi: Rewrite.\n+\n 2004-03-30  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* config/darwin.c (machopic_function_base_name):\n@@ -16,27 +31,27 @@\n \n 2004-03-30  Hartmut Penner  <hpenner@de.ibm.com>\n \n-        * config/rs6000/rs6000.c (output_vec_const_move):\n-        Find all cases of EASY_VECTOR_15_ADD_SELF.\n-        (easy_vector_constant_add_self): Accept\n-        all vector constant loadable by vsplt* and vadd*.\n+\t* config/rs6000/rs6000.c (output_vec_const_move):\n+\tFind all cases of EASY_VECTOR_15_ADD_SELF.\n+\t(easy_vector_constant_add_self): Accept\n+\tall vector constant loadable by vsplt* and vadd*.\n \t(easy_vector_same): Use easy_vector_splat_const.\n \t(easy_vector_const): Use easy_vector_splat_const.\n-        (easy_vector_splat_const): New function.\n+\t(easy_vector_splat_const): New function.\n \t(gen_easy_vector_constant_add_self): New function.\n-\t\n+\n \t* config/rs6000/rs6000-protos.c (gen_easy_vector_constant_add_self):\n \tNew prototype.\n \n-        * config/rs6000/altivec.md (movv4si splitter): Change to\n+\t* config/rs6000/altivec.md (movv4si splitter): Change to\n \temit move insn with halfed vector constant.\n \t(*movv8hi splitter): Likewise.\n \t(*movv16qi splitter): Likewise.\n-    \t\n+\n 2004-03-30  Hartmut Penner  <hpenner@de.ibm.com>\n \n-\tPR 11591\t\n-\t* config/rs6000/rs6000.c (rs6000_legitimate_address): \n+\tPR 11591\n+\t* config/rs6000/rs6000.c (rs6000_legitimate_address):\n \tAllow any offset to argument pointer in no-strict case.\n \n 2004-03-30  Jan Hubicka  <jh@suse.cz>"}, {"sha": "46d1dca0168c5879b89e079e945293c97c6636f7", "filename": "gcc/alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -163,7 +163,7 @@ static rtx *new_reg_base_value;\n /* We preserve the copy of old array around to avoid amount of garbage\n    produced.  About 8% of garbage produced were attributed to this\n    array.  */\n-static GTY((deletable (\"\"))) varray_type old_reg_base_value;\n+static GTY((deletable)) varray_type old_reg_base_value;\n \n /* Static hunks of RTL used by the aliasing code; these are initialized\n    once per function to avoid unnecessary RTL allocations.  */"}, {"sha": "70e0a93d086f38d98b11f156bef4c98c8b21cc10", "filename": "gcc/bitmap.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -44,7 +44,7 @@ static int bitmap_obstack_init = FALSE;\n /* Global data */\n bitmap_element bitmap_zero_bits;\t/* An element of all zero bits.  */\n static bitmap_element *bitmap_free;\t/* Freelist of bitmap elements.  */\n-static GTY((deletable (\"\"))) bitmap_element *bitmap_ggc_free;\n+static GTY((deletable)) bitmap_element *bitmap_ggc_free;\n \n static void bitmap_elem_to_freelist (bitmap, bitmap_element *);\n static void bitmap_element_free (bitmap, bitmap_element *);"}, {"sha": "a2cd9cb5042beaf8f1c5b32abe8d92cbf62d945b", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -317,11 +317,11 @@ static GTY(()) struct c_scope *external_scope;\n \n /* A chain of c_scope structures awaiting reuse.  */\n \n-static GTY((deletable (\"\"))) struct c_scope *scope_freelist;\n+static GTY((deletable)) struct c_scope *scope_freelist;\n \n /* A chain of c_binding structures awaiting reuse.  */\n \n-static GTY((deletable (\"\"))) struct c_binding *binding_freelist;\n+static GTY((deletable)) struct c_binding *binding_freelist;\n \n /* Append VAR to LIST in scope SCOPE.  */\n #define SCOPE_LIST_APPEND(scope, list, decl) do {\t\\"}, {"sha": "adbac3b48e799b680c5018fbaa3c3c94e44c0786", "filename": "gcc/cgraph.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -97,7 +97,7 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   struct cgraph_node *next_nested;\n   /* Pointer to the next function in cgraph_nodes_queue.  */\n   struct cgraph_node *next_needed;\n-  PTR GTY ((skip (\"\"))) aux;\n+  PTR GTY ((skip)) aux;\n \n   struct cgraph_local_info local;\n   struct cgraph_global_info global;"}, {"sha": "b37b311d55f84cd2fecb8c82b069aca3ab39e078", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -3567,8 +3567,8 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n struct xfloating_op GTY(())\n {\n   const enum rtx_code code;\n-  const char *const GTY((skip(\"\"))) osf_func;\n-  const char *const GTY((skip(\"\"))) vms_func;\n+  const char *const GTY((skip)) osf_func;\n+  const char *const GTY((skip)) vms_func;\n   rtx libcall;\n };\n "}, {"sha": "6e3f71a1950156c52bdcf094aa75b563d73e6120", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -1,3 +1,7 @@\n+2004-03-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* name-lookup.c, parser.c: Use new shorter form of GTY markers.\n+\n 2004-03-29  Zack Weinberg  <zack@codesourcery.com>\n \n \t* error.c (dump_function_name): If T's DECL_LANG_SPECIFIC"}, {"sha": "612a7c171e7df475476ef3f818b2e3a7f032347d", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -61,7 +61,7 @@ GTY(()) tree anonymous_namespace_name;\n \n /* A free list of \"binding_entry\"s awaiting for re-use.  */\n \n-static GTY((deletable(\"\"))) binding_entry free_binding_entry = NULL;\n+static GTY((deletable)) binding_entry free_binding_entry = NULL;\n \n /* Create a binding_entry object for (NAME, TYPE).  */\n \n@@ -317,7 +317,7 @@ binding_table_foreach (binding_table table, bt_foreach_proc proc, void *data)\n \n /* A free list of \"cxx_binding\"s, connected by their PREVIOUS.  */\n \n-static GTY((deletable (\"\"))) cxx_binding *free_bindings;\n+static GTY((deletable)) cxx_binding *free_bindings;\n \n /* Zero out a cxx_binding pointed to by B.  */\n #define cxx_binding_clear(B) memset ((B), 0, sizeof (cxx_binding))\n@@ -1232,7 +1232,7 @@ namespace_scope_ht_size (tree ns)\n \n /* A chain of binding_level structures awaiting reuse.  */\n \n-static GTY((deletable (\"\"))) struct cp_binding_level *free_binding_level;\n+static GTY((deletable)) struct cp_binding_level *free_binding_level;\n \n /* Create a new KIND scope and make it the top of the active scopes stack.\n    ENTITY is the scope of the associated C++ entity (namespace, class,"}, {"sha": "a7f49e0fa12c05cb9ce1b60c4b4f64b6608b34d9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -167,19 +167,19 @@ typedef struct cp_lexer GTY (())\n   /* The memory allocated for the buffer.  Never NULL.  */\n   cp_token * GTY ((length (\"(%h.buffer_end - %h.buffer)\"))) buffer;\n   /* A pointer just past the end of the memory allocated for the buffer.  */\n-  cp_token * GTY ((skip (\"\"))) buffer_end;\n+  cp_token * GTY ((skip)) buffer_end;\n   /* The first valid token in the buffer, or NULL if none.  */\n-  cp_token * GTY ((skip (\"\"))) first_token;\n+  cp_token * GTY ((skip)) first_token;\n   /* The next available token.  If NEXT_TOKEN is NULL, then there are\n      no more available tokens.  */\n-  cp_token * GTY ((skip (\"\"))) next_token;\n+  cp_token * GTY ((skip)) next_token;\n   /* A pointer just past the last available token.  If FIRST_TOKEN is\n      NULL, however, there are no available tokens, and then this\n      location is simply the place in which the next token read will be\n      placed.  If LAST_TOKEN == FIRST_TOKEN, then the buffer is full.\n      When the LAST_TOKEN == BUFFER, then the last token is at the\n      highest memory address in the BUFFER.  */\n-  cp_token * GTY ((skip (\"\"))) last_token;\n+  cp_token * GTY ((skip)) last_token;\n \n   /* A stack indicating positions at which cp_lexer_save_tokens was\n      called.  The top entry is the most recent position at which we\n@@ -1126,7 +1126,7 @@ static cp_parser_context *cp_parser_context_new\n \n /* Class variables.  */\n \n-static GTY((deletable (\"\"))) cp_parser_context* cp_parser_context_free_list;\n+static GTY((deletable)) cp_parser_context* cp_parser_context_free_list;\n \n /* Constructors and destructors.  */\n "}, {"sha": "905ca5d5e0e55c2ad40eaa006a1439a342a42ec3", "filename": "gcc/cpplib.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -508,9 +508,9 @@ struct cpp_hashnode GTY(())\n   union _cpp_hashnode_value\n   {\n     /* If a macro.  */\n-    cpp_macro * GTY((skip (\"\"))) macro;\n+    cpp_macro * GTY((skip)) macro;\n     /* Answers to an assertion.  */\n-    struct answer * GTY ((skip (\"\"))) answers;\n+    struct answer * GTY ((skip)) answers;\n     /* Code for a builtin macro.  */\n     enum builtin_type GTY ((tag (\"1\"))) builtin;\n     /* Macro argument index.  */"}, {"sha": "1efbaa7b22483eaf95371a62c73dfd4a8d839ac1", "filename": "gcc/cselib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -29,7 +29,7 @@ typedef struct cselib_val_struct GTY(())\n     /* A VALUE rtx that points back to this structure.  */\n     rtx GTY ((tag (\"1\"))) val_rtx;\n     /* Used to keep a list of free cselib_val structures.  */\n-    struct cselib_val_struct * GTY ((skip (\"\"))) next_free;\n+    struct cselib_val_struct * GTY ((skip)) next_free;\n   } GTY ((desc (\"1\"))) u;\n \n   /* All rtl expressions that hold this value at the current time during a"}, {"sha": "05d9b9e6699df4fa9850b9a1704552d2b788031b", "filename": "gcc/doc/gty.texi", "status": "modified", "additions": 173, "deletions": 111, "changes": 284, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fdoc%2Fgty.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fdoc%2Fgty.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgty.texi?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -13,37 +13,26 @@ involve determining information about GCC's data structures from GCC's\n source code and using this information to perform garbage collection and\n implement precompiled headers.\n \n-A full C parser would be too overcomplicated for this task, so a limited\n+A full C parser would be too complicated for this task, so a limited\n subset of C is interpreted and special markers are used to determine\n-what parts of the source to look at.  The parser can also detect\n-simple typedefs of the form @code{typedef struct ID1 *ID2;} and\n-@code{typedef int ID3;}, and these don't need to be specially marked.\n-\n-The two forms that do need to be marked are:\n-@verbatim\n-struct ID1 GTY(([options]))\n-{\n-  [fields]\n-};\n-\n-typedef struct ID2 GTY(([options]))\n-{\n-  [fields]\n-} ID3;\n-@end verbatim\n-\n-@menu\n-* GTY Options::\t\tWhat goes inside a @code{GTY(())}.\n-* GGC Roots::\t\tMaking global variables GGC roots.\n-* Files::\t\tHow the generated files work.\n-@end menu\n-\n-@node GTY Options\n-@section The Inside of a @code{GTY(())}\n+what parts of the source to look at.  All @code{struct} and\n+@code{union} declarations that define data structures that are\n+allocated under control of the garbage collector must be marked.  All\n+global variables that hold pointers to garbage-collected memory must\n+also be marked.  Finally, all global variables that need to be saved\n+and restored by a precompiled header must be marked.  (The precompiled\n+header mechanism can only save static variables if they're scalar.\n+Complex data structures must be allocated in garbage-collected memory\n+to be saved in a precompiled header.)\n+\n+The full format of a marker is\n+@smallexample\n+GTY (([@var{option}] [(@var{param})], [@var{option}] [(@var{param})] @dots{}))\n+@end smallexample\n+@noindent\n+but in most cases no options are needed.  The outer double parentheses\n+are still necessary, though: @code{GTY(())}.  Markers can appear:\n \n-Sometimes the C code is not enough to fully describe the type structure.\n-Extra information can be provided by using more @code{GTY} markers.\n-These markers can be placed:\n @itemize @bullet\n @item\n In a structure definition, before the open brace;\n@@ -54,46 +43,104 @@ In a global variable declaration, after the keyword @code{static} or\n In a structure field definition, before the name of the field.\n @end itemize\n \n-The format of a marker is\n-@verbatim\n-GTY (([name] ([param]), [name] ([param]) ...))\n-@end verbatim\n-The parameter is either a string or a type name.\n+Here are some examples of marking simple data structures and globals.\n+\n+@smallexample\n+struct @var{tag} GTY(())\n+@{\n+  @var{fields}@dots{}\n+@};\n+\n+typedef struct @var{tag} GTY(())\n+@{\n+  @var{fields}@dots{}\n+@} *@var{typename};\n+\n+static GTY(()) struct @var{tag} *@var{list};   /* @r{points to GC memory} */\n+static GTY(()) int @var{counter};        /* @r{save counter in a PCH} */\n+@end smallexample\n+\n+The parser understands simple typedefs such as\n+@code{typedef struct @var{tag} *@var{name};} and \n+@code{typedef int @var{name};}.\n+These don't need to be marked.\n+\n+@menu\n+* GTY Options::\t\tWhat goes inside a @code{GTY(())}.\n+* GGC Roots::\t\tMaking global variables GGC roots.\n+* Files::\t\tHow the generated files work.\n+@end menu\n+\n+@node GTY Options\n+@section The Inside of a @code{GTY(())}\n+\n+Sometimes the C code is not enough to fully describe the type\n+structure.  Extra information can be provided with @code{GTY} options\n+and additional markers.  Some options take a parameter, which may be\n+either a string or a type name, depending on the parameter.  If an\n+option takes no parameter, it is acceptable either to omit the\n+parameter entirely, or to provide an empty string as a parameter.  For\n+example, @code{@w{GTY ((skip))}} and @code{@w{GTY ((skip (\"\")))}} are\n+equivalent.\n \n-When the parameter is a string, often it is a fragment of C code.  Three\n-special escapes may be available:\n+When the parameter is a string, often it is a fragment of C code.  Four\n+special escapes may be used in these strings, to refer to pieces of\n+the data structure being marked:\n \n @cindex % in GTY option\n @table @code\n @item %h\n-This expands to an expression that evaluates to the current structure.\n+The current structure.\n @item %1\n-This expands to an expression that evaluates to the structure that\n-immediately contains the current structure.\n+The structure that immediately contains the current structure.\n @item %0\n-This expands to an expression that evaluates to the outermost structure\n-that contains the current structure.\n+The outermost structure that contains the current structure.\n @item %a\n-This expands to the string of the form @code{[i1][i2]...} that indexes\n-the array item currently being marked.  For instance, if the field\n-being marked is @code{foo}, then @code{%1.foo%a} is the same as @code{%h}.\n+A partial expression of the form @code{[i1][i2]...} that indexes\n+the array item currently being marked.\n @end table\n \n+For instance, suppose that you have a structure of the form\n+@smallexample\n+struct A @{\n+  ...\n+@};\n+struct B @{\n+  struct A foo[12];\n+@};\n+@end smallexample\n+@noindent\n+and @code{b} is a variable of type @code{struct B}.  When marking\n+@samp{b.foo[11]}, @code{%h} would expand to @samp{b.foo[11]},\n+@code{%0} and @code{%1} would both expand to @samp{b}, and @code{%a}\n+would expand to @samp{[11]}.\n+\n+As in ordinary C, adjacent strings will be concatenated; this is\n+helpful when you have a complicated expression.\n+@smallexample\n+@group\n+GTY ((chain_next (\"TREE_CODE (&%h.generic) == INTEGER_TYPE\"\n+                  \" ? TYPE_NEXT_VARIANT (&%h.generic)\"\n+                  \" : TREE_CHAIN (&%h.generic)\")))\n+@end group\n+@end smallexample\n+\n The available options are:\n \n @table @code\n @findex length\n-@item length\n+@item length (\"@var{expression}\")\n \n There are two places the type machinery will need to be explicitly told\n the length of an array.  The first case is when a structure ends in a\n variable-length array, like this:\n-@verbatim\n-struct rtvec_def GTY(()) {\n-  int num_elem;\t\t/* number of elements */\n+@smallexample\n+struct rtvec_def GTY(()) @{\n+  int num_elem;\t\t/* @r{number of elements} */\n   rtx GTY ((length (\"%h.num_elem\"))) elem[1];\n-};\n-@end verbatim\n+@};\n+@end smallexample\n+\n In this case, the @code{length} option is used to override the specified\n array length (which should usually be @code{1}).  The parameter of the\n option is a fragment of C code that calculates the length.\n@@ -127,8 +174,8 @@ field really isn't ever used.\n @findex desc\n @findex tag\n @findex default\n-@item desc\n-@itemx tag\n+@item desc (\"@var{expression}\")\n+@itemx tag (\"@var{constant}\")\n @itemx default\n \n The type machinery needs to be told which field of a @code{union} is\n@@ -141,8 +188,8 @@ there is one, otherwise no field in the union will be marked.\n \n In the @code{desc} option, the ``current structure'' is the union that\n it discriminates.  Use @code{%1} to mean the structure containing it.\n-(There are no escapes available to the @code{tag} option, since it's\n-supposed to be a constant.)\n+There are no escapes available to the @code{tag} option, since it is a\n+constant.\n \n For example,\n @smallexample\n@@ -164,7 +211,7 @@ will treat the field @code{scope} as being present.\n \n @findex param_is\n @findex use_param\n-@item param_is\n+@item param_is (@var{type})\n @itemx use_param\n \n Sometimes it's convenient to define some data structure to work on\n@@ -173,14 +220,23 @@ type.  @code{param_is} specifies the real type pointed to, and\n @code{use_param} says where in the generic data structure that type\n should be put.\n \n-For instance, to have a @code{htab_t} that points to trees, one should write\n-@verbatim\n+For instance, to have a @code{htab_t} that points to trees, one would\n+write the definition of @code{htab_t} like this:\n+@smallexample\n+typedef struct GTY(()) @{\n+  @dots{}\n+  void ** GTY ((use_param, @dots{})) entries;\n+  @dots{}\n+@} htab_t;\n+@end smallexample\n+and then declare variables like this:\n+@smallexample\n   htab_t GTY ((param_is (union tree_node))) ict;\n-@end verbatim\n+@end smallexample\n \n @findex param@var{n}_is\n @findex use_param@var{n}\n-@item param@var{n}_is\n+@item param@var{n}_is (@var{type})\n @itemx use_param@var{n}\n \n In more complicated cases, the data structure might need to work on\n@@ -210,7 +266,7 @@ by this variable, it can just be set to @code{NULL} instead.  This is used\n to keep a list of free structures around for re-use.\n \n @findex if_marked\n-@item if_marked\n+@item if_marked (\"@var{expression}\")\n \n Suppose you want some kinds of object to be unique, and so you put them\n in a hash table.  If garbage collection marks the hash table, these\n@@ -237,43 +293,46 @@ language frontends.\n \n @findex chain_next\n @findex chain_prev\n-@item chain_next\n-@itemx chain_prev\n+@item chain_next (\"@var{expression}\")\n+@itemx chain_prev (\"@var{expression}\")\n \n It's helpful for the type machinery to know if objects are often\n chained together in long lists; this lets it generate code that uses\n less stack space by iterating along the list instead of recursing down\n it.  @code{chain_next} is an expression for the next item in the list,\n-@code{chain_prev} is an expression for the previous item.  The\n-machinery requires that taking the next item of the previous item\n-gives the original item.\n+@code{chain_prev} is an expression for the previous item.  For singly\n+linked lists, use only @code{chain_next}; for doubly linked lists, use\n+both.  The machinery requires that taking the next item of the\n+previous item gives the original item.\n \n @findex reorder\n-@item reorder\n+@item reorder (\"@var{function name}\")\n \n Some data structures depend on the relative ordering of pointers.  If\n-the type machinery needs to change that ordering, it will call the\n-function referenced by the @code{reorder} option, before changing the\n-pointers in the object that's pointed to by the field the option\n-applies to.  The function must be of the type @code{void ()(void *,\n-void *, gt_pointer_operator, void *)}.  The second parameter is the\n-pointed-to object; the third parameter is a routine that, given a\n-pointer, can update it to its new value.  The fourth parameter is a\n-cookie to be passed to the third parameter.  The first parameter is\n-the structure that contains the object, or the object itself if it is\n-a structure.\n-\n-No data structure may depend on the absolute value of pointers.  Even\n-relying on relative orderings and using @code{reorder} functions can\n-be expensive.  It is better to depend on properties of the data, like\n-an ID number or the hash of a string instead.\n+the precompiled header machinery needs to change that ordering, it\n+will call the function referenced by the @code{reorder} option, before\n+changing the pointers in the object that's pointed to by the field the\n+option applies to.  The function must take four arguments, with the\n+signature @samp{@w{void *, void *, gt_pointer_operator, void *}}.\n+The first parameter is a pointer to the structure that contains the\n+object being updated, or the object itself if there is no containing\n+structure.  The second parameter is a cookie that should be ignored.\n+The third parameter is a routine that, given a pointer, will update it\n+to its correct new value.  The fourth parameter is a cookie that must\n+be passed to the second parameter.\n+\n+PCH cannot handle data structures that depend on the absolute values\n+of pointers.  @code{reorder} functions can be expensive.  When\n+possible, it is better to depend on properties of the data, like an ID\n+number or the hash of a string instead.\n \n @findex special\n-@item special\n-\n-The @code{special} option is used for those bizarre cases that are just\n-too hard to deal with otherwise.  Don't use it for new code.\n+@item special (\"@var{name}\")\n \n+The @code{special} option is used to mark types that have to be dealt\n+with by special case machinery.  The parameter is the name of the\n+special case.  See @file{gengtype.c} for further details.  Avoid\n+adding new special cases unless there is no other alternative.\n @end table\n \n @node GGC Roots\n@@ -282,36 +341,40 @@ too hard to deal with otherwise.  Don't use it for new code.\n @cindex marking roots\n \n In addition to keeping track of types, the type machinery also locates\n-the global variables that the garbage collector starts at.  There are\n-two syntaxes it accepts to indicate a root:\n+the global variables (@dfn{roots}) that the garbage collector starts\n+at.  Roots must be declared using one of the following syntaxes:\n \n-@enumerate\n+@itemize @bullet\n @item\n-@verb{|extern GTY (([options])) [type] ID;|}\n+@code{extern GTY(([@var{options}])) @var{type} @var{name};}\n @item\n-@verb{|static GTY (([options])) [type] ID;|}\n-@end enumerate\n-\n-These are the only syntaxes that are accepted.  In particular, if you\n-want to mark a variable that is only declared as\n-@verbatim\n-int ID;\n-@end verbatim\n-or similar, you should either make it @code{static} or you should create\n-a @code{extern} declaration in a header file somewhere.\n+@code{static GTY(([@var{options}])) @var{type} @var{name};}\n+@end itemize\n+@noindent\n+The syntax\n+@itemize @bullet\n+@item\n+@code{GTY(([@var{options}])) @var{type} @var{name};}\n+@end itemize\n+@noindent\n+is @emph{not} accepted.  There should be an @code{extern} declaration\n+of such a variable in a header somewhere---mark that, not the\n+definition.  Or, if the variable is only used in one file, make it\n+@code{static}.\n \n @node Files\n @section Source Files Containing Type Information\n @cindex generated files\n @cindex files, generated\n \n-Whenever you add @code{GTY} markers to a new source file, there are three\n-things you need to do:\n+Whenever you add @code{GTY} markers to a source file that previously\n+had none, or create a new source file containing @code{GTY} markers,\n+there are three things you need to do:\n \n @enumerate\n @item\n You need to add the file to the list of source files the type\n-machinery scans.  There are three cases:\n+machinery scans.  There are four cases:\n \n @enumerate a\n @item\n@@ -320,19 +383,18 @@ automatically; if not, you should add it to @code{target_gtfiles} in\n the appropriate port's entries in @file{config.gcc}.\n \n @item\n-For files shared by all front ends, this is done by adding the\n-filename to the @code{GTFILES} variable in @file{Makefile.in}.\n+For files shared by all front ends, add the filename to the\n+@code{GTFILES} variable in @file{Makefile.in}.\n \n @item\n-For any other file used by a front end, this is done by adding the\n-filename to the @code{gtfiles} variable defined in\n+For files that are part of one front end, add the filename to the\n+@code{gtfiles} variable defined in the appropriate\n @file{config-lang.in}.  For C, the file is @file{c-config-lang.in}.\n-This list should include all files that have GTY macros in them that\n-are used in that front end, other than those defined in the previous\n-list items.  For example, it is common for front end writers to use\n-@file{c-common.c} and other files from the C front end, and these\n-should be included in the @file{gtfiles} variable for such front ends.\n \n+@item\n+For files that are part of some but not all front ends, add the\n+filename to the @code{gtfiles} variable of @emph{all} the front ends\n+that use it.\n @end enumerate\n \n @item"}, {"sha": "9181546052f8100b2174a5da731c3c38f2eb0301", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -2419,7 +2419,7 @@ typedef struct dw_val_struct GTY(())\n       unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_offset\"))) val_offset;\n       dw_loc_list_ref GTY ((tag (\"dw_val_class_loc_list\"))) val_loc_list;\n       dw_loc_descr_ref GTY ((tag (\"dw_val_class_loc\"))) val_loc;\n-      HOST_WIDE_INT GTY ((default (\"\"))) val_int;\n+      HOST_WIDE_INT GTY ((default)) val_int;\n       unsigned HOST_WIDE_INT GTY ((tag (\"dw_val_class_unsigned_const\"))) val_unsigned;\n       dw_long_long_const GTY ((tag (\"dw_val_class_long_long\"))) val_long_long;\n       dw_vec_const GTY ((tag (\"dw_val_class_vec\"))) val_vec;"}, {"sha": "399bf2310baaf08571d98cab4223520a03a16803", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -4751,7 +4751,7 @@ emit (rtx x)\n }\n \f\n /* Space for free sequence stack entries.  */\n-static GTY ((deletable (\"\"))) struct sequence_stack *free_sequence_stack;\n+static GTY ((deletable)) struct sequence_stack *free_sequence_stack;\n \n /* Begin emitting insns to a sequence which can be packaged in an\n    RTL_EXPR.  If this sequence will contain something that might cause\n@@ -5483,7 +5483,7 @@ emit_copy_of_insn_after (rtx insn, rtx after)\n   return new;\n }\n \n-static GTY((deletable(\"\"))) rtx hard_reg_clobbers [NUM_MACHINE_MODES][FIRST_PSEUDO_REGISTER];\n+static GTY((deletable)) rtx hard_reg_clobbers [NUM_MACHINE_MODES][FIRST_PSEUDO_REGISTER];\n rtx\n gen_hard_reg_clobber (enum machine_mode mode, unsigned int regno)\n {"}, {"sha": "c2eefad81cddd8057988d0acf91519779545f71d", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -1,3 +1,7 @@\n+2004-03-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* com.c: Use new shorter form of GTY markers.\n+\n 2004-03-21  Joseph S. Myers  <jsm@polyomino.org.uk>\n \n \t* g77.texi: Update link to \"G++ and GCC\".\n@@ -13,12 +17,12 @@\n \tftp://alpha.gnu.org/gnu/g77/projects/.\n \t(Trouble): Remove obsolete paragraph including a broken link to\n \tftp://alpha.gnu.org/g77.plan.\n-\t\n+\n \t* invoke.texi (Overall Options): Remove broken reference to\n \trat7.uue (which was of dubious copyright status anyways).\n \n \t* root.texi (www-burley): Fix URL.\n-\t\n+\n 2004-02-29  Roger Sayle  <roger@eyesopen.com>\n \n \t* parse.c (ffe_parse_file): Handle the case that main_input_filename\n@@ -61,7 +65,7 @@\n \n 2004-01-30  Kelley Cook  <kcook@gcc.gnu.org>\n \n-\t* Make-lang.in (doc/g77.dvi): Use $(abs_docdir). \n+\t* Make-lang.in (doc/g77.dvi): Use $(abs_docdir).\n \n 2004-01-28  Ian Lance Taylor  <ian@wasabisystems.com>\n "}, {"sha": "e81d844d156de40b9a7a337e478ed46088d37239", "filename": "gcc/f/com.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -558,7 +558,7 @@ static GTY(()) struct f_binding_level *current_binding_level;\n \n /* A chain of binding_level structures awaiting reuse.  */\n \n-static GTY((deletable (\"\"))) struct f_binding_level *free_binding_level;\n+static GTY((deletable)) struct f_binding_level *free_binding_level;\n \n /* The outermost binding level, for names of file scope.\n    This is created when the compiler is started and exists"}, {"sha": "c61944a51f43a8b4107124f999839a4b443434d8", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -377,7 +377,7 @@ struct function GTY(())\n   /* For md files.  */\n \n   /* tm.h can use this to store whatever it likes.  */\n-  struct machine_function * GTY ((maybe_undef (\"\"))) machine;\n+  struct machine_function * GTY ((maybe_undef)) machine;\n   /* The largest alignment of slot allocated on the stack.  */\n   int stack_alignment_needed;\n   /* Preferred alignment of the end of stack frame.  */"}, {"sha": "18b65f14c5cf7c6e3602db8b1268a541f50577a4", "filename": "gcc/gengtype-yacc.y", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype-yacc.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype-yacc.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype-yacc.y?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -57,7 +57,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n %type <p> struct_fields yacc_ids yacc_typematch\n %type <t> type lasttype\n %type <o> optionsopt options option optionseq optionseqopt\n-%type <s> type_option\n+%type <s> type_option stringseq\n \n %%\n \n@@ -268,21 +268,12 @@ type_option : ALIAS\n \t        { $$ = $1; }\n \t      ;\n \n-option:\ttype_option '(' type ')'\n-\t   {\n-\t     options_p o = xmalloc (sizeof (*o));\n-\t     o->name = $1;\n-\t     o->info = adjust_field_type ($3, NULL);\n-\t     $$ = o;\n-\t   }\n-\t| ID '(' STRING ')'\n-\t   {\n-\t     options_p o = xmalloc (sizeof (*o));\n-\t     o->name = $1;\n-\t     o->info = (void *)$3;\n-\t     $$ = o;\n-\t   }\n-\t;\n+option:   ID\n+\t    { $$ = create_option ($1, (void *)\"\"); }\n+        | ID '(' stringseq ')'\n+            { $$ = create_option ($1, (void *)$3); }\n+\t| type_option '(' type ')'\n+\t    { $$ = create_option ($1, adjust_field_type ($3, NULL)); }\n \n optionseq: option\n \t      {\n@@ -299,4 +290,16 @@ optionseq: option\n optionseqopt: { $$ = NULL; }\n \t      | optionseq { $$ = $1; }\n \t      ;\n+\n+stringseq: STRING\n+\t     { $$ = $1; }\n+\t   | stringseq STRING\n+\t     {\n+\t       size_t l1 = strlen ($1);\n+\t       size_t l2 = strlen ($2);\n+\t       char *s = xrealloc ((char *)$1, l1 + l2 + 1);\n+\t       memcpy (s + l1, $2, l2 + 1);\n+\t       free ((void *)$2);\n+\t       $$ = s;\n+\t     }\n %%"}, {"sha": "1bad8e4e706909b54987fc6045012768bdfa3562", "filename": "gcc/gengtype.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -308,6 +308,16 @@ create_array (type_p t, const char *len)\n   return v;\n }\n \n+/* Return an options structure with name NAME and info INFO.  */\n+options_p\n+create_option (const char *name, void *info)\n+{\n+  options_p o = xmalloc (sizeof (*o));\n+  o->name = name;\n+  o->info = info;\n+  return o;\n+}\n+\n /* Add a variable named S of type T with options O defined at POS,\n    to `variables'.  */\n "}, {"sha": "55ece1150737ef91b837feb56f08e2c986fd286a", "filename": "gcc/gengtype.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -130,6 +130,7 @@ extern type_p find_structure (const char *s, int isunion);\n extern type_p create_scalar_type (const char *name, size_t name_len);\n extern type_p create_pointer (type_p t);\n extern type_p create_array (type_p t, const char *len);\n+extern options_p create_option (const char *name, void *info);\n extern type_p adjust_field_type (type_p, options_p);\n extern void note_variable (const char *s, type_p t, options_p o,\n \t\t\t   struct fileloc *pos);"}, {"sha": "3843f9d2ab1581e60a1300f899a7a97d285a9768", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -1,3 +1,8 @@\n+2004-03-30  Zack Weinberg  <zack@codesourcery.com>\n+\n+\t* builtins.c, expr.c, jcf.h, parse.h: Use new shorter\n+\tform of GTY markers.\n+\n 2004-03-25  Marcus Meissner  <meissner@suse.de>\n \n \tPR java/14689:\n@@ -38,7 +43,7 @@\n \t* lang.c (java_handle_option):  Handle new options.\n \t* parse.y (build_incomplete_class_ref):  Handle class$ in an inner\n \tclass in an interface - create helper class nested in outer interface.\n-        (build_assertion):  Short-circuit if enable_assertions is false.\n+\t(build_assertion):  Short-circuit if enable_assertions is false.\n \n 2004-03-18  Richard Kenner <kenner@vlsi1.ultra.nyu.edu>\n \n@@ -93,7 +98,7 @@\n \t!METHOD_INVISIBLE (iface_method).\n \t* class.c (layout_class_methods): Check for CLASS_INTERFACE as\n \twell as CLASS_ABSTRACT.\n-\t\n+\n 2004-02-25  Per Bothner  <per@bothner.com>\n \n \t* parse.y (build_assertion):  If we're in an inner class, create the\n@@ -176,7 +181,7 @@\n \n 2004-01-30  Kelley Cook  <kcook@gcc.gnu.org>\n \n-\t* Make-lang.in (doc/gcj.dvi): Use $(abs_docdir). \n+\t* Make-lang.in (doc/gcj.dvi): Use $(abs_docdir).\n \n 2004-01-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n@@ -204,11 +209,11 @@\n \t* Make-lang.in: Replace $(docdir) with doc.\n \t(java.info, java.srcinfo, java.man, java.srcman): New rules.\n \t(java.install-man): Revamp rule.\n-\t\n+\n 2004-01-20  Kelley Cook  <kcook@gcc.gnu.org>\n \n-\t* Make-lang.in (JAVA_INSTALL_NAME, JAVA_TARGET_INSTALL_NAME, \n-\tGCJH_TARGET_INSTALL_NAME): Define via a immediate $(shell) \n+\t* Make-lang.in (JAVA_INSTALL_NAME, JAVA_TARGET_INSTALL_NAME,\n+\tGCJH_TARGET_INSTALL_NAME): Define via a immediate $(shell)\n \tinstead of deferred backquote.\n \n 2004-01-16  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -264,7 +269,7 @@\n \tusing indirect dis[atch.\n \t(java_decl_ok_for_sibcall): Use output_class, not current_class.\n \t(java_get_callee_fndecl): Use class local atable.\n-\t* jcf-parse.c \n+\t* jcf-parse.c\n \t(always_initialize_class_p): Decl moved to java-tree.h.\n \t(HANDLE_CLASS_INFO): Set output_class.\n \t(read_class): Likewise.\n@@ -312,13 +317,13 @@\n \tMake otable, atable, and ctable class local rather than global.\n \t(emit_catch_table): Make otable, atable, and ctable class local\n \trather than global.\n-\t\t\n+\n 2003-12-25  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* parse.y (catch_clause_parameter): Fix typo.\n \n \tPR java/13404\n-\t* parse.y: (catch_clause_parameter): Return early if $3, aka \n+\t* parse.y: (catch_clause_parameter): Return early if $3, aka\n \tformal_parameter, is null.\n \n 2003-12-20  Kazu Hirata  <kazu@cs.umass.edu>"}, {"sha": "563bd8daad29e2d467ea155d9fd948747590ed4c", "filename": "gcc/java/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fbuiltins.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -65,7 +65,7 @@ struct builtin_record GTY(())\n {\n   union string_or_tree GTY ((desc (\"1\"))) class_name;\n   union string_or_tree GTY ((desc (\"1\"))) method_name;\n-  builtin_creator_function * GTY((skip (\"\"))) creator;\n+  builtin_creator_function * GTY((skip)) creator;\n   enum built_in_function builtin_code;\n };\n "}, {"sha": "95c3b69d7d9b7e5d8b8d2ea267f9059c433619e4", "filename": "gcc/java/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -126,7 +126,7 @@ int always_initialize_class_p;\n static GTY(()) tree quick_stack;\n \n /* A free-list of unused permanent TREE_LIST nodes.  */\n-static GTY((deletable (\"\"))) tree tree_list_free_list;\n+static GTY((deletable)) tree tree_list_free_list;\n \n /* The stack pointer of the Java virtual machine.\n    This does include the size of the quick_stack. */"}, {"sha": "27e0761cf7de2e3e50e35bfac9a0fd3a8beb838d", "filename": "gcc/java/jcf.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fjcf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fjcf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -102,19 +102,19 @@ struct ZipDirectory;\n /* JCF encapsulates the state of reading a Java Class File. */\n \n typedef struct JCF GTY(()) {\n-  unsigned char * GTY ((skip (\"\"))) buffer;\n-  unsigned char * GTY ((skip (\"\"))) buffer_end;\n-  unsigned char * GTY ((skip (\"\"))) read_ptr;\n-  unsigned char * GTY ((skip (\"\"))) read_end;\n+  unsigned char * GTY ((skip)) buffer;\n+  unsigned char * GTY ((skip)) buffer_end;\n+  unsigned char * GTY ((skip)) read_ptr;\n+  unsigned char * GTY ((skip)) read_end;\n   int java_source : 1;\n   int right_zip : 1;\n   int finished : 1;\n   jcf_filbuf_t filbuf;\n-  PTR GTY ((skip (\"\"))) read_state;\n+  PTR GTY ((skip)) read_state;\n   const char *filename;\n   const char *classname;\n   /* Directory entry where it was found.  */\n-  struct ZipDirectory * GTY ((skip (\"\"))) zipd;\n+  struct ZipDirectory * GTY ((skip)) zipd;\n   JCF_u2 access_flags;\n   JCF_u2 this_class;\n   JCF_u2 super_class;"}, {"sha": "bedf70624d23acbfadef2a18bca78c7e1b75fc0e", "filename": "gcc/java/parse.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fparse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fjava%2Fparse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -728,18 +728,18 @@ struct parser_ctxt GTY(()) {\n   const char *filename;\t\t    /* Current filename */\n   struct parser_ctxt *next;\n \n-  java_lexer * GTY((skip (\"\"))) lexer; /* Current lexer state */\n+  java_lexer * GTY((skip)) lexer; /* Current lexer state */\n   char marker_begining;\t\t     /* Marker. Should be a sub-struct */\n-  struct java_line * GTY ((skip (\"\"))) p_line; /* Previous line */\n-  struct java_line * GTY ((skip (\"\"))) c_line; /* Current line */\n+  struct java_line * GTY ((skip)) p_line; /* Previous line */\n+  struct java_line * GTY ((skip)) c_line; /* Current line */\n   java_lc elc;\t\t\t     /* Error's line column info */\n   int ccb_indent;\t\t     /* Keep track of {} indent, lexer */\n   int first_ccb_indent1;\t     /* First { at ident level 1 */\n   int last_ccb_indent1;\t\t     /* Last } at ident level 1 */\n   int parser_ccb_indent;\t     /* Keep track of {} indent, parser */\n   int osb_depth;\t\t     /* Current depth of [ in an expression */\n   int osb_limit;\t\t     /* Limit of this depth */\n-  int * GTY ((skip (\"\"))) osb_number; /* Keep track of ['s */\n+  int * GTY ((skip)) osb_number; /* Keep track of ['s */\n   int lineno;\t\t\t     /* Current lineno */\n   char marker_end;\t\t     /* End marker. Should be a sub-struct */\n \n@@ -774,7 +774,7 @@ struct parser_ctxt GTY(()) {\n \n   /* These two lists won't survive file traversal */\n   tree  class_list;\t\t    /* List of classes in a CU */\n-  jdeplist * GTY((skip (\"\"))) classd_list; /* Classe dependencies in a CU */\n+  jdeplist * GTY((skip)) classd_list; /* Classe dependencies in a CU */\n   \n   tree  current_parsed_class;\t    /* Class currently parsed */\n   tree  current_parsed_class_un;    /* Curr. parsed class unqualified name */"}, {"sha": "c36e8cf3e5177b253bbaa388b2e54e0c09af33ec", "filename": "gcc/lists.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Flists.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Flists.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flists.c?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -32,10 +32,10 @@ static void free_list (rtx *, rtx *);\n /* Functions for maintaining cache-able lists of EXPR_LIST and INSN_LISTs.  */\n \n /* An INSN_LIST containing all INSN_LISTs allocated but currently unused.  */\n-static GTY ((deletable (\"\"))) rtx unused_insn_list;\n+static GTY ((deletable)) rtx unused_insn_list;\n \n /* An EXPR_LIST containing all EXPR_LISTs allocated but currently unused.  */\n-static GTY ((deletable (\"\"))) rtx unused_expr_list;\n+static GTY ((deletable)) rtx unused_expr_list;\n \n \n /* This function will free an entire list of either EXPR_LIST or INSN_LIST"}, {"sha": "8af963fd4c7e9b78bf66152dd12bd4a5205ddf40", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -1831,7 +1831,7 @@ struct tree_decl GTY(())\n       unsigned int align : 24;\n       unsigned int off_align : 8;\n     } a;\n-  } GTY ((skip (\"\"))) u1;\n+  } GTY ((skip)) u1;\n \n   tree size_unit;\n   tree name;"}, {"sha": "57a3711bb22c68370e8e57d54cb74dd46d3f8706", "filename": "gcc/varray.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fvarray.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1431042ef1f76baf550557885af9945aa76148e8/gcc%2Fvarray.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarray.h?ref=1431042ef1f76baf550557885af9945aa76148e8", "patch": "@@ -106,7 +106,7 @@ typedef union varray_data_tag GTY (()) {\n \t\t\t\ttag (\"VARRAY_DATA_HINT\")))\thint[1];\n   unsigned HOST_WIDE_INT  GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_UHINT\")))\tuhint[1];\n-  PTR\t\t\t  GTY ((length (\"%0.num_elements\"), use_param (\"\"),\n+  PTR\t\t\t  GTY ((length (\"%0.num_elements\"), use_param,\n \t\t\t\ttag (\"VARRAY_DATA_GENERIC\")))\tgeneric[1];\n   char\t\t\t *GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_CPTR\")))\tcptr[1];\n@@ -118,11 +118,11 @@ typedef union varray_data_tag GTY (()) {\n \t\t\t\ttag (\"VARRAY_DATA_TREE\")))\ttree[1];\n   struct bitmap_head_def *GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_BITMAP\")))\tbitmap[1];\n-  struct reg_info_def\t *GTY ((length (\"%0.num_elements\"), skip (\"\"),\n+  struct reg_info_def\t *GTY ((length (\"%0.num_elements\"), skip,\n \t\t\t\ttag (\"VARRAY_DATA_REG\")))\treg[1];\n   struct const_equiv_data GTY ((length (\"%0.num_elements\"),\n \t\t\ttag (\"VARRAY_DATA_CONST_EQUIV\")))\tconst_equiv[1];\n-  struct basic_block_def *GTY ((length (\"%0.num_elements\"), skip (\"\"),\n+  struct basic_block_def *GTY ((length (\"%0.num_elements\"), skip,\n \t\t\t\ttag (\"VARRAY_DATA_BB\")))\tbb[1];\n   struct elt_list\t *GTY ((length (\"%0.num_elements\"),\n \t\t\t\ttag (\"VARRAY_DATA_TE\")))\tte[1];"}]}