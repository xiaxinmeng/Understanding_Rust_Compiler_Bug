{"sha": "18697a1de7710088982537008b244a80361cc4e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg2OTdhMWRlNzcxMDA4ODk4MjUzNzAwOGIyNDRhODAzNjFjYzRlMA==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-12-07T23:16:03Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-12-07T23:16:03Z"}, "message": "sync config/* from binutils\n\n\t* elf.m4: Revert 2016-06-21 change.\n\t* picflag.m4: Likewise.  Revert 2016-04-30 change too.\n\t* override.m4 (AC_PROG_LEX): Import 2016-01-18 binutils fix\n\tfor PR binutils/19481.\n\nFrom-SVN: r243417", "tree": {"sha": "db1f66d84f1ca559fe6981e963e1b15ade36db0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db1f66d84f1ca559fe6981e963e1b15ade36db0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18697a1de7710088982537008b244a80361cc4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18697a1de7710088982537008b244a80361cc4e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18697a1de7710088982537008b244a80361cc4e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18697a1de7710088982537008b244a80361cc4e0/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "352f824f094c380befd7755a331defda5f1edf7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/352f824f094c380befd7755a331defda5f1edf7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/352f824f094c380befd7755a331defda5f1edf7f"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "35ddacf6d78a2fe8c7899c62cc58334eb6cf0807", "filename": "config/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18697a1de7710088982537008b244a80361cc4e0/config%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18697a1de7710088982537008b244a80361cc4e0/config%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2FChangeLog?ref=18697a1de7710088982537008b244a80361cc4e0", "patch": "@@ -1,3 +1,10 @@\n+2016-12-08  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf.m4: Revert 2016-06-21 change.\n+\t* picflag.m4: Likewise.  Revert 2016-04-30 change too.\n+\t* override.m4 (AC_PROG_LEX): Import 2016-01-18 binutils fix\n+\tfor PR binutils/19481.\n+\n 2016-12-02  Maxim Ostapenko  <m.ostapenko@samsung.com>\n \n \t* bootstrap-asan.mk: Replace LSAN_OPTIONS=detect_leaks=0 with"}, {"sha": "1772a44318e817ea6917e584e7121ea6dd174bc9", "filename": "config/elf.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18697a1de7710088982537008b244a80361cc4e0/config%2Felf.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18697a1de7710088982537008b244a80361cc4e0/config%2Felf.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Felf.m4?ref=18697a1de7710088982537008b244a80361cc4e0", "patch": "@@ -17,7 +17,7 @@ target_elf=no\n case $target in\n   *-darwin* | *-aix* | *-cygwin* | *-mingw* | *-aout* | *-*coff* | \\\n   *-msdosdjgpp* | *-vms* | *-wince* | *-*-pe* | \\\n-  alpha*-dec-osf* | hppa[[12]]*-*-hpux* | \\\n+  alpha*-dec-osf* | *-interix* | hppa[[12]]*-*-hpux* | \\\n   nvptx-*-none)\n     target_elf=no\n     ;;"}, {"sha": "b5ce6545ab69bb0b7bbfc0cc528b4eabad971111", "filename": "config/override.m4", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18697a1de7710088982537008b244a80361cc4e0/config%2Foverride.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18697a1de7710088982537008b244a80361cc4e0/config%2Foverride.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Foverride.m4?ref=18697a1de7710088982537008b244a80361cc4e0", "patch": "@@ -101,4 +101,16 @@ m4_define([_AC_CHECK_DECLS],\n \n ])\n \n+dnl If flex/lex are not found, the top level configure sets LEX to\n+dnl \"/path_to/missing flex\".  When AC_PROG_LEX tries to find the flex\n+dnl output file, it calls $LEX to do so, but the current lightweight\n+dnl \"missing\" won't create a file.  This results in an error.\n+dnl Avoid calling the bulk of AC_PROG_LEX when $LEX is \"missing\".\n+AC_DEFUN_ONCE([AC_PROG_LEX],\n+[AC_CHECK_PROGS(LEX, flex lex, :)\n+case \"$LEX\" in\n+  :|*\"missing \"*) ;;\n+  *) _AC_PROG_LEX_YYTEXT_DECL ;;\n+esac])\n+\n ])"}, {"sha": "2f5b9721eb2fa8f6058beb9a15585612df49bb13", "filename": "config/picflag.m4", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18697a1de7710088982537008b244a80361cc4e0/config%2Fpicflag.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18697a1de7710088982537008b244a80361cc4e0/config%2Fpicflag.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fpicflag.m4?ref=18697a1de7710088982537008b244a80361cc4e0", "patch": "@@ -27,6 +27,10 @@ case \"${$2}\" in\n \t;;\n     i[[34567]]86-*-mingw* | x86_64-*-mingw*)\n \t;;\n+    i[[34567]]86-*-interix[[3-9]]*)\n+\t# Interix 3.x gcc -fpic/-fPIC options generate broken code.\n+\t# Instead, we relocate shared libraries at runtime.\n+\t;;\n     i[[34567]]86-*-nto-qnx*)\n \t# QNX uses GNU C++, but need to define -shared option too, otherwise\n \t# it will coredump.\n@@ -57,7 +61,8 @@ case \"${$2}\" in\n \t$1=-fpic\n \t;;\n     # FIXME: Simplify to sh*-*-netbsd*?\n-    sh-*-netbsdelf* | shl*-*-netbsdelf*)\n+    sh-*-netbsdelf* | shl*-*-netbsdelf* | sh5-*-netbsd* | sh5l*-*-netbsd* | \\\n+      sh64-*-netbsd* | sh64l*-*-netbsd*)\n \t$1=-fpic\n \t;;\n     # Default to -fPIC unless specified otherwise."}]}