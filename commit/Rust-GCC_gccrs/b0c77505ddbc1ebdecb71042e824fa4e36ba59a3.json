{"sha": "b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBjNzc1MDVkZGJjMWViZGVjYjcxMDQyZTgyNGZhNGUzNmJhNTlhMw==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-11-16T12:40:05Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-11-16T12:40:05Z"}, "message": "Remove first_pass_instance from pass_vrp\n\n2015-11-16  Tom de Vries  <tom@codesourcery.com>\n\n\t* gdbhooks.py (class PassNames): Handle extra arg NEXT_PASS argument.\n\t* gen-pass-instances.awk (handle_line): Same.\n\t* pass_manager.h (class pass_manager): Define and undefine\n\tNEXT_PASS_WITH_ARG.\n\t* passes.c (opt_pass::set_pass_param): New function.\n\t(pass_manager::pass_manager): Define and undefine NEXT_PASS_WITH_ARG.\n\t* passes.def: Add extra arg to NEXT_PASS (pass_vrp).\n\t* tree-pass.h (gimple_opt::set_pass_param): Declare.\n\t* tree-vrp.c (vrp_finalize, execute_vrp): Add and handle\n\twarn_array_bounds_p parameter.\n\t(pass_vrp::pass_vrp): Initialize warn_array_bounds_p.\n\t(pass_vrp::set_pass_param): New function.\n\t(pass_vrp::execute): Add warn_array_bounds_p arg to execute_vrp call.\n\t(pass_vrp::warn_array_bounds_p): New private member.\n\nFrom-SVN: r230415", "tree": {"sha": "5829532adf2249c19f045548c3462a452fd512b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5829532adf2249c19f045548c3462a452fd512b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/comments", "author": null, "committer": null, "parents": [{"sha": "632b09212386db8c68978befb8dc0d2745988b7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/632b09212386db8c68978befb8dc0d2745988b7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/632b09212386db8c68978befb8dc0d2745988b7c"}], "stats": {"total": 88, "additions": 74, "deletions": 14}, "files": [{"sha": "e6e4fbee015417ff4c82c5aa763d6cfa01f0d1ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -1,3 +1,20 @@\n+2015-11-16  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gdbhooks.py (class PassNames): Handle extra arg NEXT_PASS argument.\n+\t* gen-pass-instances.awk (handle_line): Same.\n+\t* pass_manager.h (class pass_manager): Define and undefine\n+\tNEXT_PASS_WITH_ARG.\n+\t* passes.c (opt_pass::set_pass_param): New function.\n+\t(pass_manager::pass_manager): Define and undefine NEXT_PASS_WITH_ARG.\n+\t* passes.def: Add extra arg to NEXT_PASS (pass_vrp).\n+\t* tree-pass.h (gimple_opt::set_pass_param): Declare.\n+\t* tree-vrp.c (vrp_finalize, execute_vrp): Add and handle\n+\twarn_array_bounds_p parameter.\n+\t(pass_vrp::pass_vrp): Initialize warn_array_bounds_p.\n+\t(pass_vrp::set_pass_param): New function.\n+\t(pass_vrp::execute): Add warn_array_bounds_p arg to execute_vrp call.\n+\t(pass_vrp::warn_array_bounds_p): New private member.\n+\n 2015-11-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc.c (sparc_emit_probe_stack_range): Adjust."}, {"sha": "f920392b17f56b44a786ca1bcf90c0074209667f", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -537,7 +537,7 @@ def __init__(self):\n         self.names = []\n         with open(os.path.join(srcdir, 'passes.def')) as f:\n             for line in f:\n-                m = re.match('\\s*NEXT_PASS \\((.+)\\);', line)\n+                m = re.match('\\s*NEXT_PASS \\(([^,]+).*\\);', line)\n                 if m:\n                     self.names.append(m.group(1))\n "}, {"sha": "106a2f69a9e841c3eb5197d8ae7479824335508b", "filename": "gcc/gen-pass-instances.awk", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fgen-pass-instances.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fgen-pass-instances.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgen-pass-instances.awk?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -61,12 +61,14 @@ function handle_line()\n \tlen_of_args = len_of_call - (len_of_start + len_of_close);\n \targs_start_at = call_starts_at + len_of_start;\n \targs_str = substr(line, args_start_at, len_of_args);\n+\tsplit(args_str, args, \",\");\n \n-\t# Set pass_name argument\n-\tpass_name = args_str;\n+\t# Set pass_name argument, an optional with_arg argument\n+\tpass_name = args[1];\n+\twith_arg = args[2];\n \n-\t# Find call expression prefix (until and including called function)\n-\tlen_of_prefix = args_start_at - 1 - len_of_open;\n+\t# Find call expression prefix\n+\tlen_of_prefix = call_starts_at - 1;\n \tprefix = substr(line, 1, len_of_prefix);\n \n \t# Find call expression postfix\n@@ -82,7 +84,23 @@ function handle_line()\n \tpass_num = pass_counts[pass_name];\n \n \t# Print call expression with extra pass_num argument\n-\tprintf \"%s(%s, %s)%s\\n\", prefix, pass_name, pass_num, postfix;\n+\tprintf \"%s\", prefix;\n+\tif (with_arg)\n+\t{\n+\t\tprintf \"NEXT_PASS_WITH_ARG\";\n+\t}\n+\telse\n+\t{\n+\t\tprintf \"NEXT_PASS\";\n+\t}\n+\tprintf \" (\";\n+\tprintf \"%s\", pass_name;\n+\tprintf \", %s\", pass_num;\n+\tif (with_arg)\n+\t{\n+\t\tprintf \", %s\", with_arg;\n+\t}\n+\tprintf \")%s\\n\", postfix;\n }\n \n { handle_line() }"}, {"sha": "a8199e2f4138dca213933b89adff7d3992d3eac2", "filename": "gcc/pass_manager.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpass_manager.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpass_manager.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpass_manager.h?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -120,6 +120,7 @@ class pass_manager\n #define PUSH_INSERT_PASSES_WITHIN(PASS)\n #define POP_INSERT_PASSES()\n #define NEXT_PASS(PASS, NUM) opt_pass *PASS ## _ ## NUM\n+#define NEXT_PASS_WITH_ARG(PASS, NUM, ARG) NEXT_PASS (PASS, NUM)\n #define TERMINATE_PASS_LIST()\n \n #include \"pass-instances.def\"\n@@ -128,6 +129,7 @@ class pass_manager\n #undef PUSH_INSERT_PASSES_WITHIN\n #undef POP_INSERT_PASSES\n #undef NEXT_PASS\n+#undef NEXT_PASS_WITH_ARG\n #undef TERMINATE_PASS_LIST\n \n }; // class pass_manager"}, {"sha": "e634c5c7985a2ded85ce0a68aff289b2ab79f802", "filename": "gcc/passes.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -81,6 +81,13 @@ opt_pass::clone ()\n   internal_error (\"pass %s does not support cloning\", name);\n }\n \n+void\n+opt_pass::set_pass_param (unsigned int, bool)\n+{\n+  internal_error (\"pass %s needs a set_pass_param implementation to handle the\"\n+\t\t  \" extra argument in NEXT_PASS\", name);\n+}\n+\n bool\n opt_pass::gate (function *)\n {\n@@ -1572,6 +1579,12 @@ pass_manager::pass_manager (context *ctxt)\n     p = next_pass_1 (p, PASS ## _ ## NUM, PASS ## _1);  \\\n   } while (0)\n \n+#define NEXT_PASS_WITH_ARG(PASS, NUM, ARG)\t\t\\\n+    do {\t\t\t\t\t\t\\\n+      NEXT_PASS (PASS, NUM);\t\t\t\t\\\n+      PASS ## _ ## NUM->set_pass_param (0, ARG);\t\\\n+    } while (0)\n+\n #define TERMINATE_PASS_LIST() \\\n   *p = NULL;\n \n@@ -1581,6 +1594,7 @@ pass_manager::pass_manager (context *ctxt)\n #undef PUSH_INSERT_PASSES_WITHIN\n #undef POP_INSERT_PASSES\n #undef NEXT_PASS\n+#undef NEXT_PASS_WITH_ARG\n #undef TERMINATE_PASS_LIST\n \n   /* Register the passes with the tree dump code.  */"}, {"sha": "64c1fa109152ed46271888d2bb283aa00d684972", "filename": "gcc/passes.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -171,7 +171,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_return_slot);\n       NEXT_PASS (pass_fre);\n       NEXT_PASS (pass_merge_phi);\n-      NEXT_PASS (pass_vrp);\n+      NEXT_PASS (pass_vrp, true /* warn_array_bounds_p */);\n       NEXT_PASS (pass_chkp_opt);\n       NEXT_PASS (pass_dce);\n       NEXT_PASS (pass_stdarg);\n@@ -281,7 +281,7 @@ along with GCC; see the file COPYING3.  If not see\n       NEXT_PASS (pass_tracer);\n       NEXT_PASS (pass_dominator);\n       NEXT_PASS (pass_strlen);\n-      NEXT_PASS (pass_vrp);\n+      NEXT_PASS (pass_vrp, false /* warn_array_bounds_p */);\n       /* The only const/copy propagation opportunities left after\n \t DOM and VRP should be due to degenerate PHI nodes.  So rather than\n \t run the full propagators, run a specialized pass which"}, {"sha": "a672d528b0344b076c1e9898af83f0235663d876", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -83,6 +83,7 @@ class opt_pass : public pass_data\n \n      The default implementation prints an error message and aborts.  */\n   virtual opt_pass *clone ();\n+  virtual void set_pass_param (unsigned int, bool);\n \n   /* This pass and all sub-passes are executed only if the function returns\n      true.  The default implementation returns true.  */"}, {"sha": "5d085b42d458878eed6deffc982cd3ee52f87011", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0c77505ddbc1ebdecb71042e824fa4e36ba59a3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=b0c77505ddbc1ebdecb71042e824fa4e36ba59a3", "patch": "@@ -10183,7 +10183,7 @@ finalize_jump_threads (void)\n /* Traverse all the blocks folding conditionals with known ranges.  */\n \n static void\n-vrp_finalize (void)\n+vrp_finalize (bool warn_array_bounds_p)\n {\n   size_t i;\n \n@@ -10199,7 +10199,7 @@ vrp_finalize (void)\n   substitute_and_fold (op_with_constant_singleton_value_range,\n \t\t       vrp_fold_stmt, false);\n \n-  if (warn_array_bounds && first_pass_instance)\n+  if (warn_array_bounds && warn_array_bounds_p)\n     check_all_array_refs ();\n \n   /* We must identify jump threading opportunities before we release\n@@ -10289,7 +10289,7 @@ vrp_finalize (void)\n    probabilities to aid branch prediction.  */\n \n static unsigned int\n-execute_vrp (void)\n+execute_vrp (bool warn_array_bounds_p)\n {\n   int i;\n   edge e;\n@@ -10313,7 +10313,7 @@ execute_vrp (void)\n \n   vrp_initialize ();\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n-  vrp_finalize ();\n+  vrp_finalize (warn_array_bounds_p);\n \n   free_numbers_of_iterations_estimates (cfun);\n \n@@ -10386,14 +10386,22 @@ class pass_vrp : public gimple_opt_pass\n {\n public:\n   pass_vrp (gcc::context *ctxt)\n-    : gimple_opt_pass (pass_data_vrp, ctxt)\n+    : gimple_opt_pass (pass_data_vrp, ctxt), warn_array_bounds_p (false)\n   {}\n \n   /* opt_pass methods: */\n   opt_pass * clone () { return new pass_vrp (m_ctxt); }\n+  void set_pass_param (unsigned int n, bool param)\n+    {\n+      gcc_assert (n == 0);\n+      warn_array_bounds_p = param;\n+    }\n   virtual bool gate (function *) { return flag_tree_vrp != 0; }\n-  virtual unsigned int execute (function *) { return execute_vrp (); }\n+  virtual unsigned int execute (function *)\n+    { return execute_vrp (warn_array_bounds_p); }\n \n+ private:\n+  bool warn_array_bounds_p;\n }; // class pass_vrp\n \n } // anon namespace"}]}