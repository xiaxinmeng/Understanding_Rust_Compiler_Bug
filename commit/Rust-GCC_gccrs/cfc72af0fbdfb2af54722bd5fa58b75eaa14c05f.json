{"sha": "cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZjNzJhZjBmYmRmYjJhZjU0NzIyYmQ1ZmE1OGI3NWVhYTE0YzA1Zg==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2017-08-13T16:08:25Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2017-08-13T16:08:25Z"}, "message": "i386.md (*load_tp_<mode>): Redefine as define_insn_and_split.\n\n\t* config/i386/i386.md (*load_tp_<mode>): Redefine as\n\tdefine_insn_and_split.  Split to a memory load from 0 in\n\tDEFAULT_TLS_SEG_REG address space.  Merge with *load_tp_x32\n\tusing PTR mode iterator.\n\t(*load_tp_x32_zext\"): Redefine as define_insn_and_split.\n\tSplit to a memory load from 0 in DEFAULT_TLS_SEG_REG address space.\n\t(*add_tp_<mode>): Redefine as define_insn_and_split.\n\tSplit to an add with a memory load from 0 in DEFAULT_TLS_SEG_REG\n\taddress space.  Merge with *add_tp_x32 using PTR mode iterator.\n\t(*add_tp_x32_zext\"): Redefine as define_insn_and_split.\n\tSplit to an add with a  memory load from 0 in\n\tDEFAULT_TLS_SEG_REG address space.\n\nFrom-SVN: r251075", "tree": {"sha": "836393741f223a3d1919bae5f9ce938f980094a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/836393741f223a3d1919bae5f9ce938f980094a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "04c4bb307f8551f1f6c4ee693f37e2caf355a54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04c4bb307f8551f1f6c4ee693f37e2caf355a54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04c4bb307f8551f1f6c4ee693f37e2caf355a54d"}], "stats": {"total": 133, "additions": 72, "deletions": 61}, "files": [{"sha": "33a233f18df105465b60f69e48cd5219a46a3011", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "patch": "@@ -1,3 +1,18 @@\n+2017-08-13  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (*load_tp_<mode>): Redefine as\n+\tdefine_insn_and_split.  Split to a memory load from 0 in\n+\tDEFAULT_TLS_SEG_REG address space.  Merge with *load_tp_x32\n+\tusing PTR mode iterator.\n+\t(*load_tp_x32_zext\"): Redefine as define_insn_and_split.\n+\tSplit to a memory load from 0 in DEFAULT_TLS_SEG_REG address space.\n+\t(*add_tp_<mode>): Redefine as define_insn_and_split.\n+\tSplit to an add with a memory load from 0 in DEFAULT_TLS_SEG_REG\n+\taddress space.  Merge with *add_tp_x32 using PTR mode iterator.\n+\t(*add_tp_x32_zext\"): Redefine as define_insn_and_split.\n+\tSplit to an add with a  memory load from 0 in\n+\tDEFAULT_TLS_SEG_REG address space.\n+\n 2017-08-12  Andrew Pinski  <apinski@cavium.com>\n \n \t* config/aarch64/aarch64-option-extensions.def (rdma):"}, {"sha": "8cf6d21c82a77a38a22c5c5ac4da1b7ddd009069", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 57, "deletions": 61, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cfc72af0fbdfb2af54722bd5fa58b75eaa14c05f", "patch": "@@ -13773,82 +13773,78 @@\n       (clobber (match_dup 5))\n       (clobber (reg:CC FLAGS_REG))])])\n \n-;; Segment register for the thread base ptr load\n-(define_mode_attr tp_seg [(SI \"gs\") (DI \"fs\")])\n-\n ;; Load and add the thread base pointer from %<tp_seg>:0.\n-(define_insn \"*load_tp_x32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(unspec:SI [(const_int 0)] UNSPEC_TP))]\n-  \"TARGET_X32\"\n-  \"mov{l}\\t{%%fs:0, %0|%0, DWORD PTR fs:0}\"\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+(define_insn_and_split \"*load_tp_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+\t(unspec:PTR [(const_int 0)] UNSPEC_TP))]\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(match_dup 1))]\n+{\n+  addr_space_t as = DEFAULT_TLS_SEG_REG;\n \n-(define_insn \"*load_tp_x32_zext\"\n+  operands[1] = gen_const_mem (<MODE>mode, const0_rtx);\n+  set_mem_addr_space (operands[1], as);\n+})\n+\n+(define_insn_and_split \"*load_tp_x32_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (unspec:SI [(const_int 0)] UNSPEC_TP)))]\n+\t(zero_extend:DI\n+\t  (unspec:SI [(const_int 0)] UNSPEC_TP)))]\n   \"TARGET_X32\"\n-  \"mov{l}\\t{%%fs:0, %k0|%k0, DWORD PTR fs:0}\"\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 0)\n+\t(zero_extend:DI (match_dup 1)))]\n+{\n+  addr_space_t as = DEFAULT_TLS_SEG_REG;\n \n-(define_insn \"*load_tp_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(unspec:P [(const_int 0)] UNSPEC_TP))]\n-  \"!TARGET_X32\"\n-  \"mov{<imodesuffix>}\\t{%%<tp_seg>:0, %0|%0, <iptrsize> PTR <tp_seg>:0}\"\n-  [(set_attr \"type\" \"imov\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+  operands[1] = gen_const_mem (SImode, const0_rtx);\n+  set_mem_addr_space (operands[1], as);\n+})\n \n-(define_insn \"*add_tp_x32\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(plus:SI (unspec:SI [(const_int 0)] UNSPEC_TP)\n-\t\t (match_operand:SI 1 \"register_operand\" \"0\")))\n+(define_insn_and_split \"*add_tp_<mode>\"\n+  [(set (match_operand:PTR 0 \"register_operand\" \"=r\")\n+\t(plus:PTR\n+\t  (unspec:PTR [(const_int 0)] UNSPEC_TP)\n+\t  (match_operand:PTR 1 \"register_operand\" \"0\")))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_X32\"\n-  \"add{l}\\t{%%fs:0, %0|%0, DWORD PTR fs:0}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+  \"\"\n+  \"#\"\n+  \"\"\n+  [(parallel\n+     [(set (match_dup 0)\n+\t   (plus:PTR (match_dup 1) (match_dup 2)))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  addr_space_t as = DEFAULT_TLS_SEG_REG;\n+\n+  operands[2] = gen_const_mem (<MODE>mode, const0_rtx);\n+  set_mem_addr_space (operands[2], as);\n+})\n \n-(define_insn \"*add_tp_x32_zext\"\n+(define_insn_and_split \"*add_tp_x32_zext\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (plus:SI (unspec:SI [(const_int 0)] UNSPEC_TP)\n \t\t   (match_operand:SI 1 \"register_operand\" \"0\"))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_X32\"\n-  \"add{l}\\t{%%fs:0, %k0|%k0, DWORD PTR fs:0}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+  \"#\"\n+  \"\"\n+  [(parallel\n+     [(set (match_dup 0)\n+     \t   (zero_extend:DI\n+\t     (plus:SI (match_dup 1) (match_dup 2))))\n+      (clobber (reg:CC FLAGS_REG))])]\n+{\n+  addr_space_t as = DEFAULT_TLS_SEG_REG;\n \n-(define_insn \"*add_tp_<mode>\"\n-  [(set (match_operand:P 0 \"register_operand\" \"=r\")\n-\t(plus:P (unspec:P [(const_int 0)] UNSPEC_TP)\n-\t\t(match_operand:P 1 \"register_operand\" \"0\")))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"!TARGET_X32\"\n-  \"add{<imodesuffix>}\\t{%%<tp_seg>:0, %0|%0, <iptrsize> PTR <tp_seg>:0}\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"modrm\" \"0\")\n-   (set_attr \"length\" \"7\")\n-   (set_attr \"memory\" \"load\")\n-   (set_attr \"imm_disp\" \"false\")])\n+  operands[2] = gen_const_mem (SImode, const0_rtx);\n+  set_mem_addr_space (operands[2], as);\n+})\n \n ;; The Sun linker took the AMD64 TLS spec literally and can only handle\n ;; %rax as destination of the initial executable code sequence."}]}