{"sha": "aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "node_id": "C_kwDOANBUbNoAKGFlZWRiMDBhMWFlMmNjZDEwYjFhNWYwMGZmNDY2MDgxYWVhZGI1NGI", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-12-09T09:45:28Z"}, "committer": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2021-12-12T12:18:49Z"}, "message": "nvptx: Add (experimental) support for HFmode with -misa=sm_53\n\nThe recent flurry of activity around HFmode on gcc-patches intrigued me\nto investigate adding HFmode support to the nvptx backend.  NVidia GPUs\nwith an SM ISA above 5.3 support IEEE 16-bit floating point instructions.\nHence, this patch adds support for -misa=sm_53, and implements some\nbackend patterns/insns sufficient for a proof-of-concept prototype.\n\nThe following has been tested on nvptx-none, hosted on x86_64-pc-linux-gnu\nwith a \"make\" and \"make -k check\" with no new failures.\n\ngcc/ChangeLog:\n\n\t* config/nvptx/nvptx-opts.h (ptx_isa): Add PTX_ISA_SM53 ISA level\n\tto enumeration.\n\t* config/nvptx/nvptx.opt: Add sm_53 to -misa.\n\t* config/nvptx/nvptx-modes.def: Add support for HFmode.\n\t* config/nvptx/nvptx.h (TARGET_SM53):\n\tNew helper macro to conditionalize functionality on target ISA.\n\t* config/nvptx/nvptx-c.c (nvptx_cpu_cpp_builtins): Add __PTX_SM__\n\tsupport for the new ISA levels.\n\t* config/nvptx/nvptx.c (nvtx_ptx_type_from_mode): Support new HFmode\n\twith the \".f16\" suffix/qualifier.\n\t(nvptx_file_start): Add support for TARGET_SM53.\n\t(nvptx_omp_device_kind_arch_isa): Add support for TARGET_SM53\n\tand tweak TARGET_SM35.\n\t(nvptx_scalar_mode_supported_p): Target hook with conditional\n\tHFmode support on TARGET_SM53 and higher.\n\t(nvptx_libgcc_floating_mode_supported_p): Likewise.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Use nvptx_scalar_mode_supported_p.\n\t(TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P): Likewise, use new hook.\n\t* config/nvptx/nvptx.md (*movhf_insn): New define_insn.\n\t(movhf): New define_expand for HFmode moves.\n\t(addhf3, subhf3, mulhf, extendhf<mode>2, trunc<mode>hf2): New\n\tinstructions conditional on TARGET_SM53 (i.e. -misa=sm_53).\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/nvptx/float16-1.c: New test case.", "tree": {"sha": "3adcc90ef8d5524379a70158123fbfe863203ee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3adcc90ef8d5524379a70158123fbfe863203ee5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e93809f62363ba4b233858005aef652fb550e896", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e93809f62363ba4b233858005aef652fb550e896", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e93809f62363ba4b233858005aef652fb550e896"}], "stats": {"total": 178, "additions": 174, "deletions": 4}, "files": [{"sha": "7efdf705fa6f2e96b425160ced82d318c6f7dd59", "filename": "gcc/config/nvptx/nvptx-c.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-c.c?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -39,7 +39,9 @@ nvptx_cpu_cpp_builtins (void)\n     cpp_define (parse_in, \"__nvptx_softstack__\");\n   if (TARGET_UNIFORM_SIMT)\n     cpp_define (parse_in,\"__nvptx_unisimt__\");\n-  if (TARGET_SM35)\n+  if (TARGET_SM53)\n+    cpp_define (parse_in, \"__PTX_SM__=530\");\n+  else if (TARGET_SM35)\n     cpp_define (parse_in, \"__PTX_SM__=350\");\n   else\n     cpp_define (parse_in,\"__PTX_SM__=300\");"}, {"sha": "cc19a2677c15266790a877072dd8873aeda42af2", "filename": "gcc/config/nvptx/nvptx-modes.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -1,3 +1,5 @@\n+FLOAT_MODE (HF, 2, ieee_half_format);  /* HFmode */\n+\n VECTOR_MODE (INT, SI, 2);  /* V2SI */\n \n VECTOR_MODE (INT, DI, 2);  /* V2DI */"}, {"sha": "f7371dc274ca69d91b2601b06d8effc3cc54bfbc", "filename": "gcc/config/nvptx/nvptx-opts.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-opts.h?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -23,7 +23,8 @@\n enum ptx_isa\n {\n   PTX_ISA_SM30,\n-  PTX_ISA_SM35\n+  PTX_ISA_SM35,\n+  PTX_ISA_SM53\n };\n \n enum ptx_version"}, {"sha": "445d7ce8cc97a1d6231c9c662379db1211a51351", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -294,6 +294,8 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     case E_DImode:\n       return \".u64\";\n \n+    case E_HFmode:\n+      return \".f16\";\n     case E_SFmode:\n       return \".f32\";\n     case E_DFmode:\n@@ -5406,7 +5408,9 @@ nvptx_file_start (void)\n     fputs (\"\\t.version\\t6.3\\n\", asm_out_file);\n   else\n     fputs (\"\\t.version\\t3.1\\n\", asm_out_file);\n-  if (TARGET_SM35)\n+  if (TARGET_SM53)\n+    fputs (\"\\t.target\\tsm_53\\n\", asm_out_file);\n+  else if (TARGET_SM35)\n     fputs (\"\\t.target\\tsm_35\\n\", asm_out_file);\n   else\n     fputs (\"\\t.target\\tsm_30\\n\", asm_out_file);\n@@ -5717,7 +5721,9 @@ nvptx_omp_device_kind_arch_isa (enum omp_device_kind_arch_isa trait,\n       if (strcmp (name, \"sm_30\") == 0)\n \treturn !TARGET_SM35;\n       if (strcmp (name, \"sm_35\") == 0)\n-\treturn TARGET_SM35;\n+\treturn TARGET_SM35 && !TARGET_SM53;\n+      if (strcmp (name, \"sm_53\") == 0)\n+\treturn TARGET_SM53;\n       return 0;\n     default:\n       gcc_unreachable ();\n@@ -6613,6 +6619,24 @@ nvptx_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+static bool\n+nvptx_scalar_mode_supported_p (scalar_mode mode)\n+{\n+  if (mode == HFmode && TARGET_SM53)\n+    return true;\n+\n+  return default_scalar_mode_supported_p (mode);\n+}\n+\n+static bool\n+nvptx_libgcc_floating_mode_supported_p (scalar_float_mode mode)\n+{\n+  if (mode == HFmode && TARGET_SM53)\n+    return true;\n+\n+  return default_libgcc_floating_mode_supported_p (mode);\n+}\n+\n static bool\n nvptx_vector_mode_supported (machine_mode mode)\n {\n@@ -6935,6 +6959,13 @@ nvptx_libc_has_function (enum function_class fn_class, tree type)\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM nvptx_cannot_force_const_mem\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P nvptx_scalar_mode_supported_p\n+\n+#undef TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P\n+#define TARGET_LIBGCC_FLOATING_MODE_SUPPORTED_P \\\n+  nvptx_libgcc_floating_mode_supported_p\n+\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P nvptx_vector_mode_supported\n "}, {"sha": "c3480cc1c26c4e795658c789c185dde968bcd408", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -87,6 +87,7 @@\n #define STACK_SIZE_MODE Pmode\n \n #define TARGET_SM35 (ptx_isa_option >= PTX_ISA_SM35)\n+#define TARGET_SM53 (ptx_isa_option >= PTX_ISA_SM53)\n \n #define TARGET_PTX_6_3 (ptx_version_option >= PTX_VERSION_6_3)\n "}, {"sha": "da4ac8f3237b932d9324f67cefb801139f4abe4b", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -273,6 +273,48 @@\n }\n   [(set_attr \"subregs_ok\" \"true\")])\n \n+(define_insn \"*movhf_insn\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"=R,R,m\")\n+\t(match_operand:HF 1 \"nonimmediate_operand\" \"R,m,R\"))]\n+  \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n+  \"@\n+   %.\\\\tmov.b16\\\\t%0, %1;\n+   %.\\\\tld.b16\\\\t%0, %1;\n+   %.\\\\tst.b16\\\\t%0, %1;\")\n+\n+(define_expand \"movhf\"\n+  [(set (match_operand:HF 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:HF 1 \"nonimmediate_operand\" \"\"))]\n+  \"\"\n+{\n+  /* Load HFmode constants as SFmode with an explicit FLOAT_TRUNCATE.  */\n+  if (CONST_DOUBLE_P (operands[1]))\n+    {\n+      rtx tmp1 = gen_reg_rtx (SFmode);\n+      REAL_VALUE_TYPE d = *CONST_DOUBLE_REAL_VALUE (operands[1]);\n+      real_convert (&d, SFmode, &d);\n+      emit_move_insn (tmp1, const_double_from_real_value (d, SFmode));\n+\n+      if (!REG_P (operands[0]))\n+\t{\n+\t  rtx tmp2 = gen_reg_rtx (HFmode);\n+\t  emit_insn (gen_truncsfhf2 (tmp2, tmp1));\n+\t  emit_move_insn (operands[0], tmp2);\n+\t}\n+      else\n+        emit_insn (gen_truncsfhf2 (operands[0], tmp1));\n+      DONE;\n+    }\n+\n+  if (MEM_P (operands[0]) && !REG_P (operands[1]))\n+    {\n+      rtx tmp = gen_reg_rtx (HFmode);\n+      emit_move_insn (tmp, operands[1]);\n+      emit_move_insn (operands[0], tmp);\n+      DONE;\n+    }\n+})\n+\n (define_insn \"load_arg_reg<mode>\"\n   [(set (match_operand:QHIM 0 \"nvptx_register_operand\" \"=R\")\n \t(unspec:QHIM [(match_operand 1 \"const_int_operand\" \"n\")]\n@@ -1078,6 +1120,29 @@\n   \"flag_unsafe_math_optimizations\"\n   \"%.\\\\tex2.approx%t0\\\\t%0, %1;\")\n \n+;; HFmode floating point arithmetic.\n+\n+(define_insn \"addhf3\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(plus:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")\n+\t\t (match_operand:HF 2 \"nvptx_register_operand\" \"R\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tadd.f16\\\\t%0, %1, %2;\")\n+\n+(define_insn \"subhf3\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(minus:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")\n+\t\t  (match_operand:HF 2 \"nvptx_register_operand\" \"R\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tsub.f16\\\\t%0, %1, %2;\")\n+\n+(define_insn \"mulhf3\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(mult:HF (match_operand:HF 1 \"nvptx_register_operand\" \"R\")\n+\t\t (match_operand:HF 2 \"nvptx_register_operand\" \"R\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tmul.f16\\\\t%0, %1, %2;\")\n+\n ;; Conversions involving floating point\n \n (define_insn \"extendsfdf2\"\n@@ -1171,6 +1236,18 @@\n   \"\"\n   \"%.\\\\tcvt<FPINT2:fpint2_roundingmode>.s%T0%t1\\\\t%0, %1;\")\n \n+(define_insn \"extendhf<mode>2\"\n+  [(set (match_operand:SDFM 0 \"nvptx_register_operand\" \"=R\")\n+\t(float_extend:SDFM (match_operand:HF 1 \"nvptx_register_operand\" \"R\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tcvt%t0%t1\\\\t%0, %1;\")\n+\n+(define_insn \"trunc<mode>hf2\"\n+  [(set (match_operand:HF 0 \"nvptx_register_operand\" \"=R\")\n+\t(float_truncate:HF (match_operand:SDFM 1 \"nvptx_register_operand\" \"R\")))]\n+  \"TARGET_SM53\"\n+  \"%.\\\\tcvt%#%t0%t1\\\\t%0, %1;\")\n+\n ;; Vector operations\n \n (define_insn \"*vec_set<mode>_0\""}, {"sha": "514f19d171e8644e1763cdfa156a88e42c3e9f46", "filename": "gcc/config/nvptx/nvptx.opt", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.opt?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -61,6 +61,9 @@ Enum(ptx_isa) String(sm_30) Value(PTX_ISA_SM30)\n EnumValue\n Enum(ptx_isa) String(sm_35) Value(PTX_ISA_SM35)\n \n+EnumValue\n+Enum(ptx_isa) String(sm_53) Value(PTX_ISA_SM53)\n+\n ; Default needs to be in sync with default in ASM_SPEC in nvptx.h.\n misa=\n Target RejectNegative ToLower Joined Enum(ptx_isa) Var(ptx_isa_option) Init(PTX_ISA_SM35)"}, {"sha": "3a0324d1652cd0b1a4ccf44379e0d25de1295d20", "filename": "gcc/testsuite/gcc.target/nvptx/float16-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Ffloat16-1.c?ref=aeedb00a1ae2ccd10b1a5f00ff466081aeadb54b", "patch": "@@ -0,0 +1,53 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -misa=sm_53 -mptx=6.3 -ffast-math\" } */\n+\n+_Float16 var;\n+\n+float load()\n+{\n+  return var;\n+}\n+\n+void store(float x)\n+{\n+  var = x;\n+}\n+\n+void move(_Float16 *dst, _Float16 *src)\n+{\n+  *dst = *src;\n+}\n+\n+double plus(double x, double y)\n+{\n+  _Float16 hx = x;\n+  _Float16 hy = y;\n+  _Float16 hz = hx + hy;\n+  return hz;\n+}\n+\n+double minus(double x, double y)\n+{\n+  _Float16 hx = x;\n+  _Float16 hy = y;\n+  _Float16 hz = hx - hy;\n+  return hz;\n+}\n+\n+double mult(double x, double y)\n+{\n+  _Float16 hx = x;\n+  _Float16 hy = y;\n+  _Float16 hz = hx * hy;\n+  return hz;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld.b16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"cvt.f32.f16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cvt.rn.f16.f32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"st.b16\" 2 } } */\n+/* { dg-final { scan-assembler-times \"add.f16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sub.f16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mul.f16\" 1 } } */\n+/* { dg-final { scan-assembler-times \"cvt.rn.f16.f64\" 6 } } */\n+/* { dg-final { scan-assembler-times \"cvt.f64.f16\" 3 } } */"}]}