{"sha": "252c7556e73d1466115b833180dcf3e70441ea52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjUyYzc1NTZlNzNkMTQ2NjExNWI4MzMxODBkY2YzZTcwNDQxZWE1Mg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-03-24T12:05:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-03-24T12:05:38Z"}, "message": "[AArch64] Logical vector shift right conformance\n\ngcc/\n\n\t* config/aarch64/aarch64-simd-builtins.def (lshr): DI mode excluded.\n\t(lshr_simd): DI mode added.\n\t* config/aarch64/aarch64-simd.md (aarch64_lshr_simddi): New pattern.\n\t(aarch64_ushr_simddi): Likewise.\n\t* config/aarch64/aarch64.md (UNSPEC_USHR64): New unspec.\n\t* config/aarch64/arm_neon.h (vshr_n_u64): Intrinsic fixed.\n\t(vshrd_n_u64): Likewise.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/ushr64_1.c: New testcase.\n\nFrom-SVN: r208789", "tree": {"sha": "0536898809d3385d86f90859795ab748be327a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0536898809d3385d86f90859795ab748be327a4f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/252c7556e73d1466115b833180dcf3e70441ea52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c7556e73d1466115b833180dcf3e70441ea52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/252c7556e73d1466115b833180dcf3e70441ea52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/252c7556e73d1466115b833180dcf3e70441ea52/comments", "author": null, "committer": null, "parents": [{"sha": "71cfb0cfda085ce661aa9108d8d828e8d95a1b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71cfb0cfda085ce661aa9108d8d828e8d95a1b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71cfb0cfda085ce661aa9108d8d828e8d95a1b84"}], "stats": {"total": 139, "additions": 134, "deletions": 5}, "files": [{"sha": "a0e21f28616eb862214a68524a20f4991a0473da", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -1,3 +1,13 @@\n+2014-03-24  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/aarch64-simd-builtins.def (lshr): DI mode excluded.\n+\t(lshr_simd): DI mode added.\n+\t* config/aarch64/aarch64-simd.md (aarch64_lshr_simddi): New pattern.\n+\t(aarch64_ushr_simddi): Likewise.\n+\t* config/aarch64/aarch64.md (UNSPEC_USHR64): New unspec.\n+\t* config/aarch64/arm_neon.h (vshr_n_u64): Intrinsic fixed.\n+\t(vshrd_n_u64): Likewise.\n+\n 2014-03-24  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* Makefile.in (s-macro_list): Depend on cc1."}, {"sha": "55cfe0ab225b39c4ac96ad686fd8f2e76b0980c8", "filename": "gcc/config/aarch64/aarch64-builtins.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.c?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -183,6 +183,10 @@ aarch64_types_getlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define TYPES_GETLANE (aarch64_types_getlane_qualifiers)\n #define TYPES_SHIFTIMM (aarch64_types_getlane_qualifiers)\n static enum aarch64_type_qualifiers\n+aarch64_types_unsigned_shift_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned, qualifier_immediate };\n+#define TYPES_USHIFTIMM (aarch64_types_unsigned_shift_qualifiers)\n+static enum aarch64_type_qualifiers\n aarch64_types_setlane_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n   = { qualifier_none, qualifier_none, qualifier_none, qualifier_immediate };\n #define TYPES_SETLANE (aarch64_types_setlane_qualifiers)"}, {"sha": "c9b7570e565979cb454d594c84e625380419d0e6", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -192,7 +192,8 @@\n \n   BUILTIN_VDQ_I (SHIFTIMM, ashr, 3)\n   VAR1 (SHIFTIMM, ashr_simd, 0, di)\n-  BUILTIN_VSDQ_I_DI (SHIFTIMM, lshr, 3)\n+  BUILTIN_VDQ_I (SHIFTIMM, lshr, 3)\n+  VAR1 (USHIFTIMM, lshr_simd, 0, di)\n   /* Implemented by aarch64_<sur>shr_n<mode>.  */\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, srshr_n, 0)\n   BUILTIN_VSDQ_I_DI (SHIFTIMM, urshr_n, 0)"}, {"sha": "6048d605c72e6a43b9a004a8bc89dbfa89f3ed5b", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -724,6 +724,31 @@\n   DONE;\n })\n \n+(define_expand \"aarch64_lshr_simddi\"\n+  [(match_operand:DI 0 \"register_operand\" \"=w\")\n+   (match_operand:DI 1 \"register_operand\" \"w\")\n+   (match_operand:SI 2 \"aarch64_shift_imm64_di\" \"\")]\n+  \"TARGET_SIMD\"\n+  {\n+    if (INTVAL (operands[2]) == 64)\n+      emit_insn (gen_aarch64_ushr_simddi (operands[0], operands[1]));\n+    else\n+      emit_insn (gen_lshrdi3 (operands[0], operands[1], operands[2]));\n+    DONE;\n+  }\n+)\n+\n+;; SIMD shift by 64.  This pattern is a special case as standard pattern does\n+;; not handle NEON shifts by 64.\n+(define_insn \"aarch64_ushr_simddi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=w\")\n+        (unspec:DI\n+          [(match_operand:DI 1 \"register_operand\" \"w\")] UNSPEC_USHR64))]\n+  \"TARGET_SIMD\"\n+  \"ushr\\t%d0, %d1, 64\"\n+  [(set_attr \"type\" \"neon_shift_imm\")]\n+)\n+\n (define_expand \"vec_set<mode>\"\n   [(match_operand:VQ_S 0 \"register_operand\")\n    (match_operand:<VEL> 1 \"register_operand\")"}, {"sha": "c86a29d8e7f8df21f25e14d22df1c3e8c37c907f", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -101,6 +101,7 @@\n     UNSPEC_TLS\n     UNSPEC_TLSDESC\n     UNSPEC_USHL_2S\n+    UNSPEC_USHR64\n     UNSPEC_VSTRUCTDUMMY\n ])\n "}, {"sha": "747a292ba9b2260e74566c946fe57afaea267969", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -23364,7 +23364,7 @@ vshr_n_u32 (uint32x2_t __a, const int __b)\n __extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n vshr_n_u64 (uint64x1_t __a, const int __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_lshrdi ((int64x1_t) __a, __b);\n+  return __builtin_aarch64_lshr_simddi_uus ( __a, __b);\n }\n \n __extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n@@ -23421,10 +23421,10 @@ vshrd_n_s64 (int64x1_t __a, const int __b)\n   return (int64x1_t) __builtin_aarch64_ashr_simddi (__a, __b);\n }\n \n-__extension__ static __inline uint64x1_t __attribute__ ((__always_inline__))\n-vshrd_n_u64 (uint64x1_t __a, const int __b)\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vshrd_n_u64 (uint64_t __a, const int __b)\n {\n-  return (uint64x1_t) __builtin_aarch64_lshrdi (__a, __b);\n+  return __builtin_aarch64_lshr_simddi_uus (__a, __b);\n }\n \n /* vsli */"}, {"sha": "a07de067040141dcbf03c215fa6426f6b2273e21", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -1,3 +1,7 @@\n+2014-03-24  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/ushr64_1.c: New.\n+\n 2014-03-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* gcc.target/aarch64/vect-abs.c (dg-options): Add -std=c99."}, {"sha": "b1c741dac3125d97ca3440329ecb32c7d2889d81", "filename": "gcc/testsuite/gcc.target/aarch64/ushr64_1.c", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fushr64_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/252c7556e73d1466115b833180dcf3e70441ea52/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fushr64_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fushr64_1.c?ref=252c7556e73d1466115b833180dcf3e70441ea52", "patch": "@@ -0,0 +1,84 @@\n+/* Test logical SIMD shift works correctly.  */\n+/* { dg-do run } */\n+/* { dg-options \"--save-temps\" } */\n+\n+#include \"arm_neon.h\"\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test_vshr_n_u64_64 (uint64x1_t passed, uint64_t expected)\n+{\n+  return vget_lane_u64 (vshr_n_u64 (passed, 64), 0) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vshr_n_u64_4 (uint64x1_t passed, uint64_t expected)\n+{\n+  return vget_lane_u64 (vshr_n_u64 (passed, 4), 0) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vshr_n_u64_0 (uint64x1_t passed, uint64_t expected)\n+{\n+  return vget_lane_u64 (vshr_n_u64 (passed, 0), 0) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vshrd_n_u64_64 (uint64_t passed, uint64_t expected)\n+{\n+  return vshrd_n_u64 (passed, 64) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vshrd_n_u64_4 (uint64_t passed, uint64_t expected)\n+{\n+  return vshrd_n_u64 (passed, 4) != expected;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vshrd_n_u64_0 (uint64_t passed, uint64_t expected)\n+{\n+  return vshrd_n_u64 (passed, 0) != expected;\n+}\n+\n+/* { dg-final { scan-assembler-times \"ushr\\\\td\\[0-9\\]+, d\\[0-9\\]+, 64\" 2 } } */\n+/* { dg-final { (scan-assembler-times \"ushr\\\\td\\[0-9\\]+, d\\[0-9\\]+, 4\" 2)  || \\\n+   (scan-assembler-times \"lsr\\\\tx\\[0-9\\]+, x\\[0-9\\]+, 4\" 2) } } */\n+/* { dg-final { scan-assembler-not \"ushr\\\\td\\[0-9\\]+, d\\[0-9\\]+, 0\" } } */\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  /* Testing vshr_n_u64.  */\n+  if (test_vshr_n_u64_64 (vcreate_u64 (0x0000000080000000), 0))\n+    abort ();\n+  if (test_vshr_n_u64_64 (vcreate_u64 (0xffffffff80000000), 0))\n+    abort ();\n+\n+  if (test_vshr_n_u64_4 (vcreate_u64 (0x0000000080000000), 0x0000000008000000))\n+    abort ();\n+  if (test_vshr_n_u64_4 (vcreate_u64 (0xffffffff80000000), 0x0ffffffff8000000))\n+    abort ();\n+\n+  if (test_vshr_n_u64_0 (vcreate_u64 (0x0000000080000000), 0x0000000080000000))\n+    abort ();\n+\n+  /* Testing vshrd_n_u64.  */\n+  if (test_vshrd_n_u64_64 (0x0000000080000000, 0))\n+    abort ();\n+  if (test_vshrd_n_u64_64 (0xffffffff80000000, 0))\n+    abort ();\n+\n+  if (test_vshrd_n_u64_4 (0x0000000080000000, 0x0000000008000000))\n+    abort ();\n+  if (test_vshrd_n_u64_4 (0xffffffff80000000, 0x0ffffffff8000000))\n+    abort ();\n+\n+  if (test_vshrd_n_u64_0 (0x0000000080000000, 0x0000000080000000))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}