{"sha": "786872fdd199d325b62e93c681e28cb4599e7303", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg2ODcyZmRkMTk5ZDMyNWI2MmU5M2M2ODFlMjhjYjQ1OTllNzMwMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-01-19T17:12:37Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-01-19T17:12:37Z"}, "message": "invoke.texi (generic): Document (i686) Update.\n\n\n\t* invoke.texi (generic): Document\n\t(i686) Update.\n\t* config.gcc: Make x86_64-* and i686-* default to generic tunning.\n\t* i386.h (TARGET_GENERIC32, TARGET_GENERIC64, TARGET_GENERIC,\n\tTARGET_USE_INCDEC, TARGET_PAD_RETURNS): New macros.\n\t(x86_use_incdec, x86_pad_returns): New variables\n\t(TARGET_CPU_DEFAULT_generic): New constant\n\t(TARGET_CPU_DEFAULT_NAMES): Add generic.\n\t(enum processor_type): Add generic32 and generic64.\n\t* i386.md (cpu attribute): Add generic32/generic64\n\t(movhi splitter): Behave sanely when both partial_reg_dependency and\n\tpartial_reg_stall are set.\n\t(K8 splitters): Enable for generic as well.\n\t* predicates.md (incdec_operand): Use TARGET_INCDEC\n\t(aligned_operand): Avoid memory mismatch stalls.\n\t* athlon.md: Enable for generic64, new patterns for 128bit moves.\n\t* ppro.md: Enable for generic32\n\t* i386.c (generic64_cost, generic32_cost): New.\n\t(m_GENERIC32, m_GENERIC64, m_GENERIC): New macros.\n\t(x86_use_leave): Enable for generic64.  (x86_use_sahf,\n\tx86_ext_80387_constants): Enable for generic32.  (x86_push_memory,\n\tx86_movx, x86_unroll_strlen, x86_deep_branch, x86_use_simode_fiop,\n\tx86_use_cltd, x86_promote_QImode, x86_sub_esp_4, x86_sub_esp_8,\n\tx86_add_esp_4, x86_add_esp_8, x86_integer_DFmode_moves,\n\tx86_partial_reg_dependency, x86_memory_mismatch_stall,\n\tx86_accumulate_outgoing_args, x86_prologue_using_move,\n\tx86_epilogue_using_move, x86_arch_always_fancy_math_387,\n\tx86_sse_partial_reg_dependency, x86_four_jump_limit, x86_schedule):\n\tEnable for generic.\n\t(x86_use_incdec, x86_pad_returns): New.\n\t(override_options): Add generic32 and generic64, translate \"generic\"\n\tto generic32/generic64 and \"i686\" to \"generic32\", refuse\n\t\"generic32\"/\"generic64\" as arch target.\n\t(ix86_issue_rate, ix86_adjust_cost): Handle generic as athlon.\n\t(ix86_reorg): Honor PAD_RETURNS.\n\nFrom-SVN: r109972", "tree": {"sha": "513c5096753497bea652b620c5294c629ae0c227", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513c5096753497bea652b620c5294c629ae0c227"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/786872fdd199d325b62e93c681e28cb4599e7303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786872fdd199d325b62e93c681e28cb4599e7303", "html_url": "https://github.com/Rust-GCC/gccrs/commit/786872fdd199d325b62e93c681e28cb4599e7303", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/786872fdd199d325b62e93c681e28cb4599e7303/comments", "author": null, "committer": null, "parents": [{"sha": "d326eaf06a81f21651bd07b06fea29314347cc09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d326eaf06a81f21651bd07b06fea29314347cc09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d326eaf06a81f21651bd07b06fea29314347cc09"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "3a19fb9c36b8586220eae4d41a6ad4bfe08836e4", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/786872fdd199d325b62e93c681e28cb4599e7303/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/786872fdd199d325b62e93c681e28cb4599e7303/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=786872fdd199d325b62e93c681e28cb4599e7303", "patch": "@@ -9062,6 +9062,23 @@ Tune to @var{cpu-type} everything applicable about the generated code, except\n for the ABI and the set of available instructions.  The choices for\n @var{cpu-type} are:\n @table @emph\n+@item generic\n+Produce code optimized for the most common IA32/AMD64/EM64T processors.\n+If you know the CPU on which your code will run, then you should use\n+the corresponding @option{-mtune} option instead of\n+@option{-mtune=generic}.  But, if you do not know exactly what CPU users\n+of your application will have, then you should use this option.\n+\n+As new processors are deployed in the marketplace, the behavior of this\n+option will change.  Therefore, if you upgrade to a newer version of\n+GCC, the code generated option will change to reflect the processors\n+that were most common when that version of GCC was released.\n+\n+There is no @option{-march=generic} option because @option{-march}\n+indicates the instruction set the compiler can use, and there is no\n+generic instruction set applicable to all processors.  In contrast,\n+@option{-mtune} indicates the processor (or, in this case, collection of\n+processors) for which the code is optimized.\n @item i386\n Original Intel's i386 CPU@.\n @item i486\n@@ -9070,8 +9087,11 @@ Intel's i486 CPU@.  (No scheduling is implemented for this chip.)\n Intel Pentium CPU with no MMX support.\n @item pentium-mmx\n Intel PentiumMMX CPU based on Pentium core with MMX instruction set support.\n-@item i686, pentiumpro\n+@item pentiumpro\n Intel PentiumPro CPU@.\n+@item i686\n+Same as @code{generic}, but when used as @code{march} option, PentiumPro\n+instruction set will be used, so the code will run on all i686 familly chips.\n @item pentium2\n Intel Pentium2 CPU based on PentiumPro core with MMX instruction set support.\n @item pentium3, pentium3m"}]}