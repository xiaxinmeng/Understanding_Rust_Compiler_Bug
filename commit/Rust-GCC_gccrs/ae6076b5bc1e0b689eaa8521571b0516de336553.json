{"sha": "ae6076b5bc1e0b689eaa8521571b0516de336553", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2MDc2YjViYzFlMGI2ODllYWE4NTIxNTcxYjA1MTZkZTMzNjU1Mw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-27T23:21:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-03-27T23:26:01Z"}, "message": "libstdc++: Implement C++20 changes to insert iterators\n\nstd::insert_iterator and std::inserter need to be adjusted for C++20, so\nthat they use ranges::iterator_t. That alias template requires\nranges::begin to be defined. Rather than moving the whole of\nranges::begin (and related details like ranges::enable_borrowed_range)\ninto <iterator>, this defines a new, simpler version of ranges::begin\nthat is sufficient for ranges::iterator_t to be defined. This works\nbecause ranges::iterator_t uses an lvalue reference type, so the logic\nin ranges::begin for non-lvalue ranges (i.e. borrowed ranges) isn't\nneeded.\n\nThis also adds the missing constexpr specifiers to the other insert\niterators.\n\n\t* include/bits/iterator_concepts.h (__detail::__decay_copy)\n\t(__detail::__member_begin, __detail::__adl_begin): Move here from\n\t<bits/range_access.h>.\n\t(__detail::__ranges_begin, __detail::__range_iter_t): Define.\n\t* bits/range_access.h (__cust_access::__decay_copy)\n\t(__cust_access::__member_begin, __cust_access::__adl_begin): Move to\n\t<bits/iterator_concepts.h>.\n\t(ranges::iterator_t): Use __detail::__range_iter_t.\n\t* include/bits/stl_iterator.h (back_insert_iterator): Simplify\n\tconditional compilation. Add _GLIBCXX20_CONSTEXPR to all members.\n\t(front_insert_iterator): Likewise.\n\t(insert_iterator): Implement changes from P0896R4 for C++20.\n\t* testsuite/24_iterators/back_insert_iterator/constexpr.cc: New test.\n\t* testsuite/24_iterators/front_insert_iterator/constexpr.cc: New test.\n\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: Adjust\n\tfor inclusion in synopsis_c++20.cc which expects different signatures\n\tfor some function templates.\n\t* testsuite/24_iterators/insert_iterator/constexpr.cc: New test.", "tree": {"sha": "b1f1845ab2180e4873036bb6d89ba93481a76d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1f1845ab2180e4873036bb6d89ba93481a76d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae6076b5bc1e0b689eaa8521571b0516de336553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6076b5bc1e0b689eaa8521571b0516de336553", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6076b5bc1e0b689eaa8521571b0516de336553", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6076b5bc1e0b689eaa8521571b0516de336553/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0302a2de7f143bc4ac2a963761abc684b4dd6ddb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0302a2de7f143bc4ac2a963761abc684b4dd6ddb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0302a2de7f143bc4ac2a963761abc684b4dd6ddb"}], "stats": {"total": 346, "additions": 305, "deletions": 41}, "files": [{"sha": "c529206a4b90a82f2a3a016b2ad7197f3e2b24c2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -1,5 +1,24 @@\n 2020-03-27  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/bits/iterator_concepts.h (__detail::__decay_copy)\n+\t(__detail::__member_begin, __detail::__adl_begin): Move here from\n+\t<bits/range_access.h>.\n+\t(__detail::__ranges_begin, __detail::__range_iter_t): Define.\n+\t* bits/range_access.h (__cust_access::__decay_copy)\n+\t(__cust_access::__member_begin, __cust_access::__adl_begin): Move to\n+\t<bits/iterator_concepts.h>.\n+\t(ranges::iterator_t): Use __detail::__range_iter_t.\n+\t* include/bits/stl_iterator.h (back_insert_iterator): Simplify\n+\tconditional compilation. Add _GLIBCXX20_CONSTEXPR to all members.\n+\t(front_insert_iterator): Likewise.\n+\t(insert_iterator): Implement changes from P0896R4 for C++20.\n+\t* testsuite/24_iterators/back_insert_iterator/constexpr.cc: New test.\n+\t* testsuite/24_iterators/front_insert_iterator/constexpr.cc: New test.\n+\t* testsuite/24_iterators/headers/iterator/synopsis_c++17.cc: Adjust\n+\tfor inclusion in synopsis_c++20.cc which expects different signatures\n+\tfor some function templates.\n+\t* testsuite/24_iterators/insert_iterator/constexpr.cc: New test.\n+\n \t* include/std/type_traits (__is_array_convertible): Move definition\n \tto immediately after is_convertible.\n "}, {"sha": "b598532089e9ce89e171d99832a8a94009b12cea", "filename": "libstdc++-v3/include/bits/iterator_concepts.h", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fiterator_concepts.h?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -835,6 +835,56 @@ namespace ranges\n   struct default_sentinel_t { };\n   inline constexpr default_sentinel_t default_sentinel{};\n \n+  namespace __detail\n+  {\n+    template<typename _Tp>\n+      constexpr decay_t<_Tp>\n+      __decay_copy(_Tp&& __t)\n+      noexcept(is_nothrow_convertible_v<_Tp, decay_t<_Tp>>)\n+      { return std::forward<_Tp>(__t); }\n+\n+    template<typename _Tp>\n+      concept __member_begin = requires(_Tp& __t)\n+\t{\n+\t  { __detail::__decay_copy(__t.begin()) } -> input_or_output_iterator;\n+\t};\n+\n+    void begin(auto&) = delete;\n+    void begin(const auto&) = delete;\n+\n+    template<typename _Tp>\n+      concept __adl_begin = __class_or_enum<remove_reference_t<_Tp>>\n+\t&& requires(_Tp& __t)\n+\t{\n+\t  { __detail::__decay_copy(begin(__t)) } -> input_or_output_iterator;\n+\t};\n+\n+    // Simplified version of std::ranges::begin that only supports lvalues,\n+    // for use by __range_iter_t below.\n+    template<typename _Tp>\n+      requires is_array_v<_Tp> || __member_begin<_Tp&> || __adl_begin<_Tp&>\n+      auto\n+      __ranges_begin(_Tp& __t)\n+      {\n+\tif constexpr (is_array_v<_Tp>)\n+\t  {\n+\t    static_assert(sizeof(remove_all_extents_t<_Tp>) != 0,\n+\t\t\t  \"not array of incomplete type\");\n+\t    return __t + 0;\n+\t  }\n+\telse if constexpr (__member_begin<_Tp&>)\n+\t  return __t.begin();\n+\telse\n+\t  return begin(__t);\n+      }\n+\n+    // Implementation of std::ranges::iterator_t, without using ranges::begin.\n+    template<typename _Tp>\n+      using __range_iter_t\n+\t= decltype(__detail::__ranges_begin(std::declval<_Tp&>()));\n+\n+  } // namespace __detail\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n #endif // C++20 library concepts"}, {"sha": "acd701e1385a83fb4f34d3433c43cff809374b67", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -372,28 +372,9 @@ namespace ranges\n   {\n     using std::ranges::__detail::__maybe_borrowed_range;\n     using std::__detail::__class_or_enum;\n-\n-    template<typename _Tp>\n-      constexpr decay_t<_Tp>\n-      __decay_copy(_Tp&& __t)\n-      noexcept(is_nothrow_convertible_v<_Tp, decay_t<_Tp>>)\n-      { return std::forward<_Tp>(__t); }\n-\n-    template<typename _Tp>\n-      concept __member_begin = requires(_Tp& __t)\n-\t{\n-\t  { __decay_copy(__t.begin()) } -> input_or_output_iterator;\n-\t};\n-\n-    void begin(auto&) = delete;\n-    void begin(const auto&) = delete;\n-\n-    template<typename _Tp>\n-      concept __adl_begin = __class_or_enum<remove_reference_t<_Tp>>\n-\t&& requires(_Tp& __t)\n-\t{\n-\t  { __decay_copy(begin(__t)) } -> input_or_output_iterator;\n-\t};\n+    using std::__detail::__decay_copy;\n+    using std::__detail::__member_begin;\n+    using std::__detail::__adl_begin;\n \n     struct _Begin\n     {\n@@ -889,7 +870,7 @@ namespace ranges\n       = range<_Tp> && __detail::__maybe_borrowed_range<_Tp>;\n \n   template<typename _Tp>\n-    using iterator_t = decltype(ranges::begin(std::declval<_Tp&>()));\n+    using iterator_t = std::__detail::__range_iter_t<_Tp>;\n \n   template<range _Range>\n     using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));"}, {"sha": "d10c30cbfccf3714f3936ed71de67d0ad95d52c4", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -76,6 +76,7 @@\n #if __cplusplus > 201703L\n # include <compare>\n # include <new>\n+# include <bits/iterator_concepts.h>\n #endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -496,25 +497,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-#if __cplusplus <= 201703L\n       _Container* container;\n-#else\n-      _Container* container = nullptr;\n-#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n-#endif\n \n-#if __cplusplus > 201703L\n-      constexpr back_insert_iterator() noexcept = default;\n+      constexpr back_insert_iterator() noexcept : container(nullptr) { }\n #endif\n \n       /// The only way to create this %iterator is with a container.\n-      explicit\n+      explicit _GLIBCXX20_CONSTEXPR\n       back_insert_iterator(_Container& __x)\n       : container(std::__addressof(__x)) { }\n \n@@ -537,13 +532,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n #else\n+      _GLIBCXX20_CONSTEXPR\n       back_insert_iterator&\n       operator=(const typename _Container::value_type& __value)\n       {\n \tcontainer->push_back(__value);\n \treturn *this;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       back_insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {\n@@ -553,16 +550,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n+      _GLIBCXX20_CONSTEXPR\n       back_insert_iterator&\n       operator*()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       back_insert_iterator&\n       operator++()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       back_insert_iterator\n       operator++(int)\n       { return *this; }\n@@ -580,6 +580,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  types for you.\n   */\n   template<typename _Container>\n+    _GLIBCXX20_CONSTEXPR\n     inline back_insert_iterator<_Container>\n     back_inserter(_Container& __x)\n     { return back_insert_iterator<_Container>(__x); }\n@@ -599,25 +600,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n     protected:\n-#if __cplusplus <= 201703L\n       _Container* container;\n-#else\n-      _Container* container = nullptr;\n-#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n #if __cplusplus > 201703L\n       using difference_type = ptrdiff_t;\n-#endif\n \n-#if __cplusplus > 201703L\n-      constexpr front_insert_iterator() noexcept = default;\n+      constexpr front_insert_iterator() noexcept : container(nullptr) { }\n #endif\n \n       /// The only way to create this %iterator is with a container.\n-      explicit front_insert_iterator(_Container& __x)\n+      explicit _GLIBCXX20_CONSTEXPR\n+      front_insert_iterator(_Container& __x)\n       : container(std::__addressof(__x)) { }\n \n       /**\n@@ -639,13 +635,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n #else\n+      _GLIBCXX20_CONSTEXPR\n       front_insert_iterator&\n       operator=(const typename _Container::value_type& __value)\n       {\n \tcontainer->push_front(__value);\n \treturn *this;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       front_insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {\n@@ -655,16 +653,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n+      _GLIBCXX20_CONSTEXPR\n       front_insert_iterator&\n       operator*()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       front_insert_iterator&\n       operator++()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       front_insert_iterator\n       operator++(int)\n       { return *this; }\n@@ -682,6 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  types for you.\n   */\n   template<typename _Container>\n+    _GLIBCXX20_CONSTEXPR\n     inline front_insert_iterator<_Container>\n     front_inserter(_Container& __x)\n     { return front_insert_iterator<_Container>(__x); }\n@@ -704,19 +706,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class insert_iterator\n     : public iterator<output_iterator_tag, void, void, void, void>\n     {\n+#if __cplusplus > 201703L && defined __cpp_lib_concepts\n+      using _Iter = std::__detail::__range_iter_t<_Container>;\n+\n+    protected:\n+      _Container* container = nullptr;\n+      _Iter iter = _Iter();\n+#else\n+      typedef typename _Container::iterator\t\t_Iter;\n+\n     protected:\n       _Container* container;\n-      typename _Container::iterator iter;\n+      _Iter iter;\n+#endif\n \n     public:\n       /// A nested typedef for the type of whatever container you used.\n       typedef _Container          container_type;\n \n+#if __cplusplus > 201703L && defined __cpp_lib_concepts\n+      using difference_type = ptrdiff_t;\n+\n+      insert_iterator() = default;\n+#endif\n+\n       /**\n        *  The only way to create this %iterator is with a container and an\n        *  initial position (a normal %iterator into the container).\n       */\n-      insert_iterator(_Container& __x, typename _Container::iterator __i)\n+      _GLIBCXX20_CONSTEXPR\n+      insert_iterator(_Container& __x, _Iter __i)\n       : container(std::__addressof(__x)), iter(__i) {}\n \n       /**\n@@ -751,6 +770,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n #else\n+      _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator=(const typename _Container::value_type& __value)\n       {\n@@ -759,6 +779,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \treturn *this;\n       }\n \n+      _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator=(typename _Container::value_type&& __value)\n       {\n@@ -769,16 +790,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       /// Simply returns *this.\n+      _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator*()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator++()\n       { return *this; }\n \n       /// Simply returns *this.  (This %iterator does not @a move.)\n+      _GLIBCXX20_CONSTEXPR\n       insert_iterator&\n       operator++(int)\n       { return *this; }\n@@ -796,13 +820,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    *  template parameter deduction, making the compiler match the correct\n    *  types for you.\n   */\n+#if __cplusplus > 201703L && defined __cpp_lib_concepts\n+  template<typename _Container>\n+    constexpr insert_iterator<_Container>\n+    inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)\n+    { return insert_iterator<_Container>(__x, __i); }\n+#else\n   template<typename _Container, typename _Iterator>\n     inline insert_iterator<_Container>\n     inserter(_Container& __x, _Iterator __i)\n     {\n       return insert_iterator<_Container>(__x,\n \t\t\t\t\t typename _Container::iterator(__i));\n     }\n+#endif\n \n   // @} group iterators\n "}, {"sha": "63b7854a0c974510c5129baa330e9a7768daa21c", "filename": "libstdc++-v3/testsuite/24_iterators/back_insert_iterator/constexpr.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fback_insert_iterator%2Fconstexpr.cc?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+struct container\n+{\n+  using value_type = int;\n+\n+  constexpr int* begin() { return std::begin(data); }\n+  constexpr int* end() { return next; }\n+\n+  constexpr void push_back(int val)\n+  {\n+    if (next == std::end(data))\n+      throw val;\n+    *next++ = val;\n+  }\n+\n+  int data[3];\n+  int* next = std::begin(data);\n+};\n+\n+constexpr bool\n+test01()\n+{\n+  container c;\n+  std::back_insert_iterator<container> iter;\n+  iter = std::back_inserter(c);\n+  *iter++ = 1;\n+  int i = 2;\n+  *iter = i;\n+  *++iter = 3;\n+  return c.data[0] == 1 && c.data[1] == 2 && c.data[2] == 3;\n+}\n+\n+static_assert( test01() );"}, {"sha": "62bddad9f7c91a5e1dd1a493b1b67a844ad6448f", "filename": "libstdc++-v3/testsuite/24_iterators/front_insert_iterator/constexpr.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Ffront_insert_iterator%2Fconstexpr.cc?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+struct container\n+{\n+  using value_type = int;\n+\n+  constexpr int* begin() { return next; }\n+  constexpr int* end() { return std::end(data); }\n+\n+  constexpr void push_front(int val)\n+  {\n+    if (next == std::begin(data))\n+      throw val;\n+    *--next = val;\n+  }\n+\n+  int data[3];\n+  int* next = std::end(data);\n+};\n+\n+constexpr bool\n+test01()\n+{\n+  container c;\n+  std::front_insert_iterator<container> iter;\n+  iter = std::front_inserter(c);\n+  *iter++ = 1;\n+  int i = 2;\n+  *iter = i;\n+  *++iter = 3;\n+  return c.data[0] == 3 && c.data[1] == 2 && c.data[2] == 1;\n+}\n+\n+static_assert( test01() );"}, {"sha": "590f3050efc460856211c8fb1f178ad05c2b96be", "filename": "libstdc++-v3/testsuite/24_iterators/headers/iterator/synopsis_c++17.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fheaders%2Fiterator%2Fsynopsis_c%2B%2B17.cc?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -45,6 +45,10 @@ namespace std {\n   // C++17 24.5, iterator adaptors:\n   template <class Iterator> class reverse_iterator;\n \n+#if __cplusplus == 201703L\n+  // These operators are constrained in C++20 mode and so don't match\n+  // these signatures.\n+\n   template <class Iterator1, class Iterator2>\n   constexpr\n   bool operator==(const reverse_iterator<Iterator1>& x,\n@@ -74,6 +78,7 @@ namespace std {\n   constexpr\n   bool operator<=(const reverse_iterator<Iterator1>& x,\n \t\t  const reverse_iterator<Iterator2>& y);\n+#endif // C++17\n \n   template <class Iterator1, class Iterator2>\n   constexpr auto\n@@ -92,18 +97,30 @@ namespace std {\n   template <class Container> class back_insert_iterator;\n \n   template <class Container>\n+#if __cplusplus > 201703L\n+  constexpr\n+#endif\n   back_insert_iterator<Container> back_inserter(Container& x);\n \n   template <class Container> class front_insert_iterator;\n \n   template <class Container>\n+#if __cplusplus > 201703L\n+  constexpr\n+#endif\n   front_insert_iterator<Container> front_inserter(Container& x);\n \n   template <class Container> class insert_iterator;\n \n+#if __cplusplus == 201703L\n+  // This function template is defined differently  in C++20 mode and so\n+  // doesn't match this signature.\n   template <class Container, class Iterator>\n   insert_iterator<Container> inserter(Container& x, Iterator i);\n \n+  // These operators are constrained in C++20 mode and so don't match\n+  // these signatures.\n+\n   template <class Iterator> class move_iterator;\n \n   template <class Iterator1, class Iterator2>\n@@ -135,6 +152,7 @@ namespace std {\n   constexpr\n   bool operator>=(const move_iterator<Iterator1>& x,\n \t\t  const move_iterator<Iterator2>& y);\n+#endif // C++17\n \n   template <class Iterator1, class Iterator2>\n   constexpr"}, {"sha": "b4fc1b5e4e730ce7f961d433ffeea46169da22af", "filename": "libstdc++-v3/testsuite/24_iterators/insert_iterator/constexpr.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6076b5bc1e0b689eaa8521571b0516de336553/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Finsert_iterator%2Fconstexpr.cc?ref=ae6076b5bc1e0b689eaa8521571b0516de336553", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <iterator>\n+\n+struct container\n+{\n+  using value_type = int;\n+\n+  constexpr int* begin() { return std::begin(data); }\n+  constexpr int* end() { return last; }\n+\n+  constexpr int* insert(int* pos, int val)\n+  {\n+    if (last == std::end(data))\n+      throw val;\n+    for (int* i = last++; i != pos; --i)\n+      i[1] = i[0];\n+    *pos = val;\n+    return pos;\n+  }\n+\n+  int data[3];\n+  int* last = std::begin(data);\n+};\n+\n+constexpr bool\n+test01()\n+{\n+  container c;\n+  std::insert_iterator<container> iter;\n+  iter = std::inserter(c, c.begin());\n+  *iter++ = 1;\n+  int i = 2;\n+  *iter = i;\n+  *++iter = 3;\n+  return c.data[0] == 1 && c.data[1] == 2 && c.data[2] == 3;\n+}\n+\n+static_assert( test01() );"}]}