{"sha": "dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNiOTFlYmVkM2E5MzQzOWVmNDg5MmMxODQyMGM4ZmQ0Mjk1YTFhMw==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T15:23:46Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2009-07-07T15:23:46Z"}, "message": "pretty-print.c (pp_base_format): Remove %H.\n\n2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* pretty-print.c (pp_base_format): Remove %H.\n\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n\tgcc_cxxdiag_char_table): Likewise.\n\t(init_dynamic_diag_info): Likewise.\n\t* config/mep/mep.c (mep_select_section): Likewise.\n\t\ntestsuite/\t\n\t* gcc.dg/format/gcc_diag-1.c: Remove tests for %H.\n\nFrom-SVN: r149333", "tree": {"sha": "48fc147b480fccd2c625934e1915472ecd6a3e42", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fc147b480fccd2c625934e1915472ecd6a3e42"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/comments", "author": null, "committer": null, "parents": [{"sha": "cf400ddbafde8ae44c3b09c71e8305cd73c21688", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf400ddbafde8ae44c3b09c71e8305cd73c21688", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf400ddbafde8ae44c3b09c71e8305cd73c21688"}], "stats": {"total": 89, "additions": 16, "deletions": 73}, "files": [{"sha": "9063958ffbf44283c8ff53ddc5ccc1071c3a2fed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -1,3 +1,11 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* pretty-print.c (pp_base_format): Remove %H.\n+\t* c-format.c (gcc_diag_char_table, gcc_tdiag_char_table,\n+\tgcc_cxxdiag_char_table): Likewise.\n+\t(init_dynamic_diag_info): Likewise.\n+\t* config/mep/mep.c (mep_select_section): Likewise.\n+\n 2009-07-07  Duncan Sands  <baldrick@free.fr>\n \n         * final.c (pass_clean_state): Give the pass a name."}, {"sha": "1f3748ab1d7c38955814a97148777884c0ef4597", "filename": "gcc/c-format.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -561,9 +561,6 @@ static const format_char_info gcc_diag_char_table[] =\n \n   /* Custom conversion specifiers.  */\n \n-  /* %H will require \"location_t\" at runtime.  */\n-  { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-\n   /* These will require a \"tree\" at runtime.  */\n   { \"JK\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",    \"\",   NULL },\n \n@@ -584,9 +581,6 @@ static const format_char_info gcc_tdiag_char_table[] =\n \n   /* Custom conversion specifiers.  */\n \n-  /* %H will require \"location_t\" at runtime.  */\n-  { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-\n   /* These will require a \"tree\" at runtime.  */\n   { \"DFJKTE\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n@@ -607,9 +601,6 @@ static const format_char_info gcc_cdiag_char_table[] =\n \n   /* Custom conversion specifiers.  */\n \n-  /* %H will require \"location_t\" at runtime.  */\n-  { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-\n   /* These will require a \"tree\" at runtime.  */\n   { \"DEFJKT\", 0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+\", \"\",   NULL },\n \n@@ -630,9 +621,6 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n \n   /* Custom conversion specifiers.  */\n \n-  /* %H will require \"location_t\" at runtime.  */\n-  { \"H\",   0, STD_C89, { T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q\",  \"\",   NULL },\n-\n   /* These will require a \"tree\" at runtime.  */\n   { \"ADEFJKTV\",0,STD_C89,{ T89_V,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"q+#\",   \"\",   NULL },\n \n@@ -2608,12 +2596,6 @@ init_dynamic_diag_info (void)\n \t\t     xmemdup (gcc_diag_char_table,\n \t\t\t      sizeof (gcc_diag_char_table),\n \t\t\t      sizeof (gcc_diag_char_table));\n-      if (loc)\n-\t{\n-\t  i = find_char_info_specifier_index (diag_fci, 'H');\n-\t  diag_fci[i].types[0].type = &loc;\n-\t  diag_fci[i].pointer_count = 1;\n-\t}\n       if (t)\n \t{\n \t  i = find_char_info_specifier_index (diag_fci, 'J');\n@@ -2631,12 +2613,6 @@ init_dynamic_diag_info (void)\n \t\t      xmemdup (gcc_tdiag_char_table,\n \t\t\t       sizeof (gcc_tdiag_char_table),\n \t\t\t       sizeof (gcc_tdiag_char_table));\n-      if (loc)\n-\t{\n-\t  i = find_char_info_specifier_index (tdiag_fci, 'H');\n-\t  tdiag_fci[i].types[0].type = &loc;\n-\t  tdiag_fci[i].pointer_count = 1;\n-\t}\n       if (t)\n \t{\n \t  /* All specifiers taking a tree share the same struct.  */\n@@ -2658,12 +2634,6 @@ init_dynamic_diag_info (void)\n \t\t      xmemdup (gcc_cdiag_char_table,\n \t\t\t       sizeof (gcc_cdiag_char_table),\n \t\t\t       sizeof (gcc_cdiag_char_table));\n-      if (loc)\n-\t{\n-\t  i = find_char_info_specifier_index (cdiag_fci, 'H');\n-\t  cdiag_fci[i].types[0].type = &loc;\n-\t  cdiag_fci[i].pointer_count = 1;\n-\t}\n       if (t)\n \t{\n \t  /* All specifiers taking a tree share the same struct.  */\n@@ -2685,12 +2655,6 @@ init_dynamic_diag_info (void)\n \t\t\txmemdup (gcc_cxxdiag_char_table,\n \t\t\t\t sizeof (gcc_cxxdiag_char_table),\n \t\t\t\t sizeof (gcc_cxxdiag_char_table));\n-      if (loc)\n-\t{\n-\t  i = find_char_info_specifier_index (cxxdiag_fci, 'H');\n-\t  cxxdiag_fci[i].types[0].type = &loc;\n-\t  cxxdiag_fci[i].pointer_count = 1;\n-\t}\n       if (t)\n \t{\n \t  /* All specifiers taking a tree share the same struct.  */"}, {"sha": "8a705ee8ec54a38c861d268eeaf8ea4c4526a173", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -4601,13 +4601,13 @@ mep_select_section (tree decl, int reloc ATTRIBUTE_UNUSED,\n \n \t  case 'i':\n \t  case 'I':\n-\t    error (\"%Hvariable %D of type %<io%> must be uninitialized\",\n-\t\t   &DECL_SOURCE_LOCATION (decl), decl);\n+\t    error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t      \"variable %D of type %<io%> must be uninitialized\", decl);\n \t    return data_section;\n \n \t  case 'c':\n-\t    error (\"%Hvariable %D of type %<cb%> must be uninitialized\",\n-\t\t   &DECL_SOURCE_LOCATION (decl), decl);\n+\t    error_at (DECL_SOURCE_LOCATION (decl),\n+\t\t      \"variable %D of type %<cb%> must be uninitialized\", decl);\n \t    return data_section;\n \t  }\n     }"}, {"sha": "9ec8030ab7fdc996bff8398ad774af53a658f6d9", "filename": "gcc/pretty-print.c", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fpretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Fpretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpretty-print.c?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -190,7 +190,6 @@ pp_base_indent (pretty_printer *pp)\n    %.*s: a substring the length of which is specified by an argument\n \t integer.\n    %Ns: likewise, but length specified as constant in the format string.\n-   %H: location_t.\n    %J: a decl tree, from which DECL_SOURCE_LOCATION will be recorded.\n    %K: a statement, from which EXPR_LOCATION and TREE_BLOCK will be recorded.\n    Flag 'q': quote formatted text (must come immediately after '%').\n@@ -476,14 +475,6 @@ pp_base_format (pretty_printer *pp, text_info *text)\n \t      (pp, *text->args_ptr, precision, unsigned, \"x\");\n \t  break;\n \n-\tcase 'H':\n-\t  {\n-\t    location_t *locus = va_arg (*text->args_ptr, location_t *);\n-\t    gcc_assert (text->locus != NULL);\n-\t    *text->locus = *locus;\n-\t  }\n-\t  break;\n-\n \tcase 'J':\n \t  {\n \t    tree t = va_arg (*text->args_ptr, tree);"}, {"sha": "f533cf4367a6607b6cc50651e68df9c1eac761ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -1,3 +1,7 @@\n+2009-07-07  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* gcc.dg/format/gcc_diag-1.c: Remove tests for %H.\n+\n 2009-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/40669"}, {"sha": "24426047b491d2ecd25493bfe80d8477f5bdf4cc", "filename": "gcc/testsuite/gcc.dg/format/gcc_diag-1.c", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb91ebed3a93439ef4892c18420c8fd4295a1a3/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_diag-1.c?ref=dcb91ebed3a93439ef4892c18420c8fd4295a1a3", "patch": "@@ -69,10 +69,6 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   tdiag (\"%m\");\n   cdiag (\"%m\");\n   cxxdiag (\"%m\");\n-  diag (\"%H\", loc);\n-  tdiag (\"%H\", loc);\n-  cdiag (\"%H\", loc);\n-  cxxdiag (\"%H\", loc);\n   diag (\"%J\", t1);\n   tdiag (\"%J\", t1);\n   cdiag (\"%J\", t1);\n@@ -107,34 +103,14 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   tdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n   cxxdiag (\"%+m\"); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  diag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n-  tdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n-  cdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n-  cxxdiag (\"%H\"); /* { dg-warning \"format\" \"missing arg\" } */\n   diag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   tdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n   cxxdiag (\"%J\"); /* { dg-warning \"format\" \"missing arg\" } */\n-  diag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n-  tdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n-  cdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n-  cxxdiag (\"%H\", i); /* { dg-warning \"format\" \"wrong arg\" } */\n-  diag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n-  tdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n-  cdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n-  cxxdiag (\"%H\", p); /* { dg-warning \"format\" \"wrong arg\" } */\n   diag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   tdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   cdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n   cxxdiag (\"%J\", loc); /* { dg-warning \"format\" \"wrong arg\" } */\n-  diag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  tdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  cdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  cxxdiag (\"%#H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  diag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  tdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  cdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n-  cxxdiag (\"%+H\", loc); /* { dg-warning \"format\" \"bogus modifier\" } */\n   diag (\"%D\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n   tdiag (\"%A\", t1); /* { dg-warning \"format\" \"bogus tree\" } */\n   tdiag (\"%E\", t1);"}]}