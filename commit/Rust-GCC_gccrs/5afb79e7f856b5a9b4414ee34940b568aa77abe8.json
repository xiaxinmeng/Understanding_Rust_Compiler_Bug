{"sha": "5afb79e7f856b5a9b4414ee34940b568aa77abe8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFmYjc5ZTdmODU2YjVhOWI0NDE0ZWUzNDk0MGI1NjhhYTc3YWJlOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@casey.cygnus.com", "date": "1999-12-16T00:09:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-12-16T00:09:35Z"}, "message": "function.c (retrofit_block): Abort if we don't find a suitable insn.\n\n        * function.c (retrofit_block): Abort if we don't find a suitable insn.\n        (insert_block_after_note): Abort if we don't have a previous block.\n        Remove FN parameter.\n        * function.h: Adjust.\n\n        * tree.c (walk_tree): Walk operand subtrees in forward order.\n        * optimize.c (expand_call_inline): Likewise.\n        (optimize_function): Initialize id->scope_stmt to something useful.\n        (remap_block): Assume id->scope_stmt has a useful value.\n\nFrom-SVN: r30965", "tree": {"sha": "8f73132ac5140a32542ad1c3a7a0a0ab4b8f62b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f73132ac5140a32542ad1c3a7a0a0ab4b8f62b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5afb79e7f856b5a9b4414ee34940b568aa77abe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afb79e7f856b5a9b4414ee34940b568aa77abe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5afb79e7f856b5a9b4414ee34940b568aa77abe8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5afb79e7f856b5a9b4414ee34940b568aa77abe8/comments", "author": null, "committer": null, "parents": [{"sha": "6150df627a7fb825a10280e54c35c8250e69bae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6150df627a7fb825a10280e54c35c8250e69bae0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6150df627a7fb825a10280e54c35c8250e69bae0"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "190810b4b0557c66d13d50d6a29eeb57b9349eb8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -1,3 +1,10 @@\n+1999-12-15  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* function.c (retrofit_block): Abort if we don't find a suitable insn.\n+\t(insert_block_after_note): Abort if we don't have a previous block.\n+\tRemove FN parameter.\n+\t* function.h: Adjust.\n+\n 1999-12-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* builtins.c (expand_builtin_mathfn): Make sure not to expand the"}, {"sha": "6069bf07fab289387395a4c5c8cb8f1a58be68db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -1,3 +1,10 @@\n+1999-12-15  Jason Merrill  <jason@casey.cygnus.com>\n+\n+\t* tree.c (walk_tree): Walk operand subtrees in forward order.\n+\t* optimize.c (expand_call_inline): Likewise.\n+\t(optimize_function): Initialize id->scope_stmt to something useful.\n+\t(remap_block): Assume id->scope_stmt has a useful value.\n+\n 1999-12-15  Nathan Sidwell  <nathan@acm.org>\n \n \t* typeck.c (build_c_cast): Expand warning message. Move pointer\n@@ -67,7 +74,6 @@\n \t(reinit_parse_for_expr): Use.\n \t(check_newline): Use.\n \n->>>>>>> 1.1463\n 1999-12-13  Mark Mitchell  <mark@codesourcery.com>\n \n \t* optimize.c (initialize_inlined_parameters): Take FN to which the"}, {"sha": "7eae09df3fc2cbaea1d13154bee638437236d26a", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -176,13 +176,9 @@ remap_block (scope_stmt, decls, id)\n       /* We put the BLOCK_VARS in reverse order; fix that now.  */\n       BLOCK_VARS (new_block) = nreverse (BLOCK_VARS (new_block));\n       /* Graft the new block into the tree.  */\n-      insert_block_after_note (new_block, \n-\t\t\t       (id->scope_stmt \n-\t\t\t\t? SCOPE_STMT_BLOCK (id->scope_stmt)\n-\t\t\t\t: NULL_TREE),\n-\t\t\t       (id->scope_stmt\n-\t\t\t\t? SCOPE_BEGIN_P (id->scope_stmt) : 1),\n-\t\t\t       VARRAY_TREE (id->fns, 0));\n+      insert_block_after_note (new_block,\n+\t\t\t       SCOPE_STMT_BLOCK (id->scope_stmt),\n+\t\t\t       SCOPE_BEGIN_P (id->scope_stmt));\n       /* Remember that this is now the last scope statement with\n \t an associated block.  */\n       id->scope_stmt = scope_stmt;\n@@ -536,15 +532,15 @@ expand_call_inline (tp, walk_subtrees, data)\n      inside the body of a TARGET_EXPR.  */\n   if (TREE_CODE (*tp) == TARGET_EXPR)\n     {\n-      int i;\n+      int i, len = first_rtl_op (TARGET_EXPR);\n \n       /* We're walking our own subtrees.  */\n       *walk_subtrees = 0;\n \n       /* Actually walk over them.  This loop is the body of\n \t walk_trees, omitting the case where the TARGET_EXPR\n \t itself is handled.  */\n-      for (i = first_rtl_op (TARGET_EXPR) - 1; i >= 0; --i)\n+      for (i = 0; i < len; ++i)\n \t{\n \t  if (i == 2)\n \t    ++id->in_target_cleanup_p;\n@@ -615,7 +611,8 @@ expand_call_inline (tp, walk_subtrees, data)\n   id->scope_stmt = scope_stmt;\n \n   /* Tell the debugging backends that this block represents the\n-     outermost scope of the inlined function.  */\n+     outermost scope of the inlined function.  FIXME what to do for\n+     inlines in cleanups?  */\n   if (SCOPE_STMT_BLOCK (scope_stmt))\n     BLOCK_ABSTRACT_ORIGIN (SCOPE_STMT_BLOCK (scope_stmt)) = DECL_ORIGIN (fn);\n \n@@ -725,6 +722,13 @@ optimize_function (fn)\n \t    VARRAY_PUSH_TREE (id.fns, s->function_decl);\n \t    prev_fn = s->function_decl;\n \t  }\n+\n+      /* Initialize id->scope_stmt with a fake SCOPE_STMT for the outermost\n+\t block of the function (i.e. the BLOCK with __FUNCTION__ et al).  */\n+      id.scope_stmt = build_min_nt (SCOPE_STMT,\n+\t\t\t\t    BLOCK_SUBBLOCKS (DECL_INITIAL (fn)));\n+      SCOPE_BEGIN_P (id.scope_stmt) = 1;\n+\n       /* Replace all calls to inline functions with the bodies of those\n \t functions.  */\n       expand_calls_inline (&DECL_SAVED_TREE (fn), &id);"}, {"sha": "f730b21b614be239382083701a7ef69d10de96c4", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -1623,21 +1623,19 @@ walk_tree (tp, func, data)\n       || TREE_CODE_CLASS (code) == 'r'\n       || TREE_CODE_CLASS (code) == 's')\n     {\n-      int i;\n+      int i, len;\n \n       /* Walk over all the sub-trees of this operand.  */\n-      i = first_rtl_op (code) - 1;\n+      len = first_rtl_op (code);\n       /* TARGET_EXPRs are peculiar: operands 1 and 3 can be the same.\n \t But, we only want to walk once.  */\n       if (code == TARGET_EXPR\n \t  && TREE_OPERAND (*tp, 3) == TREE_OPERAND (*tp, 1))\n-\t--i;\n-      /* Go through the subtrees.  */\n-      while (i >= 0)\n-\t{\n-\t  WALK_SUBTREE (TREE_OPERAND (*tp, i));\n-\t  --i;\n-\t}\n+\t--len;\n+      /* Go through the subtrees.  We need to do this in forward order so\n+         that the scope of a FOR_EXPR is handled properly.  */\n+      for (i = 0; i < len; ++i)\n+\tWALK_SUBTREE (TREE_OPERAND (*tp, i));\n \n       /* For statements, we also walk the chain so that we cover the\n \t entire statement tree.  */"}, {"sha": "321120457b971eea681f0f30f0b09767e0348ef7", "filename": "gcc/function.c", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -5495,22 +5495,22 @@ round_trampoline_addr (tramp)\n \f\n /* Insert the BLOCK in the block-tree, knowing that the previous\n    block-note is for OLD_BLOCK.  BEGIN_P is non-zero if the previous\n-   block-note was the for the beginning of a BLOCK.  FN is the\n-   FUNCTION_DECL into which the BLOCK is being inserted.  */\n+   block-note was the for the beginning of a BLOCK.  */\n \n void \n-insert_block_after_note (block, old_block, begin_p, fn)\n+insert_block_after_note (block, old_block, begin_p)\n      tree block;\n      tree old_block;\n      int begin_p;\n-     tree fn;\n {\n   if (begin_p)\n     {\n-      /* If there was no previous block, use the top-level block for\n-\t the function.  */\n+      /* If there was no previous block, something's gone terribly\n+         wrong.  We used to try to use DECL_INITIAL for the current\n+         function, but that will never be correct, and completely\n+         hoses the block structure.  */\n       if (!old_block)\n-\told_block = DECL_INITIAL (fn);\n+\tabort ();\n \n       BLOCK_SUPERCONTEXT (block) = old_block;\n       BLOCK_CHAIN (block) = BLOCK_SUBBLOCKS (old_block);\n@@ -5545,12 +5545,12 @@ retrofit_block (block, last_insn)\n \t    || NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_END))\n       break;\n \n+  if (insn == NULL_RTX)\n+    abort ();\n+\n   insert_block_after_note (block, \n-\t\t\t   insn ? NOTE_BLOCK (insn) : NULL_TREE,\n-\t\t\t   insn \n-\t\t\t   ? (NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG)\n-\t\t\t   : 1,\n-\t\t\t   current_function_decl);\n+\t\t\t   NOTE_BLOCK (insn),\n+\t\t\t   NOTE_LINE_NUMBER (insn) == NOTE_INSN_BLOCK_BEG);\n }\n \n /* The functions identify_blocks and reorder_blocks provide a way to"}, {"sha": "0e2b7b8bf3aa1f0ce6e2294977d5d00a1a281416", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5afb79e7f856b5a9b4414ee34940b568aa77abe8/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=5afb79e7f856b5a9b4414ee34940b568aa77abe8", "patch": "@@ -1,5 +1,5 @@\n /* Structure for saving state for a nested function.\n-   Copyright (C) 1989, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1989, 92-97, 1998, 1999 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -545,9 +545,8 @@ extern struct function *outer_function_chain;\n extern void identify_blocks PROTO((tree, rtx));\n /* Insert the BLOCK in the block-tree, knowing that the previous\n    block-note is for OLD_BLOCK.  BEGIN_P is non-zero if the previous\n-   block-note was the for the beginning of a BLOCK.  FN is the\n-   FUNCTION_DECL into which the BLOCK is being inserted.  */\n-extern void insert_block_after_note PROTO((tree, tree, int, tree));\n+   block-note was the for the beginning of a BLOCK.  */\n+extern void insert_block_after_note PROTO((tree, tree, int));\n /* Insert a new BLOCK at an appropriate place in the block tree.  */\n extern void retrofit_block PROTO((tree, rtx));\n "}]}