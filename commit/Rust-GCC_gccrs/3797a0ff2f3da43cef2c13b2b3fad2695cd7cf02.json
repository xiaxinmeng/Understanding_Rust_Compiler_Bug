{"sha": "3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5N2EwZmYyZjNkYTQzY2VmMmMxM2IyYjNmYWQyNjk1Y2Q3Y2YwMg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-09-06T16:49:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-09-06T16:49:48Z"}, "message": "re PR c++/41144 (ice for legal code with -O2 in get_alias_set)\n\n2009-09-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/41144\n\t* tree.c (build_array_type): Do not record types marked\n\twith structural equality in the canonical type hashtable.\n\n\t* g++.dg/torture/pr41144.C: New testcase.\n\nFrom-SVN: r151461", "tree": {"sha": "a72925e0455fa9de377a22b3f81c4b9a32bdf2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a72925e0455fa9de377a22b3f81c4b9a32bdf2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3c45b96b27d5be00740b13ad80ae6c6be9c96dbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c45b96b27d5be00740b13ad80ae6c6be9c96dbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c45b96b27d5be00740b13ad80ae6c6be9c96dbc"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "76d93f60fd729b441dfb7bf83ea765aba0e14551", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "patch": "@@ -1,3 +1,9 @@\n+2009-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41144\n+\t* tree.c (build_array_type): Do not record types marked\n+\twith structural equality in the canonical type hashtable.\n+\n 2009-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41261"}, {"sha": "b14aaf087bd80bcf630f1ad51615202f741642a4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "patch": "@@ -1,3 +1,8 @@\n+2009-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/41144\n+\t* g++.dg/torture/pr41144.C: New testcase.\n+\n 2009-09-06  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/41261"}, {"sha": "64dc117d7c69120fc8669d03de1b6cd1d6eb1566", "filename": "gcc/testsuite/g++.dg/torture/pr41144.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41144.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41144.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr41144.C?ref=3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+\n+struct rgba8;\n+template<class ColorT> class span_gouraud     {\n+public:\n+    struct coord_type { };\n+    coord_type m_coord[3];\n+};\n+template<class ColorT> class span_gouraud_rgba : public span_gouraud<ColorT>   \n+{\n+  typedef ColorT color_type;\n+  typedef span_gouraud<color_type> base_type;\n+  typedef typename base_type::coord_type coord_type;\n+public:\n+  void prepare()         {\n+      coord_type coord[3];\n+  }\n+};\n+void the_application() {\n+    typedef span_gouraud_rgba<rgba8> gouraud_span_gen_type;\n+    gouraud_span_gen_type span_gouraud;\n+    span_gouraud.prepare();\n+}"}, {"sha": "a036439cc3f7f9b97e272ae3d48e26ea5ef7b5b9", "filename": "gcc/tree.c", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3797a0ff2f3da43cef2c13b2b3fad2695cd7cf02", "patch": "@@ -6906,44 +6906,29 @@ build_array_type (tree elt_type, tree index_type)\n   t = make_node (ARRAY_TYPE);\n   TREE_TYPE (t) = elt_type;\n   TYPE_DOMAIN (t) = index_type;\n-  \n-  if (index_type == 0)\n-    {\n-      tree save = t;\n-      hashcode = iterative_hash_object (TYPE_HASH (elt_type), hashcode);\n-      t = type_hash_canon (hashcode, t);\n-      if (save == t)\n-\tlayout_type (t);\n-\n-      if (TYPE_CANONICAL (t) == t)\n-\t{\n-\t  if (TYPE_STRUCTURAL_EQUALITY_P (elt_type))\n-\t    SET_TYPE_STRUCTURAL_EQUALITY (t);\n-\t  else if (TYPE_CANONICAL (elt_type) != elt_type)\n-\t    TYPE_CANONICAL (t) \n-\t      = build_array_type (TYPE_CANONICAL (elt_type), index_type);\n-\t}\n+  layout_type (t);\n \n-      return t;\n-    }\n+  /* If the element type is incomplete at this point we get marked for\n+     structural equality.  Do not record these types in the canonical\n+     type hashtable.  */\n+  if (TYPE_STRUCTURAL_EQUALITY_P (t))\n+    return t;\n \n   hashcode = iterative_hash_object (TYPE_HASH (elt_type), hashcode);\n-  hashcode = iterative_hash_object (TYPE_HASH (index_type), hashcode);\n+  if (index_type)\n+    hashcode = iterative_hash_object (TYPE_HASH (index_type), hashcode);\n   t = type_hash_canon (hashcode, t);\n \n-  if (!COMPLETE_TYPE_P (t))\n-    layout_type (t);\n-\n   if (TYPE_CANONICAL (t) == t)\n     {\n       if (TYPE_STRUCTURAL_EQUALITY_P (elt_type)\n-\t  || TYPE_STRUCTURAL_EQUALITY_P (index_type))\n+\t  || (index_type && TYPE_STRUCTURAL_EQUALITY_P (index_type)))\n \tSET_TYPE_STRUCTURAL_EQUALITY (t);\n       else if (TYPE_CANONICAL (elt_type) != elt_type\n-\t       || TYPE_CANONICAL (index_type) != index_type)\n+\t       || (index_type && TYPE_CANONICAL (index_type) != index_type))\n \tTYPE_CANONICAL (t) \n \t  = build_array_type (TYPE_CANONICAL (elt_type),\n-\t\t\t      TYPE_CANONICAL (index_type));\n+\t\t\t      index_type ? TYPE_CANONICAL (index_type) : NULL);\n     }\n \n   return t;"}]}