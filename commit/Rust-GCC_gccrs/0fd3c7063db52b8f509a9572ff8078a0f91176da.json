{"sha": "0fd3c7063db52b8f509a9572ff8078a0f91176da", "node_id": "C_kwDOANBUbNoAKDBmZDNjNzA2M2RiNTJiOGY1MDlhOTU3MmZmODA3OGEwZjkxMTc2ZGE", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-06-02T17:52:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-06-03T08:31:01Z"}, "message": "Misc range temporary fixes.\n\nThis fixes a couples places that were using int_range_max, but needed\na generic temporary.  Found while merging the frange work.\n\nAlso, copying between range temporaries is actually useful :).\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* gimple-range-cache.cc (ranger_cache::range_from_dom): Use\n\tValue_Range.\n\t* gimple-range.cc (gimple_ranger::register_inferred_ranges): Same.\n\t* value-range.h (Value_Range::Value_Range): Implement copy\n\tconstructor for Value_Range.", "tree": {"sha": "f9937a174a2a9768856cf73b4a4413a3eb60ce38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9937a174a2a9768856cf73b4a4413a3eb60ce38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0fd3c7063db52b8f509a9572ff8078a0f91176da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd3c7063db52b8f509a9572ff8078a0f91176da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd3c7063db52b8f509a9572ff8078a0f91176da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd3c7063db52b8f509a9572ff8078a0f91176da/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4fa81ba63299030d068327f3d90920de8c54d1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4fa81ba63299030d068327f3d90920de8c54d1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4fa81ba63299030d068327f3d90920de8c54d1c"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "f3494363a101670afe66374ecf2f2a3f58cc2f04", "filename": "gcc/gimple-range-cache.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fgimple-range-cache.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fgimple-range-cache.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-cache.cc?ref=0fd3c7063db52b8f509a9572ff8078a0f91176da", "patch": "@@ -1372,7 +1372,7 @@ ranger_cache::range_from_dom (vrange &r, tree name, basic_block start_bb,\n \t      // each incoming edge now and accumulate the results.\n \t      r.set_undefined ();\n \t      edge_iterator ei;\n-\t      int_range_max er;\n+\t      Value_Range er (TREE_TYPE (name));\n \t      FOR_EACH_EDGE (e, ei, prev_bb->preds)\n \t\t{\n \t\t  edge_range (er, e, name, RFD_READ_ONLY);"}, {"sha": "f3a46555f91cb21ef79e721a9c97f5e9e18b9484", "filename": "gcc/gimple-range.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fgimple-range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fgimple-range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.cc?ref=0fd3c7063db52b8f509a9572ff8078a0f91176da", "patch": "@@ -461,17 +461,20 @@ gimple_ranger::register_inferred_ranges (gimple *s)\n   tree lhs = gimple_get_lhs (s);\n   if (lhs)\n     {\n-      int_range_max tmp;\n+      Value_Range tmp (TREE_TYPE (lhs));\n       if (range_of_stmt (tmp, s, lhs) && !tmp.varying_p ()\n \t  && update_global_range (tmp, lhs) && dump_file)\n \t{\n-\t  value_range vr = tmp;\n+\t  // ?? This section should be adjusted when non-iranges can\n+\t  // be exported.  For now, the only way update_global_range\n+\t  // above can succeed is with an irange so this is safe.\n+\t  value_range vr = as_a <irange> (tmp);\n \t  fprintf (dump_file, \"Global Exported: \");\n \t  print_generic_expr (dump_file, lhs, TDF_SLIM);\n \t  fprintf (dump_file, \" = \");\n \t  vr.dump (dump_file);\n \t  int_range_max same = vr;\n-\t  if (same != tmp)\n+\t  if (same != as_a <irange> (tmp))\n \t    {\n \t      fprintf (dump_file, \" ...  irange was : \");\n \t      tmp.dump (dump_file);"}, {"sha": "dc6f6b0f9359414f5fe9aeeb1587471a218c36d3", "filename": "gcc/value-range.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fvalue-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0fd3c7063db52b8f509a9572ff8078a0f91176da/gcc%2Fvalue-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-range.h?ref=0fd3c7063db52b8f509a9572ff8078a0f91176da", "patch": "@@ -314,6 +314,7 @@ class Value_Range\n   Value_Range ();\n   Value_Range (const vrange &r);\n   Value_Range (tree type);\n+  Value_Range (const Value_Range &);\n   void set_type (tree type);\n   vrange& operator= (const vrange &);\n   bool operator== (const Value_Range &r) const;\n@@ -344,7 +345,6 @@ class Value_Range\n   unsupported_range m_unsupported;\n   vrange *m_vrange;\n   int_range_max m_irange;\n-  DISABLE_COPY_AND_ASSIGN (Value_Range);\n };\n \n inline\n@@ -370,6 +370,12 @@ Value_Range::Value_Range (tree type)\n   init (type);\n }\n \n+inline\n+Value_Range::Value_Range (const Value_Range &r)\n+{\n+  m_vrange = r.m_vrange;\n+}\n+\n // Initialize object so it is possible to store temporaries of TYPE\n // into it.\n "}]}