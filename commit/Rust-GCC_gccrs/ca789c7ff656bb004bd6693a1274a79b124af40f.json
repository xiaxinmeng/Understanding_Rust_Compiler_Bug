{"sha": "ca789c7ff656bb004bd6693a1274a79b124af40f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3ODljN2ZmNjU2YmIwMDRiZDY2OTNhMTI3NGE3OWIxMjRhZjQwZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2008-06-13T10:27:29Z"}, "committer": {"name": "Olivier Hainque", "email": "hainque@gcc.gnu.org", "date": "2008-06-13T10:27:29Z"}, "message": "utils.c (rest_of_record_type_compilation): When computing encodings for the components of a variable size type...\n\n2008-06-13  Olivier Hainque  <hainque@adacore.com>\n\n        * utils.c (rest_of_record_type_compilation): When computing\n        encodings for the components of a variable size type, early\n        strip conversions on the current position expression to make\n        sure it's shape is visible.  Use remove_conversions for this\n        purpose.\n\nFrom-SVN: r136748", "tree": {"sha": "d01b599fca90dca4cb0bf3a3297a7c9801b0c277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d01b599fca90dca4cb0bf3a3297a7c9801b0c277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca789c7ff656bb004bd6693a1274a79b124af40f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca789c7ff656bb004bd6693a1274a79b124af40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca789c7ff656bb004bd6693a1274a79b124af40f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca789c7ff656bb004bd6693a1274a79b124af40f/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9133c85e1a42213e7e09ba917fae7e57e06a236c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9133c85e1a42213e7e09ba917fae7e57e06a236c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9133c85e1a42213e7e09ba917fae7e57e06a236c"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "f0eb327e43dce9fede2b366f3b54429db23d52bb", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca789c7ff656bb004bd6693a1274a79b124af40f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca789c7ff656bb004bd6693a1274a79b124af40f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca789c7ff656bb004bd6693a1274a79b124af40f", "patch": "@@ -1,3 +1,11 @@\n+2008-06-13  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* utils.c (rest_of_record_type_compilation): When computing\n+\tencodings for the components of a variable size type, early\n+\tstrip conversions on the current position expression to make\n+\tsure it's shape is visible.  Use remove_conversions for this\n+\tpurpose.\n+\n 2008-06-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <E_Record_Subtype>: In the case of a"}, {"sha": "f255d37d6efa0ee9755da13b3118792a61a39dd2", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca789c7ff656bb004bd6693a1274a79b124af40f/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca789c7ff656bb004bd6693a1274a79b124af40f/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=ca789c7ff656bb004bd6693a1274a79b124af40f", "patch": "@@ -1085,6 +1085,10 @@ rest_of_record_type_compilation (tree record_type)\n \n \t  If this is a union, the position can be taken as zero. */\n \n+\t  /* Some computations depend on the shape of the position expression,\n+\t     so strip conversions to make sure it's exposed.  */\n+\t  curpos = remove_conversions (curpos, true);\n+\n \t  if (TREE_CODE (new_record_type) == UNION_TYPE)\n \t    pos = bitsize_zero_node, align = 0;\n \t  else\n@@ -1096,13 +1100,9 @@ rest_of_record_type_compilation (tree record_type)\n \t      tree offset = TREE_OPERAND (curpos, 0);\n \t      align = tree_low_cst (TREE_OPERAND (curpos, 1), 1);\n \n-\t      /* Strip off any conversions.  */\n-\t      while (TREE_CODE (offset) == NON_LVALUE_EXPR\n-\t\t     || CONVERT_EXPR_P (offset))\n-\t\toffset = TREE_OPERAND (offset, 0);\n-\n \t      /* An offset which is a bitwise AND with a negative power of 2\n \t\t means an alignment corresponding to this power of 2.  */\n+\t      offset = remove_conversions (offset, true);\n \t      if (TREE_CODE (offset) == BIT_AND_EXPR\n \t\t  && host_integerp (TREE_OPERAND (offset, 1), 0)\n \t\t  && tree_int_cst_sgn (TREE_OPERAND (offset, 1)) < 0)"}]}