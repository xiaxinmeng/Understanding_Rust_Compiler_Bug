{"sha": "2c3309e3d0f5cb8f298f7604848d115f0992e04f", "node_id": "C_kwDOANBUbNoAKDJjMzMwOWUzZDBmNWNiOGYyOThmNzYwNDg0OGQxMTVmMDk5MmUwNGY", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-10T22:57:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-02-15T05:06:38Z"}, "message": "c++: TTP in member alias template [PR104107]\n\nIn the first testcase, coerce_template_template_parms was adding too much of\nouter_args when coercing to match P's template parameters, so that when\nsubstituting into the 'const T&' parameter we got an unrelated template\nargument for T.  We should only add outer_args when the argument template is\na nested template.\n\n\tPR c++/104107\n\tPR c++/95036\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (coerce_template_template_parms): Take full parms.\n\tAvoid adding too much of outer_args.\n\t(coerce_template_template_parm): Adjust.\n\t(template_template_parm_bindings_ok_p): Adjust.\n\t(convert_template_argument): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp0x/alias-decl-ttp2.C: New test.\n\t* g++.dg/cpp1z/ttp2.C: New test.", "tree": {"sha": "77fbd71095002ce75119a13970fbc14dd801fa8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77fbd71095002ce75119a13970fbc14dd801fa8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c3309e3d0f5cb8f298f7604848d115f0992e04f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3309e3d0f5cb8f298f7604848d115f0992e04f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3309e3d0f5cb8f298f7604848d115f0992e04f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3309e3d0f5cb8f298f7604848d115f0992e04f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f8a09d2f3c69fff32729c4fa0680c4621babb83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f8a09d2f3c69fff32729c4fa0680c4621babb83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f8a09d2f3c69fff32729c4fa0680c4621babb83"}], "stats": {"total": 87, "additions": 77, "deletions": 10}, "files": [{"sha": "6dda66081bda21966b8c8472719ad30ae443511c", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=2c3309e3d0f5cb8f298f7604848d115f0992e04f", "patch": "@@ -7731,8 +7731,8 @@ coerce_template_template_parm (tree parm,\n \t template <template <template <class> class> class TT>\n \t class C;  */\n       {\n-\ttree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n-\ttree argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n+\ttree parmparm = DECL_TEMPLATE_PARMS (parm);\n+\ttree argparm = DECL_TEMPLATE_PARMS (arg);\n \n \tif (!coerce_template_template_parms\n \t    (parmparm, argparm, complain, in_decl, outer_args))\n@@ -8001,8 +8001,8 @@ unify_bound_ttp_args (tree tparms, tree targs, tree parm, tree& arg,\n    the parameters to A, and OUTER_ARGS contains A.  */\n \n static int\n-coerce_template_template_parms (tree parm_parms,\n-\t\t\t\ttree arg_parms,\n+coerce_template_template_parms (tree parm_parms_full,\n+\t\t\t\ttree arg_parms_full,\n \t\t\t\ttsubst_flags_t complain,\n \t\t\t\ttree in_decl,\n \t\t\t\ttree outer_args)\n@@ -8011,6 +8011,9 @@ coerce_template_template_parms (tree parm_parms,\n   tree parm, arg;\n   int variadic_p = 0;\n \n+  tree parm_parms = INNERMOST_TEMPLATE_PARMS (parm_parms_full);\n+  tree arg_parms = INNERMOST_TEMPLATE_PARMS (arg_parms_full);\n+\n   gcc_assert (TREE_CODE (parm_parms) == TREE_VEC);\n   gcc_assert (TREE_CODE (arg_parms) == TREE_VEC);\n \n@@ -8046,8 +8049,26 @@ coerce_template_template_parms (tree parm_parms,\n \t specialized as P, so they match.*/\n       processing_template_decl_sentinel ptds (/*reset*/false);\n       ++processing_template_decl;\n+\n       tree pargs = template_parms_level_to_args (parm_parms);\n-      pargs = add_outermost_template_args (outer_args, pargs);\n+\n+      /* PARM, and thus the context in which we are passing ARG to it, may be\n+\t at a deeper level than ARG; when trying to coerce to ARG_PARMS, we\n+\t want to provide the right number of levels, so we reduce the number of\n+\t levels in OUTER_ARGS before prepending them.  This is most important\n+\t when ARG is a namespace-scope template, as in alias-decl-ttp2.C.\n+\n+\t ARG might also be deeper than PARM (ttp23).  In that case, we include\n+\t all of OUTER_ARGS.  The missing levels seem potentially problematic,\n+\t but I can't come up with a testcase that breaks.  */\n+      if (int arg_outer_levs = TMPL_PARMS_DEPTH (arg_parms_full) - 1)\n+\t{\n+\t  auto x = make_temp_override (TREE_VEC_LENGTH (outer_args));\n+\t  if (TMPL_ARGS_DEPTH (outer_args) > arg_outer_levs)\n+\t    TREE_VEC_LENGTH (outer_args) = arg_outer_levs;\n+\t  pargs = add_to_template_args (outer_args, pargs);\n+\t}\n+\n       pargs = coerce_template_parms (arg_parms, pargs, NULL_TREE, tf_none,\n \t\t\t\t     /*require_all*/true, /*use_default*/true);\n       if (pargs != error_mark_node)\n@@ -8186,16 +8207,16 @@ template_template_parm_bindings_ok_p (tree tparms, tree targs)\n \t      /* Extract the template parameters from the template\n \t\t argument.  */\n \t      if (TREE_CODE (targ) == TEMPLATE_DECL)\n-\t\ttarg_parms = DECL_INNERMOST_TEMPLATE_PARMS (targ);\n+\t\ttarg_parms = DECL_TEMPLATE_PARMS (targ);\n \t      else if (TREE_CODE (targ) == TEMPLATE_TEMPLATE_PARM)\n-\t\ttarg_parms = DECL_INNERMOST_TEMPLATE_PARMS (TYPE_NAME (targ));\n+\t\ttarg_parms = DECL_TEMPLATE_PARMS (TYPE_NAME (targ));\n \n \t      /* Verify that we can coerce the template template\n \t\t parameters from the template argument to the template\n \t\t parameter.  This requires an exact match.  */\n \t      if (targ_parms\n \t\t  && !coerce_template_template_parms\n-\t\t       (DECL_INNERMOST_TEMPLATE_PARMS (tparm),\n+\t\t       (DECL_TEMPLATE_PARMS (tparm),\n \t\t\ttarg_parms,\n \t\t\ttf_none,\n \t\t\ttparm,\n@@ -8489,13 +8510,13 @@ convert_template_argument (tree parm,\n \t    val = orig_arg;\n \t  else\n \t    {\n-\t      tree parmparm = DECL_INNERMOST_TEMPLATE_PARMS (parm);\n+\t      tree parmparm = DECL_TEMPLATE_PARMS (parm);\n \t      tree argparm;\n \n \t      /* Strip alias templates that are equivalent to another\n \t\t template.  */\n \t      arg = get_underlying_template (arg);\n-              argparm = DECL_INNERMOST_TEMPLATE_PARMS (arg);\n+\t      argparm = DECL_TEMPLATE_PARMS (arg);\n \n \t      if (coerce_template_template_parms (parmparm, argparm,\n \t\t\t\t\t\t  complain, in_decl,"}, {"sha": "230b277a5032a7f02497282870f17b086b2d3c0e", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-ttp2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-ttp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-ttp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-ttp2.C?ref=2c3309e3d0f5cb8f298f7604848d115f0992e04f", "patch": "@@ -0,0 +1,25 @@\n+// PR c++/104107\n+// { dg-do compile { target c++11 } }\n+\n+template<int targ_id, typename t_parameter,\n+\t template<typename T, const T&> class tt_w_data>\n+struct tt_main {\n+  static t_parameter m_parameter;\n+  template<template<typename T, const T&> class t_data>\n+    using t_make = t_data<t_parameter, m_parameter>;\n+  using t_data = t_make<tt_w_data>;\n+};\n+\n+template<int targ_id, typename t_parameter,\n+\t template<typename T, const T&> class tt_w_data>\n+t_parameter tt_main<targ_id, t_parameter, tt_w_data>::m_parameter;\n+\n+template<typename T, const T&> struct P {};\n+struct t_parameter {};\n+\n+using toto = tt_main<0, t_parameter, P>;\n+\n+int main() {\n+  toto t;\n+  return 0;\n+}"}, {"sha": "1f161e5c9ae0828330b5f06d78fb9e8b11296cb6", "filename": "gcc/testsuite/g++.dg/cpp1z/ttp2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3309e3d0f5cb8f298f7604848d115f0992e04f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fttp2.C?ref=2c3309e3d0f5cb8f298f7604848d115f0992e04f", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/95036\n+// { dg-do compile { target c++17 } }\n+\n+namespace a {\n+template <int b> struct c { static constexpr int d = b; };\n+template <bool, typename e = void> using f = e;\n+template <typename e, e...> struct g;\n+template <typename> struct array;\n+} // namespace a\n+template <template <class> class h> struct i {\n+  template <template <class, auto...> class, class = void> struct n;\n+  template <class j> struct n<h, j> : a::c<true> {};\n+  template <template <class> class k, class = a::f<n<k>::d>> void function();\n+};\n+template <template <class> class... l> struct derived : i<l>... {\n+  using i<l>::function...;\n+};\n+int main() {\n+  derived<a::array, a::g> m;\n+  m.function<a::array>();\n+}"}]}