{"sha": "bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNhNGI5NWM0YTdlYjc3Y2VkMDQ5OTdiMDliNGMzNGU0N2RlNThiYg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-23T20:33:53Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-12-23T20:33:53Z"}, "message": "runtime: Remove undefined references to runtime_race*.\n\nFrom-SVN: r219049", "tree": {"sha": "263b8df1c4218950fd5dd44d3001d3bb74b4e87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/263b8df1c4218950fd5dd44d3001d3bb74b4e87a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/comments", "author": null, "committer": null, "parents": [{"sha": "3feb029833c3f53ce4753f78ef6a2ce5b11492d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3feb029833c3f53ce4753f78ef6a2ce5b11492d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3feb029833c3f53ce4753f78ef6a2ce5b11492d9"}], "stats": {"total": 132, "additions": 2, "deletions": 130}, "files": [{"sha": "0cc823d8ac7c955bc8b9b5add8fafe32c0a0c922", "filename": "libgo/runtime/chan.goc", "status": "modified", "additions": 2, "deletions": 71, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fchan.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fchan.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fchan.goc?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -6,7 +6,6 @@ package runtime\n #include \"runtime.h\"\n #include \"arch.h\"\n #include \"go-type.h\"\n-#include \"race.h\"\n #include \"malloc.h\"\n #include \"chan.h\"\n \n@@ -15,7 +14,6 @@ uint32 runtime_Hchansize = sizeof(Hchan);\n static\tvoid\tdequeueg(WaitQ*);\n static\tSudoG*\tdequeue(WaitQ*);\n static\tvoid\tenqueue(WaitQ*, SudoG*);\n-static\tvoid\tracesync(Hchan*, SudoG*);\n \n static Hchan*\n makechan(ChanType *t, int64 hint)\n@@ -82,6 +80,7 @@ __go_new_channel_big(ChanType *t, uint64 hint)\n static bool\n chansend(ChanType *t, Hchan *c, byte *ep, bool block, void *pc)\n {\n+\tUSED(pc);\n \tSudoG *sg;\n \tSudoG mysg;\n \tG* gp;\n@@ -90,9 +89,6 @@ chansend(ChanType *t, Hchan *c, byte *ep, bool block, void *pc)\n \n \tg = runtime_g();\n \n-\tif(raceenabled)\n-\t\truntime_racereadobjectpc(ep, t->__element_type, runtime_getcallerpc(&t), chansend);\n-\n \tif(c == nil) {\n \t\tUSED(t);\n \t\tif(!block)\n@@ -116,8 +112,6 @@ chansend(ChanType *t, Hchan *c, byte *ep, bool block, void *pc)\n \t}\n \n \truntime_lock(c);\n-\tif(raceenabled)\n-\t\truntime_racereadpc(c, pc, chansend);\n \tif(c->closed)\n \t\tgoto closed;\n \n@@ -126,8 +120,6 @@ chansend(ChanType *t, Hchan *c, byte *ep, bool block, void *pc)\n \n \tsg = dequeue(&c->recvq);\n \tif(sg != nil) {\n-\t\tif(raceenabled)\n-\t\t\tracesync(c, sg);\n \t\truntime_unlock(c);\n \n \t\tgp = sg->g;\n@@ -183,11 +175,6 @@ asynch:\n \t\tgoto asynch;\n \t}\n \n-\tif(raceenabled) {\n-\t\truntime_raceacquire(chanbuf(c, c->sendx));\n-\t\truntime_racerelease(chanbuf(c, c->sendx));\n-\t}\n-\n \truntime_memmove(chanbuf(c, c->sendx), ep, c->elemsize);\n \tif(++c->sendx == c->dataqsiz)\n \t\tc->sendx = 0;\n@@ -225,8 +212,6 @@ chanrecv(ChanType *t, Hchan* c, byte *ep, bool block, bool *received)\n \tif(runtime_gcwaiting())\n \t\truntime_gosched();\n \n-\t// raceenabled: don't need to check ep, as it is always on the stack.\n-\n \tif(debug)\n \t\truntime_printf(\"chanrecv: chan=%p\\n\", c);\n \n@@ -256,8 +241,6 @@ chanrecv(ChanType *t, Hchan* c, byte *ep, bool block, bool *received)\n \n \tsg = dequeue(&c->sendq);\n \tif(sg != nil) {\n-\t\tif(raceenabled)\n-\t\t\tracesync(c, sg);\n \t\truntime_unlock(c);\n \n \t\tif(ep != nil)\n@@ -319,11 +302,6 @@ asynch:\n \t\tgoto asynch;\n \t}\n \n-\tif(raceenabled) {\n-\t\truntime_raceacquire(chanbuf(c, c->recvx));\n-\t\truntime_racerelease(chanbuf(c, c->recvx));\n-\t}\n-\n \tif(ep != nil)\n \t\truntime_memmove(ep, chanbuf(c, c->recvx), c->elemsize);\n \truntime_memclr(chanbuf(c, c->recvx), c->elemsize);\n@@ -352,8 +330,6 @@ closed:\n \t\truntime_memclr(ep, c->elemsize);\n \tif(received != nil)\n \t\t*received = false;\n-\tif(raceenabled)\n-\t\truntime_raceacquire(c);\n \truntime_unlock(c);\n \tif(mysg.releasetime > 0)\n \t\truntime_blockevent(mysg.releasetime - t0, 2);\n@@ -789,8 +765,6 @@ loop:\n \t\t\tbreak;\n \n \t\tcase CaseSend:\n-\t\t\tif(raceenabled)\n-\t\t\t\truntime_racereadpc(c, runtime_selectgo, chansend);\n \t\t\tif(c->closed)\n \t\t\t\tgoto sclose;\n \t\t\tif(c->dataqsiz > 0) {\n@@ -874,24 +848,11 @@ loop:\n \t\t\t*cas->receivedp = true;\n \t}\n \n-\tif(raceenabled) {\n-\t\tif(cas->kind == CaseRecv && cas->sg.elem != nil)\n-\t\t\truntime_racewriteobjectpc(cas->sg.elem, c->elemtype, selectgo, chanrecv);\n-\t\telse if(cas->kind == CaseSend)\n-\t\t\truntime_racereadobjectpc(cas->sg.elem, c->elemtype, selectgo, chansend);\n-\t}\n-\n \tselunlock(sel);\n \tgoto retc;\n \n asyncrecv:\n \t// can receive from buffer\n-\tif(raceenabled) {\n-\t\tif(cas->sg.elem != nil)\n-\t\t\truntime_racewriteobjectpc(cas->sg.elem, c->elemtype, selectgo, chanrecv);\n-\t\truntime_raceacquire(chanbuf(c, c->recvx));\n-\t\truntime_racerelease(chanbuf(c, c->recvx));\n-\t}\n \tif(cas->receivedp != nil)\n \t\t*cas->receivedp = true;\n \tif(cas->sg.elem != nil)\n@@ -914,11 +875,6 @@ asyncrecv:\n \n asyncsend:\n \t// can send to buffer\n-\tif(raceenabled) {\n-\t\truntime_raceacquire(chanbuf(c, c->sendx));\n-\t\truntime_racerelease(chanbuf(c, c->sendx));\n-\t\truntime_racereadobjectpc(cas->sg.elem, c->elemtype, selectgo, chansend);\n-\t}\n \truntime_memmove(chanbuf(c, c->sendx), cas->sg.elem, c->elemsize);\n \tif(++c->sendx == c->dataqsiz)\n \t\tc->sendx = 0;\n@@ -937,11 +893,6 @@ asyncsend:\n \n syncrecv:\n \t// can receive from sleeping sender (sg)\n-\tif(raceenabled) {\n-\t\tif(cas->sg.elem != nil)\n-\t\t\truntime_racewriteobjectpc(cas->sg.elem, c->elemtype, selectgo, chanrecv);\n-\t\tracesync(c, sg);\n-\t}\n \tselunlock(sel);\n \tif(debug)\n \t\truntime_printf(\"syncrecv: sel=%p c=%p o=%d\\n\", sel, c, o);\n@@ -963,16 +914,10 @@ rclose:\n \t\t*cas->receivedp = false;\n \tif(cas->sg.elem != nil)\n \t\truntime_memclr(cas->sg.elem, c->elemsize);\n-\tif(raceenabled)\n-\t\truntime_raceacquire(c);\n \tgoto retc;\n \n syncsend:\n \t// can send to sleeping receiver (sg)\n-\tif(raceenabled) {\n-\t\truntime_racereadobjectpc(cas->sg.elem, c->elemtype, selectgo, chansend);\n-\t\tracesync(c, sg);\n-\t}\n \tselunlock(sel);\n \tif(debug)\n \t\truntime_printf(\"syncsend: sel=%p c=%p o=%d\\n\", sel, c, o);\n@@ -1062,6 +1007,7 @@ func reflect.chanclose(c *Hchan) {\n static void\n closechan(Hchan *c, void *pc)\n {\n+\tUSED(pc);\n \tSudoG *sg;\n \tG* gp;\n \n@@ -1076,12 +1022,6 @@ closechan(Hchan *c, void *pc)\n \t\truntime_unlock(c);\n \t\truntime_panicstring(\"close of closed channel\");\n \t}\n-\n-\tif(raceenabled) {\n-\t\truntime_racewritepc(c, pc, runtime_closechan);\n-\t\truntime_racerelease(c);\n-\t}\n-\n \tc->closed = true;\n \n \t// release all readers\n@@ -1194,12 +1134,3 @@ enqueue(WaitQ *q, SudoG *sgp)\n \tq->last->link = sgp;\n \tq->last = sgp;\n }\n-\n-static void\n-racesync(Hchan *c, SudoG *sg)\n-{\n-\truntime_racerelease(chanbuf(c, 0));\n-\truntime_raceacquireg(sg->g, chanbuf(c, 0));\n-\truntime_racereleaseg(sg->g, chanbuf(c, 0));\n-\truntime_raceacquire(chanbuf(c, 0));\n-}"}, {"sha": "f240ffbd8ee8d6b9483a13c3811502a8ea52ec47", "filename": "libgo/runtime/malloc.goc", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fmalloc.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fmalloc.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmalloc.goc?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -16,7 +16,6 @@ package runtime\n #include \"malloc.h\"\n #include \"interface.h\"\n #include \"go-type.h\"\n-#include \"race.h\"\n \n // Map gccgo field names to gc field names.\n // Eface aka __go_empty_interface.\n@@ -249,9 +248,6 @@ runtime_mallocgc(uintptr size, uintptr typ, uint32 flag)\n \tif(UseSpanType && !(flag & FlagNoScan) && typ != 0)\n \t\tsettype(s, v, typ);\n \n-\tif(raceenabled)\n-\t\truntime_racemalloc(v, size);\n-\n \tif(runtime_debug.allocfreetrace)\n \t\truntime_tracealloc(v, size, typ);\n \n@@ -697,8 +693,6 @@ runtime_MHeap_SysAlloc(MHeap *h, uintptr n)\n \t\th->arena_used += n;\n \t\truntime_MHeap_MapBits(h);\n \t\truntime_MHeap_MapSpans(h);\n-\t\tif(raceenabled)\n-\t\t\truntime_racemapshadow(p, n);\n \t\t\n \t\tif(((uintptr)p & (PageSize-1)) != 0)\n \t\t\truntime_throw(\"misrounded allocation in MHeap_SysAlloc\");\n@@ -732,8 +726,6 @@ runtime_MHeap_SysAlloc(MHeap *h, uintptr n)\n \t\t\th->arena_end = p_end;\n \t\truntime_MHeap_MapBits(h);\n \t\truntime_MHeap_MapSpans(h);\n-\t\tif(raceenabled)\n-\t\t\truntime_racemapshadow(p, n);\n \t}\n \t\n \tif(((uintptr)p & (PageSize-1)) != 0)"}, {"sha": "b09054c02cc2efcffe7ff366622a0462b6aacda7", "filename": "libgo/runtime/mgc0.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fmgc0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fmgc0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fmgc0.c?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -57,7 +57,6 @@\n #include \"malloc.h\"\n #include \"mgc0.h\"\n #include \"chan.h\"\n-#include \"race.h\"\n #include \"go-type.h\"\n \n // Map gccgo field names to gc field names.\n@@ -2507,8 +2506,6 @@ runfinq(void* dummy __attribute__ ((unused)))\n \t\t\tcontinue;\n \t\t}\n \t\truntime_unlock(&finlock);\n-\t\tif(raceenabled)\n-\t\t\truntime_racefingo();\n \t\tfor(; fb; fb=next) {\n \t\t\tnext = fb->next;\n \t\t\tfor(i=0; i<(uint32)fb->cnt; i++) {"}, {"sha": "6270142ea9f7894fdbb84bd7df5149615a28a9e5", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -18,7 +18,6 @@\n #include \"arch.h\"\n #include \"defs.h\"\n #include \"malloc.h\"\n-#include \"race.h\"\n #include \"go-type.h\"\n #include \"go-defer.h\"\n \n@@ -462,9 +461,6 @@ runtime_schedinit(void)\n \n \t// Can not enable GC until all roots are registered.\n \t// mstats.enablegc = 1;\n-\n-\t// if(raceenabled)\n-\t//\tg->racectx = runtime_raceinit();\n }\n \n extern void main_init(void) __asm__ (GOSYM_PREFIX \"__go_init_main\");\n@@ -528,8 +524,6 @@ runtime_main(void* dummy __attribute__((unused)))\n \tmstats.enablegc = 1;\n \n \tmain_main();\n-\tif(raceenabled)\n-\t\truntime_racefini();\n \n \t// Make racy client program work: if panicking on\n \t// another goroutine at the same time as main returns,\n@@ -1848,8 +1842,6 @@ runtime_goexit(void)\n {\n \tif(g->status != Grunning)\n \t\truntime_throw(\"bad g status\");\n-\tif(raceenabled)\n-\t\truntime_racegoend();\n \truntime_mcall(goexit0);\n }\n "}, {"sha": "0f4718aa8aaf7d51e8c9394feb0bb62ec06eff3f", "filename": "libgo/runtime/race.h", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3feb029833c3f53ce4753f78ef6a2ce5b11492d9/libgo%2Fruntime%2Frace.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3feb029833c3f53ce4753f78ef6a2ce5b11492d9/libgo%2Fruntime%2Frace.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Frace.h?ref=3feb029833c3f53ce4753f78ef6a2ce5b11492d9", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2012 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// Definitions related to data race detection.\n-\n-#ifdef RACE\n-enum { raceenabled = 1 };\n-#else\n-enum { raceenabled = 0 };\n-#endif\n-\n-// Initialize race detection subsystem.\n-uintptr\truntime_raceinit(void);\n-// Finalize race detection subsystem, does not return.\n-void\truntime_racefini(void);\n-\n-void\truntime_racemapshadow(void *addr, uintptr size);\n-void\truntime_racemalloc(void *p, uintptr sz);\n-uintptr\truntime_racegostart(void *pc);\n-void\truntime_racegoend(void);\n-void\truntime_racewritepc(void *addr, void *callpc, void *pc);\n-void\truntime_racereadpc(void *addr, void *callpc, void *pc);\n-void\truntime_racewriterangepc(void *addr, uintptr sz, void *callpc, void *pc);\n-void\truntime_racereadrangepc(void *addr, uintptr sz, void *callpc, void *pc);\n-void\truntime_racereadobjectpc(void *addr, const Type *t, void *callpc, void *pc);\n-void\truntime_racewriteobjectpc(void *addr, const Type *t, void *callpc, void *pc);\n-void\truntime_racefingo(void);\n-void\truntime_raceacquire(void *addr);\n-void\truntime_raceacquireg(G *gp, void *addr);\n-void\truntime_racerelease(void *addr);\n-void\truntime_racereleaseg(G *gp, void *addr);\n-void\truntime_racereleasemerge(void *addr);\n-void\truntime_racereleasemergeg(G *gp, void *addr);"}, {"sha": "0ad180b9832d70bbac11a47ac461d101322fa653", "filename": "libgo/runtime/string.goc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fstring.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Fstring.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstring.goc?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -7,7 +7,6 @@ package runtime\n #include \"arch.h\"\n #include \"malloc.h\"\n #include \"go-string.h\"\n-#include \"race.h\"\n \n #define charntorune(pv, str, len) __go_get_rune(str, len, pv)\n "}, {"sha": "cb13bbf39a2169bd57ff63a91eb20fc78d27be51", "filename": "libgo/runtime/time.goc", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Ftime.goc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bca4b95c4a7eb77ced04997b09b4c34e47de58bb/libgo%2Fruntime%2Ftime.goc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Ftime.goc?ref=bca4b95c4a7eb77ced04997b09b4c34e47de58bb", "patch": "@@ -12,7 +12,6 @@ package time\n #include \"defs.h\"\n #include \"arch.h\"\n #include \"malloc.h\"\n-#include \"race.h\"\n \n enum {\n \tdebug = 0,\n@@ -42,8 +41,6 @@ func Sleep(ns int64) {\n \n // startTimer adds t to the timer heap.\n func startTimer(t *Timer) {\n-\tif(raceenabled)\n-\t\truntime_racerelease(t);\n \truntime_addtimer(t);\n }\n \n@@ -237,8 +234,6 @@ timerproc(void* dummy __attribute__ ((unused)))\n \t\t\tf = (void*)t->fv->fn;\n \t\t\targ = t->arg;\n \t\t\truntime_unlock(&timers);\n-\t\t\tif(raceenabled)\n-\t\t\t\truntime_raceacquire(t);\n \t\t\t__go_set_closure(fv);\n \t\t\tf(now, arg);\n "}]}