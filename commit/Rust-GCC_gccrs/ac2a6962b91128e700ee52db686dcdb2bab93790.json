{"sha": "ac2a6962b91128e700ee52db686dcdb2bab93790", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMyYTY5NjJiOTExMjhlNzAwZWU1MmRiNjg2ZGNkYjJiYWI5Mzc5MA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-04T17:44:31Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-04T17:44:31Z"}, "message": "i386: Add combine splitters to allow combining multiple insns into reg1 = const; reg2 = rotate (reg1, reg3 & cst) [PR96226]\n\nAs mentioned in the PR, we can combine ~(1 << x) into -2 r<< x, but we give\nup in the ~(1 << (x & 31)) cases, as *<rotate_insn><mode>3_mask* don't allow\nimmediate operand 1 and find_split_point prefers to split (x & 31) instead\nof the constant.\n\nWith these combine splitters we help combine decide how to split those\ninsns.\n\n2020-12-04  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/96226\n\t* config/i386/i386.md (splitter after *<rotate_insn><mode>3_mask,\n\tsplitter after *<rotate_insn><mode>3_mask_1): New combine splitters.\n\n\t* gcc.target/i386/pr96226.c: New test.", "tree": {"sha": "cf15a76a7c3fff60cad9088ca46693240a9ad595", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf15a76a7c3fff60cad9088ca46693240a9ad595"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac2a6962b91128e700ee52db686dcdb2bab93790", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a6962b91128e700ee52db686dcdb2bab93790", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac2a6962b91128e700ee52db686dcdb2bab93790", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac2a6962b91128e700ee52db686dcdb2bab93790/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33be07be9e46f15b9556521050356c47460651ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/33be07be9e46f15b9556521050356c47460651ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/33be07be9e46f15b9556521050356c47460651ee"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "129d47bb0263096fd1a08e75ab46fa91e00170ec", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a6962b91128e700ee52db686dcdb2bab93790/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a6962b91128e700ee52db686dcdb2bab93790/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=ac2a6962b91128e700ee52db686dcdb2bab93790", "patch": "@@ -11975,6 +11975,23 @@\n       (clobber (reg:CC FLAGS_REG))])]\n   \"operands[2] = gen_lowpart (QImode, operands[2]);\")\n \n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(any_rotate:SWI48\n+\t  (match_operand:SWI48 1 \"const_int_operand\")\n+\t  (subreg:QI\n+\t    (and:SI\n+\t      (match_operand:SI 2 \"register_operand\")\n+\t      (match_operand:SI 3 \"const_int_operand\")) 0)))]\n+ \"(INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode) - 1))\n+   == GET_MODE_BITSIZE (<MODE>mode) - 1\"\n+ [(set (match_dup 4) (match_dup 1))\n+  (set (match_dup 0)\n+       (any_rotate:SWI48 (match_dup 4)\n+\t\t\t (subreg:QI\n+\t\t\t   (and:SI (match_dup 2) (match_dup 3)) 0)))]\n+ \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n (define_insn_and_split \"*<rotate_insn><mode>3_mask_1\"\n   [(set (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t(any_rotate:SWI48\n@@ -11995,6 +12012,21 @@\n \t\t\t     (match_dup 2)))\n       (clobber (reg:CC FLAGS_REG))])])\n \n+(define_split\n+  [(set (match_operand:SWI48 0 \"register_operand\")\n+\t(any_rotate:SWI48\n+\t  (match_operand:SWI48 1 \"const_int_operand\")\n+\t  (and:QI\n+\t    (match_operand:QI 2 \"register_operand\")\n+\t    (match_operand:QI 3 \"const_int_operand\"))))]\n+ \"(INTVAL (operands[3]) & (GET_MODE_BITSIZE (<MODE>mode) - 1))\n+  == GET_MODE_BITSIZE (<MODE>mode) - 1\"\n+ [(set (match_dup 4) (match_dup 1))\n+  (set (match_dup 0)\n+       (any_rotate:SWI48 (match_dup 4)\n+\t\t\t (and:QI (match_dup 2) (match_dup 3))))]\n+ \"operands[4] = gen_reg_rtx (<MODE>mode);\")\n+\n ;; Implement rotation using two double-precision\n ;; shift instructions and a scratch register.\n "}, {"sha": "cc010faa135e7db00ef3321cb6f2e5340bfa8a1b", "filename": "gcc/testsuite/gcc.target/i386/pr96226.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac2a6962b91128e700ee52db686dcdb2bab93790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96226.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac2a6962b91128e700ee52db686dcdb2bab93790/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96226.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr96226.c?ref=ac2a6962b91128e700ee52db686dcdb2bab93790", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/96226 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"\\troll\\t\" 4 } } */\n+/* { dg-final { scan-assembler-times \"\\trolq\\t\" 4 { target { ! ia32 } } } } */\n+\n+int f1 (int x) { return ~(1U << (x & 0x1f)); }\n+int f2 (int x) { return ~(1U << x); }\n+int f3 (unsigned char *x) { return ~(1U << (x[0] & 0x1f)); }\n+int f4 (unsigned char *x) { return ~(1U << x[0]); }\n+#ifdef __x86_64__\n+long int f5 (int x) { return ~(1ULL << (x & 0x3f)); }\n+long int f6 (int x) { return ~(1ULL << x); }\n+long int f7 (unsigned char *x) { return ~(1ULL << (x[0] & 0x3f)); }\n+long int f8 (unsigned char *x) { return ~(1ULL << x[0]); }\n+#endif"}]}