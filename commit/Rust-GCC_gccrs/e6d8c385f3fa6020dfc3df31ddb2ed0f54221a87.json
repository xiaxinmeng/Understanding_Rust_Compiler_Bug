{"sha": "e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZkOGMzODVmM2ZhNjAyMGRmYzNkZjMxZGRiMmVkMGY1NDIyMWE4Nw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T22:49:47Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-01-14T22:49:47Z"}, "message": "(get_inner_reference): Only treat offset of PLUS_EXPR as special if\nsecond arg is integer constant.\n\nFrom-SVN: r8762", "tree": {"sha": "ca564c6ee648464a80ee770371a0b27cabead8d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca564c6ee648464a80ee770371a0b27cabead8d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87/comments", "author": null, "committer": null, "parents": [{"sha": "32e2dec7ed92c36e1c3c149accee6a7f79f476df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32e2dec7ed92c36e1c3c149accee6a7f79f476df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32e2dec7ed92c36e1c3c149accee6a7f79f476df"}], "stats": {"total": 46, "additions": 15, "deletions": 31}, "files": [{"sha": "8e75dddcfacf4f324ef2f40a859a19de8684d2f2", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 31, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=e6d8c385f3fa6020dfc3df31ddb2ed0f54221a87", "patch": "@@ -1,5 +1,5 @@\n /* Convert tree expression to rtl instructions, for GNU compiler.\n-   Copyright (C) 1988, 1992, 1993, 1994 Free Software Foundation, Inc.\n+   Copyright (C) 1988, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -3522,44 +3522,28 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n \t  tree pos = (TREE_CODE (exp) == COMPONENT_REF\n \t\t      ? DECL_FIELD_BITPOS (TREE_OPERAND (exp, 1))\n \t\t      : TREE_OPERAND (exp, 2));\n+\t  tree constant = integer_zero_node, var = pos;\n \n \t  /* If this field hasn't been filled in yet, don't go\n \t     past it.  This should only happen when folding expressions\n \t     made during type construction.  */\n \t  if (pos == 0)\n \t    break;\n \n-\t  if (TREE_CODE (pos) == PLUS_EXPR)\n-\t    {\n-\t      tree constant, var;\n-\t      if (TREE_CODE (TREE_OPERAND (pos, 0)) == INTEGER_CST)\n-\t\t{\n-\t\t  constant = TREE_OPERAND (pos, 0);\n-\t\t  var = TREE_OPERAND (pos, 1);\n-\t\t}\n-\t      else if (TREE_CODE (TREE_OPERAND (pos, 1)) == INTEGER_CST)\n-\t\t{\n-\t\t  constant = TREE_OPERAND (pos, 1);\n-\t\t  var = TREE_OPERAND (pos, 0);\n-\t\t}\n-\t      else\n-\t\tabort ();\n-\n-\t      *pbitpos += TREE_INT_CST_LOW (constant);\n-\t      offset = size_binop (PLUS_EXPR, offset,\n-\t\t\t\t   size_binop (EXACT_DIV_EXPR, var,\n-\t\t\t\t\t       size_int (BITS_PER_UNIT)));\n-\t    }\n+\t  /* Assume here that the offset is a multiple of a unit.\n+\t     If not, there should be an explicitly added constant.  */\n+\t  if (TREE_CODE (pos) == PLUS_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (pos, 1)) == INTEGER_CST)\n+\t    constant = TREE_OPERAND (pos, 1), var = TREE_OPERAND (pos, 0);\n \t  else if (TREE_CODE (pos) == INTEGER_CST)\n-\t    *pbitpos += TREE_INT_CST_LOW (pos);\n-\t  else\n-\t    {\n-\t      /* Assume here that the offset is a multiple of a unit.\n-\t\t If not, there should be an explicitly added constant.  */\n-\t      offset = size_binop (PLUS_EXPR, offset,\n-\t\t\t\t   size_binop (EXACT_DIV_EXPR, pos,\n-\t\t\t\t\t       size_int (BITS_PER_UNIT)));\n-\t    }\n+\t    constant = pos, var = integer_zero_node;\n+\n+\t  *pbitpos += TREE_INT_CST_LOW (constant);\n+\n+\t  if (var)\n+\t    offset = size_binop (PLUS_EXPR, offset,\n+\t\t\t\t size_binop (EXACT_DIV_EXPR, var,\n+\t\t\t\t\t     size_int (BITS_PER_UNIT)));\n \t}\n \n       else if (TREE_CODE (exp) == ARRAY_REF)"}]}