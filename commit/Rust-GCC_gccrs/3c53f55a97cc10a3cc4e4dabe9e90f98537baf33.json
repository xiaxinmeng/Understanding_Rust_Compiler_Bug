{"sha": "3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2M1M2Y1NWE5N2NjMTBhM2NjNGU0ZGFiZTllOTBmOTg1MzdiYWYzMw==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-13T10:02:39Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-12-13T10:02:39Z"}, "message": "bitmap.c (struct bitmap_descriptor): Remove forward declaration.\n\n\n\t* bitmap.c (struct bitmap_descriptor): Remove forward declaration.\n\t(struct bitmap_head_def): Remove desc pointer.  Add descriptor_id\n\tfield.  Reorder fields for pointer alignment.\n\t* bitmap.c: Include vec.h.\n\t(struct bitmap_descriptor): Rename to bitmap_descriptor_d.\n\t(bitmap_descriptor): New typedef, pointer to bitmap_descriptor_d.\n\tUpdate all struct bitmap_descriptor references.\n\t(next_bitmap_desc_id): New running index for bitmap desciptors.\n\t(bitmap_descriptors): Vec of all bitmap descriptors by descriptor id.\n\t(hash_descriptor, eq_descriptor): Update for struct bitmap_descriptor\n\tchange.\n\t(bitmap_descriptor): Rename function to get_bitmap_descriptor.\n\tStuff newly allocated bitmap descriptor into bitmap_descriptors.\n\tSet the bitmap descriptor id.\n\t(bitmap_register): Lookup bitmap desciptor and store its ID in\n\tthe passed bitmap.\n\t(register_overhead): Likewise.\n\t(bitmap_find_bit): Lookup descriptor by id in bitmap_descriptors.\n\t(print_statistics): Update for struct bitmap_descriptor change.\n\nFrom-SVN: r194469", "tree": {"sha": "46c9cfb303f00460e680848a30891bee2e57b132", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46c9cfb303f00460e680848a30891bee2e57b132"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/comments", "author": null, "committer": null, "parents": [{"sha": "a044f0e7916bbae7ac17d7079e9aee6cfaf5cf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a044f0e7916bbae7ac17d7079e9aee6cfaf5cf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a044f0e7916bbae7ac17d7079e9aee6cfaf5cf08"}], "stats": {"total": 96, "additions": 65, "deletions": 31}, "files": [{"sha": "eb69a551a4de060a0fe3146da005bdf1276341ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "patch": "@@ -1,3 +1,25 @@\n+2012-12-13  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* bitmap.c (struct bitmap_descriptor): Remove forward declaration.\n+\t(struct bitmap_head_def): Remove desc pointer.  Add descriptor_id\n+\tfield.  Reorder fields for pointer alignment.\n+\t* bitmap.c: Include vec.h.\n+\t(struct bitmap_descriptor): Rename to bitmap_descriptor_d.\n+\t(bitmap_descriptor): New typedef, pointer to bitmap_descriptor_d.\n+\tUpdate all struct bitmap_descriptor references.\n+\t(next_bitmap_desc_id): New running index for bitmap desciptors.\n+\t(bitmap_descriptors): Vec of all bitmap descriptors by descriptor id.\n+\t(hash_descriptor, eq_descriptor): Update for struct bitmap_descriptor\n+\tchange.\n+\t(bitmap_descriptor): Rename function to get_bitmap_descriptor.\n+\tStuff newly allocated bitmap descriptor into bitmap_descriptors.\n+\tSet the bitmap descriptor id.\n+\t(bitmap_register): Lookup bitmap desciptor and store its ID in\n+\tthe passed bitmap.\n+\t(register_overhead): Likewise.\n+\t(bitmap_find_bit): Lookup descriptor by id in bitmap_descriptors.\n+\t(print_statistics): Update for struct bitmap_descriptor change.\n+\n 2012-12-13  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-pre.c (get_representative_for): Adjust dumping."}, {"sha": "9f0226a1e1fe137a8541dacebe41d4b0598faa08", "filename": "gcc/bitmap.c", "status": "modified", "additions": 37, "deletions": 23, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "patch": "@@ -24,10 +24,12 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ggc.h\"\n #include \"bitmap.h\"\n #include \"hashtab.h\"\n+#include \"vec.h\"\n \n-/* Store information about each particular bitmap.  */\n-struct bitmap_descriptor\n+/* Store information about each particular bitmap, per allocation site.  */\n+struct bitmap_descriptor_d\n {\n+  int id;\n   const char *function;\n   const char *file;\n   int line;\n@@ -39,15 +41,23 @@ struct bitmap_descriptor\n   int search_iter;\n };\n \n+typedef struct bitmap_descriptor_d *bitmap_descriptor;\n+typedef const struct bitmap_descriptor_d *const_bitmap_descriptor;\n+\n+/* Next available unique id number for bitmap desciptors.  */\n+static int next_bitmap_desc_id = 0;\n+\n+/* Vector mapping descriptor ids to descriptors.  */\n+static vec<bitmap_descriptor> bitmap_descriptors;\n+\n /* Hashtable mapping bitmap names to descriptors.  */\n static htab_t bitmap_desc_hash;\n \n /* Hashtable helpers.  */\n static hashval_t\n hash_descriptor (const void *p)\n {\n-  const struct bitmap_descriptor *const d =\n-    (const struct bitmap_descriptor *) p;\n+  const_bitmap_descriptor d = (const_bitmap_descriptor) p;\n   return htab_hash_pointer (d->file) + d->line;\n }\n struct loc\n@@ -59,17 +69,16 @@ struct loc\n static int\n eq_descriptor (const void *p1, const void *p2)\n {\n-  const struct bitmap_descriptor *const d =\n-    (const struct bitmap_descriptor *) p1;\n+  const_bitmap_descriptor d = (const_bitmap_descriptor) p1;\n   const struct loc *const l = (const struct loc *) p2;\n   return d->file == l->file && d->function == l->function && d->line == l->line;\n }\n \n /* For given file and line, return descriptor, create new if needed.  */\n-static struct bitmap_descriptor *\n-bitmap_descriptor (const char *file, int line, const char *function)\n+static bitmap_descriptor\n+get_bitmap_descriptor (const char *file, int line, const char *function)\n {\n-  struct bitmap_descriptor **slot;\n+  bitmap_descriptor *slot;\n   struct loc loc;\n \n   loc.file = file;\n@@ -79,13 +88,16 @@ bitmap_descriptor (const char *file, int line, const char *function)\n   if (!bitmap_desc_hash)\n     bitmap_desc_hash = htab_create (10, hash_descriptor, eq_descriptor, NULL);\n \n-  slot = (struct bitmap_descriptor **)\n+  slot = (bitmap_descriptor *)\n     htab_find_slot_with_hash (bitmap_desc_hash, &loc,\n \t\t\t      htab_hash_pointer (file) + line,\n \t\t\t      INSERT);\n   if (*slot)\n     return *slot;\n-  *slot = XCNEW (struct bitmap_descriptor);\n+\n+  *slot = XCNEW (struct bitmap_descriptor_d);\n+  bitmap_descriptors.safe_push (*slot);\n+  (*slot)->id = next_bitmap_desc_id++;\n   (*slot)->file = file;\n   (*slot)->function = function;\n   (*slot)->line = line;\n@@ -96,20 +108,22 @@ bitmap_descriptor (const char *file, int line, const char *function)\n void\n bitmap_register (bitmap b MEM_STAT_DECL)\n {\n-  b->desc = bitmap_descriptor (ALONE_FINAL_PASS_MEM_STAT);\n-  b->desc->created++;\n+  bitmap_descriptor desc = get_bitmap_descriptor (ALONE_FINAL_PASS_MEM_STAT);\n+  desc->created++;\n+  b->descriptor_id = desc->id;\n }\n \n /* Account the overhead.  */\n static void\n register_overhead (bitmap b, int amount)\n {\n-  b->desc->current += amount;\n+  bitmap_descriptor desc = bitmap_descriptors[b->descriptor_id];\n+  desc->current += amount;\n   if (amount > 0)\n-    b->desc->allocated += amount;\n-  gcc_assert (b->desc->current >= 0);\n-  if (b->desc->peak < b->desc->current)\n-    b->desc->peak = b->desc->current;\n+    desc->allocated += amount;\n+  gcc_assert (desc->current >= 0);\n+  if (desc->peak < desc->current)\n+    desc->peak = desc->current;\n }\n \n /* Global data */\n@@ -556,7 +570,7 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n     return head->current;\n \n   if (GATHER_STATISTICS)\n-    head->desc->nsearches++;\n+    bitmap_descriptors[head->descriptor_id]->nsearches++;\n \n   if (head->indx < indx)\n     /* INDX is beyond head->indx.  Search from head->current\n@@ -566,7 +580,7 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n \t element = element->next)\n       {\n \tif (GATHER_STATISTICS)\n-\t  head->desc->search_iter++;\n+\t  bitmap_descriptors[head->descriptor_id]->search_iter++;\n       }\n \n   else if (head->indx / 2 < indx)\n@@ -577,7 +591,7 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n \t element = element->prev)\n       {\n \tif (GATHER_STATISTICS)\n-\t  head->desc->search_iter++;\n+\t  bitmap_descriptors[head->descriptor_id]->search_iter++;\n       }\n \n   else\n@@ -588,7 +602,7 @@ bitmap_find_bit (bitmap head, unsigned int bit)\n \t element = element->next)\n       if (GATHER_STATISTICS)\n \t{\n-\t  head->desc->search_iter++;\n+\t  bitmap_descriptors[head->descriptor_id]->search_iter++;\n \t}\n \n   /* `element' is the nearest to the one we want.  If it's not the one we\n@@ -2127,7 +2141,7 @@ struct output_info\n static int\n print_statistics (void **slot, void *b)\n {\n-  struct bitmap_descriptor *d = (struct bitmap_descriptor *) *slot;\n+  bitmap_descriptor d = (bitmap_descriptor) *slot;\n   struct output_info *i = (struct output_info *) b;\n   char s[4096];\n "}, {"sha": "402aac2f06f0b448bcf16e33049d457ab08003c0", "filename": "gcc/bitmap.h", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2Fbitmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c53f55a97cc10a3cc4e4dabe9e90f98537baf33/gcc%2Fbitmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.h?ref=3c53f55a97cc10a3cc4e4dabe9e90f98537baf33", "patch": "@@ -174,20 +174,18 @@ typedef struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.prev\"))) bitmap_elem\n   BITMAP_WORD bits[BITMAP_ELEMENT_WORDS]; /* Bits that are set.  */\n } bitmap_element;\n \n-struct bitmap_descriptor;\n-/* Head of bitmap linked list.  gengtype ignores ifdefs, but for\n-   statistics we need to add a bitmap descriptor pointer.  As it is\n-   not collected, we can just GTY((skip(\"\"))) it.  Likewise current\n-   points to something already pointed to by the chain started by first,\n-   no need to walk it again.  */\n+/* Head of bitmap linked list.  The 'current' member points to something\n+   already pointed to by the chain started by first, so GTY((skip)) it.  */\n \n typedef struct GTY(()) bitmap_head_def {\n+  unsigned int indx;\t\t\t/* Index of last element looked at.  */\n+  unsigned int descriptor_id;\t\t/* Unique identifier for the allocation\n+\t\t\t\t\t   site of this bitmap, for detailed\n+\t\t\t\t\t   statistics gathering.  */\n   bitmap_element *first;\t\t/* First element in linked list.  */\n   bitmap_element * GTY((skip(\"\"))) current; /* Last element looked at.  */\n-  unsigned int indx;\t\t\t/* Index of last element looked at.  */\n   bitmap_obstack *obstack;\t\t/* Obstack to allocate elements from.\n \t\t\t\t\t   If NULL, then use GGC allocation.  */\n-  struct bitmap_descriptor GTY((skip(\"\"))) *desc;\n } bitmap_head;\n \n /* Global data */"}]}