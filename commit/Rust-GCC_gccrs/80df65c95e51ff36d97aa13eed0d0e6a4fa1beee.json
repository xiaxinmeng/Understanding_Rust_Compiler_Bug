{"sha": "80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODBkZjY1Yzk1ZTUxZmYzNmQ5N2FhMTNlZWQwZDBlNmE0ZmExYmVlZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-11-06T19:43:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-11-06T19:43:53Z"}, "message": "alpha.c (add_operand): Simplify the CONST_INT match.\n\n        * alpha.c (add_operand): Simplify the CONST_INT match.\n        (sext_add_operand): Correct typo in comparison by using\n        CONST_OK_FOR_LETTER_P.\n        * alpha.md (s?addq): Use sext_add_operand to allow the negative\n        constant alternatives to be generated.\n        (mulsi3, muldi3, umuldi3_highpart): Loosen constraints to allow\n        small constants, since the hw instructions do.\n\nFrom-SVN: r23551", "tree": {"sha": "232008f49240050d5a83b13421d9b72afef7881a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/232008f49240050d5a83b13421d9b72afef7881a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/comments", "author": null, "committer": null, "parents": [{"sha": "d30e8ef0dcdb0ae77a98d79879fe07600d9c4c77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d30e8ef0dcdb0ae77a98d79879fe07600d9c4c77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d30e8ef0dcdb0ae77a98d79879fe07600d9c4c77"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "e4209278664457bbbcd4d474cdbd7dcdddd16b3f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "patch": "@@ -1,3 +1,13 @@\n+Fri Nov  6 19:37:33 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* alpha.c (add_operand): Simplify the CONST_INT match.\n+\t(sext_add_operand): Correct typo in comparison by using\n+\tCONST_OK_FOR_LETTER_P.\n+\t* alpha.md (s?addq): Use sext_add_operand to allow the negative\n+\tconstant alternatives to be generated.\n+\t(mulsi3, muldi3, umuldi3_highpart): Loosen constraints to allow\n+\tsmall constants, since the hw instructions do.\n+\n Fri Nov  6 20:15:19 1998  Bernd Schmidt <crux@pool.informatik.rwth-aachen.de>\n \n \t* reload1.c (emit_reload_insns):  When rewriting the SET_DEST of a"}, {"sha": "3de6f597a4912254487c4a6071c61ed06421afbe", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "patch": "@@ -386,9 +386,9 @@ add_operand (op, mode)\n      enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n+    /* Constraints I, J, O and P are covered by K.  */\n     return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'K')\n-\t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L')\n-\t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O'));\n+\t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'L'));\n   else if (GET_CODE (op) == CONSTANT_P_RTX)\n     return 1;\n \n@@ -404,8 +404,8 @@ sext_add_operand (op, mode)\n      enum machine_mode mode;\n {\n   if (GET_CODE (op) == CONST_INT)\n-    return ((unsigned HOST_WIDE_INT) INTVAL (op) < 255\n-\t    || (unsigned HOST_WIDE_INT) (- INTVAL (op)) < 255);\n+    return (CONST_OK_FOR_LETTER_P (INTVAL (op), 'I')\n+\t    || CONST_OK_FOR_LETTER_P (INTVAL (op), 'O'));\n   else if (GET_CODE (op) == CONSTANT_P_RTX)\n     return 1;\n "}, {"sha": "f1d855479bc6167c43c8e1ed4f2952878ed83fea", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/80df65c95e51ff36d97aa13eed0d0e6a4fa1beee/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=80df65c95e51ff36d97aa13eed0d0e6a4fa1beee", "patch": "@@ -598,7 +598,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n \t(plus:DI (mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"rJ,rJ\")\n \t\t\t  (match_operand:DI 2 \"const48_operand\" \"I,I\"))\n-\t\t (match_operand:DI 3 \"reg_or_8bit_operand\" \"rI,O\")))]\n+\t\t (match_operand:DI 3 \"sext_add_operand\" \"rI,O\")))]\n   \"\"\n   \"@\n    s%2addq %r1,%3,%0\n@@ -784,38 +784,41 @@\n (define_insn \"mulsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:SI 2 \"reg_or_0_operand\" \"rJ\")))]\n+\t\t (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"mull %r1,%r2,%0\"\n+  \"mull %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"si\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extend:DI (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t\t\t (match_operand:SI 2 \"reg_or_0_operand\" \"rJ\"))))]\n+\t(sign_extend:DI\n+\t  (mult:SI (match_operand:SI 1 \"reg_or_0_operand\" \"%rJ\")\n+\t\t   (match_operand:SI 2 \"reg_or_8bit_operand\" \"rI\"))))]\n   \"\"\n-  \"mull %r1,%r2,%0\"\n+  \"mull %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"si\")])\n \n (define_insn \"muldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(mult:DI (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ\")\n-\t\t (match_operand:DI 2 \"reg_or_0_operand\" \"rJ\")))]\n+\t\t (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))]\n   \"\"\n-  \"mulq %r1,%r2,%0\"\n+  \"mulq %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")])\n \n (define_insn \"umuldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(truncate:DI\n \t (lshiftrt:TI\n-\t  (mult:TI (zero_extend:TI (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t\t   (zero_extend:TI (match_operand:DI 2 \"register_operand\" \"r\")))\n+\t  (mult:TI (zero_extend:TI\n+\t\t     (match_operand:DI 1 \"reg_or_0_operand\" \"%rJ\"))\n+\t\t   (zero_extend:TI\n+\t\t     (match_operand:DI 2 \"reg_or_8bit_operand\" \"rI\")))\n \t  (const_int 64))))]\n   \"\"\n-  \"umulh %1,%2,%0\"\n+  \"umulh %r1,%2,%0\"\n   [(set_attr \"type\" \"imul\")\n    (set_attr \"opsize\" \"udi\")])\n "}]}