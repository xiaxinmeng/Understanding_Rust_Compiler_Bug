{"sha": "3dbf65382cc62b3d663832192928a53bde45ec6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RiZjY1MzgyY2M2MmIzZDY2MzgzMjE5MjkyOGE1M2JkZTQ1ZWM2YQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-08-06T20:53:19Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-08-06T20:53:19Z"}, "message": "resolve.c (derived_pointer): Removed, replaced callers by access to appropiate attribute bit.\n\n2007-08-06  Daniel Franke  <franke.daniel@gmail.com>\n\n\t* resolve.c (derived_pointer): Removed, replaced callers by access \n\tto appropiate attribute bit.\n\t(derived_inaccessable): Shortcut recursion depth.\n\t(resolve_fl_namelist): Fixed checks for private components in namelists.\n\nFrom-SVN: r127253", "tree": {"sha": "7d9358beb8f989015458e17fa7d06a44424c6f2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d9358beb8f989015458e17fa7d06a44424c6f2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3dbf65382cc62b3d663832192928a53bde45ec6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbf65382cc62b3d663832192928a53bde45ec6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbf65382cc62b3d663832192928a53bde45ec6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbf65382cc62b3d663832192928a53bde45ec6a/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2263c775581fc3bc0a4e26794dd3f301056e3a81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2263c775581fc3bc0a4e26794dd3f301056e3a81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2263c775581fc3bc0a4e26794dd3f301056e3a81"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "9d7db4250fec9817b63f1559f0d58be58f0283c1", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbf65382cc62b3d663832192928a53bde45ec6a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbf65382cc62b3d663832192928a53bde45ec6a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=3dbf65382cc62b3d663832192928a53bde45ec6a", "patch": "@@ -1,3 +1,10 @@\n+2007-08-06  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* resolve.c (derived_pointer): Removed, replaced callers by access \n+\tto appropiate attribute bit.\n+\t(derived_inaccessable): Shortcut recursion depth.\n+\t(resolve_fl_namelist): Fixed checks for private components in namelists.\n+\n 2007-08-06  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/29828"}, {"sha": "4cfff79749ba11ef57d4dd3a0e815caf90581ea6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3dbf65382cc62b3d663832192928a53bde45ec6a/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3dbf65382cc62b3d663832192928a53bde45ec6a/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=3dbf65382cc62b3d663832192928a53bde45ec6a", "patch": "@@ -4132,28 +4132,6 @@ resolve_forall_iterators (gfc_forall_iterator *iter)\n }\n \n \n-/* Given a pointer to a symbol that is a derived type, see if any components\n-   have the POINTER attribute.  The search is recursive if necessary.\n-   Returns zero if no pointer components are found, nonzero otherwise.  */\n-\n-static int\n-derived_pointer (gfc_symbol *sym)\n-{\n-  gfc_component *c;\n-\n-  for (c = sym->components; c; c = c->next)\n-    {\n-      if (c->pointer)\n-\treturn 1;\n-\n-      if (c->ts.type == BT_DERIVED && derived_pointer (c->ts.derived))\n-\treturn 1;\n-    }\n-\n-  return 0;\n-}\n-\n-\n /* Given a pointer to a symbol that is a derived type, see if it's\n    inaccessible, i.e. if it's defined in another module and the components are\n    PRIVATE.  The search is recursive if necessary.  Returns zero if no\n@@ -4164,7 +4142,7 @@ derived_inaccessible (gfc_symbol *sym)\n {\n   gfc_component *c;\n \n-  if (sym->attr.use_assoc && sym->component_access == ACCESS_PRIVATE)\n+  if (sym->attr.use_assoc && sym->attr.private_comp)\n     return 1;\n \n   for (c = sym->components; c; c = c->next)\n@@ -5080,7 +5058,7 @@ resolve_transfer (gfc_code *code)\n     {\n       /* Check that transferred derived type doesn't contain POINTER\n \t components.  */\n-      if (derived_pointer (ts->derived))\n+      if (ts->derived->attr.pointer_comp)\n \t{\n \t  gfc_error (\"Data transfer element at %L cannot have \"\n \t\t     \"POINTER components\", &code->loc);\n@@ -5929,7 +5907,7 @@ resolve_code (gfc_code *code, gfc_namespace *ns)\n \n \t      if (code->expr->ts.type == BT_DERIVED\n \t\t    && code->expr->expr_type == EXPR_VARIABLE\n-\t\t    && derived_pointer (code->expr->ts.derived)\n+\t\t    && code->expr->ts.derived->attr.pointer_comp\n \t\t    && gfc_impure_variable (code->expr2->symtree->n.sym))\n \t\t{\n \t\t  gfc_error (\"The impure variable at %L is assigned to \"\n@@ -7043,13 +7021,11 @@ resolve_fl_namelist (gfc_symbol *sym)\n     {\n       for (nl = sym->namelist; nl; nl = nl->next)\n \t{\n-\t  if (nl->sym->attr.use_assoc\n-\t      || (sym->ns->parent == nl->sym->ns)\n-\t      || (sym->ns->parent\n-\t\t  && sym->ns->parent->parent == nl->sym->ns))\n-\t    continue;\n-\n-\t  if (!gfc_check_access(nl->sym->attr.access,\n+\t  if (!nl->sym->attr.use_assoc\n+\t      && !(sym->ns->parent == nl->sym->ns)\n+\t      && !(sym->ns->parent\n+\t\t   && sym->ns->parent->parent == nl->sym->ns)\n+\t      && !gfc_check_access(nl->sym->attr.access,\n \t\t\t\tnl->sym->ns->default_access))\n \t    {\n \t      gfc_error (\"NAMELIST object '%s' was declared PRIVATE and \"\n@@ -7058,10 +7034,22 @@ resolve_fl_namelist (gfc_symbol *sym)\n \t      return FAILURE;\n \t    }\n \n+\t  /* Types with private components that came here by USE-association.  */\n+\t  if (nl->sym->ts.type == BT_DERIVED\n+\t      && derived_inaccessible (nl->sym->ts.derived))\n+\t    {\n+\t      gfc_error (\"NAMELIST object '%s' has use-associated PRIVATE \"\n+\t\t\t \"components and cannot be member of namelist '%s' at %L\",\n+\t\t\t nl->sym->name, sym->name, &sym->declared_at);\n+\t      return FAILURE;\n+\t    }\n+\n+\t  /* Types with private components that are defined in the same module.  */\n \t  if (nl->sym->ts.type == BT_DERIVED\n+\t      && !(sym->ns->parent == nl->sym->ts.derived->ns)\n \t      && !gfc_check_access (nl->sym->ts.derived->attr.private_comp\n-\t\t\t\t    ? ACCESS_PRIVATE : ACCESS_UNKNOWN,\n-\t\t\t\t    nl->sym->ns->default_access))\n+\t\t\t\t\t? ACCESS_PRIVATE : ACCESS_UNKNOWN,\n+\t\t\t\t\tnl->sym->ns->default_access))\n \t    {\n \t      gfc_error (\"NAMELIST object '%s' has PRIVATE components and \"\n \t\t\t \"cannot be a member of PUBLIC namelist '%s' at %L\","}]}