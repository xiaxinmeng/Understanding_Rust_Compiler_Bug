{"sha": "7127d9c7d139e90cb58511b31c5a4a617bce3eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEyN2Q5YzdkMTM5ZTkwY2I1ODUxMWIzMWM1YTRhNjE3YmNlM2VlYQ==", "commit": {"author": {"name": "Dirk Mueller", "email": "dmueller@suse.com", "date": "2006-02-07T21:47:55Z"}, "committer": {"name": "Dirk Mueller", "email": "mueller@gcc.gnu.org", "date": "2006-02-07T21:47:55Z"}, "message": "re PR c++/18150 (Should enable -Wsequence-point for C++)\n\n2006-02-07  Dirk Mueller  <dmueller@suse.com>\n\n       PR c++/18150\n       * doc/invoke.texi (-Wsequence-point): Update documentation\n       that -Wsequence-point is implemented for C++ as well.\n\nFrom-SVN: r110719", "tree": {"sha": "1e8f22977a771afdc8a40dd3520bb993dd103d63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e8f22977a771afdc8a40dd3520bb993dd103d63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7127d9c7d139e90cb58511b31c5a4a617bce3eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7127d9c7d139e90cb58511b31c5a4a617bce3eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7127d9c7d139e90cb58511b31c5a4a617bce3eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7127d9c7d139e90cb58511b31c5a4a617bce3eea/comments", "author": {"login": "dirkmueller", "id": 1029152, "node_id": "MDQ6VXNlcjEwMjkxNTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1029152?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dirkmueller", "html_url": "https://github.com/dirkmueller", "followers_url": "https://api.github.com/users/dirkmueller/followers", "following_url": "https://api.github.com/users/dirkmueller/following{/other_user}", "gists_url": "https://api.github.com/users/dirkmueller/gists{/gist_id}", "starred_url": "https://api.github.com/users/dirkmueller/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dirkmueller/subscriptions", "organizations_url": "https://api.github.com/users/dirkmueller/orgs", "repos_url": "https://api.github.com/users/dirkmueller/repos", "events_url": "https://api.github.com/users/dirkmueller/events{/privacy}", "received_events_url": "https://api.github.com/users/dirkmueller/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5e2061b4576b23ffa446c5b11344edb4dc56ac7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e2061b4576b23ffa446c5b11344edb4dc56ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e2061b4576b23ffa446c5b11344edb4dc56ac7"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "6149afe467b0344bbe1353037f4293c78b1423d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7127d9c7d139e90cb58511b31c5a4a617bce3eea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7127d9c7d139e90cb58511b31c5a4a617bce3eea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7127d9c7d139e90cb58511b31c5a4a617bce3eea", "patch": "@@ -1,3 +1,9 @@\n+2006-02-07  Dirk Mueller  <dmueller@suse.com>\n+\n+\tPR c++/18150\n+\t* doc/invoke.texi (-Wsequence-point): Update documentation\n+\tthat -Wsequence-point is implemented for C++ as well.\n+\n 2006-02-07  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sol26.h (CPP_SUBTARGET_SPEC): Accept -pthread."}, {"sha": "798d4e79cbb2aef6936b88a31073d24ce1190c43", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7127d9c7d139e90cb58511b31c5a4a617bce3eea/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7127d9c7d139e90cb58511b31c5a4a617bce3eea/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=7127d9c7d139e90cb58511b31c5a4a617bce3eea", "patch": "@@ -2526,14 +2526,14 @@ This warning is enabled by @option{-Wall}.\n @item -Wsequence-point\n @opindex Wsequence-point\n Warn about code that may have undefined semantics because of violations\n-of sequence point rules in the C standard.\n-\n-The C standard defines the order in which expressions in a C program are\n-evaluated in terms of @dfn{sequence points}, which represent a partial\n-ordering between the execution of parts of the program: those executed\n-before the sequence point, and those executed after it.  These occur\n-after the evaluation of a full expression (one which is not part of a\n-larger expression), after the evaluation of the first operand of a\n+of sequence point rules in the C and C++ standards.\n+\n+The C and C++ standards defines the order in which expressions in a C/C++\n+program are evaluated in terms of @dfn{sequence points}, which represent\n+a partial ordering between the execution of parts of the program: those\n+executed before the sequence point, and those executed after it.  These\n+occur after the evaluation of a full expression (one which is not part\n+of a larger expression), after the evaluation of the first operand of a\n @code{&&}, @code{||}, @code{? :} or @code{,} (comma) operator, before a\n function is called (but after the evaluation of its arguments and the\n expression denoting the called function), and in certain other places.\n@@ -2547,11 +2547,11 @@ ruled that function calls do not overlap.\n \n It is not specified when between sequence points modifications to the\n values of objects take effect.  Programs whose behavior depends on this\n-have undefined behavior; the C standard specifies that ``Between the\n-previous and next sequence point an object shall have its stored value\n-modified at most once by the evaluation of an expression.  Furthermore,\n-the prior value shall be read only to determine the value to be\n-stored.''.  If a program breaks these rules, the results on any\n+have undefined behavior; the C and C++ standards specify that ``Between\n+the previous and next sequence point an object shall have its stored\n+value modified at most once by the evaluation of an expression.  \n+Furthermore, the prior value shall be read only to determine the value\n+to be stored.''.  If a program breaks these rules, the results on any\n particular implementation are entirely unpredictable.\n \n Examples of code with undefined behavior are @code{a = a++;}, @code{a[n]\n@@ -2560,16 +2560,13 @@ diagnosed by this option, and it may give an occasional false positive\n result, but in general it has been found fairly effective at detecting\n this sort of problem in programs.\n \n-The present implementation of this option only works for C programs.  A\n-future implementation may also work for C++ programs.\n-\n-The C standard is worded confusingly, therefore there is some debate\n+The standard is worded confusingly, therefore there is some debate\n over the precise meaning of the sequence point rules in subtle cases.\n Links to discussions of the problem, including proposed formal\n definitions, may be found on the GCC readings page, at\n @w{@uref{http://gcc.gnu.org/readings.html}}.\n \n-This warning is enabled by @option{-Wall}.\n+This warning is enabled by @option{-Wall} for C and C++.\n \n @item -Wreturn-type\n @opindex Wreturn-type"}]}