{"sha": "5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM2N2VmOWFlZjIwYzFiZTllNjIxNGIyY2Y4ZWE4NmRmMWFmNTQxNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-08-06T04:34:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-08-06T04:34:21Z"}, "message": "re PR c++/49988 (constexpr on ctor invokes improper initialization)\n\n\tPR c++/49988\n\t* semantics.c (cxx_eval_array_reference): Handle failure to\n\treduce the array operand to something we can work with.\n\nFrom-SVN: r177496", "tree": {"sha": "97bd80367a5e914bb18bd4b665b11472a102349b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97bd80367a5e914bb18bd4b665b11472a102349b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "de9ef71ca76369222554fcc2b4cb533c3b094289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de9ef71ca76369222554fcc2b4cb533c3b094289", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de9ef71ca76369222554fcc2b4cb533c3b094289"}], "stats": {"total": 43, "additions": 42, "deletions": 1}, "files": [{"sha": "3c1ad7f5959c3f15c3222de68607d46dec5ee847", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "patch": "@@ -1,3 +1,9 @@\n+2011-08-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49988\n+\t* semantics.c (cxx_eval_array_reference): Handle failure to\n+\treduce the array operand to something we can work with.\n+\n 2011-08-05  Gabriel Charette  <gchare@google.com>\n \n \t* decl.c (finish_function): Remove unecessary line 0 hack."}, {"sha": "2f02e696dbad7b03ef1f5a6308094dab56d8dd6d", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "patch": "@@ -6428,12 +6428,19 @@ cxx_eval_array_reference (const constexpr_call *call, tree t,\n   elem_type = TREE_TYPE (TREE_TYPE (ary));\n   if (TREE_CODE (ary) == CONSTRUCTOR)\n     len = CONSTRUCTOR_NELTS (ary);\n-  else\n+  else if (TREE_CODE (ary) == STRING_CST)\n     {\n       elem_nchars = (TYPE_PRECISION (elem_type)\n \t\t     / TYPE_PRECISION (char_type_node));\n       len = (unsigned) TREE_STRING_LENGTH (ary) / elem_nchars;\n     }\n+  else\n+    {\n+      /* We can't do anything with other tree codes, so use\n+\t VERIFY_CONSTANT to complain and fail.  */\n+      VERIFY_CONSTANT (ary);\n+      gcc_unreachable ();\n+    }\n   if (compare_tree_int (index, len) >= 0)\n     {\n       if (tree_int_cst_lt (index, array_type_nelts_top (TREE_TYPE (ary))))"}, {"sha": "af49861a64b8a1d2c8ed40c7d97b906ab4bce871", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "patch": "@@ -1,3 +1,8 @@\n+2011-08-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/49988\n+\t* g++.dg/cpp0x/constexpr-non-const-arg3.C: New.\n+\n 2011-08-05  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/47369"}, {"sha": "581be6d15ce86e0615b5543650396fcacbd1faad", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-non-const-arg3.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c67ef9aef20c1be9e6214b2cf8ea86df1af5415/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-non-const-arg3.C?ref=5c67ef9aef20c1be9e6214b2cf8ea86df1af5415", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/49988\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+template<int ... I> struct X { };\n+\n+struct A {\n+  char data[3];\n+  template<int ... I>\n+    constexpr\n+    A(const char (&s)[3], X<I...> x) : data{ s[I]...} { }\n+};\n+struct B {\n+  A a;\n+  B(const char (&s)[3]) : a{s,X<0,1,2>{}} { }\n+};\n+\n+int main()\n+{\n+  B b{\"12\"};\n+  if (b.a.data[0] != '1')\n+    return 1;\n+}"}]}