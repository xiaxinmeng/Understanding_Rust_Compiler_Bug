{"sha": "8f259df3c054e887bf95c598842a4245195a1107", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGYyNTlkZjNjMDU0ZTg4N2JmOTVjNTk4ODQyYTQyNDUxOTVhMTEwNw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@markmitchell.com", "date": "1998-06-13T23:45:18Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1998-06-13T23:45:18Z"}, "message": "cp-tree.h (complete_type_or_else): Declare.\n\n\t* cp-tree.h (complete_type_or_else): Declare.\n\t* init.c (build_new_1, build_delete): Use it.\n\t* typeck.c (require_complete_type): Use complete_type, rather than\n\texpanding it inline.\n\t(complete_type_or_else): New function.\n\t(build_component_ref): Use it.\n\t(pointer_int_sum): Make sure the type pointed to is complete.\n\t(pointer_diff): Likewise.\n\nFrom-SVN: r20499", "tree": {"sha": "6c025d8e59042c495188e1596d323a743397764a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c025d8e59042c495188e1596d323a743397764a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f259df3c054e887bf95c598842a4245195a1107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f259df3c054e887bf95c598842a4245195a1107", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f259df3c054e887bf95c598842a4245195a1107", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f259df3c054e887bf95c598842a4245195a1107/comments", "author": null, "committer": null, "parents": [{"sha": "581d38d0bac90445b1a58cff2857609d141e995f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/581d38d0bac90445b1a58cff2857609d141e995f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/581d38d0bac90445b1a58cff2857609d141e995f"}], "stats": {"total": 98, "additions": 76, "deletions": 22}, "files": [{"sha": "1ad909882ef34e5b7158fb725b372ca06c17ef70", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8f259df3c054e887bf95c598842a4245195a1107", "patch": "@@ -1,3 +1,20 @@\n+1998-06-13  Mark Mitchell  <mark@markmitchell.com>\n+\n+\t* cp-tree.h (complete_type_or_else): Declare.\n+\t* init.c (build_new_1, build_delete): Use it.\n+\t* typeck.c (require_complete_type): Use complete_type, rather than\n+\texpanding it inline.\n+\t(complete_type_or_else): New function.\n+\t(build_component_ref): Use it.\n+\t(pointer_int_sum): Make sure the type pointed to is complete.\n+\t(pointer_diff): Likewise.\n+\n+\t* pt.c (for_each_template_parm): Traverse the TYPE_CONTEXT for\n+\ttypes. \n+\n+\t* search.c (get_matching_virtual): Note that member templates\n+\tcannot override virtual functions.\n+\n 1998-06-12  Brendan Kehoe  <brendan@cygnus.com>\n \n \t* pt.c (check_explicit_specialization): If DECLARATOR turned into"}, {"sha": "2c2bb740c6d972afa46d5c18bc02e0231d5b14d3", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=8f259df3c054e887bf95c598842a4245195a1107", "patch": "@@ -1738,6 +1738,7 @@ extern tree shorten_compare                     PROTO((tree *, tree *, tree *, e\n extern tree truthvalue_conversion               PROTO((tree));\n extern tree type_for_mode                       PROTO((enum machine_mode, int));\n extern tree type_for_size                       PROTO((unsigned, int));\n+extern int c_get_alias_set                      PROTO((tree));\n \n /* in decl{2}.c */\n extern tree void_list_node;\n@@ -2890,6 +2891,7 @@ extern tree condition_conversion\t\tPROTO((tree));\n extern tree target_type\t\t\t\tPROTO((tree));\n extern tree require_complete_type\t\tPROTO((tree));\n extern tree complete_type\t\t\tPROTO((tree));\n+extern tree complete_type_or_else               PROTO((tree));\n extern int type_unknown_p\t\t\tPROTO((tree));\n extern int fntype_p\t\t\t\tPROTO((tree));\n extern tree require_instantiated_type\t\tPROTO((tree, tree, tree));"}, {"sha": "aa8fb0cf0a606135796460377959908903d4bef7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=8f259df3c054e887bf95c598842a4245195a1107", "patch": "@@ -2192,11 +2192,8 @@ build_new_1 (exp)\n       true_type = TREE_TYPE (true_type);\n     }\n \n-  if (TYPE_SIZE (complete_type (true_type)) == 0)\n-    {\n-      incomplete_type_error (0, true_type);\n-      return error_mark_node;\n-    }\n+  if (!complete_type_or_else (true_type))\n+    return error_mark_node;\n \n   if (has_array)\n     size = fold (build_binary_op (MULT_EXPR, size_in_bytes (true_type),\n@@ -2971,11 +2968,8 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n   if (TREE_CODE (type) == POINTER_TYPE)\n     {\n       type = TYPE_MAIN_VARIANT (TREE_TYPE (type));\n-      if (TYPE_SIZE (complete_type (type)) == 0)\n-\t{\n-\t  incomplete_type_error (0, type);\n-\t  return error_mark_node;\n-\t}\n+      if (!complete_type_or_else (type))\n+\treturn error_mark_node;\n       if (TREE_CODE (type) == ARRAY_TYPE)\n \tgoto handle_array;\n       if (! IS_AGGR_TYPE (type))"}, {"sha": "b8a46d17e300fdf395c0e722a40c04244c871672", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=8f259df3c054e887bf95c598842a4245195a1107", "patch": "@@ -120,17 +120,20 @@ require_complete_type (value)\n       return require_complete_type (value);\n     }\n \n-  if (IS_AGGR_TYPE (type) && CLASSTYPE_TEMPLATE_INSTANTIATION (type))\n+  if (TYPE_SIZE (complete_type (type)))\n+    return value;\n+  else\n     {\n-      instantiate_class_template (TYPE_MAIN_VARIANT (type));\n-      if (TYPE_SIZE (type) != 0)\n-\treturn value;\n+      incomplete_type_error (value, type);\n+      return error_mark_node;\n     }\n-\n-  incomplete_type_error (value, type);\n-  return error_mark_node;\n }\n \n+/* Try to complete TYPE, if it is incomplete.  For example, if TYPE is\n+   a template instantiation, do the instantiation.  Returns TYPE,\n+   whether or not it could be completed, unless something goes\n+   horribly wrong, in which case the error_mark_node is returned.  */\n+\n tree\n complete_type (type)\n      tree type;\n@@ -158,6 +161,24 @@ complete_type (type)\n   return type;\n }\n \n+/* Like complete_type, but issue an error if the TYPE cannot be\n+   completed.  Returns NULL_TREE if the type cannot be made \n+   complete.  */\n+\n+tree\n+complete_type_or_else (type)\n+     tree type;\n+{\n+  type = complete_type (type);\n+  if (type != error_mark_node && !TYPE_SIZE (type))\n+    {\n+      incomplete_type_error (NULL_TREE, type);\n+      return NULL_TREE;\n+    }\n+  else\n+    return type;\n+}\n+\n /* Return truthvalue of whether type of EXP is instantiated.  */\n \n int\n@@ -1930,11 +1951,8 @@ build_component_ref (datum, component, basetype_path, protect)\n       return error_mark_node;\n     }\n \n-  if (TYPE_SIZE (complete_type (basetype)) == 0)\n-    {\n-      incomplete_type_error (0, basetype);\n-      return error_mark_node;\n-    }\n+  if (!complete_type_or_else (basetype))\n+    return error_mark_node;\n \n   if (TREE_CODE (component) == BIT_NOT_EXPR)\n     {\n@@ -3964,6 +3982,9 @@ pointer_int_sum (resultcode, ptrop, intop)\n \n   register tree result_type = TREE_TYPE (ptrop);\n \n+  if (!complete_type_or_else (result_type))\n+    return error_mark_node;\n+\n   if (TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n     {\n       if (pedantic || warn_pointer_arith)\n@@ -4053,6 +4074,9 @@ pointer_diff (op0, op1, ptrtype)\n   tree restype = ptrdiff_type_node;\n   tree target_type = TREE_TYPE (ptrtype);\n \n+  if (!complete_type_or_else (target_type))\n+    return error_mark_node;\n+\n   if (pedantic || warn_pointer_arith)\n     {\n       if (TREE_CODE (target_type) == VOID_TYPE)"}, {"sha": "f85497674dfbf8edff28e7dfc19f732ee9ffe2ad", "filename": "gcc/testsuite/g++.old-deja/g++.pt/pointer1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpointer1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f259df3c054e887bf95c598842a4245195a1107/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpointer1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fpointer1.C?ref=8f259df3c054e887bf95c598842a4245195a1107", "patch": "@@ -0,0 +1,17 @@\n+// Build don't link:\n+\n+template <class T>\n+struct S1\n+{\n+};\n+\n+template <class T>\n+struct S2\n+{\n+  typedef T* pointer_t;\n+};\n+\n+int f(S2<S1<int> >::pointer_t p1, S2<S1<int> >::pointer_t p2)\n+{\n+  return (int) (p1 - p2);\n+}"}]}