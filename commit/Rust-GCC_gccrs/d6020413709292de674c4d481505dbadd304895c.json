{"sha": "d6020413709292de674c4d481505dbadd304895c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwMjA0MTM3MDkyOTJkZTY3NGM0ZDQ4MTUwNWRiYWRkMzA0ODk1Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-26T23:25:49Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-05-26T23:25:49Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1093", "tree": {"sha": "4711d6e6c65c334adf47469d8d9740c9d051463b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4711d6e6c65c334adf47469d8d9740c9d051463b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6020413709292de674c4d481505dbadd304895c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6020413709292de674c4d481505dbadd304895c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6020413709292de674c4d481505dbadd304895c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6020413709292de674c4d481505dbadd304895c/comments", "author": null, "committer": null, "parents": [{"sha": "c753237db26c6fe9dd4c648db2392af534b5a653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c753237db26c6fe9dd4c648db2392af534b5a653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c753237db26c6fe9dd4c648db2392af534b5a653"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "95f276fda26e2502a28cd598d651c2425a6fee42", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6020413709292de674c4d481505dbadd304895c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6020413709292de674c4d481505dbadd304895c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=d6020413709292de674c4d481505dbadd304895c", "patch": "@@ -563,12 +563,28 @@ gen_lowpart_common (mode, x)\n   /* If X is an integral constant but we want it in floating-point, it\n      must be the case that we have a union of an integer and a floating-point\n      value.  If the machine-parameters allow it, simulate that union here\n-     and return the result.  */\n+     and return the result.  The two-word and single-word cases are \n+     different.  */\n \n   else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n \t     && HOST_BITS_PER_INT == BITS_PER_WORD)\n \t    || flag_pretend_float)\n \t   && GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t   && GET_MODE_SIZE (mode) == UNITS_PER_WORD\n+\t   && GET_CODE (x) == CONST_INT\n+\t   && sizeof (float) * HOST_BITS_PER_CHAR == HOST_BITS_PER_INT)\n+    {\n+      union {int i; float d; } u;\n+\n+      u.i = INTVAL (x);\n+      return immed_real_const_1 (u.d, mode);\n+    }\n+\n+  else if (((HOST_FLOAT_FORMAT == TARGET_FLOAT_FORMAT\n+\t     && HOST_BITS_PER_INT == BITS_PER_WORD)\n+\t    || flag_pretend_float)\n+\t   && GET_MODE_CLASS (mode) == MODE_FLOAT\n+\t   && GET_MODE_SIZE (mode) == 2 * UNITS_PER_WORD\n \t   && (GET_CODE (x) == CONST_INT || GET_CODE (x) == CONST_DOUBLE)\n \t   && GET_MODE (x) == VOIDmode\n \t   && sizeof (double) * HOST_BITS_PER_CHAR == 2 * HOST_BITS_PER_INT)"}]}