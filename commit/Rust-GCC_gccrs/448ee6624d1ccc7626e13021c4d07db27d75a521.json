{"sha": "448ee6624d1ccc7626e13021c4d07db27d75a521", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ4ZWU2NjI0ZDFjY2M3NjI2ZTEzMDIxYzRkMDdkYjI3ZDc1YTUyMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-28T08:50:19Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-28T08:50:19Z"}, "message": "tree.h (SSA_NAME_VALUE): Remove.\n\n2009-04-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.h (SSA_NAME_VALUE): Remove.\n\t(struct tree_ssa_name): Remove value_handle member.\n\t* tree-vrp.c (execute_vrp): Initialize/free the value-handle\n\tarray for jump threading.\n\t* tree-ssa-propagate.c (ssa_prop_init): Do not initialize\n\tSSA_NAME_VALUEs.\n\t* print-tree.c (print_node): Do not dump SSA_NAME_VALUEs.\n\t* tree-flow.h (threadedge_initialize_values): Declare.\n\t(threadedge_finalize_values): Likewise.\n\t* tree-ssa-threadedge.c (ssa_name_values): New global variable.\n\t(SSA_NAME_VALUE): Define.\n\t(threadedge_initialize_values): New function.\n\t(threadedge_finalize_values): Likewise.\n\t* tree-ssa-dom.c (ssa_name_values): New global variable.\n\t(SSA_NAME_VALUE): Define.\n\t(tree_ssa_dominator_optimize): Initialize/free the value-handle\n\tarray.\n\nFrom-SVN: r146877", "tree": {"sha": "eeeda80bc63372aa4a48d848ceb4bb06bb28cb7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eeeda80bc63372aa4a48d848ceb4bb06bb28cb7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/448ee6624d1ccc7626e13021c4d07db27d75a521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448ee6624d1ccc7626e13021c4d07db27d75a521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/448ee6624d1ccc7626e13021c4d07db27d75a521", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/448ee6624d1ccc7626e13021c4d07db27d75a521/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8a861bd078e982b9020121454f331b1528b04b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a861bd078e982b9020121454f331b1528b04b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a861bd078e982b9020121454f331b1528b04b1"}], "stats": {"total": 118, "additions": 73, "deletions": 45}, "files": [{"sha": "560c03cc0535819b3be27b75853441dbd75887fb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -1,3 +1,23 @@\n+2009-04-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.h (SSA_NAME_VALUE): Remove.\n+\t(struct tree_ssa_name): Remove value_handle member.\n+\t* tree-vrp.c (execute_vrp): Initialize/free the value-handle\n+\tarray for jump threading.\n+\t* tree-ssa-propagate.c (ssa_prop_init): Do not initialize\n+\tSSA_NAME_VALUEs.\n+\t* print-tree.c (print_node): Do not dump SSA_NAME_VALUEs.\n+\t* tree-flow.h (threadedge_initialize_values): Declare.\n+\t(threadedge_finalize_values): Likewise.\n+\t* tree-ssa-threadedge.c (ssa_name_values): New global variable.\n+\t(SSA_NAME_VALUE): Define.\n+\t(threadedge_initialize_values): New function.\n+\t(threadedge_finalize_values): Likewise.\n+\t* tree-ssa-dom.c (ssa_name_values): New global variable.\n+\t(SSA_NAME_VALUE): Define.\n+\t(tree_ssa_dominator_optimize): Initialize/free the value-handle\n+\tarray.\n+\n 2009-04-28  Ira Rosen  <irar@il.ibm.com>\n \n \t* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks):"}, {"sha": "2e5144363944bbd7ea44a6dcb6300d7eadf5ba7a", "filename": "gcc/print-tree.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -896,14 +896,11 @@ print_node (FILE *file, const char *prefix, tree node, int indent)\n \t  if (SSA_NAME_IN_FREE_LIST (node))\n \t    fprintf (file, \" in-free-list\");\n \n-\t  if (SSA_NAME_PTR_INFO (node)\n-\t      || SSA_NAME_VALUE (node))\n+\t  if (SSA_NAME_PTR_INFO (node))\n \t    {\n \t      indent_to (file, indent + 3);\n \t      if (SSA_NAME_PTR_INFO (node))\n \t\tdump_addr (file, \" ptr-info \", SSA_NAME_PTR_INFO (node));\n-\t      if (SSA_NAME_VALUE (node))\n-\t\tdump_addr (file, \" value \", SSA_NAME_VALUE (node));\n \t    }\n \t  break;\n "}, {"sha": "a02eca5275b601e46b0e143a24a7751a6154c69f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -803,6 +803,14 @@ bool stmt_dominates_stmt_p (gimple, gimple);\n void mark_virtual_ops_for_renaming (gimple);\n \n /* In tree-ssa-threadedge.c */\n+extern void threadedge_initialize_values (void);\n+extern void threadedge_finalize_values (void);\n+extern VEC(tree,heap) *ssa_name_values;\n+#define SSA_NAME_VALUE(x) \\\n+    (SSA_NAME_VERSION(x) < VEC_length(tree, ssa_name_values) \\\n+     ? VEC_index(tree, ssa_name_values, SSA_NAME_VERSION(x)) \\\n+     : NULL_TREE)\n+extern void set_ssa_name_value (tree, tree);\n extern bool potentially_threadable_block (basic_block);\n extern void thread_across_edge (gimple, edge, bool,\n \t\t\t\tVEC(tree, heap) **, tree (*) (gimple, gimple));"}, {"sha": "a134244bd9fa70efce5de144ecc9df5f6d1ee9a7", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -619,7 +619,6 @@ static unsigned int\n tree_ssa_dominator_optimize (void)\n {\n   struct dom_walk_data walk_data;\n-  unsigned int i;\n \n   memset (&opt_stats, 0, sizeof (opt_stats));\n \n@@ -659,6 +658,9 @@ tree_ssa_dominator_optimize (void)\n      that we update the loop info.  */\n   loop_optimizer_init (LOOPS_HAVE_SIMPLE_LATCHES);\n \n+  /* Initialize the value-handle array.  */\n+  threadedge_initialize_values ();\n+\n   /* We need accurate information regarding back edges in the CFG\n      for jump threading; this may include back edges that are not part of\n      a single loop.  */\n@@ -716,23 +718,6 @@ tree_ssa_dominator_optimize (void)\n       bitmap_zero (need_eh_cleanup);\n     }\n \n-  /* Finally, remove everything except invariants in SSA_NAME_VALUE.\n-\n-     Long term we will be able to let everything in SSA_NAME_VALUE\n-     persist.  However, for now, we know this is the safe thing to do.  */\n-  for (i = 0; i < num_ssa_names; i++)\n-   {\n-      tree name = ssa_name (i);\n-      tree value;\n-\n-      if (!name)\n-        continue;\n-\n-      value = SSA_NAME_VALUE (name);\n-      if (value && !is_gimple_min_invariant (value))\n-\tSSA_NAME_VALUE (name) = NULL;\n-    }\n-\n   statistics_counter_event (cfun, \"Redundant expressions eliminated\",\n \t\t\t    opt_stats.num_re);\n   statistics_counter_event (cfun, \"Constants propagated\",\n@@ -759,6 +744,10 @@ tree_ssa_dominator_optimize (void)\n   VEC_free (tree, heap, const_and_copies_stack);\n   VEC_free (gimple_p, heap, stmts_to_rescan);\n   \n+  /* Free the value-handle array.  */\n+  threadedge_finalize_values ();\n+  ssa_name_values = NULL;\n+\n   return 0;\n }\n \n@@ -912,7 +901,7 @@ restore_vars_to_original_value (void)\n \t}\n \n       prev_value = VEC_pop (tree, const_and_copies_stack);\n-      SSA_NAME_VALUE (dest) =  prev_value;\n+      set_ssa_name_value (dest, prev_value);\n     }\n }\n \n@@ -1124,7 +1113,7 @@ record_equivalences_from_phis (basic_block bb)\n \t inferred from a comparison.  All uses of this ssa name are dominated\n \t by this assignment, so unwinding just costs time and space.  */\n       if (i == gimple_phi_num_args (phi) && may_propagate_copy (lhs, rhs))\n-\tSSA_NAME_VALUE (lhs) = rhs;\n+\tset_ssa_name_value (lhs, rhs);\n     }\n }\n \n@@ -1437,7 +1426,7 @@ record_conditions (struct edge_info *edge_info, tree cond, tree inverted)\n static void\n record_const_or_copy_1 (tree x, tree y, tree prev_x)\n {\n-  SSA_NAME_VALUE (x) = y;\n+  set_ssa_name_value (x, y);\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n@@ -1956,7 +1945,7 @@ record_equivalences_from_stmt (gimple stmt, int may_optimize_p)\n \t    fprintf (dump_file, \"\\n\");\n \t  }\n \n-\tSSA_NAME_VALUE (lhs) = rhs;\n+\tset_ssa_name_value (lhs, rhs);\n       }\n     }\n "}, {"sha": "3e8d1219c808c98f74b13d786f17df9026d6253e", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -487,7 +487,6 @@ ssa_prop_init (void)\n   edge e;\n   edge_iterator ei;\n   basic_block bb;\n-  size_t i;\n \n   /* Worklists of SSA edges.  */\n   interesting_ssa_edges = VEC_alloc (gimple, gc, 20);\n@@ -505,11 +504,6 @@ ssa_prop_init (void)\n   cfg_blocks = VEC_alloc (basic_block, heap, 20);\n   VEC_safe_grow (basic_block, heap, cfg_blocks, 20);\n \n-  /* Initialize the values for every SSA_NAME.  */\n-  for (i = 1; i < num_ssa_names; i++)\n-    if (ssa_name (i))\n-      SSA_NAME_VALUE (ssa_name (i)) = NULL_TREE;\n-\n   /* Initially assume that every edge in the CFG is not executable.\n      (including the edges coming out of ENTRY_BLOCK_PTR).  */\n   FOR_ALL_BB (bb)"}, {"sha": "473bc9b90b4068e71a2446fd22ca78a3b8c9a388", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -49,6 +49,35 @@ along with GCC; see the file COPYING3.  If not see\n    to copy as part of the jump threading process.  */\n static int stmt_count;\n \n+/* Array to record value-handles per SSA_NAME.  */\n+VEC(tree,heap) *ssa_name_values;\n+\n+/* Set the value for the SSA name NAME to VALUE.  */\n+\n+void\n+set_ssa_name_value (tree name, tree value)\n+{\n+  if (SSA_NAME_VERSION (name) >= VEC_length (tree, ssa_name_values))\n+    VEC_safe_grow_cleared (tree, heap, ssa_name_values,\n+\t\t\t   SSA_NAME_VERSION (name) + 1);\n+  VEC_replace (tree, ssa_name_values, SSA_NAME_VERSION (name), value);\n+}\n+\n+/* Initialize the per SSA_NAME value-handles array.  Returns it.  */\n+void\n+threadedge_initialize_values (void)\n+{\n+  gcc_assert (ssa_name_values == NULL);\n+  ssa_name_values = VEC_alloc(tree, heap, num_ssa_names);\n+}\n+\n+/* Free the per SSA_NAME value-handle array.  */\n+void\n+threadedge_finalize_values (void)\n+{\n+  VEC_free(tree, heap, ssa_name_values);\n+}\n+\n /* Return TRUE if we may be able to thread an incoming edge into\n    BB to an outgoing edge from BB.  Return FALSE otherwise.  */\n \n@@ -126,7 +155,7 @@ remove_temporary_equivalences (VEC(tree, heap) **stack)\n \tbreak;\n \n       prev_value = VEC_pop (tree, *stack);\n-      SSA_NAME_VALUE (dest) = prev_value;\n+      set_ssa_name_value (dest, prev_value);\n     }\n }\n \n@@ -145,7 +174,7 @@ record_temporary_equivalence (tree x, tree y, VEC(tree, heap) **stack)\n       y = tmp ? tmp : y;\n     }\n \n-  SSA_NAME_VALUE (x) = y;\n+  set_ssa_name_value (x, y);\n   VEC_reserve (tree, heap, *stack, 2);\n   VEC_quick_push (tree, *stack, prev_x);\n   VEC_quick_push (tree, *stack, x);"}, {"sha": "09c634246ecf2c221fea545ef53773d8c8a13777", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -7277,6 +7277,7 @@ execute_vrp (void)\n \n   to_remove_edges = VEC_alloc (edge, heap, 10);\n   to_update_switch_stmts = VEC_alloc (switch_update, heap, 5);\n+  threadedge_initialize_values ();\n \n   vrp_initialize ();\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n@@ -7322,6 +7323,7 @@ execute_vrp (void)\n \n   VEC_free (edge, heap, to_remove_edges);\n   VEC_free (switch_update, heap, to_update_switch_stmts);\n+  threadedge_finalize_values ();\n \n   scev_finalize ();\n   loop_optimizer_finalize ();"}, {"sha": "1e58d52d8bcfd70271191bb7bf759b3bb54b97c0", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/448ee6624d1ccc7626e13021c4d07db27d75a521/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=448ee6624d1ccc7626e13021c4d07db27d75a521", "patch": "@@ -1854,10 +1854,6 @@ struct GTY(()) tree_exp {\n #define SSA_NAME_PTR_INFO(N) \\\n     SSA_NAME_CHECK (N)->ssa_name.ptr_info\n \n-/* Get the value of this SSA_NAME, if available.  */\n-#define SSA_NAME_VALUE(N) \\\n-   SSA_NAME_CHECK (N)->ssa_name.value_handle\n-\n #ifndef _TREE_FLOW_H\n struct ptr_info_def;\n #endif\n@@ -1896,13 +1892,6 @@ struct GTY(()) tree_ssa_name {\n   /* Pointer attributes used for alias analysis.  */\n   struct ptr_info_def *ptr_info;\n \n-  /* Value for SSA name used by various passes.\n-\n-     Right now only invariants are allowed to persist beyond a pass in\n-     this field; in the future we will allow VALUE_HANDLEs to persist\n-     as well.  */\n-  tree value_handle;\n-\n   /* Immediate uses list for this SSA_NAME.  */\n   struct ssa_use_operand_d imm_uses;\n };"}]}