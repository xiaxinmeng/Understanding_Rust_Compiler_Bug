{"sha": "b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRkNDM1NTNlOTM1M2RlNGZlZmIzYTFmZGUxMjc3ZWViMWJhZDdiZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-16T14:26:43Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-16T14:26:43Z"}, "message": "poly_int: mode query functions\n\nThis patch changes the bit size and vector count arguments to the\nmachmode.h functions from unsigned int to poly_uint64.\n\n2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* machmode.h (mode_for_size, int_mode_for_size, float_mode_for_size)\n\t(smallest_mode_for_size, smallest_int_mode_for_size): Take the mode\n\tsize as a poly_uint64.\n\t(mode_for_vector, mode_for_int_vector): Take the number of vector\n\telements as a poly_uint64.\n\t* stor-layout.c (mode_for_size, smallest_mode_for_size): Take the mode\n\tsize as a poly_uint64.\n\t(mode_for_vector, mode_for_int_vector): Take the number of vector\n\telements as a poly_uint64.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255747", "tree": {"sha": "9ffc3f135f0fea7660029282f6928e0c8b706973", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ffc3f135f0fea7660029282f6928e0c8b706973"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/comments", "author": null, "committer": null, "parents": [{"sha": "b4ddce3663ce151423f81c9e2a206df3081d1071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ddce3663ce151423f81c9e2a206df3081d1071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ddce3663ce151423f81c9e2a206df3081d1071"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "8124e6154965e5dcba71ebeb760ed395029a0bd2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "patch": "@@ -1,3 +1,17 @@\n+2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* machmode.h (mode_for_size, int_mode_for_size, float_mode_for_size)\n+\t(smallest_mode_for_size, smallest_int_mode_for_size): Take the mode\n+\tsize as a poly_uint64.\n+\t(mode_for_vector, mode_for_int_vector): Take the number of vector\n+\telements as a poly_uint64.\n+\t* stor-layout.c (mode_for_size, smallest_mode_for_size): Take the mode\n+\tsize as a poly_uint64.\n+\t(mode_for_vector, mode_for_int_vector): Take the number of vector\n+\telements as a poly_uint64.\n+\n 2017-12-16  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "02a41b25c4cddb9986a58ee287150ba3edb6cf1a", "filename": "gcc/machmode.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "patch": "@@ -696,14 +696,14 @@ fixed_size_mode::includes_p (machine_mode)\n #define MACRO_MODE(MODE) (MODE)\n #endif\n \n-extern opt_machine_mode mode_for_size (unsigned int, enum mode_class, int);\n+extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);\n \n /* Return the machine mode to use for a MODE_INT of SIZE bits, if one\n    exists.  If LIMIT is nonzero, modes wider than MAX_FIXED_MODE_SIZE\n    will not be used.  */\n \n inline opt_scalar_int_mode\n-int_mode_for_size (unsigned int size, int limit)\n+int_mode_for_size (poly_uint64 size, int limit)\n {\n   return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));\n }\n@@ -712,7 +712,7 @@ int_mode_for_size (unsigned int size, int limit)\n    exists.  */\n \n inline opt_scalar_float_mode\n-float_mode_for_size (unsigned int size)\n+float_mode_for_size (poly_uint64 size)\n {\n   return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));\n }\n@@ -726,21 +726,21 @@ decimal_float_mode_for_size (unsigned int size)\n     (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));\n }\n \n-extern machine_mode smallest_mode_for_size (unsigned int, enum mode_class);\n+extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);\n \n /* Find the narrowest integer mode that contains at least SIZE bits.\n    Such a mode must exist.  */\n \n inline scalar_int_mode\n-smallest_int_mode_for_size (unsigned int size)\n+smallest_int_mode_for_size (poly_uint64 size)\n {\n   return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));\n }\n \n extern opt_scalar_int_mode int_mode_for_mode (machine_mode);\n extern opt_machine_mode bitwise_mode_for_mode (machine_mode);\n-extern opt_machine_mode mode_for_vector (scalar_mode, unsigned);\n-extern opt_machine_mode mode_for_int_vector (unsigned int, unsigned int);\n+extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);\n+extern opt_machine_mode mode_for_int_vector (unsigned int, poly_uint64);\n \n /* Return the integer vector equivalent of MODE, if one exists.  In other\n    words, return the mode for an integer vector that has the same number"}, {"sha": "67062194d2cf2179a433b4cf04cb1e7f6020c99c", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4d43553e9353de4fefb3a1fde1277eeb1bad7be/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=b4d43553e9353de4fefb3a1fde1277eeb1bad7be", "patch": "@@ -298,22 +298,22 @@ finalize_size_functions (void)\n    MAX_FIXED_MODE_SIZE.  */\n \n opt_machine_mode\n-mode_for_size (unsigned int size, enum mode_class mclass, int limit)\n+mode_for_size (poly_uint64 size, enum mode_class mclass, int limit)\n {\n   machine_mode mode;\n   int i;\n \n-  if (limit && size > MAX_FIXED_MODE_SIZE)\n+  if (limit && maybe_gt (size, (unsigned int) MAX_FIXED_MODE_SIZE))\n     return opt_machine_mode ();\n \n   /* Get the first mode which has this size, in the specified class.  */\n   FOR_EACH_MODE_IN_CLASS (mode, mclass)\n-    if (GET_MODE_PRECISION (mode) == size)\n+    if (known_eq (GET_MODE_PRECISION (mode), size))\n       return mode;\n \n   if (mclass == MODE_INT || mclass == MODE_PARTIAL_INT)\n     for (i = 0; i < NUM_INT_N_ENTS; i ++)\n-      if (int_n_data[i].bitsize == size\n+      if (known_eq (int_n_data[i].bitsize, size)\n \t  && int_n_enabled_p[i])\n \treturn int_n_data[i].m;\n \n@@ -341,27 +341,26 @@ mode_for_size_tree (const_tree size, enum mode_class mclass, int limit)\n    SIZE bits.  Abort if no such mode exists.  */\n \n machine_mode\n-smallest_mode_for_size (unsigned int size, enum mode_class mclass)\n+smallest_mode_for_size (poly_uint64 size, enum mode_class mclass)\n {\n   machine_mode mode = VOIDmode;\n   int i;\n \n   /* Get the first mode which has at least this size, in the\n      specified class.  */\n   FOR_EACH_MODE_IN_CLASS (mode, mclass)\n-    if (GET_MODE_PRECISION (mode) >= size)\n+    if (known_ge (GET_MODE_PRECISION (mode), size))\n       break;\n \n+  gcc_assert (mode != VOIDmode);\n+\n   if (mclass == MODE_INT || mclass == MODE_PARTIAL_INT)\n     for (i = 0; i < NUM_INT_N_ENTS; i ++)\n-      if (int_n_data[i].bitsize >= size\n-\t  && int_n_data[i].bitsize < GET_MODE_PRECISION (mode)\n+      if (known_ge (int_n_data[i].bitsize, size)\n+\t  && known_lt (int_n_data[i].bitsize, GET_MODE_PRECISION (mode))\n \t  && int_n_enabled_p[i])\n \tmode = int_n_data[i].m;\n \n-  if (mode == VOIDmode)\n-    gcc_unreachable ();\n-\n   return mode;\n }\n \n@@ -476,7 +475,7 @@ bitwise_type_for_mode (machine_mode mode)\n    either an integer mode or a vector mode.  */\n \n opt_machine_mode\n-mode_for_vector (scalar_mode innermode, unsigned nunits)\n+mode_for_vector (scalar_mode innermode, poly_uint64 nunits)\n {\n   machine_mode mode;\n \n@@ -497,14 +496,14 @@ mode_for_vector (scalar_mode innermode, unsigned nunits)\n   /* Do not check vector_mode_supported_p here.  We'll do that\n      later in vector_type_mode.  */\n   FOR_EACH_MODE_FROM (mode, mode)\n-    if (GET_MODE_NUNITS (mode) == nunits\n+    if (known_eq (GET_MODE_NUNITS (mode), nunits)\n \t&& GET_MODE_INNER (mode) == innermode)\n       return mode;\n \n   /* For integers, try mapping it to a same-sized scalar mode.  */\n   if (GET_MODE_CLASS (innermode) == MODE_INT)\n     {\n-      unsigned int nbits = nunits * GET_MODE_BITSIZE (innermode);\n+      poly_uint64 nbits = nunits * GET_MODE_BITSIZE (innermode);\n       if (int_mode_for_size (nbits, 0).exists (&mode)\n \t  && have_regs_of_mode[mode])\n \treturn mode;\n@@ -518,7 +517,7 @@ mode_for_vector (scalar_mode innermode, unsigned nunits)\n    an integer mode or a vector mode.  */\n \n opt_machine_mode\n-mode_for_int_vector (unsigned int int_bits, unsigned int nunits)\n+mode_for_int_vector (unsigned int int_bits, poly_uint64 nunits)\n {\n   scalar_int_mode int_mode;\n   machine_mode vec_mode;"}]}