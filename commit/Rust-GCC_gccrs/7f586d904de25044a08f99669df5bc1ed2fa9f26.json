{"sha": "7f586d904de25044a08f99669df5bc1ed2fa9f26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1ODZkOTA0ZGUyNTA0NGEwOGY5OTY2OWRmNWJjMWVkMmZhOWYyNg==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2016-06-23T14:34:04Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2016-06-23T14:34:04Z"}, "message": "Run profile feedback tests with autofdo\n\nExtend the existing bprob and tree-prof tests to also run with autofdo.\nThe test runtimes are really a bit too short for autofdo, but it's\na reasonable sanity check.\n\nThis only works natively for now.\n\ndejagnu doesn't seem to support a wrapper for unix tests, so I had\nto open code running these tests.  That should be ok due to the\nnative run restrictions.\n\ngcc/testsuite/:\n\n2016-06-23  Andi Kleen  <ak@linux.intel.com>\n\n\t* g++.dg/bprob/bprob.exp: Support autofdo.\n\t* g++.dg/tree-prof/tree-prof.exp: dito.\n\t* gcc.dg/tree-prof/tree-prof.exp: dito.\n\t* gcc.misc-tests/bprob.exp: dito.\n\t* gfortran.dg/prof/prof.exp: dito.\n\t* lib/profopt.exp: dito.\n\t* lib/target-supports.exp: Check for autofdo.\n\nFrom-SVN: r237732", "tree": {"sha": "91935af5ca8da3b1809c9bd7bd8d4b7b0af1b0f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91935af5ca8da3b1809c9bd7bd8d4b7b0af1b0f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f586d904de25044a08f99669df5bc1ed2fa9f26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f586d904de25044a08f99669df5bc1ed2fa9f26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f586d904de25044a08f99669df5bc1ed2fa9f26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f586d904de25044a08f99669df5bc1ed2fa9f26/comments", "author": null, "committer": null, "parents": [{"sha": "7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b72d14a9fc6f99caf54ed7b2a5b567d97bd3bb3"}], "stats": {"total": 167, "additions": 164, "deletions": 3}, "files": [{"sha": "55f8dbfcc108b20348dbc8025e56554dc721777b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -1,3 +1,13 @@\n+2016-06-23  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* g++.dg/bprob/bprob.exp: Support autofdo.\n+\t* g++.dg/tree-prof/tree-prof.exp: dito.\n+\t* gcc.dg/tree-prof/tree-prof.exp: dito.\n+\t* gcc.misc-tests/bprob.exp: dito.\n+\t* gfortran.dg/prof/prof.exp: dito.\n+\t* lib/profopt.exp: dito.\n+\t* lib/target-supports.exp: Check for autofdo.\n+\n 2016-06-23  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/pr71619.c: New test."}, {"sha": "4818298c640671652b6cfc6a3a8ea22d0586c637", "filename": "gcc/testsuite/g++.dg/bprob/bprob.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -53,6 +53,7 @@ if $tracelevel then {\n \n set profile_options \"-fprofile-arcs\"\n set feedback_options \"-fbranch-probabilities\"\n+set profile_wrapper \"\"\n \n # Main loop.\n foreach profile_option $profile_options feedback_option $feedback_options {\n@@ -65,4 +66,11 @@ foreach profile_option $profile_options feedback_option $feedback_options {\n     }\n }\n \n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    auto-profopt-execute $src\n+}\n+\n set PROFOPT_OPTIONS $bprob_save_profopt_options"}, {"sha": "26ee0b38cdb9c0f0cdad5ec195064c8d05d5224b", "filename": "gcc/testsuite/g++.dg/tree-prof/tree-prof.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -44,6 +44,7 @@ set PROFOPT_OPTIONS [list {}]\n # profile data.\n set profile_option \"-fprofile-generate -D_PROFILE_GENERATE\"\n set feedback_option \"-fprofile-use -D_PROFILE_USE\"\n+set profile_wrapper \"\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -53,4 +54,11 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n     profopt-execute $src\n }\n \n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.C]] {\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    auto-profopt-execute $src\n+}\n+\n set PROFOPT_OPTIONS $treeprof_save_profopt_options"}, {"sha": "aaccf191be9cee15227acfdc9ad3d26a44ee2942", "filename": "gcc/testsuite/gcc.dg/tree-prof/tree-prof.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -44,6 +44,7 @@ set PROFOPT_OPTIONS [list {}]\n # profile data.\n set profile_option \"-fprofile-generate -D_PROFILE_GENERATE\"\n set feedback_option \"-fprofile-use -D_PROFILE_USE\"\n+set profile_wrapper \"\"\n \n foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     # If we're only testing specific files and this isn't one of them, skip it.\n@@ -53,4 +54,11 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n     profopt-execute $src\n }\n \n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.c]] {\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    auto-profopt-execute $src\n+}\n+\n set PROFOPT_OPTIONS $treeprof_save_profopt_options"}, {"sha": "132bfe3f38241ea28d506da5137fb2a4cab1f281", "filename": "gcc/testsuite/gcc.misc-tests/bprob.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -41,6 +41,7 @@ load_lib profopt.exp\n set bprob_save_profopt_options $PROFOPT_OPTIONS\n set PROFOPT_OPTIONS [list { -O2 } { -O3  }]\n \n+set profile_wrapper \"\"\n set profile_options \"-fprofile-arcs\"\n set feedback_options \"-fbranch-probabilities\"\n \n@@ -54,4 +55,10 @@ foreach profile_option $profile_options feedback_option $feedback_options {\n     }\n }\n \n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/bprob-*.c]] {\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    auto-profopt-execute $src\n+}\n set PROFOPT_OPTIONS $bprob_save_profopt_options"}, {"sha": "acc8ed05b490dccfcbc0f8efef8d2497a6241a65", "filename": "gcc/testsuite/gfortran.dg/prof/prof.exp", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fprof%2Fprof.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -53,4 +53,11 @@ foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.f*]] {\n     profopt-execute $src\n }\n \n+foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.f*]] {\n+    if ![runtest_file_p $runtests $src] then {\n+        continue\n+    }\n+    auto-profopt-execute $src\n+}\n+\n set PROFOPT_OPTIONS $treeprof_save_profopt_options"}, {"sha": "b3e2b2e2e930806026539c1af34d12a560cf53d1", "filename": "gcc/testsuite/lib/profopt.exp", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Flib%2Fprofopt.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fprofopt.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -36,7 +36,7 @@ load_lib gcc-dg.exp\n global PROFOPT_OPTIONS perf_delta\n \n # The including .exp file must define these.\n-global tool profile_option feedback_option prof_ext\n+global tool profile_option feedback_option prof_ext profile_wrapper\n if ![info exists tool] {\n     error \"Tools is not specified.\"\n }\n@@ -229,6 +229,31 @@ proc profopt-get-options { src } {\n     return ${dg-extra-tool-flags}\n }\n \n+# auto-profopt-execute -- Compile for auto profiling and then feedback,\n+# then normal. SRC is the full path name of the testcase.\n+proc auto-profopt-execute { src } {\n+    global profile_wrapper\n+    global profile_option\n+    global feedback_option\n+    global run_autofdo\n+    global srcdir\n+\n+    if { ! [check_profiling_available \"-fauto-profile\"] } {\n+        regsub \"(?q)$srcdir/\" $src \"\" testcase\n+        unsupported \"$testcase\"\n+        return\n+    }\n+    set profile_wrapper [profopt-perf-wrapper]\n+    set profile_option \"-g\"\n+    set feedback_option \"-fauto-profile\"\n+    set run_autofdo 1\n+    profopt-execute $src\n+    unset profile_wrapper\n+    unset profile_option\n+    unset feedback_option\n+    unset run_autofdo\n+}\n+\n #\n # c-prof-execute -- compile for profiling and then feedback, then normal\n #\n@@ -238,6 +263,7 @@ proc profopt-execute { src } {\n     global srcdir tmpdir\n     global PROFOPT_OPTIONS\n     global tool profile_option feedback_option prof_ext perf_ext perf_delta\n+    global profile_wrapper run_autofdo ld_library_path\n     global generate_final_code use_final_code\n     global verbose\n     global testname_with_flags\n@@ -248,6 +274,12 @@ proc profopt-execute { src } {\n     if ![info exists feedback_option] {\n         error \"No feedback option specified for second compile.\"\n     }\n+    if ![info exists profile_wrapper] {\n+\tset profile_wrapper \"\"\n+    }\n+    if ![info exists run_autofdo] {\n+\tset run_autofdo \"\"\n+    }\n \n     # Use the default option list or one defined for a set of tests.\n     if ![info exists PROFOPT_OPTIONS] {\n@@ -313,6 +345,7 @@ proc profopt-execute { src } {\n \t# valid, by running it after dg-additional-files-options.\n \tforeach ext $prof_ext {\n \t    profopt-target-cleanup $tmpdir $base $ext\n+\t    profopt-target-cleanup $tmpdir perf data\n \t}\n \n \t# Tree profiling requires TLS runtime support, which may need\n@@ -335,12 +368,50 @@ proc profopt-execute { src } {\n \t}\n \n \t# Run the profiled test.\n+\tif { $run_autofdo == 1 } {\n+\t    if { ![info exists ld_library_path]} {\n+\t\tset ld_library_path \"\"\n+\t    }\n+\t    set orig_ld_library_path \"[getenv LD_LIBRARY_PATH]\"\n+\t    setenv LD_LIBRARY_PATH \"$ld_library_path:$orig_ld_library_path\"\n+\t    verbose \"Running $profile_wrapper $execname1\"\n+\t    set id [remote_spawn \"\" \"$profile_wrapper $execname1\" \"readonly\"]\n+\t    setenv LD_LIBRARY_PATH $orig_ld_library_path\n+\t    if { $id < 0 } {\n+\t\twarning \"Failed to run profiler\"\n+\t\tset status \"fail\"\n+\t    } else {\n+\t\tset result [remote_wait \"\" 300]\n+\t\tset status [lindex $result 0]\n+\t\tverbose \"perf result $result\"\n+\t\tif { $status == 0 } {\n+\t\t    set status \"pass\"\n+\t\t} else {\n+\t\t    set status \"fail\"\n+\t\t}\n+\t    }\n+\t} else {\n+\t    set result [${tool}_load $execname1 \"\" \"\"]\n+\t    set status [lindex $result 0]\n+\t}\n \n-\tset result [${tool}_load $execname1 \"\" \"\"]\n-\tset status [lindex $result 0]\n \tset missing_file 0\n \t# Make sure the profile data was generated, and fail if not.\n \tif { $status == \"pass\" } {\n+\t    # convert profile\n+\t    if { $run_autofdo == 1 } {\n+\t\tset cmd \"create_gcov --binary $execname1 --profile=perf.data -gcov_version=1 --gcov=$tmpdir/$base.$ext\"\n+\t\tverbose \"Running $cmd\"\n+\t\tset id [remote_spawn \"\" $cmd]\n+\t\tif { $id < 0 } {\n+\t\t    unsupported \"$testcase: Cannot run $cmd\"\n+\t\t    set status \"fail\"\n+\t\t    return\n+\t\t}\n+\t\tset status [remote_wait \"\" 300]\n+\t\tset status \"pass\"\n+\t    }\n+\n \t    foreach ext $prof_ext {\n \t\tremote_upload target $tmpdir/$base.$ext\n \t\tset files [glob -nocomplain $base.$ext]\n@@ -375,6 +446,10 @@ proc profopt-execute { src } {\n \tset options \"$extra_options\"\n \tlappend options \"additional_flags=$option $extra_flags $feedback_option\"\n \tset optstr \"$option $feedback_option\"\n+\tif { [string first \"-fauto-profile\" $options] >= 0} {\n+\t    set options [regsub -- \"-fauto-profile\" $options \"-fauto-profile=$tmpdir/$base.$ext\"]\n+\t}\n+\n \tset comp_output [${tool}_target_compile \"$src\" \"$execname2\" \"executable\" $options]\n \n \t# Prune warnings we know are unwanted.\n@@ -399,6 +474,7 @@ proc profopt-execute { src } {\n \t# Remove the profiling data files.\n \tforeach ext $prof_ext {\n \t    profopt-target-cleanup $tmpdir $base $ext\n+\t    profopt-target-cleanup $tmpdir perf data\n \t}\n \n \tif { $status != \"pass\" } {"}, {"sha": "62267cf21aaae1870949f56e3403c6047705d9e8", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f586d904de25044a08f99669df5bc1ed2fa9f26/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=7f586d904de25044a08f99669df5bc1ed2fa9f26", "patch": "@@ -508,6 +508,13 @@ proc check_effective_target_keeps_null_pointer_checks { } {\n     return 0\n }\n \n+# Return the autofdo profile wrapper\n+\n+proc profopt-perf-wrapper { } {\n+    global srcdir\n+    return \"$srcdir/../config/i386/gcc-auto-profile -o perf.data \"\n+}\n+\n # Return true if profiling is supported on the target.\n \n proc check_profiling_available { test_what } {\n@@ -525,6 +532,36 @@ proc check_profiling_available { test_what } {\n \t}\n     }\n \n+    if { $test_what == \"-fauto-profile\" } {\n+\tif { ! ([istarget x86_64-*-linux*] || [istarget i?86-*-linux*]) } {\n+            verbose \"autofdo only supported on linux\"\n+            return 0\n+        }\n+\t# not cross compiling?\n+\tif { ![isnative] } {\n+\t    verbose \"autofdo not supported for non native builds\"\n+\t    return 0\n+\t}\n+\tset event [profopt-perf-wrapper]\n+\tif {$event == \"\" } {\n+\t    verbose \"autofdo not supported\"\n+\t    return 0\n+\t}\n+        global srcdir\n+\tset status [remote_exec host \"$srcdir/../config/i386/gcc-auto-profile\" \"true -v >/dev/null\"]\n+\tif { [lindex $status 0] != 0 } {\n+\t    verbose \"autofdo not supported because perf does not work\"\n+\t    return 0\n+\t}\n+\n+\t# no good way to check this in advance -- check later instead.\n+\t#set status [remote_exec host \"create_gcov\" \"2>/dev/null\"]\n+\t#if { [lindex $status 0] != 255 } {\n+        #    verbose \"autofdo not supported due to missing create_gcov\"\n+        #    return 0\n+        #}\n+    }\n+\n     # Support for -p on solaris2 relies on mcrt1.o which comes with the\n     # vendor compiler.  We cannot reliably predict the directory where the\n     # vendor compiler (and thus mcrt1.o) is installed so we can't"}]}