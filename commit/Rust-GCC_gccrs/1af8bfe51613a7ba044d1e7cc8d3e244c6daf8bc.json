{"sha": "1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFmOGJmZTUxNjEzYTdiYTA0NGQxZTdjYzhkM2UyNDRjNmRhZjhiYw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-02T20:31:21Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-02T20:31:21Z"}, "message": "re PR lto/65130 (ICE with LTO on valid code on x86_64-linux-gnu)\n\n\n\tPR ipa/65130\n\t* ipa-inline.c (check_callers): Looks for recursion.\n\t(inline_to_all_callers): Give up on uninlinable or recursive edges.\n\t* ipa-inline-analysis.c (inline_summary_t::duplicate): Do not update\n\tsummary of inline clones.\n\t(do_estimate_growth_1): Fix recursion check.\n\n\t* gcc.dg/lto/pr65130_0.c: New testcase.\n\t* gcc.dg/lto/pr65130_1.c: New testcase.\n\nFrom-SVN: r221124", "tree": {"sha": "ee0a53af265611768823eb755d621853a9759d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee0a53af265611768823eb755d621853a9759d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/comments", "author": null, "committer": null, "parents": [{"sha": "b91b562cf2764dc10ba00a9473287728a59c4443", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b91b562cf2764dc10ba00a9473287728a59c4443", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b91b562cf2764dc10ba00a9473287728a59c4443"}], "stats": {"total": 74, "additions": 69, "deletions": 5}, "files": [{"sha": "f9c093282b816ed8b6b175258f43df2eb9fc3dc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -1,3 +1,12 @@\n+2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n+\n+\tPR ipa/65130\n+\t* ipa-inline.c (check_callers): Looks for recursion.\n+\t(inline_to_all_callers): Give up on uninlinable or recursive edges.\n+\t* ipa-inline-analysis.c (inline_summary_t::duplicate): Do not update\n+\tsummary of inline clones.\n+\t(do_estimate_growth_1): Fix recursion check.\n+\n 2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n \n \tPR ipa/64988"}, {"sha": "7a9c99cc512c0cb5bc4355e6927e58ff2a471a46", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -1291,7 +1291,8 @@ inline_summary_t::duplicate (cgraph_node *src,\n \t  set_hint_predicate (&info->array_index, p);\n \t}\n     }\n-  inline_update_overall_summary (dst);\n+  if (!dst->global.inlined_to)\n+    inline_update_overall_summary (dst);\n }\n \n \n@@ -3924,10 +3925,11 @@ do_estimate_growth_1 (struct cgraph_node *node, void *data)\n           continue;\n \t}\n \n-      if (e->caller == d->node\n-\t  || (e->caller->global.inlined_to\n-\t      && e->caller->global.inlined_to == d->node))\n-\td->self_recursive = true;\n+      if (e->recursive_p ())\n+\t{\n+\t  d->self_recursive = true;\n+\t  continue;\n+\t}\n       d->growth += estimate_edge_growth (e);\n     }\n   return false;"}, {"sha": "0b38b4c6225c6823b2a0f8a3176ef11dfe9292f5", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -952,6 +952,8 @@ check_callers (struct cgraph_node *node, void *has_hot_call)\n \t return true;\n        if (!can_inline_edge_p (e, true))\n          return true;\n+       if (e->recursive_p ())\n+\t return true;\n        if (!(*(bool *)has_hot_call) && e->maybe_hot_p ())\n \t *(bool *)has_hot_call = true;\n      }\n@@ -2094,6 +2096,15 @@ inline_to_all_callers (struct cgraph_node *node, void *data)\n     {\n       struct cgraph_node *caller = node->callers->caller;\n \n+      if (!can_inline_edge_p (node->callers, true)\n+\t  || node->callers->recursive_p ())\n+\t{\n+\t  if (dump_file)\n+\t    fprintf (dump_file, \"Uninlinable call found; giving up.\\n\");\n+\t  *num_calls = 0;\n+\t  return false;\n+\t}\n+\n       if (dump_file)\n \t{\n \t  fprintf (dump_file,"}, {"sha": "4555c13782a13567a9d0550ec1459a630e8550b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -1,3 +1,9 @@\n+2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n+\n+\tPR ipa/65130\n+\t* gcc.dg/lto/pr65130_0.c: New testcase.\n+\t* gcc.dg/lto/pr65130_1.c: New testcase.\n+\n 2015-03-02  Jan Hubicka   <hubicka@ucw.cz>\n \n \tPR ipa/64988"}, {"sha": "5b68560d7ff42a03dfab127aa0e2ce9c1b630ef1", "filename": "gcc/testsuite/gcc.dg/lto/pr65130_0.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_0.c?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-lto-do link } */\n+/* { dg-lto-options { { -flto -O1 -fdevirtualize } } } */\n+extern void fn3 (void); \n+\n+void fn2(void) \n+{ \n+  fn3(); \n+}\n+\n+void fn1(void) \n+{ \n+  fn2(); \n+}\n+\n+void fn4(void) \n+{ \n+  fn2(); \n+}\n+"}, {"sha": "1bfaa15ec750914960907bf2387b88e767d7f9a0", "filename": "gcc/testsuite/gcc.dg/lto/pr65130_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2Fpr65130_1.c?ref=1af8bfe51613a7ba044d1e7cc8d3e244c6daf8bc", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-options \"-O2 -fdevirtualize\" } */\n+extern void fn1(void);\n+extern void fn4 (void); \n+\n+int a; \n+\n+void fn3(void) \n+{\n+  for (; a;)\n+    fn4();\n+}\n+\n+int main() {\n+  fn1();\n+  return 0;\n+}\n+"}]}