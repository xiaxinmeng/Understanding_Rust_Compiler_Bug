{"sha": "c954bddd5fbafeb558aea958cafa970677740b23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk1NGJkZGQ1ZmJhZmViNTU4YWVhOTU4Y2FmYTk3MDY3Nzc0MGIyMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2012-12-04T13:20:20Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2012-12-04T13:20:20Z"}, "message": "re PR sanitizer/55439 (ThreadSanitizer: handle atomic operations)\n\n\tPR sanitizer/55439\n\t* Makefile.in (tsan.o): Depend on tree-ssa-propagate.h.\n\t* sanitizer.def: Add __tsan_atomic* builtins.\n\t* asan.c (initialize_sanitizer_builtins): Adjust to also\n\tinitialize __tsan_atomic* builtins.\n\t* tsan.c: Include tree-ssa-propagate.h.\n\t(enum tsan_atomic_action): New enum.\n\t(tsan_atomic_table): New table.\n\t(instrument_builtin_call): New function.\n\t(instrument_gimple): Take pointer to gimple_stmt_iterator\n\tinstead of gimple_stmt_iterator.  Call instrument_builtin_call\n\ton builtin call stmts.\n\t(instrument_memory_accesses): Adjust instrument_gimple caller.\n\t* builtin-types.def (BT_FN_BOOL_VPTR_PTR_I1_INT_INT,\n\tBT_FN_BOOL_VPTR_PTR_I2_INT_INT, BT_FN_BOOL_VPTR_PTR_I4_INT_INT,\n\tBT_FN_BOOL_VPTR_PTR_I8_INT_INT, BT_FN_BOOL_VPTR_PTR_I16_INT_INT): New.\n\nFrom-SVN: r194133", "tree": {"sha": "21044204031b54a990ff0b62ce262c476b707eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21044204031b54a990ff0b62ce262c476b707eda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c954bddd5fbafeb558aea958cafa970677740b23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c954bddd5fbafeb558aea958cafa970677740b23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c954bddd5fbafeb558aea958cafa970677740b23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c954bddd5fbafeb558aea958cafa970677740b23/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41d37c5656b03f992c97e29f74241ba1d24e3cd8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d37c5656b03f992c97e29f74241ba1d24e3cd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d37c5656b03f992c97e29f74241ba1d24e3cd8"}], "stats": {"total": 693, "additions": 685, "deletions": 8}, "files": [{"sha": "fa113df67800582ea90fe2d6b58e88918764f0bd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -1,3 +1,22 @@\n+2012-12-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR sanitizer/55439\n+\t* Makefile.in (tsan.o): Depend on tree-ssa-propagate.h.\n+\t* sanitizer.def: Add __tsan_atomic* builtins.\n+\t* asan.c (initialize_sanitizer_builtins): Adjust to also\n+\tinitialize __tsan_atomic* builtins.\n+\t* tsan.c: Include tree-ssa-propagate.h.\n+\t(enum tsan_atomic_action): New enum.\n+\t(tsan_atomic_table): New table.\n+\t(instrument_builtin_call): New function.\n+\t(instrument_gimple): Take pointer to gimple_stmt_iterator\n+\tinstead of gimple_stmt_iterator.  Call instrument_builtin_call\n+\ton builtin call stmts.\n+\t(instrument_memory_accesses): Adjust instrument_gimple caller.\n+\t* builtin-types.def (BT_FN_BOOL_VPTR_PTR_I1_INT_INT,\n+\tBT_FN_BOOL_VPTR_PTR_I2_INT_INT, BT_FN_BOOL_VPTR_PTR_I4_INT_INT,\n+\tBT_FN_BOOL_VPTR_PTR_I8_INT_INT, BT_FN_BOOL_VPTR_PTR_I16_INT_INT): New.\n+\n 2012-12-04  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_simd_vector_alignment,"}, {"sha": "6831244b9f7df95f70cac127df4d3d9bb0599a0c", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -2234,7 +2234,8 @@ tsan.o : $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(TREE_INLINE_H) \\\n    $(TM_H) coretypes.h $(TREE_DUMP_H) $(TREE_PASS_H) $(CGRAPH_H) $(GGC_H) \\\n    $(BASIC_BLOCK_H) $(FLAGS_H) $(FUNCTION_H) \\\n    $(TM_P_H) $(TREE_FLOW_H) $(DIAGNOSTIC_CORE_H) $(GIMPLE_H) tree-iterator.h \\\n-   intl.h cfghooks.h output.h options.h c-family/c-common.h tsan.h asan.h\n+   intl.h cfghooks.h output.h options.h c-family/c-common.h tsan.h asan.h \\\n+   tree-ssa-propagate.h\n tree-ssa-tail-merge.o: tree-ssa-tail-merge.c \\\n    $(SYSTEM_H) $(CONFIG_H) coretypes.h $(TM_H) $(BITMAP_H) \\\n    $(FLAGS_H) $(TM_P_H) $(BASIC_BLOCK_H) \\"}, {"sha": "41c5c3345f8490c42d8b798df1ac331f7f239b14", "filename": "gcc/asan.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fasan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fasan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fasan.c?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -1505,6 +1505,58 @@ initialize_sanitizer_builtins (void)\n     = build_function_type_list (void_type_node, ptr_type_node,\n \t\t\t\tbuild_nonstandard_integer_type (POINTER_SIZE,\n \t\t\t\t\t\t\t\t1), NULL_TREE);\n+  tree BT_FN_VOID_INT\n+    = build_function_type_list (void_type_node, integer_type_node, NULL_TREE);\n+  tree BT_FN_BOOL_VPTR_PTR_IX_INT_INT[5];\n+  tree BT_FN_IX_CONST_VPTR_INT[5];\n+  tree BT_FN_IX_VPTR_IX_INT[5];\n+  tree BT_FN_VOID_VPTR_IX_INT[5];\n+  tree vptr\n+    = build_pointer_type (build_qualified_type (void_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_VOLATILE));\n+  tree cvptr\n+    = build_pointer_type (build_qualified_type (void_type_node,\n+\t\t\t\t\t\tTYPE_QUAL_VOLATILE\n+\t\t\t\t\t\t|TYPE_QUAL_CONST));\n+  tree boolt\n+    = lang_hooks.types.type_for_size (BOOL_TYPE_SIZE, 1);\n+  int i;\n+  for (i = 0; i < 5; i++)\n+    {\n+      tree ix = build_nonstandard_integer_type (BITS_PER_UNIT * (1 << i), 1);\n+      BT_FN_BOOL_VPTR_PTR_IX_INT_INT[i]\n+\t= build_function_type_list (boolt, vptr, ptr_type_node, ix,\n+\t\t\t\t    integer_type_node, integer_type_node,\n+\t\t\t\t    NULL_TREE);\n+      BT_FN_IX_CONST_VPTR_INT[i]\n+\t= build_function_type_list (ix, cvptr, integer_type_node, NULL_TREE);\n+      BT_FN_IX_VPTR_IX_INT[i]\n+\t= build_function_type_list (ix, vptr, ix, integer_type_node,\n+\t\t\t\t    NULL_TREE);\n+      BT_FN_VOID_VPTR_IX_INT[i]\n+\t= build_function_type_list (void_type_node, vptr, ix,\n+\t\t\t\t    integer_type_node, NULL_TREE);\n+    }\n+#define BT_FN_BOOL_VPTR_PTR_I1_INT_INT BT_FN_BOOL_VPTR_PTR_IX_INT_INT[0]\n+#define BT_FN_I1_CONST_VPTR_INT BT_FN_IX_CONST_VPTR_INT[0]\n+#define BT_FN_I1_VPTR_I1_INT BT_FN_IX_VPTR_IX_INT[0]\n+#define BT_FN_VOID_VPTR_I1_INT BT_FN_VOID_VPTR_IX_INT[0]\n+#define BT_FN_BOOL_VPTR_PTR_I2_INT_INT BT_FN_BOOL_VPTR_PTR_IX_INT_INT[1]\n+#define BT_FN_I2_CONST_VPTR_INT BT_FN_IX_CONST_VPTR_INT[1]\n+#define BT_FN_I2_VPTR_I2_INT BT_FN_IX_VPTR_IX_INT[1]\n+#define BT_FN_VOID_VPTR_I2_INT BT_FN_VOID_VPTR_IX_INT[1]\n+#define BT_FN_BOOL_VPTR_PTR_I4_INT_INT BT_FN_BOOL_VPTR_PTR_IX_INT_INT[2]\n+#define BT_FN_I4_CONST_VPTR_INT BT_FN_IX_CONST_VPTR_INT[2]\n+#define BT_FN_I4_VPTR_I4_INT BT_FN_IX_VPTR_IX_INT[2]\n+#define BT_FN_VOID_VPTR_I4_INT BT_FN_VOID_VPTR_IX_INT[2]\n+#define BT_FN_BOOL_VPTR_PTR_I8_INT_INT BT_FN_BOOL_VPTR_PTR_IX_INT_INT[3]\n+#define BT_FN_I8_CONST_VPTR_INT BT_FN_IX_CONST_VPTR_INT[3]\n+#define BT_FN_I8_VPTR_I8_INT BT_FN_IX_VPTR_IX_INT[3]\n+#define BT_FN_VOID_VPTR_I8_INT BT_FN_VOID_VPTR_IX_INT[3]\n+#define BT_FN_BOOL_VPTR_PTR_I16_INT_INT BT_FN_BOOL_VPTR_PTR_IX_INT_INT[4]\n+#define BT_FN_I16_CONST_VPTR_INT BT_FN_IX_CONST_VPTR_INT[4]\n+#define BT_FN_I16_VPTR_I16_INT BT_FN_IX_VPTR_IX_INT[4]\n+#define BT_FN_VOID_VPTR_I16_INT BT_FN_VOID_VPTR_IX_INT[4]\n #undef ATTR_NOTHROW_LEAF_LIST\n #define ATTR_NOTHROW_LEAF_LIST ECF_NOTHROW | ECF_LEAF\n #undef ATTR_NORETURN_NOTHROW_LEAF_LIST"}, {"sha": "8cbc51566d778aa09b2e2b969d7539202795085f", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -456,7 +456,16 @@ DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_LONG_LONG_LONG_LONGPTR_LONGPTR,\n \t\t     BT_PTR_LONG, BT_PTR_LONG)\n DEF_FUNCTION_TYPE_5 (BT_FN_VOID_SIZE_VPTR_PTR_PTR_INT, BT_VOID, BT_SIZE,\n \t\t     BT_VOLATILE_PTR, BT_PTR, BT_PTR, BT_INT)\n-\n+DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_VPTR_PTR_I1_INT_INT,\n+\t\t     BT_BOOL, BT_VOLATILE_PTR, BT_PTR, BT_I1, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_VPTR_PTR_I2_INT_INT,\n+\t\t     BT_BOOL, BT_VOLATILE_PTR, BT_PTR, BT_I2, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_VPTR_PTR_I4_INT_INT,\n+\t\t     BT_BOOL, BT_VOLATILE_PTR, BT_PTR, BT_I4, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_VPTR_PTR_I8_INT_INT,\n+\t\t     BT_BOOL, BT_VOLATILE_PTR, BT_PTR, BT_I8, BT_INT, BT_INT)\n+DEF_FUNCTION_TYPE_5 (BT_FN_BOOL_VPTR_PTR_I16_INT_INT,\n+\t\t     BT_BOOL, BT_VOLATILE_PTR, BT_PTR, BT_I16, BT_INT, BT_INT)\n \n DEF_FUNCTION_TYPE_6 (BT_FN_INT_STRING_SIZE_INT_SIZE_CONST_STRING_VALIST_ARG,\n \t\t     BT_INT, BT_STRING, BT_SIZE, BT_INT, BT_SIZE,"}, {"sha": "1739e7aa73cdb89cf7c85913cfb7c7bae9be5e69", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -85,3 +85,196 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE8, \"__tsan_write8\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_WRITE16, \"__tsan_write16\",\n \t\t      BT_FN_VOID_PTR, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_LOAD,\n+\t\t      \"__tsan_atomic8_load\",\n+\t\t      BT_FN_I1_CONST_VPTR_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_LOAD,\n+\t\t      \"__tsan_atomic16_load\",\n+\t\t      BT_FN_I2_CONST_VPTR_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_LOAD,\n+\t\t      \"__tsan_atomic32_load\",\n+\t\t      BT_FN_I4_CONST_VPTR_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_LOAD,\n+\t\t      \"__tsan_atomic64_load\",\n+\t\t      BT_FN_I8_CONST_VPTR_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_LOAD,\n+\t\t      \"__tsan_atomic128_load\",\n+\t\t      BT_FN_I16_CONST_VPTR_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_STORE,\n+\t\t      \"__tsan_atomic8_store\",\n+\t\t      BT_FN_VOID_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_STORE,\n+\t\t      \"__tsan_atomic16_store\",\n+\t\t      BT_FN_VOID_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_STORE,\n+\t\t      \"__tsan_atomic32_store\",\n+\t\t      BT_FN_VOID_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_STORE,\n+\t\t      \"__tsan_atomic64_store\",\n+\t\t      BT_FN_VOID_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_STORE,\n+\t\t      \"__tsan_atomic128_store\",\n+\t\t      BT_FN_VOID_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_EXCHANGE,\n+\t\t      \"__tsan_atomic8_exchange\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_EXCHANGE,\n+\t\t      \"__tsan_atomic16_exchange\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_EXCHANGE,\n+\t\t      \"__tsan_atomic32_exchange\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_EXCHANGE,\n+\t\t      \"__tsan_atomic64_exchange\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_EXCHANGE,\n+\t\t      \"__tsan_atomic128_exchange\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_ADD,\n+\t\t      \"__tsan_atomic8_fetch_add\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_ADD,\n+\t\t      \"__tsan_atomic16_fetch_add\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_ADD,\n+\t\t      \"__tsan_atomic32_fetch_add\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_ADD,\n+\t\t      \"__tsan_atomic64_fetch_add\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_ADD,\n+\t\t      \"__tsan_atomic128_fetch_add\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_SUB,\n+\t\t      \"__tsan_atomic8_fetch_sub\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_SUB,\n+\t\t      \"__tsan_atomic16_fetch_sub\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_SUB,\n+\t\t      \"__tsan_atomic32_fetch_sub\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_SUB,\n+\t\t      \"__tsan_atomic64_fetch_sub\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_SUB,\n+\t\t      \"__tsan_atomic128_fetch_sub\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_AND,\n+\t\t      \"__tsan_atomic8_fetch_and\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_AND,\n+\t\t      \"__tsan_atomic16_fetch_and\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_AND,\n+\t\t      \"__tsan_atomic32_fetch_and\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_AND,\n+\t\t      \"__tsan_atomic64_fetch_and\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_AND,\n+\t\t      \"__tsan_atomic128_fetch_and\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_OR,\n+\t\t      \"__tsan_atomic8_fetch_or\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_OR,\n+\t\t      \"__tsan_atomic16_fetch_or\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_OR,\n+\t\t      \"__tsan_atomic32_fetch_or\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_OR,\n+\t\t      \"__tsan_atomic64_fetch_or\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_OR,\n+\t\t      \"__tsan_atomic128_fetch_or\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_XOR,\n+\t\t      \"__tsan_atomic8_fetch_xor\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_XOR,\n+\t\t      \"__tsan_atomic16_fetch_xor\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_XOR,\n+\t\t      \"__tsan_atomic32_fetch_xor\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_XOR,\n+\t\t      \"__tsan_atomic64_fetch_xor\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_XOR,\n+\t\t      \"__tsan_atomic128_fetch_xor\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_FETCH_NAND,\n+\t\t      \"__tsan_atomic8_fetch_nand\",\n+\t\t      BT_FN_I1_VPTR_I1_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_FETCH_NAND,\n+\t\t      \"__tsan_atomic16_fetch_nand\",\n+\t\t      BT_FN_I2_VPTR_I2_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_FETCH_NAND,\n+\t\t      \"__tsan_atomic32_fetch_nand\",\n+\t\t      BT_FN_I4_VPTR_I4_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_FETCH_NAND,\n+\t\t      \"__tsan_atomic64_fetch_nand\",\n+\t\t      BT_FN_I8_VPTR_I8_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_FETCH_NAND,\n+\t\t      \"__tsan_atomic128_fetch_nand\",\n+\t\t      BT_FN_I16_VPTR_I16_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG,\n+\t\t      \"__tsan_atomic8_compare_exchange_strong\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I1_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG,\n+\t\t      \"__tsan_atomic16_compare_exchange_strong\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I2_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG,\n+\t\t      \"__tsan_atomic32_compare_exchange_strong\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I4_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG,\n+\t\t      \"__tsan_atomic64_compare_exchange_strong\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I8_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG,\n+\t\t      \"__tsan_atomic128_compare_exchange_strong\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I16_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK,\n+\t\t      \"__tsan_atomic8_compare_exchange_weak\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I1_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK,\n+\t\t      \"__tsan_atomic16_compare_exchange_weak\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I2_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK,\n+\t\t      \"__tsan_atomic32_compare_exchange_weak\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I4_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK,\n+\t\t      \"__tsan_atomic64_compare_exchange_weak\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I8_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK,\n+\t\t      \"__tsan_atomic128_compare_exchange_weak\",\n+\t\t      BT_FN_BOOL_VPTR_PTR_I16_INT_INT,\n+\t\t      ATTR_NOTHROW_LEAF_LIST)\n+\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC_THREAD_FENCE,\n+\t\t      \"__tsan_atomic_thread_fence\",\n+\t\t      BT_FN_VOID_INT, ATTR_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE,\n+\t\t      \"__tsan_atomic_signal_fence\",\n+\t\t      BT_FN_VOID_INT, ATTR_NOTHROW_LEAF_LIST)"}, {"sha": "adc14b226018711ba06c701c3fd8e6fd75573fca", "filename": "gcc/tsan.c", "status": "modified", "additions": 409, "deletions": 6, "changes": 415, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c954bddd5fbafeb558aea958cafa970677740b23/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=c954bddd5fbafeb558aea958cafa970677740b23", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"target.h\"\n #include \"cgraph.h\"\n #include \"diagnostic.h\"\n+#include \"tree-ssa-propagate.h\"\n #include \"tsan.h\"\n #include \"asan.h\"\n \n@@ -180,33 +181,435 @@ instrument_expr (gimple_stmt_iterator gsi, tree expr, bool is_write)\n   return true;\n }\n \n+/* Actions for sync/atomic builtin transformations.  */\n+enum tsan_atomic_action\n+{\n+  check_last, add_seq_cst, add_acquire, weak_cas, strong_cas,\n+  bool_cas, val_cas, lock_release, fetch_op, fetch_op_seq_cst\n+};\n+\n+/* Table how to map sync/atomic builtins to their corresponding\n+   tsan equivalents.  */\n+static struct tsan_map_atomic\n+{\n+  enum built_in_function fcode, tsan_fcode;\n+  enum tsan_atomic_action action;\n+  enum tree_code code;\n+} tsan_atomic_table[] =\n+{\n+#define TRANSFORM(fcode, tsan_fcode, action, code) \\\n+  { BUILT_IN_##fcode, BUILT_IN_##tsan_fcode, action, code }\n+#define CHECK_LAST(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, check_last, ERROR_MARK)\n+#define ADD_SEQ_CST(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, add_seq_cst, ERROR_MARK)\n+#define ADD_ACQUIRE(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, add_acquire, ERROR_MARK)\n+#define WEAK_CAS(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, weak_cas, ERROR_MARK)\n+#define STRONG_CAS(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, strong_cas, ERROR_MARK)\n+#define BOOL_CAS(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, bool_cas, ERROR_MARK)\n+#define VAL_CAS(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, val_cas, ERROR_MARK)\n+#define LOCK_RELEASE(fcode, tsan_fcode) \\\n+  TRANSFORM (fcode, tsan_fcode, lock_release, ERROR_MARK)\n+#define FETCH_OP(fcode, tsan_fcode, code) \\\n+  TRANSFORM (fcode, tsan_fcode, fetch_op, code)\n+#define FETCH_OPS(fcode, tsan_fcode, code) \\\n+  TRANSFORM (fcode, tsan_fcode, fetch_op_seq_cst, code)\n+\n+  CHECK_LAST (ATOMIC_LOAD_1, TSAN_ATOMIC8_LOAD),\n+  CHECK_LAST (ATOMIC_LOAD_2, TSAN_ATOMIC16_LOAD),\n+  CHECK_LAST (ATOMIC_LOAD_4, TSAN_ATOMIC32_LOAD),\n+  CHECK_LAST (ATOMIC_LOAD_8, TSAN_ATOMIC64_LOAD),\n+  CHECK_LAST (ATOMIC_LOAD_16, TSAN_ATOMIC128_LOAD),\n+  CHECK_LAST (ATOMIC_STORE_1, TSAN_ATOMIC8_STORE),\n+  CHECK_LAST (ATOMIC_STORE_2, TSAN_ATOMIC16_STORE),\n+  CHECK_LAST (ATOMIC_STORE_4, TSAN_ATOMIC32_STORE),\n+  CHECK_LAST (ATOMIC_STORE_8, TSAN_ATOMIC64_STORE),\n+  CHECK_LAST (ATOMIC_STORE_16, TSAN_ATOMIC128_STORE),\n+  CHECK_LAST (ATOMIC_EXCHANGE_1, TSAN_ATOMIC8_EXCHANGE),\n+  CHECK_LAST (ATOMIC_EXCHANGE_2, TSAN_ATOMIC16_EXCHANGE),\n+  CHECK_LAST (ATOMIC_EXCHANGE_4, TSAN_ATOMIC32_EXCHANGE),\n+  CHECK_LAST (ATOMIC_EXCHANGE_8, TSAN_ATOMIC64_EXCHANGE),\n+  CHECK_LAST (ATOMIC_EXCHANGE_16, TSAN_ATOMIC128_EXCHANGE),\n+  CHECK_LAST (ATOMIC_FETCH_ADD_1, TSAN_ATOMIC8_FETCH_ADD),\n+  CHECK_LAST (ATOMIC_FETCH_ADD_2, TSAN_ATOMIC16_FETCH_ADD),\n+  CHECK_LAST (ATOMIC_FETCH_ADD_4, TSAN_ATOMIC32_FETCH_ADD),\n+  CHECK_LAST (ATOMIC_FETCH_ADD_8, TSAN_ATOMIC64_FETCH_ADD),\n+  CHECK_LAST (ATOMIC_FETCH_ADD_16, TSAN_ATOMIC128_FETCH_ADD),\n+  CHECK_LAST (ATOMIC_FETCH_SUB_1, TSAN_ATOMIC8_FETCH_SUB),\n+  CHECK_LAST (ATOMIC_FETCH_SUB_2, TSAN_ATOMIC16_FETCH_SUB),\n+  CHECK_LAST (ATOMIC_FETCH_SUB_4, TSAN_ATOMIC32_FETCH_SUB),\n+  CHECK_LAST (ATOMIC_FETCH_SUB_8, TSAN_ATOMIC64_FETCH_SUB),\n+  CHECK_LAST (ATOMIC_FETCH_SUB_16, TSAN_ATOMIC128_FETCH_SUB),\n+  CHECK_LAST (ATOMIC_FETCH_AND_1, TSAN_ATOMIC8_FETCH_AND),\n+  CHECK_LAST (ATOMIC_FETCH_AND_2, TSAN_ATOMIC16_FETCH_AND),\n+  CHECK_LAST (ATOMIC_FETCH_AND_4, TSAN_ATOMIC32_FETCH_AND),\n+  CHECK_LAST (ATOMIC_FETCH_AND_8, TSAN_ATOMIC64_FETCH_AND),\n+  CHECK_LAST (ATOMIC_FETCH_AND_16, TSAN_ATOMIC128_FETCH_AND),\n+  CHECK_LAST (ATOMIC_FETCH_OR_1, TSAN_ATOMIC8_FETCH_OR),\n+  CHECK_LAST (ATOMIC_FETCH_OR_2, TSAN_ATOMIC16_FETCH_OR),\n+  CHECK_LAST (ATOMIC_FETCH_OR_4, TSAN_ATOMIC32_FETCH_OR),\n+  CHECK_LAST (ATOMIC_FETCH_OR_8, TSAN_ATOMIC64_FETCH_OR),\n+  CHECK_LAST (ATOMIC_FETCH_OR_16, TSAN_ATOMIC128_FETCH_OR),\n+  CHECK_LAST (ATOMIC_FETCH_XOR_1, TSAN_ATOMIC8_FETCH_XOR),\n+  CHECK_LAST (ATOMIC_FETCH_XOR_2, TSAN_ATOMIC16_FETCH_XOR),\n+  CHECK_LAST (ATOMIC_FETCH_XOR_4, TSAN_ATOMIC32_FETCH_XOR),\n+  CHECK_LAST (ATOMIC_FETCH_XOR_8, TSAN_ATOMIC64_FETCH_XOR),\n+  CHECK_LAST (ATOMIC_FETCH_XOR_16, TSAN_ATOMIC128_FETCH_XOR),\n+  CHECK_LAST (ATOMIC_FETCH_NAND_1, TSAN_ATOMIC8_FETCH_NAND),\n+  CHECK_LAST (ATOMIC_FETCH_NAND_2, TSAN_ATOMIC16_FETCH_NAND),\n+  CHECK_LAST (ATOMIC_FETCH_NAND_4, TSAN_ATOMIC32_FETCH_NAND),\n+  CHECK_LAST (ATOMIC_FETCH_NAND_8, TSAN_ATOMIC64_FETCH_NAND),\n+  CHECK_LAST (ATOMIC_FETCH_NAND_16, TSAN_ATOMIC128_FETCH_NAND),\n+\n+  CHECK_LAST (ATOMIC_THREAD_FENCE, TSAN_ATOMIC_THREAD_FENCE),\n+  CHECK_LAST (ATOMIC_SIGNAL_FENCE, TSAN_ATOMIC_SIGNAL_FENCE),\n+\n+  FETCH_OP (ATOMIC_ADD_FETCH_1, TSAN_ATOMIC8_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OP (ATOMIC_ADD_FETCH_2, TSAN_ATOMIC16_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OP (ATOMIC_ADD_FETCH_4, TSAN_ATOMIC32_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OP (ATOMIC_ADD_FETCH_8, TSAN_ATOMIC64_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OP (ATOMIC_ADD_FETCH_16, TSAN_ATOMIC128_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OP (ATOMIC_SUB_FETCH_1, TSAN_ATOMIC8_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OP (ATOMIC_SUB_FETCH_2, TSAN_ATOMIC16_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OP (ATOMIC_SUB_FETCH_4, TSAN_ATOMIC32_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OP (ATOMIC_SUB_FETCH_8, TSAN_ATOMIC64_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OP (ATOMIC_SUB_FETCH_16, TSAN_ATOMIC128_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OP (ATOMIC_AND_FETCH_1, TSAN_ATOMIC8_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OP (ATOMIC_AND_FETCH_2, TSAN_ATOMIC16_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OP (ATOMIC_AND_FETCH_4, TSAN_ATOMIC32_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OP (ATOMIC_AND_FETCH_8, TSAN_ATOMIC64_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OP (ATOMIC_AND_FETCH_16, TSAN_ATOMIC128_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OP (ATOMIC_OR_FETCH_1, TSAN_ATOMIC8_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OP (ATOMIC_OR_FETCH_2, TSAN_ATOMIC16_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OP (ATOMIC_OR_FETCH_4, TSAN_ATOMIC32_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OP (ATOMIC_OR_FETCH_8, TSAN_ATOMIC64_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OP (ATOMIC_OR_FETCH_16, TSAN_ATOMIC128_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OP (ATOMIC_XOR_FETCH_1, TSAN_ATOMIC8_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OP (ATOMIC_XOR_FETCH_2, TSAN_ATOMIC16_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OP (ATOMIC_XOR_FETCH_4, TSAN_ATOMIC32_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OP (ATOMIC_XOR_FETCH_8, TSAN_ATOMIC64_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OP (ATOMIC_XOR_FETCH_16, TSAN_ATOMIC128_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OP (ATOMIC_NAND_FETCH_1, TSAN_ATOMIC8_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OP (ATOMIC_NAND_FETCH_2, TSAN_ATOMIC16_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OP (ATOMIC_NAND_FETCH_4, TSAN_ATOMIC32_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OP (ATOMIC_NAND_FETCH_8, TSAN_ATOMIC64_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OP (ATOMIC_NAND_FETCH_16, TSAN_ATOMIC128_FETCH_NAND, BIT_NOT_EXPR),\n+\n+  ADD_ACQUIRE (SYNC_LOCK_TEST_AND_SET_1, TSAN_ATOMIC8_EXCHANGE),\n+  ADD_ACQUIRE (SYNC_LOCK_TEST_AND_SET_2, TSAN_ATOMIC16_EXCHANGE),\n+  ADD_ACQUIRE (SYNC_LOCK_TEST_AND_SET_4, TSAN_ATOMIC32_EXCHANGE),\n+  ADD_ACQUIRE (SYNC_LOCK_TEST_AND_SET_8, TSAN_ATOMIC64_EXCHANGE),\n+  ADD_ACQUIRE (SYNC_LOCK_TEST_AND_SET_16, TSAN_ATOMIC128_EXCHANGE),\n+\n+  ADD_SEQ_CST (SYNC_FETCH_AND_ADD_1, TSAN_ATOMIC8_FETCH_ADD),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_ADD_2, TSAN_ATOMIC16_FETCH_ADD),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_ADD_4, TSAN_ATOMIC32_FETCH_ADD),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_ADD_8, TSAN_ATOMIC64_FETCH_ADD),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_ADD_16, TSAN_ATOMIC128_FETCH_ADD),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_SUB_1, TSAN_ATOMIC8_FETCH_SUB),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_SUB_2, TSAN_ATOMIC16_FETCH_SUB),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_SUB_4, TSAN_ATOMIC32_FETCH_SUB),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_SUB_8, TSAN_ATOMIC64_FETCH_SUB),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_SUB_16, TSAN_ATOMIC128_FETCH_SUB),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_AND_1, TSAN_ATOMIC8_FETCH_AND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_AND_2, TSAN_ATOMIC16_FETCH_AND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_AND_4, TSAN_ATOMIC32_FETCH_AND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_AND_8, TSAN_ATOMIC64_FETCH_AND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_AND_16, TSAN_ATOMIC128_FETCH_AND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_OR_1, TSAN_ATOMIC8_FETCH_OR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_OR_2, TSAN_ATOMIC16_FETCH_OR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_OR_4, TSAN_ATOMIC32_FETCH_OR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_OR_8, TSAN_ATOMIC64_FETCH_OR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_OR_16, TSAN_ATOMIC128_FETCH_OR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_XOR_1, TSAN_ATOMIC8_FETCH_XOR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_XOR_2, TSAN_ATOMIC16_FETCH_XOR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_XOR_4, TSAN_ATOMIC32_FETCH_XOR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_XOR_8, TSAN_ATOMIC64_FETCH_XOR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_XOR_16, TSAN_ATOMIC128_FETCH_XOR),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_NAND_1, TSAN_ATOMIC8_FETCH_NAND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_NAND_2, TSAN_ATOMIC16_FETCH_NAND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_NAND_4, TSAN_ATOMIC32_FETCH_NAND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_NAND_8, TSAN_ATOMIC64_FETCH_NAND),\n+  ADD_SEQ_CST (SYNC_FETCH_AND_NAND_16, TSAN_ATOMIC128_FETCH_NAND),\n+\n+  ADD_SEQ_CST (SYNC_SYNCHRONIZE, TSAN_ATOMIC_THREAD_FENCE),\n+\n+  FETCH_OPS (SYNC_ADD_AND_FETCH_1, TSAN_ATOMIC8_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OPS (SYNC_ADD_AND_FETCH_2, TSAN_ATOMIC16_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OPS (SYNC_ADD_AND_FETCH_4, TSAN_ATOMIC32_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OPS (SYNC_ADD_AND_FETCH_8, TSAN_ATOMIC64_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OPS (SYNC_ADD_AND_FETCH_16, TSAN_ATOMIC128_FETCH_ADD, PLUS_EXPR),\n+  FETCH_OPS (SYNC_SUB_AND_FETCH_1, TSAN_ATOMIC8_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OPS (SYNC_SUB_AND_FETCH_2, TSAN_ATOMIC16_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OPS (SYNC_SUB_AND_FETCH_4, TSAN_ATOMIC32_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OPS (SYNC_SUB_AND_FETCH_8, TSAN_ATOMIC64_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OPS (SYNC_SUB_AND_FETCH_16, TSAN_ATOMIC128_FETCH_SUB, MINUS_EXPR),\n+  FETCH_OPS (SYNC_AND_AND_FETCH_1, TSAN_ATOMIC8_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OPS (SYNC_AND_AND_FETCH_2, TSAN_ATOMIC16_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OPS (SYNC_AND_AND_FETCH_4, TSAN_ATOMIC32_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OPS (SYNC_AND_AND_FETCH_8, TSAN_ATOMIC64_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OPS (SYNC_AND_AND_FETCH_16, TSAN_ATOMIC128_FETCH_AND, BIT_AND_EXPR),\n+  FETCH_OPS (SYNC_OR_AND_FETCH_1, TSAN_ATOMIC8_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OPS (SYNC_OR_AND_FETCH_2, TSAN_ATOMIC16_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OPS (SYNC_OR_AND_FETCH_4, TSAN_ATOMIC32_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OPS (SYNC_OR_AND_FETCH_8, TSAN_ATOMIC64_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OPS (SYNC_OR_AND_FETCH_16, TSAN_ATOMIC128_FETCH_OR, BIT_IOR_EXPR),\n+  FETCH_OPS (SYNC_XOR_AND_FETCH_1, TSAN_ATOMIC8_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OPS (SYNC_XOR_AND_FETCH_2, TSAN_ATOMIC16_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OPS (SYNC_XOR_AND_FETCH_4, TSAN_ATOMIC32_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OPS (SYNC_XOR_AND_FETCH_8, TSAN_ATOMIC64_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OPS (SYNC_XOR_AND_FETCH_16, TSAN_ATOMIC128_FETCH_XOR, BIT_XOR_EXPR),\n+  FETCH_OPS (SYNC_NAND_AND_FETCH_1, TSAN_ATOMIC8_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OPS (SYNC_NAND_AND_FETCH_2, TSAN_ATOMIC16_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OPS (SYNC_NAND_AND_FETCH_4, TSAN_ATOMIC32_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OPS (SYNC_NAND_AND_FETCH_8, TSAN_ATOMIC64_FETCH_NAND, BIT_NOT_EXPR),\n+  FETCH_OPS (SYNC_NAND_AND_FETCH_16, TSAN_ATOMIC128_FETCH_NAND, BIT_NOT_EXPR),\n+\n+  WEAK_CAS (ATOMIC_COMPARE_EXCHANGE_1, TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK),\n+  WEAK_CAS (ATOMIC_COMPARE_EXCHANGE_2, TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK),\n+  WEAK_CAS (ATOMIC_COMPARE_EXCHANGE_4, TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK),\n+  WEAK_CAS (ATOMIC_COMPARE_EXCHANGE_8, TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK),\n+  WEAK_CAS (ATOMIC_COMPARE_EXCHANGE_16, TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK),\n+\n+  STRONG_CAS (ATOMIC_COMPARE_EXCHANGE_1, TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),\n+  STRONG_CAS (ATOMIC_COMPARE_EXCHANGE_2,\n+\t      TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),\n+  STRONG_CAS (ATOMIC_COMPARE_EXCHANGE_4,\n+\t      TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),\n+  STRONG_CAS (ATOMIC_COMPARE_EXCHANGE_8,\n+\t      TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),\n+  STRONG_CAS (ATOMIC_COMPARE_EXCHANGE_16,\n+\t      TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),\n+\n+  BOOL_CAS (SYNC_BOOL_COMPARE_AND_SWAP_1,\n+\t    TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),\n+  BOOL_CAS (SYNC_BOOL_COMPARE_AND_SWAP_2,\n+\t    TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),\n+  BOOL_CAS (SYNC_BOOL_COMPARE_AND_SWAP_4,\n+\t    TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),\n+  BOOL_CAS (SYNC_BOOL_COMPARE_AND_SWAP_8,\n+\t    TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),\n+  BOOL_CAS (SYNC_BOOL_COMPARE_AND_SWAP_16,\n+\t    TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),\n+\n+  VAL_CAS (SYNC_VAL_COMPARE_AND_SWAP_1, TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),\n+  VAL_CAS (SYNC_VAL_COMPARE_AND_SWAP_2, TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),\n+  VAL_CAS (SYNC_VAL_COMPARE_AND_SWAP_4, TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),\n+  VAL_CAS (SYNC_VAL_COMPARE_AND_SWAP_8, TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),\n+  VAL_CAS (SYNC_VAL_COMPARE_AND_SWAP_16,\n+\t   TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),\n+\n+  LOCK_RELEASE (SYNC_LOCK_RELEASE_1, TSAN_ATOMIC8_STORE),\n+  LOCK_RELEASE (SYNC_LOCK_RELEASE_2, TSAN_ATOMIC16_STORE),\n+  LOCK_RELEASE (SYNC_LOCK_RELEASE_4, TSAN_ATOMIC32_STORE),\n+  LOCK_RELEASE (SYNC_LOCK_RELEASE_8, TSAN_ATOMIC64_STORE),\n+  LOCK_RELEASE (SYNC_LOCK_RELEASE_16, TSAN_ATOMIC128_STORE)\n+};\n+\n+/* Instrument an atomic builtin.  */\n+\n+static void\n+instrument_builtin_call (gimple_stmt_iterator *gsi)\n+{\n+  gimple stmt = gsi_stmt (*gsi), g;\n+  tree callee = gimple_call_fndecl (stmt), last_arg, args[6], t, lhs;\n+  enum built_in_function fcode = DECL_FUNCTION_CODE (callee);\n+  unsigned int i, num = gimple_call_num_args (stmt), j;\n+  for (j = 0; j < 6 && j < num; j++)\n+    args[j] = gimple_call_arg (stmt, j);\n+  for (i = 0; i < ARRAY_SIZE (tsan_atomic_table); i++)\n+    if (fcode != tsan_atomic_table[i].fcode)\n+      continue;\n+    else\n+      {\n+\ttree decl = builtin_decl_implicit (tsan_atomic_table[i].tsan_fcode);\n+\tif (decl == NULL_TREE)\n+\t  return;\n+\tswitch (tsan_atomic_table[i].action)\n+\t  {\n+\t  case check_last:\n+\t  case fetch_op:\n+\t    last_arg = gimple_call_arg (stmt, num - 1);\n+\t    if (!host_integerp (last_arg, 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (last_arg, 1)\n+\t\t   > MEMMODEL_SEQ_CST)\n+\t      return;\n+\t    gimple_call_set_fndecl (stmt, decl);\n+\t    update_stmt (stmt);\n+\t    if (tsan_atomic_table[i].action == fetch_op)\n+\t      {\n+\t\targs[1] = gimple_call_arg (stmt, 1);\n+\t\tgoto adjust_result;\n+\t      }\n+\t    return;\n+\t  case add_seq_cst:\n+\t  case add_acquire:\n+\t  case fetch_op_seq_cst:\n+\t    gcc_assert (num <= 2);\n+\t    for (j = 0; j < num; j++)\n+\t      args[j] = gimple_call_arg (stmt, j);\n+\t    for (; j < 2; j++)\n+\t      args[j] = NULL_TREE;\n+\t    args[num] = build_int_cst (NULL_TREE,\n+\t\t\t\t       tsan_atomic_table[i].action\n+\t\t\t\t       != add_acquire\n+\t\t\t\t       ? MEMMODEL_SEQ_CST\n+\t\t\t\t       : MEMMODEL_ACQUIRE);\n+\t    update_gimple_call (gsi, decl, num + 1, args[0], args[1], args[2]);\n+\t    stmt = gsi_stmt (*gsi);\n+\t    if (tsan_atomic_table[i].action == fetch_op_seq_cst)\n+\t      {\n+\t      adjust_result:\n+\t\tlhs = gimple_call_lhs (stmt);\n+\t\tif (lhs == NULL_TREE)\n+\t\t  return;\n+\t\tif (!useless_type_conversion_p (TREE_TYPE (lhs),\n+\t\t\t\t\t\tTREE_TYPE (args[1])))\n+\t\t  {\n+\t\t    tree var = make_ssa_name (TREE_TYPE (lhs), NULL);\n+\t\t    g = gimple_build_assign_with_ops (NOP_EXPR, var,\n+\t\t\t\t\t\t      args[1], NULL_TREE);\n+\t\t    gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t\t    args[1] = var;\n+\t\t  }\n+\t\tgimple_call_set_lhs (stmt,\n+\t\t\t\t     make_ssa_name (TREE_TYPE (lhs), NULL));\n+\t\t/* BIT_NOT_EXPR stands for NAND.  */\n+\t\tif (tsan_atomic_table[i].code == BIT_NOT_EXPR)\n+\t\t  {\n+\t\t    tree var = make_ssa_name (TREE_TYPE (lhs), NULL);\n+\t\t    g = gimple_build_assign_with_ops (BIT_AND_EXPR, var,\n+\t\t\t\t\t\t      gimple_call_lhs (stmt),\n+\t\t\t\t\t\t      args[1]);\n+\t\t    gsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t\t    g = gimple_build_assign_with_ops (BIT_NOT_EXPR, lhs, var,\n+\t\t\t\t\t\t      NULL_TREE);\n+\t\t  }\n+\t\telse\n+\t\t  g = gimple_build_assign_with_ops (tsan_atomic_table[i].code,\n+\t\t\t\t\t\t    lhs,\n+\t\t\t\t\t\t    gimple_call_lhs (stmt),\n+\t\t\t\t\t\t    args[1]);\n+\t\tupdate_stmt (stmt);\n+\t\tgsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t      }\n+\t    return;\n+\t  case weak_cas:\n+\t    if (!integer_nonzerop (gimple_call_arg (stmt, 3)))\n+\t      continue;\n+\t    /* FALLTHRU */\n+\t  case strong_cas:\n+\t    gcc_assert (num == 6);\n+\t    for (j = 0; j < 6; j++)\n+\t      args[j] = gimple_call_arg (stmt, j);\n+\t    if (!host_integerp (args[4], 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[4], 1)\n+\t\t   > MEMMODEL_SEQ_CST)\n+\t      return;\n+\t    if (!host_integerp (args[5], 1)\n+\t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[5], 1)\n+\t\t   > MEMMODEL_SEQ_CST)\n+\t      return;\n+\t    update_gimple_call (gsi, decl, 5, args[0], args[1], args[2],\n+\t\t\t\targs[4], args[5]);\n+\t    return;\n+\t  case bool_cas:\n+\t  case val_cas:\n+\t    gcc_assert (num == 3);\n+\t    for (j = 0; j < 3; j++)\n+\t      args[j] = gimple_call_arg (stmt, j);\n+\t    t = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\t    t = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (t)));\n+\t    t = create_tmp_var (t, NULL);\n+\t    mark_addressable (t);\n+\t    if (!useless_type_conversion_p (TREE_TYPE (t),\n+\t\t\t\t\t    TREE_TYPE (args[1])))\n+\t      {\n+\t\tg = gimple_build_assign_with_ops (NOP_EXPR,\n+\t\t\t\t\t\t  make_ssa_name (TREE_TYPE (t),\n+\t\t\t\t\t\t\t\t NULL),\n+\t\t\t\t\t\t  args[1], NULL_TREE);\n+\t\tgsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t\targs[1] = gimple_assign_lhs (g);\n+\t      }\n+\t    g = gimple_build_assign (t, args[1]);\n+\t    gsi_insert_before (gsi, g, GSI_SAME_STMT);\n+\t    lhs = gimple_call_lhs (stmt);\n+\t    update_gimple_call (gsi, decl, 5, args[0],\n+\t\t\t\tbuild_fold_addr_expr (t), args[2],\n+\t\t\t\tbuild_int_cst (NULL_TREE,\n+\t\t\t\t\t       MEMMODEL_SEQ_CST),\n+\t\t\t\tbuild_int_cst (NULL_TREE,\n+\t\t\t\t\t       MEMMODEL_SEQ_CST));\n+\t    if (tsan_atomic_table[i].action == val_cas && lhs)\n+\t      {\n+\t\ttree cond;\n+\t\tstmt = gsi_stmt (*gsi);\n+\t\tg = gimple_build_assign (make_ssa_name (TREE_TYPE (t), NULL),\n+\t\t\t\t\t t);\n+\t\tgsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t\tt = make_ssa_name (TREE_TYPE (TREE_TYPE (decl)), stmt);\n+\t\tcond = build2 (NE_EXPR, boolean_type_node, t,\n+\t\t\t       build_int_cst (TREE_TYPE (t), 0));\n+\t\tg = gimple_build_assign_with_ops (COND_EXPR, lhs, cond,\n+\t\t\t\t\t\t  args[1],\n+\t\t\t\t\t\t  gimple_assign_lhs (g));\n+\t\tgimple_call_set_lhs (stmt, t);\n+\t\tupdate_stmt (stmt);\n+\t\tgsi_insert_after (gsi, g, GSI_NEW_STMT);\n+\t      }\n+\t    return;\n+\t  case lock_release:\n+\t    gcc_assert (num == 1);\n+\t    t = TYPE_ARG_TYPES (TREE_TYPE (decl));\n+\t    t = TREE_VALUE (TREE_CHAIN (t));\n+\t    update_gimple_call (gsi, decl, 3, gimple_call_arg (stmt, 0),\n+\t\t\t\tbuild_int_cst (t, 0),\n+\t\t\t\tbuild_int_cst (NULL_TREE,\n+\t\t\t\t\t       MEMMODEL_RELEASE));\n+\t    return;\n+\t  default:\n+\t    continue;\n+\t  }\n+      }\n+}\n+\n /* Instruments the gimple pointed to by GSI. Return\n    true if func entry/exit should be instrumented.  */\n \n static bool\n-instrument_gimple (gimple_stmt_iterator gsi)\n+instrument_gimple (gimple_stmt_iterator *gsi)\n {\n   gimple stmt;\n   tree rhs, lhs;\n   bool instrumented = false;\n \n-  stmt = gsi_stmt (gsi);\n+  stmt = gsi_stmt (*gsi);\n   if (is_gimple_call (stmt)\n       && (gimple_call_fndecl (stmt)\n \t  != builtin_decl_implicit (BUILT_IN_TSAN_INIT)))\n-    return true;\n+    {\n+      if (is_gimple_builtin_call (stmt))\n+\tinstrument_builtin_call (gsi);\n+      return true;\n+    }\n   else if (is_gimple_assign (stmt)\n \t   && !gimple_clobber_p (stmt))\n     {\n       if (gimple_store_p (stmt))\n \t{\n \t  lhs = gimple_assign_lhs (stmt);\n-\t  instrumented = instrument_expr (gsi, lhs, true);\n+\t  instrumented = instrument_expr (*gsi, lhs, true);\n \t}\n       if (gimple_assign_load_p (stmt))\n \t{\n \t  rhs = gimple_assign_rhs1 (stmt);\n-\t  instrumented = instrument_expr (gsi, rhs, false);\n+\t  instrumented = instrument_expr (*gsi, rhs, false);\n \t}\n     }\n   return instrumented;\n@@ -224,7 +627,7 @@ instrument_memory_accesses (void)\n \n   FOR_EACH_BB (bb)\n     for (gsi = gsi_start_bb (bb); !gsi_end_p (gsi); gsi_next (&gsi))\n-      fentry_exit_instrument |= instrument_gimple (gsi);\n+      fentry_exit_instrument |= instrument_gimple (&gsi);\n   return fentry_exit_instrument;\n }\n "}]}