{"sha": "7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q3MjEyZWMyYjQ1YzI4MjlkYmEzYmQzMzE5ZmNlMTA5Y2JlN2YwMQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-08-22T14:07:30Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-08-22T14:07:30Z"}, "message": "re PR fortran/50050 (Internal compiler error free_expr0 at expr.c:3709 via gfc_done_2)\n\n2011-08-22  Mikael Morin  <mikael.morin@gcc.gnu.org>\n\n\tPR fortran/50050\n\t* gfortran.h (gfc_clear_shape, gfc_free_shape): New prototypes.\n\t* expr.c (gfc_clear_shape, gfc_free_shape): New functions.\n\t(free_expr0): Re-use gfc_free_shape.\n\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n\t* trans-io.c (transfer_array_component): Ditto.\n\t* resolve.c (check_host_association): Ditto.\n\t(gfc_expr_to_initialize): Don't force the rank value and free the shape\n\tafter updating the expression. Recalculate shape and rank.\n\t(resolve_where_shape): Re-use gfc_clear_shape.\n\t* array.c (gfc_array_ref_shape): Ditto.\n\n2011-08-22  Mikael Morin  <mikael.morin@gcc.gnu.org>\n\n\tPR fortran/50050\n\t* gfortran.dg/alloc_comp_initializer_3.f90: New test.\n\nFrom-SVN: r177956", "tree": {"sha": "8f626837e5907081d030dc5bb5973cb4f7079283", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f626837e5907081d030dc5bb5973cb4f7079283"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/comments", "author": null, "committer": null, "parents": [{"sha": "977e83a3edc1a58077e33143ad3cc1f9349d6197", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977e83a3edc1a58077e33143ad3cc1f9349d6197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977e83a3edc1a58077e33143ad3cc1f9349d6197"}], "stats": {"total": 99, "additions": 67, "deletions": 32}, "files": [{"sha": "69d901e0c7be97b168a0bb581784917d13cbd7cf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -1,3 +1,17 @@\n+2011-08-22  Mikael Morin  <mikael.morin@gcc.gnu.org>\n+\n+\tPR fortran/50050\n+\t* gfortran.h (gfc_clear_shape, gfc_free_shape): New prototypes.\n+\t* expr.c (gfc_clear_shape, gfc_free_shape): New functions.\n+\t(free_expr0): Re-use gfc_free_shape.\n+\t* trans-expr.c (gfc_trans_subarray_assign): Ditto.\n+\t* trans-io.c (transfer_array_component): Ditto.\n+\t* resolve.c (check_host_association): Ditto.\n+\t(gfc_expr_to_initialize): Don't force the rank value and free the shape\n+\tafter updating the expression. Recalculate shape and rank.\n+\t(resolve_where_shape): Re-use gfc_clear_shape.\n+\t* array.c (gfc_array_ref_shape): Ditto.\n+\n 2011-08-21  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/47659\n@@ -18,7 +32,7 @@\n \t* dependency.c (gfc_dep_compare_expr): Add new result value \"-3\".\n \t(gfc_check_element_vs_section,gfc_check_element_vs_element): Handle\n \tresult value \"-3\".\n-        * frontend-passes.c (optimize_comparison): Ditto.\n+\t* frontend-passes.c (optimize_comparison): Ditto.\n \t* interface.c (gfc_check_typebound_override): Ditto.\n \n 2011-08-19  Mikael Morin  <mikael.morin@sfr.fr>"}, {"sha": "aa9cc0c3ab39caee778d5422a97b765225cf7c62", "filename": "gcc/fortran/array.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Farray.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Farray.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farray.c?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -2281,9 +2281,7 @@ gfc_array_ref_shape (gfc_array_ref *ar, mpz_t *shape)\n     }\n \n cleanup:\n-  for (d--; d >= 0; d--)\n-    mpz_clear (shape[d]);\n-\n+  gfc_clear_shape (shape, d);\n   return FAILURE;\n }\n "}, {"sha": "9922094fd6e26b2c08106215b8658da920b5168a", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -396,6 +396,25 @@ gfc_copy_expr (gfc_expr *p)\n }\n \n \n+void\n+gfc_clear_shape (mpz_t *shape, int rank)\n+{\n+  int i;\n+\n+  for (i = 0; i < rank; i++)\n+    mpz_clear (shape[i]);\n+}\n+\n+\n+void\n+gfc_free_shape (mpz_t **shape, int rank)\n+{\n+  gfc_clear_shape (*shape, rank);\n+  free (*shape);\n+  *shape = NULL;\n+}\n+\n+\n /* Workhorse function for gfc_free_expr() that frees everything\n    beneath an expression node, but not the node itself.  This is\n    useful when we want to simplify a node and replace it with\n@@ -404,8 +423,6 @@ gfc_copy_expr (gfc_expr *p)\n static void\n free_expr0 (gfc_expr *e)\n {\n-  int n;\n-\n   switch (e->expr_type)\n     {\n     case EXPR_CONSTANT:\n@@ -474,12 +491,7 @@ free_expr0 (gfc_expr *e)\n \n   /* Free a shape array.  */\n   if (e->shape != NULL)\n-    {\n-      for (n = 0; n < e->rank; n++)\n-\tmpz_clear (e->shape[n]);\n-\n-      free (e->shape);\n-    }\n+    gfc_free_shape (&e->shape, e->rank);\n \n   gfc_free_ref_list (e->ref);\n "}, {"sha": "ac36d249912c1d2e5893298afee3106233c5f002", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -2711,6 +2711,8 @@ gfc_expr *gfc_get_int_expr (int, locus *, int);\n gfc_expr *gfc_get_logical_expr (int, locus *, bool);\n gfc_expr *gfc_get_iokind_expr (locus *, io_kind);\n \n+void gfc_clear_shape (mpz_t *shape, int rank);\n+void gfc_free_shape (mpz_t **shape, int rank);\n void gfc_free_expr (gfc_expr *);\n void gfc_replace_expr (gfc_expr *, gfc_expr *);\n mpz_t *gfc_copy_shape (mpz_t *, int);"}, {"sha": "e3427230c886b64d0fe148a548336129a618f943", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -5199,12 +5199,7 @@ check_host_association (gfc_expr *e)\n \t{\n \t  /* Clear the shape, since it might not be valid.  */\n \t  if (e->shape != NULL)\n-\t    {\n-\t      for (n = 0; n < e->rank; n++)\n-\t\tmpz_clear (e->shape[n]);\n-\n-\t      free (e->shape);\n-\t    }\n+\t    gfc_free_shape (&e->shape, e->rank);\n \n \t  /* Give the expression the right symtree!  */\n \t  gfc_find_sym_tree (e->symtree->name, NULL, 1, &st);\n@@ -6559,10 +6554,13 @@ gfc_expr_to_initialize (gfc_expr *e)\n \tfor (i = 0; i < ref->u.ar.dimen; i++)\n \t  ref->u.ar.start[i] = ref->u.ar.end[i] = ref->u.ar.stride[i] = NULL;\n \n-\tresult->rank = ref->u.ar.dimen;\n \tbreak;\n       }\n \n+  gfc_free_shape (&result->shape, result->rank);\n+\n+  /* Recalculate rank, shape, etc.  */\n+  gfc_resolve_expr (result);\n   return result;\n }\n \n@@ -8429,11 +8427,8 @@ resolve_where_shape (gfc_expr *expr1, gfc_expr *expr2)\n   result = SUCCESS;\n \n over:\n-  for (i--; i >= 0; i--)\n-    {\n-      mpz_clear (shape[i]);\n-      mpz_clear (shape2[i]);\n-    }\n+  gfc_clear_shape (shape, i);\n+  gfc_clear_shape (shape2, i);\n   return result;\n }\n "}, {"sha": "39a83ce4da3553d870d30e99f045bd4de5fb0aba", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -4411,10 +4411,7 @@ gfc_trans_subarray_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n   gfc_add_block_to_block (&block, &loop.pre);\n   gfc_add_block_to_block (&block, &loop.post);\n \n-  for (n = 0; n < cm->as->rank; n++)\n-    mpz_clear (lss->shape[n]);\n-  free (lss->shape);\n-\n+  gfc_free_shape (&lss->shape, cm->as->rank);\n   gfc_cleanup_loop (&loop);\n \n   return gfc_finish_block (&block);"}, {"sha": "2ae34d8f25acdeffa2cc93a0a0bc0d4dd3bd04d9", "filename": "gcc/fortran/trans-io.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Ftrans-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ffortran%2Ftrans-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-io.c?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -1999,10 +1999,7 @@ transfer_array_component (tree expr, gfc_component * cm, locus * where)\n   gfc_add_block_to_block (&block, &loop.pre);\n   gfc_add_block_to_block (&block, &loop.post);\n \n-  for (n = 0; n < cm->as->rank; n++)\n-    mpz_clear (ss->shape[n]);\n-  free (ss->shape);\n-\n+  gfc_free_shape (&ss->shape, cm->as->rank);\n   gfc_cleanup_loop (&loop);\n \n   return gfc_finish_block (&block);"}, {"sha": "f7df8c1db9d4530ffbecb5110c95a7cc504c3fa6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -1,3 +1,8 @@\n+2011-08-22  Mikael Morin  <mikael.morin@gcc.gnu.org>\n+\n+\tPR fortran/50050\n+\t* gfortran.dg/alloc_comp_initializer_3.f90: New test.\n+\n 2011-08-22  Georg-Johann Lay  <avr@gjlay.de>\n \t\n \t* gcc.dg/pr49994-2.c: Add dg-require-effective-target scheduling."}, {"sha": "014b069e5788c51c5fad27fd5425ad6d573635bd", "filename": "gcc/testsuite/gfortran.dg/alloc_comp_initializer_3.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d7212ec2b45c2829dba3bd3319fce109cbe7f01/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Falloc_comp_initializer_3.f90?ref=7d7212ec2b45c2829dba3bd3319fce109cbe7f01", "patch": "@@ -0,0 +1,15 @@\n+! { dg-do compile }\n+!\n+! PR fortran/50050\n+! Out of bound whilst releasing initialization of allocate object\n+!\n+! Contributed by someone <sigurdkn@gmail.com>\n+\n+program bug\n+  implicit none\n+  type foo\n+    integer, pointer :: a => null()\n+  end type\n+  type(foo), dimension(:,:), allocatable :: data\n+  allocate(data(1:1,1)) ! This used to lead to an ICE\n+end program"}]}