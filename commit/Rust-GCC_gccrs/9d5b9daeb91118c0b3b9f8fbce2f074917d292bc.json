{"sha": "9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ1YjlkYWViOTExMThjMGIzYjlmOGZiY2UyZjA3NDkxN2QyOTJiYw==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-15T13:32:31Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-15T13:32:31Z"}, "message": "i386.md (expsf2, [...]): New patterns to implement exp, expf and expl built-ins as inline x87 intrinsics.\n\n\n\t* config/i386/i386.md (expsf2, expdf2, expxf2): New patterns to\n\timplement exp, expf and expl built-ins as inline x87 intrinsics.\n\t(UNSPEC_FSCALE, UNSPEC_FRNDINT, UNSPEC_F2XM1): New unspecs to\n\trepresent x87's fscale, frndint and f2xm1 insns respectively.\n\t(*fscale_sfxf3, *fscale_dfxf3, *fscale_xf3): New insn patterns\n\tto encode x87's \"fscale\" instruction followed by a pop.\n\t(*frndintxf2): New insn pattern for \"frndint\".\n\t(*f2xm1xf2): New insn pattern for \"f2xm1\".\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FRNDINT and\n\tUNSPEC_F2XM1 like UNSPEC_{SIN,COS} and handle UNSPEC_FSCALE like\n\tUNSPEC_FPATAN.\n\n\t* gcc.dg/builtins-22.c: New test case.\n\t* gcc.dg/i386-387-1.c: Update to test exp.\n\t* gcc.dg/i386-387-2.c: Likewise.\n\nFrom-SVN: r67973", "tree": {"sha": "373d2c373f5f8302c62429a4f3bfecb9e2795db6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/373d2c373f5f8302c62429a4f3bfecb9e2795db6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/comments", "author": null, "committer": null, "parents": [{"sha": "84fb20190544bfca4f25ec8e8abd51b763f94fb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84fb20190544bfca4f25ec8e8abd51b763f94fb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84fb20190544bfca4f25ec8e8abd51b763f94fb3"}], "stats": {"total": 172, "additions": 171, "deletions": 1}, "files": [{"sha": "74fad5bc6cf4210747e8613848d5d0d662e0bcb4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -1,3 +1,18 @@\n+2003-06-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* config/i386/i386.md (expsf2, expdf2, expxf2): New patterns to\n+\timplement exp, expf and expl built-ins as inline x87 intrinsics.\n+\t(UNSPEC_FSCALE, UNSPEC_FRNDINT, UNSPEC_F2XM1): New unspecs to\n+\trepresent x87's fscale, frndint and f2xm1 insns respectively.\n+\t(*fscale_sfxf3, *fscale_dfxf3, *fscale_xf3): New insn patterns\n+\tto encode x87's \"fscale\" instruction followed by a pop.\n+\t(*frndintxf2): New insn pattern for \"frndint\".\n+\t(*f2xm1xf2): New insn pattern for \"f2xm1\".\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_FRNDINT and\n+\tUNSPEC_F2XM1 like UNSPEC_{SIN,COS} and handle UNSPEC_FSCALE like\n+\tUNSPEC_FPATAN.\n+\n 2003-06-15  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* Makefile.in (stagefeedback-start): Use $(SUBDIRS) instead of"}, {"sha": "7ea02a7a7f973b17f398760d4cdd7cc4eb2bcda1", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 131, "deletions": 1, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -113,9 +113,12 @@\n    ; x87 Floating point\n    (UNSPEC_FPATAN\t\t65)\n    (UNSPEC_FYL2X\t\t66)\n+   (UNSPEC_FSCALE\t\t67)\n+   (UNSPEC_FRNDINT\t\t68)\n+   (UNSPEC_F2XM1\t\t69)\n \n    ; REP instruction\n-   (UNSPEC_REP\t\t\t67)\n+   (UNSPEC_REP\t\t\t75)\n   ])\n \n (define_constants\n@@ -15725,6 +15728,133 @@\n   temp = standard_80387_constant_rtx (4); /* fldln2 */\n   emit_move_insn (operands[2], temp);\n })\n+\n+(define_insn \"*fscale_sfxf3\"\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t\t   (unspec:SF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t    UNSPEC_FSCALE))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fscale\\;fstp\\t%y1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+(define_insn \"*fscale_dfxf3\"\n+  [(parallel [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t\t   (unspec:DF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t    UNSPEC_FSCALE))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fscale\\;fstp\\t%y1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+(define_insn \"*fscale_xf3\"\n+  [(parallel [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t\t   (unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")\n+\t\t\t       (match_operand:XF 1 \"register_operand\" \"u\")]\n+\t\t    UNSPEC_FSCALE))\n+\t      (clobber (match_dup 1))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"fscale\\;fstp\\t%y1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*frndintxf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_FRNDINT))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"frndint\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_insn \"*f2xm1xf2\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 1 \"register_operand\" \"0\")]\n+\t UNSPEC_F2XM1))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+  \"f2xm1\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+(define_expand \"expsf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:SF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 5))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"expdf2\"\n+  [(set (match_dup 2)\n+\t(float_extend:XF (match_operand:DF 1 \"register_operand\" \"\")))\n+   (set (match_dup 4) (mult:XF (match_dup 2) (match_dup 3)))\n+   (set (match_dup 5) (unspec:XF [(match_dup 4)] UNSPEC_FRNDINT))\n+   (set (match_dup 6) (minus:XF (match_dup 4) (match_dup 5)))\n+   (set (match_dup 7) (unspec:XF [(match_dup 6)] UNSPEC_F2XM1))\n+   (set (match_dup 9) (plus:XF (match_dup 7) (match_dup 8)))\n+   (parallel [(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 9) (match_dup 5)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 5))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<10; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[3], temp);\n+  emit_move_insn (operands[8], CONST1_RTX (XFmode));  /* fld1 */\n+})\n+\n+(define_expand \"expxf2\"\n+  [(set (match_dup 3) (mult:XF (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t\t       (match_dup 2)))\n+   (set (match_dup 4) (unspec:XF [(match_dup 3)] UNSPEC_FRNDINT))\n+   (set (match_dup 5) (minus:XF (match_dup 3) (match_dup 4)))\n+   (set (match_dup 6) (unspec:XF [(match_dup 5)] UNSPEC_F2XM1))\n+   (set (match_dup 8) (plus:XF (match_dup 6) (match_dup 7)))\n+   (parallel [(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 8) (match_dup 4)] UNSPEC_FSCALE))\n+\t      (clobber (match_dup 4))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387\n+   && flag_unsafe_math_optimizations\"\n+{\n+  rtx temp;\n+  int i;\n+\n+  for (i=2; i<9; i++)\n+    operands[i] = gen_reg_rtx (XFmode);\n+  temp = standard_80387_constant_rtx (5); /* fldl2e */\n+  emit_move_insn (operands[2], temp);\n+  emit_move_insn (operands[7], CONST1_RTX (XFmode));  /* fld1 */\n+})\n \f\n ;; Block operation instructions\n "}, {"sha": "5b3a359d606f139b6f259a533bb94b323814a385", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -1711,6 +1711,8 @@ subst_stack_regs_pat (insn, regstack, pat)\n \t      {\n \t      case UNSPEC_SIN:\n \t      case UNSPEC_COS:\n+\t      case UNSPEC_FRNDINT:\n+\t      case UNSPEC_F2XM1:\n \t\t/* These insns only operate on the top of the stack.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n@@ -1734,6 +1736,7 @@ subst_stack_regs_pat (insn, regstack, pat)\n \n \t      case UNSPEC_FPATAN:\n \t      case UNSPEC_FYL2X:\n+\t      case UNSPEC_FSCALE:\n \t\t/* These insns operate on the top two stack slots.  */\n \n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));"}, {"sha": "4371663f1a55ff95b43a755e75451b487823bcbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -1,3 +1,9 @@\n+2003-06-15  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-22.c: New test case.\n+\t* gcc.dg/i386-387-1.c: Update to test exp.\n+\t* gcc.dg/i386-387-2.c: Likewise.\n+\n 2003-06-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.dg/format/asm_fprintf-1.c: Update width/precision checks."}, {"sha": "916890b409431c8f4159d1287200d641efe25762", "filename": "gcc/testsuite/gcc.dg/builtins-22.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-22.c?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -0,0 +1,12 @@\n+/* Related to PR optimization/10764  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+double exp(double x);\n+\n+double foo(double x)\n+{\n+  return exp(exp(x));\n+}\n+"}, {"sha": "79d25e2432eb730e5b64b17e87ec7895d71c2976", "filename": "gcc/testsuite/gcc.dg/i386-387-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -6,9 +6,11 @@\n /* { dg-final { scan-assembler \"call\\t_?sqrt\" } } */\n /* { dg-final { scan-assembler \"call\\t_?atan2\" } } */\n /* { dg-final { scan-assembler \"call\\t_?log\" } } */\n+/* { dg-final { scan-assembler \"call\\t_?exp\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n double f5(double x) { return __builtin_log(x); }\n+double f6(double x) { return __builtin_exp(x); }"}, {"sha": "bfda85bc17107c956a415dade8daac13956ed347", "filename": "gcc/testsuite/gcc.dg/i386-387-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d5b9daeb91118c0b3b9f8fbce2f074917d292bc/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c?ref=9d5b9daeb91118c0b3b9f8fbce2f074917d292bc", "patch": "@@ -6,9 +6,11 @@\n /* { dg-final { scan-assembler \"fsqrt\" } } */\n /* { dg-final { scan-assembler \"fpatan\" } } */\n /* { dg-final { scan-assembler \"fyl2x\" } } */\n+/* { dg-final { scan-assembler \"f2xm1\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n double f5(double x) { return __builtin_log(x); }\n+double f6(double x) { return __builtin_exp(x); }"}]}