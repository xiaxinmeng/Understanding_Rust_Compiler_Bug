{"sha": "434b897293cc5fc065a5ecb1536171520887adc4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0Yjg5NzI5M2NjNWZjMDY1YTVlY2IxNTM2MTcxNTIwODg3YWRjNA==", "commit": {"author": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-01-27T02:16:18Z"}, "committer": {"name": "Jerry DeLisle", "email": "jvdelisle@gcc.gnu.org", "date": "2011-01-27T02:16:18Z"}, "message": "re PR libfortran/47285 (G format outputs wrong number of characters when decimal supplied in literal)\n\n2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n\n\tPR libgfortran/47285\n\t* io/write_float.def (output_float): Return SUCCESS or FAILURE and use\n\tthe result to set the padding.\n\nFrom-SVN: r169320", "tree": {"sha": "eb4a2fbb806d3bfebb1a1a82b8bf7d7977f589f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb4a2fbb806d3bfebb1a1a82b8bf7d7977f589f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/434b897293cc5fc065a5ecb1536171520887adc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434b897293cc5fc065a5ecb1536171520887adc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434b897293cc5fc065a5ecb1536171520887adc4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434b897293cc5fc065a5ecb1536171520887adc4/comments", "author": null, "committer": null, "parents": [{"sha": "04af87889f708b66bf19c4ba9f65b7b1e8f18e34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04af87889f708b66bf19c4ba9f65b7b1e8f18e34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04af87889f708b66bf19c4ba9f65b7b1e8f18e34"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "c5589fe22a29aaf6d9229bb0280f1ea7a44a6954", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434b897293cc5fc065a5ecb1536171520887adc4/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434b897293cc5fc065a5ecb1536171520887adc4/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=434b897293cc5fc065a5ecb1536171520887adc4", "patch": "@@ -1,3 +1,9 @@\n+2011-01-26  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n+\n+\tPR libgfortran/47285\n+\t* io/write_float.def (output_float): Return SUCCESS or FAILURE and use\n+\tthe result to set the padding.\n+\n 2011-01-26  Kai Tietz  <kai.tietz@onevision.com>\n \n \t* intrinsics/getlog.c (getlog): Fix label/statement issue."}, {"sha": "a74b34a02143d0f8afb5b42d731f0b41e9e2dff0", "filename": "libgfortran/io/write_float.def", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434b897293cc5fc065a5ecb1536171520887adc4/libgfortran%2Fio%2Fwrite_float.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434b897293cc5fc065a5ecb1536171520887adc4/libgfortran%2Fio%2Fwrite_float.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite_float.def?ref=434b897293cc5fc065a5ecb1536171520887adc4", "patch": "@@ -61,7 +61,7 @@ calculate_sign (st_parameter_dt *dtp, int negative_flag)\n \n /* Output a real number according to its format which is FMT_G free.  */\n \n-static void\n+static try\n output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size, \n \t      int sign_bit, bool zero_flag, int ndigits, int edigits)\n {\n@@ -126,17 +126,17 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t{\n \t  out = write_block (dtp, w);\n \t  if (out == NULL)\n-\t    return;\n+\t    return FAILURE;\n \n \t  if (unlikely (is_char4_unit (dtp)))\n \t    {\n \t      gfc_char4_t *out4 = (gfc_char4_t *) out;\n \t      *out4 = '0';\n-\t      return;\n+\t      return SUCCESS;\n \t    }\n \n \t  *out = '0';\n-\t  return;\n+\t  return SUCCESS;\n \t}\n \t      \n     }\n@@ -181,13 +181,13 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t{\n \t  generate_error (&dtp->common, LIBERROR_FORMAT, \"Precision not \"\n \t\t\t  \"greater than zero in format specifier 'E' or 'D'\");\n-\t  return;\n+\t  return FAILURE;\n \t}\n       if (i <= -d || i >= d + 2)\n \t{\n \t  generate_error (&dtp->common, LIBERROR_FORMAT, \"Scale factor \"\n \t\t\t  \"out of range in format specifier 'E' or 'D'\");\n-\t  return;\n+\t  return FAILURE;\n \t}\n \n       if (!zero_flag)\n@@ -433,7 +433,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n   /* Create the ouput buffer.  */\n   out = write_block (dtp, w);\n   if (out == NULL)\n-    return;\n+    return FAILURE;\n \n   /* Check the value fits in the specified field width.  */\n   if (nblanks < 0 || edigits == -1)\n@@ -442,10 +442,10 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t{\n \t  gfc_char4_t *out4 = (gfc_char4_t *) out;\n \t  memset4 (out4, '*', w);\n-\t  return;\n+\t  return FAILURE;\n \t}\n       star_fill (out, w);\n-      return;\n+      return FAILURE;\n     }\n \n   /* See if we have space for a zero before the decimal point.  */\n@@ -553,7 +553,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n \t  memset4 (out4, ' ' , nblanks);\n \t  dtp->u.p.no_leading_blank = 0;\n \t}\n-      return;\n+      return SUCCESS;\n     } /* End of character(kind=4) internal unit code.  */\n \n   /* Pad to full field width.  */\n@@ -649,6 +649,7 @@ output_float (st_parameter_dt *dtp, const fnode *f, char *buffer, size_t size,\n #undef STR\n #undef STR1\n #undef MIN_FIELD_WIDTH\n+  return SUCCESS;\n }\n \n \n@@ -821,8 +822,9 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   GFC_REAL_ ## x rexp_d;\\\n   int low, high, mid;\\\n   int ubound, lbound;\\\n-  char *p;\\\n+  char *p, pad = ' ';\\\n   int save_scale_factor, nb = 0;\\\n+  try result;\\\n \\\n   save_scale_factor = dtp->u.p.scale_factor;\\\n   newf = (fnode *) get_mem (sizeof (fnode));\\\n@@ -876,11 +878,14 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n \t}\\\n     }\\\n \\\n+  if (e > 4)\\\n+    e = 4;\\\n   if (e < 0)\\\n     nb = 4;\\\n   else\\\n     nb = e + 2;\\\n \\\n+  nb = nb >= w ? 0 : nb;\\\n   newf->format = FMT_F;\\\n   newf->u.real.w = f->u.real.w - nb;\\\n \\\n@@ -892,8 +897,8 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n   dtp->u.p.scale_factor = 0;\\\n \\\n  finish:\\\n-  output_float (dtp, newf, buffer, size, sign_bit, zero_flag, ndigits, \\\n-\t\tedigits);\\\n+  result = output_float (dtp, newf, buffer, size, sign_bit, zero_flag, \\\n+\t\t\t ndigits, edigits);\\\n   dtp->u.p.scale_factor = save_scale_factor;\\\n \\\n   free (newf);\\\n@@ -903,13 +908,15 @@ output_float_FMT_G_ ## x (st_parameter_dt *dtp, const fnode *f, \\\n       p = write_block (dtp, nb);\\\n       if (p == NULL)\\\n \treturn;\\\n+      if (result == FAILURE)\\\n+        pad = '*';\\\n       if (unlikely (is_char4_unit (dtp)))\\\n \t{\\\n \t  gfc_char4_t *p4 = (gfc_char4_t *) p;\\\n-\t  memset4 (p4, ' ', nb);\\\n+\t  memset4 (p4, pad, nb);\\\n \t}\\\n       else\\\n-\tmemset (p, ' ', nb);\\\n+\tmemset (p, pad, nb);\\\n     }\\\n }\\\n "}]}