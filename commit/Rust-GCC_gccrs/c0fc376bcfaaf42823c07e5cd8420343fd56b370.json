{"sha": "c0fc376bcfaaf42823c07e5cd8420343fd56b370", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBmYzM3NmJjZmFhZjQyODIzYzA3ZTVjZDg0MjAzNDNmZDU2YjM3MA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "2000-10-24T23:01:11Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-10-24T23:01:11Z"}, "message": "rtlanal.c (rtx_unstable_p, [...]): Don't consider pic register stable if PIC_OFFSET_TABLE_REG_CALL_CLOBBERED.\n\n        * rtlanal.c (rtx_unstable_p, rtx_varies_p): Don't consider pic\n        register stable if PIC_OFFSET_TABLE_REG_CALL_CLOBBERED.\n\nFrom-SVN: r37040", "tree": {"sha": "ec392ba1631d9fe432a9fde0ebde287cfbd3a679", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec392ba1631d9fe432a9fde0ebde287cfbd3a679"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0fc376bcfaaf42823c07e5cd8420343fd56b370", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fc376bcfaaf42823c07e5cd8420343fd56b370", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0fc376bcfaaf42823c07e5cd8420343fd56b370", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0fc376bcfaaf42823c07e5cd8420343fd56b370/comments", "author": null, "committer": null, "parents": [{"sha": "d7836e38b773cb5aaebc661e57704def6a17c5b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7836e38b773cb5aaebc661e57704def6a17c5b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7836e38b773cb5aaebc661e57704def6a17c5b5"}], "stats": {"total": 32, "additions": 27, "deletions": 5}, "files": [{"sha": "e4c278bf4123bb6ad6096f569228fdc7497e4e3a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fc376bcfaaf42823c07e5cd8420343fd56b370/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fc376bcfaaf42823c07e5cd8420343fd56b370/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c0fc376bcfaaf42823c07e5cd8420343fd56b370", "patch": "@@ -1,3 +1,8 @@\n+2000-10-24  Richard Henderson  <rth@cygnus.com>\n+\n+\t* rtlanal.c (rtx_unstable_p, rtx_varies_p): Don't consider pic\n+\tregister stable if PIC_OFFSET_TABLE_REG_CALL_CLOBBERED.\n+\n 2000-10-24  Aldy Hernandez  <aldyh@redhat.com>\n \n         * gcse.c (cprop_insn): do not propagate constants into jump_insn"}, {"sha": "88b49fe649eff498ec0da97dc8c1d40d0b45c47d", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0fc376bcfaaf42823c07e5cd8420343fd56b370/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0fc376bcfaaf42823c07e5cd8420343fd56b370/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=c0fc376bcfaaf42823c07e5cd8420343fd56b370", "patch": "@@ -70,9 +70,17 @@ rtx_unstable_p (x)\n \n     case REG:\n       /* As in rtx_varies_p, we have to use the actual rtx, not reg number.  */\n-      return ! (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t\t|| x == arg_pointer_rtx || x == pic_offset_table_rtx\n-\t\t|| RTX_UNCHANGING_P (x));\n+      if (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n+\t  || x == arg_pointer_rtx || RTX_UNCHANGING_P (x))\n+\treturn 0;\n+#ifndef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n+      /* ??? When call-clobbered, the value is stable modulo the restore\n+\t that must happen after a call.  This currently screws up local-alloc\n+\t into believing that the restore is not needed.  */\n+      if (x == pic_offset_table_rtx)\n+\treturn 0;\n+#endif\n+      return 1;\n \n     case ASM_OPERANDS:\n       if (MEM_VOLATILE_P (x))\n@@ -135,8 +143,17 @@ rtx_varies_p (x)\n \t and arg pointers and not just the register number in case we have\n \t eliminated the frame and/or arg pointer and are using it\n \t for pseudos.  */\n-      return ! (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n-\t\t|| x == arg_pointer_rtx || x == pic_offset_table_rtx);\n+      if (x == frame_pointer_rtx || x == hard_frame_pointer_rtx\n+\t  || x == arg_pointer_rtx)\n+\treturn 0;\n+#ifndef PIC_OFFSET_TABLE_REG_CALL_CLOBBERED\n+      /* ??? When call-clobbered, the value is stable modulo the restore\n+\t that must happen after a call.  This currently screws up local-alloc\n+\t into believing that the restore is not needed.  */\n+      if (x == pic_offset_table_rtx)\n+\treturn 0;\n+#endif\n+      return 1;\n \n     case LO_SUM:\n       /* The operand 0 of a LO_SUM is considered constant"}]}