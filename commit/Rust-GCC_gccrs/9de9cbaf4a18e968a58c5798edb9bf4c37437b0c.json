{"sha": "9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlOWNiYWY0YTE4ZTk2OGE1OGM1Nzk4ZWRiOWJmNGMzNzQzN2IwYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-06-30T06:12:22Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-06-30T06:12:22Z"}, "message": "re PR debug/44694 (Long var tracking compile time of GiNaC tests)\n\n\tPR debug/44694\n\t* cselib.h (cselib_preserve_cfa_base_value): Add regno argument.\n\t* cselib.c (cfa_base_preserved_regno): New static variable.\n\t(cselib_reset_table): Don't reset cfa_base_preserved_regno instead\n\tof REGNO (cfa_base_preserved_val->locs->loc).\n\t(cselib_preserve_cfa_base_value): Add regno argument, set\n\tcfa_base_preserved_regno to it.\n\t(cselib_invalidate_regno): Allow removal of registers other than\n\tcfa_base_preserved_regno from cfa_base_preserved_val.\n\t(cselib_finish): Set cfa_base_preserved_regno to INVALID_REGNUM.\n\t* var-tracking.c (adjust_mems): Replace sp or hfp even outside\n\tof MEM addresses, if not on LHS.\n\t(reverse_op): Don't add reverse ops for cfa_base_rtx.\n\t(vt_init_cfa_base): Adjust cselib_preserve_cfa_base_value caller.\n\nFrom-SVN: r161587", "tree": {"sha": "94a5923625f40d69409e2f1f008709fbeff934c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94a5923625f40d69409e2f1f008709fbeff934c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d33c89fbcf8aa49ea2c25f0651d6a66472e8536d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33c89fbcf8aa49ea2c25f0651d6a66472e8536d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33c89fbcf8aa49ea2c25f0651d6a66472e8536d"}], "stats": {"total": 45, "additions": 36, "deletions": 9}, "files": [{"sha": "40f79171d6cd199fe486e2527529a858be114482", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "patch": "@@ -1,3 +1,20 @@\n+2010-06-30  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/44694\n+\t* cselib.h (cselib_preserve_cfa_base_value): Add regno argument.\n+\t* cselib.c (cfa_base_preserved_regno): New static variable.\n+\t(cselib_reset_table): Don't reset cfa_base_preserved_regno instead\n+\tof REGNO (cfa_base_preserved_val->locs->loc).\n+\t(cselib_preserve_cfa_base_value): Add regno argument, set\n+\tcfa_base_preserved_regno to it.\n+\t(cselib_invalidate_regno): Allow removal of registers other than\n+\tcfa_base_preserved_regno from cfa_base_preserved_val.\n+\t(cselib_finish): Set cfa_base_preserved_regno to INVALID_REGNUM.\n+\t* var-tracking.c (adjust_mems): Replace sp or hfp even outside\n+\tof MEM addresses, if not on LHS.\n+\t(reverse_op): Don't add reverse ops for cfa_base_rtx.\n+\t(vt_init_cfa_base): Adjust cselib_preserve_cfa_base_value caller.\n+\n 2010-06-30  Bernd Schmidt  <bernds@codesourcery.com>\n \n \t* recog.c (peep2_do_rebuild_jump_labels, peep2_do_cleanup_cfg): New"}, {"sha": "28ed6d7b348edf187548535bf42018f433b2afa1", "filename": "gcc/cselib.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "patch": "@@ -178,6 +178,7 @@ static cselib_val dummy_val;\n    that is constant through the whole function and should never be\n    eliminated.  */\n static cselib_val *cfa_base_preserved_val;\n+static unsigned int cfa_base_preserved_regno;\n \n /* Used to list all values that contain memory reference.\n    May or may not contain the useless values - the list is compacted\n@@ -338,7 +339,7 @@ cselib_reset_table (unsigned int num)\n \n   if (cfa_base_preserved_val)\n     {\n-      unsigned int regno = REGNO (cfa_base_preserved_val->locs->loc);\n+      unsigned int regno = cfa_base_preserved_regno;\n       unsigned int new_used_regs = 0;\n       for (i = 0; i < n_used_regs; i++)\n \tif (used_regs[i] == regno)\n@@ -571,12 +572,15 @@ cselib_preserved_value_p (cselib_val *v)\n    never invalidated and preserved across cselib_reset_table calls.  */\n \n void\n-cselib_preserve_cfa_base_value (cselib_val *v)\n+cselib_preserve_cfa_base_value (cselib_val *v, unsigned int regno)\n {\n   if (cselib_preserve_constants\n       && v->locs\n       && REG_P (v->locs->loc))\n-    cfa_base_preserved_val = v;\n+    {\n+      cfa_base_preserved_val = v;\n+      cfa_base_preserved_regno = regno;\n+    }\n }\n \n /* Clean all non-constant expressions in the hash table, but retain\n@@ -1783,7 +1787,9 @@ cselib_invalidate_regno (unsigned int regno, enum machine_mode mode)\n \t  if (i < FIRST_PSEUDO_REGISTER && v != NULL)\n \t    this_last = end_hard_regno (GET_MODE (v->val_rtx), i) - 1;\n \n-\t  if (this_last < regno || v == NULL || v == cfa_base_preserved_val)\n+\t  if (this_last < regno || v == NULL\n+\t      || (v == cfa_base_preserved_val\n+\t\t  && i == cfa_base_preserved_regno))\n \t    {\n \t      l = &(*l)->next;\n \t      continue;\n@@ -2266,6 +2272,7 @@ cselib_finish (void)\n   cselib_discard_hook = NULL;\n   cselib_preserve_constants = false;\n   cfa_base_preserved_val = NULL;\n+  cfa_base_preserved_regno = INVALID_REGNUM;\n   free_alloc_pool (elt_list_pool);\n   free_alloc_pool (elt_loc_list_pool);\n   free_alloc_pool (cselib_val_pool);"}, {"sha": "4259e396fdf76552f28a81401d150c9e686e0579", "filename": "gcc/cselib.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fcselib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fcselib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.h?ref=9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "patch": "@@ -99,6 +99,6 @@ extern unsigned int cselib_get_next_uid (void);\n extern void cselib_preserve_value (cselib_val *);\n extern bool cselib_preserved_value_p (cselib_val *);\n extern void cselib_preserve_only_values (void);\n-extern void cselib_preserve_cfa_base_value (cselib_val *);\n+extern void cselib_preserve_cfa_base_value (cselib_val *, unsigned int);\n \n extern void dump_cselib_table (FILE *);"}, {"sha": "a90ca3884d93414b593664dd074db5bef1c04dd2", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de9cbaf4a18e968a58c5798edb9bf4c37437b0c/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=9de9cbaf4a18e968a58c5798edb9bf4c37437b0c", "patch": "@@ -798,8 +798,9 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n   switch (GET_CODE (loc))\n     {\n     case REG:\n-      /* Don't do any sp or fp replacements outside of MEM addresses.  */\n-      if (amd->mem_mode == VOIDmode)\n+      /* Don't do any sp or fp replacements outside of MEM addresses\n+         on the LHS.  */\n+      if (amd->mem_mode == VOIDmode && amd->store)\n \treturn loc;\n       if (loc == stack_pointer_rtx\n \t  && !frame_pointer_needed)\n@@ -5193,7 +5194,9 @@ reverse_op (rtx val, const_rtx expr)\n       return NULL_RTX;\n     }\n \n-  if (!REG_P (XEXP (src, 0)) || !SCALAR_INT_MODE_P (GET_MODE (src)))\n+  if (!REG_P (XEXP (src, 0))\n+      || !SCALAR_INT_MODE_P (GET_MODE (src))\n+      || XEXP (src, 0) == cfa_base_rtx)\n     return NULL_RTX;\n \n   v = cselib_lookup (XEXP (src, 0), GET_MODE (XEXP (src, 0)), 0);\n@@ -8163,7 +8166,7 @@ vt_init_cfa_base (void)\n   val = cselib_lookup_from_insn (cfa_base_rtx, GET_MODE (cfa_base_rtx), 1,\n \t\t\t\t get_insns ());\n   preserve_value (val);\n-  cselib_preserve_cfa_base_value (val);\n+  cselib_preserve_cfa_base_value (val, REGNO (cfa_base_rtx));\n   var_reg_decl_set (&VTI (ENTRY_BLOCK_PTR)->out, cfa_base_rtx,\n \t\t    VAR_INIT_STATUS_INITIALIZED, dv_from_value (val->val_rtx),\n \t\t    0, NULL_RTX, INSERT);"}]}