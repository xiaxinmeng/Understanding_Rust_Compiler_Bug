{"sha": "0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQ5ZWIzYmEyOTIyYTA3ZDY4YzI3MTcwZGUwMTk1ZjViOTZiNGIwYw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-04-18T20:21:39Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-04-18T20:21:39Z"}, "message": "cp-tree.h (lang_decl_flags): Remove const_memfunc and volatile_memfunc.\n\n\t* cp-tree.h (lang_decl_flags): Remove const_memfunc and\n\tvolatile_memfunc.  Add destructor_attr.  Adjust dummy.\n\t(DECL_DESTRUCTOR_P): Use destructor_attr.\n\t(DECL_CONST_MEMFUNC_P): Reimplement.\n\t(DECL_VOLATILE_MEMFUNC_P): Remove.\n\t* class.c (finish_struct_methods): Use CLASSTYPE_DESTRUCTORS.\n\t(overrides): Use DECL_DESTRUCTOR_P.\n\t(check_for_override): Likewise.\n\t* decl.c (start_function): Likewise.\n\t* decl2.c (grokfclassfn): Likewise.\n\t(check_classfn): Likewise.\n\t(grok_function_init): Likewise.\n\nFrom-SVN: r33235", "tree": {"sha": "fed08624d1d24855eb4b01f654e9f1ed84672588", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fed08624d1d24855eb4b01f654e9f1ed84672588"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/comments", "author": null, "committer": null, "parents": [{"sha": "616ce8db9156c22bac0d5d43366be58073ef0368", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616ce8db9156c22bac0d5d43366be58073ef0368", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616ce8db9156c22bac0d5d43366be58073ef0368"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "5d60aa017c25a2022ef109b25717459bc778734c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -1,3 +1,18 @@\n+2000-04-18  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (lang_decl_flags): Remove const_memfunc and\n+\tvolatile_memfunc.  Add destructor_attr.  Adjust dummy.\n+\t(DECL_DESTRUCTOR_P): Use destructor_attr.\n+\t(DECL_CONST_MEMFUNC_P): Reimplement.\n+\t(DECL_VOLATILE_MEMFUNC_P): Remove.\n+\t* class.c (finish_struct_methods): Use CLASSTYPE_DESTRUCTORS.\n+\t(overrides): Use DECL_DESTRUCTOR_P.\n+\t(check_for_override): Likewise.\n+\t* decl.c (start_function): Likewise.\n+\t* decl2.c (grokfclassfn): Likewise.\n+\t(check_classfn): Likewise.\n+\t(grok_function_init): Likewise.\n+\n 2000-04-17  Mark Mitchell  <mark@codesourcery.com>\n \n \t* decl2.c (grokfield): Issue error on illegal data member"}, {"sha": "b5d3f3e7b227cf4a0c99486ddedbb15ecb25883e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -2155,7 +2155,7 @@ finish_struct_methods (t)\n     /* Clear out this flag.  */\n     DECL_IN_AGGR_P (fn_fields) = 0;\n \n-  if (TYPE_HAS_DESTRUCTOR (t) && !TREE_VEC_ELT (method_vec, 1))\n+  if (TYPE_HAS_DESTRUCTOR (t) && !CLASSTYPE_DESTRUCTORS (t))\n     /* We thought there was a destructor, but there wasn't.  Some\n        parse errors cause this anomalous situation.  */\n     TYPE_HAS_DESTRUCTOR (t) = 0;\n@@ -2285,11 +2285,9 @@ overrides (fndecl, base_fndecl)\n      tree fndecl, base_fndecl;\n {\n   /* Destructors have special names.  */\n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl))\n-      && DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n+  if (DECL_DESTRUCTOR_P (base_fndecl) && DECL_DESTRUCTOR_P (fndecl))\n     return 1;\n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (base_fndecl))\n-      || DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (fndecl)))\n+  if (DECL_DESTRUCTOR_P (base_fndecl) || DECL_DESTRUCTOR_P (fndecl))\n     return 0;\n   if (DECL_NAME (fndecl) == DECL_NAME (base_fndecl))\n     {\n@@ -2744,8 +2742,7 @@ check_for_override (decl, ctype)\n       if (TYPE_POLYMORPHIC_P (BINFO_TYPE (base_binfo)))\n \t{\n \t  tree tmp = get_matching_virtual\n-\t    (base_binfo, decl,\n-\t     DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (decl)));\n+\t    (base_binfo, decl, DECL_DESTRUCTOR_P (decl));\n \n \t  if (tmp && !found_overriden_fn)\n \t    {"}, {"sha": "d419e26027ff9fbef000a5bcfeb5a1c91f2ff80a", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -1861,12 +1861,12 @@ struct lang_decl_flags\n \n   unsigned operator_attr : 1;\n   unsigned constructor_attr : 1;\n+  unsigned destructor_attr : 1;\n   unsigned friend_attr : 1;\n   unsigned static_function : 1;\n-  unsigned const_memfunc : 1;\n-  unsigned volatile_memfunc : 1;\n   unsigned pure_virtual : 1;\n   unsigned has_in_charge_parm_p : 1;\n+  unsigned pretty_function_p : 1;\n \n   unsigned mutable_flag : 1;\n   unsigned deferred : 1;\n@@ -1881,8 +1881,7 @@ struct lang_decl_flags\n   unsigned pending_inline_p : 1;\n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n-  unsigned pretty_function_p : 1;\n-  unsigned dummy : 2;\n+  unsigned dummy : 3;\n \n   tree context;\n \n@@ -1969,8 +1968,7 @@ struct lang_decl\n /* There ought to be a better way to find out whether or not something is\n    a destructor.  */\n #define DECL_DESTRUCTOR_P(NODE)\t\t\t\t\\\n-  (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (NODE))\t\\\n-   && DECL_LANGUAGE (NODE) == lang_cplusplus)\n+  (DECL_LANG_SPECIFIC (NODE)->decl_flags.destructor_attr)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a destructor, but not the\n    specialized in-charge constructor, in-charge deleting constructor,\n@@ -2078,11 +2076,10 @@ struct lang_decl\n \n /* Nonzero for FUNCTION_DECL means that this member function\n    has `this' as const X *const.  */\n-#define DECL_CONST_MEMFUNC_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.const_memfunc)\n-\n-/* Nonzero for FUNCTION_DECL means that this member function\n-   has `this' as volatile X *const.  */\n-#define DECL_VOLATILE_MEMFUNC_P(NODE) (DECL_LANG_SPECIFIC(NODE)->decl_flags.volatile_memfunc)\n+#define DECL_CONST_MEMFUNC_P(NODE)\t\t\t\t\t \\\n+  (DECL_NONSTATIC_MEMBER_FUNCTION_P (NODE)\t\t\t\t \\\n+   && CP_TYPE_CONST_P (TREE_TYPE (TREE_VALUE \t\t\t\t \\\n+\t\t\t\t  (TYPE_ARG_TYPES (TREE_TYPE (NODE))))))\n \n /* Nonzero for a DECL means that this member is a non-static member.  */\n #define DECL_NONSTATIC_MEMBER_P(NODE) \t\t\\"}, {"sha": "f667fd5207155d7807859c93723aecf26a9cb9f3", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -13551,8 +13551,7 @@ start_function (declspecs, declarator, attrs, flags)\n \n   ++function_depth;\n \n-  if (DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (decl1))\n-      && DECL_LANGUAGE (decl1) == lang_cplusplus)\n+  if (DECL_DESTRUCTOR_P (decl1))\n     {\n       dtor_label = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);\n       DECL_CONTEXT (dtor_label) = current_function_decl;"}, {"sha": "3be90dcbd760d16de0594e3012e52735dd9bea96", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -1037,6 +1037,7 @@ grokclassfn (ctype, function, flags, quals)\n \n   if (flags == DTOR_FLAG)\n     {\n+      DECL_DESTRUCTOR_P (function) = 1;\n       DECL_ASSEMBLER_NAME (function) = build_destructor_name (ctype);\n       TYPE_HAS_DESTRUCTOR (ctype) = 1;\n     }\n@@ -1389,7 +1390,7 @@ check_classfn (ctype, function)\n \t  && DECL_CONSTRUCTOR_P (function))\n \tgoto got_it;\n       if (*++methods && fn_name == DECL_NAME (OVL_CURRENT (*methods))\n-\t  && DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (function)))\n+\t  && DECL_DESTRUCTOR_P (function))\n \tgoto got_it;\n \n       while (++methods != end && *methods)\n@@ -1410,7 +1411,7 @@ check_classfn (ctype, function)\n \t\t     we can't use this short-cut for them, either.\n \t\t     (It's not legal to declare arguments for a\n \t\t     destructor, but some people try.)  */\n-\t\t  if (!DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (function))\n+\t\t  if (!DECL_DESTRUCTOR_P (function)\n \t\t      && (DECL_ASSEMBLER_NAME (function)\n \t\t\t  != DECL_NAME (function))\n \t\t      && (DECL_ASSEMBLER_NAME (fndecl)\n@@ -1909,7 +1910,7 @@ grok_function_init (decl, init)\n       /* pure virtual destructors must be defined.  */\n       /* pure virtual needs to be defined (as abort) only when put in \n \t vtbl. For wellformed call, it should be itself. pr4737 */\n-      if (!DESTRUCTOR_NAME_P (DECL_ASSEMBLER_NAME (decl)))\n+      if (!DECL_DESTRUCTOR_P (decl)))\n \t{\n \t  /* Give this node rtl from `abort'.  */\n \t  DECL_RTL (decl) = DECL_RTL (abort_fndecl);"}, {"sha": "ca60b021754158248c3141f4796bc13ebcde25ba", "filename": "gcc/testsuite/g++.old-deja/g++.other/externC1.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2FexternC1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d9eb3ba2922a07d68c27170de0195f5b96b4b0c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2FexternC1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2FexternC1.C?ref=0d9eb3ba2922a07d68c27170de0195f5b96b4b0c", "patch": "@@ -0,0 +1,22 @@\n+// Build don't link:\n+// Origin: Mark Mitchell <mitchell@codesourcery.com>\n+\n+extern \"C\"\n+{\n+  struct T\n+  {\n+    ~T ();\n+  };\n+\n+  struct S\n+  {\n+    T t;\n+  };\n+}\n+\n+S* s;\n+\n+void f ()\n+{\n+  delete s;\n+}"}]}