{"sha": "34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzRlZmE1YzJhODRhOGM3YzdiZWI4NTVkZWMyNGEzMjFlZWJjYmQ2Yg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-14T21:18:19Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2020-10-14T21:18:19Z"}, "message": "PR c/97413 - bogus error on function declaration with many VLA arguments\n\ngcc/ChangeLog:\n\n\tPR c/97413\n\t* attribs.c (init_attr_rdwr_indices): Unwrap extra list layer.\n\ngcc/c-family/ChangeLog:\n\n\tPR c/97413\n\t* c-attribs.c (build_attr_access_from_parms): Wrap chain of VLA\n\tbounds in an extra list.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/97413\n\t* gcc.dg/Wvla-parameter-8.c: New test.", "tree": {"sha": "b89ec4413e427a639d87da436bb0efa97626a70d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b89ec4413e427a639d87da436bb0efa97626a70d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30d06b7d30792bc621202af2099c21fc24157856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d06b7d30792bc621202af2099c21fc24157856", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d06b7d30792bc621202af2099c21fc24157856"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "3bdb2ffda8186348ebff89f49ea02f69841379a3", "filename": "gcc/attribs.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "patch": "@@ -2049,6 +2049,8 @@ init_attr_rdwr_indices (rdwr_map *rwm, tree attrs)\n \n       /* The (optional) list of VLA bounds.  */\n       tree vblist = TREE_CHAIN (mode);\n+      if (vblist)\n+       vblist = TREE_VALUE (vblist);\n \n       mode = TREE_VALUE (mode);\n       if (TREE_CODE (mode) != STRING_CST)"}, {"sha": "8283e959c8962b0fd90b8a08e11b9e67b2e917ad", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "patch": "@@ -4547,10 +4547,11 @@ handle_access_attribute (tree node[3], tree name, tree args,\n    result in the following attribute access:\n \n      value: \"+^2[*],$0$1^3[*],$1$1\"\n-     chain: <0, x> <1, y>\n+     list:  < <0, x> <1, y> >\n \n-   where each <node> on the chain corresponds to one VLA bound for each\n-   of the two parameters.  */\n+   where the list has a single value which itself is is a list each\n+   of whose <node>s corresponds to one VLA bound for each of the two\n+   parameters.  */\n \n tree\n build_attr_access_from_parms (tree parms, bool skip_voidptr)\n@@ -4654,13 +4655,17 @@ build_attr_access_from_parms (tree parms, bool skip_voidptr)\n   if (!spec.length ())\n     return NULL_TREE;\n \n+  /* Attribute access takes a two or three arguments.  Wrap VBLIST in\n+     another list in case it has more nodes than would otherwise fit.  */\n+    vblist = build_tree_list (NULL_TREE, vblist);\n+\n   /* Build a single attribute access with the string describing all\n      array arguments and an optional list of any non-parameter VLA\n      bounds in order.  */\n   tree str = build_string (spec.length (), spec.c_str ());\n   tree attrargs = tree_cons (NULL_TREE, str, vblist);\n   tree name = get_identifier (\"access\");\n-  return tree_cons (name, attrargs, NULL_TREE);\n+  return build_tree_list (name, attrargs);\n }\n \n /* Handle a \"nothrow\" attribute; arguments as in"}, {"sha": "69e10f70066dd8e709905c9df1b83bdba4b7abfe", "filename": "gcc/testsuite/gcc.dg/Wvla-parameter-8.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/34efa5c2a84a8c7c7beb855dec24a321eebcbd6b/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWvla-parameter-8.c?ref=34efa5c2a84a8c7c7beb855dec24a321eebcbd6b", "patch": "@@ -0,0 +1,86 @@\n+/* PR c/97413 - bogus error on function declaration with many VLA arguments:\n+   wrong number of arguments specified for 'access' attribute\n+   { dg-do compile }\n+   { dg-options \"-Wall\" } */\n+\n+extern int n;\n+\n+void f1 (int[n]);\n+void f2 (int[n], int[n]);\n+void f3 (int[n], int[n], int[n]);\n+void f4 (int[n], int[n], int[n], int[n]);\n+void f5 (int[n], int[n], int[n], int[n], int[n]);\n+void f6 (int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f7 (int[n], int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f8 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f9 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n],\n+\t int[n]);\n+void f10 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n],\n+\t  int[n], int[n]);\n+\n+\n+void f1 (int[n]);\n+void f2 (int[n], int[n]);\n+void f3 (int[n], int[n], int[n]);\n+void f4 (int[n], int[n], int[n], int[n]);\n+void f5 (int[n], int[n], int[n], int[n], int[n]);\n+void f6 (int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f7 (int[n], int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f8 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n]);\n+void f9 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n],\n+\t int[n]);\n+void f10 (int[n], int[n], int[n], int[n], int[n], int[n], int[n], int[n],\n+\t  int[n], int[n]);\n+\n+\n+void g (int n)\n+{\n+  typedef int A[n];\n+\n+  void g1 (A);\n+  void g2 (A, A);\n+  void g3 (A, A, A);\n+  void g4 (A, A, A, A);\n+  void g5 (A, A, A, A, A);\n+  void g6 (A, A, A, A, A, A);\n+  void g7 (A, A, A, A, A, A, A);\n+  void g8 (A, A, A, A, A, A, A, A);\n+  void g9 (A, A, A, A, A, A, A, A, A);\n+  void g10 (A, A, A, A, A, A, A, A, A, A);\n+\n+  void g1 (A);\n+  void g2 (A, A);\n+  void g3 (A, A, A);\n+  void g4 (A, A, A, A);\n+  void g5 (A, A, A, A, A);\n+  void g6 (A, A, A, A, A, A);\n+  void g7 (A, A, A, A, A, A, A);\n+  void g8 (A, A, A, A, A, A, A, A);\n+  void g9 (A, A, A, A, A, A, A, A, A);\n+  void g10 (A, A, A, A, A, A, A, A, A, A);\n+\n+\n+  typedef int B[n][n + 1][n + 2][n + 3][n + 4][n + 5][n + 7];\n+\n+  void h1 (B);\n+  void h2 (B, B);\n+  void h3 (B, B, B);\n+  void h4 (B, B, B, B);\n+  void h5 (B, B, B, B, B);\n+  void h6 (B, B, B, B, B, B);\n+  void h7 (B, B, B, B, B, B, B);\n+  void h8 (B, B, B, B, B, B, B, B);\n+  void h9 (B, B, B, B, B, B, B, B, B);\n+  void h10 (B, B, B, B, B, B, B, B, B, B);\n+\n+  void h1 (B);\n+  void h2 (B, B);\n+  void h3 (B, B, B);\n+  void h4 (B, B, B, B);\n+  void h5 (B, B, B, B, B);\n+  void h6 (B, B, B, B, B, B);\n+  void h7 (B, B, B, B, B, B, B);\n+  void h8 (B, B, B, B, B, B, B, B);\n+  void h9 (B, B, B, B, B, B, B, B, B);\n+  void h10 (B, B, B, B, B, B, B, B, B, B);\n+}"}]}