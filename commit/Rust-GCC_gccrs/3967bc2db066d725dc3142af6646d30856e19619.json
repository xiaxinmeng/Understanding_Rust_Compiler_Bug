{"sha": "3967bc2db066d725dc3142af6646d30856e19619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2N2JjMmRiMDY2ZDcyNWRjMzE0MmFmNjY0NmQzMDg1NmUxOTYxOQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2006-04-04T15:27:08Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2006-04-04T15:27:08Z"}, "message": "builtins.c (fold_builtin_sprintf): Use fold_convert instead of convert in the middle-end.\n\n\n\t* builtins.c (fold_builtin_sprintf): Use fold_convert instead of\n\tconvert in the middle-end.\n\t* expr.c (store_expr, store_constructor, get_inner_reference,\n\texpand_expr_real_1, string_constant, try_casesi, try_tablejump):\n\tLikewise.\n\t* tree.c (build_range_type): Likewise.\n\nFrom-SVN: r112670", "tree": {"sha": "fff3867a793ffd5ce279442916bddd089c5be1ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff3867a793ffd5ce279442916bddd089c5be1ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3967bc2db066d725dc3142af6646d30856e19619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3967bc2db066d725dc3142af6646d30856e19619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3967bc2db066d725dc3142af6646d30856e19619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3967bc2db066d725dc3142af6646d30856e19619/comments", "author": null, "committer": null, "parents": [{"sha": "b52be2c8a18aa0f7fe7082a5635d3906398a65b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b52be2c8a18aa0f7fe7082a5635d3906398a65b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b52be2c8a18aa0f7fe7082a5635d3906398a65b2"}], "stats": {"total": 83, "additions": 47, "deletions": 36}, "files": [{"sha": "192d6f79509947c573efbe809fe5d8ce8361bc1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3967bc2db066d725dc3142af6646d30856e19619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3967bc2db066d725dc3142af6646d30856e19619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3967bc2db066d725dc3142af6646d30856e19619", "patch": "@@ -1,3 +1,12 @@\n+2006-04-04  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.c (fold_builtin_sprintf): Use fold_convert instead of\n+\tconvert in the middle-end.\n+\t* expr.c (store_expr, store_constructor, get_inner_reference,\n+\texpand_expr_real_1, string_constant, try_casesi, try_tablejump):\n+\tLikewise.\n+\t* tree.c (build_range_type): Likewise.\n+\n 2006-04-04  Tom Tromey  <tromey@redhat.com>\n \n \t* doc/install.texi (Prerequisites): Mention jar."}, {"sha": "8177f890ded40f6efad9e640204d0e4ac44576d1", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=3967bc2db066d725dc3142af6646d30856e19619", "patch": "@@ -9657,7 +9657,7 @@ fold_builtin_sprintf (tree arglist, int ignored)\n \n   if (call && retval)\n     {\n-      retval = convert\n+      retval = fold_convert\n \t(TREE_TYPE (TREE_TYPE (implicit_built_in_decls[BUILT_IN_SPRINTF])),\n \t retval);\n       return build2 (COMPOUND_EXPR, TREE_TYPE (retval), call, retval);"}, {"sha": "904d4fcb30fd514c119cef8cf7b97ee54c9e09b0", "filename": "gcc/expr.c", "status": "modified", "additions": 35, "deletions": 33, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=3967bc2db066d725dc3142af6646d30856e19619", "patch": "@@ -4288,14 +4288,14 @@ store_expr (tree exp, rtx target, int call_param_p)\n \t{\n \t  if (TYPE_UNSIGNED (TREE_TYPE (exp))\n \t      != SUBREG_PROMOTED_UNSIGNED_P (target))\n-\t    exp = convert\n+\t    exp = fold_convert\n \t      (lang_hooks.types.signed_or_unsigned_type\n \t       (SUBREG_PROMOTED_UNSIGNED_P (target), TREE_TYPE (exp)), exp);\n \n-\t  exp = convert (lang_hooks.types.type_for_mode\n-\t\t\t (GET_MODE (SUBREG_REG (target)),\n-\t\t\t  SUBREG_PROMOTED_UNSIGNED_P (target)),\n-\t\t\t exp);\n+\t  exp = fold_convert (lang_hooks.types.type_for_mode\n+\t\t\t\t(GET_MODE (SUBREG_REG (target)),\n+\t\t\t\t SUBREG_PROMOTED_UNSIGNED_P (target)),\n+\t\t\t      exp);\n \n \t  inner_target = SUBREG_REG (target);\n \t}\n@@ -4963,13 +4963,13 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t  {\n \t\t    type = lang_hooks.types.type_for_size\n \t\t      (BITS_PER_WORD, TYPE_UNSIGNED (type));\n-\t\t    value = convert (type, value);\n+\t\t    value = fold_convert (type, value);\n \t\t  }\n \t\t\n \t\tif (BYTES_BIG_ENDIAN)\n \t\t  value\n \t\t   = fold_build2 (LSHIFT_EXPR, type, value,\n-\t\t\t\t   build_int_cst (NULL_TREE,\n+\t\t\t\t   build_int_cst (type,\n \t\t\t\t\t\t  BITS_PER_WORD - bitsize));\n \t\tbitsize = BITS_PER_WORD;\n \t\tmode = word_mode;\n@@ -5167,13 +5167,17 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    emit_label (loop_start);\n \n \t\t    /* Assign value to element index.  */\n-\t\t    position\n-\t\t      = convert (ssizetype,\n-\t\t\t\t fold_build2 (MINUS_EXPR, TREE_TYPE (index),\n-\t\t\t\t\t      index, TYPE_MIN_VALUE (domain)));\n-\t\t    position = size_binop (MULT_EXPR, position,\n-\t\t\t\t\t   convert (ssizetype,\n-\t\t\t\t\t\t    TYPE_SIZE_UNIT (elttype)));\n+\t\t    position =\n+\t\t      fold_convert (ssizetype,\n+\t\t\t\t    fold_build2 (MINUS_EXPR,\n+\t\t\t\t\t\t TREE_TYPE (index),\n+\t\t\t\t\t\t index,\n+\t\t\t\t\t\t TYPE_MIN_VALUE (domain)));\n+\n+\t\t    position =\n+\t\t\tsize_binop (MULT_EXPR, position,\n+\t\t\t\t    fold_convert (ssizetype,\n+\t\t\t\t\t\t  TYPE_SIZE_UNIT (elttype)));\n \t\t    \n \t\t    pos_rtx = expand_normal (position);\n \t\t    xtarget = offset_address (target, pos_rtx,\n@@ -5217,9 +5221,10 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\t\t\t\t     index,\n \t\t\t\t\t\t     TYPE_MIN_VALUE (domain)));\n \t\t\n-\t\tposition = size_binop (MULT_EXPR, index,\n-\t\t\t\t       convert (ssizetype,\n-\t\t\t\t\t\tTYPE_SIZE_UNIT (elttype)));\n+\t\tposition =\n+\t\t  size_binop (MULT_EXPR, index,\n+\t\t\t      fold_convert (ssizetype,\n+\t\t\t\t\t    TYPE_SIZE_UNIT (elttype)));\n \t\txtarget = offset_address (target,\n \t\t\t\t\t  expand_normal (position),\n \t\t\t\t\t  highest_pow2_factor (position));\n@@ -5672,7 +5677,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \n \t    offset = size_binop (PLUS_EXPR, offset,\n \t\t\t         size_binop (MULT_EXPR,\n-\t\t\t\t\t     convert (sizetype, index),\n+\t\t\t\t\t     fold_convert (sizetype, index),\n \t\t\t\t\t     unit_size));\n \t  }\n \t  break;\n@@ -5711,7 +5716,8 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n   /* If OFFSET is constant, see if we can return the whole thing as a\n      constant bit position.  Otherwise, split it up.  */\n   if (host_integerp (offset, 0)\n-      && 0 != (tem = size_binop (MULT_EXPR, convert (bitsizetype, offset),\n+      && 0 != (tem = size_binop (MULT_EXPR,\n+\t\t\t\t fold_convert (bitsizetype, offset),\n \t\t\t\t bitsize_unit_node))\n       && 0 != (tem = size_binop (PLUS_EXPR, tem, bit_offset))\n       && host_integerp (tem, 0))\n@@ -8500,14 +8506,11 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    && integer_onep (DECL_SIZE (TREE_OPERAND (TREE_OPERAND (rhs, 1), 1))))\n \t  {\n \t    rtx label = gen_label_rtx ();\n-\n+\t    int value = TREE_CODE (rhs) == BIT_IOR_EXPR;\n \t    do_jump (TREE_OPERAND (rhs, 1),\n-\t\t     TREE_CODE (rhs) == BIT_IOR_EXPR ? label : 0,\n-\t\t     TREE_CODE (rhs) == BIT_AND_EXPR ? label : 0);\n-\t    expand_assignment (lhs, convert (TREE_TYPE (rhs),\n-\t\t\t\t\t     (TREE_CODE (rhs) == BIT_IOR_EXPR\n-\t\t\t\t\t      ? integer_one_node\n-\t\t\t\t\t      : integer_zero_node)));\n+\t\t     value ? label : 0,\n+\t\t     value ? 0 : label);\n+\t    expand_assignment (lhs, build_int_cst (TREE_TYPE (rhs), value));\n \t    do_pending_stack_adjust ();\n \t    emit_label (label);\n \t    return const0_rtx;\n@@ -8827,7 +8830,7 @@ string_constant (tree arg, tree *ptr_offset)\n \n   if (TREE_CODE (array) == STRING_CST)\n     {\n-      *ptr_offset = convert (sizetype, offset);\n+      *ptr_offset = fold_convert (sizetype, offset);\n       return array;\n     }\n   else if (TREE_CODE (array) == VAR_DECL)\n@@ -8854,7 +8857,7 @@ string_constant (tree arg, tree *ptr_offset)\n \n       /* If variable is bigger than the string literal, OFFSET must be constant\n \t and inside of the bounds of the string literal.  */\n-      offset = convert (sizetype, offset);\n+      offset = fold_convert (sizetype, offset);\n       if (compare_tree_int (DECL_SIZE_UNIT (array), length) > 0\n \t  && (! host_integerp (offset, 1)\n \t      || compare_tree_int (offset, length) >= 0))\n@@ -9166,9 +9169,8 @@ try_casesi (tree index_type, tree index_expr, tree minval, tree range,\n     {\n       if (TYPE_MODE (index_type) != index_mode)\n \t{\n-\t  index_expr = convert (lang_hooks.types.type_for_size\n-\t\t\t\t(index_bits, 0), index_expr);\n-\t  index_type = TREE_TYPE (index_expr);\n+\t  index_type = lang_hooks.types.type_for_size (index_bits, 0);\n+\t  index_expr = fold_convert (index_type, index_expr);\n \t}\n \n       index = expand_normal (index_expr);\n@@ -9294,8 +9296,8 @@ try_tablejump (tree index_type, tree index_expr, tree minval, tree range,\n     return 0;\n \n   index_expr = fold_build2 (MINUS_EXPR, index_type,\n-\t\t\t    convert (index_type, index_expr),\n-\t\t\t    convert (index_type, minval));\n+\t\t\t    fold_convert (index_type, index_expr),\n+\t\t\t    fold_convert (index_type, minval));\n   index = expand_normal (index_expr);\n   do_pending_stack_adjust ();\n "}, {"sha": "b67c2fa371a8a04499d454f96d7172d30356f75a", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3967bc2db066d725dc3142af6646d30856e19619/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=3967bc2db066d725dc3142af6646d30856e19619", "patch": "@@ -5021,8 +5021,8 @@ build_range_type (tree type, tree lowval, tree highval)\n   if (type == NULL_TREE)\n     type = sizetype;\n \n-  TYPE_MIN_VALUE (itype) = convert (type, lowval);\n-  TYPE_MAX_VALUE (itype) = highval ? convert (type, highval) : NULL;\n+  TYPE_MIN_VALUE (itype) = fold_convert (type, lowval);\n+  TYPE_MAX_VALUE (itype) = highval ? fold_convert (type, highval) : NULL;\n \n   TYPE_PRECISION (itype) = TYPE_PRECISION (type);\n   TYPE_MODE (itype) = TYPE_MODE (type);"}]}