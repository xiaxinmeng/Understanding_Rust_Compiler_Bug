{"sha": "5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "node_id": "C_kwDOANBUbNoAKDVjMmU2YzkzZDkxOWI5MzliYTdlY2EyMTAwZmEzNWNjNDQ0ZjRiOGQ", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2022-11-01T21:05:52Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-12-14T13:29:44Z"}, "message": "c++: Quash -Wdangling-reference for member operator* [PR107488]\n\n-Wdangling-reference complains here:\n\n  std::vector<int> v = ...;\n  std::vector<int>::const_iterator it = v.begin();\n  while (it != v.end()) {\n    const int &r = *it++; // warning\n  }\n\nbecause it sees a call to\n__gnu_cxx::__normal_iterator<const int*, std::vector<int> >::operator*\nwhich returns a reference and its argument is a TARGET_EXPR representing\nthe result of\n__gnu_cxx::__normal_iterator<const int*, std::vector<int> >::operator++\nBut 'r' above refers to one of the int elements of the vector 'v', not\nto a temporary object.  Therefore the warning is a false positive.\n\nI suppose code like the above is relatively common (the warning broke\ncppunit-1.15.1 and a few other projects), so presumably it makes sense\nto suppress the warning when it comes to member operator*.  In this case\nit's defined as\n\n      reference\n      operator*() const _GLIBCXX_NOEXCEPT\n      { return *_M_current; }\n\nand I'm guessing a lot of member operator* are like that, at least when\nit comes to iterators.  I've looked at _Fwd_list_iterator,\n_Fwd_list_const_iterator, __shared_ptr_access, _Deque_iterator,\nistream_iterator, etc, and they're all like that, so adding #pragmas\nwould be quite tedious.  :/\n\n\tPR c++/107488\n\ngcc/cp/ChangeLog:\n\n\t* call.cc (do_warn_dangling_reference): Quash -Wdangling-reference\n\tfor member operator*.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/warn/Wdangling-reference5.C: New test.\n\n(cherry picked from commit 32a06ce38a38bf37db468f0e6c83520fcc221534)", "tree": {"sha": "beec559689144dfe4f023924ae1dd3a37b19a580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/beec559689144dfe4f023924ae1dd3a37b19a580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6dbb6fc5d1d14bf36a879b6f4a00ae91090a63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d6dbb6fc5d1d14bf36a879b6f4a00ae91090a63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d6dbb6fc5d1d14bf36a879b6f4a00ae91090a63"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "2c0fa37f53a969742e839b0ff1111df9722a48e7", "filename": "gcc/cp/call.cc", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d/gcc%2Fcp%2Fcall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d/gcc%2Fcp%2Fcall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.cc?ref=5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "patch": "@@ -13467,7 +13467,17 @@ do_warn_dangling_reference (tree expr)\n \t       can be e.g.\n \t\t const int& z = std::min({1, 2, 3, 4, 5, 6, 7});\n \t       which doesn't dangle: std::min here returns an int.  */\n-\t    || !TYPE_REF_OBJ_P (TREE_TYPE (TREE_TYPE (fndecl))))\n+\t    || !TYPE_REF_OBJ_P (TREE_TYPE (TREE_TYPE (fndecl)))\n+\t    /* Don't emit a false positive for:\n+\t\tstd::vector<int> v = ...;\n+\t\tstd::vector<int>::const_iterator it = v.begin();\n+\t\tconst int &r = *it++;\n+\t       because R refers to one of the int elements of V, not to\n+\t       a temporary object.  Member operator* may return a reference\n+\t       but probably not to one of its arguments.  */\n+\t    || (DECL_NONSTATIC_MEMBER_FUNCTION_P (fndecl)\n+\t\t&& DECL_OVERLOADED_OPERATOR_P (fndecl)\n+\t\t&& DECL_OVERLOADED_OPERATOR_IS (fndecl, INDIRECT_REF)))\n \t  return NULL_TREE;\n \n \t/* Here we're looking to see if any of the arguments is a temporary"}, {"sha": "59b5538aee59bf7c3cff1d0d740c0e7c0b6c89a5", "filename": "gcc/testsuite/g++.dg/warn/Wdangling-reference5.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c2e6c93d919b939ba7eca2100fa35cc444f4b8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWdangling-reference5.C?ref=5c2e6c93d919b939ba7eca2100fa35cc444f4b8d", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/107488\n+// { dg-do compile }\n+// { dg-options \"-Wdangling-reference\" }\n+\n+#include <vector>\n+\n+int\n+do_sum (std::vector<int>& v)\n+{\n+  int sum = 0;\n+\n+  std::vector<int>::const_iterator it = v.begin();\n+  while (it != v.end())\n+    {\n+      // R refers to one of the int elements of V, not to a temporary\n+      // object, so no dangling reference here.\n+      const int &r = *it++; // { dg-bogus \"dangling reference\" }\n+      sum += r;\n+    }\n+\n+  return sum;\n+}"}]}