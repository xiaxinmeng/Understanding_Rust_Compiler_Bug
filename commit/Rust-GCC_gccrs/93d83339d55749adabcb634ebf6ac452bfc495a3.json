{"sha": "93d83339d55749adabcb634ebf6ac452bfc495a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTNkODMzMzlkNTU3NDlhZGFiY2I2MzRlYmY2YWM0NTJiZmM0OTVhMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-10T04:12:07Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-09-10T04:12:07Z"}, "message": "Fix using package name as composite literal struct key.\n\nFrom-SVN: r178747", "tree": {"sha": "7d631d706ffb141704c4da9932b37b9eace43df8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d631d706ffb141704c4da9932b37b9eace43df8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/93d83339d55749adabcb634ebf6ac452bfc495a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d83339d55749adabcb634ebf6ac452bfc495a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d83339d55749adabcb634ebf6ac452bfc495a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d83339d55749adabcb634ebf6ac452bfc495a3/comments", "author": null, "committer": null, "parents": [{"sha": "049d28935129d6c2daa4993899f25a27e7b239af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/049d28935129d6c2daa4993899f25a27e7b239af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/049d28935129d6c2daa4993899f25a27e7b239af"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "5529e6c3e6feb644bed3961d3cca06b7b39289b6", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d83339d55749adabcb634ebf6ac452bfc495a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d83339d55749adabcb634ebf6ac452bfc495a3/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=93d83339d55749adabcb634ebf6ac452bfc495a3", "patch": "@@ -1436,7 +1436,6 @@ Unknown_expression::do_dump_expression(Ast_dump_context* ast_dump_context) const\n Expression*\n Expression::make_unknown_reference(Named_object* no, source_location location)\n {\n-  go_assert(no->resolve()->is_unknown());\n   return new Unknown_expression(no, location);\n }\n "}, {"sha": "059d9646f13c7ffb640d3960baa4f1aab25f5365", "filename": "gcc/go/gofrontend/parse.cc", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/93d83339d55749adabcb634ebf6ac452bfc495a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/93d83339d55749adabcb634ebf6ac452bfc495a3/gcc%2Fgo%2Fgofrontend%2Fparse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fparse.cc?ref=93d83339d55749adabcb634ebf6ac452bfc495a3", "patch": "@@ -2445,7 +2445,9 @@ Parse::enclosing_var_reference(Named_object* in_function, Named_object* var,\n // LiteralValue  = \"{\" [ ElementList [ \",\" ] ] \"}\" .\n // ElementList   = Element { \",\" Element } .\n // Element       = [ Key \":\" ] Value .\n-// Key           = Expression .\n+// Key           = FieldName | ElementIndex .\n+// FieldName     = identifier .\n+// ElementIndex  = Expression .\n // Value         = Expression | LiteralValue .\n \n // We have already seen the type if there is one, and we are now\n@@ -2478,7 +2480,33 @@ Parse::composite_lit(Type* type, int depth, source_location location)\n \n       const Token* token = this->peek_token();\n \n-      if (!token->is_op(OPERATOR_LCURLY))\n+      if (token->is_identifier())\n+\t{\n+\t  std::string identifier = token->identifier();\n+\t  bool is_exported = token->is_identifier_exported();\n+\t  source_location location = token->location();\n+\n+\t  if (this->advance_token()->is_op(OPERATOR_COLON))\n+\t    {\n+\t      // This may be a field name.  We don't know for sure--it\n+\t      // could also be an expression for an array index.  We\n+\t      // don't want to parse it as an expression because may\n+\t      // trigger various errors, e.g., if this identifier\n+\t      // happens to be the name of a package.\n+\t      Gogo* gogo = this->gogo_;\n+\t      val = this->id_to_expression(gogo->pack_hidden_name(identifier,\n+\t\t\t\t\t\t\t\t  is_exported),\n+\t\t\t\t\t   location);\n+\t    }\n+\t  else\n+\t    {\n+\t      this->unget_token(Token::make_identifier_token(identifier,\n+\t\t\t\t\t\t\t     is_exported,\n+\t\t\t\t\t\t\t     location));\n+\t      val = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n+\t    }\n+\t}\n+      else if (!token->is_op(OPERATOR_LCURLY))\n \tval = this->expression(PRECEDENCE_NORMAL, false, true, NULL);\n       else\n \t{\n@@ -2922,6 +2950,12 @@ Parse::id_to_expression(const std::string& name, source_location location)\n       return Expression::make_func_reference(named_object, NULL, location);\n     case Named_object::NAMED_OBJECT_UNKNOWN:\n       return Expression::make_unknown_reference(named_object, location);\n+    case Named_object::NAMED_OBJECT_PACKAGE:\n+    case Named_object::NAMED_OBJECT_TYPE:\n+    case Named_object::NAMED_OBJECT_TYPE_DECLARATION:\n+      // These cases can arise for a field name in a composite\n+      // literal.\n+      return Expression::make_unknown_reference(named_object, location);\n     default:\n       error_at(this->location(), \"unexpected type of identifier\");\n       return Expression::make_error(location);"}]}