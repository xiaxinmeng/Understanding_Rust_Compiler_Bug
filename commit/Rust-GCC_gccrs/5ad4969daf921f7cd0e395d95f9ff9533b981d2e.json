{"sha": "5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFkNDk2OWRhZjkyMWY3Y2QwZTM5NWQ5NWY5ZmY5NTMzYjk4MWQyZQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2011-08-02T14:30:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-02T14:30:35Z"}, "message": "gnat_rm.texi, [...]: Minor reformatting.\n\n2011-08-02  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi, a-tags.ads, sem_prag.adb, sem_ch12.adb, exp_disp.adb:\n\tMinor reformatting.\n\nFrom-SVN: r177160", "tree": {"sha": "cfdb7a95bcd8f330052c8c0cbc2132374fb637dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfdb7a95bcd8f330052c8c0cbc2132374fb637dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/comments", "author": null, "committer": null, "parents": [{"sha": "8c4ee6f5320012a33382597cba44e225046d7c4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c4ee6f5320012a33382597cba44e225046d7c4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c4ee6f5320012a33382597cba44e225046d7c4f"}], "stats": {"total": 62, "additions": 38, "deletions": 24}, "files": [{"sha": "41cc29be75b6376a98ab8b2929bf1def931906f9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -1,3 +1,8 @@\n+2011-08-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi, a-tags.ads, sem_prag.adb, sem_ch12.adb, exp_disp.adb:\n+\tMinor reformatting.\n+\n 2011-08-02  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_prag.adb (Chain_PPC): Implement AI04-0230: null procedures can"}, {"sha": "3d415a05c32930e14ab7278540725efe7f14011b", "filename": "gcc/ada/a-tags.ads", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fa-tags.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fa-tags.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tags.ads?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -304,10 +304,10 @@ private\n       --  abstract interface type conversions (Ada 2005:AI-251)\n \n       SSD : Select_Specific_Data_Ptr;\n-      --  Pointer to a table of records used in dispatching selects. This\n-      --  field has a meaningful value for all tagged types that implement\n-      --  a limited, protected, synchronized or task interfaces and have\n-      --  non-predefined primitive operations.\n+      --  Pointer to a table of records used in dispatching selects. This field\n+      --  has a meaningful value for all tagged types that implement a limited,\n+      --  protected, synchronized or task interfaces and have non-predefined\n+      --  primitive operations.\n \n       Tags_Table : Tag_Table (0 .. Idepth);\n       --  Table of ancestor tags. Its size actually depends on the inheritance\n@@ -414,12 +414,12 @@ private\n    type Object_Specific_Data_Ptr is access all Object_Specific_Data;\n    pragma No_Strict_Aliasing (Object_Specific_Data_Ptr);\n \n-   --  The following subprogram specifications are placed here instead of\n-   --  the package body to see them from the frontend through rtsfind.\n+   --  The following subprogram specifications are placed here instead of the\n+   --  package body to see them from the frontend through rtsfind.\n \n    function Base_Address (This : System.Address) return System.Address;\n-   --  Ada 2005 (AI-251): Displace \"This\" to point to the base address of\n-   --  the object (that is, the address of the primary tag of the object).\n+   --  Ada 2005 (AI-251): Displace \"This\" to point to the base address of the\n+   --  object (that is, the address of the primary tag of the object).\n \n    procedure Check_TSD (TSD : Type_Specific_Data_Ptr);\n    --  Ada 2012 (AI-113): Raise Program_Error if the external tag of this TSD\n@@ -444,8 +444,8 @@ private\n    function Get_Offset_Index\n      (T        : Tag;\n       Position : Positive) return Positive;\n-   --  Ada 2005 (AI-251): Given a pointer to a secondary dispatch table (T) and\n-   --  a position of an operation in the DT, retrieve the corresponding\n+   --  Ada 2005 (AI-251): Given a pointer to a secondary dispatch table (T)\n+   --  and a position of an operation in the DT, retrieve the corresponding\n    --  operation's position in the primary dispatch table from the Offset\n    --  Specific Data table of T.\n \n@@ -460,9 +460,9 @@ private\n    --  has controlled components, returns zero if no controlled components.\n \n    pragma Export (Ada, Get_RC_Offset, \"ada__tags__get_rc_offset\");\n-   --  This procedure is used in s-finimp to compute the deep routines\n-   --  it is exported manually in order to avoid changing completely the\n-   --  organization of the run time.\n+   --  This procedure is used in s-finimp to compute the deep routines. It is\n+   --  exported manually in order to avoid completely changing the organization\n+   --  of the run time.\n \n    function Get_Tagged_Kind (T : Tag) return Tagged_Kind;\n    --  Ada 2005 (AI-345): Given a pointer to either a primary or a secondary\n@@ -485,7 +485,7 @@ private\n \n    function Offset_To_Top\n      (This : System.Address) return SSE.Storage_Offset;\n-   --  Ada 2005 (AI-251): Returns the current value of the offset_to_top\n+   --  Ada 2005 (AI-251): Returns the current value of the Offset_To_Top\n    --  component available in the prologue of the dispatch table. If the parent\n    --  of the tagged type has discriminants this value is stored in a record\n    --  component just immediately after the tag component.\n@@ -516,8 +516,8 @@ private\n    --  access to function that must be called to evaluate the offset.\n \n    procedure Register_Tag (T : Tag);\n-   --  Insert the Tag and its associated external_tag in a table for the\n-   --  sake of Internal_Tag\n+   --  Insert the Tag and its associated external_tag in a table for the sake\n+   --  of Internal_Tag.\n \n    procedure Set_Dynamic_Offset_To_Top\n      (This         : System.Address;"}, {"sha": "7ebd439f0e3f5c6c276a63ec2047b218ce66b2c1", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -5995,6 +5995,8 @@ package body Exp_Disp is\n \n       --     Check_TSD (TSD'Unrestricted_Access);\n \n+      --  Seems wrong to restrict this BI to Ada 2012 ???\n+\n       if not No_Run_Time_Mode\n         and then Ada_Version >= Ada_2012\n         and then RTE_Available (RE_Check_TSD)"}, {"sha": "5d5d855dcbe8f3e4bbf69819339df418760cc4c2", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -4562,7 +4562,8 @@ Note that Source_File_Name pragmas should not be used if you are using\n project files. The reason for this rule is that the project manager is not\n aware of these pragmas, and so other tools that use the projet file would not\n be aware of the intended naming conventions. If you are using project files,\n-file naming is controlled by Source_File_Name_Project pragmas. A pragma\n+file naming is controlled by Source_File_Name_Project pragmas, which are\n+usually supplied automatically by the project manager. A pragma\n Source_File_Name cannot appear after a @ref{Pragma Source_File_Name_Project}.\n \n For more details on the use of the @code{Source_File_Name} pragma,"}, {"sha": "22c8bc3f580867b85294aa384e8313ba66e3fd9f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -2905,6 +2905,7 @@ package body Sem_Ch12 is\n       --  To capture global references, analyze the expressions of aspects,\n       --  and propagate information to original tree. Note that in this case\n       --  analysis of attributes is not delayed until the freeze point.\n+\n       --  It seems very hard to recreate the proper visibility of the generic\n       --  subprogram at a later point because the analysis of an aspect may\n       --  create pragmas after the generic copies have been made ???\n@@ -4303,9 +4304,9 @@ package body Sem_Ch12 is\n              Specification => Act_Spec);\n \n          --  The aspects have been copied previously, but they have to be\n-         --  linked explicitly to the new subprogram declaration.\n-         --  Explicit pre/postconditions on the instance are analyzed below,\n-         --  in a separate step.\n+         --  linked explicitly to the new subprogram declaration. Explicit\n+         --  pre/postconditions on the instance are analyzed below, in a\n+         --  separate step.\n \n          Move_Aspects (Act_Tree, Act_Decl);\n          Set_Categorization_From_Pragmas (Act_Decl);"}, {"sha": "5bcb4a907ac8ec24ba56dff4f83920b6d3e8d0d7", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ad4969daf921f7cd0e395d95f9ff9533b981d2e/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5ad4969daf921f7cd0e395d95f9ff9533b981d2e", "patch": "@@ -1595,9 +1595,12 @@ package body Sem_Prag is\n                     (\"aspect % requires ''Class for abstract subprogram\");\n                end if;\n \n-            --  AI05-0230:  the same restriction applies to null procedures.\n-            --  For compatibility with earlier uses of the Ada pragma, apply\n-            --  this rule only to aspect specifications.\n+            --  AI05-0230: The same restriction applies to null procedures. For\n+            --  compatibility with earlier uses of the Ada pragma, apply this\n+            --  rule only to aspect specifications.\n+\n+            --  The above discrpency needs documentation. Robert is dubious\n+            --  about whether it is a good idea ???\n \n             elsif Nkind (PO) = N_Subprogram_Declaration\n               and then Nkind (Specification (PO)) = N_Procedure_Specification\n@@ -1752,14 +1755,16 @@ package body Sem_Prag is\n \n             elsif not Comes_From_Source (PO) then\n \n-               --  The condition may apply to a subprogram instantiation.\n+               --  The condition may apply to a subprogram instantiation\n \n                if Nkind (PO) = N_Subprogram_Declaration\n                  and then Present (Generic_Parent (Specification (PO)))\n                then\n                   Chain_PPC (PO);\n                   return;\n \n+               --  For all other cases of non source code, do nothing\n+\n                else\n                   null;\n                end if;"}]}