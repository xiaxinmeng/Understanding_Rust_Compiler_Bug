{"sha": "d002220017cb43fdf23884e019bcecf047f75587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDAwMjIyMDAxN2NiNDNmZGYyMzg4NGUwMTliY2VjZjA0N2Y3NTU4Nw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-01-24T06:47:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-01-24T06:47:03Z"}, "message": "h8300-protos.h: Provide prototypes for h8300_legitimate_constant_p and h8300_legitimate_address_p.\n\n\t* config/h8300/h8300-protos.h: Provide prototypes for\n\th8300_legitimate_constant_p and h8300_legitimate_address_p.\n\t* config/h8300/h8300.c (h8300_legitimate_constant_p): New.\n\t(h8300_rtx_ok_for_base_p): Likewise.\n\t(h8300_legitimate_address_p): Likewise.\n\t* config/h8300/h8300.h (LEGITIMATE_CONSTANT_P): Use\n\th8300_legitimate_constant_p.\n\t(RTX_OK_FOR_BASE_P): Remove.\n\t(GO_IF_LEGITIMATE_ADDRESS): Use h8300_legitimate_address_p.\n\nFrom-SVN: r76484", "tree": {"sha": "183e2ee8984715373e198c64ff2129d93e7c72dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/183e2ee8984715373e198c64ff2129d93e7c72dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d002220017cb43fdf23884e019bcecf047f75587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002220017cb43fdf23884e019bcecf047f75587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d002220017cb43fdf23884e019bcecf047f75587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d002220017cb43fdf23884e019bcecf047f75587/comments", "author": null, "committer": null, "parents": [{"sha": "ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca04c5a93cabee4b3e79cd5d6e791828bd1b7d0c"}], "stats": {"total": 104, "additions": 78, "deletions": 26}, "files": [{"sha": "13b5c10c5b175a7f7fd15feccb1b9eaab997b28c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002220017cb43fdf23884e019bcecf047f75587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002220017cb43fdf23884e019bcecf047f75587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d002220017cb43fdf23884e019bcecf047f75587", "patch": "@@ -1,3 +1,15 @@\n+2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300-protos.h: Provide prototypes for\n+\th8300_legitimate_constant_p and h8300_legitimate_address_p.\n+\t* config/h8300/h8300.c (h8300_legitimate_constant_p): New.\n+\t(h8300_rtx_ok_for_base_p): Likewise.\n+\t(h8300_legitimate_address_p): Likewise.\n+\t* config/h8300/h8300.h (LEGITIMATE_CONSTANT_P): Use\n+\th8300_legitimate_constant_p.\n+\t(RTX_OK_FOR_BASE_P): Remove.\n+\t(GO_IF_LEGITIMATE_ADDRESS): Use h8300_legitimate_address_p.\n+\n 2004-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* config/h8300/h8300.h (REG_OK_FOR_INDEX_NONSTRICT_P): New."}, {"sha": "df78dacb0491b8e3bf64c479e95ee3717bded797", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=d002220017cb43fdf23884e019bcecf047f75587", "patch": "@@ -81,6 +81,9 @@ extern int byte_accesses_mergeable_p (rtx, rtx);\n extern int same_cmp_preceding_p (rtx);\n extern int same_cmp_following_p (rtx);\n \n+extern int h8300_legitimate_constant_p (rtx);\n+extern int h8300_legitimate_address_p (rtx, int);\n+\n /* Used in builtins.c */\n extern rtx h8300_return_addr_rtx (int, rtx);\n #endif /* RTX_CODE */"}, {"sha": "3c503a9393df176543dde2e388e135312afb3c46", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=d002220017cb43fdf23884e019bcecf047f75587", "patch": "@@ -4552,6 +4552,51 @@ h8300_hard_regno_rename_ok (unsigned int old_reg ATTRIBUTE_UNUSED,\n \n   return 1;\n }\n+\n+/* Return nonzero if X is a legitimate constant.  */\n+\n+int\n+h8300_legitimate_constant_p (rtx x ATTRIBUTE_UNUSED)\n+{\n+  return 1;\n+}\n+\n+/* Return nonzero if X is a REG or SUBREG suitable as a base register.  */\n+\n+static int\n+h8300_rtx_ok_for_base_p (rtx x, int strict)\n+{\n+  /* Strip off SUBREG if any.  */\n+  if (GET_CODE (x) == SUBREG)\n+    x = SUBREG_REG (x);\n+\n+  return (REG_P (x)\n+\t  && (strict\n+\t      ? REG_OK_FOR_BASE_STRICT_P (x)\n+\t      : REG_OK_FOR_BASE_NONSTRICT_P (x)));\n+}\n+\n+/* Return nozero if X is a legitimate address.  On the H8/300, a\n+   legitimate address has the form REG, REG+CONSTANT_ADDRESS or\n+   CONSTANT_ADDRESS.  */\n+\n+int\n+h8300_legitimate_address_p (rtx x, int strict)\n+{\n+  /* The register indirect addresses like @er0 is always valid.  */\n+  if (h8300_rtx_ok_for_base_p (x, strict))\n+    return 1;\n+\n+  if (CONSTANT_ADDRESS_P (x))\n+    return 1;\n+\n+  if (GET_CODE (x) == PLUS\n+      && CONSTANT_ADDRESS_P (XEXP (x, 1))\n+      && h8300_rtx_ok_for_base_p (XEXP (x, 0), strict))\n+    return 1;\n+\n+  return 0;\n+}\n \f\n /* Perform target dependent optabs initialization.  */\n static void"}, {"sha": "3967d676525b01067599c6cfe7a959bc404f6320", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d002220017cb43fdf23884e019bcecf047f75587/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=d002220017cb43fdf23884e019bcecf047f75587", "patch": "@@ -796,7 +796,7 @@ struct cum_arg\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.  */\n \n-#define LEGITIMATE_CONSTANT_P(X) (1)\n+#define LEGITIMATE_CONSTANT_P(X) (h8300_legitimate_constant_p (X))\n \n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n@@ -879,31 +879,23 @@ struct cum_arg\n    (C) == 'U' ? OK_FOR_U (OP) :\t\t\t\\\n    0)\n \f\n-/* GO_IF_LEGITIMATE_ADDRESS recognizes an RTL expression\n-   that is a valid memory address for an instruction.\n-   The MODE argument is the machine mode for the MEM expression\n-   that wants to use this address.\n-\n-   The other macros defined here are used only in GO_IF_LEGITIMATE_ADDRESS,\n-   except for CONSTANT_ADDRESS_P which is actually\n-   machine-independent.\n-\n-   On the H8/300, a legitimate address has the form\n-   REG, REG+CONSTANT_ADDRESS or CONSTANT_ADDRESS.  */\n-\n-/* Accept either REG or SUBREG where a register is valid.  */\n-\n-#define RTX_OK_FOR_BASE_P(X)\t\t\t\t\\\n-  ((REG_P (X) && REG_OK_FOR_BASE_P (X))\t\t\t\\\n-   || (GET_CODE (X) == SUBREG && REG_P (SUBREG_REG (X))\t\\\n-       && REG_OK_FOR_BASE_P (SUBREG_REG (X))))\n-\n-#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\t\\\n-  if (RTX_OK_FOR_BASE_P (X)) goto ADDR;\t\t\t\\\n-  if (CONSTANT_ADDRESS_P (X)) goto ADDR;\t\t\\\n-  if (GET_CODE (X) == PLUS\t\t\t\t\\\n-      && CONSTANT_ADDRESS_P (XEXP (X, 1))\t\t\\\n-      && RTX_OK_FOR_BASE_P (XEXP (X, 0))) goto ADDR;\n+#ifndef REG_OK_STRICT\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (h8300_legitimate_address_p ((X), 0))\t\\\n+\tgoto ADDR;\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+#else\n+#define GO_IF_LEGITIMATE_ADDRESS(MODE, X, ADDR)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (h8300_legitimate_address_p ((X), 1))\t\\\n+\tgoto ADDR;\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+#endif\n \f\n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address."}]}