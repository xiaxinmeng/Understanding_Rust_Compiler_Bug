{"sha": "389b67feac78c8f21c6946bf8e36a16060f45728", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzg5YjY3ZmVhYzc4YzhmMjFjNjk0NmJmOGUzNmExNjA2MGY0NTcyOA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-25T08:56:37Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-01-25T08:56:37Z"}, "message": "Arm: Add NEON and MVE complex mul, mla and mls patterns.\n\nThis adds implementation for the optabs for complex operations.  With this the\nfollowing C code:\n\n  void g (float complex a[restrict N], float complex b[restrict N],\n\t  float complex c[restrict N])\n  {\n    for (int i=0; i < N; i++)\n      c[i] =  a[i] * b[i];\n  }\n\ngenerates\n\nNEON:\n\ng:\n        vmov.f32        q11, #0.0  @ v4sf\n        add     r3, r2, #1600\n.L2:\n        vmov    q8, q11  @ v4sf\n        vld1.32 {q10}, [r1]!\n        vld1.32 {q9}, [r0]!\n        vcmla.f32       q8, q9, q10, #0\n        vcmla.f32       q8, q9, q10, #90\n        vst1.32 {q8}, [r2]!\n        cmp     r3, r2\n        bne     .L2\n        bx      lr\n\nMVE:\n\ng:\n        push    {lr}\n        mov     lr, #100\n        dls     lr, lr\n.L2:\n        vldrw.32        q1, [r1], #16\n        vldrw.32        q2, [r0], #16\n        vcmul.f32       q3, q2, q1, #0\n        vcmla.f32       q3, q2, q1, #90\n        vstrw.32        q3, [r2], #16\n        le      lr, .L2\n        ldr     pc, [sp], #4\n\ninstead of\n\ng:\n        add     r3, r2, #1600\n.L2:\n        vld2.32 {d20-d23}, [r0]!\n        vld2.32 {d16-d19}, [r1]!\n        vmul.f32        q14, q11, q9\n        vmul.f32        q15, q11, q8\n        vneg.f32        q14, q14\n        vfma.f32        q15, q10, q9\n        vfma.f32        q14, q10, q8\n        vmov    q13, q15  @ v4sf\n        vmov    q12, q14  @ v4sf\n        vst2.32 {d24-d27}, [r2]!\n        cmp     r3, r2\n        bne     .L2\n        bx      lr\n\nand\n\ng:\n        add     r3, r2, #1600\n.L2:\n        vld2.32 {d20-d23}, [r0]!\n        vld2.32 {d16-d19}, [r1]!\n        vmul.f32        q15, q10, q8\n        vmul.f32        q14, q10, q9\n        vmls.f32        q15, q11, q9\n        vmla.f32        q14, q11, q8\n        vmov    q12, q15  @ v4sf\n        vmov    q13, q14  @ v4sf\n        vst2.32 {d24-d27}, [r2]!\n        cmp     r3, r2\n        bne     .L2\n        bx      lr\n\nrespectively.\n\ngcc/ChangeLog:\n\n\t* config/arm/iterators.md (rotsplit1, rotsplit2, conj_op, fcmac1,\n\tVCMLA_OP, VCMUL_OP): New.\n\t* config/arm/mve.md (mve_vcmlaq<mve_rot><mode>): Support vec_dup 0.\n\t* config/arm/neon.md (cmul<conj_op><mode>3): New.\n\t* config/arm/unspecs.md (UNSPEC_VCMLA_CONJ, UNSPEC_VCMLA180_CONJ,\n\tUNSPEC_VCMUL_CONJ): New.\n\t* config/arm/vec-common.md (cmul<conj_op><mode>3, arm_vcmla<rot><mode>,\n\tcml<fcmac1><conj_op><mode>4): New.", "tree": {"sha": "bba2653b13762a99d6fc2124611642db96c14f0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bba2653b13762a99d6fc2124611642db96c14f0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/389b67feac78c8f21c6946bf8e36a16060f45728", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389b67feac78c8f21c6946bf8e36a16060f45728", "html_url": "https://github.com/Rust-GCC/gccrs/commit/389b67feac78c8f21c6946bf8e36a16060f45728", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/389b67feac78c8f21c6946bf8e36a16060f45728/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02551aa99960ff6b0d9a44d234b8f6c9b230788c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02551aa99960ff6b0d9a44d234b8f6c9b230788c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02551aa99960ff6b0d9a44d234b8f6c9b230788c"}], "stats": {"total": 132, "additions": 126, "deletions": 6}, "files": [{"sha": "b9027905307fe19d60d164cef23dac6ab119cd9b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=389b67feac78c8f21c6946bf8e36a16060f45728", "patch": "@@ -1186,6 +1186,33 @@\n \t\t      (UNSPEC_VCMLA180 \"180\")\n \t\t      (UNSPEC_VCMLA270 \"270\")])\n \n+;; The complex operations when performed on a real complex number require two\n+;; instructions to perform the operation. e.g. complex multiplication requires\n+;; two VCMUL with a particular rotation value.\n+;;\n+;; These values can be looked up in rotsplit1 and rotsplit2.  as an example\n+;; VCMUL needs the first instruction to use #0 and the second #90.\n+(define_int_attr rotsplit1 [(UNSPEC_VCMLA \"0\")\n+\t\t\t    (UNSPEC_VCMLA_CONJ \"0\")\n+\t\t\t    (UNSPEC_VCMUL \"0\")\n+\t\t\t    (UNSPEC_VCMUL_CONJ \"0\")\n+\t\t\t    (UNSPEC_VCMLA180 \"180\")\n+\t\t\t    (UNSPEC_VCMLA180_CONJ \"180\")])\n+\n+(define_int_attr rotsplit2 [(UNSPEC_VCMLA \"90\")\n+\t\t\t    (UNSPEC_VCMLA_CONJ \"270\")\n+\t\t\t    (UNSPEC_VCMUL \"90\")\n+\t\t\t    (UNSPEC_VCMUL_CONJ \"270\")\n+\t\t\t    (UNSPEC_VCMLA180 \"270\")\n+\t\t\t    (UNSPEC_VCMLA180_CONJ \"90\")])\n+\n+(define_int_attr conj_op [(UNSPEC_VCMLA180 \"\")\n+\t\t\t  (UNSPEC_VCMLA180_CONJ \"_conj\")\n+\t\t\t  (UNSPEC_VCMLA \"\")\n+\t\t\t  (UNSPEC_VCMLA_CONJ \"_conj\")\n+\t\t\t  (UNSPEC_VCMUL \"\")\n+\t\t\t  (UNSPEC_VCMUL_CONJ \"_conj\")])\n+\n (define_int_attr mve_rot [(UNSPEC_VCADD90 \"_rot90\")\n \t\t\t  (UNSPEC_VCADD270 \"_rot270\")\n \t\t\t  (UNSPEC_VCMLA \"\")\n@@ -1200,6 +1227,9 @@\n (define_int_iterator VCMUL [UNSPEC_VCMUL UNSPEC_VCMUL90\n \t\t\t    UNSPEC_VCMUL180 UNSPEC_VCMUL270])\n \n+(define_int_attr fcmac1 [(UNSPEC_VCMLA \"a\") (UNSPEC_VCMLA_CONJ \"a\")\n+\t\t\t (UNSPEC_VCMLA180 \"s\") (UNSPEC_VCMLA180_CONJ \"s\")])\n+\n (define_int_attr simd32_op [(UNSPEC_QADD8 \"qadd8\") (UNSPEC_QSUB8 \"qsub8\")\n \t\t\t    (UNSPEC_SHADD8 \"shadd8\") (UNSPEC_SHSUB8 \"shsub8\")\n \t\t\t    (UNSPEC_UHADD8 \"uhadd8\") (UNSPEC_UHSUB8 \"uhsub8\")\n@@ -1723,3 +1753,13 @@\n (define_int_iterator UQRSHLLQ [UQRSHLL_64 UQRSHLL_48])\n (define_int_iterator SQRSHRLQ [SQRSHRL_64 SQRSHRL_48])\n (define_int_iterator VSHLCQ_M [VSHLCQ_M_S VSHLCQ_M_U])\n+\n+;; Define iterators for VCMLA operations\n+(define_int_iterator VCMLA_OP [UNSPEC_VCMLA\n+\t\t\t       UNSPEC_VCMLA_CONJ\n+\t\t\t       UNSPEC_VCMLA180\n+\t\t\t       UNSPEC_VCMLA180_CONJ])\n+\n+;; Define iterators for VCMLA operations as MUL\n+(define_int_iterator VCMUL_OP [UNSPEC_VCMUL\n+\t\t\t       UNSPEC_VCMUL_CONJ])"}, {"sha": "465f71c4eee5f77e4d5904e8508c4134d1c9573f", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=389b67feac78c8f21c6946bf8e36a16060f45728", "patch": "@@ -4101,15 +4101,16 @@\n (define_insn \"mve_vcmlaq<mve_rot><mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w,w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"0,Dz\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w,w\")\n-\t\t       (match_operand:MVE_0 3 \"s_register_operand\" \"w,w\")]\n-\t VCMLA))\n+\t(plus:MVE_0 (match_operand:MVE_0 1 \"reg_or_zero_operand\" \"Dz,0\")\n+\t\t    (unspec:MVE_0\n+\t\t        [(match_operand:MVE_0 2 \"s_register_operand\" \"w,w\")\n+\t\t         (match_operand:MVE_0 3 \"s_register_operand\" \"w,w\")]\n+\t\t     VCMLA)))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"@\n-   vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\n-   vcmul.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\"\n+   vcmul.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\n+   vcmla.f%#<V_sz_elem>\t%q0, %q2, %q3, #<rot>\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n "}, {"sha": "fec2cc91d24b6eff7b6fc8fdd54f39b3d646c468", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=389b67feac78c8f21c6946bf8e36a16060f45728", "patch": "@@ -2952,6 +2952,25 @@\n   [(set_attr \"type\" \"neon_fcmla\")]\n )\n \n+;; The complex mul operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cmul<conj_op><mode>3\"\n+  [(set (match_operand:VDF 0 \"register_operand\")\n+\t(unspec:VDF [(match_operand:VDF 1 \"register_operand\")\n+\t\t     (match_operand:VDF 2 \"register_operand\")]\n+\t\t    VCMUL_OP))]\n+  \"TARGET_COMPLEX && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx res1 = gen_reg_rtx (<MODE>mode);\n+  rtx tmp = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\n+  emit_insn (gen_neon_vcmla<rotsplit1><mode> (res1, tmp,\n+\t\t\t\t\t      operands[2], operands[1]));\n+  emit_insn (gen_neon_vcmla<rotsplit2><mode> (operands[0], res1,\n+\t\t\t\t\t      operands[2], operands[1]));\n+  DONE;\n+})\n+\n \n ;; These instructions map to the __builtins for the Dot Product operations.\n (define_insn \"neon_<sup>dot<vsi2qi>\""}, {"sha": "c6ebb6fc2b6a8d9e46f126dd857222a892c84093", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=389b67feac78c8f21c6946bf8e36a16060f45728", "patch": "@@ -510,10 +510,13 @@\n   UNSPEC_VCMLA90\n   UNSPEC_VCMLA180\n   UNSPEC_VCMLA270\n+  UNSPEC_VCMLA_CONJ\n+  UNSPEC_VCMLA180_CONJ\n   UNSPEC_VCMUL\n   UNSPEC_VCMUL90\n   UNSPEC_VCMUL180\n   UNSPEC_VCMUL270\n+  UNSPEC_VCMUL_CONJ\n   UNSPEC_MATMUL_S\n   UNSPEC_MATMUL_U\n   UNSPEC_MATMUL_US"}, {"sha": "692b28ea8ccb18abac016a0c1b45ac7d0bf073d4", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/389b67feac78c8f21c6946bf8e36a16060f45728/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=389b67feac78c8f21c6946bf8e36a16060f45728", "patch": "@@ -215,6 +215,63 @@\n \t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n )\n \n+;; The complex mul operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cmul<conj_op><mode>3\"\n+  [(set (match_operand:VQ_HSF 0 \"register_operand\")\n+        (unspec:VQ_HSF [(match_operand:VQ_HSF 1 \"register_operand\")\n+\t\t\t(match_operand:VQ_HSF 2 \"register_operand\")]\n+\t\t       VCMUL_OP))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT))\n+   && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx res1 = gen_reg_rtx (<MODE>mode);\n+  if (TARGET_COMPLEX)\n+    {\n+      rtx tmp = force_reg (<MODE>mode, CONST0_RTX (<MODE>mode));\n+      emit_insn (gen_arm_vcmla<rotsplit1><mode> (res1, tmp,\n+\t\t\t\t\t\t operands[2], operands[1]));\n+    }\n+  else\n+    emit_insn (gen_arm_vcmla<rotsplit1><mode> (res1, CONST0_RTX (<MODE>mode),\n+\t\t\t\t\t       operands[2], operands[1]));\n+\n+  emit_insn (gen_arm_vcmla<rotsplit2><mode> (operands[0], res1,\n+\t\t\t\t\t     operands[2], operands[1]));\n+  DONE;\n+})\n+\n+(define_expand \"arm_vcmla<rot><mode>\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(plus:VF (match_operand:VF 1 \"register_operand\")\n+\t\t (unspec:VF [(match_operand:VF 2 \"register_operand\")\n+\t\t\t     (match_operand:VF 3 \"register_operand\")]\n+\t\t\t     VCMLA)))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+)\n+\n+;; The complex mla/mls operations always need to expand to two instructions.\n+;; The first operation does half the computation and the second does the\n+;; remainder.  Because of this, expand early.\n+(define_expand \"cml<fcmac1><conj_op><mode>4\"\n+  [(set (match_operand:VF 0 \"register_operand\")\n+\t(plus:VF (match_operand:VF 1 \"register_operand\")\n+\t\t (unspec:VF [(match_operand:VF 2 \"register_operand\")\n+\t\t\t     (match_operand:VF 3 \"register_operand\")]\n+\t\t\t    VCMLA_OP)))]\n+  \"(TARGET_COMPLEX || (TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\n+\t\t      && ARM_HAVE_<MODE>_ARITH)) && !BYTES_BIG_ENDIAN\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_arm_vcmla<rotsplit1><mode> (tmp, operands[1],\n+\t\t\t\t\t     operands[3], operands[2]));\n+  emit_insn (gen_arm_vcmla<rotsplit2><mode> (operands[0], tmp,\n+\t\t\t\t\t     operands[3], operands[2]));\n+  DONE;\n+})\n+\n (define_expand \"movmisalign<mode>\"\n  [(set (match_operand:VDQX 0 \"neon_perm_struct_or_reg_operand\")\n \t(unspec:VDQX [(match_operand:VDQX 1 \"neon_perm_struct_or_reg_operand\")]"}]}