{"sha": "4994da65e5f158243b6322fb6d3a47fa12b2962e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5NGRhNjVlNWYxNTgyNDNiNjMyMmZiNmQzYTQ3ZmExMmIyOTYyZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-01-18T15:50:55Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-01-18T15:50:55Z"}, "message": "re PR rtl-optimization/47216 (gcc.dg/torture/pr43360.c FAILs with -O -fPIC -fgcse -fgcse-sm -fnon-call-exceptions -fno-tree-dse)\n\n2011-01-18  Richard Guenther  <rguenther@suse.de>\n\n\tPR rtl-optimization/47216\n\t* emit-rtl.c: Include tree-flow.h.\n\t(set_mem_attributes_minus_bitpos): Use tree_could_trap_p instead\n\tof replicating it with different semantics.\n\t* Makefile.in (emit-rtl.o): Adjust.\n\nFrom-SVN: r168951", "tree": {"sha": "d38fdc7f5a515bad12f63a6dce21d0eba6f42eaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d38fdc7f5a515bad12f63a6dce21d0eba6f42eaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4994da65e5f158243b6322fb6d3a47fa12b2962e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4994da65e5f158243b6322fb6d3a47fa12b2962e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4994da65e5f158243b6322fb6d3a47fa12b2962e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4994da65e5f158243b6322fb6d3a47fa12b2962e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1eb458d14097fc0fb4d8a386d8b9fba292547360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1eb458d14097fc0fb4d8a386d8b9fba292547360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1eb458d14097fc0fb4d8a386d8b9fba292547360"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "678f393c01fcd3c8fd6e0d2a822aee766f1338d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4994da65e5f158243b6322fb6d3a47fa12b2962e", "patch": "@@ -1,3 +1,11 @@\n+2011-01-18  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR rtl-optimization/47216\n+\t* emit-rtl.c: Include tree-flow.h.\n+\t(set_mem_attributes_minus_bitpos): Use tree_could_trap_p instead\n+\tof replicating it with different semantics.\n+\t* Makefile.in (emit-rtl.o): Adjust.\n+\n 2011-01-18  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n         * config/arm/cortex-a9.md (cortex-a9-neon.md): Actually"}, {"sha": "db98cc854a54cb5d041fccbcbd2e268c2f3636cf", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=4994da65e5f158243b6322fb6d3a47fa12b2962e", "patch": "@@ -2952,7 +2952,7 @@ emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(RTL_H) \\\n    $(TREE_H) $(FLAGS_H) $(FUNCTION_H) $(REGS_H) insn-config.h $(RECOG_H) \\\n    $(GGC_H) $(EXPR_H) hard-reg-set.h $(BITMAP_H) $(DIAGNOSTIC_CORE_H) $(BASIC_BLOCK_H) \\\n    $(HASHTAB_H) $(TM_P_H) debug.h langhooks.h $(TREE_PASS_H) gt-emit-rtl.h \\\n-   $(DF_H) $(PARAMS_H) $(TARGET_H)\n+   $(DF_H) $(PARAMS_H) $(TARGET_H) $(TREE_FLOW_H)\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) $(TREE_H) \\\n    $(DIAGNOSTIC_CORE_H) $(TM_P_H) $(REAL_H) dfp.h realmpfr.h\n realmpfr.o : realmpfr.c realmpfr.h $(CONFIG_H) $(SYSTEM_H) $(REAL_H)"}, {"sha": "4ff5d4edc8a12d3032471c642567b335b995af23", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4994da65e5f158243b6322fb6d3a47fa12b2962e/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=4994da65e5f158243b6322fb6d3a47fa12b2962e", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"df.h\"\n #include \"params.h\"\n #include \"target.h\"\n+#include \"tree-flow.h\"\n \n struct target_rtl default_target_rtl;\n #if SWITCHABLE_TARGET\n@@ -1669,33 +1670,10 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t     || TREE_CODE (t) == SAVE_EXPR)\n \tt = TREE_OPERAND (t, 0);\n \n-      /* We may look through structure-like accesses for the purposes of\n-\t examining TREE_THIS_NOTRAP, but not array-like accesses.  */\n-      base = t;\n-      while (TREE_CODE (base) == COMPONENT_REF\n-\t     || TREE_CODE (base) == REALPART_EXPR\n-\t     || TREE_CODE (base) == IMAGPART_EXPR\n-\t     || TREE_CODE (base) == BIT_FIELD_REF)\n-\tbase = TREE_OPERAND (base, 0);\n-\n-      if (TREE_CODE (base) == MEM_REF\n-\t  && TREE_CODE (TREE_OPERAND (base, 0)) == ADDR_EXPR)\n-\tbase = TREE_OPERAND (TREE_OPERAND (base, 0), 0);\n-      if (DECL_P (base))\n-\t{\n-\t  if (CODE_CONTAINS_STRUCT (TREE_CODE (base), TS_DECL_WITH_VIS))\n-\t    MEM_NOTRAP_P (ref) = !DECL_WEAK (base);\n-\t  else\n-\t    MEM_NOTRAP_P (ref) = 1;\n-\t}\n-      else if (TREE_CODE (base) == INDIRECT_REF\n-\t       || TREE_CODE (base) == MEM_REF\n-\t       || TREE_CODE (base) == TARGET_MEM_REF\n-\t       || TREE_CODE (base) == ARRAY_REF\n-\t       || TREE_CODE (base) == ARRAY_RANGE_REF)\n-\tMEM_NOTRAP_P (ref) = TREE_THIS_NOTRAP (base);\n-\n-      base = get_base_address (base);\n+      /* Note whether this expression can trap.  */\n+      MEM_NOTRAP_P (ref) = !tree_could_trap_p (t);\n+\n+      base = get_base_address (t);\n       if (base && DECL_P (base)\n \t  && TREE_READONLY (base)\n \t  && (TREE_STATIC (base) || DECL_EXTERNAL (base))"}]}