{"sha": "16929214fd139c9d092f9bfbd9d8287d5903f593", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5MjkyMTRmZDEzOWM5ZDA5MmY5YmZiZDlkODI4N2Q1OTAzZjU5Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-23T16:04:52Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2020-12-23T16:07:16Z"}, "message": "libcody:  Remove testsuite [PR 98318]\n\nlibcody's testsuite is not very portable, and is testing a host\nlibrary, so will do weird things on cross compiling, I think.  Let's\njust drop it.\n\n\tlibcody/\n\t* Makefile.in (LDFLAGS): Drop -L..\n\t* tests/01-serialize/connect.cc: Delete.\n\t* tests/01-serialize/decoder.cc: Delete.\n\t* tests/01-serialize/encoder.cc: Delete.\n\t* tests/02-comms/client-1.cc: Delete.\n\t* tests/02-comms/pivot-1.cc: Delete.\n\t* tests/02-comms/server-1.cc: Delete.\n\t* tests/Makesub.in: Delete.\n\t* tests/jouster: Delete.", "tree": {"sha": "dd88c7ca9124d36e3d838853de4f80144d071750", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd88c7ca9124d36e3d838853de4f80144d071750"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16929214fd139c9d092f9bfbd9d8287d5903f593", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16929214fd139c9d092f9bfbd9d8287d5903f593", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16929214fd139c9d092f9bfbd9d8287d5903f593", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16929214fd139c9d092f9bfbd9d8287d5903f593/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c142ae5e17ee3364c281753d7507b3e8a2be9d4f"}], "stats": {"total": 441, "additions": 1, "deletions": 440}, "files": [{"sha": "6e38d51516f1768747619b62644994fbe17aa906", "filename": "libcody/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16929214fd139c9d092f9bfbd9d8287d5903f593/libcody%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16929214fd139c9d092f9bfbd9d8287d5903f593/libcody%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2FMakefile.in?ref=16929214fd139c9d092f9bfbd9d8287d5903f593", "patch": "@@ -100,7 +100,7 @@ endif\n CXXOPTS += $(filter-out -DHAVE_CONFIG_H,@DEFS@) -include config.h\n \n # Linker options\n-LDFLAGS := -L. @LDFLAGS@\n+LDFLAGS := @LDFLAGS@\n LIBS := @LIBS@\n \n # Per-source & per-directory compile flags (warning: recursive)"}, {"sha": "85277c844afad3775d279241df2c96f7687978a7", "filename": "libcody/tests/01-serialize/connect.cc", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fconnect.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fconnect.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F01-serialize%2Fconnect.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,30 +0,0 @@\n-\n-// Test client connection handshake\n-// RUN: <<HELLO 1 TESTING\n-// RUN: $subdir$stem | ezio -p OUT $test |& ezio -p ERR $test\n-// RUN-END:\n-\n-// OUT-NEXT:^HELLO {:[0-9]+} TEST IDENT$\n-// OUT-NEXT:$EOF\n-\n-// ERR-NEXT:Code:{:[0-9]+}$\n-// ERR-NEXT:Version:1$\n-// ERR-NEXT:$EOF\n-\n-\n-// Cody\n-#include \"cody.hh\"\n-// C++\n-#include <iostream>\n-\n-using namespace Cody;\n-\n-int main (int, char *[])\n-{\n-  Client client (0, 1);\n-\n-  auto token = client.Connect (\"TEST\", \"IDENT\");\n-\n-  std::cerr << \"Code:\" << token.GetCode () << '\\n';\n-  std::cerr << \"Version:\" << token.GetInteger () << '\\n';\n-}"}, {"sha": "a3495d145daed2d491e49adda3b19b0a5f138e09", "filename": "libcody/tests/01-serialize/decoder.cc", "status": "removed", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fdecoder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fdecoder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F01-serialize%2Fdecoder.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,73 +0,0 @@\n-// CODYlib\t\t-*- mode:c++ -*-\n-// Copyright (C) 2020 Nathan Sidwell, nathan@acm.org\n-// License: Apache v2.0\n-\n-// RUN: <<bob 'frob dob''\\nF\\_b\\20\\61\\\\'\n-// RUN: $subdir$stem |& ezio $test\n-// CHECK-NEXT: ^line:0 word:0 'bob'\n-// CHECK-NEXT: ^line:0 word:1 'frob dob$\n-// CHECK-OPTION: matchSpace\n-// CHECK-NEXT: ^F b a\\'$\n-// CHECK-NEXT: $EOF\n-\n-/* RUN: <<line-1 word:1 ;\n-   RUN: <<'line 2' ;\n-   RUN: <<\n-*/\n-// RUN: $subdir$stem |& ezio -p CHECK2 $test\n-// CHECK2-NEXT: line:0 word:0 'line-1'\n-// CHECK2-NEXT: line:0 word:1 'word:1'\n-// CHECK2-NEXT: line:1 word:0 'line 2'\n-// CHECK2-NEXT: error:No \n-// CHECK2-NEXT: $EOF\n-\n-// RUN: <<'\n-// RUN: $subdir$stem |& ezio -p CHECK3 $test\n-// CHECK3-NEXT: error:Invalid argument\n-// CHECK3-NEXT: line:0 word:0 '''\n-// CHECK3-NEXT: $EOF\n-\n-/* RUN: << ;\n-   RUN: <<'\\g'\n-*/\n-// RUN: $subdir$stem |& ezio -p CHECK4 $test\n-// CHECK4-NEXT: error:No \n-// CHECK4-NEXT: error:Invalid argument\n-// CHECK4-NEXT: line:1 word:0 ''\\g''\n-// CHECK4-NEXT: $EOF\n-\n-// RUN-END:\n-\n-// Cody\n-#include \"cody.hh\"\n-// C++\n-#include <iostream>\n-// C\n-#include <cstring>\n-\n-using namespace Cody;\n-\n-int main (int, char *[])\n-{\n-  Detail::MessageBuffer reader;\n-\n-  reader.PrepareToRead ();\n-  while (int e = reader.Read (0))\n-    if (e != EAGAIN && e != EINTR)\n-      break;\n-\n-  std::vector<std::string> words;\n-  for (unsigned line = 0; !reader.IsAtEnd (); line++)\n-    {\n-      if (int e = reader.Lex (words))\n-\tstd::cerr << \"error:\" << strerror (e) << '\\n';\n-      for (unsigned ix = 0; ix != words.size (); ix++)\n-\t{\n-\t  auto &word = words[ix];\n-\n-\t  std::cerr << \"line:\" << line << \" word:\" << ix\n-\t\t    << \" '\" << word << \"'\\n\";\n-\t}\n-    }\n-  return 0;\n-}"}, {"sha": "c4cab6c630ffb5ea3fd58c246cd12606b2e9140b", "filename": "libcody/tests/01-serialize/encoder.cc", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fencoder.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F01-serialize%2Fencoder.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F01-serialize%2Fencoder.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,48 +0,0 @@\n-// CODYlib\t\t-*- mode:c++ -*-\n-// Copyright (C) 2020 Nathan Sidwell, nathan@acm.org\n-// License: Apache v2.0\n-\n-// Test message encoding, both string quoting and continuation lines\n-\n-// RUN: $subdir$stem |& ezio $test\n-// RUN-END:\n-// The \u00af is utf8-encoded as c2 af\n-// CHECK-NEXT: ^bob 'frob dob''\\n\u00af\\\\'$\n-// CHECK-NEXT: ^2 ;$\n-// CHECK-NEXT: ^3$\n-// CHECK-NEXT: $EOF\n-\n-// Cody\n-#include \"cody.hh\"\n-\n-using namespace Cody;\n-\n-int main (int, char *[])\n-{\n-  Detail::MessageBuffer writer;\n-\n-  writer.BeginLine ();\n-  writer.AppendWord (\"bob\");\n-  writer.AppendWord (\"frob dob\", true);\n-  writer.Append (\"\\n\\xc2\\xaf\\\\\", true);\n-  writer.EndLine ();\n-\n-  writer.PrepareToWrite ();\n-  while (int err = writer.Write (2))\n-    if (err != EAGAIN && err != EINTR)\n-      break;\n-\n-  writer.BeginLine ();\n-  writer.Append (\"2\", true);\n-  writer.EndLine ();\n-  writer.BeginLine ();\n-  writer.Append (\"3\", true);\n-  writer.EndLine ();\n-\n-  writer.PrepareToWrite ();\n-  while (int err = writer.Write (2))\n-    if (err != EAGAIN && err != EINTR)\n-      break;\n-\n-  return 0;\n-}"}, {"sha": "edff0ab4732698765295aa5f4a123b0c1087b343", "filename": "libcody/tests/02-comms/client-1.cc", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fclient-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fclient-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F02-comms%2Fclient-1.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,97 +0,0 @@\n-\n-// Test client message round tripping\n-/*\n-  RUN: <<HELLO 1 TESTING ;\n-  RUN: <<PATHNAME REPO ;\n-  RUN: <<PATHNAME biz/bar ;\n-  RUN: <<PATHNAME blob ;\n-  RUN: <<BOOL FALSE ;\n-  RUN: << BOOL TRUE ;\n-  RUN: << PATHNAME foo ;\n-  RUN: <<OK\n-*/\n-// RUN: $subdir$stem | ezio -p OUT $test |& ezio -p ERR $test\n-// RUN-END:\n-\n-/*\n-  OUT-NEXT:^HELLO {:[0-9]+} TEST IDENT ;$\n-  OUT-NEXT:^MODULE-REPO ;\n-  OUT-NEXT:^MODULE-EXPORT bar ;\n-  OUT-NEXT:^MODULE-IMPORT foo ;\n-  OUT-NEXT:^INCLUDE-TRANSLATE baz.frob ;\n-  OUT-NEXT:^INCLUDE-TRANSLATE ./corge ;\n-  OUT-NEXT:^INCLUDE-TRANSLATE ./quux ;\n-  OUT-NEXT:^MODULE-COMPILED bar\n-*/\n-// OUT-NEXT:$EOF\n-\n-// ERR-NEXT:Code:1$\n-// ERR-NEXT:Integer:1$\n-// ERR-NEXT:Code:5$\n-// ERR-NEXT:String:REPO$\n-// ERR-NEXT:Code:5$\n-// ERR-NEXT:String:biz/bar$\n-// ERR-NEXT:Code:5$\n-// ERR-NEXT:String:blob$\n-// ERR-NEXT:Code:4$\n-// ERR-NEXT:Integer:0$\n-// ERR-NEXT:Code:4$\n-// ERR-NEXT:Integer:1$\n-// ERR-NEXT:Code:5$\n-// ERR-NEXT:String:foo\n-// ERR-NEXT:Code:3$\n-// ERR-NEXT:Integer:\n-// ERR-NEXT:$EOF\n-\n-\n-// Cody\n-#include \"cody.hh\"\n-// C++\n-#include <iostream>\n-\n-using namespace Cody;\n-\n-int main (int, char *[])\n-{\n-  Client client (0, 1);\n-\n-  client.Cork ();\n-  if (client.Connect (\"TEST\", \"IDENT\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.ModuleRepo ().GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.ModuleExport (\"bar\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.ModuleImport (\"foo\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.IncludeTranslate (\"baz.frob\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.IncludeTranslate (\"./corge\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.IncludeTranslate (\"./quux\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-  if (client.ModuleCompiled (\"bar\").GetCode () != Client::PC_CORKED)\n-    std::cerr << \"Not corked!\\n\";\n-\n-  auto result = client.Uncork ();\n-  for (auto iter = result.begin (); iter != result.end (); ++iter)\n-    {\n-      std::cerr << \"Code:\" << iter->GetCode () << '\\n';\n-      switch (iter->GetCategory ())\n-\t{\n-\tcase Packet::INTEGER:\n-\t  std::cerr << \"Integer:\" << iter->GetInteger () << '\\n';\n-\t  break;\n-\tcase Packet::STRING:\n-\t  std::cerr << \"String:\" << iter->GetString () << '\\n';\n-\t  break;\n-\tcase Packet::VECTOR:\n-\t  {\n-\t    auto const &v = iter->GetVector ();\n-\t    for (unsigned ix = 0; ix != v.size (); ix++)\n-\t      std::cerr << \"Vector[\" << ix << \"]:\" << v[ix] << '\\n';\n-\t  }\n-\t  break;\n-\t}\n-    }\n-}"}, {"sha": "b98c833ab2776419493d274bb2726dac6b309bcf", "filename": "libcody/tests/02-comms/pivot-1.cc", "status": "removed", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fpivot-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fpivot-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F02-comms%2Fpivot-1.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,76 +0,0 @@\n-\n-// Test resolver pivot\n-\n-// RUN:<<HELLO 1 TEST IDENT ;\n-// RUN:<<MODULE-REPO ;\n-// RUN:<<HELLO 1 TEST IDENT\n-// RUN: $subdir$stem | ezio -p OUT1 $test |& ezio -p ERR1 $test\n-// OUT1-NEXT:HELLO 1 default ;\n-// OUT1-NEXT:PATHNAME cmi.cache ;\n-// OUT1-NEXT:ERROR 'already connected\n-// OUT1-NEXT:$EOF\n-// ERR1-NEXT:resolver is handler\n-// ERR1-NEXT:$EOF\n-\n-// RUN:<<MODULE-REPO ;\n-// RUN:<<HELLO 1 TEST IDENT ;\n-// RUN:<<MODULE-REPO\n-// RUN: $subdir$stem | ezio -p OUT2 $test |& ezio -p ERR2 $test\n-// OUT2-NEXT:ERROR 'not connected\n-// OUT2-NEXT:HELLO 1 default ;\n-// OUT2-NEXT:PATHNAME cmi.cache\n-// OUT2-NEXT:$EOF\n-// ERR2-NEXT:resolver is handler\n-// ERR2-NEXT:$EOF\n-\n-// RUN-END:\n-#include \"cody.hh\"\n-#include <iostream>\n-\n-using namespace Cody;\n-\n-class Handler : public Resolver\n-{\n-  virtual Handler *ConnectRequest (Server *s, unsigned ,\n-\t\t\t\t   std::string &, std::string &)\n-  {\n-    ErrorResponse (s, \"unexpected connect call\");\n-    return nullptr;\n-  }\n-};\n-\n-Handler handler;\n-\n-class Initial : public Resolver\n-{\n-  virtual Handler *ConnectRequest (Server *s, unsigned v,\n-\t\t\t\t   std::string &agent, std::string &ident)\n-  {\n-    Resolver::ConnectRequest (s, v, agent, ident);\n-    return &handler;\n-  }\n-};\n-\n-Initial initial;\n-\n-int main (int, char *[])\n-{\n-  Server server (&initial, 0, 1);\n-\n-  while (int e = server.Read ())\n-    if (e != EAGAIN && e != EINTR)\n-      break;\n-\n-  server.ProcessRequests ();\n-  if (server.GetResolver () == &handler)\n-    std::cerr << \"resolver is handler\\n\";\n-  else if (server.GetResolver () == &initial)\n-    std::cerr << \"resolver is initial\\n\";\n-  else\n-    std::cerr << \"resolver is surprising\\n\";\n-\n-  server.PrepareToWrite ();\n-  while (int e = server.Write ())\n-    if (e != EAGAIN && e != EINTR)\n-      break;\n-}"}, {"sha": "0a8694e94df52df589963e4f9bf31a029fe6ace1", "filename": "libcody/tests/02-comms/server-1.cc", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fserver-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2F02-comms%2Fserver-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2F02-comms%2Fserver-1.cc?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,68 +0,0 @@\n-\n-// Test server message round tripping\n-/*\n-  RUN:<<HELLO 1 TEST IDENT ;\n-  RUN:<<MODULE-REPO ;\n-  RUN:<<MODULE-EXPORT bar ;\n-  RUN:<<MODULE-IMPORT foo ;\n-  RUN:<<NOT A COMMAND ;\n-  RUN:<<INCLUDE-TRANSLATE baz.frob ;\n-  RUN:<<INCLUDE-TRANSLATE ./quux ;\n-  RUN:<<MODULE-COMPILED bar ;\n-  RUN:<<MODULE-IMPORT ''\n-*/\n-// RUN: $subdir$stem | ezio -p OUT1 $test |& ezio -p ERR1 $test\n-\n-// These all fail because there's nothing in the server interpretting stuff\n-/*\n-  OUT1-NEXT: ^HELLO 1 default\t;\n-  OUT1-NEXT: ^PATHNAME cmi.cache\t;\n-  OUT1-NEXT: ^PATHNAME bar.cmi\t;\n-  OUT1-NEXT: ^PATHNAME foo.cmi\t;\n-  OUT1-NEXT: ^ERROR 'unrecognized \\'NOT\n-  OUT1-NEXT: ^BOOL FALSE\t;\n-  OUT1-NEXT: ^BOOL FALSE\t;\n-  OUT1-NEXT: ^OK\n-  OUT1-NEXT: ^ERROR 'malformed\n-*/\n-// OUT1-NEXT:$EOF\n-// ERR1-NEXT:$EOF\n-\n-/*\n-  RUN:<<HELLO 1 TEST IDENT\n-  RUN:<<MODULE-REPO\n-*/\n-// RUN: $subdir$stem | ezio -p OUT2 $test |& ezio -p ERR2 $test\n-/*\n-  OUT2-NEXT: ^HELLO 1 default\n-*/\n-// OUT2-NEXT:$EOF\n-// ERR2-NEXT:$EOF\n-\n-// RUN-END:\n-\n-// Cody\n-#include \"cody.hh\"\n-// C++\n-#include <iostream>\n-\n-using namespace Cody;\n-\n-int main (int, char *[])\n-{\n-  Resolver r;\n-  Server server (&r, 0, 1);\n-\n-  while (int e = server.Read ())\n-    if (e != EAGAIN && e != EINTR)\n-      break;\n-\n-  server.ProcessRequests ();\n-  if (server.GetResolver () != &r)\n-    std::cerr << \"resolver changed\\n\";\n-  server.PrepareToWrite ();\n-\n-  while (int e = server.Write ())\n-    if (e != EAGAIN && e != EINTR)\n-      break;\n-}"}, {"sha": "329e94609eee4debed9b8209373806bc1ef11598", "filename": "libcody/tests/Makesub.in", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2FMakesub.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2FMakesub.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2FMakesub.in?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,36 +0,0 @@\n-# CODYlib\t\t-*- mode:Makefile -*-\n-# Copyright (C) 2019-2020 Nathan Sidwell, nathan@acm.org\n-# License: Apache v2.0\n-\n-ALOY := @ALOY@\n-TESTS := $(patsubst $(srcdir)/%.cc,%,\\\n-\t$(wildcard $(srcdir)/tests/*/*.cc))\n-TESTDIRS = $(shell cd $(srcdir)/${<D} ; echo *(/))\n-testdir := $(and $(filter-out /%,$(srcdir)),../)$(srcdir)/tests\n-\n-check:: tests/cody.defs $(TESTS)\n-\t+cd ${<D} && srcbuilddir=$(srcdir)/tests JOUST=${<F} \\\n-\t  $(ALOY) -t kratos -o cody -g $(testdir)/jouster $(TESTDIRS)\n-ifeq ($(firstword $(aloy)),:)\n-\t@echo WARNING: tests were not run as Joust test harness was not found\n-endif\n-\n-tests/cody.defs: tests/Makesub\n-\techo '# Automatically generated by Make' >$@\n-\techo 'testdir=$(testdir)' >>$@\n-\techo 'timelimit=60' >>$@\n-\techo 'memlimit=1' >>$@\n-\techo 'cpulimit=60' >>$@\n-\techo 'filelimit=1' >>$@\n-\techo 'SHELL=$(SHELL)' >>$@\n-\n-$(TESTS): %: %.o libcody.a\n-\t$(CXX) $(LDFLAGS) $< -lcody $(LIBS) -o $@\n-\n-clean::\n-\trm -f $(TESTS)\n-\trm -f $(TESTS:=.o) $(TESTS:=.d)\n-\n-ifeq ($(filter clean%,$(MAKECMDGOALS)),)\n--include $(TESTS:=.d)\n-endif"}, {"sha": "c7a913c8a190de26d3d20a7c002710a05556a4a0", "filename": "libcody/tests/jouster", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2Fjouster", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c142ae5e17ee3364c281753d7507b3e8a2be9d4f/libcody%2Ftests%2Fjouster", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcody%2Ftests%2Fjouster?ref=c142ae5e17ee3364c281753d7507b3e8a2be9d4f", "patch": "@@ -1,11 +0,0 @@\n-#! /bin/zsh\n-# CODYlib\t\t-*- mode:Makefile -*-\n-# Copyright (C) 2019-2020 Nathan Sidwell, nathan@acm.org\n-# License Apache v2.0\n-\n-pushd ${0%/*}\n-setopt nullglob\n-for subdir in $@ ; do\n-    echo $subdir/*(.^*)\n-done\n-popd"}]}