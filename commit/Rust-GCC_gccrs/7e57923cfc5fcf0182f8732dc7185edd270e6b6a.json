{"sha": "7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2U1NzkyM2NmYzVmY2YwMTgyZjg3MzJkYzcxODVlZGQyNzBlNmI2YQ==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "1999-02-17T02:01:59Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-02-17T02:01:59Z"}, "message": "class.c (build_utf8_ref): Back out broken patch which was intended to to output signatures using '.' as a...\n\n1999-02-09  Andrew Haley  <aph@cygnus.com>\n        * class.c (build_utf8_ref): Back out broken patch which was\n        intended to to output signatures using '.' as a separator.\n        * class.c (make_class_data): Output signatures using '.' as a\n        separator, rather than '/'.\n        (mangled_classname): Likewise.\n        (make_field_value): Likewise.\n        (make_method_value): Likewise.\n        * constants.c (alloc_class_constant): Likewise.\n        * expr.c (build_invokeinterface): Likewise.\n\nFrom-SVN: r25260", "tree": {"sha": "7638b4d2811e5f2af51147e536f2005bc7654aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7638b4d2811e5f2af51147e536f2005bc7654aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/comments", "author": null, "committer": null, "parents": [{"sha": "04f7a12f783ea0d1177a0f4cdec20051c56061c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04f7a12f783ea0d1177a0f4cdec20051c56061c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04f7a12f783ea0d1177a0f4cdec20051c56061c8"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "f086f97e279dca5a8866b853e8a84f4da730e954", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "patch": "@@ -1,3 +1,16 @@\n+1999-02-17  Andrew Haley  <aph@cygnus.com>\n+\n+\t* class.c (build_utf8_ref): Back out broken patch which was\n+        intended to to output signatures using '.' as a separator.\n+\n+        * class.c (make_class_data): Output signatures using '.' as a\n+        separator, rather than '/'.\n+        (mangled_classname): Likewise.\n+        (make_field_value): Likewise.\n+        (make_method_value): Likewise.\n+        * constants.c (alloc_class_constant): Likewise.\n+        * expr.c (build_invokeinterface): Likewise.\n+\n Thu Feb 11 21:25:51 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n  \n  \t* parse.y (valid_builtin_assignconv_identity_widening_p): Got rid"}, {"sha": "6d748a4fcac0ae1cc0d3d156b2c9cf7d31130d7d", "filename": "gcc/java/class.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "patch": "@@ -103,7 +103,7 @@ mangled_classname (prefix, type)\n   tree ident = TYPE_NAME (type);\n   if (TREE_CODE (ident) != IDENTIFIER_NODE)\n     ident = DECL_NAME (ident);\n-  return identifier_subst (ident, prefix, '/', '_', \"\");\n+  return identifier_subst (ident, prefix, '.', '_', \"\");\n }\n \n tree\n@@ -557,21 +557,10 @@ build_utf8_ref (name)\n   PUSH_FIELD (ctype, field, \"data\", str_type);\n   FINISH_RECORD (ctype);\n   START_RECORD_CONSTRUCTOR (cinit, ctype);\n-  {\n-    int i;\n-    /* Rewrite .class file internal form to canonical Java form. */\n-#ifdef __GNUC__\n-    char buffer[name_len];\n-#else\n-    char *buffer = (char *)alloca (name_len);\n-#endif\n-    for (i = 0; i < name_len; i++)\n-      buffer[i] = (name_ptr[i] == '/' ? '.' : name_ptr[i]);\n-    name_hash = hashUtf8String (buffer, name_len) & 0xFFFF;\n-    PUSH_FIELD_VALUE (cinit, \"hash\", build_int_2 (name_hash, 0));\n-    PUSH_FIELD_VALUE (cinit, \"length\", build_int_2 (name_len, 0));\n-    string = build_string (name_len, buffer);\n-  }\n+  name_hash = hashUtf8String (name_ptr, name_len) & 0xFFFF;\n+  PUSH_FIELD_VALUE (cinit, \"hash\", build_int_2 (name_hash, 0));\n+  PUSH_FIELD_VALUE (cinit, \"length\", build_int_2 (name_len, 0));\n+  string = build_string (name_len, name_ptr);\n   TREE_TYPE (string) = str_type;\n   PUSH_FIELD_VALUE (cinit, \"data\", string);\n   FINISH_RECORD_CONSTRUCTOR (cinit);\n@@ -851,7 +840,12 @@ make_field_value (tree fdecl)\n   if (resolved)\n     type = build_class_ref (type);\n   else\n-    type = build_utf8_ref (build_java_signature (type));\n+    {\n+      tree signature = build_java_signature (type);\n+      type = build_utf8_ref (unmangle_classname \n+\t\t\t     (IDENTIFIER_POINTER(signature),\n+\t\t\t      IDENTIFIER_LENGTH(signature)));\n+    }\n   PUSH_FIELD_VALUE (finit, \"type\", type);\n   flags = get_access_flags_from_decl (fdecl);\n   if (! resolved)\n@@ -897,8 +891,14 @@ make_method_value (mdecl, this_class_addr)\n \t\t    build_utf8_ref (DECL_CONSTRUCTOR_P (mdecl) ?\n \t\t\t\t    init_identifier_node\n \t\t\t\t    : DECL_NAME (mdecl)));\n-  PUSH_FIELD_VALUE (minit, \"signature\",\n-\t\t    build_utf8_ref (build_java_signature (TREE_TYPE (mdecl))));\n+  {\n+    tree signature = build_java_signature (TREE_TYPE (mdecl));\n+    PUSH_FIELD_VALUE (minit, \"signature\", \n+\t\t      (build_utf8_ref \n+\t\t       (unmangle_classname \n+\t\t\t(IDENTIFIER_POINTER(signature),\n+\t\t\t IDENTIFIER_LENGTH(signature)))));\n+  }\n   PUSH_FIELD_VALUE (minit, \"accflags\", build_int_2 (accflags, 0));\n   PUSH_FIELD_VALUE (minit, \"ncode\", code);\n   FINISH_RECORD_CONSTRUCTOR (minit);"}, {"sha": "3679d4e4e6f9168becbe1b04978f5556286bfda3", "filename": "gcc/java/constants.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "patch": "@@ -368,9 +368,12 @@ int\n alloc_class_constant (clas)\n      tree clas;\n {\n-\n+  tree class_name = build_internal_class_name (clas);\n+  \n   return alloc_name_constant (CONSTANT_Class,\n-\t\t\t      build_internal_class_name (clas));\n+\t\t\t      (unmangle_classname \n+\t\t\t       (IDENTIFIER_POINTER(class_name),\n+\t\t\t\tIDENTIFIER_LENGTH(class_name))));\n }\n \n /* Return a reference to the data array of the current constant pool. */"}, {"sha": "dde41b904b44a9d44e127e55e615ef073bebc914", "filename": "gcc/java/expr.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7e57923cfc5fcf0182f8732dc7185edd270e6b6a/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=7e57923cfc5fcf0182f8732dc7185edd270e6b6a", "patch": "@@ -1473,7 +1473,11 @@ build_invokeinterface (dtable, method_name, method_signature)\n   dtable = build1 (INDIRECT_REF, dtable_type, dtable);\n   dtable = build (COMPONENT_REF, class_ptr_type, dtable,\n \t\t  lookup_field (&dtable_type, class_ident));\n-  lookup_arg = build_tree_list (NULL_TREE, build_utf8_ref (method_signature));\n+  lookup_arg = build_tree_list (NULL_TREE, \n+\t\t\t\t(build_utf8_ref \n+\t\t\t\t (unmangle_classname\n+\t\t\t\t  (IDENTIFIER_POINTER(method_signature),\n+\t\t\t\t   IDENTIFIER_LENGTH(method_signature)))));\n   lookup_arg = tree_cons (NULL_TREE, dtable,\n \t\t\t  tree_cons (NULL_TREE, build_utf8_ref (method_name),\n \t\t\t\t     lookup_arg));"}]}