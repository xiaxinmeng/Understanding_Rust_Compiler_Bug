{"sha": "e8cecccc2e5abb5d753291892968bf72533a7045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThjZWNjY2MyZTVhYmI1ZDc1MzI5MTg5Mjk2OGJmNzI1MzNhNzA0NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-02-18T08:19:47Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-02-18T08:19:47Z"}, "message": "Support if statement in !GCC$ builtin directive.\n\n2019-02-18  Martin Liska  <mliska@suse.cz>\n\n\t* config/i386/i386.c (ix86_get_multilib_abi_name): New function.\n\t(TARGET_GET_MULTILIB_ABI_NAME): New macro defined.\n\t* doc/tm.texi: Document new target hook.\n\t* doc/tm.texi.in: Likewise.\n\t* target.def: Add new target macro.\n\t* gcc.c (find_fortran_preinclude_file): Do not search multilib\n\tsuffixes.\n2019-02-18  Martin Liska  <mliska@suse.cz>\n\n\t* decl.c (gfc_match_gcc_builtin): Add support for filtering\n\tof builtin directive based on multilib ABI name.\n2019-02-18  Martin Liska  <mliska@suse.cz>\n\n\t* gfortran.dg/simd-builtins-7.f90: New test.\n\t* gfortran.dg/simd-builtins-7.h: New test.\n\nFrom-SVN: r268978", "tree": {"sha": "29fdf5a07178e7c279d7b62f846b33075258733b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29fdf5a07178e7c279d7b62f846b33075258733b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8cecccc2e5abb5d753291892968bf72533a7045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cecccc2e5abb5d753291892968bf72533a7045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8cecccc2e5abb5d753291892968bf72533a7045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8cecccc2e5abb5d753291892968bf72533a7045/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3cbcb233854574e23793c72a2af72d4d3bf94fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3cbcb233854574e23793c72a2af72d4d3bf94fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3cbcb233854574e23793c72a2af72d4d3bf94fe"}], "stats": {"total": 101, "additions": 91, "deletions": 10}, "files": [{"sha": "a200aac3434795ec93fd8dd395a6d8a4ba6954f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -1,3 +1,13 @@\n+2019-02-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/i386/i386.c (ix86_get_multilib_abi_name): New function.\n+\t(TARGET_GET_MULTILIB_ABI_NAME): New macro defined.\n+\t* doc/tm.texi: Document new target hook.\n+\t* doc/tm.texi.in: Likewise.\n+\t* target.def: Add new target macro.\n+\t* gcc.c (find_fortran_preinclude_file): Do not search multilib\n+\tsuffixes.\n+\n 2019-02-17  Alan Modra  <amodra@gmail.com>\n \n \tPR target/89271"}, {"sha": "591a7cdccdc7178758dbb1e6a79924eae2c3e1ef", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -29579,6 +29579,19 @@ ix86_warn_parameter_passing_abi (cumulative_args_t cum_v, tree type)\n   cum->warn_empty = false;\n }\n \n+/* This hook returns name of multilib ABI.  */\n+\n+static const char *\n+ix86_get_multilib_abi_name (void)\n+{\n+  if (!(TARGET_64BIT_P (ix86_isa_flags)))\n+    return \"i386\";\n+  else if (TARGET_X32_P (ix86_isa_flags))\n+    return \"x32\";\n+  else\n+    return \"x86_64\";\n+}\n+\n /* Compute the alignment for a variable for Intel MCU psABI.  TYPE is\n    the data type, and ALIGN is the alignment that the object would\n    ordinarily have.  */\n@@ -51806,6 +51819,10 @@ ix86_run_selftests (void)\n #undef TARGET_WARN_PARAMETER_PASSING_ABI\n #define TARGET_WARN_PARAMETER_PASSING_ABI ix86_warn_parameter_passing_abi\n \n+#undef TARGET_GET_MULTILIB_ABI_NAME\n+#define TARGET_GET_MULTILIB_ABI_NAME \\\n+  ix86_get_multilib_abi_name\n+\n #if CHECKING_P\n #undef TARGET_RUN_TARGET_SELFTESTS\n #define TARGET_RUN_TARGET_SELFTESTS selftest::ix86_run_selftests"}, {"sha": "8c8978bb13a7933b3ae6997de87a6b65edd6c842", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -1931,6 +1931,10 @@ superset of all other ABIs.  @var{call_1} must always be a call insn,\n call_2 may be NULL or a call insn.\n @end deftypefn\n \n+@deftypefn {Target Hook} {const char *} TARGET_GET_MULTILIB_ABI_NAME (void)\n+This hook returns name of multilib ABI name.\n+@end deftypefn\n+\n @findex fixed_regs\n @findex call_used_regs\n @findex global_regs"}, {"sha": "fe1194ef91ae3dc7a4de4976a306d33801b2a89e", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -1711,6 +1711,8 @@ of @code{CALL_USED_REGISTERS}.\n \n @hook TARGET_RETURN_CALL_WITH_MAX_CLOBBERS\n \n+@hook TARGET_GET_MULTILIB_ABI_NAME\n+\n @findex fixed_regs\n @findex call_used_regs\n @findex global_regs"}, {"sha": "a03cfd2a70bed7aaec2d6cbe1d39c637821f6d12", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -1,3 +1,8 @@\n+2019-02-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* decl.c (gfc_match_gcc_builtin): Add support for filtering\n+\tof builtin directive based on multilib ABI name.\n+\n 2019-02-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/88299"}, {"sha": "9d6aa7d25c647472dea655e4174d0de3417c1482", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -28,6 +28,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"match.h\"\n #include \"parse.h\"\n #include \"constructor.h\"\n+#include \"target.h\"\n \n /* Macros to access allocate memory for gfc_data_variable,\n    gfc_data_value and gfc_data.  */\n@@ -11360,19 +11361,22 @@ gfc_match_gcc_unroll (void)\n   return MATCH_ERROR;\n }\n \n-/* Match a !GCC$ builtin (b) attributes simd flags form:\n+/* Match a !GCC$ builtin (b) attributes simd flags if('target') form:\n \n    The parameter b is name of a middle-end built-in.\n-   Flags are one of:\n-     - (empty)\n-     - inbranch\n-     - notinbranch\n+   FLAGS is optional and must be one of:\n+     - (inbranch)\n+     - (notinbranch)\n+\n+   IF('target') is optional and TARGET is a name of a multilib ABI.\n \n    When we come here, we have already matched the !GCC$ builtin string.  */\n+\n match\n gfc_match_gcc_builtin (void)\n {\n   char builtin[GFC_MAX_SYMBOL_LEN + 1];\n+  char target[GFC_MAX_SYMBOL_LEN + 1];\n \n   if (gfc_match (\" ( %n ) attributes simd\", builtin) != MATCH_YES)\n     return MATCH_ERROR;\n@@ -11383,6 +11387,13 @@ gfc_match_gcc_builtin (void)\n   else if (gfc_match (\" ( inbranch ) \") == MATCH_YES)\n     clause = SIMD_INBRANCH;\n \n+  if (gfc_match (\" if ( '%n' ) \", target) == MATCH_YES)\n+    {\n+      const char *abi = targetm.get_multilib_abi_name ();\n+      if (abi == NULL || strcmp (abi, target) != 0)\n+\treturn MATCH_YES;\n+    }\n+\n   if (gfc_vectorized_builtins == NULL)\n     gfc_vectorized_builtins = new hash_map<nofree_string_hash, int> ();\n "}, {"sha": "481e8289ad30ae84e3c087cdb8dc7a3c9915b51f", "filename": "gcc/gcc.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -9965,24 +9965,24 @@ find_fortran_preinclude_file (int argc, const char **argv)\n \n   /* Search first for 'finclude' folder location for a header file\n      installed by the compiler (similar to omp_lib.h).  */\n-  add_prefix (&prefixes, argv[2], NULL, 0, 0, false);\n+  add_prefix (&prefixes, argv[2], NULL, 0, 0, 0);\n #ifdef TOOL_INCLUDE_DIR\n   /* Then search: <prefix>/<target>/<include>/finclude */\n   add_prefix (&prefixes, TOOL_INCLUDE_DIR \"/finclude/\",\n-\t      NULL, 0, 0, false);\n+\t      NULL, 0, 0, 0);\n #endif\n #ifdef NATIVE_SYSTEM_HEADER_DIR\n   /* Then search: <sysroot>/usr/include/finclude/<multilib> */\n   add_sysrooted_hdrs_prefix (&prefixes, NATIVE_SYSTEM_HEADER_DIR \"/finclude/\",\n-\t\t\t     NULL, 0, 0, false);\n+\t\t\t     NULL, 0, 0, 0);\n #endif\n \n-  const char *path = find_a_file (&include_prefixes, argv[1], R_OK, true);\n+  const char *path = find_a_file (&include_prefixes, argv[1], R_OK, false);\n   if (path != NULL)\n     result = concat (argv[0], path, NULL);\n   else\n     {\n-      path = find_a_file (&prefixes, argv[1], R_OK, true);\n+      path = find_a_file (&prefixes, argv[1], R_OK, false);\n       if (path != NULL)\n \tresult = concat (argv[0], path, NULL);\n     }"}, {"sha": "66cee075018b94fa9786a10f7cfe6ede8ead6b20", "filename": "gcc/target.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -5791,6 +5791,12 @@ call_2 may be NULL or a call insn.\",\n  rtx_insn *, (rtx_insn *call_1, rtx_insn *call_2),\n  NULL)\n \n+DEFHOOK\n+(get_multilib_abi_name,\n+ \"This hook returns name of multilib ABI name.\",\n+ const char *, (void),\n+ hook_constcharptr_void_null)\n+\n DEFHOOK\n (remove_extra_call_preserved_regs,\n  \"This hook removes registers from the set of call-clobbered registers\\n\\"}, {"sha": "a09997c87fe2b110a67c3b6c1e6c2600cb296baa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -1,3 +1,8 @@\n+2019-02-18  Martin Liska  <mliska@suse.cz>\n+\n+\t* gfortran.dg/simd-builtins-7.f90: New test.\n+\t* gfortran.dg/simd-builtins-7.h: New test.\n+\n 2019-02-17  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/88299"}, {"sha": "75734d43c3d549901a14a2aaa6630fffd8946120", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-7.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.f90?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile { target { i?86-*-linux* x86_64-*-linux* } } }\n+! { dg-additional-options \"-msse2 -mno-avx -nostdinc -Ofast -fpre-include=simd-builtins-7.h -fdump-tree-optimized\" }\n+\n+program test_overloaded_intrinsic\n+  real(4) :: x4(3200), y4(3200)\n+  real(8) :: x8(3200), y8(3200)\n+\n+  y4 = sin(x4)\n+  print *, y4\n+\n+  y4 = sin(x8)\n+  print *, y8\n+end\n+\n+! { dg-final { scan-tree-dump \"sinf.simdclone\" \"optimized\" { target ia32 } } } */\n+! { dg-final { scan-tree-dump-not \"sin.simdclone\" \"optimized\" { target ia32 } } } */\n+\n+! { dg-final { scan-tree-dump \"sin.simdclone\" \"optimized\" { target lp64} } } */\n+! { dg-final { scan-tree-dump-not \"sinf.simdclone\" \"optimized\" { target lp64 } } } */"}, {"sha": "1c19b88f8772d6f70c1e8d63524e655e1747c5ee", "filename": "gcc/testsuite/gfortran.dg/simd-builtins-7.h", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8cecccc2e5abb5d753291892968bf72533a7045/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fsimd-builtins-7.h?ref=e8cecccc2e5abb5d753291892968bf72533a7045", "patch": "@@ -0,0 +1,2 @@\n+!GCC$ builtin (sin) attributes simd (notinbranch) if('x86_64')\n+!GCC$ builtin (sinf) attributes simd (notinbranch) if('i386')"}]}