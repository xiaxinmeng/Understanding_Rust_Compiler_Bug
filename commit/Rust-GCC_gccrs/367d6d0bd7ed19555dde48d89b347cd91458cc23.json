{"sha": "367d6d0bd7ed19555dde48d89b347cd91458cc23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzY3ZDZkMGJkN2VkMTk1NTVkZGU0OGQ4OWIzNDdjZDkxNDU4Y2MyMw==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2003-12-08T22:39:51Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2003-12-08T22:39:51Z"}, "message": "Fix IA-64 glibc ICE PR target/13132\n\nFix IA-64 glibc ICE\n\tPR target/13132\n\t* expmed.c (extract_bit_field): Only call mode_for_size for scalar\n\tinteger modes.\n\nFrom-SVN: r74443", "tree": {"sha": "87fb22ff5577142cb874737eef2278cf374a2ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/87fb22ff5577142cb874737eef2278cf374a2ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/367d6d0bd7ed19555dde48d89b347cd91458cc23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367d6d0bd7ed19555dde48d89b347cd91458cc23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/367d6d0bd7ed19555dde48d89b347cd91458cc23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/367d6d0bd7ed19555dde48d89b347cd91458cc23/comments", "author": null, "committer": null, "parents": [{"sha": "8bb1e63ec78e08832a0f3a2a87496479df182140", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb1e63ec78e08832a0f3a2a87496479df182140", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb1e63ec78e08832a0f3a2a87496479df182140"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "4e39db5a269fe084e1236f878f5c829b3ce6da5e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d6d0bd7ed19555dde48d89b347cd91458cc23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d6d0bd7ed19555dde48d89b347cd91458cc23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=367d6d0bd7ed19555dde48d89b347cd91458cc23", "patch": "@@ -1,3 +1,9 @@\n+2003-12-08  James E Wilson  <wilson@specifixinc.com>\n+\n+\tPR target/13132\n+\t* expmed.c (extract_bit_field): Only call mode_for_size for scalar\n+\tinteger modes.\n+\n 2003-12-08  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* doc/install.texi: Revert change of Dec 7; gcc is still a 2.13"}, {"sha": "98a26a14c1ea2e3a1d44f772238507f079dc5548", "filename": "gcc/expmed.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/367d6d0bd7ed19555dde48d89b347cd91458cc23/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/367d6d0bd7ed19555dde48d89b347cd91458cc23/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=367d6d0bd7ed19555dde48d89b347cd91458cc23", "patch": "@@ -1079,13 +1079,18 @@ extract_bit_field (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n      If that's wrong, the solution is to test for it and set TARGET to 0\n      if needed.  */\n \n-  mode1  = (VECTOR_MODE_P (tmode)\n-\t    ? mode\n-\t    : mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0));\n+  /* Only scalar integer modes can be converted via subregs.  There is an\n+     additional problem for FP modes here in that they can have a precision\n+     which is different from the size.  mode_for_size uses precision, but\n+     we want a mode based on the size, so we must avoid calling it for FP\n+     modes.  */\n+  mode1  = (SCALAR_INT_MODE_P (tmode)\n+\t    ? mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0)\n+\t    : mode);\n \n   if (((bitsize >= BITS_PER_WORD && bitsize == GET_MODE_BITSIZE (mode)\n \t&& bitpos % BITS_PER_WORD == 0)\n-       || (mode_for_size (bitsize, GET_MODE_CLASS (tmode), 0) != BLKmode\n+       || (mode1 != BLKmode\n \t   /* ??? The big endian test here is wrong.  This is correct\n \t      if the value is in a register, and if mode_for_size is not\n \t      the same mode as op0.  This causes us to get unnecessarily"}]}