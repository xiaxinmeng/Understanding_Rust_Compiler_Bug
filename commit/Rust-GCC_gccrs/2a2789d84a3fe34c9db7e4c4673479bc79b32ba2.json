{"sha": "2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmEyNzg5ZDg0YTNmZTM0YzlkYjdlNGM0NjczNDc5YmM3OWIzMmJhMg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2004-05-16T22:22:49Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2004-05-16T22:22:49Z"}, "message": "re PR target/10982 ([arm] poor optimisation of \"if (var & const)\")\n\nPR target/10982\n* arm.md (ne_zeroextractsi): Convert to insn-and-split.\n(ne_zeroextractsi_shifted): New pattern.\n(ite_ne_zeroextractsi): New pattern.\n(ite_ne_zeroextractsi_shifted): New pattern.\n\nFrom-SVN: r81926", "tree": {"sha": "7f150614df20af12712a9022b25de33381136de7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f150614df20af12712a9022b25de33381136de7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2/comments", "author": null, "committer": null, "parents": [{"sha": "629ceb937ac50b7ef41f48fdfba3e1f5a55c6068", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629ceb937ac50b7ef41f48fdfba3e1f5a55c6068", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629ceb937ac50b7ef41f48fdfba3e1f5a55c6068"}], "stats": {"total": 117, "additions": 112, "deletions": 5}, "files": [{"sha": "2c9f6f2bc7a579a2d05837aa920a4127b53491a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "patch": "@@ -1,3 +1,11 @@\n+2004-05-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\tPR target/10982\n+\t* arm.md (ne_zeroextractsi): Convert to insn-and-split.\n+\t(ne_zeroextractsi_shifted): New pattern.\n+\t(ite_ne_zeroextractsi): New pattern.\n+\t(ite_ne_zeroextractsi_shifted): New pattern.\n+\n 2004-05-15  Steven Bosscher  <stevenb@suse.de>\n \n \t* c-gimplify.c (c_genericize):"}, {"sha": "02717852f279c085a4363bcb3d1b732ce0fcc0fc", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 104, "deletions": 5, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a2789d84a3fe34c9db7e4c4673479bc79b32ba2/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=2a2789d84a3fe34c9db7e4c4673479bc79b32ba2", "patch": "@@ -1646,7 +1646,7 @@\n   [(set_attr \"conds\" \"set\")]\n )\n \n-(define_insn \"*ne_zeroextractsi\"\n+(define_insn_and_split \"*ne_zeroextractsi\"\n   [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n \t(ne:SI (zero_extract:SI\n \t\t(match_operand:SI 1 \"s_register_operand\" \"r\")\n@@ -1659,11 +1659,110 @@\n        && INTVAL (operands[2]) > 0 \n        && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n        && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\"\n-  \"*\n+  \"#\"\n+  \"TARGET_ARM\n+   && (INTVAL (operands[3]) >= 0 && INTVAL (operands[3]) < 32\n+       && INTVAL (operands[2]) > 0 \n+       && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n+       && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\"\n+  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n+\t\t   (compare:CC_NOOV (and:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (and:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 0)\n+\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t\t\t (match_dup 0) (const_int 1)))]\n+  \"\n+  operands[2] = GEN_INT (((1 << INTVAL (operands[2])) - 1)\n+\t\t\t << INTVAL (operands[3])); \n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn_and_split \"*ne_zeroextractsi_shifted\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(ne:SI (zero_extract:SI\n+\t\t(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t(match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t(const_int 0))\n+\t       (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARM\"\n+  \"#\"\n+  \"TARGET_ARM\"\n+  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n+\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 0)\n+\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t\t\t (match_dup 0) (const_int 1)))]\n+  \"\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn_and_split \"*ite_ne_zeroextractsi\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI (ne (zero_extract:SI\n+\t\t\t      (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t\t      (match_operand:SI 3 \"const_int_operand\" \"n\"))\n+\t\t\t     (const_int 0))\n+\t\t\t (match_operand:SI 4 \"arm_not_operand\" \"rIK\")\n+\t\t\t (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARM\n+   && (INTVAL (operands[3]) >= 0 && INTVAL (operands[3]) < 32\n+       && INTVAL (operands[2]) > 0 \n+       && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n+       && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\"\n+  \"#\"\n+  \"TARGET_ARM\n+   && (INTVAL (operands[3]) >= 0 && INTVAL (operands[3]) < 32\n+       && INTVAL (operands[2]) > 0 \n+       && INTVAL (operands[2]) + (INTVAL (operands[3]) & 1) <= 8\n+       && INTVAL (operands[2]) + INTVAL (operands[3]) <= 32)\"\n+  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n+\t\t   (compare:CC_NOOV (and:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (and:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 0)\n+\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t\t\t (match_dup 0) (match_dup 4)))]\n+  \"\n   operands[2] = GEN_INT (((1 << INTVAL (operands[2])) - 1)\n-\t\t\t << INTVAL (operands[3]));\n-  output_asm_insn (\\\"ands\\\\t%0, %1, %2\\\", operands);\n-  return \\\"movne\\\\t%0, #1\\\";\n+\t\t\t << INTVAL (operands[3])); \n+  \"\n+  [(set_attr \"conds\" \"clob\")\n+   (set_attr \"length\" \"8\")]\n+)\n+\n+(define_insn_and_split \"*ite_ne_zeroextractsi_shifted\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(if_then_else:SI (ne (zero_extract:SI\n+\t\t\t      (match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t\t\t      (const_int 0))\n+\t\t\t     (const_int 0))\n+\t\t\t (match_operand:SI 3 \"arm_not_operand\" \"rIK\")\n+\t\t\t (const_int 0)))\n+   (clobber (reg:CC CC_REGNUM))]\n+  \"TARGET_ARM\"\n+  \"#\"\n+  \"TARGET_ARM\"\n+  [(parallel [(set (reg:CC_NOOV CC_REGNUM)\n+\t\t   (compare:CC_NOOV (ashift:SI (match_dup 1) (match_dup 2))\n+\t\t\t\t    (const_int 0)))\n+\t      (set (match_dup 0) (ashift:SI (match_dup 1) (match_dup 2)))])\n+   (set (match_dup 0)\n+\t(if_then_else:SI (eq (reg:CC_NOOV CC_REGNUM) (const_int 0))\n+\t\t\t (match_dup 0) (match_dup 3)))]\n+  \"\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n   \"\n   [(set_attr \"conds\" \"clob\")\n    (set_attr \"length\" \"8\")]"}]}