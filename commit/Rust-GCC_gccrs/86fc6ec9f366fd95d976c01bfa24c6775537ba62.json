{"sha": "86fc6ec9f366fd95d976c01bfa24c6775537ba62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmYzZlYzlmMzY2ZmQ5NWQ5NzZjMDFiZmEyNGM2Nzc1NTM3YmE2Mg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-09-11T10:55:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-09-11T10:55:49Z"}, "message": "Implement LWG 2905 changes to constrain unique_ptr constructors\n\nLWG DR 2905 says that is_constructible_v<unique_ptr<P, D>, P, D const &>\nshould be false when D is not copy constructible. This commit implements\nthe changes from the DR and simplifies the signatures as per\nhttps://github.com/cplusplus/draft/issues/1530\n\n\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Add assertions to\n\tcheck deleter type.\n\t(unique_ptr::unique_ptr(pointer, const deleter_type&)): Add copy\n\tconstructible constraint.\n\t(unique_ptr::unique_ptr(pointer, deleter_type&&)): Disable for\n\tdeleters of reference type and add move constructible constraint.\n\t(unique_ptr::unique_ptr(pointer, remove_reference_t<deleter_type>&&)):\n\tDisable for deleters of non-reference type. Define as deleted.\n\t(unique_ptr<T[], D>): Likewise.\n\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Replace dg-error\n\tdirectives with unstable line numbers with dg-prune-output.\n\t* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Likewise.\n\t* testsuite/20_util/unique_ptr/cons/lwg2905.cc: New test.\n\t* testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc:\n\tMake deleter types invocable.\n\nFrom-SVN: r264206", "tree": {"sha": "ce28f3d56213828fb0d7b4202d9c1940bcb5feab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce28f3d56213828fb0d7b4202d9c1940bcb5feab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86fc6ec9f366fd95d976c01bfa24c6775537ba62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fc6ec9f366fd95d976c01bfa24c6775537ba62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86fc6ec9f366fd95d976c01bfa24c6775537ba62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fc6ec9f366fd95d976c01bfa24c6775537ba62/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9356a18eb4aa927c9e44245075b82fa0c6001789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9356a18eb4aa927c9e44245075b82fa0c6001789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9356a18eb4aa927c9e44245075b82fa0c6001789"}], "stats": {"total": 202, "additions": 160, "deletions": 42}, "files": [{"sha": "1a1a535532e8581c3ba23a1db08ea5030c0f97fd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -1,3 +1,22 @@\n+2018-09-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tImplement LWG 2905 changes to constrain unique_ptr constructors\n+\t* include/bits/unique_ptr.h (__uniq_ptr_impl): Add assertions to\n+\tcheck deleter type.\n+\t(unique_ptr::unique_ptr(pointer, const deleter_type&)): Add copy\n+\tconstructible constraint.\n+\t(unique_ptr::unique_ptr(pointer, deleter_type&&)): Disable for\n+\tdeleters of reference type and add move constructible constraint.\n+\t(unique_ptr::unique_ptr(pointer, remove_reference_t<deleter_type>&&)):\n+\tDisable for deleters of non-reference type. Define as deleted.\n+\t(unique_ptr<T[], D>): Likewise.\n+\t* testsuite/20_util/unique_ptr/assign/48635_neg.cc: Replace dg-error\n+\tdirectives with unstable line numbers with dg-prune-output.\n+\t* testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/lwg2905.cc: New test.\n+\t* testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc:\n+\tMake deleter types invocable.\n+\n 2018-09-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* libsupc++/cxxabi.h (__cxa_demangle): Clarify doxygen comment."}, {"sha": "ddc6ae0e2332f83de30e05ab336fd5f299ee1822", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 53, "deletions": 37, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -139,6 +139,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       using pointer = typename _Ptr<_Tp, _Dp>::type;\n \n+      static_assert( !is_rvalue_reference<_Dp>::value,\n+\t\t     \"unique_ptr's deleter type must be a function object type\"\n+\t\t     \" or an lvalue reference type\" );\n+      static_assert( __is_invocable<_Dp&, pointer&>::value,\n+\t             \"unique_ptr's deleter must be invocable with a pointer\" );\n+\n       __uniq_ptr_impl() = default;\n       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }\n \n@@ -159,9 +165,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template <typename _Tp, typename _Dp = default_delete<_Tp>>\n     class unique_ptr\n     {\n-      template <class _Up>\n-      using _DeleterConstraint =\n-\ttypename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n+      template <typename _Up>\n+\tusing _DeleterConstraint =\n+\t  typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;\n \n       __uniq_ptr_impl<_Tp, _Dp> _M_t;\n \n@@ -170,6 +176,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using element_type  = _Tp;\n       using deleter_type  = _Dp;\n \n+    private:\n       // helper template for detecting a safe conversion from another\n       // unique_ptr\n       template<typename _Up, typename _Ep>\n@@ -183,11 +190,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n                 >\n               >;\n \n+    public:\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n-      template <typename _Up = _Dp,\n-\t\ttypename = _DeleterConstraint<_Up>>\n+      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n \tconstexpr unique_ptr() noexcept\n \t: _M_t()\n         { }\n@@ -198,8 +205,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * The deleter will be value-initialized.\n        */\n-      template <typename _Up = _Dp,\n-\t\ttypename = _DeleterConstraint<_Up>>\n+      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n \texplicit\n \tunique_ptr(pointer __p) noexcept\n \t: _M_t(__p)\n@@ -212,27 +218,34 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * The deleter will be initialized with @p __d\n        */\n-      unique_ptr(pointer __p,\n-\t  typename conditional<is_reference<deleter_type>::value,\n-\t    deleter_type, const deleter_type&>::type __d) noexcept\n-      : _M_t(__p, __d) { }\n+      template<typename _Del = deleter_type,\n+\t       typename = _Require<is_copy_constructible<_Del>>>\n+\tunique_ptr(pointer __p, const deleter_type& __d) noexcept\n+\t: _M_t(__p, __d) { }\n \n       /** Takes ownership of a pointer.\n        *\n        * @param __p  A pointer to an object of @c element_type\n-       * @param __d  An rvalue reference to a deleter.\n+       * @param __d  An rvalue reference to a (non-reference) deleter.\n        *\n        * The deleter will be initialized with @p std::move(__d)\n        */\n-      unique_ptr(pointer __p,\n-\t  typename remove_reference<deleter_type>::type&& __d) noexcept\n-      : _M_t(std::move(__p), std::move(__d))\n-      { static_assert(!std::is_reference<deleter_type>::value,\n-\t\t      \"rvalue deleter bound to reference\"); }\n+      template<typename _Del = deleter_type,\n+\t       typename = _Require<is_move_constructible<_Del>>>\n+\tunique_ptr(pointer __p,\n+\t\t   __enable_if_t<!is_lvalue_reference<_Del>::value,\n+\t\t\t\t _Del&&> __d) noexcept\n+\t: _M_t(__p, std::move(__d))\n+\t{ }\n+\n+      template<typename _Del = deleter_type,\n+\t       typename _DelUnref = typename remove_reference<_Del>::type>\n+\tunique_ptr(pointer,\n+\t\t   __enable_if_t<is_lvalue_reference<_Del>::value,\n+\t\t\t\t _DelUnref&&>) = delete;\n \n       /// Creates a unique_ptr that owns nothing.\n-      template <typename _Up = _Dp,\n-\t\ttypename = _DeleterConstraint<_Up>>\n+      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n \tconstexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n \n       // Move constructors.\n@@ -454,8 +467,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Constructors.\n \n       /// Default constructor, creates a unique_ptr that owns nothing.\n-      template <typename _Up = _Dp,\n-\t\ttypename = _DeleterConstraint<_Up>>\n+      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n \tconstexpr unique_ptr() noexcept\n \t: _M_t()\n         { }\n@@ -485,12 +497,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * The deleter will be initialized with @p __d\n        */\n-      template<typename _Up,\n-               typename = typename enable_if<\n-                 __safe_conversion_raw<_Up>::value, bool>::type>\n-      unique_ptr(_Up __p,\n-                 typename conditional<is_reference<deleter_type>::value,\n-                 deleter_type, const deleter_type&>::type __d) noexcept\n+      template<typename _Up, typename _Del = deleter_type,\n+\t       typename = _Require<__safe_conversion_raw<_Up>,\n+\t\t\t\t   is_copy_constructible<_Del>>>\n+      unique_ptr(_Up __p, const deleter_type& __d) noexcept\n       : _M_t(__p, __d) { }\n \n       /** Takes ownership of a pointer.\n@@ -501,22 +511,28 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * The deleter will be initialized with @p std::move(__d)\n        */\n-      template<typename _Up,\n-               typename = typename enable_if<\n-                 __safe_conversion_raw<_Up>::value, bool>::type>\n-      unique_ptr(_Up __p, typename\n-\t\t remove_reference<deleter_type>::type&& __d) noexcept\n-      : _M_t(std::move(__p), std::move(__d))\n-      { static_assert(!is_reference<deleter_type>::value,\n-\t\t      \"rvalue deleter bound to reference\"); }\n+      template<typename _Up, typename _Del = deleter_type,\n+\t       typename = _Require<__safe_conversion_raw<_Up>,\n+\t\t\t\t   is_move_constructible<_Del>>>\n+\tunique_ptr(_Up __p,\n+\t\t   __enable_if_t<!is_lvalue_reference<_Del>::value,\n+\t\t\t\t _Del&&> __d) noexcept\n+\t: _M_t(std::move(__p), std::move(__d))\n+\t{ }\n+\n+      template<typename _Up, typename _Del = deleter_type,\n+\t       typename _DelUnref = typename remove_reference<_Del>::type,\n+\t       typename = _Require<__safe_conversion_raw<_Up>>>\n+\tunique_ptr(_Up,\n+\t\t   __enable_if_t<is_lvalue_reference<_Del>::value,\n+\t\t\t\t _DelUnref&&>) = delete;\n \n       /// Move constructor.\n       unique_ptr(unique_ptr&& __u) noexcept\n       : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }\n \n       /// Creates a unique_ptr that owns nothing.\n-      template <typename _Up = _Dp,\n-\t\ttypename = _DeleterConstraint<_Up>>\n+      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>\n \tconstexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }\n \n       template<typename _Up, typename _Ep,"}, {"sha": "0c8f8b357bbc461949ce5fe42bdf8650f546e1cd", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/assign/48635_neg.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fassign%2F48635_neg.cc?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -42,10 +42,10 @@ void f()\n   std::unique_ptr<int, D&> ud(nullptr, d);\n   ub = std::move(ud); // { dg-error \"no match\" }\n   ub2 = ud; // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 307 }\n \n   std::unique_ptr<int[], B&> uba(nullptr, b);\n   std::unique_ptr<int[], D&> uda(nullptr, d);\n   uba = std::move(uda); // { dg-error \"no match\" }\n-// { dg-error \"no type\" \"\" { target *-*-* } 566 }\n }\n+\n+// { dg-prune-output \"no type\" }"}, {"sha": "7e820ba129ab98709cb0c3e7c610490334c04c14", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/cv_qual_neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Fcv_qual_neg.cc?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -39,7 +39,7 @@ test07()\n   std::unique_ptr<const A[]> cA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<volatile A[]> vA3(p); // { dg-error \"no matching function\" }\n   std::unique_ptr<const volatile A[]> cvA3(p); // { dg-error \"no matching function\" }\n-  // { dg-error \"no type\" \"\" { target *-*-* } 473 }\n+  // { dg-prune-output \"no type\" }\n }\n \n template<typename T>"}, {"sha": "8700630d1b368bbf025a522469d40d0a3750f9f4", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/cons/lwg2905.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Flwg2905.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Flwg2905.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcons%2Flwg2905.cc?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -0,0 +1,78 @@\n+// Copyright (C) 2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do compile { target c++11 } }\n+\n+#include <memory>\n+\n+template<typename T, typename D, typename P, typename E>\n+constexpr bool check()\n+{ return std::is_constructible<std::unique_ptr<T, D>, P, E>::value; }\n+\n+struct Del { void operator()(void*) const { } };\n+\n+static_assert( ! check<int, Del&, int*, Del>(), \"\" );\n+static_assert( check<int, Del&, int*, Del&>(), \"\" );\n+static_assert( check<int, const Del&, int*, Del&>(), \"\" );\n+static_assert( ! check<int, Del&, int*, const Del&>(), \"\" );\n+static_assert( check<int, Del, int*, const Del&>(), \"\" );\n+static_assert( check<int, Del, int*, Del>(), \"\" );\n+\n+static_assert( ! check<int[], Del&, int*, Del>(), \"\" );\n+static_assert( check<int[], Del&, int*, Del&>(), \"\" );\n+static_assert( check<int[], const Del&, int*, Del&>(), \"\" );\n+static_assert( ! check<int[], Del&, int*, const Del&>(), \"\" );\n+static_assert( check<int[], Del, int*, const Del&>(), \"\" );\n+static_assert( check<int[], Del, int*, Del>(), \"\" );\n+\n+struct DelNoCopy {\n+  DelNoCopy() = default;\n+  DelNoCopy(const DelNoCopy&) = delete;\n+  DelNoCopy(DelNoCopy&&) = default;\n+  void operator()(void*) const { }\n+};\n+\n+static_assert( ! check<int, DelNoCopy&, int*, DelNoCopy>(), \"\" );\n+static_assert( check<int, DelNoCopy&, int*, DelNoCopy&>(), \"\" );\n+static_assert( check<int, const DelNoCopy&, int*, DelNoCopy&>(), \"\" );\n+static_assert( ! check<int, DelNoCopy&, int*, const DelNoCopy&>(), \"\" );\n+static_assert( ! check<int, DelNoCopy, int*, const DelNoCopy&>(), \"\" );\n+static_assert( check<int, DelNoCopy, int*, DelNoCopy>(), \"\" );\n+\n+static_assert( ! check<int[], DelNoCopy&, int*, DelNoCopy>(), \"\" );\n+static_assert( check<int[], DelNoCopy&, int*, DelNoCopy&>(), \"\" );\n+static_assert( check<int[], const DelNoCopy&, int*, DelNoCopy&>(), \"\" );\n+static_assert( ! check<int[], DelNoCopy&, int*, const DelNoCopy&>(), \"\" );\n+static_assert( ! check<int[], DelNoCopy, int*, const DelNoCopy&>(), \"\" );\n+static_assert( check<int[], DelNoCopy, int*, DelNoCopy>(), \"\" );\n+\n+struct Base { virtual ~Base() { } };\n+struct Derived : Base { };\n+\n+static_assert( ! check<Base[], Del&, Base*, Del>(), \"\" );\n+static_assert( check<Base[], Del&, Base*, Del&>(), \"\" );\n+static_assert( check<Base[], const Del&, Base*, Del&>(), \"\" );\n+static_assert( ! check<Base[], Del&, Base*, const Del&>(), \"\" );\n+static_assert( check<Base[], Del, Base*, const Del&>(), \"\" );\n+static_assert( check<Base[], Del, Base*, Del>(), \"\" );\n+\n+static_assert( ! check<Base[], Del&, Derived*, Del>(), \"\" );\n+static_assert( ! check<Base[], Del&, Derived*, Del&>(), \"\" );\n+static_assert( ! check<Base[], const Del&, Derived*, Del&>(), \"\" );\n+static_assert( ! check<Base[], Del&, Derived*, const Del&>(), \"\" );\n+static_assert( ! check<Base[], Del, Derived*, const Del&>(), \"\" );\n+static_assert( ! check<Base[], Del, Derived*, Del>(), \"\" );"}, {"sha": "604685c1ab10e235a6f652e9a54cc195f4d92081", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/specialized_algorithms/swap_cxx17.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fc6ec9f366fd95d976c01bfa24c6775537ba62/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fspecialized_algorithms%2Fswap_cxx17.cc?ref=86fc6ec9f366fd95d976c01bfa24c6775537ba62", "patch": "@@ -21,13 +21,18 @@\n #include <memory>\n \n // Not swappable, and unique_ptr not swappable via the generic std::swap.\n-struct C { };\n+struct C {\n+  void operator()(void*) const { }\n+};\n void swap(C&, C&) = delete;\n \n static_assert( !std::is_swappable_v<std::unique_ptr<int, C>> );\n \n // Not swappable, and unique_ptr not swappable via the generic std::swap.\n-struct D { D(D&&) = delete; };\n+struct D {\n+  D(D&&) = delete;\n+  void operator()(void*) const { }\n+};\n \n static_assert( !std::is_swappable_v<std::unique_ptr<int, D>> );\n "}]}