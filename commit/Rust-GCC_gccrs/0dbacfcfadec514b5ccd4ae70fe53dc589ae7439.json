{"sha": "0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGRiYWNmY2ZhZGVjNTE0YjVjY2Q0YWU3MGZlNTNkYzU4OWFlNzQzOQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-03-13T08:20:27Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-03-13T08:20:27Z"}, "message": "Fix PTA info in IPA ICF (PR ipa/84658).\n\n2018-03-13  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/84658.\n\t* (sem_item_optimizer::sem_item_optimizer): Initialize new\n\tvector.\n\t(sem_item_optimizer::~sem_item_optimizer): Release it.\n\t(sem_item_optimizer::merge_classes): Register variable aliases.\n\t(sem_item_optimizer::fixup_pt_set): New function.\n\t(sem_item_optimizer::fixup_points_to_sets): Likewise.\n\t* ipa-icf.h: Declare new variables and functions.\n2018-03-13  Martin Liska  <mliska@suse.cz>\n\n\tPR ipa/84658.\n\t* g++.dg/ipa/pr84658.C: New test.\n\nFrom-SVN: r258480", "tree": {"sha": "34e19447ee974084a4182df09b8cca148981499b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34e19447ee974084a4182df09b8cca148981499b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e61e48e12ae2737f4738c37bfe05de726dc0e2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e61e48e12ae2737f4738c37bfe05de726dc0e2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e61e48e12ae2737f4738c37bfe05de726dc0e2e"}], "stats": {"total": 170, "additions": 150, "deletions": 20}, "files": [{"sha": "74cb5eb2b03a93f417d5fdc9b848c5fa295ed820", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "patch": "@@ -1,3 +1,14 @@\n+2018-03-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/84658.\n+\t* (sem_item_optimizer::sem_item_optimizer): Initialize new\n+\tvector.\n+\t(sem_item_optimizer::~sem_item_optimizer): Release it.\n+\t(sem_item_optimizer::merge_classes): Register variable aliases.\n+\t(sem_item_optimizer::fixup_pt_set): New function.\n+\t(sem_item_optimizer::fixup_points_to_sets): Likewise.\n+\t* ipa-icf.h: Declare new variables and functions.\n+\n 2018-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/84834"}, {"sha": "1376a54e95efb7334935acf8d6efd19c1a4826dd", "filename": "gcc/ipa-icf.c", "status": "modified", "additions": 92, "deletions": 20, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Fipa-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Fipa-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.c?ref=0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "patch": "@@ -2133,23 +2133,6 @@ sem_variable::get_hash (void)\n   return m_hash;\n }\n \n-/* Set all points-to UIDs of aliases pointing to node N as UID.  */\n-\n-static void\n-set_alias_uids (symtab_node *n, int uid)\n-{\n-  ipa_ref *ref;\n-  FOR_EACH_ALIAS (n, ref)\n-    {\n-      if (dump_file)\n-\tfprintf (dump_file, \"  Setting points-to UID of [%s] as %d\\n\",\n-\t\t xstrdup_for_dump (ref->referring->asm_name ()), uid);\n-\n-      SET_DECL_PT_UID (ref->referring->decl, uid);\n-      set_alias_uids (ref->referring, uid);\n-    }\n-}\n-\n /* Merges instance with an ALIAS_ITEM, where alias, thunk or redirection can\n    be applied.  */\n \n@@ -2276,7 +2259,6 @@ sem_variable::merge (sem_item *alias_item)\n       if (dump_file)\n \tfprintf (dump_file, \"Unified; Variable alias has been created.\\n\");\n \n-      set_alias_uids (original, DECL_UID (original->decl));\n       return true;\n     }\n }\n@@ -2296,7 +2278,7 @@ unsigned int sem_item_optimizer::class_id = 0;\n \n sem_item_optimizer::sem_item_optimizer ()\n : worklist (0), m_classes (0), m_classes_count (0), m_cgraph_node_hooks (NULL),\n-  m_varpool_node_hooks (NULL)\n+  m_varpool_node_hooks (NULL), m_merged_variables ()\n {\n   m_items.create (0);\n   bitmap_obstack_initialize (&m_bmstack);\n@@ -2321,6 +2303,7 @@ sem_item_optimizer::~sem_item_optimizer ()\n   m_items.release ();\n \n   bitmap_obstack_release (&m_bmstack);\n+  m_merged_variables.release ();\n }\n \n /* Write IPA ICF summary for symbols.  */\n@@ -3572,13 +3555,102 @@ sem_item_optimizer::merge_classes (unsigned int prev_class_count)\n \t      }\n \n \t    if (dbg_cnt (merged_ipa_icf))\n-\t      merged_p |= source->merge (alias);\n+\t      {\n+\t\tbool merged = source->merge (alias);\n+\t\tmerged_p |= merged;\n+\n+\t\tif (merged && alias->type == VAR)\n+\t\t  {\n+\t\t    symtab_pair p = symtab_pair (source->node, alias->node);\n+\t\t    m_merged_variables.safe_push (p);\n+\t\t  }\n+\t      }\n \t  }\n       }\n \n+  if (!m_merged_variables.is_empty ())\n+    fixup_points_to_sets ();\n+\n   return merged_p;\n }\n \n+/* Fixup points to set PT.  */\n+\n+void\n+sem_item_optimizer::fixup_pt_set (struct pt_solution *pt)\n+{\n+  if (pt->vars == NULL)\n+    return;\n+\n+  unsigned i;\n+  symtab_pair *item;\n+  FOR_EACH_VEC_ELT (m_merged_variables, i, item)\n+    if (bitmap_bit_p (pt->vars, DECL_UID (item->second->decl)))\n+      bitmap_set_bit (pt->vars, DECL_UID (item->first->decl));\n+}\n+\n+/* Set all points-to UIDs of aliases pointing to node N as UID.  */\n+\n+static void\n+set_alias_uids (symtab_node *n, int uid)\n+{\n+  ipa_ref *ref;\n+  FOR_EACH_ALIAS (n, ref)\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \"  Setting points-to UID of [%s] as %d\\n\",\n+\t\t xstrdup_for_dump (ref->referring->asm_name ()), uid);\n+\n+      SET_DECL_PT_UID (ref->referring->decl, uid);\n+      set_alias_uids (ref->referring, uid);\n+    }\n+}\n+\n+/* Fixup points to analysis info.  */\n+\n+void\n+sem_item_optimizer::fixup_points_to_sets (void)\n+{\n+  /* TODO: remove in GCC 9 and trigger PTA re-creation after IPA passes.  */\n+\n+  cgraph_node *cnode;\n+  return;\n+\n+  FOR_EACH_DEFINED_FUNCTION (cnode)\n+    {\n+      tree name;\n+      unsigned i;\n+      function *fn = DECL_STRUCT_FUNCTION (cnode->decl);\n+      FOR_EACH_SSA_NAME (i, name, fn)\n+\tif (POINTER_TYPE_P (TREE_TYPE (name))\n+\t    && SSA_NAME_PTR_INFO (name))\n+\t  fixup_pt_set (&SSA_NAME_PTR_INFO (name)->pt);\n+      fixup_pt_set (&fn->gimple_df->escaped);\n+\n+       /* The above get's us to 99% I guess, at least catching the\n+\t  address compares.  Below also gets us aliasing correct\n+\t  but as said we're giving leeway to the situation with\n+\t  readonly vars anyway, so ... */\n+       basic_block bb;\n+       FOR_EACH_BB_FN (bb, fn)\n+\tfor (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n+\t     gsi_next (&gsi))\n+\t  {\n+\t    gcall *call = dyn_cast<gcall *> (gsi_stmt (gsi));\n+\t    if (call)\n+\t      {\n+\t\tfixup_pt_set (gimple_call_use_set (call));\n+\t\tfixup_pt_set (gimple_call_clobber_set (call));\n+\t      }\n+\t  }\n+    }\n+\n+  unsigned i;\n+  symtab_pair *item;\n+  FOR_EACH_VEC_ELT (m_merged_variables, i, item)\n+    set_alias_uids (item->first, DECL_UID (item->first->decl));\n+}\n+\n /* Dump function prints all class members to a FILE with an INDENT.  */\n \n void"}, {"sha": "622aebc00c08a266227cb841fa84818761651402", "filename": "gcc/ipa-icf.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Fipa-icf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Fipa-icf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-icf.h?ref=0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "patch": "@@ -141,6 +141,8 @@ class sem_usage_pair\n   unsigned int index;\n };\n \n+typedef std::pair<symtab_node *, symtab_node *> symtab_pair;\n+\n /* Semantic item is a base class that encapsulates all shared functionality\n    for both semantic function and variable items.  */\n class sem_item\n@@ -563,6 +565,12 @@ class sem_item_optimizer\n      processed.  */\n   bool merge_classes (unsigned int prev_class_count);\n \n+  /* Fixup points to analysis info.  */\n+  void fixup_points_to_sets (void);\n+\n+  /* Fixup points to set PT.  */\n+  void fixup_pt_set (struct pt_solution *pt);\n+\n   /* Adds a newly created congruence class CLS to worklist.  */\n   void worklist_push (congruence_class *cls);\n \n@@ -632,6 +640,10 @@ class sem_item_optimizer\n \n   /* Bitmap stack.  */\n   bitmap_obstack m_bmstack;\n+\n+  /* Vector of merged variables.  Needed for fixup of points-to-analysis\n+     info.  */\n+  vec <symtab_pair> m_merged_variables;\n }; // class sem_item_optimizer\n \n } // ipa_icf namespace"}, {"sha": "1f26d4bfaa639075e28f883d423618f07fe36022", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "patch": "@@ -1,3 +1,8 @@\n+2018-03-13  Martin Liska  <mliska@suse.cz>\n+\n+\tPR ipa/84658.\n+\t* g++.dg/ipa/pr84658.C: New test.\n+\n 2018-03-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/84834"}, {"sha": "6846e1832bdf228e95faa0385844b1ddd7fe9ecf", "filename": "gcc/testsuite/g++.dg/ipa/pr84658.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr84658.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0dbacfcfadec514b5ccd4ae70fe53dc589ae7439/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr84658.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr84658.C?ref=0dbacfcfadec514b5ccd4ae70fe53dc589ae7439", "patch": "@@ -0,0 +1,30 @@\n+/* PR ipa/84658 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmerge-all-constants -std=c++11\" } */\n+\n+const int kTestCasesFoo[] = { 0, 1, 2, 3, 4, 5, 8, 15, 16, 17, 512, 1020, 1021, 1022, 1023, 1024 };\n+const int kTestCasesBar[] = { 0, 1, 2, 3, 4, 5, 8, 15, 16, 17, 512, 1020, 1021, 1022, 1023, 1024 };\n+\n+void Foo() {\n+    __builtin_printf(\"foo:\");\n+    for (int count : kTestCasesFoo) {\n+        __builtin_printf(\"%d,\", count);\n+    }\n+    __builtin_printf(\";\\n\");\n+}\n+\n+void Bar() {\n+    __builtin_printf(\"bar:\");\n+    for (int count : kTestCasesBar) {\n+        __builtin_printf(\"%d,\", count);\n+    }\n+    __builtin_printf(\";\\n\");\n+}\n+\n+int main() {\n+    Foo();\n+    Bar();\n+}\n+\n+/* { dg-output \"foo:0,1,2,3,4,5,8,15,16,17,512,1020,1021,1022,1023,1024,;(\\n|\\n\\r|\\r)*\" } */\n+/* { dg-output \"bar:0,1,2,3,4,5,8,15,16,17,512,1020,1021,1022,1023,1024,;(\\n|\\n\\r|\\r)*\" } */"}]}