{"sha": "191736612d202edb3ff400507eab4f2737ddc77d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTkxNzM2NjEyZDIwMmVkYjNmZjQwMDUwN2VhYjRmMjczN2RkYzc3ZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2014-08-12T15:19:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2014-08-12T15:19:53Z"}, "message": "basic_string.h (getline): Qualify call to prevent ADL and add overloads for rvalue streams.\n\n\t* include/bits/basic_string.h (getline): Qualify call to prevent ADL\n\tand add overloads for rvalue streams.\n\t* testsuite/21_strings/basic_string/inserters_extractors/char/12.cc:\n\tNew.\n\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/12.cc:\n\tNew.\n\nFrom-SVN: r213869", "tree": {"sha": "ab681730b2b32b6cbfc2e8d1ccf69bebedfff9fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab681730b2b32b6cbfc2e8d1ccf69bebedfff9fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/191736612d202edb3ff400507eab4f2737ddc77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191736612d202edb3ff400507eab4f2737ddc77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/191736612d202edb3ff400507eab4f2737ddc77d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/191736612d202edb3ff400507eab4f2737ddc77d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909310bc4d8cbe46a686368512c042589f676a00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/909310bc4d8cbe46a686368512c042589f676a00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/909310bc4d8cbe46a686368512c042589f676a00"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "1e1e522665a79fde9f5d8317ba91624e38719ab1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=191736612d202edb3ff400507eab4f2737ddc77d", "patch": "@@ -1,3 +1,12 @@\n+2014-08-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/basic_string.h (getline): Qualify call to prevent ADL\n+\tand add overloads for rvalue streams.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/char/12.cc:\n+\tNew.\n+\t* testsuite/21_strings/basic_string/inserters_extractors/wchar_t/12.cc:\n+\tNew.\n+\n 2014-08-09  Ulrich Drepper  <drepper@gmail.com>\n \n \t* include/ext/random.tcc (uniform_on_sphere_helper): Define."}, {"sha": "6a54d0c20a946d50c94d5fa0b27560a202765088", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=191736612d202edb3ff400507eab4f2737ddc77d", "patch": "@@ -2811,7 +2811,23 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     inline basic_istream<_CharT, _Traits>&\n     getline(basic_istream<_CharT, _Traits>& __is,\n \t    basic_string<_CharT, _Traits, _Alloc>& __str)\n-    { return getline(__is, __str, __is.widen('\\n')); }\n+    { return std::getline(__is, __str, __is.widen('\\n')); }\n+\n+#if __cplusplus >= 201103L\n+  /// Read a line from an rvalue stream into a string.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>&& __is,\n+\t    basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)\n+    { return std::getline(__is, __str, __delim); }\n+\n+  /// Read a line from an rvalue stream into a string.\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n+    inline basic_istream<_CharT, _Traits>&\n+    getline(basic_istream<_CharT, _Traits>&& __is,\n+\t    basic_string<_CharT, _Traits, _Alloc>& __str)\n+    { return std::getline(__is, __str); }\n+#endif\n \n   template<>\n     basic_istream<char>&"}, {"sha": "a0dda5f6390f5acdcd8d3b0f4f6058a50b52ca00", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/char/12.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fchar%2F12.cc?ref=191736612d202edb3ff400507eab4f2737ddc77d", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::string s;\n+  getline(std::istringstream(\"First line\\nSecond line\\n\"), s);\n+  VERIFY( s == \"First line\" );\n+  getline(std::istringstream(\"Third line\\nFourth line\\n\"), s, 'r');\n+  VERIFY( s == \"Thi\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "db20c0293c5090d9077f6e14b02404ec9c5833fe", "filename": "libstdc++-v3/testsuite/21_strings/basic_string/inserters_extractors/wchar_t/12.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F12.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/191736612d202edb3ff400507eab4f2737ddc77d/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F12.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string%2Finserters_extractors%2Fwchar_t%2F12.cc?ref=191736612d202edb3ff400507eab4f2737ddc77d", "patch": "@@ -0,0 +1,38 @@\n+// { dg-options \"-std=gnu++11\" }\n+\n+// Copyright (C) 2014 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  std::wstring s;\n+  getline(std::wistringstream(L\"First line\\nSecond line\\n\"), s);\n+  VERIFY( s == L\"First line\" );\n+  getline(std::wistringstream(L\"Third line\\nFourth line\\n\"), s, L'r');\n+  VERIFY( s == L\"Thi\" );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}