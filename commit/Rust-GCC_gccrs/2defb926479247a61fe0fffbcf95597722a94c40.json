{"sha": "2defb926479247a61fe0fffbcf95597722a94c40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRlZmI5MjY0NzkyNDdhNjFmZTBmZmZiY2Y5NTU5NzcyMmE5NGM0MA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-04-27T21:30:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-04-27T21:30:56Z"}, "message": "semantics.c (finish_non_static_data_member): Call maybe_dummy_object whenever object is NULL_TREE.\n\n\t* semantics.c (finish_non_static_data_member): Call maybe_dummy_object\n\twhenever object is NULL_TREE.  Don't do 'this' capture here.\n\t(finish_qualified_id_expr): Pass NULL_TREE.\n\t(finish_id_expression): Likewise.\n\t(lambda_expr_this_capture): Likewise.\n\nFrom-SVN: r158809", "tree": {"sha": "e5e70558c7dcf231c0f88d65e426b8666c123822", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e5e70558c7dcf231c0f88d65e426b8666c123822"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2defb926479247a61fe0fffbcf95597722a94c40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2defb926479247a61fe0fffbcf95597722a94c40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2defb926479247a61fe0fffbcf95597722a94c40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2defb926479247a61fe0fffbcf95597722a94c40/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38f1276bb50d7ecc37d928c07e6745c2edba24ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38f1276bb50d7ecc37d928c07e6745c2edba24ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38f1276bb50d7ecc37d928c07e6745c2edba24ca"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "f19d06f9dc60df0667dfb33cfad6f6275e663c95", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -1,5 +1,11 @@\n 2010-04-27  Jason Merrill  <jason@redhat.com>\n \n+\t* semantics.c (finish_non_static_data_member): Call maybe_dummy_object\n+\twhenever object is NULL_TREE.  Don't do 'this' capture here.\n+\t(finish_qualified_id_expr): Pass NULL_TREE.\n+\t(finish_id_expression): Likewise.\n+\t(lambda_expr_this_capture): Likewise.\n+\n \t* semantics.c (finish_qualified_id_expr): Use maybe_dummy_object\n \trather than checking current_class_ref directly.\n \t(finish_call_expr): Likewise."}, {"sha": "73fed1538017ddebe5f4f4b2d9ab40a549a6505f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -1424,17 +1424,18 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n {\n   gcc_assert (TREE_CODE (decl) == FIELD_DECL);\n \n-  if (!object && cp_unevaluated_operand != 0)\n+  if (!object)\n     {\n-      /* DR 613: Can use non-static data members without an associated\n-         object in sizeof/decltype/alignof.  */\n       tree scope = qualifying_scope;\n       if (scope == NULL_TREE)\n \tscope = context_for_name_lookup (decl);\n       object = maybe_dummy_object (scope, NULL);\n     }\n \n-  if (!object)\n+  /* DR 613: Can use non-static data members without an associated\n+     object in sizeof/decltype/alignof.  */\n+  if (is_dummy_object (object) && cp_unevaluated_operand == 0\n+      && (!processing_template_decl || !current_class_ref))\n     {\n       if (current_function_decl\n \t  && DECL_STATIC_FUNCTION_P (current_function_decl))\n@@ -1446,19 +1447,6 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n       return error_mark_node;\n     }\n \n-  /* If decl is a non-capture field and object has a lambda type,\n-     then we have a reference to a member of 'this' from a\n-     lambda inside a non-static member function, and we must get to decl\n-     through the 'this' capture.  If decl is not a member of that object,\n-     either, then its access will still fail later.  */\n-  if (LAMBDA_TYPE_P (TREE_TYPE (object))\n-      && !LAMBDA_TYPE_P (DECL_CONTEXT (decl)))\n-    object = cp_build_indirect_ref (lambda_expr_this_capture\n-\t\t\t\t    (CLASSTYPE_LAMBDA_EXPR\n-\t\t\t\t     (TREE_TYPE (object))),\n-                                    RO_NULL,\n-                                    /*complain=*/tf_warning_or_error);\n-\n   if (current_class_ptr)\n     TREE_USED (current_class_ptr) = 1;\n   if (processing_template_decl && !qualifying_scope)\n@@ -1494,21 +1482,6 @@ finish_non_static_data_member (tree decl, tree object, tree qualifying_scope)\n   else\n     {\n       tree access_type = TREE_TYPE (object);\n-      tree lookup_context = context_for_name_lookup (decl);\n-\n-      while (!DERIVED_FROM_P (lookup_context, access_type))\n-\t{\n-\t  access_type = TYPE_CONTEXT (access_type);\n-\t  while (access_type && DECL_P (access_type))\n-\t    access_type = DECL_CONTEXT (access_type);\n-\n-\t  if (!access_type)\n-\t    {\n-\t      error (\"object missing in reference to %q+D\", decl);\n-\t      error (\"from this location\");\n-\t      return error_mark_node;\n-\t    }\n-\t}\n \n       perform_or_defer_access_check (TYPE_BINFO (access_type), decl,\n \t\t\t\t     decl);\n@@ -1683,7 +1656,7 @@ finish_qualified_id_expr (tree qualifying_class,\n   else if (TREE_CODE (expr) == FIELD_DECL)\n     {\n       push_deferring_access_checks (dk_no_check);\n-      expr = finish_non_static_data_member (expr, current_class_ref,\n+      expr = finish_non_static_data_member (expr, NULL_TREE,\n \t\t\t\t\t    qualifying_class);\n       pop_deferring_access_checks ();\n     }\n@@ -3062,7 +3035,7 @@ finish_id_expression (tree id_expression,\n \t\t already.  Turn off checking to avoid duplicate errors.  */\n \t      push_deferring_access_checks (dk_no_check);\n \t      decl = finish_non_static_data_member\n-\t\t       (decl, current_class_ref,\n+\t\t       (decl, NULL_TREE,\n \t\t\t/*qualifying_scope=*/NULL_TREE);\n \t      pop_deferring_access_checks ();\n \t      return decl;\n@@ -3143,7 +3116,7 @@ finish_id_expression (tree id_expression,\n \t     Access checking has been performed during name lookup\n \t     already.  Turn off checking to avoid duplicate errors.  */\n \t  push_deferring_access_checks (dk_no_check);\n-\t  decl = finish_non_static_data_member (decl, current_class_ref,\n+\t  decl = finish_non_static_data_member (decl, NULL_TREE,\n \t\t\t\t\t\t/*qualifying_scope=*/NULL_TREE);\n \t  pop_deferring_access_checks ();\n \t}\n@@ -5844,7 +5817,7 @@ lambda_expr_this_capture (tree lambda)\n       gcc_assert (TYPE_MAIN_VARIANT (TREE_TYPE (current_class_ref)) == TREE_TYPE (lambda));\n \n       result = finish_non_static_data_member (this_capture,\n-                                              current_class_ref,\n+                                              NULL_TREE,\n                                               /*qualifying_scope=*/NULL_TREE);\n \n       /* If 'this' is captured, each use of 'this' is transformed into an"}, {"sha": "1bd00ff9bef5e3de35a60987d7843b1f7d0c4d2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -1,5 +1,10 @@\n 2010-04-27  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/lookup/scoped5.C: Adjust.\n+\t* g++.dg/lookup/scoped8.C: Adjust.\n+\t* g++.dg/template/dependent-expr5.C: Adjust.\n+\t* g++.old-deja/g++.brendan/nest1.C: Adjust.\n+\n \tPR c++/43856\n \t* g++.dg/cpp0x/lambda/lambda-this2.C: New.\n "}, {"sha": "a4aa7298f2c8c5dc860001d1656850ca9f64ed93", "filename": "gcc/testsuite/g++.dg/lookup/scoped5.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped5.C?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -9,11 +9,11 @@ class A {\n public:\n   class B {\n   public:\n-    int a;\t\t\t// { dg-error \"object missing\" }\n+    int a;\n   };\n };\n \n class C {\n public:\n-  void f(void) { sizeof(A::B::a); } // { dg-error \"this location\" }\n+  void f(void) { sizeof(A::B::a); }\n };"}, {"sha": "2764f75c1351e55e2a3dc55eedc567b384fb54d7", "filename": "gcc/testsuite/g++.dg/lookup/scoped8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fscoped8.C?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -7,7 +7,7 @@\n \n struct A\n {\n-    int i;\t\t\t// { dg-error \"object missing\" }\n+    int i;\t\t\t// { dg-error \"non-static\" }\n };\n \n template <int> struct B"}, {"sha": "db67273b36203c0fa0a4ddda20fbc181cdb2d4cb", "filename": "gcc/testsuite/g++.dg/template/dependent-expr5.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fdependent-expr5.C?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -18,7 +18,7 @@ template<class F, class T> void bindb(F (T::*f)(void)) {} // { dg-message \"note\"\n \n struct foo {\n   static int baist;\n-  int bait;\n+  int bait;\t\t\t// { dg-error \"non-static data member\" }\n   void barf ();\n   static void barf (int);\n \n@@ -31,7 +31,7 @@ struct foo {\n     bar() {\n       bind (&baist);\n       bind (&foo::baist);\n-      bind (&bait); // { dg-error \"nonstatic data member\" }\n+      bind (&bait); // { dg-error \"from this location\" }\n       bind (&foo::bait);\n \n       bind (&baikst);\n@@ -75,7 +75,7 @@ struct foo {\n     barT() {\n       bind (&baist);\n       bind (&foo::baist);\n-      bind (&bait); // { dg-error \"nonstatic data member\" }\n+      bind (&bait); // { dg-error \"from this location\" }\n       bind (&foo::bait);\n \n       bind (&baikst);"}, {"sha": "842b2f692e630e5bad363588b5a6bb8d7841eb30", "filename": "gcc/testsuite/g++.old-deja/g++.brendan/nest1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2defb926479247a61fe0fffbcf95597722a94c40/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.brendan%2Fnest1.C?ref=2defb926479247a61fe0fffbcf95597722a94c40", "patch": "@@ -3,7 +3,7 @@\n int x;\n class enclose {\n public:\n-  int x;\n+  int x;\t\t\t// { dg-error \"non-static\" }\n \n   class inner {\n   public:"}]}