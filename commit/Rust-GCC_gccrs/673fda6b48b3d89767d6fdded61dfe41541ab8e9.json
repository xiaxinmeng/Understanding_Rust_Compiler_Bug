{"sha": "673fda6b48b3d89767d6fdded61dfe41541ab8e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjczZmRhNmI0OGIzZDg5NzY3ZDZmZGRlZDYxZGZlNDE1NDFhYjhlOQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2004-05-15T23:07:53Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2004-05-15T23:07:53Z"}, "message": "c-gimplify.c (c_genericize): Replace calls via (*lang_hooks.foo) with lang_hooks.foo.\n\n\t* c-gimplify.c (c_genericize):\n\tReplace calls via (*lang_hooks.foo) with lang_hooks.foo.\n\t* c-parse.in <expr_no_commas>: Likewise.\n\t<if_prefix>: Likewise.\n\t<select_or_iter_stmt>: Likewise.\n\t* expr.c (expand_var, expand_expr_real_1): Likewise.\n\t* expr.h (expand_expr): Make it a static inline function.\n\tMove prototype for expand_expr_real up before this.\n\t* fold-const.c (fold_relational_hi_lo, fold_relational_const):\n\tLikewise.\n\t* gimplify.c (gimple_boolify, gimplify_addr_expr,\n\tgimplify_asm_expr, gimplify_expr): Likewise.\n\t* tree-cfg.c (dump_tree_cfg, dump_cfg_stats, tree_cfg2vcg,\n\tdump_function_to_file): Likewise.\n\t* tree-dfa.c (dump_immediate_uses, dump_dfa_stats): Likewise.\n\t* tree-inline.c (remap_block, save_body, walk_tree): Likewise.\n\t* tree-into-ssa.c (dump_tree_ssa): Likewise.\n\t* tree-mudflap.c (mf_varname_tree, mf_file_function_line_tree):\n\tLikewise.\n\t* tree-optimize.c (execute_one_pass): Likewise.\n\t* tree-pretty-print.c (dump_generic_bb_buff): Likewise.\n\t* tree-ssa-alias.c (dump_alias_stats, dump_alias_info): Likewise.\n\nobjc/\n\t* objc-act.c (objc_build_try_enter_fragment,\n\tobjc_build_try_epilogue, objc_build_catch_stmt,\n\tobjc_build_finally_prologue): Replace calls via (*lang_hooks.foo)\n\twith lang_hooks.foo ().\n\nFrom-SVN: r81907", "tree": {"sha": "5fdd2f53add78078e45a25262bd46f81d4cf8864", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fdd2f53add78078e45a25262bd46f81d4cf8864"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/673fda6b48b3d89767d6fdded61dfe41541ab8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673fda6b48b3d89767d6fdded61dfe41541ab8e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/673fda6b48b3d89767d6fdded61dfe41541ab8e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/673fda6b48b3d89767d6fdded61dfe41541ab8e9/comments", "author": null, "committer": null, "parents": [{"sha": "fb0e7ec09f246a5211b3490753989a3e5e78c481", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb0e7ec09f246a5211b3490753989a3e5e78c481", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb0e7ec09f246a5211b3490753989a3e5e78c481"}], "stats": {"total": 156, "additions": 94, "deletions": 62}, "files": [{"sha": "9ac7ef5d6470e688042de81134fba318311a1a8d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -1,3 +1,33 @@\n+2004-05-15  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* c-gimplify.c (c_genericize):\n+\tReplace calls via (*lang_hooks.foo) with lang_hooks.foo.\n+\t* c-parse.in <expr_no_commas>: Likewise.\n+\t<if_prefix>: Likewise.\n+\t<select_or_iter_stmt>: Likewise.\n+\t* expr.c (expand_var, expand_expr_real_1): Likewise.\n+\t* expr.h (expand_expr): Make it a static inline function.\n+\tMove prototype for expand_expr_real up before this.\n+\t* fold-const.c (fold_relational_hi_lo, fold_relational_const):\n+\tLikewise.\n+\t* gimplify.c (gimple_boolify, gimplify_addr_expr,\n+\tgimplify_asm_expr, gimplify_expr): Likewise.\n+\t* tree-cfg.c (dump_tree_cfg, dump_cfg_stats, tree_cfg2vcg,\n+\tdump_function_to_file): Likewise.\n+\t* tree-dfa.c (dump_immediate_uses, dump_dfa_stats): Likewise.\n+\t* tree-inline.c (remap_block, save_body, walk_tree): Likewise.\n+\t* tree-into-ssa.c (dump_tree_ssa): Likewise.\n+\t* tree-mudflap.c (mf_varname_tree, mf_file_function_line_tree):\n+\tLikewise.\n+\t* tree-optimize.c (execute_one_pass): Likewise.\n+\t* tree-pretty-print.c (dump_generic_bb_buff): Likewise.\n+\t* tree-ssa-alias.c (dump_alias_stats, dump_alias_info): Likewise.\n+\n+\t* objc/objc-act.c (objc_build_try_enter_fragment,\n+\tobjc_build_try_epilogue, objc_build_catch_stmt,\n+\tobjc_build_finally_prologue): Replace calls via (*lang_hooks.foo)\n+\twith lang_hooks.foo ().\n+\n 2004-05-15  Roger Sayle  <roger@eyesopen.com>\n \n \t* builtins.c (simplify_builtin_strcpy): Avoid use of chainon, so"}, {"sha": "9934c2feac5673a8ccfd5060c601c8f069e2ae6e", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -142,7 +142,7 @@ c_genericize (tree fndecl)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\n;; Function %s\",\n-\t       (*lang_hooks.decl_printable_name) (fndecl, 2));\n+\t       lang_hooks.decl_printable_name (fndecl, 2));\n       fprintf (dump_file, \" (%s)\\n\",\n \t       IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (fndecl)));\n       fprintf (dump_file, \";; enabled by -%s\\n\", dump_flag_name (TDI_original));"}, {"sha": "ed187cb80dea06ad9b218c2bc6e751555090a132", "filename": "gcc/c-parse.in", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -566,21 +566,21 @@ expr_no_commas:\n \t| expr_no_commas '^' expr_no_commas\n \t\t{ $$ = parser_build_binary_op ($2, $1, $3); }\n \t| expr_no_commas ANDAND\n-\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n+\t\t{ $1 = lang_hooks.truthvalue_conversion\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_false_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_false_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ANDIF_EXPR, $1, $4); }\n \t| expr_no_commas OROR\n-\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n+\t\t{ $1 = lang_hooks.truthvalue_conversion\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n \t\t  $$ = parser_build_binary_op (TRUTH_ORIF_EXPR, $1, $4); }\n \t| expr_no_commas '?'\n-\t\t{ $1 = (*lang_hooks.truthvalue_conversion)\n+\t\t{ $1 = lang_hooks.truthvalue_conversion\n \t\t    (default_conversion ($1));\n \t\t  skip_evaluation += $1 == truthvalue_false_node; }\n           expr ':'\n@@ -594,7 +594,7 @@ expr_no_commas:\n \t\t    pedwarn (\"ISO C forbids omitting the middle term of a ?: expression\");\n \t\t  /* Make sure first operand is calculated only once.  */\n \t\t  $<ttype>2 = save_expr (default_conversion ($1));\n-\t\t  $1 = (*lang_hooks.truthvalue_conversion) ($<ttype>2);\n+\t\t  $1 = lang_hooks.truthvalue_conversion ($<ttype>2);\n \t\t  skip_evaluation += $1 == truthvalue_true_node; }\n \t  ':' expr_no_commas\n \t\t{ skip_evaluation -= $1 == truthvalue_true_node;\n@@ -2141,7 +2141,7 @@ if_prefix:\n           IF\n                 { $<ttype>$ = c_begin_if_stmt (); }\n             '(' expr ')'\n-\t\t{ c_expand_start_cond ((*lang_hooks.truthvalue_conversion) ($4),\n+\t\t{ c_expand_start_cond (lang_hooks.truthvalue_conversion ($4),\n \t\t\t\t       compstmt_count,$<ttype>2);\n \t\t  $<itype>$ = stmt_count;\n \t\t  if_stmt_locus = $<location>-1; }\n@@ -2247,16 +2247,16 @@ select_or_iter_stmt:\n \t\t  $<ttype>$ = c_begin_while_stmt (); }\n \t  '(' expr ')'\n                 { c_in_iteration_stmt++;\n-\t\t  $4 = (*lang_hooks.truthvalue_conversion) ($4);\n+\t\t  $4 = lang_hooks.truthvalue_conversion ($4);\n \t\t  c_finish_while_stmt_cond\n-\t\t    ((*lang_hooks.truthvalue_conversion) ($4), $<ttype>2);\n+\t\t    (lang_hooks.truthvalue_conversion ($4), $<ttype>2);\n \t\t  $<ttype>$ = add_stmt ($<ttype>2); }\n \t  c99_block_lineno_labeled_stmt\n                 { c_in_iteration_stmt--;\n \t\t  RECHAIN_STMTS ($<ttype>6, WHILE_BODY ($<ttype>6)); }\n \t| do_stmt_start\n \t  '(' expr ')' ';'\n-                { DO_COND ($1) = (*lang_hooks.truthvalue_conversion) ($3); }\n+                { DO_COND ($1) = lang_hooks.truthvalue_conversion ($3); }\n \t| do_stmt_start error\n \t\t{ }\n \t| FOR\n@@ -2269,7 +2269,7 @@ select_or_iter_stmt:\n \t  xexpr ';'\n                 { if ($6)\n \t\t    FOR_COND ($<ttype>2)\n-\t\t      = (*lang_hooks.truthvalue_conversion) ($6); }\n+\t\t      = lang_hooks.truthvalue_conversion ($6); }\n \t  xexpr ')'\n                 { c_in_iteration_stmt++;\n \t\t  FOR_EXPR ($<ttype>2) = $9; }"}, {"sha": "1f8c3ef70d489c3588f452eab916b09f6cf05f7e", "filename": "gcc/expr.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -6211,7 +6211,7 @@ expand_var (tree var)\n \t  set_mem_attributes (x, var, 1);\n \t  SET_DECL_RTL (var, x);\n \t}\n-      else if ((*lang_hooks.expand_decl) (var))\n+      else if (lang_hooks.expand_decl (var))\n \t/* OK.  */;\n       else if (TREE_CODE (var) == VAR_DECL && !TREE_STATIC (var))\n \texpand_decl (var);\n@@ -6860,7 +6860,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t      {\n \t\tif (TREE_USED (block))\n \t\t  abort ();\n-\t\t(*lang_hooks.decls.insert_block) (block);\n+\t\tlang_hooks.decls.insert_block (block);\n \t      }\n \t  }\n \n@@ -7617,10 +7617,9 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t{\n \t  if (DECL_BUILT_IN_CLASS (TREE_OPERAND (TREE_OPERAND (exp, 0), 0))\n \t      == BUILT_IN_FRONTEND)\n-\t  /* ??? Use (*fun) form because expand_expr is a macro.  */\n-\t    return (*lang_hooks.expand_expr) (exp, original_target,\n-\t\t\t\t\t      tmode, modifier,\n-\t\t\t\t\t      alt_rtl);\n+\t    return lang_hooks.expand_expr (exp, original_target,\n+\t\t\t\t\t   tmode, modifier,\n+\t\t\t\t\t   alt_rtl);\n \t  else\n \t    return expand_builtin (exp, target, subtarget, tmode, ignore);\n \t}\n@@ -9365,9 +9364,8 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return const0_rtx;\n \n     default:\n-      /* ??? Use (*fun) form because expand_expr is a macro.  */\n-      return (*lang_hooks.expand_expr) (exp, original_target, tmode,\n-\t\t\t\t\tmodifier, alt_rtl);\n+      return lang_hooks.expand_expr (exp, original_target, tmode,\n+\t\t\t\t     modifier, alt_rtl);\n     }\n \n   /* Here to do an ordinary binary operator, generating an instruction"}, {"sha": "5c8f9408ba025a37d23ba7e2e9b1aaa775bcd0bc", "filename": "gcc/expr.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -508,13 +508,19 @@ extern rtx store_expr (tree, rtx, int);\n    Useful after calling expand_expr with 1 as sum_ok.  */\n extern rtx force_operand (rtx, rtx);\n \n+/* Work horse for expand_expr.  */\n+extern rtx expand_expr_real (tree, rtx, enum machine_mode, \n+\t\t\t     enum expand_modifier, rtx *);\n+\n /* Generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null.\n    In the case of a void EXP, const0_rtx is returned.  */\n-#define expand_expr(EXP, TARGET, MODE, MODIFIER) \\\n-  expand_expr_real((EXP), (TARGET), (MODE), (MODIFIER), NULL)\n-extern rtx expand_expr_real (tree, rtx, enum machine_mode, \n-\t\t\t     enum expand_modifier, rtx *);\n+static inline rtx\n+expand_expr (tree exp, rtx target, enum machine_mode mode,\n+\t     enum expand_modifier modifier)\n+{\n+  return expand_expr_real(exp, target, mode, modifier, NULL);\n+}\n \n extern void expand_var (tree);\n "}, {"sha": "1705fb6b6b2e4aca39bf851e4e2cde4f5dc84ba9", "filename": "gcc/fold-const.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -9372,8 +9372,8 @@ fold_relational_hi_lo (enum tree_code *code_p, const tree type, tree *op0_p,\n \t  if (code == LE_EXPR || code == GT_EXPR)\n \t    {\n \t      tree st0, st1, exp, retval;\n-\t      st0 = (*lang_hooks.types.signed_type) (TREE_TYPE (op0));\n-\t      st1 = (*lang_hooks.types.signed_type) (TREE_TYPE (op1));\n+\t      st0 = lang_hooks.types.signed_type (TREE_TYPE (op0));\n+\t      st1 = lang_hooks.types.signed_type (TREE_TYPE (op1));\n \n \t      exp = build (code == LE_EXPR ? GE_EXPR: LT_EXPR,\n \t\t\t   type,\n@@ -10013,7 +10013,7 @@ fold_relational_const (enum tree_code code, tree type, tree op0, tree op1)\n \n   TREE_TYPE (tem) = type;\n   if (TREE_CODE (type) == BOOLEAN_TYPE)\n-    return (*lang_hooks.truthvalue_conversion) (tem);\n+    return lang_hooks.truthvalue_conversion (tem);\n   return tem;\n }\n "}, {"sha": "907d443dca579c559ff2b2ff7f24b284f7576484", "filename": "gcc/gimplify.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -2229,7 +2229,7 @@ gimple_boolify (tree expr)\n \n   /* If this is the predicate of a COND_EXPR, it might not even be a\n      truthvalue yet.  */\n-  expr = (*lang_hooks.truthvalue_conversion) (expr);\n+  expr = lang_hooks.truthvalue_conversion (expr);\n \n   switch (TREE_CODE (expr))\n     {\n@@ -2693,7 +2693,7 @@ gimplify_addr_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t  recompute_tree_invarant_for_addr_expr (expr);\n \n \t  /* Mark the RHS addressable.  */\n-\t  (*lang_hooks.mark_addressable) (TREE_OPERAND (expr, 0));\n+\t  lang_hooks.mark_addressable (TREE_OPERAND (expr, 0));\n \t}\n       break;\n     }\n@@ -2736,7 +2736,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \t\t\t       &allows_mem, &allows_reg, &is_inout);\n \n       if (!allows_reg && allows_mem)\n-\t(*lang_hooks.mark_addressable) (TREE_VALUE (link));\n+\tlang_hooks.mark_addressable (TREE_VALUE (link));\n \n       tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n \t\t\t    is_inout ? is_gimple_min_lval : is_gimple_lvalue,\n@@ -2786,7 +2786,7 @@ gimplify_asm_expr (tree *expr_p, tree *pre_p, tree *post_p)\n       /* If the operand is a memory input, it should be an lvalue.  */\n       if (!allows_reg && allows_mem)\n \t{\n-\t  (*lang_hooks.mark_addressable) (TREE_VALUE (link));\n+\t  lang_hooks.mark_addressable (TREE_VALUE (link));\n \t  tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n \t\t\t\tis_gimple_lvalue, fb_lvalue | fb_mayfail);\n \t  if (tret == GS_ERROR)\n@@ -3100,7 +3100,7 @@ gimplify_expr (tree *expr_p, tree *pre_p, tree *post_p,\n \t}\n \n       /* Do any language-specific gimplification.  */\n-      ret = (*lang_hooks.gimplify_expr) (expr_p, pre_p, post_p);\n+      ret = lang_hooks.gimplify_expr (expr_p, pre_p, post_p);\n       if (ret == GS_OK)\n \t{\n \t  if (*expr_p == NULL_TREE)"}, {"sha": "385360a28ebcc987948192a42629d3c12ebb07e5", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -2825,8 +2825,7 @@ objc_build_try_enter_fragment (void)\n   cond = build_unary_op (TRUTH_NOT_EXPR,\n \t\t\t build_function_call (objc_setjmp_decl, func_params),\n \t\t\t 0);\n-  c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (cond),\n-\t\t       0, if_stmt);\n+  c_expand_start_cond (lang_hooks.truthvalue_conversion (cond), 0, if_stmt);\n   objc_enter_block ();\n }\n \n@@ -2953,7 +2952,7 @@ objc_build_try_epilogue (int also_catch_prologue)\n       val_stack_push (&catch_count_stack, 1);\n       if_stmt = c_begin_if_stmt ();\n       if_nesting_count++;\n-      c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (boolean_false_node),\n+      c_expand_start_cond (lang_hooks.truthvalue_conversion (boolean_false_node),\n \t\t\t   0, if_stmt);\n       objc_enter_block ();\n \n@@ -3043,8 +3042,7 @@ objc_build_catch_stmt (tree catch_expr)\n       cond = build_function_call (objc_exception_match_decl, func_params);\n     }\n \n-  c_expand_start_cond ((*lang_hooks.truthvalue_conversion) (cond),\n-\t\t       0, if_stmt);\n+  c_expand_start_cond (lang_hooks.truthvalue_conversion (cond), 0, if_stmt);\n   objc_enter_block ();\n   objc_declare_variable (RID_REGISTER, var_name,\n \t\t\t build_pointer_type (var_type),\n@@ -3113,10 +3111,10 @@ objc_build_finally_prologue (void)\n   tree if_stmt = c_begin_if_stmt ();\n   if_nesting_count++;\n \n-  c_expand_start_cond ((*lang_hooks.truthvalue_conversion)\n-\t\t       (build_unary_op\n-\t\t        (TRUTH_NOT_EXPR,\n-\t\t\t TREE_VALUE (objc_rethrow_exception), 0)),\n+  c_expand_start_cond (lang_hooks.truthvalue_conversion\n+\t\t\t(build_unary_op (TRUTH_NOT_EXPR,\n+\t\t\t\t\t TREE_VALUE (objc_rethrow_exception),\n+\t\t\t\t\t 0)),\n \t\t       0, if_stmt);\n   objc_enter_block ();\n   objc_build_try_exit_fragment ();\n@@ -3141,7 +3139,7 @@ objc_build_finally_epilogue (void)\n   if_nesting_count++;\n \n   c_expand_start_cond\n-    ((*lang_hooks.truthvalue_conversion) (TREE_VALUE (objc_rethrow_exception)),\n+    (lang_hooks.truthvalue_conversion (TREE_VALUE (objc_rethrow_exception)),\n      0, if_stmt);\n   objc_enter_block ();\n   objc_build_throw_stmt (TREE_VALUE (objc_rethrow_exception));"}, {"sha": "9e468f47ccc4a4206860a9a9346c5aa49ddccca7", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -2141,7 +2141,7 @@ dump_tree_cfg (FILE *file, int flags)\n   if (flags & TDF_DETAILS)\n     {\n       const char *funcname\n-\t= (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+\t= lang_hooks.decl_printable_name (current_function_decl, 2);\n \n       fputc ('\\n', file);\n       fprintf (file, \";; Function %s\\n\\n\", funcname);\n@@ -2172,7 +2172,7 @@ dump_cfg_stats (FILE *file)\n   const char * const fmt_str_1 = \"%-30s%13lu%11lu%c\\n\";\n   const char * const fmt_str_3 = \"%-43s%11lu%c\\n\";\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n \n   fprintf (file, \"\\nCFG Statistics for %s\\n\\n\", funcname);\n@@ -2237,7 +2237,7 @@ tree_cfg2vcg (FILE *file)\n   edge e;\n   basic_block bb;\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   /* Write the file header.  */\n   fprintf (file, \"graph: { title: \\\"%s\\\"\\n\", funcname);\n@@ -4062,7 +4062,7 @@ dump_function_to_file (tree fn, FILE *file, int flags)\n   basic_block bb;\n   tree chain;\n \n-  fprintf (file, \"%s (\", (*lang_hooks.decl_printable_name) (fn, 2));\n+  fprintf (file, \"%s (\", lang_hooks.decl_printable_name (fn, 2));\n \n   arg = DECL_ARGUMENTS (fn);\n   while (arg)"}, {"sha": "f3fa63aa6d89620bb4164d1a5cb6d55575f56240", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -605,7 +605,7 @@ dump_immediate_uses (FILE *file)\n   basic_block bb;\n   block_stmt_iterator si;\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   fprintf (file, \"\\nDef-use edges for function %s\\n\", funcname);\n \n@@ -682,7 +682,7 @@ dump_dfa_stats (FILE *file)\n   const char * const fmt_str_1 = \"%-30s%13lu%11lu%c\\n\";\n   const char * const fmt_str_3 = \"%-43s%11lu%c\\n\";\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   collect_dfa_stats (&dfa_stats);\n "}, {"sha": "f234651c7a0fa867ffba40cb07411d97a8175081", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -394,7 +394,7 @@ remap_block (tree *block, inline_data *id)\n     /* We're building a clone; DECL_INITIAL is still\n        error_mark_node, and current_binding_level is the parm\n        binding level.  */\n-    (*lang_hooks.decls.insert_block) (new_block);\n+    lang_hooks.decls.insert_block (new_block);\n   else\n     {\n       /* Attach this new block after the DECL_INITIAL block for the\n@@ -1930,7 +1930,7 @@ save_body (tree fn, tree *arg_copy)\n   for (parg = arg_copy; *parg; parg = &TREE_CHAIN (*parg))\n     {\n       tree new = copy_node (*parg);\n-      (*lang_hooks.dup_lang_specific_decl) (new);\n+      lang_hooks.dup_lang_specific_decl (new);\n       DECL_ABSTRACT_ORIGIN (new) = DECL_ORIGIN (*parg);\n       insert_decl_map (&id, *parg, new);\n       TREE_CHAIN (new) = TREE_CHAIN (*parg);\n@@ -2017,8 +2017,8 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n \treturn NULL_TREE;\n     }\n \n-  result = (*lang_hooks.tree_inlining.walk_subtrees) (tp, &walk_subtrees, func,\n-\t\t\t\t\t\t      data, htab);\n+  result = lang_hooks.tree_inlining.walk_subtrees (tp, &walk_subtrees, func,\n+\t\t\t\t\t\t   data, htab);\n   if (result || ! walk_subtrees)\n     return result;\n \n@@ -2056,7 +2056,7 @@ walk_tree (tree *tp, walk_tree_fn func, void *data, void *htab_)\n \t}\n #endif\n \n-      if ((*lang_hooks.tree_inlining.tree_chain_matters_p) (*tp))\n+      if (lang_hooks.tree_inlining.tree_chain_matters_p (*tp))\n \t/* Check our siblings.  */\n \tWALK_SUBTREE_TAIL (TREE_CHAIN (*tp));\n     }"}, {"sha": "368ffdf82c063bf500e8939c9f4786fc9175f27a", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -570,7 +570,7 @@ dump_tree_ssa (FILE *file)\n {\n   basic_block bb;\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   fprintf (file, \"SSA information for %s\\n\\n\", funcname);\n "}, {"sha": "1d4acc8b020f9c99b0082c55936110bd3b2b2a89", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -344,7 +344,7 @@ mf_varname_tree (tree decl)\n       {\n         const char *funcname = NULL;\n         if (DECL_NAME (current_function_decl))\n-          funcname = (*lang_hooks.decl_printable_name) (current_function_decl, 1);\n+          funcname = lang_hooks.decl_printable_name (current_function_decl, 1);\n         if (funcname == NULL)\n           funcname = \"anonymous fn\";\n \n@@ -369,7 +369,7 @@ mf_varname_tree (tree decl)\n       }\n \n     if (declname == NULL)\n-      declname = (*lang_hooks.decl_printable_name) (decl, 3);\n+      declname = lang_hooks.decl_printable_name (decl, 3);\n \n     if (declname == NULL)\n       declname = \"<unnamed variable>\";\n@@ -415,7 +415,7 @@ mf_file_function_line_tree (location_t *locus)\n     colon = line = \"\";\n \n   /* Add (FUNCTION).  */\n-  name = (*lang_hooks.decl_printable_name) (current_function_decl, 1);\n+  name = lang_hooks.decl_printable_name (current_function_decl, 1);\n   if (name)\n     {\n       op = \" (\";"}, {"sha": "ee03a98f1d69fd5eecde6e0eb53bdd3c3170bc56", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -386,7 +386,7 @@ execute_one_pass (struct tree_opt_pass *pass)\n       if (dump_file)\n \t{\n \t  const char *dname, *aname;\n-\t  dname = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+\t  dname = lang_hooks.decl_printable_name (current_function_decl, 2);\n \t  aname = (IDENTIFIER_POINTER\n \t\t   (DECL_ASSEMBLER_NAME (current_function_decl)));\n \t  fprintf (dump_file, \"\\n;; Function %s (%s)\\n\\n\", dname, aname);"}, {"sha": "e4c6b07b70e3227ee23cb9fd72b17d4e307f5dbd", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -52,8 +52,8 @@ static void dump_generic_bb_buff (pretty_printer *, basic_block, int, int);\n \n #define PRINT_FUNCTION_NAME(NODE)  pp_printf             \\\n   (buffer, \"%s\", TREE_CODE (NODE) == NOP_EXPR ?              \\\n-   (*lang_hooks.decl_printable_name) (TREE_OPERAND (NODE, 0), 1) : \\\n-   (*lang_hooks.decl_printable_name) (NODE, 1))\n+   lang_hooks.decl_printable_name (TREE_OPERAND (NODE, 0), 1) : \\\n+   lang_hooks.decl_printable_name (NODE, 1))\n \n #define MASK_POINTER(P)\t((unsigned)((unsigned long)(P) & 0xffff))\n "}, {"sha": "f7afc6f2a8a015f203fa77801f87a8294ead0f46", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/673fda6b48b3d89767d6fdded61dfe41541ab8e9/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=673fda6b48b3d89767d6fdded61dfe41541ab8e9", "patch": "@@ -1919,7 +1919,7 @@ static void\n dump_alias_stats (FILE *file)\n {\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n   fprintf (file, \"\\nAlias statistics for %s\\n\\n\", funcname);\n   fprintf (file, \"Total alias queries:\\t%u\\n\", alias_stats.alias_queries);\n   fprintf (file, \"Total alias mayalias results:\\t%u\\n\", \n@@ -1948,7 +1948,7 @@ dump_alias_info (FILE *file)\n {\n   size_t i;\n   const char *funcname\n-    = (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    = lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   fprintf (file, \"\\nAlias information for %s\\n\\n\", funcname);\n \n@@ -2031,7 +2031,7 @@ dump_points_to_info (FILE *file)\n   block_stmt_iterator si;\n   size_t i;\n   const char *fname =\n-    (*lang_hooks.decl_printable_name) (current_function_decl, 2);\n+    lang_hooks.decl_printable_name (current_function_decl, 2);\n \n   fprintf (file, \"\\n\\nPointed-to sets for pointers in %s\\n\\n\", fname);\n "}]}