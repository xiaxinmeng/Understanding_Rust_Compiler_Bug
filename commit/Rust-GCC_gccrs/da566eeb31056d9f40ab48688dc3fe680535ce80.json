{"sha": "da566eeb31056d9f40ab48688dc3fe680535ce80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGE1NjZlZWIzMTA1NmQ5ZjQwYWI0ODY4OGRjM2ZlNjgwNTM1Y2U4MA==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2020-01-08T03:57:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-03T10:01:38Z"}, "message": "[Ada] Incorrect accessibility checking on aliased formals\n\n2020-06-03  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* libgnat/a-cborse.adb, libgnat/a-cihase.adb,\n\tlibgnat/a-ciorse.adb, libgnat/a-coorse.adb: Modified to use\n\t'Unrestricted_Access in certain cases where static accessibility\n\terrors were triggered.\n\t* exp_ch6.adb (Expand_Simple_Return_Statement): Add generation\n\tof dynamic accessibility checks as determined by\n\tIs_Special_Aliased_Formal_Access.\n\t* sem_attr.adb (Resolve_Attribute): Add call to\n\tIs_Special_Aliased_Formal_Access to avoid performing static\n\tchecks where dynamic ones are required.\n\t* sem_ch6.adb (Check_Return_Obj_Accessibility): Handle renamed\n\tobjects within component associations requiring special\n\taccessibility checks.\n\t* sem_util.adb, sem_util.ads (Is_Special_Aliased_Formal_Access):\n\tCreated to detect the special case where an aliased formal is\n\tbeing compared against the level of an anonymous access return\n\tobject.\n\t(Object_Access_Level): Remove incorrect condition leading to\n\toverly permissive accessibility levels being returned on\n\texplicitly aliased parameters.", "tree": {"sha": "1061a9df6eff0d0cd091dd626c0232c37027a82b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1061a9df6eff0d0cd091dd626c0232c37027a82b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da566eeb31056d9f40ab48688dc3fe680535ce80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da566eeb31056d9f40ab48688dc3fe680535ce80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da566eeb31056d9f40ab48688dc3fe680535ce80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da566eeb31056d9f40ab48688dc3fe680535ce80/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e267f9fb23da4e9553a97dc45ea757545cf521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79e267f9fb23da4e9553a97dc45ea757545cf521", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79e267f9fb23da4e9553a97dc45ea757545cf521"}], "stats": {"total": 201, "additions": 134, "deletions": 67}, "files": [{"sha": "11980a6684c7a0ebfa4722878f253b4b39c46a11", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 32, "deletions": 22, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -6769,6 +6769,28 @@ package body Exp_Ch6 is\n       --  of the return object to the specific type on assignments to the\n       --  individual components.\n \n+      procedure Check_Against_Result_Level (Level : Node_Id);\n+      --  Check the given accessibility level against the level\n+      --  determined by the point of call. (AI05-0234).\n+\n+      --------------------------------\n+      -- Check_Against_Result_Level --\n+      --------------------------------\n+\n+      procedure Check_Against_Result_Level (Level : Node_Id) is\n+      begin\n+         Insert_Action (N,\n+           Make_Raise_Program_Error (Loc,\n+             Condition =>\n+               Make_Op_Gt (Loc,\n+                 Left_Opnd  => Level,\n+                 Right_Opnd =>\n+                   New_Occurrence_Of\n+                     (Extra_Accessibility_Of_Result (Scope_Id), Loc)),\n+                 Reason => PE_Accessibility_Check_Failed));\n+      end Check_Against_Result_Level;\n+\n+   --  Start of processing for Expand_Simple_Function_Return\n    begin\n       if Is_Class_Wide_Type (R_Type)\n         and then not Is_Class_Wide_Type (Exptyp)\n@@ -7315,6 +7337,16 @@ package body Exp_Ch6 is\n              Suppress  => All_Checks);\n       end if;\n \n+      --  Determine if the special rules within RM 3.10.2 for explicitly\n+      --  aliased formals apply to Exp - in which case we require a dynamic\n+      --  check to be generated.\n+\n+      if Is_Special_Aliased_Formal_Access (Exp, Scope_Id) then\n+         Check_Against_Result_Level\n+           (Make_Integer_Literal (Loc,\n+             Object_Access_Level (Entity (Ultimate_Prefix (Prefix (Exp))))));\n+      end if;\n+\n       --  AI05-0234: RM 6.5(21/3). Check access discriminants to\n       --  ensure that the function result does not outlive an\n       --  object designated by one of it discriminants.\n@@ -7324,28 +7356,6 @@ package body Exp_Ch6 is\n       then\n          declare\n             Discrim_Source : Node_Id;\n-\n-            procedure Check_Against_Result_Level (Level : Node_Id);\n-            --  Check the given accessibility level against the level\n-            --  determined by the point of call. (AI05-0234).\n-\n-            --------------------------------\n-            -- Check_Against_Result_Level --\n-            --------------------------------\n-\n-            procedure Check_Against_Result_Level (Level : Node_Id) is\n-            begin\n-               Insert_Action (N,\n-                 Make_Raise_Program_Error (Loc,\n-                   Condition =>\n-                     Make_Op_Gt (Loc,\n-                       Left_Opnd  => Level,\n-                       Right_Opnd =>\n-                         New_Occurrence_Of\n-                           (Extra_Accessibility_Of_Result (Scope_Id), Loc)),\n-                       Reason => PE_Accessibility_Check_Failed));\n-            end Check_Against_Result_Level;\n-\n          begin\n             Discrim_Source := Exp;\n             while Nkind (Discrim_Source) = N_Qualified_Expression loop"}, {"sha": "649b6c1827d925d7fe722f76cb77ff52f9741364", "filename": "gcc/ada/libgnat/a-cborse.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -933,7 +933,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n                           Control =>\n                             (Controlled with\n                               Container.TC'Unrestricted_Access,\n-                              Container => Container'Access,\n+                              Container => Container'Unchecked_Access,\n                               Pos       => Position,\n                               Old_Key   => new Key_Type'(Key (Position))))\n             do\n@@ -961,7 +961,7 @@ package body Ada.Containers.Bounded_Ordered_Sets is\n                           Control =>\n                             (Controlled with\n                               Container.TC'Unrestricted_Access,\n-                              Container => Container'Access,\n+                              Container => Container'Unchecked_Access,\n                                Pos      => Find (Container, Key),\n                                Old_Key  => new Key_Type'(Key)))\n             do"}, {"sha": "1c5179936b9ebc59046ea68659196fdcb39fa995", "filename": "gcc/ada/libgnat/a-cihase.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -2227,7 +2227,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n                           Control =>\n                             (Controlled with\n                               HT.TC'Unrestricted_Access,\n-                              Container => Container'Access,\n+                              Container => Container'Unchecked_Access,\n                               Index     => HT_Ops.Index (HT, Position.Node),\n                               Old_Pos   => Position,\n                               Old_Hash  => Hash (Key (Position))))\n@@ -2261,7 +2261,7 @@ package body Ada.Containers.Indefinite_Hashed_Sets is\n                           Control =>\n                             (Controlled with\n                               HT.TC'Unrestricted_Access,\n-                              Container => Container'Access,\n+                              Container => Container'Unchecked_Access,\n                               Index     => HT_Ops.Index (HT, P.Node),\n                               Old_Pos   => P,\n                               Old_Hash  => Hash (Key)))"}, {"sha": "349a59d69ac468ee57498190f8c4c923888a0a0e", "filename": "gcc/ada/libgnat/a-ciorse.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -1013,7 +1013,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n                Control =>\n                  (Controlled with\n                     Tree.TC'Unrestricted_Access,\n-                    Container => Container'Access,\n+                    Container => Container'Unchecked_Access,\n                     Pos       => Position,\n                     Old_Key   => new Key_Type'(Key (Position))))\n          do\n@@ -1045,7 +1045,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n                Control =>\n                  (Controlled with\n                     Tree.TC'Unrestricted_Access,\n-                    Container => Container'Access,\n+                    Container => Container'Unchecked_Access,\n                     Pos       => Find (Container, Key),\n                     Old_Key   => new Key_Type'(Key)))\n             do"}, {"sha": "7291e0aa6d2591d358a93e5575cff6b809b8c315", "filename": "gcc/ada/libgnat/a-coorse.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -899,7 +899,7 @@ package body Ada.Containers.Ordered_Sets is\n                  Control =>\n                    (Controlled with\n                      Tree.TC'Unrestricted_Access,\n-                     Container => Container'Access,\n+                     Container => Container'Unchecked_Access,\n                      Pos       => Position,\n                      Old_Key   => new Key_Type'(Key (Position))))\n             do\n@@ -927,7 +927,7 @@ package body Ada.Containers.Ordered_Sets is\n                  Control =>\n                    (Controlled with\n                      Tree.TC'Unrestricted_Access,\n-                     Container => Container'Access,\n+                     Container => Container'Unchecked_Access,\n                      Pos       => Find (Container, Key),\n                      Old_Key   => new Key_Type'(Key)))\n             do"}, {"sha": "07f0117878671dd1e8ec9d20c6533356cf36d3bd", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -10970,9 +10970,19 @@ package body Sem_Attr is\n \n                             or else Nkind (Associated_Node_For_Itype (Btyp)) =\n                                                         N_Object_Declaration)\n+                 and then Attr_Id = Attribute_Access\n+\n+                 --  Verify that static checking is OK (namely that we aren't\n+                 --  in a specific context requiring dynamic checks on\n+                 --  expicitly aliased parameters), and then check the level.\n+\n+                 --  Otherwise a check will be generated later when the return\n+                 --  statement gets expanded.\n+\n+                 and then not Is_Special_Aliased_Formal_Access\n+                                (N, Current_Scope)\n                  and then\n                    Object_Access_Level (P) > Deepest_Type_Access_Level (Btyp)\n-                 and then Attr_Id = Attribute_Access\n                then\n                   --  In an instance, this is a runtime check, but one we know\n                   --  will fail, so generate an appropriate warning. As usual,"}, {"sha": "0b002eb59276734d5ce2619775a628b3a114f49d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -813,40 +813,51 @@ package body Sem_Ch6 is\n                then\n                   --  Obtain the object to perform static checks on by moving\n                   --  up the prefixes in the expression taking into account\n-                  --  named access types.\n+                  --  named access types and renamed objects within the\n+                  --  expression.\n \n                   Obj := Original_Node (Prefix (Expr));\n-                  while Nkind_In (Obj, N_Explicit_Dereference,\n-                                       N_Indexed_Component,\n-                                       N_Selected_Component)\n                   loop\n-                     --  When we encounter a named access type then we can\n-                     --  ignore accessibility checks on the dereference.\n+                     while Nkind_In (Obj, N_Explicit_Dereference,\n+                                          N_Indexed_Component,\n+                                          N_Selected_Component)\n+                     loop\n+                        --  When we encounter a named access type then we can\n+                        --  ignore accessibility checks on the dereference.\n \n-                     if Ekind (Etype (Original_Node (Prefix (Obj))))\n-                          in E_Access_Type ..\n-                             E_Access_Protected_Subprogram_Type\n-                     then\n-                        if Nkind (Obj) = N_Selected_Component then\n-                           Obj := Selector_Name (Obj);\n-                        else\n-                           Obj := Original_Node (Prefix (Obj));\n+                        if Ekind (Etype (Original_Node (Prefix (Obj))))\n+                             in E_Access_Type ..\n+                                E_Access_Protected_Subprogram_Type\n+                        then\n+                           if Nkind (Obj) = N_Selected_Component then\n+                              Obj := Selector_Name (Obj);\n+                           else\n+                              Obj := Original_Node (Prefix (Obj));\n+                           end if;\n+                           exit;\n                         end if;\n-                        exit;\n+\n+                        Obj := Original_Node (Prefix (Obj));\n+                     end loop;\n+\n+                     if Nkind (Obj) = N_Selected_Component then\n+                        Obj := Selector_Name (Obj);\n                      end if;\n \n-                     Obj := Original_Node (Prefix (Obj));\n-                  end loop;\n+                     --  Check for renamings\n \n-                  if Nkind (Obj) = N_Selected_Component then\n-                     Obj := Selector_Name (Obj);\n-                  end if;\n+                     pragma Assert (Is_Entity_Name (Obj));\n+\n+                     if Present (Renamed_Object (Entity (Obj))) then\n+                        Obj := Renamed_Object (Entity (Obj));\n+                     else\n+                        exit;\n+                     end if;\n+                  end loop;\n \n                   --  Do not check aliased formals or function calls. A\n                   --  run-time check may still be needed ???\n \n-                  pragma Assert (Is_Entity_Name (Obj));\n-\n                   if Is_Formal (Entity (Obj))\n                     and then Is_Aliased (Entity (Obj))\n                   then"}, {"sha": "09fcfb785ec439d04dbe62104fb180a8b6b70d6e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -17885,6 +17885,44 @@ package body Sem_Util is\n       end if;\n    end Is_SPARK_05_Object_Reference;\n \n+   --------------------------------------\n+   -- Is_Special_Aliased_Formal_Access --\n+   --------------------------------------\n+\n+   function Is_Special_Aliased_Formal_Access\n+     (Exp  : Node_Id;\n+      Scop : Entity_Id) return Boolean is\n+   begin\n+      --  Verify the expression is an access reference to 'Access within a\n+      --  return statement as this is the only time an explicitly aliased\n+      --  formal has different semantics.\n+\n+      if Nkind (Exp) /= N_Attribute_Reference\n+        or else Get_Attribute_Id (Attribute_Name (Exp)) /= Attribute_Access\n+        or else Nkind (Parent (Exp)) /= N_Simple_Return_Statement\n+      then\n+         return False;\n+      end if;\n+\n+      --  Check if the prefix of the reference is indeed an explicitly aliased\n+      --  formal parameter for the function Scop. Additionally, we must check\n+      --  that Scop returns an anonymous access type, otherwise the special\n+      --  rules dictating a need for a dynamic check are not in effect.\n+\n+      declare\n+         P_Ult : constant Node_Id := Ultimate_Prefix (Prefix (Exp));\n+      begin\n+         return Is_Entity_Name (P_Ult)\n+           and then Is_Aliased (Entity (P_Ult))\n+           and then Is_Formal  (Entity (P_Ult))\n+           and then Scope (Entity (P_Ult)) = Scop\n+           and then Ekind_In (Scop, E_Function,\n+                                    E_Operator,\n+                                    E_Subprogram_Type)\n+           and then Present (Extra_Accessibility_Of_Result (Scop));\n+      end;\n+   end Is_Special_Aliased_Formal_Access;\n+\n    -----------------------------\n    -- Is_Specific_Tagged_Type --\n    -----------------------------\n@@ -23099,20 +23137,7 @@ package body Sem_Util is\n             return Type_Access_Level (Scope (E)) + 1;\n \n          else\n-            --  Aliased formals of functions take their access level from the\n-            --  point of call, i.e. require a dynamic check. For static check\n-            --  purposes, this is smaller than the level of the subprogram\n-            --  itself. For procedures the aliased makes no difference.\n-\n-            if Is_Formal (E)\n-               and then Is_Aliased (E)\n-               and then Ekind (Scope (E)) = E_Function\n-            then\n-               return Type_Access_Level (Etype (E));\n-\n-            else\n-               return Scope_Depth (Enclosing_Dynamic_Scope (E));\n-            end if;\n+            return Scope_Depth (Enclosing_Dynamic_Scope (E));\n          end if;\n \n       elsif Nkind_In (Obj, N_Indexed_Component, N_Selected_Component) then"}, {"sha": "e6aa9e29a843ec56e9c564d18009f87803136f63", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da566eeb31056d9f40ab48688dc3fe680535ce80/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=da566eeb31056d9f40ab48688dc3fe680535ce80", "patch": "@@ -1985,6 +1985,17 @@ package Sem_Util is\n    --  constants, formal parameters, and selected_components of those are\n    --  valid objects in SPARK 2005.\n \n+   function Is_Special_Aliased_Formal_Access\n+     (Exp  : Node_Id;\n+      Scop : Entity_Id) return Boolean;\n+   --  Determines whether a dynamic check must be generated for explicitly\n+   --  aliased formals within a function Scop for the expression Exp.\n+\n+   --  More specially, Is_Special_Aliased_Formal_Access checks that Exp is a\n+   --  'Access attribute reference within a return statement where the ultimate\n+   --  prefix is an aliased formal of Scop and that Scop returns an anonymous\n+   --  access type. See RM 3.10.2 for more details.\n+\n    function Is_Specific_Tagged_Type (Typ : Entity_Id) return Boolean;\n    --  Determine whether an arbitrary [private] type is specifically tagged\n "}]}