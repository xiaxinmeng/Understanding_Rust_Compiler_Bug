{"sha": "6ea0279fef871db4c0980384f99165817499bbc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVhMDI3OWZlZjg3MWRiNGMwOTgwMzg0Zjk5MTY1ODE3NDk5YmJjNQ==", "commit": {"author": {"name": "Matthew Green", "email": "mrg@eterna.com.au", "date": "2001-07-31T22:53:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-31T22:53:43Z"}, "message": "config.gcc (i386-*-netbsdelf): New description.\n\n        * config.gcc (i386-*-netbsdelf): New description.\n        * config/i386/netbsd-elf.h: New file.\n\nFrom-SVN: r44525", "tree": {"sha": "17eea70adc89de20f27d50c6c966365f8b01cad4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17eea70adc89de20f27d50c6c966365f8b01cad4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ea0279fef871db4c0980384f99165817499bbc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea0279fef871db4c0980384f99165817499bbc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ea0279fef871db4c0980384f99165817499bbc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ea0279fef871db4c0980384f99165817499bbc5/comments", "author": {"login": "mrgtwentythree", "id": 61165273, "node_id": "MDQ6VXNlcjYxMTY1Mjcz", "avatar_url": "https://avatars.githubusercontent.com/u/61165273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mrgtwentythree", "html_url": "https://github.com/mrgtwentythree", "followers_url": "https://api.github.com/users/mrgtwentythree/followers", "following_url": "https://api.github.com/users/mrgtwentythree/following{/other_user}", "gists_url": "https://api.github.com/users/mrgtwentythree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mrgtwentythree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mrgtwentythree/subscriptions", "organizations_url": "https://api.github.com/users/mrgtwentythree/orgs", "repos_url": "https://api.github.com/users/mrgtwentythree/repos", "events_url": "https://api.github.com/users/mrgtwentythree/events{/privacy}", "received_events_url": "https://api.github.com/users/mrgtwentythree/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9d7d836262a3137e04bf23c6073717be26bcc667", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d7d836262a3137e04bf23c6073717be26bcc667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d7d836262a3137e04bf23c6073717be26bcc667"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "827e15de7f20b41b3db4489ca742292706dc5a62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ea0279fef871db4c0980384f99165817499bbc5", "patch": "@@ -1,3 +1,8 @@\n+2001-07-31  matthew green  <mrg@eterna.com.au>\n+\n+\t* config.gcc (i386-*-netbsdelf): New description.\n+\t* config/i386/netbsd-elf.h: New file.\n+\n 2001-07-30  Geoffrey Keating  <geoffk@redhat.com>\n \n \t* loop.c (check_dbra_loop): Use single_set to compute"}, {"sha": "ae88835b77ed3e3da3ffde03fe2ea565587e7e61", "filename": "gcc/config.gcc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=6ea0279fef871db4c0980384f99165817499bbc5", "patch": "@@ -1051,6 +1051,13 @@ i[34567]86-*-freebsd[12] | i[34567]86-*-freebsd[12].* | i[34567]86-*-freebsd*aou\n i[34567]86-*-freebsd*)\n \ttm_file=\"${tm_file} i386/att.h svr4.h ${fbsd_tm_file} i386/freebsd.h\"\n \t;;\n+i[34567]86-*-netbsdelf*)\n+\txm_defines=POSIX\n+\ttm_file=\"${tm_file} i386/att.h svr4.h i386/netbsd-elf.h\"\n+\ttmake_file=t-netbsd\n+\tgnu_ld=yes\n+\tfloat_format=i386\n+\t;;\n i[34567]86-*-netbsd*)\n \ttm_file=i386/netbsd.h\n \ttmake_file=t-netbsd"}, {"sha": "5188ef4ac2fece1c9af987a3f204dd9fe2504b3b", "filename": "gcc/config/i386/netbsd-elf.h", "status": "added", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ea0279fef871db4c0980384f99165817499bbc5/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetbsd-elf.h?ref=6ea0279fef871db4c0980384f99165817499bbc5", "patch": "@@ -0,0 +1,181 @@\n+/* Definitions of target machine for GNU compiler,\n+   for i386/ELF NetBSD systems.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+   Contributed by matthew green <mrg@eterna.com.au>\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n+\n+/* Provide a LIB_SPEC appropriate for NetBSD.  Just select the appropriate\n+   libc, depending on whether we're doing profiling; if `-posix' is specified,\n+   link against the appropriate libposix first.  */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC\t\t\t\t\t\t\t\\\n+  \"%{posix:%{!p:%{!pg:-lposix}}%{p:-lposix_p}%{pg:-lposix_p}}\t\t\\\n+   %{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+\n+/* Provide a STARTFILE_SPEC appropriate for NetBSD ELF targets.  Here we\n+   provide support for the special GCC option -static.  On ELF targets,\n+   we also add the crtbegin.o file which provides part of the support\n+   for getting C++ file-scope static objects constructed before entering\n+   `main'.  We use the NetBSD crt0. */\n+\n+#undef STARTFILE_SPEC\n+#define\tSTARTFILE_SPEC \\\n+ \"%{!shared: \\\n+     %{pg:gcrt0%O%s} \\\n+     %{!pg: \\\n+        %{p:gcrt0%O%s} \\\n+        %{!p:crt0%O%s}}} \\\n+   %{!shared:crtbegin%O%s} %{shared:crtbeginS%O%s}\"\n+\n+/* Provide an ENDFILE_SPEC approrpiate for NetBSD ELF targets.  Here we\n+   add crtend.o, which provides part of the support for getting C++\n+   file-scope static objects deconstructed after exiting `main'. */\n+\n+#undef ENDFILE_SPEC\n+#define\tENDFILE_SPEC \\\n+ \"%{!shared:crtend%O%s} %{shared:crtendS%O%s}\"\n+\n+/* Provide a LINK_SPEC appropriate for a NetBSD/i386 ELF target.  Only\n+   the linker emulation is i386-specific.  The rest are\n+   common to all ELF targets, except for the name of the start function. */\n+\n+#undef LINK_SPEC\n+#define LINK_SPEC \\\n+ \"-m elf_i386 \\\n+  %{assert*} %{R*} \\\n+  %{shared:-shared} \\\n+  %{!shared: \\\n+    -dp \\\n+    %{!nostdlib:%{!r*:%{!e*:-e __start}}} \\\n+    %{!static: \\\n+      -dy %{rdynamic:-export-dynamic} \\\n+      %{!dynamic-linker:-dynamic-linker /usr/libexec/ld.elf_so}} \\\n+    %{static:-static}}\"\n+\n+/* Provide a CPP_SPEC appropriate for NetBSD.  Current we just deal with\n+   the GCC option `-posix'.  */\n+\n+#undef CPP_SPEC\n+#define CPP_SPEC \"%{posix:-D_POSIX_SOURCE}\"\n+\n+/* Provide an ASM_SPEC appropriate for NetBSD.  Currently we only deal\n+   with the options for generating PIC code.  */\n+\n+#undef ASM_SPEC\n+#define ASM_SPEC \" %| %{fpic:-k} %{fPIC:-k -K}\"\n+\n+/* Provide a LIB_SPEC appropriate for NetBSD.  Just select the appropriate\n+   libc, depending on whether we're doing profiling.  */\n+\n+#undef LIB_SPEC\n+#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+\n+/* This defines which switch letters take arguments. */\n+#undef SWITCH_TAKES_ARG\n+#define SWITCH_TAKES_ARG(CHAR) \\\n+  (DEFAULT_SWITCH_TAKES_ARG(CHAR) \\\n+   || (CHAR) == 'R')\n+\n+/* Implicit library calls should use memcpy, not bcopy, etc.  */\n+\n+#define TARGET_MEM_FUNCTIONS\n+\n+/* Names to predefine in the preprocessor for this target machine. */\n+\n+#define CPP_PREDEFINES \"\\\n+-Di386 -D__NetBSD__ -D__ELF__ -Asystem(unix) -Asystem(NetBSD)\"\n+\n+/* Make gcc agree with <machine/ansi.h> */\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"int\"\n+\n+#undef WCHAR_UNSIGNED\n+#define WCHAR_UNSIGNED 0\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 32\n+\n+#undef WINT_TYPE\n+#define WINT_TYPE \"int\"\n+\n+/* Output assembler code to FILE to increment profiler label # LABELNO\n+   for profiling a function entry.  Under NetBSD/i386, the assembler does\n+   nothing special with -pg. */\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+\n+#undef ASM_FINAL_SPEC\n+#define ASM_FINAL_SPEC \"%{pipe:-}\"\n+\n+#undef DBX_REGISTER_NUMBER\n+#define DBX_REGISTER_NUMBER(n)  svr4_dbx_register_map[n]\n+\n+#undef  NO_PROFILE_COUNTERS\n+#define NO_PROFILE_COUNTERS\n+\n+#undef HAS_INIT_SECTION\n+\n+#undef DEFAULT_VTABLE_THUNKS\n+#define DEFAULT_VTABLE_THUNKS 1\n+\n+/* This is how we tell the assembler that two symbols have the same value.  */\n+\n+#define ASM_OUTPUT_DEF(FILE,NAME1,NAME2) \\\n+  do { assemble_name(FILE, NAME1); \t \\\n+       fputs(\" = \", FILE);\t\t \\\n+       assemble_name(FILE, NAME2);\t \\\n+       fputc('\\n', FILE); } while (0)\n+\n+/* A C statement to output to the stdio stream FILE an assembler\n+   command to advance the location counter to a multiple of 1<<LOG\n+   bytes if it is within MAX_SKIP bytes.\n+\n+   This is used to align code labels according to Intel recommendations.  */\n+\n+#ifdef HAVE_GAS_MAX_SKIP_P2ALIGN\n+#define ASM_OUTPUT_MAX_SKIP_ALIGN(FILE, LOG, MAX_SKIP)\t\t\t\t\t\\\n+  if ((LOG) != 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\\n+    if ((MAX_SKIP) == 0) fprintf ((FILE), \"\\t.p2align %d\\n\", (LOG));\t\\\n+    else fprintf ((FILE), \"\\t.p2align %d,,%d\\n\", (LOG), (MAX_SKIP));\t\\\n+  }\n+#endif\n+\n+/*\n+ * We always use gas here, so we don't worry about ECOFF assembler problems.\n+ */\n+#undef TARGET_GAS\n+#define TARGET_GAS\t1\n+\n+/* Default to pcc-struct-return, because this is the ELF abi and\n+   we don't care about compatibility with older gcc versions.  */\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n+\n+#undef TARGET_VERSION\n+#define TARGET_VERSION fprintf (stderr, \" (NetBSD/i386 ELF target)\");"}]}