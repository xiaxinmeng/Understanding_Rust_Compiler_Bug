{"sha": "265c223766f1f4525558d086ccc46bd49f7b26e0", "node_id": "C_kwDOANBUbNoAKDI2NWMyMjM3NjZmMWY0NTI1NTU4ZDA4NmNjYzQ2YmQ0OWY3YjI2ZTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-02-22T10:05:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-22T10:05:34Z"}, "message": "Merge #964 #965\n\n964: Forbid unresolved test cases r=CohenArthur a=CohenArthur\n\nCloses #923 \n\n965: macro-invoc-lexer: Split implementation in its own file r=CohenArthur a=CohenArthur\n\nCloses #949 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "2bae524a99dbc4be8e3bb4240a4bfa94ad6a393f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bae524a99dbc4be8e3bb4240a4bfa94ad6a393f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/265c223766f1f4525558d086ccc46bd49f7b26e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiFLVuCRBK7hj4Ov3rIwAADKAIACUEDUYZIwYNJxc/Y347Ivie\nMO+4H9WY2IyYyIkbxZ516zPDAZ9RFPDgpJ3UVcHiTNUspDwHMPqZ2DHTrTS32JzX\nDjTFEPGnAxeF312pWhnFCiDmogE7kt15OaYAh3SCxnaxbwxBeLG/vu3tQBukSvEy\nqPLVFBhp31RruYXH+P1hCBngBrIi0IraldA5M1yRG2l2hC9fGff8jyZvbR+SCrJV\n5dmMsO0O8YIGxujaRjKH0S5pTUL4mAeD4zYfCwIwdBotfSDP0IjY4No/osBYwyg3\nxPif4ab8E2+xRHg5ipm7K1Zz6R/NPyLUvfxTpfVdYiuW3WX4AFLaNFQS4gje+D4=\n=yUZl\n-----END PGP SIGNATURE-----\n", "payload": "tree 2bae524a99dbc4be8e3bb4240a4bfa94ad6a393f\nparent 133beb6d0f286b022600682f024d9c3c77705029\nparent 9b36f953661f8e8b13ef5e8845865aaab661efaa\nparent 4e19c2f792e14c2a047a53c913a73d79f91ff277\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1645524334 +0000\ncommitter GitHub <noreply@github.com> 1645524334 +0000\n\nMerge #964 #965\n\n964: Forbid unresolved test cases r=CohenArthur a=CohenArthur\n\nCloses #923 \n\n965: macro-invoc-lexer: Split implementation in its own file r=CohenArthur a=CohenArthur\n\nCloses #949 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c223766f1f4525558d086ccc46bd49f7b26e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/265c223766f1f4525558d086ccc46bd49f7b26e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/265c223766f1f4525558d086ccc46bd49f7b26e0/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133beb6d0f286b022600682f024d9c3c77705029", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/133beb6d0f286b022600682f024d9c3c77705029", "html_url": "https://github.com/Rust-GCC/gccrs/commit/133beb6d0f286b022600682f024d9c3c77705029"}, {"sha": "9b36f953661f8e8b13ef5e8845865aaab661efaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b36f953661f8e8b13ef5e8845865aaab661efaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b36f953661f8e8b13ef5e8845865aaab661efaa"}, {"sha": "4e19c2f792e14c2a047a53c913a73d79f91ff277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e19c2f792e14c2a047a53c913a73d79f91ff277", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e19c2f792e14c2a047a53c913a73d79f91ff277"}], "stats": {"total": 144, "additions": 97, "deletions": 47}, "files": [{"sha": "50ef728efd53d59ca86d49d59ca13157d98b9cd7", "filename": ".github/workflows/ccpp.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/.github%2Fworkflows%2Fccpp.yml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/.github%2Fworkflows%2Fccpp.yml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/.github%2Fworkflows%2Fccpp.yml?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -61,7 +61,7 @@ jobs:\n     - name: Check regressions\n       run: |\n            cd gccrs-build; \\\n-           if grep \"# of unexpected\" gcc/testsuite/rust/rust.sum;\\\n+           if grep -e \"unexpected\" -e \"unresolved\" gcc/testsuite/rust/rust.sum;\\\n            then \\\n               echo \"some tests are not correct\"; \\\n               exit 1; \\"}, {"sha": "739b27de8a39fd930c6362788c71212984f4040b", "filename": "gcc/rust/Make-lang.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2FMake-lang.in?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -74,6 +74,7 @@ GRS_OBJS = \\\n     rust/rust-mangle.o \\\n     rust/rust-compile-resolve-path.o \\\n     rust/rust-macro-expand.o \\\n+    rust/rust-macro-invoc-lexer.o \\\n     rust/rust-hir-full-test.o \\\n     rust/rust-hir-map.o \\\n     rust/rust-abi.o \\"}, {"sha": "edb091d3c5015e51a63455525120dab0f17ca096", "filename": "gcc/rust/expand/rust-macro-expand.h", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-expand.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-expand.h?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-macro.h\"\n #include \"rust-hir-map.h\"\n #include \"rust-name-resolver.h\"\n+#include \"rust-macro-invoc-lexer.h\"\n \n // Provides objects and method prototypes for macro expansion\n \n@@ -48,52 +49,6 @@ struct ExpansionCfg\n   std::string crate_name = \"\";\n };\n \n-class MacroInvocLexer\n-{\n-public:\n-  MacroInvocLexer (std::vector<std::unique_ptr<AST::Token>> stream)\n-    : offs (0), token_stream (std::move (stream))\n-  {}\n-\n-  // Returns token n tokens ahead of current position.\n-  const_TokenPtr peek_token (int n)\n-  {\n-    if ((offs + n) >= token_stream.size ())\n-      return Token::make (END_OF_FILE, Location ());\n-\n-    return token_stream.at (offs + n)->get_tok_ptr ();\n-  }\n-  // Peeks the current token.\n-  const_TokenPtr peek_token () { return peek_token (0); }\n-\n-  // Advances current token to n + 1 tokens ahead of current position.\n-  void skip_token (int n) { offs += (n + 1); }\n-\n-  // Skips the current token.\n-  void skip_token () { skip_token (0); }\n-\n-  // Splits the current token into two. Intended for use with nested generics\n-  // closes (i.e. T<U<X>> where >> is wrongly lexed as one token). Note that\n-  // this will only work with \"simple\" tokens like punctuation.\n-  void split_current_token (TokenId /*new_left*/, TokenId /*new_right*/)\n-  {\n-    // FIXME\n-    gcc_unreachable ();\n-  }\n-\n-  std::string get_filename () const\n-  {\n-    gcc_unreachable ();\n-    return \"FIXME\";\n-  }\n-\n-  size_t get_offs () const { return offs; }\n-\n-private:\n-  size_t offs;\n-  std::vector<std::unique_ptr<AST::Token>> token_stream;\n-};\n-\n struct MatchedFragment\n {\n   std::string fragment_ident;"}, {"sha": "8a43d29e0d123440b4e9314d7030b278e6633fd6", "filename": "gcc/rust/expand/rust-macro-invoc-lexer.cc", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.cc?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -0,0 +1,29 @@\n+#include \"rust-macro-invoc-lexer.h\"\n+\n+namespace Rust {\n+\n+const_TokenPtr\n+MacroInvocLexer::peek_token (int n)\n+{\n+  if ((offs + n) >= token_stream.size ())\n+    return Token::make (END_OF_FILE, Location ());\n+\n+  return token_stream.at (offs + n)->get_tok_ptr ();\n+}\n+\n+// Advances current token to n + 1 tokens ahead of current position.\n+void\n+MacroInvocLexer::skip_token (int n)\n+{\n+  offs += (n + 1);\n+}\n+\n+void\n+MacroInvocLexer::split_current_token (TokenId new_left __attribute__ ((unused)),\n+\t\t\t\t      TokenId new_right\n+\t\t\t\t      __attribute__ ((unused)))\n+{\n+  // FIXME\n+  gcc_unreachable ();\n+}\n+} // namespace Rust"}, {"sha": "0fd4554d02f6d66eddac420c95636dcfe7289229", "filename": "gcc/rust/expand/rust-macro-invoc-lexer.h", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-invoc-lexer.h?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -0,0 +1,64 @@\n+// Copyright (C) 2020-2022 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_MACRO_INVOC_LEXER_H\n+#define RUST_MACRO_INVOC_LEXER_H\n+\n+#include \"rust-ast.h\"\n+\n+namespace Rust {\n+class MacroInvocLexer\n+{\n+public:\n+  MacroInvocLexer (std::vector<std::unique_ptr<AST::Token>> stream)\n+    : offs (0), token_stream (std::move (stream))\n+  {}\n+\n+  // Returns token n tokens ahead of current position.\n+  const_TokenPtr peek_token (int n);\n+\n+  // Peeks the current token.\n+  const_TokenPtr peek_token () { return peek_token (0); }\n+\n+  // Advances current token to n + 1 tokens ahead of current position.\n+  void skip_token (int n);\n+\n+  // Skips the current token.\n+  void skip_token () { skip_token (0); }\n+\n+  // Splits the current token into two. Intended for use with nested generics\n+  // closes (i.e. T<U<X>> where >> is wrongly lexed as one token). Note that\n+  // this will only work with \"simple\" tokens like punctuation.\n+  void split_current_token (TokenId new_left, TokenId new_right);\n+\n+  std::string get_filename () const\n+  {\n+    // FIXME\n+    gcc_unreachable ();\n+    return \"FIXME\";\n+  }\n+\n+  size_t get_offs () const { return offs; }\n+\n+private:\n+  size_t offs;\n+  std::vector<std::unique_ptr<AST::Token>> token_stream;\n+};\n+} // namespace Rust\n+\n+#endif // RUST_MACRO_INVOC_LEXER_H"}, {"sha": "4b0f991765a3e72d47d2e3a7cba0f8bf9403ee57", "filename": "gcc/testsuite/rust/compile/inline_1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/265c223766f1f4525558d086ccc46bd49f7b26e0/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Finline_1.rs?ref=265c223766f1f4525558d086ccc46bd49f7b26e0", "patch": "@@ -1,3 +1,4 @@\n+// { dg-additional-options \"-fdump-tree-gimple\" }\n #[inline]\n fn test_a() {}\n "}]}