{"sha": "ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1YjQ1YjYxZmU2OTE3ZjU5YzBjYjUwOWZhMGFmNWRlMDgyODdiZg==", "commit": {"author": {"name": "Andres Tiraboschi", "email": "andres.tiraboschi@tallertechnologies.com", "date": "2015-06-03T13:27:11Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-06-03T13:27:11Z"}, "message": "plugins.texi (enum plugin_event): New event.\n\n        * doc/plugins.texi (enum plugin_event): New event.\n        * plugin.c (register_callback): Handle PLUGIN_START_PARSE_FUNCTION\n        and PLUGIN_FINISH_FUNCTION.\n        * plugin.def (PLUGIN_START_PARSE_FUNCTION): Add plugin event\n        (PLUGIN_FINISH_PARSE_FUNCTION): Likewise.\n\ncp/\n\n        * decl.c (start_function): Call plugin before parsing.\n        (finish_function): Call plugin after parsing.\n\nc/\n\n        * c-decl.c (start_function): Call plugin before parsing.\n        (finish_function): Call plugin after parsing.\n\ntestsuite/\n\n        * g++.dg/plugin/plugin.exp: Add def-plugin-test.C.\n        * g++.dg/plugin/def_plugin.c: New file.\n        * g++.dg/plugin/def-plugin-test.C: New file.\n\nFrom-SVN: r224078", "tree": {"sha": "329fd87cc105897690e082dad29a77825d113933", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/329fd87cc105897690e082dad29a77825d113933"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/comments", "author": null, "committer": null, "parents": [{"sha": "e004aa11b1d261b597aa3e062204af61762ba6a9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e004aa11b1d261b597aa3e062204af61762ba6a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e004aa11b1d261b597aa3e062204af61762ba6a9"}], "stats": {"total": 100, "additions": 99, "deletions": 1}, "files": [{"sha": "ae78609771100bbe3bf3605a7ae425de01d1a2ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -1,3 +1,11 @@\n+2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n+\t\n+\t* doc/plugins.texi (enum plugin_event): New event.\n+\t* plugin.c (register_callback): Handle PLUGIN_START_PARSE_FUNCTION\n+\tand PLUGIN_FINISH_FUNCTION.\n+\t* plugin.def (PLUGIN_START_PARSE_FUNCTION): Add plugin event\n+\t(PLUGIN_FINISH_PARSE_FUNCTION): Likewise.\n+\n 2015-06-03  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_analyze_group_access): Properly"}, {"sha": "a4bf6203ccf94217f10883d55afbd0b79b570f6d", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -1,3 +1,8 @@\n+2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n+\n+\t* c-decl.c (start_function): Call plugin before parsing.\n+\t(finish_function): Call plugin after parsing.\n+\n 2015-06-02  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR c/49551"}, {"sha": "efdf9028596c2cc3777d6ea2106cfa4cb068508f", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -8239,6 +8239,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \n   decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, true, NULL,\n \t\t\t  &attributes, NULL, NULL, DEPRECATED_NORMAL);\n+  invoke_plugin_callbacks (PLUGIN_START_PARSE_FUNCTION, decl1);\n \n   /* If the declarator is not suitable for a function definition,\n      cause a syntax error.  */\n@@ -9083,6 +9084,7 @@ finish_function (void)\n      It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n      tree_rest_of_compilation.  */\n   set_cfun (NULL);\n+  invoke_plugin_callbacks (PLUGIN_FINISH_PARSE_FUNCTION, current_function_decl);\n   current_function_decl = NULL;\n }\n \f"}, {"sha": "fe1f7bb03d1e49e0cb96a8de69f9a0cb3ca6a87c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -1,3 +1,8 @@\n+2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n+\n+\t* decl.c (start_function): Call plugin before parsing.\n+\t(finish_function): Call plugin after parsing.\n+\n 2015-06-02  Patrick Palka <patrick@parcs.ath.cx>\n \n \t* cp-tree.h (init_error): Remove declaration."}, {"sha": "6140ab6770ae5b783861ea7a3669e3bc55abf5ad", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -13748,6 +13748,7 @@ start_function (cp_decl_specifier_seq *declspecs,\n   tree decl1;\n \n   decl1 = grokdeclarator (declarator, declspecs, FUNCDEF, 1, &attrs);\n+  invoke_plugin_callbacks (PLUGIN_START_PARSE_FUNCTION, decl1);\n   if (decl1 == error_mark_node)\n     return false;\n   /* If the declarator is not suitable for a function definition,\n@@ -14386,6 +14387,7 @@ finish_function (int flags)\n       vec_free (deferred_mark_used_calls);\n     }\n \n+  invoke_plugin_callbacks (PLUGIN_FINISH_PARSE_FUNCTION, fndecl);\n   return fndecl;\n }\n \f"}, {"sha": "d50f25c79adcb44b4504aa025b7fe713f62cdb16", "filename": "gcc/doc/plugins.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fdoc%2Fplugins.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fdoc%2Fplugins.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fplugins.texi?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -174,6 +174,8 @@ Callbacks can be invoked at the following pre-determined events:\n @smallexample\n enum plugin_event\n @{\n+  PLUGIN_START_PARSE_FUNCTION,  /* Called before parsing the body of a function. */\n+  PLUGIN_FINISH_PARSE_FUNCTION, /* After finishing parsing a function. */\n   PLUGIN_PASS_MANAGER_SETUP,    /* To hook into pass manager.  */\n   PLUGIN_FINISH_TYPE,           /* After finishing parsing a type.  */\n   PLUGIN_FINISH_DECL,           /* After finishing parsing a declaration. */"}, {"sha": "ed4a2c5dc468d9404ec051a730e383acf0f89281", "filename": "gcc/plugin.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fplugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fplugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.c?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -441,6 +441,8 @@ register_callback (const char *plugin_name,\n \t    return;\n \t  }\n       /* Fall through.  */\n+      case PLUGIN_START_PARSE_FUNCTION:\n+      case PLUGIN_FINISH_PARSE_FUNCTION:\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_DECL:\n       case PLUGIN_START_UNIT:\n@@ -519,6 +521,8 @@ invoke_plugin_callbacks_full (int event, void *gcc_data)\n \tgcc_assert (event >= PLUGIN_EVENT_FIRST_DYNAMIC);\n \tgcc_assert (event < event_last);\n       /* Fall through.  */\n+      case PLUGIN_START_PARSE_FUNCTION:\n+      case PLUGIN_FINISH_PARSE_FUNCTION:\n       case PLUGIN_FINISH_TYPE:\n       case PLUGIN_FINISH_DECL:\n       case PLUGIN_START_UNIT:"}, {"sha": "2a7e4c21df31be882212d281df4c3c6a3a5e87f1", "filename": "gcc/plugin.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fplugin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Fplugin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fplugin.def?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -17,6 +17,11 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n+/* Called before parsing the body of a function.  */\n+DEFEVENT (PLUGIN_START_PARSE_FUNCTION)\n+\n+/* After finishing parsing a function. */\n+DEFEVENT (PLUGIN_FINISH_PARSE_FUNCTION)\n \n /* To hook into pass manager.  */\n DEFEVENT (PLUGIN_PASS_MANAGER_SETUP)"}, {"sha": "13e7ecb4a147a580e4ba317032a2940b4d3e39bf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -1,3 +1,9 @@\n+2015-06-02  Andres Tiraboschi  <andres.tiraboschi@tallertechnologies.com>\n+\n+\t* g++.dg/plugin/plugin.exp: Add def-plugin-test.C.\n+\t* g++.dg/plugin/def_plugin.c: New file.\n+\t* g++.dg/plugin/def-plugin-test.C: New file.\n+\n 2015-06-03  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/vect/bb-slp-36.c: New testcase."}, {"sha": "b7f2d3d3fa9749eeea93123bee63ec3d71e49e79", "filename": "gcc/testsuite/g++.dg/plugin/def-plugin-test.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef-plugin-test.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef-plugin-test.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef-plugin-test.C?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -0,0 +1,13 @@\n+int global = 12;\n+\n+int function1(void);\n+\n+int function2(int a) // { dg-warning \"Start fndef function2\" }\n+{\n+  return function1() + a;\n+} //  { dg-warning \"Finish fndef function2\" }\n+\n+int function1(void) // { dg-warning \"Start fndef function1\" }\n+{\n+  return global + 1;\n+} //  { dg-warning \"Finish fndef function1\" }"}, {"sha": "63983c5f183869b002c30fcc5c7fccf9710d93eb", "filename": "gcc/testsuite/g++.dg/plugin/def_plugin.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fdef_plugin.c?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -0,0 +1,45 @@\n+/* A plugin example that shows which function definitions are caught by PLUGIN_START_FUNCTION and PLUGIN_FINISH_FUNCTION */\n+\n+#include \"gcc-plugin.h\"\n+#include <stdlib.h>\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tree.h\"\n+#include \"tree-pass.h\"\n+#include \"intl.h\"\n+#include \"diagnostic.h\"\n+\n+int plugin_is_GPL_compatible;\n+\n+/* Callback function to invoke when GCC starts a function definition*/\n+\n+void plugin_start_parse_function (void *event_data, void *data)\n+{\n+  tree fndef = (tree) event_data;\n+  warning (0, G_(\"Start fndef %s\"),\n+           IDENTIFIER_POINTER (DECL_NAME (fndef)));\n+}\n+\n+/* Callback function to invoke after GCC finishes a function definition. */\n+\n+void plugin_finish_parse_function (void *event_data, void *data)\n+{\n+  tree fndef = (tree) event_data;\n+  warning (0, G_(\"Finish fndef %s\"),\n+           IDENTIFIER_POINTER (DECL_NAME (fndef)));\n+}\n+\n+int\n+plugin_init (struct plugin_name_args *plugin_info,\n+             struct plugin_gcc_version *version)\n+{\n+  const char *plugin_name = plugin_info->base_name;\n+\n+  register_callback (plugin_name, PLUGIN_START_PARSE_FUNCTION,\n+                     plugin_start_parse_function, NULL);\n+\n+  register_callback (plugin_name, PLUGIN_FINISH_PARSE_FUNCTION,\n+                     plugin_finish_parse_function, NULL);\n+  return 0;\n+}"}, {"sha": "3ed13974124af29f74e641170e0c33db978ec782", "filename": "gcc/testsuite/g++.dg/plugin/plugin.exp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5b45b61fe6917f59c0cb509fa0af5de08287bf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fplugin%2Fplugin.exp?ref=ea5b45b61fe6917f59c0cb509fa0af5de08287bf", "patch": "@@ -61,7 +61,8 @@ set plugin_test_list [list \\\n     { selfassign.c self-assign-test-1.C self-assign-test-2.C self-assign-test-3.C } \\\n     { dumb_plugin.c dumb-plugin-test-1.C } \\\n     { header_plugin.c header-plugin-test.C } \\\n-    { decl_plugin.c decl-plugin-test.C } ]\n+    { decl_plugin.c decl-plugin-test.C } \\\n+    { def_plugin.c def-plugin-test.C } ]\n \n foreach plugin_test $plugin_test_list {\n     # Replace each source file with its full-path name"}]}