{"sha": "e071b7678195f4176938730e348503cddc2a87b4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MWI3Njc4MTk1ZjQxNzY5Mzg3MzBlMzQ4NTAzY2RkYzJhODdiNA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-07-29T07:52:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-07-29T07:52:16Z"}, "message": "debug.h (struct gcc_debug_hooks): Add IMPLICIT argument to imported_module_or_decl hook.\n\n\t* debug.h (struct gcc_debug_hooks): Add IMPLICIT argument\n\tto imported_module_or_decl hook.\n\t(debug_nothing_tree_tree_tree_bool): Remove.\n\t(debug_nothing_tree_tree_tree_bool_bool): New declaration.\n\t* debug.c (do_nothing_debug_hooks): Use\n\tdebug_nothing_tree_tree_tree_bool_bool instead of\n\tdebug_nothing_tree_tree_tree_bool.\n\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Likewise.\n\t* sdbout.c (sdb_debug_hooks): Likewise.\n\t* dwarf2out.c (dwarf2_lineno_debug_hooks): Likewise.\n\t(gen_namespace_die): Add DW_AT_export_symbols attribute if\n\tlanghook wants it.\n\t(dwarf2out_imported_module_or_decl): Add IMPLICIT argument,\n\tif true, -gdwarf-5 and decl will have DW_AT_export_symbols\n\tattribute, don't add anything.\ncp/\n\t* cp-objcp-common.c (cp_decl_dwarf_attribute): Handle\n\tDW_AT_export_symbols.\n\t* name-lookup.c (emit_debug_info_using_namespace): Add IMPLICIT\n\targument, pass it through to the debug hook.\n\t(finish_namespace_using_directive): Adjust\n\temit_debug_info_using_namespace caller.\n\t(push_namespace): Likewise.  Call it after setting\n\tDECL_NAMESPACE_INLINE_P.\n\t(cp_emit_debug_info_for_using): Pass false as new argument to\n\tthe imported_module_or_decl debug hook.\nfortran/\n\t* trans-decl.c (gfc_trans_use_stmts): Pass false as new argument to\n\tthe imported_module_or_decl debug hook.\nada/\n\t* gcc-interface/utils.c (gnat_write_global_declarations): Pass false\n\tas new argument to the imported_module_or_decl debug hook.\ntestsuite/\n\t* g++.dg/debug/dwarf2/inline-ns-1.C: New test.\n\t* g++.dg/debug/dwarf2/inline-ns-2.C: New test.\n\nFrom-SVN: r250713", "tree": {"sha": "5d2a520e61da9c40f3bbcda6527ff9005b07e520", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5d2a520e61da9c40f3bbcda6527ff9005b07e520"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e071b7678195f4176938730e348503cddc2a87b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e071b7678195f4176938730e348503cddc2a87b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e071b7678195f4176938730e348503cddc2a87b4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e071b7678195f4176938730e348503cddc2a87b4/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "226b828937458a958cd6d681f9a6d3288b46f58e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/226b828937458a958cd6d681f9a6d3288b46f58e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/226b828937458a958cd6d681f9a6d3288b46f58e"}], "stats": {"total": 174, "additions": 148, "deletions": 26}, "files": [{"sha": "ad347ad9754f8797cdc2c0b35a39522c4db62498", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -1,3 +1,22 @@\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* debug.h (struct gcc_debug_hooks): Add IMPLICIT argument\n+\tto imported_module_or_decl hook.\n+\t(debug_nothing_tree_tree_tree_bool): Remove.\n+\t(debug_nothing_tree_tree_tree_bool_bool): New declaration.\n+\t* debug.c (do_nothing_debug_hooks): Use\n+\tdebug_nothing_tree_tree_tree_bool_bool instead of\n+\tdebug_nothing_tree_tree_tree_bool.\n+\t* vmsdbgout.c (vmsdbg_debug_hooks): Likewise.\n+\t* dbxout.c (dbx_debug_hooks, xcoff_debug_hooks): Likewise.\n+\t* sdbout.c (sdb_debug_hooks): Likewise.\n+\t* dwarf2out.c (dwarf2_lineno_debug_hooks): Likewise.\n+\t(gen_namespace_die): Add DW_AT_export_symbols attribute if\n+\tlanghook wants it.\n+\t(dwarf2out_imported_module_or_decl): Add IMPLICIT argument,\n+\tif true, -gdwarf-5 and decl will have DW_AT_export_symbols\n+\tattribute, don't add anything.\n+\n 2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* fold-const.c (fold_build1_stat_loc): Remove _stat from name."}, {"sha": "dda51d423b633a605bdf1a8a731454cd76b4183b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -1,3 +1,8 @@\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc-interface/utils.c (gnat_write_global_declarations): Pass false\n+\tas new argument to the imported_module_or_decl debug hook.\n+\n 2017-07-25  Javier Miranda  <miranda@adacore.com>\n \n \t* checks.adb (Apply_Divide_Checks): Ensure that operands are not"}, {"sha": "475261b36828db5348c2b7f22789b3447da56d48", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -5553,7 +5553,7 @@ gnat_write_global_declarations (void)\n   FOR_EACH_VEC_SAFE_ELT (global_decls, i, iter)\n    if (TREE_CODE (iter) == IMPORTED_DECL && !DECL_IGNORED_P (iter))\n      debug_hooks->imported_module_or_decl (iter, DECL_NAME (iter),\n-\t\t\t\t\t   DECL_CONTEXT (iter), 0);\n+\t\t\t\t\t   DECL_CONTEXT (iter), false, false);\n }\n \n /* ************************************************************************"}, {"sha": "3d988a67b7757075b3a8fadffd76bc46308eeafb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -1,3 +1,16 @@\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* cp-objcp-common.c (cp_decl_dwarf_attribute): Handle\n+\tDW_AT_export_symbols.\n+\t* name-lookup.c (emit_debug_info_using_namespace): Add IMPLICIT\n+\targument, pass it through to the debug hook.\n+\t(finish_namespace_using_directive): Adjust\n+\temit_debug_info_using_namespace caller.\n+\t(push_namespace): Likewise.  Call it after setting\n+\tDECL_NAMESPACE_INLINE_P.\n+\t(cp_emit_debug_info_for_using): Pass false as new argument to\n+\tthe imported_module_or_decl debug hook.\n+\n 2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* lex.c (copy_decl): Adjust."}, {"sha": "4475b6cb911357773961aea08c96a542d024eb00", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -212,6 +212,13 @@ cp_decl_dwarf_attribute (const_tree decl, int attr)\n \t}\n       break;\n \n+    case DW_AT_export_symbols:\n+      if (TREE_CODE (decl) == NAMESPACE_DECL\n+\t  && (DECL_NAMESPACE_INLINE_P (decl)\n+\t      || (DECL_NAME (decl) == NULL_TREE && dwarf_version >= 5)))\n+\treturn 1;\n+      break;\n+\n     default:\n       break;\n     }"}, {"sha": "4dc19da6ade795470ba92bf60784ab482ab00845", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -6045,11 +6045,12 @@ add_using_namespace (vec<tree, va_gc> *&usings, tree target)\n /* Tell the debug system of a using directive.  */\n \n static void\n-emit_debug_info_using_namespace (tree from, tree target)\n+emit_debug_info_using_namespace (tree from, tree target, bool implicit)\n {\n   /* Emit debugging info.  */\n   tree context = from != global_namespace ? from : NULL_TREE;\n-  debug_hooks->imported_module_or_decl (target, NULL_TREE, context, false);\n+  debug_hooks->imported_module_or_decl (target, NULL_TREE, context, false,\n+\t\t\t\t\timplicit);\n }\n \n /* Process a namespace-scope using directive.  */\n@@ -6064,7 +6065,7 @@ finish_namespace_using_directive (tree target, tree attribs)\n   add_using_namespace (DECL_NAMESPACE_USING (current_namespace),\n \t\t       ORIGINAL_NAMESPACE (target));\n   emit_debug_info_using_namespace (current_namespace,\n-\t\t\t\t   ORIGINAL_NAMESPACE (target));\n+\t\t\t\t   ORIGINAL_NAMESPACE (target), false);\n \n   if (attribs == error_mark_node)\n     return;\n@@ -6223,14 +6224,14 @@ push_namespace (tree name, bool make_inline)\n \t  else if (TREE_PUBLIC (current_namespace))\n \t    TREE_PUBLIC (ns) = 1;\n \n-\t  if (name == anon_identifier || make_inline)\n-\t    emit_debug_info_using_namespace (current_namespace, ns);\n-\n \t  if (make_inline)\n \t    {\n \t      DECL_NAMESPACE_INLINE_P (ns) = true;\n \t      vec_safe_push (DECL_NAMESPACE_INLINEES (current_namespace), ns);\n \t    }\n+\n+\t  if (name == anon_identifier || make_inline)\n+\t    emit_debug_info_using_namespace (current_namespace, ns, true);\n \t}\n     }\n \n@@ -6358,8 +6359,8 @@ cp_emit_debug_info_for_using (tree t, tree context)\n \t  if (building_stmt_list_p ())\n \t    add_stmt (build_stmt (input_location, USING_STMT, fn));\n \t  else\n-\t    debug_hooks->imported_module_or_decl (fn,\n-\t\t\t\t\t\t  NULL_TREE, context, false);\n+\t    debug_hooks->imported_module_or_decl (fn, NULL_TREE, context,\n+\t\t\t\t\t\t  false, false);\n \t}\n     }\n }"}, {"sha": "3d9268c3d1d725fa8594603a72431e412bdadf24", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -371,7 +371,7 @@ const struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_early_global_decl,\t\t /* early_global_decl */\n   dbxout_late_global_decl,\t\t /* late_global_decl */\n   dbxout_type_decl,\t\t\t /* type_decl */\n-  debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n+  debug_nothing_tree_tree_tree_bool_bool,/* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n   debug_nothing_rtx_code_label,\t         /* label */\n@@ -411,7 +411,7 @@ const struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_early_global_decl,\t\t /* early_global_decl */\n   dbxout_late_global_decl,\t\t /* late_global_decl */\n   dbxout_type_decl,\t\t\t /* type_decl */\n-  debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n+  debug_nothing_tree_tree_tree_bool_bool,/* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n   debug_nothing_rtx_code_label,\t         /* label */"}, {"sha": "d68c30ff2b9a7d90be1759eae5647c693c898ca5", "filename": "gcc/debug.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -47,7 +47,7 @@ const struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_tree,\t         \t /* early_global_decl */\n   debug_nothing_tree,\t         \t /* late_global_decl */\n   debug_nothing_tree_int,\t\t /* type_decl */\n-  debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n+  debug_nothing_tree_tree_tree_bool_bool,/* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n   debug_nothing_rtx_code_label,\t         /* label */\n@@ -80,10 +80,11 @@ debug_nothing_tree_tree (tree t1 ATTRIBUTE_UNUSED,\n }\n \n void\n-debug_nothing_tree_tree_tree_bool (tree t1 ATTRIBUTE_UNUSED,\n-\t\t\t\t   tree t2 ATTRIBUTE_UNUSED,\n-\t\t\t\t   tree t3 ATTRIBUTE_UNUSED,\n-\t\t\t\t   bool b1 ATTRIBUTE_UNUSED)\n+debug_nothing_tree_tree_tree_bool_bool (tree t1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\ttree t2 ATTRIBUTE_UNUSED,\n+\t\t\t\t\ttree t3 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tbool b1 ATTRIBUTE_UNUSED,\n+\t\t\t\t\tbool b2 ATTRIBUTE_UNUSED)\n {\n }\n "}, {"sha": "bfb72213631a0c6bd27eaf5cfaed7ae24b8c977e", "filename": "gcc/debug.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -145,7 +145,8 @@ struct gcc_debug_hooks\n \n   /* Debug information for imported modules and declarations.  */\n   void (* imported_module_or_decl) (tree decl, tree name,\n-\t\t\t\t    tree context, bool child);\n+\t\t\t\t    tree context, bool child,\n+\t\t\t\t    bool implicit);\n \n   /* DECL is an inline function, whose body is present, but which is\n      not being output at this point.  */\n@@ -206,7 +207,8 @@ extern void debug_nothing_int_int (unsigned int, unsigned int);\n extern void debug_nothing_tree (tree);\n extern void debug_nothing_tree_tree (tree, tree);\n extern void debug_nothing_tree_int (tree, int);\n-extern void debug_nothing_tree_tree_tree_bool (tree, tree, tree, bool);\n+extern void debug_nothing_tree_tree_tree_bool_bool (tree, tree, tree,\n+\t\t\t\t\t\t    bool, bool);\n extern bool debug_true_const_tree (const_tree);\n extern void debug_nothing_rtx_insn (rtx_insn *);\n extern void debug_nothing_rtx_code_label (rtx_code_label *);"}, {"sha": "4a3b3c1d0f494986c6d3f5c8e522dc7d53e61999", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -2680,7 +2680,7 @@ static bool dwarf2out_ignore_block (const_tree);\n static void dwarf2out_early_global_decl (tree);\n static void dwarf2out_late_global_decl (tree);\n static void dwarf2out_type_decl (tree, int);\n-static void dwarf2out_imported_module_or_decl (tree, tree, tree, bool);\n+static void dwarf2out_imported_module_or_decl (tree, tree, tree, bool, bool);\n static void dwarf2out_imported_module_or_decl_1 (tree, tree, tree,\n \t\t\t\t\t\t dw_die_ref);\n static void dwarf2out_abstract_function (tree);\n@@ -2764,7 +2764,7 @@ const struct gcc_debug_hooks dwarf2_lineno_debug_hooks =\n   debug_nothing_tree,\t\t         /* early_global_decl */\n   debug_nothing_tree,\t\t         /* late_global_decl */\n   debug_nothing_tree_int,\t\t /* type_decl */\n-  debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n+  debug_nothing_tree_tree_tree_bool_bool,/* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n   debug_nothing_rtx_code_label,\t         /* label */\n@@ -25166,6 +25166,11 @@ gen_namespace_die (tree decl, dw_die_ref context_die)\n       add_AT_die_ref (namespace_die, DW_AT_import, origin_die);\n       equate_decl_number_to_die (decl, namespace_die);\n     }\n+  if ((dwarf_version >= 5 || !dwarf_strict)\n+      && lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\tDW_AT_export_symbols) == 1)\n+    add_AT_flag (namespace_die, DW_AT_export_symbols, 1);\n+\n   /* Bypass dwarf2_name's check for DECL_NAMELESS.  */\n   if (want_pubnames ())\n     add_pubname_string (lang_hooks.dwarf_name (decl, 1), namespace_die);\n@@ -25579,11 +25584,13 @@ dwarf2out_imported_module_or_decl_1 (tree decl,\n /* Output debug information for imported module or decl DECL.\n    NAME is non-NULL name in context if the decl has been renamed.\n    CHILD is true if decl is one of the renamed decls as part of\n-   importing whole module.  */\n+   importing whole module.\n+   IMPLICIT is set if this hook is called for an implicit import\n+   such as inline namespace.  */\n \n static void\n dwarf2out_imported_module_or_decl (tree decl, tree name, tree context,\n-\t\t\t\t   bool child)\n+\t\t\t\t   bool child, bool implicit)\n {\n   /* dw_die_ref at_import_die;  */\n   dw_die_ref scope_die;\n@@ -25593,6 +25600,16 @@ dwarf2out_imported_module_or_decl (tree decl, tree name, tree context,\n \n   gcc_assert (decl);\n \n+  /* For DWARF5, just DW_AT_export_symbols on the DW_TAG_namespace\n+     should be enough, for DWARF4 and older even if we emit as extension\n+     DW_AT_export_symbols add the implicit DW_TAG_imported_module anyway\n+     for the benefit of consumers unaware of DW_AT_export_symbols.  */\n+  if (implicit\n+      && dwarf_version >= 5\n+      && lang_hooks.decls.decl_dwarf_attribute (decl,\n+\t\t\t\t\t\tDW_AT_export_symbols) == 1)\n+    return;\n+\n   set_early_dwarf s;\n \n   /* To emit DW_TAG_imported_module or DW_TAG_imported_decl, we need two DIEs."}, {"sha": "81b220ad776a3cdfd8aeff8d703625ee2d6d3f17", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -1,3 +1,8 @@\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* trans-decl.c (gfc_trans_use_stmts): Pass false as new argument to\n+\tthe imported_module_or_decl debug hook.\n+\n 2017-07-28  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* resolve.c (find_reachable_labels): Adjust."}, {"sha": "74d860689ee791f64b3369b555d21f20db553022", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -4875,7 +4875,7 @@ gfc_trans_use_stmts (gfc_namespace * ns)\n \t(*debug_hooks->imported_module_or_decl) (entry->namespace_decl,\n \t\t\t\t\t\t NULL_TREE,\n \t\t\t\t\t\t ns->proc_name->backend_decl,\n-\t\t\t\t\t\t false);\n+\t\t\t\t\t\t false, false);\n       for (rent = use_stmt->rename; rent; rent = rent->next)\n \t{\n \t  tree decl, local_name;\n@@ -4952,7 +4952,8 @@ gfc_trans_use_stmts (gfc_namespace * ns)\n \t  gfc_set_backend_locus (&rent->where);\n \t  (*debug_hooks->imported_module_or_decl) (decl, local_name,\n \t\t\t\t\t\t   ns->proc_name->backend_decl,\n-\t\t\t\t\t\t   !use_stmt->only_flag);\n+\t\t\t\t\t\t   !use_stmt->only_flag,\n+\t\t\t\t\t\t   false);\n \t}\n     }\n }"}, {"sha": "a67f9d64cb16911a31372d4af44ba73a7f134ee9", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -301,7 +301,7 @@ const struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_early_global_decl,\t\t /* early_global_decl */\n   sdbout_late_global_decl,\t\t /* late_global_decl */\n   sdbout_symbol,\t\t\t /* type_decl */\n-  debug_nothing_tree_tree_tree_bool,\t /* imported_module_or_decl */\n+  debug_nothing_tree_tree_tree_bool_bool,/* imported_module_or_decl */\n   debug_nothing_tree,\t\t         /* deferred_inline_function */\n   debug_nothing_tree,\t\t         /* outlining_inline_function */\n   sdbout_label,\t\t\t         /* label */"}, {"sha": "8e83a732a5f50fd5434e4052781e3280f03f76ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -1,3 +1,8 @@\n+2017-07-29  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* g++.dg/debug/dwarf2/inline-ns-1.C: New test.\n+\t* g++.dg/debug/dwarf2/inline-ns-2.C: New test.\n+\n 2017-07-28  Peter Bergner  <bergner@vnet.ibm.com>\n \n \t* gcc.target/powerpc/cpu-builtin-1.c (darn, scv): Add tests."}, {"sha": "cae380a21eb8f11a87612f628fd64bfbb6c1ded9", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline-ns-1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-1.C?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-O2 -gdwarf-4 -dA -gno-strict-dwarf\" }\n+// { dg-final { scan-assembler-times \" DW_AT_export_symbols\" 1 } }\n+// { dg-final { scan-assembler-times \"DIE \\\\(\\[^\\n\\r\\]*\\\\) DW_TAG_imported_module\" 2 } }\n+\n+namespace A\n+{\n+  int i = 5;\n+  inline namespace B\n+  {\n+    int j = 6;\n+    namespace C\n+    {\n+      int k = 7;\n+    };\n+  };\n+};\n+int l = A::i + A::j + A::C::k;\n+int m = A::i + A::B::j + A::B::C::k;\n+namespace\n+{\n+  int n = 8;\n+};\n+int o = n;"}, {"sha": "4d9aed7e219264eb79af984a405b4765ca0789ad", "filename": "gcc/testsuite/g++.dg/debug/dwarf2/inline-ns-2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdebug%2Fdwarf2%2Finline-ns-2.C?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -0,0 +1,23 @@\n+// { dg-options \"-O2 -gdwarf-5 -dA\" }\n+// { dg-final { scan-assembler-times \" DW_AT_export_symbols\" 2 } }\n+// { dg-final { scan-assembler-not \"DIE \\\\(\\[^\\n\\r\\]*\\\\) DW_TAG_imported_module\" } }\n+\n+namespace A\n+{\n+  int i = 5;\n+  inline namespace B\n+  {\n+    int j = 6;\n+    namespace C\n+    {\n+      int k = 7;\n+    };\n+  };\n+};\n+int l = A::i + A::j + A::C::k;\n+int m = A::i + A::B::j + A::B::C::k;\n+namespace\n+{\n+  int n = 8;\n+};\n+int o = n;"}, {"sha": "42300e2d538c0ef68369cdb3e4c93cd661f2c064", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e071b7678195f4176938730e348503cddc2a87b4/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=e071b7678195f4176938730e348503cddc2a87b4", "patch": "@@ -197,7 +197,7 @@ const struct gcc_debug_hooks vmsdbg_debug_hooks\n    vmsdbgout_early_global_decl,\n    vmsdbgout_late_global_decl,\n    vmsdbgout_type_decl,\t\t  /* type_decl */\n-   debug_nothing_tree_tree_tree_bool, /* imported_module_or_decl */\n+   debug_nothing_tree_tree_tree_bool_bool, /* imported_module_or_decl */\n    debug_nothing_tree,\t\t  /* deferred_inline_function */\n    vmsdbgout_abstract_function,\n    debug_nothing_rtx_code_label,  /* label */"}]}