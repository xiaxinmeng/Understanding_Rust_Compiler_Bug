{"sha": "c3741733dbd0155d869ebfc9ead24a0d885fe27c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM3NDE3MzNkYmQwMTU1ZDg2OWViZmM5ZWFkMjRhMGQ4ODVmZTI3Yw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-18T21:33:30Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-09-18T21:33:30Z"}, "message": "(alpha_emit_set_long_const): Save one instruction when -O2 and high\nword == low word.\n\nFrom-SVN: r12740", "tree": {"sha": "52516c1602716a565b8e43ab513e03371ce93427", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52516c1602716a565b8e43ab513e03371ce93427"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3741733dbd0155d869ebfc9ead24a0d885fe27c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3741733dbd0155d869ebfc9ead24a0d885fe27c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3741733dbd0155d869ebfc9ead24a0d885fe27c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3741733dbd0155d869ebfc9ead24a0d885fe27c/comments", "author": null, "committer": null, "parents": [{"sha": "1bfce0b8a46ff6168f742199cb0d36523ffca611", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bfce0b8a46ff6168f742199cb0d36523ffca611", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bfce0b8a46ff6168f742199cb0d36523ffca611"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "4360b5659eee213c7fb3f649e67dec501b6d74c3", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3741733dbd0155d869ebfc9ead24a0d885fe27c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3741733dbd0155d869ebfc9ead24a0d885fe27c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=c3741733dbd0155d869ebfc9ead24a0d885fe27c", "patch": "@@ -981,7 +981,7 @@ alpha_emit_set_long_const (target, c)\n     = (flag_expensive_optimizations && rtx_equal_function_value_matters\n        ? 0 : target);\n   HOST_WIDE_INT d1, d2, d3, d4;\n-  rtx r;\n+  rtx r1, r2;\n \n   /* Decompose the entire word */\n   d1 = ((c & 0xffff) ^ 0x8000) - 0x8000;\n@@ -997,29 +997,36 @@ alpha_emit_set_long_const (target, c)\n \n   /* Construct the high word */\n   if (d3 == 0)\n-    r = copy_to_suggested_reg (GEN_INT (d4), subtarget, DImode);\n+    r1 = copy_to_suggested_reg (GEN_INT (d4), subtarget, DImode);\n   else if (d4 == 0)\n-    r = copy_to_suggested_reg (GEN_INT (d3), subtarget, DImode);\n+    r1 = copy_to_suggested_reg (GEN_INT (d3), subtarget, DImode);\n   else\n-    r = expand_binop (DImode, add_optab, GEN_INT (d3), GEN_INT (d4),\n-\t\t      subtarget, 0, OPTAB_WIDEN);\n+    r1 = expand_binop (DImode, add_optab, GEN_INT (d3), GEN_INT (d4),\n+\t\t       subtarget, 0, OPTAB_WIDEN);\n \n   /* Shift it into place */\n-  r = expand_binop (DImode, ashl_optab, r, GEN_INT (32), \n-\t\t    subtarget, 0, OPTAB_WIDEN);\n+  r2 = expand_binop (DImode, ashl_optab, r1, GEN_INT (32), \n+\t\t     subtarget, 0, OPTAB_WIDEN);\n \n-  /* Add in the low word */\n-  if (d2 != 0)\n-    r = expand_binop (DImode, add_optab, r, GEN_INT (d2),\n-\t\t      subtarget, 0, OPTAB_WIDEN);\n-  if (d1 != 0)\n-    r = expand_binop (DImode, add_optab, r, GEN_INT (d1),\n-\t\t      subtarget, 0, OPTAB_WIDEN);\n+  if (subtarget == 0 && d1 == d3 && d2 == d4)\n+    r1 = expand_binop (DImode, add_optab, r1, r2, subtarget, 0, OPTAB_WIDEN);\n+  else\n+    {\n+      r1 = r2;\n+\n+      /* Add in the low word */\n+      if (d2 != 0)\n+\tr1 = expand_binop (DImode, add_optab, r1, GEN_INT (d2),\n+\t\t           subtarget, 0, OPTAB_WIDEN);\n+      if (d1 != 0)\n+\tr1 = expand_binop (DImode, add_optab, r1, GEN_INT (d1),\n+\t\t           subtarget, 0, OPTAB_WIDEN);\n+    }\n \n   if (subtarget == 0)\n-    r = copy_to_suggested_reg(r, target, DImode);\n+    r1 = copy_to_suggested_reg(r1, target, DImode);\n \n-  return r;\n+  return r1;\n }\n #endif /* HOST_BITS_PER_WIDE_INT == 64 */\n "}]}