{"sha": "c99e6969f278593d84c622ced0fd01b3ae9a30cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzk5ZTY5NjlmMjc4NTkzZDg0YzYyMmNlZDBmZDAxYjNhZTlhMzBjZg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2006-10-31T17:56:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2006-10-31T17:56:24Z"}, "message": "exp_imgv.adb (Expand_Image_Attribute): For Wide_[Wide_]Character cases...\n\n2006-10-31  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_imgv.adb (Expand_Image_Attribute): For Wide_[Wide_]Character\n\tcases, pass the encoding method, since it is now required by the run\n\ttime.\n\n\t* s-valwch.ads, s-valwch.adb (Value_Wide_Wide_Character): Avoid\n\tassumption that Str'First = 1.\n\t(Value_Wide_Character): Takes EM (encoding method) parameter and passes\n\tit on to the Value_Wide_Wide_Character call.\n\t(Value_Wide_Wide_Character): Takes EM (encoding method) parameter and\n\tproperly handles a string of the form quote-encoded_wide_char-quote.\n\n\t* s-wchcnv.adb: Minor reformatting\n\nFrom-SVN: r118266", "tree": {"sha": "05efa139ac2fbcb141b5b06f6b620f9dbfb2156e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05efa139ac2fbcb141b5b06f6b620f9dbfb2156e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c99e6969f278593d84c622ced0fd01b3ae9a30cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99e6969f278593d84c622ced0fd01b3ae9a30cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c99e6969f278593d84c622ced0fd01b3ae9a30cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c99e6969f278593d84c622ced0fd01b3ae9a30cf/comments", "author": null, "committer": null, "parents": [{"sha": "20f96ac9188ba6c00a1afd0e912ca1910160fbaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20f96ac9188ba6c00a1afd0e912ca1910160fbaf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20f96ac9188ba6c00a1afd0e912ca1910160fbaf"}], "stats": {"total": 127, "additions": 102, "deletions": 25}, "files": [{"sha": "b23d44c212d249d87fdedd803c76d1bdf25decf3", "filename": "gcc/ada/exp_imgv.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fexp_imgv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fexp_imgv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_imgv.adb?ref=c99e6969f278593d84c622ced0fd01b3ae9a30cf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2001-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2001-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -424,7 +424,7 @@ package body Exp_Imgv is\n \n    --    btyp (Value_xx (X))\n \n-   --  where btyp is he base type of the prefix, and\n+   --  where btyp is he base type of the prefix\n \n    --    For types whose root type is Character\n    --      xx = Character\n@@ -453,6 +453,12 @@ package body Exp_Imgv is\n    --    For floating-point types and ordinary fixed-point types\n    --      xx = Real\n \n+   --  For Wide_[Wide_]Character types, typ'Value (X) expands into:\n+\n+   --    btyp (Value_xx (X, EM))\n+\n+   --  where btyp is the base type of the prefix, and EM is the encoding method\n+\n    --  For decimal types with size <= Integer'Size, typ'Value (X)\n    --  expands into\n \n@@ -498,9 +504,17 @@ package body Exp_Imgv is\n       elsif Rtyp = Standard_Wide_Character then\n          Vid := RE_Value_Wide_Character;\n \n+         Append_To (Args,\n+           Make_Integer_Literal (Loc,\n+             Intval => Int (Wide_Character_Encoding_Method)));\n+\n       elsif Rtyp = Standard_Wide_Wide_Character then\n          Vid := RE_Value_Wide_Wide_Character;\n \n+         Append_To (Args,\n+           Make_Integer_Literal (Loc,\n+             Intval => Int (Wide_Character_Encoding_Method)));\n+\n       elsif     Rtyp = Base_Type (Standard_Short_Short_Integer)\n         or else Rtyp = Base_Type (Standard_Short_Integer)\n         or else Rtyp = Base_Type (Standard_Integer)"}, {"sha": "40a2181d821b51cf9df6ce480e8f78e16beefa85", "filename": "gcc/ada/s-valwch.adb", "status": "modified", "additions": 71, "deletions": 16, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-valwch.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-valwch.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valwch.adb?ref=c99e6969f278593d84c622ced0fd01b3ae9a30cf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,8 @@\n \n with Interfaces;      use Interfaces;\n with System.Val_Util; use System.Val_Util;\n+with System.WCh_Cnv;  use System.WCh_Cnv;\n+with System.WCh_Con;  use System.WCh_Con;\n \n package body System.Val_WChar is\n \n@@ -41,16 +43,17 @@ package body System.Val_WChar is\n    --------------------------\n \n    function Value_Wide_Character\n-      (Str : String) return Wide_Character\n+     (Str : String;\n+      EM  : System.WCh_Con.WC_Encoding_Method) return Wide_Character\n    is\n-      WWC : constant Wide_Wide_Character := Value_Wide_Wide_Character (Str);\n-      WWV : constant Unsigned_32         := Wide_Wide_Character'Pos (WWC);\n+      WC : constant Wide_Wide_Character := Value_Wide_Wide_Character (Str, EM);\n+      WV : constant Unsigned_32         := Wide_Wide_Character'Pos (WC);\n    begin\n-      if WWV > 16#FFFF# then\n+      if WV > 16#FFFF# then\n          raise Constraint_Error\n            with \"out of range character for Value attribute\";\n       else\n-         return Wide_Character'Val (WWV);\n+         return Wide_Character'Val (WV);\n       end if;\n    end Value_Wide_Character;\n \n@@ -59,7 +62,8 @@ package body System.Val_WChar is\n    -------------------------------\n \n    function Value_Wide_Wide_Character\n-      (Str : String) return Wide_Wide_Character\n+     (Str : String;\n+      EM  : System.WCh_Con.WC_Encoding_Method) return Wide_Wide_Character\n    is\n       F : Natural;\n       L : Natural;\n@@ -72,25 +76,74 @@ package body System.Val_WChar is\n \n       if S (F) = ''' and then S (L) = ''' then\n \n+         --  Must be at least three characters\n+\n+         if L - F < 2 then\n+            raise Constraint_Error;\n+\n          --  If just three characters, simple character case\n \n-         if L - F = 2 then\n+         elsif L - F = 2 then\n             return Wide_Wide_Character'Val (Character'Pos (S (F + 1)));\n \n-            --  Otherwise something is very wrong\n+         --  Only other possibility for quoted string is wide char sequence\n \n          else\n-            raise Constraint_Error with \"invalid string for Value attribute\";\n+            declare\n+               P : Natural;\n+               W : Wide_Wide_Character;\n+\n+               function In_Char return Character;\n+               --  Function for instantiations of Char_Sequence_To_UTF_32\n+\n+               -------------\n+               -- In_Char --\n+               -------------\n+\n+               function In_Char return Character is\n+               begin\n+                  P := P + 1;\n+\n+                  if P = Str'Last then\n+                     raise Constraint_Error;\n+                  end if;\n+\n+                  return Str (P);\n+               end In_Char;\n+\n+               function UTF_32 is\n+                 new Char_Sequence_To_UTF_32 (In_Char);\n+\n+            begin\n+               P := F + 1;\n+\n+               --  Brackets encoding\n+\n+               if S (F + 1) = '[' then\n+                  W := Wide_Wide_Character'Val (UTF_32 ('[', WCEM_Brackets));\n+\n+               else\n+                  W := Wide_Wide_Character'Val (UTF_32 (S (F + 1), EM));\n+               end if;\n+\n+               if P /= L - 1 then\n+                  raise Constraint_Error;\n+               end if;\n+\n+               return W;\n+            end;\n          end if;\n \n       --  Deal with Hex_hhhhhhhh cases for wide_[wide_]character cases\n \n-      elsif Str'Length = 12 and then Str (1 .. 4) = \"Hex_\" then\n+      elsif Str'Length = 12\n+        and then Str (Str'First .. Str'First + 3) = \"Hex_\"\n+      then\n          declare\n             W : Unsigned_32 := 0;\n \n          begin\n-            for J in 5 .. 12 loop\n+            for J in Str'First + 4 .. Str'First + 11 loop\n                W := W * 16 + Character'Pos (Str (J));\n \n                if Str (J) in '0' .. '9' then\n@@ -100,14 +153,12 @@ package body System.Val_WChar is\n                elsif Str (J) in 'a' .. 'f' then\n                   W := W - Character'Pos ('a') + 10;\n                else\n-                  raise Constraint_Error\n-                    with \"illegal hex character for Value attribute\";\n+                  raise Constraint_Error;\n                end if;\n             end loop;\n \n             if W > 16#7FFF_FFFF# then\n-               raise Constraint_Error\n-                 with \"out of range value for Value attribute\";\n+               raise Constraint_Error;\n             else\n                return Wide_Wide_Character'Val (W);\n             end if;\n@@ -119,6 +170,10 @@ package body System.Val_WChar is\n          return\n            Wide_Wide_Character'Val (Character'Pos (Character'Value (Str)));\n       end if;\n+\n+   exception\n+      when Constraint_Error =>\n+         raise Constraint_Error with \"invalid string for value attribute\";\n    end Value_Wide_Wide_Character;\n \n end System.Val_WChar;"}, {"sha": "46a417fb91144ef0374ded8c8ea0a0749e101a42", "filename": "gcc/ada/s-valwch.ads", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-valwch.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-valwch.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-valwch.ads?ref=c99e6969f278593d84c622ced0fd01b3ae9a30cf", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2006, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,15 +33,23 @@\n \n --  Processing for Wide_[Wide_]Value attribute\n \n+with System.WCh_Con;\n+\n package System.Val_WChar is\n    pragma Pure;\n \n    function Value_Wide_Character\n-      (Str : String) return Wide_Character;\n-   --  Computes Wide_Character'Value (Str)\n+     (Str : String;\n+      EM  : System.WCh_Con.WC_Encoding_Method) return Wide_Character;\n+   --  Computes Wide_Character'Value (Str). The parameter EM is the encoding\n+   --  method used for any Wide_Character sequences in Str. Note that brackets\n+   --  notation is always permitted.\n \n    function Value_Wide_Wide_Character\n-      (Str : String) return Wide_Wide_Character;\n-   --  Computes Wide_Character'Value (Str)\n+     (Str : String;\n+      EM  : System.WCh_Con.WC_Encoding_Method) return Wide_Wide_Character;\n+   --  Computes Wide_Character'Value (Str). The parameter EM is the encoding\n+   --  method used for any wide_character sequences in Str. Note that brackets\n+   --  notation is always permitted.\n \n end System.Val_WChar;"}, {"sha": "d293b95269e45b1f007b114b4584c7eb39b3370f", "filename": "gcc/ada/s-wchcnv.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-wchcnv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c99e6969f278593d84c622ced0fd01b3ae9a30cf/gcc%2Fada%2Fs-wchcnv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-wchcnv.adb?ref=c99e6969f278593d84c622ced0fd01b3ae9a30cf", "patch": "@@ -46,8 +46,8 @@ package body System.WCh_Cnv is\n    -----------------------------\n \n    function Char_Sequence_To_UTF_32\n-     (C       : Character;\n-      EM      : WC_Encoding_Method) return UTF_32_Code\n+     (C  : Character;\n+      EM : WC_Encoding_Method) return UTF_32_Code\n    is\n       B1 : Unsigned_32;\n       C1 : Character;"}]}