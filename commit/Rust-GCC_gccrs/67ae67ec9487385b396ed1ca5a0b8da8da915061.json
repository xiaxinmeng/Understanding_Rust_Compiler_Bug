{"sha": "67ae67ec9487385b396ed1ca5a0b8da8da915061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhZTY3ZWM5NDg3Mzg1YjM5NmVkMWNhNWEwYjhkYThkYTkxNTA2MQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-11-26T12:01:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-26T12:01:07Z"}, "message": "fold-const.c (const_binop): Adjust comment.\n\n\t* fold-const.c (const_binop): Adjust comment.\n\t(extract_muldiv_1): Likewise.\n\t(fold_comparison): Likewise.\n\t* stor-layout.c (place_field): Fix typo.\n\t* tree.c (double_int_fits_to_tree_p): Remove obsolete comment.\n\t(force_fit_type_double): Likewise.  Fix long line.\n\nFrom-SVN: r193812", "tree": {"sha": "d4ff652452f8d0f4b4d25e5a8d66aba916bef128", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4ff652452f8d0f4b4d25e5a8d66aba916bef128"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67ae67ec9487385b396ed1ca5a0b8da8da915061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ae67ec9487385b396ed1ca5a0b8da8da915061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67ae67ec9487385b396ed1ca5a0b8da8da915061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67ae67ec9487385b396ed1ca5a0b8da8da915061/comments", "author": null, "committer": null, "parents": [{"sha": "29be7510afa5761eb64db71df7ef8b2d2d57d8cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29be7510afa5761eb64db71df7ef8b2d2d57d8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29be7510afa5761eb64db71df7ef8b2d2d57d8cf"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "848be9715ffac33750438636de979926cc4291c3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=67ae67ec9487385b396ed1ca5a0b8da8da915061", "patch": "@@ -1,3 +1,12 @@\n+2012-11-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (const_binop): Adjust comment.\n+\t(extract_muldiv_1): Likewise.\n+\t(fold_comparison): Likewise.\n+\t* stor-layout.c (place_field): Fix typo.\n+\t* tree.c (double_int_fits_to_tree_p): Remove obsolete comment.\n+\t(force_fit_type_double): Likewise.  Fix long line.\n+\n 2012-11-26  Greta Yorsh  <Greta.Yorsh@arm.com>\n \n \t* config/arm/arm.h (TARGET_LDRD): Reject Thumb1 targets."}, {"sha": "98ef84fdf27f6e127f4e97f20ef578274c866fb6", "filename": "gcc/fold-const.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=67ae67ec9487385b396ed1ca5a0b8da8da915061", "patch": "@@ -1359,7 +1359,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n   return NULL_TREE;\n }\n \n-/* Create a size type INT_CST node with NUMBER sign extended.  KIND\n+/* Create a sizetype INT_CST node with NUMBER sign extended.  KIND\n    indicates which particular sizetype to create.  */\n \n tree\n@@ -5809,11 +5809,9 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n       else\n \tbreak;\n \n-      /* If we have an unsigned type is not a sizetype, we cannot widen\n-\t the operation since it will change the result if the original\n-\t computation overflowed.  */\n-      if (TYPE_UNSIGNED (ctype)\n-\t  && ctype != type)\n+      /* If we have an unsigned type, we cannot widen the operation since it\n+\t will change the result if the original computation overflowed.  */\n+      if (TYPE_UNSIGNED (ctype) && ctype != type)\n \tbreak;\n \n       /* If we were able to eliminate our operation from the first side,\n@@ -9006,7 +9004,7 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t    }\n \t  /* We can simplify the comparison to a comparison of the variable\n \t     offset parts if the constant offset parts are equal.\n-\t     Be careful to use signed size type here because otherwise we\n+\t     Be careful to use signed sizetype here because otherwise we\n \t     mess with array offsets in the wrong way.  This is possible\n \t     because pointer arithmetic is restricted to retain within an\n \t     object and overflow on pointer differences is undefined as of\n@@ -9016,11 +9014,11 @@ fold_comparison (location_t loc, enum tree_code code, tree type,\n \t\t       || (indirect_base0 && DECL_P (base0))\n \t\t       || POINTER_TYPE_OVERFLOW_UNDEFINED))\n \t    {\n-\t      /* By converting to signed size type we cover middle-end pointer\n+\t      /* By converting to signed sizetype we cover middle-end pointer\n \t         arithmetic which operates on unsigned pointer types of size\n \t         type size and ARRAY_REF offsets which are properly sign or\n \t         zero extended from their type in case it is narrower than\n-\t         size type.  */\n+\t         sizetype.  */\n \t      if (offset0 == NULL_TREE)\n \t\toffset0 = build_int_cst (ssizetype, 0);\n \t      else"}, {"sha": "4ac24f1fc3d3060768ef5c4a27629f50f3def04a", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=67ae67ec9487385b396ed1ca5a0b8da8da915061", "patch": "@@ -1374,7 +1374,7 @@ place_field (record_layout_info rli, tree field)\n \t  normalize_rli (rli);\n         }\n \n-      /* If we're starting a new run of same size type bitfields\n+      /* If we're starting a new run of same type size bitfields\n \t (or a run of non-bitfields), set up the \"first of the run\"\n \t fields.\n "}, {"sha": "7cacb2a0d64c072457694eb19abd080c9a4ebe09", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67ae67ec9487385b396ed1ca5a0b8da8da915061/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=67ae67ec9487385b396ed1ca5a0b8da8da915061", "patch": "@@ -1074,7 +1074,6 @@ double_int_to_tree (tree type, double_int cst)\n bool\n double_int_fits_to_tree_p (const_tree type, double_int cst)\n {\n-  /* Size types *are* sign extended.  */\n   bool sign_extended_type = !TYPE_UNSIGNED (type);\n \n   double_int ext\n@@ -1102,10 +1101,7 @@ tree\n force_fit_type_double (tree type, double_int cst, int overflowable,\n \t\t       bool overflowed)\n {\n-  bool sign_extended_type;\n-\n-  /* Size types *are* sign extended.  */\n-  sign_extended_type = !TYPE_UNSIGNED (type);\n+  bool sign_extended_type = !TYPE_UNSIGNED (type);\n \n   /* If we need to set overflow flags, return a new unshared node.  */\n   if (overflowed || !double_int_fits_to_tree_p(type, cst))\n@@ -1115,8 +1111,8 @@ force_fit_type_double (tree type, double_int cst, int overflowable,\n \t  || (overflowable > 0 && sign_extended_type))\n \t{\n \t  tree t = make_node (INTEGER_CST);\n-\t  TREE_INT_CST (t) = cst.ext (TYPE_PRECISION (type),\n-\t\t\t\t\t     !sign_extended_type);\n+\t  TREE_INT_CST (t)\n+\t    = cst.ext (TYPE_PRECISION (type), !sign_extended_type);\n \t  TREE_TYPE (t) = type;\n \t  TREE_OVERFLOW (t) = 1;\n \t  return t;"}]}