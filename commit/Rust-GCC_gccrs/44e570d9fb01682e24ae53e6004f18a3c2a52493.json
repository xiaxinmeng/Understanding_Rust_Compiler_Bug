{"sha": "44e570d9fb01682e24ae53e6004f18a3c2a52493", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDRlNTcwZDlmYjAxNjgyZTI0YWU1M2U2MDA0ZjE4YTNjMmE1MjQ5Mw==", "commit": {"author": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-10-15T08:16:18Z"}, "committer": {"name": "Andrea Corallo", "email": "andrea.corallo@arm.com", "date": "2020-10-28T11:19:47Z"}, "message": "aarch64: Add bfloat16 vldN_lane_bf16 + vldNq_lane_bf16 intrisics\n\ngcc/ChangeLog\n\n2020-10-15  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* config/aarch64/arm_neon.h (__LD2_LANE_FUNC, __LD3_LANE_FUNC)\n\t(__LD4_LANE_FUNC): Rename the macro generating the 'q' variants\n\tinto __LD2Q_LANE_FUNC, __LD2Q_LANE_FUNC, __LD2Q_LANE_FUNC so they\n\tall can be undefed at the and of the file.\n\t(vld2_lane_bf16, vld2q_lane_bf16, vld3_lane_bf16, vld3q_lane_bf16)\n\t(vld4_lane_bf16, vld4q_lane_bf16): Add new intrinsics.\n\ngcc/testsuite/ChangeLog\n\n2020-10-15  Andrea Corallo  <andrea.corallo@arm.com>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_1.c: New\n\ttestcase.\n\t* gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_2.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld2_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld3_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld4_lane_bf16_indices_1.c:\n\tLikewise.\n\t* gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_bf16_indices_1.c:\n\tLikewise.", "tree": {"sha": "80a20e16a193f4ad77e76d254afb6330c5bff6f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80a20e16a193f4ad77e76d254afb6330c5bff6f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44e570d9fb01682e24ae53e6004f18a3c2a52493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e570d9fb01682e24ae53e6004f18a3c2a52493", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e570d9fb01682e24ae53e6004f18a3c2a52493", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e570d9fb01682e24ae53e6004f18a3c2a52493/comments", "author": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "AndreaCorallo", "id": 6765576, "node_id": "MDQ6VXNlcjY3NjU1NzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6765576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AndreaCorallo", "html_url": "https://github.com/AndreaCorallo", "followers_url": "https://api.github.com/users/AndreaCorallo/followers", "following_url": "https://api.github.com/users/AndreaCorallo/following{/other_user}", "gists_url": "https://api.github.com/users/AndreaCorallo/gists{/gist_id}", "starred_url": "https://api.github.com/users/AndreaCorallo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AndreaCorallo/subscriptions", "organizations_url": "https://api.github.com/users/AndreaCorallo/orgs", "repos_url": "https://api.github.com/users/AndreaCorallo/repos", "events_url": "https://api.github.com/users/AndreaCorallo/events{/privacy}", "received_events_url": "https://api.github.com/users/AndreaCorallo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31643fa3e994749bd2da7b35846f1958f8823b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31643fa3e994749bd2da7b35846f1958f8823b8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31643fa3e994749bd2da7b35846f1958f8823b8d"}], "stats": {"total": 346, "additions": 289, "deletions": 57}, "files": [{"sha": "c9faa4fa19fed747eaca10605c9438c60a95c305", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 61, "deletions": 57, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -20848,11 +20848,9 @@ __LD2_LANE_FUNC (uint32x2x2_t, uint32x2_t, uint32x4x2_t, uint32_t, v2si, v4si, s\n __LD2_LANE_FUNC (uint64x1x2_t, uint64x1_t, uint64x2x2_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n-#undef __LD2_LANE_FUNC\n-\n /* vld2q_lane */\n \n-#define __LD2_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n+#define __LD2Q_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n __extension__ extern __inline intype \\\n __attribute__ ((__always_inline__, __gnu_inline__,__artificial__)) \\\n vld2q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n@@ -20868,22 +20866,20 @@ vld2q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n-__LD2_LANE_FUNC (float16x8x2_t, float16x8_t, float16_t, v8hf, hf, f16)\n-__LD2_LANE_FUNC (float32x4x2_t, float32x4_t, float32_t, v4sf, sf, f32)\n-__LD2_LANE_FUNC (float64x2x2_t, float64x2_t, float64_t, v2df, df, f64)\n-__LD2_LANE_FUNC (poly8x16x2_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n-__LD2_LANE_FUNC (poly16x8x2_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n-__LD2_LANE_FUNC (poly64x2x2_t, poly64x2_t, poly64_t, v2di, di, p64)\n-__LD2_LANE_FUNC (int8x16x2_t, int8x16_t, int8_t, v16qi, qi, s8)\n-__LD2_LANE_FUNC (int16x8x2_t, int16x8_t, int16_t, v8hi, hi, s16)\n-__LD2_LANE_FUNC (int32x4x2_t, int32x4_t, int32_t, v4si, si, s32)\n-__LD2_LANE_FUNC (int64x2x2_t, int64x2_t, int64_t, v2di, di, s64)\n-__LD2_LANE_FUNC (uint8x16x2_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n-__LD2_LANE_FUNC (uint16x8x2_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n-__LD2_LANE_FUNC (uint32x4x2_t, uint32x4_t, uint32_t, v4si, si, u32)\n-__LD2_LANE_FUNC (uint64x2x2_t, uint64x2_t, uint64_t, v2di, di, u64)\n-\n-#undef __LD2_LANE_FUNC\n+__LD2Q_LANE_FUNC (float16x8x2_t, float16x8_t, float16_t, v8hf, hf, f16)\n+__LD2Q_LANE_FUNC (float32x4x2_t, float32x4_t, float32_t, v4sf, sf, f32)\n+__LD2Q_LANE_FUNC (float64x2x2_t, float64x2_t, float64_t, v2df, df, f64)\n+__LD2Q_LANE_FUNC (poly8x16x2_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n+__LD2Q_LANE_FUNC (poly16x8x2_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n+__LD2Q_LANE_FUNC (poly64x2x2_t, poly64x2_t, poly64_t, v2di, di, p64)\n+__LD2Q_LANE_FUNC (int8x16x2_t, int8x16_t, int8_t, v16qi, qi, s8)\n+__LD2Q_LANE_FUNC (int16x8x2_t, int16x8_t, int16_t, v8hi, hi, s16)\n+__LD2Q_LANE_FUNC (int32x4x2_t, int32x4_t, int32_t, v4si, si, s32)\n+__LD2Q_LANE_FUNC (int64x2x2_t, int64x2_t, int64_t, v2di, di, s64)\n+__LD2Q_LANE_FUNC (uint8x16x2_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n+__LD2Q_LANE_FUNC (uint16x8x2_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n+__LD2Q_LANE_FUNC (uint32x4x2_t, uint32x4_t, uint32_t, v4si, si, u32)\n+__LD2Q_LANE_FUNC (uint64x2x2_t, uint64x2_t, uint64_t, v2di, di, u64)\n \n /* vld3_lane */\n \n@@ -20947,11 +20943,9 @@ __LD3_LANE_FUNC (uint32x2x3_t, uint32x2_t, uint32x4x3_t, uint32_t, v2si, v4si, s\n __LD3_LANE_FUNC (uint64x1x3_t, uint64x1_t, uint64x2x3_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n-#undef __LD3_LANE_FUNC\n-\n /* vld3q_lane */\n \n-#define __LD3_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n+#define __LD3Q_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n __extension__ extern __inline intype \\\n __attribute__ ((__always_inline__, __gnu_inline__,__artificial__)) \\\n vld3q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n@@ -20969,22 +20963,20 @@ vld3q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n-__LD3_LANE_FUNC (float16x8x3_t, float16x8_t, float16_t, v8hf, hf, f16)\n-__LD3_LANE_FUNC (float32x4x3_t, float32x4_t, float32_t, v4sf, sf, f32)\n-__LD3_LANE_FUNC (float64x2x3_t, float64x2_t, float64_t, v2df, df, f64)\n-__LD3_LANE_FUNC (poly8x16x3_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n-__LD3_LANE_FUNC (poly16x8x3_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n-__LD3_LANE_FUNC (poly64x2x3_t, poly64x2_t, poly64_t, v2di, di, p64)\n-__LD3_LANE_FUNC (int8x16x3_t, int8x16_t, int8_t, v16qi, qi, s8)\n-__LD3_LANE_FUNC (int16x8x3_t, int16x8_t, int16_t, v8hi, hi, s16)\n-__LD3_LANE_FUNC (int32x4x3_t, int32x4_t, int32_t, v4si, si, s32)\n-__LD3_LANE_FUNC (int64x2x3_t, int64x2_t, int64_t, v2di, di, s64)\n-__LD3_LANE_FUNC (uint8x16x3_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n-__LD3_LANE_FUNC (uint16x8x3_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n-__LD3_LANE_FUNC (uint32x4x3_t, uint32x4_t, uint32_t, v4si, si, u32)\n-__LD3_LANE_FUNC (uint64x2x3_t, uint64x2_t, uint64_t, v2di, di, u64)\n-\n-#undef __LD3_LANE_FUNC\n+__LD3Q_LANE_FUNC (float16x8x3_t, float16x8_t, float16_t, v8hf, hf, f16)\n+__LD3Q_LANE_FUNC (float32x4x3_t, float32x4_t, float32_t, v4sf, sf, f32)\n+__LD3Q_LANE_FUNC (float64x2x3_t, float64x2_t, float64_t, v2df, df, f64)\n+__LD3Q_LANE_FUNC (poly8x16x3_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n+__LD3Q_LANE_FUNC (poly16x8x3_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n+__LD3Q_LANE_FUNC (poly64x2x3_t, poly64x2_t, poly64_t, v2di, di, p64)\n+__LD3Q_LANE_FUNC (int8x16x3_t, int8x16_t, int8_t, v16qi, qi, s8)\n+__LD3Q_LANE_FUNC (int16x8x3_t, int16x8_t, int16_t, v8hi, hi, s16)\n+__LD3Q_LANE_FUNC (int32x4x3_t, int32x4_t, int32_t, v4si, si, s32)\n+__LD3Q_LANE_FUNC (int64x2x3_t, int64x2_t, int64_t, v2di, di, s64)\n+__LD3Q_LANE_FUNC (uint8x16x3_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n+__LD3Q_LANE_FUNC (uint16x8x3_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n+__LD3Q_LANE_FUNC (uint32x4x3_t, uint32x4_t, uint32_t, v4si, si, u32)\n+__LD3Q_LANE_FUNC (uint64x2x3_t, uint64x2_t, uint64_t, v2di, di, u64)\n \n /* vld4_lane */\n \n@@ -21056,11 +21048,9 @@ __LD4_LANE_FUNC (uint32x2x4_t, uint32x2_t, uint32x4x4_t, uint32_t, v2si, v4si, s\n __LD4_LANE_FUNC (uint64x1x4_t, uint64x1_t, uint64x2x4_t, uint64_t, di, v2di, di,\n \t\t u64, int64x2_t)\n \n-#undef __LD4_LANE_FUNC\n-\n /* vld4q_lane */\n \n-#define __LD4_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n+#define __LD4Q_LANE_FUNC(intype, vtype, ptrtype, mode, ptrmode, funcsuffix) \\\n __extension__ extern __inline intype \\\n __attribute__ ((__always_inline__, __gnu_inline__,__artificial__)) \\\n vld4q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n@@ -21080,22 +21070,20 @@ vld4q_lane_##funcsuffix (const ptrtype * __ptr, intype __b, const int __c) \\\n   return ret;\t\t\t\t\t\t\t\t   \\\n }\n \n-__LD4_LANE_FUNC (float16x8x4_t, float16x8_t, float16_t, v8hf, hf, f16)\n-__LD4_LANE_FUNC (float32x4x4_t, float32x4_t, float32_t, v4sf, sf, f32)\n-__LD4_LANE_FUNC (float64x2x4_t, float64x2_t, float64_t, v2df, df, f64)\n-__LD4_LANE_FUNC (poly8x16x4_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n-__LD4_LANE_FUNC (poly16x8x4_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n-__LD4_LANE_FUNC (poly64x2x4_t, poly64x2_t, poly64_t, v2di, di, p64)\n-__LD4_LANE_FUNC (int8x16x4_t, int8x16_t, int8_t, v16qi, qi, s8)\n-__LD4_LANE_FUNC (int16x8x4_t, int16x8_t, int16_t, v8hi, hi, s16)\n-__LD4_LANE_FUNC (int32x4x4_t, int32x4_t, int32_t, v4si, si, s32)\n-__LD4_LANE_FUNC (int64x2x4_t, int64x2_t, int64_t, v2di, di, s64)\n-__LD4_LANE_FUNC (uint8x16x4_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n-__LD4_LANE_FUNC (uint16x8x4_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n-__LD4_LANE_FUNC (uint32x4x4_t, uint32x4_t, uint32_t, v4si, si, u32)\n-__LD4_LANE_FUNC (uint64x2x4_t, uint64x2_t, uint64_t, v2di, di, u64)\n-\n-#undef __LD4_LANE_FUNC\n+__LD4Q_LANE_FUNC (float16x8x4_t, float16x8_t, float16_t, v8hf, hf, f16)\n+__LD4Q_LANE_FUNC (float32x4x4_t, float32x4_t, float32_t, v4sf, sf, f32)\n+__LD4Q_LANE_FUNC (float64x2x4_t, float64x2_t, float64_t, v2df, df, f64)\n+__LD4Q_LANE_FUNC (poly8x16x4_t, poly8x16_t, poly8_t, v16qi, qi, p8)\n+__LD4Q_LANE_FUNC (poly16x8x4_t, poly16x8_t, poly16_t, v8hi, hi, p16)\n+__LD4Q_LANE_FUNC (poly64x2x4_t, poly64x2_t, poly64_t, v2di, di, p64)\n+__LD4Q_LANE_FUNC (int8x16x4_t, int8x16_t, int8_t, v16qi, qi, s8)\n+__LD4Q_LANE_FUNC (int16x8x4_t, int16x8_t, int16_t, v8hi, hi, s16)\n+__LD4Q_LANE_FUNC (int32x4x4_t, int32x4_t, int32_t, v4si, si, s32)\n+__LD4Q_LANE_FUNC (int64x2x4_t, int64x2_t, int64_t, v2di, di, s64)\n+__LD4Q_LANE_FUNC (uint8x16x4_t, uint8x16_t, uint8_t, v16qi, qi, u8)\n+__LD4Q_LANE_FUNC (uint16x8x4_t, uint16x8_t, uint16_t, v8hi, hi, u16)\n+__LD4Q_LANE_FUNC (uint32x4x4_t, uint32x4_t, uint32_t, v4si, si, u32)\n+__LD4Q_LANE_FUNC (uint64x2x4_t, uint64x2_t, uint64_t, v2di, di, u64)\n \n /* vmax */\n \n@@ -35752,6 +35740,15 @@ vcopyq_laneq_bf16 (bfloat16x8_t __a, const int __lane1,\n \t\t\t\t  __a, __lane1);\n }\n \n+__LD2_LANE_FUNC (bfloat16x4x2_t, bfloat16x4_t, bfloat16x8x2_t, bfloat16_t, v4bf,\n+\t\t v8bf, bf, bf16, bfloat16x8_t)\n+__LD2Q_LANE_FUNC (bfloat16x8x2_t, bfloat16x8_t, bfloat16_t, v8bf, bf, bf16)\n+__LD3_LANE_FUNC (bfloat16x4x3_t, bfloat16x4_t, bfloat16x8x3_t, bfloat16_t, v4bf,\n+\t\t v8bf, bf, bf16, bfloat16x8_t)\n+__LD3Q_LANE_FUNC (bfloat16x8x3_t, bfloat16x8_t, bfloat16_t, v8bf, bf, bf16)\n+__LD4_LANE_FUNC (bfloat16x4x4_t, bfloat16x4_t, bfloat16x8x4_t, bfloat16_t, v4bf,\n+\t\t v8bf, bf, bf16, bfloat16x8_t)\n+__LD4Q_LANE_FUNC (bfloat16x8x4_t, bfloat16x8_t, bfloat16_t, v8bf, bf, bf16)\n #pragma GCC pop_options\n \n /* AdvSIMD 8-bit Integer Matrix Multiply (I8MM) intrinsics.  */\n@@ -35965,4 +35962,11 @@ vaddq_p128 (poly128_t __a, poly128_t __b)\n #undef __aarch64_vdupq_laneq_u32\n #undef __aarch64_vdupq_laneq_u64\n \n+#undef __LD2_LANE_FUNC\n+#undef __LD2Q_LANE_FUNC\n+#undef __LD3_LANE_FUNC\n+#undef __LD3Q_LANE_FUNC\n+#undef __LD4_LANE_FUNC\n+#undef __LD4Q_LANE_FUNC\n+\n #endif"}, {"sha": "a83ed3e45da10daa31c677dc42a7c419f35cb1a4", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_1.c", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,74 @@\n+/* { dg-do run { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+typedef union\n+{\n+  bfloat16_t bf16;\n+  uint16_t u16;\n+} bfloat16_u_t;\n+\n+#define VARIANTS(VARIANT, STRUCT)\t\t\\\n+VARIANT (bfloat16, , 4, _bf16, 3, STRUCT)\t\\\n+VARIANT (bfloat16, q, 8, _bf16, 7, STRUCT)\n+\n+#define TESTMETH(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t       \\\n+  int\t\t\t\t\t\t\t\t\t       \\\n+  test_vld##STRUCT##Q##_lane##SUFFIX (const bfloat16_u_t *data,\t\t       \\\n+\t\t\t\t      const bfloat16_u_t *overwrite)\t       \\\n+  {\t\t\t\t\t\t\t\t\t       \\\n+    BASE##x##ELTS##x##STRUCT##_t vectors;\t\t\t\t       \\\n+    bfloat16_u_t temp[ELTS];\t\t\t\t\t\t       \\\n+    int i,j;\t\t\t\t\t\t\t\t       \\\n+    for (i = 0; i < STRUCT; i++, data += ELTS)\t\t\t\t       \\\n+      vectors.val[i] = vld1##Q##SUFFIX ((bfloat16_t *)data);\t\t       \\\n+    vectors = vld##STRUCT##Q##_lane##SUFFIX ((bfloat16_t *) overwrite,\t       \\\n+\t\t\t\t\t     vectors, LANE);\t\t       \\\n+    while (--i >= 0)\t\t\t\t\t\t\t       \\\n+      {\t\t\t\t\t\t\t\t\t       \\\n+\tvst1##Q##SUFFIX ((bfloat16_t *)temp, vectors.val[i]);\t\t       \\\n+\tdata -= ELTS; /* Point at value loaded before vldN_lane.  */\t       \\\n+\tfor (j = 0; j < ELTS; j++)\t\t\t\t\t       \\\n+\t  if (temp[j].u16 != (j == LANE ? overwrite[i].u16 : data[j].u16))     \\\n+\t    return 1;\t\t\t\t\t\t\t       \\\n+      }\t\t\t\t\t\t\t\t\t       \\\n+    return 0;\t\t\t\t\t\t\t\t       \\\n+  }\n+\n+/* Tests of vld2_lane and vld2q_lane.  */\n+VARIANTS (TESTMETH, 2)\n+/* Tests of vld3_lane and vld3q_lane.  */\n+VARIANTS (TESTMETH, 3)\n+/* Tests of vld4_lane and vld4q_lane.  */\n+VARIANTS (TESTMETH, 4)\n+\n+#define CHECK(BASE, Q, ELTS, SUFFIX, LANE, STRUCT)\t\t\t       \\\n+  if (test_vld##STRUCT##Q##_lane##SUFFIX ((const bfloat16_u_t *)orig_data,     \\\n+\t\t\t\t\t  BASE##_data) != 0)\t\t       \\\n+    abort ();\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Original data for all vector formats.  */\n+  uint64_t orig_data[8] = {0x1234567890abcdefULL, 0x13579bdf02468aceULL,\n+\t\t\t   0x012389ab4567cdefULL, 0xdeeddadacafe0431ULL,\n+\t\t\t   0x1032547698badcfeULL, 0xbadbadbadbad0badULL,\n+\t\t\t   0x0102030405060708ULL, 0x0f0e0d0c0b0a0908ULL};\n+\n+  /* Data with which vldN_lane will overwrite some of previous.  */\n+  bfloat16_u_t bfloat16_data[4];\n+  bfloat16_data[0].u16 = 0xABAB;\n+  bfloat16_data[1].u16 = 0x0;\n+  bfloat16_data[2].u16 = 0xCAFE;\n+  bfloat16_data[3].u16 = 0x1234;\n+\n+  VARIANTS (CHECK, 2);\n+  VARIANTS (CHECK, 3);\n+  VARIANTS (CHECK, 4);\n+  return 0;\n+}"}, {"sha": "670cf0ba75ac7bb832445b68dce47a30b3d8563a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/bf16_vldN_lane_2.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fbf16_vldN_lane_2.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do assemble { target { aarch64*-*-* } } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+/* { dg-additional-options \"-O2  --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4x2_t\n+test_vld2_lane_bf16 (const bfloat16_t *ptr, bfloat16x4x2_t b)\n+{\n+  return vld2_lane_bf16 (ptr, b, 2);\n+}\n+\n+bfloat16x8x2_t\n+test_vld2q_lane_bf16 (const bfloat16_t *ptr, bfloat16x8x2_t b)\n+{\n+  return vld2q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld2\\\\t{v2.h - v3.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 2 } } */\n+\n+bfloat16x4x3_t\n+test_vld3_lane_bf16 (const bfloat16_t *ptr, bfloat16x4x3_t b)\n+{\n+  return vld3_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld3\\t{v4.h - v6.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+bfloat16x8x3_t\n+test_vld3q_lane_bf16 (const bfloat16_t *ptr, bfloat16x8x3_t b)\n+{\n+  return vld3q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld3\\t{v1.h - v3.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+bfloat16x4x4_t\n+test_vld4_lane_bf16 (const bfloat16_t *ptr, bfloat16x4x4_t b)\n+{\n+  return vld4_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld4\\t{v4.h - v7.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */\n+\n+bfloat16x8x4_t\n+test_vld4q_lane_bf16 (const bfloat16_t *ptr, bfloat16x8x4_t b)\n+{\n+  return vld4q_lane_bf16 (ptr, b, 2);\n+}\n+\n+/* { dg-final { scan-assembler-times \"ld4\\t{v0.h - v3.h}\\\\\\[2\\\\\\], \\\\\\[x0\\\\\\]\" 1 } } */"}, {"sha": "99c979393ff7fa2017bceb8a4a7783906f38ac6f", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4x2_t\n+f_vld2_lane_bf16 (bfloat16_t * p, bfloat16x4x2_t v)\n+{\n+  bfloat16x4x2_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld2_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld2_lane_bf16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "86d778a07b1cabe60c4227b2a7c06609ad6fc095", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld2q_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld2q_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x8x2_t\n+f_vld2q_lane_bf16 (bfloat16_t * p, bfloat16x8x2_t v)\n+{\n+  bfloat16x8x2_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld2q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld2q_lane_bf16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "e91a2bea1adda548d18620353741ab2d95b5fb1e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4x3_t\n+f_vld3_lane_bf16 (bfloat16_t * p, bfloat16x4x3_t v)\n+{\n+  bfloat16x4x3_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld3_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld3_lane_bf16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "95421befd9f3d8ce8d44d7bb2737093206263c7e", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld3q_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld3q_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x8x3_t\n+f_vld3q_lane_bf16 (bfloat16_t * p, bfloat16x8x3_t v)\n+{\n+  bfloat16x8x3_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld3q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld3q_lane_bf16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "1c819aa8aadbe344ec40c7c26fe1573f9b87eda1", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x4x4_t\n+f_vld4_lane_bf16 (bfloat16_t * p, bfloat16x4x4_t v)\n+{\n+  bfloat16x4x4_t res;\n+  /* { dg-error \"lane 4 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld4_lane_bf16 (p, v, 4);\n+  /* { dg-error \"lane -1 out of range 0 - 3\" \"\" { target *-*-* } 0 } */\n+  res = vld4_lane_bf16 (p, v, -1);\n+  return res;\n+}"}, {"sha": "f7c76fa0cde540f69f66724cbe61a4f14271535a", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vld4q_lane_bf16_indices_1.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_bf16_indices_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44e570d9fb01682e24ae53e6004f18a3c2a52493/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_bf16_indices_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvld4q_lane_bf16_indices_1.c?ref=44e570d9fb01682e24ae53e6004f18a3c2a52493", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target { aarch64*-*-* } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-fno-fat-lto-objects\" } } */\n+/* { dg-require-effective-target arm_v8_2a_bf16_neon_ok } */\n+/* { dg-add-options arm_v8_2a_bf16_neon }  */\n+\n+#include <arm_neon.h>\n+\n+bfloat16x8x4_t\n+f_vld4q_lane_bf16 (bfloat16_t * p, bfloat16x8x4_t v)\n+{\n+  bfloat16x8x4_t res;\n+  /* { dg-error \"lane 8 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld4q_lane_bf16 (p, v, 8);\n+  /* { dg-error \"lane -1 out of range 0 - 7\" \"\" { target *-*-* } 0 } */\n+  res = vld4q_lane_bf16 (p, v, -1);\n+  return res;\n+}"}]}