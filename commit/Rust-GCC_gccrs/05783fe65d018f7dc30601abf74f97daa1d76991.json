{"sha": "05783fe65d018f7dc30601abf74f97daa1d76991", "node_id": "C_kwDOANBUbNoAKDA1NzgzZmU2NWQwMThmN2RjMzA2MDFhYmY3NGY5N2RhYTFkNzY5OTE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-08T10:36:25Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2021-11-08T10:36:25Z"}, "message": "aarch64: LD3/LD4 post-modify costs for struct modes\n\nThe LD3/ST3 and LD4/ST4 address cost code had no test coverage (oops).\nThis patch fixes that and updates it for the new structure modes.\nThe test only covers Advanced SIMD because SVE doesn't have\npost-increment forms.\n\ngcc/\n\t* config/aarch64/aarch64.c (aarch64_ldn_stn_vectors): New function.\n\t(aarch64_address_cost): Use it instead of testing for CImode and\n\tXImode directly.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/neoverse_v1_1.c: New test.", "tree": {"sha": "7269ac53d667cc4820bc6a88930278bcfff5952a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7269ac53d667cc4820bc6a88930278bcfff5952a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05783fe65d018f7dc30601abf74f97daa1d76991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05783fe65d018f7dc30601abf74f97daa1d76991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05783fe65d018f7dc30601abf74f97daa1d76991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05783fe65d018f7dc30601abf74f97daa1d76991/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fd2477ddc358660611f79d8e50f31ed0f3aa105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fd2477ddc358660611f79d8e50f31ed0f3aa105", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fd2477ddc358660611f79d8e50f31ed0f3aa105"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "19f674152343db1e8e5163e44b9313d274f1f3eb", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05783fe65d018f7dc30601abf74f97daa1d76991/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05783fe65d018f7dc30601abf74f97daa1d76991/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=05783fe65d018f7dc30601abf74f97daa1d76991", "patch": "@@ -3108,6 +3108,23 @@ aarch64_vl_bytes (machine_mode mode, unsigned int vec_flags)\n   return BYTES_PER_SVE_PRED;\n }\n \n+/* If MODE holds an array of vectors, return the number of vectors\n+   in the array, otherwise return 1.  */\n+\n+static unsigned int\n+aarch64_ldn_stn_vectors (machine_mode mode)\n+{\n+  unsigned int vec_flags = aarch64_classify_vector_mode (mode);\n+  if (vec_flags == (VEC_ADVSIMD | VEC_PARTIAL | VEC_STRUCT))\n+    return exact_div (GET_MODE_SIZE (mode), 8).to_constant ();\n+  if (vec_flags == (VEC_ADVSIMD | VEC_STRUCT))\n+    return exact_div (GET_MODE_SIZE (mode), 16).to_constant ();\n+  if (vec_flags == (VEC_SVE_DATA | VEC_STRUCT))\n+    return exact_div (GET_MODE_SIZE (mode),\n+\t\t      BYTES_PER_SVE_VECTOR).to_constant ();\n+  return 1;\n+}\n+\n /* Given an Advanced SIMD vector mode MODE and a tuple size NELEMS, return the\n    corresponding vector structure mode.  */\n static opt_machine_mode\n@@ -12511,9 +12528,10 @@ aarch64_address_cost (rtx x,\n \t  cost += addr_cost->pre_modify;\n \telse if (c == POST_INC || c == POST_DEC || c == POST_MODIFY)\n \t  {\n-\t    if (mode == CImode)\n+\t    unsigned int nvectors = aarch64_ldn_stn_vectors (mode);\n+\t    if (nvectors == 3)\n \t      cost += addr_cost->post_modify_ld3_st3;\n-\t    else if (mode == XImode)\n+\t    else if (nvectors == 4)\n \t      cost += addr_cost->post_modify_ld4_st4;\n \t    else\n \t      cost += addr_cost->post_modify;"}, {"sha": "c1563f01861c43cbcaa883df26c24c6db5dc5779", "filename": "gcc/testsuite/gcc.target/aarch64/neoverse_v1_1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05783fe65d018f7dc30601abf74f97daa1d76991/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fneoverse_v1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05783fe65d018f7dc30601abf74f97daa1d76991/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fneoverse_v1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fneoverse_v1_1.c?ref=05783fe65d018f7dc30601abf74f97daa1d76991", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-options \"-O2 -mcpu=neoverse-v1\" } */\n+\n+void\n+foo (short *restrict x, short y[restrict][128])\n+{\n+  for (int i = 0; i < 128; ++i)\n+    {\n+      y[0][i] = x[i * 3 + 0];\n+      y[1][i] = x[i * 3 + 1];\n+      y[2][i] = x[i * 3 + 2];\n+    }\n+}\n+\n+/* This shouldn't be a post-increment.  */\n+/* { dg-final { scan-assembler {ld3\\t{[^{}]*}, \\[x[0-9]+\\]\\n} } } */"}]}