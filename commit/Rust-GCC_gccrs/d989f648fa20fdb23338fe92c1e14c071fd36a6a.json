{"sha": "d989f648fa20fdb23338fe92c1e14c071fd36a6a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk4OWY2NDhmYTIwZmRiMjMzMzhmZTkyYzFlMTRjMDcxZmQzNmE2YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-07-18T21:34:15Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-07-18T21:34:15Z"}, "message": "md.texi (reload_in/out): Document restrictions in predicates and constraints for these patterns.\n\n        * doc/md.texi (reload_in/out): Document restrictions in predicates\n        and constraints for these patterns.  Document empty string matching\n        ALL_REGS.\n\nFrom-SVN: r44134", "tree": {"sha": "68a2c6b74e7745337eb652ff18ec1400a42fe871", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68a2c6b74e7745337eb652ff18ec1400a42fe871"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d989f648fa20fdb23338fe92c1e14c071fd36a6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d989f648fa20fdb23338fe92c1e14c071fd36a6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d989f648fa20fdb23338fe92c1e14c071fd36a6a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d989f648fa20fdb23338fe92c1e14c071fd36a6a/comments", "author": null, "committer": null, "parents": [{"sha": "31831acf291f3146c15a7cf3568188527a1cf425", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31831acf291f3146c15a7cf3568188527a1cf425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31831acf291f3146c15a7cf3568188527a1cf425"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "dfe38acf835da5b32585a661bd5f3f1f45186c11", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d989f648fa20fdb23338fe92c1e14c071fd36a6a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d989f648fa20fdb23338fe92c1e14c071fd36a6a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d989f648fa20fdb23338fe92c1e14c071fd36a6a", "patch": "@@ -1,3 +1,9 @@\n+2001-07-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/md.texi (reload_in/out): Document restrictions in predicates\n+\tand constraints for these patterns.  Document empty string matching\n+\tALL_REGS.\n+\n 2001-07-18  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* defaults.h (ASM_OUTPUT_WEAK_ALIAS): Check for ASM_WEAKEN_LABEL."}, {"sha": "0b680cdfc49a13489345252dd49e0473c03fbca1", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d989f648fa20fdb23338fe92c1e14c071fd36a6a/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d989f648fa20fdb23338fe92c1e14c071fd36a6a/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=d989f648fa20fdb23338fe92c1e14c071fd36a6a", "patch": "@@ -2076,6 +2076,17 @@ move between operand 0 and operand 1.  Operand 2 describes the scratch\n register.  See the discussion of the @code{SECONDARY_RELOAD_CLASS}\n macro in @pxref{Register Classes}.\n \n+There are special restrictions on the form of the @code{match_operand}s\n+used in these patterns.  First, only the predicate for the reload \n+operand is examined, i.e. @code{reload_in} examines operand 1, but not\n+the predicates for operand 0 or 2.  Second, there may only be one\n+alternative in the constraints.  Third, only a single register class\n+letter may be used for the constraint; subsequent constraint letters\n+are ignored.  As a special exception, an empty constraint string\n+matches the @code{ALL_REGS} register class.  This may relieve ports\n+of the burden of defining an @code{ALL_REGS} constraint letter just\n+for these patterns.\n+\n @cindex @code{movstrict@var{m}} instruction pattern\n @item @samp{movstrict@var{m}}\n Like @samp{mov@var{m}} except that if operand 0 is a @code{subreg}"}]}