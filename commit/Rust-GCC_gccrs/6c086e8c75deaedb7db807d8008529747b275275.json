{"sha": "6c086e8c75deaedb7db807d8008529747b275275", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMwODZlOGM3NWRlYWVkYjdkYjgwN2Q4MDA4NTI5NzQ3YjI3NTI3NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-06-07T04:21:35Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-06-07T04:21:35Z"}, "message": "Fix libgcov-driver-system bootstrap failure (PR bootstrap/86057).\n\n2018-06-07  Martin Liska  <mliska@suse.cz>\n\n        PR bootstrap/86057\n\t* libgcov-driver-system.c (replace_filename_variables): Use\n        memcpy instead of mempcpy.\n\t(allocate_filename_struct): Do not allocate filename, allocate\n        prefix and set it.\n\t(gcov_exit_open_gcda_file): Allocate memory for gf->filename\n        here and properly copy content into it.\n\t* libgcov-driver.c (struct gcov_filename): Remove max_length\n        field, change prefix from size_t into char *.\n\t(compute_summary): Do not calculate longest filename.\n\t(gcov_do_dump): Release memory of gf.filename after each file.\n\t* libgcov-util.c (compute_summary): Use new signature of\n        compute_summary.\n\t(calculate_overlap): Likewise.\n\nFrom-SVN: r261260", "tree": {"sha": "bf1b9fcbe6c7ae18bf10e75a89c7d5437a865a21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf1b9fcbe6c7ae18bf10e75a89c7d5437a865a21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c086e8c75deaedb7db807d8008529747b275275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c086e8c75deaedb7db807d8008529747b275275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c086e8c75deaedb7db807d8008529747b275275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c086e8c75deaedb7db807d8008529747b275275/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37777cd0335f3220e4cbe263099af633f1e1c645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37777cd0335f3220e4cbe263099af633f1e1c645", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37777cd0335f3220e4cbe263099af633f1e1c645"}], "stats": {"total": 81, "additions": 54, "deletions": 27}, "files": [{"sha": "1ff66c54dadb8cac781e26e6c979b20d2861c431", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=6c086e8c75deaedb7db807d8008529747b275275", "patch": "@@ -1,3 +1,20 @@\n+2018-06-07  Martin Liska  <mliska@suse.cz>\n+\n+        PR bootstrap/86057\n+\t* libgcov-driver-system.c (replace_filename_variables): Use\n+        memcpy instead of mempcpy.\n+\t(allocate_filename_struct): Do not allocate filename, allocate\n+        prefix and set it.\n+\t(gcov_exit_open_gcda_file): Allocate memory for gf->filename\n+        here and properly copy content into it.\n+\t* libgcov-driver.c (struct gcov_filename): Remove max_length\n+        field, change prefix from size_t into char *.\n+\t(compute_summary): Do not calculate longest filename.\n+\t(gcov_do_dump): Release memory of gf.filename after each file.\n+\t* libgcov-util.c (compute_summary): Use new signature of\n+        compute_summary.\n+\t(calculate_overlap): Likewise.\n+\n 2018-06-05  Martin Liska  <mliska@suse.cz>\n \n \tPR gcov-profile/47618"}, {"sha": "8c1fef00456e864e3865fb4c19093b8530d09c05", "filename": "libgcc/libgcov-driver-system.c", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-driver-system.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-driver-system.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver-system.c?ref=6c086e8c75deaedb7db807d8008529747b275275", "patch": "@@ -190,9 +190,12 @@ replace_filename_variables (char *filename)\n \n \t  char *buffer = (char *)xmalloc (start + end + repl_length + 1);\n \t  char *buffer_ptr = buffer;\n-\t  buffer_ptr = (char *)mempcpy (buffer_ptr, filename, start);\n-\t  buffer_ptr = (char *)mempcpy (buffer_ptr, replacement, repl_length);\n-\t  buffer_ptr = (char *)mempcpy (buffer_ptr, p, end);\n+\t  buffer_ptr = (char *)memcpy (buffer_ptr, filename, start);\n+\t  buffer_ptr += start;\n+\t  buffer_ptr = (char *)memcpy (buffer_ptr, replacement, repl_length);\n+\t  buffer_ptr += repl_length;\n+\t  buffer_ptr = (char *)memcpy (buffer_ptr, p, end);\n+\t  buffer_ptr += end;\n \t  *buffer_ptr = '\\0';\n \n \t  free (filename);\n@@ -210,6 +213,7 @@ allocate_filename_struct (struct gcov_filename *gf)\n   const char *gcov_prefix;\n   size_t prefix_length;\n   int strip = 0;\n+  gf->filename = NULL;\n \n   {\n     /* Check if the level of dirs to strip off specified. */\n@@ -239,12 +243,16 @@ allocate_filename_struct (struct gcov_filename *gf)\n       gcov_prefix = \".\";\n       prefix_length = 1;\n     }\n-  gf->prefix = prefix_length;\n \n   /* Allocate and initialize the filename scratch space.  */\n-  gf->filename = (char *) xmalloc (gf->max_length + prefix_length + 2);\n   if (prefix_length)\n-    memcpy (gf->filename, gcov_prefix, prefix_length);\n+    {\n+      gf->prefix = (char *) xmalloc (prefix_length + 1);\n+      char *p = (char *) memcpy (gf->prefix, gcov_prefix, prefix_length);\n+      *(p + prefix_length) = '\\0';\n+    }\n+  else\n+    gf->prefix = NULL;\n }\n \n /* Open a gcda file specified by GI_FILENAME.\n@@ -255,7 +263,7 @@ gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n \t\t\t  struct gcov_filename *gf)\n {\n   const char *fname = gi_ptr->filename;\n-  char *dst = gf->filename + gf->prefix;\n+  int append_slash = 0;\n \n   fname = gi_ptr->filename;\n \n@@ -288,9 +296,17 @@ gcov_exit_open_gcda_file (struct gcov_info *gi_ptr,\n \tfname += 2;\n \n       if (!IS_DIR_SEPARATOR (*fname))\n-\t*dst++ = '/';\n+\tappend_slash = 1;\n     }\n-  strcpy (dst, fname);\n+\n+  size_t prefix_length = gf->prefix ? strlen (gf->prefix) : 0;\n+  gf->filename = (char *) xmalloc (prefix_length + strlen (fname) + 2);\n+  *gf->filename = '\\0';\n+  if (prefix_length)\n+    strcat (gf->filename, gf->prefix);\n+  if (append_slash)\n+    *gf->filename++ = '/';\n+  strcat (gf->filename, fname);\n \n   gf->filename = replace_filename_variables (gf->filename);\n "}, {"sha": "7ae33b8d41797848c38f3f5023f2acd0035d71b0", "filename": "libgcc/libgcov-driver.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-driver.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-driver.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-driver.c?ref=6c086e8c75deaedb7db807d8008529747b275275", "patch": "@@ -72,9 +72,8 @@ struct gcov_summary_buffer\n struct gcov_filename\n {\n   char *filename;  /* filename buffer */\n-  size_t max_length;  /* maximum filename length */\n   int strip; /* leading chars to strip from filename */\n-  size_t prefix; /* chars to prepend to filename */\n+  char *prefix; /* prefix string */\n };\n \n static struct gcov_fn_buffer *\n@@ -259,15 +258,13 @@ static struct gcov_fn_buffer *fn_buffer;\n static struct gcov_summary_buffer *sum_buffer;\n \n /* This function computes the program level summary and the histo-gram.\n-   It computes and returns CRC32 and stored summary in THIS_PRG.\n-   Also determines the longest filename length of the info files.  */\n+   It computes and returns CRC32 and stored summary in THIS_PRG.  */\n \n #if !IN_GCOV_TOOL\n static\n #endif\n gcov_unsigned_t\n-compute_summary (struct gcov_info *list, struct gcov_summary *this_prg,\n-\t\t size_t *max_length)\n+compute_summary (struct gcov_info *list, struct gcov_summary *this_prg)\n {\n   struct gcov_info *gi_ptr;\n   const struct gcov_fn_info *gfi_ptr;\n@@ -278,13 +275,8 @@ compute_summary (struct gcov_info *list, struct gcov_summary *this_prg,\n \n   /* Find the totals for this execution.  */\n   memset (this_prg, 0, sizeof (*this_prg));\n-  *max_length = 0;\n   for (gi_ptr = list; gi_ptr; gi_ptr = gi_ptr->next)\n     {\n-      size_t len = strlen (gi_ptr->filename);\n-      if (len > *max_length)\n-\t*max_length = len;\n-      \n       crc32 = crc32_unsigned (crc32, gi_ptr->stamp);\n       crc32 = crc32_unsigned (crc32, gi_ptr->n_functions);\n \n@@ -799,7 +791,7 @@ gcov_do_dump (struct gcov_info *list, int run_counted)\n   struct gcov_summary all_prg;\n   struct gcov_summary this_prg;\n \n-  crc32 = compute_summary (list, &this_prg, &gf.max_length);\n+  crc32 = compute_summary (list, &this_prg);\n \n   allocate_filename_struct (&gf);\n #if !GCOV_LOCKED\n@@ -808,9 +800,12 @@ gcov_do_dump (struct gcov_info *list, int run_counted)\n \n   /* Now merge each file.  */\n   for (gi_ptr = list; gi_ptr; gi_ptr = gi_ptr->next)\n-    dump_one_gcov (gi_ptr, &gf, run_counted, crc32, &all_prg, &this_prg);\n+    {\n+      dump_one_gcov (gi_ptr, &gf, run_counted, crc32, &all_prg, &this_prg);\n+      free (gf.filename);\n+    }\n \n-  free (gf.filename);\n+  free (gf.prefix);\n }\n \n #if IN_GCOV_TOOL"}, {"sha": "37dd186beaa50ed54e2e11dd875fc93c5e399ddc", "filename": "libgcc/libgcov-util.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-util.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c086e8c75deaedb7db807d8008529747b275275/libgcc%2Flibgcov-util.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Flibgcov-util.c?ref=6c086e8c75deaedb7db807d8008529747b275275", "patch": "@@ -1202,7 +1202,7 @@ matched_gcov_info (const struct gcov_info *info1, const struct gcov_info *info2)\n \n /* Defined in libgcov-driver.c.  */\n extern gcov_unsigned_t compute_summary (struct gcov_info *,\n-                 struct gcov_summary *, size_t *);\n+\t\t\t\t\tstruct gcov_summary *);\n \n /* Compute the overlap score of two profiles with the head of GCOV_LIST1 and\n    GCOV_LIST1. Return a number ranging from [0.0, 1.0], with 0.0 meaning no\n@@ -1215,15 +1215,14 @@ calculate_overlap (struct gcov_info *gcov_list1,\n   struct gcov_summary this_prg;\n   unsigned list1_cnt = 0, list2_cnt= 0, all_cnt;\n   unsigned int i, j;\n-  size_t max_length;\n   const struct gcov_info *gi_ptr;\n   struct overlap_t *all_infos;\n \n-  compute_summary (gcov_list1, &this_prg, &max_length);\n+  compute_summary (gcov_list1, &this_prg);\n   overlap_sum_1 = (double) (this_prg.sum_all);\n   p1_sum_all = this_prg.sum_all;\n   p1_run_max = this_prg.run_max;\n-  compute_summary (gcov_list2, &this_prg, &max_length);\n+  compute_summary (gcov_list2, &this_prg);\n   overlap_sum_2 = (double) (this_prg.sum_all);\n   p2_sum_all = this_prg.sum_all;\n   p2_run_max = this_prg.run_max;"}]}