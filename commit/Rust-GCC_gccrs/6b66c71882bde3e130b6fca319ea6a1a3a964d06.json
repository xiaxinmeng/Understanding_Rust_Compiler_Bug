{"sha": "6b66c71882bde3e130b6fca319ea6a1a3a964d06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmI2NmM3MTg4MmJkZTNlMTMwYjZmY2EzMTllYTZhMWEzYTk2NGQwNg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-23T17:45:50Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-23T17:45:50Z"}, "message": "tree-phinode.c (resize_phi_node): Abort when LEN is strictly greater than PHI_ARG_CAPACITY.\n\n\t* tree-phinode.c (resize_phi_node): Abort when LEN is strictly\n\tgreater than PHI_ARG_CAPACITY.\n\t(reserve_phi_args_for_new_edge): Initialize the new PHI\n\targument to NULL_TREE.  Increment PHI_NUM_ARGS.\n\t(add_phi_arg): Add a PHI argument to the slot given by\n\tE->dest_idx.\n\t(remove_phi_arg_num): Do not write to PHI_ARG_EDGE.\n\t* tree-flow-inline (phi_arg_from_edge): Return E->dest_idx.\n\t* tree-ssa.c (ssa_redirect_edge): Check for a missing PHI\n\targument by looking at PHI_ARG_DEF.\n\t(verify_phi_args): Check for a missing PHI argument.  Remove\n\tthe check for duplicate PHI arguments.\n\t* tree.h (PHI_ARG_EDGE): Redefine in terms of EDGE_PRED.\n\t(phi_arg_d): Remove e.\n\nFrom-SVN: r91097", "tree": {"sha": "5276b730983237b937ef366760754e81460875fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5276b730983237b937ef366760754e81460875fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b66c71882bde3e130b6fca319ea6a1a3a964d06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b66c71882bde3e130b6fca319ea6a1a3a964d06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b66c71882bde3e130b6fca319ea6a1a3a964d06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b66c71882bde3e130b6fca319ea6a1a3a964d06/comments", "author": null, "committer": null, "parents": [{"sha": "b3d31392c8d1782821f60d1e9acd34464dd8e163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3d31392c8d1782821f60d1e9acd34464dd8e163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3d31392c8d1782821f60d1e9acd34464dd8e163"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "2fa744f46d6cc3747b59b383d771bcd9138bee48", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b66c71882bde3e130b6fca319ea6a1a3a964d06", "patch": "@@ -1,3 +1,20 @@\n+2004-11-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-phinode.c (resize_phi_node): Abort when LEN is strictly\n+\tgreater than PHI_ARG_CAPACITY.\n+\t(reserve_phi_args_for_new_edge): Initialize the new PHI\n+\targument to NULL_TREE.  Increment PHI_NUM_ARGS.\n+\t(add_phi_arg): Add a PHI argument to the slot given by\n+\tE->dest_idx.\n+\t(remove_phi_arg_num): Do not write to PHI_ARG_EDGE.\n+\t* tree-flow-inline (phi_arg_from_edge): Return E->dest_idx.\n+\t* tree-ssa.c (ssa_redirect_edge): Check for a missing PHI\n+\targument by looking at PHI_ARG_DEF.\n+\t(verify_phi_args): Check for a missing PHI argument.  Remove\n+\tthe check for duplicate PHI arguments.\n+\t* tree.h (PHI_ARG_EDGE): Redefine in terms of EDGE_PRED.\n+\t(phi_arg_d): Remove e.\n+\n 2004-11-23  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.c (s390_backchain_string): Removed."}, {"sha": "ea5e741ae124fb49e54a0604c2fc7fe0645887b0", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=6b66c71882bde3e130b6fca319ea6a1a3a964d06", "patch": "@@ -393,15 +393,9 @@ set_phi_nodes (basic_block bb, tree l)\n static inline int\n phi_arg_from_edge (tree phi, edge e)\n {\n-  int i;\n   gcc_assert (phi);\n   gcc_assert (TREE_CODE (phi) == PHI_NODE);\n-\n-  for (i = 0; i < PHI_NUM_ARGS (phi); i++)\n-    if (PHI_ARG_EDGE (phi, i) == e)\n-      return i;\n-\n-  return -1;\n+  return e->dest_idx;\n }\n \n /* Mark VAR as used, so that it'll be preserved during rtl expansion.  */"}, {"sha": "eec2fa3ed4fdff2d040164ecd332ccb7d1c06841", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=6b66c71882bde3e130b6fca319ea6a1a3a964d06", "patch": "@@ -212,13 +212,13 @@ make_phi_node (tree var, int len)\n \n   phi = allocate_phi_node (capacity);\n \n-  /* We do not have to clear a part of the PHI node that stores PHI\n-     arguments, which is safe because we tell the garbage collector to\n-     scan up to num_args elements in the array of PHI arguments.  In\n-     other words, the garbage collector will not follow garbage\n-     pointers in the unused portion of the array.  */\n-  memset (phi, 0, sizeof (struct tree_phi_node) - sizeof (struct phi_arg_d));\n+  /* We need to clear the entire PHI node, including the argument\n+     portion, because we represent a \"missing PHI argument\" by placing\n+     NULL_TREE in PHI_ARG_DEF.  */\n+  memset (phi, 0, (sizeof (struct tree_phi_node) - sizeof (struct phi_arg_d)\n+\t\t   + sizeof (struct phi_arg_d) * len));\n   TREE_SET_CODE (phi, PHI_NODE);\n+  PHI_NUM_ARGS (phi) = len;\n   PHI_ARG_CAPACITY (phi) = capacity;\n   TREE_TYPE (phi) = TREE_TYPE (var);\n   if (TREE_CODE (var) == SSA_NAME)\n@@ -253,7 +253,7 @@ resize_phi_node (tree *phi, int len)\n   int old_size;\n   tree new_phi;\n \n-  gcc_assert (len >= PHI_ARG_CAPACITY (*phi));\n+  gcc_assert (len > PHI_ARG_CAPACITY (*phi));\n \n   /* The garbage collector will not look at the PHI node beyond the\n      first PHI_NUM_ARGS elements.  Therefore, all we have to copy is a\n@@ -294,6 +294,17 @@ reserve_phi_args_for_new_edge (basic_block bb)\n \n \t  release_phi_node (old_phi);\n \t}\n+\n+      /* We represent a \"missing PHI argument\" by placing NULL_TREE in\n+\t the corresponding slot.  If PHI arguments were added\n+\t immediately after an edge is created, this zeroing would not\n+\t be necessary, but unfortunately this is not the case.  For\n+\t example, the loop optimizer duplicates several basic blocks,\n+\t redirects edges, and then fixes up PHI arguments later in\n+\t batch.  */\n+      SET_PHI_ARG_DEF (*loc, len - 1, NULL_TREE);\n+\n+      PHI_NUM_ARGS (*loc)++;\n     }\n }\n \n@@ -326,13 +337,16 @@ void\n add_phi_arg (tree *phi, tree def, edge e)\n {\n   basic_block bb = e->dest;\n-  int i = PHI_NUM_ARGS (*phi);\n \n   gcc_assert (bb == bb_for_stmt (*phi));\n \n   /* We resize PHI nodes upon edge creation.  We should always have\n      enough room at this point.  */\n-  gcc_assert (PHI_NUM_ARGS (*phi) < PHI_ARG_CAPACITY (*phi));\n+  gcc_assert (PHI_NUM_ARGS (*phi) <= PHI_ARG_CAPACITY (*phi));\n+\n+  /* We resize PHI nodes upon edge creation.  We should always have\n+     enough room at this point.  */\n+  gcc_assert (e->dest_idx < (unsigned int) PHI_NUM_ARGS (*phi));\n \n   /* Copy propagation needs to know what object occur in abnormal\n      PHI nodes.  This is a convenient place to record such information.  */\n@@ -342,10 +356,8 @@ add_phi_arg (tree *phi, tree def, edge e)\n       SSA_NAME_OCCURS_IN_ABNORMAL_PHI (PHI_RESULT (*phi)) = 1;\n     }\n \n-  SET_PHI_ARG_DEF (*phi, i, def);\n-  PHI_ARG_EDGE (*phi, i) = e;\n-  PHI_ARG_NONZERO (*phi, i) = false;\n-  PHI_NUM_ARGS (*phi)++;\n+  SET_PHI_ARG_DEF (*phi, e->dest_idx, def);\n+  PHI_ARG_NONZERO (*phi, e->dest_idx) = false;\n }\n \n /* Remove the Ith argument from PHI's argument list.  This routine assumes\n@@ -365,14 +377,13 @@ remove_phi_arg_num (tree phi, int i)\n   if (i != num_elem - 1)\n     {\n       SET_PHI_ARG_DEF (phi, i, PHI_ARG_DEF (phi, num_elem - 1));\n-      PHI_ARG_EDGE (phi, i) = PHI_ARG_EDGE (phi, num_elem - 1);\n       PHI_ARG_NONZERO (phi, i) = PHI_ARG_NONZERO (phi, num_elem - 1);\n     }\n \n   /* Shrink the vector and return.  Note that we do not have to clear\n-     PHI_ARG_DEF, PHI_ARG_EDGE, or PHI_ARG_NONZERO because the garbage\n-     collector will not look at those elements beyond the first\n-     PHI_NUM_ARGS elements of the array.  */\n+     PHI_ARG_DEF or PHI_ARG_NONZERO because the garbage collector will\n+     not look at those elements beyond the first PHI_NUM_ARGS elements\n+     of the array.  */\n   PHI_NUM_ARGS (phi)--;\n }\n "}, {"sha": "e2b23f01844c54e0084077dec049488daf901685", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=6b66c71882bde3e130b6fca319ea6a1a3a964d06", "patch": "@@ -64,7 +64,7 @@ ssa_redirect_edge (edge e, basic_block dest)\n       next = PHI_CHAIN (phi);\n \n       i = phi_arg_from_edge (phi, e);\n-      if (i < 0)\n+      if (PHI_ARG_DEF (phi, i) == NULL_TREE)\n \tcontinue;\n \n       src = PHI_ARG_DEF (phi, i);\n@@ -277,7 +277,6 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n   edge e;\n   bool err = false;\n   unsigned i, phi_num_args = PHI_NUM_ARGS (phi);\n-  edge_iterator ei;\n \n   if (EDGE_COUNT (bb->preds) != phi_num_args)\n     {\n@@ -286,22 +285,27 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n       goto error;\n     }\n \n-  /* Mark all the incoming edges.  */\n-  FOR_EACH_EDGE (e, ei, bb->preds)\n-    e->aux = (void *) 1;\n-\n   for (i = 0; i < phi_num_args; i++)\n     {\n       tree op = PHI_ARG_DEF (phi, i);\n \n+      e = PHI_ARG_EDGE (phi, i);\n+\n+      if (op == NULL_TREE)\n+\t{\n+\t  error (\"PHI argument is missing for edge %d->%d\\n\",\n+\t         e->src->index,\n+\t\t e->dest->index);\n+\t  err = true;\n+\t  goto error;\n+\t}\n+\n       if (TREE_CODE (op) != SSA_NAME && !is_gimple_min_invariant (op))\n \t{\n \t  error (\"PHI argument is not SSA_NAME, or invariant\");\n \t  err = true;\n \t}\n \n-      e = PHI_ARG_EDGE (phi, i);\n-\n       if (TREE_CODE (op) == SSA_NAME)\n \terr = verify_use (e->src, definition_block[SSA_NAME_VERSION (op)], op,\n \t\t\t  phi, e->flags & EDGE_ABNORMAL,\n@@ -315,21 +319,12 @@ verify_phi_args (tree phi, basic_block bb, basic_block *definition_block)\n \t  err = true;\n \t}\n \n-      if (e->aux == (void *) 0)\n-\t{\n-\t  error (\"PHI argument flowing through dead or duplicated edge %d->%d\\n\",\n-\t         e->src->index, e->dest->index);\n-\t  err = true;\n-\t}\n-\n       if (err)\n \t{\n \t  fprintf (stderr, \"PHI argument\\n\");\n \t  print_generic_stmt (stderr, op, TDF_VOPS);\n \t  goto error;\n \t}\n-\n-      e->aux = (void *) 0;\n     }\n \n error:"}, {"sha": "dc4a9d44ec89fa8a82237d10311f86e56290b087", "filename": "gcc/tree.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b66c71882bde3e130b6fca319ea6a1a3a964d06/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6b66c71882bde3e130b6fca319ea6a1a3a964d06", "patch": "@@ -1374,7 +1374,7 @@ struct tree_ssa_name GTY(())\n #define PHI_NUM_ARGS(NODE)\t\tPHI_NODE_CHECK (NODE)->phi.num_args\n #define PHI_ARG_CAPACITY(NODE)\t\tPHI_NODE_CHECK (NODE)->phi.capacity\n #define PHI_ARG_ELT(NODE, I)\t\tPHI_NODE_ELT_CHECK (NODE, I)\n-#define PHI_ARG_EDGE(NODE, I)\t\tPHI_NODE_ELT_CHECK (NODE, I).e\n+#define PHI_ARG_EDGE(NODE, I) \t\t(EDGE_PRED (PHI_BB ((NODE)), (I)))\n #define PHI_ARG_NONZERO(NODE, I) \tPHI_NODE_ELT_CHECK (NODE, I).nonzero\n #define PHI_BB(NODE)\t\t\tPHI_NODE_CHECK (NODE)->phi.bb\n #define PHI_DF(NODE)\t\t\tPHI_NODE_CHECK (NODE)->phi.df\n@@ -1384,7 +1384,6 @@ struct edge_def;\n struct phi_arg_d GTY(())\n {\n   tree def;\n-  struct edge_def * GTY((skip (\"\"))) e;\n   bool nonzero;\n };\n "}]}