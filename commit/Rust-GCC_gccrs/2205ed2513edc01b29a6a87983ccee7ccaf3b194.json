{"sha": "2205ed2513edc01b29a6a87983ccee7ccaf3b194", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjIwNWVkMjUxM2VkYzAxYjI5YTZhODc5ODNjY2VlN2NjYWYzYjE5NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-10-07T22:41:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-07T22:41:48Z"}, "message": "Rename vshuffle/vec_shuffle to vec_perm.\n\n        * doc/extend.texi (__builtin_shuffle): Improve the description to\n        include the modulus of the selector.  Mention OpenCL.\n        * doc/md.texi (vec_perm, vec_perm_const): Document named patterns.\n\n        * tree.def (VEC_PERM_EXPR): Rename from VEC_SHUFFLE_EXPR.\n        * genopinit.c (optabs): Rename vshuffle to vec_perm.\n        * c-typeck.c (c_build_vec_perm_expr): Rename from\n        c_build_vec_shuffle_expr.  Update for name changes.\n        * optabs.c (expand_vec_perm_expr_p): Rename from\n        expand_vec_shuffle_expr_p.\n        (expand_vec_perm_expr): Rename from expand_vec_shuffle_expr.\n        * optabs.h (OTI_vec_perm): Rename from DOI_vshuffle.\n        (vec_perm_optab): Rename from vshuffle_optab.\n        * expr.c, gimple-pretty-print.c, gimple.c, gimplify.c,\n        c-tree.h, c-parser.c, tree-cfg.c, tree-inline.c, tree-pretty-print.c,\n        tree-ssa-operands.c, tree-vect-generic.c: Update for name changes.\n\n        * config/i386/i386.c (ix86_expand_vec_perm): Rename from\n        ix86_expand_vshuffle.\n        * config/i386/i386-protos.h: Update.\n        * config/i386/sse.md (VEC_PERM_AVX2): Rename from VSHUFFLE_AVX2.\n        (vec_perm<VEC_PERM_AVX2>): Rename from vshuffle<VSHUFFLE_AVX2>.\n\nFrom-SVN: r179701", "tree": {"sha": "485f14b72a67f60b5c3ee61f71970cc2727a2fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/485f14b72a67f60b5c3ee61f71970cc2727a2fda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2205ed2513edc01b29a6a87983ccee7ccaf3b194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2205ed2513edc01b29a6a87983ccee7ccaf3b194", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2205ed2513edc01b29a6a87983ccee7ccaf3b194", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2205ed2513edc01b29a6a87983ccee7ccaf3b194/comments", "author": null, "committer": null, "parents": [{"sha": "524857ec5dfc4184fa28dfc187bfd631e2f9a6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/524857ec5dfc4184fa28dfc187bfd631e2f9a6aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/524857ec5dfc4184fa28dfc187bfd631e2f9a6aa"}], "stats": {"total": 224, "additions": 136, "deletions": 88}, "files": [{"sha": "2bd1217c763c0c38245162d0f6e40be143face2f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -1,3 +1,28 @@\n+2011-10-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/extend.texi (__builtin_shuffle): Improve the description to\n+\tinclude the modulus of the selector.  Mention OpenCL.\n+\t* doc/md.texi (vec_perm, vec_perm_const): Document named patterns.\n+\n+\t* tree.def (VEC_PERM_EXPR): Rename from VEC_SHUFFLE_EXPR.\n+\t* genopinit.c (optabs): Rename vshuffle to vec_perm.\n+\t* c-typeck.c (c_build_vec_perm_expr): Rename from\n+\tc_build_vec_shuffle_expr.  Update for name changes.\n+\t* optabs.c (expand_vec_perm_expr_p): Rename from\n+\texpand_vec_shuffle_expr_p.\n+\t(expand_vec_perm_expr): Rename from expand_vec_shuffle_expr.\n+\t* optabs.h (OTI_vec_perm): Rename from DOI_vshuffle.\n+\t(vec_perm_optab): Rename from vshuffle_optab.\n+\t* expr.c, gimple-pretty-print.c, gimple.c, gimplify.c,\n+\tc-tree.h, c-parser.c, tree-cfg.c, tree-inline.c, tree-pretty-print.c,\n+\ttree-ssa-operands.c, tree-vect-generic.c: Update for name changes.\n+\n+\t* config/i386/i386.c (ix86_expand_vec_perm): Rename from\n+\tix86_expand_vshuffle.\n+\t* config/i386/i386-protos.h: Update.\n+\t* config/i386/sse.md (VEC_PERM_AVX2): Rename from VSHUFFLE_AVX2.\n+\t(vec_perm<VEC_PERM_AVX2>): Rename from vshuffle<VSHUFFLE_AVX2>.\n+\n 2011-10-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/predicates.md (avx2_pblendw_operand): New."}, {"sha": "c948b802ca5632b229aab8d4e00c5dbfd1c89647", "filename": "gcc/c-parser.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -5990,7 +5990,7 @@ c_parser_alignof_expression (c_parser *parser)\n }\n \n /* Helper function to read arguments of builtins which are interfaces\n-   for the middle-end nodes like COMPLEX_EXPR, VEC_SHUFFLE_EXPR and\n+   for the middle-end nodes like COMPLEX_EXPR, VEC_PERM_EXPR and\n    others.  The name of the builtin is passed using BNAME parameter.\n    Function returns true if there were no errors while parsing and\n    stores the arguments in CEXPR_LIST.  */\n@@ -6534,13 +6534,13 @@ c_parser_postfix_expression (c_parser *parser)\n \n \t    if (VEC_length (c_expr_t, cexpr_list) == 2)\n \t      expr.value =\n-\t\tc_build_vec_shuffle_expr\n+\t\tc_build_vec_perm_expr\n \t\t  (loc, VEC_index (c_expr_t, cexpr_list, 0)->value,\n \t\t   NULL_TREE, VEC_index (c_expr_t, cexpr_list, 1)->value);\n \n \t    else if (VEC_length (c_expr_t, cexpr_list) == 3)\n \t      expr.value =\n-\t\tc_build_vec_shuffle_expr\n+\t\tc_build_vec_perm_expr\n \t\t  (loc, VEC_index (c_expr_t, cexpr_list, 0)->value,\n \t\t   VEC_index (c_expr_t, cexpr_list, 1)->value,\n \t\t   VEC_index (c_expr_t, cexpr_list, 2)->value);"}, {"sha": "b3e756cc076d378ef983251494e25b94bb136efc", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -595,7 +595,7 @@ extern tree c_begin_omp_task (void);\n extern tree c_finish_omp_task (location_t, tree, tree);\n extern tree c_finish_omp_clauses (tree);\n extern tree c_build_va_arg (location_t, tree, tree);\n-extern tree c_build_vec_shuffle_expr (location_t, tree, tree, tree);\n+extern tree c_build_vec_perm_expr (location_t, tree, tree, tree);\n \n /* Set to 0 at beginning of a function definition, set to 1 if\n    a return statement that specifies a return value is seen.  */"}, {"sha": "6dc021080ec06857277b5dd579d601ba7c8498b9", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -2846,7 +2846,7 @@ build_function_call_vec (location_t loc, tree function, VEC(tree,gc) *params,\n   return require_complete_type (result);\n }\n \n-/* Build a VEC_SHUFFLE_EXPR if V0, V1 and MASK are not error_mark_nodes\n+/* Build a VEC_PERM_EXPR if V0, V1 and MASK are not error_mark_nodes\n    and have vector types, V0 has the same type as V1, and the number of\n    elements of V0, V1, MASK is the same.\n \n@@ -2857,9 +2857,9 @@ build_function_call_vec (location_t loc, tree function, VEC(tree,gc) *params,\n    an implementation accident and this semantics is not guaranteed to\n    the user.  */\n tree\n-c_build_vec_shuffle_expr (location_t loc, tree v0, tree v1, tree mask)\n+c_build_vec_perm_expr (location_t loc, tree v0, tree v1, tree mask)\n {\n-  tree vec_shuffle;\n+  tree ret;\n   bool wrap = true;\n   bool maybe_const = false;\n   bool two_arguments = false;\n@@ -2915,7 +2915,7 @@ c_build_vec_shuffle_expr (location_t loc, tree v0, tree v1, tree mask)\n       return error_mark_node;\n     }\n \n-  /* Avoid C_MAYBE_CONST_EXPRs inside VEC_SHUFFLE_EXPR.  */\n+  /* Avoid C_MAYBE_CONST_EXPRs inside VEC_PERM_EXPR.  */\n   v0 = c_fully_fold (v0, false, &maybe_const);\n   wrap &= maybe_const;\n \n@@ -2930,12 +2930,12 @@ c_build_vec_shuffle_expr (location_t loc, tree v0, tree v1, tree mask)\n   mask = c_fully_fold (mask, false, &maybe_const);\n   wrap &= maybe_const;\n \n-  vec_shuffle = build3 (VEC_SHUFFLE_EXPR, TREE_TYPE (v0), v0, v1, mask);\n+  ret = build3 (VEC_PERM_EXPR, TREE_TYPE (v0), v0, v1, mask);\n \n   if (!wrap)\n-    vec_shuffle = c_wrap_maybe_const (vec_shuffle, true);\n+    ret = c_wrap_maybe_const (ret, true);\n \n-  return vec_shuffle;\n+  return ret;\n }\n \f\n /* Convert the argument expressions in the vector VALUES"}, {"sha": "eea038e3ab430890b66883cb9692a21c1b272d14", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -123,7 +123,7 @@ extern bool ix86_expand_int_movcc (rtx[]);\n extern bool ix86_expand_fp_movcc (rtx[]);\n extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n-extern void ix86_expand_vshuffle (rtx[]);\n+extern void ix86_expand_vec_perm (rtx[]);\n extern void ix86_expand_sse_unpack (rtx[], bool, bool);\n extern bool ix86_expand_int_addcc (rtx[]);\n extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, bool);"}, {"sha": "21ce9b26ce90fa6ec44c04e50b444fad612e7daa", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -19325,8 +19325,10 @@ ix86_expand_int_vcond (rtx operands[])\n   return true;\n }\n \n+/* Expand a variable vector permutation.  */\n+\n void\n-ix86_expand_vshuffle (rtx operands[])\n+ix86_expand_vec_perm (rtx operands[])\n {\n   rtx target = operands[0];\n   rtx op0 = operands[1];"}, {"sha": "f135716c5836592a424f44031bb64de6263e4683", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -6199,19 +6199,19 @@\n ;; ??? Irritatingly, the 256-bit VPSHUFB only shuffles within the 128-bit\n ;; lanes.  For now, we don't try to support V32QI or V16HImode.  So we\n ;; don't want to use VI_AVX2.\n-(define_mode_iterator VSHUFFLE_AVX2\n+(define_mode_iterator VEC_PERM_AVX2\n   [V16QI V8HI V4SI V2DI V4SF V2DF\n    (V8SI \"TARGET_AVX2\") (V4DI \"TARGET_AVX2\")\n    (V8SF \"TARGET_AVX2\") (V4DF \"TARGET_AVX2\")])\n \n-(define_expand \"vshuffle<mode>\"\n-  [(match_operand:VSHUFFLE_AVX2 0 \"register_operand\" \"\")\n-   (match_operand:VSHUFFLE_AVX2 1 \"register_operand\" \"\")\n-   (match_operand:VSHUFFLE_AVX2 2 \"register_operand\" \"\")\n+(define_expand \"vec_perm<mode>\"\n+  [(match_operand:VEC_PERM_AVX2 0 \"register_operand\" \"\")\n+   (match_operand:VEC_PERM_AVX2 1 \"register_operand\" \"\")\n+   (match_operand:VEC_PERM_AVX2 2 \"register_operand\" \"\")\n    (match_operand:<sseintvecmode> 3 \"register_operand\" \"\")]\n   \"TARGET_SSSE3 || TARGET_AVX || TARGET_XOP\"\n {\n-  ix86_expand_vshuffle (operands);\n+  ix86_expand_vec_perm (operands);\n   DONE;\n })\n "}, {"sha": "11118edc1d62cd9ff7e6b7b5d9bf6c4646e63161", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 14, "deletions": 23, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -6586,16 +6586,18 @@ c = a == b;     /* The result would be @{0,-1, 0,-1@}  */\n \n Vector shuffling is available using functions\n @code{__builtin_shuffle (vec, mask)} and\n-@code{__builtin_shuffle (vec0, vec1, mask)}. Both functions construct\n-a permutation of elements from one or two vectors and return a vector\n-of the same type as input vector(s). The mask is a vector of\n-integer-typed elements. The size of each element of the mask must be\n-the same as the size of each input vector element. The number of\n-elements in input vector(s) and mask must be the same.\n+@code{__builtin_shuffle (vec0, vec1, mask)}.\n+Both functions construct a permutation of elements from one or two\n+vectors and return a vector of the same type as the input vector(s).\n+The @var{mask} is an integral vector with the same width (@var{W})\n+and element count (@var{N}) as the output vector.\n \n-The elements of the input vectors are numbered from left to right across\n-one or both of the vectors. Each element in the mask specifies a number\n-of element from the input vector(s). Consider the following example.\n+The elements of the input vectors are numbered in memory ordering of\n+@var{vec0} beginning at 0 and @var{vec1} beginning at @var{N}.  The\n+elements of @var{mask} are considered modulo @var{N} in the single-operand\n+case and modulo @math{2*@var{N}} in the two-operand case.\n+\n+Consider the following example,\n \n @smallexample\n typedef int v4si __attribute__ ((vector_size (16)));\n@@ -6610,6 +6612,9 @@ res = __builtin_shuffle (a, mask1);       /* res is @{1,2,2,4@}  */\n res = __builtin_shuffle (a, b, mask2);    /* res is @{1,5,3,6@}  */\n @end smallexample\n \n+Note that @code{__builtin_shuffle} is intentionally semantically\n+compatible with the OpenCL @code{shuffle} and @code{shuffle2} functions.\n+\n You can declare variables and use them in function calls and returns, as\n well as in assignments and some casts.  You can specify a vector type as\n a return type for a function.  Vector types can also be used as function\n@@ -6620,20 +6625,6 @@ to and from other datatypes of the same size).\n You cannot operate between vectors of different lengths or different\n signedness without a cast.\n \n-A port that supports hardware vector operations, usually provides a set\n-of built-in functions that can be used to operate on vectors.  For\n-example, a function to add two vectors and multiply the result by a\n-third could look like this:\n-\n-@smallexample\n-v4si f (v4si a, v4si b, v4si c)\n-@{\n-  v4si tmp = __builtin_addv4si (a, b);\n-  return __builtin_mulv4si (tmp, c);\n-@}\n-\n-@end smallexample\n-\n @node Offsetof\n @section Offsetof\n @findex __builtin_offsetof"}, {"sha": "b61a99b3df7c711acfd954cd254f1628c2759ade", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -4028,6 +4028,34 @@ will be set to the value @var{op1} & @var{msk} | @var{op2} & ~@var{msk}\n where @var{msk} is computed by element-wise evaluation of the vector\n comparison with a truth value of all-ones and a false value of all-zeros.\n \n+@cindex @code{vec_perm@var{m}} instruction pattern\n+@item @samp{vec_perm@var{m}}\n+Output a (variable) vector permutation.  Operand 0 is the destination\n+to receive elements from operand 1 and operand 2, which are of mode\n+@var{m}.  Operand 3 is the @dfn{selector}.  It is an integral mode\n+vector of the same width and number of elements as mode @var{m}.\n+\n+The input elements are numbered from 0 in operand 1 through\n+@math{2*@var{N}-1} in operand 2.  The elements of the selector must\n+be computed modulo @math{2*@var{N}}.  Note that if\n+@code{rtx_equal_p(operand1, operand2)}, this can be implemented\n+with just operand 1 and selector elements modulo @var{N}.\n+\n+@cindex @code{vec_perm_const@var{m}) instruction pattern\n+@item @samp{vec_perm_const@var{m}}\n+Like @samp{vec_perm} except that the permutation is a compile-time\n+constant.  That is, operand 3, the @dfn{selector}, is a @code{CONST_VECTOR}.\n+\n+Some targets cannot perform a permutation with a variable selector,\n+but can efficiently perform a constant permutation.  Further, the\n+target hook @code{vec_perm_ok} is queried to determine if the \n+specific constant permutation is available efficiently; the named\n+pattern is never expanded without @code{vec_perm_ok} returning true.\n+\n+There is no need for a target to supply both @samp{vec_perm@var{m}}\n+and @samp{vec_perm_const@var{m}} if the former can trivially implement\n+the operation with, say, the vector constant loaded into a register.\n+\n @cindex @code{push@var{m}1} instruction pattern\n @item @samp{push@var{m}1}\n Output a push instruction.  Operand 0 is value to push.  Used only when"}, {"sha": "4ae61d7e8ad77bbdec952f4b19fdc29d5fc9cbe2", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -8605,9 +8605,10 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n     case VEC_PACK_FIX_TRUNC_EXPR:\n       mode = TYPE_MODE (TREE_TYPE (treeop0));\n       goto binop;\n-    \n-    case VEC_SHUFFLE_EXPR:\n-      target = expand_vec_shuffle_expr (type, treeop0, treeop1, treeop2, target);\n+\n+    case VEC_PERM_EXPR:\n+      target = expand_vec_perm_expr (type, treeop0, treeop1, treeop2, target);\n+      gcc_assert (target);\n       return target;\n \n     case DOT_PROD_EXPR:"}, {"sha": "4eefa036cc71ebebd9d4032f577bafe7f3b6d88d", "filename": "gcc/genopinit.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgenopinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgenopinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenopinit.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -253,7 +253,7 @@ static const char * const optabs[] =\n   \"set_optab_handler (vec_shl_optab, $A, CODE_FOR_$(vec_shl_$a$))\",\n   \"set_optab_handler (vec_shr_optab, $A, CODE_FOR_$(vec_shr_$a$))\",\n   \"set_optab_handler (vec_realign_load_optab, $A, CODE_FOR_$(vec_realign_load_$a$))\",\n-  \"set_direct_optab_handler (vshuffle_optab, $A, CODE_FOR_$(vshuffle$a$))\",\n+  \"set_direct_optab_handler (vec_perm_optab, $A, CODE_FOR_$(vec_perm$a$))\",\n   \"set_convert_optab_handler (vcond_optab, $A, $B, CODE_FOR_$(vcond$a$b$))\",\n   \"set_convert_optab_handler (vcondu_optab, $A, $B, CODE_FOR_$(vcondu$a$b$))\",\n   \"set_optab_handler (ssum_widen_optab, $A, CODE_FOR_$(widen_ssum$I$a3$))\","}, {"sha": "577d28bb1f7e405a4a40037bf7ce05502eaadf3c", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -418,8 +418,8 @@ dump_ternary_rhs (pretty_printer *buffer, gimple gs, int spc, int flags)\n       pp_string (buffer, \">\");\n       break;\n     \n-    case VEC_SHUFFLE_EXPR:\n-      pp_string (buffer, \"VEC_SHUFFLE_EXPR <\");\n+    case VEC_PERM_EXPR:\n+      pp_string (buffer, \"VEC_PERM_EXPR <\");\n       dump_generic_node (buffer, gimple_assign_rhs1 (gs), spc, flags, false);\n       pp_string (buffer, \", \");\n       dump_generic_node (buffer, gimple_assign_rhs2 (gs), spc, flags, false);"}, {"sha": "19f02dc9cd17dd9a2c1ec8f935e1c81e49acf063", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -2639,7 +2639,7 @@ get_gimple_rhs_num_ops (enum tree_code code)\n       || (SYM) == DOT_PROD_EXPR\t\t\t\t\t\t    \\\n       || (SYM) == REALIGN_LOAD_EXPR\t\t\t\t\t    \\\n       || (SYM) == VEC_COND_EXPR\t\t\t\t\t\t    \\\n-      || (SYM) == VEC_SHUFFLE_EXPR                                          \\\n+      || (SYM) == VEC_PERM_EXPR                                             \\\n       || (SYM) == FMA_EXPR) ? GIMPLE_TERNARY_RHS\t\t\t    \\\n    : ((SYM) == CONSTRUCTOR\t\t\t\t\t\t    \\\n       || (SYM) == OBJ_TYPE_REF\t\t\t\t\t\t    \\"}, {"sha": "9713218fa10d3a4ccf2bda18441d77301ebf31d6", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -7287,7 +7287,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t  }\n \n \tcase FMA_EXPR:\n-\tcase VEC_SHUFFLE_EXPR:\n+\tcase VEC_PERM_EXPR:\n \t  /* Classified as tcc_expression.  */\n \t  goto expr_3;\n "}, {"sha": "0ba133351866a903c42dbd52bc6799c6e40f0509", "filename": "gcc/optabs.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -6620,10 +6620,10 @@ vector_compare_rtx (tree cond, bool unsignedp, enum insn_code icode)\n   return gen_rtx_fmt_ee (rcode, VOIDmode, ops[0].value, ops[1].value);\n }\n \n-/* Return true if VEC_SHUFFLE_EXPR can be expanded using SIMD extensions\n+/* Return true if VEC_PERM_EXPR can be expanded using SIMD extensions\n    of the CPU.  */\n bool\n-expand_vec_shuffle_expr_p (enum machine_mode mode, tree v0, tree v1, tree mask)\n+expand_vec_perm_expr_p (enum machine_mode mode, tree v0, tree v1, tree mask)\n {\n   int v0_mode_s = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (v0))));\n   int mask_mode_s = GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (TREE_TYPE (mask))));\n@@ -6639,27 +6639,27 @@ expand_vec_shuffle_expr_p (enum machine_mode mode, tree v0, tree v1, tree mask)\n \t != TYPE_VECTOR_SUBPARTS (TREE_TYPE (mask)))\n     return false;\n \n-  return direct_optab_handler (vshuffle_optab, mode) != CODE_FOR_nothing;\n+  return direct_optab_handler (vec_perm_optab, mode) != CODE_FOR_nothing;\n }\n \n /* Generate instructions for VEC_COND_EXPR given its type and three\n    operands.  */\n rtx\n-expand_vec_shuffle_expr (tree type, tree v0, tree v1, tree mask, rtx target)\n+expand_vec_perm_expr (tree type, tree v0, tree v1, tree mask, rtx target)\n {\n   struct expand_operand ops[4];\n   enum insn_code icode;\n   enum machine_mode mode = TYPE_MODE (type);\n \n-  gcc_checking_assert (expand_vec_shuffle_expr_p (mode, v0, v1, mask));\n+  gcc_checking_assert (expand_vec_perm_expr_p (mode, v0, v1, mask));\n \n   if (TREE_CODE (mask) == VECTOR_CST)\n     {\n       tree m_type, call;\n       tree fn = targetm.vectorize.builtin_vec_perm (TREE_TYPE (v0), &m_type);\n \n       if (!fn)\n-\tgoto vshuffle;\n+\tgoto vec_perm;\n \n       if (m_type != TREE_TYPE (TREE_TYPE (mask)))\n \t{\n@@ -6674,8 +6674,8 @@ expand_vec_shuffle_expr (tree type, tree v0, tree v1, tree mask, rtx target)\n       return expand_expr_real_1 (call, target, VOIDmode, EXPAND_NORMAL, NULL);\n     }\n \n- vshuffle:\n-  icode = direct_optab_handler (vshuffle_optab, mode);\n+ vec_perm:\n+  icode = direct_optab_handler (vec_perm_optab, mode);\n \n   if (icode == CODE_FOR_nothing)\n     return 0;"}, {"sha": "4b46bda3a3cdb8d558492f9bba83a4302e3a5280", "filename": "gcc/optabs.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Foptabs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Foptabs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.h?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -377,6 +377,9 @@ enum optab_index\n   OTI_vec_pack_sfix_trunc,\n   OTI_vec_pack_ufix_trunc,\n \n+  /* Vector shuffling.  */\n+  OTI_vec_perm,\n+\n   /* Perform a raise to the power of integer.  */\n   OTI_powi,\n \n@@ -557,6 +560,7 @@ enum optab_index\n #define vec_pack_usat_optab (&optab_table[OTI_vec_pack_usat])\n #define vec_pack_sfix_trunc_optab (&optab_table[OTI_vec_pack_sfix_trunc])\n #define vec_pack_ufix_trunc_optab (&optab_table[OTI_vec_pack_ufix_trunc])\n+#define vec_perm_optab (&direct_optab_table[(int) OTI_vec_perm])\n \n #define powi_optab (&optab_table[OTI_powi])\n \n@@ -617,7 +621,6 @@ enum convert_optab_index\n #define vec_store_lanes_optab (&convert_optab_table[COI_vec_store_lanes])\n #define vcond_optab (&convert_optab_table[(int) COI_vcond])\n #define vcondu_optab (&convert_optab_table[(int) COI_vcondu])\n-#define vshuffle_optab (&direct_optab_table[(int) DOI_vshuffle])\n \n /* Contains the optab used for each rtx code.  */\n extern optab code_to_optab[NUM_RTX_CODE + 1];\n@@ -639,9 +642,6 @@ enum direct_optab_index\n   DOI_reload_in,\n   DOI_reload_out,\n \n-  /* Vector shuffling.  */\n-  DOI_vshuffle,\n-\n   /* Block move operation.  */\n   DOI_movmem,\n \n@@ -888,11 +888,11 @@ extern rtx expand_vec_cond_expr (tree, tree, tree, tree, rtx);\n /* Generate code for VEC_LSHIFT_EXPR and VEC_RSHIFT_EXPR.  */\n extern rtx expand_vec_shift_expr (sepops, rtx);\n \n-/* Return tree if target supports vector operations for VEC_SHUFFLE_EXPR.  */\n-bool expand_vec_shuffle_expr_p (enum machine_mode, tree, tree, tree);\n+/* Return tree if target supports vector operations for VEC_PERM_EXPR.  */\n+bool expand_vec_perm_expr_p (enum machine_mode, tree, tree, tree);\n \n-/* Generate code for VEC_SHUFFLE_EXPR.  */\n-extern rtx expand_vec_shuffle_expr (tree, tree, tree, tree, rtx);\n+/* Generate code for VEC_PERM_EXPR.  */\n+extern rtx expand_vec_perm_expr (tree, tree, tree, tree, rtx);\n \n /* Return the insn used to implement mode MODE of OP, or CODE_FOR_nothing\n    if the target does not have such an insn.  */"}, {"sha": "bcf71b99bbb9d05f05f717630e49aef2b53fe87d", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -3727,11 +3727,11 @@ verify_gimple_assign_ternary (gimple stmt)\n \t}\n       break;\n \n-    case VEC_SHUFFLE_EXPR:\n+    case VEC_PERM_EXPR:\n       if (!useless_type_conversion_p (lhs_type, rhs1_type)\n \t  || !useless_type_conversion_p (lhs_type, rhs2_type))\n \t{\n-\t  error (\"type mismatch in vector shuffle expression\");\n+\t  error (\"type mismatch in vector permute expression\");\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -3743,7 +3743,7 @@ verify_gimple_assign_ternary (gimple stmt)\n \t  || TREE_CODE (rhs2_type) != VECTOR_TYPE\n \t  || TREE_CODE (rhs3_type) != VECTOR_TYPE)\n \t{\n-\t  error (\"vector types expected in vector shuffle expression\");\n+\t  error (\"vector types expected in vector permute expression\");\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -3758,7 +3758,7 @@ verify_gimple_assign_ternary (gimple stmt)\n \t     != TYPE_VECTOR_SUBPARTS (lhs_type))\n \t{\n \t  error (\"vectors with different element number found \"\n-\t\t \"in vector shuffle expression\");\n+\t\t \"in vector permute expression\");\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);\n@@ -3770,7 +3770,7 @@ verify_gimple_assign_ternary (gimple stmt)\n \t  || GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (rhs3_type)))\n \t     != GET_MODE_BITSIZE (TYPE_MODE (TREE_TYPE (rhs1_type))))\n \t{\n-\t  error (\"invalid mask type in vector shuffle expression\");\n+\t  error (\"invalid mask type in vector permute expression\");\n \t  debug_generic_expr (lhs_type);\n \t  debug_generic_expr (rhs1_type);\n \t  debug_generic_expr (rhs2_type);"}, {"sha": "e2f76e1c60812cf0cde6adc65cc3e42c541b0f0d", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -3285,7 +3285,7 @@ estimate_operator_cost (enum tree_code code, eni_weights *weights,\n        ??? We may consider mapping RTL costs to this.  */\n     case COND_EXPR:\n     case VEC_COND_EXPR:\n-    case VEC_SHUFFLE_EXPR:\n+    case VEC_PERM_EXPR:\n \n     case PLUS_EXPR:\n     case POINTER_PLUS_EXPR:"}, {"sha": "8acabb16e1655d6f0ead28bd799ab1211d6d9a5a", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -2070,8 +2070,8 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n       pp_string (buffer, \" > \");\n       break;\n     \n-    case VEC_SHUFFLE_EXPR:\n-      pp_string (buffer, \" VEC_SHUFFLE_EXPR < \");\n+    case VEC_PERM_EXPR:\n+      pp_string (buffer, \" VEC_PERM_EXPR < \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 0), spc, flags, false);\n       pp_string (buffer, \" , \");\n       dump_generic_node (buffer, TREE_OPERAND (node, 1), spc, flags, false);"}, {"sha": "9cd656b2a8c0bd77fef9114724f4ab699715b480", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -943,7 +943,7 @@ get_expr_operands (gimple stmt, tree *expr_p, int flags)\n \n     case COND_EXPR:\n     case VEC_COND_EXPR:\n-    case VEC_SHUFFLE_EXPR:\n+    case VEC_PERM_EXPR:\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 0), uflags);\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 1), uflags);\n       get_expr_operands (stmt, &TREE_OPERAND (expr, 2), uflags);"}, {"sha": "1d1170121b4974526d7e038844235c2a105a4e7e", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -597,21 +597,21 @@ vector_element (gimple_stmt_iterator *gsi, tree vect, tree idx, tree *ptmpvec)\n                  idx, NULL_TREE, NULL_TREE);\n }\n \n-/* Check if VEC_SHUFFLE_EXPR within the given setting is supported\n+/* Check if VEC_PERM_EXPR within the given setting is supported\n    by hardware, or lower it piecewise.\n \n-   When VEC_SHUFFLE_EXPR has the same first and second operands:\n-   VEC_SHUFFLE_EXPR <v0, v0, mask> the lowered version would be\n+   When VEC_PERM_EXPR has the same first and second operands:\n+   VEC_PERM_EXPR <v0, v0, mask> the lowered version would be\n    {v0[mask[0]], v0[mask[1]], ...}\n    MASK and V0 must have the same number of elements.\n \n-   Otherwise VEC_SHUFFLE_EXPR <v0, v1, mask> is lowered to\n+   Otherwise VEC_PERM_EXPR <v0, v1, mask> is lowered to\n    {mask[0] < len(v0) ? v0[mask[0]] : v1[mask[0]], ...}\n    V0 and V1 must have the same type.  MASK, V0, V1 must have the\n    same number of arguments.  */\n \n static void\n-lower_vec_shuffle (gimple_stmt_iterator *gsi)\n+lower_vec_perm (gimple_stmt_iterator *gsi)\n {\n   gimple stmt = gsi_stmt (*gsi);\n   tree mask = gimple_assign_rhs3 (stmt);\n@@ -628,7 +628,7 @@ lower_vec_shuffle (gimple_stmt_iterator *gsi)\n   bool two_operand_p = !operand_equal_p (vec0, vec1, 0);\n   unsigned i;\n \n-  if (expand_vec_shuffle_expr_p (TYPE_MODE (vect_type), vec0, vec1, mask))\n+  if (expand_vec_perm_expr_p (TYPE_MODE (vect_type), vec0, vec1, mask))\n     return;\n \n   v = VEC_alloc (constructor_elt, gc, elements);\n@@ -721,9 +721,9 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n   rhs_class = get_gimple_rhs_class (code);\n   lhs = gimple_assign_lhs (stmt);\n \n-  if (code == VEC_SHUFFLE_EXPR)\n+  if (code == VEC_PERM_EXPR)\n     {\n-      lower_vec_shuffle (gsi);\n+      lower_vec_perm (gsi);\n       return;\n     }\n "}, {"sha": "3e5981947fdf0f9f63f054199ec8422f45c29147", "filename": "gcc/tree.def", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2205ed2513edc01b29a6a87983ccee7ccaf3b194/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=2205ed2513edc01b29a6a87983ccee7ccaf3b194", "patch": "@@ -497,18 +497,19 @@ DEFTREECODE (COND_EXPR, \"cond_expr\", tcc_expression, 3)\n */\n DEFTREECODE (VEC_COND_EXPR, \"vec_cond_expr\", tcc_expression, 3)\n \n-/* Vector shuffle expression.  A = VEC_SHUFFLE_EXPR<v0, v1, mask>\n-   means\n+/* Vector permutation expression.  A = VEC_PERM_EXPR<v0, v1, mask> means\n \n-   foreach i in length (mask):\n-     A = mask[i] < length (v0) ? v0[mask[i]] : v1[mask[i] - length (mask)]\n+   N = length(mask)\n+   foreach i in N:\n+     M = mask[i] % (2*N)\n+     A = M < N ? v0[M] : v1[M-N]\n \n    V0 and V1 are vectors of the same type.  MASK is an integer-typed\n    vector.  The number of MASK elements must be the same with the\n    number of elements in V0 and V1.  The size of the inner type\n    of the MASK and of the V0 and V1 must be the same.\n */\n-DEFTREECODE (VEC_SHUFFLE_EXPR, \"vec_shuffle_expr\", tcc_expression, 3)\n+DEFTREECODE (VEC_PERM_EXPR, \"vec_perm_expr\", tcc_expression, 3)\n \n /* Declare local variables, including making RTL and allocating space.\n    BIND_EXPR_VARS is a chain of VAR_DECL nodes for the variables."}]}