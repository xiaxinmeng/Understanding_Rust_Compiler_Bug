{"sha": "108c1afce2b7b55375940b42e3779b76c6c24a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTA4YzFhZmNlMmI3YjU1Mzc1OTQwYjQyZTM3NzliNzZjNmMyNGExZg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-10-26T07:49:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-10-26T07:49:34Z"}, "message": "cfg.c (clear_aux_for_blocks): Split out of ...\n\n        * cfg.c (clear_aux_for_blocks): Split out of ...\n        (free_aux_for_blocks): here.\n        (clear_aux_for_edges): Split from ...\n        (free_aux_for_edges): here.\n        * basic-block.h: Declare them.\n        * lcm.c (compute_antinout_edge): Use them.\n        (compute_laterin, compute_available, compute_nearerout): Likewise.\n        (optimize_mode_switching): Likewise.\n\nFrom-SVN: r46534", "tree": {"sha": "217b3b458beea6cff0af2f1de2339e47d5bc476d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/217b3b458beea6cff0af2f1de2339e47d5bc476d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/108c1afce2b7b55375940b42e3779b76c6c24a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108c1afce2b7b55375940b42e3779b76c6c24a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/108c1afce2b7b55375940b42e3779b76c6c24a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/108c1afce2b7b55375940b42e3779b76c6c24a1f/comments", "author": null, "committer": null, "parents": [{"sha": "4992fc7ff58e9c9938717fa503b9c2ec5de097a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4992fc7ff58e9c9938717fa503b9c2ec5de097a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4992fc7ff58e9c9938717fa503b9c2ec5de097a6"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "57c5f764d3166561666138e3b5103e8ac6738e9d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=108c1afce2b7b55375940b42e3779b76c6c24a1f", "patch": "@@ -1,3 +1,14 @@\n+2001-10-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* cfg.c (clear_aux_for_blocks): Split out of ...\n+\t(free_aux_for_blocks): here.\n+\t(clear_aux_for_edges): Split from ...\n+\t(free_aux_for_edges): here.\n+\t* basic-block.h: Declare them.\n+\t* lcm.c (compute_antinout_edge): Use them.\n+\t(compute_laterin, compute_available, compute_nearerout): Likewise.\n+\t(optimize_mode_switching): Likewise.\n+\n 2001-10-26  Richard Henderson  <rth@redhat.com>\n \n \t* Makefile.in (unstage*): Remove as, ld, collect-ld before"}, {"sha": "6430230caaa2ae312d7dc6cfe1fa4a8485a79f65", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=108c1afce2b7b55375940b42e3779b76c6c24a1f", "patch": "@@ -649,9 +649,11 @@ extern void flow_edge_list_print\tPARAMS ((const char *, const edge *,\n \t\t\t\t\t\t int, FILE *));\n extern void alloc_aux_for_block\t\tPARAMS ((basic_block, int));\n extern void alloc_aux_for_blocks\tPARAMS ((int));\n+extern void clear_aux_for_blocks\tPARAMS ((void));\n extern void free_aux_for_blocks\t\tPARAMS ((void));\n extern void alloc_aux_for_edge\t\tPARAMS ((edge, int));\n extern void alloc_aux_for_edges\t\tPARAMS ((int));\n+extern void clear_aux_for_edges\t\tPARAMS ((void));\n extern void free_aux_for_edges\t\tPARAMS ((void));\n \n /* This function is always defined so it can be called from the"}, {"sha": "e767732becfc35d7e5e5624b1bd9d4698b7e6eba", "filename": "gcc/cfg.c", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=108c1afce2b7b55375940b42e3779b76c6c24a1f", "patch": "@@ -618,22 +618,31 @@ alloc_aux_for_blocks (size)\n     }\n }\n \n-/* Free data allocated in block_aux_obstack and clear AUX pointers\n-   of all blocks.  */\n+/* Clear AUX pointers of all blocks.  */\n \n void\n-free_aux_for_blocks ()\n+clear_aux_for_blocks ()\n {\n   int i;\n \n-  if (!first_block_aux_obj)\n-    abort ();\n-  obstack_free (&block_aux_obstack, first_block_aux_obj);\n   for (i = 0; i < n_basic_blocks; i++)\n     BASIC_BLOCK (i)->aux = NULL;\n   ENTRY_BLOCK_PTR->aux = NULL;\n   EXIT_BLOCK_PTR->aux = NULL;\n+}\n+\n+/* Free data allocated in block_aux_obstack and clear AUX pointers\n+   of all blocks.  */\n+\n+void\n+free_aux_for_blocks ()\n+{\n+  if (!first_block_aux_obj)\n+    abort ();\n+  obstack_free (&block_aux_obstack, first_block_aux_obj);\n   first_block_aux_obj = NULL;\n+\n+  clear_aux_for_blocks ();\n }\n \n /* Allocate an memory edge of SIZE as BB->aux.  The obstack must\n@@ -687,17 +696,13 @@ alloc_aux_for_edges (size)\n     }\n }\n \n-/* Free data allocated in edge_aux_obstack and clear AUX pointers\n-   of all edges.  */\n+/* Clear AUX pointers of all edges.  */\n \n void\n-free_aux_for_edges ()\n+clear_aux_for_edges ()\n {\n   int i;\n \n-  if (!first_edge_aux_obj)\n-    abort ();\n-  obstack_free (&edge_aux_obstack, first_edge_aux_obj);\n   for (i = -1; i < n_basic_blocks; i++)\n     {\n       basic_block bb;\n@@ -710,5 +715,18 @@ free_aux_for_edges ()\n       for (e = bb->succ; e; e = e->succ_next)\n \te->aux = NULL;\n     }\n+}\n+\n+/* Free data allocated in edge_aux_obstack and clear AUX pointers\n+   of all edges.  */\n+\n+void\n+free_aux_for_edges ()\n+{\n+  if (!first_edge_aux_obj)\n+    abort ();\n+  obstack_free (&edge_aux_obstack, first_edge_aux_obj);\n   first_edge_aux_obj = NULL;\n+\n+  clear_aux_for_edges ();\n }"}, {"sha": "4f5d692716195c2696b3dbbd5e9ab3e658462718", "filename": "gcc/lcm.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/108c1afce2b7b55375940b42e3779b76c6c24a1f/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=108c1afce2b7b55375940b42e3779b76c6c24a1f", "patch": "@@ -177,6 +177,8 @@ compute_antinout_edge (antloc, transp, antin, antout)\n \t    }\n     }\n \n+  clear_aux_for_edges ();\n+  clear_aux_for_blocks ();\n   free (worklist);\n }\n \n@@ -354,6 +356,7 @@ compute_laterin (edge_list, earliest, antloc, later, laterin)\n \t\t     laterin[n_basic_blocks],\n \t\t     later[(size_t) e->aux]);\n \n+  clear_aux_for_edges ();\n   free (worklist);\n }\n \n@@ -565,6 +568,8 @@ compute_available (avloc, kill, avout, avin)\n \t    }\n     }\n \n+  clear_aux_for_edges ();\n+  clear_aux_for_blocks ();\n   free (worklist);\n }\n \n@@ -695,6 +700,7 @@ compute_nearerout (edge_list, farthest, st_avloc, nearer, nearerout)\n \t\t     nearerout[n_basic_blocks],\n \t\t     nearer[(size_t) e->aux]);\n \n+  clear_aux_for_edges ();\n   free (tos);\n }\n \n@@ -1273,6 +1279,7 @@ optimize_mode_switching (file)\n \t      }\n \t}\n \n+      clear_aux_for_edges ();\n       free_edge_list (edge_list);\n     }\n "}]}