{"sha": "61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFmZDY4YjRjMzdkYmM0OWViNWQ4YWI5ODNlM2YzYjZiZmY0M2YxYQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@bigpond.net.au", "date": "2002-07-29T23:26:27Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2002-07-29T23:26:27Z"}, "message": "locks.h: Formatting.\n\n\t* sysdep/powerpc/locks.h: Formatting.\n\t(_LARX): Define.\n\t(_STCX): Define.\n\t(compare_and_swap): Use _LARX and _STCX.\n\t(compare_and_swap_release): Likewise.\n\nFrom-SVN: r55855", "tree": {"sha": "b388d8a32006e82e5926d94d8e3e5fc517f11e67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b388d8a32006e82e5926d94d8e3e5fc517f11e67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a/comments", "author": null, "committer": null, "parents": [{"sha": "bd11db39e8224efc8516f3a9db15ba00ba90de45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd11db39e8224efc8516f3a9db15ba00ba90de45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd11db39e8224efc8516f3a9db15ba00ba90de45"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "98c59e2476b13a6b3ad47c48fcde910b70cc091e", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "patch": "@@ -1,3 +1,11 @@\n+2002-07-27  Alan Modra  <amodra@bigpond.net.au>\n+\n+\t* sysdep/powerpc/locks.h: Formatting.\n+\t(_LARX): Define.\n+\t(_STCX): Define.\n+\t(compare_and_swap): Use _LARX and _STCX.\n+\t(compare_and_swap_release): Likewise.\n+\n 2002-07-26  Tom Tromey  <tromey@redhat.com>\n \n \t* java/net/Authenticator.java: New version from Classpath."}, {"sha": "c9c3183d6bc72b868de5bbbab1ccd3c0edcb6b45", "filename": "libjava/sysdep/powerpc/locks.h", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a/libjava%2Fsysdep%2Fpowerpc%2Flocks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a/libjava%2Fsysdep%2Fpowerpc%2Flocks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fsysdep%2Fpowerpc%2Flocks.h?ref=61fd68b4c37dbc49eb5d8ab983e3f3b6bff43f1a", "patch": "@@ -11,26 +11,38 @@ details.  */\n #ifndef __SYSDEP_LOCKS_H__\n #define __SYSDEP_LOCKS_H__\n \n+#ifdef __powerpc64__\n+#define _LARX \"ldarx \"\n+#define _STCX \"stdcx. \"\n+#else\n+#define _LARX \"lwarx \"\n+#ifdef __PPC405__\n+#define _STCX \"sync; stwcx. \"\n+#else\n+#define _STCX \"stwcx. \"\n+#endif\n+#endif\n+\n typedef size_t obj_addr_t;\t/* Integer type big enough for object\t*/\n \t\t\t\t/* address.\t\t\t\t*/\n \n inline static bool\n-compare_and_swap(volatile obj_addr_t *addr,\n-\t\t  \t\t\t      obj_addr_t old,\n-\t\t\t\t\t      obj_addr_t new_val) \n+compare_and_swap (volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t  obj_addr_t new_val) \n {\n   int ret;\n \n   __asm__ __volatile__ (\n-\t   \"0:    lwarx %0,0,%1 ;\"\n+\t   \"0:    \" _LARX \"%0,0,%1 ;\"\n \t   \"      xor. %0,%3,%0;\"\n \t   \"      bne 1f;\"\n-\t   \"      stwcx. %2,0,%1;\"\n+\t   \"      \" _STCX \"%2,0,%1;\"\n \t   \"      bne- 0b;\"\n \t   \"1:    \"\n-\t: \"=&r\"(ret)\n-\t: \"r\"(addr), \"r\"(new_val), \"r\"(old)\n+\t: \"=&r\" (ret)\n+\t: \"r\" (addr), \"r\" (new_val), \"r\" (old)\n \t: \"cr0\", \"memory\");\n+\n   /* This version of __compare_and_swap is to be used when acquiring\n      a lock, so we don't need to worry about whether other memory\n      operations have completed, but we do need to be sure that any loads\n@@ -40,45 +52,46 @@ compare_and_swap(volatile obj_addr_t *addr,\n }\n \n inline static void\n-release_set(volatile obj_addr_t *addr, obj_addr_t new_val)\n+release_set (volatile obj_addr_t *addr, obj_addr_t new_val)\n {\n   __asm__ __volatile__ (\"sync\" : : : \"memory\");\n-  *(addr) = new_val;\n+  *addr = new_val;\n }\n \n inline static bool\n-compare_and_swap_release(volatile obj_addr_t *addr,\n-\t\t  \t\t\t\t     obj_addr_t old,\n-\t\t\t\t\t\t     obj_addr_t new_val)\n+compare_and_swap_release (volatile obj_addr_t *addr, obj_addr_t old,\n+\t\t\t  obj_addr_t new_val)\n {\n   int ret;\n \n   __asm__ __volatile__ (\"sync\" : : : \"memory\");\n+\n   __asm__ __volatile__ (\n-\t   \"0:    lwarx %0,0,%1 ;\"\n+\t   \"0:    \" _LARX \"%0,0,%1 ;\"\n \t   \"      xor. %0,%3,%0;\"\n \t   \"      bne 1f;\"\n-\t   \"      stwcx. %2,0,%1;\"\n+\t   \"      \" _STCX \"%2,0,%1;\"\n \t   \"      bne- 0b;\"\n \t   \"1:    \"\n-\t: \"=&r\"(ret)\n-\t: \"r\"(addr), \"r\"(new_val), \"r\"(old)\n+\t: \"=&r\" (ret)\n+\t: \"r\" (addr), \"r\" (new_val), \"r\" (old)\n \t: \"cr0\", \"memory\");\n+\n   return ret == 0;\n }\n \n // Ensure that subsequent instructions do not execute on stale\n // data that was loaded from memory before the barrier.\n inline static void\n-read_barrier()\n+read_barrier ()\n {\n   __asm__ __volatile__ (\"isync\" : : : \"memory\");\n }\n \n // Ensure that prior stores to memory are completed with respect to other\n // processors.\n inline static void\n-write_barrier()\n+write_barrier ()\n {\n   __asm__ __volatile__ (\"sync\" : : : \"memory\");\n }"}]}