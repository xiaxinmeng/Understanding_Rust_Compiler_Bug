{"sha": "75c8d6e54a14d090853b998cfd335511b1d8ae5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjOGQ2ZTU0YTE0ZDA5MDg1M2I5OThjZmQzMzU1MTFiMWQ4YWU1Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-04T15:45:41Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-04-04T20:22:44Z"}, "message": "c++: Mangling of dependent conversions [PR91377]\n\nWe skip over other conversion codes when mangling expressions, we should do\nthe same with IMPLICIT_CONV_EXPR.\n\ngcc/cp/ChangeLog\n2020-04-04  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/91377\n\t* mangle.c (write_expression): Skip IMPLICIT_CONV_EXPR.", "tree": {"sha": "5928bbca79da2c1886fe3ef0588e42f9f03701ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5928bbca79da2c1886fe3ef0588e42f9f03701ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c8d6e54a14d090853b998cfd335511b1d8ae5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c8d6e54a14d090853b998cfd335511b1d8ae5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c8d6e54a14d090853b998cfd335511b1d8ae5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c8d6e54a14d090853b998cfd335511b1d8ae5f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a86fce1a879a206fb4b27f097910005d968fda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a86fce1a879a206fb4b27f097910005d968fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a86fce1a879a206fb4b27f097910005d968fda"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "a382235d7cceedf64fddb9d7d5a6b7b752ae3c80", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=75c8d6e54a14d090853b998cfd335511b1d8ae5f", "patch": "@@ -1,3 +1,8 @@\n+2020-04-04  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/91377\n+\t* mangle.c (write_expression): Skip IMPLICIT_CONV_EXPR.\n+\n 2020-04-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94205"}, {"sha": "9e39cfd8dbad6c69f80c4f180de10b54d8a2a764", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=75c8d6e54a14d090853b998cfd335511b1d8ae5f", "patch": "@@ -2875,6 +2875,7 @@ write_expression (tree expr)\n   /* Skip NOP_EXPR and CONVERT_EXPR.  They can occur when (say) a pointer\n      argument is converted (via qualification conversions) to another type.  */\n   while (CONVERT_EXPR_CODE_P (code)\n+\t || code == IMPLICIT_CONV_EXPR\n \t || location_wrapper_p (expr)\n \t /* Parentheses aren't mangled.  */\n \t || code == PAREN_EXPR"}, {"sha": "f2661997a33b70a7eadc7eeff12d448bf67ad7fd", "filename": "gcc/testsuite/g++.dg/abi/mangle75.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle75.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c8d6e54a14d090853b998cfd335511b1d8ae5f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle75.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle75.C?ref=75c8d6e54a14d090853b998cfd335511b1d8ae5f", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/91377\n+// { dg-do compile { target c++11 } }\n+\n+struct f {\n+  static constexpr int d = 3;\n+  typedef int e;\n+};\n+template <int a> struct x { };\n+template <typename g, g j, g m> using n = x<j + m>;\n+template <typename ac> auto v() -> n<typename ac::e, 0, ac::d>;\n+void af() { v<f>(); }\n+\n+// { dg-final { scan-assembler \"_Z1vI1fE1xIXplLi0EsrT_1dEEv\" } }"}]}