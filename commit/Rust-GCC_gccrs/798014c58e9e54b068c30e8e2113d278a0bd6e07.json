{"sha": "798014c58e9e54b068c30e8e2113d278a0bd6e07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk4MDE0YzU4ZTllNTRiMDY4YzMwZThlMjExM2QyNzhhMGJkNmUwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-09-05T19:57:56Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-09-05T19:57:56Z"}, "message": "Make mode_for_size_tree return an opt_mode\n\n...for consistency with mode_for_size\n\n2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* stor-layout.h (mode_for_size_tree): Return an opt_mode.\n\t* stor-layout.c (mode_for_size_tree): Likewise.\n\t(mode_for_array): Update accordingly.\n\t(layout_decl): Likewise.\n\t(compute_record_mode): Likewise.  Only set the mode once.\n\ngcc/ada/\n\t* gcc-interface/utils.c (make_packable_type): Update call to\n\tmode_for_size_tree.\n\nFrom-SVN: r251732", "tree": {"sha": "342022676600dfe2e5948350a06d04966f949872", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/342022676600dfe2e5948350a06d04966f949872"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/798014c58e9e54b068c30e8e2113d278a0bd6e07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798014c58e9e54b068c30e8e2113d278a0bd6e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/798014c58e9e54b068c30e8e2113d278a0bd6e07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/798014c58e9e54b068c30e8e2113d278a0bd6e07/comments", "author": null, "committer": null, "parents": [{"sha": "3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3981fbb65a43dff3a81ebc32c94d6f86bb4f9783"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "5eb76c25f013c2047072015708b33583ee049ffa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=798014c58e9e54b068c30e8e2113d278a0bd6e07", "patch": "@@ -1,3 +1,11 @@\n+2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* stor-layout.h (mode_for_size_tree): Return an opt_mode.\n+\t* stor-layout.c (mode_for_size_tree): Likewise.\n+\t(mode_for_array): Update accordingly.\n+\t(layout_decl): Likewise.\n+\t(compute_record_mode): Likewise.  Only set the mode once.\n+\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* target.def (get_mask_mode): Change return type to opt_mode."}, {"sha": "e1c754503c8742f3249b7a3eafe083f9a8a9a1ac", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=798014c58e9e54b068c30e8e2113d278a0bd6e07", "patch": "@@ -1,3 +1,8 @@\n+2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* gcc-interface/utils.c (make_packable_type): Update call to\n+\tmode_for_size_tree.\n+\n 2017-09-05  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* gcc-interface/utils2.c (build_load_modify_store):"}, {"sha": "89dbc8deb92e394139f6f3c4b84f19a2ad0a59fd", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=798014c58e9e54b068c30e8e2113d278a0bd6e07", "patch": "@@ -1080,7 +1080,8 @@ make_packable_type (tree type, bool in_record, unsigned int max_align)\n      in case the record itself contains a BLKmode field.  */\n   if (in_record && TYPE_MODE (new_type) == BLKmode)\n     SET_TYPE_MODE (new_type,\n-\t\t   mode_for_size_tree (TYPE_SIZE (new_type), MODE_INT, 1));\n+\t\t   mode_for_size_tree (TYPE_SIZE (new_type),\n+\t\t\t\t       MODE_INT, 1).else_blk ());\n \n   /* If neither mode nor size nor alignment shrunk, return the old type.  */\n   if (TYPE_MODE (new_type) == BLKmode && new_size >= size && max_align == 0)"}, {"sha": "8a3b0fec0c82dc5d3bacdc7020a581162b9917bd", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=798014c58e9e54b068c30e8e2113d278a0bd6e07", "patch": "@@ -321,19 +321,19 @@ mode_for_size (unsigned int size, enum mode_class mclass, int limit)\n \n /* Similar, except passed a tree node.  */\n \n-machine_mode\n+opt_machine_mode\n mode_for_size_tree (const_tree size, enum mode_class mclass, int limit)\n {\n   unsigned HOST_WIDE_INT uhwi;\n   unsigned int ui;\n \n   if (!tree_fits_uhwi_p (size))\n-    return BLKmode;\n+    return opt_machine_mode ();\n   uhwi = tree_to_uhwi (size);\n   ui = uhwi;\n   if (uhwi != ui)\n-    return BLKmode;\n-  return mode_for_size (ui, mclass, limit).else_blk ();\n+    return opt_machine_mode ();\n+  return mode_for_size (ui, mclass, limit);\n }\n \n /* Return the narrowest mode of class MCLASS that contains at least\n@@ -563,7 +563,7 @@ mode_for_array (tree elem_type, tree size)\n \t\t\t\t\t     int_size / int_elem_size))\n \tlimit_p = false;\n     }\n-  return mode_for_size_tree (size, MODE_INT, limit_p);\n+  return mode_for_size_tree (size, MODE_INT, limit_p).else_blk ();\n }\n \f\n /* Subroutine of layout_decl: Force alignment required for the data type.\n@@ -683,17 +683,18 @@ layout_decl (tree decl, unsigned int known_align)\n \t      && TREE_CODE (TYPE_SIZE (type)) == INTEGER_CST\n \t      && GET_MODE_CLASS (TYPE_MODE (type)) == MODE_INT)\n \t    {\n-\t      machine_mode xmode\n-\t\t= mode_for_size_tree (DECL_SIZE (decl), MODE_INT, 1);\n-\t      unsigned int xalign = GET_MODE_ALIGNMENT (xmode);\n-\n-\t      if (xmode != BLKmode\n-\t\t  && !(xalign > BITS_PER_UNIT && DECL_PACKED (decl))\n-\t\t  && (known_align == 0 || known_align >= xalign))\n+\t      machine_mode xmode;\n+\t      if (mode_for_size_tree (DECL_SIZE (decl),\n+\t\t\t\t      MODE_INT, 1).exists (&xmode))\n \t\t{\n-\t\t  SET_DECL_ALIGN (decl, MAX (xalign, DECL_ALIGN (decl)));\n-\t\t  SET_DECL_MODE (decl, xmode);\n-\t\t  DECL_BIT_FIELD (decl) = 0;\n+\t\t  unsigned int xalign = GET_MODE_ALIGNMENT (xmode);\n+\t\t  if (!(xalign > BITS_PER_UNIT && DECL_PACKED (decl))\n+\t\t      && (known_align == 0 || known_align >= xalign))\n+\t\t    {\n+\t\t      SET_DECL_ALIGN (decl, MAX (xalign, DECL_ALIGN (decl)));\n+\t\t      SET_DECL_MODE (decl, xmode);\n+\t\t      DECL_BIT_FIELD (decl) = 0;\n+\t\t    }\n \t\t}\n \t    }\n \n@@ -1756,22 +1757,24 @@ compute_record_mode (tree type)\n   if (TREE_CODE (type) == RECORD_TYPE && mode != VOIDmode\n       && tree_fits_uhwi_p (TYPE_SIZE (type))\n       && GET_MODE_BITSIZE (mode) == tree_to_uhwi (TYPE_SIZE (type)))\n-    SET_TYPE_MODE (type, mode);\n+    ;\n   else\n-    SET_TYPE_MODE (type, mode_for_size_tree (TYPE_SIZE (type), MODE_INT, 1));\n+    mode = mode_for_size_tree (TYPE_SIZE (type), MODE_INT, 1).else_blk ();\n \n   /* If structure's known alignment is less than what the scalar\n      mode would need, and it matters, then stick with BLKmode.  */\n-  if (TYPE_MODE (type) != BLKmode\n+  if (mode != BLKmode\n       && STRICT_ALIGNMENT\n       && ! (TYPE_ALIGN (type) >= BIGGEST_ALIGNMENT\n-\t    || TYPE_ALIGN (type) >= GET_MODE_ALIGNMENT (TYPE_MODE (type))))\n+\t    || TYPE_ALIGN (type) >= GET_MODE_ALIGNMENT (mode)))\n     {\n       /* If this is the only reason this type is BLKmode, then\n \t don't force containing types to be BLKmode.  */\n       TYPE_NO_FORCE_BLK (type) = 1;\n-      SET_TYPE_MODE (type, BLKmode);\n+      mode = BLKmode;\n     }\n+\n+  SET_TYPE_MODE (type, mode);\n }\n \n /* Compute TYPE_SIZE and TYPE_ALIGN for TYPE, once it has been laid"}, {"sha": "6c8d83375cb439521e1787190be1be45e5717dd1", "filename": "gcc/stor-layout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fstor-layout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/798014c58e9e54b068c30e8e2113d278a0bd6e07/gcc%2Fstor-layout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.h?ref=798014c58e9e54b068c30e8e2113d278a0bd6e07", "patch": "@@ -99,7 +99,7 @@ extern tree make_unsigned_type (int);\n    If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE.\n    The value is BLKmode if no other mode is found.  This is like\n    mode_for_size, but is passed a tree.  */\n-extern machine_mode mode_for_size_tree (const_tree, enum mode_class, int);\n+extern opt_machine_mode mode_for_size_tree (const_tree, enum mode_class, int);\n \n extern tree bitwise_type_for_mode (machine_mode);\n "}]}