{"sha": "be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU0MmFhNzE3YzMwMThjY2YxYzdjZTQyNjdlMDJjZmU5MjEwY2MxZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T14:49:28Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2017-01-20T14:49:28Z"}, "message": "[multiple changes]\n\n2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_ch9.adb: minor style fixes in comments.\n\t* sem_ch9.adb (Analyze_Delay_Relative): in GNATprove mode a delay\n\trelative statement introduces an implicit dependency on\n\tAda.Real_Time.Clock_Time.\n\t* sem_util.adb: Minor reformatting.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Aspect Alignment\n\tmust be treated as delayed aspect even if the expression is\n\ta literal, because the aspect affects the freezing and the\n\telaboration of the object to which it applies.\n\n2017-01-20  Tristan Gingold  <gingold@adacore.com>\n\n\t* s-osinte-vxworks.ads (Interrup_Range): New subtype.\n\n2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* lib-xref.adb (Generate_Reference): Do not warn about the\n\tpresence of a pragma Unreferenced if the entity appears as the\n\tactual in a procedure call that does not come from source.\n\n2017-01-20  Pascal Obry  <obry@adacore.com>\n\n\t* expect.c, terminals.c: Fix some warnings about unused variables.\n\t* gsocket.h, adaint.c, adaint.h: Fix some more warnings in the C part\n\tof the runtime.\n\n2017-01-20  Bob Duff  <duff@adacore.com>\n\n\t* exp_attr.adb (Constrained): Apply an access check (check that\n\tthe prefix is not null) when the prefix denotes an object of an\n\taccess type; that is, when there is an implicit dereference.\n\n2017-01-20  Gary Dismukes  <dismukes@adacore.com>\n\n\t* s-rident.ads (constant Profile_Info): Remove\n\tNo_Calendar from GNAT_Extended_Ravenscar restrictions.\n\n2017-01-20  Tristan Gingold  <gingold@adacore.com>\n\n\t*  s-maccod.ads: Add pragma No_Elaboration_Code_All\n\nFrom-SVN: r244718", "tree": {"sha": "23ea534f073473db63cb1df7a4649d2a1a8035af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23ea534f073473db63cb1df7a4649d2a1a8035af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/comments", "author": null, "committer": null, "parents": [{"sha": "4cea8675697151f7e8c5b30259da9ac0971ab070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cea8675697151f7e8c5b30259da9ac0971ab070", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cea8675697151f7e8c5b30259da9ac0971ab070"}], "stats": {"total": 278, "additions": 185, "deletions": 93}, "files": [{"sha": "c6c5f9206178d725dd247529222881a1507186db", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -1,3 +1,49 @@\n+2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_ch9.adb: minor style fixes in comments.\n+\t* sem_ch9.adb (Analyze_Delay_Relative): in GNATprove mode a delay\n+\trelative statement introduces an implicit dependency on\n+\tAda.Real_Time.Clock_Time.\n+\t* sem_util.adb: Minor reformatting.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Aspect Alignment\n+\tmust be treated as delayed aspect even if the expression is\n+\ta literal, because the aspect affects the freezing and the\n+\telaboration of the object to which it applies.\n+\n+2017-01-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t* s-osinte-vxworks.ads (Interrup_Range): New subtype.\n+\n+2017-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* lib-xref.adb (Generate_Reference): Do not warn about the\n+\tpresence of a pragma Unreferenced if the entity appears as the\n+\tactual in a procedure call that does not come from source.\n+\n+2017-01-20  Pascal Obry  <obry@adacore.com>\n+\n+\t* expect.c, terminals.c: Fix some warnings about unused variables.\n+\t* gsocket.h, adaint.c, adaint.h: Fix some more warnings in the C part\n+\tof the runtime.\n+\n+2017-01-20  Bob Duff  <duff@adacore.com>\n+\n+\t* exp_attr.adb (Constrained): Apply an access check (check that\n+\tthe prefix is not null) when the prefix denotes an object of an\n+\taccess type; that is, when there is an implicit dereference.\n+\n+2017-01-20  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* s-rident.ads (constant Profile_Info): Remove\n+\tNo_Calendar from GNAT_Extended_Ravenscar restrictions.\n+\n+2017-01-20  Tristan Gingold  <gingold@adacore.com>\n+\n+\t*  s-maccod.ads: Add pragma No_Elaboration_Code_All\n+\n 2017-01-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* ghost.adb (Mark_Ghost_Clause): New routine."}, {"sha": "232b5eb4371fd51106223b59e605b5068d887286", "filename": "gcc/ada/adaint.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fadaint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fadaint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.h?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -108,6 +108,7 @@ typedef long OS_Time;\n #endif\n \n #define __int64 long long\n+GNAT_STRUCT_STAT;\n \n /* A lazy cache for the attributes of a file. On some systems, a single call to\n    stat() will give all this information, so it is better than doing a system"}, {"sha": "72a7f53a4d1032e03d6fd314e5dea0a5ed9276cf", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 45, "deletions": 34, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -2682,46 +2682,57 @@ package body Exp_Attr is\n                         Res := True;\n                      end if;\n                   end if;\n+               else\n \n-               --  If the prefix is not a variable or is aliased, then\n-               --  definitely true; if it's a formal parameter without an\n-               --  associated extra formal, then treat it as constrained.\n+                  --  For access type, apply access check as needed\n \n-               --  Ada 2005 (AI-363): An aliased prefix must be known to be\n-               --  constrained in order to set the attribute to True.\n+                  if Is_Access_Type (Ptyp) then\n+                     Apply_Access_Check (N);\n+                  end if;\n \n-               elsif not Is_Variable (Pref)\n-                 or else Present (Formal_Ent)\n-                 or else (Ada_Version < Ada_2005\n-                            and then Is_Aliased_View (Pref))\n-                 or else (Ada_Version >= Ada_2005\n-                            and then Is_Constrained_Aliased_View (Pref))\n-               then\n-                  Res := True;\n+                  --  If the prefix is not a variable or is aliased, then\n+                  --  definitely true; if it's a formal parameter without an\n+                  --  associated extra formal, then treat it as constrained.\n \n-               --  Variable case, look at type to see if it is constrained.\n-               --  Note that the one case where this is not accurate (the\n-               --  procedure formal case), has been handled above.\n+                  --  Ada 2005 (AI-363): An aliased prefix must be known to be\n+                  --  constrained in order to set the attribute to True.\n \n-               --  We use the Underlying_Type here (and below) in case the\n-               --  type is private without discriminants, but the full type\n-               --  has discriminants. This case is illegal, but we generate it\n-               --  internally for passing to the Extra_Constrained parameter.\n+                  if not Is_Variable (Pref)\n+                    or else Present (Formal_Ent)\n+                    or else (Ada_Version < Ada_2005\n+                               and then Is_Aliased_View (Pref))\n+                    or else (Ada_Version >= Ada_2005\n+                               and then Is_Constrained_Aliased_View (Pref))\n+                  then\n+                     Res := True;\n \n-               else\n-                  --  In Ada 2012, test for case of a limited tagged type, in\n-                  --  which case the attribute is always required to return\n-                  --  True. The underlying type is tested, to make sure we also\n-                  --  return True for cases where there is an unconstrained\n-                  --  object with an untagged limited partial view which has\n-                  --  defaulted discriminants (such objects always produce a\n-                  --  False in earlier versions of Ada). (Ada 2012: AI05-0214)\n-\n-                  Res := Is_Constrained (Underlying_Type (Etype (Ent)))\n-                           or else\n-                             (Ada_Version >= Ada_2012\n-                               and then Is_Tagged_Type (Underlying_Type (Ptyp))\n-                               and then Is_Limited_Type (Ptyp));\n+                  --  Variable case, look at type to see if it is constrained.\n+                  --  Note that the one case where this is not accurate (the\n+                  --  procedure formal case), has been handled above.\n+\n+                  --  We use the Underlying_Type here (and below) in case the\n+                  --  type is private without discriminants, but the full type\n+                  --  has discriminants. This case is illegal, but we generate\n+                  --  it internally for passing to the Extra_Constrained\n+                  --  parameter.\n+\n+                  else\n+                     --  In Ada 2012, test for case of a limited tagged type,\n+                     --  in which case the attribute is always required to\n+                     --  return True. The underlying type is tested, to make\n+                     --  sure we also return True for cases where there is an\n+                     --  unconstrained object with an untagged limited partial\n+                     --  view which has defaulted discriminants (such objects\n+                     --  always produce a False in earlier versions of\n+                     --  Ada). (Ada 2012: AI05-0214)\n+\n+                     Res :=\n+                       Is_Constrained (Underlying_Type (Etype (Ent)))\n+                         or else\n+                           (Ada_Version >= Ada_2012\n+                             and then Is_Tagged_Type (Underlying_Type (Ptyp))\n+                             and then Is_Limited_Type (Ptyp));\n+                  end if;\n                end if;\n \n                Rewrite (N, New_Occurrence_Of (Boolean_Literals (Res), Loc));"}, {"sha": "d2772caf1e0eda9426d5b0f0c160fbef0821fcfb", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -4524,7 +4524,7 @@ package body Exp_Ch9 is\n                      --  If actual is an out parameter of a null-excluding\n                      --  access type, there is access check on entry, so set\n                      --  Suppress_Assignment_Checks on the generated statement\n-                     --  that assigns the actual to the parameter block\n+                     --  that assigns the actual to the parameter block.\n \n                      Set_Suppress_Assignment_Checks (Last (Stats));\n                   end if;\n@@ -6817,7 +6817,7 @@ package body Exp_Ch9 is\n          Insert_Before (N, Decl);\n          Analyze (Decl);\n \n-         --  Rewrite abortable part into a call to this procedure.\n+         --  Rewrite abortable part into a call to this procedure\n \n          Astats :=\n            New_List (\n@@ -9030,7 +9030,7 @@ package body Exp_Ch9 is\n                   elsif Restriction_Active (No_Implicit_Heap_Allocations) then\n                      if not Discriminated_Size (Defining_Identifier (Priv))\n                      then\n-                        --  Any object of the type will be  non-static.\n+                        --  Any object of the type will be non-static\n \n                         Error_Msg_N (\"component has non-static size??\", Priv);\n                         Error_Msg_NE\n@@ -9039,7 +9039,7 @@ package body Exp_Ch9 is\n                            & \"No_Implicit_Heap_Allocations??\", Priv, Prot_Typ);\n                      else\n \n-                        --  Object will be non-static if discriminants are.\n+                        --  Object will be non-static if discriminants are\n \n                         Error_Msg_NE\n                           (\"creation of protected object of type& with \"\n@@ -9055,7 +9055,7 @@ package body Exp_Ch9 is\n                   then\n                      if not Discriminated_Size (Defining_Identifier (Priv))\n                      then\n-                        --  Any object of the type will be  non-static.\n+                        --  Any object of the type will be non-static\n \n                         Error_Msg_N (\"component has non-static size??\", Priv);\n                         Error_Msg_NE\n@@ -9064,7 +9064,7 @@ package body Exp_Ch9 is\n                            & \"No_Implicit_Protected_Object_Allocations??\",\n                            Priv, Prot_Typ);\n                      else\n-                        --  Object will be non-static if discriminants are.\n+                        --  Object will be non-static if discriminants are\n \n                         Error_Msg_NE\n                           (\"creation of protected object of type& with \"\n@@ -13769,7 +13769,7 @@ package body Exp_Ch9 is\n                     Expression\n                      (First (Pragma_Argument_Associations (Prio_Clause)));\n \n-                  --  Get_Rep_Item returns either priority pragma.\n+                  --  Get_Rep_Item returns either priority pragma\n \n                   if Pragma_Name (Prio_Clause) = Name_Priority then\n                      Prio_Type := RTE (RE_Any_Priority);"}, {"sha": "a19ec5611995a8065597db952b71ec710e32e41f", "filename": "gcc/ada/expect.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexpect.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fexpect.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexpect.c?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2001-2015, AdaCore                     *\n+ *                     Copyright (C) 2001-2016, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -388,7 +388,9 @@ __gnat_expect_poll (int *fd,\n   int max_fd = 0;\n   int ready;\n   int i;\n+#ifdef __hpux__\n   int received;\n+#endif\n \n   *dead_process = 0;\n \n@@ -413,14 +415,18 @@ __gnat_expect_poll (int *fd,\n \n     if (ready > 0)\n       {\n+#ifdef __hpux__\n \treceived = 0;\n+#endif\n \n         for (i = 0; i < num_fd; i++)\n \t  {\n \t    if (FD_ISSET (fd[i], &rset))\n \t      {\n \t\tis_set[i] = 1;\n+#ifdef __hpux__\n \t\treceived = 1;\n+#endif\n \t      }\n \t    else\n \t      is_set[i] = 0;"}, {"sha": "b343b0942c662a08511c5c04db6027ce4db29b60", "filename": "gcc/ada/gsocket.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fgsocket.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fgsocket.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgsocket.h?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *         Copyright (C) 2004-2015, Free Software Foundation, Inc.          *\n+ *         Copyright (C) 2004-2016, Free Software Foundation, Inc.          *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -201,6 +201,7 @@\n #include <netinet/tcp.h>\n #include <sys/ioctl.h>\n #include <netdb.h>\n+#include <unistd.h>\n #endif\n \n #ifdef __ANDROID__"}, {"sha": "4d9fe6919e4689ef3f865fa25f6fb253e62ce7a1", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -863,6 +863,14 @@ package body Lib.Xref is\n             elsif Is_On_LHS (N) then\n                null;\n \n+            --  No warning if the reference is in a call that does not come\n+            --  from source (e.g. a call to a controlled type primitive).\n+\n+            elsif not Comes_From_Source (Parent (N))\n+              and then Nkind (Parent (N)) = N_Procedure_Call_Statement\n+            then\n+               null;\n+\n             --  For entry formals, we want to place the warning message on the\n             --  corresponding entity in the accept statement. The current scope\n             --  is the body of the accept, so we find the formal whose name"}, {"sha": "353cb0586e80e1cfabbcab6096668770ad8346d1", "filename": "gcc/ada/s-maccod.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-maccod.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-maccod.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-maccod.ads?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2011, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -34,6 +34,7 @@\n --  for full details.\n \n package System.Machine_Code is\n+   pragma No_Elaboration_Code_All;\n    pragma Pure;\n \n    --  All identifiers in this unit are implementation defined"}, {"sha": "10152343a61151dfe9a1ddafaa14384e78d469e8", "filename": "gcc/ada/s-osinte-vxworks.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-osinte-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-osinte-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-vxworks.ads?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -7,7 +7,7 @@\n --                                   S p e c                                --\n --                                                                          --\n --            Copyright (C) 1991-1994, Florida State University             --\n---          Copyright (C) 1995-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1995-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -83,6 +83,8 @@ package System.OS_Interface is\n    type HW_Interrupt is new int range 0 .. Max_HW_Interrupt;\n \n    Max_Interrupt : constant := Max_HW_Interrupt;\n+   subtype Interrupt_Range is Natural range 0 .. Max_HW_Interrupt;\n+   --  For s-interr\n \n    --  Signals common to Vxworks 5.x and 6.x\n "}, {"sha": "3228bacaac6ed7b56073a6f37e518b55dfe73484", "filename": "gcc/ada/s-rident.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-rident.ads?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -567,7 +567,6 @@ package System.Rident is\n \n                            --  plus these additional restrictions:\n \n-                           No_Calendar                      => True,\n                            No_Implicit_Task_Allocations     => True,\n                            No_Implicit_Protected_Object_Allocations\n                                                             => True,"}, {"sha": "5e8822a49704c9b30d33bad9ae010948ae3b1e31", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -2044,9 +2044,12 @@ package body Sem_Ch13 is\n                   if A_Id in Boolean_Aspects and then No (Expr) then\n                      Delay_Required := False;\n \n-                  --  For non-Boolean aspects, don't delay if integer literal\n+                  --  For non-Boolean aspects, don't delay if integer literal,\n+                  --  unless the aspect is Alignment, which affects the\n+                  --  freezing of an initialized object.\n \n                   elsif A_Id not in Boolean_Aspects\n+                    and then A_Id /= Aspect_Alignment\n                     and then Present (Expr)\n                     and then Nkind (Expr) = N_Integer_Literal\n                   then"}, {"sha": "b26e2b4eabd499820f5e7b2c094178bc5d38f5d1", "filename": "gcc/ada/sem_ch9.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch9.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -1162,6 +1162,19 @@ package body Sem_Ch9 is\n       Check_Potentially_Blocking_Operation (N);\n       Analyze_And_Resolve (E, Standard_Duration);\n       Check_Restriction (No_Fixed_Point, E);\n+\n+      --  In SPARK mode the relative delay statement introduces an implicit\n+      --  dependency on the Ada.Real_Time.Clock_Time abstract state, so we must\n+      --  force the loading of the Ada.Real_Time package.\n+\n+      if GNATprove_Mode then\n+         declare\n+            Unused : Entity_Id;\n+\n+         begin\n+            Unused := RTE (RO_RT_Time);\n+         end;\n+      end if;\n    end Analyze_Delay_Relative;\n \n    -------------------------"}, {"sha": "0e1a0c0a574ef32c0e96a9f3295993597a088951", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -16151,9 +16151,9 @@ package body Sem_Util is\n    -- NCT_Assoc --\n    ---------------\n \n-   --  The hash table NCT_Assoc associates old entities in the table\n-   --  with their corresponding new entities (i.e. the pairs of entries\n-   --  presented in the original Map argument are Key-Element pairs).\n+   --  The hash table NCT_Assoc associates old entities in the table with their\n+   --  corresponding new entities (i.e. the pairs of entries presented in the\n+   --  original Map argument are Key-Element pairs).\n \n    package NCT_Assoc is new Simple_HTable (\n      Header_Num => NCT_Header_Num,\n@@ -16167,10 +16167,10 @@ package body Sem_Util is\n    -- NCT_Itype_Assoc --\n    ---------------------\n \n-   --  The hash table NCT_Itype_Assoc contains entries only for those\n-   --  old nodes which have a non-empty Associated_Node_For_Itype set.\n-   --  The key is the associated node, and the element is the new node\n-   --  itself (NOT the associated node for the new node).\n+   --  The hash table NCT_Itype_Assoc contains entries only for those old\n+   --  nodes which have a non-empty Associated_Node_For_Itype set. The key\n+   --  is the associated node, and the element is the new node itself (NOT\n+   --  the associated node for the new node).\n \n    package NCT_Itype_Assoc is new Simple_HTable (\n      Header_Num => NCT_Header_Num,\n@@ -16227,9 +16227,9 @@ package body Sem_Util is\n       --  Called during first phase to visit all elements of an Elist\n \n       procedure Visit_Field (F : Union_Id; N : Node_Id);\n-      --  Visit a single field, recursing to call Visit_Node or Visit_List\n-      --  if the field is a syntactic descendant of the current node (i.e.\n-      --  its parent is Node N).\n+      --  Visit a single field, recursing to call Visit_Node or Visit_List if\n+      --  the field is a syntactic descendant of the current node (i.e. its\n+      --  parent is Node N).\n \n       procedure Visit_Itype (Old_Itype : Entity_Id);\n       --  Called during first phase to visit subsidiary fields of a defining\n@@ -16286,6 +16286,7 @@ package body Sem_Util is\n       procedure Build_NCT_Hash_Tables is\n          Elmt : Elmt_Id;\n          Ent  : Entity_Id;\n+\n       begin\n          if NCT_Hash_Table_Setup then\n             NCT_Assoc.Reset;\n@@ -16309,9 +16310,9 @@ package body Sem_Util is\n                begin\n                   if Present (Anode) then\n \n-                     --  Enter a link between the associated node of the\n-                     --  old Itype and the new Itype, for updating later\n-                     --  when node is copied.\n+                     --  Enter a link between the associated node of the old\n+                     --  Itype and the new Itype, for updating later when node\n+                     --  is copied.\n \n                      NCT_Itype_Assoc.Set (Anode, Node (Elmt));\n                   end if;\n@@ -16470,19 +16471,18 @@ package body Sem_Util is\n                if Nkind (Old_E) = N_Parameter_Association\n                  and then Present (Next_Named_Actual (Old_E))\n                then\n-                  if First_Named_Actual (Old_Node)\n-                    = Explicit_Actual_Parameter (Old_E)\n+                  if First_Named_Actual (Old_Node) =\n+                       Explicit_Actual_Parameter (Old_E)\n                   then\n                      Set_First_Named_Actual\n                        (New_Node, Explicit_Actual_Parameter (New_E));\n                   end if;\n \n-                  --  Now scan parameter list from the beginning,to locate\n+                  --  Now scan parameter list from the beginning, to locate\n                   --  next named actual, which can be out of order.\n \n                   Old_Next := First (Parameter_Associations (Old_Node));\n                   New_Next := First (Parameter_Associations (New_Node));\n-\n                   while Nkind (Old_Next) /= N_Parameter_Association\n                     or else Explicit_Actual_Parameter (Old_Next) /=\n                                               Next_Named_Actual (Old_E)\n@@ -16728,8 +16728,8 @@ package body Sem_Util is\n \n             --  Note: the exclusion of self-referential copies is just an\n             --  optimization, since the search of the already copied list\n-            --  would catch it, but it is a common case (Etype pointing\n-            --  to itself for an Itype that is a base type).\n+            --  would catch it, but it is a common case (Etype pointing to\n+            --  itself for an Itype that is a base type).\n \n             elsif Has_Extension (Node_Id (F))\n               and then Is_Itype (Entity_Id (F))\n@@ -16785,8 +16785,8 @@ package body Sem_Util is\n \n          New_Itype := New_Copy (Old_Itype);\n \n-         --  The new Itype has all the attributes of the old one, and\n-         --  we just copy the contents of the entity. However, the back-end\n+         --  The new Itype has all the attributes of the old one, and we\n+         --  just copy the contents of the entity. However, the back-end\n          --  needs different names for debugging purposes, so we create a\n          --  new internal name for it in all cases.\n \n@@ -16803,19 +16803,19 @@ package body Sem_Util is\n             --  Case of hash tables used\n \n             if NCT_Hash_Tables_Used then\n-\n                Ent := NCT_Assoc.Get (Associated_Node_For_Itype (Old_Itype));\n \n                if Present (Ent) then\n                   Set_Associated_Node_For_Itype (New_Itype, Ent);\n                end if;\n \n                Ent := NCT_Itype_Assoc.Get (Old_Itype);\n+\n                if Present (Ent) then\n                   Set_Associated_Node_For_Itype (Ent, New_Itype);\n \n-               --  If the hash table has no association for this Itype and\n-               --  its associated node, enter one now.\n+               --  If the hash table has no association for this Itype and its\n+               --  associated node, enter one now.\n \n                else\n                   NCT_Itype_Assoc.Set\n@@ -16872,7 +16872,7 @@ package body Sem_Util is\n          --  If a record subtype is simply copied, the entity list will be\n          --  shared. Thus cloned_Subtype must be set to indicate the sharing.\n \n-         if Ekind_In (Old_Itype, E_Record_Subtype, E_Class_Wide_Subtype) then\n+         if Ekind_In (Old_Itype, E_Class_Wide_Subtype, E_Record_Subtype) then\n             Set_Cloned_Subtype (New_Itype, Old_Itype);\n          end if;\n \n@@ -16889,14 +16889,14 @@ package body Sem_Util is\n \n          elsif Is_Array_Type (Old_Itype) then\n             if Present (First_Index (Old_Itype)) then\n-               Visit_Field (Union_Id (List_Containing\n-                                (First_Index (Old_Itype))),\n-                            Old_Itype);\n+               Visit_Field\n+                 (Union_Id (List_Containing (First_Index (Old_Itype))),\n+                  Old_Itype);\n             end if;\n \n             if Is_Packed (Old_Itype) then\n-               Visit_Field (Union_Id (Packed_Array_Impl_Type (Old_Itype)),\n-                            Old_Itype);\n+               Visit_Field\n+                 (Union_Id (Packed_Array_Impl_Type (Old_Itype)), Old_Itype);\n             end if;\n          end if;\n       end Visit_Itype;\n@@ -16923,17 +16923,14 @@ package body Sem_Util is\n       ----------------\n \n       procedure Visit_Node (N : Node_Or_Entity_Id) is\n-\n-      --  Start of processing for Visit_Node\n-\n       begin\n          --  Handle case of an Itype, which must be copied\n \n          if Has_Extension (N) and then Is_Itype (N) then\n \n             --  Nothing to do if already in the list. This can happen with an\n-            --  Itype entity that appears more than once in the tree.\n-            --  Note that we do not want to visit descendants in this case.\n+            --  Itype entity that appears more than once in the tree. Note that\n+            --  we do not want to visit descendants in this case.\n \n             --  Test for already in list when hash table is used\n \n@@ -17005,13 +17002,13 @@ package body Sem_Util is\n          end;\n       end if;\n \n-      --  Hash table set up if required, now start phase one by visiting\n-      --  top node (we will recursively visit the descendants).\n+      --  Hash table set up if required, now start phase one by visiting top\n+      --  node (we will recursively visit the descendants).\n \n       Visit_Node (Source);\n \n-      --  Now the second phase of the copy can start. First we process\n-      --  all the mapped entities, copying their descendants.\n+      --  Now the second phase of the copy can start. First we process all the\n+      --  mapped entities, copying their descendants.\n \n       if Present (Actual_Map) then\n          declare\n@@ -17026,6 +17023,7 @@ package body Sem_Util is\n                if Is_Itype (New_Itype) then\n                   Copy_Itype_With_Replacement (New_Itype);\n                end if;\n+\n                Next_Elmt (Elmt);\n             end loop;\n          end;"}, {"sha": "35185c7c6752c672381952690de16adf5fd66dc4", "filename": "gcc/ada/terminals.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fterminals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be42aa717c3018ccf1c7ce4267e02cfe9210cc1e/gcc%2Fada%2Fterminals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fterminals.c?ref=be42aa717c3018ccf1c7ce4267e02cfe9210cc1e", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                     Copyright (C) 2008-2015, AdaCore                     *\n+ *                     Copyright (C) 2008-2016, AdaCore                     *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1410,7 +1410,8 @@ __gnat_setup_child_communication\n \n #ifdef TIOCSCTTY\n   /* make the tty the controlling terminal */\n-  status = ioctl (desc->slave_fd, TIOCSCTTY, 0);\n+  if ((status = ioctl (desc->slave_fd, TIOCSCTTY, 0)) == -1)\n+    return -1;\n #endif\n \n   /* adjust tty settings */\n@@ -1424,8 +1425,10 @@ __gnat_setup_child_communication\n   if (desc->slave_fd > 2) close (desc->slave_fd);\n \n   /* adjust process group settings */\n-  status = setpgid (pid, pid);\n-  status = tcsetpgrp (0, pid);\n+  if ((status = setpgid (pid, pid)) == -1)\n+    return -1;\n+  if ((status = tcsetpgrp (0, pid)) == -1)\n+    return -1;\n \n   /* launch the program */\n   execvp (new_argv[0], new_argv);\n@@ -1562,9 +1565,9 @@ pty_desc *\n __gnat_new_tty (void)\n {\n   int status;\n-  pty_desc* desc;\n-  status = allocate_pty_desc (&desc);\n-  child_setup_tty (desc->master_fd);\n+  pty_desc* desc = NULL;\n+  if ((status = allocate_pty_desc (&desc)))\n+    child_setup_tty (desc->master_fd);\n   return desc;\n }\n "}]}