{"sha": "ea5ca698dca15dc86b823661ac357a30b49dd0f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWE1Y2E2OThkY2ExNWRjODZiODIzNjYxYWMzNTdhMzBiNDlkZDBmNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-02-07T11:37:46Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2020-02-07T11:37:58Z"}, "message": "x86-64: Pass aggregates with only float/double in GPRs for MS_ABI\n\nMS_ABI requires passing aggregates with only float/double in integer\nregisters as shown in the output from MSVC v19.10 at:\n\nhttps://godbolt.org/z/2NPygd\n\nThis patch fixed:\n\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=54 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=54 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=55 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=55 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=56 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O0 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\nFAIL: libffi.bhaible/test-callback.c -W -Wall -Wno-psabi -DDGTEST=56 -Wno-unused-variable -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-uninitialized -O2 -DABI_NUM=FFI_GNUW64 -DABI_ATTR=MSABI execution test\n\nin libffi testsuite.\n\ngcc/\n\n\tPR target/85667\n\t* config/i386/i386.c (function_arg_ms_64): Add a type argument.\n\tDon't return aggregates with only SFmode and DFmode in SSE\n\tregister.\n\t(ix86_function_arg): Pass arg.type to function_arg_ms_64.\n\ngcc/testsuite/\n\n\tPR target/85667\n\t* gcc.target/i386/pr85667-10.c: New test.\n\t* gcc.target/i386/pr85667-7.c: Likewise.\n\t* gcc.target/i386/pr85667-8.c: Likewise.\n\t* gcc.target/i386/pr85667-9.c: Likewise.", "tree": {"sha": "9256b62d37d28fa39734359195992333b67026cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9256b62d37d28fa39734359195992333b67026cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ea5ca698dca15dc86b823661ac357a30b49dd0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5ca698dca15dc86b823661ac357a30b49dd0f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea5ca698dca15dc86b823661ac357a30b49dd0f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea5ca698dca15dc86b823661ac357a30b49dd0f6/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c006911de91ca9e23d7d2df069499c768d215eac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c006911de91ca9e23d7d2df069499c768d215eac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c006911de91ca9e23d7d2df069499c768d215eac"}], "stats": {"total": 140, "additions": 137, "deletions": 3}, "files": [{"sha": "21ecb2c4fe4a5fe39d75b0d0a07d2dfeb1a178e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -1,3 +1,11 @@\n+2020-02-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85667\n+\t* config/i386/i386.c (function_arg_ms_64): Add a type argument.\n+\tDon't return aggregates with only SFmode and DFmode in SSE\n+\tregister.\n+\t(ix86_function_arg): Pass arg.type to function_arg_ms_64.\n+\n 2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93122"}, {"sha": "498cbb5a588d0b7ee21857c3622496212582fe84", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -3153,7 +3153,7 @@ function_arg_64 (const CUMULATIVE_ARGS *cum, machine_mode mode,\n \n static rtx\n function_arg_ms_64 (const CUMULATIVE_ARGS *cum, machine_mode mode,\n-\t\t    machine_mode orig_mode, bool named,\n+\t\t    machine_mode orig_mode, bool named, const_tree type,\n \t\t    HOST_WIDE_INT bytes)\n {\n   unsigned int regno;\n@@ -3173,7 +3173,10 @@ function_arg_ms_64 (const CUMULATIVE_ARGS *cum, machine_mode mode,\n   if (TARGET_SSE && (mode == SFmode || mode == DFmode))\n     {\n       if (named)\n-\tregno = cum->regno + FIRST_SSE_REG;\n+\t{\n+\t  if (type == NULL_TREE || !AGGREGATE_TYPE_P (type))\n+\t    regno = cum->regno + FIRST_SSE_REG;\n+\t}\n       else\n \t{\n \t  rtx t1, t2;\n@@ -3253,7 +3256,8 @@ ix86_function_arg (cumulative_args_t cum_v, const function_arg_info &arg)\n       enum calling_abi call_abi = cum ? cum->call_abi : ix86_abi;\n \n       if (call_abi == MS_ABI)\n-\treg = function_arg_ms_64 (cum, mode, arg.mode, arg.named, bytes);\n+\treg = function_arg_ms_64 (cum, mode, arg.mode, arg.named,\n+\t\t\t\t  arg.type, bytes);\n       else\n \treg = function_arg_64 (cum, mode, arg.mode, arg.type, arg.named);\n     }"}, {"sha": "bd6610fca2931cbb3dd530601963fd2207c38664", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -1,3 +1,11 @@\n+2020-02-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/85667\n+\t* gcc.target/i386/pr85667-10.c: New test.\n+\t* gcc.target/i386/pr85667-7.c: Likewise.\n+\t* gcc.target/i386/pr85667-8.c: Likewise.\n+\t* gcc.target/i386/pr85667-9.c: Likewise.\n+\n 2020-02-07  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93122"}, {"sha": "e8f3026227d0c0910e272f66e1e2d597002472b3", "filename": "gcc/testsuite/gcc.target/i386/pr85667-10.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-10.c?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\t\\]*%rcx, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\t\\]*%rdx, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\t\\]*%r8, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[ \\t\\]*%r9, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"addsd\\[ \\t]*40\\\\\\(%rsp\\\\\\), .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movq\\[^\\n\\r\\]*, %rax\" 1 } } */\n+\n+typedef struct\n+{\n+  double x;\n+} Double;\n+\n+Double  __attribute__((ms_abi))\n+fn1 (Double x1, Double x2, Double x3, Double x4, Double x5)\n+{\n+  Double v;\n+  v.x = x1.x + x2.x + x3.x + x4.x + x5.x;\n+  return v;\n+}"}, {"sha": "6bd860975a78928f8e4c8c03799ea02eb1e39783", "filename": "gcc/testsuite/gcc.target/i386/pr85667-7.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-7.c?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+typedef struct\n+{\n+  float x;\n+} Float;\n+\n+Float  __attribute__((ms_abi, noinline, noclone))\n+fn1 (Float x1, Float x2, Float x3, Float x4, Float x5)\n+{\n+  Float v;\n+  v.x = x1.x + x2.x + x3.x + x4.x + x5.x;\n+  return v;\n+}\n+int main ()\n+{\n+  Float a, a1, a2, a3, a4, a5;\n+  float x1 = 1.1;\n+  float x2 = 3.1;\n+  float x3 = 4.2;\n+  float x4 = 14.2;\n+  float x5 = -7.2;\n+  float x = x1 + x2 + x3 + x4 + x5;\n+  a1.x = x1;\n+  a2.x = x2;\n+  a3.x = x3;\n+  a4.x = x4;\n+  a5.x = x5;\n+  a = fn1 (a1, a2, a3, a4, a5);\n+  if (a.x == x);\n+    return 0; \n+  abort ();   \n+}"}, {"sha": "09a7593fdb31fe6c033a10a5a7580a6197081c3f", "filename": "gcc/testsuite/gcc.target/i386/pr85667-8.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-8.c?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile { target lp64 } } */\n+/* { dg-options \"-O2 -masm=att\" } */\n+/* { dg-final { scan-assembler-times \"movd\\[ \\t\\]*%ecx, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\\[ \\t\\]*%edx, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\\[ \\t\\]*%r8d, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\\[ \\t\\]*%r9d, .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"addss\\[ \\t]*40\\\\\\(%rsp\\\\\\), .*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movd\\[^\\n\\r\\]*, %eax\" 1 } } */\n+\n+typedef struct\n+{\n+  float x;\n+} Float;\n+\n+Float  __attribute__((ms_abi))\n+fn1 (Float x1, Float x2, Float x3, Float x4, Float x5)\n+{\n+  Float v;\n+  v.x = x1.x + x2.x + x3.x + x4.x + x5.x;\n+  return v;\n+}"}, {"sha": "8c9279a18bff590273512b26d0a6234eea784dc6", "filename": "gcc/testsuite/gcc.target/i386/pr85667-9.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ea5ca698dca15dc86b823661ac357a30b49dd0f6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr85667-9.c?ref=ea5ca698dca15dc86b823661ac357a30b49dd0f6", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+typedef struct\n+{\n+  double x;\n+} Double;\n+\n+Double  __attribute__((ms_abi, noinline, noclone))\n+fn1 (Double x1, Double x2, Double x3, Double x4, Double x5)\n+{\n+  Double v;\n+  v.x = x1.x + x2.x + x3.x + x4.x + x5.x;\n+  return v;\n+}\n+int main ()\n+{\n+  Double a, a1, a2, a3, a4, a5;\n+  double x1 = 1.1;\n+  double x2 = 3.1;\n+  double x3 = 4.2;\n+  double x4 = 14.2;\n+  double x5 = -7.2;\n+  double x = x1 + x2 + x3 + x4 + x5;\n+  a1.x = x1;\n+  a2.x = x2;\n+  a3.x = x3;\n+  a4.x = x4;\n+  a5.x = x5;\n+  a = fn1 (a1, a2, a3, a4, a5);\n+  if (a.x == x);\n+    return 0; \n+  abort ();   \n+}"}]}