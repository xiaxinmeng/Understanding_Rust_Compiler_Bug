{"sha": "39d23b7960e4efb11bbe1eff056ae9da0884c539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlkMjNiNzk2MGU0ZWZiMTFiYmUxZWZmMDU2YWU5ZGEwODg0YzUzOQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-15T08:45:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-04-15T08:45:09Z"}, "message": "aarch64: Fix several *<LOGICAL:optab>_ashl<mode>3 related regressions [PR100056]\n\nBefore combiner added 2 to 2 combinations, the following testcase functions\nhave been all compiled into 2 instructions, zero/sign extensions or and\nfollowed by orr with lsl, e.g. for the first function\nTrying 7 -> 8:\n    7: r96:SI=r94:SI<<0xb\n    8: r95:SI=r96:SI|r94:SI\n      REG_DEAD r96:SI\n      REG_DEAD r94:SI\nSuccessfully matched this instruction:\n(set (reg:SI 95)\n    (ior:SI (ashift:SI (reg/v:SI 94 [ i ])\n            (const_int 11 [0xb]))\n        (reg/v:SI 94 [ i ])))\nis the important successful try_combine and so we end up with\n        and     w0, w0, 255\n        orr     w0, w0, w0, lsl 11\nin the body.\nWith 2 to 2 combination, before that can trigger, another successful\ncombination:\nTrying 2 -> 7:\n    2: r94:SI=zero_extend(x0:QI)\n      REG_DEAD x0:QI\n    7: r96:SI=r94:SI<<0xb\nis replaced with:\n(set (reg/v:SI 94 [ i ])\n    (zero_extend:SI (reg:QI 0 x0 [ i ])))\nand\n(set (reg:SI 96)\n    (and:SI (ashift:SI (reg:SI 0 x0 [ i ])\n            (const_int 11 [0xb]))\n        (const_int 522240 [0x7f800])))\nand in the end results in 3 instructions in the body:\n        and     w1, w0, 255\n        ubfiz   w0, w0, 11, 8\n        orr     w0, w0, w1\nThe following combine splitters help undo that when combiner tries to\ncombine 3 instructions - the zero/sign extend or and, the other insn\nfrom the 2 to 2 combination ([us]bfiz) and the logical op, the CPUs\ndon't have an insn to do everything in one op, but we can split it\nback into the zero/sign extend or and followed by logical with lsl.\n\n2021-04-15  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/100056\n\t* config/aarch64/aarch64.md (*<LOGICAL:optab>_<SHIFT:optab><mode>3):\n\tAdd combine splitters for *<LOGICAL:optab>_ashl<mode>3 with\n\tZERO_EXTEND, SIGN_EXTEND or AND.\n\n\t* gcc.target/aarch64/pr100056.c: New test.", "tree": {"sha": "c785256e96b142870dab2c4ec007bf1fd24b1ff6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c785256e96b142870dab2c4ec007bf1fd24b1ff6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39d23b7960e4efb11bbe1eff056ae9da0884c539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d23b7960e4efb11bbe1eff056ae9da0884c539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39d23b7960e4efb11bbe1eff056ae9da0884c539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39d23b7960e4efb11bbe1eff056ae9da0884c539/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a0e09f3dd5339bb18cc47317f2298d9157ced29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0e09f3dd5339bb18cc47317f2298d9157ced29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0e09f3dd5339bb18cc47317f2298d9157ced29"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "962640b1f930f22a6c65678d1d479c1f4bf93bee", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d23b7960e4efb11bbe1eff056ae9da0884c539/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d23b7960e4efb11bbe1eff056ae9da0884c539/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=39d23b7960e4efb11bbe1eff056ae9da0884c539", "patch": "@@ -4431,6 +4431,59 @@\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n+(define_split\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(LOGICAL:GPI\n+\t  (and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\")\n+\t\t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n+\t\t   (match_operand:GPI 3 \"const_int_operand\"))\n+\t  (zero_extend:GPI (match_operand 4 \"register_operand\"))))]\n+  \"can_create_pseudo_p ()\n+   && ((paradoxical_subreg_p (operands[1])\n+\t&& rtx_equal_p (SUBREG_REG (operands[1]), operands[4]))\n+       || (REG_P (operands[1])\n+\t   && REG_P (operands[4])\n+\t   && REGNO (operands[1]) == REGNO (operands[4])))\n+   && (trunc_int_for_mode (GET_MODE_MASK (GET_MODE (operands[4]))\n+\t\t\t   << INTVAL (operands[2]), <MODE>mode)\n+       == INTVAL (operands[3]))\"\n+  [(set (match_dup 5) (zero_extend:GPI (match_dup 4)))\n+   (set (match_dup 0) (LOGICAL:GPI (ashift:GPI (match_dup 5) (match_dup 2))\n+\t\t\t\t   (match_dup 5)))]\n+  \"operands[5] = gen_reg_rtx (<MODE>mode);\"\n+)\n+\n+(define_split\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(LOGICAL:GPI\n+\t  (and:GPI (ashift:GPI (match_operand:GPI 1 \"register_operand\")\n+\t\t\t       (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n+\t\t   (match_operand:GPI 4 \"const_int_operand\"))\n+\t  (and:GPI (match_dup 1) (match_operand:GPI 3 \"const_int_operand\"))))]\n+  \"can_create_pseudo_p ()\n+   && pow2_or_zerop (UINTVAL (operands[3]) + 1)\n+   && (trunc_int_for_mode (UINTVAL (operands[3])\n+\t\t\t   << INTVAL (operands[2]), <MODE>mode)\n+       == INTVAL (operands[4]))\"\n+  [(set (match_dup 5) (and:GPI (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (LOGICAL:GPI (ashift:GPI (match_dup 5) (match_dup 2))\n+\t\t\t\t   (match_dup 5)))]\n+  \"operands[5] = gen_reg_rtx (<MODE>mode);\"\n+)\n+\n+(define_split\n+  [(set (match_operand:GPI 0 \"register_operand\")\n+\t(LOGICAL:GPI\n+\t  (ashift:GPI (sign_extend:GPI (match_operand 1 \"register_operand\"))\n+\t\t      (match_operand:QI 2 \"aarch64_shift_imm_<mode>\"))\n+\t  (sign_extend:GPI (match_dup 1))))]\n+  \"can_create_pseudo_p ()\"\n+  [(set (match_dup 3) (sign_extend:GPI (match_dup 1)))\n+   (set (match_dup 0) (LOGICAL:GPI (ashift:GPI (match_dup 3) (match_dup 2))\n+\t\t\t\t   (match_dup 3)))]\n+  \"operands[3] = gen_reg_rtx (<MODE>mode);\"\n+)\n+\n (define_insn \"*<optab>_rol<mode>3\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(LOGICAL:GPI (rotate:GPI"}, {"sha": "0b77824da45734c56444f9dd454983690eedb5fd", "filename": "gcc/testsuite/gcc.target/aarch64/pr100056.c", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39d23b7960e4efb11bbe1eff056ae9da0884c539/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39d23b7960e4efb11bbe1eff056ae9da0884c539/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpr100056.c?ref=39d23b7960e4efb11bbe1eff056ae9da0884c539", "patch": "@@ -0,0 +1,58 @@\n+/* PR target/100056 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-not {\\t[us]bfiz\\tw[0-9]+, w[0-9]+, 11} } } */\n+\n+int\n+or_shift_u8 (unsigned char i)\n+{\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_u3a (unsigned i)\n+{\n+  i &= 7;\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_u3b (unsigned i)\n+{\n+  i = (i << 29) >> 29;\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_s16 (signed short i)\n+{\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_s8 (signed char i)\n+{\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_s13 (int i)\n+{\n+  i = (i << 19) >> 19;\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_s3 (int i)\n+{\n+  i = (i << 29) >> 29;\n+  return i | (i << 11);\n+}\n+\n+int\n+or_shift_u8_asm (unsigned char x)\n+{\n+  unsigned char i = x;\n+  asm volatile (\"\" : \"+r\" (i));\n+  return i | (i << 11);\n+}"}]}