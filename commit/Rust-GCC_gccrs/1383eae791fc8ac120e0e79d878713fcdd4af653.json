{"sha": "1383eae791fc8ac120e0e79d878713fcdd4af653", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4M2VhZTc5MWZjOGFjMTIwZTBlNzlkODc4NzEzZmNkZDRhZjY1Mw==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T01:43:50Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-09-21T01:43:50Z"}, "message": "re PR tree-optimization/59478 (Optimize variable access via byte copy)\n\ngcc/testsuite/\n\tPR target/59478\n\t* gcc.target/sh/pr59478.c: New.\n\nFrom-SVN: r227958", "tree": {"sha": "83fe794c22d0b23417ef95001c0d6de8c17c0e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83fe794c22d0b23417ef95001c0d6de8c17c0e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1383eae791fc8ac120e0e79d878713fcdd4af653", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1383eae791fc8ac120e0e79d878713fcdd4af653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1383eae791fc8ac120e0e79d878713fcdd4af653", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1383eae791fc8ac120e0e79d878713fcdd4af653/comments", "author": null, "committer": null, "parents": [{"sha": "0a775f1a4b4f95182b801969178c2dea7aeac3bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a775f1a4b4f95182b801969178c2dea7aeac3bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a775f1a4b4f95182b801969178c2dea7aeac3bf"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "5abe438528e1c3f5d5adce3efcdfa671bbe91590", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1383eae791fc8ac120e0e79d878713fcdd4af653/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1383eae791fc8ac120e0e79d878713fcdd4af653/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1383eae791fc8ac120e0e79d878713fcdd4af653", "patch": "@@ -1,3 +1,8 @@\n+2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/59478\n+\t* gcc.target/sh/pr59478.c: New.\n+\n 2015-09-21  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/67126"}, {"sha": "f2de9e8dc95468a3c72d293231c4466defc36298", "filename": "gcc/testsuite/gcc.target/sh/pr59478.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1383eae791fc8ac120e0e79d878713fcdd4af653/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr59478.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1383eae791fc8ac120e0e79d878713fcdd4af653/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr59478.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr59478.c?ref=1383eae791fc8ac120e0e79d878713fcdd4af653", "patch": "@@ -0,0 +1,49 @@\n+/* Verify that the fmac insn is used for the standard fmaf function.  */\n+/* { dg-do compile { target { any_fpu } } }  */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler-times \"fpul\" 8 } } */\n+/* { dg-final { scan-assembler-times \"\\tflds\\tfr\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tsts\\tfpul\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tlds\\tr\" 2 } } */\n+/* { dg-final { scan-assembler-times \"\\tfsts\\tfpul\" 2 } } */\n+/* { dg-final { scan-assembler-not \"mov\" } } */\n+\n+int\n+test_00 (float val)\n+{\n+  char valbytes[sizeof (float)];\n+  __builtin_memcpy (valbytes, &val, sizeof (float));\n+\n+  int result;\n+  __builtin_memcpy (&result, valbytes, sizeof (int));\n+\n+  return result;\n+}\n+\n+float\n+test_01 (int val)\n+{\n+  char valbytes[sizeof (int)];\n+  __builtin_memcpy (valbytes, &val, sizeof (int));\n+\n+  float result;\n+  __builtin_memcpy (&result, valbytes, sizeof (float));\n+\n+  return result;\n+}\n+\n+int\n+test_02 (float val)\n+{\n+  union { int i; float f; } tmp;\n+  tmp.f = val;\n+  return tmp.i;\n+}\n+\n+float\n+test_03 (int val)\n+{\n+  union { int i; float f; } tmp;\n+  tmp.i = val;\n+  return tmp.f;\n+}"}]}