{"sha": "928605936939d4364b5019b2bdda63612fbc4fdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4NjA1OTM2OTM5ZDQzNjRiNTAxOWIyYmRkYTYzNjEyZmJjNGZkYg==", "commit": {"author": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-01-28T11:59:34Z"}, "committer": {"name": "Claudiu Zissulescu", "email": "claziss@gmail.com", "date": "2020-01-28T12:00:25Z"}, "message": "[ARC] Pass along -mcode-density flag to the assembler.\n\nThis change makes sure that if the driver is invoked with\n\"-mcode-density\" flag, then the assembler will receive it too.\n\nNote Claudiu Zissulescu:\nThis is an old patch of which I forgot to add the test.\n\ntestsuite/\n2019-09-03  Sahahb Vahedi  <shahab@synopsys.com>\n\n        * gcc.target/arc/code-density-flag.c: New test.", "tree": {"sha": "de19771717d9f5dc1cdb8dcc15cd78130ebf8b62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de19771717d9f5dc1cdb8dcc15cd78130ebf8b62"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928605936939d4364b5019b2bdda63612fbc4fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928605936939d4364b5019b2bdda63612fbc4fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928605936939d4364b5019b2bdda63612fbc4fdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928605936939d4364b5019b2bdda63612fbc4fdb/comments", "author": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "claziss", "id": 2761368, "node_id": "MDQ6VXNlcjI3NjEzNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4", "gravatar_id": "", "url": "https://api.github.com/users/claziss", "html_url": "https://github.com/claziss", "followers_url": "https://api.github.com/users/claziss/followers", "following_url": "https://api.github.com/users/claziss/following{/other_user}", "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}", "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/claziss/subscriptions", "organizations_url": "https://api.github.com/users/claziss/orgs", "repos_url": "https://api.github.com/users/claziss/repos", "events_url": "https://api.github.com/users/claziss/events{/privacy}", "received_events_url": "https://api.github.com/users/claziss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "465c7c89e92a6d6d582173e505cb16dcb9873034", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/465c7c89e92a6d6d582173e505cb16dcb9873034", "html_url": "https://github.com/Rust-GCC/gccrs/commit/465c7c89e92a6d6d582173e505cb16dcb9873034"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "c08bc22b5a00bd2960356754e5cbd80bb476d603", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928605936939d4364b5019b2bdda63612fbc4fdb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928605936939d4364b5019b2bdda63612fbc4fdb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=928605936939d4364b5019b2bdda63612fbc4fdb", "patch": "@@ -1,3 +1,7 @@\n+2020-01-28  Sahahb Vahedi  <shahab@synopsys.com>\n+\n+\t* gcc.target/arc/code-density-flag.c: New test\n+\n 2020-01-28  Tobias Burnus  <tobias@codesourcery.com>\n \n \tPR fortran/93464"}, {"sha": "1ecf1a2ca29af3b9107e1d05346c0e797c7ed133", "filename": "gcc/testsuite/gcc.target/arc/code-density-flag.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928605936939d4364b5019b2bdda63612fbc4fdb/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcode-density-flag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928605936939d4364b5019b2bdda63612fbc4fdb/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcode-density-flag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farc%2Fcode-density-flag.c?ref=928605936939d4364b5019b2bdda63612fbc4fdb", "patch": "@@ -0,0 +1,34 @@\n+/* Produce code-dense instructions  and  the assembler must *\n+ * be okay with it. An example would be:                    *\n+ *                                                          *\n+ * sub_s  r3, r1, r3                                        *\n+ *                                                          *\n+ * While generally for  _short instructions_ ,  it  is  not *\n+ * allowed to have different registers  as  the  first  and *\n+ * second operands, the code-dense mode allows it.          *\n+ * This test is about the fact that if  \"-mcode-density\" is *\n+ * passed to gcc driver as the flag,  \"as\"  must receive it *\n+ * as well, else it is going to choke on such encodings.    */\n+\n+/* { dg-do assemble }                                       */\n+/* { dg-skip-if \"\" { ! { clmcpu } } }                       */\n+/* { dg-options \"-mcpu=em_mini -mcode-density\" }            */\n+\n+typedef long long uint64_t;\n+\n+uint64_t f1(void)\n+{\n+  return 1;\n+}\n+\n+void f2(void)\n+{\n+  uint64_t start_us = 0;\n+  while ((f1() - start_us) < 2);\n+}\n+\n+/* This is a tricky check, because  it  hardcodes  register *\n+ * numbers. Nevertheless, it is easier than coming up  with *\n+ * a regular expression that the first two operands  should *\n+ * not be the same.                                         */\n+/* { dg-final { scan-assembler \"sub_s\\\\s+r3,r1,r3\" } }      */"}]}