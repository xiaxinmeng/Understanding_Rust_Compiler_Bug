{"sha": "3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "node_id": "C_kwDOANBUbNoAKDNjNTE1NGQwZjBkMjE4NWI1MTg0NjViMjY0Y2ExN2ZiN2M2MGMxZTg", "commit": {"author": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-10T16:12:37Z"}, "committer": {"name": "Vladimir N. Makarov", "email": "vmakarov@redhat.com", "date": "2023-02-10T16:45:33Z"}, "message": "RA: Use simple LRA for huge functions\n\nThe PR108500 test contains a huge function and RA spends a lot of time\nto compile the test with -O0.  The patch decreases compilation time\nconsiderably for huge functions.  Compilation time for the PR test\ndecreases from 1235s to 709s on Intel i7-13600K.\n\n        PR tree-optimization/108500\n\ngcc/ChangeLog:\n\n\t* params.opt (ira-simple-lra-insn-threshold): Add new param.\n\t* ira.cc (ira): Use the param to switch on simple LRA.", "tree": {"sha": "204368be9cb8000a5e0cd55fceb3625a71bbd384", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/204368be9cb8000a5e0cd55fceb3625a71bbd384"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c5154d0f0d2185b518465b264ca17fb7c60c1e8/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6493b7af37e473a89c67afab474330f931dd8447", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6493b7af37e473a89c67afab474330f931dd8447", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6493b7af37e473a89c67afab474330f931dd8447"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "d0b6ea062e8e0e654f60bc9f8938170b44d937af", "filename": "gcc/ira.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5154d0f0d2185b518465b264ca17fb7c60c1e8/gcc%2Fira.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5154d0f0d2185b518465b264ca17fb7c60c1e8/gcc%2Fira.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.cc?ref=3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "patch": "@@ -5624,12 +5624,16 @@ ira (FILE *f)\n     if (DF_REG_DEF_COUNT (i) || DF_REG_USE_COUNT (i))\n       num_used_regs++;\n \n-  /* If there are too many pseudos and/or basic blocks (e.g. 10K\n-     pseudos and 10K blocks or 100K pseudos and 1K blocks), we will\n-     use simplified and faster algorithms in LRA.  */\n+  /* If there are too many pseudos and/or basic blocks (e.g. 10K pseudos and\n+     10K blocks or 100K pseudos and 1K blocks) or we have too many function\n+     insns, we will use simplified and faster algorithms in LRA.  */\n   lra_simple_p\n-    = ira_use_lra_p\n-      && num_used_regs >= (1U << 26) / last_basic_block_for_fn (cfun);\n+    = (ira_use_lra_p\n+       && (num_used_regs >= (1U << 26) / last_basic_block_for_fn (cfun)\n+           /* max uid is a good evaluation of the number of insns as most\n+              optimizations are done on tree-SSA level.  */\n+           || ((uint64_t) get_max_uid ()\n+\t       > (uint64_t) param_ira_simple_lra_insn_threshold * 1000)));\n \n   if (lra_simple_p)\n     {"}, {"sha": "c7913d9063a66be5e970cc275e181d7091d15b69", "filename": "gcc/params.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c5154d0f0d2185b518465b264ca17fb7c60c1e8/gcc%2Fparams.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c5154d0f0d2185b518465b264ca17fb7c60c1e8/gcc%2Fparams.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.opt?ref=3c5154d0f0d2185b518465b264ca17fb7c60c1e8", "patch": "@@ -302,6 +302,10 @@ The number of registers in each class kept unused by loop invariant motion.\n Common Joined UInteger Var(param_ira_max_conflict_table_size) Init(1000) Param Optimization\n Max size of conflict table in MB.\n \n+-param=ira-simple-lra-insn-threshold=\n+Common Joined UInteger Var(param_ira_simple_lra_insn_threshold) Init(1000) Param Optimization\n+Approximate function insn number in 1K units triggering simple local RA.\n+\n -param=ira-max-loops-num=\n Common Joined UInteger Var(param_ira_max_loops_num) Init(100) Param Optimization\n Max loops number for regional RA."}]}