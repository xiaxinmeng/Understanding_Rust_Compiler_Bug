{"sha": "bf9197df810b0b0ac032c7e480d5a8b24c22f973", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmY5MTk3ZGY4MTBiMGIwYWMwMzJjN2U0ODBkNWE4YjI0YzIyZjk3Mw==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-08-10T14:08:53Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2018-08-10T14:08:53Z"}, "message": "re PR fortran/57160 (short-circuit IF only with -ffrontend-optimize)\n\n2018-08-10  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57160\n\t* invoke.texi (frontend-optimize): Mention short-circuiting.\n\t* options.c (gfc_post_options): Disable -ffrontend-optimize with -Og.\n\t* resolve.c (resolve_operator): Warn about short-circuiting only with\n\t-ffrontend-optimize.\n\t* trans-expr.c (gfc_conv_expr_op): Use short-circuiting operators only\n\twith -ffrontend-optimize. Without that flag, make sure that both\n\toperands are evaluated.\n\n2018-08-10  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/57160\n\t* gfortran.dg/actual_pointer_function_1.f90: Fix invalid test case.\n\t* gfortran.dg/inline_matmul_23.f90: Add option \"-ffrontend-optimize\".\n\t* gfortran.dg/short_circuiting_2.f90: New test case.\n\t* gfortran.dg/short_circuiting_3.f90: New test case.\n\nFrom-SVN: r263471", "tree": {"sha": "11d80fa0ccfd814b4d9c2e52533951c7081beb60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11d80fa0ccfd814b4d9c2e52533951c7081beb60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bf9197df810b0b0ac032c7e480d5a8b24c22f973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9197df810b0b0ac032c7e480d5a8b24c22f973", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf9197df810b0b0ac032c7e480d5a8b24c22f973", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf9197df810b0b0ac032c7e480d5a8b24c22f973/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b9a5b5e0e1c69cd97f56c732cdb8a96c92baabe"}], "stats": {"total": 110, "additions": 97, "deletions": 13}, "files": [{"sha": "26ff7847f86e3e760c9ed9ecff0cc2a2f750f0d2", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -1,3 +1,14 @@\n+2018-08-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57160\n+\t* invoke.texi (frontend-optimize): Mention short-circuiting.\n+\t* options.c (gfc_post_options): Disable -ffrontend-optimize with -Og.\n+\t* resolve.c (resolve_operator): Warn about short-circuiting only with\n+\t-ffrontend-optimize.\n+\t* trans-expr.c (gfc_conv_expr_op): Use short-circuiting operators only\n+\twith -ffrontend-optimize. Without that flag, make sure that both\n+\toperands are evaluated.\n+\n 2018-08-08  Nathan Sidwell  <nathan@acm.org>\n \n \t* cpp.c (cb_file_change): Use linemap_included_from."}, {"sha": "ee84a0be8b114d20dfc553092ba252ec17775f35", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -1793,13 +1793,17 @@ if @option{-ffrontend-optimize} is in effect.\n @opindex @code{frontend-optimize}\n @cindex Front-end optimization\n This option performs front-end optimization, based on manipulating\n-parts the Fortran parse tree.  Enabled by default by any @option{-O}\n-option.  Optimizations enabled by this option include inlining calls\n-to @code{MATMUL}, elimination of identical function calls within\n-expressions, removing unnecessary calls to @code{TRIM} in comparisons\n-and assignments and replacing @code{TRIM(a)} with\n-@code{a(1:LEN_TRIM(a))}.  It can be deselected by specifying\n-@option{-fno-frontend-optimize}.\n+parts the Fortran parse tree.  Enabled by default by any @option{-O} option\n+except @option{-O0} and @option{-Og}.  Optimizations enabled by this option\n+include:\n+@itemize @bullet\n+@item inlining calls to @code{MATMUL},\n+@item elimination of identical function calls within expressions,\n+@item removing unnecessary calls to @code{TRIM} in comparisons and assignments,\n+@item replacing @code{TRIM(a)} with @code{a(1:LEN_TRIM(a))} and\n+@item short-circuiting of logical operators (@code{.AND.} and @code{.OR.}).\n+@end itemize\n+It can be deselected by specifying @option{-fno-frontend-optimize}.\n \n @item -ffrontend-loop-interchange\n @opindex @code{frontend-loop-interchange}"}, {"sha": "e8db54d4d3720663a090c9256a9e46bdee1143eb", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -417,7 +417,7 @@ gfc_post_options (const char **pfilename)\n      specified it directly.  */\n \n   if (flag_frontend_optimize == -1)\n-    flag_frontend_optimize = optimize;\n+    flag_frontend_optimize = optimize && !optimize_debug;\n \n   /* Same for front end loop interchange.  */\n "}, {"sha": "16146e6b6e9c38692b5f3dffba23e054c96cc00b", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -3982,7 +3982,8 @@ resolve_operator (gfc_expr *e)\n \t  else if (op2->ts.kind < e->ts.kind)\n \t    gfc_convert_type (op2, &e->ts, 2);\n \n-\t  if (e->value.op.op == INTRINSIC_AND || e->value.op.op == INTRINSIC_OR)\n+\t  if (flag_frontend_optimize &&\n+\t    (e->value.op.op == INTRINSIC_AND || e->value.op.op == INTRINSIC_OR))\n \t    {\n \t      /* Warn about short-circuiting\n \t         with impure function as second operand.  */"}, {"sha": "54e318e21f753cac60858a5aab4b02fa6c9be4a8", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -3348,12 +3348,12 @@ gfc_conv_expr_op (gfc_se * se, gfc_expr * expr)\n       return;\n \n     case INTRINSIC_AND:\n-      code = TRUTH_ANDIF_EXPR;\n+      code = flag_frontend_optimize ? TRUTH_ANDIF_EXPR : TRUTH_AND_EXPR;\n       lop = 1;\n       break;\n \n     case INTRINSIC_OR:\n-      code = TRUTH_ORIF_EXPR;\n+      code = flag_frontend_optimize ? TRUTH_ORIF_EXPR : TRUTH_OR_EXPR;\n       lop = 1;\n       break;\n "}, {"sha": "ffa20359f57a87ed782189e90e961bd57193ba30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -1,3 +1,11 @@\n+2018-08-10  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/57160\n+\t* gfortran.dg/actual_pointer_function_1.f90: Fix invalid test case.\n+\t* gfortran.dg/inline_matmul_23.f90: Add option \"-ffrontend-optimize\".\n+\t* gfortran.dg/short_circuiting_2.f90: New test case.\n+\t* gfortran.dg/short_circuiting_3.f90: New test case.\n+\n 2018-08-10  Alexander Monakov  <amonakov@ispras.ru>\n \n \tPR target/82418"}, {"sha": "ecb5cbb206c81d9f50daaf7f0be42a8f80de2044", "filename": "gcc/testsuite/gfortran.dg/actual_pointer_function_1.f90", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Factual_pointer_function_1.f90?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -17,7 +17,11 @@\n \r\n   logical function cp_logger_log(logger)\r\n     TYPE(cp_logger_type), POINTER ::logger\r\n-    cp_logger_log = associated (logger) .and. (logger%a .eq. 42)\r\n+    if (associated (logger)) then\r\n+      cp_logger_log = (logger%a .eq. 42)\r\n+    else\r\n+      cp_logger_log = .false.\r\n+    end if\r\n   END function\r\n \r\n   FUNCTION cp_get_default_logger(v) RESULT(res)\r"}, {"sha": "bb7e8687a1d29e834db6d84ae12fee5a6d859ea0", "filename": "gcc/testsuite/gfortran.dg/inline_matmul_23.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finline_matmul_23.f90?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -1,5 +1,5 @@\n ! { dg-do compile }\n-! { dg-options \"-Og -fcheck=bounds -fdump-tree-optimized\" }\n+! { dg-options \"-Og -ffrontend-optimize -fcheck=bounds -fdump-tree-optimized\" }\n ! Check that bounds checking is done only before the matrix\n ! multiplication.\n "}, {"sha": "765c8e736c55740ecb1e23ebb6c59303cb581d2a", "filename": "gcc/testsuite/gfortran.dg/short_circuiting_2.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_2.f90?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-O0\" }\n+!\n+! PR 57160: short-circuit IF only with -ffrontend-optimize\n+!\n+! this checks that short-circuiting is not done with -O0\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+program short_circuit\n+\n+   integer, save :: i = 0\n+   logical :: flag\n+\n+   flag = .false.\n+   flag = check() .and. flag\n+   flag = flag .and. check()\n+\n+   if (i /= 2) stop 1\n+\n+contains\n+\n+   logical function check()\n+      i = i + 1\n+      check = .true.\n+   end function\n+\n+end"}, {"sha": "069f3f80b947bd9ae59a9d74df286f9af9d08b2a", "filename": "gcc/testsuite/gfortran.dg/short_circuiting_3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bf9197df810b0b0ac032c7e480d5a8b24c22f973/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fshort_circuiting_3.f90?ref=bf9197df810b0b0ac032c7e480d5a8b24c22f973", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do run }\n+! { dg-options \"-O3\" }\n+!\n+! PR 57160: short-circuit IF only with -ffrontend-optimize\n+!\n+! this checks that short-circuiting is done with -O3\n+!\n+! Contributed by Janus Weil <janus@gcc.gnu.org>\n+\n+program short_circuit\n+\n+   integer, save :: i = 0\n+   logical :: flag\n+\n+   flag = .false.\n+   flag = check() .and. flag\n+   flag = flag .and. check()\n+\n+   if (i /= 1) stop 1\n+\n+contains\n+\n+   logical function check()\n+      i = i + 1\n+      check = .true.\n+   end function\n+\n+end"}]}