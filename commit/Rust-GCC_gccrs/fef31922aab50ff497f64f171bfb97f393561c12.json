{"sha": "fef31922aab50ff497f64f171bfb97f393561c12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVmMzE5MjJhYWI1MGZmNDk3ZjY0ZjE3MWJmYjk3ZjM5MzU2MWMxMg==", "commit": {"author": {"name": "Petr Murzin", "email": "petr.murzin@intel.com", "date": "2016-05-18T09:06:11Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2016-05-18T09:06:11Z"}, "message": "Fix patterns to enable sse-14.c to compile with -masm=intel.\n\ngcc/\n        * config/i386/sse.md (define_insn \"srcp14<mode>\"): Use proper operand\n\tmodifiers.\n\t(define_insn \"rsqrt14<mode>\"): Ditto.\n\t(define_insn \"<mask_codefor>avx512dq_cvtps2qqv2di<mask_name>\"): Ditto.\n\t(define_insn \"<fixsuffix>fix_truncv2sfv2di2<mask_name>\"): Ditto.\n\t(define_insn \"avx512f_<code>v8div16qi2_mask_store\"): Ditto.\n\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n\t(define_insn \"<mask_codefor>avx512dq_broadcast<mode><mask_name>\"):\n\tDitto.\n\t(define_insn \"*avx512f_gatherdi<mode>\"): Ditto.\n\t(define_insn \"*avx512f_scatterdi<mode>\"): Ditto.\n\t* config/i386/i386.c (ix86_print_operand): Expand check for size\n\toverride codes for Intel syntax.\n\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\n\nFrom-SVN: r236362", "tree": {"sha": "16f866d54a8726fb919874030d53e99ade504445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16f866d54a8726fb919874030d53e99ade504445"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fef31922aab50ff497f64f171bfb97f393561c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef31922aab50ff497f64f171bfb97f393561c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fef31922aab50ff497f64f171bfb97f393561c12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fef31922aab50ff497f64f171bfb97f393561c12/comments", "author": null, "committer": null, "parents": [{"sha": "c9326aef96dd6628bf9b170a95e9a0ecadcb9263", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9326aef96dd6628bf9b170a95e9a0ecadcb9263", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9326aef96dd6628bf9b170a95e9a0ecadcb9263"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "8aaaa816ebba8113069c83763848508598346994", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fef31922aab50ff497f64f171bfb97f393561c12", "patch": "@@ -1,3 +1,20 @@\n+2016-05-18  Petr Murzin  <petr.murzin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\n+        * config/i386/sse.md (define_insn \"srcp14<mode>\"): Use proper operand\n+\tmodifiers.\n+\t(define_insn \"rsqrt14<mode>\"): Ditto.\n+\t(define_insn \"<mask_codefor>avx512dq_cvtps2qqv2di<mask_name>\"): Ditto.\n+\t(define_insn \"<fixsuffix>fix_truncv2sfv2di2<mask_name>\"): Ditto.\n+\t(define_insn \"avx512f_<code>v8div16qi2_mask_store\"): Ditto.\n+\t(define_insn \"vec_set_hi_<mode><mask_name>\"): Ditto.\n+\t(define_insn \"<mask_codefor>avx512dq_broadcast<mode><mask_name>\"):\n+\tDitto.\n+\t(define_insn \"*avx512f_gatherdi<mode>\"): Ditto.\n+\t(define_insn \"*avx512f_scatterdi<mode>\"): Ditto.\n+\t* config/i386/i386.c (ix86_print_operand): Expand check for size\n+\toverride codes for Intel syntax.\n+\n 2016-05-18  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/71168"}, {"sha": "cecea110e41b3b772374ef5cdf91c8426761d4a9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fef31922aab50ff497f64f171bfb97f393561c12", "patch": "@@ -17622,6 +17622,10 @@ ix86_print_operand (FILE *file, rtx x, int code)\n \t    size = \"QWORD\";\n \t  else if (code == 'x')\n \t    size = \"XMMWORD\";\n+\t  else if (code == 't')\n+\t    size = \"YMMWORD\";\n+\t  else if (code == 'g')\n+\t    size = \"ZMMWORD\";\n \t  else if (mode == BLKmode)\n \t    /* ... or BLKmode operands, when not overridden.  */\n \t    size = NULL;"}, {"sha": "e0af4916bc82b9a0e817e7a79cbd1c4aa95d22a2", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 36, "deletions": 16, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fef31922aab50ff497f64f171bfb97f393561c12/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fef31922aab50ff497f64f171bfb97f393561c12", "patch": "@@ -1485,7 +1485,7 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrcp14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n+  \"vrcp14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %<iptr>1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -1583,7 +1583,7 @@\n \t  (match_operand:VF_128 2 \"register_operand\" \"v\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n-  \"vrsqrt14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %1}\"\n+  \"vrsqrt14<ssescalarmodesuffix>\\t{%1, %2, %0|%0, %2, %<iptr>1}\"\n   [(set_attr \"type\" \"sse\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<MODE>\")])\n@@ -4276,7 +4276,7 @@\n \t     (parallel [(const_int 0) (const_int 1)]))]\n \t  UNSPEC_FIX_NOTRUNC))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n-  \"vcvtps2qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtps2qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -4299,7 +4299,7 @@\n \t     (parallel [(const_int 0) (const_int 1)]))]\n \t  UNSPEC_UNSIGNED_FIX_NOTRUNC))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n-  \"vcvtps2uqq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvtps2uqq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -4974,7 +4974,7 @@\n \t    (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n-  \"vcvttps2<fixsuffix>qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vcvttps2<fixsuffix>qq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"TI\")])\n@@ -8944,7 +8944,7 @@\n                    (const_int 12) (const_int 13)\n                    (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%w0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9034,7 +9034,11 @@\n                    (const_int 12) (const_int 13)\n                    (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+{\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 8)\n+    return \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%k0%{%2%}, %1}\";\n+  return \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %g1}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9125,7 +9129,11 @@\n                    (const_int 12) (const_int 13)\n                    (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+{\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4)\n+    return \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %g1}\";\n+  return \"vpmov<trunsuffix><pmov_suff_3>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9219,7 +9227,11 @@\n         (parallel [(const_int 4) (const_int 5)\n                    (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix><pmov_suff_4>\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+{\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4)\n+    return \"vpmov<trunsuffix><pmov_suff_4>\\t{%1, %0%{%2%}|%0%{%2%}, %t1}\";\n+  return \"vpmov<trunsuffix><pmov_suff_4>\\t{%1, %0%{%2%}|%0%{%2%}, %g1}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9294,7 +9306,7 @@\n                    (const_int 4) (const_int 5)\n                    (const_int 6) (const_int 7)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qw\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qw\\t{%1, %0%{%2%}|%0%{%2%}, %g1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9373,7 +9385,7 @@\n         (match_dup 0)\n         (parallel [(const_int 2) (const_int 3)]))))]\n   \"TARGET_AVX512VL\"\n-  \"vpmov<trunsuffix>qd\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qd\\t{%1, %0%{%2%}|%0%{%2%}, %t1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -9476,7 +9488,7 @@\n                    (const_int 12) (const_int 13)\n                    (const_int 14) (const_int 15)]))))]\n   \"TARGET_AVX512F\"\n-  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%0%{%2%}, %1}\"\n+  \"vpmov<trunsuffix>qb\\t{%1, %0%{%2%}|%q0%{%2%}, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"memory\" \"store\")\n    (set_attr \"prefix\" \"evex\")\n@@ -12229,7 +12241,7 @@\n \t\t       (const_int 2) (const_int 3)]))\n \t  (match_operand:<ssehalfvecmode> 2 \"nonimmediate_operand\" \"vm\")))]\n   \"TARGET_AVX512F\"\n-  \"vinsert<shuffletype>64x4\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, $0x1}\"\n+  \"vinsert<shuffletype>64x4\\t{$0x1, %2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -17130,7 +17142,7 @@\n \t    (match_operand:<ssexmmmode> 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_AVX512DQ\"\n-  \"vbroadcast<shuffletype>32x2\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n+  \"vbroadcast<shuffletype>32x2\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"evex\")\n@@ -18544,7 +18556,11 @@\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:QI 2 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n-  \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %g6}\"\n+{\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 4)\n+    return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %t6}\";\n+  return \"v<sseintprefix>gatherq<ssemodesuffix>\\t{%6, %1%{%2%}|%1%{%2%}, %g6}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n@@ -18644,7 +18660,11 @@\n \t  UNSPEC_SCATTER))\n    (clobber (match_scratch:QI 1 \"=&Yk\"))]\n   \"TARGET_AVX512F\"\n-  \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\"\n+{\n+  if (GET_MODE_SIZE (GET_MODE_INNER (<MODE>mode)) == 8)\n+    return \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%5%{%1%}, %3}\";\n+  return \"v<sseintprefix>scatterq<ssemodesuffix>\\t{%3, %5%{%1%}|%t5%{%1%}, %3}\";\n+}\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])"}]}