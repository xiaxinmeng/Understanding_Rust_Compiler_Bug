{"sha": "eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVlYTMzM2UzYjM3YzFlMWQ5ZmQxM2RjYjJkNjBkNjI2YWZmNWJkNA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-04-06T15:45:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-04-06T15:45:55Z"}, "message": "flow.c (create_basic_block): Make sure the bb note is in the block.\n\n        * flow.c (create_basic_block): Make sure the bb note is in the block.\n        (can_delete_note_p): Rename from delete_note_p.\n        (delete_insn_chain): Preserve undeleteable labels too.\n        (tidy_fallthru_edge): Use next_real_insn instead of confusing\n        inline code.\n\nFrom-SVN: r26220", "tree": {"sha": "863827c839c5bb0ebd7c848b83a3904379b1c89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/863827c839c5bb0ebd7c848b83a3904379b1c89e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4/comments", "author": null, "committer": null, "parents": [{"sha": "4bb0968f4e3eb6af9a9a1ba5758ebea168a4b2e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bb0968f4e3eb6af9a9a1ba5758ebea168a4b2e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bb0968f4e3eb6af9a9a1ba5758ebea168a4b2e2"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "831557c19bc0234b41fe32da02c86ca1b5dbe7e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "patch": "@@ -1,3 +1,11 @@\n+Tue Apr  6 15:45:28 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* flow.c (create_basic_block): Make sure the bb note is in the block.\n+\t(can_delete_note_p): Rename from delete_note_p.\n+\t(delete_insn_chain): Preserve undeleteable labels too.\n+\t(tidy_fallthru_edge): Use next_real_insn instead of confusing\n+\tinline code.\n+\n 1999-04-06 12:56 -0400  Zack Weinberg  <zack@rabi.columbia.edu>\n \n \t* cppexp.c (parse_charconst): Initialize c."}, {"sha": "365f5fae550e1a2e95803f36954919a340da02dc", "filename": "gcc/flow.c", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=eeea333e3b37c1e1d9fd13dcb2d60d626aff5bd4", "patch": "@@ -287,6 +287,7 @@ static void commit_one_edge_insertion\tPROTO((edge));\n \n static void delete_unreachable_blocks\tPROTO((void));\n static void delete_eh_regions\t\tPROTO((void));\n+static int can_delete_note_p\t\tPROTO((rtx));\n static void delete_insn_chain\t\tPROTO((rtx, rtx));\n static int delete_block\t\t\tPROTO((basic_block));\n static void expunge_block\t\tPROTO((basic_block));\n@@ -780,6 +781,10 @@ create_basic_block (index, head, end, bb_note)\n       NOTE_BASIC_BLOCK (bb_note) = bb;\n     }\n \n+  /* Always include the bb note in the block.  */\n+  if (NEXT_INSN (end) == bb_note)\n+    end = bb_note;\n+\n   bb->head = head;\n   bb->end = end;\n   bb->index = index;\n@@ -1600,7 +1605,7 @@ delete_eh_regions ()\n    so that we may simply delete them.  */\n \n static int\n-delete_note_p (note)\n+can_delete_note_p (note)\n      rtx note;\n {\n   return (NOTE_LINE_NUMBER (note) == NOTE_INSN_DELETED\n@@ -1623,7 +1628,11 @@ delete_insn_chain (start, finish)\n   while (1)\n     {\n       next = NEXT_INSN (start);\n-      if (GET_CODE (start) != NOTE || delete_note_p (start))\n+      if (GET_CODE (start) == NOTE && !can_delete_note_p (start))\n+\t;\n+      else if (GET_CODE (start) == CODE_LABEL && !can_delete_label_p (start))\n+\t;\n+      else\n \tnext = flow_delete_insn (start);\n \n       if (start == finish)\n@@ -1950,26 +1959,19 @@ tidy_fallthru_edge (e, b, c)\n      edge e;\n      basic_block b, c;\n {\n-  rtx q, h;\n+  rtx q;\n \n   /* ??? In a late-running flow pass, other folks may have deleted basic\n      blocks by nopping out blocks, leaving multiple BARRIERs between here\n      and the target label. They ought to be chastized and fixed.\n \n-     In the mean time, search for the last barrier in a sequence of\n-     barriers and notes.  */\n+     We can also wind up with a sequence of undeletable labels between\n+     one block and the next.\n \n-  q = NEXT_INSN (b->end);\n-  if (q && GET_CODE (q) == NOTE)\n-    q = next_nonnote_insn (q);\n-  while (q && GET_CODE (q) == BARRIER)\n-    q = next_nonnote_insn (q);\n+     So search through a sequence of barriers, labels, and notes for\n+     the head of block C and assert that we really do fall through.  */\n \n-  /* Assert that we now actually do fall through.  */\n-  h = c->head;\n-  if (GET_CODE (h) == NOTE)\n-    h = next_nonnote_insn (h);\n-  if (q != h)\n+  if (next_real_insn (b->end) != next_real_insn (PREV_INSN (c->head)))\n     return;\n \n   /* Remove what will soon cease being the jump insn from the source block."}]}