{"sha": "ab8907ef75b71c987932a299bddf04cb73907c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI4OTA3ZWY3NWI3MWM5ODc5MzJhMjk5YmRkZjA0Y2I3MzkwN2M2OQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-07-23T22:37:23Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-07-23T22:37:23Z"}, "message": "expr.c (expand_expr_real_1): Don't handle non-local variables.\n\n        * expr.c (expand_expr_real_1): Don't handle non-local variables.\n        * expr.h (fix_lexical_addr): Remove.\n        * function.c (NEED_SEPARATE_AP): Remove.\n        (fix_lexical_addr): Remove.\n        * tree-alias-common.c (get_alias_var_decl): Check TREE_STATIC,\n        not null decl_function_context.\n        (create_alias_vars): Likewise.\n        * tree-cfg.c (make_ctrl_stmt_edges): Don't check for non-local labels.\n        (simple_goto_p): Likewise.\n        * tree-dfa.c (add_referenced_var): Don't check for non-local variables.\n        * tree-ssa-ccp.c (get_default_value): Likewise.\n        * tree-tailcall.c (suitable_for_tail_opt_p): Likewise.\n        * tree.c (needs_to_live_in_memory): Likewise.\n        * tree-flow-inline.h (may_be_aliased): Move...\n        * tree-ssa-alias.c (may_be_aliased): ... here.  Enhance check for\n        when TREE_STATIC variables may be addressable.\n\nFrom-SVN: r85099", "tree": {"sha": "6fa3fcbf916c4e6bd0c3081ee4de2cf5ae950925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fa3fcbf916c4e6bd0c3081ee4de2cf5ae950925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab8907ef75b71c987932a299bddf04cb73907c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8907ef75b71c987932a299bddf04cb73907c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab8907ef75b71c987932a299bddf04cb73907c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab8907ef75b71c987932a299bddf04cb73907c69/comments", "author": null, "committer": null, "parents": [{"sha": "5aa33bdb4f75939b9467a4580aa13bb6997f192c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5aa33bdb4f75939b9467a4580aa13bb6997f192c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5aa33bdb4f75939b9467a4580aa13bb6997f192c"}], "stats": {"total": 177, "additions": 66, "deletions": 111}, "files": [{"sha": "f14f45b5587500fe85a0ac14f1a25c65183d615d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -1,3 +1,22 @@\n+2004-07-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* expr.c (expand_expr_real_1): Don't handle non-local variables.\n+\t* expr.h (fix_lexical_addr): Remove.\n+\t* function.c (NEED_SEPARATE_AP): Remove.\n+\t(fix_lexical_addr): Remove.\n+\t* tree-alias-common.c (get_alias_var_decl): Check TREE_STATIC,\n+\tnot null decl_function_context.\n+\t(create_alias_vars): Likewise.\n+\t* tree-cfg.c (make_ctrl_stmt_edges): Don't check for non-local labels.\n+\t(simple_goto_p): Likewise.\n+\t* tree-dfa.c (add_referenced_var): Don't check for non-local variables.\n+\t* tree-ssa-ccp.c (get_default_value): Likewise.\n+\t* tree-tailcall.c (suitable_for_tail_opt_p): Likewise.\n+\t* tree.c (needs_to_live_in_memory): Likewise.\n+\t* tree-flow-inline.h (may_be_aliased): Move...\n+\t* tree-ssa-alias.c (may_be_aliased): ... here.  Enhance check for\n+\twhen TREE_STATIC variables may be addressable.\n+\n 2004-07-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.in (site.exp): Add HOSTCC and HOSTCFLAGS to site.exp."}, {"sha": "b3ef3ef427417e3130432f2dcc2906d6ab9fba7d", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 26, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -6368,33 +6368,15 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* Show we haven't gotten RTL for this yet.  */\n       temp = 0;\n \n-      /* Handle variables inherited from containing functions.  */\n+      /* Variables inherited from containing functions should have\n+\t been lowered by this point.  */\n       context = decl_function_context (exp);\n-\n-      if (context != 0 && context != current_function_decl\n-\t  /* If var is static, we don't need a static chain to access it.  */\n-\t  && ! (MEM_P (DECL_RTL (exp))\n-\t\t&& CONSTANT_P (XEXP (DECL_RTL (exp), 0))))\n-\t{\n-\t  rtx addr;\n-\n-\t  /* Mark as non-local and addressable.  */\n-\t  DECL_NONLOCAL (exp) = 1;\n-\t  if (DECL_NO_STATIC_CHAIN (current_function_decl))\n-\t    abort ();\n-\t  lang_hooks.mark_addressable (exp);\n-\t  if (!MEM_P (DECL_RTL (exp)))\n-\t    abort ();\n-\t  addr = XEXP (DECL_RTL (exp), 0);\n-\t  if (MEM_P (addr))\n-\t    addr\n-\t      = replace_equiv_address (addr,\n-\t\t\t\t       fix_lexical_addr (XEXP (addr, 0), exp));\n-\t  else\n-\t    addr = fix_lexical_addr (addr, exp);\n-\n-\t  temp = replace_equiv_address (DECL_RTL (exp), addr);\n-\t}\n+      if (context != 0\n+\t  && context != current_function_decl\n+\t  && !TREE_STATIC (exp)\n+\t  /* ??? C++ creates functions that are not TREE_STATIC.  */\n+\t  && TREE_CODE (exp) != FUNCTION_DECL)\n+\tabort ();\n \n       /* This is the case of an array whose size is to be determined\n \t from its initializer, while the initializer is still being parsed."}, {"sha": "0126c5869a90f8118b6865dd9f75e12d14cbf7bd", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -556,10 +556,6 @@ extern rtx expr_size (tree);\n    if the size can vary or is larger than an integer.  */\n extern HOST_WIDE_INT int_expr_size (tree);\n \n-/* Convert a stack slot address ADDR valid in function FNDECL\n-   into an address valid in this function (using a static chain).  */\n-extern rtx fix_lexical_addr (rtx, tree);\n-\n /* Return the address of the trampoline for entering nested fn FUNCTION.  */\n extern rtx trampoline_address (tree);\n "}, {"sha": "956fa76c7dc915273072870282a71e0a5e36ace4", "filename": "gcc/function.c", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -87,16 +87,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n    alignment.  */\n #define CEIL_ROUND(VALUE,ALIGN)\t(((VALUE) + (ALIGN) - 1) & ~((ALIGN)- 1))\n \n-/* NEED_SEPARATE_AP means that we cannot derive ap from the value of fp\n-   during rtl generation.  If they are different register numbers, this is\n-   always true.  It may also be true if\n-   FIRST_PARM_OFFSET - STARTING_FRAME_OFFSET is not a constant during rtl\n-   generation.  See fix_lexical_addr for details.  */\n-\n-#if ARG_POINTER_REGNUM != FRAME_POINTER_REGNUM\n-#define NEED_SEPARATE_AP\n-#endif\n-\n /* Nonzero if function being compiled doesn't contain any calls\n    (ignoring the prologue and epilogue).  This is set prior to\n    local register allocation and is valid for the remaining\n@@ -3570,41 +3560,6 @@ setjmp_args_warning (void)\n \t       decl, decl);\n }\n \n-\f\n-/* Convert a stack slot address ADDR for variable VAR\n-   (from a containing function)\n-   into an address valid in this function (using a static chain).  */\n-\n-rtx\n-fix_lexical_addr (rtx addr, tree var)\n-{\n-  rtx basereg;\n-  HOST_WIDE_INT displacement;\n-  tree context = decl_function_context (var);\n-  struct function *fp;\n-  rtx base = 0;\n-\n-  /* If this is the present function, we need not do anything.  */\n-  if (context == current_function_decl)\n-    return addr;\n-\n-  fp = find_function_data (context);\n-\n-  /* Decode given address as base reg plus displacement.  */\n-  if (REG_P (addr))\n-    basereg = addr, displacement = 0;\n-  else if (GET_CODE (addr) == PLUS && GET_CODE (XEXP (addr, 1)) == CONST_INT)\n-    basereg = XEXP (addr, 0), displacement = INTVAL (XEXP (addr, 1));\n-  else\n-    abort ();\n-\n-  if (base == 0)\n-    abort ();\n-\n-  /* Use same offset, relative to appropriate static chain or argument\n-     pointer.  */\n-  return plus_constant (base, displacement);\n-}\n \f\n /* Identify BLOCKs referenced by more than one NOTE_INSN_BLOCK_{BEG,END},\n    and create duplicate blocks.  */"}, {"sha": "d1a8568a44e2953df0afbf4502e32758cb5ef375", "filename": "gcc/tree-alias-common.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-alias-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-alias-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-alias-common.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -154,11 +154,7 @@ get_alias_var_decl (tree decl)\n       newvar = create_alias_var (decl);\n       /* Assign globals to global var for purposes of intraprocedural\n \t analysis.  */\n-      if ((DECL_CONTEXT (decl) == NULL \n-\t   || TREE_PUBLIC (decl)\n-\t   || TREE_STATIC (decl)\n-\t   || decl_function_context (decl) == NULL) \n-\t  && decl != pta_global_var)\n+      if (TREE_STATIC (decl) && decl != pta_global_var)\n \t{\n \t  current_alias_ops->addr_assign (current_alias_ops, \n \t\t\t\t\t  get_alias_var (pta_global_var), \n@@ -1016,7 +1012,7 @@ create_alias_vars (void)\n \t{\n \t  var = TREE_VALUE (vars);\n \t  if (TREE_CODE (var) != LABEL_DECL\n-\t      && decl_function_context (var) == NULL\n+\t      && TREE_STATIC (var)\n \t      && DECL_INITIAL (var))\n \t    find_func_aliases (var);\n \t}"}, {"sha": "c9d2424cf4cbd741f08ac078d31588c1029f94a7", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -459,17 +459,12 @@ static void\n make_ctrl_stmt_edges (basic_block bb)\n {\n   tree last = last_stmt (bb);\n-  tree first = first_stmt (bb);\n \n #if defined ENABLE_CHECKING\n   if (last == NULL_TREE)\n     abort();\n #endif\n \n-  if (TREE_CODE (first) == LABEL_EXPR\n-      && DECL_NONLOCAL (LABEL_EXPR_LABEL (first)))\n-    make_edge (ENTRY_BLOCK_PTR, bb, EDGE_ABNORMAL);\n-\n   switch (TREE_CODE (last))\n     {\n     case GOTO_EXPR:\n@@ -2541,10 +2536,8 @@ computed_goto_p (tree t)\n bool\n simple_goto_p (tree expr)\n {\n-  return  (TREE_CODE (expr) == GOTO_EXPR\n-\t   && TREE_CODE (GOTO_DESTINATION (expr)) == LABEL_DECL\n-\t   && (decl_function_context (GOTO_DESTINATION (expr))\n-\t       == current_function_decl));\n+  return (TREE_CODE (expr) == GOTO_EXPR\n+\t  && TREE_CODE (GOTO_DESTINATION (expr)) == LABEL_DECL);\n }\n \n "}, {"sha": "c8986e80372fd59c4ec237ab8450c3226e46520e", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -903,11 +903,6 @@ add_referenced_var (tree var, struct walk_state *walk_state)\n       /* Global and static variables are call-clobbered, always.  */\n       if (needs_to_live_in_memory (var))\n \tmark_call_clobbered (var);\n-\n-      /* DECL_NONLOCAL variables should not be removed, as they are needed\n-\t to emit nested functions.  */\n-      if (DECL_NONLOCAL (var))\n-\tv_ann->used = 1;\n     }\n }\n "}, {"sha": "97d56d8a6e7e66917a444d3be301284ab694d82e", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -635,14 +635,6 @@ loop_containing_stmt (tree stmt)\n   return bb->loop_father;\n }\n \n-/* Return true if VAR may be aliased.  */\n-static inline bool\n-may_be_aliased (tree var)\n-{\n-  return (TREE_ADDRESSABLE (var)\n-          || decl_function_context (var) != current_function_decl);\n-}\n-\n /* Return true if VAR is a clobbered by function calls.  */\n static inline bool\n is_call_clobbered (tree var)"}, {"sha": "600d46256c2ef9d277187894e84732394434b25f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -325,7 +325,6 @@ static inline tree immediate_use (dataflow_t, int);\n static inline dataflow_t get_immediate_uses (tree);\n static inline void set_default_def (tree, tree);\n static inline tree default_def (tree);\n-static inline bool may_be_aliased (tree);\n \n /*---------------------------------------------------------------------------\n                   Structure representing predictions in tree level.\n@@ -554,6 +553,7 @@ extern void dump_points_to_info (FILE *);\n extern void debug_points_to_info (void);\n extern void dump_points_to_info_for (FILE *, tree);\n extern void debug_points_to_info_for (tree);\n+extern bool may_be_aliased (tree);\n \n /* Call-back function for walk_use_def_chains().  At each reaching\n    definition, a function with this prototype is called.  */"}, {"sha": "a854b0bd8973d51cc250f149c8743db2f8904756", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -2473,3 +2473,34 @@ debug_may_aliases_for (tree var)\n {\n   dump_may_aliases_for (stderr, var);\n }\n+\n+/* Return true if VAR may be aliased.  */\n+\n+bool\n+may_be_aliased (tree var)\n+{\n+  /* Obviously.  */\n+  if (TREE_ADDRESSABLE (var))\n+    return true;\n+\n+  /* Automatic variables can't have their addresses escape any other way.  */\n+  if (!TREE_STATIC (var))\n+    return false;\n+\n+  /* Globally visible variables can have their addresses taken by other\n+     translation units.  */\n+  if (DECL_EXTERNAL (var) || TREE_PUBLIC (var))\n+    return true;\n+\n+  /* If we're in unit-at-a-time mode, then we must have seen all occurrences\n+     of address-of operators, and so we can trust TREE_ADDRESSABLE.  Otherwise\n+     we can only be sure the variable isn't addressable if it's local to the\n+     current function.  */\n+  if (flag_unit_at_a_time)\n+    return false;\n+  if (decl_function_context (var) == current_function_decl)\n+    return false;\n+\n+  return true;\n+}\n+"}, {"sha": "04ab19d8ff66482c9c5b83b6f67c246c1ae4913f", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -2390,8 +2390,7 @@ get_default_value (tree var)\n       /* Function arguments and volatile variables are considered VARYING.  */\n       val.lattice_val = VARYING;\n     }\n-  else if (decl_function_context (sym) != current_function_decl\n-           || TREE_STATIC (sym))\n+  else if (TREE_STATIC (sym))\n     {\n       /* Globals and static variables are considered UNKNOWN_VAL,\n          unless they are declared 'const'.  */"}, {"sha": "d3d48f5a89b8272b568a2f632b70f6404948ab6d", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -143,8 +143,7 @@ suitable_for_tail_opt_p (void)\n     {\n       tree var = VARRAY_TREE (referenced_vars, i);\n \n-      if (decl_function_context (var) == current_function_decl\n-\t  && !TREE_STATIC (var)\n+      if (!TREE_STATIC (var)\n \t  && var_ann (var)->mem_tag_kind == NOT_A_TAG\n \t  && is_call_clobbered (var))\n \treturn false;"}, {"sha": "bcb8dffc8a492737d3a06379b346d4833bd6f348", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab8907ef75b71c987932a299bddf04cb73907c69/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ab8907ef75b71c987932a299bddf04cb73907c69", "patch": "@@ -5671,10 +5671,8 @@ needs_to_live_in_memory (tree t)\n   return (DECL_NEEDS_TO_LIVE_IN_MEMORY_INTERNAL (t)\n \t  || TREE_STATIC (t)\n           || DECL_EXTERNAL (t)\n-\t  || DECL_NONLOCAL (t)\n \t  || (TREE_CODE (t) == RESULT_DECL\n-\t      && aggregate_value_p (t, current_function_decl))\n-\t  || decl_function_context (t) != current_function_decl);\n+\t      && aggregate_value_p (t, current_function_decl)));\n }\n \n /* There are situations in which a language considers record types"}]}