{"sha": "c4dfc70c804a239887dae59f7a0fdbc887086247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzRkZmM3MGM4MDRhMjM5ODg3ZGFlNTlmN2EwZmRiYzg4NzA4NjI0Nw==", "commit": {"author": {"name": "Dhananjay R. Deshpande", "email": "dhananjayd@kpit.com", "date": "2002-09-06T16:16:10Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2002-09-06T16:16:10Z"}, "message": "h8300.c (enum shift_alg): Move to earlier in h8300.c.\n\n        * h8300.c (enum shift_alg): Move to earlier in h8300.c.\n        (enum shift_type, enum h8_cpu): Likewise.\n        (INL, ROT, LOP, SPC macros): Likewise.\n        (shift_alg_qi, shift_alg_hi, shift_alg_si): Likewise.  Lose\n        const designator.\n        (h8300_init_once): Update shift_alg_{qi,hi,si} to use more\n        space efficient algorithms when optimize for codesize.\n\nFrom-SVN: r56890", "tree": {"sha": "a611f4f9b09b33d4e3f196a16ea161a47f0cb0d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a611f4f9b09b33d4e3f196a16ea161a47f0cb0d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c4dfc70c804a239887dae59f7a0fdbc887086247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4dfc70c804a239887dae59f7a0fdbc887086247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c4dfc70c804a239887dae59f7a0fdbc887086247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c4dfc70c804a239887dae59f7a0fdbc887086247/comments", "author": null, "committer": null, "parents": [{"sha": "746b0682edef6e1f00bbca3f0c9440c50927a280", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746b0682edef6e1f00bbca3f0c9440c50927a280", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746b0682edef6e1f00bbca3f0c9440c50927a280"}], "stats": {"total": 358, "additions": 205, "deletions": 153}, "files": [{"sha": "95471ab7bb5cd760ba08128c6eb75600306239b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4dfc70c804a239887dae59f7a0fdbc887086247/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4dfc70c804a239887dae59f7a0fdbc887086247/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c4dfc70c804a239887dae59f7a0fdbc887086247", "patch": "@@ -1,3 +1,13 @@\n+2002-09-06\tDhananjay Deshpande <dhananjayd@kpit.com>\n+\n+\t* h8300.c (enum shift_alg): Move to earlier in h8300.c.\n+\t(enum shift_type, enum h8_cpu): Likewise.\n+\t(INL, ROT, LOP, SPC macros): Likewise.\n+\t(shift_alg_qi, shift_alg_hi, shift_alg_si): Likewise.  Lose\n+\tconst designator.\n+\t(h8300_init_once): Update shift_alg_{qi,hi,si} to use more\n+\tspace efficient algorithms when optimize for codesize.\n+\n Fri Sep  6 16:35:32 2002  Nicola Pero  <n.pero@mi.flashnet.it>\n \n \tFix PR/1727 and long-standing failing testcase"}, {"sha": "952db460ec0d8a00af54ba505b7742c62de0e288", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 195, "deletions": 153, "changes": 348, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c4dfc70c804a239887dae59f7a0fdbc887086247/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c4dfc70c804a239887dae59f7a0fdbc887086247/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=c4dfc70c804a239887dae59f7a0fdbc887086247", "patch": "@@ -125,6 +125,166 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n+/* See below where shifts are handled for explanation of this enum.  */\n+\n+enum shift_alg\n+{\n+  SHIFT_INLINE,\n+  SHIFT_ROT_AND,\n+  SHIFT_SPECIAL,\n+  SHIFT_LOOP\n+};\n+\n+/* Symbols of the various shifts which can be used as indices.  */\n+\n+enum shift_type\n+{\n+  SHIFT_ASHIFT, SHIFT_LSHIFTRT, SHIFT_ASHIFTRT\n+};\n+\n+/* Macros to keep the shift algorithm tables small.  */\n+#define INL SHIFT_INLINE\n+#define ROT SHIFT_ROT_AND\n+#define LOP SHIFT_LOOP\n+#define SPC SHIFT_SPECIAL\n+\n+/* The shift algorithms for each machine, mode, shift type, and shift\n+   count are defined below.  The three tables below correspond to\n+   QImode, HImode, and SImode, respectively.  Each table is organized\n+   by, in the order of indecies, machine, shift type, and shift count.  */\n+\n+static enum shift_alg shift_alg_qi[3][3][8] = {\n+  {\n+    /* TARGET_H8300  */\n+    /* 0    1    2    3    4    5    6    7  */\n+    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, LOP, LOP, SPC }  /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300H  */\n+    /* 0    1    2    3    4    5    6    7  */\n+    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, LOP, LOP, SPC }  /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300S  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    { INL, INL, INL, INL, INL, INL, ROT, ROT }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, INL, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, INL, INL, SPC }  /* SHIFT_ASHIFTRT */\n+  }\n+};\n+\n+static enum shift_alg shift_alg_hi[3][3][16] = {\n+  {\n+    /* TARGET_H8300  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    { INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300H  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    { INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, INL, INL, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300S  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n+  }\n+};\n+\n+static enum shift_alg shift_alg_si[3][3][32] = {\n+  {\n+    /* TARGET_H8300  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    /* 16   17   18   19   20   21   22   23  */\n+    /* 24   25   26   27   28   29   30   31  */\n+    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, SPC, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, LOP, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, SPC, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, SPC, LOP, LOP, SPC }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, SPC, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300H  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    /* 16   17   18   19   20   21   22   23  */\n+    /* 24   25   26   27   28   29   30   31  */\n+    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n+      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+  },\n+  {\n+    /* TARGET_H8300S  */\n+    /*  0    1    2    3    4    5    6    7  */\n+    /*  8    9   10   11   12   13   14   15  */\n+    /* 16   17   18   19   20   21   22   23  */\n+    /* 24   25   26   27   28   29   30   31  */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n+      SPC, SPC, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n+      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n+      SPC, SPC, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n+    { INL, INL, INL, INL, INL, INL, INL, INL,\n+      INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n+      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n+      SPC, SPC, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n+  }\n+};\n+\n+#undef INL\n+#undef ROT\n+#undef LOP\n+#undef SPC\n+\n+enum h8_cpu\n+{\n+  H8_300,\n+  H8_300H,\n+  H8_S\n+};\n+\n /* Initialize various cpu specific globals at start up.  */\n \n void\n@@ -154,6 +314,41 @@ h8300_init_once ()\n       error (\"-ms2600 is used without -ms\");\n       target_flags |= 1;\n     }\n+\n+  /* Some of the shifts are optimized for speed by default. \n+     See http://gcc.gnu.org/ml/gcc-patches/2002-07/msg01858.html\n+     If optimizing for size, change shift_alg for those shift to \n+     SHIFT_LOOP.  */\n+  if(optimize_size)\n+    {\n+      /* H8300 */\n+      shift_alg_hi[H8_300][SHIFT_ASHIFT][5] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300][SHIFT_ASHIFT][6] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300][SHIFT_ASHIFT][13] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300][SHIFT_ASHIFT][14] = SHIFT_LOOP ;\n+\n+      shift_alg_hi[H8_300][SHIFT_LSHIFTRT][13] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300][SHIFT_LSHIFTRT][14] = SHIFT_LOOP ;\n+\n+      shift_alg_hi[H8_300][SHIFT_ASHIFTRT][13] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300][SHIFT_ASHIFTRT][14] = SHIFT_LOOP ;\n+\n+      /* H8300H */\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFT][5] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFT][6] = SHIFT_LOOP ;\n+\n+      shift_alg_hi[H8_300H][SHIFT_LSHIFTRT][5] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300H][SHIFT_LSHIFTRT][6] = SHIFT_LOOP ;\n+\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][5] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][6] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][13] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_300H][SHIFT_ASHIFTRT][14] = SHIFT_LOOP ;\n+\n+      /* H8S */\n+      shift_alg_hi[H8_S][SHIFT_ASHIFTRT][13] = SHIFT_LOOP ;\n+      shift_alg_hi[H8_S][SHIFT_ASHIFTRT][14] = SHIFT_LOOP ;\n+    }\n }\n \n static const char *\n@@ -1997,23 +2192,6 @@ expand_a_shift (mode, code, operands)\n   return 1;\n }\n \n-/* See above for explanation of this enum.  */\n-\n-enum shift_alg\n-{\n-  SHIFT_INLINE,\n-  SHIFT_ROT_AND,\n-  SHIFT_SPECIAL,\n-  SHIFT_LOOP\n-};\n-\n-/* Symbols of the various shifts which can be used as indices.  */\n-\n-enum shift_type\n-{\n-  SHIFT_ASHIFT, SHIFT_LSHIFTRT, SHIFT_ASHIFTRT\n-};\n-\n /* Symbols of the various modes which can be used as indices.  */\n \n enum shift_mode\n@@ -2176,142 +2354,6 @@ static const char *const rotate_two[3][3] =\n     }\n };\n \n-/* Macros to keep the shift algorithm tables small.  */\n-#define INL SHIFT_INLINE\n-#define ROT SHIFT_ROT_AND\n-#define LOP SHIFT_LOOP\n-#define SPC SHIFT_SPECIAL\n-\n-/* The shift algorithms for each machine, mode, shift type, and shift\n-   count are defined below.  The three tables below correspond to\n-   QImode, HImode, and SImode, respectively.  Each table is organized\n-   by, in the order of indecies, machine, shift type, and shift count.  */\n-\n-static const enum shift_alg shift_alg_qi[3][3][8] = {\n-  {\n-    /* TARGET_H8300  */\n-    /* 0    1    2    3    4    5    6    7  */\n-    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, LOP, LOP, SPC }  /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300H  */\n-    /* 0    1    2    3    4    5    6    7  */\n-    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, LOP, LOP, SPC }  /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300S  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    { INL, INL, INL, INL, INL, INL, ROT, ROT }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, INL, ROT, ROT }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, INL, INL, SPC }  /* SHIFT_ASHIFTRT */\n-  }\n-};\n-\n-static const enum shift_alg shift_alg_hi[3][3][16] = {\n-  {\n-    /* TARGET_H8300  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    { INL, INL, INL, INL, INL, INL, INL, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300H  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    { INL, INL, INL, INL, INL, INL, INL, SPC,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, INL, INL, SPC,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, INL, INL, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300S  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      SPC, SPC, SPC, SPC, SPC, ROT, ROT, ROT }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      SPC, SPC, SPC, SPC, SPC, SPC, SPC, SPC }, /* SHIFT_ASHIFTRT */\n-  }\n-};\n-\n-static const enum shift_alg shift_alg_si[3][3][32] = {\n-  {\n-    /* TARGET_H8300  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    /* 16   17   18   19   20   21   22   23  */\n-    /* 24   25   26   27   28   29   30   31  */\n-    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, SPC, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, SPC, LOP, LOP, SPC }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, LOP, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300H  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    /* 16   17   18   19   20   21   22   23  */\n-    /* 24   25   26   27   28   29   30   31  */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, LOP, LOP, LOP, LOP,\n-      SPC, LOP, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n-  },\n-  {\n-    /* TARGET_H8300S  */\n-    /*  0    1    2    3    4    5    6    7  */\n-    /*  8    9   10   11   12   13   14   15  */\n-    /* 16   17   18   19   20   21   22   23  */\n-    /* 24   25   26   27   28   29   30   31  */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_ASHIFT   */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, SPC,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, ROT, ROT, ROT, SPC }, /* SHIFT_LSHIFTRT */\n-    { INL, INL, INL, INL, INL, INL, INL, INL,\n-      INL, INL, INL, LOP, LOP, LOP, LOP, LOP,\n-      SPC, SPC, SPC, SPC, SPC, SPC, LOP, LOP,\n-      SPC, SPC, LOP, LOP, LOP, LOP, LOP, SPC }, /* SHIFT_ASHIFTRT */\n-  }\n-};\n-\n-#undef INL\n-#undef ROT\n-#undef LOP\n-#undef SPC\n-\n struct shift_info {\n   /* Shift algorithm.  */\n   enum shift_alg alg;"}]}