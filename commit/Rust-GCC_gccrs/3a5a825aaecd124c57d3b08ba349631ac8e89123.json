{"sha": "3a5a825aaecd124c57d3b08ba349631ac8e89123", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2E1YTgyNWFhZWNkMTI0YzU3ZDNiMDhiYTM0OTYzMWFjOGU4OTEyMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-28T09:15:49Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-28T09:15:49Z"}, "message": "re PR tree-optimization/52402 (IPA-SRA creates aligned loads from unaligned memory)\n\n2012-02-28  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/52402\n\t* ipa-prop.c (ipa_modify_call_arguments): Properly use\n\tmis-aligned types when creating the accesses at the call site.\n\n\t* gcc.dg/torture/pr52402.c: New testcase.\n\nFrom-SVN: r184619", "tree": {"sha": "9331bf1775c4098ffb8b748e6a4aa7b0856f164d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9331bf1775c4098ffb8b748e6a4aa7b0856f164d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a5a825aaecd124c57d3b08ba349631ac8e89123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a825aaecd124c57d3b08ba349631ac8e89123", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a5a825aaecd124c57d3b08ba349631ac8e89123", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a5a825aaecd124c57d3b08ba349631ac8e89123/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "95510497873486319b680dfedf017415a2bb8173", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95510497873486319b680dfedf017415a2bb8173", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95510497873486319b680dfedf017415a2bb8173"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "24df23ab7debf964c1858dca35e325e4ec3242de", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a5a825aaecd124c57d3b08ba349631ac8e89123", "patch": "@@ -1,3 +1,9 @@\n+2012-02-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52402\n+\t* ipa-prop.c (ipa_modify_call_arguments): Properly use\n+\tmis-aligned types when creating the accesses at the call site.\n+\n 2012-02-28  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/builtins.def: New file."}, {"sha": "3856793b0546c0a3178c46210e251edf0f068929", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=3a5a825aaecd124c57d3b08ba349631ac8e89123", "patch": "@@ -2508,9 +2508,27 @@ ipa_modify_call_arguments (struct cgraph_edge *cs, gimple stmt,\n \t\t}\n \t    }\n \n-\t  expr = fold_build2_loc (loc, MEM_REF, adj->type, base, off);\n-\t  if (adj->by_ref)\n-\t    expr = build_fold_addr_expr (expr);\n+\t  if (!adj->by_ref)\n+\t    {\n+\t      tree type = adj->type;\n+\t      unsigned int align;\n+\t      unsigned HOST_WIDE_INT misalign;\n+\t      align = get_pointer_alignment_1 (base, &misalign);\n+\t      misalign += (double_int_sext (tree_to_double_int (off),\n+\t\t\t\t\t    TYPE_PRECISION (TREE_TYPE (off))).low\n+\t\t\t   * BITS_PER_UNIT);\n+\t      misalign = misalign & (align - 1);\n+\t      if (misalign != 0)\n+\t\talign = (misalign & -misalign);\n+\t      if (align < TYPE_ALIGN (type))\n+\t\ttype = build_aligned_type (type, align);\n+\t      expr = fold_build2_loc (loc, MEM_REF, type, base, off);\n+\t    }\n+\t  else\n+\t    {\n+\t      expr = fold_build2_loc (loc, MEM_REF, adj->type, base, off);\n+\t      expr = build_fold_addr_expr (expr);\n+\t    }\n \n \t  expr = force_gimple_operand_gsi (&gsi, expr,\n \t\t\t\t\t   adj->by_ref"}, {"sha": "7a3af5818dac4e26969592aba3426a5c0397322f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3a5a825aaecd124c57d3b08ba349631ac8e89123", "patch": "@@ -1,3 +1,8 @@\n+2012-02-28  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/52402\n+\t* gcc.dg/torture/pr52402.c: New testcase.\n+\n 2012-02-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR lto/52400"}, {"sha": "5bd51fbdd4882da1563d2b7754e45d6a70c23eb2", "filename": "gcc/testsuite/gcc.dg/torture/pr52402.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52402.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a5a825aaecd124c57d3b08ba349631ac8e89123/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52402.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr52402.c?ref=3a5a825aaecd124c57d3b08ba349631ac8e89123", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+typedef int v4si __attribute__((vector_size(16)));\n+struct T { v4si i[2]; int j; } __attribute__((packed));\n+\n+static v4si __attribute__((noinline))\n+foo (struct T t)\n+{\n+  return t.i[0];\n+}\n+\n+static struct T *__attribute__((noinline))\n+init ()\n+{\n+  char *p = __builtin_malloc (sizeof (struct T) + 1);\n+  p++;\n+  __builtin_memset (p, 1, sizeof (struct T));\n+  return (struct T *)p;\n+}\n+\n+int main()\n+{\n+  struct T *p;\n+  p = init ();\n+  if (foo (*p)[0] != 0x01010101)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}