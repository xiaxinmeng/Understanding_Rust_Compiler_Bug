{"sha": "a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYxYzM2MzNlY2QwYjgzOTI0OTY2NzRhMjhlOGVmY2QwY2VjOGFiOQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2010-10-14T13:39:18Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-10-14T13:39:18Z"}, "message": "sched-deps.c (sched_insn_is_legitimate_for_speculation): Invoke may_trap_or_fault_p instead of may_trap_p predicate.\n\n\t* sched-deps.c (sched_insn_is_legitimate_for_speculation): Invoke\n\tmay_trap_or_fault_p instead of may_trap_p predicate.\n\t* tree.c (substitute_in_expr): Propagate the TREE_THIS_NOTRAP flag.\n\t(substitute_placeholder_in_expr): Likewise.\n\t* tree-inline.c (remap_gimple_op_r): Propagate the TREE_THIS_NOTRAP\n\tflag on MEM_REF nodes.\n\t(copy_tree_body_r): Propagate the TREE_READONLY and TREE_THIS_NOTRAP\n\tflags on INDIRECT_REF nodes.\nada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Set\n\tTREE_THIS_NOTRAP on the INDIRECT_REF node built for the template.\n\t* gcc-interface/trans.c (Identifier_to_gnu): Set TREE_THIS_NOTRAP on\n\tthe INDIRECT_REF node built for objects used by reference.\n\t* gcc-interface/utils2.c (build_binary_op): Add short-circuit for\n\tconstant result. Set TREE_THIS_NOTRAP on ARRAY_REF and ARRAY_RANGE_REF.\n\t(gnat_stabilize_reference_1): Propagate the TREE_THIS_NOTRAP flag.\n\nFrom-SVN: r165468", "tree": {"sha": "73e843d67156115387cd0f5f57159c563c46f468", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73e843d67156115387cd0f5f57159c563c46f468"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/comments", "author": null, "committer": null, "parents": [{"sha": "8de2e8c95714a780903496db710adb4f2d6df310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de2e8c95714a780903496db710adb4f2d6df310", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de2e8c95714a780903496db710adb4f2d6df310"}], "stats": {"total": 83, "additions": 68, "deletions": 15}, "files": [{"sha": "5281089eff20792b4a83dffe1b7c1e2a5f3f5ae9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -1,3 +1,14 @@\n+2010-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sched-deps.c (sched_insn_is_legitimate_for_speculation): Invoke\n+\tmay_trap_or_fault_p instead of may_trap_p predicate.\n+\t* tree.c (substitute_in_expr): Propagate the TREE_THIS_NOTRAP flag.\n+\t(substitute_placeholder_in_expr): Likewise.\n+\t* tree-inline.c (remap_gimple_op_r): Propagate the TREE_THIS_NOTRAP\n+\tflag on MEM_REF nodes.\n+\t(copy_tree_body_r): Propagate the TREE_READONLY and TREE_THIS_NOTRAP\n+\tflags on INDIRECT_REF nodes.\n+\n 2010-10-14  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* config.gcc (arm*-*-linux-*eabi) <tm_file>: Add bpabi.h from"}, {"sha": "a05dfa3fc7af0121a99e172b2fb2cca48e2e6491", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -1,3 +1,13 @@\n+2010-10-14  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Array_Type>: Set\n+\tTREE_THIS_NOTRAP on the INDIRECT_REF node built for the template.\n+\t* gcc-interface/trans.c (Identifier_to_gnu): Set TREE_THIS_NOTRAP on\n+\tthe INDIRECT_REF node built for objects used by reference.\n+\t* gcc-interface/utils2.c (build_binary_op): Add short-circuit for\n+\tconstant result. Set TREE_THIS_NOTRAP on ARRAY_REF and ARRAY_RANGE_REF.\n+\t(gnat_stabilize_reference_1): Propagate the TREE_THIS_NOTRAP flag.\n+\n 2010-10-13  Richard Henderson  <rth@redhat.com>\n \n \t* gcc-interface/misc.c (gnat_eh_personality): Update call to"}, {"sha": "3dbb3b590632d7c572c5b28fa5bede8770b2df19", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -1942,6 +1942,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \tgnu_template_reference\n \t  = build_unary_op (INDIRECT_REF, gnu_template_type, tem);\n \tTREE_READONLY (gnu_template_reference) = 1;\n+\tTREE_THIS_NOTRAP (gnu_template_reference) = 1;\n \n \t/* Now create the GCC type for each index and add the fields for that\n \t   index to the template.  */"}, {"sha": "c2068c0e478d3447510091b607aa2b1cfe778002", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -978,14 +978,22 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \n       if (TREE_CODE (gnu_result) == PARM_DECL\n \t  && DECL_BY_DOUBLE_REF_P (gnu_result))\n-\tgnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n+\t{\n+\t  gnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n+\t  if (TREE_CODE (gnu_result) == INDIRECT_REF)\n+\t    TREE_THIS_NOTRAP (gnu_result) = 1;\n+\t}\n \n       if (TREE_CODE (gnu_result) == PARM_DECL\n \t  && DECL_BY_COMPONENT_PTR_P (gnu_result))\n-\tgnu_result\n-\t  = build_unary_op (INDIRECT_REF, NULL_TREE,\n-\t\t\t    convert (build_pointer_type (gnu_result_type),\n-\t\t\t\t     gnu_result));\n+\t{\n+\t  gnu_result\n+\t    = build_unary_op (INDIRECT_REF, NULL_TREE,\n+\t\t\t      convert (build_pointer_type (gnu_result_type),\n+\t\t\t\t       gnu_result));\n+\t  if (TREE_CODE (gnu_result) == INDIRECT_REF)\n+\t    TREE_THIS_NOTRAP (gnu_result) = 1;\n+\t}\n \n       /* If it's a renaming pointer and we are at the right binding level,\n \t we can reference the renamed object directly, since the renamed\n@@ -1003,7 +1011,11 @@ Identifier_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p)\n \t\t\t\t     DECL_INITIAL (gnu_result));\n \n       else\n-\tgnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n+\t{\n+\t  gnu_result = build_unary_op (INDIRECT_REF, NULL_TREE, gnu_result);\n+\t  if (TREE_CODE (gnu_result) == INDIRECT_REF)\n+\t    TREE_THIS_NOTRAP (gnu_result) = 1;\n+\t}\n \n       if (read_only)\n \tTREE_READONLY (gnu_result) = 1;"}, {"sha": "0748b327e9ebac54ce3eb1a69eee42a8a2a1d220", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -960,14 +960,19 @@ build_binary_op (enum tree_code op_code, tree result_type,\n     result\n       = fold_build2 (op_code, operation_type, left_operand, right_operand);\n \n-  TREE_SIDE_EFFECTS (result) |= has_side_effects;\n-  TREE_CONSTANT (result)\n-    |= (TREE_CONSTANT (left_operand) & TREE_CONSTANT (right_operand)\n-\t&& op_code != ARRAY_REF && op_code != ARRAY_RANGE_REF);\n+  if (TREE_CONSTANT (result))\n+    ;\n+  else if (op_code == ARRAY_REF || op_code == ARRAY_RANGE_REF)\n+    {\n+      TREE_THIS_NOTRAP (result) = 1;\n+      if (TYPE_VOLATILE (operation_type))\n+\tTREE_THIS_VOLATILE (result) = 1;\n+    }\n+  else\n+    TREE_CONSTANT (result)\n+      |= (TREE_CONSTANT (left_operand) && TREE_CONSTANT (right_operand));\n \n-  if ((op_code == ARRAY_REF || op_code == ARRAY_RANGE_REF)\n-      && TYPE_VOLATILE (operation_type))\n-    TREE_THIS_VOLATILE (result) = 1;\n+  TREE_SIDE_EFFECTS (result) |= has_side_effects;\n \n   /* If we are working with modular types, perform the MOD operation\n      if something above hasn't eliminated the need for it.  */\n@@ -2347,6 +2352,9 @@ gnat_stabilize_reference_1 (tree e, bool force)\n   TREE_SIDE_EFFECTS (result) |= TREE_SIDE_EFFECTS (e);\n   TREE_THIS_VOLATILE (result) = TREE_THIS_VOLATILE (e);\n \n+  if (code == INDIRECT_REF || code == ARRAY_REF || code == ARRAY_RANGE_REF)\n+    TREE_THIS_NOTRAP (result) = TREE_THIS_NOTRAP (e);\n+\n   return result;\n }\n "}, {"sha": "d2e3bb89f38615790b8ff298acc7b5b60ab7eeaf", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -598,8 +598,8 @@ sched_insn_is_legitimate_for_speculation_p (const_rtx insn, ds_t ds)\n     /* The following instructions, which depend on a speculatively scheduled\n        instruction, cannot be speculatively scheduled along.  */\n     {\n-      if (may_trap_p (PATTERN (insn)))\n-\t/* If instruction might trap, it cannot be speculatively scheduled.\n+      if (may_trap_or_fault_p (PATTERN (insn)))\n+\t/* If instruction might fault, it cannot be speculatively scheduled.\n \t   For control speculation it's obvious why and for data speculation\n \t   it's because the insn might get wrong input if speculation\n \t   wasn't successful.  */"}, {"sha": "5aa7bb064b52136ebbac2cc5bd7461bec5a7574e", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -858,6 +858,7 @@ remap_gimple_op_r (tree *tp, int *walk_subtrees, void *data)\n \t\t  *tp = fold_build2 (MEM_REF, TREE_TYPE (*tp),\n \t\t\t\t     ptr, TREE_OPERAND (*tp, 1));\n \t\t  TREE_THIS_VOLATILE (*tp) = TREE_THIS_VOLATILE (old);\n+\t\t  TREE_THIS_NOTRAP (*tp) = TREE_THIS_NOTRAP (old);\n \t\t}\n \t      TREE_NO_WARNING (*tp) = TREE_NO_WARNING (old);\n \t      *walk_subtrees = 0;\n@@ -1087,6 +1088,8 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n \t              *tp = build1 (INDIRECT_REF, type, new_tree);\n \t\t      TREE_THIS_VOLATILE (*tp) = TREE_THIS_VOLATILE (old);\n \t\t      TREE_SIDE_EFFECTS (*tp) = TREE_SIDE_EFFECTS (old);\n+\t\t      TREE_READONLY (*tp) = TREE_READONLY (old);\n+\t\t      TREE_THIS_NOTRAP (*tp) = TREE_THIS_NOTRAP (old);\n \t\t    }\n \t\t}\n \t      *walk_subtrees = 0;"}, {"sha": "2f3b21e8e8bcf6a013896de741ade0ff8780c40a", "filename": "gcc/tree.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a61c3633ecd0b8392496674a28e8efcd0cec8ab9/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=a61c3633ecd0b8392496674a28e8efcd0cec8ab9", "patch": "@@ -3190,6 +3190,10 @@ substitute_in_expr (tree exp, tree f, tree r)\n       }\n \n   TREE_READONLY (new_tree) |= TREE_READONLY (exp);\n+\n+  if (code == INDIRECT_REF || code == ARRAY_REF || code == ARRAY_RANGE_REF)\n+    TREE_THIS_NOTRAP (new_tree) |= TREE_THIS_NOTRAP (exp);\n+\n   return new_tree;\n }\n \n@@ -3357,6 +3361,10 @@ substitute_placeholder_in_expr (tree exp, tree obj)\n       }\n \n   TREE_READONLY (new_tree) |= TREE_READONLY (exp);\n+\n+  if (code == INDIRECT_REF || code == ARRAY_REF || code == ARRAY_RANGE_REF)\n+    TREE_THIS_NOTRAP (new_tree) |= TREE_THIS_NOTRAP (exp);\n+\n   return new_tree;\n }\n \f"}]}