{"sha": "f7043461dbdc6ffc526ab4fa14c420c182599c02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjcwNDM0NjFkYmRjNmZmYzUyNmFiNGZhMTRjNDIwYzE4MjU5OWMwMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-08-15T17:44:10Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-08-15T17:44:10Z"}, "message": "loop.c (scan_loop, [...]): Cast to avoid signed/unsigned warnings.\n\n\t* loop.c (scan_loop, move_movables, count_one_set): Cast to avoid\n\tsigned/unsigned warnings.\n\n\t* regclass.c (init_reg_sets_1, choose_hard_reg_mode,\n\trecord_reg_classes): Likewise.\n\n\t* reload.c (reload_inner_reg_of_subreg, push_reload,\n\tfind_reloads_address_1): Likewise.\n\nFrom-SVN: r56350", "tree": {"sha": "b82f35c9dd856cddc3f7abd452619cec5c479ad2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b82f35c9dd856cddc3f7abd452619cec5c479ad2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7043461dbdc6ffc526ab4fa14c420c182599c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7043461dbdc6ffc526ab4fa14c420c182599c02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7043461dbdc6ffc526ab4fa14c420c182599c02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7043461dbdc6ffc526ab4fa14c420c182599c02/comments", "author": null, "committer": null, "parents": [{"sha": "b4d330e1630264a6ced3d637344ee1a708527799", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4d330e1630264a6ced3d637344ee1a708527799", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4d330e1630264a6ced3d637344ee1a708527799"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "20d953fbe490d984878db0fc7dbe678cceee650b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7043461dbdc6ffc526ab4fa14c420c182599c02", "patch": "@@ -1,3 +1,14 @@\n+2002-08-15  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* loop.c (scan_loop, move_movables, count_one_set): Cast to avoid\n+\tsigned/unsigned warnings.\n+\n+\t* regclass.c (init_reg_sets_1, choose_hard_reg_mode,\n+\trecord_reg_classes): Likewise.\n+\n+\t* reload.c (reload_inner_reg_of_subreg, push_reload,\n+\tfind_reloads_address_1): Likewise.\n+\n 2002-08-15  David Edelsohn  <edelsohn@gnu.org>\n \n \t* rs6000.c (output_mi_thunk): Return to function section on"}, {"sha": "a777013de45f8a283b445da71078d794804ae42e", "filename": "gcc/loop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=f7043461dbdc6ffc526ab4fa14c420c182599c02", "patch": "@@ -896,7 +896,7 @@ scan_loop (loop, flags)\n \t\t\t\t   SET_DEST (set), copy_rtx (SET_SRC (set)));\n \n \t\t  delete_insn (p);\n-\t\t  for (i = 0; i < LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n+\t\t  for (i = 0; i < (int) LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n \t\t    regs->array[regno+i].set_in_loop = 0;\n \t\t  continue;\n \t\t}\n@@ -927,7 +927,7 @@ scan_loop (loop, flags)\n \t      m->savings = regs->array[regno].n_times_set;\n \t      if (find_reg_note (p, REG_RETVAL, NULL_RTX))\n \t\tm->savings += libcall_benefit (p);\n-\t      for (i = 0; i < LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n+\t      for (i = 0; i < (int) LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n \t\tregs->array[regno+i].set_in_loop = move_insn ? -2 : -1;\n \t      /* Add M to the end of the chain MOVABLES.  */\n \t      loop_movables_add (movables, m);\n@@ -1029,7 +1029,7 @@ scan_loop (loop, flags)\n \t\t  m->match = 0;\n \t\t  m->lifetime = LOOP_REG_LIFETIME (loop, regno);\n \t\t  m->savings = 1;\n-\t\t  for (i = 0; i < LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n+\t\t  for (i = 0; i < (int) LOOP_REGNO_NREGS (regno, SET_DEST (set)); i++)\n \t\t    regs->array[regno+i].set_in_loop = -1;\n \t\t  /* Add M to the end of the chain MOVABLES.  */\n \t\t  loop_movables_add (movables, m);\n@@ -2170,7 +2170,7 @@ move_movables (loop, movables, threshold, insn_count)\n \t      if (! m->partial)\n \t\t{\n \t\t  int i;\n-\t\t  for (i = 0; i < LOOP_REGNO_NREGS (regno, m->set_dest); i++)\n+\t\t  for (i = 0; i < (int) LOOP_REGNO_NREGS (regno, m->set_dest); i++)\n \t\t    regs->array[regno+i].set_in_loop = 0;\n \t\t}\n \n@@ -2235,7 +2235,7 @@ move_movables (loop, movables, threshold, insn_count)\n \t\t\t{\n \t\t\t  int i;\n \t\t\t  for (i = 0;\n-\t\t\t       i < LOOP_REGNO_NREGS (regno, m1->set_dest);\n+\t\t\t       i < (int) LOOP_REGNO_NREGS (regno, m1->set_dest);\n \t\t\t       i++)\n \t\t\t    regs->array[m1->regno+i].set_in_loop = 0;\n \t\t\t}\n@@ -3495,7 +3495,7 @@ count_one_set (regs, insn, x, last_set)\n \t{\n \t  int i;\n \t  int regno = REGNO (dest);\n-\t  for (i = 0; i < LOOP_REGNO_NREGS (regno, dest); i++)\n+\t  for (i = 0; i < (int) LOOP_REGNO_NREGS (regno, dest); i++)\n \t    {\n \t      /* If this is the first setting of this reg\n \t\t in current basic block, and it was set before,"}, {"sha": "4718d9e90f8eac036182d9536496e89ef020a172", "filename": "gcc/regclass.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=f7043461dbdc6ffc526ab4fa14c420c182599c02", "patch": "@@ -483,7 +483,7 @@ init_reg_sets_1 ()\n   memset (allocatable_regs_of_mode, 0, sizeof (allocatable_regs_of_mode));\n   for (m = 0; m < (unsigned int) MAX_MACHINE_MODE; m++)\n     for (i = 0; i < N_REG_CLASSES; i++)\n-      if (CLASS_MAX_NREGS (i, m) <= reg_class_size[i])\n+      if ((unsigned) CLASS_MAX_NREGS (i, m) <= reg_class_size[i])\n \tfor (j = 0; j < FIRST_PSEUDO_REGISTER; j++)\n \t  if (!fixed_regs [j] && TEST_HARD_REG_BIT (reg_class_contents[i], j)\n \t      && HARD_REGNO_MODE_OK (j, m))\n@@ -696,7 +696,7 @@ choose_hard_reg_mode (regno, nregs)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_INT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+    if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n \t&& HARD_REGNO_MODE_OK (regno, mode))\n       found_mode = mode;\n \n@@ -706,7 +706,7 @@ choose_hard_reg_mode (regno, nregs)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_FLOAT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+    if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n \t&& HARD_REGNO_MODE_OK (regno, mode))\n       found_mode = mode;\n \n@@ -716,7 +716,7 @@ choose_hard_reg_mode (regno, nregs)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_FLOAT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+    if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n \t&& HARD_REGNO_MODE_OK (regno, mode))\n       found_mode = mode;\n \n@@ -726,7 +726,7 @@ choose_hard_reg_mode (regno, nregs)\n   for (mode = GET_CLASS_NARROWEST_MODE (MODE_VECTOR_INT);\n        mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (HARD_REGNO_NREGS (regno, mode) == nregs\n+    if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n \t&& HARD_REGNO_MODE_OK (regno, mode))\n       found_mode = mode;\n \n@@ -737,7 +737,7 @@ choose_hard_reg_mode (regno, nregs)\n   for (m = (unsigned int) CCmode; m < (unsigned int) NUM_MACHINE_MODES; ++m)\n     {\n       mode = (enum machine_mode) m;\n-      if (HARD_REGNO_NREGS (regno, mode) == nregs\n+      if ((unsigned) HARD_REGNO_NREGS (regno, mode) == nregs\n \t  && HARD_REGNO_MODE_OK (regno, mode))\n \treturn mode;\n     }\n@@ -1877,27 +1877,27 @@ record_reg_classes (n_alts, n_ops, ops, modes,\n \t      enum reg_class pref = reg_pref[regno].prefclass;\n \n \t      if ((reg_class_size[(unsigned char) pref]\n-\t\t   == CLASS_MAX_NREGS (pref, mode))\n+\t\t   == (unsigned) CLASS_MAX_NREGS (pref, mode))\n \t\t  && REGISTER_MOVE_COST (mode, pref, pref) < 10 * 2)\n \t\top_costs[i].cost[(unsigned char) pref] = -1;\n \t    }\n \t  else if (regno < FIRST_PSEUDO_REGISTER)\n \t    for (class = 0; class < N_REG_CLASSES; class++)\n \t      if (TEST_HARD_REG_BIT (reg_class_contents[class], regno)\n-\t\t  && reg_class_size[class] == CLASS_MAX_NREGS (class, mode))\n+\t\t  && reg_class_size[class] == (unsigned) CLASS_MAX_NREGS (class, mode))\n \t\t{\n \t\t  if (reg_class_size[class] == 1)\n \t\t    op_costs[i].cost[class] = -1;\n \t\t  else\n \t\t    {\n-\t\t      for (nr = 0; nr < HARD_REGNO_NREGS (regno, mode); nr++)\n+\t\t      for (nr = 0; nr < (unsigned) HARD_REGNO_NREGS (regno, mode); nr++)\n \t\t\t{\n \t\t\t  if (! TEST_HARD_REG_BIT (reg_class_contents[class],\n \t\t\t\t\t\t   regno + nr))\n \t\t\t    break;\n \t\t\t}\n \n-\t\t      if (nr == HARD_REGNO_NREGS (regno,mode))\n+\t\t      if (nr == (unsigned) HARD_REGNO_NREGS (regno,mode))\n \t\t\top_costs[i].cost[class] = -1;\n \t\t    }\n \t\t}"}, {"sha": "e195ea21a3b80b6cd69dfcb0001605cbc8776992", "filename": "gcc/reload.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7043461dbdc6ffc526ab4fa14c420c182599c02/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f7043461dbdc6ffc526ab4fa14c420c182599c02", "patch": "@@ -826,7 +826,7 @@ reload_inner_reg_of_subreg (x, mode)\n   return (GET_MODE_SIZE (mode) <= UNITS_PER_WORD\n \t  && GET_MODE_SIZE (GET_MODE (inner)) > UNITS_PER_WORD\n \t  && ((GET_MODE_SIZE (GET_MODE (inner)) / UNITS_PER_WORD)\n-\t      != HARD_REGNO_NREGS (REGNO (inner), GET_MODE (inner))));\n+\t      != (int) HARD_REGNO_NREGS (REGNO (inner), GET_MODE (inner))));\n }\n \n /* Record one reload that needs to be performed.\n@@ -1003,8 +1003,8 @@ push_reload (in, out, inloc, outloc, class,\n \t\t       > UNITS_PER_WORD)\n \t\t   && ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (in)))\n \t\t\t/ UNITS_PER_WORD)\n-\t\t       != HARD_REGNO_NREGS (REGNO (SUBREG_REG (in)),\n-\t\t\t\t\t    GET_MODE (SUBREG_REG (in)))))\n+\t\t       != (int) HARD_REGNO_NREGS (REGNO (SUBREG_REG (in)),\n+\t\t\t\t\t\t  GET_MODE (SUBREG_REG (in)))))\n \t\t  || ! HARD_REGNO_MODE_OK (subreg_regno (in), inmode)))\n #ifdef SECONDARY_INPUT_RELOAD_CLASS\n \t  || (SECONDARY_INPUT_RELOAD_CLASS (class, inmode, in) != NO_REGS\n@@ -1105,8 +1105,8 @@ push_reload (in, out, inloc, outloc, class,\n \t\t       > UNITS_PER_WORD)\n \t\t   && ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (out)))\n \t\t\t/ UNITS_PER_WORD)\n-\t\t       != HARD_REGNO_NREGS (REGNO (SUBREG_REG (out)),\n-\t\t\t\t\t    GET_MODE (SUBREG_REG (out)))))\n+\t\t       != (int) HARD_REGNO_NREGS (REGNO (SUBREG_REG (out)),\n+\t\t\t\t\t\t  GET_MODE (SUBREG_REG (out)))))\n \t\t  || ! HARD_REGNO_MODE_OK (subreg_regno (out), outmode)))\n #ifdef SECONDARY_OUTPUT_RELOAD_CLASS\n \t  || (SECONDARY_OUTPUT_RELOAD_CLASS (class, outmode, out) != NO_REGS\n@@ -5639,7 +5639,7 @@ find_reloads_address_1 (mode, x, context, loc, opnum, type, ind_levels, insn)\n \t    {\n \t      enum reg_class class = (context ? INDEX_REG_CLASS\n \t\t\t\t      : MODE_BASE_REG_CLASS (mode));\n-\t      if (CLASS_MAX_NREGS (class, GET_MODE (SUBREG_REG (x)))\n+\t      if ((unsigned) CLASS_MAX_NREGS (class, GET_MODE (SUBREG_REG (x)))\n \t\t  > reg_class_size[class])\n \t\t{\n \t\t  x = find_reloads_subreg_address (x, 0, opnum, type,"}]}