{"sha": "e2df21bfc6c81b4bc410a42002c8427454ffa628", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTJkZjIxYmZjNmM4MWI0YmM0MTBhNDIwMDJjODQyNzQ1NGZmYTYyOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-11-05T03:28:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-11-05T03:28:14Z"}, "message": "re PR c++/26714 (violation of [class.temporary]/5)\n\n\tPR c++/26714\n\t* init.c (perform_member_init): Strip TARGET_EXPR around NSDMI.\n\tDo temporary lifetime extension.\n\nFrom-SVN: r181002", "tree": {"sha": "7b439ecb9236581bd4b64ccf943c6d9a7ce82aa0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b439ecb9236581bd4b64ccf943c6d9a7ce82aa0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2df21bfc6c81b4bc410a42002c8427454ffa628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2df21bfc6c81b4bc410a42002c8427454ffa628", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2df21bfc6c81b4bc410a42002c8427454ffa628", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2df21bfc6c81b4bc410a42002c8427454ffa628/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8dc1dc7975a3d8dd3ffdfd6fcc992419cc358af7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dc1dc7975a3d8dd3ffdfd6fcc992419cc358af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dc1dc7975a3d8dd3ffdfd6fcc992419cc358af7"}], "stats": {"total": 141, "additions": 140, "deletions": 1}, "files": [{"sha": "200621e3f9f9f4b3d41fc6163f09a49f8d0c31e6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2df21bfc6c81b4bc410a42002c8427454ffa628", "patch": "@@ -1,5 +1,9 @@\n 2011-11-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/26714\n+\t* init.c (perform_member_init): Strip TARGET_EXPR around NSDMI.\n+\tDo temporary lifetime extension.\n+\n \tPR c++/48370\n \t* decl.c (cp_finish_decl): Run cleanups in the right order.\n "}, {"sha": "ca4f590cc062181636cd6bf0cf3f852c9dc55c27", "filename": "gcc/cp/init.c", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=e2df21bfc6c81b4bc410a42002c8427454ffa628", "patch": "@@ -507,7 +507,15 @@ perform_member_init (tree member, tree init)\n \t\t tf_warning_or_error, member, /*function_p=*/false,\n \t\t /*integral_constant_expression_p=*/false));\n       else\n-\tinit = break_out_target_exprs (DECL_INITIAL (member));\n+\t{\n+\t  init = DECL_INITIAL (member);\n+\t  /* Strip redundant TARGET_EXPR so we don't need to remap it, and\n+\t     so the aggregate init code below will see a CONSTRUCTOR.  */\n+\t  if (init && TREE_CODE (init) == TARGET_EXPR\n+\t      && !VOID_TYPE_P (TREE_TYPE (TARGET_EXPR_INITIAL (init))))\n+\t    init = TARGET_EXPR_INITIAL (init);\n+\t  init = break_out_target_exprs (init);\n+\t}\n     }\n \n   /* Effective C++ rule 12 requires that all data members be\n@@ -565,6 +573,42 @@ perform_member_init (tree member, tree init)\n \t  finish_expr_stmt (init);\n \t}\n     }\n+  else if (init\n+\t   && (TREE_CODE (type) == REFERENCE_TYPE\n+\t       /* Pre-digested NSDMI.  */\n+\t       || (((TREE_CODE (init) == CONSTRUCTOR\n+\t\t     && TREE_TYPE (init) == type)\n+\t\t    /* { } mem-initializer.  */\n+\t\t    || (TREE_CODE (init) == TREE_LIST\n+\t\t\t&& TREE_CODE (TREE_VALUE (init)) == CONSTRUCTOR\n+\t\t\t&& CONSTRUCTOR_IS_DIRECT_INIT (TREE_VALUE (init))))\n+\t\t   && (CP_AGGREGATE_TYPE_P (type)\n+\t\t       || is_std_init_list (type)))))\n+    {\n+      /* With references and list-initialization, we need to deal with\n+\t extending temporary lifetimes.  12.2p5: \"A temporary bound to a\n+\t reference member in a constructor\u2019s ctor-initializer (12.6.2)\n+\t persists until the constructor exits.\"  */\n+      unsigned i; tree t;\n+      VEC(tree,gc) *cleanups = make_tree_vector ();\n+      if (TREE_CODE (init) == TREE_LIST)\n+\tinit = build_x_compound_expr_from_list (init, ELK_MEM_INIT,\n+\t\t\t\t\t\ttf_warning_or_error);\n+      if (TREE_TYPE (init) != type)\n+\tinit = digest_init (type, init, tf_warning_or_error);\n+      if (init == error_mark_node)\n+\treturn;\n+      /* Use 'this' as the decl, as it has the lifetime we want.  */\n+      init = extend_ref_init_temps (current_class_ptr, init, &cleanups);\n+      if (TREE_CODE (type) == ARRAY_TYPE\n+\t  && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (TREE_TYPE (type)))\n+\tinit = build_vec_init_expr (type, init, tf_warning_or_error);\n+      init = build2 (INIT_EXPR, type, decl, init);\n+      finish_expr_stmt (init);\n+      FOR_EACH_VEC_ELT (tree, cleanups, i, t)\n+\tpush_cleanup (decl, t, false);\n+      release_tree_vector (cleanups);\n+    }\n   else if (type_build_ctor_call (type)\n \t   || (init && CLASS_TYPE_P (strip_array_types (type))))\n     {"}, {"sha": "a6e95c5a65d975d857afdf110b5a901d2910f452", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2df21bfc6c81b4bc410a42002c8427454ffa628", "patch": "@@ -1,5 +1,9 @@\n 2011-11-04  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/26714\n+\t* g++.dg/init/lifetime2.C: New.\n+\t* g++.dg/cpp0x/initlist-lifetime2.C: New.\n+\n \tPR c++/48370\n \t* g++.dg/init/lifetime1.C: Test cleanup order.\n "}, {"sha": "16ae1ac6e07544219d2b94bb160776ef2d069ab3", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist-lifetime2.C", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-lifetime2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-lifetime2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist-lifetime2.C?ref=e2df21bfc6c81b4bc410a42002c8427454ffa628", "patch": "@@ -0,0 +1,64 @@\n+// Test that we properly extend the lifetime of the initializer_list\n+// array even if the initializer_list is a subobject.\n+// { dg-options -std=c++0x }\n+// { dg-do run }\n+\n+#include <initializer_list>\n+\n+extern \"C\" void abort();\n+bool ok;\n+\n+bool do_throw;\n+\n+struct A {\n+  A(int) { if (do_throw) throw 42; }\n+  ~A() { if (!ok) abort(); }\n+};\n+\n+typedef std::initializer_list<A> AL;\n+typedef std::initializer_list<AL> AL2;\n+typedef std::initializer_list<AL2> AL3;\n+\n+struct B {\n+  AL al;\n+  const AL& alr;\n+};\n+\n+struct A2\n+{\n+  const A& a1;\n+  const A& a2;\n+};\n+\n+struct C {\n+  AL ar[2];\n+  B b;\n+  AL3 al3;\n+  A2 a2;\n+  A2 a2r[2];\n+  C():\n+    ar{{1,2},{3,4}},\n+    b{{5,6},{7,8}},\n+    al3{{{1},{2},{3}}},\n+    a2{1,2},\n+    a2r{{1,2},{3,4}}\n+  { ok = true; }\n+};\n+\n+struct D {\n+  AL ar[2] = {{1,2},{3,4}};\n+  B b = {{5,6},{7,8}};\n+  AL3 al3 = {{{1},{2},{3}}};\n+  A2 a2 = {1,2};\n+  A2 a2r[2] = {{1,2},{3,4}};\n+  D() { ok = true; }\n+};\n+\n+int main(int argc, const char** argv)\n+{\n+  do_throw = (argc > 1);\t// always false, but optimizer can't tell\n+  ok = false;\n+  C c;\n+  ok = false;\n+  D d;\n+}"}, {"sha": "293bd692e9cbf3923fdc769c85d64fa62755a0f7", "filename": "gcc/testsuite/g++.dg/init/lifetime2.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2df21bfc6c81b4bc410a42002c8427454ffa628/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Flifetime2.C?ref=e2df21bfc6c81b4bc410a42002c8427454ffa628", "patch": "@@ -0,0 +1,23 @@\n+// PR c++/26714\n+// { dg-do run }\n+\n+extern \"C\" void abort();\n+\n+bool ok = false;\n+struct A\n+{\n+  A() { }\n+  ~A() { if (!ok) abort(); }\n+};\n+\n+struct B\n+{\n+  const A &a1;\n+  const A &a2;\n+  B() : a1(A()),a2(A()) { ok = true; }\n+};\n+\n+int main()\n+{\n+  B b;\n+}"}]}