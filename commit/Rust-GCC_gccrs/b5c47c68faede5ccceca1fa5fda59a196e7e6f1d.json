{"sha": "b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjVjNDdjNjhmYWVkZTVjY2NlY2ExZmE1ZmRhNTlhMTk2ZTdlNmYxZA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:49:57Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-09T08:49:57Z"}, "message": "configopts.html: Edit.\n\n\n\n\n\n\n\n2000-10-10  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* docs/configopts.html: Edit.\n\n\t* libio/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libio/Makefile.in: Regenerate.\n\t* libmath/Makefile.am (INCLUDES): Remove duplicates, simplify.\n\t* libmath/Makefile.in: Regenerate.\n\t* libsupc++/Makefile.am (INCLUDES): Remove duplicate.\n\t* libsupc++/Makefile.in: Regenerate.\n\n\t* Makefile.am (AM_MAKEFLAGS): Add GLIBCPP_INCLUDES,\n\tTOPLEVEL_INCLUDES, LIBMATH_INCLUDES, LIBIO_INCLUDES,\n\tCSHADOW_INCLUDES up here.\n\t* Makefile.in: Regenerate.\n\t* src/Makefile.am (CSHADOW_INCLUDES): Add include/c_std, include/c\n\tfor shadow headers.\n\t(myinstallheaders): Change glibcpp_includedir to GLIBCPP_INCLUDES.\n\tMove GLIBCPP_INCLUDES, TOPLEVEL_INCLUDES, LIBMATH_INCLUDES,\n\tLIBIO_INCLUDES, CSHADOW_INCLUDES up Makefile hierarchy.\n\t* src/Makefile.in: Regenerate.\n\n\t* include/c: New directory.\n\t* include/c/bits/(std_cassert.h, std_cctype.h, std_cerrno.h,\n\tstd_cfloat.h, std_climits.h, std_clocale.h, std_cmath.h,\n\tstd_csetjmp.h, std_csignal.h, std_cstdarg.h, std_cstddef.h,\n\tstd_cstdio.h, std_cstdlib.h, std_cstring.h, std_ctime.h,\n\tstd_cwchar.h, std_cwctype.h): Add, moving from...\n\t* include/bits: ...here.\n\t* include/c_std: New directory.\n\t* include/c_std/bits/*: Populate from...\n\t* shadow: ...here. Remove directory.\n\nFrom-SVN: r36804", "tree": {"sha": "eddfc780c9447d108744c90b821f7d49c49d4965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eddfc780c9447d108744c90b821f7d49c49d4965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5c47c68faede5ccceca1fa5fda59a196e7e6f1d/comments", "author": null, "committer": null, "parents": [{"sha": "40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40e5dd580e7913eaf0e2b5436d47659a52b83bcb"}], "stats": {"total": 1523, "additions": 0, "deletions": 1523}, "files": [{"sha": "5d9d18445f91a1bc2690e7b96fe06d452f8a2cfb", "filename": "libstdc++-v3/include/bits/std_cassert.h", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cassert.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cassert.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cassert.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,39 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 19.2  Assertions\n-//\n-\n-// Note: This is not a conforming implementation.\n-\n-// No include guards on this header...\n-\n-# pragma GCC system_header\n-# include_next <assert.h>"}, {"sha": "1c1e69c6c5dadb2b5590d621e1dc4de2665a6595", "filename": "libstdc++-v3/include/bits/std_cctype.h", "status": "removed", "additions": 0, "deletions": 211, "changes": 211, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cctype.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,211 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: <ccytpe>\n-//\n-\n-#ifndef _CPP_CCTYPE\n-#define _CPP_CCTYPE 1\n-\n-// This keeps isanum, et al from being propagated as macros.\n-#if __linux__\n-#define __NO_CTYPE 1\n-#endif\n-\n-# pragma GCC system_header\n-# include_next <ctype.h>\n-\n-// Sequester the C non-inline implementations in the _C_Swamp::\n-// namespace, and provide C++ inlines for them in the std:: namespace\n-// where they belong.\n-\n-namespace std \n-{\n-  // NB: If not using namespaces, can't have any of these definitions,\n-  // as they will duplicate what's in the global namespace. \n-\n-#ifdef toupper\n-  inline int \n-  _S_toupper_helper(int __c) { return toupper(__c); }\n-# undef toupper\n-  inline int \n-  toupper(int __c) { return _S_toupper_helper(__c); }\n-#else\n-  inline int \n-  toupper(int __c) { return ::toupper(__c); }\n-#endif\n-\n-#ifdef tolower\n-  inline int \n-  _S_tolower_helper(int __c) { return tolower(__c); }\n-# undef tolower\n-  inline int \n-  tolower(int __c) { return _S_tolower_helper(__c); }\n-#else\n-  inline int \n-  tolower(int __c) { return ::tolower(__c); }\n-#endif\n-\n-#ifdef isspace\n-  inline int \n-  _S_isspace_helper(int __c) { return isspace(__c); }\n-# undef isspace\n-  inline int \n-  isspace(int __c) { return _S_isspace_helper(__c); }\n-#else\n-  inline int \n-  isspace(int __c) { return ::isspace(__c); }\n-#endif\n-\n-#ifdef isprint\n-  inline int \n-  _S_isprint_helper(int __c) { return isprint(__c); }\n-# undef isprint\n-  inline int \n-  isprint(int __c) { return _S_isprint_helper(__c); }\n-#else\n-  inline int \n-  isprint(int __c) { return ::isprint(__c); }\n-#endif\n-\n-#ifdef iscntrl\n-  inline int \n-  _S_iscntrl_helper(int __c) { return iscntrl(__c); }\n-# undef iscntrl\n-  inline int \n-  iscntrl(int __c) { return _S_iscntrl_helper(__c); }\n-#else\n-  inline int \n-  iscntrl(int __c) { return ::iscntrl(__c); }\n-#endif\n-\n-#ifdef isupper\n-  inline int \n-  _S_isupper_helper(int __c) { return isupper(__c); }\n-# undef isupper\n-  inline int \n-  isupper(int __c) { return _S_isupper_helper(__c); }\n-#else\n-  inline int \n-  isupper(int __c) { return ::isupper(__c); }\n-#endif\n-\n-#ifdef islower\n-  inline int \n-  _S_islower_helper(int __c) { return islower(__c); }\n-# undef islower\n-  inline int \n-  islower(int __c) { return _S_islower_helper(__c); }\n-#else\n-  inline int \n-  islower(int __c) { return ::islower(__c); }\n-#endif\n-\n-#ifdef isalpha\n-  inline int \n-  _S_isalpha_helper(int __c) { return isalpha(__c); }\n-# undef isalpha\n-  inline int \n-  isalpha(int __c) { return _S_isalpha_helper(__c); }\n-#else\n-  inline int \n-  isalpha(int __c) { return ::isalpha(__c); }\n-#endif\n-\n-#ifdef isdigit\n-  inline int \n-  _S_isdigit_helper(int __c) { return isdigit(__c); }\n-# undef isdigit\n-  inline int \n-  isdigit(int __c) { return _S_isdigit_helper(__c); }\n-#else\n-  inline int \n-  isdigit(int __c) { return ::isdigit(__c); }\n-#endif\n-\n-#ifdef ispunct\n-  inline int \n-  _S_ispunct_helper(int __c) { return ispunct(__c); }\n-# undef ispunct\n-  inline int \n-  ispunct(int __c) { return _S_ispunct_helper(__c); }\n-#else\n-  inline int \n-  ispunct(int __c) { return ::ispunct(__c); }\n-#endif\n-\n-#ifdef isxdigit\n-  inline int \n-  _S_isxdigit_helper(int __c) { return isxdigit(__c); }\n-# undef isxdigit\n-  inline int \n-  isxdigit(int __c) { return _S_isxdigit_helper(__c); }\n-#else\n-  inline int \n-  isxdigit(int __c) { return ::isxdigit(__c); }\n-#endif\n-\n-#ifdef isalnum\n-  inline int \n-  _S_isalnum_helper(int __c) { return isalnum(__c); }\n-# undef isalnum\n-  inline int \n-  isalnum(int __c) { return _S_isalnum_helper(__c); }\n-#else\n-  inline int \n-  isalnum(int __c) { return ::isalnum(__c); }\n-#endif\n-\n-#ifdef isgraph\n-  inline int \n-  _S_isgraph_helper(int __c) { return isgraph(__c); }\n-# undef isgraph\n-  inline int \n-  isgraph(int __c) { return _S_isgraph_helper(__c); }\n-#else\n-  inline int \n-  isgraph(int __c) { return ::isgraph(__c); }\n-#endif\n-\n-} // namespace std\n-\n-#endif // _CPP_CCTYPE\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "abd28d560d8ff29e02fa57a605af7c888b87cff3", "filename": "libstdc++-v3/include/bits/std_cerrno.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cerrno.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cerrno.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cerrno.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// The -*- C++ -*- error number header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 19.3  Error numbers\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CERRNO\n-#define _CPP_CERRNO 1\n-# pragma GCC system_header\n-# include_next <errno.h>\n-#endif"}, {"sha": "8a317fcb49041a17b4924ad36d461b2437fcf362", "filename": "libstdc++-v3/include/bits/std_cfloat.h", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cfloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cfloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cfloat.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,47 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CFLOAT\n-#define _CPP_CFLOAT 1\n-# pragma GCC system_header\n-# include_next <float.h>\n-\n-#if 0\n-# ifdef __GLIBC__\n-// For GNU libc we must also include this one:\n-#  include <fenv.h>\n-# endif\n-#endif\n-#endif"}, {"sha": "ddd6bd8b40fd26ab2292b4bac9b54c39b295cefa", "filename": "libstdc++-v3/include/bits/std_climits.h", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_climits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_climits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_climits.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,42 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-// Note: This is not a conforming implementation.\n-\n-#ifndef _CPP_CLIMITS\n-#define _CPP_CLIMITS\t1\n-# pragma GCC system_header\n-# include_next <limits.h>\n-#endif\n-\n-"}, {"sha": "a8a44b8571acd97842fe3c0a749bf5a6b4dc1196", "filename": "libstdc++-v3/include/bits/std_clocale.h", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_clocale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_clocale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_clocale.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,41 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.2.2  Implementation properties: C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CLOCALE\n-#define _CPP_CLOCALE     1\n-# pragma GCC system_header\n-# include_next <locale.h>\n-#endif\n-"}, {"sha": "d7df14b2198f840b8bf3f216963dd8c86b2ae10d", "filename": "libstdc++-v3/include/bits/std_cmath.h", "status": "removed", "additions": 0, "deletions": 506, "changes": 506, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cmath.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,506 +0,0 @@\n-// -*- C++ -*- C math library.\n-\n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 26.5  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CMATH\n-#define _CPP_CMATH 1\n-# pragma GCC system_header\n-# include_next <math.h>\n-# include_next <stdlib.h>\n-\n-# include <bits/c++config.h>\n-\n-namespace std {\n-\n-  //\n-  // int\n-  //\n-\n-  inline int abs(int i)\n-  { return i > 0 ? i : -i; }\n-\n-  inline long abs(long i)\n-  { return i > 0 ? i : -i; }\n-  \n-    //\n-    // float\n-    //\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABSF\n-    inline float abs(float __x)\n-      { return __builtin_fabsf(__x); }\n-#elif _GLIBCPP_HAVE_FABSF\n-    inline float abs(float __x)\n-      { return ::fabsf(__x); }\n-#else\n-    inline float abs(float __x)\n-      { return ::fabs(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ACOSF\n-    inline float acos(float __x)\n-      { return ::acosf(__x); }\n-#else\n-    inline float acos(float __x)\n-      { return ::acos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ASINF\n-    inline float asin(float __x)\n-      { return ::asinf(__x); }\n-#else\n-    inline float asin(float __x)\n-      { return ::asin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATANF\n-    inline float atan(float __x)\n-      { return ::atanf(__x); }\n-#else\n-    inline float atan(float __x)\n-      { return ::atan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATAN2F\n-    inline float atan2(float __y, float __x)\n-      { return ::atan2f(__y, __x); }\n-#else\n-    inline float atan2(float __y, float __x)\n-      { return ::atan2(static_cast<double>(__y), static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_CEILF\n-    inline float ceil(float __x)\n-      { return ::ceilf(__x); }\n-#else\n-    inline float ceil(float __x)\n-      { return ::ceil(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COSF\n-    inline float cos(float __x)\n-      { return __builtin_cosf(__x); }\n-#elif _GLIBCPP_HAVE_COSF\n-    inline float cos(float __x)\n-      { return ::cosf(__x); }\n-#else\n-    inline float cos(float __x)\n-      { return ::cos(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_COSHF\n-    inline float cosh(float __x)\n-      { return ::coshf(__x); }\n-#else\n-    inline float cosh(float __x)\n-      { return ::cosh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_EXPF\n-    inline float exp(float __x)\n-      { return ::expf(__x); }\n-#else\n-    inline float exp(float __x)\n-      { return ::exp(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABSF\n-    inline float fabs(float __x)\n-      { return __builtin_fabsf(__x); }\n-#elif _GLIBCPP_HAVE_FABSF\n-    inline float fabs(float __x)\n-      { return ::fabsf(__x); }\n-#else\n-    inline float fabs(float __x)\n-      { return ::fabs(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FLOORF\n-    inline float floor(float __x)\n-      { return ::floorf(__x); }\n-#else\n-    inline float floor(float __x)\n-      { return ::floor(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FMODF\n-    inline float fmod(float __x, float __y)\n-      { return ::fmodf(__x, __y); }\n-#else\n-    inline float fmod(float __x, float __y)\n-      { return ::fmod(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FREXPF\n-    inline float frexp(float __x, int* __exp)\n-      { return ::frexpf(__x, __exp); }\n-#else\n-    inline float frexp(float __x, int* __exp)\n-      { return ::frexp(__x, __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LDEXPF\n-    inline float ldexp(float __x, int __exp)\n-      { return ::ldexpf(__x, __exp); }\n-#else\n-    inline float ldexp(float __x, int __exp)\n-      { return ::ldexp(static_cast<double>(__x), __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOGF\n-    inline float log(float __x)\n-      { return ::logf(__x); }\n-#else\n-    inline float log(float __x)\n-      { return ::log(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOG10F\n-    inline float log10(float __x)\n-      { return ::log10f(__x); }\n-#else\n-    inline float log10(float __x)\n-      { return ::log10(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_MODFF\n-    inline float modf(float __x, float* __iptr)\n-      { return ::modff(__x, __iptr); }\n-#else\n-    inline float modf(float __x, float* __iptr)\n-    {\n-       double __tmp;\n-       double __res = ::modf(static_cast<double>(__x), &__tmp);\n-       *__iptr = static_cast<float> (__tmp);\n-       return __res;\n-    }\n-#endif\n-\n-#if _GLIBCPP_HAVE_POWF\n-    inline float pow(float __x, float __y)\n-      { return ::powf(__x, __y); }\n-#else\n-    inline float pow(float __x, float __y)\n-      { return ::pow(static_cast<double>(__x), static_cast<double>(__y)); }\n-#endif\n-\n-    float pow(float, int);\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SINF\n-    inline float sin(float __x)\n-      { return __builtin_sinf(__x); }\n-#elif _GLIBCPP_HAVE_SINF\n-    inline float sin(float __x)\n-      { return ::sinf(__x); }\n-#else\n-    inline float sin(float __x)\n-      { return ::sin(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_SINHF\n-    inline float sinh(float __x)\n-      { return ::sinhf(__x); }\n-#else\n-    inline float sinh(float __x)\n-      { return ::sinh(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRTF\n-    inline float sqrt(float __x)\n-      { return __builtin_sqrtf(__x); }\n-#elif _GLIBCPP_HAVE_SQRTF\n-    inline float sqrt(float __x)\n-      { return ::sqrtf(__x); }\n-#else\n-    inline float sqrt(float __x)\n-      { return ::sqrt(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANF\n-    inline float tan(float __x)\n-      { return ::tanf(__x); }\n-#else\n-    inline float tan(float __x)\n-      { return ::tan(static_cast<double>(__x)); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANHF\n-    inline float tanh(float __x)\n-      { return ::tanhf(__x); }\n-#else\n-    inline float tanh(float __x)\n-      { return ::tanh(static_cast<double>(__x)); }\n-#endif\n-\n-    //\n-    // double\n-    //\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABS\n-    inline double abs(double __x)\n-      { return __builtin_fabs(__x); }\n-#else\n-    inline double abs(double __x)\n-      { return ::fabs(__x); }\n-#endif\n-\n-    inline double acos(double __x)\n-      { return ::acos(__x); }\n-\n-    inline double asin(double __x)\n-      { return ::asin(__x); }\n-\n-    inline double atan(double __x)\n-      { return ::atan(__x); }\n-\n-    inline double atan2(double __y, double __x)\n-      { return ::atan2(__y, __x); }\n-\n-    inline double ceil(double __x)\n-      { return ::ceil(__x); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COS\n-    inline double cos(double __x)\n-      { return __builtin_cos(__x); }\n-#else\n-    inline double cos(double __x)\n-      { return ::cos(__x); }\n-#endif\n-\n-    inline double cosh(double __x)\n-      { return ::cosh(__x); }\n-\n-    inline double exp(double __x)\n-      { return ::exp(__x); }\n-\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABS\n-    inline double fabs(double __x)\n-      { return __builtin_fabs(__x); }\n-#else\n-    inline double fabs(double __x)\n-      { return ::fabs(__x); }\n-#endif\n-\n-    inline double floor(double __x)\n-      { return ::floor(__x); }\n-\n-    inline double fmod(double __x, double __y)\n-      { return ::fmod(__x, __y); }\n-\n-    inline double frexp(double __x, int* __exp)\n-      { return ::frexp(__x, __exp); }\n-\n-    inline double ldexp(double __x, int __exp)\n-      { return ::ldexp(__x, __exp); }\n-\n-    inline double log(double __x)\n-      { return ::log(__x); }\n-\n-    inline double log10(double __x)\n-      { return ::log10(__x); }\n-\n-    inline double modf(double __x, double* __iptr)\n-      { return ::modf(__x, __iptr); }\n-\n-    inline double pow(double __x, double __y)\n-      { return ::pow(__x, __y); }\n-\n-    double pow (double, int);\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SIN\n-    inline double sin(double __x)\n-      { return __builtin_sin(__x); }\n-#else\n-    inline double sin(double __x)\n-      { return ::sin(__x); }\n-#endif\n-\n-    inline double sinh(double __x)\n-      { return ::sinh(__x); }\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRT\n-    inline double sqrt(double __x)\n-      { return __builtin_fsqrt(__x); }\n-#else\n-    inline double sqrt(double __x)\n-      { return ::sqrt(__x); }\n-#endif\n-\n-    inline double tan(double __x)\n-      { return ::tan(__x); }\n-\n-    inline double tanh(double __x)\n-      { return ::tanh(__x); }\n-\n-    //\n-    // long double\n-    //\n-#if _GLIBCPP_HAVE___BUILTIN_FABSL\n-    inline long double abs(long double __x)\n-      { return __builtin_fabsl(__x); }\n-#elif _GLIBCPP_HAVE_FABSL\n-    inline long double abs(long double __x)\n-      { return ::fabsl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ACOSL\n-    inline long double acos(long double __x)\n-      { return ::acosl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ASINL\n-    inline long double asin(long double __x)\n-      { return ::asinl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATANL\n-    inline long double atan(long double __x)\n-      { return ::atanl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_ATAN2L\n-    inline long double atan2(long double __y, long double __x)\n-      { return ::atan2l(__y, __x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_CEILL\n-    inline long double ceil(long double __x)\n-      { return ::ceill(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_COSL\n-    inline long double cos(long double __x)\n-      { return __builtin_cosl(__x); }\n-#elif _GLIBCPP_HAVE_COSL\n-    inline long double cos(long double __x)\n-      { return ::cosl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_COSHL\n-    inline long double cosh(long double __x)\n-      { return ::coshl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_EXPL\n-    inline long double exp(long double __x)\n-      { return ::expl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_FABSL\n-    inline long double fabs(long double __x)\n-      { return __builtin_fabsl(__x); }\n-#elif _GLIBCPP_HAVE_FABSL\n-    inline long double fabs(long double __x)\n-      { return ::fabsl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FLOORL\n-    inline long double floor(long double __x)\n-      { return ::floorl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FMODL\n-    inline long double fmod(long double __x, long double __y)\n-      { return ::fmodl(__x, __y); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_FREXPL\n-    inline long double frexp(long double __x, int* __exp)\n-      { return ::frexpl(__x, __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LDEXPL\n-    inline long double ldexp(long double __x, int __exp)\n-      { return ::ldexpl(__x, __exp); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOGL\n-    inline long double log(long double __x)\n-      { return ::logl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_LOG10L\n-    inline long double log10(long double __x)\n-      { return ::log10l(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_MODFL\n-    inline long double modf(long double __x, long double* __iptr)\n-      { return ::modfl(__x, __iptr); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_POWL\n-    inline long double pow(long double __x, long double __y)\n-      { return ::powl(__x, __y); }\n-#endif\n-\n-    long double pow(long double, int);\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SINL\n-    inline long double sin(long double __x)\n-      { return __builtin_sinl(__x); }\n-#elif _GLIBCPP_HAVE_SINL\n-    inline long double sin(long double __x)\n-      { return ::sinl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_SINHL\n-    inline long double sinh(long double __x)\n-      { return ::sinhl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE___BUILTIN_SQRTL\n-    inline long double sqrt(long double __x)\n-      { return __builtin_sqrtl(__x); }\n-#elif _GLIBCPP_HAVE_SQRTL\n-    inline long double sqrt(long double __x)\n-      { return ::sqrtl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANL\n-    inline long double tan(long double __x)\n-      { return ::tanl(__x); }\n-#endif\n-\n-#if _GLIBCPP_HAVE_TANHL\n-    inline long double tanh(long double __x)\n-      { return ::tanhl(__x); }\n-#endif\n-\n-} // std\n-\n-#endif // _CPP_CMATH\n-\n-"}, {"sha": "fc5b339036a2f0460ecbde8c48a279bf7a2c9870", "filename": "libstdc++-v3/include/bits/std_csetjmp.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csetjmp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csetjmp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csetjmp.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSETJMP\n-#define _CPP_CSETJMP 1\n-# pragma GCC system_header\n-# include_next <setjmp.h>\n-#endif"}, {"sha": "34c03eb3df10f414337c0d5dffdfe2d20dc2d5f1", "filename": "libstdc++-v3/include/bits/std_csignal.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csignal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csignal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_csignal.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSIGNAL\n-#define _CPP_CSIGNAL 1\n-# pragma GCC system_header\n-# include_next <signal.h>\n-#endif"}, {"sha": "f7f4235a29060808a33fb8d66374b18005a5ae4a", "filename": "libstdc++-v3/include/bits/std_cstdarg.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdarg.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdarg.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdarg.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSTDARG\n-#define _CPP_CSTDARG 1\n-# pragma GCC system_header\n-# include_next <stdarg.h>\n-#endif"}, {"sha": "5557c759571ca212f2c60db25a1c67b013ac7705", "filename": "libstdc++-v3/include/bits/std_cstddef.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstddef.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstddef.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstddef.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 18.1  Types\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSTDDEF\n-#define _CPP_CSTDDEF 1\n-# pragma GCC system_header\n-# include_next <stddef.h>\n-#endif"}, {"sha": "919a03ca4c7297a6f71afcba6755d1d106644dc0", "filename": "libstdc++-v3/include/bits/std_cstdio.h", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdio.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,61 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 27.8.2  C Library files\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSTDIO\n-#define _CPP_CSTDIO 1\n-# pragma GCC system_header\n-# include_next <stdio.h>\n-\n-#ifndef SEEK_CUR\n-#define SEEK_CUR 1\n-#endif\n-\n-#ifndef SEEK_END\n-#define SEEK_END 2\n-#endif\n-\n-#ifndef SEEK_SET\n-#define SEEK_SET 4\n-#endif\n-\n-#endif\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "ee5435739adb147c0be850f5b191b6456c14de12", "filename": "libstdc++-v3/include/bits/std_cstdlib.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstdlib.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,54 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSTDLIB\n-#define _CPP_CSTDLIB 1\n-\n-// This keeps isanum, et al from being propagated as macros.\n-#if __linux__\n-#define __USE_ISOC9X 1\n-#endif\n-\n-# pragma GCC system_header\n-# include_next <stdlib.h>\n-\n-#endif // _CPP_CSTDLIB\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "06bcdda6535ebdd49881b87071b0932ba4c88ef1", "filename": "libstdc++-v3/include/bits/std_cstring.h", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cstring.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,44 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.4.6  C library\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CSTRING\n-#define _CPP_CSTRING 1\n-# if defined __GLIBC__ && __GLIBC__ >= 2\n-// We must not see the optimized string functions GNU libc defines.\n-#  define __NO_STRING_INLINES\n-# endif\n-# pragma GCC system_header\n-# include_next <string.h>\n-#endif"}, {"sha": "b30b318f595673d3420dc2d8321e0fa8594342e8", "filename": "libstdc++-v3/include/bits/std_ctime.h", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ctime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ctime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_ctime.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,40 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: 20.5  Date and time\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CTIME\n-#define _CPP_CTIME 1\n-# pragma GCC system_header\n-# include_next <time.h>\n-#endif"}, {"sha": "77349f9d318468731bcd3156bd8726085df5946e", "filename": "libstdc++-v3/include/bits/std_cwchar.h", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwchar.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,78 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: ???\n-//\n-\n-// Note: this is not a conforming implementation.\n-\n-#ifndef _CPP_CWCHAR\n-#define _CPP_CWCHAR 1\n-\n-#include <bits/c++config.h>\n-\n-#if _GLIBCPP_USE_WCHAR_T\n- # pragma GCC system_header\n- # include_next <wchar.h>\n-#else\n-# ifdef __cplusplus\n-extern \"C\" \n-{\n-#endif\n-  typedef struct \n-  {\n-    int __fill[6];\n-  } mbstate_t;\n-# ifdef __cplusplus\n-}\n-# endif\n-#endif //_GLIBCPP_USE_WCHAR_T\n-\n-#endif // _CPP_CWCHAR\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-"}, {"sha": "c67f2ba9720d2fab86da62b303cfc45324e831f2", "filename": "libstdc++-v3/include/bits/std_cwctype.h", "status": "removed", "additions": 0, "deletions": 160, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwctype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/40e5dd580e7913eaf0e2b5436d47659a52b83bcb/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwctype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_cwctype.h?ref=40e5dd580e7913eaf0e2b5436d47659a52b83bcb", "patch": "@@ -1,160 +0,0 @@\n-// -*- C++ -*- forwarding header.\n-\n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// As a special exception, you may use this file as part of a free software\n-// library without restriction.  Specifically, if other files instantiate\n-// templates or use macros or inline functions from this file, or you compile\n-// this file and link it with other files to produce an executable, this\n-// file does not by itself cause the resulting executable to be covered by\n-// the GNU General Public License.  This exception does not however\n-// invalidate any other reasons why the executable file might be covered by\n-// the GNU General Public License.\n-\n-//\n-// ISO C++ 14882: <cwctype>\n-//\n-\n-#ifndef _CPP_CWCTYPE\n-#define _CPP_CWCTYPE 1\n-\n-# pragma GCC system_header\n-# include_next <wctype.h>\n-\n-// Sequester the C non-inline implementations in the _C_Swamp::\n-// namespace, and provide C++ inlines for them in the std:: namespace\n-// where they belong.\n-\n-namespace std \n-{\n-\n-#ifdef towupper\n-  inline wint_t \n-  _S_towupper_helper(wint_t __wc) { return towupper(__wc); }\n-# undef towupper\n-  inline wint_t \n-  towupper(wint_t __wc) { return _S_towupper_helper(__wc); }\n-#endif\n-\n-#ifdef towlower\n-  inline wint_t \n-  _S_towlower_helper(wint_t __wc) { return towlower(__wc); }\n-# undef towlower\n-  inline wint_t \n-  towlower(wint_t __wc) { return _S_towlower_helper(__wc); }\n-#endif\n-\n-#ifdef iswspace\n-  inline int \n-  _S_iswspace_helper(wint_t __wc) { return iswspace(__wc); }\n-# undef iswspace\n-  inline int \n-  iswspace(wint_t __wc) { return _S_iswspace_helper(__wc); }\n-#endif\n-\n-#ifdef iswprint\n-  inline int \n-  _S_iswprint_helper(wint_t __wc) { return iswprint(__wc); }\n-# undef iswprint\n-  inline int \n-  iswprint(wint_t __wc) { return _S_iswprint_helper(__wc); }\n-#endif\n-\n-#ifdef iswcntrl\n-  inline int \n-  _S_iswcntrl_helper(wint_t __wc) { return iswcntrl(__wc); }\n-# undef iswcntrl\n-  inline int \n-  iswcntrl(wint_t __wc) { return _S_iswcntrl_helper(__wc); }\n-#endif\n-\n-#ifdef iswupper\n-  inline int \n-  _S_iswupper_helper(wint_t __wc) { return iswupper(__wc); }\n-# undef iswupper\n-  inline int \n-  iswupper(wint_t __wc) { return _S_iswupper_helper(__wc); }\n-#endif\n-\n-#ifdef iswlower\n-  inline int \n-  _S_iswlower_helper(wint_t __wc) { return iswlower(__wc); }\n-# undef iswlower\n-  inline int \n-  iswlower(wint_t __wc) { return _S_iswlower_helper(__wc); }\n-#endif\n-\n-#ifdef iswalpha\n-  inline int \n-  _S_iswalpha_helper(wint_t __wc) { return iswalpha(__wc); }\n-# undef iswalpha\n-  inline int \n-  iswalpha(wint_t __wc) { return _S_iswalpha_helper(__wc); }\n-#endif\n-\n-#ifdef iswdigit\n-  inline int \n-  _S_iswdigit_helper(wint_t __wc) { return iswdigit(__wc); }\n-# undef iswdigit\n-  inline int \n-  iswdigit(wint_t __wc) { return _S_iswdigit_helper(__wc); }\n-#endif\n-\n-#ifdef iswpunct\n-  inline int \n-  _S_iswpunct_helper(wint_t __wc) { return iswpunct(__wc); }\n-# undef iswpunct\n-  inline int \n-  iswpunct(wint_t __wc) { return _S_iswpunct_helper(__wc); }\n-#endif\n-\n-#ifdef iswxdigit\n-  inline int \n-  _S_iswxdigit_helper (wint_t __wc) { return iswxdigit(__wc); }\n-# undef iswxdigit\n-  inline int \n-  iswxdigit(wint_t __wc) { return _S_iswxdigit_helper(__wc); }\n-#endif\n-\n-#ifdef iswalnum\n-  inline int \n-  _S_iswalnum_helper(wint_t __wc) { return iswalnum(__wc); }\n-# undef iswalnum\n-  inline int \n-  iswalnum(wint_t __wc) { return _S_iswalnum_helper(__wc); }\n-#endif\n-\n-#ifdef iswgraph\n-  inline int \n-  _S_iswgraph_helper(wint_t __wc) { return iswgraph(__wc); }\n-# undef iswgraph\n-  inline int \n-  iswgraph(wint_t __wc) { return _S_iswgraph_helper(__wc); }\n-#endif\n-\n-} // namespace std\n-\n-#endif // _CPP_CWCTYPE\n-\n-\n-\n-\n-\n-\n-"}]}