{"sha": "0b061cb099f33a9b76a2701c1d3e35868d026607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwNjFjYjA5OWYzM2E5Yjc2YTI3MDFjMWQzZTM1ODY4ZDAyNjYwNw==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-03-18T15:27:39Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-19T08:44:25Z"}, "message": "Reduce nesting to cleanup formatting of the unify function.\n\nIf there is a failure in type resolution we can return early to reduce\nnesting", "tree": {"sha": "ce3ad96499337b3c6bbef1df55ab49a58b1c8013", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce3ad96499337b3c6bbef1df55ab49a58b1c8013"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b061cb099f33a9b76a2701c1d3e35868d026607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b061cb099f33a9b76a2701c1d3e35868d026607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b061cb099f33a9b76a2701c1d3e35868d026607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b061cb099f33a9b76a2701c1d3e35868d026607/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b0076675d8fec6df6d175fe84ff9d2fcba492af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b0076675d8fec6df6d175fe84ff9d2fcba492af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b0076675d8fec6df6d175fe84ff9d2fcba492af"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "c6eb3571f95a87981bebc511951829d8a5c700c3", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b061cb099f33a9b76a2701c1d3e35868d026607/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b061cb099f33a9b76a2701c1d3e35868d026607/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=0b061cb099f33a9b76a2701c1d3e35868d026607", "patch": "@@ -67,41 +67,39 @@ class BaseRules : public TyVisitor\n       }\n \n     other->accept_vis (*this);\n-    if (resolved != nullptr)\n+    if (resolved == nullptr)\n+      return nullptr;\n+\n+    resolved->append_reference (get_base ()->get_ref ());\n+    resolved->append_reference (other->get_ref ());\n+    for (auto ref : get_base ()->get_combined_refs ())\n+      resolved->append_reference (ref);\n+    for (auto ref : other->get_combined_refs ())\n+      resolved->append_reference (ref);\n+\n+    bool result_resolved = resolved->get_kind () != TyTy::TypeKind::INFER;\n+    bool result_is_infer_var = resolved->get_kind () == TyTy::TypeKind::INFER;\n+    bool results_is_non_general_infer_var\n+      = (result_is_infer_var\n+\t && ((InferType *) resolved)->get_infer_kind ()\n+\t      != TyTy::InferType::GENERAL);\n+    if (result_resolved || results_is_non_general_infer_var)\n       {\n-\tresolved->append_reference (get_base ()->get_ref ());\n-\tresolved->append_reference (other->get_ref ());\n-\tfor (auto ref : get_base ()->get_combined_refs ())\n-\t  resolved->append_reference (ref);\n-\tfor (auto ref : other->get_combined_refs ())\n-\t  resolved->append_reference (ref);\n-\n-\tbool result_resolved = resolved->get_kind () != TyTy::TypeKind::INFER;\n-\tbool result_is_infer_var\n-\t  = resolved->get_kind () == TyTy::TypeKind::INFER;\n-\tbool results_is_non_general_infer_var\n-\t  = (result_is_infer_var\n-\t     && ((InferType *) resolved)->get_infer_kind ()\n-\t\t  != TyTy::InferType::GENERAL);\n-\tif (result_resolved || results_is_non_general_infer_var)\n+\tfor (auto &ref : resolved->get_combined_refs ())\n \t  {\n-\t    for (auto &ref : resolved->get_combined_refs ())\n+\t    TyTy::BaseType *ref_tyty = nullptr;\n+\t    bool ok = context->lookup_type (ref, &ref_tyty);\n+\t    if (!ok)\n+\t      continue;\n+\n+\t    // if any of the types are inference variables lets fix them\n+\t    if (ref_tyty->get_kind () == TyTy::TypeKind::INFER)\n \t      {\n-\t\tTyTy::BaseType *ref_tyty = nullptr;\n-\t\tbool ok = context->lookup_type (ref, &ref_tyty);\n-\t\tif (!ok)\n-\t\t  continue;\n-\n-\t\t// if any of the types are inference variables lets fix them\n-\t\tif (ref_tyty->get_kind () == TyTy::TypeKind::INFER)\n-\t\t  {\n-\t\t    NodeId ref_node_id = UNKNOWN_NODEID;\n-\t\t    context->insert_type (\n-\t\t      Analysis::NodeMapping (mappings->get_current_crate (),\n-\t\t\t\t\t     ref_node_id, ref,\n-\t\t\t\t\t     UNKNOWN_LOCAL_DEFID),\n-\t\t      resolved->clone ());\n-\t\t  }\n+\t\tcontext->insert_type (\n+\t\t  Analysis::NodeMapping (mappings->get_current_crate (),\n+\t\t\t\t\t UNKNOWN_NODEID, ref,\n+\t\t\t\t\t UNKNOWN_LOCAL_DEFID),\n+\t\t  resolved->clone ());\n \t      }\n \t  }\n       }"}]}