{"sha": "262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYyYTdkNmJjMDgyMGQ3YWVkNDZhMDViMmI4YjZlZjc4MjRiYjA4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-03T02:49:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-03T02:49:19Z"}, "message": "re PR c++/47774 ([C++0x] constexpr specifier on ctor not ignored when template instantiation causes ctor to not satify constexpr requirements)\n\n\tPR c++/47774\n\t* tree.c (build_vec_init_elt): Split out from...\n\t(build_vec_init_expr): ...here.\n\t(diagnose_non_constexpr_vec_init): New fn.\n\t* semantics.c (potential_constant_expression_1): Use it.\n\t* cp-tree.h: Declare it.\n\nFrom-SVN: r170638", "tree": {"sha": "ec4922a31a757f11986c001b1ffa43d50264d890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec4922a31a757f11986c001b1ffa43d50264d890"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20532210cd1a8e0b3b2d6ec1bcaa8c0e928af5ca"}], "stats": {"total": 146, "additions": 100, "deletions": 46}, "files": [{"sha": "b9ad026d3c2224f26d5726e01f3c25e84f82b9eb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -1,3 +1,12 @@\n+2011-03-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/47774\n+\t* tree.c (build_vec_init_elt): Split out from...\n+\t(build_vec_init_expr): ...here.\n+\t(diagnose_non_constexpr_vec_init): New fn.\n+\t* semantics.c (potential_constant_expression_1): Use it.\n+\t* cp-tree.h: Declare it.\n+\n 2011-03-01  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46159"}, {"sha": "4b49046105f4f4323523b4f16a1e7703b77b7724", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -5400,6 +5400,7 @@ extern tree build_cplus_array_type\t\t(tree, tree);\n extern tree build_array_of_n_type\t\t(tree, int);\n extern tree build_array_copy\t\t\t(tree);\n extern tree build_vec_init_expr\t\t\t(tree, tree);\n+extern void diagnose_non_constexpr_vec_init\t(tree);\n extern tree hash_tree_cons\t\t\t(tree, tree, tree);\n extern tree hash_tree_chain\t\t\t(tree, tree);\n extern tree build_qualified_name\t\t(tree, tree, tree, bool);"}, {"sha": "52a962dce09f6a0416ff41ee897b356318b020bc", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -7722,7 +7722,10 @@ potential_constant_expression_1 (tree t, bool want_rval, tsubst_flags_t flags)\n       if (VEC_INIT_EXPR_IS_CONSTEXPR (t))\n \treturn true;\n       if (flags & tf_error)\n-        error (\"non-constant array initialization\");\n+\t{\n+\t  error (\"non-constant array initialization\");\n+\t  diagnose_non_constexpr_vec_init (t);\n+\t}\n       return false;\n \n     default:"}, {"sha": "56639ffe836c700b1e42162f2cbd536fbd11f4b5", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 63, "deletions": 45, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -456,6 +456,47 @@ build_cplus_new (tree type, tree init)\n   return rval;\n }\n \n+/* Subroutine of build_vec_init_expr: Build up a single element\n+   intialization as a proxy for the full array initialization to get things\n+   marked as used and any appropriate diagnostics.\n+\n+   Since we're deferring building the actual constructor calls until\n+   gimplification time, we need to build one now and throw it away so\n+   that the relevant constructor gets mark_used before cgraph decides\n+   what functions are needed.  Here we assume that init is either\n+   NULL_TREE, void_type_node (indicating value-initialization), or\n+   another array to copy.  */\n+\n+static tree\n+build_vec_init_elt (tree type, tree init)\n+{\n+  tree inner_type = strip_array_types (type);\n+  VEC(tree,gc) *argvec;\n+\n+  if (integer_zerop (array_type_nelts_total (type))\n+      || !CLASS_TYPE_P (inner_type))\n+    /* No interesting initialization to do.  */\n+    return integer_zero_node;\n+  else if (init == void_type_node)\n+    return build_value_init (inner_type, tf_warning_or_error);\n+\n+  gcc_assert (init == NULL_TREE\n+\t      || (same_type_ignoring_top_level_qualifiers_p\n+\t\t  (type, TREE_TYPE (init))));\n+\n+  argvec = make_tree_vector ();\n+  if (init)\n+    {\n+      tree dummy = build_dummy_object (inner_type);\n+      if (!real_lvalue_p (init))\n+\tdummy = move (dummy);\n+      VEC_quick_push (tree, argvec, dummy);\n+    }\n+  return build_special_member_call (NULL_TREE, complete_ctor_identifier,\n+\t\t\t\t    &argvec, inner_type, LOOKUP_NORMAL,\n+\t\t\t\t    tf_warning_or_error);\n+}\n+\n /* Return a TARGET_EXPR which expresses the initialization of an array to\n    be named later, either default-initialization or copy-initialization\n    from another array of the same type.  */\n@@ -464,62 +505,22 @@ tree\n build_vec_init_expr (tree type, tree init)\n {\n   tree slot;\n-  tree inner_type = strip_array_types (type);\n-  tree elt_init = integer_zero_node;\n   bool value_init = false;\n+  tree elt_init = build_vec_init_elt (type, init);\n \n-  /* Since we're deferring building the actual constructor calls until\n-     gimplification time, we need to build one now and throw it away so\n-     that the relevant constructor gets mark_used before cgraph decides\n-     what functions are needed.  Here we assume that init is either\n-     NULL_TREE, void_type_node (indicating value-initialization), or\n-     another array to copy.  */\n-  if (integer_zerop (array_type_nelts_total (type)))\n-    {\n-      /* No actual initialization to do.  */;\n-      init = NULL_TREE;\n-    }\n-  else if (init == void_type_node)\n+  if (init == void_type_node)\n     {\n-      elt_init = build_value_init (inner_type, tf_warning_or_error);\n       value_init = true;\n       init = NULL_TREE;\n     }\n-  else\n-    {\n-      gcc_assert (init == NULL_TREE\n-\t\t  || (same_type_ignoring_top_level_qualifiers_p\n-\t\t      (type, TREE_TYPE (init))));\n-\n-      if (CLASS_TYPE_P (inner_type))\n-\t{\n-\t  VEC(tree,gc) *argvec = make_tree_vector ();\n-\t  if (init)\n-\t    {\n-\t      tree dummy = build_dummy_object (inner_type);\n-\t      if (!real_lvalue_p (init))\n-\t\tdummy = move (dummy);\n-\t      VEC_quick_push (tree, argvec, dummy);\n-\t    }\n-\t  elt_init\n-\t    = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t\t &argvec, inner_type, LOOKUP_NORMAL,\n-\t\t\t\t\t tf_warning_or_error);\n-\t}\n-    }\n \n   slot = build_local_temp (type);\n   init = build2 (VEC_INIT_EXPR, type, slot, init);\n   SET_EXPR_LOCATION (init, input_location);\n \n-  if (current_function_decl\n-      && DECL_DECLARED_CONSTEXPR_P (current_function_decl))\n-    {\n-      if (potential_constant_expression (elt_init))\n-\tVEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n-      else if (!processing_template_decl)\n-\trequire_potential_constant_expression (elt_init);\n-    }\n+  if (cxx_dialect >= cxx0x\n+      && potential_constant_expression (elt_init))\n+    VEC_INIT_EXPR_IS_CONSTEXPR (init) = true;\n   VEC_INIT_EXPR_VALUE_INIT (init) = value_init;\n \n   init = build_target_expr (slot, init);\n@@ -528,6 +529,23 @@ build_vec_init_expr (tree type, tree init)\n   return init;\n }\n \n+/* Give a helpful diagnostic for a non-constexpr VEC_INIT_EXPR in a context\n+   that requires a constant expression.  */\n+\n+void\n+diagnose_non_constexpr_vec_init (tree expr)\n+{\n+  tree type = TREE_TYPE (VEC_INIT_EXPR_SLOT (expr));\n+  tree init, elt_init;\n+  if (VEC_INIT_EXPR_VALUE_INIT (expr))\n+    init = void_zero_node;\n+  else\n+    init = VEC_INIT_EXPR_INIT (expr);\n+\n+  elt_init = build_vec_init_elt (type, init);\n+  require_potential_constant_expression (elt_init);\n+}\n+\n tree\n build_array_copy (tree init)\n {"}, {"sha": "328ed9e468eca148975a4c6b48acc09492e22bf3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -1,3 +1,7 @@\n+2011-03-02  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/constexpr-ctor9.C: New.\n+\n 2011-03-01  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/lambda/lambda-98.C: New."}, {"sha": "b7693f1e637fa7853e70710eb565df51000df1b4", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-ctor9.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-ctor9.C?ref=262a7d6bc0820d7aed46a05b2b8b6ef7824bb08f", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/47774\n+// { dg-options -std=c++0x }\n+\n+struct A\n+{\n+  A() {}\n+};\n+\n+template <typename T>\n+struct array\n+{\n+  constexpr array() : mem() {}\n+  T mem[7];\n+};\n+\n+int main()\n+{\n+  array<A> ar;\n+}"}]}