{"sha": "f26916c2acdda19e36e57fff97b296897ebcba76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2OTE2YzJhY2RkYTE5ZTM2ZTU3ZmZmOTdiMjk2ODk3ZWJjYmE3Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-01-07T10:03:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2020-01-07T10:03:07Z"}, "message": "re PR tree-optimization/93118 (>>32<<32 is not always converted into &~0ffffffffull at the tree level)\n\n\tPR tree-optimization/93118\n\t* match.pd ((x >> c) << c -> x & (-1<<c)): Add nop_convert?.  Add new\n\tsimplifier with two intermediate conversions.\n\n\t* gcc.dg/tree-ssa/pr93118.c: New test.\n\nFrom-SVN: r279950", "tree": {"sha": "df16e28845517b34758987ce1960774bccac998b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df16e28845517b34758987ce1960774bccac998b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f26916c2acdda19e36e57fff97b296897ebcba76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26916c2acdda19e36e57fff97b296897ebcba76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26916c2acdda19e36e57fff97b296897ebcba76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26916c2acdda19e36e57fff97b296897ebcba76/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c4177c5087194f920413896b1a382f807c1d0f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c4177c5087194f920413896b1a382f807c1d0f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c4177c5087194f920413896b1a382f807c1d0f2"}], "stats": {"total": 77, "additions": 75, "deletions": 2}, "files": [{"sha": "f90dc081d0406c7009ec55977909cb13ee47c114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f26916c2acdda19e36e57fff97b296897ebcba76", "patch": "@@ -1,3 +1,9 @@\n+2019-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93118\n+\t* match.pd ((x >> c) << c -> x & (-1<<c)): Add nop_convert?.  Add new\n+\tsimplifier with two intermediate conversions.\n+\n 2020-01-07  Martin Liska  <mliska@suse.cz>\n \n \t* params.opt: Add Optimization for various parameters."}, {"sha": "a3badb2c44b2213973c5e3d7874d7234af6164bd", "filename": "gcc/match.pd", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f26916c2acdda19e36e57fff97b296897ebcba76", "patch": "@@ -2738,9 +2738,26 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \n /* Optimize (x >> c) << c into x & (-1<<c).  */\n (simplify\n- (lshift (rshift @0 INTEGER_CST@1) @1)\n+ (lshift (nop_convert? (rshift @0 INTEGER_CST@1)) @1)\n  (if (wi::ltu_p (wi::to_wide (@1), element_precision (type)))\n-  (bit_and @0 (lshift { build_minus_one_cst (type); } @1))))\n+  /* It doesn't matter if the right shift is arithmetic or logical.  */\n+  (bit_and (view_convert @0) (lshift { build_minus_one_cst (type); } @1))))\n+\n+(simplify\n+ (lshift (convert (convert@2 (rshift @0 INTEGER_CST@1))) @1)\n+ (if (wi::ltu_p (wi::to_wide (@1), element_precision (type))\n+      /* Allow intermediate conversion to integral type with whatever sign, as\n+\t long as the low TYPE_PRECISION (type)\n+\t - TYPE_PRECISION (TREE_TYPE (@2)) bits are preserved.  */\n+      && INTEGRAL_TYPE_P (type)\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+      && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+      && TYPE_PRECISION (type) == TYPE_PRECISION (TREE_TYPE (@0))\n+      && (TYPE_PRECISION (TREE_TYPE (@2)) >= TYPE_PRECISION (type)\n+\t  || wi::geu_p (wi::to_wide (@1),\n+\t\t\tTYPE_PRECISION (type)\n+\t\t\t- TYPE_PRECISION (TREE_TYPE (@2)))))\n+  (bit_and (convert @0) (lshift { build_minus_one_cst (type); } @1))))\n \n /* Optimize (x << c) >> c into x & ((unsigned)-1 >> c) for unsigned\n    types.  */"}, {"sha": "403bc8a05f510a97417e3e05139cd5565ae764c5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f26916c2acdda19e36e57fff97b296897ebcba76", "patch": "@@ -1,3 +1,8 @@\n+2019-01-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/93118\n+\t* gcc.dg/tree-ssa/pr93118.c: New test.\n+\n 2020-01-07  Martin Liska  <mliska@suse.cz>\n \n \tPR tree-optimization/92860"}, {"sha": "92e9310bf6bb188ddf69ed9c5df8dfe5a092ccf8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93118.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93118.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26916c2acdda19e36e57fff97b296897ebcba76/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93118.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93118.c?ref=f26916c2acdda19e36e57fff97b296897ebcba76", "patch": "@@ -0,0 +1,45 @@\n+/* PR tree-optimization/93118 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \">>\" \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"<<\" \"optimized\" } } */\n+\n+#if __SIZEOF_LONG_LONG__ == 8 && __SIZEOF_INT__ == 4 && __CHAR_BIT__ == 8\n+unsigned long long\n+foo (unsigned long long a)\n+{\n+  unsigned long long b = a >> 32;\n+  int c = b;\n+  unsigned long long d = c;\n+  return d << 32;\n+}\n+\n+unsigned long long\n+bar (unsigned long long a)\n+{\n+  unsigned long long b = a >> 32;\n+  unsigned c = b;\n+  unsigned long long d = c;\n+  return d << 32;\n+}\n+\n+unsigned long long\n+baz (long long a)\n+{\n+  long long b = a >> 32;\n+  unsigned long long c = b;\n+  return c << 32;\n+}\n+\n+typedef unsigned V __attribute__((vector_size (2 * sizeof (int))));\n+typedef int W __attribute__((vector_size (2 * sizeof (int))));\n+\n+void\n+quux (W *w, V *v)\n+{\n+  W a = (W) (*v >> 16);\n+  *w = a << 16;\n+}\n+#else\n+int i;\n+#endif"}]}