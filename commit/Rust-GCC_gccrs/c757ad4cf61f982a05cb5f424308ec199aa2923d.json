{"sha": "c757ad4cf61f982a05cb5f424308ec199aa2923d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc1N2FkNGNmNjFmOTgyYTA1Y2I1ZjQyNDMwOGVjMTk5YWEyOTIzZA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-16T12:11:36Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-16T12:11:36Z"}, "message": "[PR c++/81060] ICE with invalid initialzer via lambda\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg01323.html\n\tPR c++/81060\n\t* decl.c (xref_tag_1): Push lambda into current scope.\n\t* name-lookup.c (do_pushtag): Don't deal with ts_lambda here.\n\n\tPR c++81060\n\t* g++.dg/cpp0x/lambda/lambda-template13.C: Avoid undefined\n\ttemplate using local type error.\n\t* g++.dg/cpp0x/pr81060.C: New.\n\nFrom-SVN: r254817", "tree": {"sha": "b6a8e8b5fa835fe7c7f6def7b55f34b44dbfa080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6a8e8b5fa835fe7c7f6def7b55f34b44dbfa080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c757ad4cf61f982a05cb5f424308ec199aa2923d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c757ad4cf61f982a05cb5f424308ec199aa2923d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c757ad4cf61f982a05cb5f424308ec199aa2923d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c757ad4cf61f982a05cb5f424308ec199aa2923d/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81825e283f6cec28db73af9769602b953d683e3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81825e283f6cec28db73af9769602b953d683e3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81825e283f6cec28db73af9769602b953d683e3e"}], "stats": {"total": 40, "additions": 32, "deletions": 8}, "files": [{"sha": "31de2a66182a647d3988f06f33d375f297db6f5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -1,3 +1,9 @@\n+2017-11-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/81060\n+\t* decl.c (xref_tag_1): Push lambda into current scope.\n+\t* name-lookup.c (do_pushtag): Don't deal with ts_lambda here.\n+\n 2017-11-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/81574"}, {"sha": "54e06568e4662b343691e261e2ca06e2695935e6", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -13546,8 +13546,12 @@ xref_tag_1 (enum tag_types tag_code, tree name,\n \t  t = make_class_type (code);\n \t  TYPE_CONTEXT (t) = context;\n \t  if (scope == ts_lambda)\n-\t    /* Mark it as a lambda type.  */\n-\t    CLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n+\t    {\n+\t      /* Mark it as a lambda type.  */\n+\t      CLASSTYPE_LAMBDA_EXPR (t) = error_mark_node;\n+\t      /* And push it into current scope.  */\n+\t      scope = ts_current;\n+\t    }\n \t  t = pushtag (name, t, scope);\n \t}\n     }"}, {"sha": "e9d44e4a594dd43befeb2ef45678898ab9f62b75", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -6242,9 +6242,7 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t    view of the language.  */\n \t || (b->kind == sk_template_parms\n \t     && (b->explicit_spec_p || scope == ts_global))\n-\t /* Pushing into a class is ok for lambdas or when we want current  */\n \t || (b->kind == sk_class\n-\t     && scope != ts_lambda\n \t     && (scope != ts_current\n \t\t /* We may be defining a new type in the initializer\n \t\t    of a static member variable. We allow this when\n@@ -6267,7 +6265,6 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t  tree cs = current_scope ();\n \n \t  if (scope == ts_current\n-\t      || scope == ts_lambda\n \t      || (cs && TREE_CODE (cs) == FUNCTION_DECL))\n \t    context = cs;\n \t  else if (cs && TYPE_P (cs))\n@@ -6304,8 +6301,7 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \n       if (b->kind == sk_class)\n \t{\n-\t  if (!TYPE_BEING_DEFINED (current_class_type)\n-\t      && scope != ts_lambda)\n+\t  if (!TYPE_BEING_DEFINED (current_class_type))\n \t    return error_mark_node;\n \n \t  if (!PROCESSING_REAL_TEMPLATE_DECL_P ())"}, {"sha": "36a8449a81558aca53e6306fb719c52782fe9219", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -1,3 +1,10 @@\n+2017-11-16  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++81060\n+\t* g++.dg/cpp0x/lambda/lambda-template13.C: Avoid undefined\n+\ttemplate using local type error.\n+\t* g++.dg/cpp0x/pr81060.C: New.\n+\n 2017-11-16  Wilco Dijkstra  <wdijkstr@arm.com>\n \t    Jackson Woodruff  <jackson.woodruff@arm.com>\n "}, {"sha": "8aaf5b2800f0c3c4198f9e3868462627b6214595", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-template13.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-template13.C?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -4,7 +4,7 @@\n struct function\n {\n   template < typename _Functor>\n-  function (_Functor);\n+  function (_Functor) {}\n };\n \n template <class U>"}, {"sha": "67b2b38596abefc6ecfc7e7963563f1891bb6007", "filename": "gcc/testsuite/g++.dg/cpp0x/pr81060.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81060.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c757ad4cf61f982a05cb5f424308ec199aa2923d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81060.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr81060.C?ref=c757ad4cf61f982a05cb5f424308ec199aa2923d", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile  { target c++11 } }\n+// PR 81050 ICE in invalid after error\n+\n+template<typename... T> struct A\n+{\n+  static const int i;\n+};\n+\n+template<typename... T>\n+const int A<T>::i // { dg-error \"template definition of non-template\" }\n+= []{ return 0; }(); // BOOM!"}]}