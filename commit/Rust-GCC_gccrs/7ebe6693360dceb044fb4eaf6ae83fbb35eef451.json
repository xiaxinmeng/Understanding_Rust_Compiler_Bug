{"sha": "7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "node_id": "C_kwDOANBUbNoAKDdlYmU2NjkzMzYwZGNlYjA0NGZiNGVhZjZhZTgzZmJiMzVlZWY0NTE", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-12T14:26:46Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-09-13T07:37:40Z"}, "message": "const generics: Forbid default values in Functions, Traits and Impls", "tree": {"sha": "bc08bb4f44f5b66381d2f4c29adb91cfb81b747d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc08bb4f44f5b66381d2f4c29adb91cfb81b747d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f252b4093666cf1e3d948b22f00fc12bf283a83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f252b4093666cf1e3d948b22f00fc12bf283a83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f252b4093666cf1e3d948b22f00fc12bf283a83f"}], "stats": {"total": 134, "additions": 128, "deletions": 6}, "files": [{"sha": "a2a6dc21f261ee99ed99c594fa5204e03fbe8356", "filename": "gcc/rust/checks/errors/rust-const-checker.cc", "status": "modified", "additions": 91, "deletions": 6, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.cc?ref=7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "patch": "@@ -52,6 +52,67 @@ ConstChecker::is_const_extern_fn (HIR::ExternalFunctionItem &fn)\n     });\n }\n \n+const char *\n+ConstChecker::ctx_to_str (ConstGenericCtx ctx)\n+{\n+  switch (ctx)\n+    {\n+    case ConstGenericCtx::Function:\n+      return \"function\";\n+    case ConstGenericCtx::TypeAlias:\n+      return \"type alias\";\n+    case ConstGenericCtx::Struct:\n+      return \"struct\";\n+    case ConstGenericCtx::Enum:\n+      return \"enum\";\n+    case ConstGenericCtx::Union:\n+      return \"union\";\n+    case ConstGenericCtx::Trait:\n+      return \"trait\";\n+    case ConstGenericCtx::Impl:\n+      return \"impl\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+bool\n+ConstChecker::ctx_allows_default (ConstGenericCtx ctx)\n+{\n+  switch (ctx)\n+    {\n+    case ConstGenericCtx::TypeAlias:\n+    case ConstGenericCtx::Struct:\n+    case ConstGenericCtx::Enum:\n+    case ConstGenericCtx::Trait:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n+\n+void\n+ConstChecker::check_default_const_generics (\n+  std::vector<std::unique_ptr<GenericParam>> &params, ConstGenericCtx context)\n+{\n+  if (ctx_allows_default (context))\n+    return;\n+\n+  for (auto &param : params)\n+    {\n+      if (param->get_kind () == GenericParam::GenericKind::CONST)\n+\t{\n+\t  auto const_param = static_cast<ConstGenericParam *> (param.get ());\n+\t  if (const_param->has_default_expression ())\n+\t    rust_error_at (\n+\t      param->get_locus (),\n+\t      \"default values for const generic parameters are not \"\n+\t      \"allowed in %qs items\",\n+\t      ctx_to_str (context));\n+\t}\n+    }\n+}\n+\n void\n ConstChecker::visit (Lifetime &lifetime)\n {}\n@@ -560,6 +621,9 @@ ConstChecker::visit (Function &function)\n   if (const_fn)\n     const_context.enter (function.get_mappings ().get_hirid ());\n \n+  check_default_const_generics (function.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Function);\n+\n   for (auto &param : function.get_function_params ())\n     param.get_type ()->accept_vis (*this);\n \n@@ -571,18 +635,27 @@ ConstChecker::visit (Function &function)\n \n void\n ConstChecker::visit (TypeAlias &type_alias)\n-{}\n+{\n+  check_default_const_generics (type_alias.get_generic_params (),\n+\t\t\t\tConstGenericCtx::TypeAlias);\n+}\n \n void\n ConstChecker::visit (StructStruct &struct_item)\n-{}\n+{\n+  check_default_const_generics (struct_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Struct);\n+}\n \n void\n ConstChecker::visit (TupleStruct &tuple_struct)\n-{}\n+{\n+  check_default_const_generics (tuple_struct.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Struct);\n+}\n \n void\n-ConstChecker::visit (EnumItem &item)\n+ConstChecker::visit (EnumItem &enum_item)\n {}\n \n void\n@@ -605,11 +678,17 @@ ConstChecker::visit (EnumItemDiscriminant &item)\n \n void\n ConstChecker::visit (Enum &enum_item)\n-{}\n+{\n+  check_default_const_generics (enum_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Enum);\n+}\n \n void\n ConstChecker::visit (Union &union_item)\n-{}\n+{\n+  check_default_const_generics (union_item.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Union);\n+}\n \n void\n ConstChecker::visit (ConstantItem &const_item)\n@@ -652,13 +731,19 @@ ConstChecker::visit (TraitItemType &item)\n void\n ConstChecker::visit (Trait &trait)\n {\n+  check_default_const_generics (trait.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Trait);\n+\n   for (auto &item : trait.get_trait_items ())\n     item->accept_vis (*this);\n }\n \n void\n ConstChecker::visit (ImplBlock &impl)\n {\n+  check_default_const_generics (impl.get_generic_params (),\n+\t\t\t\tConstGenericCtx::Impl);\n+\n   for (auto &item : impl.get_impl_items ())\n     item->accept_vis (*this);\n }"}, {"sha": "90b675b94b8e4b6c7aca4346e5c2befa35994668", "filename": "gcc/rust/checks/errors/rust-const-checker.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-const-checker.h?ref=7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "patch": "@@ -46,6 +46,31 @@ class ConstChecker : public HIRFullVisitor\n    */\n   void check_function_call (HirId fn_id, Location locus);\n \n+  /* All possible const contexts */\n+  enum class ConstGenericCtx\n+  {\n+    Function,\n+    TypeAlias,\n+    Struct,\n+    Enum,\n+    Union,\n+    Trait,\n+    Impl\n+  };\n+\n+  /* Get the string representation of a const context */\n+  const char *ctx_to_str (ConstGenericCtx ctx);\n+\n+  /* Check if a const context allows default values */\n+  bool ctx_allows_default (ConstGenericCtx ctx);\n+\n+  /**\n+   * Check that const generic parameters only contains defaults in allowed\n+   * contexts\n+   */\n+  void check_default_const_generics (\n+    std::vector<std::unique_ptr<GenericParam>> &param, ConstGenericCtx context);\n+\n   StackedContexts<HirId> const_context;\n   Resolver::Resolver &resolver;\n   Analysis::Mappings &mappings;"}, {"sha": "b0bb2624a2c3fea6712071d2cf424681f28e4187", "filename": "gcc/testsuite/rust/compile/const_generics_8.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ebe6693360dceb044fb4eaf6ae83fbb35eef451/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fconst_generics_8.rs?ref=7ebe6693360dceb044fb4eaf6ae83fbb35eef451", "patch": "@@ -0,0 +1,12 @@\n+struct Bidule<const N: i32 = 15> {}\n+enum Bidoule<const N: i32 = 15> {}\n+\n+// Note - missing generic parameter - needs name resolution on const generics\n+type Bipboupe<const N: i32 = 15> = Bidule;\n+trait Fooable<const N: i32 = 15> {}\n+\n+union Bidoulepe<const N: i32 = 15> {} // { dg-error \"default values for const generic parameters are not allowed in .union. items\" }\n+fn const_default<const N: i32 = 15>() {} // { dg-error \"default values for const generic parameters are not allowed in .function. items\" }\n+\n+// Note - missing generic parameter - needs name resolution on const generics\n+impl<const N: i32 = 15> Bidule {} // { dg-error \"default values for const generic parameters are not allowed in .impl. items\" }"}]}