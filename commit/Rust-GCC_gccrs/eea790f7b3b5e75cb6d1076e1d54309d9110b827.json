{"sha": "eea790f7b3b5e75cb6d1076e1d54309d9110b827", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVhNzkwZjdiM2I1ZTc1Y2I2ZDEwNzZlMWQ1NDMwOWQ5MTEwYjgyNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@fillmore.constant.com", "date": "2001-05-08T23:53:55Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-05-08T23:53:55Z"}, "message": "std_cstring.h (memchr): Correct definitions.\n\n\n2001-05-08  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n\n\t* include/c_std/bits/std_cstring.h (memchr): Correct definitions.\n\t(strchr): Same.\n\t(strpbrk): Same.\n\t(strrchr): Same.\n\t(strstr): Same.\n\t* include/c_std/bits/std_cwchar.h (wcschr): Same.\n\t(wcsbrk): Same.\n\t(wcsrchr): Same.\n\t(wcsstr): Same.\n\t(wmemchr): Same.\n\t* testsuite/21_strings/c_strings.cc: Add tests.\n\nFrom-SVN: r41919", "tree": {"sha": "ef0a7b44fde733cac61a62c54cb1c92637a62271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef0a7b44fde733cac61a62c54cb1c92637a62271"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eea790f7b3b5e75cb6d1076e1d54309d9110b827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea790f7b3b5e75cb6d1076e1d54309d9110b827", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eea790f7b3b5e75cb6d1076e1d54309d9110b827", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eea790f7b3b5e75cb6d1076e1d54309d9110b827/comments", "author": null, "committer": null, "parents": [{"sha": "94bd63e512d48ff89580191b55a95cc39f370bdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94bd63e512d48ff89580191b55a95cc39f370bdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94bd63e512d48ff89580191b55a95cc39f370bdb"}], "stats": {"total": 151, "additions": 110, "deletions": 41}, "files": [{"sha": "7026644405f4b37c4b6d08a125e06a5b911233cd", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=eea790f7b3b5e75cb6d1076e1d54309d9110b827", "patch": "@@ -1,3 +1,17 @@\n+2001-05-08  Benjamin Kosnik  <bkoz@fillmore.constant.com>\n+\n+\t* include/c_std/bits/std_cstring.h (memchr): Correct definitions.\n+\t(strchr): Same.\n+\t(strpbrk): Same.\n+\t(strrchr): Same.\n+\t(strstr): Same.\n+\t* include/c_std/bits/std_cwchar.h (wcschr): Same.\n+\t(wcsbrk): Same.\n+\t(wcsrchr): Same.\n+\t(wcsstr): Same.\n+\t(wmemchr): Same.\n+\t* testsuite/21_strings/c_strings.cc: Add tests.\n+\t\n 2001-05-07  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tlibstdc++/2523"}, {"sha": "0134eb22d8f417e1f2ed418df6b851b1939e0df5", "filename": "libstdc++-v3/include/c_std/bits/std_cstring.h", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cstring.h?ref=eea790f7b3b5e75cb6d1076e1d54309d9110b827", "patch": "@@ -79,38 +79,51 @@ namespace std\n   extern \"C\" int strcoll(const char*, const char*); \n   extern \"C\" int strncmp(const char*, const char*, size_t); \n   extern \"C\" size_t strxfrm(char*, const char*, size_t); \n-  extern \"C\" const void* memchr(const void*, int, size_t); \n+\n+  inline const void*\n+  memchr(const void* __p, int __c, size_t __n)\n+  { return const_cast<const void*>(::memchr(__p, __c, __n)); }\n+\n   inline void*\n   memchr(void* __p, int __c, size_t __n)\n-  {\n-    return const_cast<void*>(memchr(const_cast<const void*>(__p), __c, __n));\n-  }\n-  extern \"C\" const char* strchr(const char*, int); \n+  { return ::memchr(const_cast<const void*>(__p), __c, __n); }\n+\n+  inline const char*\n+  strchr(const char* __s1, int __n)\n+  { return const_cast<const char*>(::strchr(__s1, __n)); }\n+\n   inline char*\n   strchr(char* __s1, int __n)\n-  {\n-    return const_cast<char*>(strchr(const_cast<const char*>(__s1), __n));\n-  }\n+  { return ::strchr(const_cast<const char*>(__s1), __n); }\n+\n   extern \"C\" size_t strcspn(const char*, const char*); \n-  extern \"C\" const char* strpbrk(const char*, const char*); \n+\n+  inline const char*\n+  strpbrk(const char* __s1, const char* __s2)\n+  { return const_cast<char*>(::strpbrk(__s1, __s2)); }\n+\n   inline char*\n   strpbrk(char* __s1, const char* __s2)\n-  {\n-    return const_cast<char*>(strpbrk(const_cast<const char*>(__s1), __s2));\n-  }\n-  extern \"C\" const char* strrchr(const char*, int); \n+  { return ::strpbrk(const_cast<const char*>(__s1), __s2); }\n+\n+  inline const char*\n+  strrchr(const char* __s1, int __n)\n+  { return const_cast<char*>(::strrchr(__s1, __n)); }\n+\n   inline char*\n   strrchr(char* __s1, int __n)\n-  {\n-    return const_cast<char*>(strrchr(const_cast<const char*>(__s1), __n));\n-  }\n+  { return ::strrchr(const_cast<const char*>(__s1), __n); }\n+\n   extern \"C\" size_t strspn(const char*, const char*); \n-  extern \"C\" const char* strstr(const char*, const char*); \n+\n+  inline const char*\n+  strstr(const char* __s1, const char* __s2)\n+  { return const_cast<char*>(::strstr(__s1, __s2)); }\n+\n   inline char*\n   strstr(char* __s1, const char* __s2)\n-  {\n-    return const_cast<char*>(strstr(const_cast<const char*>(__s1), __s2));\n-  }\n+  { return ::strstr(const_cast<const char*>(__s1), __s2); }\n+\n   extern \"C\" char* strtok(char*, const char*); \n   extern \"C\" void* memset(void*, int, size_t); \n   extern \"C\" char* strerror(int); "}, {"sha": "276593547710118cf3f7801196ad2b8d28273442", "filename": "libstdc++-v3/include/c_std/bits/std_cwchar.h", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fbits%2Fstd_cwchar.h?ref=eea790f7b3b5e75cb6d1076e1d54309d9110b827", "patch": "@@ -156,40 +156,54 @@ namespace std\n   extern \"C\" int wcscoll(const wchar_t*, const wchar_t*); \n   extern \"C\" int wcsncmp(const wchar_t*, const wchar_t*, size_t); \n   extern \"C\" size_t wcsxfrm(wchar_t*, const wchar_t*, size_t); \n-  extern \"C\" const wchar_t* wcschr(const wchar_t*, wchar_t); \n+\n+  inline const wchar_t*\n+  wcschr(const wchar_t* __p, wchar_t __c)\n+  { return const_cast<const wchar_t*>(::wcschr(__p, __c)); }\n+\n   inline wchar_t*\n   wcschr(wchar_t* __p, wchar_t __c)\n-  {\n-    return const_cast<wchar_t*>(wcschr(const_cast<const wchar_t*>(__p), __c));\n-  }\n+  { return ::wcschr(const_cast<const wchar_t*>(__p), __c); }\n+\n   extern \"C\" size_t wcscspn(const wchar_t*, const wchar_t*); \n   extern \"C\" size_t wcslen(const wchar_t*); \n-  extern \"C\" const wchar_t* wcspbrk(const wchar_t*, const wchar_t*); \n+\n+  inline const wchar_t*\n+  wcspbrk(const wchar_t* __s1, wchar_t* __s2)\n+  { return const_cast<const wchar_t*>(::wcspbrk(__s1, __s2)); }\n+\n   inline wchar_t*\n   wcspbrk(wchar_t* __s1, wchar_t* __s2)\n-  {\n-    return const_cast<wchar_t*>(wcspbrk(const_cast<const wchar_t*>(__s1), __s2));\n-  }\n-  extern \"C\" const wchar_t* wcsrchr(const wchar_t*, wchar_t); \n+  { return ::wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }\n+\n+  inline const wchar_t*\n+  wcsrchr(const wchar_t* __p, wchar_t __c)\n+  { return const_cast<const wchar_t*>(::wcsrchr(__p, __c)); }\n+\n   inline wchar_t*\n   wcsrchr(wchar_t* __p, wchar_t __c)\n-  {\n-    return const_cast<wchar_t*>(wcsrchr(const_cast<const wchar_t*>(__p), __c));\n-  }\n+  { return ::wcsrchr(const_cast<const wchar_t*>(__p), __c); }\n+\n   extern \"C\" size_t wcsspn(const wchar_t*, const wchar_t*); \n-  extern \"C\" const wchar_t* wcsstr(const wchar_t*, const wchar_t*); \n+\n+  inline const wchar_t*\n+  wcsstr(const wchar_t* __s1, wchar_t* __s2)\n+  { return const_cast<const wchar_t*>(::wcsstr(__s1, __s2)); }\n+\n   inline wchar_t*\n   wcsstr(wchar_t* __s1, wchar_t* __s2)\n-  {\n-    return const_cast<wchar_t*>(wcsstr(const_cast<const wchar_t*>(__s1), __s2));\n-  }\n+  { return ::wcsstr(const_cast<const wchar_t*>(__s1), __s2); }\n+\n   extern \"C\" wchar_t* wcstok(wchar_t*, const wchar_t*, wchar_t**); \n-  extern \"C\" const wchar_t* wmemchr(const wchar_t*, wchar_t, size_t);\n+\n+  inline const wchar_t*\n+  wmemchr(const wchar_t* __p, wchar_t __c, size_t __n)\n+  { return const_cast<wchar_t*>(::wmemchr(__p, __c, __n)); }\n+\n   inline wchar_t*\n   wmemchr(wchar_t* __p, wchar_t __c, size_t __n)\n-  {\n-    return const_cast<wchar_t*>(wmemchr(const_cast<const wchar_t*>(__p), __c, __n));\n-  }\n+  { return ::wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }\n+\n   extern \"C\" int wmemcmp(const wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemcpy(wchar_t*, const wchar_t*, size_t); \n   extern \"C\" wchar_t* wmemmove(wchar_t*, const wchar_t*, size_t); "}, {"sha": "e8536b7d137678d4375499400a58060311fd15f0", "filename": "libstdc++-v3/testsuite/21_strings/c_strings.cc", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eea790f7b3b5e75cb6d1076e1d54309d9110b827/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fc_strings.cc?ref=eea790f7b3b5e75cb6d1076e1d54309d9110b827", "patch": "@@ -24,7 +24,7 @@\n #include <cstring>\n #include <cwchar>\n \n-int main()\n+void test01()\n {\n   bool test = true;\n   char c = 'a';\n@@ -62,6 +62,34 @@ int main()\n   // void* memchr(      void* s, int c, size_t n);\n   cv = std::memchr(cv, 'a', 3);\n   v = std::memchr(v, 'a', 3);\n+}\n+\n+void test02()\n+{\n+  using namespace std;\n+\n+  const char* ccarray1 = \"san francisco roof garden inspectors\";\n+  const char* ccarray2 = \"san francisco sunny-day park inspectors\";\n+  char carray[30];\n+  strcpy(carray, ccarray1);\n+  void* v;\n+  const void* cv;\n+ \n+  memchr(cv, '/', 3);\n+  strchr(ccarray1, '/');\n+  strpbrk(ccarray1, ccarray2);\n+  strrchr(ccarray1, 'c');\n+  strstr(carray, carray);\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n \n   return 0;\n }\n+\n+\n+\n+"}]}