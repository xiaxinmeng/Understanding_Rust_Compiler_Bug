{"sha": "30cb87a09beeca0cbdee7347c2d993d1b90446d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjYjg3YTA5YmVlY2EwY2JkZWU3MzQ3YzJkOTkzZDFiOTA0NDZkMg==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2006-01-21T14:58:40Z"}, "committer": {"name": "Kenneth Zadeck", "email": "zadeck@gcc.gnu.org", "date": "2006-01-21T14:58:40Z"}, "message": "df-scan.c (problem_SCAN): Added NULL reset function.\n\n2005-01-21  Kenneth Zadeck <zadeck@naturalbridge.com>\n\n\t* df-scan.c (problem_SCAN): Added NULL reset function.\n\t(df_scan_reset_blocks): Added code to call reset block function\n\t(df_bb_refs_delete) Fixed comment.\n\t(df_insn_refs_delete): Made tolerant of deleting non existent info\n\tfor dataflow problems that need to be reset.\n\t* df-core.c (df_set_blocks): Ditto.\n\t* df.h (struct df_problem): Added reset_fun.\n\t* df-problems.c (problem_RU, problem_RD, problem_LR, problem_UR,\n\tproblem_UREC, problem_CHAIN, problem_RI): Initialized reset_fun field.\n\t(df_chain_insn_reset, df_chain_bb_reset, df_chain_reset): New\n\tfunctions to clear out all references to def-use or use-def chains.\n\nFrom-SVN: r110066", "tree": {"sha": "64b96c5e14360cf5781d231fca9c461727ae0ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64b96c5e14360cf5781d231fca9c461727ae0ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30cb87a09beeca0cbdee7347c2d993d1b90446d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cb87a09beeca0cbdee7347c2d993d1b90446d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30cb87a09beeca0cbdee7347c2d993d1b90446d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30cb87a09beeca0cbdee7347c2d993d1b90446d2/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68ea355b5d9b51b994e0780d8392f7542262072f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68ea355b5d9b51b994e0780d8392f7542262072f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68ea355b5d9b51b994e0780d8392f7542262072f"}], "stats": {"total": 216, "additions": 209, "deletions": 7}, "files": [{"sha": "8874f87c856cb5eb5134c7d91a7186589509c38d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30cb87a09beeca0cbdee7347c2d993d1b90446d2", "patch": "@@ -1,3 +1,17 @@\n+2005-01-21  Kenneth Zadeck <zadeck@naturalbridge.com>\n+\n+\t* df-scan.c (problem_SCAN): Added NULL reset function.\n+\t(df_scan_reset_blocks): Added code to call reset block function\n+\t(df_bb_refs_delete) Fixed comment.\n+\t(df_insn_refs_delete): Made tolerant of deleting non existent info\n+\tfor dataflow problems that need to be reset.\n+\t* df-core.c (df_set_blocks): Ditto.\n+\t* df.h (struct df_problem): Added reset_fun.\n+\t* df-problems.c (problem_RU, problem_RD, problem_LR, problem_UR,\n+\tproblem_UREC, problem_CHAIN, problem_RI): Initialized reset_fun field.\n+\t(df_chain_insn_reset, df_chain_bb_reset, df_chain_reset): New\n+\tfunctions to clear out all references to def-use or use-def chains.\n+\n 2006-01-21  Ben Elliston  <bje@au.ibm.com>\n \n \t* varasm.c (assemble_real): Initialise data array."}, {"sha": "a0ed23caa169e00da43e8e0d94dc3e397f2d97b7", "filename": "gcc/df-core.c", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-core.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-core.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-core.c?ref=30cb87a09beeca0cbdee7347c2d993d1b90446d2", "patch": "@@ -292,6 +292,8 @@ are write-only operations.\n static struct df *ddf = NULL;\n struct df *shared_df = NULL;\n \n+static void * df_get_bb_info (struct dataflow *, unsigned int);\n+static void df_set_bb_info (struct dataflow *, unsigned int, void *);\n /*----------------------------------------------------------------------------\n   Functions to create, destroy and manipulate an instance of df.\n ----------------------------------------------------------------------------*/\n@@ -358,27 +360,65 @@ df_set_blocks (struct df *df, bitmap blocks)\n \t{\n \t  int p;\n \t  bitmap diff = BITMAP_ALLOC (NULL);\n+\t  bitmap all = BITMAP_ALLOC (NULL);\n \t  bitmap_and_compl (diff, df->blocks_to_analyze, blocks);\n-\t  for (p = 0; p < df->num_problems_defined; p++)\n+\t  for (p = df->num_problems_defined - 1; p >= 0 ;p--)\n \t    {\n \t      struct dataflow *dflow = df->problems_in_order[p];\n-\t      if (*dflow->problem->free_bb_fun)\n+\t      if (*dflow->problem->reset_fun)\n+\t\t(*dflow->problem->reset_fun) (dflow, df->blocks_to_analyze);\n+\t      else if (*dflow->problem->free_bb_fun)\n \t\t{\n \t\t  bitmap_iterator bi;\n \t\t  unsigned int bb_index;\n \t\t  \n \t\t  EXECUTE_IF_SET_IN_BITMAP (diff, 0, bb_index, bi)\n \t\t    {\n \t\t      basic_block bb = BASIC_BLOCK (bb_index);\n-\t\t      (*dflow->problem->free_bb_fun) (dflow, bb, diff);\n+\t\t      if (bb)\n+\t\t\t{\n+\t\t\t  (*dflow->problem->free_bb_fun) \n+\t\t\t    (dflow, bb, df_get_bb_info (dflow, bb_index));\n+\t\t\t  df_set_bb_info (dflow, bb_index, NULL); \n+\t\t\t}\n \t\t    }\n \t\t}\n \t    }\n \n+\t  BITMAP_FREE (all);\n \t  BITMAP_FREE (diff);\n \t}\n       else\n-\tdf->blocks_to_analyze = BITMAP_ALLOC (NULL);\n+\t{\n+\t  /* If we have not actually run scanning before, do not try\n+\t     to clear anything.  */\n+\t  struct dataflow *scan_dflow = df->problems_by_index [DF_SCAN];\n+\t  if (scan_dflow->problem_data)\n+\t    {\n+\t      bitmap blocks_to_reset = NULL;\n+\t      int p;\n+\t      for (p = df->num_problems_defined - 1; p >= 0 ;p--)\n+\t\t{\n+\t\t  struct dataflow *dflow = df->problems_in_order[p];\n+\t\t  if (*dflow->problem->reset_fun)\n+\t\t    {\n+\t\t      if (!blocks_to_reset)\n+\t\t\t{\n+\t\t\t  basic_block bb;\n+\t\t\t  blocks_to_reset = BITMAP_ALLOC (NULL);\n+\t\t\t  FOR_ALL_BB(bb)\n+\t\t\t    {\n+\t\t\t      bitmap_set_bit (blocks_to_reset, bb->index); \n+\t\t\t    }\n+\t\t\t}\n+\t\t      (*dflow->problem->reset_fun) (dflow, blocks_to_reset);\n+\t\t    }\n+\t\t}\n+\t      if (blocks_to_reset)\n+\t\tBITMAP_FREE (blocks_to_reset);\n+\t    }\n+\t  df->blocks_to_analyze = BITMAP_ALLOC (NULL);\n+\t}\n       bitmap_copy (df->blocks_to_analyze, blocks);\n     }\n   else"}, {"sha": "fdba180906eb13cf65e28bb16a42cf138691319a", "filename": "gcc/df-problems.c", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-problems.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-problems.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-problems.c?ref=30cb87a09beeca0cbdee7347c2d993d1b90446d2", "patch": "@@ -777,6 +777,7 @@ static struct df_problem problem_RU =\n   DF_RU,                      /* Problem id.  */\n   DF_BACKWARD,                /* Direction.  */\n   df_ru_alloc,                /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_ru_free_bb_info,         /* Free basic block info.  */\n   df_ru_local_compute,        /* Local compute function.  */\n   df_ru_init_solution,        /* Init the solution specific data.  */\n@@ -1269,6 +1270,7 @@ static struct df_problem problem_RD =\n   DF_RD,                      /* Problem id.  */\n   DF_FORWARD,                 /* Direction.  */\n   df_rd_alloc,                /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_rd_free_bb_info,         /* Free basic block info.  */\n   df_rd_local_compute,        /* Local compute function.  */\n   df_rd_init_solution,        /* Init the solution specific data.  */\n@@ -1655,6 +1657,7 @@ static struct df_problem problem_LR =\n   DF_LR,                      /* Problem id.  */\n   DF_BACKWARD,                /* Direction.  */\n   df_lr_alloc,                /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_lr_free_bb_info,         /* Free basic block info.  */\n   df_lr_local_compute,        /* Local compute function.  */\n   df_lr_init,                 /* Init the solution specific data.  */\n@@ -1991,6 +1994,7 @@ static struct df_problem problem_UR =\n   DF_UR,                      /* Problem id.  */\n   DF_FORWARD,                 /* Direction.  */\n   df_ur_alloc,                /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_ur_free_bb_info,         /* Free basic block info.  */\n   df_ur_local_compute,        /* Local compute function.  */\n   df_ur_init,                 /* Init the solution specific data.  */\n@@ -2615,6 +2619,7 @@ static struct df_problem problem_UREC =\n   DF_UREC,                    /* Problem id.  */\n   DF_FORWARD,                 /* Direction.  */\n   df_urec_alloc,              /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_urec_free_bb_info,       /* Free basic block info.  */\n   df_urec_local_compute,      /* Local compute function.  */\n   df_urec_init,               /* Init the solution specific data.  */\n@@ -2702,6 +2707,114 @@ df_chain_alloc (struct dataflow *dflow,\n }\n \n \n+/* Reset all def_use and use_def chains in INSN.  */\n+\n+static void \n+df_chain_insn_reset (struct dataflow *dflow, rtx insn)\n+{\n+  struct df *df = dflow->df;\n+  struct df_chain_problem_data *problem_data =\n+    (struct df_chain_problem_data *) dflow->problem_data;\n+  unsigned int uid = INSN_UID (insn);\n+  struct df_insn_info *insn_info = NULL;\n+  struct df_ref *ref;\n+\n+  if (uid < df->insns_size)\n+    insn_info = DF_INSN_UID_GET (df, uid);\n+\n+  if (insn_info)\n+    {\n+      if (problem_data->flags & DF_DU_CHAIN)\n+\t{\n+\t  ref = insn_info->defs;\n+\t  while (ref)\n+\t    {\n+\t      ref->chain = NULL;\n+\t      ref = ref->next_ref;\n+\t    }\n+\t}\n+\n+      if (problem_data->flags & DF_UD_CHAIN)\n+\t{\n+\t  ref = insn_info->uses;\n+\t  while (ref) \n+\t    {\n+\t      ref->chain = NULL;\n+\t      ref = ref->next_ref;\n+\t    }\n+\t}\n+    }\n+}\n+\n+\n+/* Reset all def_use and use_def chains in basic block.  */\n+\n+static void \n+df_chain_bb_reset (struct dataflow *dflow, unsigned int bb_index)\n+{\n+  struct df *df = dflow->df; \n+  struct df_chain_problem_data *problem_data =\n+    (struct df_chain_problem_data *) dflow->problem_data;\n+  rtx insn;\n+  basic_block bb = BASIC_BLOCK (bb_index);\n+\n+  /* Some one deleted the basic block out from under us.  */\n+  if (!bb)\n+    return;\n+\n+  FOR_BB_INSNS (bb, insn)\n+    {\n+      if (INSN_P (insn))\n+\t{\n+\t  /* Record defs within INSN.  */\n+\t  df_chain_insn_reset (dflow, insn);\n+\t}\n+    }\n+  \n+  /* Get rid of any chains in artifical uses or defs.  */\n+  if (problem_data->flags & DF_DU_CHAIN)\n+    {\n+      struct df_ref *def;\n+      def = df_get_artificial_defs (df, bb_index);\n+      while (def)\n+\t{\n+\t  def->chain = NULL;\n+\t  def = def->next_ref;\n+\t}\n+    }\n+\n+  if (problem_data->flags & DF_UD_CHAIN)\n+    {\n+      struct df_ref *use;\n+      use = df_get_artificial_uses (df, bb_index);\n+      while (use)\n+\t{\n+\t  use->chain = NULL;\n+\t  use = use->next_ref;\n+\t}\n+    }\n+}\n+\n+\n+/* Reset all of the chains when the set of basic blocks changes.  */\n+\n+\n+static void\n+df_chain_reset (struct dataflow *dflow, bitmap blocks_to_clear)\n+{\n+  bitmap_iterator bi;\n+  unsigned int bb_index;\n+  \n+  EXECUTE_IF_SET_IN_BITMAP (blocks_to_clear, 0, bb_index, bi)\n+    {\n+      df_chain_bb_reset (dflow, bb_index);\n+    }\n+\n+  free_alloc_pool (dflow->block_pool);\n+  dflow->block_pool = NULL;\n+}\n+\n+\n /* Create the chains for a list of USEs.  */\n \n static void\n@@ -2917,6 +3030,7 @@ static struct df_problem problem_CHAIN =\n   DF_CHAIN,                   /* Problem id.  */\n   DF_NONE,                    /* Direction.  */\n   df_chain_alloc,             /* Allocate the problem specific data.  */\n+  df_chain_reset,             /* Reset global information.  */\n   NULL,                       /* Free basic block info.  */\n   NULL,                       /* Local compute function.  */\n   NULL,                       /* Init the solution specific data.  */\n@@ -3092,6 +3206,7 @@ static struct df_problem problem_RI =\n   DF_RI,                      /* Problem id.  */\n   DF_NONE,                    /* Direction.  */\n   df_ri_alloc,                /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   NULL,                       /* Free basic block info.  */\n   df_ri_compute,              /* Local compute function.  */\n   NULL,                       /* Init the solution specific data.  */"}, {"sha": "bba89e7c891717d9b0550634b6278fce152b0c82", "filename": "gcc/df-scan.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=30cb87a09beeca0cbdee7347c2d993d1b90446d2", "patch": "@@ -304,6 +304,7 @@ static struct df_problem problem_SCAN =\n   DF_SCAN,                    /* Problem id.  */\n   DF_NONE,                    /* Direction.  */\n   df_scan_alloc,              /* Allocate the problem specific data.  */\n+  NULL,                       /* Reset global information.  */\n   df_scan_free_bb_info,       /* Free basic block info.  */\n   NULL,                       /* Local compute function.  */\n   NULL,                       /* Init the solution specific data.  */\n@@ -426,6 +427,8 @@ df_rescan_blocks (struct df *df, bitmap blocks)\n \n   if (blocks)\n     {\n+      int i;\n+\n       /* Need to assure that there are space in all of the tables.  */\n       unsigned int insn_num = get_max_uid () + 1;\n       insn_num += insn_num / 4;\n@@ -443,6 +446,24 @@ df_rescan_blocks (struct df *df, bitmap blocks)\n       df->def_info.add_refs_inline = true;\n       df->use_info.add_refs_inline = true;\n \n+      for (i = df->num_problems_defined; i; i--)\n+\t{\n+\t  bitmap blocks_to_reset = NULL;\n+\t  if (*dflow->problem->reset_fun)\n+\t    {\n+\t      if (!blocks_to_reset)\n+\t\t{\n+\t\t  blocks_to_reset = BITMAP_ALLOC (NULL);\n+\t\t  bitmap_copy (blocks_to_reset, local_blocks_to_scan);\n+\t\t  if (df->blocks_to_scan)\n+\t\t    bitmap_ior_into (blocks_to_reset, df->blocks_to_scan);\n+\t\t}\n+\t      (*dflow->problem->reset_fun) (dflow, blocks_to_reset);\n+\t    }\n+\t  if (blocks_to_reset)\n+\t    BITMAP_FREE (blocks_to_reset);\n+\t}\n+\n       df_refs_delete (dflow, local_blocks_to_scan);\n \n       /* This may be a mistake, but if an explicit blocks is passed in\n@@ -727,11 +748,14 @@ df_insn_refs_delete (struct dataflow *dflow, rtx insn)\n {\n   struct df *df = dflow->df;\n   unsigned int uid = INSN_UID (insn);\n-  struct df_insn_info *insn_info = DF_INSN_UID_GET (df, uid);\n+  struct df_insn_info *insn_info = NULL;\n   struct df_ref *ref;\n   struct df_scan_problem_data *problem_data =\n     (struct df_scan_problem_data *) dflow->problem_data;\n \n+  if (uid < df->insns_size)\n+    insn_info = DF_INSN_UID_GET (df, uid);\n+\n   if (insn_info)\n     {\n       ref = insn_info->defs;\n@@ -769,7 +793,7 @@ df_bb_refs_delete (struct dataflow *dflow, int bb_index)\n \t}\n     }\n   \n-  /* Get rid of any artifical uses.  */\n+  /* Get rid of any artifical uses or defs.  */\n   if (bb_info)\n     {\n       def = bb_info->artificial_defs;"}, {"sha": "f2e7bef787a08e4b0b3d39c6694c6a8aead7a992", "filename": "gcc/df.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30cb87a09beeca0cbdee7347c2d993d1b90446d2/gcc%2Fdf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.h?ref=30cb87a09beeca0cbdee7347c2d993d1b90446d2", "patch": "@@ -67,6 +67,14 @@ enum df_flow_dir\n /* Allocate the problem specific data.  */\n typedef void (*df_alloc_function) (struct dataflow *, bitmap);\n \n+/* This function is called if the problem has global data that needs\n+   to be cleared when ever the set of blocks changes.  The bitmap\n+   contains the set of blocks that may require special attention.\n+   This call is only made if some of the blocks are going to change.\n+   If everything is to be deleted, the wholesale deletion mechanisms\n+   apply. */\n+typedef void (*df_reset_function) (struct dataflow *, bitmap);\n+\n /* Free the basic block info.  Called from the block reordering code\n    to get rid of the blocks that have been squished down.   */\n typedef void (*df_free_bb_function) (struct dataflow *, basic_block, void *);\n@@ -108,6 +116,7 @@ struct df_problem {\n   unsigned int id;                        \n   enum df_flow_dir dir;\t\t\t/* Dataflow direction.  */\n   df_alloc_function alloc_fun;\n+  df_reset_function reset_fun;\n   df_free_bb_function free_bb_fun;\n   df_local_compute_function local_compute_fun;\n   df_init_function init_fun;\n@@ -216,7 +225,7 @@ struct df_ref\n   basic_block bb;               /* Basic block containing the instruction. */\n   rtx insn;\t\t\t/* Insn containing ref.  NB: THIS MAY BE NULL.  */\n   rtx *loc;\t\t\t/* The location of the reg.  */\n-  struct df_link *chain;\t/* Head of def-use, use-def or bi chain.  */\n+  struct df_link *chain;\t/* Head of def-use, use-def.  */\n   unsigned int id;\t\t/* Location in table.  */\n   enum df_ref_type type;\t/* Type of ref.  */\n   enum df_ref_flags flags;\t/* Various flags.  */"}]}