{"sha": "0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmYzM0YWQxMjkzYTVlMTlmMWRjNjdjNDYxYzU4ZDk5MjIyYWM5ZA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-13T08:04:33Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2020-06-13T08:04:33Z"}, "message": "Disable -Wstringop-overflow warning after checking code path of caller.\n\nThe warning that is disabled, only on this single line, has been\ninspected and found to be not applicable; it is known that the size\nof the buffer is safe.\n\nlibgfortran/ChangeLog:\n\n2020-06-13  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR libfortran/95313\n\t* io/write.c (ztoa_big): Disable -Wstringop-overflow for one\n\tline.", "tree": {"sha": "b27cbf349ca11ddc9581070366a4b19fd0192521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b27cbf349ca11ddc9581070366a4b19fd0192521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d/comments", "author": null, "committer": null, "parents": [{"sha": "8e3b453e0877288685695ca3e927a2da3b5f5b78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e3b453e0877288685695ca3e927a2da3b5f5b78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e3b453e0877288685695ca3e927a2da3b5f5b78"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "432f5472aebc2256323b1010832c290de71795d3", "filename": "gcc/testsuite/gfortran.dg/finalize_36.f90", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_36.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_36.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ffinalize_36.f90?ref=0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "patch": "@@ -0,0 +1,39 @@\n+! { dg-do run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! PR 94109\n+! This used to leak memory.  Test case by Antony Lewis.\n+    module debug\n+    implicit none\n+\n+    Type Tester\n+        real, dimension(:), allocatable :: Dat, Dat2\n+    end Type\n+\n+    Type TestType2\n+        Type(Tester) :: T\n+    end type TestType2\n+\n+    contains\n+\n+    subroutine Leaker\n+    class(TestType2), pointer :: ActiveState\n+    Type(Tester) :: Temp\n+\n+    allocate(Temp%Dat2(10000))\n+\n+    allocate(TestType2::ActiveState)\n+    ActiveState%T = Temp\n+    deallocate(ActiveState)\n+\n+    end subroutine\n+\n+    end module\n+\n+\n+    program run\n+    use debug\n+\n+    call Leaker()\n+\n+    end program\n+! { dg-final { scan-tree-dump-times \"__builtin_free\\\\ \\\\(ptr2\" 4 \"original\" } }"}, {"sha": "346615ed597a60517e01a30e17f7f5d0c72c9ced", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc34ad1293a5e19f1dc67c461c58d99222ac9d/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=0cfc34ad1293a5e19f1dc67c461c58d99222ac9d", "patch": "@@ -1178,7 +1178,15 @@ ztoa_big (const char *s, char *buffer, int len, GFC_UINTEGER_LARGEST *n)\n \t}\n     }\n \n+  /* write_z, which calls ztoa_big, is called from transfer.c,\n+     formatted_transfer_scalar_write.  There it is passed the kind as\n+     argument, which means a maximum of 16.  The buffer is large\n+     enough, but the compiler does not know that, so shut up the\n+     warning here.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wstringop-overflow\"\n   *q = '\\0';\n+#pragma GCC diagnostic pop\n \n   if (*n == 0)\n     return \"0\";"}]}