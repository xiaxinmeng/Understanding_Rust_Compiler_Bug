{"sha": "90051c26da7abd0999ce0afdd9471e354009b861", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAwNTFjMjZkYTdhYmQwOTk5Y2UwYWZkZDk0NzFlMzU0MDA5Yjg2MQ==", "commit": {"author": {"name": "Fritz Reese", "email": "fritzoreese@gmail.com", "date": "2016-10-25T15:24:36Z"}, "committer": {"name": "Fritz Reese", "email": "foreese@gcc.gnu.org", "date": "2016-10-25T15:24:36Z"}, "message": "Support TYPE as alias for PRINT with -fdec.\n\n\tgcc/fortran/\n\t* decl.c (gfc_match_type): New function.\n\t* match.h (gfc_match_type): New function.\n\t* match.c (gfc_match_if): Special case for one-line IFs.\n\t* gfortran.texi: Update documentation.\n\t* parse.c (decode_statement): Invoke gfc_match_type.\n\n\tgcc/testsuite/gfortran.dg/\n\t* dec_type_print.f90: New testcase.\n\nFrom-SVN: r241518", "tree": {"sha": "e01b0eb63f28905e753fbf1c8cd6160907cdfc2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e01b0eb63f28905e753fbf1c8cd6160907cdfc2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90051c26da7abd0999ce0afdd9471e354009b861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90051c26da7abd0999ce0afdd9471e354009b861", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90051c26da7abd0999ce0afdd9471e354009b861", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90051c26da7abd0999ce0afdd9471e354009b861/comments", "author": {"login": "fritzr", "id": 2230564, "node_id": "MDQ6VXNlcjIyMzA1NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2230564?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fritzr", "html_url": "https://github.com/fritzr", "followers_url": "https://api.github.com/users/fritzr/followers", "following_url": "https://api.github.com/users/fritzr/following{/other_user}", "gists_url": "https://api.github.com/users/fritzr/gists{/gist_id}", "starred_url": "https://api.github.com/users/fritzr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fritzr/subscriptions", "organizations_url": "https://api.github.com/users/fritzr/orgs", "repos_url": "https://api.github.com/users/fritzr/repos", "events_url": "https://api.github.com/users/fritzr/events{/privacy}", "received_events_url": "https://api.github.com/users/fritzr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ef14476730875df063a5788a0072984e22b7c2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef14476730875df063a5788a0072984e22b7c2ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef14476730875df063a5788a0072984e22b7c2ec"}], "stats": {"total": 220, "additions": 218, "deletions": 2}, "files": [{"sha": "986eedfde2afcc4465649c7df9709a854b89f21c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -1,3 +1,11 @@\n+2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+\n+\t* decl.c (gfc_match_type): New function.\n+\t* match.h (gfc_match_type): New function.\n+\t* match.c (gfc_match_if): Special case for one-line IFs.\n+\t* gfortran.texi: Update documentation.\n+\t* parse.c (decode_statement): Invoke gfc_match_type.\n+\n 2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n \n \t* gfortran.texi: Document."}, {"sha": "6c9d0570df73651993ee7b18ad1e62d646457f4e", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -8710,6 +8710,100 @@ gfc_match_structure_decl (void)\n     return MATCH_YES;\n }\n \n+\n+/* This function does some work to determine which matcher should be used to\n+ * match a statement beginning with \"TYPE\". This is used to disambiguate TYPE\n+ * as an alias for PRINT from derived type declarations, TYPE IS statements,\n+ * and derived type data declarations.  */\n+\n+match\n+gfc_match_type (gfc_statement *st)\n+{\n+  char name[GFC_MAX_SYMBOL_LEN + 1];\n+  match m;\n+  locus old_loc;\n+\n+  /* Requires -fdec.  */\n+  if (!flag_dec)\n+    return MATCH_NO;\n+\n+  m = gfc_match (\"type\");\n+  if (m != MATCH_YES)\n+    return m;\n+  /* If we already have an error in the buffer, it is probably from failing to\n+   * match a derived type data declaration. Let it happen.  */\n+  else if (gfc_error_flag_test ())\n+    return MATCH_NO;\n+\n+  old_loc = gfc_current_locus;\n+  *st = ST_NONE;\n+\n+  /* If we see an attribute list before anything else it's definitely a derived\n+   * type declaration.  */\n+  if (gfc_match (\" ,\") == MATCH_YES || gfc_match (\" ::\") == MATCH_YES)\n+    {\n+      gfc_current_locus = old_loc;\n+      *st = ST_DERIVED_DECL;\n+      return gfc_match_derived_decl ();\n+    }\n+\n+  /* By now \"TYPE\" has already been matched. If we do not see a name, this may\n+   * be something like \"TYPE *\" or \"TYPE <fmt>\".  */\n+  m = gfc_match_name (name);\n+  if (m != MATCH_YES)\n+    {\n+      /* Let print match if it can, otherwise throw an error from\n+       * gfc_match_derived_decl.  */\n+      gfc_current_locus = old_loc;\n+      if (gfc_match_print () == MATCH_YES)\n+\t{\n+\t  *st = ST_WRITE;\n+\t  return MATCH_YES;\n+\t}\n+      gfc_current_locus = old_loc;\n+      *st = ST_DERIVED_DECL;\n+      return gfc_match_derived_decl ();\n+    }\n+\n+  /* A derived type declaration requires an EOS. Without it, assume print.  */\n+  m = gfc_match_eos ();\n+  if (m == MATCH_NO)\n+    {\n+      /* Check manually for TYPE IS (... - this is invalid print syntax.  */\n+      if (strncmp (\"is\", name, 3) == 0\n+\t  && gfc_match (\" (\", name) == MATCH_YES)\n+\t{\n+\t  gfc_current_locus = old_loc;\n+\t  gcc_assert (gfc_match (\" is\") == MATCH_YES);\n+\t  *st = ST_TYPE_IS;\n+\t  return gfc_match_type_is ();\n+\t}\n+      gfc_current_locus = old_loc;\n+      *st = ST_WRITE;\n+      return gfc_match_print ();\n+    }\n+  else\n+    {\n+      /* By now we have \"TYPE <name> <EOS>\". Check first if the name is an\n+       * intrinsic typename - if so let gfc_match_derived_decl dump an error.\n+       * Otherwise if gfc_match_derived_decl fails it's probably an existing\n+       * symbol which can be printed.  */\n+      gfc_current_locus = old_loc;\n+      m = gfc_match_derived_decl ();\n+      if (gfc_is_intrinsic_typename (name) || m == MATCH_YES)\n+\t{\n+\t  *st = ST_DERIVED_DECL;\n+\t  return m;\n+\t}\n+      gfc_current_locus = old_loc;\n+      *st = ST_WRITE;\n+      return gfc_match_print ();\n+    }\n+\n+  return MATCH_NO;\n+}\n+\n+\n /* Match the beginning of a derived type declaration.  If a type name\n    was the result of a function, then it is possible to have a symbol\n    already to be known as a derived type yet have no components.  */"}, {"sha": "fb47c13ceaaf311b85eab0188b3c9f5635540c2f", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -1466,6 +1466,7 @@ compatibility extensions along with those enabled by @option{-std=legacy}.\n * AUTOMATIC and STATIC attributes::\n * Extended math intrinsics::\n * Form feed as whitespace::\n+* TYPE as an alias for PRINT::\n @end menu\n \n @node Old-style kind specifications\n@@ -2521,6 +2522,21 @@ though the Fortran standard does not mention this. GNU Fortran supports the\n interpretation of form feed characters in source as whitespace for\n compatibility.\n \n+@node TYPE as an alias for PRINT\n+@subsection TYPE as an alias for PRINT\n+@cindex type alias print\n+For compatibility, GNU Fortran will interpret @code{TYPE} statements as\n+@code{PRINT} statements with the flag @option{-fdec}.  With this flag asserted,\n+the following two examples are equivalent:\n+\n+@smallexample\n+TYPE *, 'hello world'\n+@end smallexample\n+\n+@smallexample\n+PRINT *, 'hello world'\n+@end smallexample\n+\n \n @node Extensions not implemented in GNU Fortran\n @section Extensions not implemented in GNU Fortran"}, {"sha": "236231e3ee69795db8677cc07c7989ae84544416", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -1622,6 +1622,9 @@ gfc_match_if (gfc_statement *if_type)\n   match (\"where\", match_simple_where, ST_WHERE)\n   match (\"write\", gfc_match_write, ST_WRITE)\n \n+  if (flag_dec)\n+    match (\"type\", gfc_match_print, ST_WRITE)\n+\n   /* The gfc_match_assignment() above may have returned a MATCH_NO\n      where the assignment was to a named constant.  Check that\n      special case here.  */"}, {"sha": "eeb26931567c6b80159ad395e2b444ab7fe7e977", "filename": "gcc/fortran/match.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fmatch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fmatch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.h?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -214,6 +214,7 @@ match gfc_match_union (void);\n match gfc_match_structure_decl (void);\n match gfc_match_derived_decl (void);\n match gfc_match_final_decl (void);\n+match gfc_match_type (gfc_statement *);\n \n match gfc_match_implicit_none (void);\n match gfc_match_implicit (void);"}, {"sha": "760d3afdb5f02aa7d299137482751f1f8facf696", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -413,6 +413,12 @@ decode_statement (void)\n   gfc_undo_symbols ();\n   gfc_current_locus = old_locus;\n \n+  /* Try to match TYPE as an alias for PRINT.  */\n+  if (gfc_match_type (&st) == MATCH_YES)\n+    return st;\n+  gfc_undo_symbols ();\n+  gfc_current_locus = old_locus;\n+\n   match (NULL, gfc_match_do, ST_DO);\n   match (NULL, gfc_match_block, ST_BLOCK);\n   match (NULL, gfc_match_associate, ST_ASSOCIATE);"}, {"sha": "a64e74d91d9670e91a708a01351c7d3ed1cbaf71", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -1,7 +1,11 @@\n 2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n \n-\tgfortran.dg/\n-\t* feed_1.f90, feed_2.f90: New testcases.\n+\t* gfortran.dg/dec_type_print.f90: New testcase.\n+\n+2016-10-25  Fritz Reese <fritzoreese@gmail.com>\n+\n+\t* gfortran.dg/feed_1.f90: New test.\n+\t* gfortran.dg/feed_2.f90: New test.\n \n 2016-10-25  Martin Liska  <mliska@suse.cz>\n "}, {"sha": "ca407987329b648b5c6b5e36c61e3ea4811189ae", "filename": "gcc/testsuite/gfortran.dg/dec_type_print.f90", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90051c26da7abd0999ce0afdd9471e354009b861/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdec_type_print.f90?ref=90051c26da7abd0999ce0afdd9471e354009b861", "patch": "@@ -0,0 +1,84 @@\n+! { dg-do compile }\n+! { dg-options \"-fdec\" }\n+!\n+! Test the usage of TYPE as an alias for PRINT.\n+!\n+! Note the heavy use of other TYPE statements to test for\n+! regressions involving ambiguity.\n+!\n+program main\n+\n+logical bool\n+integer i /0/, j /1/, k /2/\n+character(*), parameter :: fmtstr = \"(A11)\"\n+namelist /nmlist/ i, j, k\n+integer, parameter :: n = 5\n+real a(n)\n+\n+! derived type declarations\n+type is\n+  integer i\n+end type\n+\n+type point\n+   real x, y\n+end type point\n+\n+type, extends(point) :: point_3d\n+   real :: z\n+end type point_3d\n+\n+type, extends(point) :: color_point\n+   integer :: color\n+end type color_point\n+\n+! declaration type specification\n+type(is) x\n+type(point), target :: p\n+type(point_3d), target :: p3\n+type(color_point), target :: c\n+class(point), pointer :: p_or_c\n+\n+! select type\n+p_or_c => c\n+select type ( a => p_or_c )\n+  class is ( point )\n+    print *, \"point\"     ! <===\n+  type is ( point_3d )\n+    print *, \"point 3D\"\n+end select\n+\n+! Type as alias for print\n+type*\n+type *\n+type*,'St','ar'\n+type *, 'St', 'ar'\n+type 10, 'Integer literal'\n+type 10, 'Integer variable'\n+type '(A11)', 'Character literal'\n+type fmtstr, 'Character variable'\n+type nmlist ! namelist\n+\n+a(1) = 0\n+call f(.true., a, n)\n+\n+10    format (A11)\n+\n+end program\n+\n+\n+subroutine f(b,a,n)\n+  implicit none\n+  logical b\n+  real a(*)\n+  integer n\n+\n+  integer i\n+\n+  do i = 2,n\n+    a(i) = 2 * (a(i-1) + 1)\n+    if (b) type*,a(i) ! test TYPE as PRINT inside one-line IF\n+  enddo\n+\n+  return\n+end subroutine"}]}