{"sha": "ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyNDQzMmI5YWI5NWNjMGUxMmNiNWFlMjk4ZmZmYmRhMDRiMzIwMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2015-03-24T19:50:31Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2015-03-24T19:50:31Z"}, "message": "re PR go/65462 (Use of 'go get' with gccgo is not finding dependencies correctly)\n\n\tPR go/65462\ncmd: Fix dependencies for 'go get' with gccgo\n\nProblem described in GCC BZ 65462.\nGenerate the list of the standard GO package names based on what was built into libgo in the libgo Makefile.\nChange the var name from reqPkgSrc to reqStdPkgSrc to clarify it only affects standard GO packages.\nSkip the attempted loading of a package only if it is a standard GO package and the flag is set indicating its source is not required to be available.\nThis requires a corresponding change to gotools to build and link in the new file containing the list of standard GO package names that was generated by the libgo Makefile.\n\ngotools/:\n\tPR go/65462\n\t* Makefile.am (go_cmd_go_files): Add $(libgodir)/zstdpkglist.go.\n\t* Makefile.in: Rebuild.\n\nFrom-SVN: r221643", "tree": {"sha": "278377d41dceea14428baa5d9f4bef9167baf464", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/278377d41dceea14428baa5d9f4bef9167baf464"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/comments", "author": null, "committer": null, "parents": [{"sha": "a9f0423f312c2c117185f24dcfd3cba617bc6f8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9f0423f312c2c117185f24dcfd3cba617bc6f8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9f0423f312c2c117185f24dcfd3cba617bc6f8c"}], "stats": {"total": 110, "additions": 76, "deletions": 34}, "files": [{"sha": "8eceb18e518e5762e0faf84c10730475f3abbe9e", "filename": "gotools/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FChangeLog?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -1,3 +1,9 @@\n+2015-03-24  Ian Lance Taylor  <iant@google.com>\n+\n+\tPR go/65462\n+\t* Makefile.am (go_cmd_go_files): Add $(libgodir)/zstdpkglist.go.\n+\t* Makefile.in: Rebuild.\n+\n 2015-03-12  Ian Lance Taylor  <iant@google.com>\n \n \t* Makefile.am (GOLINK): Add GOCFLAGS."}, {"sha": "7fb0f75c297150d5bc50f15857f10721d910b652", "filename": "gotools/Makefile.am", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.am?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -67,7 +67,8 @@ go_cmd_go_files = \\\n \t$(cmdsrcdir)/go/tool.go \\\n \t$(cmdsrcdir)/go/vcs.go \\\n \t$(cmdsrcdir)/go/version.go \\\n-\t$(cmdsrcdir)/go/vet.go\n+\t$(cmdsrcdir)/go/vet.go \\\n+\t$(libgodir)/zstdpkglist.go\n \n go_cmd_gofmt_files = \\\n \t$(cmdsrcdir)/gofmt/doc.go \\"}, {"sha": "d08a597a85c17f55483b813281018e48af3c2dc8", "filename": "gotools/Makefile.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/gotools%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gotools%2FMakefile.in?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -257,7 +257,8 @@ go_cmd_go_files = \\\n \t$(cmdsrcdir)/go/tool.go \\\n \t$(cmdsrcdir)/go/vcs.go \\\n \t$(cmdsrcdir)/go/version.go \\\n-\t$(cmdsrcdir)/go/vet.go\n+\t$(cmdsrcdir)/go/vet.go \\\n+\t$(libgodir)/zstdpkglist.go\n \n go_cmd_gofmt_files = \\\n \t$(cmdsrcdir)/gofmt/doc.go \\\n@@ -518,8 +519,8 @@ distclean-generic:\n maintainer-clean-generic:\n \t@echo \"This command is intended for maintainers to use\"\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n-@NATIVE_FALSE@install-exec-local:\n @NATIVE_FALSE@uninstall-local:\n+@NATIVE_FALSE@install-exec-local:\n clean: clean-am\n \n clean-am: clean-binPROGRAMS clean-generic clean-noinstPROGRAMS \\"}, {"sha": "e71a6fa0369090a4a394f6f7e86b932c7d95e8f6", "filename": "libgo/Makefile.am", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -978,6 +978,20 @@ s-version: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh version.go.tmp version.go\n \t$(STAMP) $@\n \n+noinst_DATA = zstdpkglist.go\n+\n+# Generate the list of go std packages that were included in libgo\n+zstdpkglist.go: s-zstdpkglist; @true\n+s-zstdpkglist: Makefile\n+\trm -f zstdpkglist.go.tmp\n+\techo 'package main' > zstdpkglist.go.tmp\n+\techo \"\" >> zstdpkglist.go.tmp\n+\techo 'var stdpkg = map[string]bool{' >> zstdpkglist.go.tmp\n+\techo $(libgo_go_objs) 'unsafe.lo' | sed 's/\\.lo /\\\": true,\\n/g' | sed 's/\\.lo/\\\": true,/' | sed 's/-go//' | grep -v _c | sed 's/^/\\t\\\"/' | sort | uniq >> zstdpkglist.go.tmp\n+\techo '}' >> zstdpkglist.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh zstdpkglist.go.tmp zstdpkglist.go\n+\t$(STAMP) $@\n+\n go_sort_files = \\\n \tgo/sort/search.go \\\n \tgo/sort/sort.go"}, {"sha": "88b83adf47738d0fff31ea9641daee8550f6c8b7", "filename": "libgo/Makefile.in", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -269,23 +269,24 @@ RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \\\n \tinstall-pdf-recursive install-ps-recursive install-recursive \\\n \tinstallcheck-recursive installdirs-recursive pdf-recursive \\\n \tps-recursive uninstall-recursive\n-DATA = $(toolexeclibgo_DATA) $(toolexeclibgoarchive_DATA) \\\n-\t$(toolexeclibgocompress_DATA) $(toolexeclibgocontainer_DATA) \\\n-\t$(toolexeclibgocrypto_DATA) $(toolexeclibgocryptox509_DATA) \\\n-\t$(toolexeclibgodatabase_DATA) $(toolexeclibgodatabasesql_DATA) \\\n-\t$(toolexeclibgodebug_DATA) $(toolexeclibgoencoding_DATA) \\\n-\t$(toolexeclibgoexp_DATA) $(toolexeclibgogo_DATA) \\\n-\t$(toolexeclibgohash_DATA) $(toolexeclibgohtml_DATA) \\\n-\t$(toolexeclibgoimage_DATA) $(toolexeclibgoimagecolor_DATA) \\\n-\t$(toolexeclibgoindex_DATA) $(toolexeclibgoio_DATA) \\\n-\t$(toolexeclibgolog_DATA) $(toolexeclibgomath_DATA) \\\n-\t$(toolexeclibgomime_DATA) $(toolexeclibgonet_DATA) \\\n-\t$(toolexeclibgonethttp_DATA) $(toolexeclibgonetrpc_DATA) \\\n-\t$(toolexeclibgoold_DATA) $(toolexeclibgoos_DATA) \\\n-\t$(toolexeclibgopath_DATA) $(toolexeclibgoregexp_DATA) \\\n-\t$(toolexeclibgoruntime_DATA) $(toolexeclibgosync_DATA) \\\n-\t$(toolexeclibgotesting_DATA) $(toolexeclibgotext_DATA) \\\n-\t$(toolexeclibgotexttemplate_DATA) $(toolexeclibgounicode_DATA)\n+DATA = $(noinst_DATA) $(toolexeclibgo_DATA) \\\n+\t$(toolexeclibgoarchive_DATA) $(toolexeclibgocompress_DATA) \\\n+\t$(toolexeclibgocontainer_DATA) $(toolexeclibgocrypto_DATA) \\\n+\t$(toolexeclibgocryptox509_DATA) $(toolexeclibgodatabase_DATA) \\\n+\t$(toolexeclibgodatabasesql_DATA) $(toolexeclibgodebug_DATA) \\\n+\t$(toolexeclibgoencoding_DATA) $(toolexeclibgoexp_DATA) \\\n+\t$(toolexeclibgogo_DATA) $(toolexeclibgohash_DATA) \\\n+\t$(toolexeclibgohtml_DATA) $(toolexeclibgoimage_DATA) \\\n+\t$(toolexeclibgoimagecolor_DATA) $(toolexeclibgoindex_DATA) \\\n+\t$(toolexeclibgoio_DATA) $(toolexeclibgolog_DATA) \\\n+\t$(toolexeclibgomath_DATA) $(toolexeclibgomime_DATA) \\\n+\t$(toolexeclibgonet_DATA) $(toolexeclibgonethttp_DATA) \\\n+\t$(toolexeclibgonetrpc_DATA) $(toolexeclibgoold_DATA) \\\n+\t$(toolexeclibgoos_DATA) $(toolexeclibgopath_DATA) \\\n+\t$(toolexeclibgoregexp_DATA) $(toolexeclibgoruntime_DATA) \\\n+\t$(toolexeclibgosync_DATA) $(toolexeclibgotesting_DATA) \\\n+\t$(toolexeclibgotext_DATA) $(toolexeclibgotexttemplate_DATA) \\\n+\t$(toolexeclibgounicode_DATA)\n RECURSIVE_CLEAN_TARGETS = mostlyclean-recursive clean-recursive\t\\\n   distclean-recursive maintainer-clean-recursive\n AM_RECURSIVE_TARGETS = $(RECURSIVE_TARGETS:-recursive=) \\\n@@ -1154,6 +1155,7 @@ go_runtime_files = \\\n \tgo/runtime/softfloat64.go \\\n \tversion.go\n \n+noinst_DATA = zstdpkglist.go\n go_sort_files = \\\n \tgo/sort/search.go \\\n \tgo/sort/sort.go\n@@ -4394,6 +4396,18 @@ s-version: Makefile\n \t$(SHELL) $(srcdir)/mvifdiff.sh version.go.tmp version.go\n \t$(STAMP) $@\n \n+# Generate the list of go std packages that were included in libgo\n+zstdpkglist.go: s-zstdpkglist; @true\n+s-zstdpkglist: Makefile\n+\trm -f zstdpkglist.go.tmp\n+\techo 'package main' > zstdpkglist.go.tmp\n+\techo \"\" >> zstdpkglist.go.tmp\n+\techo 'var stdpkg = map[string]bool{' >> zstdpkglist.go.tmp\n+\techo $(libgo_go_objs) 'unsafe.lo' | sed 's/\\.lo /\\\": true,\\n/g' | sed 's/\\.lo/\\\": true,/' | sed 's/-go//' | grep -v _c | sed 's/^/\\t\\\"/' | sort | uniq >> zstdpkglist.go.tmp\n+\techo '}' >> zstdpkglist.go.tmp\n+\t$(SHELL) $(srcdir)/mvifdiff.sh zstdpkglist.go.tmp zstdpkglist.go\n+\t$(STAMP) $@\n+\n libcalls.go: s-libcalls; @true\n s-libcalls: libcalls-list go/syscall/mksyscall.awk $(go_base_syscall_files)\n \trm -f libcalls.go.tmp"}, {"sha": "22d37f3fa3b3fe2e2fc56254d88ed4d2f9c9cfc9", "filename": "libgo/go/cmd/go/build.go", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fbuild.go?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -132,7 +132,8 @@ var buildLdflags []string    // -ldflags flag\n var buildGccgoflags []string // -gccgoflags flag\n var buildRace bool           // -race flag\n \n-var reqPkgSrc bool // req src for Imports\n+// Require the source for go std packages\n+var reqStdPkgSrc bool\n var buildContext = build.Default\n var buildToolchain toolchain = noToolchain{}\n \n@@ -187,9 +188,9 @@ func addBuildFlags(cmd *Command) {\n \tcmd.Flag.BoolVar(&buildRace, \"race\", false, \"\")\n \tswitch build.Default.Compiler {\n \tcase \"gc\":\n-\t\treqPkgSrc = true\n+\t\treqStdPkgSrc = true\n \tcase \"gccgo\":\n-\t\treqPkgSrc = false\n+\t\treqStdPkgSrc = false\n \t}\n }\n \n@@ -579,7 +580,7 @@ func (b *builder) action(mode buildMode, depMode buildMode, p *Package) *action\n \t// are writing is not the cgo we need to use.\n \n \tif goos == runtime.GOOS && goarch == runtime.GOARCH && !buildRace {\n-\t\tif reqPkgSrc {\n+\t\tif reqStdPkgSrc {\n \t\t\tif len(p.CgoFiles) > 0 || p.Standard && p.ImportPath == \"runtime/cgo\" {\n \t\t\t\tvar stk importStack\n \t\t\t\tp1 := loadPackage(\"cmd/cgo\", &stk)"}, {"sha": "62f6b4adf57222ad50858a464079168bf523d202", "filename": "libgo/go/cmd/go/pkg.go", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Fpkg.go?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -112,7 +112,11 @@ func (p *Package) copyBuild(pp *build.Package) {\n \tp.ConflictDir = pp.ConflictDir\n \t// TODO? Target\n \tp.Goroot = pp.Goroot\n-\tp.Standard = p.Goroot && p.ImportPath != \"\" && !strings.Contains(p.ImportPath, \".\")\n+\tif buildContext.Compiler == \"gccgo\" {\n+\t\tp.Standard = stdpkg[p.ImportPath]\n+\t} else {\n+\t\tp.Standard = p.Goroot && p.ImportPath != \"\" && !strings.Contains(p.ImportPath, \".\")\n+\t}\n \tp.GoFiles = pp.GoFiles\n \tp.CgoFiles = pp.CgoFiles\n \tp.IgnoredGoFiles = pp.IgnoredGoFiles\n@@ -582,7 +586,7 @@ func (p *Package) load(stk *importStack, bp *build.Package, err error) *Package\n \t\t\tcontinue\n \t\t}\n \t\tp1 := loadImport(path, p.Dir, stk, p.build.ImportPos[path])\n-\t\tif !reqPkgSrc && p1.Root == \"\" {\n+\t\tif !reqStdPkgSrc && p1.Standard {\n \t\t\tcontinue\n \t\t}\n \t\tif p1.local {"}, {"sha": "cc0a9acf45dfbcf7b4d92c56298afe2e15fdb1bc", "filename": "libgo/go/cmd/go/test.go", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab24432b9ab95cc0e12cb5ae298fffbda04b3202/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fcmd%2Fgo%2Ftest.go?ref=ab24432b9ab95cc0e12cb5ae298fffbda04b3202", "patch": "@@ -384,17 +384,18 @@ func runTest(cmd *Command, args []string) {\n \t\tdelete(deps, \"unsafe\")\n \n \t\tall := []string{}\n-\t\tif reqPkgSrc {\n-\t\t\tfor path := range deps {\n-\t\t\t\tif !build.IsLocalImport(path) {\n-\t\t\t\t\tall = append(all, path)\n-\t\t\t\t}\n+\t\tfor path := range deps {\n+\t\t\tif !build.IsLocalImport(path) {\n+\t\t\t\tall = append(all, path)\n \t\t\t}\n \t\t}\n \t\tsort.Strings(all)\n \n \t\ta := &action{}\n \t\tfor _, p := range packagesForBuild(all) {\n+\t\t\tif !reqStdPkgSrc && p.Standard {\n+\t\t\t\tcontinue\n+\t\t\t}\n \t\t\ta.deps = append(a.deps, b.action(modeInstall, modeInstall, p))\n \t\t}\n \t\tb.do(a)\n@@ -563,7 +564,7 @@ func (b *builder) test(p *Package) (buildAction, runAction, printAction *action,\n \tstk.push(p.ImportPath + \" (test)\")\n \tfor _, path := range p.TestImports {\n \t\tp1 := loadImport(path, p.Dir, &stk, p.build.TestImportPos[path])\n-\t\tif !reqPkgSrc && p1.Root == \"\" {\n+\t\tif !reqStdPkgSrc && p1.Standard {\n \t\t\tcontinue\n \t\t}\n \t\tif p1.Error != nil {\n@@ -591,7 +592,7 @@ func (b *builder) test(p *Package) (buildAction, runAction, printAction *action,\n \t\t\tcontinue\n \t\t}\n \t\tp1 := loadImport(path, p.Dir, &stk, p.build.XTestImportPos[path])\n-\t\tif !reqPkgSrc && p1.Root == \"\" {\n+\t\tif !reqStdPkgSrc && p1.Standard {\n \t\t\tcontinue\n \t\t}\n \t\tif p1.Error != nil {\n@@ -722,7 +723,7 @@ func (b *builder) test(p *Package) (buildAction, runAction, printAction *action,\n \t\t\tpmain.imports = append(pmain.imports, ptest)\n \t\t} else {\n \t\t\tp1 := loadImport(dep, \"\", &stk, nil)\n-\t\t\tif !reqPkgSrc && p1.Root == \"\" {\n+\t\t\tif !reqStdPkgSrc && p1.Standard {\n \t\t\t\tcontinue\n \t\t\t}\n \t\t\tif p1.Error != nil {"}]}