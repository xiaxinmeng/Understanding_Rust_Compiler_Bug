{"sha": "4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5Mjk0M2RhY2U4YmE2ZTFmYzNlZGM2ZTFjMmIwNTFhODFiNzRiNw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2017-03-14T17:50:46Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-03-14T17:50:46Z"}, "message": "re PR rtl-optimization/79728 (ICE in setup_pressure_classes, at ira.c:912)\n\n\tPR rtl-optimization/79728\n\t* regs.h (struct target_regs): New field\n\tx_contains_allocatable_regs_of_mode.\n\t(contains_allocatable_regs_of_mode): New macro.\n\t* reginfo.c (init_reg_sets_1): Initialize it, and change\n\tcontains_reg_of_mode so it includes global regs as well.\n\t* reload.c (push_reload): Use contains_allocatable_regs_of_mode\n\trather than contains_regs_of_mode.\n\n\tPR rtl-optimization/79728\n\t* gcc.target/i386/sse-globalreg.c: New test.\n\nFrom-SVN: r246138", "tree": {"sha": "14346fcab7989f1900fef8539874ab63718d1e7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14346fcab7989f1900fef8539874ab63718d1e7e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/comments", "author": null, "committer": null, "parents": [{"sha": "6c841832df663667e5938de3ca0d8a6602920477", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c841832df663667e5938de3ca0d8a6602920477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c841832df663667e5938de3ca0d8a6602920477"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "c6f0dd524da471db44210e9aac6462f5c7a7b366", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -1,3 +1,14 @@\n+2017-03-14  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/79728\n+\t* regs.h (struct target_regs): New field\n+\tx_contains_allocatable_regs_of_mode.\n+\t(contains_allocatable_regs_of_mode): New macro.\n+\t* reginfo.c (init_reg_sets_1): Initialize it, and change\n+\tcontains_reg_of_mode so it includes global regs as well.\n+\t* reload.c (push_reload): Use contains_allocatable_regs_of_mode\n+\trather than contains_regs_of_mode.\n+\n 2017-03-14  Martin Liska  <mliska@suse.cz>\n \n \t* doc/invoke.texi: Document options that can't be combined with"}, {"sha": "a7df02d32741be5dd96b573cca25a3ccc4acd012", "filename": "gcc/reginfo.c", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Freginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Freginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freginfo.c?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -468,19 +468,29 @@ init_reg_sets_1 (void)\n   memset (contains_reg_of_mode, 0, sizeof (contains_reg_of_mode));\n   for (m = 0; m < (unsigned int) MAX_MACHINE_MODE; m++)\n     {\n-      HARD_REG_SET ok_regs;\n+      HARD_REG_SET ok_regs, ok_regs2;\n       CLEAR_HARD_REG_SET (ok_regs);\n+      CLEAR_HARD_REG_SET (ok_regs2);\n       for (j = 0; j < FIRST_PSEUDO_REGISTER; j++)\n-\tif (!fixed_regs [j] && HARD_REGNO_MODE_OK (j, (machine_mode) m))\n-\t  SET_HARD_REG_BIT (ok_regs, j);\n+\tif (!TEST_HARD_REG_BIT (fixed_nonglobal_reg_set, j)\n+\t    && HARD_REGNO_MODE_OK (j, (machine_mode) m))\n+\t  {\n+\t    SET_HARD_REG_BIT (ok_regs, j);\n+\t    if (!fixed_regs[j])\n+\t      SET_HARD_REG_BIT (ok_regs2, j);\n+\t  }\n \n       for (i = 0; i < N_REG_CLASSES; i++)\n \tif ((targetm.class_max_nregs ((reg_class_t) i, (machine_mode) m)\n \t     <= reg_class_size[i])\n \t    && hard_reg_set_intersect_p (ok_regs, reg_class_contents[i]))\n \t  {\n-\t     contains_reg_of_mode [i][m] = 1;\n-\t     have_regs_of_mode [m] = 1;\n+\t     contains_reg_of_mode[i][m] = 1;\n+\t     if (hard_reg_set_intersect_p (ok_regs2, reg_class_contents[i]))\n+\t       {\n+\t\t have_regs_of_mode[m] = 1;\n+\t\t contains_allocatable_reg_of_mode[i][m] = 1;\n+\t       }\n \t  }\n      }\n }"}, {"sha": "bdaa9ba0639d953c8abc9e65d942cfc719b5df0e", "filename": "gcc/regs.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Fregs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Fregs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregs.h?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -218,6 +218,10 @@ struct target_regs {\n   /* 1 if the corresponding class contains a register of the given mode.  */\n   char x_contains_reg_of_mode[N_REG_CLASSES][MAX_MACHINE_MODE];\n \n+  /* 1 if the corresponding class contains a register of the given mode\n+     which is not global and can therefore be allocated.  */\n+  char x_contains_allocatable_reg_of_mode[N_REG_CLASSES][MAX_MACHINE_MODE];\n+\n   /* Record for each mode whether we can move a register directly to or\n      from an object of that mode in memory.  If we can't, we won't try\n      to use that mode directly when accessing a field of that mode.  */\n@@ -243,6 +247,8 @@ extern struct target_regs *this_target_regs;\n   (this_target_regs->x_have_regs_of_mode)\n #define contains_reg_of_mode \\\n   (this_target_regs->x_contains_reg_of_mode)\n+#define contains_allocatable_reg_of_mode \\\n+  (this_target_regs->x_contains_allocatable_reg_of_mode)\n #define direct_load \\\n   (this_target_regs->x_direct_load)\n #define direct_store \\"}, {"sha": "598b78d6ef4b2be8428c5dc29112e7a87d37940d", "filename": "gcc/reload.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -1055,7 +1055,7 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       && !CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (in)), inmode, rclass)\n #endif\n-      && contains_reg_of_mode[(int) rclass][(int) GET_MODE (SUBREG_REG (in))]\n+      && contains_allocatable_reg_of_mode[rclass][GET_MODE (SUBREG_REG (in))]\n       && (CONSTANT_P (SUBREG_REG (in))\n \t  || GET_CODE (SUBREG_REG (in)) == PLUS\n \t  || strict_low\n@@ -1164,7 +1164,7 @@ push_reload (rtx in, rtx out, rtx *inloc, rtx *outloc,\n #ifdef CANNOT_CHANGE_MODE_CLASS\n       && !CANNOT_CHANGE_MODE_CLASS (GET_MODE (SUBREG_REG (out)), outmode, rclass)\n #endif\n-      && contains_reg_of_mode[(int) rclass][(int) GET_MODE (SUBREG_REG (out))]\n+      && contains_allocatable_reg_of_mode[rclass][GET_MODE (SUBREG_REG (out))]\n       && (CONSTANT_P (SUBREG_REG (out))\n \t  || strict_low\n \t  || (((REG_P (SUBREG_REG (out))"}, {"sha": "8e7a1dda43573cf06257d571be06f957e20b9b17", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -1,3 +1,8 @@\n+2017-03-14  Bernd Schmidt  <bschmidt@redhat.com>\n+\n+\tPR rtl-optimization/79728\n+\t* gcc.target/i386/sse-globalreg.c: New test.\n+\n 2017-03-14  Martin Liska  <mliska@suse.cz>\n \n \tPR lto/66295"}, {"sha": "818a2b63b8d84d3a83e3959e7f209081eb6a2378", "filename": "gcc/testsuite/gcc.target/i386/sse-globalreg.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-globalreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4692943dace8ba6e1fc3edc6e1c2b051a81b74b7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-globalreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-globalreg.c?ref=4692943dace8ba6e1fc3edc6e1c2b051a81b74b7", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -msse2 -w\" } */\n+/* { dg-require-effective-target sse2 } */\n+\n+register int a __asm__(\"xmm0\");\n+void fn1() {}"}]}