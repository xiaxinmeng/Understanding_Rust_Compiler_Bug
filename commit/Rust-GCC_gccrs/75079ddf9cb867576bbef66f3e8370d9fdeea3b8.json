{"sha": "75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUwNzlkZGY5Y2I4Njc1NzZiYmVmNjZmM2U4MzcwZDlmZGVlYTNiOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-08-14T09:14:31Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-08-14T09:14:31Z"}, "message": "[AArch64] Add support for SVE F{MAX,MIN}NM immediate\n\nThis patch uses the immediate forms of FMAXNM and FMINNM for\nunconditional arithmetic.\n\nThe same rules apply to FMAX and FMIN, but we only generate those\nvia the ACLE.\n\n2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/predicates.md (aarch64_sve_float_maxmin_immediate)\n\t(aarch64_sve_float_maxmin_operand): New predicates.\n\t* config/aarch64/constraints.md (vsB): New constraint.\n\t(vsM): Fix typo.\n\t* config/aarch64/iterators.md (sve_pred_fp_rhs2_operand): Use\n\taarch64_sve_float_maxmin_operand for UNSPEC_COND_FMAXNM and\n\tUNSPEC_COND_FMINNM.\n\t* config/aarch64/aarch64-sve.md (<maxmin_uns><SVE_F:mode>3):\n\tUse aarch64_sve_float_maxmin_operand for operand 2.\n\t(*<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): Likewise.\n\tAdd alternatives for the constant forms.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/fmaxnm_1.c: New test.\n\t* gcc.target/aarch64/sve/fminnm_1.c: Likewise.\n\nFrom-SVN: r274440", "tree": {"sha": "9fd5984d3d9057fefa484370ff0d627d1f18bca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fd5984d3d9057fefa484370ff0d627d1f18bca5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8c22a8bbaf3ef4260f7d8beea22ed151ca4b726"}], "stats": {"total": 121, "additions": 112, "deletions": 9}, "files": [{"sha": "b597ad59d4c071827f971c54299a4b47caa38e1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -1,3 +1,17 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/predicates.md (aarch64_sve_float_maxmin_immediate)\n+\t(aarch64_sve_float_maxmin_operand): New predicates.\n+\t* config/aarch64/constraints.md (vsB): New constraint.\n+\t(vsM): Fix typo.\n+\t* config/aarch64/iterators.md (sve_pred_fp_rhs2_operand): Use\n+\taarch64_sve_float_maxmin_operand for UNSPEC_COND_FMAXNM and\n+\tUNSPEC_COND_FMINNM.\n+\t* config/aarch64/aarch64-sve.md (<maxmin_uns><SVE_F:mode>3):\n+\tUse aarch64_sve_float_maxmin_operand for operand 2.\n+\t(*<SVE_COND_FP_MAXMIN_PUBLIC:optab><SVE_F:mode>3): Likewise.\n+\tAdd alternatives for the constant forms.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/aarch64/constraints.md (vsb): New constraint."}, {"sha": "851b459cc483904541e50117f64dc9e78c2d48c1", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -2604,7 +2604,7 @@\n \t  [(match_dup 3)\n \t   (const_int SVE_RELAXED_GP)\n \t   (match_operand:SVE_F 1 \"register_operand\")\n-\t   (match_operand:SVE_F 2 \"register_operand\")]\n+\t   (match_operand:SVE_F 2 \"aarch64_sve_float_maxmin_operand\")]\n \t  SVE_COND_FP_MAXMIN_PUBLIC))]\n   \"TARGET_SVE\"\n   {\n@@ -2614,18 +2614,20 @@\n \n ;; Predicated floating-point maximum/minimum.\n (define_insn \"*<optab><mode>3\"\n-  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, ?&w\")\n+  [(set (match_operand:SVE_F 0 \"register_operand\" \"=w, w, ?&w, ?&w\")\n \t(unspec:SVE_F\n-\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl\")\n+\t  [(match_operand:<VPRED> 1 \"register_operand\" \"Upl, Upl, Upl, Upl\")\n \t   (match_operand:SI 4 \"aarch64_sve_gp_strictness\")\n-\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, w\")\n-\t   (match_operand:SVE_F 3 \"register_operand\" \"w, w\")]\n+\t   (match_operand:SVE_F 2 \"register_operand\" \"%0, 0, w, w\")\n+\t   (match_operand:SVE_F 3 \"aarch64_sve_float_maxmin_operand\" \"vsB, w, vsB, w\")]\n \t  SVE_COND_FP_MAXMIN_PUBLIC))]\n   \"TARGET_SVE\"\n   \"@\n+   <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    <sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\n+   movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, #%3\n    movprfx\\t%0, %2\\;<sve_fp_op>\\t%0.<Vetype>, %1/m, %0.<Vetype>, %3.<Vetype>\"\n-  [(set_attr \"movprfx\" \"*,yes\")]\n+  [(set_attr \"movprfx\" \"*,*,yes,yes\")]\n )\n \n ;; Merging forms are handled through SVE_COND_FP_BINARY."}, {"sha": "61547e5ee08f0c196b10ce6bb8448209edf45145", "filename": "gcc/config/aarch64/constraints.md", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fconstraints.md?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -436,9 +436,16 @@\n    and FSUB operations.\"\n  (match_operand 0 \"aarch64_sve_float_arith_immediate\"))\n \n+;; \"B\" for \"bound\".\n+(define_constraint \"vsB\"\n+  \"@internal\n+   A constraint that matches an immediate operand valid for SVE FMAX\n+   and FMIN operations.\"\n+ (match_operand 0 \"aarch64_sve_float_maxmin_immediate\"))\n+\n (define_constraint \"vsM\"\n   \"@internal\n-   A constraint that matches an imediate operand valid for SVE FMUL\n+   A constraint that matches an immediate operand valid for SVE FMUL\n    operations.\"\n  (match_operand 0 \"aarch64_sve_float_mul_immediate\"))\n "}, {"sha": "1654ffb63f84e9934fa1b514f435670fe0d71206", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -2075,7 +2075,7 @@\n (define_int_attr sve_pred_fp_rhs2_operand\n   [(UNSPEC_COND_FADD \"aarch64_sve_float_arith_with_sub_operand\")\n    (UNSPEC_COND_FDIV \"register_operand\")\n-   (UNSPEC_COND_FMAXNM \"register_operand\")\n-   (UNSPEC_COND_FMINNM \"register_operand\")\n+   (UNSPEC_COND_FMAXNM \"aarch64_sve_float_maxmin_operand\")\n+   (UNSPEC_COND_FMINNM \"aarch64_sve_float_maxmin_operand\")\n    (UNSPEC_COND_FMUL \"aarch64_sve_float_mul_operand\")\n    (UNSPEC_COND_FSUB \"register_operand\")])"}, {"sha": "b456cfffeb22801ce81bf951df76a56281ee0040", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -655,6 +655,11 @@\n   (and (match_code \"const,const_vector\")\n        (match_test \"aarch64_sve_float_mul_immediate_p (op)\")))\n \n+(define_predicate \"aarch64_sve_float_maxmin_immediate\"\n+  (and (match_code \"const_vector\")\n+       (ior (match_test \"op == CONST0_RTX (GET_MODE (op))\")\n+\t    (match_test \"op == CONST1_RTX (GET_MODE (op))\"))))\n+\n (define_predicate \"aarch64_sve_arith_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_arith_immediate\")))\n@@ -708,6 +713,10 @@\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_sve_float_mul_immediate\")))\n \n+(define_predicate \"aarch64_sve_float_maxmin_operand\"\n+  (ior (match_operand 0 \"register_operand\")\n+       (match_operand 0 \"aarch64_sve_float_maxmin_immediate\")))\n+\n (define_predicate \"aarch64_sve_vec_perm_operand\"\n   (ior (match_operand 0 \"register_operand\")\n        (match_operand 0 \"aarch64_constant_vector_operand\")))"}, {"sha": "0edfe1a20fecdeecc869d41f3b73873966352d8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -1,3 +1,8 @@\n+2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/fmaxnm_1.c: New test.\n+\t* gcc.target/aarch64/sve/fminnm_1.c: Likewise.\n+\n 2019-08-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/aarch64/sve/smax_1.c: New test."}, {"sha": "2f0d64bd44419e5a853b37b42b87cd7b95183f7c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fmaxnm_1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffmaxnm_1.c?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#include <stdint.h>\n+\n+#ifndef FN\n+#define FN(X) __builtin_fmax##X\n+#endif\n+\n+#define DEF_LOOP(FN, TYPE, NAME, CONST)\t\t\t\\\n+  void __attribute__ ((noipa))\t\t\t\t\\\n+  test_##TYPE##_##NAME (TYPE *__restrict x,\t\t\\\n+\t\t\tTYPE *__restrict y, int n)\t\\\n+  {\t\t\t\t\t\t\t\\\n+    for (int i = 0; i < n; ++i)\t\t\t\t\\\n+      x[i] = FN (y[i], CONST);\t\t\t\t\\\n+  }\n+\n+#define TEST_TYPE(T, FN, TYPE) \\\n+  T (FN, TYPE, zero, 0) \\\n+  T (FN, TYPE, one, 1) \\\n+  T (FN, TYPE, two, 2)\n+\n+#define TEST_ALL(T) \\\n+  TEST_TYPE (T, FN (f16), _Float16) \\\n+  TEST_TYPE (T, FN (f32), float) \\\n+  TEST_TYPE (T, FN (f64), double)\n+\n+TEST_ALL (DEF_LOOP)\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmaxnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}, {"sha": "547772e29953c6443b67779bc3962995788220d2", "filename": "gcc/testsuite/gcc.target/aarch64/sve/fminnm_1.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75079ddf9cb867576bbef66f3e8370d9fdeea3b8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Ffminnm_1.c?ref=75079ddf9cb867576bbef66f3e8370d9fdeea3b8", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define FN(X) __builtin_fmin##X\n+#include \"fmaxnm_1.c\"\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #0\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #0\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, #1\\.0\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, #1\\.0\\n} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.h, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.s, #2\\.0} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfmov\\tz[0-9]+\\.d, #2\\.0} 1 } } */\n+\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.h, p[0-7]/m, z[0-9]+\\.h, z[0-9]+\\.h\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.s, p[0-7]/m, z[0-9]+\\.s, z[0-9]+\\.s\\n} 1 } } */\n+/* { dg-final { scan-assembler-times {\\tfminnm\\tz[0-9]+\\.d, p[0-7]/m, z[0-9]+\\.d, z[0-9]+\\.d\\n} 1 } } */"}]}