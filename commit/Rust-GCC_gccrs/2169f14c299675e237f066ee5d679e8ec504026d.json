{"sha": "2169f14c299675e237f066ee5d679e8ec504026d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE2OWYxNGMyOTk2NzVlMjM3ZjA2NmVlNWQ2NzllOGVjNTA0MDI2ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-03-26T08:41:02Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-03-26T08:41:02Z"}, "message": "re PR rtl-optimization/52629 (out-of-bounds access in reload1.c)\n\n\tPR rtl-optimization/52629\n\t* reload1.c (count_pseudo): Short-circuit common case.\n\t(count_spilled_pseudo): Return early for pseudos without hard regs.\n\tAssert that the pseudo has got a hard reg before manipulating it.\n\nFrom-SVN: r185787", "tree": {"sha": "9348ec306232214e21510616872803e11b9f6a02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9348ec306232214e21510616872803e11b9f6a02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2169f14c299675e237f066ee5d679e8ec504026d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2169f14c299675e237f066ee5d679e8ec504026d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2169f14c299675e237f066ee5d679e8ec504026d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2169f14c299675e237f066ee5d679e8ec504026d/comments", "author": null, "committer": null, "parents": [{"sha": "dd03252e94757eb27d54ce78d32474b142d3692a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd03252e94757eb27d54ce78d32474b142d3692a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd03252e94757eb27d54ce78d32474b142d3692a"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "bc169177ddda7ac14359ccd01c4253bc0cefbd49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2169f14c299675e237f066ee5d679e8ec504026d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2169f14c299675e237f066ee5d679e8ec504026d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2169f14c299675e237f066ee5d679e8ec504026d", "patch": "@@ -1,3 +1,10 @@\n+2012-03-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/52629\n+\t* reload1.c (count_pseudo): Short-circuit common case.\n+\t(count_spilled_pseudo): Return early for pseudos without hard regs.\n+\tAssert that the pseudo has got a hard reg before manipulating it.\n+\n 2012-03-24  Jan Hubicka  <jh@suse.cz>\n \n \tPR lto/51663"}, {"sha": "71cea8171d4e24ca6b22f053d2768afab60ab072", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2169f14c299675e237f066ee5d679e8ec504026d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2169f14c299675e237f066ee5d679e8ec504026d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2169f14c299675e237f066ee5d679e8ec504026d", "patch": "@@ -1746,11 +1746,12 @@ count_pseudo (int reg)\n   int r = reg_renumber[reg];\n   int nregs;\n \n+  /* Ignore spilled pseudo-registers which can be here only if IRA is used.  */\n+  if (ira_conflicts_p && r < 0)\n+    return;\n+\n   if (REGNO_REG_SET_P (&pseudos_counted, reg)\n-      || REGNO_REG_SET_P (&spilled_pseudos, reg)\n-      /* Ignore spilled pseudo-registers which can be here only if IRA\n-\t is used.  */\n-      || (ira_conflicts_p && r < 0))\n+      || REGNO_REG_SET_P (&spilled_pseudos, reg))\n     return;\n \n   SET_REGNO_REG_SET (&pseudos_counted, reg);\n@@ -1827,12 +1828,17 @@ count_spilled_pseudo (int spilled, int spilled_nregs, int reg)\n {\n   int freq = REG_FREQ (reg);\n   int r = reg_renumber[reg];\n-  int nregs = hard_regno_nregs[r][PSEUDO_REGNO_MODE (reg)];\n+  int nregs;\n+\n+  /* Ignore spilled pseudo-registers which can be here only if IRA is used.  */\n+  if (ira_conflicts_p && r < 0)\n+    return;\n+\n+  gcc_assert (r >= 0);\n+\n+  nregs = hard_regno_nregs[r][PSEUDO_REGNO_MODE (reg)];\n \n-  /* Ignore spilled pseudo-registers which can be here only if IRA is\n-     used.  */\n-  if ((ira_conflicts_p && r < 0)\n-      || REGNO_REG_SET_P (&spilled_pseudos, reg)\n+  if (REGNO_REG_SET_P (&spilled_pseudos, reg)\n       || spilled + spilled_nregs <= r || r + nregs <= spilled)\n     return;\n "}]}