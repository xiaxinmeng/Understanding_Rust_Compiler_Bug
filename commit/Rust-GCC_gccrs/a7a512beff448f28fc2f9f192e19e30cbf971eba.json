{"sha": "a7a512beff448f28fc2f9f192e19e30cbf971eba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdhNTEyYmVmZjQ0OGYyOGZjMmY5ZjE5MmUxOWUzMGNiZjk3MWViYQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-23T14:06:02Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-23T14:06:02Z"}, "message": "alias.c (alias_set_subset_of): Correctly handle asking if zero is a subset of an alias set with zero child.\n\n2008-04-23  Richard Guenther  <rguenther@suse.de>\n\n\t* alias.c (alias_set_subset_of): Correctly handle asking\n\tif zero is a subset of an alias set with zero child.\n\t* tree-ssa-alias.c (have_common_aliases_p): Simplify logic.\n\t(compute_flow_insensitive_aliasing): Correctly walk all\n\tpointers.  Do not unnecessarily union sets.\n\nFrom-SVN: r134597", "tree": {"sha": "92b446ae6c5a7e1732e139eb7761d3c20bb21399", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92b446ae6c5a7e1732e139eb7761d3c20bb21399"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7a512beff448f28fc2f9f192e19e30cbf971eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a512beff448f28fc2f9f192e19e30cbf971eba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7a512beff448f28fc2f9f192e19e30cbf971eba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7a512beff448f28fc2f9f192e19e30cbf971eba/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f3f75f693d12f58acbb37d393280081621eb3f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f75f693d12f58acbb37d393280081621eb3f58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f75f693d12f58acbb37d393280081621eb3f58"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "a774a43341a34efb3fdafb14979c445ff217af14", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7a512beff448f28fc2f9f192e19e30cbf971eba", "patch": "@@ -1,3 +1,11 @@\n+2008-04-23  Richard Guenther  <rguenther@suse.de>\n+\n+\t* alias.c (alias_set_subset_of): Correctly handle asking\n+\tif zero is a subset of an alias set with zero child.\n+\t* tree-ssa-alias.c (have_common_aliases_p): Simplify logic.\n+\t(compute_flow_insensitive_aliasing): Correctly walk all\n+\tpointers.  Do not unnecessarily union sets.\n+\n 2008-04-23  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/36021"}, {"sha": "7b14f26cc134a6fa4747a8ce93201a7a08835a3c", "filename": "gcc/alias.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=a7a512beff448f28fc2f9f192e19e30cbf971eba", "patch": "@@ -305,8 +305,9 @@ alias_set_subset_of (alias_set_type set1, alias_set_type set2)\n   /* Otherwise, check if set1 is a subset of set2.  */\n   ase = get_alias_set_entry (set2);\n   if (ase != 0\n-      && (splay_tree_lookup (ase->children,\n-\t\t\t     (splay_tree_key) set1)))\n+      && ((ase->has_zero_child && set1 == 0)\n+\t  || splay_tree_lookup (ase->children,\n+\t\t\t        (splay_tree_key) set1)))\n     return true;\n   return false;\n }"}, {"sha": "eb57010bdda970aec017e475702eec9b2762255c", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7a512beff448f28fc2f9f192e19e30cbf971eba/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=a7a512beff448f28fc2f9f192e19e30cbf971eba", "patch": "@@ -2390,9 +2390,7 @@ have_common_aliases_p (bitmap tag1aliases, bitmap tag2aliases)\n   /* This is the old behavior of have_common_aliases_p, which is to\n      return false if both sets are empty, or one set is and the other\n      isn't.  */\n-     if ((tag1aliases == NULL && tag2aliases != NULL)\n-      || (tag2aliases == NULL && tag1aliases != NULL)\n-      || (tag1aliases == NULL && tag2aliases == NULL))\n+  if (tag1aliases == NULL || tag2aliases == NULL)\n     return false;\n \n   return bitmap_intersect_p (tag1aliases, tag2aliases);\n@@ -2490,12 +2488,16 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n       if (PTR_IS_REF_ALL (p_map1->var))\n \tcontinue;\n \n-      for (j = i + 1; j < ai->num_pointers; j++)\n+      for (j = 0; j < ai->num_pointers; j++)\n \t{\n \t  struct alias_map_d *p_map2 = ai->pointers[j];\n \t  tree tag2 = symbol_mem_tag (p_map2->var);\n \t  bitmap may_aliases2 = may_aliases (tag2);\n \n+\t  /* By convention tags don't alias themselves.  */\n+\t  if (tag1 == tag2)\n+\t    continue;\n+\n \t  if (PTR_IS_REF_ALL (p_map2->var))\n \t    continue;\n \n@@ -2508,18 +2510,8 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \t  if (have_common_aliases_p (may_aliases1, may_aliases2))\n \t    continue;\n \n-\t  if (may_aliases2 && !bitmap_empty_p (may_aliases2))\n-\t    {\n-\t      union_alias_set_into (tag1, may_aliases2);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Since TAG2 does not have any aliases of its own, add\n-\t\t TAG2 itself to the alias set of TAG1.  */\n-\t      add_may_alias (tag1, tag2);\n-\t    }\n+\t  add_may_alias (tag1, tag2);\n \t}\n-\n     }\n   timevar_pop (TV_FLOW_INSENSITIVE);\n }"}]}