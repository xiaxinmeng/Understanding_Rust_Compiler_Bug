{"sha": "84c0bb6359b5e8161866347491ea77c7d8cafbbf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODRjMGJiNjM1OWI1ZTgxNjE4NjYzNDc0OTFlYTc3YzdkOGNhZmJiZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-26T18:39:31Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-26T18:39:31Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r591", "tree": {"sha": "239f6cb48ac8bb61feca30d0a07370a221fc621f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/239f6cb48ac8bb61feca30d0a07370a221fc621f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84c0bb6359b5e8161866347491ea77c7d8cafbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0bb6359b5e8161866347491ea77c7d8cafbbf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84c0bb6359b5e8161866347491ea77c7d8cafbbf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84c0bb6359b5e8161866347491ea77c7d8cafbbf/comments", "author": null, "committer": null, "parents": [{"sha": "9987501ff7c057954e8b06103f733baef329ed75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9987501ff7c057954e8b06103f733baef329ed75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9987501ff7c057954e8b06103f733baef329ed75"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "f77fdca20acf15494a055c69194df0ff4d59c95c", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84c0bb6359b5e8161866347491ea77c7d8cafbbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84c0bb6359b5e8161866347491ea77c7d8cafbbf/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=84c0bb6359b5e8161866347491ea77c7d8cafbbf", "patch": "@@ -1832,6 +1832,20 @@ compute_frame_size (size, leaf_function)\n   return actual_fsize;\n }\n \n+/* If this were a leaf function, how far would we have to reach\n+   from the stack pointer to the last arg on the stack?\n+\n+   If we don't know, return 4096 (i.e., \"too far\".)  */\n+\n+int\n+compute_last_arg_offset ()\n+{\n+  if (GET_CODE (current_function_arg_offset_rtx) == CONST_INT)\n+    return (compute_frame_size (get_frame_size (), 1)\n+\t    + INTVAL (current_function_arg_offset_rtx));\n+  return 4096;\n+}\n+\n void\n output_function_prologue (file, size, leaf_function)\n      FILE *file;\n@@ -1863,11 +1877,14 @@ output_function_prologue (file, size, leaf_function)\n     }\n   else\n     {\n+      /* The rest of the support for this case hasn't been implemented,\n+\t but FRAME_POINTER_REQUIRED is supposed to prevent it from arising,\n+\t by checking the frame size.  */\n+      abort ();\n+\n       /* Put pointer to parameters into %g4, and allocate\n \t frame space using result computed into %g1.  actual_fsize\n \t used instead of apparent_fsize for reasons stated above.  */\n-      abort ();\n-\n       fprintf (file, \"\\tsethi %%hi(%d),%%g1\\n\\tor %%g1,%%lo(%d),%%g1\\n\",\n \t       -actual_fsize, -actual_fsize);\n       fprintf (file, \"\\tadd %%sp,64,%%g4\\n\\tadd %%sp,%%g1,%%sp\\n\");"}]}