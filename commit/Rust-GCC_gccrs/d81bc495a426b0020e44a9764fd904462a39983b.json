{"sha": "d81bc495a426b0020e44a9764fd904462a39983b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgxYmM0OTVhNDI2YjAwMjBlNDRhOTc2NGZkOTA0NDYyYTM5OTgzYg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-11T23:39:08Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-17T10:50:25Z"}, "message": "d: Implement __traits(getTargetInfo, \"objectFormat\")\n\nFollowing on from adding TARGET_D_REGISTER_OS_TARGET_INFO, this adds the\nrequired handlers to implement `__traits(getTargetInfo, \"objectFormat\")'\nfor all platforms that have D support files.\n\nSome back-ends (i386, rs6000, and pa) have some awarenes of the what\nobject format they are compiling for, so new getTargetInfo handlers have\nbeen have added both to those back-ends as well as platform-specific\ntarget files to override the default in the D front-end.\n\ngcc/ChangeLog:\n\n\t* config/darwin-d.c (darwin_d_handle_target_object_format): New\n\tfunction.\n\t(darwin_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/dragonfly-d.c (dragonfly_d_handle_target_object_format): New\n\tfunction.\n\t(dragonfly_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/freebsd-d.c (freebsd_d_handle_target_object_format): New\n\tfunction.\n\t(freebsd_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/glibc-d.c (glibc_d_handle_target_object_format): New\n\tfunction.\n\t(glibc_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/i386/i386-d.c (ix86_d_handle_target_object_format): New\n\tfunction.\n\t(ix86_d_register_target_info): Add ix86_d_handle_target_object_format\n\tas handler for objectFormat key.\n\t* config/i386/winnt-d.c (winnt_d_handle_target_object_format): New\n\tfunction.\n\t(winnt_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/netbsd-d.c (netbsd_d_handle_target_object_format): New\n\tfunction.\n\t(netbsd_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/openbsd-d.c (openbsd_d_handle_target_object_format): New\n\tfunction.\n\t(openbsd_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\t* config/pa/pa-d.c (pa_d_handle_target_object_format): New function.\n\t(pa_d_register_target_info): Add pa_d_handle_target_object_format as\n\thandler for objectFormat key.\n\t* config/rs6000/rs6000-d.c (rs6000_d_handle_target_object_format): New\n\tfunction.\n\t(rs6000_d_register_target_info): Add\n\trs6000_d_handle_target_object_format as handler for objectFormat key.\n\t* config/sol2-d.c (solaris_d_handle_target_object_format): New\n\tfunction.\n\t(solaris_d_register_target_info): New function.\n\t(TARGET_D_REGISTER_OS_TARGET_INFO): Define.\n\ngcc/d/ChangeLog:\n\n\t* d-target.cc (d_handle_target_object_format): New function.\n\t(d_language_target_info): Add d_handle_target_object_format as handler\n\tfor objectFormat key.\n\t(Target::getTargetInfo): Continue if handler returned NULL_TREE.", "tree": {"sha": "8376a0f59ea36d081a0c1e6c8628ff0cdf560b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8376a0f59ea36d081a0c1e6c8628ff0cdf560b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d81bc495a426b0020e44a9764fd904462a39983b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc495a426b0020e44a9764fd904462a39983b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d81bc495a426b0020e44a9764fd904462a39983b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d81bc495a426b0020e44a9764fd904462a39983b/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96c7a063b27986e6e0ef2b7a1684421583a332d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b96c7a063b27986e6e0ef2b7a1684421583a332d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b96c7a063b27986e6e0ef2b7a1684421583a332d"}], "stats": {"total": 303, "additions": 299, "deletions": 4}, "files": [{"sha": "67d69b721b5656c65d6a8f7a4bedc4034a118005", "filename": "gcc/config/darwin-d.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fdarwin-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fdarwin-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -32,9 +32,35 @@ darwin_d_os_builtins (void)\n   d_add_builtin_version (\"darwin\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+darwin_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"macho\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Darwin targets.  */\n+\n+static void\n+darwin_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", darwin_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS darwin_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO darwin_d_register_target_info\n+\n /* Define TARGET_D_MINFO_SECTION for Darwin targets.  */\n \n #undef TARGET_D_MINFO_SECTION"}, {"sha": "dc301b54e8f43eed7c63fe0a5ad62443507a50a5", "filename": "gcc/config/dragonfly-d.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fdragonfly-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fdragonfly-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdragonfly-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -31,7 +31,33 @@ dragonfly_d_os_builtins (void)\n   d_add_builtin_version (\"Posix\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+dragonfly_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for DragonFly targets.  */\n+\n+static void\n+dragonfly_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", dragonfly_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS dragonfly_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO dragonfly_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "8bebe79c895f3f6fac23f998a3c934982cfc508b", "filename": "gcc/config/freebsd-d.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Ffreebsd-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Ffreebsd-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -37,7 +37,33 @@ freebsd_d_os_builtins (void)\n   d_add_builtin_version (\"Posix\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+freebsd_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for FreeBSD targets.  */\n+\n+static void\n+freebsd_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", freebsd_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS freebsd_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO freebsd_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "c98d494cd77184adf10586e13f16cbaf0503686f", "filename": "gcc/config/glibc-d.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fglibc-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fglibc-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fglibc-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -42,7 +42,33 @@ glibc_d_os_builtins (void)\n #endif\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+glibc_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Glibc targets.  */\n+\n+static void\n+glibc_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", glibc_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS glibc_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO glibc_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "cb99376cd78de04740468889d71cc4ab57089cb7", "filename": "gcc/config/i386/i386-d.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fi386%2Fi386-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fi386%2Fi386-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -60,13 +60,32 @@ ix86_d_handle_target_float_abi (void)\n   return build_string_literal (strlen (abi) + 1, abi);\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+ix86_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = NULL;\n+\n+  if (TARGET_MACHO)\n+    objfmt = \"macho\";\n+  else if (TARGET_COFF || TARGET_PECOFF)\n+    objfmt = \"coff\";\n+\n+  if (objfmt == NULL)\n+    return NULL_TREE;\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n /* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n \n void\n ix86_d_register_target_info (void)\n {\n   const struct d_target_info_spec handlers[] = {\n     { \"floatAbi\", ix86_d_handle_target_float_abi },\n+    { \"objectFormat\", ix86_d_handle_target_object_format },\n     { NULL, NULL },\n   };\n "}, {"sha": "b9780258549076c64c9679b1dcacbfd057f9eb17", "filename": "gcc/config/i386/winnt-d.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fi386%2Fwinnt-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fi386%2Fwinnt-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -39,9 +39,34 @@ winnt_d_os_builtins (void)\n #endif\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+winnt_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"coff\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Windows targets.  */\n+\n+static void\n+winnt_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", winnt_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS winnt_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO winnt_d_register_target_info\n+\n /* Define TARGET_D_MINFO_SECTION for Windows targets.  */\n \n #undef TARGET_D_MINFO_SECTION"}, {"sha": "842644f82a39c6957017a7d8989aedd709d4bb5e", "filename": "gcc/config/netbsd-d.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fnetbsd-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fnetbsd-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -26,14 +26,42 @@ along with GCC; see the file COPYING3.  If not see\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n \n+/* Define TARGET_D_OS_VERSIONS for NetBSD targets.  */\n+\n static void\n netbsd_d_os_builtins (void)\n {\n   d_add_builtin_version (\"Posix\");\n   d_add_builtin_version (\"NetBSD\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+netbsd_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for NetBSD targets.  */\n+\n+static void\n+netbsd_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", netbsd_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS netbsd_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO netbsd_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "31f8eb496fc91ecf3bd41a56adf0dd6efa554cd4", "filename": "gcc/config/openbsd-d.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fopenbsd-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fopenbsd-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -26,14 +26,42 @@ along with GCC; see the file COPYING3.  If not see\n #include \"d/d-target.h\"\n #include \"d/d-target-def.h\"\n \n+/* Define TARGET_D_OS_VERSIONS for OpenBSD targets.  */\n+\n static void\n openbsd_d_os_builtins (void)\n {\n   d_add_builtin_version (\"Posix\");\n   d_add_builtin_version (\"OpenBSD\");\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+openbsd_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for OpenBSD targets.  */\n+\n+static void\n+openbsd_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", openbsd_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS openbsd_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO openbsd_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "6802738e85bb817c0d803f78233eb07ecb578634", "filename": "gcc/config/pa/pa-d.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fpa%2Fpa-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fpa%2Fpa-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -55,13 +55,30 @@ pa_d_handle_target_float_abi (void)\n   return build_string_literal (strlen (abi) + 1, abi);\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+pa_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = NULL;\n+\n+  if (TARGET_SOM)\n+    objfmt = \"som\";\n+\n+  if (objfmt == NULL)\n+    return NULL_TREE;\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n /* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n \n void\n pa_d_register_target_info (void)\n {\n   const struct d_target_info_spec handlers[] = {\n     { \"floatAbi\", pa_d_handle_target_float_abi },\n+    { \"objectFormat\", pa_d_handle_target_object_format },\n     { NULL, NULL },\n   };\n "}, {"sha": "6f1f55b01b858f5462afd04ccf8d3f42902d17c5", "filename": "gcc/config/rs6000/rs6000-d.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Frs6000%2Frs6000-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Frs6000%2Frs6000-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -63,13 +63,34 @@ rs6000_d_handle_target_float_abi (void)\n   return build_string_literal (strlen (abi) + 1, abi);\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+rs6000_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = NULL;\n+\n+  if (TARGET_ELF)\n+    objfmt = \"elf\";\n+  else if (TARGET_MACHO)\n+    objfmt = \"macho\";\n+  else if (TARGET_XCOFF)\n+    objfmt = \"coff\";\n+\n+  if (objfmt == NULL)\n+    return NULL_TREE;\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n /* Implement TARGET_D_REGISTER_CPU_TARGET_INFO.  */\n \n void\n rs6000_d_register_target_info (void)\n {\n   const struct d_target_info_spec handlers[] = {\n     { \"floatAbi\", rs6000_d_handle_target_float_abi },\n+    { \"objectFormat\", rs6000_d_handle_target_object_format },\n     { NULL, NULL },\n   };\n "}, {"sha": "650cb3719278cfe81d27cc86c8ac1db3d1b108bc", "filename": "gcc/config/sol2-d.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fsol2-d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fconfig%2Fsol2-d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsol2-d.c?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -33,7 +33,33 @@ solaris_d_os_builtins (void)\n   d_add_builtin_version (\"Solaris\");\t\t\t\\\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+static tree\n+solaris_d_handle_target_object_format (void)\n+{\n+  const char *objfmt = \"elf\";\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n+/* Implement TARGET_D_REGISTER_OS_TARGET_INFO for Solaris targets.  */\n+\n+static void\n+solaris_d_register_target_info (void)\n+{\n+  const struct d_target_info_spec handlers[] = {\n+    { \"objectFormat\", solaris_d_handle_target_object_format },\n+    { NULL, NULL },\n+  };\n+\n+  d_add_target_info_handlers (handlers);\n+}\n+\n #undef TARGET_D_OS_VERSIONS\n #define TARGET_D_OS_VERSIONS solaris_d_os_builtins\n \n+#undef TARGET_D_REGISTER_OS_TARGET_INFO\n+#define TARGET_D_REGISTER_OS_TARGET_INFO solaris_d_register_target_info\n+\n struct gcc_targetdm targetdm = TARGETDM_INITIALIZER;"}, {"sha": "1488bcebb2c65c7b7de6bdd6e55eea97ba80b264", "filename": "gcc/d/d-target.cc", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fd%2Fd-target.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d81bc495a426b0020e44a9764fd904462a39983b/gcc%2Fd%2Fd-target.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-target.cc?ref=d81bc495a426b0020e44a9764fd904462a39983b", "patch": "@@ -47,6 +47,7 @@ Target target;\n /* Internal key handlers for `__traits(getTargetInfo)'.  */\n static tree d_handle_target_cpp_std (void);\n static tree d_handle_target_cpp_runtime_library (void);\n+static tree d_handle_target_object_format (void);\n \n /* In [traits/getTargetInfo], a reliable subset of getTargetInfo keys exists\n    which are always available.  */\n@@ -56,7 +57,7 @@ static const struct d_target_info_spec d_language_target_info[] =\n   { \"cppStd\", d_handle_target_cpp_std },\n   { \"cppRuntimeLibrary\", d_handle_target_cpp_runtime_library },\n   { \"floatAbi\", NULL },\n-  { \"objectFormat\", NULL },\n+  { \"objectFormat\", d_handle_target_object_format },\n   { NULL, NULL },\n };\n \n@@ -517,6 +518,25 @@ d_handle_target_cpp_runtime_library (void)\n   return build_string_literal (strlen (libstdcxx) + 1, libstdcxx);\n }\n \n+/* Handle a call to `__traits(getTargetInfo, \"objectFormat\")'.  */\n+\n+tree\n+d_handle_target_object_format (void)\n+{\n+  const char *objfmt;\n+\n+#ifdef OBJECT_FORMAT_ELF\n+  objfmt = \"elf\";\n+#else\n+  if (TARGET_COFF || TARGET_PECOFF)\n+    objfmt = \"coff\";\n+  else\n+    objfmt = \"\";\n+#endif\n+\n+  return build_string_literal (strlen (objfmt) + 1, objfmt);\n+}\n+\n /* Look up the target info KEY in the available getTargetInfo tables, and return\n    the result as an Expression, or NULL if KEY is not found.  When the key must\n    always exist, but is not supported, an empty string expression is returned.\n@@ -533,13 +553,20 @@ Target::getTargetInfo (const char *key, const Loc &loc)\n       tree result;\n \n       if (strcmp (key, spec->name) != 0)\n-       continue;\n+\tcontinue;\n \n       /* Get the requested information, or empty string if unhandled.  */\n       if (spec->handler)\n-       result = (spec->handler) ();\n+\t{\n+\t  result = (spec->handler) ();\n+\t  /* Handler didn't return a result, meaning it really does not support\n+\t     the key in the current target configuration.  Check whether there\n+\t     are any other handlers which may recognize the key.  */\n+\t  if (result == NULL_TREE)\n+\t    continue;\n+\t}\n       else\n-       result = build_string_literal (1, \"\");\n+\tresult = build_string_literal (1, \"\");\n \n       gcc_assert (result);\n       return d_eval_constant_expression (loc, result);"}]}