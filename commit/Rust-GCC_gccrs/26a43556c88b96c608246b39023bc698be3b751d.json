{"sha": "26a43556c88b96c608246b39023bc698be3b751d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZhNDM1NTZjODhiOTZjNjA4MjQ2YjM5MDIzYmM2OThiZTNiNzUxZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:35:16Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T08:35:16Z"}, "message": "[multiple changes]\n\n2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* switch-c.adb (Scan_Front_End_Switches): Disable front-end inlining\n\tin inspector mode.\n\n2009-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (New_Overloaded_Entity): Minor reformating.\n\n\t* sem_ch6.ads (Subtype_Conformant, Type_Conformant): Add missing\n\tdocumentation.\n\n\t* exp_aggr.adb (Build_Record_Aggr_Code): Code cleanup.\n\n\t* sem_disp.adb\n\t(Check_Dispatching_Operation): Set attribute Is_Dispatching_Operation\n\tin internally built overriding subprograms.\n\n2009-04-20  Doug Rupp  <rupp@adacore.com>\n\n\t* s-auxdec-vms_64.ads (Integer_{8,16,32,64}_Array): New array types.\n\n\t* s-auxdec.ads: Likewise\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Find_Type_Name): Reject the completion of a private\n\ttype by an interface.\n\n\t* exp_ch6.adb (Expand_Call): Inline To_Address unconditionally, to\n\tminimze difference in expanded tree when compiled as spec of the main\n\tunit, or as a spec in the context of another unit.\n\nFrom-SVN: r146370", "tree": {"sha": "03a933a49c26da19f666673002ba00e9d63f427c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03a933a49c26da19f666673002ba00e9d63f427c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26a43556c88b96c608246b39023bc698be3b751d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a43556c88b96c608246b39023bc698be3b751d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26a43556c88b96c608246b39023bc698be3b751d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26a43556c88b96c608246b39023bc698be3b751d/comments", "author": null, "committer": null, "parents": [{"sha": "3f25c54d814c705750dc1535dd935b39afc7b779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f25c54d814c705750dc1535dd935b39afc7b779", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f25c54d814c705750dc1535dd935b39afc7b779"}], "stats": {"total": 272, "additions": 190, "deletions": 82}, "files": [{"sha": "447a783e23708322e1908c02c55fd8a8e4beea99", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -1,3 +1,36 @@\n+2009-04-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* switch-c.adb (Scan_Front_End_Switches): Disable front-end inlining\n+\tin inspector mode.\n+\n+2009-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (New_Overloaded_Entity): Minor reformating.\n+\n+\t* sem_ch6.ads (Subtype_Conformant, Type_Conformant): Add missing\n+\tdocumentation.\n+\n+\t* exp_aggr.adb (Build_Record_Aggr_Code): Code cleanup.\n+\n+\t* sem_disp.adb\n+\t(Check_Dispatching_Operation): Set attribute Is_Dispatching_Operation\n+\tin internally built overriding subprograms.\n+\n+2009-04-20  Doug Rupp  <rupp@adacore.com>\n+\n+\t* s-auxdec-vms_64.ads (Integer_{8,16,32,64}_Array): New array types.\n+\n+\t* s-auxdec.ads: Likewise\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Find_Type_Name): Reject the completion of a private\n+\ttype by an interface.\n+\n+\t* exp_ch6.adb (Expand_Call): Inline To_Address unconditionally, to\n+\tminimze difference in expanded tree when compiled as spec of the main\n+\tunit, or as a spec in the context of another unit.\n+\n 2009-04-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* a-calend.adb: Remove types char_Pointer, int, tm and tm_Pointer."}, {"sha": "471a3ae503de16185a86b8a4e4cd9158a7d85012", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -2439,12 +2439,8 @@ package body Exp_Aggr is\n       --  to the actual type of the aggregate, so that the proper components\n       --  are visible. We know already that the types are compatible.\n \n-      --  There should also be a comment here explaining why the conversion\n-      --  is needed in the case of interfaces.???\n-\n       if Present (Etype (Lhs))\n-        and then (Is_Interface (Etype (Lhs))\n-                   or else Is_Class_Wide_Type (Etype (Lhs)))\n+        and then Is_Class_Wide_Type (Etype (Lhs))\n       then\n          Target := Unchecked_Convert_To (Typ, Lhs);\n       else\n@@ -2555,11 +2551,9 @@ package body Exp_Aggr is\n             --  of one such.\n \n             elsif Is_Limited_Type (Etype (A))\n-              and then Nkind (Unqualify (A)) /= N_Function_Call --  aggregate?\n-              and then\n-                (Nkind (Unqualify (A)) /= N_Unchecked_Type_Conversion\n-                   or else\n-                 Nkind (Expression (Unqualify (A))) /= N_Function_Call)\n+              and then (Nkind (Unqualify (A)) = N_Aggregate\n+                          or else\n+                        Nkind (Unqualify (A)) = N_Extension_Aggregate)\n               and then Nkind (Unqualify (A)) /= N_Explicit_Dereference\n             then\n                Ancestor_Is_Expression := True;"}, {"sha": "82311e1bc601f688bc6392c0a2029d2aed008b89", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 56, "deletions": 53, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -2891,10 +2891,26 @@ package body Exp_Ch6 is\n       if Ekind (Subp) = E_Function\n         or else Ekind (Subp) = E_Procedure\n       then\n-         --  A simple optimization: always replace calls to null procedures\n-         --  with a null statement.\n+         --  We perform two simple optimization on calls:\n \n-         if Is_Null_Procedure (Subp)  then\n+         --  a) replace calls to null procedures unconditionally,\n+\n+         --  b) For To_Address, just do an unchecked conversion. Not only is\n+         --  this efficient, but it also avoids order of elaboration problems\n+         --  when address clauses are inlined (address expression elaborated\n+         --  at the wrong point).\n+\n+         --  We perform these optimization regardless of whether we are in the\n+         --  main unit or in a unit in the context of the main unit, to ensure\n+         --  that tree generated is the same in both cases, for Inspector use.\n+\n+         if Is_RTE (Subp, RE_To_Address) then\n+            Rewrite (N,\n+              Unchecked_Convert_To\n+                (RTE (RE_Address), Relocate_Node (First_Actual (N))));\n+            return;\n+\n+         elsif Is_Null_Procedure (Subp)  then\n             Rewrite (N, Make_Null_Statement (Loc));\n             return;\n          end if;\n@@ -2908,9 +2924,9 @@ package body Exp_Ch6 is\n                Scop        : constant Entity_Id := Scope (Subp);\n \n                function In_Unfrozen_Instance return Boolean;\n-               --  If the subprogram comes from an instance in the same\n-               --  unit, and the instance is not yet frozen, inlining might\n-               --  trigger order-of-elaboration problems in gigi.\n+               --  If the subprogram comes from an instance in the same unit,\n+               --  and the instance is not yet frozen, inlining might trigger\n+               --  order-of-elaboration problems in gigi.\n \n                --------------------------\n                -- In_Unfrozen_Instance --\n@@ -2953,9 +2969,9 @@ package body Exp_Ch6 is\n                then\n                   Must_Inline := False;\n \n-               --  If this an inherited function that returns a private\n-               --  type, do not inline if the full view is an unconstrained\n-               --  array, because such calls cannot be inlined.\n+               --  If this an inherited function that returns a private type,\n+               --  do not inline if the full view is an unconstrained array,\n+               --  because such calls cannot be inlined.\n \n                elsif Present (Orig_Subp)\n                  and then Is_Array_Type (Etype (Orig_Subp))\n@@ -3013,37 +3029,35 @@ package body Exp_Ch6 is\n                     and then In_Same_Extended_Unit (Sloc (Spec), Loc)\n                   then\n                      Cannot_Inline\n-                      (\"cannot inline& (body not seen yet)?\",\n-                       N, Subp);\n+                      (\"cannot inline& (body not seen yet)?\", N, Subp);\n                   end if;\n                end if;\n             end Inlined_Subprogram;\n          end if;\n       end if;\n \n-      --  Check for a protected subprogram. This is either an intra-object\n-      --  call, or a protected function call. Protected procedure calls are\n-      --  rewritten as entry calls and handled accordingly.\n+      --  Check for protected subprogram. This is either an intra-object call,\n+      --  or a protected function call. Protected procedure calls are rewritten\n+      --  as entry calls and handled accordingly.\n \n-      --  In Ada 2005, this may be an indirect call to an access parameter\n-      --  that is an access_to_subprogram. In that case the anonymous type\n-      --  has a scope that is a protected operation, but the call is a\n-      --  regular one.\n+      --  In Ada 2005, this may be an indirect call to an access parameter that\n+      --  is an access_to_subprogram. In that case the anonymous type has a\n+      --  scope that is a protected operation, but the call is a regular one.\n \n       Scop := Scope (Subp);\n \n       if Nkind (N) /= N_Entry_Call_Statement\n         and then Is_Protected_Type (Scop)\n         and then Ekind (Subp) /= E_Subprogram_Type\n       then\n-         --  If the call is an internal one, it is rewritten as a call to\n-         --  to the corresponding unprotected subprogram.\n+         --  If the call is an internal one, it is rewritten as a call to the\n+         --  corresponding unprotected subprogram.\n \n          Expand_Protected_Subprogram_Call (N, Subp, Scop);\n       end if;\n \n-      --  Functions returning controlled objects need special attention\n-      --  If the return type is limited the context is an initialization\n+      --  Functions returning controlled objects need special attention:\n+      --  if the return type is limited, the context is an initialization\n       --  and different processing applies.\n \n       if Needs_Finalization (Etype (Subp))\n@@ -3053,9 +3067,9 @@ package body Exp_Ch6 is\n          Expand_Ctrl_Function_Call (N);\n       end if;\n \n-      --  Test for First_Optional_Parameter, and if so, truncate parameter\n-      --  list if there are optional parameters at the trailing end.\n-      --  Note we never delete procedures for call via a pointer.\n+      --  Test for First_Optional_Parameter, and if so, truncate parameter list\n+      --  if there are optional parameters at the trailing end.\n+      --  Note: we never delete procedures for call via a pointer.\n \n       if (Ekind (Subp) = E_Procedure or else Ekind (Subp) = E_Function)\n         and then Present (First_Optional_Parameter (Subp))\n@@ -3064,14 +3078,14 @@ package body Exp_Ch6 is\n             Last_Keep_Arg : Node_Id;\n \n          begin\n-            --  Last_Keep_Arg will hold the last actual that should be\n-            --  retained. If it remains empty at the end, it means that\n-            --  all parameters are optional.\n+            --  Last_Keep_Arg will hold the last actual that should be kept.\n+            --  If it remains empty at the end, it means that all parameters\n+            --  are optional.\n \n             Last_Keep_Arg := Empty;\n \n-            --  Find first optional parameter, must be present since we\n-            --  checked the validity of the parameter before setting it.\n+            --  Find first optional parameter, must be present since we checked\n+            --  the validity of the parameter before setting it.\n \n             Formal := First_Formal (Subp);\n             Actual := First_Actual (N);\n@@ -3225,23 +3239,25 @@ package body Exp_Ch6 is\n       Is_Unc : constant Boolean :=\n                     Is_Array_Type (Etype (Subp))\n                       and then not Is_Constrained (Etype (Subp));\n-      --  If the type returned by the function is unconstrained and the\n-      --  call can be inlined, special processing is required.\n+      --  If the type returned by the function is unconstrained and the call\n+      --  can be inlined, special processing is required.\n \n       procedure Make_Exit_Label;\n-      --  Build declaration for exit label to be used in Return statements\n+      --  Build declaration for exit label to be used in Return statements,\n+      --  sets Exit_Lab (the label node) and Lab_Decl (corresponding implcit\n+      --  declaration).\n \n       function Process_Formals (N : Node_Id) return Traverse_Result;\n-      --  Replace occurrence of a formal with the corresponding actual, or\n-      --  the thunk generated for it.\n+      --  Replace occurrence of a formal with the corresponding actual, or the\n+      --  thunk generated for it.\n \n       function Process_Sloc (Nod : Node_Id) return Traverse_Result;\n-      --  If the call being expanded is that of an internal subprogram,\n-      --  set the sloc of the generated block to that of the call itself,\n-      --  so that the expansion is skipped by the -next- command in gdb.\n+      --  If the call being expanded is that of an internal subprogram, set the\n+      --  sloc of the generated block to that of the call itself, so that the\n+      --  expansion is skipped by the \"next\" command in gdb.\n       --  Same processing for a subprogram in a predefined file, e.g.\n-      --  Ada.Tags. If Debug_Generated_Code is true, suppress this change\n-      --  to simplify our own development.\n+      --  Ada.Tags. If Debug_Generated_Code is true, suppress this change to\n+      --  simplify our own development.\n \n       procedure Rewrite_Function_Call (N : Node_Id; Blk : Node_Id);\n       --  If the function body is a single expression, replace call with\n@@ -3576,19 +3592,6 @@ package body Exp_Ch6 is\n \n    begin\n \n-      --  For To_Address, just do an unchecked conversion . Not only is this\n-      --  efficient, but it also avoids problem with order of elaboration\n-      --  when address clauses are inlined (address expression elaborated\n-      --  at the wrong point).\n-\n-      if Subp = RTE (RE_To_Address) then\n-         Rewrite (N,\n-           Unchecked_Convert_To\n-            (RTE (RE_Address),\n-             Relocate_Node (First_Actual (N))));\n-         return;\n-      end if;\n-\n       --  Check for an illegal attempt to inline a recursive procedure. If the\n       --  subprogram has parameters this is detected when trying to supply a\n       --  binding for parameters that already have one. For parameterless"}, {"sha": "b36341c0163df3636ce687601b1d38e240130383", "filename": "gcc/ada/s-auxdec-vms_64.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fs-auxdec-vms_64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fs-auxdec-vms_64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec-vms_64.ads?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -63,15 +63,23 @@ package System.Aux_DEC is\n    type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n    for Integer_8'Size  use  8;\n \n+   type Integer_8_Array is array (Integer range <>) of Integer_8;\n+\n    type Integer_16 is range -2 ** (16 - 1) .. +2 ** (16 - 1) - 1;\n    for Integer_16'Size use 16;\n \n+   type Integer_16_Array is array (Integer range <>) of Integer_16;\n+\n    type Integer_32 is range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;\n    for Integer_32'Size use 32;\n \n+   type Integer_32_Array is array (Integer range <>) of Integer_32;\n+\n    type Integer_64 is range -2 ** (64 - 1) .. +2 ** (64 - 1) - 1;\n    for Integer_64'Size use 64;\n \n+   type Integer_64_Array is array (Integer range <>) of Integer_64;\n+\n    type Largest_Integer is range Min_Int .. Max_Int;\n \n    type AST_Handler is private;"}, {"sha": "3748beec2310b1ab82c2b7dfca0619ed836ac92f", "filename": "gcc/ada/s-auxdec.ads", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fs-auxdec.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fs-auxdec.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-auxdec.ads?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -53,15 +53,23 @@ package System.Aux_DEC is\n    type Integer_8  is range -2 **  (8 - 1) .. +2 **  (8 - 1) - 1;\n    for Integer_8'Size  use  8;\n \n+   type Integer_8_Array is array (Integer range <>) of Integer_8;\n+\n    type Integer_16 is range -2 ** (16 - 1) .. +2 ** (16 - 1) - 1;\n    for Integer_16'Size use 16;\n \n+   type Integer_16_Array is array (Integer range <>) of Integer_16;\n+\n    type Integer_32 is range -2 ** (32 - 1) .. +2 ** (32 - 1) - 1;\n    for Integer_32'Size use 32;\n \n+   type Integer_32_Array is array (Integer range <>) of Integer_32;\n+\n    type Integer_64 is range -2 ** (64 - 1) .. +2 ** (64 - 1) - 1;\n    for Integer_64'Size use 64;\n \n+   type Integer_64_Array is array (Integer range <>) of Integer_64;\n+\n    type Largest_Integer is range Min_Int .. Max_Int;\n \n    type AST_Handler is private;"}, {"sha": "b4e57b22ac19c748895dd071456d782bf0328a3c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -5568,15 +5568,17 @@ package body Sem_Ch3 is\n \n                Install_Private_Declarations (Par_Scope);\n                Install_Visible_Declarations (Par_Scope);\n-               Insert_Before (N, Decl);\n+               Insert_After (N, Decl);\n                Analyze (Decl);\n                Uninstall_Declarations (Par_Scope);\n \n                --  Freeze the underlying record view, to prevent generation\n                --  of useless dispatching information, which is simply shared\n-               --  with the real derived type.\n+               --  with the real derived type. The underlying view must be\n+               --  treated as an itype by the back-end.\n \n                Set_Is_Frozen (Full_Der);\n+               Set_Is_Itype (Full_Der);\n                Set_Underlying_Record_View (Derived_Type, Full_Der);\n             end;\n \n@@ -13495,6 +13497,15 @@ package body Sem_Ch3 is\n                         (\"completion of tagged private type must be tagged\",\n                            N);\n                   end if;\n+\n+               elsif Nkind (N) = N_Full_Type_Declaration\n+                 and then\n+                   Nkind (Type_Definition (N)) = N_Record_Definition\n+                 and then Interface_Present (Type_Definition (N))\n+               then\n+                  Error_Msg_N\n+                    (\"completion of private type canot be an interface\",\n+                       N);\n                end if;\n \n             --  Ada 2005 (AI-251): Private extension declaration of a task"}, {"sha": "17103e1e3b590a13e6d3b20b4b1c3376892fb5a7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -7388,9 +7388,9 @@ package body Sem_Ch6 is\n \n                   return;\n \n-                  --  Within an instance, the renaming declarations for\n-                  --  actual subprograms may become ambiguous, but they do\n-                  --  not hide each other.\n+               --  Within an instance, the renaming declarations for actual\n+               --  subprograms may become ambiguous, but they do not hide each\n+               --  other.\n \n                elsif Ekind (E) /= E_Entry\n                  and then not Comes_From_Source (E)\n@@ -7402,8 +7402,8 @@ package body Sem_Ch6 is\n                             or else Nkind (Unit_Declaration_Node (E)) /=\n                                       N_Subprogram_Renaming_Declaration)\n                then\n-                  --  A subprogram child unit is not allowed to override\n-                  --  an inherited subprogram (10.1.1(20)).\n+                  --  A subprogram child unit is not allowed to override an\n+                  --  inherited subprogram (10.1.1(20)).\n \n                   if Is_Child_Unit (S) then\n                      Error_Msg_N"}, {"sha": "5752c21c083fa506a1e917bf1abfac716e041f6a", "filename": "gcc/ada/sem_ch6.ads", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.ads?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -57,8 +57,8 @@ package Sem_Ch6 is\n \n    procedure Check_Conventions (Typ : Entity_Id);\n    --  Ada 2005 (AI-430): Check that the conventions of all inherited and\n-   --  overridden dispatching operations of type Typ are consistent with\n-   --  their respective counterparts.\n+   --  overridden dispatching operations of type Typ are consistent with their\n+   --  respective counterparts.\n \n    procedure Check_Delayed_Subprogram (Designator : Entity_Id);\n    --  Designator can be a E_Subprogram_Type, E_Procedure or E_Function. If a\n@@ -69,10 +69,10 @@ package Sem_Ch6 is\n      (N        : Node_Id;\n       Prev     : Entity_Id;\n       Prev_Loc : Node_Id);\n-   --  Check that the discriminants of a full type N fully conform to\n-   --  the discriminants of the corresponding partial view Prev.\n-   --  Prev_Loc indicates the source location of the partial view,\n-   --  which may be different than Prev in the case of private types.\n+   --  Check that the discriminants of a full type N fully conform to the\n+   --  discriminants of the corresponding partial view Prev. Prev_Loc indicates\n+   --  the source location of the partial view, which may be different than\n+   --  Prev in the case of private types.\n \n    procedure Check_Fully_Conformant\n      (New_Id  : Entity_Id;\n@@ -230,15 +230,21 @@ package Sem_Ch6 is\n      (New_Id                   : Entity_Id;\n       Old_Id                   : Entity_Id;\n       Skip_Controlling_Formals : Boolean := False) return Boolean;\n-   --  Determine whether two callable entities (subprograms, entries,\n-   --  literals) are subtype conformant (RM6.3.1(16)).\n+   --  Determine whether two callable entities (subprograms, entries, literals)\n+   --  are subtype conformant (RM6.3.1(16)).  Skip_Controlling_Formals is True\n+   --  when checking the conformance of a subprogram that implements an\n+   --  interface operation. In that case, only the non-controlling formals\n+   --  can (and must) be examined.\n \n    function Type_Conformant\n      (New_Id                   : Entity_Id;\n       Old_Id                   : Entity_Id;\n       Skip_Controlling_Formals : Boolean := False) return Boolean;\n-   --  Determine whether two callable entities (subprograms, entries,\n-   --  literals) are type conformant (RM6.3.1(14)).\n+   --  Determine whether two callable entities (subprograms, entries, literals)\n+   --  are type conformant (RM6.3.1(14)). Skip_Controlling_Formals is True when\n+   --  checking the conformance of a subprogram that implements an interface\n+   --  operation. In that case, only the non-controlling formals can (and must)\n+   --  be examined.\n \n    procedure Valid_Operator_Definition (Designator : Entity_Id);\n    --  Verify that an operator definition has the proper number of formals"}, {"sha": "d6799bce4f5a73920824d58d251bcb9a3898ef34", "filename": "gcc/ada/sem_disp.adb", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fsem_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_disp.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -42,6 +42,7 @@ with Restrict; use Restrict;\n with Rident;   use Rident;\n with Sem;      use Sem;\n with Sem_Aux;  use Sem_Aux;\n+with Sem_Ch3;  use Sem_Ch3;\n with Sem_Ch6;  use Sem_Ch6;\n with Sem_Elim; use Sem_Elim;\n with Sem_Eval; use Sem_Eval;\n@@ -711,12 +712,41 @@ package body Sem_Disp is\n          return;\n \n       --  The subprograms build internally after the freezing point (such as\n-      --  the Init procedure) are not primitives\n+      --  init procs, interface thunks, type support subprograms, and Offset\n+      --  to top functions for accessing interface components in variable\n+      --  size tagged types) are not primitives.\n \n       elsif Is_Frozen (Tagged_Type)\n         and then not Comes_From_Source (Subp)\n         and then not Has_Dispatching_Parent\n       then\n+         --  Complete decoration if internally built subprograms that override\n+         --  a dispatching primitive. These entities correspond with the\n+         --  following cases:\n+\n+         --  1. Ada 2005 (AI-391): Wrapper functions built by the expander\n+         --     to override functions of nonabstract null extensions. These\n+         --     primitives were added to the list of primitives of the tagged\n+         --     type by Make_Controlling_Function_Wrappers. However, attribute\n+         --     Is_Dispatching_Operation must be set to true.\n+\n+         --  2. Subprograms associated with stream attributes (built by\n+         --     New_Stream_Subprogram)\n+\n+         if Present (Old_Subp)\n+           and then Is_Overriding_Operation (Subp)\n+           and then Is_Dispatching_Operation (Old_Subp)\n+         then\n+            pragma Assert\n+             ((Ekind (Subp) = E_Function\n+                 and then Is_Dispatching_Operation (Old_Subp)\n+                 and then Is_Null_Extension (Base_Type (Etype (Subp))))\n+               or else Get_TSS_Name (Subp) = TSS_Stream_Read\n+               or else Get_TSS_Name (Subp) = TSS_Stream_Write);\n+\n+            Set_Is_Dispatching_Operation (Subp);\n+         end if;\n+\n          return;\n \n       --  The operation may be a child unit, whose scope is the defining"}, {"sha": "6c79b94569fc31de16921e063ec77376a323cd5b", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26a43556c88b96c608246b39023bc698be3b751d/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=26a43556c88b96c608246b39023bc698be3b751d", "patch": "@@ -256,6 +256,14 @@ package body Switch.C is\n                      if Dot then\n                         Set_Dotted_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd.\" & C);\n+\n+                        --  Disable front-end inlining in inspector mode\n+                        --  ??? Change this when we use a non debug flag to\n+                        --  enable inspector mode.\n+\n+                        if C = 'I' then\n+                           Front_End_Inlining := False;\n+                        end if;\n                      else\n                         Set_Debug_Flag (C);\n                         Store_Compilation_Switch (\"-gnatd\" & C);\n@@ -632,7 +640,14 @@ package body Switch.C is\n             when 'N' =>\n                Ptr := Ptr + 1;\n                Inline_Active := True;\n-               Front_End_Inlining := True;\n+\n+               --  Do not enable front-end inlining in inspector mode, to\n+               --  generate trees that can be converted to SCIL. We still\n+               --  enable back-end inlining which is fine.\n+\n+               if not Inspector_Mode then\n+                  Front_End_Inlining := True;\n+               end if;\n \n             --  Processing for o switch\n "}]}