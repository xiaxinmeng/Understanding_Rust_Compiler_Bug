{"sha": "e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "node_id": "C_kwDOANBUbNoAKGU4ZmMzM2FhYmNmZDhmNGE0ZTM4NGUwMjJlNDgxMmNhY2E1NTZlMGU", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-25T00:16:33Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-08-25T00:16:33Z"}, "message": "Daily bump.", "tree": {"sha": "d2844eb5dc3fb953028430e8ef3f6c58aa2bfc72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2844eb5dc3fb953028430e8ef3f6c58aa2bfc72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/comments", "author": null, "committer": null, "parents": [{"sha": "49e25d3e29aa1b56e6e82654de1a452a6cedc265", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49e25d3e29aa1b56e6e82654de1a452a6cedc265", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49e25d3e29aa1b56e6e82654de1a452a6cedc265"}], "stats": {"total": 338, "additions": 337, "deletions": 1}, "files": [{"sha": "4a99f8a6bfd00934246c8e5e1499c0f452291d1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1,3 +1,208 @@\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106632\n+\tPR target/106588\n+\t* config/riscv/bitmanip.md (*shNadduw): Use n constraint\n+\tinstead of i.\n+\t(*slliuw): Likewise.\n+\t(*bexti): Likewise. Also add a check for operands[2] to be less\n+\tthan the mode bitsize.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/constraints.md (DbS): New constraint.\n+\t(DnS): New constraint.\n+\t* config/riscv/bitmanip.md (*bset<mode>_1_mask): Use new constraint.\n+\t(*bclr<mode>): Likewise.\n+\t(*binvi<mode>): Likewise.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106586\n+\t* config/riscv/predicates.md (single_bit_mask_operand):\n+\tUse SINGLE_BIT_MASK_OPERAND instead of directly calling pow2p_hwi.\n+\t(not_single_bit_mask_operand): Likewise.\n+\t* config/riscv/riscv.cc (riscv_build_integer_1): Don't special case\n+\t1<<31 for 32bits as it is already handled.\n+\tCall trunc_int_for_mode on the upper part after the subtraction.\n+\t(riscv_move_integer): Call trunc_int_for_mode before generating\n+\tthe integer just make sure the constant has been sign extended\n+\tcorectly.\n+\t(riscv_emit_int_compare): Call trunc_int_for_mode after doing the\n+\taddition for the new rhs.\n+\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): If !TARGET64BIT,\n+\tthen mask off the upper 32bits of the HWI as it will be sign extended.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/constraints.md (DsS): New constraint.\n+\t(DsD): New constraint.\n+\t* config/riscv/iterators.md (shiftm1c): New iterator.\n+\t* config/riscv/bitmanip.md (*bset<mode>_mask):\n+\tUse shiftm1c.\n+\t(*bset<mode>_1_mask): Likewise.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/constraints.md (Ds3): New constraint.\n+\t* config/riscv/predicates.md (imm123_operand): New predicate.\n+\t* config/riscv/bitmanip.md (*shNadd): Use Ds3 and imm123_operand.\n+\t(*shNadduw): Likewise.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/riscv.cc (riscv_print_operand):\n+\tHandle '~'.\n+\t(riscv_print_operand_punct_valid_p): New function\n+\t(TARGET_PRINT_OPERAND_PUNCT_VALID_P): Define.\n+\t* config/riscv/bitmanip.md (<bitmanip_optab>si2/clz_ctz_pcnt):\n+\tUse %~ instead of conditional the pattern on TARGET_64BIT.\n+\t(rotrsi3): Likewise.\n+\t(rotlsi3): Likewise.\n+\t* config/riscv/riscv.md: Add ~ to the list of modifiers.\n+\t(addsi3): Use %~ instead of conditional the pattern on TARGET_64BIT.\n+\t(subsi3): Likewise.\n+\t(negsi2): Likewise.\n+\t(mulsi3): Likewise.\n+\t(optab>si3/any_div): Likewise.\n+\t(*add<mode>hi3): Likewise.\n+\t(<optab>si3/any_shift): Likewise.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/riscv.cc (riscv_print_operand): Make a mention to\n+\tkeep the list in riscv.md in sync with this list.\n+\t* config/riscv/riscv.md: Add list of modifiers as comments.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/sync.md (any_atomic, atomic_optab): Move to ...\n+\t* config/riscv/iterators.md: Here.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/bitmanip.md\n+\t(bitmanip_bitwise, bitmanip_minmax, clz_ctz_pcna,\n+\ttbitmanip_optab, bitmanip_insn, shiftm1): Move to ...\n+\t* config/riscv/iterators.md: Here.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* config/riscv/riscv.md (GPR): Move to new file.\n+\t(P, X, BR): Likewise.\n+\t(MOVE32, MOVE64, SHORT): Likewise.\n+\t(HISI, SUPERQI, SUBX): Likewise.\n+\t(ANYI, ANYF, SOFTF): Likewise.\n+\t(size, load, default_load): Likewise.\n+\t(softload, store, softstore): Likewise.\n+\t(reg, fmt, ifmt, amo): Likewise.\n+\t(UNITMODE, HALFMODE): Likewise.\n+\t(RINT, rint_pattern, rint_rm): Likewise.\n+\t(QUIET_COMPARISON, quiet_pattern, QUIET_PATTERN): Likewise.\n+\t(any_extend, any_shiftrt, any_shift): Likewise.\n+\t(any_bitwise): Likewise.\n+\t(any_div, any_mod): Likewise.\n+\t(any_gt, any_ge, any_lt, any_le): Likewise.\n+\t(u, su): Likewise.\n+\t(optab, insn): Likewise.\n+\t* config/riscv/iterators.md: New file.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106601\n+\t* config/riscv/bitmanip.md (bswaphi2): New pattern.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106600\n+\t* config/riscv/bitmanip.md (bswap<mode>2): Remove\n+\tcondition on TARGET_64BIT as X is already conditional there.\n+\n+2022-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* tree.cc (build_real): Give DFP dconst0 the minimum quantum\n+\texponent for the type.\n+\n+2022-08-24  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\tPR target/106733\n+\t* config/bpf/bpf.cc (bpf_legitimate_address_p): Recognize integer\n+\tconstants as legitimate addresses for functions.\n+\t(bpf_small_register_classes_for_mode_p): Define target hook.\n+\n+2022-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc: Move predicate normalization\n+\tafter the comment documenting it.\n+\n+2022-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.h (predicate): Split out\n+\tnon-predicate related functionality into ..\n+\t(uninit_analysis): .. this new class.\n+\t* gimple-predicate-analysis.cc: Refactor into two classes.\n+\t* tree-ssa-uninit.cc (find_uninit_use): Use uninit_analysis.\n+\n+2022-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (predicate::use_cannot_happen):\n+\tDo simple_control_dep_chain only up to cd_root, add the PHI\n+\toperand edge to the chains like init_from_phi_def does.\n+\t(predicate::is_use_guarded): Speedup early out, avoid half-way\n+\tinitializing the PHI def predicate.\n+\n+2022-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/106721\n+\t* config/i386/sse.md (shuffletype): Add V32BF, V16BF and V8BF entries.\n+\tChange V32HF, V16HF and V8HF entries from \"f\" to \"i\".\n+\t(iptr): Add V32BF, V16BF, V8BF and BF entries.\n+\t(i128vldq): Add V16HF and V16BF entries.\n+\t(avx512er_vmrcp28<mode><mask_name><round_saeonly_name>): Fix typo,\n+\tmask_opernad3 -> mask_operand3.\n+\n+2022-08-24  Martin Liska  <mliska@suse.cz>\n+\t    J\u00f8rgen Kvalsvik  <j@lambda.is>\n+\n+\t* gcov.cc (add_line_counts): Add group functions to coverage\n+\tsummary.\n+\t(accumulate_line_counts): Similarly for files.\n+\n+2022-08-24  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* config/loongarch/genopts/loongarch-strings: Support code model medium.\n+\t* config/loongarch/genopts/loongarch.opt.in: Likewise.\n+\t* config/loongarch/loongarch-def.c: Likewise.\n+\t* config/loongarch/loongarch-def.h (CMODEL_LARGE): Likewise.\n+\t(CMODEL_EXTREME): Likewise.\n+\t(N_CMODEL_TYPES): Likewise.\n+\t(CMODEL_MEDIUM): Likewise.\n+\t* config/loongarch/loongarch-opts.cc: Likewise.\n+\t* config/loongarch/loongarch-opts.h (TARGET_CMODEL_MEDIUM): Likewise.\n+\t* config/loongarch/loongarch-str.h (STR_CMODEL_MEDIUM): Likewise.\n+\t* config/loongarch/loongarch.cc (loongarch_call_tls_get_addr):\n+\tTls symbol Loading support medium mode.\n+\t(loongarch_legitimize_call_address): When medium mode, make a symbolic\n+\tjump with two instructions.\n+\t(loongarch_option_override_internal): Support medium.\n+\t* config/loongarch/loongarch.md (@pcalau12i<mode>): New template.\n+\t(@sibcall_internal_1<mode>): New function call templates added to support\n+\tmedium mode.\n+\t(@sibcall_value_internal_1<mode>): Likewise.\n+\t(@sibcall_value_multiple_internal_1<mode>): Likewise.\n+\t(@call_internal_1<mode>): Likewise.\n+\t(@call_value_internal_1<mode>): Likewise.\n+\t(@call_value_multiple_internal_1<mode>): Likewise.\n+\t* config/loongarch/loongarch.opt: Support medium.\n+\t* config/loongarch/predicates.md: Add processing about medium mode.\n+\t* doc/invoke.texi: Document for '-mcmodel=medium'.\n+\n+2022-08-24  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-predicate-analysis.cc (predicate::use_cannot_happen):\n+\tStart the compute_control_dep_chain walk from the immediate\n+\tdominator of the PHI.\n+\n 2022-08-23  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/106714"}, {"sha": "359f4ea53a528cb78b2e8f9167c3a4f23da10fa9", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1 +1 @@\n-20220824\n+20220825"}, {"sha": "be3e9da8d6f01cbf2fb2bace8afef96534f39934", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1,3 +1,9 @@\n+2022-08-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103694\n+\t* simplify.cc (simplify_size): The size expression of an array cannot\n+\tbe simplified if an error occurs while resolving the array spec.\n+\n 2022-08-22  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/106557"}, {"sha": "3aa57280d45fdfe3b5d15270856b1e26127b986d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1,3 +1,63 @@\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\t* lib/target-supports.exp (check_effective_target_bswap):\n+\tReturn true if riscv and ZBB ISA extension is enabled.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106601\n+\t* gcc.target/riscv/zbb_32_bswap-2.c: New test.\n+\t* gcc.target/riscv/zbb_bswap-2.c: New test.\n+\n+2022-08-24  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/106600\n+\t* gcc.target/riscv/zbb_32_bswap-1.c: New test.\n+\t* gcc.target/riscv/zbb_bswap-1.c: New test.\n+\n+2022-08-24  Harald Anlauf  <anlauf@gmx.de>\n+\n+\tPR fortran/103694\n+\t* gfortran.dg/pr103694.f90: New test.\n+\n+2022-08-24  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/torture/dfp-default-init-1.c,\n+\tgcc.dg/torture/dfp-default-init-2.c,\n+\tgcc.dg/torture/dfp-default-init-3.c: New tests.\n+\n+2022-08-24  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\tPR target/106733\n+\t* gcc.target/bpf/constant-calls.c: Rename to ...\n+\t* gcc.target/bpf/constant-calls-1.c: and modify to not expect\n+\tfailure anymore.\n+\t* gcc.target/bpf/constant-calls-2.c: New test.\n+\n+2022-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/106721\n+\t* gcc.target/i386/avx512vl-pr106721.c: New test.\n+\n+2022-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106646\n+\t* g++.dg/cpp/warning-1.C: New test.\n+\t* g++.dg/cpp/warning-2.C: New test.\n+\t* g++.dg/cpp/warning-3.C: New test.\n+\n+2022-08-24  Lulu Cheng  <chenglulu@loongson.cn>\n+\n+\t* gcc.target/loongarch/func-call-medium-1.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-2.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-3.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-4.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-5.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-6.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-7.c: New test.\n+\t* gcc.target/loongarch/func-call-medium-8.c: New test.\n+\t* gcc.target/loongarch/tls-gd-noplt.c: Add compile parameter '-mexplicit-relocs'.\n+\n 2022-08-23  Marek Polacek  <polacek@redhat.com>\n \n \t* g++.dg/cpp0x/Wpessimizing-move10.C: New test."}, {"sha": "5e3fa0a7725530317e8a1e19e0f7fdf6e82185ad", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1,3 +1,11 @@\n+2022-08-24  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/106646\n+\t* init.cc: Implement C++23 P2437R1 - Support for #warning.\n+\t(lang_defaults): Set warning_directive for GNUCXX23 and CXX23.\n+\t* directives.cc (directive_diagnostics): Use different wording of\n+\t#warning pedwarn for C++.\n+\n 2022-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/106645"}, {"sha": "4c78614d1ed1f8c75ba300afd53cba4ff6ab9a06", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8fc33aabcfd8f4a4e384e022e4812caca556e0e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e8fc33aabcfd8f4a4e384e022e4812caca556e0e", "patch": "@@ -1,3 +1,60 @@\n+2022-08-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/ranges_algo.h (__min_fn, min): Move to ...\n+\t* include/bits/ranges_util.h: ... here, in order to avoid\n+\tincluding all of ranges_algo.h from <ranges>.\n+\t* include/std/ranges (__detail::__zip_is_common): Define for\n+\tC++23 as per P2321R2.\n+\t(__detail::__tuple_or_pair): Likewise.\n+\t(__detail::__tuple_or_pair_t): Likewise.\n+\t(__detail::__tuple_transform): Likewise.\n+\t(__detail::__tuple_for_each): Likewise.\n+\t(zip_view): Likewise.\n+\t(enable_borrowed_range<zip_view>): Likewise.\n+\t(__detail::__all_random_access): Likewise.\n+\t(__detail::__all_bidirectional): Likewise.\n+\t(__detail::__all_forward): Likewise.\n+\t(__detail::__zip_view_iter_cat): Likewise.\n+\t(zip_view::_Iterator): Likewise.\n+\t(zip_view::_Sentinel): Likewise.\n+\t* testsuite/std/ranges/zip/1.cc: New test.\n+\n+2022-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tRevert:\n+\t2022-08-24  Will Hawkins  <whh8b@obs.cr>\n+\n+\t* include/bits/basic_string.h (operator+(const string&, const char*)):\n+\tRemove naive implementation.\n+\t* include/bits/basic_string.tcc (operator+(const string&, const char*)):\n+\tAdd single-allocation implementation.\n+\n+2022-08-24  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/bits/stl_pair.h (pair::swap const): Add non-standard\n+\tis_swappable_v constraints.\n+\t* include/std/tuple (tuple::swap const): Likewise.\n+\t* testsuite/20_util/tuple/cons/noexcept_specs.cc: Correct some\n+\tasserts in C++23 mode.\n+\n+2022-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/stl_algo.h (__stable_sort): Cast size to\n+\titerator's difference type.\n+\t* testsuite/25_algorithms/stable_sort/4.cc: New test.\n+\n+2022-08-24  Will Hawkins  <whh8b@obs.cr>\n+\n+\t* include/bits/basic_string.h (operator+(const string&, const char*)):\n+\tRemove naive implementation.\n+\t* include/bits/basic_string.tcc (operator+(const string&, const char*)):\n+\tAdd single-allocation implementation.\n+\n+2022-08-24  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/duration_cast/rounding.cc: Check abs with\n+\tnon-reduced duration.\n+\n 2022-08-23  Patrick Palka  <ppalka@redhat.com>\n \n \t* include/bits/stl_bvector.h (_Bit_reference::operator=): Define"}]}