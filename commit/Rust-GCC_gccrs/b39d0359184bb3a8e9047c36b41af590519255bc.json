{"sha": "b39d0359184bb3a8e9047c36b41af590519255bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM5ZDAzNTkxODRiYjNhOGU5MDQ3YzM2YjQxYWY1OTA1MTkyNTViYw==", "commit": {"author": {"name": "Loren J. Rittle", "email": "ljrittle@acm.org", "date": "2003-04-15T07:27:55Z"}, "committer": {"name": "Loren J. Rittle", "email": "ljrittle@gcc.gnu.org", "date": "2003-04-15T07:27:55Z"}, "message": "std_cmath.h (__gnu_cx::__c99_binding): New namespace.\n\n\tlibstdc++/7680\n\t* include/c_std/std_cmath.h (__gnu_cx::__c99_binding): New namespace.\n\tPopulate it with multiple legal ways to obtain the C99 float\n\ttranscendentals.  Use them instead of direct global reference.\n\t(C99 FP capture): Guard usage with _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC.\n\t* docs/html/17_intro/porting.texi\n\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK): New macro.\n\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC): New macro.\n\t(_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC): New macro.\n\t* config/os/bsd/freebsd/os_defines.h\n\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK): New macro.\n\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC): New macro.\n\t* testsuite/26_numerics/c_math_dynamic.cc: New file.\n\nFrom-SVN: r65624", "tree": {"sha": "b7f2811a24af9915abfb1d6a734f879409a92d41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7f2811a24af9915abfb1d6a734f879409a92d41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b39d0359184bb3a8e9047c36b41af590519255bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39d0359184bb3a8e9047c36b41af590519255bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b39d0359184bb3a8e9047c36b41af590519255bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b39d0359184bb3a8e9047c36b41af590519255bc/comments", "author": null, "committer": null, "parents": [{"sha": "35a54b49e6d6a44a304228bf2f6b6c66ff1a3fbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35a54b49e6d6a44a304228bf2f6b6c66ff1a3fbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35a54b49e6d6a44a304228bf2f6b6c66ff1a3fbc"}], "stats": {"total": 221, "additions": 201, "deletions": 20}, "files": [{"sha": "3c96e9448df4cada957768f1f9107a727e260d42", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b39d0359184bb3a8e9047c36b41af590519255bc", "patch": "@@ -1,3 +1,19 @@\n+2003-04-15  Loren J. Rittle  <ljrittle@acm.org>\n+\n+\tlibstdc++/7680\n+\t* include/c_std/std_cmath.h (__gnu_cx::__c99_binding): New namespace.\n+\tPopulate it with multiple legal ways to obtain the C99 float\n+\ttranscendentals.  Use them instead of direct global reference.\n+\t(C99 FP capture): Guard usage with _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC.\n+\t* docs/html/17_intro/porting.texi\n+\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK): New macro.\n+\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC): New macro.\n+\t(_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC): New macro.\n+\t* config/os/bsd/freebsd/os_defines.h\n+\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK): New macro.\n+\t(_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC): New macro.\n+\t* testsuite/26_numerics/c_math_dynamic.cc: New file.\n+\n 2003-04-14  Andreas Tobler  <toa@pop.agri.ch>\n  \t    Benjamin Kosnik  <bkoz@redhat.com>\n "}, {"sha": "806add6a154ac695884faa14e7f825d9ae784c34", "filename": "libstdc++-v3/config/os/bsd/freebsd/os_defines.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fos%2Fbsd%2Ffreebsd%2Fos_defines.h?ref=b39d0359184bb3a8e9047c36b41af590519255bc", "patch": "@@ -34,4 +34,7 @@\n // System-specific #define, typedefs, corrections, etc, go here.  This\n // file will come before all others.\n \n+#define _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK 1\n+#define _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC defined _XOPEN_SOURCE\n+\n #endif"}, {"sha": "bafa62d1d19356964ae2650461b8dbb8f85ee35e", "filename": "libstdc++-v3/docs/html/17_intro/porting.texi", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting.texi?ref=b39d0359184bb3a8e9047c36b41af590519255bc", "patch": "@@ -150,12 +150,27 @@ need to define.  You will need to add them to the\n target.  It will not work to simply define these macros in\n @file{os_defines.h}.\n \n-At this time, there is one libstdc++-v3-specific macro which may be\n+At this time, there are a few libstdc++-v3-specific macro which may be\n defined.  @code{_G_USING_THUNKS} may be defined to 0 to express that the\n port doesn't use thunks (although it is unclear that this is still\n useful since libio support isn't currently working and the g++ v3 ABI\n invalidates the assumption that some ports don't use thunks).\n \n+@code{_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC} may be defined to an\n+expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of macros.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+\n+@code{_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK} may be defined\n+to 1 to check the related set of function declarations found in system\n+headers against versions found in the library headers derived from\n+the standard.\n+\n+@code{_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC} may be defined\n+to an expression that yields 0 if and only if the system headers\n+are exposing proper support for the related set of functions.  If defined,\n+it must be 0 while bootstrapping the compiler/rebuilding the library.\n+\n Finally, you should bracket the entire file in an include-guard, like\n this:\n "}, {"sha": "1264c4dba69a39599ac961510dcb951d93abe496", "filename": "libstdc++-v3/include/c_std/std_cmath.h", "status": "modified", "additions": 108, "deletions": 19, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_std%2Fstd_cmath.h?ref=b39d0359184bb3a8e9047c36b41af590519255bc", "patch": "@@ -1,6 +1,6 @@\n // -*- C++ -*- C forwarding header.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -76,6 +76,91 @@\n #undef tan\n #undef tanh\n \n+// ...and in the darkness bind them...\n+namespace __gnu_cxx\n+{\n+  namespace  __c99_binding\n+  {\n+#if _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_CHECK || \\\n+    _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n+    extern \"C\" float (acosf)(float);\n+    extern \"C\" float (asinf)(float);\n+    extern \"C\" float (atanf)(float);\n+    extern \"C\" float (atan2f)(float, float);\n+    extern \"C\" float (ceilf)(float);\n+    extern \"C\" float (coshf)(float);\n+    extern \"C\" float (expf)(float);\n+    extern \"C\" float (floorf)(float);\n+    extern \"C\" float (fmodf)(float, float);\n+    extern \"C\" float (frexpf)(float, int*);\n+    extern \"C\" float (ldexpf)(float, int);\n+    extern \"C\" float (logf)(float);\n+    extern \"C\" float (log10f)(float);\n+    extern \"C\" float (modff)(float, float*);\n+    extern \"C\" float (powf)(float, float);\n+    extern \"C\" float (sinhf)(float);\n+    extern \"C\" float (tanf)(float);\n+    extern \"C\" float (tanhf)(float);\n+#endif\n+#if !_GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC\n+#if _GLIBCPP_HAVE_ACOSF\n+    using ::acosf;\n+#endif\n+#if _GLIBCPP_HAVE_ASINF\n+    using ::asinf;\n+#endif\n+#if _GLIBCPP_HAVE_ATANF\n+    using ::atanf;\n+#endif\n+#if _GLIBCPP_HAVE_ATAN2F\n+    using ::atan2f;\n+#endif\n+#if _GLIBCPP_HAVE_CEILF\n+    using ::ceilf;\n+#endif\n+#if _GLIBCPP_HAVE_COSHF\n+    using ::coshf;\n+#endif\n+#if _GLIBCPP_HAVE_EXPF\n+    using ::expf;\n+#endif\n+#if _GLIBCPP_HAVE_FLOORF\n+    using ::floorf;\n+#endif\n+#if _GLIBCPP_HAVE_FMODF\n+    using ::fmodf;\n+#endif\n+#if _GLIBCPP_HAVE_FREXPF\n+    using ::frexpf;\n+#endif\n+#if _GLIBCPP_HAVE_LDEXPF\n+    using ::ldexpf;\n+#endif\n+#if _GLIBCPP_HAVE_LOGF\n+    using ::logf;\n+#endif\n+#if _GLIBCPP_HAVE_LOG10F\n+    using ::log10f;\n+#endif\n+#if _GLIBCPP_HAVE_MODFF\n+    using ::modff;\n+#endif\n+#if _GLIBCPP_HAVE_POWF\n+    using ::powf;\n+#endif\n+#if _GLIBCPP_HAVE_SINHF\n+    using ::sinhf;\n+#endif\n+#if _GLIBCPP_HAVE_TANF\n+    using ::tanf;\n+#endif\n+#if _GLIBCPP_HAVE_TANHF\n+    using ::tanhf;\n+#endif\n+#endif /* _GLIBCPP_USE_C99_FLOAT_TRANSCENDENTALS_DYNAMIC */\n+  }\n+}\n+\n namespace std \n {\n   // Forward declaration of a helper function.  This really should be\n@@ -96,7 +181,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_ACOSF\n   inline float \n-  acos(float __x) { return ::acosf(__x); }\n+  acos(float __x) { return __gnu_cxx::__c99_binding::acosf(__x); }\n #else\n   inline float \n   acos(float __x) { return ::acos(static_cast<double>(__x)); }\n@@ -116,7 +201,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_ASINF\n   inline float \n-  asin(float __x) { return ::asinf(__x); }\n+  asin(float __x) { return __gnu_cxx::__c99_binding::asinf(__x); }\n #else\n   inline float \n   asin(float __x) { return ::asin(static_cast<double>(__x)); }\n@@ -134,7 +219,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_ATANF\n   inline float \n-  atan(float __x) { return ::atanf(__x); }\n+  atan(float __x) { return __gnu_cxx::__c99_binding::atanf(__x); }\n #else\n   inline float \n   atan(float __x) { return ::atan(static_cast<double>(__x)); }\n@@ -152,7 +237,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_ATAN2F\n   inline float \n-  atan2(float __y, float __x) { return ::atan2f(__y, __x); }\n+  atan2(float __y, float __x) { return __gnu_cxx::__c99_binding::atan2f(__y, __x); }\n #else\n   inline float \n   atan2(float __y, float __x)\n@@ -172,7 +257,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_CEILF\n   inline float \n-  ceil(float __x) { return ::ceilf(__x); }\n+  ceil(float __x) { return __gnu_cxx::__c99_binding::ceilf(__x); }\n #else\n   inline float \n   ceil(float __x) { return ::ceil(static_cast<double>(__x)); }\n@@ -200,7 +285,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_COSHF\n   inline float \n-  cosh(float __x) { return ::coshf(__x); }\n+  cosh(float __x) { return __gnu_cxx::__c99_binding::coshf(__x); }\n #else\n   inline float \n   cosh(float __x) { return ::cosh(static_cast<double>(__x)); }\n@@ -218,7 +303,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_EXPF\n   inline float \n-  exp(float __x) { return ::expf(__x); }\n+  exp(float __x) { return __gnu_cxx::__c99_binding::expf(__x); }\n #else\n   inline float \n   exp(float __x) { return ::exp(static_cast<double>(__x)); }\n@@ -246,7 +331,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_FLOORF\n   inline float \n-  floor(float __x) { return ::floorf(__x); }\n+  floor(float __x) { return __gnu_cxx::__c99_binding::floorf(__x); }\n #else\n   inline float \n   floor(float __x) { return ::floor(static_cast<double>(__x)); }\n@@ -264,7 +349,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_FMODF\n   inline float \n-  fmod(float __x, float __y) { return ::fmodf(__x, __y); }\n+  fmod(float __x, float __y) { return __gnu_cxx::__c99_binding::fmodf(__x, __y); }\n #else\n   inline float \n   fmod(float __x, float __y)\n@@ -284,7 +369,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_FREXPF\n   inline float \n-  frexp(float __x, int* __exp) { return ::frexpf(__x, __exp); }\n+  frexp(float __x, int* __exp) { return __gnu_cxx::__c99_binding::frexpf(__x, __exp); }\n #else\n   inline float \n   frexp(float __x, int* __exp) { return ::frexp(__x, __exp); }\n@@ -303,7 +388,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_LDEXPF\n   inline float \n-  ldexp(float __x, int __exp) { return ::ldexpf(__x, __exp); }\n+  ldexp(float __x, int __exp) { return __gnu_cxx::__c99_binding::ldexpf(__x, __exp); }\n #else\n   inline float \n   ldexp(float __x, int __exp)\n@@ -323,7 +408,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_LOGF\n   inline float \n-  log(float __x) { return ::logf(__x); }\n+  log(float __x) { return __gnu_cxx::__c99_binding::logf(__x); }\n #else\n   inline float log(float __x)\n   { return ::log(static_cast<double>(__x)); }\n@@ -341,7 +426,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_LOG10F\n   inline float \n-  log10(float __x) { return ::log10f(__x); }\n+  log10(float __x) { return __gnu_cxx::__c99_binding::log10f(__x); }\n #else\n   inline float \n   log10(float __x) { return ::log10(static_cast<double>(__x)); }\n@@ -359,7 +444,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_MODFF\n   inline float \n-  modf(float __x, float* __iptr) { return ::modff(__x, __iptr); }\n+  modf(float __x, float* __iptr) { return __gnu_cxx::__c99_binding::modff(__x, __iptr); }\n #else\n   inline float \n   modf(float __x, float* __iptr)\n@@ -398,7 +483,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_POWF\n   inline float \n-  pow(float __x, float __y) { return ::powf(__x, __y); }\n+  pow(float __x, float __y) { return __gnu_cxx::__c99_binding::powf(__x, __y); }\n #else\n   inline float \n   pow(float __x, float __y)\n@@ -440,7 +525,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_SINHF\n   inline float \n-  sinh(float __x) { return ::sinhf(__x); }\n+  sinh(float __x) { return __gnu_cxx::__c99_binding::sinhf(__x); }\n #else\n   inline float \n   sinh(float __x) { return ::sinh(static_cast<double>(__x)); }\n@@ -468,7 +553,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_TANF\n   inline float \n-  tan(float __x) { return ::tanf(__x); }\n+  tan(float __x) { return __gnu_cxx::__c99_binding::tanf(__x); }\n #else\n   inline float \n   tan(float __x) { return ::tan(static_cast<double>(__x)); }\n@@ -486,7 +571,7 @@ namespace std\n \n #if _GLIBCPP_HAVE_TANHF\n   inline float \n-  tanh(float __x) { return ::tanhf(__x); }\n+  tanh(float __x) { return __gnu_cxx::__c99_binding::tanhf(__x); }\n #else\n   inline float \n   tanh(float __x) { return ::tanh(static_cast<double>(__x)); }\n@@ -503,6 +588,7 @@ namespace std\n \n \n #if _GLIBCPP_USE_C99\n+#if !_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC\n // These are possible macros imported from C99-land. For strict\n // conformance, remove possible C99-injected names from the global\n // namespace, and sequester them in the __gnu_cxx extension namespace. \n@@ -561,6 +647,7 @@ namespace __gnu_cxx\n      __capture_isunordered(_Tp __f1, _Tp __f2) \n      { return isunordered(__f1, __f2); }\n } \n+#endif /* _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n \n #undef fpclassify\n@@ -577,6 +664,7 @@ namespace __gnu_cxx\n #undef isunordered\n \n #if _GLIBCPP_USE_C99\n+#if !_GLIBCPP_USE_C99_FP_MACROS_DYNAMIC\n namespace __gnu_cxx\n {\n   template<typename _Tp>\n@@ -647,6 +735,7 @@ namespace std\n   using __gnu_cxx::islessgreater;\n   using __gnu_cxx::isunordered;\n }\n+#endif /* _GLIBCPP_USE_C99_FP_MACROS_DYNAMIC */\n #endif\n   \n #ifdef _GLIBCPP_NO_TEMPLATE_EXPORT"}, {"sha": "25efa10a192aa6613119ffd0bfc05b9aeba0ca06", "filename": "libstdc++-v3/testsuite/26_numerics/c_math_dynamic.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math_dynamic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b39d0359184bb3a8e9047c36b41af590519255bc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math_dynamic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fc_math_dynamic.cc?ref=b39d0359184bb3a8e9047c36b41af590519255bc", "patch": "@@ -0,0 +1,58 @@\n+// Inspired by libstdc++/7680 & 26_numerics/c_math.cc, 2003-04-12 ljr\n+\n+// Copyright (C) 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// { dg-do link }\n+// { dg-options \"-D_XOPEN_SOURCE\" { target *-*-freebsd* } }\n+\n+#include <cmath>\n+\n+int\n+test01()\n+{\n+  float a = 1.f;\n+  float b;\n+  std::modf(a, &b);\n+  return 0;\n+}\n+\n+int\n+test02 ()\n+{\n+  float a = 0.0f;\n+  float b = std::acos(b);\n+  return 0;\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}]}